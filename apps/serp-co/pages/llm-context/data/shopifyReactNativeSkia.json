[
  {
    "owner": "shopify",
    "repo": "react-native-skia",
    "content": "TITLE: Creating Colorful Circles with React Native Skia\nDESCRIPTION: This example demonstrates how to use React Native Skia to draw three overlapping circles with cyan, magenta, and yellow colors using the multiply blend mode. The code creates a canvas with specified dimensions and renders a group of circles with defined positions and radii.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Canvas, Circle, Group } from \"@shopify/react-native-skia\";\n\nconst App = () => {\n  const width = 256;\n  const height = 256;\n  const r = width * 0.33;\n  return (\n    <Canvas style={{ width, height }}>\n      <Group blendMode=\"multiply\">\n        <Circle cx={r} cy={r} r={r} color=\"cyan\" />\n        <Circle cx={width - r} cy={r} r={r} color=\"magenta\" />\n        <Circle cx={width / 2} cy={width - r} r={r} color=\"yellow\" />\n      </Group>\n    </Canvas>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Circle Animation with React Native Skia and Reanimated\nDESCRIPTION: This snippet demonstrates how to animate three overlapping circles using Reanimated shared values directly as props in React Native Skia. It creates a visually appealing effect by using the 'multiply' blend mode and animating the radius of the circles in a repeating pattern.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useEffect} from \"react\";\nimport {Canvas, Circle, Group} from \"@shopify/react-native-skia\";\nimport {\n  useDerivedValue,\n  useSharedValue,\n  withRepeat,\n  withTiming,\n} from \"react-native-reanimated\";\n\nexport const HelloWorld = () => {\n  const size = 256;\n  const r = useSharedValue(0);\n  const c = useDerivedValue(() => size - r.value);\n  useEffect(() => {\n    r.value = withRepeat(withTiming(size * 0.33, { duration: 1000 }), -1);\n  }, [r, size]);\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group blendMode=\"multiply\">\n        <Circle cx={r} cy={r} r={r} color=\"cyan\" />\n        <Circle cx={c} cy={r} r={r} color=\"magenta\" />\n        <Circle\n          cx={size/2}\n          cy={c}\n          r={r}\n          color=\"yellow\"\n        />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Text with Custom Font in React Native Skia\nDESCRIPTION: Example showing how to load a custom font and render a simple text in a Skia Canvas. The component loads a font file using useFont hook and positions the text using x and y coordinates.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Text, useFont, Fill} from \"@shopify/react-native-skia\";\n\nexport const HelloWorld = () => {\n  const fontSize = 32;\n  const font = useFont(require(\"./my-font.ttf\"), fontSize);\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Fill color=\"white\" />\n      <Text\n        x={0}\n        y={fontSize}\n        text=\"Hello World\"\n        font={font}\n      />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Skia with Yarn\nDESCRIPTION: Command to install the React Native Skia library using Yarn package manager.\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @shopify/react-native-skia\n```\n\n----------------------------------------\n\nTITLE: Creating Snapshots of React Native Views with makeImageFromView\nDESCRIPTION: This example demonstrates how to capture a snapshot of a React Native View as a Skia SkImage. It shows proper implementation including setting up a ref, using collapsable=false to prevent optimization issues, taking the snapshot, and rendering it in a Canvas component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useRef } from \"react\";\nimport { View, Text, PixelRatio, StyleSheet, Pressable } from \"react-native\";\nimport type { SkImage } from \"@shopify/react-native-skia\";\nimport { makeImageFromView, Canvas, Image } from \"@shopify/react-native-skia\";\n\nconst pd = PixelRatio.get();\n\nconst Demo = () => {\n  // Create a ref for the view you'd like to take a snapshot of\n  const ref = useRef<View>(null);\n  // Create a state variable to store the snapshot\n  const [image, setImage] = useState<SkImage | null>(null);\n  // Create a function to take the snapshot\n  const onPress = async () => {\n    // Take the snapshot of the view\n    const snapshot = await makeImageFromView(ref);\n    setImage(snapshot);\n  };\n  return (\n    <View style={{ flex: 1 }}>\n      <Pressable onPress={onPress}>\n        <View\n          ref={ref}\n          // collapsable={false} is important here\n          collapsable={false}\n          style={{ backgroundColor: \"cyan\", flex: 1 }}>\n          <Text>This is a React Native View</Text>\n        </View>\n      </Pressable>\n      {\n        image && (\n          <Canvas style={StyleSheet.absoluteFill}>\n            <Image\n              image={image}\n              x={0}\n              y={0}\n              width={image.width() / pd}\n              height={image.height() / pd}\n            />\n          </Canvas>\n        )\n      }\n    </View>\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Skia with NPM\nDESCRIPTION: Command to install the React Native Skia library using NPM package manager.\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @shopify/react-native-skia\n```\n\n----------------------------------------\n\nTITLE: Setting up Skia Web with Expo\nDESCRIPTION: Commands to install React Native Skia and set up the web support using the setup-skia-web script.\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install @shopify/react-native-skia\n$ yarn setup-skia-web\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Paragraph with Custom Fonts in React Native Skia\nDESCRIPTION: Creates a simple paragraph using custom fonts loaded with useFonts hook. The paragraph displays text with different styles and includes an emoji that will be rendered using the platform's emoji font.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMemo } from \"react\";\nimport { Paragraph, Skia, useFonts, TextAlign, Canvas } from \"@shopify/react-native-skia\";\n\nconst MyParagraph = () => {\n  const customFontMgr = useFonts({\n    Roboto: [\n      require(\"path/to/Roboto-Regular.ttf\"),\n      require(\"path/to/Roboto-Medium.ttf\")\n    ]\n  });\n\n  const paragraph = useMemo(() => {\n    // Are the font loaded already?\n    if (!customFontMgr) {\n      return null;\n    }\n    const paragraphStyle = {\n      textAlign: TextAlign.Center\n    };\n    const textStyle = {\n      color: Skia.Color(\"black\"),\n      fontFamilies: [\"Roboto\"],\n      fontSize: 50,\n    };\n    return Skia.ParagraphBuilder.Make(paragraphStyle, customFontMgr)\n      .pushStyle(textStyle)\n      .addText(\"Say Hello to \")\n      .pushStyle({ ...textStyle, fontStyle: { weight: 500 } })\n      .addText(\"Skia 🎨\")\n      .pop()\n      .build();\n  }, [customFontMgr]);\n\n  // Render the paragraph\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      <Paragraph paragraph={paragraph} x={0} y={0} width={300} />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Color Properties in React Native Skia\nDESCRIPTION: Demonstrates different ways to set colors in React Native Skia components using CSS color strings, hexadecimal numbers in ARGB format, and HSL notation.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Group, Circle, vec} from \"@shopify/react-native-skia\";\n\n<>\n  <Group color=\"red\">\n    <Circle c={vec(0, 0)} r={100} />\n  </Group>\n  {/* 0xffff0000 is also red (format is argb) */}\n  <Group color={0xffff0000}>\n    <Circle c={vec(0, 0)} r={50} />\n  </Group>\n  {/* Any CSS color is valid */}\n  <Group color=\"hsl(120, 100%, 50%)\">\n    <Circle c={vec(0, 0)} r={50} />\n  </Group>\n</>\n```\n\n----------------------------------------\n\nTITLE: Creating Offscreen Drawings with React Native Skia in Node.js\nDESCRIPTION: This code demonstrates how to use React Native Skia in a Node.js environment to create an offscreen drawing. It loads the Skia web implementation, creates a surface, draws three overlapping colored circles with multiply blend mode, and encodes the result as a base64 string. The example shows proper resource cleanup by disposing of the image and surface.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoadSkiaWeb } from \"@shopify/react-native-skia/lib/commonjs/web/LoadSkiaWeb\";\nimport { Circle, drawOffscreen, getSkiaExports, Group, makeOffscreenSurface } from \"@shopify/react-native-skia/lib/commonjs/headless\";\n\n(async () => {\n  const width = 256;\n  const height = 256;\n  const size = 60;\n  const r = size * 0.33;\n  await LoadSkiaWeb();\n  // Once that CanvasKit is loaded, you can access Skia via getSkiaExports()\n  // Alternatively you can do const {Skia} = require(\"@shopify/react-native-skia\")\n  const {Skia} = getSkiaExports();\n  const surface = makeOffscreenSurface(width, height);\n  const image = drawOffscreen(surface,\n    <Group blendMode=\"multiply\">\n      <Circle cx={r} cy={r} r={r} color=\"cyan\" />\n      <Circle cx={size - r} cy={r} r={r} color=\"magenta\" />\n      <Circle\n        cx={size/2}\n        cy={size - r}\n        r={r}\n        color=\"yellow\"\n      />\n    </Group>);\n  console.log(image.encodeToBase64());\n  // Cleaning up CanvasKit resources\n  image.dispose();\n  surface.dispose();\n})();\n```\n\n----------------------------------------\n\nTITLE: Applying Paint Properties to Children with Group in React Native Skia\nDESCRIPTION: This example demonstrates how paint attributes applied to a Group component are inherited by its children. The Group sets a color and stroke style that are applied to its Circle children, with the option to override properties as shown with the innermost circle.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, Circle, Group } from \"@shopify/react-native-skia\";\n\nexport const PaintDemo = () => {\n  const r = 128;\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Circle cx={r} cy={r} r={r} color=\"#51AFED\" />\n      {/* The paint is inherited by the following sibling and descendants. */}\n      <Group color=\"lightblue\" style=\"stroke\" strokeWidth={10}>\n        <Circle cx={r} cy={r} r={r / 2} />\n        <Circle cx={r} cy={r} r={r / 3} color=\"white\" />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Loading and Matching Fonts with useFonts in React Native Skia\nDESCRIPTION: Example demonstrating how to load multiple font variations and match font styles. The component uses useFonts to load different weights of Roboto font and matchFont to create a font object with specific styling.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useFonts, Text, matchFont} from \"@shopify/react-native-skia\";\n\nconst Demo = () => {\n  const fontMgr = useFonts({\n    Roboto: [\n      require(\"./Roboto-Medium.ttf\"),\n      require(\"./Roboto-Regular.ttf\"),\n      require(\"./Roboto-Bold.ttf\"),\n    ]\n  });\n  if (!fontMgr) {\n    return null;\n  }\n  const fontStyle = {\n    fontFamily: \"Roboto\",\n    fontWeight: \"bold\",\n    fontSize: 16\n  } as const;\n  const font = matchFont(fontStyle, fontMgr);\n  return (\n    <Text text=\"Hello World\" y={32} x={32} font={font} />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating styled paragraphs with multiple font styles in React Native Skia\nDESCRIPTION: This example demonstrates how to create a paragraph with different font styles (bold, regular, italic) using React Native Skia. It loads custom Roboto fonts, creates text styles, and builds a paragraph with different styled segments using ParagraphBuilder.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMemo } from \"react\";\nimport { Paragraph, Skia, useFonts, FontStyle } from \"@shopify/react-native-skia\";\n\nconst MyParagraph = () => {\n  const customFontMgr = useFonts({\n    Roboto: [\n        require(\"path/to/Roboto-Italic.ttf\"),\n        require(\"path/to/Roboto-Regular.ttf\"),\n        require(\"path/to/Roboto-Bold.ttf\")\n    ],\n  });\n\n  const paragraph = useMemo(() => {\n    // Are the custom fonts loaded?\n    if (!customFontMgr) {\n      return null;\n    }\n    const textStyle = {\n      fontSize: 24,\n      fontFamilies: [\"Roboto\"],\n      color: Skia.Color(\"#000\"),\n    };\n\n    const paragraphBuilder = Skia.ParagraphBuilder.Make({}, customFontMgr);\n    paragraphBuilder\n      .pushStyle({ ...textStyle, fontStyle: FontStyle.Bold })\n      .addText(\"This text is bold\\n\")\n      .pop()\n      .pushStyle({ ...textStyle, fontStyle: FontStyle.Normal })\n      .addText(\"This text is regular\\n\")\n      .pop()\n      .pushStyle({ ...textStyle, fontStyle: FontStyle.Italic })\n      .addText(\"This text is italic\")\n      .pop()\n      .build();\n    return paragraphBuilder.build();\n  }, [customFontMgr]);\n\n  return <Paragraph paragraph={paragraph} x={0} y={0} width={300} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Images with useImage Hook in React Native Skia\nDESCRIPTION: This snippet demonstrates three different ways to load images using the useImage hook: from JavaScript bundle, from a network URL, and from the Android/iOS bundle.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useImage } from \"@shopify/react-native-skia\";\n// Loads an image from the JavaScript bundle\nconst image1 = useImage(require(\"./assets/oslo\"));\n// Loads an image from the network\nconst image2 = useImage(\"https://picsum.photos/200/300\");\n// Loads an image that was added to the Android/iOS bundle\nconst image3 = useImage(\"Logo\");\n```\n\n----------------------------------------\n\nTITLE: Simple Shader Component Implementation in React Native Skia\nDESCRIPTION: This example shows how to create a SimpleShader component that renders a gradient by mapping x and y coordinates to color channels. The shader is applied to a Fill component inside a Canvas.\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Skia, Canvas, Shader, Fill} from \"@shopify/react-native-skia\";\n\nconst source = Skia.RuntimeEffect.Make(`\nvec4 main(vec2 pos) {\n  // normalized x,y values go from 0 to 1, the canvas is 256x256\n  vec2 normalized = pos/vec2(256);\n  return vec4(normalized.x, normalized.y, 0.5, 1);\n}`)!;\n\nconst SimpleShader = () => {\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      <Fill>\n        <Shader source={source} />\n      </Fill>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Path Interpolation with React Native Skia\nDESCRIPTION: This snippet demonstrates how to use the usePathInterpolation hook to smoothly transition between different SVG paths based on a progress value. The example animates between three different emotional states represented by SVG paths.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect } from 'react';\nimport { useSharedValue, withTiming } from 'react-native-reanimated';\nimport { Skia, usePathInterpolation, Canvas, Path } from '@shopify/react-native-skia';\n\nconst angryPath = Skia.Path.MakeFromSVGString(\"M 16 25 C 32 27 43 28 49 28 C 54 28 62 28 73 26 C 66 54 60 70 55 74 C 51 77 40 75 27 55 C 25 50 21 40 27 55 Z\")!;\nconst normalPath = Skia.Path.MakeFromSVGString(\"M 21 31 C 31 32 39 32 43 33 C 67 35 80 36 81 38 C 84 42 74 57 66 60 C 62 61 46 59 32 50 C 24 44 20 37 21 31 Z\")!;\nconst goodPath = Skia.Path.MakeFromSVGString(\"M 21 45 C 21 37 24 29 29 25 C 34 20 38 18 45 18 C 58 18 69 30 69 45 C 69 60 58 72 45 72 C 32 72 21 60 21 45 Z\")!;\n\nconst Demo = () => {\n  const progress = useSharedValue(0);\n  useEffect(() => {\n    progress.value = withTiming(1, { duration: 1000 });\n  }, []);\n\n  const path = usePathInterpolation(progress, [0, 0.5, 1], [angryPath, normalPath, goodPath]);\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Path path={path} style=\"stroke\" strokeWidth={5} strokeCap=\"round\" strokeJoin=\"round\" />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Paths Using SVG Notation in React Native Skia\nDESCRIPTION: This example demonstrates how to create a path in React Native Skia using SVG path notation. The path defines a star shape using the SVG path format with move (M), line (L), and close (Z) commands.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Path} from \"@shopify/react-native-skia\";\n\nconst SVGNotation = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Path\n        path=\"M 128 0 L 168 80 L 256 93 L 192 155 L 207 244 L 128 202 L 49 244 L 64 155 L 0 93 L 88 80 L 128 0 Z\"\n        color=\"lightblue\"\n      />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using System Fonts with matchFont in React Native Skia\nDESCRIPTION: Example demonstrating how to use system fonts in text rendering. The component selects different default fonts based on platform and applies styling options like font size, style, and weight.\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Platform} from \"react-native\";\nimport {Canvas, Text, matchFont, Fill, Skia} from \"@shopify/react-native-skia\";\n \nconst fontFamily = Platform.select({ ios: \"Helvetica\", default: \"serif\" });\nconst fontStyle = {\n  fontFamily,\n  fontSize: 14,\n  fontStyle: \"italic\",\n  fontWeight: \"bold\",\n};\nconst font = matchFont(fontStyle);\n\nexport const HelloWorld = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Fill color=\"white\" />\n      <Text\n        x={0}\n        y={fontStyle.fontSize}\n        text=\"Hello World\"\n        font={font}\n      />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying SVG Images in React Native Skia\nDESCRIPTION: This example demonstrates how to load an SVG file using useSVG hook and display it in a Canvas using the ImageSVG component. The code handles conditional rendering when the SVG is loaded.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Canvas,\n  ImageSVG,\n  useSVG\n} from \"@shopify/react-native-skia\";\n\nconst ImageSVGDemo = () => {\n  // Alternatively, you can pass an SVG URL directly\n  // for instance: const svg = useSVG(\"https://upload.wikimedia.org/wikipedia/commons/f/fd/Ghostscript_Tiger.svg\");\n  const svg = useSVG(require(\"../../assets/tiger.svg\"));\n  return (\n    <Canvas style={{ flex: 1 }}>\n      { svg && (\n        <ImageSVG\n          svg={svg}\n          width={256}\n          height={256}\n        />)\n      }\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Font Manager with matchFont in React Native Skia\nDESCRIPTION: Example showing how to use matchFont with a custom font manager. This snippet loads Roboto font files and creates a font manager that can be passed to matchFont for font matching.\n\nLANGUAGE: jsx\nCODE:\n```\nimport {matchFont, useFonts} from \"@shopify/react-native-skia\";\n\nconst fontMgr = useFonts({\n  Roboto: [\n    require(\"../../Tests/assets/Roboto-Medium.ttf\"),\n    require(\"../../Tests/assets/Roboto-Bold.ttf\"),\n  ]\n});\n\nconst font = matchFont(fontStyle, fontMgr);\n```\n\n----------------------------------------\n\nTITLE: Implementing Fills and Strokes in React Native Skia\nDESCRIPTION: Example showing how to apply multiple paint styles to a circle, including a light blue fill and two different colored strokes with different widths.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Circle, Paint, vec} from \"@shopify/react-native-skia\";\n\nconst width = 256;\nconst height = 256;\n\nexport const PaintDemo = () => {\n  const strokeWidth = 10;\n  const c = vec(width / 2, height / 2);\n  const r = (width - strokeWidth) / 2;\n  return (\n    <Canvas style={{ width, height}}>\n       <Circle c={c} r={r} color=\"red\">\n        <Paint color=\"lightblue\" />\n        <Paint color=\"#adbce6\" style=\"stroke\" strokeWidth={strokeWidth} />\n        <Paint color=\"#ade6d8\" style=\"stroke\" strokeWidth={strokeWidth / 2} />\n      </Circle>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Box Component with Inner and Outer Shadows in React Native Skia\nDESCRIPTION: This example demonstrates how to create a Box component with multiple box shadows, including both inner and outer shadows. It creates a rounded rectangle with a light blue background and applies four different shadows to create a raised, softened 3D effect.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Box, BoxShadow, Fill, rrect, rect} from \"@shopify/react-native-skia\";\n\nexport const Demo = () => (\n  <Canvas style={{ width: 256, height: 256 }}>\n    <Fill color=\"#add8e6\" />\n    <Box box={rrect(rect(64, 64, 128, 128), 24, 24)} color=\"#add8e6\">\n      <BoxShadow dx={10} dy={10} blur={10} color=\"#93b8c4\" inner />\n      <BoxShadow dx={-10} dy={-10} blur={10} color=\"#c7f8ff\" inner />\n      <BoxShadow dx={10} dy={10} blur={10} color=\"#93b8c4\" />\n      <BoxShadow dx={-10} dy={-10} blur={10} color=\"#c7f8ff\" />\n    </Box>\n  </Canvas>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Gradient in React Native Skia\nDESCRIPTION: Creates a linear gradient that transitions from blue to yellow diagonally across a rectangle. The gradient is defined by start and end points representing opposite corners of the rectangle.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Canvas,\n  Rect,\n  LinearGradient,\n  Skia,\n  Shader,\n  vec\n} from \"@shopify/react-native-skia\";\n\nexport const LinearGradientDemo = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Rect x={0} y={0} width={256} height={256}>\n        <LinearGradient\n          start={vec(0, 0)}\n          end={vec(256, 256)}\n          colors={[\"blue\", \"yellow\"]}\n        />\n      </Rect>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Blob with Custom Font in React Native Skia\nDESCRIPTION: This example demonstrates how to create a TextBlob component with a custom font in React Native Skia. It loads a custom font file, creates a text blob with the message 'Hello World!', and renders it in blue color inside a Canvas.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, TextBlob, Skia, useFont} from \"@shopify/react-native-skia\";\n\n\nexport const HelloWorld = () => {\n  const font = useFont(require(\"./SF-Pro.ttf\"), 24);\n  if (font === null) {\n    return null;\n  }\n  const blob = Skia.TextBlob.MakeFromText(\"Hello World!\", font);\n  return (\n      <Canvas style={{ flex: 1 }}>\n        <TextBlob\n          blob={blob}\n          color=\"blue\"\n        />\n      </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Bridge with its-fine in React Native Skia\nDESCRIPTION: Demonstrates how to use the its-fine library to bridge React contexts between React Native and React Native Skia. The example shows how to access a theme context within a Skia Canvas drawing by using the useContextBridge hook.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Canvas, Fill } from \"@shopify/react-native-skia\";\nimport {useTheme, ThemeProvider, ThemeContext} from \"./docs/getting-started/Theme\";\nimport { useContextBridge, FiberProvider } from \"its-fine\";\n\nconst MyDrawing = () => {\n  const { primary } = useTheme();\n  return <Fill color={primary} />;\n};\n\nexport const Layer = () => {\n  const ContextBridge = useContextBridge();\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <ContextBridge>\n        <Fill color=\"black\" />\n        <MyDrawing />\n      </ContextBridge>\n    </Canvas>\n  );\n};\n\nexport const App = () => {\n  return (\n    <FiberProvider>\n      <ThemeProvider primary=\"red\">\n        <Layer />\n      </ThemeProvider>\n    </FiberProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Paints for Text Styling in React Native Skia\nDESCRIPTION: Demonstrates how to use paint objects for the foreground and background of text styles. Creates a background shader with a gradient effect and a foreground paint with a radial gradient.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMemo } from \"react\";\nimport { Paragraph, Skia, useFonts, Canvas, Rect, TileMode } from \"@shopify/react-native-skia\";\n\n// Our background shader\nconst source = Skia.RuntimeEffect.Make(`\nuniform vec4 position;\nuniform vec4 colors[4];\n\nvec4 main(vec2 pos) {\n  vec2 uv = (pos - vec2(position.x, position.y))/vec2(position.z, position.w);\n  vec4 colorA = mix(colors[0], colors[1], uv.x);\n  vec4 colorB = mix(colors[2], colors[3], uv.x);\n  return mix(colorA, colorB, uv.y);\n}`)!;\n\n// Define an array of colors for the gradient to be used in shader uniform\nconst colors = [\n  // #dafb61\n  0.85, 0.98, 0.38, 1.0,\n  // #61dafb\n  0.38, 0.85, 0.98, 1.0,\n  // #fb61da\n  0.98, 0.38, 0.85, 1.0,\n  // #61fbcf\n  0.38, 0.98, 0.81, 1.0\n];\n\nconst MyParagraph = () => {\n  const paragraph = useMemo(() => {\n\n    // Create a background paint.\n    const backgroundPaint = Skia.Paint();\n    backgroundPaint.setShader(\n      source.makeShader([0, 0, 256, 256, ...colors])\n    );\n\n    // Create a foreground paint. We use a radial gradient.\n    const foregroundPaint = Skia.Paint();\n    foregroundPaint.setShader(\n      Skia.Shader.MakeRadialGradient(\n        { x: 0, y: 0 },\n        256,\n        [Skia.Color(\"magenta\"), Skia.Color(\"yellow\")],\n        null,\n        TileMode.Clamp\n      )\n    );\n\n    const para = Skia.ParagraphBuilder.Make()\n     .pushStyle(\n        {\n          fontFamilies: [\"Roboto\"],\n          fontSize: 72,\n          fontStyle: { weight: 500 },\n          color: Skia.Color(\"black\"),\n        },\n        foregroundPaint,\n        backgroundPaint\n      )\n      .addText(\"Say Hello to React Native Skia\")\n      .pop()\n      .build();\n    return para;\n  }, []);\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      <Paragraph paragraph={paragraph} x={0} y={0} width={256} />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Low-level Font API Usage in React Native Skia\nDESCRIPTION: Example demonstrating the low-level font APIs that power the matchFont function. This shows how to access the system font manager, create custom font managers, and match fonts with specific styles.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Platform} from \"react-native\";\nimport {Skia, FontStyle} from \"@shopify/react-native-skia\";\n \nconst familyName = Platform.select({ ios: \"Helvetica\", default: \"serif\" });\nconst fontSize = 32;\n// Get the system font manager\nconst fontMgr = Skia.FontMgr.System();\n// The custom font manager is available via Skia.TypefaceFontProvider.Make()\nconst customFontMgr = Skia.TypefaceFontProvider.Make();\n// typeface needs to be loaded via Skia.Data and instanciated via\n// Skia.Typeface.MakeFreeTypeFaceFromData()\n// customFontMgr.registerTypeface(customTypeFace, \"Roboto\");\n\n// Matching a font\nconst typeface =  fontMgr.matchFamilyStyle(familyName, FontStyle.Bold);\nconst font = Skia.Font(typeface, fontSize);\n```\n\n----------------------------------------\n\nTITLE: Creating a Circular Text Path in React Native Skia\nDESCRIPTION: This example demonstrates how to draw text along a circular path using React Native Skia's TextPath component. It creates a circular path, loads a custom font, and positions the text along the circle. The text is rotated 180 degrees to display properly around the circle's circumference.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Group, TextPath, Skia, useFont, vec, Fill} from \"@shopify/react-native-skia\";\n\nconst size = 128;\nconst path = Skia.Path.Make();\npath.addCircle(size, size, size/2);\n\nexport const HelloWorld = () => {\n  const font = useFont(require(\"./my-font.ttf\"), 24);\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Fill color=\"white\" />\n      <Group transform={[{ rotate: Math.PI }]} origin={vec(size, size)}>\n        <TextPath font={font} path={path} text=\"Hello World!\" />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Serializing and Recreating Skia Pictures in React Native\nDESCRIPTION: This example demonstrates how to serialize a Picture to a byte array and then recreate a copy from the serialized data. The example creates a picture with a rectangle and circle, serializes it, and displays both the original and the copy.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useMemo } from \"react\";\nimport {\n  createPicture,\n  Canvas,\n  Picture,\n  Skia,\n  Group,\n} from \"@shopify/react-native-skia\";\n\nexport const PictureExample = () => {\n  // Create picture\n  const picture = useMemo(() => createPicture(\n    (canvas) => {\n      const paint = Skia.Paint();\n      paint.setColor(Skia.Color(\"pink\"));\n      canvas.drawRect({ x: 0, y: 0, width: 100, height: 100 }, paint);\n\n      const circlePaint = Skia.Paint();\n      circlePaint.setColor(Skia.Color(\"orange\"));\n      canvas.drawCircle(50, 50, 50, circlePaint);\n    },\n    { width: 100, height: 100 },\n  ), []);\n\n  // Serialize the picture\n  const serialized = useMemo(() => picture.serialize(), [picture]);\n\n  // Create a copy from serialized data\n  const copyOfPicture = useMemo(\n    () => (serialized ? Skia.Picture.MakePicture(serialized) : null),\n    [serialized]\n  );\n\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Picture picture={picture} />\n      <Group transform={[{ translateX: 200 }]}>\n        {copyOfPicture && <Picture picture={copyOfPicture} />}\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Building and Installing React Native Skia from Source\nDESCRIPTION: Commands for building and installing React Native Skia from source, including checking out submodules, installing dependencies, building Skia libraries, and preparing for development.\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init --recursive\nyarn\ncd packages/skia\nyarn build-skia\nyarn copy-skia-headers\nyarn pod:install\n```\n\n----------------------------------------\n\nTITLE: Creating and Rendering a Basic Picture in React Native Skia\nDESCRIPTION: This example demonstrates how to create a Picture using createPicture() and render it on a canvas. The picture contains three overlapping circles with different colors using multiply blend mode to create a color mixing effect.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useMemo } from \"react\";\nimport {\n  createPicture,\n  Canvas,\n  Picture,\n  Skia,\n  Group,\n  BlendMode\n} from \"@shopify/react-native-skia\";\n\nexport const HelloWorld = () => {\n  // Create a picture\n  const picture = useMemo(() => createPicture(\n    (canvas) => {\n      const size = 256;\n      const r = 0.33 * size;\n      const paint = Skia.Paint();\n      paint.setBlendMode(BlendMode.Multiply);\n\n      paint.setColor(Skia.Color(\"cyan\"));\n      canvas.drawCircle(r, r, r, paint);\n\n      paint.setColor(Skia.Color(\"magenta\"));\n      canvas.drawCircle(size - r, r, r, paint);\n\n      paint.setColor(Skia.Color(\"yellow\"));\n      canvas.drawCircle(size / 2, size - r, r, paint);\n    }\n  ), []);\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Picture picture={picture} />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Effects to Pictures Using Group Layer in React Native Skia\nDESCRIPTION: This example shows how to apply effects to a Picture component using the layer property of a Group. The example applies a blur effect to the same three-circle picture from the first example.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Canvas, Skia, Group, Paint, Blur, createPicture, BlendMode, Picture } from \"@shopify/react-native-skia\";\n\nconst width = 256;\nconst height = 256;\n\nexport const Demo = () => {\n  const picture = createPicture(\n    (canvas) => {\n      const size = 256;\n      const r = 0.33 * size;\n      const paint = Skia.Paint();\n      paint.setBlendMode(BlendMode.Multiply);\n\n      paint.setColor(Skia.Color(\"cyan\"));\n      canvas.drawCircle(r, r, r, paint);\n\n      paint.setColor(Skia.Color(\"magenta\"));\n      canvas.drawCircle(size - r, r, r, paint);\n\n      paint.setColor(Skia.Color(\"yellow\"));\n      canvas.drawCircle(size / 2, size - r, r, paint);\n    }\n  );\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group layer={<Paint><Blur blur={10} /></Paint>}>\n        <Picture picture={picture} />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading React Native Skia with New Skia Version\nDESCRIPTION: Commands for upgrading React Native Skia when a new version of Skia is included, including updating submodules, cleaning and rebuilding Skia, and installing pods.\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --recursive --remote\nyarn clean-skia\nyarn build-skia\nyarn copy-skia-headers\ncd example/ios && pod install && cd ..\n```\n\n----------------------------------------\n\nTITLE: Centering Text with textAlign Property in React Native Skia\nDESCRIPTION: Demonstrates how to center text within a paragraph using the textAlign property set to TextAlign.Center in the paragraph style.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMemo } from \"react\";\nimport { Paragraph, Skia, TextAlign, Canvas, Rect } from \"@shopify/react-native-skia\";\n\nconst MyParagraph = () => {\n  const paragraph = useMemo(() => {\n    const para = Skia.ParagraphBuilder.Make({\n          textAlign: TextAlign.Center,\n      })\n      .addText(\"Say Hello to React Native Skia\")\n      .build();\n    return para;\n  }, []);\n\n  // Render the paragraph with the text center\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      <Paragraph paragraph={paragraph} x={0} y={0} width={200} />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Publishing React Native Skia Package\nDESCRIPTION: Commands for publishing the React Native Skia package, including building Android binaries, building the NPM package, and installing Cocoapods in the example project.\n\nLANGUAGE: bash\nCODE:\n```\nyarn build-skia-android\nyarn build-npm\ncd example/ios && pod install && cd ..\n```\n\n----------------------------------------\n\nTITLE: Getting Paragraph Bounding Box in React Native Skia\nDESCRIPTION: Demonstrates how to calculate and display the bounding box of a paragraph by calling layout() to compute dimensions and then using getHeight() and getLongestLine() to access the calculated values.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMemo } from \"react\";\nimport { Paragraph, Skia, useFonts, Canvas, Rect } from \"@shopify/react-native-skia\";\n\nconst MyParagraph = () => {\n  const paragraph = useMemo(() => {\n    const para = Skia.ParagraphBuilder.Make()\n      .addText(\"Say Hello to React Native Skia\")\n      .build();\n    // Calculate the layout\n    para.layout(200);\n    return para;\n  }, []);\n  // Now the paragraph height is available\n  const height = paragraph.getHeight();\n  const width = paragraph.getLongestLine();\n  // Render the paragraph\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      {/* Maximum paragraph width */}\n      <Rect x={0} y={0} width={200} height={256} color=\"magenta\" />\n      {/* Paragraph bounding box */}\n      <Rect x={0} y={0} width={width} height={height} color=\"cyan\" />\n      <Paragraph paragraph={paragraph} x={0} y={0} width={200} />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Effects to Paragraphs in React Native Skia\nDESCRIPTION: Shows how to apply effects to a Paragraph component using the layer property. This example applies a blur image filter to the text.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Canvas, Skia, Group, Paint, Blur, Paragraph } from \"@shopify/react-native-skia\";\n\nconst width = 256;\nconst height = 256;\n\nexport const Demo = () => {\n  const paragraph = Skia.ParagraphBuilder.Make()\n          .pushStyle({\n            color: Skia.Color(\"black\"),\n            fontSize: 25,\n          })\n          .addText(\"Hello Skia\")\n          .build();\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group layer={<Paint><Blur blur={10} /></Paint>}>\n        <Paragraph paragraph={paragraph} x={0} y={0} width={width} />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests for React Native Skia\nDESCRIPTION: Commands for running end-to-end tests in the React Native Skia example app using different testing approaches, including running all tests or targeting specific test files.\n\nLANGUAGE: bash\nCODE:\n```\ncd example\nyarn ios # or yarn android for Android testing\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn e2e\n```\n\nLANGUAGE: bash\nCODE:\n```\nE2E=true yarn test -i e2e/Colors\n```\n\n----------------------------------------\n\nTITLE: Applying Opacity in React Native Skia\nDESCRIPTION: Shows how to set opacity on a Group component which affects all descendant elements. The example creates concentric circles with different colors and stroke widths, all with 50% opacity.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Circle, Group, Paint, vec} from \"@shopify/react-native-skia\";\n\nconst width = 256;\nconst height = 256;\nconst strokeWidth = 30;\nconst r = width / 2 - strokeWidth / 2;\nconst c = vec(width / 2, height / 2);\n\nexport const OpacityDemo = () => {\n  return (\n    <Canvas style={{ width, height }}>\n      <Group opacity={0.5}>\n        <Circle c={c} r={r} color=\"red\" />\n        <Circle\n          c={c}\n          r={r}\n          color=\"lightblue\"\n          style=\"stroke\"\n          strokeWidth={strokeWidth}\n        />\n        <Circle\n          c={c}\n          r={r}\n          color=\"mint\"\n          style=\"stroke\"\n          strokeWidth={strokeWidth / 2}\n        />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Eval Method for Imperative API Testing in React Native Skia\nDESCRIPTION: Example of using the 'eval' method to test Skia's imperative API in end-to-end tests. This demonstrates a pure function that invokes Skia operations and returns a serialized result.\n\nLANGUAGE: tsx\nCODE:\n```\nit(\"should generate commands properly\", async () => {\n  const result = await surface.eval((Skia) => {\n    const path = Skia.Path.Make();\n    path.lineTo(30, 30);\n    return path.toCmds();\n  });\n  expect(result).toEqual([[0, 0, 0], [1, 30, 30]]);\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Emoji Font for Web in React Native Skia\nDESCRIPTION: Shows how to load a custom emoji font specifically for web platform to ensure proper emoji rendering by adding it to the list of font families.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFonts, Skia } from \"@shopify/react-native-skia\";\n\nconst customFontMgr = useFonts({\n  Roboto: [\n    require(\"path/to/Roboto-Regular.ttf\"),\n    require(\"path/to/Roboto-Medium.ttf\")\n  ],\n  // Only load the emoji font on Web\n  Noto: [\n    require(\"path/to/NotoColorEmoji.ttf\")\n  ]\n});\n\n// We add Noto to the list of font families\nconst textStyle = {\n  color: Skia.Color(\"black\"),\n  fontFamilies: [\"Roboto\", \"Noto\"],\n  fontSize: 50,\n};\n```\n\n----------------------------------------\n\nTITLE: Drawing Vertical Text with Glyphs Component in React Native Skia\nDESCRIPTION: This example demonstrates how to use the Glyphs component to draw text vertically instead of horizontally. It loads a custom font, converts a string to glyph IDs, and positions each glyph below the previous one with proper spacing based on font size.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Glyphs, vec, useFont} from \"@shopify/react-native-skia\";\n\nexport const HelloWorld = () => {\n  const fontSize = 32;\n  const font = useFont(require(\"./my-font.otf\"), fontSize);\n  if (font === null) {\n    return null;\n  }\n  const glyphs = font\n    .getGlyphIDs(\"Hello World!\")\n    .map((id, i) => ({ id, pos: vec(0, (i + 1) * fontSize) }));\n  return (\n    <Canvas style={{ flex:  1 }}>\n      <Glyphs\n        font={font}\n        glyphs={glyphs}\n      />\n    </Canvas>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Context Data to Eval Method in React Native Skia Tests\nDESCRIPTION: Example of passing additional context data to the 'eval' method in React Native Skia tests, which helps in testing functions that need external data while maintaining an isolated execution context.\n\nLANGUAGE: tsx\nCODE:\n```\nit(\"should generate commands properly\", async () => {\n  // Referencing the SVG variable directly in the tests would fail\n  // as the function wouldn't be able to run in an isolated context\n  const svg = \"M 0 0, L 30 30\";\n  const result = await surface.eval((Skia, ctx) => {\n    const path = Skia.Path.MakeFromSVGString(ctx.svg);\n    return path.toCmds();\n  }, { svg });\n  expect(result).toEqual([[0, 0, 0], [1, 30, 30]]);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Blend Shader with RadialGradient and Turbulence in React Native Skia\nDESCRIPTION: This example demonstrates how to use the Blend component to combine a RadialGradient with a Turbulence shader using the 'difference' blend mode. The code creates a visually interesting effect within a 256x256 rectangle.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Canvas,\n  Rect,\n  Turbulence,\n  Skia,\n  Shader,\n  Fill,\n  RadialGradient,\n  Blend,\n  vec\n} from \"@shopify/react-native-skia\";\n\nexport const BlendDemo = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Rect x={0} y={0} width={256} height={256}>\n        <Blend mode=\"difference\">\n          <RadialGradient\n            r={128}\n            c={vec(128, 128)}\n            colors={[\"blue\", \"yellow\"]}\n          />\n          <Turbulence freqX={0.05} freqY={0.05} octaves={4} />\n        </Blend>\n      </Rect>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Draw Method for Component Testing in React Native Skia\nDESCRIPTION: Example of using the 'draw' method to test Skia components and validate the resulting image output, demonstrating the declarative API testing approach.\n\nLANGUAGE: tsx\nCODE:\n```\nit(\"Path with default fillType\", async () => {\n  const { Skia } = importSkia();\n  const path = star(Skia);\n  const img = await surface.draw(\n    <>\n      <Fill color=\"white\" />\n      <Path path={path} style=\"stroke\" strokeWidth={4} color=\"#3EB489\" />\n      <Path path={path} color=\"lightblue\" />\n    </>\n  );\n  checkImage(image, \"snapshots/drawings/path.png\");\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Rectangle with React Native Skia\nDESCRIPTION: This example demonstrates how to create a basic rectangle using the Rect component from React Native Skia. It displays a light blue rectangle that fills its container.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, Rect } from \"@shopify/react-native-skia\";\n\nconst RectDemo = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Rect x={0} y={0} width={256} height={256} color=\"lightblue\" />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Rounded Rectangle with React Native Skia\nDESCRIPTION: This example shows how to render a rounded rectangle with uniform corner radius using the RoundedRect component. It creates a light blue rounded rectangle with 25-pixel radius corners.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, RoundedRect } from \"@shopify/react-native-skia\";\n\nconst RectDemo = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <RoundedRect\n        x={0}\n        y={0}\n        width={256}\n        height={256}\n        r={25}\n        color=\"lightblue\"\n      />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using DrawOffscreen Method for Canvas Testing in React Native Skia\nDESCRIPTION: Example of using the 'drawOffscreen' method to receive a canvas object as a parameter and test direct canvas operations, returning the resulting image for validation.\n\nLANGUAGE: tsx\nCODE:\n```\nit(\"Should draw cyan\", async () => {\n  const image = await surface.drawOffscreen(\n    (Skia, canvas, { size }) => {\n      canvas.drawColor(Skia.Color(\"cyan\"));\n    }\n  );\n  checkImage(image, \"snapshots/cyan.png\");\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Corner Radii in RoundedRect\nDESCRIPTION: This example demonstrates how to create a rounded rectangle with different corner radii for each corner. It defines a custom configuration object to specify different radii for each of the four corners.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, RoundedRect } from \"@shopify/react-native-skia\";\n\nconst RectDemo = () => {\n  const size = 256;\n  const r = size * 0.2;\n  const rrct = {\n    rect: { x: 0, y: 0, width: size, height: size },\n    topLeft: { x: 0, y: 0 },\n    topRight: { x: r, y: r },\n    bottomRight: { x: 0, y: 0 },\n    bottomLeft: { x: r, y: r },\n  };\n  return (\n    <Canvas style={{ width: size, height: size }}>\n      <RoundedRect\n        rect={rrct}\n        color=\"lightblue\"\n      />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Graphite Backend in React Native Skia\nDESCRIPTION: Commands for enabling Skia's experimental Graphite backend instead of the default Ganesh backend, showing different setup steps for iOS and Android platforms.\n\nLANGUAGE: bash\nCODE:\n```\nSK_GRAPHITE=1 yarn build-skia\n```\n\nLANGUAGE: bash\nCODE:\n```\nSK_GRAPHITE=1 pod install\n```\n\n----------------------------------------\n\nTITLE: Creating a Difference Between Rectangles with DiffRect\nDESCRIPTION: This example shows how to use the DiffRect component to draw the difference between two rounded rectangles. It creates a shape that represents the outer rectangle with the inner rectangle cut out of it.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, DiffRect, rect, rrect } from \"@shopify/react-native-skia\";\n\nconst DRectDemo = () => {\n  const outer = rrect(rect(0, 0, 256, 256), 25, 25);\n  const inner = rrect(rect(50, 50, 256 - 100, 256 - 100), 50, 50);\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <DiffRect inner={inner} outer={outer} color=\"lightblue\" />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Drawing a Line with React Native Skia\nDESCRIPTION: This example demonstrates how to draw a simple line between two points using the Line component. It creates a diagonal light blue line with a stroke width of 4 pixels.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, Line, vec } from \"@shopify/react-native-skia\";\n\nconst LineDemo = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Line\n        p1={vec(0, 0)}\n        p2={vec(256, 256)}\n        color=\"lightblue\"\n        style=\"stroke\"\n        strokeWidth={4}\n      />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Images from Encoded Data in React Native Skia\nDESCRIPTION: This snippet shows how to create image instances manually using MakeImageFromEncoded with base64-encoded data.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Skia } from \"@shopify/react-native-skia\";\n\n// A sample base64-encoded pixel\nconst data = Skia.Data.fromBase64(\"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==\");\nconst image = Skia.Image.MakeImageFromEncoded(data);\n```\n\n----------------------------------------\n\nTITLE: Creating Polygon Shapes with Points Component\nDESCRIPTION: This example shows how to use the Points component to create a star-like polygon shape. It defines an array of points and connects them using the 'polygon' mode with a light blue stroke of 4 pixels width.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, Points, vec } from \"@shopify/react-native-skia\";\n\nconst PointsDemo = () => {\n  const points = [\n    vec(128, 0),\n    vec(168, 80),\n    vec(256, 93),\n    vec(192, 155),\n    vec(207, 244),\n    vec(128, 202),\n    vec(49, 244),\n    vec(64, 155),\n    vec(0, 93),\n    vec(88, 80),\n    vec(128, 0),\n  ];\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Points\n        points={points}\n        mode=\"polygon\"\n        color=\"lightblue\"\n        style=\"stroke\"\n        strokeWidth={4}\n      />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Image Display Example in React Native Skia\nDESCRIPTION: This snippet shows a basic implementation of displaying an image in a React Native Skia Canvas, using the Image component with the contain fit mode.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, Image, useImage } from \"@shopify/react-native-skia\";\n\nconst ImageDemo = () => {\n  const image = useImage(require(\"./assets/oslo.jpg\"));\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Image image={image} fit=\"contain\" x={0} y={0} width={256} height={256} />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating RSXform Transformations for Atlas Sprites in React Native Skia\nDESCRIPTION: Examples of creating different RSXform transformations for use with the Atlas component, including identity, scaling, rotation, and combinations with pivot points.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Skia} from \"@shopify/react-native-skia\";\n\n// 1. Identity (doesn't do anything)\nlet rsxForm = Skia.RSXform(1, 0, 0, 0);\n\n// 2. Scale by 2 and translate by (50, 100)\nrsxForm = Skia.RSXform(2, 0, 50, 100);\n\n// 3. Rotate by PI/4, default pivot point is (0,0), translate by (50, 100)\nconst r = Math.PI/4;\nrsxForm = Skia.RSXform(Math.cos(r), Math.sin(r), 50, 100);\n\n// 4. Scale by 2, rotate by PI/4 with pivot point (25, 25)\nrsxForm = Skia.RSXformFromRadians(2, r, 0, 0, 25, 25);\n\n// 5. translate by (125, 0), rotate by PI/4 with pivot point (125, 25)\nrsxForm = Skia.RSXformFromRadians(1, r, 100, 0, 125, 25);\n```\n\n----------------------------------------\n\nTITLE: Basic Atlas Component Implementation in React Native Skia\nDESCRIPTION: A simple example showing how to draw a custom rectangle as an image and display it 150 times with different transformations using the Atlas component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Skia, drawAsImage, Group, Rect, Canvas, Atlas, rect} from \"@shopify/react-native-skia\";\n\nconst size = { width: 25, height: 11.25 };\nconst strokeWidth = 2;\nconst imageSize = {\n    width: size.width + strokeWidth,\n    height: size.height + strokeWidth,\n};\nconst image = drawAsImage(\n    <Group>\n    <Rect\n        rect={rect(strokeWidth / 2, strokeWidth / 2, size.width, size.height)}\n        color=\"cyan\"\n    />\n    <Rect\n        rect={rect(strokeWidth / 2, strokeWidth / 2, size.width, size.height)}\n        color=\"blue\"\n        style=\"stroke\"\n        strokeWidth={strokeWidth}\n    />\n    </Group>,\n    imageSize\n);\n\nexport const Demo = () => {\n  const numberOfBoxes = 150;\n  const pos = { x: 128, y: 128 };\n  const width = 256;\n  const sprites = new Array(numberOfBoxes)\n    .fill(0)\n    .map(() => rect(0, 0, imageSize.width, imageSize.height));\n  const transforms = new Array(numberOfBoxes).fill(0).map((_, i) => {\n    const tx = 5 + ((i * size.width) % width);\n    const ty = 25 + Math.floor(i / (width / size.width)) * size.width;\n    const r = Math.atan2(pos.y - ty, pos.x - tx);\n    return Skia.RSXform(Math.cos(r), Math.sin(r), tx, ty);\n  });\n\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Atlas image={image} sprites={sprites} transforms={transforms} />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Image Sampling Options in React Native Skia\nDESCRIPTION: This snippet demonstrates how to use different sampling options when displaying images, including cubic sampling and filter/mipmap modes for controlling image quality.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, Image, useImage, CubicSampling, FilterMode, MipmapMode } from \"@shopify/react-native-skia\";\n\nconst ImageDemo = () => {\n  const image = useImage(require(\"./assets/oslo.jpg\"));\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Image\n        image={image}\n        fit=\"contain\"\n        x={0}\n        y={0}\n        width={256}\n        height={256}\n        sampling={CubicSampling}\n      />\n      <Image\n        image={image}\n        fit=\"contain\"\n        x={0}\n        y={0}\n        width={256}\n        height={256}\n        sampling={{ filter: FilterMode.Nearest, mipmap: MipmapMode.Nearest }}\n      />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Animating Atlas Component with Reanimated in React Native Skia\nDESCRIPTION: Advanced example showing how to integrate the Atlas component with Reanimated and Gesture Handler to create interactive, animated sprites that respond to touch gestures.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Skia, drawAsImage, Group, Rect, Canvas, Atlas, rect, useTexture, useRSXformBuffer} from \"@shopify/react-native-skia\";\nimport {useSharedValue, useDerivedValue} from \"react-native-reanimated\";\nimport {GestureDetector, Gesture} from \"react-native-gesture-handler\";\n\nconst size = { width: 25, height: 11.25 };\nconst strokeWidth = 2;\nconst textureSize = {\n    width: size.width + strokeWidth,\n    height: size.height + strokeWidth,\n};\n\nexport const Demo = () => {\n  const pos = useSharedValue({ x: 0, y: 0 });\n  const texture = useTexture(\n    <Group>\n      <Rect\n        rect={rect(strokeWidth / 2, strokeWidth / 2, size.width, size.height)}\n        color=\"cyan\"\n      />\n      <Rect\n        rect={rect(strokeWidth / 2, strokeWidth / 2, size.width, size.height)}\n        color=\"blue\"\n        style=\"stroke\"\n        strokeWidth={strokeWidth}\n      />\n    </Group>,\n    textureSize\n  );\n  const gesture = Gesture.Pan().onChange((e) => (pos.value = e));\n  const numberOfBoxes = 150;\n  const width = 256;\n  const sprites = new Array(numberOfBoxes)\n    .fill(0)\n    .map(() => rect(0, 0, textureSize.width, textureSize.height));\n\n  const transforms = useRSXformBuffer(numberOfBoxes, (val, i) => {\n    \"worklet\";\n    const tx = 5 + ((i * size.width) % width);\n    const ty = 25 + Math.floor(i / (width / size.width)) * size.width;\n    const r = Math.atan2(pos.value.y - ty, pos.value.x - tx);\n    val.set(Math.cos(r), Math.sin(r), tx, ty);\n  });\n\n  return (\n    <GestureDetector gesture={gesture}>\n      <Canvas style={{ flex: 1 }}>\n        <Atlas image={texture} sprites={sprites} transforms={transforms} />\n      </Canvas>\n    </GestureDetector>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Rendering Inline SVG in React Native Skia\nDESCRIPTION: This snippet shows how to create an SVG from an inline string using Skia.SVG.MakeFromString and render it with ImageSVG. It creates a simple circle with specific positioning and dimensions.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Canvas, ImageSVG, Skia } from \"@shopify/react-native-skia\";\n\nconst svg = Skia.SVG.MakeFromString(\n  `<svg viewBox='0 0 290 500' xmlns='http://www.w3.org/2000/svg'>\n    <circle cx='31' cy='325' r='120px' fill='#c02aaa'/>\n  </svg>`\n)!;\n\nexport const SVG = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <ImageSVG\n        svg={svg}\n        x={0}\n        y={0}\n        width={290}\n        height={500}\n      />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Texture Mapping with Vertices in React Native Skia\nDESCRIPTION: This example demonstrates how to use texture mapping with the Vertices component. It creates triangles with different rendering approaches - one with colors and another with textures. The ImageShader provides the texture for mapping onto the vertices.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, Group, ImageShader, Vertices, vec, useImage } from \"@shopify/react-native-skia\";\n\nconst VerticesDemo = () => {\n  const image = useImage(require(\"./assets/squares.png\"));\n  const vertices = [vec(64, 0), vec(128, 256), vec(0, 256)];\n  const colors = [\"#61dafb\", \"#fb61da\", \"#dafb61\"];\n  const textures = [vec(0, 0), vec(0, 128), vec(64, 256)];\n  if (!image) {\n    return null;\n  }\n  return (\n    <Canvas style={{ flex: 1 }}>\n      {/* This is our texture */}\n      <Group>\n        <ImageShader\n          image={image}\n          tx=\"repeat\"\n          ty=\"repeat\"\n        />\n        {/* Here we specified colors, the default blendMode is dstOver */}\n        <Vertices vertices={vertices} colors={colors} />\n        <Group transform={[{ translateX: 128 }]}>\n          {/* Here we didn't specify colors, the default blendMode is srcOver */}\n          <Vertices vertices={vertices} textures={textures} />\n        </Group>\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Indices with Vertices in React Native Skia\nDESCRIPTION: This example shows how to use indices with the Vertices component to create triangles from a set of vertices. Four vertices are defined to form a rectangle, and indices are used to specify which vertices form each of the two triangles without duplicating vertex data.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, Vertices, vec } from \"@shopify/react-native-skia\";\n\nconst IndicesDemo = () => {\n  const vertices = [vec(0, 0), vec(256, 0), vec(256, 256), vec(0, 256)];\n  const colors = [\"#61DAFB\", \"#fb61da\", \"#dafb61\", \"#61fbcf\"];\n  const triangle1 = [0, 1, 2];\n  const triangle2 = [0, 2, 3];\n  const indices = [...triangle1, ...triangle2];\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Vertices vertices={vertices} colors={colors} indices={indices} />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Scaling SVG to Fit Container in React Native Skia\nDESCRIPTION: This example demonstrates how to scale an SVG to fit the canvas dimensions using the fitbox function. It creates an SVG with absolute dimensions and then scales it to fit within the specified container.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Canvas, ImageSVG, Skia, rect, fitbox, Group } from \"@shopify/react-native-skia\";\n\nconst svg = Skia.SVG.MakeFromString(\n  `<svg viewBox='0 0 20 20' width=\"20\" height=\"20\" xmlns='http://www.w3.org/2000/svg'>\n    <circle cx='10' cy='10' r='10' fill='#00ffff'/>\n  </svg>`\n)!;\n\nconst width = 256;\nconst height = 256;\nconst src = rect(0, 0, svg.width(), svg.height());\nconst dst = rect(0, 0, width, height);\n\nexport const SVG = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n    <Group transform={fitbox(\"contain\", src, dst)}>\n      <ImageSVG svg={svg} x={0} y={0} width={20} height={20} />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Colored Patch with React Native Skia\nDESCRIPTION: This example demonstrates how to create a colored patch using the Patch component from React Native Skia. It defines four corners with control points for cubic Bezier curves and applies different colors to each corner. The patch is rendered within a Canvas component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Patch, vec} from \"@shopify/react-native-skia\";\n\nconst PatchDemo = () => {\n  const colors = [\"#61dafb\", \"#fb61da\", \"#61fbcf\", \"#dafb61\"];\n  const C = 64;\n  const width = 256;\n  const topLeft = { pos: vec(0, 0), c1: vec(0, C), c2: vec(C, 0) };\n  const topRight = {\n    pos: vec(width, 0),\n    c1: vec(width, C),\n    c2: vec(width + C, 0),\n  };\n  const bottomRight = {\n    pos: vec(width, width),\n    c1: vec(width, width - 2 * C),\n    c2: vec(width - 2 * C, width),\n  };\n  const bottomLeft = {\n    pos: vec(0, width),\n    c1: vec(0, width - 2 * C),\n    c2: vec(-2 * C, width),\n  };\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Patch\n        colors={colors}\n        patch={[topLeft, topRight, bottomRight, bottomLeft]}\n      />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Opacity Effect to SVG in React Native Skia\nDESCRIPTION: This example shows how to apply an opacity effect to an SVG using the ColorMatrix component with OpacityMatrix. It also demonstrates handling the scaling of the SVG to fit the canvas dimensions.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Canvas, ImageSVG, Skia, rect, fitbox, useSVG, Group, Paint, OpacityMatrix, ColorMatrix } from \"@shopify/react-native-skia\";\n\nconst width = 256;\nconst height = 256;\n\nexport const SVG = () => {\n  const tiger = useSVG(require(\"./tiger.svg\"));\n  if (!tiger) {\n    return null;\n  }\n  const src = rect(0, 0, tiger.width(), tiger.height());\n  const dst = rect(0, 0, width, height);\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group\n        transform={fitbox(\"contain\", src, dst)}\n        layer={<Paint><ColorMatrix matrix={OpacityMatrix(0.5)} /></Paint>}\n      >\n        <ImageSVG svg={tiger} x={0} y={0} width={800} height={800} />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Paths Using Path Object in React Native Skia\nDESCRIPTION: This example shows how to create a path programmatically using the Skia.Path.Make() method. The path is built using movement and line commands to create a star shape, which is then rendered in the Canvas.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Path, Skia} from \"@shopify/react-native-skia\";\n\nconst path = Skia.Path.Make();\npath.moveTo(128, 0);\npath.lineTo(168, 80);\npath.lineTo(256, 93);\npath.lineTo(192, 155);\npath.lineTo(207, 244);\npath.lineTo(128, 202);\npath.lineTo(49, 244);\npath.lineTo(64, 155);\npath.lineTo(0, 93);\npath.lineTo(88, 80);\npath.lineTo(128, 0);\npath.close();\n\nconst PathDemo = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Path\n        path={path}\n        color=\"lightblue\"\n      />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Trimming Paths in React Native Skia\nDESCRIPTION: This example demonstrates the path trimming feature in React Native Skia. The start and end properties (values between 0 and 1) are used to display only a portion of the path, showing only the middle half of the path in this case.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Path} from \"@shopify/react-native-skia\";\n\nconst SVGNotation = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Path\n        path=\"M 128 0 L 168 80 L 256 93 L 192 155 L 207 244 L 128 202 L 49 244 L 64 155 L 0 93 L 88 80 L 128 0 Z\"\n        color=\"lightblue\"\n        style=\"stroke\"\n        strokeJoin=\"round\"\n        strokeWidth={5}\n        // We trim the first and last quarter of the path\n        start={0.25}\n        end={0.75}\n      />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Paint Inheritance in React Native Skia\nDESCRIPTION: Example showing how paint attributes are inherited by descendants. The first circle inherits a light blue fill, while the second circle inherits both the color and a stroke style with a specific width.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Circle, Paint, Group} from \"@shopify/react-native-skia\";\n\nconst width = 256;\nconst height = 256;\n\nexport const PaintDemo = () => {\n  const r = width / 6;\n  return (\n    <Canvas style={{ width, height }}>\n      <Group color=\"lightblue\">\n        <Circle cx={r} cy={r} r={r} />\n        <Group style=\"stroke\" strokeWidth={10}>\n          <Circle cx={3 * r} cy={3 * r} r={r} />\n        </Group>\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill Type in React Native Skia Paths\nDESCRIPTION: This example shows how to use different fill types with paths in React Native Skia. The evenOdd fill type is applied to determine which parts of the overlapping star shape are filled, demonstrating how fillType affects rendering of complex shapes.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Skia, Fill, Path} from \"@shopify/react-native-skia\";\n\nconst star = () => {\n  const R = 115.2;\n  const C = 128.0;\n  const path = Skia.Path.Make();\n  path.moveTo(C + R, C);\n  for (let i = 1; i < 8; ++i) {\n    const a = 2.6927937 * i;\n    path.lineTo(C + R * Math.cos(a), C + R * Math.sin(a));\n  }\n  return path;\n};\n\nexport const HelloWorld = () => {\n  const path = star();\n  return (\n    <Canvas style={{ flex: 1 }}>  \n      <Fill color=\"white\" />\n      <Path path={path} style=\"stroke\" strokeWidth={4} color=\"#3EB489\"/>\n      <Path path={path} color=\"lightblue\" fillType=\"evenOdd\" />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Complex Paint Attributes in React Native Skia\nDESCRIPTION: Demonstration of passing complex painting attributes like LinearGradient as children to Circle and Group components. Each gradient uses different colors and positions to create visual effects.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Circle, Group, LinearGradient, vec} from \"@shopify/react-native-skia\";\n\nconst width = 256;\nconst height = 256;\n\nexport const PaintDemo = () => {\n  const r = width/2;\n  return (\n    <Canvas style={{ width, height }}>\n      <Circle cx={r} cy={r} r={r}>\n        <LinearGradient\n          start={vec(0, 0)}\n          end={vec(2 * r, 2 * r)}\n          colors={[\"#00ff87\", \"#60efff\"]}\n        />\n      </Circle>\n      <Group>\n        <LinearGradient\n          start={vec(2 * r, 2 * r)}\n          end={vec(4 * r, 4 * r)}\n          colors={[\"#0061ff\", \"#60efff\"]}\n        />\n        <Circle cx={3 * r} cy={3 * r} r={r} />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Radial Gradient in React Native Skia\nDESCRIPTION: Creates a radial gradient that transitions from blue at the center to yellow at the edges of a rectangle. The gradient is defined by a center point and radius.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Canvas,\n  Rect,\n  RadialGradient,\n  Skia,\n  Shader,\n  vec\n} from \"@shopify/react-native-skia\";\n\nexport const RadialGradientDemo = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Rect x={0} y={0} width={256} height={256}>\n        <RadialGradient\n          c={vec(128, 128)}\n          r={128}\n          colors={[\"blue\", \"yellow\"]}\n        />\n      </Rect>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Two Point Conical Gradient in React Native Skia\nDESCRIPTION: Creates a two-point conical gradient between two circles with different centers and radii. The gradient transitions from blue to yellow between a large circle centered in the rectangle and a smaller circle near the top.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Canvas,\n  Rect,\n  TwoPointConicalGradient,\n  Skia,\n  Shader,\n  vec\n} from \"@shopify/react-native-skia\";\n\nexport const TwoPointConicalGradientDemo = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Rect x={0} y={0} width={256} height={256}>\n        <TwoPointConicalGradient\n          start={vec(128, 128)}\n          startR={128}\n          end={vec(128, 16)}\n          endR={16}\n          colors={[\"blue\", \"yellow\"]}\n        />\n      </Rect>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Manual Paint Assignment in React Native Skia\nDESCRIPTION: Example showing how to manually create a Paint object using Skia.Paint() and assign it directly to a Circle component. The paint is configured with a light blue color.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Circle, Paint, Skia} from \"@shopify/react-native-skia\";\nconst width = 256;\nconst height = 256;\nconst r = width / 2;\nconst paint = Skia.Paint();\npaint.setColor(Skia.Color(\"lightblue\"));\n\nexport const PaintDemo = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Circle paint={paint} cx={r} cy={r} r={r} />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sweep Gradient in React Native Skia\nDESCRIPTION: Creates a sweep (angular) gradient that rotates around a center point. The gradient transitions through cyan, magenta, yellow, and back to cyan in a circular pattern around the center of the rectangle.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Canvas,\n  Rect,\n  SweepGradient,\n  Skia,\n  Shader,\n  vec\n} from \"@shopify/react-native-skia\";\n\nexport const SweepGradientDemo = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Rect x={0} y={0} width={256} height={256}>\n        <SweepGradient\n          c={vec(128, 128)}\n          colors={[\"cyan\", \"magenta\", \"yellow\", \"cyan\"]}\n        />\n      </Rect>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Simple Transformation with Group in React Native Skia\nDESCRIPTION: This snippet shows how to apply a skew transformation to a RoundedRect using the Group component. The transformation is applied from the top-left corner of the element by default.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, Fill, Group, RoundedRect } from \"@shopify/react-native-skia\";\n\nconst SimpleTransform = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Fill color=\"#e8f4f8\" />\n      <Group color=\"lightblue\" transform={[{ skewX: Math.PI / 6 }]}>\n        <RoundedRect x={64} y={64} width={128} height={128} r={10} />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Color Shader for Solid Background in React Native Skia\nDESCRIPTION: This example shows how to use the ColorShader component to fill the entire canvas with a solid light blue color. The ColorShader is nested inside a Fill component which covers the whole canvas area.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Canvas,\n  Skia,\n  Fill,\n  ColorShader\n} from \"@shopify/react-native-skia\";\n\nexport const BlendDemo = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Fill>\n        <ColorShader color=\"lightBlue\" />\n      </Fill>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Compiling a SKSL Shader with RuntimeEffect.Make in React Native Skia\nDESCRIPTION: This snippet demonstrates how to create and compile a shader using Skia.RuntimeEffect.Make. The shader maps the x and y coordinates to red and green color channels in a 256x256 canvas.\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Skia} from \"@shopify/react-native-skia\";\n\nconst source = Skia.RuntimeEffect.Make(`\nvec4 main(vec2 pos) {\n  // The canvas is 256x256\n  vec2 canvas = vec2(256);\n  // normalized x,y values go from 0 to 1\n  vec2 normalized = pos/canvas;\n  return vec4(normalized.x, normalized.y, 0.5, 1);\n}`);\n\nif (!source) {\n  throw new Error(\"Couldn't compile the shader\")\n}\n```\n\n----------------------------------------\n\nTITLE: Transformation with Custom Origin in React Native Skia\nDESCRIPTION: This example shows how to set a custom origin point for transformations using the origin property. The skew transformation is applied from the specified point (128, 128) rather than the default top-left corner.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, Fill, Group, RoundedRect } from \"@shopify/react-native-skia\";\n\nconst SimpleTransform = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Fill color=\"#e8f4f8\" />\n      <Group\n        color=\"lightblue\"\n        origin={{ x: 128, y: 128 }}\n        transform={[{ skewX: Math.PI / 6 }]}\n      >\n        <RoundedRect x={64} y={64} width={128} height={128} r={10} />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Uniforms with Shaders in React Native Skia\nDESCRIPTION: This snippet demonstrates how to use uniforms to parametrize shaders. It creates a circle with a radius and position defined by uniforms, coloring the inside based on normalized coordinates and a blue parameter.\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Canvas, Skia, Shader, Fill, vec} from \"@shopify/react-native-skia\";\n\nconst source = Skia.RuntimeEffect.Make(`\nuniform vec2 c;\nuniform float r;\nuniform float blue;\n\nvec4 main(vec2 pos) {\n  vec2 normalized = pos/vec2(2 * r);\n  return distance(pos, c) > r ? vec4(1) : vec4(normalized, blue, 1);\n}`)!;\n\nconst UniformShader = () => {\n  const r = 128;\n  const c = vec(2 * r, r);\n  const blue = 1.0;\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      <Fill>\n        <Shader source={source} uniforms={{ c, r, blue }} />\n      </Fill>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rectangular Clipping with Group in React Native Skia\nDESCRIPTION: This code demonstrates how to clip content using a rectangular region. The image is only visible within the rectangular area defined by the clip property, while areas outside the rectangle are hidden.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Canvas,\n  Group,\n  Image,\n  useImage,\n  rect,\n  Fill,\n} from \"@shopify/react-native-skia\";\n\nconst size = 256;\nconst padding = 32;\n\nconst Clip = () => {\n  const image = useImage(require(\"./assets/oslo.jpg\"));\n  const rct = rect(padding, padding, size - padding * 2, size - padding * 2);\n\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Fill color=\"lightblue\" />\n      <Group clip={rct}>\n        <Image\n          image={image}\n          x={0}\n          y={0}\n          width={size}\n          height={size}\n          fit=\"cover\"\n        />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Nested Shaders in React Native Skia\nDESCRIPTION: This example shows how to nest shaders by passing an ImageShader as a child to another Shader. The parent shader applies a sine wave distortion to the x-coordinate of the image shader.\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Canvas, Skia, ImageShader, Shader, Fill, useImage} from \"@shopify/react-native-skia\";\n\nconst source = Skia.RuntimeEffect.Make(`\nuniform shader image;\n\nhalf4 main(float2 xy) {   \n  xy.x += sin(xy.y / 3) * 4;\n  return image.eval(xy).rbga;\n}`)!;\n\nconst NestedShader = () => {\n  const image = useImage(require(\"./assets/oslo.jpg\"));\n  if (!image) {\n    return null;\n  }\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      <Fill>\n        <Shader source={source}>\n          <ImageShader\n            image={image}\n            fit=\"cover\"\n            rect={{ x: 0, y: 0, width: 256, height: 256 }}\n          />\n        </Shader>\n      </Fill>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Fractal Perlin Noise in React Native Skia\nDESCRIPTION: This code demonstrates how to use the FractalNoise component from React Native Skia to create a fractal noise pattern. The example creates a 256x256 pixel area filled with fractal noise using frequency parameters and octaves.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Canvas,\n  Rect,\n  FractalNoise,\n  Skia,\n  Shader,\n  Fill,\n  vec\n} from \"@shopify/react-native-skia\";\n\nexport const FractalNoiseDemo = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Fill color=\"white\" />\n      <Rect x={0} y={0} width={256} height={256}>\n        <FractalNoise freqX={0.05} freqY={0.05} octaves={4} />\n      </Rect>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rounded Rectangle Clipping with Group in React Native Skia\nDESCRIPTION: This example shows how to clip content using a rounded rectangle. The image is only visible within the rounded rectangle area defined by the rrect function, creating a rounded-corner clipping mask.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Canvas,\n  Group,\n  Image,\n  useImage,\n  rrect,\n  rect,\n} from \"@shopify/react-native-skia\";\n\nconst size = 256;\nconst padding = 32;\nconst r = 8;\n\nconst Clip = () => {\n  const image = useImage(require(\"./assets/oslo.jpg\"));\n  const roundedRect = rrect(\n    rect(padding, padding, size - padding * 2, size - padding * 2),\n    r,\n    r\n  );\n\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group clip={roundedRect}>\n        <Image\n          image={image}\n          x={0}\n          y={0}\n          width={size}\n          height={size}\n          fit=\"cover\"\n        />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Turbulence Perlin Noise in React Native Skia\nDESCRIPTION: This code demonstrates how to use the Turbulence component from React Native Skia to create a turbulence noise pattern. The example creates a 256x256 pixel area filled with turbulence noise using the same parameters as in the fractal example.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Canvas,\n  Rect,\n  Turbulence,\n  Skia,\n  Shader,\n  Fill,\n  vec\n} from \"@shopify/react-native-skia\";\n\nexport const TurbulenceDemo = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Fill color=\"white\" />\n      <Rect x={0} y={0} width={256} height={256}>\n        <Turbulence freqX={0.05} freqY={0.05} octaves={4} />\n      </Rect>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Path-Based Clipping with Group in React Native Skia\nDESCRIPTION: This code demonstrates how to clip content using a path in the shape of a star. The image is only visible within the star-shaped path defined using SVG path data, creating a complex custom clipping mask.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Canvas,\n  Group,\n  Image,\n  useImage,\n  Skia,\n} from \"@shopify/react-native-skia\";\n\nconst Clip = () => {\n  const image = useImage(require(\"./assets/oslo.jpg\"));\n  const star = Skia.Path.MakeFromSVGString(\n    \"M 128 0 L 168 80 L 256 93 L 192 155 L 207 244 L 128 202 L 49 244 L 64 155 L 0 93 L 88 80 L 128 0 Z\"\n  )!;\n\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group clip={star}>\n        <Image image={image} x={0} y={0} width={256} height={256} fit=\"cover\" />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Shader with Circle in React Native Skia\nDESCRIPTION: This example demonstrates how to use ImageShader to display an image inside a circular shape. It loads an image using useImage hook, then applies it as a shader to a Circle component with 'cover' fit option to properly scale the image within the circular boundaries.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Canvas,\n  Circle,\n  ImageShader,\n  Skia,\n  Shader,\n  useImage\n} from \"@shopify/react-native-skia\";\n\nconst ImageShaderDemo = () => {\n  const image = useImage(require(\"../../assets/oslo.jpg\"));\n  if (image === null) {\n    return null;\n  }\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Circle cx={128} cy={128} r={128}>\n        <ImageShader\n          image={image}\n          fit=\"cover\"\n          rect={{ x: 0, y: 0, width: 256, height: 256 }}\n        />\n      </Circle>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Video Frames with Color Effects in React Native Skia\nDESCRIPTION: This snippet demonstrates how to load a video using the useVideo hook, display it in a Canvas using ImageShader, and apply a color matrix effect. The video can be paused/played by tapping the screen.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Canvas,\n  ColorMatrix,\n  Fill,\n  ImageShader,\n  useVideo\n} from \"@shopify/react-native-skia\";\nimport { Pressable, useWindowDimensions } from \"react-native\";\nimport { useSharedValue } from \"react-native-reanimated\";\n\nexport const VideoExample = () => {\n  const paused = useSharedValue(false);\n  const { width, height } = useWindowDimensions();\n  const { currentFrame } = useVideo(\n    \"https://bit.ly/skia-video\",\n    {\n      paused,\n    }\n  );\n  return (\n    <Pressable\n      style={{ flex: 1 }}\n      onPress={() => (paused.value = !paused.value)}\n    >\n      <Canvas style={{ flex: 1 }}>\n        <Fill>\n          <ImageShader\n            image={currentFrame}\n            x={0}\n            y={0}\n            width={width}\n            height={height}\n            fit=\"cover\"\n          />\n          <ColorMatrix\n            matrix={[\n              0.95, 0, 0, 0, 0.05, 0.65, 0, 0, 0, 0.15, 0.15, 0, 0, 0, 0.5, 0,\n              0, 0, 1, 0,\n            ]}\n          />\n        </Fill>\n      </Canvas>\n    </Pressable>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Inverted Clipping with Group in React Native Skia\nDESCRIPTION: This snippet shows how to create an inverted clipping effect using the invertClip property. The image is visible only outside the star-shaped clipping path, creating a cut-out effect where the shape would normally be visible.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Canvas,\n  Group,\n  Image,\n  useImage,\n  Skia,\n} from \"@shopify/react-native-skia\";\n\nconst Clip = () => {\n  const image = useImage(require(\"./assets/oslo.jpg\"));\n  const star = Skia.Path.MakeFromSVGString(\n    \"M 128 0 L 168 80 L 256 93 L 192 155 L 207 244 L 128 202 L 49 244 L 64 155 L 0 93 L 88 80 L 128 0 Z\"\n  )!;\n\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group clip={star} invertClip>\n        <Image image={image} x={0} y={0} width={256} height={256} fit=\"cover\" />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Rotated Video with Transform in React Native Skia\nDESCRIPTION: This example demonstrates how to properly handle rotated videos by using the fitbox utility function. It accounts for the video's rotation value and applies the correct transformation to display the video properly scaled and rotated.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Canvas,\n  Image,\n  useVideo,\n  fitbox,\n  rect\n} from \"@shopify/react-native-skia\";\nimport { Pressable, useWindowDimensions } from \"react-native\";\nimport { useSharedValue } from \"react-native-reanimated\";\n\nexport const VideoExample = () => {\n  const paused = useSharedValue(false);\n  const { width, height } = useWindowDimensions();\n  const { currentFrame, rotation, size } = useVideo(\"https://bit.ly/skia-video\");\n  const src = rect(0, 0, size.width, size.height);\n  const dst = rect(0, 0, width, height)\n  const transform = fitbox(\"cover\", src, dst, rotation);\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Image\n        image={currentFrame}\n        x={0}\n        y={0}\n        width={width}\n        height={height}\n        fit=\"none\"\n        transform={transform}\n      />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Layer Effects with Group in React Native Skia\nDESCRIPTION: This example demonstrates how to use the layer property to create a bitmap drawing of children and apply effects to the entire group. It combines blur and color matrix effects on two circles, creating a unified visual effect across multiple elements.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Canvas,\n  Group,\n  Circle,\n  Blur,\n  Paint,\n  ColorMatrix,\n} from \"@shopify/react-native-skia\";\n\nconst Clip = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group\n        color=\"lightblue\"\n        layer={\n          <Paint>\n            <Blur blur={20} />\n            <ColorMatrix\n              matrix={[\n                1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 18, -7,\n              ]}\n            />\n          </Paint>\n        }\n      >\n        <Circle cx={0} cy={128} r={128 * 0.95} />\n        <Circle cx={256} cy={128} r={128 * 0.95} />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Videos from Assets in React Native Skia with Expo\nDESCRIPTION: This utility function demonstrates how to use expo-asset to load video files from the application bundle. It creates a wrapper around useVideo that accepts a require statement for a video file.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useVideo } from \"@shopify/react-native-skia\";\nimport { useAssets } from \"expo-asset\";\n\n// Example usage:\n// const video = useVideoFromAsset(require(\"./BigBuckBunny.mp4\"));\nexport const useVideoFromAsset = (\n  mod: number,\n  options?: Parameters<typeof useVideo>[1]\n) => {\n  const [assets, error] = useAssets([mod]);\n  if (error) {\n    throw error;\n  }\n  return useVideo(assets ? assets[0].localUri : null, options);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Images from Raw Pixel Data in React Native Skia\nDESCRIPTION: This snippet demonstrates how to create images by providing raw pixel data and format specifications using MakeImage.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Skia, AlphaType, ColorType } from \"@shopify/react-native-skia\";\n\nconst pixels = new Uint8Array(256 * 256 * 4);\npixels.fill(255);\nlet i = 0;\nfor (let x = 0; x < 256; x++) {\n  for (let y = 0; y < 256; y++) {\n    pixels[i++] = (x * y) % 255;\n  }\n}\nconst data = Skia.Data.fromBytes(pixels);\nconst img = Skia.Image.MakeImage(\n  {\n    width: 256,\n    height: 256,\n    alphaType: AlphaType.Opaque,\n    colorType: ColorType.RGBA_8888,\n  },\n  data,\n  256 * 4\n);\n```\n\n----------------------------------------\n\nTITLE: Using FitBox in React Native Skia\nDESCRIPTION: Example of using the FitBox component to scale an SVG path to fit a canvas of size 256x256. The FitBox automatically handles the scaling transformation from the source rectangle to the destination rectangle.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, FitBox, Path, rect } from \"@shopify/react-native-skia\";\n\nconst Hello = () => {\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      <FitBox src={rect(0, 0, 664, 308)} dst={rect(0, 0, 256, 256)}>\n        <Path\n          path=\"M 170.1 215.5 C 165 222.3...\"\n          strokeCap=\"round\"\n          strokeJoin=\"round\"\n          style=\"stroke\"\n          strokeWidth={30}\n        />\n      </FitBox>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Morphology Filter with Text in React Native Skia\nDESCRIPTION: This example demonstrates how to use the Morphology image filter component with Text elements. It shows three scenarios: plain text without any filter, text with a dilate effect (default) using radius 1, and text with an erode effect using radius 0.3.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Text, Morphology, useFont} from \"@shopify/react-native-skia\";\n\nexport const MorphologyDemo = () => {\n  const font = useFont(require(\"./SF-Pro.ttf\"), 24);\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      <Text\n        text=\"Hello World\"\n        x={32}\n        y={32}\n        font={font}\n      />\n      <Text\n        text=\"Hello World\"\n        x={32}\n        y={64}\n        font={font}\n      >\n        <Morphology radius={1} />\n      </Text>\n      <Text\n        text=\"Hello World\"\n        x={32}\n        y={96}\n        font={font}\n      >\n        <Morphology radius={0.3} operator=\"erode\" />\n      </Text>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Listing System Fonts in React Native Skia\nDESCRIPTION: Example showing how to list all available system font families. The listFontFamilies function returns different font names depending on the platform (Android or iOS).\n\nLANGUAGE: jsx\nCODE:\n```\nimport {listFontFamilies} from \"@shopify/react-native-skia\";\n\nconsole.log(listFontFamilies());\n```\n\n----------------------------------------\n\nTITLE: Transformation Formula for Displacement Map Filter\nDESCRIPTION: Mathematical formula showing how the displacement map transforms image pixels, where P'(x,y) represents the destination and P(x,y) is the child image, with XC and YC being the component values of the designated channels.\n\nLANGUAGE: plaintext\nCODE:\n```\nP'(x,y) ← P( x + scale * (XC(x,y) - 0.5), y + scale * (YC(x,y) - 0.5))\n```\n\n----------------------------------------\n\nTITLE: Implementing Displacement Map with Perlin Noise in React Native Skia\nDESCRIPTION: Example component demonstrating how to use the DisplacementMap filter with a Turbulence (Perlin Noise) generator in React Native Skia. The component loads an image and applies the displacement map effect with specific channel and scale settings.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, Image, Turbulence, DisplacementMap, useImage } from \"@shopify/react-native-skia\";\n\nconst Filter = () => {\n  const image = useImage(require(\"./assets/oslo.jpg\"));\n  if (!image) {\n    return null;\n  }\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      <Image\n        image={image}\n        x={0}\n        y={0}\n        width={256}\n        height={256}\n        fit=\"cover\"\n      >\n        <DisplacementMap channelX=\"g\" channelY=\"a\" scale={20}>\n          <Turbulence freqX={0.01} freqY={0.05} octaves={2} seed={2} />\n        </DisplacementMap>\n      </Image>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Fonts in React Native Skia\nDESCRIPTION: Shows how to load custom fonts using the useFonts hook by organizing font files by family names. This example loads multiple weights of Roboto and Helvetica fonts.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useFonts} from \"@shopify/react-native-skia\";\n\nconst fontMgr = useFonts({\n  Roboto: [\n    require(\"./Roboto-Medium.ttf\"),\n    require(\"./Roboto-Regular.ttf\"),\n    require(\"./Roboto-Bold.ttf\"),\n  ],\n  Helvetica: [require(\"./Helvetica.ttf\")],\n});\nif (!fontMgr) {\n  // Returns null until all fonts are loaded\n}\n// Now the fonts are available\n```\n\n----------------------------------------\n\nTITLE: Implementing DiscretePathEffect in React Native Skia\nDESCRIPTION: Example of using DiscretePathEffect to break a path into segments and randomly move endpoints. It takes parameters for length, deviation, and an optional seed to modify randomness.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, DiscretePathEffect, Path} from \"@shopify/react-native-skia\";\n\nconst logo = \"M256 128.015C256 111.057 234.762...\";\n\nconst Discrete = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Path path={logo} color=\"#61DAFB\">\n        <DiscretePathEffect length={10} deviation={2} />\n      </Path>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Video Seek and Playback Control in React Native Skia\nDESCRIPTION: This example shows how to implement seek functionality with useVideo hook. When the screen is tapped, the video seeks to the 2 second mark. The snippet also demonstrates setting looping and paused states.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Canvas,\n  Fill,\n  Image,\n  useVideo\n} from \"@shopify/react-native-skia\";\nimport { Pressable, useWindowDimensions } from \"react-native\";\nimport { useSharedValue } from \"react-native-reanimated\";\n\nexport const VideoExample = () => {\n  const seek = useSharedValue<null | number>(null);\n  // Set this value to true to pause the video\n  const paused = useSharedValue(false);\n  const { width, height } = useWindowDimensions();\n  const {currentFrame, currentTime} = useVideo(\n    \"https://bit.ly/skia-video\",\n    {\n      seek,\n      paused,\n      looping: true\n    }\n  );\n  return (\n    <Pressable\n      style={{ flex: 1 }}\n      onPress={() => (seek.value = 2000)}\n    >\n      <Canvas style={{ flex: 1 }}>\n        <Image\n          image={currentFrame}\n          x={0}\n          y={0}\n          width={width}\n          height={height}\n          fit=\"cover\"\n        />\n      </Canvas>\n    </Pressable>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing DashPathEffect in React Native Skia\nDESCRIPTION: Example of using DashPathEffect to add dashes to a path. It requires an intervals array specifying the pattern and an optional phase parameter for offset into the intervals array.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, DashPathEffect, Path} from \"@shopify/react-native-skia\";\n\nconst logo = \"M256 128.015C256 111.057 234.762...\";\n\nconst Discrete = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Path path={logo} color=\"#61DAFB\" style=\"stroke\" strokeWidth={4}>\n        <DashPathEffect intervals={[4, 4]} />\n      </Path>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing CornerPathEffect in React Native Skia\nDESCRIPTION: Example of using CornerPathEffect to turn sharp corners into rounded corners. It takes a radius parameter to define the corner rounding amount.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, CornerPathEffect, Rect} from \"@shopify/react-native-skia\";\n\n\nconst Discrete = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Rect\n        x={64}\n        y={16}\n        width={128}\n        height={256 - 16}\n        color=\"#61DAFB\"\n      >\n        <CornerPathEffect r={64} />\n      </Rect>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Blur Image Filter in React Native Skia\nDESCRIPTION: This snippet demonstrates how to apply a blur effect to an image using React Native Skia. It loads an image and applies a blur with intensity of 4, using the default 'decal' tile mode.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, Blur, Image, useImage } from \"@shopify/react-native-skia\";\n\nconst BlurImageFilter = () => {\n  const image = useImage(require(\"./assets/oslo.jpg\"));\n  if (!image) {\n    return null;\n  }\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Image\n        x={0}\n        y={0}\n        width={256}\n        height={256}\n        image={image}\n        fit=\"cover\"\n      >\n        <Blur blur={4} />\n      </Image>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Path1DPathEffect in React Native Skia\nDESCRIPTION: Example of using Path1DPathEffect to create a dash effect by replicating a specified path. It requires path, advance, phase, and style parameters to control the replication behavior.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Path1DPathEffect, Path} from \"@shopify/react-native-skia\";\n\nconst logo = \"M256 128.015C256 111.057 234.762...\";\n\nconst Path1D = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Path path={logo} color=\"#61DAFB\" style=\"stroke\" strokeWidth={15}>\n        <Path1DPathEffect\n          path=\"M -10 0 L 0 -10, 10 0, 0 10 Z\"\n          advance={20}\n          phase={0}\n          style=\"rotate\"\n        />\n      </Path>\n    </Canvas> \n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Offset Image Filter in React Native Skia\nDESCRIPTION: This example demonstrates how to apply an Offset image filter to an image in React Native Skia. The Offset filter shifts the image by 64 pixels along both X and Y axes, while the background remains light blue.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, Image, Offset, useImage, Fill } from \"@shopify/react-native-skia\";\n\nconst Filter = () => {\n  const image = useImage(require(\"./assets/oslo.jpg\"));\n  if (!image) {\n    return null;\n  }\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      <Fill color=\"lightblue\" />\n      <Image\n        image={image}\n        x={0}\n        y={0}\n        width={256}\n        height={256}\n        fit=\"cover\"\n      >\n        <Offset x={64} y={64} />\n      </Image>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Path2DPathEffect in React Native Skia\nDESCRIPTION: Example of using Path2DPathEffect to stamp a specified path to fill a shape using a transformation matrix. It requires path and matrix parameters to define the pattern and layout.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Path2DPathEffect, Path, processTransform2d} from \"@shopify/react-native-skia\";\n\nconst logo = \"M256 128.015C256 111.057 234.762...\";\n\nconst Path2D = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Path path={logo} color=\"#61DAFB\" style=\"stroke\" strokeWidth={15}>\n        <Path2DPathEffect\n          path=\"M -10 0 L 0 -10, 10 0, 0 10 Z\"\n          matrix={processTransform2d([{ scale: 40 }])}\n        />\n      </Path>\n    </Canvas> \n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Line2DPathEffect in React Native Skia\nDESCRIPTION: Example of using Line2DPathEffect to stamp a specified line pattern to fill a shape based on a transformation matrix. It requires width and matrix parameters to define the pattern.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Line2DPathEffect, Path, processTransform2d} from \"@shopify/react-native-skia\";\n\nconst logo = \"M256 128.015C256 111.057 234.762...\";\n\nconst Line2D = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Path path={logo} color=\"#61DAFB\"  style=\"stroke\" strokeWidth={15}>\n        <Line2DPathEffect\n          width={0}\n          matrix={processTransform2d([{ scale: 8 }])}\n        />\n      </Path>\n    </Canvas> \n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Circle with Runtime Shader Color Manipulation in React Native Skia\nDESCRIPTION: This example demonstrates using RuntimeShader to modify colors in a circle. The shader swaps the blue and green color channels, transforming a light blue circle into mint green. The shader is applied as a filter to the circle drawing.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Text, RuntimeShader, Skia, Group, Circle} from \"@shopify/react-native-skia\";\n\nconst source = Skia.RuntimeEffect.Make(`\nuniform shader image;\n\nhalf4 main(float2 xy) {\n  return image.eval(xy).rbga;\n}\n`)!;\n\nexport const RuntimeShaderDemo = () => {\n  const r = 128;\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group>\n        <RuntimeShader source={source} />\n        <Circle cx={r} cy={r} r={r} color=\"lightblue\" />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries Based on Graphics Backend (Graphite or OpenGL)\nDESCRIPTION: Links the specified libraries to the package based on whether the Skia Graphite backend is enabled (SK_GRAPHITE). With Graphite, additional Dawn libraries are included; otherwise, standard OpenGL ES and EGL libraries are used.\n\nLANGUAGE: cmake\nCODE:\n```\nif(SK_GRAPHITE)\n    target_link_libraries(${PACKAGE_NAME}\n        ${COMMON_LIBS}\n        ${DAWN_NATIVE_LIB}\n        ${DAWN_PLATFORM_LIB}\n        ${DAWN_PROC_LIB}\n    )\nelse()\n    target_link_libraries(${PACKAGE_NAME}\n        ${COMMON_LIBS}\n        -lGLESv2\n        -lEGL\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Supersampling with Runtime Shader in React Native Skia\nDESCRIPTION: This example shows how to implement supersampling to address pixel density issues with RuntimeShader. The technique involves upscaling the drawing to match the device's pixel density before applying the shader, then downscaling back to the original size for display.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Text, RuntimeShader, Skia, Group, Circle, Paint, Fill, useFont} from \"@shopify/react-native-skia\";\nimport {PixelRatio} from \"react-native\";\n\nconst pd = PixelRatio.get();\nconst source = Skia.RuntimeEffect.Make(`\nuniform shader image;\n\nhalf4 main(float2 xy) {\n  if (xy.x < 256 * ${pd}/2) {\n    return color;\n  }\n  return image.eval(xy).rbga;\n}\n`)!;\n\nexport const RuntimeShaderDemo = () => {\n  const r = 128;\n  const font = useFont(require(\"./SF-Pro.ttf\"), 24);\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group transform={[{ scale: 1 / pd }]}>\n        <Group\n          layer={\n            <Paint>\n              <RuntimeShader source={source} />\n            </Paint>\n          }\n          transform={[{ scale: pd }]}\n        >\n          <Fill color=\"#b7c9e2\" />\n          <Text\n            text=\"Hello World\"\n            x={16}\n            y={32}\n            color=\"#e38ede\"\n            font={font}\n          />\n        </Group>\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for React Native Skia Based on React Native Version\nDESCRIPTION: Sets up the common libraries required for React Native Skia, with different configurations based on the React Native version. For version 0.76 and above, it uses a simplified set of dependencies compared to earlier versions.\n\nLANGUAGE: cmake\nCODE:\n```\nif(${REACT_NATIVE_VERSION} GREATER_EQUAL 76)\n    set(COMMON_LIBS\n        ${LOG_LIB}\n        ${REACT_LIB}\n        ${FBJNI_LIBRARY}\n        ${JSI_LIB}\n        ${SKIA_SVG_LIB}\n        ${SKIA_SKSHAPER_LIB}\n        ${SKIA_SKPARAGRAPH_LIB}\n        ${SKIA_SKUNICODE_CORE_LIB}\n        ${SKIA_SKUNICODE_ICU_LIB}\n        ${SKIA_LIB}\n        -ljnigraphics\n        -lGLESv2\n        -lEGL\n        -landroid\n    )\nelse()\n    set(COMMON_LIBS\n        ${LOG_LIB}\n        ${FBJNI_LIBRARY}\n        ${REACT_LIB}\n        ${JSI_LIB}\n        ${REACTNATIVEJNI_LIB}\n        ${RUNTIMEEXECUTOR_LIB}\n        ${TURBOMODULES_LIB}\n        ${SKIA_SVG_LIB}\n        ${SKIA_SKSHAPER_LIB}\n        ${SKIA_SKPARAGRAPH_LIB}\n        ${SKIA_SKUNICODE_CORE_LIB}\n        ${SKIA_SKUNICODE_ICU_LIB}\n        ${SKIA_LIB}\n        -ljnigraphics\n        -lGLESv2\n        -lEGL\n        -landroid\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding React Native version definition\nDESCRIPTION: Adds a preprocessor definition for the React Native version, which will be used in the C++ code to handle version-specific compatibility issues.\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DREACT_NATIVE_VERSION=${REACT_NATIVE_VERSION})\n```\n\n----------------------------------------\n\nTITLE: CSS Drop Shadow Equivalent Example\nDESCRIPTION: A CSS example showing the equivalent filter notation for creating two drop shadows that will be implemented using React Native Skia.\n\nLANGUAGE: css\nCODE:\n```\n.paint {\n  filter: drop-shadow(12px 12px 25px #93b8c4) drop-shadow(-12px -12px 25px #c7f8ff);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Runtime Executor library with version compatibility\nDESCRIPTION: Configures the React Native Runtime Executor library based on version. For React Native 0.76+, this library is not needed. For versions 0.71-0.75, it uses prebuilt binaries, and for earlier versions, it locates the library manually.\n\nLANGUAGE: cmake\nCODE:\n```\nunset(RUNTIMEEXECUTOR_LIB CACHE)\nif(${REACT_NATIVE_VERSION} GREATER_EQUAL 76)\n    # RN 0.76 doesn't have runtimeexecutor\n    # DO NOTHING, we'll not link these libraries\nelseif(${REACT_NATIVE_VERSION} GREATER_EQUAL 71)\n    # RN 0.71 distributes prebuilt binaries.\n    set (RUNTIMEEXECUTOR_LIB \"ReactAndroid::runtimeexecutor\")\nelse()\n    find_library(\n            RUNTIMEEXECUTOR_LIB\n            runtimeexecutor\n            PATHS ${LIBRN_DIR}\n            NO_CMAKE_FIND_ROOT_PATH\n    )\nendif()\nmessage(\"-- RUNTIMEEXECUTOR   : \" ${RUNTIMEEXECUTOR_LIB})\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop Shadows in React Native Skia\nDESCRIPTION: This snippet demonstrates how to create two drop shadows on a rounded rectangle using React Native Skia's Shadow component. It creates a neumorphic effect with light and dark shadows.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Shadow,\n  Fill,\n  RoundedRect,\n  Canvas\n} from \"@shopify/react-native-skia\";\n\nconst Neumorphism = () => {\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      <Fill color=\"lightblue\" />\n      <RoundedRect x={32} y={32} width={192} height={192} r={32} color=\"lightblue\">\n        <Shadow dx={12} dy={12} blur={25} color=\"#93b8c4\" />\n        <Shadow dx={-12} dy={-12} blur={25} color=\"#c7f8ff\" />\n      </RoundedRect>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up React Native JNI library with version compatibility\nDESCRIPTION: Configures the React Native JNI library based on version. For React Native 0.76+, this library is not needed. For versions 0.71-0.75, it uses prebuilt binaries, and for earlier versions, it locates the library manually.\n\nLANGUAGE: cmake\nCODE:\n```\nunset(REACTNATIVEJNI_LIB CACHE)\nif(${REACT_NATIVE_VERSION} GREATER_EQUAL 76)\n    # RN 0.76 doesn't have reactnativejni\n    # DO NOTHING, we'll not link these libraries\nelseif(${REACT_NATIVE_VERSION} GREATER_EQUAL 71)\n    # RN 0.71 distributes prebuilt binaries.\n    set (REACTNATIVEJNI_LIB \"ReactAndroid::reactnativejni\")\nelse()\n    find_library(\n            REACTNATIVEJNI_LIB\n            reactnativejni\n            PATHS ${LIBRN_DIR}\n            NO_CMAKE_FIND_ROOT_PATH\n    )\nendif()\nmessage(\"-- REACTNATIVEJNI   : \" ${REACTNATIVEJNI_LIB})\n```\n\n----------------------------------------\n\nTITLE: Setting up Facebook JNI (fbjni) library with version compatibility\nDESCRIPTION: Configures the Facebook JNI (fbjni) library based on React Native version. For versions 0.71+, it uses prebuilt binaries, while for earlier versions it finds the library in the build directories.\n\nLANGUAGE: cmake\nCODE:\n```\nunset(FBJNI_LIBRARY CACHE)\nif(${REACT_NATIVE_VERSION} GREATER_EQUAL 71)\n    # RN 0.71 distributes prebuilt binaries.\n    set (FBJNI_LIBRARY fbjni::fbjni)\nelse()\n    find_library(\n            FBJNI_LIBRARY\n            fbjni\n            PATHS ${libfbjni_link_DIRS}\n            NO_CMAKE_FIND_ROOT_PATH\n    )\nendif()\nmessage(\"-- FBJNI   : \" ${FBJNI_LIBRARY})\n```\n\n----------------------------------------\n\nTITLE: Implementing Inner Shadows in React Native Skia\nDESCRIPTION: This snippet shows how to create inner shadows on a rounded rectangle using the inner property of the Shadow component in React Native Skia. It creates an inset neumorphic effect.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Shadow,\n  Fill,\n  RoundedRect,\n  Canvas\n} from \"@shopify/react-native-skia\";\n\nconst Neumorphism = () => {\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      <Fill color=\"lightblue\" />\n      <RoundedRect x={32} y={32} width={192} height={192} r={32} color=\"lightblue\">\n        <Shadow dx={12} dy={12} blur={25} color=\"#93b8c4\" inner />\n        <Shadow dx={-12} dy={-12} blur={25} color=\"#c7f8ff\" inner />\n      </RoundedRect>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up React Native core libraries with version compatibility\nDESCRIPTION: Configures the React Native core module libraries based on version. Handles differences between React Native 0.71+ and earlier versions, with special handling for 0.76+ which uses a different packaging structure.\n\nLANGUAGE: cmake\nCODE:\n```\nunset(REACT_LIB CACHE)\nif(${REACT_NATIVE_VERSION} GREATER_EQUAL 76)\n    # RN 0.76 packs react_nativemodule_core into ReactAndroid::reactnative\n    set (REACT_LIB ReactAndroid::reactnative)\nelseif(${REACT_NATIVE_VERSION} GREATER_EQUAL 71)\n    # RN 0.71 distributes prebuilt binaries.\n    set (REACT_LIB ReactAndroid::react_nativemodule_core)\n    else()\n    find_library(\n            REACT_LIB\n            react_nativemodule_core\n            PATHS ${LIBRN_DIR}\n            NO_CMAKE_FIND_ROOT_PATH\n    )\nendif()\nmessage(\"-- REACT   : \" ${REACT_LIB})\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Matrix Filter in React Native Skia\nDESCRIPTION: Creates a color filter using a 5x4 color matrix to modify an image. The example applies a specific color transformation matrix to an image from assets. Requires importing Canvas, ColorMatrix, Image, and useImage from @shopify/react-native-skia.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Canvas,\n  ColorMatrix,\n  Image,\n  useImage,\n} from \"@shopify/react-native-skia\";\n\nconst MatrixColorFilter = () => {\n  const image = useImage(require(\"./assets/oslo.jpg\"));\n\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Image x={0} y={0} width={256} height={256} image={image} fit=\"cover\">\n        <ColorMatrix\n          matrix={[\n            -0.578, 0.99, 0.588, 0, 0, 0.469, 0.535, -0.003, 0, 0, 0.015, 1.69,\n            -0.703, 0, 0, 0, 0, 0, 1, 0,\n          ]}\n        />\n      </Image>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up JSI library with React Native version compatibility\nDESCRIPTION: Configures the JSI (JavaScript Interface) library based on React Native version. Handles differences between RN versions before 0.66, 0.66-0.70, and 0.71+.\n\nLANGUAGE: cmake\nCODE:\n```\nunset(JSI_LIB CACHE)\nif(${REACT_NATIVE_VERSION} LESS 66)\n    # JSI lib didn't exist on RN 0.65 and before. Simply omit it.\n    set (JSI_LIB \"\")\nelseif(${REACT_NATIVE_VERSION} GREATER_EQUAL 71)\n    # RN 0.71 distributes prebuilt binaries.\n    set (JSI_LIB ReactAndroid::jsi)\nelse()\n    # RN 0.66 distributes libjsi.so, can be used instead of compiling jsi.cpp manually.\n    find_library(\n        JSI_LIB\n        jsi\n        PATHS ${LIBRN_DIR}\n        NO_CMAKE_FIND_ROOT_PATH\n    )\nendif()\nmessage(\"-- JSI     : \" ${JSI_LIB})\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native dependencies based on version\nDESCRIPTION: Finds the required React Native packages for versions 0.71 and above which use prebuilt binaries. For older versions, the packages would be found manually.\n\nLANGUAGE: cmake\nCODE:\n```\nif(${REACT_NATIVE_VERSION} GREATER_EQUAL 71)\n    # We need to find packages since from RN 0.71 binaries are prebuilt\n    find_package(fbjni REQUIRED CONFIG)\n    find_package(ReactAndroid REQUIRED CONFIG)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using BlendColor Filter in React Native Skia\nDESCRIPTION: Creates a color filter with a specified color and blend mode. This example demonstrates applying a cyan multiply blend to two overlapping circles of yellow and magenta colors. Uses Canvas, BlendColor, Group, and Circle components.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, BlendColor, Group, Circle } from \"@shopify/react-native-skia\";\n\nconst MatrixColorFilter = () => {\n  const r = 128;\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group>\n        <BlendColor color=\"cyan\" mode=\"multiply\" />\n        <Circle cx={r} cy={r} r={r} color=\"yellow\" />\n        <Circle cx={2 * r} cy={r} r={r} color=\"magenta\" />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Skia static libraries\nDESCRIPTION: Imports the Skia-related static libraries that will be linked with the rnskia module. These include the core Skia library, SVG support, text shaping, paragraph layout, and Unicode handling.\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(skia STATIC IMPORTED)\nset_property(TARGET skia PROPERTY IMPORTED_LOCATION \"${SKIA_LIBS_PATH}/libskia.a\")\n\nadd_library(svg STATIC IMPORTED)\nset_property(TARGET svg PROPERTY IMPORTED_LOCATION \"${SKIA_LIBS_PATH}/libsvg.a\")\n\nadd_library(skshaper STATIC IMPORTED)\nset_property(TARGET skshaper PROPERTY IMPORTED_LOCATION \"${SKIA_LIBS_PATH}/libskshaper.a\")\n\nadd_library(skparagraph STATIC IMPORTED)\nset_property(TARGET skparagraph PROPERTY IMPORTED_LOCATION \"${SKIA_LIBS_PATH}/libskparagraph.a\")\n\nadd_library(skunicode_core STATIC IMPORTED)\nset_property(TARGET skunicode_core PROPERTY IMPORTED_LOCATION \"${SKIA_LIBS_PATH}/libskunicode_core.a\")\n\nadd_library(skunicode_icu STATIC IMPORTED)\nset_property(TARGET skunicode_icu PROPERTY IMPORTED_LOCATION \"${SKIA_LIBS_PATH}/libskunicode_icu.a\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Lerp Color Filter in React Native Skia\nDESCRIPTION: Creates a color filter that linearly interpolates between two other color filters. This example interpolates between a purple and a black-and-white color matrix filter at the midpoint (t=0.5). Requires image from assets.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Canvas,\n  ColorMatrix,\n  Image,\n  useImage,\n  Lerp,\n} from \"@shopify/react-native-skia\";\n\nconst MatrixColorFilter = () => {\n  const image = useImage(require(\"./assets/oslo.jpg\"));\n\n  const blackAndWhite = [\n    0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0,\n  ];\n  const purple = [\n    1, -0.2, 0, 0, 0, 0, 1, 0, -0.1, 0, 0, 1.2, 1, 0.1, 0, 0, 0, 1.7, 1, 0,\n  ];\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Image x={0} y={0} width={256} height={256} image={image} fit=\"cover\">\n        <Lerp t={0.5}>\n          <ColorMatrix matrix={purple} />\n          <ColorMatrix matrix={blackAndWhite} />\n        </Lerp>\n      </Image>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up include directories for rnskia\nDESCRIPTION: Configures include directories for the rnskia library, including React Native headers, JNI bindings, Skia headers, and project-specific code paths. Ensures that all necessary header files can be found during compilation.\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(\n        ${PACKAGE_NAME}\n        PRIVATE\n\n        \"${NODE_MODULES_DIR}/react-native/ReactCommon/callinvoker\"\n        \"${NODE_MODULES_DIR}/react-native/ReactCommon/jsi\"\n        \"${NODE_MODULES_DIR}/react-native/ReactCommon\"\n        \"${NODE_MODULES_DIR}/react-native/ReactCommon/react/nativemodule/core\"\n        \"${NODE_MODULES_DIR}/react-native/ReactCommon/runtimeexecutor\"\n        \"${NODE_MODULES_DIR}/react-native/ReactAndroid/src/main/jni\"\n        \"${NODE_MODULES_DIR}/react-native/ReactAndroid/src/main/java/com/facebook/react/turbomodule/core/jni\"\n\n        cpp/jni/include\n        cpp/rnskia-android\n\n        # Skia headers have to be included with \"fully\"-qualified paths,\n        # so \"include/core/SkRef.h\" instead of \"SkRef.h\", as otherwise\n        # the prefab cannot be shipped.\n        ../cpp/skia\n        ../cpp/dawn/include\n\n        ../cpp/api\n        ../cpp/jsi\n        ../cpp/rnskia\n        ../cpp/rnskia/values\n        ../cpp/utils\n\n        ${libfbjni_include_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the rnskia shared library and its source files\nDESCRIPTION: Declares the main rnskia shared library and all its source files. Includes JNI interfaces, platform-specific implementations, JSI bindings, and core Skia integration code.\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\n        ${PACKAGE_NAME}\n        SHARED\n        \"${PROJECT_SOURCE_DIR}/cpp/jni/JniLoad.cpp\"\n        \"${PROJECT_SOURCE_DIR}/cpp/jni/JniSkiaManager.cpp\"\n\n        \"${PROJECT_SOURCE_DIR}/cpp/jni/JniPlatformContext.cpp\"\n        \"${PROJECT_SOURCE_DIR}/cpp/rnskia-android/gl/Error.cpp\"\n        \"${PROJECT_SOURCE_DIR}/cpp/rnskia-android/RNSkOpenGLCanvasProvider.cpp\"\n        \"${PROJECT_SOURCE_DIR}/cpp/rnskia-android/AHardwareBufferUtils.cpp\"\n        \"${PROJECT_SOURCE_DIR}/cpp/rnskia-android/RNSkAndroidVideo.cpp\"\n\n        \"${PROJECT_SOURCE_DIR}/../cpp/jsi/JsiHostObject.cpp\"\n        \"${PROJECT_SOURCE_DIR}/../cpp/jsi/RuntimeLifecycleMonitor.cpp\"\n        \"${PROJECT_SOURCE_DIR}/../cpp/jsi/RuntimeAwareCache.cpp\"\n        \"${PROJECT_SOURCE_DIR}/../cpp/jsi/JsiPromises.cpp\"\n\n        \"${PROJECT_SOURCE_DIR}/../cpp/rnskia/RNSkManager.cpp\"\n\n        \"${PROJECT_SOURCE_DIR}/../cpp/api/third_party/CSSColorParser.cpp\"\n        \"${PROJECT_SOURCE_DIR}/../cpp/api/third_party/base64.cpp\"\n        ${BACKEND_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Using LinearToSRGBGamma Filter in React Native Skia\nDESCRIPTION: Creates a color filter that converts linear colors to sRGB colors. This example combines LinearToSRGBGamma with a BlendColor filter to apply a lightblue color with srcIn blend mode to a circle element.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Canvas,\n  BlendColor,\n  Group,\n  Circle,\n  LinearToSRGBGamma,\n} from \"@shopify/react-native-skia\";\n\nconst MatrixColorFilter = () => {\n  const r = 128;\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group>\n        <LinearToSRGBGamma>\n          <BlendColor color=\"lightblue\" mode=\"srcIn\" />\n        </LinearToSRGBGamma>\n        <Circle cx={r} cy={r} r={r} />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional JSI setup for older React Native versions\nDESCRIPTION: Includes JSI source for React Native versions older than 0.66. For these older versions, the JSI implementation needs to be compiled directly rather than linked as a library.\n\nLANGUAGE: cmake\nCODE:\n```\nif(${REACT_NATIVE_VERSION} LESS 66)\n        file(\n                TO_CMAKE_PATH\n                \"${NODE_MODULES_DIR}/react-native/ReactCommon/jsi/jsi/jsi.cpp\"\n                INCLUDE_JSI_CPP\n        )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing SRGBToLinearGamma Filter in React Native Skia\nDESCRIPTION: Creates a color filter that converts sRGB colors to linear colors. This example applies SRGBToLinearGamma with a BlendColor filter using lightblue color and srcIn blend mode to a circle element.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Canvas,\n  BlendColor,\n  Group,\n  Circle,\n  SRGBToLinearGamma,\n} from \"@shopify/react-native-skia\";\n\nconst MatrixColorFilter = () => {\n  const r = 128;\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group>\n        <SRGBToLinearGamma>\n          <BlendColor color=\"lightblue\" mode=\"srcIn\" />\n        </SRGBToLinearGamma>\n        <Circle cx={r} cy={r} r={r} />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up Skia library configuration with conditional Graphite or GL support\nDESCRIPTION: Configures Skia libraries path and sets up backend sources based on whether Graphite or OpenGL is being used. For Graphite, it imports Dawn libraries; for GL, it adds OpenGL-specific sources.\n\nLANGUAGE: cmake\nCODE:\n```\n# Import prebuilt SKIA libraries\nset (SKIA_LIBS_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/../libs/android/${ANDROID_ABI}\")\n\nif(SK_GRAPHITE)\n    add_definitions(-DSK_GRAPHITE)\n    set(DAWN_NATIVE_LIB \"libdawn_native_static\")\n    set(DAWN_PLATFORM_LIB \"libdawn_platform_static\")\n    set(DAWN_PROC_LIB \"libdawn_proc_static\")\n    set(BACKEND_SOURCES\n    #TODO: is this source needed to be added?\n        \"${PROJECT_SOURCE_DIR}/../cpp/rnskia/DawnWindowContext.cpp\"\n    )\n    add_library(libdawn_native_static STATIC IMPORTED)\n    set_property(TARGET libdawn_native_static PROPERTY IMPORTED_LOCATION \"${SKIA_LIBS_PATH}/libdawn_native_static.a\")\n\n    add_library(libdawn_platform_static STATIC IMPORTED)\n    set_property(TARGET libdawn_platform_static PROPERTY IMPORTED_LOCATION \"${SKIA_LIBS_PATH}/libdawn_platform_static.a\")\n\n    add_library(libdawn_proc_static STATIC IMPORTED)\n    set_property(TARGET libdawn_proc_static PROPERTY IMPORTED_LOCATION \"${SKIA_LIBS_PATH}/libdawn_proc_static.a\")\nelse()\n    add_definitions(-DSK_GL -DSK_GANESH)\n    set(BACKEND_SOURCES\n        \"${PROJECT_SOURCE_DIR}/cpp/rnskia-android/OpenGLWindowContext.cpp\"\n        \"${PROJECT_SOURCE_DIR}/cpp/rnskia-android/GrAHardwareBufferUtils.cpp\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up build directories for react-native-skia\nDESCRIPTION: Clears cached variables and sets up build directories, locating the React Native library directory, fbjni link directories, and fbjni include directories. Displays build configuration information via debug messages.\n\nLANGUAGE: cmake\nCODE:\n```\n# Clear some variables\nunset(LIBRN_DIR CACHE)\nunset(libfbjni_link_DIRS CACHE)\nunset(libfbjni_include_DIRS CACHE)\n\nset(build_DIR ${CMAKE_SOURCE_DIR}/build)\nfile(GLOB LIBRN_DIR \"${PREBUILT_DIR}/${ANDROID_ABI}\")\nfile(GLOB libfbjni_link_DIRS \"${build_DIR}/fbjni*.aar/jni/${ANDROID_ABI}\")\nfile(GLOB libfbjni_include_DIRS \"${build_DIR}/fbjni-*-headers.jar/\")\n\nmessage(\"-- ABI     : \" ${ANDROID_ABI})\nmessage(\"-- PREBUILT: \" ${PREBUILT_DIR})\nmessage(\"-- BUILD   : \" ${build_DIR})\nmessage(\"-- LIBRN   : \" ${LIBRN_DIR})\n\nlink_directories(../libs/android/${ANDROID_ABI}/)\n```\n\n----------------------------------------\n\nTITLE: Applying a Black and White Color Matrix with BackdropFilter in React Native Skia\nDESCRIPTION: This example demonstrates how to apply a black and white color matrix filter to a specific area of an image using BackdropFilter. It loads an image and applies the filter to the bottom half using a clipping mask.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Canvas,\n  BackdropFilter,\n  Image,\n  ColorMatrix,\n  useImage,\n} from \"@shopify/react-native-skia\";\n\n// https://kazzkiq.github.io/svg-color-filter/\nconst BLACK_AND_WHITE = [\n  0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0,\n];\n\nexport const Filter = () => {\n  const image = useImage(require(\"./assets/oslo.jpg\"));\n\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      <Image image={image} x={0} y={0} width={256} height={256} fit=\"cover\" />\n      <BackdropFilter\n        clip={{ x: 0, y: 128, width: 256, height: 128 }}\n        filter={<ColorMatrix matrix={BLACK_AND_WHITE} />}\n      />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake project configuration for react-native-skia\nDESCRIPTION: Initializes the CMake project with required configuration settings including project name, minimum CMake version, C++ standard, compiler flags, and package names for Skia-related libraries.\n\nLANGUAGE: cmake\nCODE:\n```\nproject(RNSkia)\ncmake_minimum_required(VERSION 3.4.1)\n\nset (CMAKE_VERBOSE_MAKEFILE ON)\nset (CMAKE_CXX_STANDARD 17)\nset(SK_GRAPHITE OFF)\nset (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DSK_BUILD_FOR_ANDROID -DSK_IMAGE_READ_PIXELS_DISABLE_LEGACY_API -DFOLLY_NO_CONFIG=1 -DFOLLY_HAVE_CLOCK_GETTIME=1 -DFOLLY_HAVE_MEMRCHR=1 -DFOLLY_USE_LIBCPP=1 -DFOLLY_MOBILE=1 -DON_ANDROID -DONANDROID\")\nset (PACKAGE_NAME \"rnskia\")\nset (SKIA_LIB \"skia\")\nset (SKIA_SVG_LIB \"svg\")\nset (SKIA_SKSHAPER_LIB \"skshaper\")\nset (SKIA_SKPARAGRAPH_LIB \"skparagraph\")\nset (SKIA_SKUNICODE_CORE_LIB \"skunicode_core\")\nset (SKIA_SKUNICODE_ICU_LIB \"skunicode_icu\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Backdrop Blur Effect with BackdropBlur in React Native Skia\nDESCRIPTION: This example shows how to create a backdrop blur effect on part of an image. It uses BackdropBlur to apply a 4-point blur to the bottom half of the image and adds a semi-transparent black overlay to darken the blurred area.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Canvas,\n  Fill,\n  Image,\n  BackdropBlur,\n  useImage,\n} from \"@shopify/react-native-skia\";\n\nexport const Filter = () => {\n  const image = useImage(require(\"./assets/oslo.jpg\"));\n\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      <Image image={image} x={0} y={0} width={256} height={256} fit=\"cover\" />\n      <BackdropBlur blur={4} clip={{ x: 0, y: 128, width: 256, height: 128 }}>\n        <Fill color=\"rgba(0, 0, 0, 0.2)\" />\n      </BackdropBlur>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Video with Remotion\nDESCRIPTION: Command to build and render the final video from your Remotion composition.\n\nLANGUAGE: console\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Starting Remotion Preview Server\nDESCRIPTION: Command to start the Remotion preview server, which allows you to see your video composition in real-time as you develop.\n\nLANGUAGE: console\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Implementing Luminance Mask in React Native Skia\nDESCRIPTION: Example of using the luminance mask mode where white pixels are visible and black pixels are invisible. The mask consists of a white outer circle and a black inner circle applied to a light blue rectangle.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Mask, Group, Circle, Rect} from \"@shopify/react-native-skia\";\n\nconst Demo = () => (\n  <Canvas style={{ width: 256, height: 256 }}>\n    <Mask\n      mode=\"luminance\"\n      mask={\n        <Group>\n          <Circle cx={128} cy={128} r={128} color=\"white\" />\n          <Circle cx={128} cy={128} r={64} color=\"black\" />\n        </Group>\n      }\n    >\n      <Rect x={0} y={0} width={256} height={256} color=\"lightblue\" />\n    </Mask>\n  </Canvas>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Remotion Project\nDESCRIPTION: Command to install all the necessary dependencies for the Remotion project using npm.\n\nLANGUAGE: console\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Creating Textures from React Elements in React Native Skia\nDESCRIPTION: Demonstrates the useTexture hook to create textures from React elements. This example creates a cyan texture that fills the screen and renders it using the Image component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWindowDimensions } from \"react-native\";\nimport { useTexture } from \"@shopify/react-native-skia\";\nimport { Image, Rect, rect, Canvas, Fill } from \"@shopify/react-native-skia\";\nimport React from \"react\";\n\nconst Demo = () => {\n  const {width, height} = useWindowDimensions();\n  const texture = useTexture(\n      <Fill color=\"cyan\" />,\n    { width, height }\n  );\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Image image={texture} rect={{ x: 0, y: 0, width, height }} />\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running React Native Application on iOS\nDESCRIPTION: Commands to start your React Native application on an iOS simulator after Metro bundler is running.\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm run ios\n\n# OR using Yarn\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Starting Metro Server with npm or Yarn in React Native\nDESCRIPTION: Commands to start Metro bundler, the JavaScript bundler that ships with React Native. This is a required first step before running your application.\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm start\n\n# OR using Yarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Loading Images as Textures in React Native Skia\nDESCRIPTION: Demonstrates the useImageAsTexture hook which uploads an image to the GPU. This example loads an image from assets and renders it as a texture using the Image component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWindowDimensions } from \"react-native\";\nimport { useImageAsTexture } from \"@shopify/react-native-skia\";\nimport { Image, Rect, rect, Canvas, Fill } from \"@shopify/react-native-skia\";\nimport React from \"react\";\n\nconst Demo = () => {\n  const {width, height} = useWindowDimensions();\n  const texture = useImageAsTexture(\n    require(\"./assets/image.png\")\n  );\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Image image={texture} rect={{ x: 0, y: 0, width, height }} />\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running React Native Skia Project with Bun\nDESCRIPTION: Command to execute the main application file (helloWorld.tsx) using the Bun JavaScript runtime.\n\nLANGUAGE: console\nCODE:\n```\nbun ./src/helloWorld.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating Textures from SkPicture in React Native Skia\nDESCRIPTION: Demonstrates the usePictureAsTexture hook which creates a texture from an SkPicture. This example uses the imperative API to create a picture with a cyan background and renders it as a texture.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useWindowDimensions} from \"react-native\";\nimport { usePictureAsTexture } from \"@shopify/react-native-skia\";\nimport { Image, Rect, rect, Canvas, Fill, Skia } from \"@shopify/react-native-skia\";\nimport React from \"react\";\n\nconst rec = Skia.PictureRecorder();\nconst canvas = rec.beginRecording();\ncanvas.drawColor(Skia.Color(\"cyan\"));\nconst picture = rec.finishRecordingAsPicture();\n\nconst Demo = () => {\n  const {width, height} = useWindowDimensions();\n  const texture = usePictureAsTexture(\n    picture,\n    { width, height }\n  );\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Image image={texture} rect={{ x: 0, y: 0, width, height }} />\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running React Native App on iOS (Bash)\nDESCRIPTION: Commands to start a React Native application on iOS using either npm or Yarn package managers.\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm run ios\n\n# OR using Yarn\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Running React Native App on Android (Bash)\nDESCRIPTION: Commands to start a React Native application on Android using either npm or Yarn package managers.\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm run android\n\n# OR using Yarn\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Creating Textures on UI Thread with Reanimated in React Native Skia\nDESCRIPTION: Demonstrates the underlying mechanism of texture creation using Reanimated's runOnUI function. This example creates a cyan texture using the UI thread and renders it with the Image component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from \"react\";\nimport { runOnUI, useSharedValue } from \"react-native-reanimated\";\nimport type { SharedValue } from \"react-native-reanimated\";\nimport { Skia, Canvas, Image } from \"@shopify/react-native-skia\";\nimport type { SkImage } from \"@shopify/react-native-skia\";\n\nconst createTexture = (image: SharedValue<SkImage | null>) => {\n  \"worklet\";\n  const surface = Skia.Surface.MakeOffscreen(200, 200)!;\n  const canvas = surface.getCanvas();\n  canvas.drawColor(Skia.Color(\"cyan\"));\n  surface.flush();\n  image.value = surface.makeImageSnapshot();\n}\n\nconst Demo = () => {\n  const image = useSharedValue<SkImage | null>(null);\n  useEffect(() => {\n    runOnUI(createTexture)(image);\n  }, []);\n  \n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Image image={image} x={0} y={0} width={200} height={200} />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Metro Server for React Native (Bash)\nDESCRIPTION: Commands to start the Metro JavaScript bundler for a React Native project using either npm or Yarn package managers.\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm start\n\n# OR using Yarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Displaying Animated GIF with Reanimated in React Native Skia\nDESCRIPTION: This snippet demonstrates how to load and display an animated GIF using the useAnimatedImageValue hook from React Native Skia with Reanimated integration. The hook returns a shared value that automatically updates with a new SkImage on each frame of the animation.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Canvas,\n  Image,\n  useAnimatedImageValue,\n} from \"@shopify/react-native-skia\";\n\nexport const AnimatedImages = () => {\n  // This can be an animated GIF or WebP file\n  const bird = useAnimatedImageValue(\n    require(\"../../assets/birdFlying.gif\")\n  );\n  return (\n      <Canvas\n        style={{\n          width: 320,\n          height: 180,\n        }}\n      >\n        <Image\n          image={bird}\n          x={0}\n          y={0}\n          width={320}\n          height={180}\n          fit=\"contain\"\n        />\n      </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Running the React Native Skia Project\nDESCRIPTION: Command to run the web version of the React Native Skia project using Bun runtime.\n\nLANGUAGE: console\nCODE:\n```\nbun web\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Native Skia Project\nDESCRIPTION: Command to install all required dependencies for the React Native Skia project using Yarn package manager.\n\nLANGUAGE: console\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Pausing Animated GIF with Reanimated in React Native Skia\nDESCRIPTION: This code demonstrates how to control the playback of an animated GIF by using a shared value as a pause flag with the useAnimatedImageValue hook. The animation can be toggled between playing and paused states by pressing on the component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {Pressable} from \"react-native\";\nimport {useSharedValue} from \"react-native-reanimated\";\nimport {\n  Canvas,\n  Image,\n  useAnimatedImageValue,\n} from \"@shopify/react-native-skia\";\n\nexport const AnimatedImages = () => {\n  const isPaused = useSharedValue(false);\n  // This can be an animated GIF or WebP file\n  const bird = useAnimatedImageValue(\n    require(\"../../assets/birdFlying.gif\"),\n    isPaused\n  );\n  return (\n    <Pressable onPress={() => isPaused.value = !isPaused.value}>\n      <Canvas\n        style={{\n          width: 320,\n          height: 180,\n        }}\n      >\n        <Image\n          image={bird}\n          x={0}\n          y={0}\n          width={320}\n          height={180}\n          fit=\"contain\"\n        />\n      </Canvas>\n    </Pressable>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Loading CanvasKit from CDN with Code-Splitting\nDESCRIPTION: Example showing how to load CanvasKit from a CDN using the WithSkiaWeb component and code-splitting.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WithSkiaWeb } from \"@shopify/react-native-skia/lib/module/web\";\nimport { version } from 'canvaskit-wasm/package.json';\n\nexport default function App() {\n  return (\n    <WithSkiaWeb\n      opts={{ locateFile: (file) => `https://cdn.jsdelivr.net/npm/canvaskit-wasm@${version}/bin/full/${file}` }}\n      getComponent={() => import(\"./MySkiaComponent\")}\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Manual Animated Image API in React Native Skia\nDESCRIPTION: This snippet shows how to use the manual API with the useAnimatedImage hook for direct control over animated images. It demonstrates loading a GIF and accessing its methods like decodeNextFrame(), getCurrentFrame(), currentFrameDuration(), and getFrameCount() for fine-grained animation control.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAnimatedImage} from \"@shopify/react-native-skia\";\n\n// bird is an SkAnimatedImage\nconst bird = useAnimatedImage(\n  require(\"../../assets/birdFlying.gif\")\n)!;\n// SkAnimatedImage offers 4 methods: decodeNextFrame(), getCurrentFrame(), currentFrameDuration(), and getFrameCount()\n// getCurrentFrame() returns a regular SkImage\nconst image = bird.getCurrentFrame();\n// decode the next frame\nbird.decodeNextFrame();\n// fetch the current frame number\nconst currentFrame = bird.currentFrameDuration();\n// fetch the total number of frames\nconst frameCount = bird.getFrameCount();\nconsole.log({ frameCount, currentFrame, image });\n```\n\n----------------------------------------\n\nTITLE: Jest Environment Setup for React Native Skia Tests\nDESCRIPTION: Example test file with Jest environment configuration for React Native Skia, including test-library setup.\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @jest-environment @shopify/react-native-skia/jestEnv.mjs\n */\nimport \"react-native\";\nimport React from \"react\";\nimport { cleanup, render } from \"@testing-library/react-native\";\nimport App from \"./App\";\n\nit(\"renders correctly\", () => {\n  render(<App />);\n});\n\nafterEach(cleanup);\n```\n\n----------------------------------------\n\nTITLE: Configuring local.properties for Android SDK and NDK paths in React Native Skia\nDESCRIPTION: Example configuration for the local.properties file that specifies the paths to the Android SDK and NDK installations. These paths are necessary for building and publishing the React Native Skia library as a Maven dependency.\n\nLANGUAGE: properties\nCODE:\n```\nndk.dir=/Users/{username}/Library/Android/sdk/ndk-bundle\nsdk.dir=/Users/{username}/Library/Android/sdk\n```\n\n----------------------------------------\n\nTITLE: Animating Paths with usePathValue in React Native Skia\nDESCRIPTION: This snippet shows how to animate paths efficiently using the usePathValue hook. It demonstrates a 3D card rotation effect by transforming a path based on gesture input using Reanimated and React Native Gesture Handler.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useSharedValue, withSpring} from \"react-native-reanimated\";\nimport {Gesture, GestureDetector} from \"react-native-gesture-handler\";\nimport {usePathValue, Canvas, Path, processTransform3d, Skia} from \"@shopify/react-native-skia\";\n\nconst rrct = Skia.Path.Make();\nrrct.addRRect(Skia.RRectXY(Skia.XYWHRect(0, 0, 100, 100), 10, 10));\n\nexport const FrostedCard = () => {\n  const rotateY = useSharedValue(0);\n\n  const gesture = Gesture.Pan().onChange((event) => {\n    rotateY.value -= event.changeX / 300;\n  });\n\n  const clip = usePathValue((path) => {\n    \"worklet\";\n    path.transform(\n      processTransform3d([\n        { translate: [50, 50] },\n        { perspective: 300 },\n        { rotateY: rotateY.value },\n        { translate: [-50, -50] },\n      ])\n    );\n  }, rrct);\n  return (\n    <GestureDetector gesture={gesture}>\n      <Canvas style={{ flex: 1 }}>\n        <Path path={clip} />\n      </Canvas>\n    </GestureDetector>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: SVG Path Definition in XML\nDESCRIPTION: An SVG export example with a bounding source rectangle of 0, 0, 664, 308 that contains a path that will be scaled using FitBox.\n\nLANGUAGE: xml\nCODE:\n```\n<svg width=\"664\" height=\"308\" viewBox=\"0 0 664 308\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"M 170.1 215.5 C 165 222.3...\" fill=\"black\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Creating Time-Based Animations with useClock in React Native Skia\nDESCRIPTION: This snippet demonstrates how to create time-based animations using the useClock hook, which returns time in milliseconds since activation. The example creates a circular motion path with scaling effects based on trigonometric functions.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, useClock, vec, Circle } from \"@shopify/react-native-skia\";\nimport { useDerivedValue } from \"react-native-reanimated\";\n\nexport default function App() {\n  const t = useClock();\n\n  const transform = useDerivedValue(() => {\n    const scale = (2 / (3 - Math.cos(2 * t.value))) * 200;\n    return [\n      { translateX: scale * Math.cos(t.value) },\n      { translateY: scale * (Math.sin(2 * t.value) / 2) },\n    ];\n  });\n\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Circle c={vec(0, 0)} r={50} color=\"cyan\" transform={transform} />\n    </Canvas>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing an Oval using React Native Skia\nDESCRIPTION: Creates a light blue oval using the Oval component from React Native Skia. The oval is defined by its bounding rectangle starting at position (64,0) with width 128 and height 256.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Oval} from \"@shopify/react-native-skia\";\n\nconst OvalDemo = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Oval x={64} y={0} width={128} height={256} color=\"lightblue\" />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Drawing a Circle using React Native Skia\nDESCRIPTION: Creates a light blue circle using the Circle component from React Native Skia. The circle is positioned with its center at (r,r) with radius r where r=128.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Circle} from \"@shopify/react-native-skia\";\n\nconst CircleDemo = () => {\n  const r = 128;\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Circle cx={r} cy={r} r={r} color=\"lightblue\" />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Tracking Canvas Size with onSize in React Native Skia\nDESCRIPTION: This snippet shows how to track the canvas size using the onSize property which accepts a shared value. The size value will be automatically updated whenever the canvas dimensions change.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useSharedValue} from \"react-native-reanimated\";\nimport {Fill, Canvas} from \"@shopify/react-native-skia\";\n\nconst Demo = () => {\n  // size will be updated as the canvas size changes\n  const size = useSharedValue({ width: 0, height: 0 });\n  return (\n    <Canvas style={{ flex: 1 }} onSize={size}>\n      <Fill color=\"white\" />\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Blur Effect to SVG in React Native Skia\nDESCRIPTION: This example demonstrates how to apply a blur effect to an SVG using the Blur component within a Paint layer. It loads an SVG tiger image and applies a blur with intensity of 10.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Canvas, ImageSVG, Skia, rect, fitbox, useSVG, Group, Paint, Blur } from \"@shopify/react-native-skia\";\n\nconst width = 256;\nconst height = 256;\n\nexport const SVG = () => {\n  const tiger = useSVG(require(\"./tiger.svg\"));\n  if (!tiger) {\n    return null;\n  }\n  const src = rect(0, 0, tiger.width(), tiger.height());\n  const dst = rect(0, 0, width, height);\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group transform={fitbox(\"contain\", src, dst)} layer={<Paint><Blur blur={10} /></Paint>}>\n        <ImageSVG svg={tiger} x={0} y={0} width={800} height={800} />\n      </Group>\n    </Canvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Rectangle Buffers with useRectBuffer in React Native Skia\nDESCRIPTION: This snippet demonstrates how to create and animate an array of rectangles using the useRectBuffer hook. This buffer can be used with components that accept rectangle arrays like the Atlas API.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useRectBuffer} from \"@shopify/react-native-skia\";\n\nconst width = 256;\nconst size = 10;\nconst rects = 100;\n// Important to not forget the worklet directive\nconst rectBuffer = useRectBuffer(rects, (rect, i) => {\n  \"worklet\";\n  rect.setXYWH((i * size) % width, Math.floor(i / (width / size)) * size, size, size);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Alpha Mask in React Native Skia\nDESCRIPTION: Example of using the alpha mask mode where opaque pixels are visible and transparent pixels are invisible. The mask consists of two circles with different opacity levels applied to a light blue rectangle.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Canvas, Mask, Group, Circle, Rect} from \"@shopify/react-native-skia\";\n\nconst Demo = () => (\n  <Canvas style={{ width: 256, height: 256 }}>\n    <Mask\n      mask={\n        <Group>\n          <Circle cx={128} cy={128} r={128} opacity={0.5} />\n          <Circle cx={128} cy={128} r={64} />\n        </Group>\n      }\n    >\n      <Rect x={0} y={0} width={256} height={256} color=\"lightblue\" />\n    </Mask>\n  </Canvas>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Transform Buffers with useRSXformBuffer in React Native Skia\nDESCRIPTION: This snippet shows how to create and animate an array of rotate-scale transforms using the useRSXformBuffer hook. The transforms react to a shared position value and can be used with components like the Atlas API.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useRSXformBuffer} from \"@shopify/react-native-skia\";\nimport {useSharedValue} from \"react-native-reanimated\";\n\nconst xforms = 100;\nconst pos = useSharedValue({ x: 0, y: 0 });\n// Important to not forget the worklet directive\nconst transforms = useRSXformBuffer(xforms, (val, _i) => {\n  \"worklet\";\n  const r = Math.atan2(pos.value.y, pos.value.x);\n  val.set(Math.cos(r), Math.sin(r), 0, 0);\n});\n```\n\n----------------------------------------\n\nTITLE: Android Proguard Rule for React Native Skia\nDESCRIPTION: Proguard rule to keep React Native Skia classes when using code obfuscation on Android.\n\nLANGUAGE: proguard\nCODE:\n```\n-keep class com.shopify.reactnative.skia.** { *; }\n```\n\n----------------------------------------\n\nTITLE: Jest Transform Ignore Pattern Configuration for React Native Skia\nDESCRIPTION: Jest configuration to prevent transformation of React Native Skia modules, which is necessary for proper testing.\n\nLANGUAGE: js\nCODE:\n```\n\"transformIgnorePatterns\": [\n  \"node_modules/(?!(react-native|react-native.*|@react-native.*|@?react-navigation.*|@shopify/react-native-skia)/)\"\n]\n```\n\n----------------------------------------\n\nTITLE: Jest ESM Setup Configuration for React Native Skia\nDESCRIPTION: Jest setupFiles configuration for ECMAScript module support with React Native Skia.\n\nLANGUAGE: js\nCODE:\n```\n\"setupFiles\": [\"@shopify/react-native-skia/jestSetup.mjs\"]\n```\n\n----------------------------------------\n\nTITLE: Jest CommonJS Setup Configuration for React Native Skia\nDESCRIPTION: Jest setupFiles configuration for CommonJS support with React Native Skia.\n\nLANGUAGE: js\nCODE:\n```\n\"setupFiles\": [\"@shopify/react-native-skia/jestSetup.js\"]\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Expo Router\nDESCRIPTION: Patch to modify the main entry point in package.json to support deferred component registration with Expo Router.\n\nLANGUAGE: patch\nCODE:\n```\n-  \"main\": \"expo-router/entry\",\n+  \"main\": \"index\",\n```\n\n----------------------------------------\n\nTITLE: Creating Web Entry Point for Expo Router\nDESCRIPTION: Example of an index.web.tsx file that loads Skia before rendering the Expo Router app.\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@expo/metro-runtime';\nimport { App } from 'expo-router/build/qualified-entry';\nimport { renderRootComponent } from 'expo-router/build/renderRootComponent';\n\nimport { LoadSkiaWeb } from '@shopify/react-native-skia/lib/module/web';\n\nLoadSkiaWeb().then(async () => {\n  renderRootComponent(App);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Code-Splitting to Load Skia Components\nDESCRIPTION: Example showing how to use the WithSkiaWeb component to load Skia and a component that uses it, with a fallback display.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from \"react-native\";\nimport { WithSkiaWeb } from \"@shopify/react-native-skia/lib/module/web\";\n\nexport default function App() {\n  return (\n    <WithSkiaWeb\n      // import() uses the default export of MySkiaComponent.tsx\n      getComponent={() => import(\"@/components/MySkiaComponent\")}\n      fallback={<Text>Loading Skia...</Text>}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Deferred Component Registration for Skia\nDESCRIPTION: Example of how to use LoadSkiaWeb function to load Skia before registering the React Native app component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoadSkiaWeb } from \"@shopify/react-native-skia/lib/module/web\";\n\nLoadSkiaWeb().then(async () => {\n  const App = (await import(\"./src/App\")).default;\n  AppRegistry.registerComponent(\"Example\", () => App);\n});\n```\n\n----------------------------------------\n\nTITLE: Loading CanvasKit from CDN with Deferred Registration\nDESCRIPTION: Example showing how to load CanvasKit from a CDN using the LoadSkiaWeb function and deferred component registration.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoadSkiaWeb } from \"@shopify/react-native-skia/lib/module/web\";\nimport { version } from 'canvaskit-wasm/package.json';\n\nLoadSkiaWeb({\n  locateFile: (file) => `https://cdn.jsdelivr.net/npm/canvaskit-wasm@${version}/bin/full/${file}`\n}).then(async () => {\n  const App = (await import(\"./src/App\")).default;\n  AppRegistry.registerComponent(\"Example\", () => App);\n});\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for React Native Skia Web Support\nDESCRIPTION: Example webpack v5 configuration to support React Native Skia on web, including handling the WASM file, polyfilling node modules, and fixing module resolution.\n\nLANGUAGE: tsx\nCODE:\n```\nimport fs from \"fs\";\nimport { sources } from \"webpack\";\nimport NodePolyfillPlugin from \"node-polyfill-webpack-plugin\";\n\nconst newConfiguration = {\n  ...currentConfiguration,\n  plugins: [\n    ...currentConfiguration.plugins,\n    // 1. Ensure wasm file availability\n    new (class CopySkiaPlugin {\n      apply(compiler) {\n        compiler.hooks.thisCompilation.tap(\"AddSkiaPlugin\", (compilation) => {\n          compilation.hooks.processAssets.tapPromise(\n            {\n              name: \"copy-skia\",\n              stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONAL,\n            },\n            async () => {\n              const src = require.resolve(\"canvaskit-wasm/bin/full/canvaskit.wasm\");\n              if (!compilation.getAsset(src)) {\n                compilation.emitAsset(\"/canvaskit.wasm\", new sources.RawSource(await fs.promises.readFile(src)));\n              }\n            }\n          );\n        });\n      }\n    })(),\n    // 2. Polyfill fs and path modules\n\n\n    new NodePolyfillPlugin()\n  ],\n  alias: {\n    ...currentConfiguration.alias,\n    // 3. Suppress reanimated module warning\n    // This assumes Reanimated is installed, if not you can use false.\n    \"react-native-reanimated/package.json\": require.resolve(\n      \"react-native-reanimated/package.json\"\n    ),\n    \"react-native-reanimated\": require.resolve(\"react-native-reanimated\"),\n    \"react-native/Libraries/Image/AssetRegistry\": false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Native Skia Website\nDESCRIPTION: Command to install all required node modules for the React Native Skia website using yarn package manager.\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for React Native Skia Website\nDESCRIPTION: Command to start a local development server that opens a browser window and provides live reloading for most changes without server restarts.\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Building Static Website for React Native Skia Documentation\nDESCRIPTION: Command to generate static content into the build directory which can be deployed to any static content hosting service.\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Deploying React Native Skia Website to GitHub Pages\nDESCRIPTION: Command to build the website and push it to the gh-pages branch on GitHub. Requires specifying GitHub username and SSH preference.\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Referencing build-skia.ts Script for Skia Binary Building\nDESCRIPTION: This code snippet mentions the build-skia.ts script located in the ./scripts folder, which is used to build Skia for each supported platform and architecture. It references configuration from skia-configuration.ts.\n\nLANGUAGE: typescript\nCODE:\n```\n./scripts/build-skia.ts\n```\n\n----------------------------------------\n\nTITLE: Referencing skia-configuration.ts for Build Configuration\nDESCRIPTION: This snippet references the configuration file for the Skia build process located in the scripts directory.\n\nLANGUAGE: typescript\nCODE:\n```\n./scripts/skia-configuration.ts\n```\n\n----------------------------------------\n\nTITLE: Referencing workflow-copy-libs.ts for Artifact Handling\nDESCRIPTION: This script is used in the build-npm workflow to copy Skia binary artifacts downloaded from the build-skia workflow to the appropriate library folders.\n\nLANGUAGE: typescript\nCODE:\n```\n./scripts/workflow-copy-libs.ts\n```\n\n----------------------------------------\n\nTITLE: Referencing build-npm-package.ts for NPM Package Building\nDESCRIPTION: This script is used to build the final NPM package after Skia binaries are in place. It prepares the package for potential publishing.\n\nLANGUAGE: typescript\nCODE:\n```\n./scripts/build-npm-package.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn for React Native Skia\nDESCRIPTION: Command to install all dependencies required for the React Native Skia project using Yarn package manager.\n\nLANGUAGE: console\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Version\nDESCRIPTION: Command to upgrade your Remotion installation to the latest version.\n\nLANGUAGE: console\nCODE:\n```\nnpm run upgrade\n```\n\n----------------------------------------\n\nTITLE: Running React Native Application on Android\nDESCRIPTION: Commands to start your React Native application on an Android device or emulator after Metro bundler is running.\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm run android\n\n# OR using Yarn\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Finding Android logging library\nDESCRIPTION: Locates the Android logging library which will be used for debugging and error reporting in the native code.\n\nLANGUAGE: cmake\nCODE:\n```\nfind_library(\n        LOG_LIB\n        log\n)\nmessage(\"-- LOG     : \" ${LOG_LIB})\n```\n\n----------------------------------------\n\nTITLE: Setting up TurboModule JSI JNI library with version compatibility\nDESCRIPTION: Configures the TurboModule JSI JNI library based on React Native version. For React Native 0.76+, this library is not needed. For versions 0.71-0.75, it uses prebuilt binaries, and for earlier versions, it locates the library manually.\n\nLANGUAGE: cmake\nCODE:\n```\nunset(TURBOMODULES_LIB CACHE)\nif(${REACT_NATIVE_VERSION} GREATER_EQUAL 76)\n    # RN 0.76 doesn't have turbomodulejsijni\n    # DO NOTHING, we'll not link these libraries\nelseif(${REACT_NATIVE_VERSION} GREATER_EQUAL 71)\n    # RN 0.71 distributes prebuilt binaries.\n    set (TURBOMODULES_LIB \"ReactAndroid::turbomodulejsijni\")\nelse()\n    find_library(\n            TURBOMODULES_LIB\n            turbomodulejsijni\n            PATHS ${LIBRN_DIR}\n            NO_CMAKE_FIND_ROOT_PATH\n    )\nendif()\nmessage(\"-- TURBO   : \" ${TURBOMODULES_LIB})\n```"
  }
]