[
  {
    "owner": "expressionengine",
    "repo": "expressionengine-user-guide",
    "content": "TITLE: Database Insert with Automatic Escaping\nDESCRIPTION: Safe way to insert data using ExpressionEngine's database class with automatic value escaping\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/security.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->db->insert(\n    'table',\n    array(\n        'name'          => 'Brett Bretterson',\n        'email_address' => 'brett@example.com'\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Recent Comment Date Formatting\nDESCRIPTION: Calculates and formats the date of the most recent comment on an entry using a specified format in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_44\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{recent_comment_date format=\"%Y %m %d\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fluid Field Compatibility in PHP\nDESCRIPTION: Shows how to modify a fieldtype to be compatible with Fluid fields by accepting the 'fluid_field' content type.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/fieldtypes.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function accepts_content_type($name)\n{\n    return ($name == 'channel' || $name == 'fluid_field');\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of an ExpressionEngine CLI Command Class (PHP)\nDESCRIPTION: This PHP snippet illustrates a complete ExpressionEngine CLI command class (`CommandHelloWorld`) extending `Cli`. It defines required public properties (`$name`, `$description`, `$summary`, `$usage`, `$commandOptions`) used by the CLI for help text (`--help`), command listing, and metadata. It also includes the essential `handle()` method stub, which is the entry point executed when the command runs and contains the command's core logic.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/creating-a-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse EllisLab\\ExpressionEngine\\Cli\\Cli;\n\nclass CommandHelloWorld extends Cli {\n\n    /**\n     * name of command\n     * @var string\n     */\n    public $name = 'Hello World';\n\n    /**\n     * Public description of command\n     * @var string\n     */\n    public $description = 'The most basic of commands';\n\n    /**\n     * Summary of command functionality\n     * @var [type]\n     */\n    public $summary = 'This is a sample command used to test the CLI';\n\n    /**\n     * How to use command\n     * @var string\n     */\n    public $usage = 'php eecli.php hello';\n\n    /**\n     * options available for use in command\n     * @var array\n     */\n    public $commandOptions = [\n        'verbose,v'    => 'Hello world, but longer',\n    ];\n\n    /**\n     * Run the command\n     * @return mixed\n     */\n    public function handle()\n    {\n\n        // This is where the magic happens\n\n    }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of an Extension Class in ExpressionEngine\nDESCRIPTION: The generated extension class structure for the TypographyParseTypeEnd hook. Shows the namespace, class definition, and an empty process method that will handle the hook functionality.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extensions.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace ExpressionengineDeveloper\\AmazingAddOn\\Extensions;\n\nuse ExpressionEngine\\Service\\Addon\\Controllers\\Extension\\AbstractRoute;\n\nclass TypographyParseTypeEnd extends AbstractRoute\n{\n    public function process($str, $obj, $prefs)\n    {\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing display_field() for Google Maps Fieldtype\nDESCRIPTION: Renders the Google Maps field on the publish page, combining field data with settings. The data is stored in a pipe-delimited format (lat|long|zoom) and displayed as an interactive map.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/example.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction display_field($data)\n{\n    $data_points = array('latitude', 'longitude', 'zoom');\n\n    if ($data)\n    {\n        list($latitude, $longitude, $zoom) = explode('|', $data);\n    }\n    else\n    {\n        foreach($data_points as $key)\n        {\n            $$key = $this->settings[$key];\n        }\n    }\n\n    $zoom = (int) $zoom;\n    $options = compact($data_points);\n\n    // some javascript\n\n    $value = implode('|', array_values($options));\n    $hidden_input = form_input($this->field_name, $value, 'id=\"'.$this->field_name.'\" style=\"display: none;\"');\n\n    return $hidden_input.'<div style=\"height: 500px;\"><div id=\"map_canvas\" style=\"width: 100%; height: 100%\"></div></div>';\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Google Maps Fieldtype Implementation with Entry Manager Support in PHP\nDESCRIPTION: Complete implementation of a Google Maps fieldtype that supports rendering in the Entry Manager table view with custom HTML output and column configuration.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/enhanced.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass Google_maps_ft extends EE_Fieldtype\n{\n    public $has_array_data = true;\n\n    public $entry_manager_compatible = true;\n\n    /*.....*/\n\n    /**\n    * Implements EntryManager\\ColumnInterface\n    */\n    public function renderTableCell($data, $field_id, $entry)\n    {\n        if (!empty($data)) {\n            list($latitude, $longitude, $zoom) = explode('|', $data);\n            return \"<a href=\\\"https://www.google.com/maps/@{$latitude},{$longitude},{$zoom}z\\\" target=\\\"_blank\\\">View on map</a>\";\n        }\n        return '';\n    }\n\n    /**\n    * Allows HTML in the column content\n    */\n    public function getTableColumnConfig()\n    {\n        return [\n            'encode' => false\n        ];\n    }\n\n    /* .... */\n\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data Using ExpressionEngine Encrypt Service (PHP)\nDESCRIPTION: This snippet demonstrates serializing an associative array containing site, entry, and author IDs and then encrypting it using the ExpressionEngine Encrypt service. Dependencies include the ExpressionEngine framework and the Encrypt service being available via ee('Encrypt'). The function encrypts sensitive data before storing or transmitting it, typically for secure form data handling. Input is a PHP array, and the output is an encrypted string assigned to a key of another array.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/encrypt.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$meta = array(\n  'site_id' => 1,\n  'entry_id' => 12,\n  'author_id' => 23\n  );\n$var['meta'] = ee('Encrypt')->encrypt(serialize($meta));\n```\n\n----------------------------------------\n\nTITLE: Displaying File Entries with ExpressionEngine File Module\nDESCRIPTION: Example usage of the File Entries tag to display files and associated metadata from a specific upload directory. Includes pagination, image display, and category handling.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/file.md#2025-04-22_snippet_0\n\nLANGUAGE: ee\nCODE:\n```\n{exp:file:entries limit=\"20\" paginate=\"both\" directory_id=\"3\"}\n  <p><strong>{title}</strong> - posted: {entry_date format='%h:%i %A'}</p>\n\n  {categories}\n    {category_image} - <a href=\"{path='about/test'}\">{category_name}</a><br>\n  {/categories}\n\n  {if url:small}\n    <p><a href=\"{id_path='gallery/comments'}\"><img src=\"{url:small}\" width=\"{width:small}\" height=\"{height:small}\" alt=\"{title}\" title=\"{title}\" /></a></p>\n  {/if}\n\n  {description}\n{/exp:file:entries}\n```\n\n----------------------------------------\n\nTITLE: Using Template Layouts in ExpressionEngine\nDESCRIPTION: Demonstrates how to wrap a template in a layout to reuse wrapping code across multiple templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/language.md#2025-04-22_snippet_7\n\nLANGUAGE: ee\nCODE:\n```\n{layout=\"template_group/template\"}\n```\n\n----------------------------------------\n\nTITLE: Complete Add-on Documentation Template\nDESCRIPTION: Comprehensive template showing the recommended format and structure for ExpressionEngine add-on documentation, including headers, examples, parameters, and variables sections.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/in-app-documentation.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# Add-on Name\n\nA description of the add-on. Might include what it's purpose is, sample output, or use-case. The level 1 header is ignored in ExpressionEngine since we already output the Add-on name in the header. This full description however is rendered.\n\nAny level 2 and 3 headers will appear in the side navigation as links. Thus, the structure below should be used. Your `README.md` will be easy to write and consume for GitHub, and look beautiful in ExpressionEngine and meet your users' expectations of a consistent experience throughout the control panel.\n\n## Requirements\n\nOptional, but put here if they exist.\n\n## Installation\n\nOptional, but put here if steps are required beyond copying the files and clicking install in ExpressionEngine\n\n## Usage\n\nRequired ## heading, but does not have its own content, it is for the side menu only.\n\n### `{exp:addon:method}`\n\nTags are level 3 headers under the **Usage** section. Here, describe what the general purpose of the tag is.\n\n#### Example Usage\n\n```\n{exp:addon:method}\n  Put a typical code example here.\n  You can use code fencing or indented code blocks.\n  It will be converted to a textarea in ExpressionEngine for each copying and pasting.\n{/exp:addon:method}\n```\n\n#### Parameters\n\nDescribe any parameters this tag has. You should use either a bullet list like:\n\n- `param_name` (required) - This is what this parameter does\n- `another_param` - And this one is for such and such\n\nor use level 5 headers like below. The latter should be used if you need more than a brief sentence to describe how to use the parameters. Choose one or the other, do not mix the two styles.\n\n##### param_name (*required*)\n\nFull description of `param_name` here.\n\n##### another_param\n\nFull description of `another_param` here.\n\n#### Variables\n\nDescribe any variables this tag has. You should use either a bullet list like:\n\n- `{variable_name}` - The thing\n- `{another_variable}` - The other thing\n\nor use level 5 headers like below. The latter should be used if you need more than a brief sentence to describe how to use the variables. Choose one or the other, do not mix the two styles.\n\n##### param_name (*required*)\n\nFull description of `param_name` here.\n\n##### another_param\n\nFull description of `another_param` here.\n\n### `{exp:addon:another_tag}`\n\nRepeat as above for every tag your add-on includes.\n\n## Changelog\n\n### 1.1\n\n- Improved the handling of `param_name` options\n- Fixed a bug where this might happen\n\n### 1.0\n\n- Released!\n\n## Disclaimer\n\nOptional, typically only needed when stating independence from trademarked third-party services the add-on might integrate with.\n\n## License\n\nOptional, but you may include a software license here if you don't store a separate file in your repo.\n```\n\n----------------------------------------\n\nTITLE: Setting Apache Handler for Upload Directory Security\nDESCRIPTION: Apache .htaccess configuration to prevent execution of files in upload directories by forcing them to be treated as static content.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/security/general-tips.md#2025-04-22_snippet_0\n\nLANGUAGE: apache\nCODE:\n```\nSetHandler default-handler\n```\n\n----------------------------------------\n\nTITLE: Implementing Strict CSRF Validation in PHP\nDESCRIPTION: Example of implementing the Strict_XID interface to enforce CSRF validation for AJAX requests in an ExpressionEngine module class.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/security.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass My_module implements Strict_XID { ... }\n```\n\n----------------------------------------\n\nTITLE: Complete Forgot Username Form Example - ExpressionEngine Tag - ExpressionEngine Tag\nDESCRIPTION: Offers a comprehensive example of the forgot username form, including full use of parameters, form markup, error handling blocks, and navigation links for login/registration. Intended for template designers seeking robust user experience implementation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/forgot-username.md#2025-04-22_snippet_7\n\nLANGUAGE: ExpressionEngine Tag\nCODE:\n```\n{exp:member:forgot_username_form\n    return=\"member/login/forgot-username\"\n    inline_errors=\"yes\"\n    email_subject=\"Your Username\"\n    email_template=\"member/email-forgot-username\"\n    }\n\n    {if errors}\n        <fieldset class=\"error\">\n            <legend>Errors</legend>\n            {errors}\n                <p>{error}</p>\n            {/errors}\n        </fieldset>\n    {/if}\n\n    <p>\n        <label>Your Email Address</label><br />\n        <input type=\"email\" name=\"email\" value=\"{if old:email}{old:email}{/if}\" maxlength=\"120\" size=\"40\" />\n    </p>\n\n    <p><input type=\"submit\" name=\"submit\" value=\"Submit\" /></p>\n\n    <p><a href=\"{path='member/login'}\">Login</a> &nbsp; &nbsp; <a href=\"{path='member/registration'}\">Register</a></p>\n{/exp:member:forgot_username_form}\n```\n\n----------------------------------------\n\nTITLE: Using Single Variables in ExpressionEngine Templates\nDESCRIPTION: Shows how to output a single piece of content using ExpressionEngine's single variables. This example displays the username of the currently logged-in user.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/language.md#2025-04-22_snippet_0\n\nLANGUAGE: ee\nCODE:\n```\n{logged_in_username}\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of addon.setup.php in PHP\nDESCRIPTION: Provides the fundamental structure of the `addon.setup.php` file for an ExpressionEngine add-on. This file must exist in the add-on's package directory and return a PHP associative array containing metadata like author, name, version, and namespace. These keys are essential for ExpressionEngine to recognize and manage the add-on.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn array(\n  'author'      => 'Example, Inc',\n  'author_url'  => 'https://example.com',\n  'name'        => 'Hello World',\n  'description' => 'Displays a friendly \"Hello world!\" message.',\n  'version'     => '2.0.0',\n  'namespace'   => 'Example\\HelloWorld'\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Edit Entry Link in ExpressionEngine\nDESCRIPTION: Demonstrates how to use the cp_edit_entry_url variable to create an edit link for entries, with conditional checks to ensure it's only visible to appropriate users.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_39\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{if logged_in}\n  <a href=\"{cp_edit_entry_url}\">Edit Entry</a>\n{/if}\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{if logged_in_primary_role_id == 1}\n  <a href=\"{cp_edit_entry_url}\">Edit Entry</a>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Adding Validation Rules and Defining Custom Validation Methods - PHP\nDESCRIPTION: Shows two patterns for model validation in PHP with ExpressionEngine: declaring validation rule metadata for properties and implementing custom validation methods directly on the model. Custom validators begin with 'validate' and return TRUE or an error string. The inputs are property names and validation requirements; output is the metadata array and example custom rule method.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/building-your-own.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nprotected static $_validation_rules = array(\n  'name'  => 'required',\n  'email' => 'required|email'\n);\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected static $_validation_rules = array(\n  'even_number' => 'validateMultipleOf[2]',\n  'decade' => 'validateMultipleOf[10]'\n);\n\npublic function validateMultipleOf($name, $value, $params, $object)\n{\n  if ($value % $params[0] != 0)\n  {\n    return 'This field must be a multiple of '.$params[0];\n  }\n\n  return TRUE;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of an ExpressionEngine CLI Command Class (PHP)\nDESCRIPTION: This PHP code shows the fundamental structure for creating an ExpressionEngine CLI command. It includes importing the necessary base `Cli` class using `use EllisLab\\ExpressionEngine\\Cli\\Cli;` and defining a new class (e.g., `CommandHelloWorld`) that extends `Cli`. This inheritance provides the basic framework and methods needed for CLI interaction.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/creating-a-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse EllisLab\\ExpressionEngine\\Cli\\Cli;\n\nclass CommandHelloWorld extends Cli {\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive ExpressionEngine Add-on File Structure Example (Text)\nDESCRIPTION: Presents a detailed example of the potential file and directory structure for a feature-rich ExpressionEngine add-on named 'amazing_add_on'. This structure encompasses directories for various components like CLI Commands, database migrations, Extensions, Control Panel elements (Routes, Sidebar), Actions, Template Tags, Models, Language files, Dashboard Widgets, and Views, alongside the core add-on files (`addon.setup.php`, `ext.*`, `ft.*`, `mcp.*`, `tab.*`, `mod.*`, `pro.*`, `upd.*`) and an icon (`icon.svg`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-development-overview.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\namazing_add_on\n ┣ Commands\n ┃ ┗ CommandAnAmazingCommand.php\n ┣ database\n ┃ ┣ migrations\n ┃ ┃ ┗ 2022_11_14_170449_amazing_migration.php\n ┣ Extensions\n ┃ ┣ TemplatePostParse.php\n ┃ ┗ TypographyParseTypeEnd.php\n ┣ ControlPanel\n ┃ ┣ Routes\n ┃ ┃ ┣ Index.php\n ┃ ┃ ┗ Page2.php\n ┃ ┣ Sidebar.php\n ┣ Actions\n ┃ ┗ ExampleAction.php\n ┣ Tags\n ┃ ┗ ExampleTag.php\n ┣ Model\n ┃ ┗ AmazingModel.php\n ┣ language\n ┃ ┣ english\n ┃ ┃ ┣ amazing_add_on_lang.php\n ┃ ┃ ┗ index.html\n ┃ ┗ index.html\n ┣ widgets\n ┃ ┗ AnAmazingWidget.php\n ┣ views\n ┃ ┣ Index.php\n ┃ ┗ Page2.php\n ┣ addon.setup.php\n ┣ ext.amazing_add_on.php\n ┣ ft.amazing_add_on.php\n ┣ icon.svg\n ┣ mcp.amazing_add_on.php\n ┣ tab.amazing_add_on.php\n ┣ mod.amazing_add_on.php\n ┣ pro.amazing_add_on.php\n ┗ upd.amazing_add_on.php\n```\n\n----------------------------------------\n\nTITLE: Filtering Channel Entries by Date in ExpressionEngine\nDESCRIPTION: Shows how to filter channel entries by date in ExpressionEngine, including options for specifying start and end dates, and using relative date formats.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_31\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nstart_on=\"2004-06-05 20:00\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nstart_on=\"October 21st, 2015 4:30 PM\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nstart_on=\"today\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nstart_on=\"yesterday\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nstart_on=\"last Monday\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nstart_on=\"-2 months\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{exp:channel:entries channel=\"{my_weblog}\" sort=\"desc\" start_on=\"{current_time}\" show_future_entries=\"yes\"}\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{exp:channel:entries channel=\"{my_weblog}\" limit=\"5\" sort=\"desc\" start_on=\"-24 hours\"}\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nstop_before=\"2004-06-12 20:00\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Channel Entries by Status in ExpressionEngine\nDESCRIPTION: Demonstrates how to filter channel entries by status in ExpressionEngine, including options for multiple statuses and excluding specific statuses.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_32\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nstatus=\"open\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nstatus=\"draft|reviewed|published|closed\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nstatus=\"not submitted|processing\"\n```\n\n----------------------------------------\n\nTITLE: Full Example: Member List Search Form and Table - ExpressionEngine Template/HTML\nDESCRIPTION: A complete example combining ExpressionEngine memberlist tag, search form, filters, and an HTML table for displaying members. Shows how tag parameters, tag pairs, individual variables, and pagination all interoperate in practice. Requires ExpressionEngine, templating setup, and appropriate roles/fields configured.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_20\n\nLANGUAGE: ExpressionEngine Template Markup\nCODE:\n```\n{exp:member:memberlist\n    orderby=\"screen_name\"\n    sort=\"asc\"\n    }\n\n    {form_declaration}\n\n        <table id=\"memberlist\" class='tableborder' border=\"0\" cellpadding=\"3\" cellspacing=\"0\" style=\"width:100%;\">\n        <thead>\n        <tr>\n            <td class='memberlistHead' style=\"width:21%;\">Name</td>\n            <td class='memberlistHead' style=\"width:13%;\">Forum Posts</td>\n            <td class='memberlistHead' style=\"width:8%;\">Email Short</td>\n            <td class='memberlistHead' style=\"width:13%;\">Join Date</td>\n            <td class='memberlistHead' style=\"width:13%;\">Last Visit</td>\n        </tr>\n        </thead>\n        <tbody>\n        {member_rows}\n            <tr>\n                <td class='{member_css}' style=\"width:20%;\">\n                    <span class=\"defaultBold\"><a href=\"{path:profile}\">{name}</a></span>\n                </td>\n                <td class='{member_css}'>{total_combined_posts}</td>\n                <td class='{member_css}'>\n                    {if accept_email}\n                        <a href=\"#\" {email_console}>Email Console</a>\n                    {/if}\n                </td>\n                <td class='{member_css}'>{join_date  format=\"%m/%d/%Y\"}</td>\n                <td class='{member_css}'>{last_visit  format=\"%m/%d/%Y\"}</td>\n            </tr>\n        {/member_rows}\n\n        <tr>\n            <td class='memberlistFooter' colspan=\"5\" align='center' valign='middle'>\n                <div class=\"defaultSmall\">\n                    <b>show</b>\n\n                    <select name='group_id' class='select'>\n                        {group_id_options}\n                    </select>\n\n                    &nbsp; <b>sort</b>\n\n                    <select name='order_by' class='select'>\n                        {order_by_options}\n                    </select>\n\n                    &nbsp;  <b>order</b>\n\n                    <select name='sort_order' class='select'>\n                        {sort_order_options}\n                    </select>\n\n                    &nbsp; <b>rows</b>\n\n                    <select name='row_limit' class='select'>\n                        {row_limit_options}\n                    </select>\n\n                    &nbsp; <input type='submit' value='submit' class='submit' />\n                </div>\n            </td>\n        </tr>\n        </tbody>\n        </table>\n\n        {paginate}\n        <div class=\"itempadbig\">\n            <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" class=\"paginateBorder\">\n            <tr>\n                <td><div class=\"paginateStat\">{current_page} of {total_pages}</div></td>\n                {pagination_links}\n            </tr>\n            </table>\n        </div>\n        {/paginate}\n\n    </form>\n{/exp:member:memberlist}\n```\n\n----------------------------------------\n\nTITLE: Complex Channel Form with Multiple Field Types\nDESCRIPTION: Demonstrates a comprehensive form including status selection, dates, categories, and conditional captcha. Includes URL title generation and sticky entry options.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/examples.md#2025-04-22_snippet_1\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:channel:form channel=\"channel_name\" return=\"channel_name/edit/ENTRY_ID\" entry_id=\"{segment_3}\"}\n    <label for=\"title\">Title</label>\n    <input type=\"text\" name=\"title\" id=\"title\" value=\"{title}\" size=\"50\" maxlength=\"100\" onkeyup=\"liveUrlTitle(event);\">\n    [...content truncated for brevity...]\n    <input type=\"submit\" name=\"submit\" value=\"Submit\">\n{/exp:channel:form}\n```\n\n----------------------------------------\n\nTITLE: Defining an EE File Picker Field in ExpressionEngine Using PHP\nDESCRIPTION: This PHP snippet demonstrates how to define a custom HTML input field in an ExpressionEngine form configuration array to include an integrated EE file picker. It utilizes the ee()->file_field->dragAndDropField() internal function to render a drag-and-drop file or image input control, supporting both initial and pre-filled values. The code assumes access to the ExpressionEngine framework, particularly the file_field library, and requires the field name, stored value, allowed directories, and content type for configuration.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/shared-form-view.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// ----------------------------------------\n// Define an EE type File picker\n// ----------------------------------------\n\narray(\n    'title' => 'EE_file_picker_example',\n    'desc' => 'EE_file_picker_example_desc',\n    'fields' => array(\n        'file_field' => [\n            'type' => 'html',\n            'value' => $file_field,\n            'required' => false,\n            'content' => ee()->file_field->dragAndDropField('file_field', $file_field, 'all', 'image'),\n        ]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying All Errors Using the Errors Pair in ExpressionEngine\nDESCRIPTION: This snippet demonstrates how to display all form validation errors using the {errors} pair in an ExpressionEngine template. It checks if errors exist and then lists them in an unordered list.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/form-validation.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{if errors}\n    <p class=\"error\">Please correct the following errors:</p>\n    <ul>\n        {errors}\n            <li>{error}</li>\n        {/errors}\n    </ul>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Conditional Validation Rules with skip() - ExpressionEngine - PHP\nDESCRIPTION: This PHP code shows how to define a conditional validation rule 'whenNotifyTypeIs' using ExpressionEngine's defineRule and skip() functions. The rule checks another field ('notify-type') and only applies further validation if it matches the specified notification type. The validator is setup with rules using the new conditional, supporting flexible field dependencies. Dependencies are the ExpressionEngine Validation service and the use of PHP's use keyword for closure scoping; designed for inputs like notification forms.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/validation.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse ExpressionEngine\\Service\\Validation\\Validator;\n\n$data = $_POST;\n\n$validator->defineRule('whenNotifyTypeIs', function($key, $value, $parameters, $rule) use ($data)\n{\n  return ($data['notify-type'] == $parameters[0]) ? TRUE : $rule->skip();\n});\n\n$validator->setRules(array(\n  'notify-type' => 'required|enum[email,sms]',\n  'email' => 'whenNotifyTypeIs[email]|required|email',\n  'sms' => 'whenNotifyTypeIs[sms]|required|regex[/^\\d{3}-\\d{3}-\\d{4}$/]',\n));\n```\n\n----------------------------------------\n\nTITLE: Creating a General Settings Form with ExpressionEngine in PHP\nDESCRIPTION: The snippet demonstrates how to create a general settings form within an ExpressionEngine controller file in PHP. It includes the definition of form fields and the variables required for rendering. Dependencies include the ExpressionEngine framework and its model and view components. The form is constructed using a structured array and requires language keys for labels.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/shared-form-view.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// The data we\\'ll want to populate our form fields with\n$site = ee(\\'Model\\')->get(\\'Site\\')\n    ->filter(\\'site_id\\', ee()->config->item(\\'site_id\\'))\n    ->first();\n\n// Form definition array\n$vars['sections'] = array(\n  array(\n    array(\n      'title' => 'site_name',\n      'fields' => array(\n        'site_name' => array(\n          'type' => 'text',\n          'value' => $site->site_label,\n          'required' => TRUE\n        )\n      )\n    ),\n    // Site short name field\n    array(\n      'title' => 'site_short_name',\n      'desc' => 'site_short_name_desc',\n      'fields' => array(\n        'site_short_name' => array(\n          'type' => 'text',\n          'value' => $site->site_name,\n          'required' => TRUE\n        )\n      )\n    )\n  )\n);\n\n// Final view variables we need to render the form\n$vars += array(\n  'base_url' => ee(\\'CP/URL\\', \\'settings/general\\'),\n  'cp_page_title' => lang(\\'general_settings\\'),\n  'save_btn_text' => 'btn_save_settings',\n  'save_btn_text_working' => 'btn_saving'\n);\n\n// Render the form\nreturn ee(\\'View\\')->make(\\'ee:_shared/form\\')->render($vars);\n```\n\n----------------------------------------\n\nTITLE: Requiring Entry Presence with \\'require_entry\\' Parameter - ExpressionEngine Template Syntax\nDESCRIPTION: Forces the template to display output only if the URL contains a valid entry_id or url_title, suppressing output otherwise. Value is typically \\\"yes\\\". Used to prevent accidental display of multi-entry data on single-entry templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_24\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\nrequire_entry=\"yes\"\n```\n\n----------------------------------------\n\nTITLE: Using URL Fields in Relationship Tags\nDESCRIPTION: Illustrates how to employ URL fields within relationship tags in ExpressionEngine, allowing for the generation of anchor tags with entry-specific URLs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_16\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{relationship_field}\\n  <a href=\\\"{relationship_field:my_url}\\\">Your Link</a>\\n{/relationship_field}\n```\n\n----------------------------------------\n\nTITLE: Setting Relationship Field Data via Entry Model in PHP\nDESCRIPTION: Explains how to establish relationships for an ExpressionEngine Relationship field type. It involves fetching the entry model (`$entry`) using `ee('Model')`. An array containing the target entry IDs (as strings) is prepared under a 'data' key (`$related_entry_ids`). This array is assigned directly to the relationship field property on the entry model (e.g., `$entry->field_id_10`). Finally, `$entry->save()` persists the relationship changes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-entry.md#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$entry_id = 8;\n\n$entry = ee('Model')->get('ChannelEntry', $entry_id)->first();\n\n$related_entry_ids = array( 'data' => array('9', '10', '11') )\n\n$entry->field_id_10 = $related_entry_ids;\n\n$entry->save();\n```\n\n----------------------------------------\n\nTITLE: JavaScript for Comment Editing in ExpressionEngine\nDESCRIPTION: Includes the essentials for adding AJAX capabilities for comment editing in ExpressionEngine. This tag provides a script that handles user interactions for editing comments, including submitting the updated data and handling server responses. Prerequisites include proper ExpressionEngine setup and secure form configurations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/form.md#2025-04-22_snippet_2\n\nLANGUAGE: EE Template Language\nCODE:\n```\n{exp:comment:edit_comment_script}\n```\n\n----------------------------------------\n\nTITLE: Combined AND/OR Tag Filtering with Multiple Tag Clouds - ExpressionEngine - HTML\nDESCRIPTION: Features two sections, each a tag group using 'tag:cloud', allowing users to select multiple tags per group. When submitted, entries matching any selected tag from group one AND any from group two are listed, demonstrating AND+OR logic. Inputs: two sets of tag checkboxes; output: entries carrying tags from both groups. Pro Search and Tag add-ons are required.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/examples.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:form result_page=\"search/two\" query=\"{segment_3}\"}\n  {exp:tag:cloud groups=\"1\"}\n    <label>\n      <input type=\"checkbox\" name=\"tag_id:color[]\" value=\"{tag_id}\"{if pro_search_tag_id:color ~ '/\\b'.tag_id.'\\b/'} checked{/if}>\n      {tag}\n    </label>\n  {/exp:tag:cloud}\n\n  {exp:tag:cloud groups=\"2\"}\n    <label>\n      <input type=\"checkbox\" name=\"tag_id:size[]\" value=\"{tag_id}\"{if pro_search_tag_id:size ~ '/\\b'.tag_id.'\\b/'} checked{/if}>\n      {tag}\n    </label>\n  {/exp:tag:cloud}\n\n  <button type=\"submit\">Go</button>\n{/exp:pro_search:form}\n```\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:results\n  query=\"{segment_3}\"\n  limit=\"10\"\n}\n  ...\n{/exp:pro_search:results}\n```\n\n----------------------------------------\n\nTITLE: Using Backspace Parameter with Channel Categories in ExpressionEngine\nDESCRIPTION: Demonstrates the use of the backspace parameter to remove characters from the last iteration, which is useful for removing trailing separators like line breaks.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/categories.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:categories style=\"linear\" backspace=\"5\"}\n    {category_name}<br>\n{/exp:channel:categories}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Typography Extension Hook in ExpressionEngine\nDESCRIPTION: Complete implementation of the TypographyParseTypeEnd hook that replaces all instances of 'e' with 'EE' in content processed by the Typography library. Shows parameter handling and return value.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extensions.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace ExpressionengineDeveloper\\AmazingAddOn\\Extensions;\n\nuse ExpressionEngine\\Service\\Addon\\Controllers\\Extension\\AbstractRoute;\n\nclass TypographyParseTypeEnd extends AbstractRoute\n{\n    public function process($str, $obj, $prefs)\n    {\n        //check if $str has content, if so replace\n        //all \"e\" with \"EE\"\n        if(!is_null($str) ){\n            $str = str_replace(\"e\",\"EE\",$str);\n        }\n        return $str;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Binding Grid JavaScript Events\nDESCRIPTION: Demonstrates how to bind JavaScript events for Grid fieldtypes. These events allow fieldtypes to respond to various Grid-related actions on the publish form.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/fieldtypes.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nGrid.bind(\"date\", \"display\", function(cell)\n{\n    // Act on event\n});\n```\n\n----------------------------------------\n\nTITLE: Defining DeveloperLog Model Class in PHP\nDESCRIPTION: Declares the ExpressionEngine\\Model\\Log\\DeveloperLog class with its properties, relationships, methods, and events. This model is used for logging developer-related information in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/developer-log.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass ExpressionEngine\\Model\\Log\\DeveloperLog\n```\n\n----------------------------------------\n\nTITLE: Model Class Skeleton Definition - PHP\nDESCRIPTION: Provides a basic structure for defining a new model class in ExpressionEngine using PHP. This snippet includes the required primary key, table name, and properties—all declared as protected. It imports the base Model class and demonstrates where to extend it, serving as the essential template for creating any new model. Inputs are table column names and class property names; output is a PHP class that meets ExpressionEngine’s model requirements.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/building-your-own.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace My\\\\Namespace\\\\Model\\\\MyModel\\\\Model;\n\nuse ExpressionEngine\\\\Service\\\\Model\\\\Model;\n\nclass MyModel extends Model {\n\n  protected static $_primary_key = 'id';\n  protected static $_table_name = 'my_awesome_table';\n\n  protected $id;\n  protected $name;\n  protected $email;\n  // ... more properties\n\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Categories with Conditional Variables - markup\nDESCRIPTION: Describes how to use {categories} as a looping structure to present multiple categories for entries. It includes demonstration of parameters such as 'backspace', 'limit', 'show', and 'show_group' to customize category listings.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_55\n\nLANGUAGE: markup\nCODE:\n```\n{categories}\n    {category_image}\n    <a href=\"{path='channel/index'}\">{category_name}</a>\n{/categories}\n```\n\n----------------------------------------\n\nTITLE: Disabling Front-end Edit Links using HTML Comments\nDESCRIPTION: Prevents ExpressionEngine Pro from automatically inserting front-end edit links for any template tags (like `{title}`) wrapped within `<!-- disable frontedit -->` and `<!-- //disable frontedit -->` HTML comments. This method achieves the same result as using ExpressionEngine comments for disabling links and can be applied to large template sections or layouts.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/advanced-usage/front-end/frontend.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h1><!-- disable frontedit -->{title}<!-- //disable frontedit --></h1>\n```\n\n----------------------------------------\n\nTITLE: Displaying Relative Dates for Entry Dates in ExpressionEngine\nDESCRIPTION: Example of using the relative date modifier to display how long ago an entry was posted. This displays the time difference in a human-readable format like '2 days ago'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/date-variable-formatting.md#2025-04-22_snippet_5\n\nLANGUAGE: expressionengine\nCODE:\n```\n{entry_date:relative}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of ExpressionEngine Edit Profile Form\nDESCRIPTION: A full example demonstrating the `exp:member:edit_profile` tag with parameters for success redirection, asset inclusion, inline errors, and datepicker activation. It includes standard fields (username, email, password, current password) with inline error display, and loops through custom profile fields using the `{custom_profile_fields}` tag pair, also showing error handling within the loop.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_20\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{exp:member:edit_profile\n    return=\"member/registration/success\"\n\t\tinclude_assets=\"yes\"\n    inline_errors=\"yes\"\n\t\tdatepicker=\"yes\"\n    }\n\n        <p>* Required fields</p>\n    <fieldset>\n        <h4>Profile</h4>\n\n        <p>\n            <label for=\"username\">Username*:</label><br />\n            <input type=\"text\" name=\"username\" id=\"username\" value=\"{username}\"/><br />\n            {if error:username}\n                <span class=\"error\">{error:username}</span>\n            {/if}\n        </p>\n\n        <p>\n            <label for=\"email\">Email:</label><br />\n            <input type=\"text\" name=\"email\" id=\"email\" value=\"{email}\"/><br />\n            {if error:email}\n                <span class=\"error\">{error:email}</span>\n            {/if}\n        </p>\n\n        <p>\n            <label for=\"password\">Password:</label><br />\n            <input type=\"password\" name=\"password\" id=\"password\" value=\"\"/>\n            {if error:password}\n                <span class=\"error\">{error:password}</span>\n            {/if}\n        </p>\n\n        <p>\n            <label for=\"password_confirm\">Confirm password*:</label><br />\n            <input type=\"password\" name=\"password_confirm\" id=\"password_confirm\" value=\"\"/>\n            {if error:password_confirm}\n                <span class=\"error\">{error:password_confirm}</span>\n            {/if}\n        </p>\n\n        <p>\n            <label for=\"current_password\">Current password*:</label><br />\n\t\t\t\t\t<em>You <b>must</b> enter your current password to change your password, username or email.</em>\n             <input type=\"password\" name=\"current_password\" id=\"current_password\" value=\"\"/>\n             {if error:current_password}\n                <span class=\"error\">{error:current_password}</span>\n            {/if}\n        </p>\n\n\n    {custom_profile_fields}\n        <p>\n            <label>{lang:profile_field}</label><br>\n            <small>{lang:profile_field_description}</small><br>\n\n            {form:custom_profile_field}\n\n            {if has_error}\n                <span class=\"error\">{error}</span>\n            {/if}\n        </p>\n     {/custom_profile_fields}\n\n    </fieldset>\n\n    <input type=\"submit\" value=\"Register\" class=\"btn btn-primary\" />\n{/exp:member:edit_profile}\n```\n\n----------------------------------------\n\nTITLE: Numeric Matching in ExpressionEngine Channel Entries\nDESCRIPTION: Shows how to perform numeric matching in ExpressionEngine channel entries, including greater-than, less-than operators, and specifying ranges for numeric fields or custom date fields.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_27\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsearch:numeric_field=\"<20\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsearch:numeric_field=\">20\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsearch:numeric_field=\"<=20\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsearch:numeric_field=\">=20\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsearch:numeric_field='>=20|<=30'\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsearch:numeric_field='<20|>30'\n```\n\n----------------------------------------\n\nTITLE: Using Template Embedding Syntax\nDESCRIPTION: This snippet shows the syntax for embedding one template within another. The embed variable allows for including templates recursively within the ExpressionEngine template system.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/single-variables.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n{embed='news/local'}\n```\n\n----------------------------------------\n\nTITLE: Basic Fieldtype Class Implementation\nDESCRIPTION: Example of a basic Google Maps fieldtype class showing required structure with info array and display_field method\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/fieldtypes.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\n\nclass Google_maps_ft extends EE_Fieldtype {\n\n    var $info = array(\n        'name'      => 'Google Maps',\n        'version'   => '1.0'\n    );\n\n    // --------------------------------------------------------------------\n\n    function display_field($data)\n    {    \n        return form_input(array(\n            'name'  => $this->field_name,\n            'id'    => $this->field_id,\n            'value' => $data\n        ));\n    }\n}\n// END Google_maps_ft class\n\n/* End of file ft.google_maps.php */\n/* Location: ./system/user/addons/google_maps/ft.google_maps.php */\n```\n\n----------------------------------------\n\nTITLE: Basic Channel Categories Tag Syntax in ExpressionEngine\nDESCRIPTION: Demonstrates the basic syntax for the Channel Categories tag which outputs a list of categories. The opening and closing tags contain a variable that will be repeated for each category.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/categories.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:categories}\n    {category_name}\n{/exp:channel:categories}\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Group Control Panel Forms with ExpressionEngine in PHP\nDESCRIPTION: This PHP code demonstrates creating a complete, feature-rich form in ExpressionEngine\\'s Control Panel. Dependencies include the ExpressionEngine framework (notably the CP/Form and related classes). The snippet covers grouping fields, setting up tabs and file uploads, adding hidden and visible fields, configuring field properties (e.g. required, disabled, placeholders), creating tables and grids with dynamic data, managing action buttons, and using advanced controls like file pickers. Expected input and output involve EE\\'s form builder objects; care must be taken to respect method chaining and object relationships for correct form assembly. This comprehensive example assumes all required ExpressionEngine CP libraries are loaded in the runtime context.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/cp-form.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$form = ee('CP/Form');\n$form->asTab();\n$form->asFileUpload();\n$field_group = $form->getGroup('General Settings');\n$field_set = $field_group->getFieldSet('First Name');\n$field_set->getField('first_name', 'text')\n    ->setDisabled(true)\n    ->setValue('Eric');\n\n$field_set = $field_group->getFieldSet('Last Name')->withButton('Click Me');\n$field_set->getField('last_name', 'text')\n    ->setPlaceholder('Last Name')\n    ->setRequired(true);\n$form->setCpPageTitle('Hello!');\n\n$field_group = $form->getGroup('Custom Input Example');\n$field_set = $field_group->getFieldSet('email');\n$field_set->getField('email', 'email')\n    ->setPlaceholder('Your Email Address')\n    ->setValue('eric@mithra62.com')\n    ->setRequired(true);\n\n$field_set = $field_group->getFieldSet('color');\n$field_set->getField('color', 'color')->setValue('#C86565');\n\n$field_set = $field_group->getFieldSet('number');\n$field_set->getField('number', 'number')->params(['min' => 100, 'max' => 1000])->setRequired(true);\n\n$field_group = $form->getGroup('Contact details');\n$field_set = $field_group->getFieldSet('Address');\n$field_set->getField('address1', 'text');\n$field_set->getField('address2', 'action_button')->setText('Hello');\n$field_set->getField('state', 'dropdown')->withNoResults('Nothing Here', 'fdsa', 'fdsa');\n\n$form->withActionButton('My Action Button', 'https://google.com');\n$button = $form->getButton('button_1');\n$button->setType('submit')->setText('Submit Button')->setWorking('Submitting...');\n\n$form->getButton('button_2');\n$form->removeButton('button_2');\n\n$hidden_field = $form->getHiddenField('my_hidden_field');\n$hidden_field->setValue('my_value');\n\n$field_group = $form->getGroup('Table Example');\n$field_set = $field_group->getFieldSet('My Table Data');\n$table = $field_set->getField('my_table', 'table');\n\n$table->setOptions([\n    'lang_cols' => true,\n    'class' => 'product_channels'\n]);\n\n$table->setColumns([\n    'details' => ['sort' => false],\n    'value' => ['sort' => false],\n]);\n\n$table->setNoResultsText(sprintf(lang('no_found'), lang('product_channels')));\n$table->setBaseUrl( ee('CP/URL')->make($this->base_url ));\n$data = [];\n$data[] = [\n    'Hello',\n    'You',\n];\n\n$table->setData($data);\n$table->addRow([\n    'No, Hello',\n    'To You!',\n]);\n\n$field_group = $form->getGroup('Filepicker Example');\n$field_set = $field_group->getFieldSet('My Filepicker');\n$file_picker = $field_set->getField('my_file_picker', 'file-picker');\n$file_picker->asImage()->withDir(7)->setValue('{filedir_7}path.jpg');\n\n$field_group = $form->getGroup('Grid Example');\n$field_set = $field_group->getFieldSet('My Grid')->withGrid();\n$grid = $field_set->getField('my_grid_field', 'grid');\n\n$grid->setOptions([\n    'field_name' => $grid->getName(),\n    'reorder'    => true,\n]);\n\n$grid->setColumns([\n    'text example' => ['sort' => false],\n    'select example' => ['sort' => false],\n    'password example' => ['sort' => false],\n    'checkbox example' => ['sort' => false],\n    'textarea example' => ['sort' => false],\n    'upload example' => ['sort' => false],\n]);\n\n$options = ['foo' => 'Foo', 'bar' => 'Bar'];\n$cols = [\n    ['name' => 'foo-text', 'type' => 'text', 'value' => ''],\n    ['name' => 'barr-select', 'type' => 'select', 'value' => '', 'choices' => $options],\n    ['name' => 'foo-password', 'type' => 'password', 'value' => ''],\n    ['name' => 'bar-checkbox', 'type' => 'checkbox', 'value' => 1],\n    ['name' => 'foo-textarea', 'type' => 'textarea', 'value' => '', 'cols' => 2, 'rows' => 5],\n    ['name' => 'bar-upload', 'type' => 'file', 'value' => '', 'cols' => 2, 'rows' => 5],\n];\n$grid->defineRow($cols);\n$grid->setData([\n    ['foo-text' => 'bar', 'barr-select' => 'foo', 'foo-password' => 'fdsa', 'bar-checkbox' => 1, 'foo-textarea' => '', 'bar-upload' => ''],\n    ['foo-text' => 'fdsafdsa', 'barr-select' => 'bar', 'foo-password' => 'fdsa', 'bar-checkbox' => true, 'foo-textarea' => '', 'bar-upload' => '']\n]);\n\n$grid->setNoResultsText(sprintf(lang('no_found'), lang('table-thing')), 'add');\n$grid->setBaseUrl( ee('CP/URL')->make($this->base_url ));\n\n$vars = $form->toArray();\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Analytics with Performance Cookies Consent in ExpressionEngine\nDESCRIPTION: This snippet demonstrates how to conditionally load Google Analytics tracking code based on whether the user has consented to performance cookies. The script will only be included if the user has explicitly granted consent for performance cookies.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/consent.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{if consent:ee:cookies_performance}\n  <!-- Google Analytics -->\n  <script>\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\n  ga('create', 'UA-XXXXX-Y', 'auto');\n  ga('send', 'pageview');\n  </script>\n  <!-- End Google Analytics -->\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Displaying Channel Information using ExpressionEngine Tags\nDESCRIPTION: Example showing how to use the channel:info tag to display basic channel information including title and description. The tag requires a channel parameter to specify which channel's information to display.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/info.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:info channel=\"news\"}\n    Channel Name: {channel_title}<br>\n    Description: {channel_description}\n{/exp:channel:info}\n```\n\n----------------------------------------\n\nTITLE: Handling Control Panel Logic for ExpressionEngine Modules\nDESCRIPTION: The sample code outlines how to define methods in the mcp.package_name.php file to automatically route URLs, showcasing how to structure public methods for argument handling.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/v3-add-on-migration.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function edit_cookie($id) {...}\n```\n\n----------------------------------------\n\nTITLE: Creating Alert Example in ExpressionEngine PHP\nDESCRIPTION: Example showing how to create an inline issue alert with a title and body using the CP/Alert service. Demonstrates chaining multiple alert configuration methods.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/alert.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee('CP/Alert')->makeInline('fortune-cookie-form')\n  ->asIssue()\n  ->withTitle(lang('fortune_cookie_save_error'))\n  ->addToBody(lang('fortune_cookie_save_error_desc'))\n  ->now();\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Validation Error Messages in ExpressionEngine with PHP\nDESCRIPTION: Shows how to retrieve all error messages generated during validation using the `getAllErrors()` method on the result object (`$result`). It returns a nested associative array structured as `$errors['fieldname']['rulename'] = 'Localized Message'`. If validation passed, an empty array is returned.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/validation.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$errors = $result->getAllErrors(); // $errors['fieldname']['rulename'] = 'Message';\n```\n\n----------------------------------------\n\nTITLE: Implementing display_settings() for Google Maps Fieldtype\nDESCRIPTION: Creates the interface for field-specific settings using ExpressionEngine's Shared Form View format. This allows each field instance to have its own map configuration.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/example.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction display_settings()\n{\n    $latitude   = isset($data['latitude']) ? $data['latitude'] : $this->settings['latitude'];\n    $longitude  = isset($data['longitude']) ? $data['longitude'] : $this->settings['longitude'];\n    $zoom       = isset($data['zoom']) ? $data['zoom'] : $this->settings['zoom'];\n\n    $settings = array(\n        array(\n            'title' => 'latitude',\n            'desc' => 'latitude_desc',\n            'fields' => array(\n                'latitude' => array(\n                    'type' => 'text',\n                    'value' => $latitude,\n                )\n            )\n        ),\n        array(\n            'title' => 'longitude',\n            'desc' => 'longitude_desc',\n            'fields' => array(\n                'longitude' => array(\n                    'type' => 'text',\n                    'value' => $longitude,\n                )\n            )\n        ),\n        array(\n            'title' => 'zoom',\n            'desc' => 'zoom_desc',\n            'fields' => array(\n                'zoom' => array(\n                    'type' => 'select',\n                    'choices' => range(1, 20),\n                    'value' => $zoom,\n                )\n            )\n        ),\n        array(\n            'title' => 'preview',\n            'desc' => 'preview_desc',\n            'wide' => TRUE,\n            'fields' => array(\n                'preview' => array(\n                    'type' => 'html',\n                    'content' => '<div style=\"height: 300px;\"><div id=\"map_canvas\" style=\"width: 100%; height: 100%\"></div></div>'\n                )\n            )\n        )\n    );\n\n    // Map preview\n    $this->_cp_js();\n    ee()->javascript->output('$(window).load(gmaps);');\n\n    return array('field_options_google_maps' => array(\n        'label' => 'field_options',\n        'group' => 'google_maps',\n        'settings' => $settings\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Building Complex URLs with Query Parameters - PHP\nDESCRIPTION: This example shows how to create a URL with additional query string parameters using the CP/URL Service's `make` method or by directly setting query string variables. It demonstrates flexibility in modifying URLs to include arbitrary query parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/url.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$url = ee('CP/URL')->make('publish/edit', array('filter_by_channel' => 1));\n```\n\nLANGUAGE: php\nCODE:\n```\n$url = ee('CP/URL', 'publish/edit')\n  ->setQueryStringVariable('filter_by_channel', 1);\n```\n\n----------------------------------------\n\nTITLE: Creating and Validating Rules with ExpressionEngine Validation Service - PHP\nDESCRIPTION: This PHP snippet creates validation rules for required username and password fields using ExpressionEngine's Validation Service. It defines an associative array of rules, applies them to incoming POST data, and checks the result object's validity. Dependencies include the ExpressionEngine core and correct configuration to access the ee('Validation') service. The code expects $_POST to contain 'username' and 'password', and returns a boolean for validation success.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/validation.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$rules = array(\n  'username' => 'required|minLength[5]',\n  'password' => 'required|minLength[5]'\n);\n\n$result = ee('Validation')->make($rules)->validate($_POST);\n\nif ($result->isValid())\n{\n  // yay\n}\n\n// no :(\n```\n\n----------------------------------------\n\nTITLE: Basic Channel Entries Tag Usage - ExpressionEngine\nDESCRIPTION: Demonstrates basic usage of the Channel Entries tag to display news entries with a title and body content, limited to 10 entries.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_0\n\nLANGUAGE: ee\nCODE:\n```\n{exp:channel:entries channel=\"news\" limit=\"10\"}\n    <h2>{title}</h2>\n    {body}\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis for Cache Storage in ExpressionEngine\nDESCRIPTION: Sets up a Redis server configuration for cache storage when Redis is specified as the cache driver. Includes host, password, port, and timeout settings.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_112\n\nLANGUAGE: php\nCODE:\n```\n$config['redis'] = array(\n  'host' => '127.0.0.1',\n  'password' => NULL,\n  'port' => 6379,\n  'timeout' => 0\n);\n```\n\n----------------------------------------\n\nTITLE: Complete Member Registration Form Example - ExpressionEngine Template/HTML\nDESCRIPTION: A comprehensive registration form leveraging ExpressionEngine's member:registration_form tag, demonstrating parameters, inline error handling, standard and custom field rendering, conditional form logic, and captcha integration. Requires ExpressionEngine's form processing and validation add-ons to work. Fields include username, email, custom fields by ID, password/confirm, terms checkbox, and support for captcha if enabled.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_29\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\n{exp:member:registration_form\n    return=\"member/registration/success\"\n    inline_errors=\"yes\"\n}\n\n    <p>* Required fields</p>\n<fieldset>\n    <h4>Login details</h4>\n\n    <p>\n        <label for=\"username\">Username*: {if error:username}{error:username}{/if}</label><br />\n        <input type=\"text\" name=\"username\" id=\"username\" value=\"{if username}{username}{/if}\"/><br />\n    </p>\n\n    <p>\n        <label for=\"email\">Email*: {if error:email}{error:email}{/if}</label><br />\n        <input type=\"text\" name=\"email\" id=\"email\" value=\"{if email}{email}{/if}\"/><br />\n    </p>\n\n    <p>\n        <label for=\"something\">Something*: {if error:m_field_id_1}{error:m_field_id_1}{/if}</label><br />\n        <input type=\"text\" name=\"m_field_id_1\" id=\"something\" value=\"{if m_field_id_1}{m_field_id_1}{/if}\"/><br />\n    </p>\n\n    <p>\n        <label for=\"password\">Password*: {if error:password}{error:password}{/if}</label><br />\n        <input type=\"password\" name=\"password\" id=\"password\" value=\"{if password}{password}{/if}\"/>\n    </p>\n\n    <p>\n        <label for=\"password_confirm\">Confirm password*: </label><br />\n        <input type=\"password\" name=\"password_confirm\" id=\"password_confirm\" value=\"{if password_confirm}{password_confirm}{/if}\"/>\n    </p>\n\n    <p>\n        <label for=\"terms_of_service\">Terms of service:</label><br />\n        <div>All messages posted at this site express the views of the author, and do not necessarily reflect the views of the owners and administrators\n            of this site.By registering at this site you agree not to post any messages that are obscene, vulgar, slanderous, hateful, threatening, or that violate any laws. We will\n            permanently ban all users who do so.We reserve the right to remove, edit, or move any messages for any reason.</div>\n    </p>\n\n    <p>\n        <label><input type=\"checkbox\" name=\"accept_terms\" value=\"y\" {if accept_terms == 'y'}checked=\"checked\"{/if} /> I accept these terms {if error:accept_terms}{error:accept_terms}{/if}</label>\n    </p>\n\n    {if captcha}\n    <p>\n        <label for=\"captcha\">{lang:captcha}*</label>\n        {captcha}<br/>\n        <input type=\"text\" id=\"captcha\" name=\"captcha\" value=\"\" size=\"20\" maxlength=\"20\" style=\"width:140px;\"/>\n        {if error:captcha}\n            <span class=\"error\">{error:captcha}</span>\n        {/if}\n    </p>\n    {/if}\n</fieldset>\n\n<input type=\"submit\" value=\"Register\" class=\"btn btn-primary\" />\n{/exp:member:registration_form}\n```\n\n----------------------------------------\n\nTITLE: Creating New Channel Entry in ExpressionEngine\nDESCRIPTION: Demonstrates creating a new channel entry with basic required fields like author, channel, title, URL and status. Includes validation and saving.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-entry.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$entry              = ee('Model')->make('ChannelEntry');\n$entry->author_id   = ee()->session->userdata('member_id'); // Returns currently Logged-in user ID.\n$entry->channel_id  = 1;\n$entry->title       = 'An Awesome Title';\n$entry->url_title   = ee('Format')->make('Text', 'An Awesome Title')->urlSlug()->compile(); // Returns an-awesome-title. Must be unique.\n$entry->status      = ee('Model')->get('Status', 1)->first()->status; // Returns 'open';\n$entry->entry_date  = ee()->localize->now; // Returns time in seconds from epoch: 1623945317\n\n// Validate and Save.\n$result = $entry->validate();\n\nif ($result->isValid()) {\n    $entry->save();\n}\n\n$entry->entry_id; // Will now return the new Entry ID.\n```\n\n----------------------------------------\n\nTITLE: Example of Reset Password Form with Error Handling\nDESCRIPTION: This example demonstrates a complete reset password form within ExpressionEngine, including error handling for invalid inputs. The form will display inline errors and redirect the user upon successful submission using specified parameters like 'inline_errors' and 'return'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/reset-password.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n{exp:member:reset_password_form\n    return=\"member/login/success\"\n    inline_errors=\"yes\"\n    }\n\n    {if errors}\n        <fieldset class=\"error\">\n            <legend>Errors</legend>\n            {errors}\n                <p>{error}</p>\n            {/errors}\n        </fieldset>\n    {/if}\n\n    <p>\n        <label>Your New Password</label><br />\n        <input type=\"password\" name=\"password\" value=\"\" maxlength=\"50\" size=\"40\" />\n        {if error:password}\n            <span class=\"error\">{error:password}</span>\n        {/if}\n    </p>\n\n    <p>\n        <label>Confirm New Password</label><br />\n        <input type=\"password\" name=\"password_confirm\" value=\"\" maxlength=\"50\" size=\"40\" />\n        {if error:password_confirm}\n            <span class=\"error\">{error:password_confirm}</span>\n        {/if}\n    </p>\n\n    <p><input type=\"submit\" name=\"submit\" value=\"Submit\" /></p>\n\n    <p><a href=\"{path='member/login'}\">Login</a> &nbsp; &nbsp; <a href=\"{path='member/registration'}\">Register</a></p>\n{/exp:member:reset_password_form}\n```\n\n----------------------------------------\n\nTITLE: Calling sessions_start Extension Hook in PHP\nDESCRIPTION: This snippet shows how the sessions_start hook is called in ExpressionEngine. It enables resetting Session class variables, modifying default/guest settings, or taking over the entire session check.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/session.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->extensions->call('sessions_start', $this);\nif ($this->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Start Date for RSS/Atom Feeds in ExpressionEngine\nDESCRIPTION: The `dynamic_start=\"yes\"` parameter is specifically for use within RSS/Atom feed templates. It enables ExpressionEngine to dynamically determine the starting date for feed content, facilitating the serving of only new content upon request via RFC3229-compliant mechanisms. The default value is \"no\". This parameter has no effect outside of RSS/Atom feed contexts.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_8\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\ndynamic_start=\"yes\"\n```\n\n----------------------------------------\n\nTITLE: Using Avatar Variables in ExpressionEngine Templates\nDESCRIPTION: Shows how to use avatar-related variables within an ExpressionEngine template to display an author's avatar image with proper dimensions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_38\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{if avatar}\n    <img src=\"{avatar_url}\" width=\"{avatar_image_width}\" height=\"{avatar_image_height}\" alt=\"{author}'s avatar\">\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Database Update with Automatic Escaping\nDESCRIPTION: Safe way to update database records using ExpressionEngine's database class\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/security.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->db->update(\n    'table',\n    array('email_address' => 'brett.bretterson@example.com'),\n    array('name' => 'Brett Bretterson')\n);\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Option Syntax in ExpressionEngine\nDESCRIPTION: Illustrates the syntax used within the `$commandOptions` class variable to define various command-line options for an ExpressionEngine CLI command. It shows examples for short flags (`-a`, `-b`, `-c`, `-g`) and long options (`--foo`, `--bar`, `--baz`), demonstrating how to specify if parameters are disallowed (no colon), required (`:`), optional (`::`), or multi-pass (`*::`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/defining-input.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n'a',        // short flag -a, parameter is not allowed\n'b:',       // short flag -b, parameter is required\n'c::',      // short flag -c, parameter is optional\n'foo',      // long option --foo, parameter is not allowed\n'bar:',     // long option --bar, parameter is required\n'baz::',    // long option --baz, parameter is optional\n'g*::',     // short flag -g, parameter is optional, multi-pass\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Parameters in Channel Entries Tag\nDESCRIPTION: Shows how to enable specific parameters to be dynamically set in the channel entries tag. The example enables orderby, limit, and category parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/dynamic-parameters.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:entries dynamic_parameters=\"orderby|limit|category\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Comment Submission Form in ExpressionEngine\nDESCRIPTION: Provides a snippet for creating a comment submission form using EE Template Language in ExpressionEngine. This form includes fields for name, email, location, URL, and the comment body, with options for CAPTCHA verification and remembering personal information. Dependencies include the ExpressionEngine CMS, and it expects user inputs for comment details. Outputs the formatted comment form ready for submission.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/form.md#2025-04-22_snippet_0\n\nLANGUAGE: EE Template Language\nCODE:\n```\n{exp:comment:form channel=\\\"news\\\" preview=\\\"channel/preview\\\"}\\n\\n  {if logged_out}\\n    <label for=\\\"name\\\">Name:</label> <input type=\\\"text\\\" name=\\\"name\\\" value=\\\"{name}\\\" size=\\\"50\\\" /><br />\\n    <label for=\\\"email\\\">Email:</label> <input type=\\\"text\\\" name=\\\"email\\\" value=\\\"{email}\\\" size=\\\"50\\\" /><br />\\n    <label for=\\\"location\\\">Location:</label> <input type=\\\"text\\\" name=\\\"location\\\" value=\\\"{location}\\\" size=\\\"50\\\" /><br />\\n    <label for=\\\"url\\\">URL:</label> <input type=\\\"text\\\" name=\\\"url\\\" value=\\\"{url}\\\" size=\\\"50\\\" /><br />\\n  {/if}\\n\\n  <label for=\\\"comment\\\">Comment:</label><br />\\n  <textarea name=\\\"comment\\\" cols=\\\"70\\\" rows=\\\"10\\\">{comment}</textarea>\\n  <label><input type=\\\"checkbox\\\" name=\\\"save_info\\\" value=\\\"yes\\\" {save_info} /> Remember my personal information</label><br />\\n  <label><input type=\\\"checkbox\\\" name=\\\"notify_me\\\" value=\\\"yes\\\" {notify_me} /> Notify me of follow-up comments?</label><br />\\n\\n  {if captcha}\\n    <label for=\\\"captcha\\\">Please enter the word you see in the image below:</label><br />\\n    <p>{captcha}<br />\\n    <input type=\\\"text\\\" name=\\\"captcha\\\" value=\\\"{captcha_word}\\\" maxlength=\\\"20\\\" /></p>\\n  {/if}\\n\\n  <input type=\\\"submit\\\" name=\\\"submit\\\" value=\\\"Submit\\\" />\\n  <input type=\\\"submit\\\" name=\\\"preview\\\" value=\\\"Preview\\\" />\\n\\n  {!-- required to prevent EE from outputting form if commenting is disabled or expired --}\\n  {if comments_disabled}Comments on this entry are currently disabled.{/if}\\n  {if comments_expired}Commenting on this entry has expired.{/if}\\n\\n{/exp:comment:form}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of ExpressionEngine Forgot Password Form\nDESCRIPTION: Provides a comprehensive example of the `exp:member:forgot_password_form` tag implementation. It includes parameters for success redirection (`return`), inline error display (`inline_errors`), custom password reset URL (`password_reset_url`), and a specific email template (`email_template`). The example also demonstrates conditional error message display using `{if errors}` and repopulating the email field using `{old:email}`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/forgot-password.md#2025-04-22_snippet_7\n\nLANGUAGE: ee\nCODE:\n```\n{exp:member:forgot_password_form\n    return=\"member/forgot-password/sent\"\n    inline_errors=\"yes\"\n    password_reset_url=\"member/reset-password\"\n    email_template=\"member/email-password-reset\"\n    }\n\n    {if errors}\n        <fieldset class=\"error\">\n            <legend>Errors</legend>\n            {errors}\n                <p>{error}</p>\n            {/errors}\n        </fieldset>\n    {/if}\n\n    <p>\n        <label>Your Email Address</label><br />\n        <input type=\"email\" name=\"email\" value=\"{if old:email}{old:email}{/if}\" maxlength=\"120\" size=\"40\" />\n    </p>\n\n    <p><input type=\"submit\" name=\"submit\" value=\"Submit\" /></p>\n\n    <p><a href=\"{path='member/login'}\">Login</a> &nbsp; &nbsp; <a href=\"{path='member/registration'}\">Register</a></p>\n{/exp:member:forgot_password_form}\n```\n\n----------------------------------------\n\nTITLE: Checking Single Permission using ExpressionEngine Permission Service - PHP\nDESCRIPTION: This snippet demonstrates how to check if a user has a specific permission (e.g., 'can_edit_all_comments') using the ExpressionEngine Permission Service in PHP. It requires ExpressionEngine to be loaded and available via the global 'ee' function. If the permission check passes, a protected action (here, showing a form) is executed. The key parameter is the permission string, and the output is a boolean result controlling access.\n\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/permission.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif (ee('Permission')->has('can_edit_all_comments'))\n{\n  $this->show_form();\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Form with Inline Error Handling\nDESCRIPTION: Demonstrates error handling implementation with inline error messages and field-specific error display. Uses the field:... tag syntax for custom fields.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/examples.md#2025-04-22_snippet_3\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:channel:form channel=\"products\" return=\"form_template/ENTRY_ID\" entry_id=\"{segment_2}\" error_handling=\"inline\"}\n    [...content truncated for brevity...]\n    {field:my_field_name}\n    <input type=\"submit\" name=\"submit\" value=\"Submit\">\n{/exp:channel:form}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data Using ExpressionEngine Encrypt Service (PHP)\nDESCRIPTION: This snippet illustrates how to decrypt and unserialize data that was previously encrypted and serialised, typically after form submission. It uses the ExpressionEngine Encrypt service and expects a posted 'meta' parameter. The first line decrypts input data, and the second line unserializes it for further processing. Input is an encrypted string (usually from $_POST), and the output is a PHP array representing the original data structure.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/encrypt.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$meta = ee('Encrypt')->decrypt($_POST['meta']);\n$meta = unserialize($meta);\n```\n\n----------------------------------------\n\nTITLE: Implementing CP/Form in ExpressionEngine Control Panel Route\nDESCRIPTION: Complete example of implementing a form in an ExpressionEngine Control Panel route using the CP/Form service. This code sets up a breadcrumb, creates a form, and passes it to a view for rendering in the main body area.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/modules.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function process($id = false)\n{\n\n  // set the breadcrumb\n  $this->addBreadcrumb('index', 'Home');\n\n  // call our getForm() method to get\n  // our array\n  $form = $this->getForm();\n\n  // store our form in our $variables array\n  // to be passed into our view\n  $variables = [\n    'form'  => $form\n  ];\n\n  $this->setBody('Index', $variables);\n\n  return $this;\n}\n\nprivate function getForm()\n{\n  $form = ee('CP/Form');\n  $form->asTab();\n  $form->asFileUpload();\n  $field_group = $form->getGroup('header 1');\n  $field_set = $field_group->getFieldSet('first_name');\n  $field_set->getField('first_name', 'text')\n            ->setDisabled(true)\n            ->setValue('Eric');\n  \n  return $form->toArray();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Tag in ExpressionEngine\nDESCRIPTION: Example of using the field tag for individual field output with error handling\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/fields.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"zipcode\">Your Custom Field (Text field)</label>\n<div class=\"error\">{error:zipcode}</div>\n{field:zipcode}\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Model Values in ExpressionEngine\nDESCRIPTION: Demonstrates how to set and read model properties directly as object properties, and how to bulk set data from an array using the set() method.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$template->template_name = 'index';\nvar_dump($template->template_name); // 'index'\n\n$template->set(array(\n  'template_name' => 'header',\n  'template_notes' => 'This is the site header!'\n));\n```\n\n----------------------------------------\n\nTITLE: Creating Member Search Links in ExpressionEngine\nDESCRIPTION: Shows how to use the member_search_path variable to create a link that displays all entries by a specific author in the search results template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_40\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{member_search_path='search/results'}\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n<a href=\"{member_search_path='search/results'}\">View entries by this member</a>\n```\n\n----------------------------------------\n\nTITLE: Test for Sticky Entries - markup\nDESCRIPTION: Demonstrates using {if sticky} to check if an entry is set to 'sticky'. It includes examples for testing both positive and negative sticky states ('y' or 'n').\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_52\n\nLANGUAGE: markup\nCODE:\n```\n{if sticky == 'y'} content {/if}\n{if sticky == 'n'} content {/if}\n```\n\n----------------------------------------\n\nTITLE: Initializing Field Set from Field Group in ExpressionEngine PHP\nDESCRIPTION: Demonstrates how to request a Field Set from a Field Group object in ExpressionEngine's CP/Form API. This snippet shows the basic setup for working with Field Sets.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/cp-form/field-sets.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$form = ee('CP/Form');\n$field_group = $form->getGroup('General Settings');\n$field_set = $field_group->getFieldSet('Field Set Name');\n```\n\n----------------------------------------\n\nTITLE: Creating and Rendering ExpressionEngine Views in PHP\nDESCRIPTION: Demonstrates how to instantiate and render a view object in ExpressionEngine using PHP. Requires ExpressionEngine framework with the View Service available via the ee() function. 'make' creates a view instance by path, and 'render' accepts an associative array where keys become view variables. Outputs are HTML strings for display. This method expects add-on view files to exist at the specified location.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/view.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$view = ee('View')->make('addon_name:member/profile');\n\n$output = $view->render(array(\n  'member' => $current_member\n));\n```\n\n----------------------------------------\n\nTITLE: Setting Columns for Table - ExpressionEngine PHP\nDESCRIPTION: This snippet demonstrates how to set column headers in a table using the ExpressionEngine Table class. Dependencies include the Table class namespace for constants. Parameters like 'id', 'channel', 'short_name', and specific column configurations determine how columns are displayed, such as the toolbar and checkbox columns.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/table.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$table->setColumns(\n  array(\n    'id',\n    'channel',\n    'short_name',\n    'manage' => array(\n      'type'  => Table::COL_TOOLBAR\n    ),\n    array(\n      'type'  => Table::COL_CHECKBOX\n    )\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Calling the `grid_query` Extension Hook in ExpressionEngine (PHP)\nDESCRIPTION: This PHP snippet demonstrates how ExpressionEngine checks for and calls the `grid_query` extension hook. If the hook is active, it calls the extension with parameters like entry IDs, field ID, content type, data table name, and the compiled SQL query. Otherwise, it executes the default database query to fetch Grid row data. This allows developers to customize the data retrieval process for Grid fields.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/grid.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif (ee()->extensions->active_hook('grid_query') === TRUE)\n{\n  $rows = ee()->extensions->call(\n    'grid_query',\n    $entry_ids,\n    $field_id,\n    $content_type,\n    $this->_data_table($content_type, $field_id),\n    ee()->db->_compile_select(FALSE, FALSE)\n  );\n}\nelse\n{\n  $rows = ee()->db->get(\n    $this->_data_table($content_type, $field_id)\n  )->result_array();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Dashboard Widget Class ExpressionEngine PHP\nDESCRIPTION: Defines a PHP class for a dashboard widget in an ExpressionEngine addon. The widget must reside in the addon’s widgets directory, use the correct namespace (AddonNamespace\\Widgets), and extend the AbstractDashboardWidget class while implementing the DashboardWidgetInterface. The widget sets optional properties (width, class), and provides required methods to generate the widget’s title and contents, as well as an optional method for custom content in the top-right. Dependencies include ExpressionEngine’s Pro\\Service\\Dashboard components and use of system functions like ee('Permission') and ee('View'). The main input is context via ExpressionEngine services, and output is HTML for widget rendering.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/widgets.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n* namespace is required and must be add-on's namespace + 'Widgets'\n* \n*/\nnamespace Addons\\Pro\\Widgets;\n\nuse ExpressionEngine\\Addons\\Pro\\Service\\Dashboard;\n\nclass Dashboard extends Dashboard\\AbstractDashboardWidget implements Dashboard\\DashboardWidgetInterface {\n\n    public $width = 'full'; //optional, if you want full width widget\n    public $class= '';//optional; extra CSS class you want to give to widget container\n\n    /**\n    * required\n    */\n    public function getTitle() : string \n    {\n        return lang('members'); //widget title/header/top line\n    }\n\n    /**\n    * required\n    * must return the inner HTML for widget\n    */\n    public function getContent() : string\n    {\n        $vars = [];\n        $vars['can_access_members'] = ee('Permission')->can('access_members');\n        \n        return ee('View')->make('pro:widgets/members')->render($vars);\n    }\n\n    /**\n    * optional\n    * used to generate extra content shown at top right corner of widget\n    */\n    public function getRightHead() : string\n    {\n        return ee('View')->make('pro:widgets/_embed/member_buttons')->render();\n    }\n\n} \n```\n\n----------------------------------------\n\nTITLE: Encrypting Text in PHP\nDESCRIPTION: Demonstrates the encrypt() method for encrypting text, with options for base64 encoding the result.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$str = 'A discussion about \"Wonko the Sane\"';\n$encrypted = ee('Format')->make('Text', $str)->encrypt();\n// �1����j(QqS ���>}  ��1LU�䯏�u��u�%9�E0�3���tQhFsA�w[ZÈ�\n\n$encrypted = ee('Format')->make('Text', $str)->encrypt(['encode' => TRUE]);\n// UKEQBOdb+8DaznDlVTW1SHbrvTd2MsVNgoSJ7OxrIhqAYtyUfhOAih6ZvXXO0DTl+eV27tIV2bSrojMRYxA+4g==\n```\n\n----------------------------------------\n\nTITLE: File Upload Field Implementation in Channel Form\nDESCRIPTION: Demonstrates how to implement file upload fields in Channel Forms, including handling existing files and directory specifications.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/examples.md#2025-04-22_snippet_5\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:channel:form channel=\"products\" return=\"form_template/ENTRY_ID\"}\n    <input type=\"file\" name=\"my_field_name\" />\n    <input type=\"hidden\" name=\"my_field_name_directory\" value=\"1\" />\n    <input type=\"hidden\" name=\"my_field_name_hidden_file\" value=\"{my_field_name}{file_name}{/my_field_name}\" />\n    <input type=\"submit\" name=\"submit\" value=\"Submit\">\n{/exp:channel:form}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complete Contact Form with Parameters in ExpressionEngine\nDESCRIPTION: A complete example of a support contact form implementation with recipient settings, charset specification, and form fields including email, subject, and message. Demonstrates auto-filling fields with member information.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_1\n\nLANGUAGE: ee\nCODE:\n```\n{exp:email:contact_form user_recipients=\"no\" recipients=\"admin@example.com\" charset=\"utf-8\"}\n        <h2>Support Form</h2>\n        <p>\n            <label for=\"from\">Your Email:</label><br />\n            <input type=\"text\" id=\"from\" name=\"from\" size=\"40\" maxlength=\"35\" value=\"{member_email}\" />\n        </p>\n        <p>\n            <label for=\"subject\">Subject:</label><br />\n            <input type=\"text\" id=\"subject\" name=\"subject\" size=\"40\" value=\"Contact Form\" />\n        </p>\n        <p>\n            <label for=\"message\">Message:</label><br />\n            <textarea id=\"message\" name=\"message\" rows=\"18\" cols=\"40\">\n                Support Email from: {member_name}\n                Sent at:  {current_time format=\"%Y %m %d\"}\n            </textarea>\n        </p>\n        <p>\n            <input name=\"submit\" type='submit' value='Submit Form' />\n        </p>\n    {/exp:email:contact_form}\n```\n\n----------------------------------------\n\nTITLE: Basic Channel Form Implementation in HTML\nDESCRIPTION: Simple example showing the minimum required code to create a Channel Form with a title field\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:form channel=\"news\"}\n  <input name=\"title\" type=\"text\">\n  <input type=\"submit\" value=\"Submit\">\n{/exp:channel:form}\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Matching in ExpressionEngine\nDESCRIPTION: Example of using the matches operator for regular expression pattern matching.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_4\n\nLANGUAGE: ee\nCODE:\n```\n{if segment_3 ~ \"/^P\\d+/\"}paginated{/if}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Pro Search Filter Class in PHP for ExpressionEngine\nDESCRIPTION: This code snippet demonstrates the basic structure of a Pro Search Filter class in ExpressionEngine. It includes protected properties for parameters, fields, and priority, as well as methods for filtering, determining fixed order, exclusion, and modifying results.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/anatomy.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Pro_search_filter_foo extends Pro_search_filter {\n\n\tprotected $params;\n\tprotected $fields;\n\tprotected $priority = 5;\n\n\tpublic function filter($entry_ids)\n\t{\n\t\treturn $entry_ids;\n\t}\n\n\tpublic function fixed_order()\n\t{\n\t\treturn FALSE;\n\t}\n\n\tpublic function exclude()\n\t{\n\t\treturn NULL;\n\t}\n\n\tpublic function results($rows)\n\t{\n\t\treturn $rows;\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: PCRE Subpattern Optimization Example\nDESCRIPTION: Shows proper usage of ?: for non-capturing groups in regular expressions to improve performance.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/performance.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$str = preg_replace('/xyz([0-9]+)/', 'zyx', $str);\n```\n\nLANGUAGE: php\nCODE:\n```\n$str = preg_replace('/xyz(?:[0-9]+)/', 'zyx', $str);\n$str = preg_replace('/xyz([0-9]+)/', 'zyx\\\\1', $str);\n```\n\n----------------------------------------\n\nTITLE: Handling Prolet Action Method in PHP\nDESCRIPTION: This snippet details how to define the action method for a Prolet, which is responsible for rendering the Prolet's output. By default, this is the `index()` method, but it can be customized using the `$action` property or `getAction()` method. When returning an array, form configuration and submission handling are demonstrated.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/prolets.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nprotected $action = 'do_something_cool';\n```\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getAction()\n{\n    return 'do_something_else';\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\npublic function index()\n{\n    if (ee('Request')->isPost()) {\n        //handle form submission\n        return ee()->output->send_ajax_response(['success']);\n    }\n    $vars['sections'] = array(\n      array(\n        array(\n          'title' => 'site_name',\n          'fields' => array(\n            'site_name' => array(\n            'type' => 'text',\n            'value' => $site->site_label,\n            'required' => TRUE\n            )\n          )\n        )\n      )\n    );\n    return $vars;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Search URLs Before and After Using Shortcuts\nDESCRIPTION: Illustrates how a complex, encoded search query URL generated by ExpressionEngine Pro Search can be replaced by a simpler, named shortcut URL. The first URL shows the complex, encoded version, while the second shows the equivalent URL using a saved shortcut named 'hello'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/shortcuts.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndomain.com/search/eyJyZXN1bHRfcGFnZSI6Im5ld3NcL3NlYXJjaCIsImtleXdvcmRzIjoiaGVsbG8gd29ybGQiLCJjb2xsZWN0aW9uIjoibmV3cyJ9\n```\n\nLANGUAGE: text\nCODE:\n```\ndomain.com/search/hello\n```\n\n----------------------------------------\n\nTITLE: Creating a Weak Relationship Definition in PHP\nDESCRIPTION: Example of defining a weak belongsTo relationship that prevents cascading deletions. When the parent is deleted, the foreign key is zeroed out rather than deleting the child record.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/relating-models.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nprotected static $_relationships = array(\n  'LastAuthor' => array(\n    'type' => 'belongsTo',\n    'model' => 'ee:Member',\n    'from_key' => 'author_id',\n    'weak' => TRUE\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Looping Through Custom Profile Fields in ExpressionEngine\nDESCRIPTION: The `{custom_profile_fields}` tag pair iterates through all available custom member profile fields. Inside the loop, variables like `{lang:profile_field}` (or `{field_label}`), `{lang:profile_field_description}` (or `{field_instructions}`), `{field_id}`, `{field_name}`, `{form:custom_profile_field}` (or `{display_field}`), `{field_data}`, `{if field_required}`, `{text_direction}`, `{maxlength}`, and `{field_type}` can be used to display field labels, instructions, and the appropriate form input for each custom field.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_19\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{custom_profile_fields}\n    <p>\n        <label>{lang:profile_field}</label><br>\n        <small>{lang:profile_field_description}</small><br>\n\n        {form:custom_profile_field}\n\n    </p>\n {/custom_profile_fields}\n```\n\n----------------------------------------\n\nTITLE: Using the {if frontedit} Conditional Tag in ExpressionEngine Templates\nDESCRIPTION: This ExpressionEngine template conditional tag checks if the front-end editing feature is currently active and available for the logged-in user. Content placed between the opening `{if frontedit}` and closing `{/if}` tags will only be rendered in the template output if front-end editing is enabled.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/advanced-usage/front-end/frontend.md#2025-04-22_snippet_1\n\nLANGUAGE: ee\nCODE:\n```\n{if frontedit} content {/if}\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Error Display for ExpressionEngine Login Form\nDESCRIPTION: Shows how to use the `inline_errors=\"yes\"` parameter to enable inline display of validation errors next to the respective form fields, rather than using a separate error template. Requires ExpressionEngine's form validation features.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/login.md#2025-04-22_snippet_5\n\nLANGUAGE: ee\nCODE:\n```\ninline_errors=\"yes\"\n```\n\n----------------------------------------\n\nTITLE: Screen Name Field - HTML\nDESCRIPTION: Offers an input for the member's screen name with label, required in the registration process. Screen names are typically displayed publicly, and the field enforces a maxlength constraint of 120.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<label for=\"screen_name\">Screen Name</label>\n<input type=\"text\" name=\"screen_name\" value=\"\" maxlength=\"120\" size=\"40\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing an ExpressionEngine Action for API Endpoint\nDESCRIPTION: This PHP code defines an ExampleAction class that extends AbstractRoute. It processes a POST request, retrieves an entry from the database based on the provided ID, and returns the entry's title or an error message.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace ExpressionengineDeveloper\\AmazingAddOn\\Actions;\n\nuse ExpressionEngine\\Service\\Addon\\Controllers\\Action\\AbstractRoute;\n\nclass ExampleAction extends AbstractRoute\n{\n    public function process()\n    {\n        // we'll use the post() method from the core's\n        // Input Class to grab our POST data and put\n        // that in our $data array\n        $entry_id = ee()->input->post('id');\n\n        // here we're using the Channel Entry Model\n        // to request the entry's title\n        $entry = ee('Model')\n                        ->get('ChannelEntry')\n                        ->filter('entry_id', $entry_id)\n                        ->first();\n\n\n        if ($entry){\n            $response = $entry->title;\n        }else{\n            $response = \"No Matching Entry\"\n        }\n\n        echo $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Empty Fields in ExpressionEngine Channel Entries\nDESCRIPTION: Demonstrates how to include or exclude entries with empty fields in ExpressionEngine channel entries using the IS_EMPTY search constant.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_28\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsearch:body=\"IS_EMPTY\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsearch:body=\"not IS_EMPTY\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsearch:body=\"=IS_EMPTY|sandwich\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsearch:body=\"IS_EMPTY|sandwich\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsearch:body=\"not IS_EMPTY|sandwich|salad\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{exp:channel:entries search:style=\"=ale\" search:region=\"germany|belgium\" search:rating=\"=3|4|5\"}\n```\n\n----------------------------------------\n\nTITLE: Sorting and Ordering Channel Entries in ExpressionEngine\nDESCRIPTION: Demonstrates how to sort and order channel entries in ExpressionEngine, including options for ascending/descending order and multiple sorting criteria.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_30\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsort=\"asc\" sort=\"desc\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\norderby=\"screen_name|date\" sort=\"asc|desc\"\n```\n\n----------------------------------------\n\nTITLE: Custom Fields Rendering in ExpressionEngine\nDESCRIPTION: This code defines how custom fields can be rendered using various conditionals and options tags in ExpressionEngine. It covers multiple field types such as text, textarea, select, and relationship fields. Dependencies include having fields setup in ExpressionEngine with appropriate types and options configured.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n\n{custom_fields}\n  <label for=\"{field_name}\">{if required}* {/if}{field_label}</label>\n  {field_instructions}\n\n  {if error}\n    <p class=\"error\">{error}</p>\n  {/if}\n\n  {if textarea}\n    <textarea id=\"{field_name}\" name=\"{field_name}\" dir=\"{text_direction}\" rows=\"{rows}\">{field_data}</textarea>\n  {/if}\n\n  {if rte}\n    {display_field}\n  {/if}\n\n  {if text}\n    <input type=\"text\" dir=\"{text_direction}\" id=\"{field_name}\" name=\"{field_name}\" value=\"{field_data}\" maxlength=\"{maxlength}\" size=\"50\">\n  {/if}\n\n  {if select}\n    <select id=\"{field_name}\" name=\"{field_name}\">\n      {options}<option value=\"{option_value}\"{selected}>{option_name}</option>{/options}\n    </select>\n  {/if}\n\n  {if date}\n    <input type=\"text\" id=\"{field_name}\" name=\"{field_name}\" value=\"{field_data}\" size=\"50\">\n  {/if}\n\n  {if checkbox}\n    {options}\n      <label class=\"checkbox\">{option_value}\n        <input type=\"checkbox\" id=\"{field_name}\" name=\"{field_name}[]\" value=\"{option_value}\"{checked}>\n      </label>\n    {/options}\n  {/if}\n\n  {if radio}\n    {options}\n      <label class=\"checkbox\">{option_value}\n        <input type=\"radio\" id=\"{field_name}\" name=\"{field_name}\" value=\"{option_value}\"{checked}>\n      </label>\n    {/options}\n  {/if}\n\n  {if file}\n    {display_field}\n  {/if}\n\n  {if relationships}\n    {if allow_multiple}\n      <ul style=\"list-style: none\">\n        {options}\n        <li>\n          <input type=\"text\" name=\"{field_name}[sort][]\" value=\"{option_order}\" style=\"width: 25px\">\n          <label class=\"checkbox\">\n          <input type=\"checkbox\" name=\"{field_name}[data][]\" value=\"{option_value}\"{checked}> {option_name}\n          </label>\n        </li>\n        {/options}\n      </ul>\n    {if:else}\n        <select id=\"{field_name}\" name=\"{field_name}[data][]\">\n        {options}\n          <option value=\"{option_value}\"{selected}>{option_name}</option>\n        {/options}\n        </select>\n    {/if}\n  {/if}\n\n  {if grid}\n    {display_field}\n  {/if}\n\n  {if multiselect}\n    <select id=\"{field_name}\" name=\"{field_name}[]\" multiple=\"multiple\">\n      {options}\n        <option value=\"{option_value}\"{selected}>{option_name}</option>\n      {/options}\n    </select>\n  {/if}\n{/custom_fields}\n\n```\n\n----------------------------------------\n\nTITLE: Handling Form Validation Errors in ExpressionEngine Templates\nDESCRIPTION: Demonstrates how to use error variables in ExpressionEngine templates to display form validation errors. This includes checking for errors and iterating through error messages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/single-variables.md#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n{if errors}\n    <p class=\"error\">Please correct the following errors:</p>\n    <ul>\n        {errors}\n            <li>{error}</li>\n        {/errors}\n    </ul>\n{if:else}\n    <!-- No errors, or form not submitted yet -->\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Displaying Individual Custom Profile Field Input in ExpressionEngine\nDESCRIPTION: To display the form input for a specific custom profile field, use its field short name prefixed with `field:`. For example, `{field:birthday}` would output the input element for the custom field with the short name 'birthday'. This must be used within the `exp:member:edit_profile` tag pair.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_18\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{field:birthday}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Channel Entry by ID using PHP\nDESCRIPTION: Shows two methods to get a channel entry by its ID - either using filter() or direct primary key lookup.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-entry.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$entry_id = 50;\n\n$entry_object = ee('Model')\n                ->get('ChannelEntry')\n                ->filter('entry_id', $entry_id)\n                ->first();\n```\n\nLANGUAGE: php\nCODE:\n```\n$entry_id = 50;\n\n$entry_object = ee('Model')\n                ->get('ChannelEntry', $entry_id)\n                ->first();\n```\n\n----------------------------------------\n\nTITLE: Executing Validation with ExpressionEngine Validator in PHP\nDESCRIPTION: This snippet demonstrates initiating the validation process in ExpressionEngine using PHP. The `validate()` method is called on a validator object (`$validator`) with the data to be validated (`$data`) passed as an argument. The method returns a result object (`$result`) which encapsulates the outcome of the validation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/validation.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$result = $validator->validate($data);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Validation Rules with Callbacks - ExpressionEngine - PHP\nDESCRIPTION: This PHP snippet demonstrates creating a custom rule 'impossible' using a closure via ExpressionEngine's Validator object. It defines a function that returns TRUE only if a field has both values 5 and 6, which never occurs (demonstrating custom error messaging). The rule is then assigned to the 'age' field. Prerequisites include having ExpressionEngine loaded and an instance of a validator object. The input data is validated based on this custom logic.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/validation.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$validator = ee('Validation')->make();\n\n$validator->defineRule('impossible', function($key, $value, $parameters)\n{\n  if ($value == 5 && $value == 6) {\n    return true;\n  }\n\n  return 'this_is_impossible';\n});\n\n$validator->setRules(array(\n  'age' => 'required|impossible'\n));\n\n$result = $validator->validate($data);\n```\n\n----------------------------------------\n\nTITLE: Getting POST or GET Parameters\nDESCRIPTION: Example of using the request:get_post tag to retrieve either a $_POST or $_GET parameter value.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/request.md#2025-04-22_snippet_3\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:request:get_post name=\"my-var\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Datepicker Parameter - ExpressionEngine Template Syntax\nDESCRIPTION: Demonstrates how to use the datepicker parameter in ExpressionEngine template tags to control the display of a date picker in registration forms. The parameter can be set to either \\\"yes\\\" (enabled by default) or \\\"no\\\" to control date input fields. There are no dependencies other than ExpressionEngine form templates, and it is used as a field attribute in custom forms.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\ndatepicker=\"no\"\n```\n\n----------------------------------------\n\nTITLE: Aliasing Inverse Relationships to Access Related Data\nDESCRIPTION: Shows how to alias a prefixed inverse relationship to a simpler name for easier access. This makes the prefixed relationship name more usable in your code.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/relating-models.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$member = ee('Model')->get('Member')->first();\n$member->alias('mymodel:AuthoredMyModels', 'Lastauthored');\n\n$last_authored = $member->Lastauthored;\n```\n\n----------------------------------------\n\nTITLE: Basic Member Search Form Implementation\nDESCRIPTION: Complete example of implementing a member search form with inputs for keywords, search field selection, and member role filtering.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/search.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{exp:member:member_search}\n    {form_declaration}\n        <input type=\"text\" name=\"search_keywords_1\" />\n        <select name='search_field_1' class='select' >\n            <option value='screen_name'>Search Field</option>\n            <option value='screen_name'>Screen Name</option>\n            <option value='email'>Email Address</option>\n            {custom_profile_field_options}\n        </select>\n\n        <select name='search_group_id' class='select' >\n            {group_id_options}\n        </select>\n\n        <div class=\"itempadbig\">&nbsp; <input type='submit' value='search' class='submit' /></div>\n    </form>\n{/exp:member:member_search}\n```\n\n----------------------------------------\n\nTITLE: Using Views with Variables in ExpressionEngine Add-on Control Panel\nDESCRIPTION: Code snippet demonstrating how to use the View service in an ExpressionEngine add-on to render a more dynamic Control Panel page. This example shows passing variables to a view file for rendering content in the main body area.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/modules.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$variables = [\n    'name' => 'Matt',\n    'color' => 'Green'\n];\n\n$this->setBody('Index', $variables);\n```\n\n----------------------------------------\n\nTITLE: Screen Name Variable Output - ExpressionEngine Template Syntax\nDESCRIPTION: Repopulates the screen_name field with its previous value if supplied, useful for multi-step forms or when returning validation errors. Leverages ExpressionEngine variable syntax.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_25\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\n{if screen_name}{screen_name}{/if}\n```\n\n----------------------------------------\n\nTITLE: Displaying Entry Title in ExpressionEngine\nDESCRIPTION: Shows how to use the `{title}` variable inside an ExpressionEngine `{entry_titles}` tag pair (or other entry contexts) to output the title of the current entry.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n{entry_titles} {title} {/entry_titles}\n```\n\n----------------------------------------\n\nTITLE: Using the Date Filter in PHP\nDESCRIPTION: Demonstrates how to add a Date filter, retrieve its value, and apply it to a model query.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/filter.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$filters = ee('CP/Filter')->add('Date');\n$values = $filters->values();\n$date_value = $values['filter_by_date'];\n\nif (is_array($date_value))\n{\n  $model->filter('some_date', '>=', $date_value[0]);\n  $model->filter('some_date', '<', $date_value[1]);\n}\nelse\n{\n  $model->filter('some_date', '>=', ee()->localize->now - $date_value);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Single Consent in PHP\nDESCRIPTION: Example showing how to check if a user has granted consent for a specific request using the Consent service.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/consent.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif (ee('Consent')->hasGranted('my_addon:do_stuff'))\n{\n  $this->doStuff();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Typed Columns in ExpressionEngine Models\nDESCRIPTION: Demonstrates how to define typed columns using the $_typed_columns metadata array. This allows for automatic type conversion when getting or setting model properties, ensuring consistent data types.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/building-your-own.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nprotected static $_typed_columns = array(\n  'model_id' => 'int',\n  'created_at' => 'timestamp'\n);\n\n$my_model->model_id = '5'; // set to int 5\n$my_model->model_id; // always returns an integer\n\n$my_model->created_at; // returns a DateTime object\n$my_model->created_at = new DateTime('2015-01-30'); // sets an int timestamp\n$my_model->created_at = 1421558529; // also ok\n```\n\n----------------------------------------\n\nTITLE: Handling Reorder Events for Folder Lists using JavaScript and jQuery in ExpressionEngine\nDESCRIPTION: Provides a JavaScript example using jQuery to handle the sort event (`EE.cp.folderList.onSort`) for a reorderable folder list created with the ExpressionEngine Sidebar Service. It shows how to define a callback function that executes when items are reordered, extract data (like unique identifiers or `data-group_name` attributes) from the reordered list items, and send this data via an AJAX POST request to a server-side endpoint (e.g., `EE.template_groups_reorder_url`) to persist the new order. This requires the folder list to be marked as reorderable using `canReorder()` in the PHP code and the corresponding JavaScript object (`EE.cp.folderList`) to be available.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nEE.cp.folderList.onSort('list-name', function(list) {\n  // Do as you wish with the passed list object\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Reorder template groups\nEE.cp.folderList.onSort('template-group', function(list) {\n  // Create an array of template group names\n  var template_groups = $.map($('> li', list), function(list_item) {\n    return $(list_item).data('group_name');\n  });\n\n  $.ajax({\n    url: EE.template_groups_reorder_url,\n    data: { 'groups': template_groups },\n    type: 'POST',\n    dataType: 'json'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Perpage Filter in PHP\nDESCRIPTION: Demonstrates how to create a basic Perpage filter using the CP/Filter Service, retrieve its value, and render it in a view.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/filter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$filters = ee('CP/Filter')->add('Perpage', count($items));\n\n$values = $filters->values();\n$perpage_value = $values['perpage'];\n\n$filters->render($url_object);\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Search Functionality in ExpressionEngine PHP\nDESCRIPTION: Demonstrates how to implement search functionality using the search() method to find content containing specific terms.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// find titles that contain \"hello\" and \"world\"\n->search('title', 'hello world')\n// find titles or body fields that contain \"hello\" and \"world\"\n->search(['title', 'body'], 'hello world')\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Status Code with ExpressionEngine\nDESCRIPTION: This ExpressionEngine snippet is used to set custom HTTP status codes within templates. It utilizes the `http_header` tag with the `status` attribute to define a specific status code, such as '410 Gone'. This functionality is crucial in controlling the HTTP response of a page for client-side processing. It requires ExpressionEngine as a prerequisite and should be used in non-cached templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/http-header.md#2025-04-22_snippet_0\n\nLANGUAGE: ee\nCODE:\n```\n{exp:http_header status=\"410\"}\n```\n\n----------------------------------------\n\nTITLE: Saving New Grid Field Data in PHP\nDESCRIPTION: Demonstrates two methods for saving new data to an ExpressionEngine Grid field. It involves preparing an array (`$new_grid_data`) with `new_row_X` keys containing column data. Option 1 (recommended) involves loading the `grid_model`, fetching the ChannelEntry model using `ee('Model')`, assigning the data array to the corresponding field property (dynamically constructed using `getCustomFieldPrefix`), and saving the entry. Option 2 uses the `grid_model->save_field_data` method directly, requiring the data array, field ID, content type ('channel'), and entry ID.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-entry.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nee()->load->model('grid_model');\n\n$entry_id = 5;\n$grid_field_id = 1;\n\n$new_grid_data =  array(\n\n    'new_row_0' => array(\n        'col_id_1' => 'data for column 1',\n        'col_id_2' => 'data for column 2',\n        'col_id_3' => 'data for column 3',\n    ),\n\n    'new_row_1' => array(\n        'col_id_1' => 'data for column 1',\n        'col_id_2' => 'data for column 2',\n        'col_id_3' => 'data for column 3',\n    ),\n);\n\n// Option 1, save to the Object (recommended)\n$entry = ee('Model')->get('ChannelEntry', $entry_id)->first();\n$entry->{$entry->getCustomFieldPrefix() . $grid_field_id} = $new_grid_data;\n$entry->save();\n\n// Option 2, save using the Grid method.\nee()->grid_model->save_field_data($new_grid_data, $grid_field_id, 'channel', $entry_id);\n```\n\n----------------------------------------\n\nTITLE: Running Core Migrations Only - PHP\nDESCRIPTION: Provides commands for running only the core migrations. The aliases include `-c` and `--core`. These commands do not execute add-on migrations and are useful for when only the core framework updates are required.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/migrate.md#2025-04-22_snippet_2\n\nLANGUAGE: CLI\nCODE:\n```\nphp eecli.php migrate -c\n```\n\nLANGUAGE: CLI\nCODE:\n```\nphp eecli.php migrate --core\n```\n\nLANGUAGE: CLI\nCODE:\n```\nphp eecli.php migrate:core\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Email Template for Password Reset in ExpressionEngine\nDESCRIPTION: Demonstrates how to use the `email_template` parameter within the `exp:member:forgot_password_form` tag to specify a custom template (e.g., 'member/email-password-reset') for the password reset email sent to the user. If omitted, the default system template is used.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/forgot-password.md#2025-04-22_snippet_1\n\nLANGUAGE: ee\nCODE:\n```\nemail_template=\"member/email-password-reset\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Reset Password Form in HTML\nDESCRIPTION: The code renders a reset password form for users who accessed it via an email link. Key input fields for password and password confirmation are provided, with a submit button to process the form. This snippet requires basic HTML knowledge and the ExpressionEngine framework to execute.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/reset-password.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{exp:member:reset_password_form}\n\n        <label>New Password</label><br />\n        <input name=\"password\" value=\"\" maxlength=\"72\" autocomplete=\"off\" size=\"40\" />\n\n        <label>Confirm Password</label><br />\n        <input name=\"password_confirm\" value=\"\" maxlength=\"72\" autocomplete=\"off\" size=\"40\" />\n\n\t\t<input type=\"submit\" name=\"submit\" value=\"Submit\" />\n\n{/exp:member:reset_password_form}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ExpressionEngine Channel Field (PHP)\nDESCRIPTION: Illustrates the creation of a new, basic 'text' type ChannelField using `ee('Model')->make('ChannelField')`. It sets required properties like `site_id`, `field_name`, `field_label`, `field_type`, and `field_order`. It also demonstrates setting field-specific settings using `getSettingsValues()` and `setProperty()`, followed by validation and saving. The new field's ID becomes available after saving.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-field.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n```php\n$field = ee('Model')->make('ChannelField');\n\n// Set required fields.\n$field->site_id     = ee()->config->item('site_id');\n$field->field_name  = 'my_field_name';\n$field->field_label = 'Field Label';\n$field->field_type  = 'text';\n$field->field_list_items  = '';\n$field->field_order = 1;\n\n// Set field-specific settings\n$settings = $field->getSettingsValues();\n$settings['field_settings']['field_show_file_selector'] = 'y';\n$field->setProperty('field_settings', $settings['field_settings']);\n\n// Validate and Save.\n$result = $field->validate();\n\nif ($result->isValid())\n{\n  $field->save();\n}\n\n// Field ID is now available.\n$field->field_id;\n```\n```\n\n----------------------------------------\n\nTITLE: Querying the Members Table using the Legacy Database Driver - ExpressionEngine PHP\nDESCRIPTION: This example demonstrates using the legacy Database Driver to fetch and display member screen names in an ExpressionEngine add-on via a custom template tag. It depends on ExpressionEngine's legacy db class, the 'members' table, and the AbstractRoute controller base. The process() method constructs and runs a SQL SELECT query, iteratively concatenating each row's screen_name into a string separated by HTML line breaks. This approach is compatible with older ExpressionEngine code and supports custom SQL more flexibly, but requires more manual handling of queries and results. The main limitation is minimal error handling and no scalability options for large datasets.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/database-access.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace ExpressionengineDeveloper\\AmazingAddOn\\Module\\Tags;\\n\\nuse ExpressionEngine\\Service\\Addon\\Controllers\\Tag\\AbstractRoute;\\n\\nclass Memberlist extends AbstractRoute\\n{\\n    public $return_data = '';\\n\\n    // Example tag: {exp:amazing_add_on:memberlist}\\n    public function process()\\n    {\\n\\n        ee()->db->select('screen_name');\\n        $query = ee()->db->get('members');\\n\\n        if ($query->num_rows() > 0)\\n        {\\n            foreach ($query->result() as $row)\\n            {\\n                $this->return_data .= $row->screen_name.\"<br>\";\\n            }\\n        }\\n\\n        return $this->return_data;\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Named Relationships in PHP\nDESCRIPTION: Example of defining multiple named relationships in the metadata array. Each key represents a relationship name that will be used to access related data.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/relating-models.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected static $_relationships = array(\n  'Template' => array( ... ),\n  'Authors' => array( ... )\n);\n```\n\n----------------------------------------\n\nTITLE: Using Module and Plugin Tags in ExpressionEngine\nDESCRIPTION: Shows how to retrieve and display content from modules and add-ons using the {exp:} tag syntax. This example displays entries from the channel module.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/language.md#2025-04-22_snippet_2\n\nLANGUAGE: ee\nCODE:\n```\n{exp:channel:entries}\n  <h1>{title}</h1>\n  <p>{author}</p>\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Using Conditionals in ExpressionEngine Templates\nDESCRIPTION: Demonstrates various ways to use conditionals for adding logic to templates, including simple conditions, comparisons, and if/elseif/else structures.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/language.md#2025-04-22_snippet_9\n\nLANGUAGE: ee\nCODE:\n```\n{if logged_in}Welcome back.{/if}\n\n{if (age + 5) == 100}Five years to go!{/if}\n\n{if age == 30 AND username == 'Bob'}Welcome back, Bob. 30 is the new 20.{/if}\n  You are 30!\n{if:elseif username == 'Bob'}\n  You are Bob!\n{if:else}\n  You're not 30 or Bob. That's all we know.\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Channel Form with Custom Fields Loop\nDESCRIPTION: Shows how to implement a form using the {custom_fields} loop for dynamic field generation. Handles multiple field types including text, grid, and multiselect.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/examples.md#2025-04-22_snippet_2\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:channel:form channel=\"channel_name\" return=\"channel_name/edit/ENTRY_ID\" entry_id=\"{segment_3}\"}\n    [...content truncated for brevity...]\n    {custom_fields}\n        <label for=\"{field_name}\">{if required}* {/if}{field_label}</label>\n        {field_instructions}\n        [...content truncated for brevity...]\n    {/custom_fields}\n    <input type=\"submit\" name=\"submit\" value=\"Submit\">\n{/exp:channel:form}\n```\n\n----------------------------------------\n\nTITLE: Accessing Grouped Fluid Fields without Loop - ExpressionEngine Template\nDESCRIPTION: This snippet illustrates the ExpressionEngine 7.5+ ability to access fields from a field group within a Fluid field directly, without the '{fields}' loop. By prefixing field names with the group's short_name (e.g., 'blog'), template authors can reference grouped fields using tag variables. Useful for concise templates, it assumes Fluid field 'fluid_content', field group 'blog', and includes fields like 'fluid_header' and 'fluid_text'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/fluid.md#2025-04-22_snippet_2\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{fluid_content}\n\n  {fluid_content:blog}\n      <h3>{blog:fluid_header}</h3>\n      <div>{blog:fluid_text}</div>\n  {/fluid_content:blog}\n\n{/fluid_content}\n```\n\n----------------------------------------\n\nTITLE: Updating a Custom Member Field in ExpressionEngine using PHP\nDESCRIPTION: This snippet illustrates how to set the value of a custom member field for an existing ExpressionEngine member object. It accesses the custom field dynamically using its ID (`$field_id`) prefixed with `m_field_id_`, assigns the new value, validates the member object, and saves it if validation is successful. Requires an existing `$member_object` and the `$field_id` of the custom field.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/member.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n```php\n$field_id = '26';\n$member_object->{'m_field_id_'.$field_id} = 'New Field Value';\n\n// Validate and Save.\n$result = $member_object->validate();\n\nif ($result->isValid())\n{\n  $member_object->save();\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Options with ExpressionEngine CP/Form Service in PHP\nDESCRIPTION: This example builds upon the basic usage by showcasing how to configure various form options using the CP/Form Service in ExpressionEngine. It initializes the form, sets a custom page title (`setCpPageTitle`), enables file uploads (`asFileUpload`), configures the form to render as tabs (`asTab`), and adds a specific alert (`addAlert`). The field definition remains similar, creating 'First Name' and 'Last Name' text fields within a 'General Settings' group before preparing the structure with `toArray()` for the Shared Form View.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/cp-form.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$form = ee('CP/Form');\n$form->setCpPageTitle('My Custom Form')\n    ->asFileUpload()\n    ->asTab()\n    ->addAlert('custom_alert');\n\n$field_group = $form->getGroup('General Settings');\n\n$field_set = $field_group->getFieldSet('First Name');\n$field_set->getField('first_name', 'text');\n\n$field_set = $field_group->getFieldSet('Last Name');\n$field_set->getField('last_name', 'text');\n\n$form->toArray();\n```\n\n----------------------------------------\n\nTITLE: Displaying Multi Select Labels as Comma-Separated List (ExpressionEngine)\nDESCRIPTION: This snippet demonstrates the simplest usage of a Multi Select field tag. Using the field's short name as a single variable renders a comma-separated list of the labels of the selected items.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/multiselect.md#2025-04-22_snippet_0\n\nLANGUAGE: expressionengine\nCODE:\n```\n{field_name} {!-- One,Two,Three --}\n```\n\n----------------------------------------\n\nTITLE: Conditional Preload Replacements with Live Preview in ExpressionEngine\nDESCRIPTION: Advanced example demonstrating how to use conditional preload replacements with ExpressionEngine's Live Preview functionality. This allows different status values to be used when previewing content versus displaying it on the live site.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/preload-replacement.md#2025-04-22_snippet_2\n\nLANGUAGE: expressionengine\nCODE:\n```\n{preload_replace:channels=\"news|reviews\"}\n{if is_live_preview_request}\n    {preload_replace:status_tag=\" status='open|archive|draft' \"}\n{if:else}\n    {preload_replace:status_tag=\" status='open' \"}\n{/if}\n\n{exp:channel:entries\n    channel=\"{channels}\"\n    limit=\"10\"\n    {status_tag}\n    disable=\"category_fields|member_data|pagination\"\n}\n    <h2>{title}</h2>\n    {body}\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Entries Variable in ExpressionEngine Template\nDESCRIPTION: Loops through channel entries on a specified date, displaying each entry's title and author's profile link.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/calendar.md#2025-04-22_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n{entries}\n    <div>\n        <a href=\"{title_permalink='channel/index'}\">{title}</a> <a href=\"{profile_path='member/profile'}\">{author}</a>\n    </div>\n{/entries}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Showing Content Based on Comment Allowance in ExpressionEngine\nDESCRIPTION: Uses the `{if allow_comments}` conditional tag. The content enclosed within this conditional pair will only be displayed if comments are currently allowed for the specific entry being viewed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_31\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{if allow_comments} content {/if}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Pivot Table for Many-to-Many Relationships\nDESCRIPTION: Shows how to specify a pivot table for a HasAndBelongsToMany relationship using the simple syntax. This defines the intermediate table that connects the two models.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/relating-models.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n'pivot' => 'mytable'\n```\n\n----------------------------------------\n\nTITLE: Creating URL Slugs in PHP\nDESCRIPTION: Shows how to use the urlSlug() method to create URL-friendly slugs from text, with an option to remove stopwords.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$url_title = ee('Format')->make('Text', 'A discussion about \"Wonko the Sane\"')->urlSlug();\n// a-discussion-about-wonko-the-sane\n\n$url_title = ee('Format')->make('Text', 'A discussion about \"Wonko the Sane\"')->urlSlug(['remove_stopwords' => TRUE]);\n// discussion-wonko-sane\n```\n\n----------------------------------------\n\nTITLE: Processing Multiple Consents in PHP\nDESCRIPTION: Example demonstrating how to retrieve and process all members who have granted a specific consent, including proper logging.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/consent.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$consents = ee('Consent')->getGrantedConsentsFor('my_addon:do_stuff');\nforeach ($consents as $consent)\n{\n  $this->doStuffTo($consent->Member);\n\n  // Log what we did for proper record keeping\n  $message = ee()->session->userdata('username') . ' did stuff to member ' . $consent->Member->getId();\n  $consent->log($message);\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Bytes in PHP using ExpressionEngine's Number Formatter\nDESCRIPTION: Demonstrates how to format a number of bytes into a human-readable format using the bytes() method. It can display the result with or without HTML markup.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/number.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$display_size = ee('Format')->make('Number', 76752)->bytes();\n// 75<abbr title=\"Kilobytes\">KB</abbr>\n\n$display_size = ee('Format')->make('Number', 76752)->bytes(FALSE);\n// 75 kilobytes\n```\n\n----------------------------------------\n\nTITLE: Configuring Prolet Popup Window and Buttons in PHP\nDESCRIPTION: This snippet demonstrates how to configure the size of the Prolet's popup window and customize its footer buttons. Available sizes (`footer`, `large`, `small`) affect the UI. Button customization includes altering text and associated JavaScript events, providing flexibility for Prolet actions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/prolets.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nprotected $size = 'footer';\n```\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getSize()\n{\n    return 'large';\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\nprotected $buttons = []; // No buttons will be shown\n```\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getButtons()\n{\n    return [\n        ['text' => lang('do_something_cool'), 'event' => 'let_everyone_know'],\n        ['text' => lang('do_something_else'), 'event' => 'keep_secret']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating a View Object with ExpressionEngine View Service in PHP\nDESCRIPTION: Shows how to instantiate a new view object using the ExpressionEngine View Service. Requires ExpressionEngine and a valid add-on with a view file in the appropriate 'views' folder. The returned object can be further rendered or configured as needed. The path uses the format 'addon_name:subfolder/view', referencing a PHP template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/view.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$view = ee('View')->make('addon_name:member/profile');\n```\n\n----------------------------------------\n\nTITLE: XSS Cleaning in PHP using ExpressionEngine Security Service\nDESCRIPTION: Example of using ExpressionEngine's built-in XSS sanitization method to clean user input\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/security.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$str = ee('Security/XSS')->clean($str);\n```\n\n----------------------------------------\n\nTITLE: Creating an ExpressionEngine Relationship Field (PHP)\nDESCRIPTION: Provides a comprehensive example of creating a Relationship field. It defines required properties (like label, name, type) and optional settings (target channels, entry filtering options, ordering, display settings, min/max relationships). It dynamically calculates the `field_order`, merges properties and settings using `setProperty()`, and then validates and saves the new field model.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-field.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n```php\n//Relationships with channel #4\n\n//all properties are required\n$relata_properties = array(\n\t\t'field_label' => 'relata',\n\t\t'field_name' => 'relata',\n\t\t'field_type' => 'relationship',\n\t\t'field_list_items' => ''\n);\n\n//all settings are optional\n$relata_settings = array(\n\t'channels' => array(4), // if missing relates to all channels\n\t'expired' => true, // if missing defaults to false\n\t'future' => true, // if missing defaults to false\n\t'categories' => array(), // if missing or empty allows relationships with all categories\n\t'authors' => array(), // if missing or empty allows relationships with all authors\n\t'statuses' => array('open'), // if missing or empty allows relationships with all statuses\n\t'order_field' => 'entry_date', // default is by title\n\t'order_dir' => 'desc', // default is ascending\n\t'display_entry_id' => null, //default is false\n\t'allow_multiple' => true, // default is true\n\t'rel_min' => 0,  //Minimum number of related entries\n\t'rel_max' => null  // Maximum number of related entries\n);\n\n$field = ee('Model')->make('ChannelField');\n\n$site_id = ee()->config->item('site_id');\n$field->site_id     = $site_id;\n// field_order: increment the last field order number of fields belonging to this site\n$ordernumber = 1 + ee('Model')->get('ChannelField')->filter('site_id',$site_id)->order('field_order', 'DESC')->first()->field_order;\n$field->field_order = $ordernumber;\n\n// field settings\n$changing_settings = $field->getSettingsValues()['field_settings'];\nforeach ($relata_settings as $s => $s_value) {\n\t$changing_settings[$s] = $s_value;\n}\n$field->setProperty('field_settings', $changing_settings);\n\n// field properties\nforeach ($relata_properties as $p => $p_val) {\n\t$field->setProperty($p, $p_val);\n}\n// Validate and Save.\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Filter Groups in ExpressionEngine PHP\nDESCRIPTION: Shows how to create complex query logic with filter groups, combining AND and OR conditions for advanced filtering.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// filter members who have less than 10 entries AND either have a primary role_id of 1 OR 2.\n->filter('total_entries', '<', '10')\n->filterGroup()\n    ->filter('role_id', '1')\n    ->orFilter('role_id', '2')\n->endFilterGroup()\n```\n\n----------------------------------------\n\nTITLE: Global Cache Prefix Implementation\nDESCRIPTION: Example demonstrating how to implement global caching across multiple pages using the cache_prefix parameter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/optimization/caching.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n{exp:channel:entries cache=\"yes\" refresh=\"30\" cache_prefix=\"global\"}\n```\n\n----------------------------------------\n\nTITLE: Editing Existing Grid Field Data in PHP\nDESCRIPTION: Shows how to update existing rows in an ExpressionEngine Grid field using two methods. It requires preparing an array (`$new_grid_data`) where keys are `row_id_X` (referencing existing rows) and values contain the updated column data. Option 1 (recommended) involves loading the `grid_model`, fetching the ChannelEntry model, assigning the data array, and saving. Option 2 uses the `grid_model->save_field_data` method, passing the data array, field ID, content type (obtained via `$entry->getContentType()`), and entry ID.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-entry.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nee()->load->model('grid_model');\n\n$entry_id = 5;\n$grid_field_id = 1;\n\n$new_grid_data =  array(\n\n    'row_id_5' => array(\n        'col_id_1' => 'new data for column 1',\n        'col_id_2' => 'new data for column 2',\n        'col_id_3' => 'new data for column 3',\n    ),\n\n    'row_id_6' => array(\n        //...etc\n    ),\n);\n\n// Option 1, save to the Object (recommended)\n$entry = ee('Model')->get('ChannelEntry', $entry_id)->first();\n$entry->{$entry->getCustomFieldPrefix() . $grid_field_id} = $new_grid_data;\n$entry->save();\n\n// Option 2, save using the Grid method.\nee()->grid_model->save_field_data($new_grid_data, $grid_field_id, $entry->getContentType(), $entry_id);\n```\n\n----------------------------------------\n\nTITLE: Defining Templates with Specific Types for ExpressionEngine Generator (PHP)\nDESCRIPTION: Demonstrates the extended syntax for the `$templates` property within a generator class, allowing specification of template types (like 'feed' or 'xml') in addition to descriptions. Each template is defined as an array containing 'name' (description/note) and 'type' keys. This allows the generator to create non-HTML templates, and the system will look for appropriately named stub files (e.g., `feed.feed.php`, `sitemap.xml.php`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/template-generator.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected $templates = [\n    'feed' => ['name' => 'RSS feed for all entries', 'type' => 'feed'],\n    'sitemap' => ['name' => 'XML sitemap for all entries', 'type' => 'xml'],\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Database Backup Row Limit in ExpressionEngine Config (PHP)\nDESCRIPTION: Sets the maximum number of rows that will be queried and written to the backup file at a time during database backups. Useful for preventing out-of-memory errors with large databases.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$config['db_backup_row_limit'] = 2000;\n```\n\n----------------------------------------\n\nTITLE: Extending Control Panel Menu via cp_custom_menu Hook - ExpressionEngine - PHP\nDESCRIPTION: This snippet demonstrates calling all registered implementations of the cp_custom_menu hook in ExpressionEngine, passing the $menu object to allow extensions to modify the control panel menu. It facilitates adding custom links and submenus to the secondary navigation area. Its primary dependency is the ExpressionEngine core, specifically requiring that $menu is an ExpressionEngine\\Service\\CustomMenu\\Menu instance.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/menu.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('cp_custom_menu', $menu);\n```\n\n----------------------------------------\n\nTITLE: Invalid if: Syntax Error\nDESCRIPTION: Example of a syntax error in conditionals where 'if:' is used incorrectly.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_34\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if:foo}\n```\n\n----------------------------------------\n\nTITLE: Basic File Field Template Usage in ExpressionEngine\nDESCRIPTION: This snippet demonstrates how to output the URL of a file in ExpressionEngine using a simple template tag. Requires a file field set up in the CMS.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/file.md#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{news_image}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Channel Field Group in PHP\nDESCRIPTION: Illustrates the process of creating a new Channel Field Group, setting required properties, and saving it.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-field-group.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$group = ee('Model')->make('ChannelFieldGroup');\n\n// Set Required Fields\n$group->site_id     = ee()->config->item('site_id');\n$group->group_name  = 'A New Group';\n\n// Validate and Save.\n$result = $field->validate();\n\nif ($result->isValid())\n{\n  $field->save();\n}\n```\n\n----------------------------------------\n\nTITLE: Single Statement Per Line - PHP\nDESCRIPTION: Shows the preferred PHP coding style where each statement is placed on its own line for clarity and maintainability. No dependencies are required. The snippet highlights proper assignment and string replacement across multiple lines for better readability.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/general.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$foo = 'this';\n$bar = 'that';\n$bat = str_replace($foo, $bar, $bag);\n```\n\n----------------------------------------\n\nTITLE: Documenting the Addon Plugin Model in ExpressionEngine (PHP)\nDESCRIPTION: This documentation snippet presents the class definition for the ExpressionEngine\\Model\\Addon\\Plugin model, listing key properties such as plugin_id, plugin_name, plugin_package, plugin_version, and is_typography_related. Each property is described in the context of its use within the ExpressionEngine system. There are no additional methods, relationships, or events specified for this model, and it is intended to serve as a reference for developers implementing or extending plugins. The content is PHP-language-centric and is formatted for usage with API documentation or developer guides.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/addon-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n    This source file is part of the open source project\n    ExpressionEngine User Guide (https://github.com/ExpressionEngine/ExpressionEngine-User-Guide)\n\n    @link      https://expressionengine.com/\n    @copyright Copyright (c) 2003-2022, Packet Tide, LLC (https://packettide.com)\n    @license   https://expressionengine.com/license Licensed under Apache License, Version 2.0\n*/\n\n/**\n * class ExpressionEngine\\Model\\Addon\\Plugin\n *\n * Properties:\n * - plugin_id\n * - plugin_name: Human-readable name of the plugin.\n * - plugin_package: Plugin's version number.\n * - plugin_version: Version of the plugin.\n * - is_typography_related: boolString, default is false.\n */\n\n```\n\n----------------------------------------\n\nTITLE: Comment Entries Display and Client-Side Editing with JavaScript\nDESCRIPTION: Illustrates how to display user comments and facilitate front-end editing using jQuery. The snippet involves using ExpressionEngine tags within HTML and scripts to manage comment entries, offering functionality to edit existing comments if adequate permissions are set. Dependencies include jQuery and ExpressionEngine, and it requires a front-end interface to apply the script correctly.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/form.md#2025-04-22_snippet_1\n\nLANGUAGE: EE Template Language\nCODE:\n```\n{exp:comment:entries limit=\\\"20\\\"}\\n  <div class=\\\"comment\\\" id=\\\"comment_{comment_id}\\\">\\n    <span class=\\\"comment_body\\\">\\n      {comment}\\n    </span>\\n\\n    {if editable}\\n      <a href=\\\"#\\\" class=\\\"edit_link\\\">Edit</a>\\n\\n      <div class=\\\"editCommentBox\\\" style=\\\"display:none;\\\">\\n        <textarea cols=\\\"70\\\" rows=\\\"8\\\">{comment_stripped}</textarea><br />\\n        <input type=\\\"submit\\\" name=\\\"cancel\\\" value=\\\"Cancel\\\" class=\\\"cancel_edit\\\">\\n        <input type=\\\"submit\\\" name=\\\"save\\\" value=\\\"Save\\\" class=\\\"submit_edit\\\">\\n      </div>\\n    {/if}\\n\\n    {if can_moderate_comment}\\n    <a href=\\\"#\\\" class=\\\"mod_link\\\">Close</a>\\n    {/if}\\n  </div>\\n{/exp:comment:entries}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script src=\\\"/themes/ee/asset/javascript/compressed/jquery/jquery.js\\\" type=\\\"text/javascript\\\"></script>\\n{exp:comment:edit_comment_script}\n```\n\n----------------------------------------\n\nTITLE: Date-based Filtering of Entries in ExpressionEngine\nDESCRIPTION: Demonstrates how to use year, month, and day parameters to filter channel entries based on their entry date. It shows examples of filtering by year alone and by year and month combined.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_37\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nyear=\"2003\"\n\nmonth=\"12\"\n\nday=\"23\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nyear=\"2002\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nyear=\"2003\"\n\nmonth=\"12\"\n```\n\n----------------------------------------\n\nTITLE: Checking Any of Multiple Permissions using ExpressionEngine Permission Service - PHP\nDESCRIPTION: This snippet shows how to determine if the currently logged-in user has at least one of the specified permissions (such as 'can_create_template_partials', 'can_edit_template_partials', or 'can_delete_template_partials') using the Permission Service in PHP. The method returns a boolean, and if the check succeeds, a protected function (such as displaying a header) is performed. ExpressionEngine's runtime environment with the Permission service loaded is required.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/permission.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (ee('Permission')->hasAny('can_create_template_partials', 'can_edit_template_partials', 'can_delete_template_partials'))\n{\n  $this->show_header();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a New Field to a Fluid Field via Entry Model in PHP\nDESCRIPTION: Demonstrates adding a new field instance to an ExpressionEngine Fluid field by assigning a structured array to the entry model's property (`$entry->field_id_x`). The array must contain a `fields` key. To add new fields, use keys like `new_field_1`, `new_field_2`, etc., within the `fields` array. Each `new_field_X` sub-array should specify the field ID of the field type being added (e.g., `'field_id_5'`) and its corresponding data.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-entry.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// $entry->field_id_x\n$entry->{$entry->getCustomFieldPrefix() . $fluid_field_id} = array(\n    'fields' => array(\n\n        // Adding a new field.\n        // Each is appended with a number, starting with 1.\n        'new_field_1' => array(\n            'field_id_5' => 'New field data'\n        )\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Editing a Status Name in ExpressionEngine PHP\nDESCRIPTION: Shows how to retrieve a Status object, modify its name, validate the changes, and save it.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/status.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Get the Status Object.\n$status = ee('Model')->get('Status')->filter('status','review')->first();\n\n$status->status = 'reviewed';\n\n// Validate and Save.\n$result = $status->validate();\n\nif ($result->isValid())\n{\n  $status->save();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Parameter Setting via POST in ExpressionEngine\nDESCRIPTION: The `dynamic_parameters` parameter allows specified `{exp:channel:entries}` tag parameters (e.g., `orderby`, `limit`, `sort`) to be set dynamically through data submitted via a POST form. This enables users to customize the entry display. This feature requires page caching to be turned OFF for the template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_7\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\ndynamic_parameters=\"orderby|limit|sort\"\n```\n\n----------------------------------------\n\nTITLE: One-Line Add-On Generation Command - Bash (ExpressionEngine CLI)\nDESCRIPTION: This one-line Bash snippet shows how to create a new add-on for ExpressionEngine by invoking the make:addon command with arguments supplied directly. Required and optional metadata (name, version, description, author, author URL) are provided as command-line flags. The user must have ExpressionEngine's CLI and PHP installed. Inputs are passed as arguments and, upon execution, the add-on is generated non-interactively with the specified details.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/make-addon.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp ../../system/ee/eecli.php make:addon \\\"My Example Addon\\\" -v 0.1.0 -d \\\"Some good description\\\" -a \\\"ExpressionEngine\\\" -u https://expressionengine.com\n```\n\n----------------------------------------\n\nTITLE: Declaring Model Properties - PHP\nDESCRIPTION: Demonstrates best practices for declaring model properties in PHP for ExpressionEngine. Table columns must be protected properties, while internal-use-only properties should be prefixed with an underscore to differentiate them and avoid being treated as table columns. No external dependencies. Inputs include column names and internal property names; output is the class property declarations with proper visibility.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/building-your-own.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// treated as table columns\nprotected $title;\nprotected $description;\n\n// ignored - prefixed with an underscore\nprotected $_cache;\n```\n\n----------------------------------------\n\nTITLE: Offsetting Entry Display Start in ExpressionEngine\nDESCRIPTION: The `offset` parameter skips a specified number of entries from the beginning of the results before starting the display. `offset=\"1\"` skips the first entry, while `offset=\"3\"` skips the first three entries.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_16\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\noffset=\"1\"\n```\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\noffset=\"3\"\n```\n\n----------------------------------------\n\nTITLE: Creating Category Menu Using category_menu Tag\nDESCRIPTION: Creates a dropdown menu for selecting multiple categories in an entry using the category_menu tag pair.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/categories.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{category_menu}\n  <label for=\"categories\">Categories</label>\n  <select name=\"category[]\" id=\"categories\" size=\"4\" multiple=\"multiple\">\n    {select_options}\n  </select>\n{/category_menu}\n```\n\n----------------------------------------\n\nTITLE: Using the output_show_message Extension Hook in ExpressionEngine\nDESCRIPTION: This snippet demonstrates how the output_show_message extension hook is called within ExpressionEngine's core. It checks if the hook is active and then calls it with the message data and output parameters, allowing extensions to modify front-end system messages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/output.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif (ee()->extensions->active_hook('output_show_message') === TRUE)\n{\n  $output = ee()->extensions->call('output_show_message', $data, $output);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ExpressionEngine via EECLI Tool in PHP\nDESCRIPTION: Shows how to invoke the eecli.php tool from the server command-line to update the ExpressionEngine installation. Requires access to the server command-line with PHP installed and the eecli.php file present at the root of the ExpressionEngine installation. No parameters by default; options include rollback, verbose, force-addon-upgrades, and skipping confirmations. Input is a shell command; output is performed update operations and their logs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/updating.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp eecli.php update\n```\n\n----------------------------------------\n\nTITLE: Installing ExpressionEngine Add-ons via CLI (PHP)\nDESCRIPTION: Executes the `addons:install` command using the ExpressionEngine CLI (`eecli.php`). When run without options, it may prompt the user interactively to select an add-on to install. Alternatively, a specific add-on can be installed directly by providing its name using the `--addon` or `-a` option. Requires PHP and the ExpressionEngine CLI environment.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/addons.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php addons:install\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php addons:install --addon block_and_allow\n```\n\n----------------------------------------\n\nTITLE: PHP Method Signature - getAllRoles\nDESCRIPTION: Method to retrieve all roles assigned to a member including primary role, extra roles and roles from role groups.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/member.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ngetAllRoles()\nReturns: Collection\n```\n\n----------------------------------------\n\nTITLE: Tell-A-Friend Form in ExpressionEngine\nDESCRIPTION: This snippet shows how to set up a tell-a-friend form using ExpressionEngine tags, allowing users to share content via email. It requires specifying the appropriate template group and template for correct permalink functionality.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_9\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{exp:email:tell_a_friend} {/exp:email:tell_a_friend}\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{exp:email:tell_a_friend charset=\"utf-8\" allow_html='no'}\n    <p>\n        <label for=\"from\">Your Email: </label><br />\n        <input type=\"text\" id=\"from\" name=\"from\" size=\"40\" maxlength=\"35\" value=\"{member_email}\" />\n    </p>\n    <p>\n        <label for=\"name\">Your Name: </label><br />\n        <input type=\"text\" id=\"name\" name=\"name\" size=\"40\" maxlength=\"35\" value=\"{member_name}\" />\n    </p>\n    <p>\n        <label for=\"to\">To: </label><br />\n        <input type=\"text\" id=\"to\" name=\"to\" size=\"40\" maxlength=\"35\" />\n    </p>\n    <p>\n        <label for=\"subject\">Subject: </label><br />\n        <input type=\"text\" id=\"subject\" name=\"subject\" size=\"40\" value=\"Entry by: {author}\" />\n    </p>\n    <p>\n        <label for=\"message\">Message: </label><br />\n        <textarea id=\"message\" name=\"message\" readonly=\"readonly\" rows=\"18\" cols=\"40\">\n            {summary}\n            {body}\n            {permalink=\"template_group/template\"}\n        </textarea>\n    </p>\n    <p>\n        <input name=\"submit\" type='submit' value='Submit Form' />\n    </p>\n{/exp:email:tell_a_friend}\n```\n\n----------------------------------------\n\nTITLE: Conditional Display Based on Entry Attributes\nDESCRIPTION: Several examples of conditional tags in ExpressionEngine, used to display content based on whether certain attributes like comments, avatars, or categories are set for the entry.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_46\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{if allow_comments}\n    ({comment_total}) <a href=\"{comment_path='channel/comments'}\">Comments</a>\n{/if}\n```\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{if avatar}\n    <img src=\"{avatar_url}\" width=\"{avatar_image_width}\" height=\"{avatar_image_height}\" alt=\"{author}'s avatar\">\n{/if}\n```\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{if has_categories}\n    <h3>Categories</h3>\n    <div id=\"categories\">\n        {categories}\n            ...\n        {/categories}\n    </div>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Reading File Line-by-Line with Callback in PHP\nDESCRIPTION: Reads the file specified by `$path` line by line, executing the provided `$callback` function for each line read. The line content is passed as an argument to the callback. This method is suitable for large files. The return value (`TRUE`/`FALSE`) indicates the success of closing the file handle, not the success of the callback operations. Requires the path string `$path` and a callable `$callback` function.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/filesystem.md#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nreadLineByLine($path, callable $callback)\n```\n\n----------------------------------------\n\nTITLE: Setting Return Path (Full URL) for ExpressionEngine Logout Form\nDESCRIPTION: Example of the `return` parameter for the `{exp:member:logout_form}` tag using a full URL. This specifies the absolute URL to redirect the user to after they successfully log out.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/logout.md#2025-04-22_snippet_8\n\nLANGUAGE: ee\nCODE:\n```\nreturn=\"https://example.com/return.html\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling ExpressionEngine Add-ons via CLI (PHP)\nDESCRIPTION: Executes the `addons:uninstall` command using the ExpressionEngine CLI (`eecli.php`). When run without options, it may prompt the user interactively to select an add-on to uninstall. Alternatively, a specific add-on can be uninstalled directly by providing its name using the `--addon` or `-a` option. Requires PHP and the ExpressionEngine CLI environment.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/addons.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php addons:uninstall\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php addons:uninstall --addon block_and_allow\n```\n\n----------------------------------------\n\nTITLE: Error Output for Email Variable - ExpressionEngine Template Syntax\nDESCRIPTION: Displays inline validation errors for the email field using ExpressionEngine's template tag conditional syntax. Allows for user-friendly display of validation issues within the form.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_21\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\n{if error:email}{error:email}{/if}\n```\n\n----------------------------------------\n\nTITLE: Combined Order By and Sort with Native Parameters in Pro Search - ExpressionEngine - HTML\nDESCRIPTION: Demonstrates using a select element to choose the order and sort direction (e.g., relevance, date, title), with the selected value formatted as 'field|direction'. The chosen option applies both parameters in one go within the Pro Search results. Suitable for users to adjust sorting without multiple selects. Input: orderby_sort parameter; output: sorted result entries. Works with baseline Pro Search setup.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/examples.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:form query=\"{segment_3}\"}\n  ...\n  <select name=\"orderby_sort\">\n    <option value=\"pro_search_score|desc\"{if pro_search_orderby_sort == 'pro_search_score|desc'} selected{/if}>\n      Relevance\n    </option>\n    <option value=\"date|asc\"{if pro_search_orderby_sort == 'date|asc'} selected{/if}>\n      Publish date\n    </option>\n    <option value=\"title|asc\"{if pro_search_orderby_sort == 'title|asc'} selected{/if}>\n      Title\n    </option>\n  </select>\n\n  <button type=\"submit\">Go</button>\n{/exp:pro_search:form}\n```\n\n----------------------------------------\n\nTITLE: Managing Custom Fields in ExpressionEngine Channel Entries\nDESCRIPTION: Shows how to get and set values for standard custom fields in channel entries.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-entry.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Get a Channel Entry object.\n$entry = ee('Model')->get('ChannelEntry', 5)->first();\n\n// Get the field data.\n$field_data = $entry->field_id_5;\n\n// Using Variables.\n$field_id = 5;\n$field_data = $entry->{'field_id_'.$field_id};\n```\n\nLANGUAGE: php\nCODE:\n```\n// Get a Channel Entry object.\n$entry = ee('Model')->get('ChannelEntry', 5)->first();\n\n// Set the field data.\n$entry->field_id_5 = 'New Data';\n\n// Validate and Save.\n$result = $entry->validate();\n\nif ($result->isValid())\n{\n  $entry->save();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Field Errors via getAllErrors in ExpressionEngine (PHP)\nDESCRIPTION: Illustrates one method to retrieve errors for a specific field (e.g., 'username'). It involves first fetching all errors using `$result->getAllErrors()` and then accessing the errors for the specific field by using the field name as a key on the resulting array.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/validation.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// either:\n$errors = $result->getAllErrors();\n$username_errors = $errors['username'];\n```\n\n----------------------------------------\n\nTITLE: Adding Entry Cloning Support for Fieldtypes in PHP\nDESCRIPTION: Code snippet showing how to detect when an entry is being cloned to properly handle fieldtype data that's stored in separate database tables.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/enhanced.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nif (defined('CLONING_MODE') && CLONING_MODE === true) {\n    //this is cloning request, add new rows\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Extension File Structure for ExpressionEngine 7.2+\nDESCRIPTION: Shows how to update an extension file to use the new Extension service by extending the base Extension class and adding required addon_name property.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/modernizing-existing-add-ons.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse ExpressionEngine\\Service\\Addon\\Extension;\n\nclass Amazing_add_on_ext extends Extension\n{\n    protected $addon_name = 'amazing_add_on';\n```\n\n----------------------------------------\n\nTITLE: Defining HasAndBelongsToMany Relationships with Pivot Tables - PHP\nDESCRIPTION: Demonstrates configuration of 'HasAndBelongsToMany' relationships in ExpressionEngine models using PHP, including standard and advanced pivot table declarations. The snippet shows both simple pivot table assignment and specifying explicit left/right keys for the join. Required inputs are related models, type, pivot table details, and key names; output is a complete configuration for many-to-many associations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/building-your-own.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprotected static $_relationships = array(\n  'Editors' => array(\n    'model' => 'Member',\n    'type' => 'HasAndBelongsToMany',\n    'pivot' => 'my_model_editors',\n    'from_key' => 'editor_id',\n    'to_key' => 'member_id'\n  )\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n'pivot' => array(\n  'table' => 'my_model_editors',\n  'left' => 'editor_id',\n  'right' => 'member_id'\n)\n```\n\n----------------------------------------\n\nTITLE: Overlapping Ranges Query: Date Fields Between Two Channel Fields - ExpressionEngine - HTML\nDESCRIPTION: Presents two date input fields for 'from' and 'to', filtering entries where the supplied date range overlaps with stored start and end dates (two channel fields). The results tag returns entries active within the user's specified timeframe. Inputs are two date fields; output is entries covering the overlapping range. Pro Search must be configured for these field names.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/examples.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:form query=\"{segment_3}\"}\n  When are you here?\n  From <input type=\"date\" name=\"range-from:event_start_date:event_end_date\">\n  to   <input type=\"date\" name=\"range-to:event_start_date:event_end_date\">\n  <button type=\"submit\">Go</button>\n{/exp:pro_search:form}\n```\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:results\n  query=\"{segment_3}\"\n  channel=\"events\"\n  limit=\"10\"\n}\n  <p>{title} is active from {event_start_date} to {event_start_date}.</p>\n{/exp:pro_search:results}\n```\n\n----------------------------------------\n\nTITLE: Using Parameters with ExpressionEngine Tags\nDESCRIPTION: Shows how to pass parameters to ExpressionEngine tags to control their behavior. This example retrieves 5 entries from the news channel.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/language.md#2025-04-22_snippet_4\n\nLANGUAGE: ee\nCODE:\n```\n{exp:channel:entries channel=\"news\" limit=\"5\"}\n  <h1>{title}</h1>\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Appending iCal Feed Template Type to ExpressionEngine (PHP)\nDESCRIPTION: Shows how to append a custom template type (iCal Feed) to the array of template types in ExpressionEngine using PHP. This snippet should be run in the context of an extension implementation of the template_types hook. The array key 'ical' defines the short handle, with associated display name, file extension, and required headers. Dependencies include the ExpressionEngine extensions system and access to the last_call property. The output is an associative array updated with the new template type, designed to affect template selection and file export behavior.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/design.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$custom_templates = ee()->extensions->last_call;\n\n$custom_templates['ical'] = array(             // Short name for database\n    'template_name'           => 'iCal Feed',  // Display name for Template Type dropdown\n    'template_file_extension' => '.ics',       // File extension for saving templates as files\n    'template_headers'        => array(        // Custom headers for file type\n        'Content-Type: text/ical',\n        'Content-Disposition: attachment; filename=\"event.ics\"'\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Pagination Links Markup in ExpressionEngine\nDESCRIPTION: Example showing customized pagination markup using the pagination_links variable pair\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/pagination.md#2025-04-22_snippet_2\n\nLANGUAGE: ee\nCODE:\n```\n{paginate}\n  {pagination_links}\n    <ul>\n      {first_page}\n        <li><a href=\"{pagination_url}\" class=\"page-first\">First Page</a></li>\n      {/first_page}\n\n      {previous_page}\n        <li><a href=\"{pagination_url}\" class=\"page-previous\">Previous Page</a></li>\n      {/previous_page}\n\n      {page}\n        <li><a href=\"{pagination_url}\" class=\"page-{pagination_page_number} {if current_page}active{/if}\">{pagination_page_number}</a></li>\n      {/page}\n\n      {next_page}\n        <li><a href=\"{pagination_url}\" class=\"page-next\">Next Page</a></li>\n      {/next_page}\n\n      {last_page}\n        <li><a href=\"{pagination_url}\" class=\"page-last\">Last Page</a></li>\n      {/last_page}\n    </ul>\n  {/pagination_links}\n{/paginate}\n```\n\n----------------------------------------\n\nTITLE: Verifying Signed Data Using ExpressionEngine Encrypt Service (PHP)\nDESCRIPTION: This snippet verifies that the data's signature has not changed using the verifySignature() method in ExpressionEngine's Encrypt service. It requires the original data and its signed hash, returning a boolean indicating verification status. This is typically used to check for tampering or integrity violations in transmitted data. Input consists of the data and its signature; output is a boolean indicating signature validity.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/encrypt.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$safe = ee('Encrypt')->verifySignature($data, $signed);\n```\n\n----------------------------------------\n\nTITLE: Displaying Field Groups (Text/Relationship) in ExpressionEngine Fluid Field\nDESCRIPTION: Demonstrates accessing fields within a Field Group (`my_field_group`) nested inside a Fluid Field (`my_fluid_field`), using the required `{fields}` tag pair. This example shows accessing a textarea field (`my_textarea`) and a relationship field (`my_relationship`) within the group.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/fluid.md#2025-04-22_snippet_18\n\nLANGUAGE: ee\nCODE:\n```\n{my_fluid_field}\n\t  {my_fluid_field:my_field_group}\n\t    {fields}\n\n          {my_fluid_field:my_textarea}\n            {content}\n          {/my_fluid_field:my_textarea}\n\n          {my_fluid_field:my_relationship}\n            {content status=\"open\"}\n              {if content:count == 1}<h3>Relationships ({content:total_results})</h3>{/if}\n\n              Related entry title: {content:title}\n              Related entry file field, med custom image size: {content:my_file:med wrap=\"image\"}\n\n              Related field in the related child entry:\n              {content:my_related_field_in_child_entry}\n                {content:cmy_related_field_in_child_entry:title}\n              {/content:my_related_field_in_child_entry}\n            {/content}\n          {/my_fluid_field:my_relationship}\n\n\t    {/fields}\n\t  {/my_fluid_field:my_field_group}\n    {/my_fluid_field}\n```\n\n----------------------------------------\n\nTITLE: Enabling Word Censoring for Comments in ExpressionEngine\nDESCRIPTION: Configures ExpressionEngine to apply word censoring specifically to comments, regardless of whether censoring is enabled system-wide. The default behavior follows the system-wide setting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$config['comment_word_censoring'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Extending Parent Views with the extend() Helper in ExpressionEngine (PHP)\nDESCRIPTION: Illustrates how a child view can extend a parent view using the extend() helper. The parent template will have access to the child's rendered output via the $child_view variable. Allows for hierarchical template design and layout reuse, similar to other MVC template engines.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/view.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php $this->extend('html-wrapper'); ?>\n```\n\n----------------------------------------\n\nTITLE: Displaying Consent Alert Messages in ExpressionEngine Templates\nDESCRIPTION: This code snippet shows how to use the exp:consent:alert tag to display messages after a consent form submission. It provides feedback to users about their consent preferences being saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/consent.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{exp:consent:alert}\n  <div class=\"alert {alert_type}\">\n    <p>{alert_message}</p>\n  </div>\n{/exp:consent:alert}\n```\n\n----------------------------------------\n\nTITLE: Implementing Relationship Field Lists with Sorting\nDESCRIPTION: Template code for creating sortable relationship field lists with drag-and-drop functionality using SortableJS\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/fields.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:entries channel=\"yourChannel\"}\n  <ul id=\"list-group\">\n    {relationship_field}\n        <li class=\"list-item\">\n            <div class=\"list-item__handle\">::</div>\n            <div class=\"list-item__content\">\n                <div class=\"list-item__title\">{relationship_field:title}</div>\n                <div class=\"list-item__secondary\"><span> #{relationship_field:entry_id} / </span>{relationship_field:status}</div>\n            </div>\n        </li>\n    {/relationship_field}\n  </ul>\n{/exp:channel:entries}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js\"></script>\n<script>\n    var el = document.getElementById('list-group');\n    var sortable = Sortable.create(el);\n</script>\n```\n\nLANGUAGE: css\nCODE:\n```\n<style>\n    #list-group {\n        list-style-type: none;\n        padding: 0;\n        margin-left: 15px;\n    }\n    #list-group .list-item{\n        margin-bottom: 10px;\n        border: 1px solid #cecece;\n        padding: 5px 15px;\n        background: #fff;\n        display: flex;\n    }\n    #list-group .list-item__title {\n        font-weight: bold;\n    }\n    #list-group .list-item__handle {\n        cursor: move;\n        cursor: -webkit-grabbing;\n        margin-right: 10px;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Listing All ExpressionEngine Add-ons via CLI (PHP)\nDESCRIPTION: Executes the `addons:list` command using the ExpressionEngine CLI (`eecli.php`) to display a comprehensive list of all add-ons available within the system, regardless of their installation status. Requires PHP and the ExpressionEngine CLI environment to be set up.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/addons.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php addons:list\n```\n\n----------------------------------------\n\nTITLE: Multi-Field Variable Usage in ExpressionEngine\nDESCRIPTION: Example showing how to use the multi_field variable to specify which fields should be used for different pages of content.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entry-spanning.md#2025-04-22_snippet_1\n\nLANGUAGE: expressionengine\nCODE:\n```\n{multi_field=\"summary|body|extended\"}\n```\n\n----------------------------------------\n\nTITLE: Calling the files_after_delete Hook in ExpressionEngine (PHP)\nDESCRIPTION: This PHP code snippet shows the invocation of the 'files_after_delete' extension hook after deleting files within ExpressionEngine. It passes an array of deleted file database row objects to registered hooks and allows extensions to halt further execution by setting 'end_script' to TRUE. This mechanism is used for cleanup, logging, or triggering additional external processes after file deletion.\nDependencies include the ExpressionEngine extensions framework. The parameter is an array of objects representing deleted files. No values are returned or output; behavior is defined by registered extensions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/filemanager.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$edata = $this->extensions->call('files_after_delete', $deleted);\nif ($this->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Conditionally Applying Validation Rules with whenPresent - ExpressionEngine - PHP\nDESCRIPTION: This PHP code shows how to use the 'whenPresent' rule in ExpressionEngine to conditionally apply validation, based on field presence. The first snippet requires 'name' to have a minimum length only if present, the second makes 'email' required and validated if 'newsletter' is present. Proper context from ExpressionEngine and proper input arrays (e.g., form submissions) are necessary. This allows flexible validation flows for forms with optional or dependent fields.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/validation.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$rules = array(\n  'name' => 'whenPresent|minLength[45]'\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n$rules = array(\n  'email' => 'whenPresent[newsletter]|required|email'\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Conditional Tag Examples in ExpressionEngine\nDESCRIPTION: Examples demonstrating basic conditional tag usage including truth tests, comparisons, math operations, and logical operators.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_0\n\nLANGUAGE: ee\nCODE:\n```\n{if logged_in}Welcome back.{/if}\n\n{if username == 'Bob'}Welcome back, Bob!{/if}\n\n{if (age + 5) == 100}Five years to go!{/if}\n\n{if age == 30 AND username == 'Bob'}Welcome back, Bob. 30 is the new 20.{/if}\n```\n\n----------------------------------------\n\nTITLE: Filtering by Primary Role ID with \\'primary_role_id\\' Parameter - ExpressionEngine Template Syntax\nDESCRIPTION: Illustrates filtering entries by member primary role ID, including multiple role selection and exclusion methods. Accepts a pipe-delimited list (e.g., \\\"2|3|4\\\") or uses \\\"not\\\" to exclude roles. No extra dependencies.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_21\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\nprimary_role_id=\"4\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\nprimary_role_id=\"2|3|4\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\nprimary_role_id=\"not 2|3|4\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Comments with exp:comment:entries Tag - ExpressionEngine Template\nDESCRIPTION: This snippet demonstrates the basic use of the {exp:comment:entries} tag in an ExpressionEngine template to retrieve and render up to 20 user-submitted comments for a specific channel entry. It outputs each comment's text along with the author's name and the formatted comment date. It requires ExpressionEngine 2 or newer, and the specific comment data is determined by the surrounding template context (single entry page). Key parameters include sort and limit. Output can be further extended with available variables.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{exp:comment:entries sort=\"asc\" limit=\"20\"}\n  {comment}\n  <p>By {name} on {comment_date format=\"%Y %m %d\"}</p>\n{/exp:comment:entries}\n```\n\n----------------------------------------\n\nTITLE: Using Events with Models in ExpressionEngine\nDESCRIPTION: Demonstrates how to listen to an event on a model using the on() method and how to initiate an event using the emit() method.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$my_model = ee('Model')->make('myaddon:MyModel');\n\n$my_model->on('boom', function() use ($my_model)\n{\n  echo 'boom event happened on '.$my_model->getName();\n});\n\n$my_model->emit('boom');\n```\n\n----------------------------------------\n\nTITLE: Generating an ExpressionEngine Add-on Skeleton using CLI (Shell)\nDESCRIPTION: Demonstrates using the `php system/ee/eecli.php make:addon` command to initiate the creation of a new ExpressionEngine add-on. The command guides the user through providing essential metadata for the add-on, such as its name, description, version, and author details, before generating the basic file structure in the `system/user/addons` directory.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-development-overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ php system/ee/eecli.php make:addon\nLet's build your add-on!\nWhat is the name of your add-on? Amazing Add-On\nAdd-on description? [Amazing Add-on description] This add-on does amazing things!\nAdd-on version? [1.0.0]1.0.0\nAdd-on author? ExpressionEngine Developer\nAdd-on author URL? www.expressionengine.com\nLet's build!\nYour add-on has been created successfully!\n\n```\n\n----------------------------------------\n\nTITLE: ExpressionEngine Template Rendering Process Documentation\nDESCRIPTION: Comprehensive ordered list of the 25 stages in the ExpressionEngine template rendering process, from initial template loading through final output including parsing of variables, conditionals, modules, caching, and security tokens.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/engine.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Determine template to process based on request URI\n2. Get **template from database**, check template access permissions, and increment the hit counter\n3. If it exists, get template from file\n4. If template type is static, return template and end parsing\n5. Parse (as a group, so order is irrelevant):\n   - Template partials\n   - MSM variables: {site_id}, {site_label}, {site_shortname}, {site_name}, {site_url}, {site_description}, {site_index}\n   - {last_segment}\n   - Member variables\n   - {webmaster_email}, {current_url}, {current_path}, {current_query_string}\n   - {template_name}, {template_group}, {template_group_id}, {template_id}, {template_type}\n   - {is_ajax_request}, {is_live_preview_request}\n[...continued through 25 steps...]\n```\n\n----------------------------------------\n\nTITLE: Registering Models in Addon Setup - PHP\nDESCRIPTION: Demonstrates how to register custom models within the addon.setup.php file in PHP. The snippet shows the structure of the 'models' array, where each key-value pair maps a model name to its class in the Model directory, which is required for ExpressionEngine to recognize and load these models. No additional dependencies are needed, but the addon prefix is prepended automatically. Inputs are model name and class path; output is the array definition for registration.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/building-your-own.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'models' => array(\n  'Author' => 'Model\\\\Author',\n  'MyModel' => 'Model\\\\MyModel'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating addon.setup.php for ExpressionEngine Add-Ons\nDESCRIPTION: This PHP snippet demonstrates the structure of the required addon.setup.php file in ExpressionEngine 3.0 add-ons. This file is essential for your add-on to be recognized and to define its information, like author name and namespace.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/v3-add-on-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn array(\n  'author'      => 'Example, Inc',\n  'author_url'  => 'https://example.com',\n  'name'        => 'Hello World',\n  'description' => 'Displays a friendly \"Hello world!\" message.',\n  'version'     => '2.0.0',\n  'namespace'   => 'Example\\HelloWorld'\n);\n```\n\n----------------------------------------\n\nTITLE: ExpressionEngine Method Examples\nDESCRIPTION: Examples of ExpressionEngine-specific method calls for database operations, caching, and form handling.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/checklist.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nee()->session->set_cache()\n```\n\nLANGUAGE: PHP\nCODE:\n```\nee()->session->cache()\n```\n\nLANGUAGE: PHP\nCODE:\n```\nee()->db->escape_str()\n```\n\nLANGUAGE: PHP\nCODE:\n```\nee()->db->insert_string()\n```\n\nLANGUAGE: PHP\nCODE:\n```\nee()->db->update_string()\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$this->functions->form_declaration()\n```\n\n----------------------------------------\n\nTITLE: Handling Sticky Entries in ExpressionEngine Channel Entries\nDESCRIPTION: Shows options for handling sticky entries in ExpressionEngine channel entries, including keeping them at the top, ignoring them, or showing only sticky or non-sticky entries.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_33\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsticky=\"yes\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsticky=\"no\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsticky=\"only\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsticky=\"none\"\n```\n\n----------------------------------------\n\nTITLE: Using File Fields in Parent Entries\nDESCRIPTION: Examples of using file fields in parent entries of ExpressionEngine, accessing both single variables and additional file metadata.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_20\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{parents field=\\\"relationship_field\\\"}\\n  URL: {parents:my_image}\\n{/parents}\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{parents field=\\\"relationship_field\\\"}\\n  {parents:my_image}\\n      Extension: {extension}\\n      Upload date: {upload_date format=\\\"%Y %m %d\\\"}\\n      URL: {url}\\n      Custom med thumbnail url: {url:med}\\n  {/parents:my_image}\\n{/parents}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom System Message Template in HTML for ExpressionEngine\nDESCRIPTION: A sample HTML template for custom system messages that includes required variables like {heading}, {content}, and {link}, along with recommended variables like {title}, {meta_refresh}, and {charset}. The template uses Tailwind CSS for styling and demonstrates how to include dynamic content from channel entries.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/template-manager.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n    <title>{title} | {site_name}</title>\n    <meta http-equiv='content-type' content='text/html; charset={charset}' />\n    {meta_refresh}\n    <link href=\"https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n<div class=\"flex items-center justify-center h-screen\" >\n    <div class=\"max-w-md rounded overflow-hidden shadow-lg \">\n\n        <div class=\"px-6 py-4 bg-gray-100\">\n            <div class=\"font-bold text-xl mb-2\">{heading}</div>\n                <div class=\"text-gray-700 text-base\">\n\n                {content}\n\n                <p class=\"text-indigo-500\">{link}</p>\n\n                <p>... or read our latest blog post {exp:channel:entries channel=\"blog\" limit=\"1\" dynamic=\"no\" disable=\"custom_fields\"}<a class=\"text-indigo-500\" href=\"{path=blog/{url_title}}\">{title}</a>{/exp:channel:entries}</p>\n            </div>\n        </div>\n        <div class=\"px-6 pt-4 pb-2 bg-gray-100\">\n            <span class=\"inline-block bg-gray-400 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2\">#EE6</span>\n            <span class=\"inline-block bg-gray-400 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2\">#new-features</span>\n        </div>\n    </div>\n</div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Success Return URL for ExpressionEngine Form\nDESCRIPTION: Demonstrates the `return` parameter within the `exp:member:forgot_password_form` tag. This specifies the template or full URL (e.g., 'member/forgot-password/sent') where the user should be redirected after successfully submitting the form.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/forgot-password.md#2025-04-22_snippet_4\n\nLANGUAGE: ee\nCODE:\n```\nreturn=\"member/forgot-password/sent\"\n```\n\n----------------------------------------\n\nTITLE: Generating a Linear Category List with Backspace\nDESCRIPTION: Example using the {exp:channel:categories} tag to display a simple, linear list of categories from the 'news' channel. Each category links to 'news/entry', and the 'backspace' parameter removes the trailing '<br />' tag from the last item.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/categories.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:categories channel=\"news\" style=\"linear\" backspace=\"7\"}\n    <a href=\"{path='news/entry'}\">{category_name}</a><br />\n{/exp:channel:categories}\n```\n\n----------------------------------------\n\nTITLE: Example of Full Template Route with Multiple Rules in ExpressionEngine\nDESCRIPTION: Shows a complex template route example with multiple variables and rules applied, including alpha and regex constraints.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/routes.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/name/{first_name:alpha}/{last_name:alpha}/{suffix:regex[(i|v|x)+]}\n```\n\n----------------------------------------\n\nTITLE: Outputting Custom Field Group Contents in Fluid Field - ExpressionEngine Template\nDESCRIPTION: This example displays how to iterate over fields grouped within a custom field group inside a Fluid Fieldtype, using a nested variable pair ('{fields}') to handle multiple fields from a field group called 'blog'. Each field (e.g., 'fluid_header', 'fluid_text') is output within its own tag pair, and the output order matches that defined in the field group configuration. This structure is for template usage where nested field groups must be managed within Fluid content.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/fluid.md#2025-04-22_snippet_1\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{fluid_content}\n\n  {fluid_content:blog}\n    {fields}\n      {fluid_content:fluid_header}\n        <h3>{content}</h3>\n      {/fluid_content:fluid_header}\n      {fluid_content:fluid_text}\n        <div>{content}</div>\n      {/fluid_content:fluid_text}\n    {/fields}\n  {/fluid_content:blog}\n\n{/fluid_content}\n```\n\n----------------------------------------\n\nTITLE: Filtering on Relationships with Eager Loading in ExpressionEngine PHP\nDESCRIPTION: Shows how to filter on relationships while properly eager loading relationships with aliasing to maintain the full set of related models.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/relationships.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$entry = ee('Model')->get('ChannelEntry')->with('Categories', 'Categories as RelatedCategory')->filter('RelatedCategory.cat_id', 7)->all();\n```\n\n----------------------------------------\n\nTITLE: Handling Fluid Fields in Relationship Tags\nDESCRIPTION: This snippet illustrates using fluid fields within relationship tags in ExpressionEngine, including handling file fields and toggles within fluid fields.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_12\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{relationship_field}\\n  {relationship_field:my_fluid_field}\\n    {relationship_field:my_fluid_field:my_grid}\\n      {content}\\n        {if content:count == 1}<h3>Grid total rows: {content:total_rows}{/if}\\n        Date field: {content:my_grid format=\\\"%Y %m\\\"}\\n        Toggle: {if content:my_toggle}YES there is a toggle value!{/if}\\n\\n        File field pair:\\n        {content:my_file}\\n          Upload date: {upload_date format=\\\"%Y %m %d\\\"}\\n          Custom med thumbnail url: {url:med}\\n        {/content:my_file}\\n      {/content}\\n    {/relationship_field:my_fluid_field:my_grid}\\n  {/relationship_field:my_fluid_field}\\n{relationship_field}\n```\n\n----------------------------------------\n\nTITLE: Defining Inverse Relationships for External Models\nDESCRIPTION: Example of defining an inverse relationship to allow proper behavior with external models. This ensures that relationships work bidirectionally even with models you don't control.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/relating-models.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n'Author' => array(\n  'type'     => 'belongsTo',\n  'from_key' => 'author_id',\n  'to_key'   => 'member_id',\n  'model'    => 'ee:Member',\n  'weak'     => TRUE,\n  'inverse' => array(\n    'name' => 'AuthoredMyModels',\n    'type' => 'hasMany'\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Nesting Plugins in ExpressionEngine Templates\nDESCRIPTION: Demonstrates how to nest plugins to apply multiple transformations to content. This example shows content being XML encoded and then limited to 35 words.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/language.md#2025-04-22_snippet_3\n\nLANGUAGE: ee\nCODE:\n```\n{exp:word_limit total=\"35\"}\n    {exp:xml_encode}\n        some content\n    {/exp:xml_encode}\n{/exp:word_limit}\n```\n\n----------------------------------------\n\nTITLE: Example Structure of Retrieved Grid Field Data in PHP\nDESCRIPTION: Provides an example of the PHP array structure returned when fetching Grid field data using `ee()->grid_model->get_entry()`. Each sub-array represents a row, containing metadata like `row_id`, `entry_id`, `row_order`, and the data for each column identified by `col_id_X`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-entry.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\narray(\n\n    // First row.\n    array(\n        'row_id' => 3, // Unique ID to all Grid rows in EE.\n        'entry_id' => 8, // Entry ID this is linked to.\n        'row_order' => 0, // Order of the row in the entry. Zero-index.\n        'fluid_field_data_id' => 0,\n        'col_id_9' => 'field data from the first column', // Each column's data.\n        'col_id_10' => 'more field data from the second column', // Each column's data.\n    ),\n\n    // Second row.\n    array(\n        'row_id' => 4,\n        'entry_id' => 8,\n        'row_order' => 1,\n        'fluid_field_data_id' => 0,\n        'col_id_9' => 'field data from the first column',\n        'col_id_10' => 'more field data from the second column',\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Fluid Fields in Parent Entries\nDESCRIPTION: This snippet illustrates how to use fluid fields in parent entries within ExpressionEngine, showing file fields and toggles within such fields.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_22\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{parents field=\\\"relationship_field\\\"}\\n  {parents:my_fluid_field}\\n    {relationship_field:my_fluid_field:my_grid}\\n      {content}\\n        {if content:count == 1}<h3>Grid total rows: {content:total_rows}{/if}\\n        Date field: {content:my_grid format=\\\"%Y %m\\\"}\\n        Toggle: {if content:my_toggle}YES there is a toggle value!{/if}\\n\\n        File field pair:\\n        {content:my_file}\\n          Upload date: {upload_date format=\\\"%Y %m %d\\\"}\\n          Custom med thumbnail url: {url:med}\\n        {/content:my_file}\\n      {/content}\\n    {/parents:my_fluid_field:my_grid}\\n  {/parents:my_fluid_field}\\n{/parents}\n```\n\n----------------------------------------\n\nTITLE: Linking to Category Listing Page using {path} in ExpressionEngine\nDESCRIPTION: Demonstrates using the `{path}` variable within an ExpressionEngine `{categories}` loop to generate a URL for a category-specific page. The `site/categories` part specifies the template group and template that will display the entries belonging to the current category.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{categories}\n    <a href=\"{path='site/categories'}\">{category_name}</a>\n{/categories}\n```\n\n----------------------------------------\n\nTITLE: Defining a BelongsTo Relationship Type in PHP\nDESCRIPTION: Example of defining a simple BelongsTo relationship with just the required type parameter. This indicates that the current model belongs to a Template model.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/relating-models.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected static $_relationships = array(\n  'Template' => array(\n    'type' => 'BelongsTo'\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Conditional AJAX Request Handling\nDESCRIPTION: This snippet shows how to use the is_ajax_request variable to prevent direct access to a template that should only be used as an AJAX content provider. It redirects non-AJAX requests to a 404 page.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/single-variables.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n{if ! is_ajax_request}\n  {redirect=\"404\"}\n{/if}\n\n{!-- ExpressionEngine tags below to define content to return --}\n```\n\n----------------------------------------\n\nTITLE: Generating an Extension Hook with CLI in ExpressionEngine\nDESCRIPTION: Example showing how to create an extension hook using the ExpressionEngine CLI. The command creates necessary files and enables the extension for immediate use.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extensions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ php system/ee/eecli.php make:extension-hook -i\nLet's implement an extension hook!\nWhat hooks would you like to use? (Read more: https://docs.expressionengine.com/latest/development/extensions.html) typography_parse_type_end\nWhat add-on is the extension hook being added to? [amazing_add_on]:  amazing_add_on\nBuilding Extension hook.\nExtension hook created successfully!\n\n```\n\n----------------------------------------\n\nTITLE: Example: Combining Disabled Auto-Links and Custom {frontedit_link} Tags\nDESCRIPTION: Demonstrates a practical scenario where automatic front-end edit links are disabled for the `{title}` and `{page_content}` fields (using HTML comments and the `disable` parameter respectively). Custom edit links are then manually added using the `{frontedit_link}` tag, specifying the necessary `entry_id` and `field_name`. The second link also includes a custom CSS class `extra-styles`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/advanced-usage/front-end/frontend.md#2025-04-22_snippet_7\n\nLANGUAGE: ee\nCODE:\n```\n<h1>\n    <!-- disable frontedit -->{title}<!-- //disable frontedit -->\n    {frontedit_link entry_id=\"{entry_id}\" field_name=\"title\"}\n</h1>\n\n{page_content disable=\"frontedit\"}\n{frontedit_link entry_id=\"{entry_id}\" field_name=\"page_content\" class=\"extra-styles\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Object Instances via a Registered Factory in PHP\nDESCRIPTION: Demonstrates invoking a registered factory multiple times using `make()`. Each call executes the factory closure, creating new `User` instances (`$u1`, `$u2`, `$u3`) and passing the provided arguments (`'Bob'`, `'Alice'`) to the factory.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/architecture.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$u1 = $di->make('User', 'Bob');\n$u2 = $di->make('User', 'Bob');\n$u3 = $di->make('User', 'Alice');\n```\n\n----------------------------------------\n\nTITLE: Embedding Avatar Variables in HTML Image Tag - ExpressionEngine Variables in HTML\nDESCRIPTION: This snippet illustrates the use of avatar-related ExpressionEngine template variables within an HTML <img> tag to display the user's avatar. The condition checks for the presence of an avatar and renders the image with its dynamic URL, width, height, and an alt tag based on the user's screen name. This approach combines ExpressionEngine variable interpolation with standard HTML markup.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/custom-profile-data.md#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n{if avatar}\n  <img src=\"{avatar_url}\" width=\"{avatar_width}\" height=\"{avatar_height}\" alt=\"{screen_name}'s avatar\">\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in ExpressionEngine View using Feature Flags\nDESCRIPTION: Shows conditional rendering inside a view using the enabled() helper. The markup will only be displayed if the named feature is enabled (i.e., not disabled by the caller). This pattern is useful for reusable components whose structure can vary depending on the use-case.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/view.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php if ($this->enabled('figure')): ?>\n  <figure><?=$username?></figure>\n<?php endif; ?>\n```\n\n----------------------------------------\n\nTITLE: Configuring ExpressionEngine Traffic Management Settings in PHP\nDESCRIPTION: Configuration options for ExpressionEngine's config.php file to manage traffic-related features. These settings control user tracking, hit tracking, referrer logging, and provide emergency overrides for high-traffic situations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/optimization/handling-extreme-traffic.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$config['enable_online_user_tracking']\n$config['enable_hit_tracking']\n$config['enable_entry_view_tracking']\n$config['log_referrers']\n$config['dynamic_tracking_disabling']\n$config['disable_all_tracking']\n```\n\n----------------------------------------\n\nTITLE: Configuring and Populating a Grid Field in ExpressionEngine CP/Form using PHP\nDESCRIPTION: This example shows how to configure and populate a 'grid' field type using the ExpressionEngine CP/Form service. It involves getting the grid field, setting options (like enabling reordering), defining column headers and properties, defining the structure and types of input fields for each row (text, select, password, checkbox, textarea, file), providing initial data, setting a 'no results' text, and specifying a base URL. It relies on the `ee('CP/Form')` service and potentially `lang()` for translations and `ee('CP/URL')` for URL generation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/cp-form/fields.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$grid = $field_set->getField('my_grid_field', 'grid');\n\n$grid->setOptions([\n    'field_name' => $grid->getName(),\n    'reorder'    => true,\n]);\n\n$grid->setColumns([\n    'text example' => ['sort' => false],\n    'select example' => ['sort' => false],\n    'password example' => ['sort' => false],\n    'checkbox example' => ['sort' => false],\n    'textarea example' => ['sort' => false],\n    'upload example' => ['sort' => false],\n]);\n\n$options = ['foo' => 'Foo', 'bar' => 'Bar'];\n$cols = [\n    ['name' => 'foo-text', 'type' => 'text', 'value' => ''],\n    ['name' => 'barr-select', 'type' => 'select', 'value' => '', 'choices' => $options],\n    ['name' => 'foo-password', 'type' => 'password', 'value' => ''],\n    ['name' => 'bar-checkbox', 'type' => 'checkbox', 'value' => 1],\n    ['name' => 'foo-textarea', 'type' => 'textarea', 'value' => '', 'cols' => 2, 'rows' => 5],\n    ['name' => 'bar-upload', 'type' => 'file', 'value' => '', 'cols' => 2, 'rows' => 5],\n];\n$grid->defineRow($cols);\n$grid->setData([\n    ['foo-text' => 'bar', 'barr-select' => 'foo', 'foo-password' => 'fdsa', 'bar-checkbox' => 1, 'foo-textarea' => '', 'bar-upload' => ''],\n    ['foo-text' => 'fdsafdsa', 'barr-select' => 'bar', 'foo-password' => 'fdsa', 'bar-checkbox' => true, 'foo-textarea' => '', 'bar-upload' => '']\n]);\n\n$grid->setNoResultsText(sprintf(lang('no_found'), lang('table-thing')), 'add');\n$grid->setBaseUrl( ee('CP/URL')->make($this->base_url ));\n```\n\n----------------------------------------\n\nTITLE: Model Metadata Declaration and Access - PHP\nDESCRIPTION: Shows how static metadata (such as events) is declared and accessed in an ExpressionEngine model. Metadata must be protected static properties prefixed with an underscore. Also includes example code for retrieving metadata both statically (from the class) and from an instance. Inputs are metadata names; output is the declaration and access pattern of metadata.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/building-your-own.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected static $_events = array();\n\n// accessing it:\nMyModel::getMetaData('events');\n\n// or on an instance\n$my_model_instance->getMetaData('events');\n```\n\n----------------------------------------\n\nTITLE: Setting Signed Cookie in ExpressionEngine\nDESCRIPTION: Example of setting a cryptographically-signed cookie using the Cookie service. This method ensures cookie data cannot be tampered with client-side.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/cookie.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee('Cookie')->setSignedCookie('my_cookie_name', $data);\n```\n\n----------------------------------------\n\nTITLE: CookieSetting Model Class Definition - PHP\nDESCRIPTION: Class definition for the ExpressionEngine Cookie Settings model which handles cookie management configurations. The model defines core properties for cookie management including ID, provider, name, lifetime settings, title and description. It also establishes a relationship with ConsentRequestVersion.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/cookie-settings.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nExpressionEngine\\Model\\Cookie\\CookieSetting\n```\n\n----------------------------------------\n\nTITLE: Populating ExpressionEngine List Field Options from Another Channel Field (PHP)\nDESCRIPTION: Illustrates how to configure a list field to dynamically populate its options from another channel field's entries. It uses `setProperty()` to set `field_pre_populate` to 'y', and specifies the source channel ID (`field_pre_channel_id`) and source field ID (`field_pre_field_id`). Requires validation and saving.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-field.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n```php\n// or populate from other channel field\n$field->setProperty('field_pre_populate','y'); // default is 'n'\n$field->setProperty('field_pre_channel_id',4); //channel id\n$field->setProperty('field_pre_field_id',80); // field id\n// Validate and Save.\n```\n```\n\n----------------------------------------\n\nTITLE: Writing Data to File in PHP\nDESCRIPTION: Writes the provided `$data` string to the file specified by `$path`. Takes optional boolean flags `$overwrite` (default `false`) and `$append` (default `false`) to control behavior with existing files. If `$overwrite` is `true`, the existing file is overwritten. If `$append` is `true`, data is appended. Returns `TRUE` on successful write, `FALSE` otherwise. Requires the path string `$path` and the data string `$data`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/filesystem.md#2025-04-22_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nwrite($path, $data, $overwrite = false, $append = false)\n```\n\n----------------------------------------\n\nTITLE: Implementing Add-on Version Upgrade Logic in ExpressionEngine Using PHP\nDESCRIPTION: This PHP snippet defines a class for handling version-based upgrade logic for an ExpressionEngine add-on. The class includes an upgrade function that takes the current version as a parameter and uses version_compare to check and run specific update routines for core versions 3.0.0 through 7.0.0. Required dependencies include PHP, ExpressionEngine, and a properly named upgrade.addon_name.php file placed in the add-on directory. The upgrade function is executed automatically at each minor version step during the add-on upgrade process, and it expects a version string as input with no direct output, executing update routines as needed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/automated-upgrading.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass My_awesome_plugin_upgrade {\n\n\tpublic function upgrade($version)\n\t{\n\t\t\n\t\tif(version_compare($version, '3.0.0', '=')) {\n\t\t\t// Run updates for upgrade to EE3\n\t\t}\n\n\t\tif(version_compare($version, '4.0.0', '=')) {\n\t\t\t// Run updates for upgrade to EE4\n\t\t}\n\n\t\tif(version_compare($version, '5.0.0', '=')) {\n\t\t\t// Run updates for upgrade to EE5\n\t\t}\n\n\t\tif(version_compare($version, '6.0.0', '=')) {\n\t\t\t// Run updates for upgrade to EE6\n\t\t}\n\n\t\tif(version_compare($version, '7.0.0', '=')) {\n\t\t\t// Run updates for upgrade to EE7\n\t\t}\n\t}\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running Tasks on Every Request in PHP\nDESCRIPTION: The 'core_boot' hook is used for executing tasks on every request in ExpressionEngine. It requires checking the 'REQ' constant to determine the request type, aiming to optimize speed and resource usage. No input parameters are required, and it returns void.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/core.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nee()->extensions->call('core_boot');\nif (ee()->extensions->end_script === TRUE) return;\n```\n\nLANGUAGE: PHP\nCODE:\n```\nif (REQ != 'CP')\n{\n  // Do work only on control panel requests\n  return;\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping Variable in ExpressionEngine - PHP\nDESCRIPTION: Demonstrates the use of the dump helper function to display the contents of a variable in a pre-formatted, readable block. This function serves a similar purpose to PHP's var_dump but is styled for improved readability in the browser. It requires ExpressionEngine to be installed and available in the development environment. The key parameter is $var, representing the variable to inspect; the output is a formatted display of that variable's value and structure, with no code execution interruption.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/debugging.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndump($var)\n```\n\n----------------------------------------\n\nTITLE: Updating config.php via ExpressionEngine CLI (Bash)\nDESCRIPTION: Demonstrates using the `php eecli.php config:config` command to modify specific configuration variables within the `config.php` file. The `-c` or `--config-variable` option specifies the configuration key, and the `-v` or `--value` option sets the new value. Examples show setting the system online/offline status (`is_system_on`) and enabling debugging (`debug`). Requires PHP and the ExpressionEngine CLI tool.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/config-management.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php config:config -c is_system_on -v n\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php config:config -c is_system_on -v y\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php config:config -c debug -v 1\n```\n\n----------------------------------------\n\nTITLE: Creating Fieldtype via CLI Command\nDESCRIPTION: Example of using the make:fieldtype command to generate a new fieldtype\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/fieldtypes.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ php system/ee/eecli.php make:fieldtype\nLet's implement a fieldtype!\nWhat is the fieldtype name? Amazing Fieldtype\nWhat add-on is the fieldtype being added to? [amazing_add_on]:  amazing_add_on\nBuilding fieldype.\nFieldtype created successfully!\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Search Form in ExpressionEngine\nDESCRIPTION: This snippet demonstrates how to create a detailed search form using the Advanced Search Form Tag in ExpressionEngine. It includes fields for keyword search, member name search, channel and category selection, date filtering, and result sorting options.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/search/advanced.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{exp:search:advanced_form result_page=\"search/results\"}\n\n    <table cellpadding='4' cellspacing='6' border='0' width='100%'>\n    <tr>\n    <td>\n\n    <fieldset class=\"fieldset\">\n        <legend>{lang:search_by_keyword}</legend>\n\n        <input type=\"text\" class=\"input\" maxlength=\"100\" size=\"40\" name=\"keywords\" style=\"width:100%;\" />\n\n        <div class=\"default\">\n            <select name=\"search_in\">\n                <option value=\"titles\" selected=\"selected\">{lang:search_in_titles}</option>\n                <option value=\"entries\">{lang:search_in_entries}</option>\n                <option value=\"everywhere\" >{lang:search_everywhere}</option>\n            </select>\n        </div>\n\n        <div class=\"default\">\n            <select name=\"where\">\n                <option value=\"exact\" selected=\"selected\">{lang:exact_phrase_match}</option>\n                <option value=\"any\">{lang:search_any_words}</option>\n                <option value=\"all\" >{lang:search_all_words}</option>\n                <option value=\"word\" >{lang:search_exact_word}</option>\n            </select>\n        </div>\n\n    </fieldset>\n\n    </td><td>\n\n    <fieldset class=\"fieldset\">\n        <legend>{lang:search_by_member_name}</legend>\n\n        <input type=\"text\" class=\"input\" maxlength=\"100\" size=\"40\" name=\"member_name\" style=\"width:100%;\" />\n        <div class=\"default\"><input type=\"checkbox\" class=\"checkbox\" name=\"exact_match\" value=\"y\"  /> {lang:exact_name_match}</div>\n\n    </fieldset>\n\n    </td>\n    </tr>\n    </table>\n\n    <table cellpadding='4' cellspacing='6' border='0' width='100%'>\n    <tr>\n    <td valign=\"top\" width=\"50%\">\n\n    <table cellpadding='0' cellspacing='0' border='0'>\n    <tr>\n    <td valign=\"top\">\n\n    <div class=\"defaultBold\">{lang:channels}</div>\n\n        <select id=\"channel_id\" name='channel_id[]' class='multiselect' size='12' multiple='multiple' onchange='changemenu(this.selectedIndex);'>\n            {channel_names}\n        </select>\n\n    </td>\n    <td valign=\"top\" width=\"16\">&nbsp;</td>\n    <td valign=\"top\">\n\n    <div class=\"defaultBold\">{lang:categories}</div>\n\n        <select name='cat_id[]' size='12'  class='multiselect' multiple='multiple'>\n            <option value='all' selected=\"selected\">{lang:any_category}</option>\n        </select>\n\n    </td>\n    </tr>\n    </table>\n\n    </td>\n    <td valign=\"top\" width=\"50%\">\n\n    <fieldset class=\"fieldset\">\n        <legend>{lang:search_entries_from}</legend>\n\n        <select name=\"date\" style=\"width:150px\">\n            <option value=\"0\" selected=\"selected\">{lang:any_date}</option>\n            <option value=\"1\" >{lang:today_and}</option>\n            <option value=\"7\" >{lang:this_week_and}</option>\n            <option value=\"30\" >{lang:one_month_ago_and}</option>\n            <option value=\"90\" >{lang:three_months_ago_and}</option>\n            <option value=\"180\" >{lang:six_months_ago_and}</option>\n            <option value=\"365\" >{lang:one_year_ago_and}</option>\n        </select>\n\n    <div class=\"default\">\n        <input type='radio' name='date_order' value='newer' class='radio' checked=\"checked\" />&nbsp;{lang:newer}\n        <input type='radio' name='date_order' value='older' class='radio' />&nbsp;{lang:older}\n    </div>\n\n    </fieldset>\n\n    <div class=\"default\"><br /></div>\n\n    <fieldset class=\"fieldset\">\n        <legend>{lang:sort_results_by}</legend>\n\n        <select name=\"orderby\">\n            <option value=\"date\" >{lang:date}</option>\n            <option value=\"title\" >{lang:title}</option>\n            <option value=\"most_comments\" >{lang:most_comments}</option>\n            <option value=\"recent_comment\" >{lang:recent_comment}</option>\n        </select>\n\n    <div class=\"default\">\n        <input type='radio' name='sort_order' class=\"radio\" value='desc' checked=\"checked\" /> {lang:descending}\n        <input type='radio' name='sort_order' class=\"radio\" value='asc' /> {lang:ascending}\n    </div>\n\n    </fieldset>\n\n    </td>\n    </tr>\n    </table>\n\n    <div class='searchSubmit'>\n        <input type='submit' value='Search' class='submit' />\n    </div>\n\n{/exp:search:advanced_form}\n```\n\n----------------------------------------\n\nTITLE: Using Template Tags for Select Dropdown in ExpressionEngine\nDESCRIPTION: This code snippet shows how to render a select dropdown field's value and label in a template using the field's name and respective modifiers. Use conditionals with the field value to manage dynamic content rendering. Ensure the use of values in conditionals for consistency over time.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/select.md#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\n{if field_name == 2}Yep!{/if}\n{if field_name:value == 2}Yep!{/if}\n{if field_name:label == 'Two'}Yep!{/if}\n```\n\n----------------------------------------\n\nTITLE: Validate Method for Tab Field Input in PHP\nDESCRIPTION: Provides input validation for tab fields in ExpressionEngine using a validation service. It accepts an entry and its associated values as input, ensuring details such as required fields meet pre-set conditions before any data is committed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/tab-files.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    public function validate($entry, $values){\n        $validator = ee('Validation')->make(array(\n            'amazing_field_one' => 'required',\n            'amazing_field_two' => 'required|enum[y,n]',\n        ));\n\n        return $validator->validate($values);\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Filter in PHP\nDESCRIPTION: Shows how to create a custom filter for categories, add it to the CP/Filter Service, and customize its behavior.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/filter.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$categories = ee('Model')->get('Category')\n  ->fields('cat_id', 'cat_name')\n  ->all()\n  ->getDictionary('cat_id', 'cat_name');\n\n$filter = ee('CP/Filter')->make('filter_by_category', 'category_filter', $categories);\n\n$filters = ee('CP/Filter')->add($filter);\n\n$filter->setDefaultValue($value);\n$filter->setPlaceholder($placeholder);\n$filter->disableCustomValue();\n```\n\n----------------------------------------\n\nTITLE: Calling before_member_save Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the before_member_save hook is called in ExpressionEngine. This hook is triggered before a member object is inserted or updated in the database, allowing modifications to be automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_member_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Including a Required Information Field in ExpressionEngine\nDESCRIPTION: HTML snippet for a read-only textarea field that includes essential, uneditable information to be included at the top of every email message, enhancing information consistency.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\n<textarea name=\"required\" rows=\"5\" cols=\"40\" readonly=\"readonly\"></textarea>\n```\n\n----------------------------------------\n\nTITLE: Fetching a Specific ExpressionEngine Channel Field (PHP)\nDESCRIPTION: Retrieves a single ChannelField model object by its ID using the ExpressionEngine Model service. This example fetches the field with ID 4.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-field.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\nee('Model')->get('ChannelField', 4)->first();\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Error Reporting - ExpressionEngine Tag - ExpressionEngine Tag\nDESCRIPTION: Shows configuration for inline validation error reporting in the form via the inline_errors parameter. Value 'yes' enables inline display; parameter connects to ExpressionEngine form validation logic.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/forgot-username.md#2025-04-22_snippet_3\n\nLANGUAGE: ExpressionEngine Tag\nCODE:\n```\ninline_errors=\"yes\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Comment Editor with jQuery – JavaScript\nDESCRIPTION: This snippet demonstrates a jQuery plugin implementation (CommentEditor) to handle the editing and moderation of comments in an ExpressionEngine context. It allows for custom configuration of DOM selectors (for comment body, show/hide/edit links, and moderation links), and handles UI state transitions (edit/view), AJAX-based updates for saving or closing comments, and updates CSRF/XID tokens as necessary. Dependencies include jQuery and appropriate server endpoints for AJAX calls, as well as ExpressionEngine-specific variables such as {exp:comment:ajax_edit_url} and {XID_HASH}. The plugin expects a specific HTML structure for comment boxes with unique IDs, exposes options for extensibility, and should be initialized on target comment elements; relevant callbacks display errors, hide/show elements, and update comment contents post-save. The snippet is self-contained but relies on ExpressionEngine's comment system and server-side handling for full operation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/form.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\\\"text/javascript\\\">\n  $.fn.CommentEditor = function(options) {\n\n    var OPT;\n\n    OPT = $.extend({\n      url: \\\"{exp:comment:ajax_edit_url}\\\",\n      comment_body: '.comment_body',\n      showEditor: '.edit_link',\n      hideEditor: '.cancel_edit',\n      saveComment: '.submit_edit',\n      closeComment: '.mod_link'\n    }, options);\n\n    var view_elements = [OPT.comment_body, OPT.showEditor, OPT.closeComment].join(','),\n      edit_elements = '.editCommentBox',\n      hash = '{XID_HASH}';\n\n    return this.each(function() {\n      var id = this.id.replace('comment_', ''),\n      parent = $(this);\n\n      parent.find(OPT.showEditor).click(function() { showEditor(id); return false; });\n      parent.find(OPT.hideEditor).click(function() { hideEditor(id); return false; });\n      parent.find(OPT.saveComment).click(function() { saveComment(id); return false; });\n      parent.find(OPT.closeComment).click(function() { closeComment(id); return false; });\n    });\n\n    function showEditor(id) {\n      $(\\\"#comment_\\\"+id)\n        .find(view_elements).hide().end()\n        .find(edit_elements).show().end();\n    }\n\n    function hideEditor(id) {\n      $(\\\"#comment_\\\"+id)\n        .find(view_elements).show().end()\n        .find(edit_elements).hide();\n    }\n\n    function closeComment(id) {\n      var data = {status: \\\"close\\\", comment_id: id, XID: hash};\n\n      $.post(OPT.url, data, function (res) {\n        if (res.error) {\n          return $.error('Could not moderate comment.');\n        }\n\n        hash = res.XID;\n        $('input[name=XID]').val(hash);\n        $('#comment_' + id).hide();\n       });\n    }\n\n    function saveComment(id) {\n      var content = $(\\\"#comment_\\\"+id).find('.editCommentBox'+' textarea').val(),\n        data = {comment: content, comment_id: id, XID: hash};\n\n    $.post(OPT.url, data, function (res) {\n        if (res.error) {\n          return $.error('Could not save comment.');\n        }\n\n        hash = res.XID;\n        $('input[name=XID]').val(hash);\n        $(\\\"#comment_\\\"+id).find('.comment_body').html(res.comment);\n        hideEditor(id);\n        });\n    }\n  };\n\n\n  $(function() { $('.comment').CommentEditor(); });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Displaying Page Content with Channel Entries Tag in ExpressionEngine\nDESCRIPTION: Example of using the Channel Entries tag to display personnel page content including title, position and background information. Uses standard Channel Entries tag syntax with personnel channel specification.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pages.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:entries channel=\"personnel\"}\n    <h2>{title}</h2>\n    <h3>Position</h3>\n    <p>{position}</p>\n    <h3>Background</h3>\n    <p>{background}</p>\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Addon Information in PHP\nDESCRIPTION: Demonstrates how to use the Addon Service to retrieve information about an addon. This example shows how to get the description of the 'hello_world' addon.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/addon.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$info = ee('Addon')->get('hello_world');\necho $info->get('description');\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Related Entries in ExpressionEngine Template\nDESCRIPTION: This snippet demonstrates how to loop over multiple related entries in a ParentChannel to extract child entry titles and field values using the ExpressionEngine template syntax. No additional dependencies are required, and it mimics the behavior of the `channel:entries` tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{exp:channel:entries channel=\"parentChannel\"}\n  {title} - {field1} - {field2}\n  {relationship_field}\n    {relationship_field:title}\n    {relationship_field:field1}\n    {relationship_field:field2}\n  {/relationship_field}\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Generating a Create Table Migration for an Add-on (Shell)\nDESCRIPTION: This example shows how to use the ExpressionEngine CLI (`eecli.php`) to generate a new database migration file specifically for creating a table named `addon_data` within an add-on identified by `my_addon`. The command utilizes the `--location`, `--name`, `--create`, and `--table` options to configure the migration.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/make-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp eecli.php make:migration --location=my_addon --name create_myaddon_table --create --table=addon_data\n```\n\n----------------------------------------\n\nTITLE: Declaring Event Handlers and Static Bulk Event Methods - PHP\nDESCRIPTION: Shows how to set up model event handling in PHP by declaring an events metadata array and corresponding handler methods. The snippet includes both an instance method (for single-record events like beforeSave) and a static method (for bulk events like afterBulkDelete), following ExpressionEngine naming conventions. Inputs are event names and handler logic; outputs are callback executions upon event triggers.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/building-your-own.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nprotected static $_events = array('beforeSave');\n\npublic function onBeforeSave()\n{\n  echo 'about to save!';\n}\n\npublic static function onAfterBulkDelete($delete_ids)\n{\n  // Handle deleted items, do extra clean-up, etc.\n}\n```\n\n----------------------------------------\n\nTITLE: Using Variable Modifiers in ExpressionEngine\nDESCRIPTION: Demonstrates how to use modifiers to format variable output. This example gets the length of an excerpt variable.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/language.md#2025-04-22_snippet_5\n\nLANGUAGE: ee\nCODE:\n```\n{excerpt:length}\n{!-- Outputs: 217 --}\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of the ExpressionEngine Login Form Tag\nDESCRIPTION: Demonstrates the basic usage of the `{exp:member:login_form}` tag pair to output a simple login form with username and password fields, and a submit button. This is the core structure required for the login functionality.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/login.md#2025-04-22_snippet_0\n\nLANGUAGE: ee\nCODE:\n```\n{exp:member:login_form}\n\n        <label>Username</label><br />\n        <input type=\"text\" name=\"username\" value=\"\" maxlength=\"32\" size=\"25\" />\n        <label>Password</label><br />\n        <input type=\"password\" name=\"password\" value=\"\" maxlength=\"32\" size=\"25\" />\n\n\t\t\t<input type=\"submit\" name=\"submit\" value=\"Submit\" />\n\n{/exp:member:login_form}\n```\n\n----------------------------------------\n\nTITLE: URL Decoding with :url_decode Modifier\nDESCRIPTION: Decodes URL-encoded strings, converting encoded characters back to their original form.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<h1>Location: {segment_2:url_decode}</h1>\n{!-- <h1>Location: New Zealand</h1> --}\n```\n\n----------------------------------------\n\nTITLE: Listing Updatable ExpressionEngine Add-ons via CLI (PHP)\nDESCRIPTION: Executes the `addons:list` command with the `a` or `update-available` flag using the ExpressionEngine CLI (`eecli.php`). This filters the list to display only those installed add-ons for which an update is available. Requires PHP and the ExpressionEngine CLI environment.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/addons.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php addons:list a\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php addons:list update-available\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Limit for Monthly Archives in ExpressionEngine\nDESCRIPTION: The `month_limit` parameter allows setting a different entry limit specifically for monthly archive views, overriding the general `limit` parameter in that context. This example sets the main limit to 10 but increases it to 100 for monthly views.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_15\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\nmonth_limit=\"30\"\n```\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{exp:channel:entries limit=\"10\" month_limit=\"100\"}\n```\n\n----------------------------------------\n\nTITLE: Using Multi Select Fields in Conditionals (ExpressionEngine)\nDESCRIPTION: This snippet illustrates how to use the Multi Select field in ExpressionEngine conditionals. It shows checking against the default output (label), the explicit value (`:value`), and the explicit label (`:label`). Using the value (`:value`) is recommended for stability.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/multiselect.md#2025-04-22_snippet_4\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if field_name == 'Two'}Yep!{/if}\n{if field_name:value == 2}Yep!{/if}\n{if field_name:label == 'Two'}Yep!{/if}\n```\n\n----------------------------------------\n\nTITLE: Using the Edit Profile Tag in ExpressionEngine\nDESCRIPTION: The `exp:member:edit_profile` tag pair is used to create a form for logged-in members to edit their own profile details. It functions similarly to the Channel Form but has a specific set of available parameters and variables.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\nexp:member:edit_profile\n```\n\n----------------------------------------\n\nTITLE: Configuring Censored Words in ExpressionEngine (PHP)\nDESCRIPTION: Specifies a list of words to censor. Wildcards are allowed for partial word matching.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$config['censored_words'] = 'dagnabbit|consarnit|golly gee willikers';\n```\n\n----------------------------------------\n\nTITLE: Using Quote Syntax for Phrase Searching in ExpressionEngine\nDESCRIPTION: Shows how to search for a specific phrase by enclosing words in double quotes. This syntax ensures the search engine looks for the exact phrase rather than individual words.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/search/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"Louis Armstrong\"\n```\n\n----------------------------------------\n\nTITLE: Calling the cp_js_end Extension Hook in ExpressionEngine (PHP)\nDESCRIPTION: This PHP code demonstrates how to invoke the `cp_js_end` extension hook using the ExpressionEngine extensions service (`$this->extensions`). The `call` method executes registered extensions for this hook, and the returned string (`$str`) contains the aggregated JavaScript code provided by those extensions, intended to be appended to the Control Panel's HTML output.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/javascript.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$str = $this->extensions->call('cp_js_end');\n```\n\n----------------------------------------\n\nTITLE: Accessing Sibling Entries in ExpressionEngine\nDESCRIPTION: This snippet allows access to sibling entries associated with the current entry via the `siblings` parameter within the `relationship_field`. Parameters can specify which relationship field to use.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_2\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{exp:channel:entries channel=\"childChannel\"}\n  {siblings field=\"relationship_field\"}\n    {siblings:title} - {siblings:field1} - {siblings:field2}\n  {/siblings}\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Adding Related Models to Collections in ExpressionEngine PHP\nDESCRIPTION: Shows two methods to add models to HasMany or HasAndBelongsToMany relationships: using array syntax or the add() method.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/relationships.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$member_group[] = $member;\n$member_group->add($member);\n```\n\n----------------------------------------\n\nTITLE: Encoding Email Addresses to Prevent Spam\nDESCRIPTION: This snippet demonstrates how to encode an email address to protect it from spam harvesters. The encode variable processes the email with JavaScript and HTML entities, with an optional title parameter for the link text.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/single-variables.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n{encode=\"you@example.com\" title=\"Email Me!\"}\n```\n\n----------------------------------------\n\nTITLE: Saving a Search Query as a Shortcut - ExpressionEngine Template Tag\nDESCRIPTION: This snippet creates a form for saving a search query as a shortcut using the {exp:pro_search:save} tag, requiring group_id and query as parameters. The form includes input fields for the shortcut's name and label, and a submit button, all designed for template use in ExpressionEngine. Dependencies include correct group_id, field naming, and a context where the query variable is available.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_10\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:save query=\"{segment_3}\" group_id=\"1\"}\n <fieldset>\n  <input name=\"shortcut_name\" placeholder=\"Name\" />\n  <input name=\"shortcut_label\" placeholder=\"Label\" />\n  <button type=\"submit\">Save</button>\n </fieldset>\n{/exp:pro_search:save}\n```\n\n----------------------------------------\n\nTITLE: Customizing Singular Text for Relative Dates in ExpressionEngine\nDESCRIPTION: Example of customizing how singular values are displayed in relative dates. The default 'one' can be changed to '1' using the singular parameter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/date-variable-formatting.md#2025-04-22_snippet_12\n\nLANGUAGE: expressionengine\nCODE:\n```\n{entry_date:relative singular=\"1\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Template Route Structure in ExpressionEngine\nDESCRIPTION: Demonstrates the basic structure for defining a template route in ExpressionEngine, including static segments and variables with optional rules.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/routes.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/segment/{variable}/{variable:rule}/{variable:rule0|rule1[arg]}\n```\n\n----------------------------------------\n\nTITLE: Outputting Custom Fields with Variable Pair - ExpressionEngine Template Syntax\nDESCRIPTION: Demonstrates looping over custom member fields using the {custom_fields} variable pair, displaying each field's label, description, input, and rendering errors inline. This leverages ExpressionEngine's templating for multi-field dynamic display and requires appropriately configured custom fields in the member settings.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_17\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\n{custom_fields}\n    <p>\n        <label>{lang:profile_field}</label><br>\n        <small>{lang:profile_field_description}</small><br>\n\n        {form:custom_profile_field}\n\n        {if error}\n            <span class=\"error\">{error}</span>\n        {/if}\n    </p>\n {/custom_fields}\n```\n\n----------------------------------------\n\nTITLE: Using Unbraced Variables in Conditionals\nDESCRIPTION: Demonstrates the recommended way to write conditionals without wrapping variables in braces for better performance and security.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_5\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if my_snippet == \"hello world\"}\n```\n\n----------------------------------------\n\nTITLE: Validating Add-On Settings in ExpressionEngine 3.0\nDESCRIPTION: This snippet uses the new Validation Service in ExpressionEngine 3.0 to validate add-on settings. It's necessary to implement this service for ensuring settings meet specified criteria.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/v3-add-on-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction validate_settings($settings)\n{\n  $validator = ee('Validation')->make(array(\n      'size' => 'required|numeric'\n  ));\n\n  return $validator->validate($settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Eager Loading in Model Relationships in ExpressionEngine PHP\nDESCRIPTION: Demonstrates how to eagerly load nested relationships by using arrays in the with() method for complex model hierarchies.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n->get('Template')->with(array('LastAuthor' => 'PrimaryRole'));\n```\n\n----------------------------------------\n\nTITLE: Providing Variables to Stubs in ExpressionEngine Template Generator (PHP)\nDESCRIPTION: Demonstrates a simple implementation of the mandatory `getVariables` method within a template generator class. This method must return an associative array of variables that will be made available within the template stub files when they are rendered by the View service. The example retrieves input data submitted for the 'channel' option (likely an array from checkboxes) and implodes it into a pipe-separated string for use in the stub.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/template-generator.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n    public function getVariables(): array\n    {\n        return [\n            'channel' = implode('|', $this->input->get('channel'))\n        ];\n    }\n```\n\n----------------------------------------\n\nTITLE: Getting Entry IDs with Specific Status in ExpressionEngine PHP\nDESCRIPTION: Shows how to retrieve entry IDs associated with a specific status using the Status model and its relationships.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/status.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Get the Status Object.\n$status = ee('Model')->get('Status')->filter('status','open')->first();\n\n// Get entries with that status, returning the entry id to an array.\n$entries_array = $status->ChannelEntries->pluck('entry_id');\n```\n\n----------------------------------------\n\nTITLE: Defining Encryption Key for Security\nDESCRIPTION: This snippet assigns a secret key used by the Encrypt service to protect sensitive database data. It is automatically generated during installation and can be replaced following the troubleshooting guide if necessary.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/config/config.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$config['encryption_key'] = '26791dcd5c7cc9e569cc05b16b96235985cc9f03';\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Links with Path Variables\nDESCRIPTION: Shows how to create HTML anchor tags using path variables for internal navigation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/path.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{path='channel/archives'}\">My Archives Page</a>\n```\n\n----------------------------------------\n\nTITLE: Reading File Content in PHP\nDESCRIPTION: Reads the entire content of the file specified by `$path`. Returns the file content as a string, or `FALSE` if the file cannot be read. Requires the path string `$path`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/filesystem.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nread($path)\n```\n\n----------------------------------------\n\nTITLE: Purging Old Backup Folders With ls, sed, and xargs - Unix Shell\nDESCRIPTION: This snippet lists backup directories sorted by modification time, retains the 10 most recent, and deletes the others using sed and xargs. Intended to be run in a backup directory containing dated snapshot folders. Dependencies include standard Unix utilities (ls, sed, xargs) and file system permissions for deletion. Outputs are the removal of all but the most recent ten backup entries; should be tested with caution.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/database-backup.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nls -1t ~/backups/ | sed -e '1,10d' | xargs rm -rf\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Lists from Checkbox Values in ExpressionEngine\nDESCRIPTION: Demonstrates how to format checkbox values as HTML unordered or ordered lists using the markup parameter in ExpressionEngine templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/checkboxes.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n{field_name markup='ul'}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Email Contact Form in ExpressionEngine\nDESCRIPTION: Example of how to implement a basic contact form using the Email module's contact_form tag pair. This snippet demonstrates form structure without opening/closing form tags which ExpressionEngine handles automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_0\n\nLANGUAGE: ee\nCODE:\n```\n{exp:email:contact_form}  {/exp:email:contact_form}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Related Members Using Tag Pair in ExpressionEngine Templates\nDESCRIPTION: This snippet shows how to use the Members fieldtype (`members_field`) as a tag pair in ExpressionEngine templates. It iterates through each related member, making member variables accessible with the field's short name as a prefix (e.g., `{members_field:screen_name}`). It also demonstrates using loop variables like `{members_field:switch}` and `{members_field:count}`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/member.md#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{members_field}\n    <div class=\"{members_field:switch=\"one|two\"} id=\"row-{members_field:count}>\n        <b>{members_field:screen_name}</b>\n        - {members_field:username}\n        - {members_field:custom_field}\n    </div>\n{/members_field}\n```\n\n----------------------------------------\n\nTITLE: Custom Field Configuration in JSON\nDESCRIPTION: Example of a custom field configuration object showing required and optional properties for defining content fields.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/sets.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"label\": \"Content\",\n    \"instructions\": \"Content for this blog entry.\",\n    \"order\": 1,\n    \"search\": \"y\",\n    \"ta_rows\": 10,\n    \"settings\": {\n        \"field_show_smileys\": \"n\",\n        \"field_show_file_selector\": \"n\",\n        \"field_show_formatting_btns\": \"n\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Profile Data - ExpressionEngine Template Tag - Markdown\nDESCRIPTION: This snippet demonstrates the basic usage of the custom_profile_data ExpressionEngine Template Tag to display custom member fields such as {age} and {gender}. It is used within ExpressionEngine templates and requires that custom member fields exist (created by the site administrator). If no member_id or username parameter is provided, it defaults to showing data for the currently logged-in user. Output is rendered as HTML using the provided template variables.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/custom-profile-data.md#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine Template Tags\nCODE:\n```\n{exp:member:custom_profile_data}\n  <p>{age}, {gender}</p>\n{/exp:member:custom_profile_data}\n```\n\n----------------------------------------\n\nTITLE: Accessing Basic URL Segments in ExpressionEngine\nDESCRIPTION: Shows the basic syntax for accessing up to 9 URL segments in ExpressionEngine templates using segment variables.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/url-segments.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{segment_1}\n{segment_2}\n{segment_3}\n{segment_4}\n{segment_5}\n{segment_6}\n{segment_7}\n{segment_8}\n{segment_9}\n```\n\n----------------------------------------\n\nTITLE: Creating Directory with Optional Index File in PHP\nDESCRIPTION: Creates a new directory at the specified `$path`. Optionally adds ExpressionEngine's default `index.html` file if `$with_index` is `TRUE` (default). Returns `TRUE` on success, `FALSE` on failure. Requires the path string `$path` and optionally a boolean `$with_index`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/filesystem.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nmkDir($path, $with_index = true)\n```\n\n----------------------------------------\n\nTITLE: Encoding ExpressionEngine Tags in PHP\nDESCRIPTION: Shows how to use the encodeEETags() method to safely encode ExpressionEngine tags and variables.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$str = '{exp:tag}{variable}{/exp:tag}';\n$text = ee('Format')->make('Text', $str)->encodeEETags();\n// &#123;exp:tag&#125;&#123;variable&#125;&#123;/exp:tag&#125;\n```\n\n----------------------------------------\n\nTITLE: Interval-Based Date Footer Display - markup\nDESCRIPTION: Details the use of {date_footer} to display footers at specific intervals such as hourly or daily. It highlights the optional 'display' parameter to set the frequency and mentions performance considerations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_53\n\nLANGUAGE: markup\nCODE:\n```\n{date_footer display=\"daily\"}  <p>That's all from today!</p>  {/date_footer}\n{date_footer display=\"daily\"}\n{date_footer display=\"hourly\"}\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_field_save Hook in PHP\nDESCRIPTION: Code showing how the before_channel_field_save hook is called within ExpressionEngine. This hook is triggered before a channel field is inserted or updated and changes made are automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_field_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Using fields->is_date Method in Pro Search\nDESCRIPTION: Determines whether a given field name is a date field, either custom or native, returning TRUE or FALSE.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/functions.md#2025-04-22_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nif ($this->fields->is_date('field_name')) {\n    // Field is a date field\n}\n```\n\n----------------------------------------\n\nTITLE: Calling After Site Delete Hook - PHP\nDESCRIPTION: Extension hook called after a site object has been deleted from the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/site.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_site_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Querying the Members Table using the Model Service - ExpressionEngine PHP\nDESCRIPTION: This snippet shows how to use ExpressionEngine's Model Service in a custom add-on to retrieve all member records and output their screen names using a custom template tag ({exp:amazing_add_on:memberlist}). Dependencies include ExpressionEngine v3+ with Model Service, the 'Member' model, and the controller base class AbstractRoute. The process() method fetches all Member objects and accumulates their screen names as HTML line breaks. Input is provided via the template tag, and the output is a string of member names, each separated by a <br> tag. No pagination or filtering is implemented; adjustments would be needed to scale to large user lists.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/database-access.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace ExpressionengineDeveloper\\AmazingAddOn\\Module\\Tags;\\n\\nuse ExpressionEngine\\Service\\Addon\\Controllers\\Tag\\AbstractRoute;\\n\\nclass Memberlist extends AbstractRoute\\n{\\n    public $return_data = '';\\n\\n    // Example tag: {exp:amazing_add_on:memberlist}\\n    public function process()\\n    {\\n        $members = ee('Model')->get('Member')->all();\\n\\n        foreach($members as $member)\\n        {\\n            $this->return_data .= $member->screen_name.\"<br>\";\\n        }\\n\\n        return $this->return_data;\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Output Based on Consent Grant Method - ExpressionEngine Template\nDESCRIPTION: This snippet shows how to output content conditionally depending on the method (such as 'online_form') by which consent was granted. The conditional checks the value of {consent_given_via}. Place within a consent loop. Outputs a message when consent is provided via an online form.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/consent.md#2025-04-22_snippet_8\n\nLANGUAGE: expressionengine-template\nCODE:\n```\n{if consent_given_via == 'online_form'}\n  Consent was granted via an online form.\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission in ExpressionEngine Control Panel\nDESCRIPTION: Example of handling form submission in an ExpressionEngine Control Panel route. This code checks if the current request is a POST request and displays a success message banner when the form has been submitted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/modules.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function process($id = false)\n{\n  if (ee('Request')->isPost()) {\n    ee('CP/Alert')->makeBanner('amazing_add_on')\n      ->asSuccess()\n      ->withTitle(lang('success'))\n      ->addToBody('Form has been submitted!')\n      ->now();\n  }\n\n  // set the breadcrumb\n  $this->addBreadcrumb('index', 'Home');\n\n  // call our getForm() method to get\n  // our array\n  $form = $this->getForm();\n\n  // store our form in our $variables array\n  // to be passed into our view\n  $variables = [\n    'form'  => $form\n  ];\n\n  $this->setBody('Index', $variables);\n\n  return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Single Related Entry in ExpressionEngine Template\nDESCRIPTION: This snippet provides a template for accessing a single related entry. It assumes the 'relationship_field' is configured to relate to only one child entry, making looping unnecessary.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_1\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{exp:channel:entries channel=\"parentChannel\"}\n  {title} - {field1} - {field2}\n  {relationship_field:title}\n  {relationship_field:field1}\n  {relationship_field:field2}\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Checking for Errors on a Specific Field in ExpressionEngine with PHP\nDESCRIPTION: Demonstrates how to check if a specific field failed validation using the `hasErrors()` method on the result object (`$result`). The name of the field (e.g., 'username') is passed as an argument. It returns `true` if the specified field has one or more validation errors, and `false` otherwise.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/validation.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$result->hasErrors('username'); // true | false\n```\n\n----------------------------------------\n\nTITLE: Editing Channel Entry Status in ExpressionEngine\nDESCRIPTION: Shows how to edit an existing channel entry's status and save the changes with validation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-entry.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$entry_id = 3;\n\n// Get the entry object.\n$entry = ee('Model')->get('ChannelEntry', $entry_id)->first();\n\n// Returns 'closed'.\n$entry->status = ee('Model')->get('Status', 2)->first()->status;\n\n// Validate and Save.\n$result = $entry->validate();\n\nif ($result->isValid())\n{\n  $entry->save();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Template Layout System\nDESCRIPTION: This snippet demonstrates how to use the layout variable to wrap a template in another template. This enables template inheritance and layout composition in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/single-variables.md#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n{layout=\"news/local\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Options for ExpressionEngine Template Generator (PHP)\nDESCRIPTION: Example of defining user-configurable options for a template generator using the protected `$options` property within the generator class. This array structure mirrors the Shared Form View syntax, defining elements like title, description ('desc'), input type ('type'), requirement status ('required'), and potentially dynamic choices ('choices' pointing to a method name like 'getChannels'). These options allow users to customize the generated templates via the Control Panel or CLI.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/template-generator.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    protected $options = [\n        'channel' => [\n            'title' => 'channel',\n            'desc' => 'channel_desc',\n            'type' => 'checkbox',\n            'required' => true,\n            'choices' => 'getChannels',\n        ],\n    ];\n```\n\n----------------------------------------\n\nTITLE: Using Checkbox Values in Conditionals in ExpressionEngine\nDESCRIPTION: Demonstrates how to use checkbox field values in conditional statements in ExpressionEngine templates, comparing against values or labels.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/checkboxes.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{if field_name == 'Two'}Yep!{/if}\n{if field_name:value == 2}Yep!{/if}\n{if field_name:label == 'Two'}Yep!{/if}\n```\n\n----------------------------------------\n\nTITLE: Creating a Model Instance in ExpressionEngine\nDESCRIPTION: Creates a new instance of a model by passing its name to the make() method on the model service. Optionally accepts an array of default model properties.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$template = ee('Model')->make('Template');\n\n$template = ee('Model')->make('Template', array(\n  'template_name' => 'test'\n));\n```\n\n----------------------------------------\n\nTITLE: Setting Return URL After Submission - ExpressionEngine Tag - ExpressionEngine Tag\nDESCRIPTION: Provides configuration for the form's return location after successful submission using the return parameter. Accepts either a template path or a full URL; ensures user flow continuity in login processes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/forgot-username.md#2025-04-22_snippet_4\n\nLANGUAGE: ExpressionEngine Tag\nCODE:\n```\nreturn=\"member/login/forgot-username\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving POST Data\nDESCRIPTION: Example of using the request:post tag to retrieve a $_POST parameter value.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/request.md#2025-04-22_snippet_2\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:request:post name=\"my-var\"}\n```\n\n----------------------------------------\n\nTITLE: Rendering Excerpt of RTE Field in ExpressionEngine Template - ExpressionEngine Template\nDESCRIPTION: Shows how to output only the excerpt of the RTE content using the ':excerpt' modifier. When the RTE field contains a 'Read More' separator, this variable returns content up to that separator; otherwise, it returns the full content. No extra dependencies are required. Inputs: None directly; operates on the current field. Outputs: The excerpted portion of RTE field content.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/rte.md#2025-04-22_snippet_1\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{rte_field:excerpt}\n```\n\n----------------------------------------\n\nTITLE: Calling Before Delete Hook in ExpressionEngine PHP\nDESCRIPTION: Extension hook called before deleting a specialty template object.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-specialty-template.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_specialty_template_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Pro Search Form Examples\nDESCRIPTION: Example usage of the Pro Search form tag with various parameters like protocol forcing and form attributes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_1\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_search:form force_protocol=\"https\"}\n\n{exp:pro_search:form force_shortcut=\"no\"}\n\n{exp:pro_search:form form_id=\"search\" form_class=\"searchform\"}\n```\n\n----------------------------------------\n\nTITLE: Member List Output Example - Plain Text\nDESCRIPTION: This plain text snippet illustrates the expected output produced by either of the above methods, showing a vertical list of member screen names. There are no dependencies for this snippet, and it merely demonstrates the string that would be generated and sent to a template in ExpressionEngine. The output is static and for illustration only.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/database-access.md#2025-04-22_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nadmin\\nMoss\\nJen\\nRoy\\nDouglas\\nRichmond\n```\n\n----------------------------------------\n\nTITLE: Adding a Modal to the DOM in ExpressionEngine: PHP\nDESCRIPTION: This PHP code snippet adds the previously created HTML modal to the modal service, making it accessible in the DOM. The addModal function has no prerequisites except the HTML of the modal to be displayed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/modal.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee('CP/Modal')->addModal('hello', $modal_html);\n```\n\n----------------------------------------\n\nTITLE: Displaying Global Errors in ExpressionEngine\nDESCRIPTION: This snippet outlines how to display global submission errors using the {global_errors} tag in ExpressionEngine. It assumes the presence of an inline error handling setup. No additional configuration is required to utilize these tags.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n\n{global_errors}{error}{/global_errors}\n\n```\n\n----------------------------------------\n\nTITLE: Limiting Content Length\nDESCRIPTION: Limits the content to a specified number of characters while preserving whole words by default.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n{excerpt:limit characters='20'}\n{!-- A discussion&#8230; --}\n```\n\n----------------------------------------\n\nTITLE: Handling Toggle Fields in ExpressionEngine Fluid Field\nDESCRIPTION: Demonstrates how to use a Toggle field (`my_toggle`) nested within a Fluid Field (`my_fluid_field`) for conditional output. The `{content}` variable outputs the toggle's value (typically 'y' or 'n'), which can be used within an `{if}` conditional statement.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/fluid.md#2025-04-22_snippet_15\n\nLANGUAGE: ee\nCODE:\n```\n{my_fluid_field}\n  {my_fluid_field:my_toggle}\n    {if {content}}YES there is a toggle value!{/if}\n  {/my_fluid_field:my_toggle}\n{/my_fluid_field}\n```\n\n----------------------------------------\n\nTITLE: Implementing Status Menu Using statuses Tag Pair\nDESCRIPTION: Shows an alternative syntax for creating a status selection menu using the statuses tag pair, allowing more control over the HTML structure and option formatting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/status.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"status\">Status</label>\n<select name=\"status\" id=\"status\">\n  {statuses}\n    <option value=\"{status}\"{selected}>{status}</option>\n  {/statuses}\n</select>\n```\n\n----------------------------------------\n\nTITLE: Fetching Entry IDs of Related Entries\nDESCRIPTION: Utilizing the `:entry_ids` modifier in ExpressionEngine, this snippet outputs entry IDs of related entries, typically for passing to plugins as parameters. The IDs can be delimited with a specified character.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_4\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{relationship_field:entry_ids}\n\n{parents:entry_ids}\n\n{parents:entry_ids field=\"relationship_field\"}\n```\n\n----------------------------------------\n\nTITLE: Image Manipulation in ExpressionEngine Template\nDESCRIPTION: Showcases the use of image manipulation tags in ExpressionEngine to output different sizes of an image URL. Requires defined image manipulations in the CMS.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/file.md#2025-04-22_snippet_1\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{news_image:small}\n```\n\n----------------------------------------\n\nTITLE: Customizing Delimiter for :member_ids Modifier in ExpressionEngine\nDESCRIPTION: This example demonstrates using the optional `delimiter` parameter with the `:member_ids` modifier for an ExpressionEngine Members field tag. By setting `delimiter=\",\"`, it outputs a comma-delimited string of related member IDs instead of the default pipe delimiter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/member.md#2025-04-22_snippet_6\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{members_field:member_ids delimiter=\",\"}\n```\n\n----------------------------------------\n\nTITLE: Adding an Item to a FolderList in PHP\nDESCRIPTION: Adds a new item with specified text and an optional URL to a `FolderList` instance. The URL can be a CP/URL object or a string. It returns a new `FolderList` object.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\naddItem($text, $url = NULL)\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Site Manager\nDESCRIPTION: Toggles the Multiple Site Manager (MSM) functionality.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_102\n\nLANGUAGE: php\nCODE:\n```\n$config['multiple_sites_enabled'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Example Output of Iterating Multi Select Items (Plaintext)\nDESCRIPTION: This shows the rendered output of the previous ExpressionEngine template snippet, where each selected item's label is displayed on a new line.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/multiselect.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nOne\nTwo\nThree\n```\n\n----------------------------------------\n\nTITLE: Recursively Copying Directory in PHP\nDESCRIPTION: Copies the directory specified by `$source` to the `$dest` path, recursively copying all contents. If the destination directory `$dest` does not exist, it will be created. This function does not return a status value. Requires the source path string `$source` and destination path string `$dest`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/filesystem.md#2025-04-22_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nrecursiveCopy($source, $dest)\n```\n\n----------------------------------------\n\nTITLE: Showing Comments from Expired Entries - ExpressionEngine Template\nDESCRIPTION: This example demonstrates the show_expired parameter to determine whether comments from expired entries will be included in the listing. Critical for sites that want to continue showing discussions from archived content.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_10\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\nshow_expired=\"yes\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Display for Non-Category Requests - markup\nDESCRIPTION: The {if not_category_request} conditional tag is used to display content only when the current tag is not displayed based on a category specified in the URL. This is useful for differentiating content displays depending on URL parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_49\n\nLANGUAGE: markup\nCODE:\n```\n{if not_category_request} content {/if}\n```\n\n----------------------------------------\n\nTITLE: Text Formatting Option: None\nDESCRIPTION: Specifies the 'None' option for the 'Text formatting' setting within channel comment configurations. This option performs no automatic formatting on the comment text.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/channels.md#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nNone\n```\n\n----------------------------------------\n\nTITLE: Conditional Statements in ExpressionEngine\nDESCRIPTION: Examples of using conditional statements for viewable images and no results scenarios\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/file.md#2025-04-22_snippet_5\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if viewable_image} content {/if}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if no_results}\n  <p>There are no current files to view.</p>\n{/if}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if no_results} {redirect=\"site/noresult\"} {/if}\n```\n\n----------------------------------------\n\nTITLE: Accessing Grid-specific Settings in PHP\nDESCRIPTION: Shows how to access Grid-specific settings within a fieldtype class. These settings provide context about the Grid field and column the fieldtype is being used in.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/fieldtypes.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$this->settings['col_id'];\n```\n\n----------------------------------------\n\nTITLE: Updating Control Panel File Structure for ExpressionEngine 7.2+\nDESCRIPTION: Shows how to update an MCP (Module Control Panel) file to use the new Mcp service by extending the base Mcp class and adding required addon_name property.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/modernizing-existing-add-ons.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse ExpressionEngine\\Service\\Addon\\Mcp;\n\nclass Amazing_add_on_mcp extends Mcp\n{\n    protected $addon_name = 'amazing_add_on';\n```\n\n----------------------------------------\n\nTITLE: Specifying Version Requirements for ExpressionEngine Add-on\nDESCRIPTION: Defines minimum PHP and ExpressionEngine versions required by the add-on. The installation will be prevented if these requirements are not met.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n'requires'       => [\n    'php'   => '8.0',\n    'ee'    => '7.2.0'\n],\n```\n\n----------------------------------------\n\nTITLE: Sorting Model Results in ExpressionEngine PHP\nDESCRIPTION: Demonstrates how to order model query results using the order() method with ascending (ASC) or descending (DESC) options.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n->order('template_name', 'ASC')\n```\n\n----------------------------------------\n\nTITLE: Defining a Complex Pivot Table with Custom Keys\nDESCRIPTION: Example of specifying a pivot table with custom column names for a HasAndBelongsToMany relationship. This allows for non-standard column naming in the pivot table.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/relating-models.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n'pivot' => array(\n  'table' => 'mytable',\n  'left' => 'some_key',\n  'right' => 'another_key'\n);\n```\n\n----------------------------------------\n\nTITLE: Normalizing URL in PHP\nDESCRIPTION: Normalizes a URL for proper usage in markup. No additional context or parameters are needed beyond PHP's main capabilities. Produces a Formatter object.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n### `url()`\n\nNormalize a URL for use in markup.\n\n| Parameter | Type     | Description        |\n| --------- | -------- | ------------------ |\n| Returns   | `Object` | A Formatter object\n```\n\n----------------------------------------\n\nTITLE: Disabling Features in an ExpressionEngine View\nDESCRIPTION: Demonstrates how to disable optional view features for a specific rendering. The disabled features (e.g., wrappers or attributes) can be checked within the view via helper methods. This allows for rendering alternate markup without introducing boolean flags into template logic. Pass an array of feature names to the disable() method before rendering.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/view.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$view->disable(array('figure', 'data-attribute'));\n```\n\n----------------------------------------\n\nTITLE: Filtering Date Ranges Using Date Input Fields and Pro Search - ExpressionEngine - HTML\nDESCRIPTION: Implements a search form with two date inputs for specifying 'from' and 'to' range limits, targeting the entry date. Upon submission, the results tag filters entries on the specified channel with these range parameters. End-users can pick dates manually, but JavaScript enhancements (e.g., datepicker) are supported. Inputs: two date fields; output: matching entries with formatted entry date.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/examples.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:form query=\"{segment_3}\"}\n  <input type=\"date\" name=\"range-from:entry_date\"> -\n  <input type=\"date\" name=\"range-to:entry_date\">\n  <button type=\"submit\">Go</button>\n{/exp:pro_search:form}\n```\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:results\n  query=\"{segment_3}\"\n  channel=\"news\"\n  limit=\"10\"\n}\n  <p>{entry_date format=\"%Y-%m-%d\"}: {title}</p>\n  {paginate}\n    {current_page}/{total_pages} | {pagination_links}\n  {/paginate}\n{/exp:pro_search:results}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Channel Field Group in PHP\nDESCRIPTION: Demonstrates how to retrieve a Channel Field Group by its ID using the ExpressionEngine Model service.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-field-group.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee('Model')->get('ChannelFieldGroup', 2)->first();\n```\n\n----------------------------------------\n\nTITLE: Correct String Usage - PHP\nDESCRIPTION: Provides PHP examples for correct string usage: using single quotes when no variable parsing is required, applying double quotes with braces for variable interpolation, and reducing escape sequences in SQL strings. No dependencies are required. Consistent string formatting improves code clarity and reduces parsing errors.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/general.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n'My String'\n\"My string {$foo}\"\n\"SELECT foo FROM bar WHERE baz = 'bag'\"\n```\n\n----------------------------------------\n\nTITLE: Embedding Sub-Views using the embed() Helper Method in ExpressionEngine Views\nDESCRIPTION: Shows how to embed a sub-view within a parent view using the embed() method. All parent variables are passed to the sub-view automatically, with optional overrides in the second parameter. Embedding enables composition of views for modular templates. The sub-view is rendered within the current template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/view.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<p><?php $this->embed('addon_name:sub/view') ?></p>\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling CLI in ExpressionEngine (PHP)\nDESCRIPTION: Allows to enable or disable the command line interface. 'y' enables CLI for all users (default), 'n' disables it. Note that CLI access depends on server authorization.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$config['cli_enabled'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: Creating Control Panel Output in Module Control Panel Files\nDESCRIPTION: This snippet provides a template for creating the control panel output for ExpressionEngine modules, detailing how to structure the MCP file and define control panel components like body, breadcrumb, and heading.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/v3-add-on-migration.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass Package_name_mcp\n{\n    var $version = '1.0';\n\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Action in ExpressionEngine CLI\nDESCRIPTION: This snippet demonstrates how to generate a new action for a third-party add-on using the ExpressionEngine command line interface. This command requires specifying the add-on folder using the `--addon` option. The primary input is the action name, and it outputs the creation of a new action within the specified add-on.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/make-action.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp eecli.php make:action MyNewAction --addon=my_existing_addon\n```\n\n----------------------------------------\n\nTITLE: Creating and Immediately Installing an Action via CLI\nDESCRIPTION: This command uses the ExpressionEngine CLI to create a new action and immediately runs its associated migration to register it in the `exp_actions` table. The `--install` or `-i` flag triggers the immediate installation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp system/ee/eecli.php make:action --install\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Security Requirements in ExpressionEngine\nDESCRIPTION: Sets the password security policy level for ExpressionEngine users. Options include 'n' (none), 'y' (basic), 'g' (good), and 's' (strong). Each level enforces increasingly strict password complexity requirements.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_119\n\nLANGUAGE: php\nCODE:\n```\n$config['require_secure_passwords'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: Getting File/Directory Last Modified Time in PHP\nDESCRIPTION: Retrieves the last modified time for the file or directory specified by `$path`. Returns a Unix timestamp integer representing the last modification time, or `FALSE` on failure. Requires the path string `$path`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/filesystem.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nmtime($path)\n```\n\n----------------------------------------\n\nTITLE: Inefficient Relationship Access in Loops in ExpressionEngine PHP\nDESCRIPTION: Demonstrates a performance issue that occurs when lazy-loading relationships inside a loop, which triggers multiple database queries.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$templates = ee('Model')->get('Template')->all();\n\nforeach ($templates as $template)\n{\n  $group = $template->TemplateGroup; // BAD, triggers a fetch for each iteration\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Archive Month Links Tag Implementation in ExpressionEngine\nDESCRIPTION: Shows the fundamental implementation of the Archive Month Links tag that displays a list of months containing Channel Entries, with each month and year on a new line.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/archive-months.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:month_links channel=\"news\" limit=\"50\"}\n    {month}, {year}<br>\n{/exp:channel:month_links}\n```\n\n----------------------------------------\n\nTITLE: Enabling Category URL Titles in ExpressionEngine (PHP)\nDESCRIPTION: Configures the system to generate category links with category URL titles instead of numeric indicators.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_169\n\nLANGUAGE: php\nCODE:\n```\n$config['use_category_name'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Using Template Partials in ExpressionEngine Channel Entries Tag\nDESCRIPTION: Demonstrates using a template partial as a parameter value in a channel entries tag. The template partial 'tp_special_channel' is used to dynamically set the channel parameter value.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:entries channel=\"{tp_special_channel}\" limit=\"10\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Page Channel Entry Template in ExpressionEngine\nDESCRIPTION: Example template code showing how to split a channel entry across multiple pages using ExpressionEngine's pagination features. Uses channel:entries tag with pagination parameters and multi_field variable to display content across pages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entry-spanning.md#2025-04-22_snippet_0\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:channel:entries channel=\"news\" paginate_type=\"field\" paginate=\"bottom\"}\n   <h3>{title}</h3>\n   {body}\n   {multi_field=\"page1|page2|page3|page4\"}\n   <div>\n      Last updated on {edit_date format='%M %d, %Y'} at\n         {edit_date format='%h:%i %A'}<br />\n   </div>\n   {paginate}\n      <p>Page {current_page} of {total_pages} pages for this article\n         {pagination_links}</p>\n   {/paginate}\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Generating Password Rank Validation URL in ExpressionEngine\nDESCRIPTION: This ExpressionEngine template tag generates a URL for the AJAX endpoint specifically configured to validate password strength (rank). This endpoint accepts only POST requests via AJAX and returns a JSON object containing the password rank and its textual representation (e.g., 'Weak', 'Strong').\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/password-validation.md#2025-04-22_snippet_0\n\nLANGUAGE: ee\nCODE:\n```\n{exp:member:validation_url fields=\"password_rank\"}\n```\n\n----------------------------------------\n\nTITLE: Dump and Die in ExpressionEngine - PHP\nDESCRIPTION: Shows how to use the dd helper function to perform a formatted variable dump followed by immediate termination of script execution. This is useful for quickly inspecting a variable and halting further code, ensuring nothing else interferes with debugging output. The function requires ExpressionEngine's framework and takes $var as input. The main output is the variable's preformatted value, then stoppage of code execution.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/debugging.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndd($var)\n```\n\n----------------------------------------\n\nTITLE: Limiting Result Count in Model Queries in ExpressionEngine PHP\nDESCRIPTION: Shows how to limit the number of models returned from a query using the limit() method.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$page_one = ee('Model')->get('Template')->limit(10)->all();\n```\n\n----------------------------------------\n\nTITLE: Extending Views and Creating Blocks in ExpressionEngine (PHP)\nDESCRIPTION: Demonstrates extending a parent view and starting a new content block using startBlock() and endBlock(). Blocks such as 'js' are created in the child view and can be referenced by the parent view for placement. Useful for managing complex layouts and passing markup between views.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/view.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php $this->extend('html_wrapper') ?>\n\n<?php $this->startBlock('js') ?>\n  <script> ... </script>\n<?php $this->endBlock() ?>\n```\n\n----------------------------------------\n\nTITLE: Using Variable Pairs in ExpressionEngine Templates\nDESCRIPTION: Demonstrates how to use variable pairs to access more granular data. This example shows how to display image file details within a news_image variable pair.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/language.md#2025-04-22_snippet_1\n\nLANGUAGE: ee\nCODE:\n```\n{news_image}\n    File name: {file_name}\n    File extension: {extension}\n    Url: {url}\n{/news_image}\n```\n\n----------------------------------------\n\nTITLE: Handling No Results in ExpressionEngine - markup\nDESCRIPTION: This snippet demonstrates how to use the {if no_results} conditional tag to manage content display when no entries are returned. It shows how to display a message, redirect to another template, or show a 404 page. Dependencies include understanding of ExpressionEngine's templating system and basic tag syntax.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_47\n\nLANGUAGE: markup\nCODE:\n```\n{if no_results} content {/if}\n{if no_results}  <p>There are no entries available.</p>  {/if}\n{if no_results} {redirect=\"channel/noresult\"} {/if}\n{if no_results} {redirect=\"404\"} {/if}\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Class to ExpressionEngine Logout Form\nDESCRIPTION: Example of the `form_class` parameter for the `{exp:member:logout_form}` tag. This parameter allows adding a specific CSS class attribute to the generated `<form>` tag for styling purposes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/logout.md#2025-04-22_snippet_4\n\nLANGUAGE: ee\nCODE:\n```\nform_class=\"login\"\n```\n\n----------------------------------------\n\nTITLE: Populating ExpressionEngine List Field Options Manually (PHP)\nDESCRIPTION: Shows how to populate options for list-based field types (Checkboxes, Multi Select, etc.) by setting the `field_list_items` property directly with a newline-separated string of options. Requires validation and saving afterwards.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-field.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n```php\n// populate manually\n$field->setProperty('field_list_items', \"first\\nsecond\\nthird\");\n// Validate and Save.\n```\n```\n\n----------------------------------------\n\nTITLE: Conditionally Showing Content for Disabled Comments in ExpressionEngine\nDESCRIPTION: Uses the `{if comments_disabled}` conditional tag. The content enclosed within this pair will be displayed if commenting for the entry has been explicitly disabled. Note: `{if no_results}` takes precedence.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_34\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{if comments_disabled} content {/if}\n```\n\n----------------------------------------\n\nTITLE: Filtering Comments by Entry ID - ExpressionEngine Template\nDESCRIPTION: This code shows how to limit comments to a specific entry or set of entries using the entry_id parameter in the Comment Entries tag. Multiple IDs can be piped, or entries can be excluded by using the 'not' keyword. This prevents dynamic context from affecting what comments are displayed and is especially useful for tightly scoped comment pages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_4\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\nentry_id=\"24\"\n```\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\nentry_id=\"13|42|147\"\n```\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\nentry_id=\"not 45|534|807\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Search Query Hook Implementation in PHP\nDESCRIPTION: Example of how the channel_search_modify_search_query hook is called within ExpressionEngine. This hook allows modification of the initial search query before it's cached in the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/search.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modified_sql = ee()->extensions->call('channel_search_modify_search_query', $sql, $this->hash);\n...\nif (ee()->extensions->end_script === TRUE) return $sql\n```\n\n----------------------------------------\n\nTITLE: Executing Default ExpressionEngine Database Backup via CLI\nDESCRIPTION: Runs the basic `backup:database` command without any options. This performs a database backup using the default speed (5) and saves the SQL file to the default relative path within the cache folder (`system/user/cache/`). An example output path and filename format is provided.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/backup-database.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp eecli.php backup:database\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Example backup path and filename:\nsystem/user/cache/eedatabase_2023-05-30_18h05m39sUTC.sql\n```\n\n----------------------------------------\n\nTITLE: Password Error Output - ExpressionEngine Template Syntax\nDESCRIPTION: Shows how to output validation errors for the password field, including confirm password mismatches or format errors. This is displayed inline in the template for better user feedback.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_23\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\n{if error:password}{error:password}{/if}\n```\n\n----------------------------------------\n\nTITLE: Category Limit Parameter Usage - markup\nDESCRIPTION: Utilizes the 'limit' parameter to restrict the number of categories displayed within the {categories} tag pair. This is guided by the order from the Category Management page.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_57\n\nLANGUAGE: markup\nCODE:\n```\n{categories limit=\"1\"}\n```\n\n----------------------------------------\n\nTITLE: Loading Assets and Rendering GridInput in PHP\nDESCRIPTION: Loads JavaScript assets, initializes the GridInput, and prepares data for rendering in a view.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/table.md#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$grid->loadAssets();\n\n$vars['grid'] = $grid->viewData();\n\nreturn ee()->cp->render('myaddon/myview', $vars);\n```\n\n----------------------------------------\n\nTITLE: PHP Parsing on Input Example in ExpressionEngine Templates\nDESCRIPTION: Demonstrates how PHP can be used when set to parse on input, allowing dynamic generation of template tag parameters and conditional template tag inclusion.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n{exp:channel:entries limit=\"<?php echo $limit; ?>\"}\n\n<?php\nif ($show_list) {\n    echo \"{exp:channel:entries limit='50'}\";\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Creation with ExpressionEngine CP/Form Service in PHP\nDESCRIPTION: This snippet demonstrates the fundamental usage of the CP/Form Service. It initializes the service (`ee('CP/Form')`), creates a 'General Settings' group, adds two field sets ('First Name' and 'Last Name') each containing a text input field (`getField`), and prepares the form structure as an array using `toArray()`. This array is intended for use with the ExpressionEngine Shared Form View layer.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/cp-form.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$form = ee('CP/Form');\n$field_group = $form->getGroup('General Settings');\n\n$field_set = $field_group->getFieldSet('First Name');\n$field_set->getField('first_name', 'text');\n\n$field_set = $field_group->getFieldSet('Last Name');\n$field_set->getField('last_name', 'text');\n\n$form->toArray();\n```\n\n----------------------------------------\n\nTITLE: Setting Keywords Parameter in Suggestions Tag - ExpressionEngine Template Tag\nDESCRIPTION: This snippet uses the keywords parameter with {exp:pro_search:suggestions} to specify a query term for a suggestion search. The value 'jongle' is passed directly, demonstrating how to override the default or inherited query context.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_26\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:suggestions keywords=\"jongle\"}\n```\n\n----------------------------------------\n\nTITLE: Short Conditional for Logged Out Visitors\nDESCRIPTION: Shows how to display content only for non-logged in visitors.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_12\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if logged_out}\n    You aren't a member or aren't logged in.<br />\n    <a href=\"{path='member/login'}\">Login</a>  | <a href=\"{path='member/register'}\">Register</a>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Testing User's IP Address\nDESCRIPTION: Example of checking the IP address of the logged in user.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_20\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if logged_in_ip_address == '127.0.0.1'}  There's no place like home.  {/if}\n```\n\n----------------------------------------\n\nTITLE: Initializing GridInput Object in PHP\nDESCRIPTION: Creates a new GridInput object with a specified field name for namespacing inputs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/table.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$grid = ee('CP/GridInput', array(\n  'field_name' => 'image_manipulations'\n));\n```\n\n----------------------------------------\n\nTITLE: Invoking form_declaration_modify_data Hook in ExpressionEngine PHP\nDESCRIPTION: This PHP snippet demonstrates calling the `form_declaration_modify_data` hook. It passes the original form data array (`$data`) to active extensions via `$this->extensions->call()`. Extensions can modify this array, and the returned modified array is then used for further form processing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/functions.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$data = $this->extensions->call('form_declaration_modify_data', $data);\n```\n\n----------------------------------------\n\nTITLE: Updating an ExpressionEngine Channel Field Name (PHP)\nDESCRIPTION: This snippet demonstrates how to retrieve an existing ChannelField model by its ID, change its `field_name` property, validate the changes, and then save the updated model back to the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-field.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n```php\n// Get the field object.  #4 is the About Images field.\n$field = ee('Model')->get('ChannelField', 4)->first();\n\n// Change the title using the parameter.\n$field->field_name = 'new_field_name';\n\n// Validate and Save.\n$result = $field->validate();\n\nif ($result->isValid())\n{\n  $field->save();\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a Comment Subscription via ExpressionEngine Model (PHP)\nDESCRIPTION: Demonstrates how to add a comment subscription using the ExpressionEngine model API. This snippet requires ExpressionEngine to be installed and assumes the user is authenticated and session data is available. Key parameters such as entry ID, member ID, email, and subscription metadata are set before saving the subscription entity. The expected output is a saved subscription for the specified entry, with a unique hash for notifications.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/comment-subscription.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n$entry_id = 1;\\n$entry = ee('Model')->get('ChannelEntry', $entry_id)->first();\\n\\n$sub = ee('Model')->make('CommentSubscription');\\n$sub->entry_id          = $entry->getId();\\n$sub->member_id         = ee()->session->userdata['member_id'];\\n$sub->email             = ee()->session->userdata['email']; // Normally omitted if member ID is included.\\n$sub->subscription_date = ee()->localize->now;\\n$sub->notification_sent = 'n';\\n$sub->hash              = ee()->session->userdata['member_id'] . ee()->functions->random('alnum', 8);\\n$sub->save();\n```\n\n----------------------------------------\n\nTITLE: URL Encoding in PHP\nDESCRIPTION: Shows how to use the urlEncode() method for encoding strings for use in URLs, with an option for encoding spaces as plus signs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$str = 'A discussion about \"Wonko the Sane\"';\n$text = ee('Format')->make('Text', $str)->urlEncode();\n// A%20discussion%20about%20%22Wonko%20the%20Sane%22\n\n$text = ee('Format')->make('Text', $str)->urlEncode(['plus_encoded_spaces' => TRUE]);\n// A+discussion+about+%22Wonko+the+Sane%22\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_entry_save Hook in PHP\nDESCRIPTION: Code demonstrating how the before_channel_entry_save hook is called in ExpressionEngine before a channel entry is saved. The hook passes the current ChannelEntry model object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-entry.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_entry_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Bulk Consent Form in ExpressionEngine\nDESCRIPTION: This example demonstrates a more complete consent form implementation, including error handling for no results and radio buttons for accepting or declining each consent request.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/consent.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{exp:consent:alert}\n  <div class=\"alert {alert_type}\">\n    <p>{alert_message}</p>\n  </div>\n{/exp:consent:alert}\n\n{exp:consent:form}\n  {if no_results}\n    <h1>No Consent Requests to Display</h1>\n  {/if}\n\n  {consents}\n    <fieldset>\n      <dl>\n        <dt>{consent_title}</dt>\n        <dd>{consent_request}</dd>\n      </dl>\n      <label>\n        <input type=\"radio\" name=\"{consent_short_name}\" value=\"y\" {if consent_granted}checked{/if}>\n        Accept\n      </label>\n      <label>\n        <input type=\"radio\" name=\"{consent_short_name}\" value=\"n\" {if ! consent_granted}checked{/if}>\n        Decline\n      </label>\n    </fieldset>\n  {/consents}\n\n  <fieldset>\n    <input type=\"submit\" name=\"submit\" value=\"Save\">\n  </fieldset>\n{/exp:consent:form}\n```\n\n----------------------------------------\n\nTITLE: Parsing Emoji Shorthand with ExpressionEngine\nDESCRIPTION: This snippet shows how to use the {exp:emoji:parse_shorthand} tag to convert emoji shorthand code to HTML entities that browsers can render.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/emoji.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{exp:emoji:parse_shorthand}\n  Flying a :rocket: to Mars with Elon Musk\n{/exp:emoji:parse_shorthand}\n```\n\n----------------------------------------\n\nTITLE: Grouping Entries by Month using display_by in ExpressionEngine\nDESCRIPTION: The `display_by` parameter groups channel entries by time intervals ('month', 'day', 'week') instead of the default numerical limit. It interacts with the `limit` parameter to define how many intervals are shown. For example, `display_by=\"month\" limit=\"1\"` shows entries from the last month containing entries. Time calculation is based on UTC/GMT server time. The `week` option has additional related parameters like `show_current_week`, `start_day`, and `week_sort`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_4\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\ndisplay_by=\"month\"\n```\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\ndisplay_by=\"month\" limit=\"1\"\n```\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\ndisplay_by=\"month\" limit=\"3\"\n```\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\ndisplay_by=\"day\" limit=\"1\"\n```\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\ndisplay_by=\"day\" limit=\"14\"\n```\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\ndisplay_by=\"week\"\n```\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\ndisplay_by=\"week\" limit=\"1\"\n```\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\ndisplay_by=\"week\" limit=\"1\" show_future_entries=\"yes\" show_current_week=\"yes\"\n```\n\n----------------------------------------\n\nTITLE: Counting Model Results in ExpressionEngine PHP\nDESCRIPTION: Shows how to count the number of matching models without retrieving all data, using the count() method instead of all().\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$total_templates = ee('Model')->get('Template')->count();\n```\n\n----------------------------------------\n\nTITLE: Displaying Checkbox/Multi Select (Single Variable) in ExpressionEngine Fluid Field\nDESCRIPTION: Demonstrates rendering the selected options of a checkbox or multi-select field (`my_checkbox`) nested within a Fluid Field (`my_fluid_field`) as a comma-separated list of labels using the single `{content}` variable.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/fluid.md#2025-04-22_snippet_5\n\nLANGUAGE: ee\nCODE:\n```\n{my_fluid_field}\n  {my_fluid_field:my_checkbox}\n    {content}\n  {/my_fluid_field:my_checkbox}\n{/my_fluid_field}\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Tutorial HTML\nDESCRIPTION: HTML structure for embedding a YouTube video tutorial about entry cloning with responsive wrapper\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entry_cloning.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"video-wrapper\">\n<iframe src=\"https://www.youtube.com/embed/cSz7NZdQvGk?vq=HD1080&rel=0\" width=\"1920\" height=\"1080\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Hacker Variable Modifier in PHP\nDESCRIPTION: Example implementation of a custom variable modifier that converts letters to similar-looking numbers. The modifier implements ModifierInterface and includes required namespace definition.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/modifiers.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n* namespace is required and must be add-on's namespace + 'Modifiers'\n* \n*/\nnamespace EEHarbor\\Seeo\\Modifiers;\n\nuse ExpressionEngine\\Service\\Template\\Variables\\ModifierInterface;\n\nclass Hacker implements ModifierInterface\n{\n    public function modify($data, $params = array(), $tagdata = false)\n    {\n        return str_replace(['e', 'o', 'l'], ['3', '0', '1'], (string) $data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking an Item as a Delete Action in PHP\nDESCRIPTION: This method marks a sidebar item (likely related to `BasicItem`) as a delete action. It accepts an optional modal name to trigger upon deletion. The method returns the `BasicItem` instance for potential chaining.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nasDeleteAction($modal_name = '')\n```\n\n----------------------------------------\n\nTITLE: Using File Fields in Relationship Tags\nDESCRIPTION: Examples of how to use file fields within relationship tags in ExpressionEngine, both as single variables and variable pairs for accessing metadata.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_10\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{relationship_field}\\n  URL: {relationship_field:my_image}\\n{/relationship_field}\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{relationship_field}\\n  {relationship_field:my_image}\\n      Extension: {extension}\\n      Upload date: {upload_date format=\\\"%Y %m %d\\\"}\\n      URL: {url}\\n      Custom med thumbnail url: {url:med}\\n  {/relationship_field:my_image}\\n{/relationship_field}\n```\n\n----------------------------------------\n\nTITLE: Using params->explode Method in Pro Search\nDESCRIPTION: Turns a multi-valued parameter string into an array, returning both the exploded values and whether the parameter had 'not' prefixed to it.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/functions.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nlist($values, $not) = $this->params->explode($str);\n```\n\n----------------------------------------\n\nTITLE: PHP Method Signature - getMemberName\nDESCRIPTION: Method to retrieve the member's name, returns a string value.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/member.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ngetMemberName()\nReturns: String\n```\n\n----------------------------------------\n\nTITLE: Creating a New Role Group in PHP\nDESCRIPTION: This snippet illustrates the process of creating a new Role Group, setting required fields, validating, and saving the model.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/role-group.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Create a Role Model\n$roleGroup = ee('Model')->make('RoleGroup');\n\n// Set the Require field\n$roleGroup->name = 'DC Members';\n\n// Validate and Save.\n$result = $roleGroup->validate();\n\nif ($result->isValid())\n{\n  $roleGroup->save();\n}\n\n// the ID is now available:\n$roleGroup->group_id;\n```\n\n----------------------------------------\n\nTITLE: Implementing AJAX-Driven Consent Form in ExpressionEngine\nDESCRIPTION: This complex example shows how to create an AJAX-driven consent form using jQuery and the jQuery Form plugin. It includes HTML structure, ExpressionEngine tags, and JavaScript for handling form submission asynchronously.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/consent.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css\">\n  </head>\n  <body>\n    {exp:consent:form\n      consent='ee:cookies_functionality|ee:cookies_performance|ee:cookies_targeting'\n      form_id='cookieConsentForm'\n    }\n    <p>This website uses a variety of cookies, which you consent to if you continue to use this site. You can read our <a href=\"{path='privacy'}\">Privacy Policy</a> for details about how these cookies are used, and to grant or withdraw your consent for certain types of cookies.</p>\n\n    {consents}\n      <label>\n        <input type=\"checkbox\" name=\"{consent_short_name}\" value=\"y\" {if consent_granted}checked{if:elseif ! consent_response_date}checked{/if}>\n        {consent_title}\n      </label>\n    {/consents}\n\n    <input type=\"submit\" name=\"submit\" value=\"Ok\">\n    {/exp:consent:form}\n\n    <script src=\"//code.jquery.com/jquery-3.2.1.min.js\"></script>\n\n    <!--using the jQuery Form plugin https://jquery.malsup.com/form/-->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery.form/4.2.2/jquery.form.js\" type=\"text/javascript\"></script>\n\n    <script type=\"text/javascript\">\n      $(document).ready(function(){\n        $('#cookieConsentForm').ajaxForm({\n          dataType: 'json',\n          success: function(data) {\n            if (data.success) {\n              alert(data.success);\n            } else {\n              alert('Failed with the following errors: '+data.errors.join(', '));\n            }\n          }\n        });\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using URL Fieldtype Output in HTML Anchor Tag (ExpressionEngine)\nDESCRIPTION: Demonstrates how to use the output of an ExpressionEngine URL fieldtype (represented by `{your_url_field}`) as the `href` attribute value in an HTML anchor (`<a>`) tag. The `{your_url_field}` tag will be replaced by the entity-encoded URL stored in the field during template parsing, making it safe for direct use in HTML attributes. This assumes an ExpressionEngine template context where `your_url_field` is a defined URL field.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/url.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{your_url_field}\">Your Link</a>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Signed Cookie in ExpressionEngine\nDESCRIPTION: Example of retrieving data from a cryptographically-signed cookie using the Cookie service. Returns the cookie value if it exists and signature verification passes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/cookie.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee('Cookie')->getSignedCookie('my_cookie_name');\n```\n\n----------------------------------------\n\nTITLE: Running an Interactive ExpressionEngine CLI Command (Shell)\nDESCRIPTION: Shows an example of executing an ExpressionEngine CLI command ('hello') with the interactive flag ('-i'). The command prompts the user for textual input ('What's your name?') and incorporates the response into its output.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/usage.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ php system/ee/eecli.php hello -i\n\nHello world\nWhat's your name? Andy\nPleasure to meet you, Andy!\n```\n\n----------------------------------------\n\nTITLE: Displaying Child View Output in a Parent View Template (PHP)\nDESCRIPTION: Shows how the $child_view variable allows a parent view to output content from its child. This supports templating hierarchies where content blocks are inserted dynamically into wrapper layouts. Ensures that extended views' content is placed in the correct location within the parent.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/view.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<section><?=$child_view?></section>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Fields Tag Pair in ExpressionEngine\nDESCRIPTION: Template code for displaying all custom fields with basic validation and formatting. Includes support for text fields, grid fields, and multiselect fields.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/fields.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{custom_fields}\n\n    <label for=\"{field_name}\">{if required}* {/if}{field_label}</label>\n    {field_instructions}\n\n    {if error}\n      <p class=\"error\">{error}</p>\n    {/if}\n\n\n    {if text}\n      <input type=\"text\" dir=\"{text_direction}\" id=\"{field_name}\" name=\"{field_name}\" value=\"{field_data}\" maxlength=\"{maxlength}\" size=\"50\">\n    {/if}\n\n    {if grid}\n      {display_field}\n    {/if}\n\n    {if multiselect}\n      <select id=\"{field_name}\" name=\"{field_name}[]\" multiple=\"multiple\">\n        {options}\n          <option value=\"{option_value}\"{selected}>{option_name}</option>\n        {/options}\n      </select>\n  {/if}\n\n{/custom_fields}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Field Content in ExpressionEngine Templates\nDESCRIPTION: This ExpressionEngine template code demonstrates using a basic conditional tag (`{if field_name}`) to render content only if the specified field (`about_image`) has a value and its backend conditional logic evaluates to true for the current entry. The content within the `{if}` block, such as the image tag, will only be displayed if the field meets its conditions. This approach is required for controlling frontend visibility based on conditional field settings.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/field-manager/conditional-fields.md#2025-04-22_snippet_0\n\nLANGUAGE: ee\nCODE:\n```\n{if about_image}\n    {!-- content here will only be shown if About Image has data and is conditionally displayed --}\n    <img src=\"{about_image}\" />\n    ...\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Fetching All Roles for an ExpressionEngine Member in PHP\nDESCRIPTION: This code retrieves a specific member object by username using the ExpressionEngine Model service and then calls the `getAllRoles()` method on the member object to fetch all associated Role objects. Depends on the `ee('Model')` service and a valid `$username`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/member.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n```php\n$username = 'bob';\n$member_roles_object = ee('Model')->get('Member')->filter('username', $username)->first()->getAllRoles();\n```\n```\n\n----------------------------------------\n\nTITLE: Category Parameter Usage in ExpressionEngine Navigation\nDESCRIPTION: Example demonstrating different ways to use the category parameter for filtering entries, including stacking categories and using inclusive/exclusive conditions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entry-linking.md#2025-04-22_snippet_1\n\nLANGUAGE: expressionengine\nCODE:\n```\ncategory=\"2|45|4|9\"\ncategory=\"not 4|5|7\"\ncategory=\"3&7&8\"\ncategory=\"not 3&5\"\n```\n\n----------------------------------------\n\nTITLE: Alternating Content with Switch Tag\nDESCRIPTION: A snippet demonstrating the use of the 'switch' tag to alternate styles or content in a loop of channel entries. In this example, DIV classes alternate between specified values as entries are displayed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_45\n\nLANGUAGE: HTML\nCODE:\n```\n{exp:channel:entries channel=\"yourchannel\"}\n    <div class=\"{switch='one|two'}\">\n        <h2>{title}</h2>\n        {body}\n    </div>\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Title Permalink Generation in ExpressionEngine\nDESCRIPTION: Uses 'url title' for generating a permalink to the entry page, allowing entry-specific navigation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/calendar.md#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n{title_permalink=\"channel/archives\"}\n```\n\n----------------------------------------\n\nTITLE: Testing URL Segments\nDESCRIPTION: Shows how to test against URL segments in conditionals.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_31\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if segment_3 == \"private\"}  You're seeing something private!  {/if}\n```\n\n----------------------------------------\n\nTITLE: Image Cropping in Templates in ExprEngine\nDESCRIPTION: Discusses cropping images with parameters for dimensions and position in an ExpressionEngine template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/file.md#2025-04-22_snippet_7\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{news_image:crop width=\"100\" height=\"100\" position=\"center\"}\n```\n\n----------------------------------------\n\nTITLE: Displaying Options for `sync:reindex` ExpressionEngine CLI Command (Shell)\nDESCRIPTION: This text block outlines the command-line options available for the `sync:reindex` command. The `--site_id` or its shorthand `-s` option allows specifying a particular Site ID to re-index. If this parameter is omitted, the command will re-index content across all sites.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/sync-reindex.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n    --site_id=<value>\n    -s <value>\n        Site ID. Skip this parameter to re-index content on all sites\n```\n\n----------------------------------------\n\nTITLE: Generating a Search URL from a Query - ExpressionEngine Template Tag\nDESCRIPTION: Shows how to create a search URL based on an existing encoded search query by passing the query parameter to the {exp:pro_search:url} tag. This enables dynamic construction of search URLs using stored or parsed queries in templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_14\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:url query=\"{segment_2}\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Control Panel Route in ExpressionEngine\nDESCRIPTION: Example of an additional Control Panel route class for an ExpressionEngine add-on. This code defines a new route called 'Configurations' that renders a view with variables, accessible via a specific URL pattern.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/modules.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace ExpressionengineDeveloper\\ControlPanel\\Routes;\n\nuse ExpressionEngine\\Service\\Addon\\Controllers\\Mcp\\AbstractRoute;\n\nclass Configurations extends AbstractRoute\n{\n\n    /**\n     * @var string\n     */\n    protected $cp_page_title = 'configurations';\n\n    /**\n     * @param false $id\n     * @return AbstractRoute\n     */\n    public function process($id = false)\n    {\n\n        $variables = [\n            'name' => 'Matt',\n            'color' => 'Green'\n        ];\n\n        $this->setBody('Index', $variables);\n\n        return $this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling the relationships_display_field_options Hook in PHP\nDESCRIPTION: This code demonstrates how the relationships_display_field_options hook is invoked. It allows developers to add additional filters to the entries that populate the select options available to the relationship field.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/relationships.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (ee()->extensions->active_hook('relationships_display_field_options') === TRUE)\n{\n    ee()->extensions->call(\n        'relationships_display_field_options',\n        $entries,\n        $this->field_id,\n        $this->settings\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Database Dump using mysqldump - Shell\nDESCRIPTION: The snippet demonstrates how to use the mysqldump utility to create a backup of a MySQL database. It is assumed that you have access to a MySQL server and know the credentials for a user with the appropriate permissions. The command exports the specified database to a file, which can then be compressed using tools like tar for efficient storage.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/database-backup.md#2025-04-22_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nmysqldump -u username db_name > output.sql\n```\n\n----------------------------------------\n\nTITLE: Displaying Member Roles using ExpressionEngine Tags in HTML\nDESCRIPTION: This snippet demonstrates how to use the `{exp:member:roles}` tag to display roles a member belongs to in ExpressionEngine. It includes parameters such as `member_id` and `username`. The output shows role name and primary status. By default, it shows roles for the currently logged-in user if no `member_id` is provided.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/member-roles-tags.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{exp:member:roles}\n  <p>{name} ({role_id}{if is_primary_role}, Primary Role{/if})</p>\n{/exp:member:roles}\n```\n\n----------------------------------------\n\nTITLE: Filtering Entries by ID Range (End) in ExpressionEngine\nDESCRIPTION: The `entry_id_to` parameter specifies the ending entry ID for a range display. It must be used in conjunction with the `entry_id_from` parameter. This example would stop displaying entries after ID 40.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_11\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\nentry_id_to=\"40\"\n```\n\n----------------------------------------\n\nTITLE: Basic XML Encode Usage Example in ExpressionEngine\nDESCRIPTION: Demonstrates the basic usage of the XML Encode plugin in ExpressionEngine templates. This plugin processes text within its tags, converting reserved XML characters to their corresponding entities.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/xml-encode.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{exp:xml_encode}\n    text you want processed\n{/exp:xml_encode}\n```\n\n----------------------------------------\n\nTITLE: Modifying Database Columns for ExpressionEngine Fieldtypes in PHP\nDESCRIPTION: Shows how to specify custom database fields when creating, modifying, or deleting fieldtypes, using the date fieldtype as an example.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/fieldtypes.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nfunction settings_modify_column($data)\n{\n    $fields['field_id_'.$data['field_id']] = array(\n        'type'      => 'INT',\n        'constraint'    => 10,\n        'default'   => 0\n        );\n\n    $fields['field_dt_'.$data['field_id']] = array(\n        'type'      => 'VARCHAR',\n        'constraint'    => 8\n        );\n\n    return $fields;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Sender's Name Field in ExpressionEngine\nDESCRIPTION: An HTML input field for the name of the person sending the email in ExpressionEngine. This field captures the sender's identification and should be correctly incorporated within the form layout.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"text\" name=\"name\" size=\"40\" />\n```\n\n----------------------------------------\n\nTITLE: Multi-Login Sites Configuration\nDESCRIPTION: Configuration override for enabling multi-site login functionality across different domains.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/msm/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$config['multi_login_sites'] = \"https://www.example.com/index.php|https://www.sitetwo.com/index.php\";\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache Using ExpressionEngine CLI\nDESCRIPTION: This shell script snippet provides commands to clear different caches in ExpressionEngine using the command line interface. Users can specify the type of cache to clear using the --type option with values like 'all', 'page', 'tag', or 'db'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/cache-clear.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp eecli.php cache:clear --type=all\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp eecli.php cache:clear --type=db\n```\n\n----------------------------------------\n\nTITLE: Listing Options for the backup:database Command\nDESCRIPTION: Displays the available command-line options for the `backup:database` command, including path specification (relative/absolute), filename customization, and speed control. These options allow tailoring the database backup process.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/backup-database.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--relative_path=<value>\n-p <value>\n    Path to database backup, relative to the cache folder\n\n--absolute_path=<value>\n-a <value>\n    Absolute path to the directory the database backup will be stored\n\n--file_name=<value>\n-f <value>\n    Name of sql file to be saved\n\n--speed=<value>\n-s <value>\n    Speed of database backup (between 1-10). Setting a lower speed allows for more time between database commands. Default speed is 5.\n```\n\n----------------------------------------\n\nTITLE: Conditional Links with Template Variables\nDESCRIPTION: Demonstrates how to display links conditionally based on the existence of page URIs and URLs in an ExpressionEngine setup using HTML and ExpressionEngine tags. These snippets ensure that links are only rendered if the respective page URI or URL is not empty.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_41\n\nLANGUAGE: HTML\nCODE:\n```\n{if page_uri != ''} <a href=\"{page_uri}\">View this page</a> {/if}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{if page_url != ''} <a href=\"{page_url}\">View this page</a> {/if}\n```\n\n----------------------------------------\n\nTITLE: Converting CSV to String\nDESCRIPTION: Demonstrates how to convert CSV data to a string representation using the __toString() method.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/csv.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\necho (string) $csv;\n```\n\n----------------------------------------\n\nTITLE: Setting filename_increment in ExpressionEngine\nDESCRIPTION: Configuration setting to force uploaded filenames to be unique by appending an incrementing number to duplicate filenames.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_75\n\nLANGUAGE: php\nCODE:\n```\n$config['filename_increment'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_form_settings_update Extension Hook in PHP\nDESCRIPTION: Demonstrates how the before_channel_form_settings_update extension hook is called. This hook triggers before a channel form settings object is updated, and changes made to the object will be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-form-settings.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_form_settings_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Getting URL Query Parameters\nDESCRIPTION: Example of using the request:get tag to retrieve a $_GET parameter value.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/request.md#2025-04-22_snippet_1\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:request:get name=\"my-var\"}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Partial Word Matching in Lexicon Search\nDESCRIPTION: Shows how to use partial matching when searching for words in the lexicon. This feature allows finding words that start with a specific string by appending an asterisk.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/lexicon.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFor example, use `lion` to look up the exact word, or use `lion*` to look for words that start with `lion`.\n```\n\n----------------------------------------\n\nTITLE: Channel Entries Tag with Dynamic Start for RFC3229 Support\nDESCRIPTION: Example of using the channel_entries_dynamic_start parameter in the Channel Entries tag to support RFC3229 requests, allowing for serving only new content since the last request.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/rss.md#2025-04-22_snippet_1\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{exp:channel:entries channel=\"default_site\" limit=\"10\" dynamic_start=\"yes\"}\n```\n\n----------------------------------------\n\nTITLE: Options List for make:command CLI Tool\nDESCRIPTION: Lists the available command-line options for the `make:command` tool. Options include specifying the target add-on folder (`--addon` or `-a`), the command description (`--description` or `-d`), and the command signature (`--signature` or `-s`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/make-command.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    --addon=<value>\n    -a <value>\n        Folder for third-party add-on you want to add command to\n\n    --description=<value>\n    -d <value>\n        Description of command\n\n    --signature=<value>\n    -s <value>\n        Signature for command (i.e. make:magic)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lazy Loading in Model Relationships in ExpressionEngine PHP\nDESCRIPTION: Shows how related model data is loaded on demand (lazily) when a relationship is accessed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$template = ee('Model')->get('Template')->first();\n\n$template_group = $template->TemplateGroup; // fetches the correct template group behind the scenes\n```\n\n----------------------------------------\n\nTITLE: Checking User's Primary Role ID\nDESCRIPTION: Example of testing against the primary role ID of the logged in user.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_15\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if logged_in_primary_role_id == '7'}  You're an \"Editor\"!  {/if}\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Folder Paths in ExpressionEngine PHP\nDESCRIPTION: This PHP snippet illustrates how to configure the theme folder URL and path in ExpressionEngine's config.php file. It is crucial for ensuring that CSS and JavaScript load correctly after moving the site to a new server. The parameters include the URL and file system path to the themes directory, both of which need to be updated to match the new server's configuration.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/moving.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$config['theme_folder_url'] = \"https://example.com/themes/\";\n$config['theme_folder_path'] = \"/home/user/example.com/themes/\";\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_save Hook in PHP\nDESCRIPTION: Example of how the after_channel_save hook is called in ExpressionEngine. This hook is triggered after a channel object is inserted or updated, but changes made to the object are not automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_field_bulk_delete Hook in PHP\nDESCRIPTION: Code showing how the after_channel_field_bulk_delete hook is called within ExpressionEngine. This hook is triggered after multiple channel fields are deleted in bulk, allowing for efficient batch processing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_field_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Setting the Removal URL for a FolderList Item in PHP\nDESCRIPTION: Configures the URL to be used when an item is removed from the `FolderList`. Accepts a CP/URL object or a string. Returns the `FolderList` instance (`$this`) for method chaining.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nwithRemoveUrl($url)\n```\n\n----------------------------------------\n\nTITLE: Querying Control Panel Logs by Member with ExpressionEngine Model in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve all control panel log records for a specific member using the ExpressionEngine model system. The snippet applies a filter based on member_id and fetches the matching entries. Prerequisites include an initialized ExpressionEngine environment and access to the \\u0022ee('Model')\\u0022 service. The primary input is the member_id, and the output is a collection of CpLog objects matching the filter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/cp-log.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$member_id = 1;\n\n$super_admin_logs = ee('Model')->get('CpLog')->filter('member_id', $member_id)->all();\n```\n\n----------------------------------------\n\nTITLE: Filtering Cookies by Type Parameter - ExpressionEngine Template\nDESCRIPTION: These snippets show how to set the 'type' parameter on the {exp:consent:cookies} tag to filter cookies by their designated type. You can specify a single type, multiple types separated by pipes, or use 'not' to exclude types. Add inside the tag parameters. No output is generated directly from these snippets; they're for configuration.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/consent.md#2025-04-22_snippet_16\n\nLANGUAGE: expressionengine-template\nCODE:\n```\ntype='necessary'\n```\n\nLANGUAGE: expressionengine-template\nCODE:\n```\ntype=\"performance|targeting\"\n```\n\nLANGUAGE: expressionengine-template\nCODE:\n```\ntype='not performance|targeting'\n```\n\n----------------------------------------\n\nTITLE: Creating a New ExpressionEngine Member in PHP\nDESCRIPTION: This code demonstrates the process of creating a new member in ExpressionEngine. It prepares an array (`$member_data`) with necessary member details (role, username, email, hashed password, IP, unique IDs, join date, language), creates a new Member model instance using `ee('Model')->make('Member')`, sets the data, validates the new member, and saves it to the database if valid. Requires ExpressionEngine services like `ee()->auth`, `ee('Encrypt')`, `ee()->input`, `ee()->localize`, `ee()->config`, and an `$unencrypted_password` variable.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/member.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n```php\n$password_array = ee()->auth->hash_password($unencrypted_password);\n\n$member_data = array(\n\n    'role_id'    => 6,\n    'username'   => 'bobsmith123', // unique.\n    'email'      => 'example@gmail.com',  // unique.\n    'password'   => $password_array['password'],\n    'ip_address' => ee()->input->ip_address(),\n    'unique_id'  => ee('Encrypt')->generateKey(),\n    'crypt_key'  => ee('Encrypt')->generateKey(),\n    'join_date'  => ee()->localize->now,\n    'language'   => ee()->config->item('deft_lang'),\n\n);\n\n$member = ee('Model')->make('Member');\n$member->set($member_data);\n\n// Validate and Save.\n$result = $member->validate();\n\nif ($result->isValid())\n{\n  $member->save();\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Next/Previous Entry Navigation Implementation in ExpressionEngine\nDESCRIPTION: Example showing basic implementation of next and previous entry navigation links using ExpressionEngine tags. These tags must be placed outside the main Channel Entries tag and will conditionally display content based on entry existence.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entry-linking.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:next_entry channel=\"news\"}\n    <p>Next entry: <a href=\"{path='news/article'}\">{title}</a></p>\n{/exp:channel:next_entry}\n\n{exp:channel:prev_entry channel=\"news\"}\n    <p>Previous entry: <a href=\"{path='news/article'}\">{title}</a></p>\n{/exp:channel:prev_entry}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Content for Parent Categories using {has_children}\nDESCRIPTION: Shows how to use the {has_children} conditional variable within an {exp:channel:categories} tag pair to conditionally render HTML, like a button indicating subcategories, only if the current category has child categories.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/categories.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:categories channel=\"news\" style=\"nested\" show_empty=\"no\"}\n    <a href=\"{path='channel/index'}\">{category_name}</a>\n\n    {if has_children}\n        <button\n            type=\"button\"\n            aria-haspopup=\"true\"\n        >children categories</button>\n    {/if}\n{/exp:channel:categories}\n```\n\n----------------------------------------\n\nTITLE: Enabling Disabled Extension in ExpressionEngine\nDESCRIPTION: Shows how to check if an extension is disabled and enable it using the enable() method. The extension is first retrieved by its class name before checking and updating its status.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/addon-extension.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$method = ee('Model')\n            ->get('Extension')\n            ->filter('class', 'My_extension_class_ext')\n            ->first();\n\nif ($method->enabled !== 'y') {\n    $method->enable();\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Ordinal Numbers in PHP using ExpressionEngine's Number Formatter\nDESCRIPTION: Demonstrates how to format a number as an ordinal (e.g., 1st, 2nd, 3rd) using the ordinal() method.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/number.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$ordinal = ee('Format')->make('Number', 43)->ordinal();\n// 43rd\n```\n\n----------------------------------------\n\nTITLE: Using \\'related_categories_mode\\' in Entry Queries - ExpressionEngine Template Syntax\nDESCRIPTION: Demonstrates enabling related_categories_mode to show entries in the same category as specified in the URL. Shows an example {exp:channel:entries} tag with related_categories_mode and optional custom_fields and member_data enabled for enhanced output. Input includes URL parameters for entry identification. Not compatible with Relationships, Reverse Relationships, Pagination, or Categories when enabled.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_22\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\n{exp:channel:entries related_categories_mode=\"yes\" custom_fields=\"yes\" member_data=\"yes\"}\n    <h2>{title}</h2>\n    {body}\n    <div class=\"posted\">Posted by {author} on {entry_date format='%m/%d'} at {entry_date format='%h:%i %A'}</div>\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Tree Library in PHP\nDESCRIPTION: Loads the tree library and uses it to create a tree structure by manually connecting tree nodes. The `EE_TreeNode` class is used to initialize nodes with names. Dependencies include ExpressionEngine's library loading functionality.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/tree-datastructure.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->load->library('datastructures/tree');\n```\n\nLANGUAGE: php\nCODE:\n```\n$root = new EE_TreeNode('root');\n$child1 = new EE_TreeNode('child1');\n$child2 = new EE_TreeNode('child2');\n$subchild = new EE_TreeNode('subchild');\n\n$root->add($child1);\n$root->add($child2);\n$child2->add($subchild);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Channel Entries with URL Segments\nDESCRIPTION: Example of using URL segments to dynamically filter channel entries based on URL title.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/url-segments.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:entries url_title=\"{segment_3}\"}\n  <h1>{title}</h1>\n  <p>{body}</p>\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Member Field by Short Name in PHP\nDESCRIPTION: Shows how to access a custom member field value using the field's short name.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/member-field.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$member_id = 3;  // Example member ID\n\n// Based on the member field short name being `first_name`\n$field = ee('Model')->get('MemberField')->filter('m_field_name', 'first_name')->first();\n$field_column_name = 'm_field_id_'.$field->m_field_id;\n\n$member = ee('Model')->get('Member', $member_id)->first();\necho $member->$field_column_name;\n```\n\n----------------------------------------\n\nTITLE: Basic Numbered Pagination in ExpressionEngine Channel Entries\nDESCRIPTION: Example showing how to implement numbered pagination in a channel entries tag with page numbers and navigation links\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/pagination.md#2025-04-22_snippet_0\n\nLANGUAGE: ee\nCODE:\n```\n{exp:channel:entries channel=\"news\" orderby=\"date\" sort=\"desc\" limit=\"1\" paginate=\"bottom\"}\n    <h2>{title}</h2>\n    {summary}\n    {body}\n\n    {paginate}\n        <p>Page {current_page} of {total_pages} pages {pagination_links}</p>\n    {/paginate}\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Using Forum URL in ExpressionEngine (PHP)\nDESCRIPTION: Sets the system to use the forum URL specified in forum board preferences instead of the main site URL.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_170\n\nLANGUAGE: php\nCODE:\n```\n$config['use_forum_url'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: ExpressionEngine Category Model Class Definition\nDESCRIPTION: Main class definition for the ExpressionEngine Category Model which handles category data management. The class includes properties for category management like ID, name, URL title, description, and image, along with validation rules.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/category.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass ExpressionEngine\\Model\\Category\n```\n\n----------------------------------------\n\nTITLE: Creating Minimal Cypress Test Cases\nDESCRIPTION: Demonstrates a simple Cypress test structure with the 'it' directive for logging actions. It's a foundational structure for developers to start writing their own tests.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/cypress-tests.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('test something', () => {\n    cy.log('performing the test...')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Autosave Interval in ExpressionEngine Pro (PHP)\nDESCRIPTION: Sets the `autosave_interval_seconds` configuration override in ExpressionEngine's config file (e.g., `system/user/config/config.php`). This example sets the interval to 10 seconds, recommended for ExpressionEngine Pro to prevent accidental loss of unsaved front-end edits. This value is automatically set to 10 upon Pro installation if not previously modified.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/advanced-usage/front-end/frontend.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$config['autosave_interval_seconds'] = '10'; \n```\n\n----------------------------------------\n\nTITLE: Using Grid Fields in Parent Entries\nDESCRIPTION: This code snippet provides examples for leveraging grid fields in parent entries within ExpressionEngine, including handling image fields and text content.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_23\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{parents field=\\\"relationship_field\\\"}\\n   {parents:my_grid}\\n     {parents:my_grid:my_image}\\n         Upload date: {upload_date format=\\\"%Y %m %d\\\"}\\n         URL: {url}\\n     {/parents:my_grid:my_image}\\n     Some text in the grid: {parents:my_grid:my_text}\\n   {/parents:my_grid}\\n {/parents}\n```\n\n----------------------------------------\n\nTITLE: PHP Member Model Class Declaration\nDESCRIPTION: Core Member model class definition for ExpressionEngine defining the member entity structure and relationships.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/member.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass ExpressionEngine\\Model\\Member\\Member\n```\n\n----------------------------------------\n\nTITLE: Using Composite Types for Serialized Data in ExpressionEngine Models\nDESCRIPTION: Shows how to handle serialized data in database columns using composite types. This allows for automatic serialization and deserialization when accessing model properties, making it easier to work with complex data structures.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/building-your-own.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nprotected static $_typed_columns = array(\n  'settings' => 'json'\n);\n\n$my_model->settings = array('name' => 'Bob'); // stores: {\"name\": \"Bob\"}\n$my_model->settings['name']; // 'Bob'\n```\n\n----------------------------------------\n\nTITLE: Aliasing CLI Options in ExpressionEngine (PHP)\nDESCRIPTION: Demonstrates how to define aliases for CLI options within an ExpressionEngine command class that extends `Cli`. By comma-separating option names (e.g., 'verbose,v') in the key of the `$commandOptions` array property, both the long (`--verbose`) and short (`-v`) flags can be made to trigger the same option handling logic.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/defining-input.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic $commandOptions = [\n    'verbose,v'    => 'Both --verbose and -v will have the same result',\n];\n```\n\n----------------------------------------\n\nTITLE: Checking if Path is Writable in PHP\nDESCRIPTION: Checks if the given `$path` string points to an existing file or directory and if it is writable by the current process. Returns `TRUE` if it exists and is writable, `FALSE` otherwise. Requires the path string as input.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/filesystem.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nisWritable($path)\n```\n\n----------------------------------------\n\nTITLE: Calling template_post_parse Hook in PHP\nDESCRIPTION: Shows the usage of the template_post_parse hook, which allows modification of the template after tag parsing. It takes parameters for the final template string, a boolean indicating if it's a partial template, the site ID, and current template info.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/template.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->final_template = ee()->extensions->call(\n    'template_post_parse',\n    $this->final_template,\n    $is_partial,\n    $site_id,\n    $currentTemplateInfo\n);\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_entry_update Hook in PHP\nDESCRIPTION: Code demonstrating how the before_channel_entry_update hook is called in ExpressionEngine before a channel entry is updated. The hook passes the current ChannelEntry model object, its values, and an array of modified values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-entry.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_entry_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Stripping Referrer Data in Member Profile Links (ExpressionEngine Tag)\nDESCRIPTION: Demonstrates an ExpressionEngine tag usage (`{path=\"\"}?URL=<your url>`) to create links within Member Profile Templates that strip detailed referrer information, sending only the base URL. This helps mitigate potential security risks associated with exposing sensitive URLs (like password reset links) in referrer logs of external sites.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/template-manager.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n{path=\"\"}?URL=<your url>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Member Field in PHP\nDESCRIPTION: Shows how to create a new custom member field with validation and saving functionality.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/member-field.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$new_field = ee('Model')->make('MemberField');\n$new_field->m_field_type        = 'text';\n$new_field->m_field_label       = 'My Member Field';\n$new_field->m_field_name        = 'my_member_field';\n$new_field->m_field_description = 'A custom member field example';\n$new_field->m_field_settings    = array();\n$new_field->m_field_show_fmt    = 'n';\n\n// Validate and Save.\n$result = $new_field->validate();\n\nif ($result->isValid())\n{\n  $new_field->save();\n}\n\n// The field ID is now available.\n$field_id = $new_field->m_field_id;\n```\n\n----------------------------------------\n\nTITLE: Permalink Generation in ExpressionEngine\nDESCRIPTION: Illustrates how to generate a permalink to a specific entry or a template path in ExpressionEngine. The permalink automatically incorporates the entry ID and template path if specified.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_42\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{permalink=\"channel/archives\"}\n```\n\n----------------------------------------\n\nTITLE: Indicating Deletions and Insertions with BBCode\nDESCRIPTION: Shows how to use the [del] and [ins] BBCode tags to mark text as deleted (typically rendered with strikethrough) and inserted (typically rendered underlined), respectively. Useful for showing updates or modifications.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/bbcode.md#2025-04-22_snippet_10\n\nLANGUAGE: bbcode\nCODE:\n```\nI had [del]146[/del] [ins]147[/ins] glasses of melonade.\n```\n\n----------------------------------------\n\nTITLE: Using Pre-defined Date Formatting Constants in ExpressionEngine\nDESCRIPTION: Example of using pre-defined date format constants in ExpressionEngine templates. This snippet demonstrates how to display the current time using the DATE_ATOM format.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/date-variable-formatting.md#2025-04-22_snippet_4\n\nLANGUAGE: expressionengine\nCODE:\n```\n{current_time format=\"{DATE_ATOM}\"}\n```\n\n----------------------------------------\n\nTITLE: Calling Before Save Hook in ExpressionEngine PHP\nDESCRIPTION: Extension hook called before saving (inserting or updating) a specialty template object. Changes made to the object will be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-specialty-template.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_specialty_template_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Implementing FluidField Callback in JavaScript\nDESCRIPTION: This JavaScript code snippet provides an example of a callback for the FluidField when a fieldtype is added, demonstrating how to interact with the markup of the fieldtype's publish form. This is necessary for handling Fluid field types in ExpressionEngine 4.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/v4-addon-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nFluidField.on('fieldtype_short_name', 'add', function(row) {\n  // Do something where row contains your fieldtype's publish markup\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Add-on Option in EE CLI - Bash\nDESCRIPTION: This code snippet shows the available options for the 'make:widget' command in the EE CLI, particularly how to specify the third-party add-on folder where the widget will be added. The '--addon' or '-a' flags are used to provide the add-on's directory name. No output is produced but it is expected to be supplied when executing the generator command.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/make-widget.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n    --addon=<value>\\n    -a <value>\\n        Folder for third-party add-on you want to add the widget to\\n\n```\n\n----------------------------------------\n\nTITLE: Keywords Input Field - ExpressionEngine Search\nDESCRIPTION: Example of the primary keywords search input field implementation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/search/simple.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"keywords\">Keywords:</label><br>\n<input type=\"text\" name=\"keywords\" id=\"keywords\" maxlength=\"100\" size=\"20\">\n```\n\n----------------------------------------\n\nTITLE: Locating Custom Member Profile Theme Files\nDESCRIPTION: Specifies the recommended directory path structure for storing custom Member Profile Templates within an ExpressionEngine installation. Replacing `custom_theme_name` with the actual theme name is required.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/template-manager.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nthemes/user/member/custom_theme_name/\n```\n\n----------------------------------------\n\nTITLE: Displaying Role Groups for a Member in ExpressionEngine Using HTML\nDESCRIPTION: This code snippet uses the `{exp:member:role_groups}` tag to list all role groups a member belongs to. It accepts a `member_id` to specify which member's role groups to display, defaulting to the currently logged-in user if omitted. Outputs include role group names and IDs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/member-roles-tags.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n{exp:member:role_groups}\n  <p>{role_group_name} (#{role_group_id})</p>\n{/exp:member:role_groups}\n```\n\n----------------------------------------\n\nTITLE: Example ExpressionEngine URL with Forced Query String\nDESCRIPTION: Illustrates the URL format when the 'Force URL query strings?' setting is enabled in ExpressionEngine. This format uses a question mark after index.php (even if index.php is hidden via .htaccess or server config) to pass segment information as a standard query string, which might be required by certain server configurations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/settings/debug-output.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://example.com?/channel/joe/\n```\n\n----------------------------------------\n\nTITLE: Calling before_member_update Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the before_member_update hook is called in ExpressionEngine. This hook is triggered before a member object is updated in the database, allowing modifications to be automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_member_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Site Timezone in ExpressionEngine (PHP)\nDESCRIPTION: Configures the default timezone for the site. All dates and times displayed will be localized to this timezone unless overridden by individual member preferences.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$config['default_site_timezone'] = 'America/Los_Angeles';\n```\n\n----------------------------------------\n\nTITLE: Setting Page Redirection Method in ExpressionEngine\nDESCRIPTION: Specifies the HTTP header method used for page redirection. The 'redirect' option uses Location headers, while 'refresh' uses Refresh headers (slower, but better for Windows servers).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_110\n\nLANGUAGE: php\nCODE:\n```\n$config['redirect_method'] = 'redirect';\n```\n\n----------------------------------------\n\nTITLE: Specifying Units for Relative Dates in ExpressionEngine\nDESCRIPTION: Examples of using the 'units' parameter to control which time units are calculated and displayed in relative dates. Omitting units affects how the date is displayed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/date-variable-formatting.md#2025-04-22_snippet_14\n\nLANGUAGE: expressionengine\nCODE:\n```\n{entry_date:relative units=\"weeks|days\"}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{entry_date:relative units=\"days\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Form ID Attribute in ExpressionEngine\nDESCRIPTION: The `form_id` parameter allows specifying a custom ID attribute for the generated `<form>` tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_4\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\nform_id=\"login\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Website Session Type in PHP\nDESCRIPTION: This code shows how to specify the session handling method for the front-end of an ExpressionEngine site. It uses the 'website_session_type' configuration option to set cookie-only sessions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_174\n\nLANGUAGE: php\nCODE:\n```\n$config['website_session_type'] = 'c';\n```\n\n----------------------------------------\n\nTITLE: Defining an Email Input Field in ExpressionEngine Profile Form\nDESCRIPTION: Standard HTML markup for an email input field within the `exp:member:edit_profile` form. The `name` attribute must be `email`, and the `{email}` variable displays the member's current email address.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<label for=\"email\">Email</label>\n<input type=\"email\" name=\"email\" value=\"{email}\" maxlength=\"120\" size=\"40\" />\n```\n\n----------------------------------------\n\nTITLE: Blocking Specific File Names for Upload in ExpressionEngine (PHP)\nDESCRIPTION: Adds a case-insensitive list of file names that cannot be uploaded to ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_166\n\nLANGUAGE: php\nCODE:\n```\n$config['upload_blocked_file_names'] = array(\n  'logo.png',\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Fieldtype Generator in addon.setup.php\nDESCRIPTION: Configuration setup for registering a fieldtype generator in the addon.setup.php file. Shows how to associate a generator class with a specific fieldtype using the templateGenerator key.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/template-generator.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    ...\n    'fieldtypes' => [\n        'grid' => [\n            'name' => 'Grid',\n            'templateGenerator' => 'Grid',\n            'compatibility' => 'grid'\n        ]\n    ],\n    ...\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Cypress in the Project\nDESCRIPTION: Installs Cypress and its dependencies using npm. This step is essential as Cypress is used for running integration tests within the ExpressionEngine environment. Ensure Node.js and npm are installed before running this command.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/cypress-tests.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Pro Search Documentation Structure - Markdown\nDESCRIPTION: Core documentation file for the Pro Search module explaining its features, capabilities, and integration with ExpressionEngine. Includes file header documentation and main feature list.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\n    This source file is part of the open source project\n    ExpressionEngine User Guide (https://github.com/ExpressionEngine/ExpressionEngine-User-Guide)\n\n    @link      https://expressionengine.com/\n    @copyright Copyright (c) 2003-2020, Packet Tide, LLC (https://packettide.com)\n    @license   https://expressionengine.com/license Licensed under Apache License, Version 2.0\n-->\n\n# Pro Search\n\nExpressionEngine's native `channel:entries` tag allows you to fetch and filter entries in many ways by setting its parameters. The native Search module allows for filtering by keyword, but is limited in its capabilities. Pro Search combines the two into one module and then throw in extra features, filters, and a performance boost.\n```\n\n----------------------------------------\n\nTITLE: Accessing Related Data in PHP\nDESCRIPTION: Shows how to access related model data using the relationship names defined in the metadata array. This demonstrates the property access syntax.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/relating-models.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// as declared above\n$template = $my_model->Template;\n$authors = $my_model->Authors;\n```\n\n----------------------------------------\n\nTITLE: Specifying Member by ID in Ignore List Tag - ExpressionEngine Tag Syntax\nDESCRIPTION: This snippet demonstrates setting the member_id parameter to explicitly display the ignore list for a specified user (with ID 147). This allows the template to show the ignore list for users other than the currently logged-in member. This parameter must be set as an attribute within the {exp:member:ignore_list} tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/ignore-list.md#2025-04-22_snippet_1\n\nLANGUAGE: ExpressionEngine Tag Syntax\nCODE:\n```\nmember_id=\\\"147\\\"\n```\n\n----------------------------------------\n\nTITLE: Password Input with Maximum Length Limitation\nDESCRIPTION: This snippet shows how to create a password input field with the maximum length restricted by the password_max_length global variable. This ensures password entries follow system limitations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/single-variables.md#2025-04-22_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"password\" name=\"password\" maxlength=\"{password_max_length}\" autocomplete='off' />\n```\n\n----------------------------------------\n\nTITLE: Using Pro Search Suggestions with No Results Conditional\nDESCRIPTION: Example showing how to implement Pro Search suggestions with fallback text when no suggestions are found. The code searches for suggestions for the term 'jongle' in English language with a limit of 1 result.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_29\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_search:suggestions keywords=\"jongle\" keywords:lang=\"en\" limit=\"1\"}\n Did you mean {suggestion}?\n {if no_suggestions}No suggestions found.{/if}\n{/exp:pro_search:suggestions}\n```\n\n----------------------------------------\n\nTITLE: Using Tag Pair in ExpressionEngine Template\nDESCRIPTION: This code snippet demonstrates how to use a tag pair to display the range of numerical values selected by a range slider field in ExpressionEngine. The output displays the selected range in a 'between X and Y' format using variables like '{from}' and '{to}'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/range-slider.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n{my_range_slider_field}\nbetween {from} and {to}\n{/my_range_slider_field}\n```\n\n----------------------------------------\n\nTITLE: Embedding File Fields in ExpressionEngine\nDESCRIPTION: This snippet illustrates how to work with file fields within a `grid_field` using ExpressionEngine. It includes a pair variable setup and a single variable setup, demonstrating how to access file attributes such as title, extension, upload date, and different URL versions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/grid.md#2025-04-22_snippet_1\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{grid_field}\n  {grid_field:my_image}\n      File title: {title}\n      Extension: {extension}\n      Upload date: {upload_date format=\"%Y %m %d\"}\n      URL: {url}\n      Custom med thumbnail url: {url:med}\n  {/grid_field:my_image}\n{/grid_field}\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{grid_field}\n  URL: {grid_field:my_image}\n{/grid_field}\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_insert Hook in PHP\nDESCRIPTION: Example of how the after_channel_insert hook is called in ExpressionEngine. This hook is triggered after a channel object is inserted, but changes made to the object are not automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling after_file_insert Hook in PHP\nDESCRIPTION: Shows the implementation of the after_file_insert hook in ExpressionEngine. This hook is called after a file object is inserted, but changes made here are not automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/file.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_file_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Generating the 'ExampleAction' via CLI\nDESCRIPTION: Shows the CLI interaction for generating a specific action named `ExampleAction` for the `amazing_add_on`. This command initiates the creation process.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp system/ee/eecli.php make:action\nWhat is the action name? ExampleAction\nWhat add-on is the action being added to? amazing_add_on\nAction created successfully!\n```\n\n----------------------------------------\n\nTITLE: Calling the dragAndDropField Method for EE File Picker in ExpressionEngine Using PHP\nDESCRIPTION: This PHP code illustrates invoking the dragAndDropField() method from ExpressionEngine's file_field library to generate a rendered file or image upload field. The method requires the field name, current value, allowed file directories (e.g., 'all'), and content type (e.g., 'image'). Output is an HTML string containing the full UI for file selection. This snippet depends on the ExpressionEngine CP environment and the ee() service locator.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/shared-form-view.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$file_field = ee()->file_field->dragAndDropField('file_field', $file_field, 'all', 'image');\n```\n\n----------------------------------------\n\nTITLE: Using fields->is_native Method in Pro Search\nDESCRIPTION: Determines whether a given field name is native (part of the exp_channel_titles table), returning TRUE or FALSE.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/functions.md#2025-04-22_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nif ($this->fields->is_native('field_name')) {\n    // Field is native\n}\n```\n\n----------------------------------------\n\nTITLE: Form with Group Toggle Implementation\nDESCRIPTION: Enhanced form structure implementing group toggle functionality to show/hide sections based on select field value.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/shared-form-view.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$vars['sections'] = array(\n  array(\n    array(\n      'title' => 'type',\n      'fields' => array(\n        'type' => array(\n          'type' => 'select',\n          'choices' => array(\n            'text' => lang('text'),\n            'image' => lang('image')\n          ),\n          'group_toggle' => array(\n            'text' => 'text_options',\n            'image' => 'image_options'\n          ),\n          'value' => $type\n        )\n      )\n    ),\n  ),\n  'text_options' => array(\n    'group' => 'text_options',\n    'settings' => array(\n      array(\n        'title' => 'text',\n        'fields' => array(\n          'text' => array(\n            'type' => 'text',\n            'value' => $text\n          )\n        )\n      ),\n    )\n  ),\n  'image_options' => array(\n    'group' => 'image_options',\n    'settings' => array(\n      array(\n        'title' => 'image_path',\n        'fields' => array(\n          'image_path' => array(\n            'type' => 'text',\n            'value' => $image_path\n          )\n        )\n      )\n    )\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Spelling Out Numbers in PHP using ExpressionEngine's Number Formatter\nDESCRIPTION: Shows how to spell out a number as words using the spellout() method. It supports different locales and capitalization options.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/number.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$written_check = ee('Format')->make('Number', 112358.13)->spellout();\n// one hundred twelve thousand three hundred fifty-eight point one three\n\n$written_check = ee('Format')->make('Number', 112358.13)->spellout(['capitalize' => 'ucwords']);\n// One Hundred Twelve Thousand Three Hundred Fifty-eight Point One Three\n\n$written_check = ee('Format')->make('Number', 112358.13)->spellout(['locale' => 'de_DE']);\n// ein­hundert­zwölf­tausend­drei­hundert­acht­und­fünfzig Komma eins drei\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Data Processing in an Action Class\nDESCRIPTION: This PHP code shows the implementation within the `ExampleAction` class's `process()` method. It retrieves 'fname' and 'lname' POST data using ExpressionEngine's Input Class (`ee()->input->post()`) and inserts it into a custom database table (`our_amazing_table`) using the Database Class (`ee()->db->insert()`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace ExpressionengineDeveloper\\AmazingAddOn\\Actions;\n\nuse ExpressionEngine\\Service\\Addon\\Controllers\\Action\\AbstractRoute;\n\nclass ExampleAction extends AbstractRoute\n{\n    public function process()\n    {\n        // we'll use the post() method from the core's\n        // Input Class to grab our POST data and put\n        // that in our $data array\n\n        $data = array(\n            'first_name' => ee()->input->post('fname'),\n            'last_name' => ee()->input->post('lname'),\n        );\n\n        ee()->db->insert('our_amazing_table', $data);\n\n        return true;\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Table Data - ExpressionEngine PHP\nDESCRIPTION: Populates the Table object with channel data. The data array should match the order of table columns. It relies on the previously constructed data array and uses ExpressionEngine's data management services.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/table.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$table->setData($data);\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Embedded Templates in ExpressionEngine\nDESCRIPTION: Illustrates how to pass variables to an embedded template using parameters in the embed tag. The example passes a 'dog_name' variable.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/embedding.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{embed=\"site/header\" dog_name=\"Shadow\"}\n```\n\n----------------------------------------\n\nTITLE: Running Migrations for Single Add-on - PHP\nDESCRIPTION: Commands to run migrations for a specific add-on, using the `-a` flag to specify the add-on name. It utilizes ExpressionEngine's CLI (`eecli.php`) to target a named add-on, offering precise control over migrations related to singular extensions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/migrate.md#2025-04-22_snippet_3\n\nLANGUAGE: CLI\nCODE:\n```\nphp eecli.php migrate -a my_addon\n```\n\nLANGUAGE: CLI\nCODE:\n```\nphp eecli.php migrate:addon -a my_addon\n```\n\n----------------------------------------\n\nTITLE: Managing Relationship Fields in ExpressionEngine\nDESCRIPTION: The snippet explains how to integrate relationship fields into a `grid_field` setup on ExpressionEngine. It checks for an open status and conditional logic to display counts and related entry titles, including accessing file fields from related entries with custom sizing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/grid.md#2025-04-22_snippet_2\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{grid_field}\n  {grid_field:my_relationship status=\"open\"}\n      {if grid_field:my_relationship:count == 1}<h3>Relationships ({grid_field:my_relationship:total_results})</h3>{/if}\n\n      Related entry title: {grid_field:my_relationship:title}\n      Related entry's file field, med custom image size: {grid_field:my_relationship:my_file:med wrap=\"image\"}\n\n  {/grid_field:my_relationship}\n{/grid_field}\n```\n\n----------------------------------------\n\nTITLE: Filtering Entries by Username in ExpressionEngine\nDESCRIPTION: Shows how to use the username parameter to filter channel entries by author username. It includes examples of filtering by multiple usernames and using special tokens for the current user.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_36\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nusername=\"petunia\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nusername=\"tom|dick|harry\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nusername=\"not tom|dick|harry|fred\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nusername=\"CURRENT_USER\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nusername=\"NOT_CURRENT_USER\"\n```\n\n----------------------------------------\n\nTITLE: Setting Terms of Service Requirement for ExpressionEngine Registration\nDESCRIPTION: Configures whether new members must agree to terms of service during registration. Set to 'y' to require TOS agreement or 'n' to disable this requirement.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_120\n\nLANGUAGE: php\nCODE:\n```\n$config['require_terms_of_service'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: Outputting a Single Parameter Value - ExpressionEngine Template Tag\nDESCRIPTION: This example shows how to use the single tag {exp:pro_search:param} with a get parameter to output a specific value from a query, such as 'item_size'. Suitable for accessing parameters outside form/filter/result contexts in EE templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_18\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:param get=\"item_size\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Type Acceptance for ExpressionEngine Fieldtypes in PHP\nDESCRIPTION: Illustrates how to specify which content types a fieldtype supports, with an example of supporting both channel and grid content types.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/fieldtypes.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\npublic function accepts_content_type($name)\n{\n    return ($name == 'channel' || $name == 'grid');\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Multi Select Items with a Variable Pair (ExpressionEngine)\nDESCRIPTION: This snippet shows how to use a variable pair (`{field_name}`...`{/field_name}`) to loop through each selected item in a Multi Select field. Inside the pair, the `{item}` variable outputs the label of the current item. This allows for custom formatting, like adding line breaks.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/multiselect.md#2025-04-22_snippet_1\n\nLANGUAGE: expressionengine\nCODE:\n```\n{field_name}\n    {item}<br>\n{/field_name}\n```\n\n----------------------------------------\n\nTITLE: PHP File Closing Example\nDESCRIPTION: Demonstrates incorrect and correct ways to close PHP files, recommending omitting the closing tag to prevent unwanted output.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/general.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    echo \"Here's my code!\";\n?>\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    echo \"Here's my code!\";\n\n// EOF\n```\n\n----------------------------------------\n\nTITLE: Filtering by Multiple Checkboxes Using Pro Search and Low Options - ExpressionEngine - HTML\nDESCRIPTION: Creates a search form with checkboxes for a custom field, allowing users to select multiple options, each corresponding to a value checked in the field. Makes use of the Low Options service to generate the list; selections are filtered in results with the 'contains_words' parameter for precise matches (avoiding partial matches within other words). Requires Pro Search and Low Options add-ons. Inputs are selected checkboxes; outputs are entries containing any of the options checked.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/examples.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:form query=\"{segment_3}\"}\n  {exp:low_options:service_options}\n    {options}\n      <label>\n        <input type=\"checkbox\" name=\"search:service_options[]\" value=\"{option:value}\"\n        {if pro_search_search:service_options ~ '/(^|\\|)'.option:value.'(\\||$)/'} checked{/if}>\n        {option:label}\n      </label>\n    {/options}\n  {/exp:low_options:service_options}\n  <button type=\"submit\">Go</button>\n{/exp:pro_search:form}\n```\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:results\n  query=\"{segment_3}\"\n  contains_words=\"search:service_options\"\n  channel=\"services\"\n}\n  <p>{title}: {service_options}</p>\n{/exp:pro_search:results}\n```\n\n----------------------------------------\n\nTITLE: Setting Memory for Image Manipulation in PHP\nDESCRIPTION: This snippet shows how to set the memory limit for image manipulation tasks using the Memory service in ExpressionEngine. It includes error handling for cases where the memory limit cannot be increased.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/memory.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ntry\n{\n  ee('Memory')->setMemoryForImageManipulation($file_path);\n}\ncatch (\\Exception $e)\n{\n  show_error($e->getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Hook Implementation for Navigational Changes - ExpressionEngine PHP\nDESCRIPTION: This snippet describes the implementation of a hook to modify My Account navigation in ExpressionEngine. The hook checks for any previous modifications using 'extensions->last_call' to preserve existing changes. It also utilizes 'array_merge_recursive' for merging results and loading language files for navigation text.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/myaccount.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Check for previous calls to myaccount_nav_setup hook\n$additional_nav = (ee()->extensions->last_call) ?\n    ee()->extensions->last_call :\n    array();\n\n// Load in language file for navigation wording\nee()->lang->loadfile('extension_name');\n\n// Return new navigation item merged with existing calls to hook\n// Using array_merge_recursive for a deep clone\nreturn array_merge_recursive(\n    $additional_nav,\n    array(\n        'customize_cp' => array(\n            lang('extension_myaccount_settings') => array(\n                'extension' => 'extension_name',\n                'method' => 'extension_myaccount_settings'\n            )\n        )\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Checking if Path is Directory in PHP\nDESCRIPTION: Checks if the given `$path` string points to an existing directory. Returns `TRUE` if it's a directory, `FALSE` otherwise. Requires the path string as input.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/filesystem.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nisDir($path)\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_insert Hook in PHP\nDESCRIPTION: Example of how the before_channel_insert hook is called in ExpressionEngine. This hook is triggered before a channel object is inserted, allowing modifications to be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Category Fields in ExpressionEngine\nDESCRIPTION: Illustrates how custom fields assigned to an ExpressionEngine category can be accessed within templates using their short names as variables. These variables are dynamically available based on the fields created.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/categories.md#2025-04-22_snippet_5\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{class} {extended_description} {category_name_fr} etc..\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variables to PHP Configurations\nDESCRIPTION: This snippet demonstrates how to declare environment variables in a `.env.php` file, which can be referenced in other PHP configuration files, like `config.php`, to manage database connections and URLs. The `.env.php` file should be located alongside the `system` directory and must use `#` for comments. Key variables like `DB_HOSTNAME` and `BASE_URL` are defined here.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/advanced-usage/env-support.md#2025-04-22_snippet_0\n\nLANGUAGE: ENV\nCODE:\n```\n#.env.php\\n#URLs\\nBASE_URL=http://mysite.test/\\n\\n#DATABASE SETTINGS\\nDB_HOSTNAME=db\\nDB_DATABASE=db\\nDB_USERNAME=db\\nDB_PASSWORD=db\\nDB_PORT=3306\n```\n\n----------------------------------------\n\nTITLE: Route Variables Basic Usage\nDESCRIPTION: Shows how to use route variables for template routing instead of default URL structure.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/path.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{route='group/template'}\n```\n\n----------------------------------------\n\nTITLE: Embedding a YouTube Video in the ExpressionEngine User Guide - HTML\nDESCRIPTION: This HTML snippet embeds a YouTube video demonstrating how to find where a file is used in ExpressionEngine. It utilizes an iframe inside a container div with the class 'video-wrapper' for styling and responsive layout. The iframe includes attributes for accessibility and browser support, such as 'title', 'frameborder', and fullscreen options; it displays the video referenced by its src URL. No JavaScript or external packages are required; the essential input is the YouTube video URL, and the output is an embedded video within the documentation page.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/file-manager/file-edit.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\\\"video-wrapper\\\">\\n<iframe src=\\\"https://www.youtube.com/embed/Mydsecio160?si=whTT7Vc-vqctsH2Y\\\" title=\\\"How to find out where a file is used in ExpressionEngine\\\" width=\\\"1920\\\" height=\\\"1080\\\" frameborder=\\\"0\\\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Dynamic News Template with Layout Variables\nDESCRIPTION: Expression Engine template showing how to set layout variables dynamically within a Channel Entries loop.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/layouts.md#2025-04-22_snippet_6\n\nLANGUAGE: expressionengine\nCODE:\n```\n{layout=\"site/_html-layout\" title=\"News\"}\n\n{exp:channel:entries channel=\"news\"}\n  <h2>{title}</h2>\n\n  {if total_results == 1}\n    {body}\n    {layout:set name=\"title\"}News | {title}{/layout:set}\n  {if:else}\n    {summary}\n  {/if}\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Getting Content Length\nDESCRIPTION: Outputs the length of the content in characters using the length modifier.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{excerpt:length}\n{!-- 217 --}\n```\n\n----------------------------------------\n\nTITLE: Author Profile Link with Name - HTML with EE Variables\nDESCRIPTION: This HTML example demonstrates generating a member profile link with the displayed name using the {author_id} and {name} variables, suitable for use inside the ExpressionEngine comment entries loop.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://example.com/index.php/member/{author_id}/\">{name}</a>\n```\n\n----------------------------------------\n\nTITLE: Return URL Parameter for Registration Success - ExpressionEngine Template Syntax\nDESCRIPTION: Demonstrates specifying the URL to return to after a successful registration using the return parameter in ExpressionEngine forms. The value points to a success template. This is an attribute in the registration form tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_7\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\nreturn=\"member/registration/success\"\n```\n\n----------------------------------------\n\nTITLE: Marking a FolderItem as Active in PHP\nDESCRIPTION: Marks the `FolderItem` as the currently active item in the sidebar, usually for highlighting. Returns the `FolderItem` instance (`$this`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nisActive()\n```\n\n----------------------------------------\n\nTITLE: Customizing Past Text for Relative Dates in ExpressionEngine\nDESCRIPTION: Example of customizing how past relative dates are displayed using the 'past' parameter. The %s placeholder is replaced with the relative date value.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/date-variable-formatting.md#2025-04-22_snippet_11\n\nLANGUAGE: expressionengine\nCODE:\n```\n{entry_date:relative past=\"%s in the past\"}\n```\n\n----------------------------------------\n\nTITLE: PHP Code Style Example\nDESCRIPTION: Example code snippets demonstrating required naming conventions and syntax patterns, including constant naming, comparison operators, and string variable interpolation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/checklist.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nCONSTANT_NAME\n```\n\nLANGUAGE: PHP\nCODE:\n```\nTRUE\n```\n\nLANGUAGE: PHP\nCODE:\n```\nFALSE\n```\n\nLANGUAGE: PHP\nCODE:\n```\nNULL\n```\n\nLANGUAGE: PHP\nCODE:\n```\n===\n```\n\nLANGUAGE: PHP\nCODE:\n```\n!==\n```\n\nLANGUAGE: PHP\nCODE:\n```\n{$foo}\n```\n\n----------------------------------------\n\nTITLE: Registering Add-on Services with DI Container in PHP\nDESCRIPTION: Specifies the `services` key within the `addon.setup.php` file. This associative array registers services (classes) with ExpressionEngine's Dependency Injection (DI) Container. Each key is the service alias (e.g., 'MyService'), and the value is a closure that instantiates and returns the service object, potentially injecting dependencies. This allows easy access to the service throughout the add-on via `ee('package:ServiceAlias')`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n'services' => array(\n  'MyService' => function($addon)\n  {\n    $dependency = new SupportingClass();\n    return new ServiceClass(dependency);\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing after_category_field_save Hook in PHP\nDESCRIPTION: Example of how the after_category_field_save hook is called in ExpressionEngine. This hook is triggered after a category field is saved (insert or update).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-field.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_category_field_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Generating an ExpressionEngine Action via CLI\nDESCRIPTION: This command uses the ExpressionEngine command-line interface (CLI) to initiate the creation of a new action within an existing add-on. The user will be prompted for the action name and the target add-on.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp system/ee/eecli.php make:action\n```\n\n----------------------------------------\n\nTITLE: User-Created Consent Request Conditional in ExpressionEngine\nDESCRIPTION: Example showing how to use a custom user-created consent (like Terms of Service) in an ExpressionEngine template. This allows for conditional actions based on custom consent types.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/consent.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{if consent:terms-of-service}\n  User has consented, so take some particular action\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Executing Slow ExpressionEngine Database Backup via CLI\nDESCRIPTION: Illustrates how to perform a database backup at the slowest speed setting (1) using the `--speed=1` option. This reduces the rate of database commands, potentially preventing database lockups during the backup process on busy or resource-constrained systems.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/backup-database.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp eecli.php backup:database --speed=1\n```\n\n----------------------------------------\n\nTITLE: Replacing Text in a String in PHP\nDESCRIPTION: Shows how to use the replace() method for simple and regex-based string replacements.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$str = 'A discussion about \"Wonko the Sane\"';\n$text = ee('Format')->make('Text', $str)->replace(['find' => 'about', 'replace' => 'aboot']);\n// A discussion aboot \"Wonko the Sane\"\n\n$text = ee('Format')->make('Text', $str)->replace(['find' => '/ou?/', 'replace' => 'OH', 'regex' => TRUE]);\n// A discussiOHn abOHt \"WOHnkOH the Sane\"\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Author Avatar in ExpressionEngine/HTML\nDESCRIPTION: Uses the `{if avatar}` conditional to check if the comment author has an avatar image specified. If an avatar exists, an HTML `<img>` tag is rendered using the avatar URL and dimensions (`{avatar_url}`, `{avatar_image_width}`, `{avatar_image_height}`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_32\n\nLANGUAGE: html\nCODE:\n```\n{if avatar} <img src=\"{avatar_url}\" width=\"{avatar_image_width}\" height=\"{avatar_image_height}\" alt=\"{author}'s avatar\" /> {/if}\n```\n\n----------------------------------------\n\nTITLE: Counting Field Errors in ExpressionEngine\nDESCRIPTION: Demonstrates a method to count individual field errors using the {field_errors:count} conditional tag. To implement it effectively, ensure that inline error handling has been set up properly in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/overview.md#2025-04-22_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n\n{if field_errors:count}{/if}\n\n```\n\n----------------------------------------\n\nTITLE: URL Slug Creation with :url_slug Modifier\nDESCRIPTION: Creates URL-friendly slugs from content with options for case control, stopword removal, and separator character. Useful for generating clean URLs from titles or descriptions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n{excerpt:url_slug}\n{!-- a-phrase-with-words-from-the-stopwords-list --}\n\n{excerpt:url_slug remove_stopwords='yes'}\n{!-- phrase-words-stopwords-list --}\n```\n\n----------------------------------------\n\nTITLE: Executing Migrations Using CLI - PHP\nDESCRIPTION: The `php eecli.php migrate:` command allows users to execute migrations in an ExpressionEngine environment via the CLI. Key options include `--steps` to specify the number of migrations, `--everything` to run all migrations, `--core` to execute only core migrations, and `--addon` to target specific add-ons. Inputs are command-line options and flags; outputs are the applied migrations according to the specified options.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/migrate.md#2025-04-22_snippet_0\n\nLANGUAGE: CLI\nCODE:\n```\nphp eecli.php migrate --steps=<value>\n```\n\nLANGUAGE: CLI\nCODE:\n```\nphp eecli.php migrate --everything\n```\n\nLANGUAGE: CLI\nCODE:\n```\nphp eecli.php migrate -c\n```\n\nLANGUAGE: CLI\nCODE:\n```\nphp eecli.php migrate -a <value>\n```\n\n----------------------------------------\n\nTITLE: Password Confirm Variable Output - ExpressionEngine Template Syntax\nDESCRIPTION: Conditionally outputs the password confirmation variable if a value exists. Used when repopulating form fields after validation failure.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_24\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\n{if password_confirm}{password_confirm}{/if}\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributors List for v7.5.8 in HTML\nDESCRIPTION: This HTML code generates a visual list of contributors associated with the ExpressionEngine v7.5.8 release. It employs Tailwind CSS utility classes to create a responsive grid layout, center elements, and style text and images. Contributor avatars are dynamically loaded from GitHub URLs, and each entry includes a link to the contributor's commit history.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/563996?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Bryan Nielsen</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bryannielsen\" target=\"_BLANK\">@bryannielsen</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/2423727?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Eric Swierczek</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=swierczek\" target=\"_BLANK\">@swierczek</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/13821249?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">JCOGS Design</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=jcogs-design\" target=\"_BLANK\">@jcogs-design</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/23382425?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yulya Lebed</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=Yulyaswan\" target=\"_BLANK\">@Yulyaswan</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/17011377?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">brad</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bakin1999\" target=\"_BLANK\">@bakin1999</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/1181219?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">robinsowell</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=robinsowell\" target=\"_BLANK\">@robinsowell</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Category Name in ExpressionEngine\nDESCRIPTION: Shows how to use the `{category_name}` variable inside an ExpressionEngine `{categories}` tag pair to output the name of the current category, typically within an HTML heading. This variable displays the name assigned to the category in the Control Panel.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{categories}\n    <h3>{category_name}</h3>\n{/categories}\n```\n\n----------------------------------------\n\nTITLE: HTML Link for Single Item Deletion with Confirmation Data\nDESCRIPTION: This HTML link provides the UI to delete specific content items. It uses the 'm-link' class and includes data attributes for dynamic content updates and deletion requests.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/modal.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a class=\"m-link\"\n   rel=\"modal-confirm-remove\"\n   href=\"\"\n   data-confirm=\"Content Item: <b>My Entry</b>\"\n   data-content_id=\"23\">Delete</a>\n```\n\n----------------------------------------\n\nTITLE: Defining Methods for My Account Extensions - ExpressionEngine PHP\nDESCRIPTION: This snippet provides method definitions for handling custom My Account pages and form submission. The method receives a 'member_id' and describes a two-step process where a custom method displays settings and a corresponding '_save' method handles submissions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/myaccount.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function myaccount_settings($member_id)\npublic function myaccount_settings_save($member_id)\n```\n\n----------------------------------------\n\nTITLE: Triggering Live Preview Updates with JavaScript\nDESCRIPTION: JavaScript code that triggers an update of the live preview when custom interactions occur in a fieldtype that aren't automatically detected.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/enhanced.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$(document).trigger('entry:preview');\n```\n\n----------------------------------------\n\nTITLE: Syncing Conditional Fields with ExpressionEngine CLI\nDESCRIPTION: This snippet demonstrates how to use the ExpressionEngine CLI to sync conditional fields in channel entries. It includes options for specifying a particular channel ID and enabling verbose mode output. No additional dependencies are required; it's assumed the ExpressionEngine environment is properly configured. Key parameters include channel_id, for specifying the target channel; -v for verbosity; and -x for clearing. The command outputs the result of the field synchronization process.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/sync-conditional-fields.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php sync:conditional-fields --channel_id=1 -v\n```\n\n----------------------------------------\n\nTITLE: Embedding Sub-Views with Disabled Features in ExpressionEngine\nDESCRIPTION: Shows embedding a sub-view while disabling specific features using the third parameter. Allows for fine-grained control of sub-view rendering to suit parent context. The string 'figure' disables a particular feature or markup block in the sub-view.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/view.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<p><?php $this->embed('addon_name:sub/view', array(), 'figure') ?></p>\n```\n\n----------------------------------------\n\nTITLE: Formatting the last_visit Variable in ExpressionEngine Members Field\nDESCRIPTION: This snippet demonstrates accessing and formatting the `last_visit` variable inside a Members field tag pair in ExpressionEngine. It utilizes the `format` parameter and standard date formatting codes (like `%m/%d/%Y`) to customize the date display.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/member.md#2025-04-22_snippet_3\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{members_field:last_visit format=\"%m/%d/%Y\"}\n```\n\n----------------------------------------\n\nTITLE: Displaying Radio/Select Fields in ExpressionEngine Fluid Field\nDESCRIPTION: Shows how to access the selected value of a radio button or single-select dropdown field (`my_radio`) nested within a Fluid Field (`my_fluid_field`) using the single `{content}` variable. It also demonstrates conditional logic based on the selected value.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/fluid.md#2025-04-22_snippet_12\n\nLANGUAGE: ee\nCODE:\n```\n{my_fluid_field}\n  {my_fluid_field:my_radio}\n      Value = {content}\n      {if content == 'no'}Nope!{/if}\n    {/my_fluid_field:my_radio}\n{/my_fluid_field}\n```\n\n----------------------------------------\n\nTITLE: Basic Channel Form Implementation in ExpressionEngine\nDESCRIPTION: Shows a minimal Channel Form setup with basic input fields for title and a custom field. Includes a return URL for post-submission redirect.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/examples.md#2025-04-22_snippet_0\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:channel:form channel=\"contact_form\" return=\"contact/thanks\" }\n   <input name=\"title\" type=\"text\">\n   <input name=\"my_custom_field\" type=\"text\">\n   <input type=\"submit\" value=\"Submit\">\n{/exp:channel:form}\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_field_bulk_delete Hook in PHP\nDESCRIPTION: Code showing how the before_channel_field_bulk_delete hook is called within ExpressionEngine. This hook is triggered before multiple channel fields are deleted in bulk, allowing for efficient batch processing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_field_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Calling before_category_group_delete Hook in PHP\nDESCRIPTION: Example of how the before_category_group_delete hook is called. This hook is triggered before a category group is deleted from the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-group.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_category_group_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling comment_entries_comment_format Hook in PHP\nDESCRIPTION: This snippet demonstrates how the comment_entries_comment_format hook is called to modify the formatting of individual comments.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/comment.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$comment = ee()->extensions->call('comment_entries_comment_format', $row);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Display Method for Tab Fields in PHP\nDESCRIPTION: Defines the display method for rendering tab fields on the publish page in ExpressionEngine. It takes channel and entry IDs as parameters and returns an array of settings that dictate how fields appear in a user's interface, including field type, required attributes, and default values.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/tab-files.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n    public function display($channel_id, $entry_id = ''){\n\n        $settings = [\n            //array of settings\n        ];\n        return $settings;\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Using attr_safe Modifier with HTML Meta Tag\nDESCRIPTION: Makes content safe for use in an HTML attribute by stripping HTML tags, encoding special characters, and optionally limiting content length.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"description\" content=\"{seo_descrip:attr_safe limit='150'}\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Driver in ExpressionEngine (PHP)\nDESCRIPTION: Specifies a caching driver to use. Options include file, memcached, redis, and dummy drivers. The file driver is the default and uses /system/user/cache/.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$config['cache_driver'] = 'memcached';\n```\n\n----------------------------------------\n\nTITLE: Single List Tag Filtering Using Pro Search and Tag Cloud - ExpressionEngine - HTML\nDESCRIPTION: Presents a tag cloud via the 'tag:cloud' tag, each tag shown as a checkbox. The selected tag ids are sent to the results, which lists entries that have any of the selected tags. Adding 'require_all' to the results tag requires all tags for a match. Inputs are tag checkboxes; output is entries with any/all selected tags. Dependencies: Pro Search and Tag add-ons.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/examples.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:form query=\"{segment_3}\"}\n  {exp:tag:cloud}\n    <label>\n      <input type=\"checkbox\" name=\"tag_id[]\" value=\"{tag_id}\"{if pro_search_tag_id ~ '/\\b'.tag_id.'\\b/'} checked{/if}>\n      {tag}\n    </label>\n  {/exp:tag:cloud}\n  <button type=\"submit\">Go</button>\n{/exp:pro_search:form}\n```\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:results\n  query=\"{segment_3}\"\n  limit=\"10\"\n}\n  ...\n{/exp:pro_search:results}\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Query in ExpressionEngine Template\nDESCRIPTION: Simple SELECT query to retrieve a member's screen name from the exp_members table.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/query.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{exp:query sql=\"SELECT screen_name FROM exp_members WHERE member_id = '1' \"}\n    {screen_name}\n{/exp:query}\n```\n\n----------------------------------------\n\nTITLE: Declaring Complex Data Structure in ExpressionEngine Fieldtype (PHP)\nDESCRIPTION: This code snippet shows how to declare a fieldtype as having a complex data structure in ExpressionEngine. Setting $complex_data_structure to true informs the system to handle this fieldtype differently, which is necessary for fieldtypes like Grid or Fluid field.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/enhanced.md#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic $complex_data_structure = true;\n```\n\n----------------------------------------\n\nTITLE: Reverse Range Query: Finding Values Between Two Channel Fields - ExpressionEngine - HTML\nDESCRIPTION: Provides a numeric input that searches entries where the entered value falls between two channel fields ('min_age' and 'max_age'). The 'range:min_age:max_age' input sends the number, and the Pro Search results filter for entries with that value in the interval. Input is a single number; output is entries matching the reverse range condition. Requires Pro Search add-on and proper channel field setup.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/examples.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:form query=\"{segment_3}\"}\n  <input type=\"number\" name=\"range:min_age:max_age\">\n  <button type=\"submit\">Go</button>\n{/exp:pro_search:form}\n```\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:results\n  query=\"{segment_3}\"\n  channel=\"people\"\n  limit=\"10\"\n}\n  ...\n{/exp:pro_search:results}\n```\n\n----------------------------------------\n\nTITLE: Multi-Site Channel Entries Query in ExpressionEngine\nDESCRIPTION: Demonstrates how to query channel entries from multiple sites using the site parameter with inclusion and exclusion syntax.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/msm/code.md#2025-04-22_snippet_3\n\nLANGUAGE: expressionengine\nCODE:\n```\nsite=\"siteA|siteB|siteC\"\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\nsite=\"not SiteD\"\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:channel:entries channel=\"news\" site=\"siteA|siteB|siteC\"}\n```\n\n----------------------------------------\n\nTITLE: Using Output Methods in ExpressionEngine\nDESCRIPTION: This snippet demonstrates the use of `$this->output->outln` to display formatted text in a terminal environment within ExpressionEngine. It highlights the correct and incorrect ways to handle text formatting using terminal control codes, including the importance of resetting styles.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/displaying-output.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// BAD\\n$this->output->outln('<<blink>>ALL text will blink forever.');\\n$this->output->outln('Blinking and I dont want to.');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// GOOD\\n$this->output->outln('<<blink>>This text will blink and other will not.<<reset>>');\\n$this->output->outln('Not blinking and thats good.');\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Format in ExpressionEngine (PHP)\nDESCRIPTION: Sets the default time format to either 12-hour or 24-hour format.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_161\n\nLANGUAGE: php\nCODE:\n```\n$config['time_format'] = '24';\n```\n\n----------------------------------------\n\nTITLE: Formatting the join_date Variable in ExpressionEngine Members Field\nDESCRIPTION: This snippet illustrates how to access and format the `join_date` variable within a Members field tag pair in ExpressionEngine. It uses the `format` parameter with standard date formatting codes (e.g., `%m/%d/%Y`) to control the output string.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/member.md#2025-04-22_snippet_2\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{members_field:join_date format=\"%m/%d/%Y\"}\n```\n\n----------------------------------------\n\nTITLE: Registering an Object Instance with the Dependency Container in PHP\nDESCRIPTION: Explains how to add an existing object instance (e.g., `$member`) directly to the dependency container under a specific name ('Member') using the `register()` method. Subsequent calls to `make('Member')` will return this exact instance.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/architecture.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$di->register('Member', $member);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination for Models in ExpressionEngine PHP\nDESCRIPTION: A complete function that implements pagination for template models by calculating the correct offset based on page number.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nfunction getTemplatesForPage($n)\n{\n  $per_page = 10;\n\n  $start = $per_page * ($n - 1); // this ensures page 1 starts at 0\n\n  return ee('Model')\n    ->get('Template')\n    ->offset($start)\n    ->limit($per_page)\n    ->all();\n}\n```\n\n----------------------------------------\n\nTITLE: Escaping HTML Attributes in PHP\nDESCRIPTION: Shows how to use the attributeEscape() method to safely escape strings for use in HTML attributes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$attr = ee('Format')->make('Text', 'A discussion about \"Wonko the Sane\"')->attributeEscape();\n// A discussion about &quot;Wonko the Sane&quot;\n```\n\n----------------------------------------\n\nTITLE: Filtering Models Based on Relationships in ExpressionEngine PHP\nDESCRIPTION: Shows how to filter models based on related model properties by prefixing the filter field with the relationship name.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n->get('Template')->with('TemplateGroup')->filter('TemplateGroup.group_name', 'blog')->all()\n```\n\n----------------------------------------\n\nTITLE: News Index Template\nDESCRIPTION: Template for displaying recent news entries with search functionality in the sidebar.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/layouts.md#2025-04-22_snippet_9\n\nLANGUAGE: expressionengine\nCODE:\n```\n{layout=\"news/_layout\" title=\"Recent\"}\n\n{exp:channel:entries channel=\"news\" limit=\"30\" dynamic=\"no\"}\n  <h2><a href=\"{url_title_path='news/article'}\">{title}</a></h2>\n  {summary}\n{/exp:channel:entries}\n\n{layout:set name=\"sidebar\"}\n  {embed=\"news/_embed-search\"}\n{/layout:set}\n```\n\n----------------------------------------\n\nTITLE: Calling after_member_save Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the after_member_save hook is called in ExpressionEngine. This hook is triggered after a member object is inserted or updated in the database. Changes made to the object will not be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_member_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Search Embed Template\nDESCRIPTION: Template for rendering a search form in the sidebar using Expression Engine's Simple Search Form.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/layouts.md#2025-04-22_snippet_12\n\nLANGUAGE: expressionengine\nCODE:\n```\n{layout=\"news/_sidebar-layout\" header=\"Search\"}\n\n{exp:search:simple_form channel=\"news\"}\n  <input type=\"search\" name=\"keywords\" maxlength=\"100\">\n  <input type=\"submit\" value=\"Submit\">\n{/exp:search:simple_form}\n```\n\n----------------------------------------\n\nTITLE: Basic Forgot Password Form Tag Usage in ExpressionEngine\nDESCRIPTION: This snippet shows the basic structure of the `exp:member:forgot_password_form` tag pair in ExpressionEngine. It includes a simple HTML form with an email input field and a submit button, intended to capture the user's email address for password reset.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/forgot-password.md#2025-04-22_snippet_0\n\nLANGUAGE: ee\nCODE:\n```\n{exp:member:forgot_password_form}\n\n        <label>Your Email Address</label><br />\n        <input type=\"email\" name=\"email\" value=\"\" maxlength=\"120\" size=\"40\" />\n\n\t\t<input type=\"submit\" name=\"submit\" value=\"Submit\" />\n\n{/exp:member:forgot_password_form}\n```\n\n----------------------------------------\n\nTITLE: Basic Comment Expiration Date Field - HTML\nDESCRIPTION: Basic input field for setting an entry's comment expiration date.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/inputs.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<p>Comment Expiration Date <br>\n<input type=\"text\" name=\"comment_expiration_date\" value=\"{comment_expiration_date}\" maxlength=\"23\" size=\"25\" />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Basic Entry Date Field Implementation - HTML\nDESCRIPTION: Basic input field for setting an entry's publication date.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/inputs.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>Date <br> <input type=\"text\" name=\"entry_date\" value=\"{entry_date}\" maxlength=\"23\" size=\"25\"></p>\n```\n\n----------------------------------------\n\nTITLE: Initializing Forgot Username Form - ExpressionEngine Tag - ExpressionEngine Tag\nDESCRIPTION: Shows a minimal implementation of the {exp:member:forgot_username_form} template tag, including basic HTML fields for email input and a submit button. This tag enables creating a form that allows users to request their forgotten username. Dependencies include ExpressionEngine membership module and configuration of mail sending.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/forgot-username.md#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine Tag\nCODE:\n```\n{exp:member:forgot_username_form}\n\n        <label>Your Email Address</label><br />\n        <input type=\"email\" name=\"email\" value=\"\" maxlength=\"120\" size=\"40\" />\n\n\t\t<input type=\"submit\" name=\"submit\" value=\"Submit\" />\n\n{/exp:member:forgot_username_form}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Collections in ExpressionEngine\nDESCRIPTION: Demonstrates how to interact with a Collection using standard array syntax for iteration and adding new items. Collections maintain numeric indices starting at 0.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/collection.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nforeach ($collection as $person)\n{\n  echo $person['age']; // or $person->age if your collection contains objects\n}\n\n$collection[] = array('name' => 'Savannah', 27);\n```\n\n----------------------------------------\n\nTITLE: Configuring Word Separator for URL Titles in PHP\nDESCRIPTION: This code demonstrates how to specify the character used to replace spaces when auto-generating URL titles. It uses the 'word_separator' configuration option to set a dash as the separator.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_176\n\nLANGUAGE: php\nCODE:\n```\n$config['word_separator'] = 'dash';\n```\n\n----------------------------------------\n\nTITLE: Creating a Category Dropdown Menu with Navigation\nDESCRIPTION: Provides HTML and ExpressionEngine code to generate a dropdown (<select>) menu populated with categories from a specified channel using {exp:channel:categories}. Includes JavaScript to navigate to the selected category's path on change.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/categories.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<form name=\"catmenu\" action=\"\">\n    <select name=\"selcat\" onchange=\"location=document.catmenu.selcat.options[document.catmenu.selcat.selectedIndex].value;\">\n        <option value=\"\">--Select Category--</option>\n        {exp:channel:categories channel=\"yourchannel\" style=\"linear\"}\n            <option value=\"{path='channel'}\">{category_name}</option>\n        {/exp:channel:categories}\n    </select>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating an Edit Profile Link for Members in ExpressionEngine HTML\nDESCRIPTION: Facilitates the creation of a profile editing link for logged-in users, utilizing the ExpressionEngine path variable. This link can be integrated into user dashboards or personal sections allowing quick access to edit profiles.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/profile-templates.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{path='member/profile'}\">Edit your profile</a>\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Username Length in ExpressionEngine (PHP)\nDESCRIPTION: Specifies the minimum number of characters allowed for member usernames.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_164\n\nLANGUAGE: php\nCODE:\n```\n$config['un_min_len'] = '5';\n```\n\n----------------------------------------\n\nTITLE: Calling the 'cp_member_login' Hook in PHP\nDESCRIPTION: This snippet demonstrates the invocation of the 'cp_member_login' extension hook in ExpressionEngine. This hook executes after a control panel session is successfully instantiated, allowing for additional processing on CP logins. It receives a `$hook_data` object containing the member's session ID and CP access permissions. The hook returns void. Execution can be stopped if the hook sets the 'end_script' property to TRUE.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/login.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('cp_member_login', $this->_hook_data());\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Field Errors Directly in ExpressionEngine (PHP)\nDESCRIPTION: Demonstrates the preferred method for retrieving errors associated with a single field (e.g., 'username'). The `getErrors()` method is called directly on the result object (`$result`), passing the field name as the argument. It returns an array of error messages specifically for that field, or an empty array if the field had no errors.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/validation.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// or better:\n$username_errors = $result->getErrors('username');\n```\n\n----------------------------------------\n\nTITLE: Displaying File Fields (Single Variable) in ExpressionEngine Fluid Field\nDESCRIPTION: Shows how to use the single variable syntax for a file field (`my_image`) nested within a Fluid Field (`my_fluid_field`). It demonstrates outputting the file URL directly (`{content}`), generating a link (`{content wrap=\"link\"}`), and accessing specific image manipulation URLs (`{content:med}`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/fluid.md#2025-04-22_snippet_10\n\nLANGUAGE: ee\nCODE:\n```\n{my_fluid_field}\n  {my_fluid_field:my_image}\n    link: {content wrap=\"link\"}\n    URL: {content}\n    URL 'med' image thumb: {content:med}\n  {/my_fluid_field:my_image}\n{/my_fluid_field}\n```\n\n----------------------------------------\n\nTITLE: Applying ID Attribute to Member Search Form - ExpressionEngine Template\nDESCRIPTION: Demonstrates setting an ID attribute for the member search form using the form_id parameter. Requires template parser support. The specified ID should be unique within the page and matches HTML form requirements.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_3\n\nLANGUAGE: ExpressionEngine Template Markup\nCODE:\n```\nform_id=\"login\"\n```\n\n----------------------------------------\n\nTITLE: Encoding Content for JSON Output\nDESCRIPTION: Encodes content for safe inclusion in JSON data structures, handling special characters and Unicode properly.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n\"headline\": {title:json},\n// \"headline\": \"Greatest Crash in Wall Street\\u2019s History\",\n```\n\n----------------------------------------\n\nTITLE: Checking and Fetching Preview Data with LivePreview Service in PHP\nDESCRIPTION: This snippet demonstrates how to check for and fetch preview data using the LivePreview service in ExpressionEngine. It checks if entry data is available and retrieves it if present.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/live-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif (ee('LivePreview')->hasEntryData())\n{\n  $data = ee('LivePreview')->getEntryData();\n  $entry_id = $data['entry_id'];\n  $my_data[$entry_id] = $data;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Options for the make:tag Command in Shell\nDESCRIPTION: This snippet lists the command-line options available for the `make:tag` ExpressionEngine CLI command. The `--addon` or `-a` option specifies the folder name of the third-party add-on where the new tag should be created.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/make-tag.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n    --addon=<value>\n    -a <value>\n        Folder for third-party add-on you want to add tag to\n```\n\n----------------------------------------\n\nTITLE: Setting image_library_path in ExpressionEngine\nDESCRIPTION: Configuration to set the server path to the ImageMagick or NetPBM library when using these as image resize protocols.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_87\n\nLANGUAGE: php\nCODE:\n```\n$config['image_library_path'] = '/usr/bin/';\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Domain in ExpressionEngine\nDESCRIPTION: Specifies the domain that the cookie is available to. Setting it to a domain with a leading dot makes cookies available across all subdomains, which is useful for multi-subdomain installations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$config['cookie_domain'] = '.example.com';\n```\n\n----------------------------------------\n\nTITLE: Updating Add-on Version in ExpressionEngine PHP\nDESCRIPTION: The `update` method manages upgrades by comparing versions and applying necessary updates, such as database migrations. It triggers when an update from a version prior to 2.0 is detected. This maintains consistency and data integrity across add-on updates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/add-on-update-file.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\npublic function update($current = '')\n{\n    // Runs migrations\n    parent::update($current);\n\n    // only run the update if the user is currently running a version less than 2.0\n    if (version_compare($current, '2.0', '<'))\n    {\n        // Do your update code here\n        // update database\n        // notify mission control of the update\n    }\n\n\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Pagination Base URL with \\'paginate_base\\' Parameter - ExpressionEngine Template Syntax\nDESCRIPTION: Overrides the default pagination base URL by specifying a template group and template using the paginate_base parameter. Used in conjunction with channel entries pagination; accepts a string such as \\\"site/index\\\". Particularly useful when pagination links need to be redirected.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_19\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\npaginate_base=\"site/index\"\n```\n\n----------------------------------------\n\nTITLE: Setting Avatar Paths in ExpressionEngine (PHP)\nDESCRIPTION: Configures server path and URL for the avatar directory.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$config['avatar_path'] = '/path/images/avatars/';\n$config['avatar_url'] = 'https://example.com/images/avatars';\n```\n\n----------------------------------------\n\nTITLE: Conditional Output Based on Consent Grant Status - ExpressionEngine Template\nDESCRIPTION: This snippet demonstrates how to use the {consent_granted} boolean variable in a conditional to display content if the user has granted consent. Typically used within a consent loop to take action or show messaging based on user consent.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/consent.md#2025-04-22_snippet_10\n\nLANGUAGE: expressionengine-template\nCODE:\n```\n{if consent_granted}\n    Set that cookie!\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Enabling PHP in Templates in ExpressionEngine\nDESCRIPTION: PHP configuration setting to enable the use of PHP code within ExpressionEngine templates at a system-wide level.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$config['allow_php'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_layout_save Hook in PHP\nDESCRIPTION: Example of how the before_channel_layout_save hook is called before saving a channel layout (insert or update). It passes the current ChannelLayout object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-layout.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_layout_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Implementing the Password Input Field in ExpressionEngine Login Form\nDESCRIPTION: Provides the required HTML structure for the password input field (`<input type=\"password\" name=\"password\">`) within the ExpressionEngine login form. This field is mandatory for login.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/login.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"password\">Password</label>\n<input type=\"password\" name=\"password\" value=\"\" maxlength=\"32\" size=\"25\" />\n```\n\n----------------------------------------\n\nTITLE: Calling after_template_update Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the after_template_update hook is called in ExpressionEngine. This hook is triggered after a template is updated, with changes to the object not being saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_template_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid-specific Display Method in PHP\nDESCRIPTION: Demonstrates how to implement a Grid-specific display method for a custom fieldtype. This method is called when the field is rendered in a Grid field cell.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/fieldtypes.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Only called when being rendered in a Grid field cell:\npublic function grid_display_field($data)\n{\n    // Display code for Grid cell\n}\n```\n\n----------------------------------------\n\nTITLE: Re-indexing a Specific Site using `--site_id` with `sync:reindex` (Shell)\nDESCRIPTION: This command runs the ExpressionEngine `sync:reindex` task using `eecli.php`, specifically targeting Site ID 1 using the long-form option `--site_id=1`. This ensures only the searchable content for the specified site (Site ID 1) is updated.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/sync-reindex.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nphp eecli.php sync:reindex --site_id=1\n```\n\n----------------------------------------\n\nTITLE: Calendar Rows Variable in ExpressionEngine\nDESCRIPTION: Generates date rows for a calendar, using nested entries to display linked titles and authors within each date.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/calendar.md#2025-04-22_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n{calendar_rows}\n    {row_start}<tr>{/row_start}\n        <td class='{switch}' align='center'>\n            <a href=\"{day_path='channel/index'}\">{day_number}</a>\n            {entries}\n            <div>\n                <a href=\"{title_permalink='channel/index'}\">{title}</a> <a href=\"{profile_path='member/profile'}\">{author}</a>\n            </div>\n            {/entries}\n        </td>\n    {row_end}</tr>{/row_end}\n{/calendar_rows}\n```\n\n----------------------------------------\n\nTITLE: Checking Total Site Comments\nDESCRIPTION: Example of testing against the total number of comments on the entire site.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_32\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if total_comments < 1}  What??  No one has commented on my site at all?!?!  {/if}\n```\n\n----------------------------------------\n\nTITLE: Calling after_status_save Extension Hook in PHP\nDESCRIPTION: Example of how the after_status_save hook is called. This hook fires after a status object is inserted or updated, but changes won't be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/status.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_status_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Disabling CSRF Protection in ExpressionEngine (PHP)\nDESCRIPTION: Controls whether Cross-Site Request Forgery protection is enabled. CSRF protection prevents automated scripts from submitting forms, which helps reduce spam.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$config['disable_csrf_protection'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: CAPTCHA for Member Registration Forms\nDESCRIPTION: Modified CAPTCHA implementation specifically for member registration forms, without the captcha_word variable.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/security/captchas.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{if captcha}\n    <p>Please enter the word you see in the image below:</p>\n    <p>{captcha}<br />\n    <input type=\"text\" name=\"captcha\" value=\"\" size=\"20\" maxlength=\"20\" style=\"width:140px;\" /></p>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Configuring Toggle Fields in ExpressionEngine\nDESCRIPTION: This snippet shows the setup for toggle fields inside a `grid_field` in ExpressionEngine, using conditional statements to check and respond to toggle states within templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/grid.md#2025-04-22_snippet_3\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{grid_field}\n  {if grid_field:my_toggle}YES there is a toggle value!{/if}\n{/grid_field}\n```\n\n----------------------------------------\n\nTITLE: Calling Before Channel Field Group Bulk Delete Hook in PHP\nDESCRIPTION: Example of how the before_channel_field_group_bulk_delete hook is called. Introduced in version 4.3.0, this hook runs before multiple ChannelFieldGroups are deleted in bulk.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field-group.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_field_group_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Calling after_member_delete Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the after_member_delete hook is called in ExpressionEngine. This hook is triggered after a member object is deleted from the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_member_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling update_comment_additional Hook in PHP\nDESCRIPTION: This snippet shows how the update_comment_additional hook is called after a comment is updated. It passes the comment ID and an array of comment data.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/comment.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('update_comment_additional', $comment_id, $data);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Dependency via make() in PHP\nDESCRIPTION: Shows how to retrieve a registered object or the result of a factory from a specific `InjectionContainer` instance using the `make()` method. The argument is the name under which the dependency was registered.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/architecture.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$di->make('Something');\n```\n\n----------------------------------------\n\nTITLE: URL Title Path in ExpressionEngine\nDESCRIPTION: Defines a URL path to a template using the entry's 'url title', facilitating entry-specific linkage.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/calendar.md#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n{url_title_path='channel/archives'}\n```\n\n----------------------------------------\n\nTITLE: Limiting Characters in a String in PHP\nDESCRIPTION: Demonstrates the limitChars() method for truncating a string to a specified number of characters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$text = ee('Format')->make('Text', '<h1>A <em>brief</em> discussion about \"Wonko the Sane\"</h1>')->limitChars(['characters' => 20]);\n// A brief discussion a&#8230;\n```\n\n----------------------------------------\n\nTITLE: Debugging RSS Feed in ExpressionEngine\nDESCRIPTION: Example of enabling debug mode for the RSS feed to display tag errors and help troubleshoot issues with empty feeds.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/rss.md#2025-04-22_snippet_2\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{exp:rss:feed channel=\"default_site\" debug=\"yes\"}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Display Content Without Forum Topic - markup\nDESCRIPTION: Utilizes the {if not_forum_topic} conditional to display content when no forum topic is associated with a channel entry. Requires the Discussion Forum Module to be installed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_50\n\nLANGUAGE: markup\nCODE:\n```\n{if not_forum_topic} content {/if}\n{if not_forum_topic} There is no forum discussion available. {/if}\n```\n\n----------------------------------------\n\nTITLE: Accessing CSRF Token in JavaScript\nDESCRIPTION: Shows how to properly access the CSRF token in JavaScript for ExpressionEngine control panel forms. The token should be accessed dynamically and not cached due to its ephemeral nature.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/security.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nEE.CSRF_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Certificate Path for Simple Commerce\nDESCRIPTION: Sets the server path to the public certificate file used for PayPal encrypted transactions. Should be stored in a secure location above web root.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_130\n\nLANGUAGE: php\nCODE:\n```\n$config['sc_public_certificate'] = \"/path/to/public_certificate.pem\";\n```\n\n----------------------------------------\n\nTITLE: Calling before_template_bulk_delete Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the before_template_bulk_delete hook is called in ExpressionEngine. This hook is triggered before multiple templates are deleted in bulk, providing an array of IDs to be deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_template_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Invoking CLI Before Handle Extension Hook in ExpressionEngine - PHP\nDESCRIPTION: This code snippet covers the invocation of the 'cli_before_handle' extension hook, allowing extensions to intercept and modify the CLI command instance before it is executed. It passes the CLI context, the class name, and the command instance, returning a potentially modified command. Dependencies: ExpressionEngine extension management and pre-existing CLI command context. Key parameters include the CLI handler, the command class name, and the command instance. The output is the potentially modified command instance; processing may halt if 'end_script' is set. Should be used immediately before executing CLI commands to allow late modification and pre-processing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/cli.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$command = ee()->extensions->call('cli_before_handle', $this, $commandClass, $command);\nif (ee()->extensions->end_script === true) {\n    $this->complete('');\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Path Variable Usage in ExpressionEngine\nDESCRIPTION: Shows the basic syntax for using path variables to create template links. The path variable automatically includes the site URL when rendered.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/path.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{path='template_group/template'}\n```\n\n----------------------------------------\n\nTITLE: Setting Removal Confirmation Message for FolderItem in PHP\nDESCRIPTION: Sets a custom confirmation message (string) that will be displayed to the user before removing this `FolderItem`. Returns the `FolderItem` instance (`$this`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nwithRemoveConfirmation($msg)\n```\n\n----------------------------------------\n\nTITLE: Saving Models in ExpressionEngine\nDESCRIPTION: Shows how to save a new or updated model by calling the save() method after making changes to properties.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$template->template_notes = 'A great note!';\n$template->save();\n```\n\n----------------------------------------\n\nTITLE: Encoding JSON with options in PHP\nDESCRIPTION: Encodes data into JSON format with customizable options. Dependencies include PHP JSON extension. Key parameters include 'double_encode', 'enclose with quotes', and JSON bitmask constants. Outputs a Formatter object.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n### `json(\\$options = [])`\n\nEncode as JSON\n\n| Parameter | Type     | Description                                                                                                                                                                                                                                                                                |\n| --------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| \\$options | `Array`  | (bool) **double_encode** (default: TRUE) - whether to double encode already-encoded entities <br> (bool) **enclose with quotes** (default: TRUE) - whether or not to return the JSON enclosed in double quotes <br> (string) **options** Pipe-delimited list of PHP JSON bitmask constants |\n| Returns   | `Object` | A Formatter object\n```\n\n----------------------------------------\n\nTITLE: Sample Email Requesting Server Upgrade for ExpressionEngine (Markdown)\nDESCRIPTION: Provides a template email written in Markdown for users to send to their hosting provider or server administrator. The email requests an upgrade to a server environment suitable for ExpressionEngine, specifically asking for PHP 8+, MySQL 5.6+, and mentioning PHP-FPM and Percona as preferred options for better performance and security.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/requirements.md#2025-04-22_snippet_0\n\nLANGUAGE: md\nCODE:\n```\n```md\nHey there!\n\nI'm running the PHP/MySQL-based content management system ExpressionEngine,\nand would like to make sure it's speedy, secure, and making the most efficient\nuse of the resources available on my server.\n\nCould I speak with someone about moving to an environment that has PHP 8+\nand MySQL 5.6+? If they are available, I'd love to use PHP-FPM to implement PHP,\nand Percona as a drop-in replacement for MySQL, too.\n\nThanks!\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Encryption Keys with OpenSSL\nDESCRIPTION: Command line example showing how to generate a secure random string using OpenSSL for use as an encryption key in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/error-messages.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand 128 | openssl dgst -sha1\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Entries Display Options in ExpressionEngine\nDESCRIPTION: Shows various parameters for configuring how channel entries are displayed in ExpressionEngine, including options for current week display, expired entries, future entries, and pages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_29\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nshow_current_week=\"yes\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nshow_expired=\"no\" show_expired=\"yes\" show_expired=\"only\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nshow_future_entries=\"yes\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nshow_pages=\"only\" show_pages=\"no\"\n```\n\n----------------------------------------\n\nTITLE: News Section Layout Template\nDESCRIPTION: Template defining the structure of news pages with main content and sidebar areas.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/layouts.md#2025-04-22_snippet_8\n\nLANGUAGE: expressionengine\nCODE:\n```\n{layout=\"site/_html-layout\"}\n{layout:set name=\"title\"}News{if layout:title != ''} | {layout:title}{/if}{/layout:set}\n\n{layout:set name=\"css\"}\n  <link rel=\"stylesheet\" href=\"/assets/news.css\" type=\"text/css\" />\n{/layout:set}\n\n<div id=\"wrapper\">\n  <div id=\"main\">\n    {layout:contents}\n  </div>\n\n  <aside>\n    {layout:sidebar}\n  </aside>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calling before_category_delete Hook in PHP\nDESCRIPTION: This code illustrates how the before_category_delete hook is called. It passes the current Category model object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_category_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Entry Title Display with Query Optimization\nDESCRIPTION: Example showing how to display recent entry titles while disabling unnecessary query features for improved performance.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/optimization/caching.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n{exp:channel:entries orderby=\"date\" sort=\"desc\" limit=\"10\" disable=\"categories|custom_fields|member_data|pagination\"}\n    <h1 href=\"{title_permalink='channel/comments'}\">{title}</h1>\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Limiting Number of Entries in ExpressionEngine\nDESCRIPTION: The `limit` parameter restricts the maximum number of entries displayed by the `{exp:channel:entries}` tag. If not specified, it defaults to 100. When used with pagination, it sets the number of entries per page.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_14\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\nlimit=\"12\"\n```\n\n----------------------------------------\n\nTITLE: Member Password Input Markup - HTML\nDESCRIPTION: Displays a password input field with an associated label, used to capture the new member's password. The password is validated both for required entry and specific policies via ExpressionEngine's backend.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<label>Your New Password</label><br />\n<input type=\"password\" name=\"password\" value=\"\" maxlength=\"50\" size=\"40\" />\n```\n\n----------------------------------------\n\nTITLE: Converting Characters to HTML Entities in PHP\nDESCRIPTION: Demonstrates the convertToEntities() method for converting applicable characters into HTML entities.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$text = ee('Format')->make('Text', '\"über\" crème brûlée')->convertToEntities();\n// &quot;&uuml;ber&quot; cr&egrave;me br&ucirc;l&eacute;e\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Model in Relationship Definition\nDESCRIPTION: Shows how to specify a custom model name when the relationship name differs from the model name. This example relates to the Member model with a relationship named Authors.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/relating-models.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected static $_relationships = array(\n  'Authors' => array(\n    'type' => 'hasMany',\n    'model' => 'ee:Member'\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Message Upload Path in ExpressionEngine\nDESCRIPTION: Sets the server path to the directory where private message attachments will be stored.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_105\n\nLANGUAGE: php\nCODE:\n```\n$config['prv_msg_upload_path'] = '/path/images/pm_attachments/';\n```\n\n----------------------------------------\n\nTITLE: Using fields->is_rel Method in Pro Search\nDESCRIPTION: Determines whether a given field name is a Relationships field, returning TRUE or FALSE.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/functions.md#2025-04-22_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nif ($this->fields->is_rel('field_name')) {\n    // Field is a Relationships field\n}\n```\n\n----------------------------------------\n\nTITLE: Options Tag Examples with HTML Integration\nDESCRIPTION: Demonstrates using the Options tag to create HTML lists and select dropdowns\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/tags.md#2025-04-22_snippet_5\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_variables:options var=\"my_multi_var\"}\n  {if count == 1}<ul>{/if}\n    <li{if active == \"y\"} class=\"active\"{/if}>{my_multi_var:data_label}</li>\n  {if count == total_results}</ul>{/if}\n{/exp:pro_variables:options}\n\n<select name=\"options\">\n  {exp:pro_variables:options var=\"my_site:my_multi_var\"}\n    <option value=\"{my_multi_var:data}\"{selected}>{my_multi_var:data_label}</option>\n  {/exp:pro_variables:options}\n</select>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Template List for ExpressionEngine Generator (PHP)\nDESCRIPTION: Illustrates how to define the list of templates a generator can produce using the protected `$templates` property within a generator class (which extends `AbstractTemplateGenerator`). This example shows a simple associative array where keys are the template names ('index', 'entry') and values are their descriptions, which will be saved as template notes. These names must correspond to stub files.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/template-generator.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected $templates = [\n    'index' => 'Listing for all entries',\n    'entry' => 'Entry detail page',\n];\n```\n\n----------------------------------------\n\nTITLE: Customizing Code Block Markup in ExpressionEngine (PHP)\nDESCRIPTION: Sets custom markup to wrap [code] blocks. These settings work together to wrap the standard <pre><code>...</code></pre> with custom markup.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$config['code_block_pre'] = '<div class=\"codeblock\">';\n$config['code_block_post'] = '</div>';\n```\n\n----------------------------------------\n\nTITLE: Implementing after_category_field_update Hook in PHP\nDESCRIPTION: Example of how the after_category_field_update hook is called in ExpressionEngine. This hook is triggered after a category field is updated and includes modified values array.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-field.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_category_field_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Adding MIME Types to Whitelist in ExpressionEngine\nDESCRIPTION: Adds additional MIME types to the system whitelist using an array.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_95\n\nLANGUAGE: php\nCODE:\n```\n$config['mime_whitelist_additions'] = array(\n  'image/vnd.adobe.photoshop'\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Relationship Features in ExpressionEngine Templates\nDESCRIPTION: This snippet illustrates how to improve template performance in ExpressionEngine by disabling certain relationship features using the `disable` parameter with the `exp:channel:entries` tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_5\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{exp:channel:entries channel=\\\"parentChannel\\\" disable=\\\"relationship_custom_fields|relationship_categories\\\"}\\n  {relationship_field}\\n      {relationship_field:title}\\n  {/relationship_field}\\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Display Settings in PHP\nDESCRIPTION: Configuration for including seconds in time display within the ExpressionEngine interface.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_89\n\nLANGUAGE: php\nCODE:\n```\n$config['include_seconds'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Add-on Specific Consent Check in ExpressionEngine\nDESCRIPTION: This snippet shows how to conditionally execute an add-on tag based on whether the user has consented to a specific add-on consent. The example uses a hypothetical 'marketing' add-on.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/consent.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{if consent:marketing:consent-name}\n  {exp:marketing:action}\n    Do Something\n  {/exp:marketing:action}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Basic Preload Replacement Syntax in ExpressionEngine\nDESCRIPTION: The basic syntax for creating a preload replacement variable in ExpressionEngine. This allows you to define a variable name and its replacement text that will be processed before any template tags are parsed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/preload-replacement.md#2025-04-22_snippet_0\n\nLANGUAGE: expressionengine\nCODE:\n```\n{preload_replace:variable_name=\"replacement\"}\n```\n\n----------------------------------------\n\nTITLE: Enabling Plugin Typography Formatting in PHP\nDESCRIPTION: Specifies the `plugin.typography` key within the `addon.setup.php` file. Setting this boolean key to `TRUE` makes the add-on's plugin available as a text formatting option for compatible Channel Fields. The default value is `FALSE`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n'plugin.typography' => TRUE\n```\n\n----------------------------------------\n\nTITLE: Navigating to Cookie Settings in ExpressionEngine Control Panel\nDESCRIPTION: Specifies the navigation path within the ExpressionEngine Control Panel administrative interface to access the Cookie Settings configuration page. Users navigate through the 'Settings' menu and then select 'Cookie Settings'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/settings/cookie-settings.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSettings > Cookie Settings\n```\n\n----------------------------------------\n\nTITLE: Calling the relationship_entries_tagdata Hook in PHP\nDESCRIPTION: This snippet shows how the relationship_entries_tagdata hook is called. It allows modification of the tagdata for the relationship tag pair before anything else is parsed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/relationships.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$tagdata = $this->extensions->call('relationship_entries_tagdata', $tagdata, $row);\nif ($this->extensions->end_script === TRUE) return $tagdata;\n```\n\n----------------------------------------\n\nTITLE: Echoing Variables in PHP - Standard vs Alternative Syntax\nDESCRIPTION: Demonstrates the standard PHP echo statement compared to the alternative short tag syntax for outputting variables in view files.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/view-php-syntax.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php echo $variable; ?>\n```\n\nLANGUAGE: PHP\nCODE:\n```\n<?=$variable?>\n```\n\n----------------------------------------\n\nTITLE: Defining ExpressionEngine Template Routes Syntax\nDESCRIPTION: Illustrates the syntax for defining Template Routes in ExpressionEngine. Routes map URL segments to templates and can include static segments, variables, and validation rules (like `:rule` or `:rule0|rule1[arg]`). An example shows how to use regular expressions (`regex`) within a route segment, particularly useful when needing optional segments or avoiding strict matching on static parts.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/template-manager.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/segment/{variable}/{variable:rule}/{variable:rule0|rule1[arg]}\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n/{seg1:regex[(add)]}/{url_title:alpha_dash}\n```\n\n----------------------------------------\n\nTITLE: Formatting Date Fields in ExpressionEngine Fluid Field\nDESCRIPTION: Shows how to display a date field (`my_date`) nested within a Fluid Field (`my_fluid_field`) and format the output using the `format` parameter within the `{content}` tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/fluid.md#2025-04-22_snippet_7\n\nLANGUAGE: ee\nCODE:\n```\n{my_fluid_field}\n  {my_fluid_field:my_date}\n    {content format=\"%F %d %Y\"}\n  {/my_fluid_field:my_date}\n{/my_fluid_field}\n```\n\n----------------------------------------\n\nTITLE: String Replacement Optimization\nDESCRIPTION: Demonstrates efficient string replacement by checking for existence before replacement.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/performance.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nforeach ($items as $name => $value)\n{\n    $str = str_replace($name, $value, $str);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nforeach ($items as $name => $value)\n{\n    if (strpos($str, $name) !== FALSE)\n    {\n        $str = str_replace($name, $value, $str);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Request Headers\nDESCRIPTION: Example of using the request:request_header tag to retrieve a specific HTTP request header value.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/request.md#2025-04-22_snippet_7\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:request:request_header name=\"accept\"}\n```\n\n----------------------------------------\n\nTITLE: Calling after_category_save Hook in PHP\nDESCRIPTION: This snippet demonstrates the call to the after_category_save hook. It passes the current Category model object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_category_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Disabling Front-end Edit Links using ExpressionEngine Comments\nDESCRIPTION: Prevents ExpressionEngine Pro from automatically inserting front-end edit links for any template tags (like `{title}`) wrapped within `{!-- disable frontedit --}` and `{!-- //disable frontedit --}` ExpressionEngine comments. This is useful for selectively disabling editing on specific parts of a template or entire layout templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/advanced-usage/front-end/frontend.md#2025-04-22_snippet_2\n\nLANGUAGE: ee\nCODE:\n```\n<h1>{!-- disable frontedit --}{title}{!-- //disable frontedit --}</h1>\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Form Errors in ExpressionEngine\nDESCRIPTION: The `inline_errors` parameter determines how form validation errors are displayed. Set to \"yes\" to enable inline error reporting next to the fields, rather than redirecting to an error template. Used in conjunction with form validation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_9\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\ninline_errors=\"yes\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Search Query with Quoted Terms in ExpressionEngine PHP\nDESCRIPTION: Shows advanced search capabilities including treating quoted strings as single terms and excluding words with minus signs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// find titles that contain \"hello world\", but not dog\n->search('title', '\"hello world\" -dog');\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_layout_update Hook in PHP\nDESCRIPTION: Example of how the after_channel_layout_update hook is called after updating a channel layout. It passes the current ChannelLayout object, its values, and modified values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-layout.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_layout_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Example HTML Entity Conversion\nDESCRIPTION: Shows the result (`&lt;h1&gt;`) of converting the `<h1>` tag using the 'Convert to HTML entities' setting for HTML formatting in comments. The tag is displayed as text rather than being rendered.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/channels.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n&lt;h1&gt;\n```\n\n----------------------------------------\n\nTITLE: Implementing CAPTCHA in ExpressionEngine Forms\nDESCRIPTION: Standard CAPTCHA implementation code for comment forms, contact forms, and channel entry forms. Includes conditional display logic and image display.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/security/captchas.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{if captcha}\n    <p>Please enter the word you see in the image below:</p>\n    <p>{captcha}<br />\n    <input type=\"text\" name=\"captcha\" value=\"{captcha_word}\" size=\"20\" maxlength=\"20\" style=\"width:140px;\" /></p>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Converting Image to WEBP Format in ExpressionEngine - Markdown\nDESCRIPTION: This Markdown/ExpressionEngine snippet demonstrates the use of the :webp template tag modifier to convert an image field (news_image) to WEBP format. Optionally, other modifiers like :resize can also be applied after :webp. Dependencies: ExpressionEngine CMS, configured image field. Parameters include width, height, quality, maintain_ratio, and master_dim. The output is a processed image in WEBP format, ready for use in templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/file.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n    {news_image:webp}\n```\n\n----------------------------------------\n\nTITLE: Requesting Interactive User Input in ExpressionEngine CLI (PHP)\nDESCRIPTION: Shows how to use the `$this->ask()` method within an ExpressionEngine CLI command (extending the `Cli` class) to prompt the user for input during execution. The method accepts a string containing the question and returns the user's typed response.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/defining-input.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$name = $this->ask(\"What's your name?\");\n```\n\n----------------------------------------\n\nTITLE: Calling After Channel Field Group Bulk Delete Hook in PHP\nDESCRIPTION: Example of how the after_channel_field_group_bulk_delete hook is called. Introduced in version 4.3.0, this hook runs after multiple ChannelFieldGroups have been deleted in bulk.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field-group.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_field_group_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Calling insert_comment_insert_array Hook in PHP\nDESCRIPTION: This snippet shows how the insert_comment_insert_array hook is called to modify the data array for a new comment before insertion.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/comment.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$data = ee()->extensions->call('insert_comment_insert_array', $data);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Calling After Channel Field Group Insert Hook in PHP\nDESCRIPTION: Example of how the after_channel_field_group_insert hook is called. This hook runs after a ChannelFieldGroup is inserted, allowing for post-insertion processing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field-group.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_field_group_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Accessing Built-in Member Fields in PHP\nDESCRIPTION: Demonstrates how to access built-in member fields directly from a member model instance.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/member-field.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$member_id = 3;  // Example member ID\n\n$member = ee('Model')->get('Member', $member_id)->first();\necho $member->screen_name;\n```\n\n----------------------------------------\n\nTITLE: Modifying Custom Field Data in ExpressionEngine\nDESCRIPTION: This snippet illustrates how to modify custom field data using an extension hook in ExpressionEngine. The `custom_field_modify_data` function is invoked to process and alter field data before executing a specified method on a fieldtype object. Dependencies include the ExpressionEngine framework, and the method utilizes parameters such as the fieldtype object (`\\$ft`), the method name (`\\$method`), and the data to be modified (`\\$data`). The expected output is the modified data which conforms to the input method and fieldtype constraints.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/api/channel-fields.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\n    $data = ee()->extensions->universal_call('custom_field_modify_data', $obj, $method, $data);\n```\n\n----------------------------------------\n\nTITLE: Fetch and Format Channel Data - ExpressionEngine PHP\nDESCRIPTION: This code retrieves channels for the current site and structures them into an array for table display. The array format aligns with table columns and includes URL generation for editing and settings links using ExpressionEngine's URL service.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/table.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$channels = ee('Model')->get('Channel')\n  ->filter('site_id', ee()->config->item('site_id'))\n  ->all();\n$data = array();\nforeach ($channels as $channel)\n{\n  $edit_url = ee('CP/URL', 'channels/edit/'.$channel->getId());\n  $data[] = array(\n    $channel->getId(),\n    array(\n      'content' => $channel->channel_title,\n      'href' => $edit_url\n    ),\n    $channel->channel_name,\n    array('toolbar_items' => array(\n      'edit' => array(\n        'href' => $edit_url,\n        'title' => lang('edit')\n      ),\n      'settings' => array(\n        'href' => ee('CP/URL', 'channels/settings/'.$channel->getId()),\n        'title' => lang('settings')\n      )\n    )),\n    array(\n      'name' => 'channels[]',\n      'value' => $channel->getId(),\n      'data'  => array(\n        'confirm' => lang('channel') . ': <b>' . htmlentities($channel->channel_title, ENT_QUOTES) . '</b>'\n      )\n    )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Template File Saving in ExpressionEngine\nDESCRIPTION: PHP configuration settings that control whether templates and global variables are saved as files on the filesystem in addition to being saved in the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Controls whether template and partial files should be saved on filesystem\n$config['save_tmpl_files'] = 'y';\n// Controls whether Global variables should be saved as files (requires `save_tmpl_files` also being set to `y`)\n$config['save_tmpl_globals'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Checking Overall Validation Success in ExpressionEngine with PHP\nDESCRIPTION: Illustrates how to check if the entire validation process passed successfully using the `isValid()` method on the validation result object (`$result`). This method returns `true` if all rules passed for all fields, and `false` otherwise.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/validation.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$result->isValid(); // true | false\n```\n\n----------------------------------------\n\nTITLE: Using fields->sql Method in Pro Search\nDESCRIPTION: Returns a SQL where-clause based on a table column name and parameter value, using Field Search syntax rules.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/functions.md#2025-04-22_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n$sql_where = $this->fields->sql('field_id_5', '=foo|bar');\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Buttons in ExpressionEngine\nDESCRIPTION: This snippet demonstrates how to add custom buttons to a form using the CP/Form library. It shows how to create a button, set its type, text, and working state.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/cp-form/buttons.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$form = ee('CP/Form');\n$button = $form->getButton('button_1');\n$button->setType('submit')->setText('Submit Button')\n    ->setWorking('Submitting...');\n```\n\n----------------------------------------\n\nTITLE: Checkbox Column Definition for Bulk Deletion in Table: PHP\nDESCRIPTION: This PHP snippet describes how to configure a checkbox column within a table for selecting items to delete. It leverages Lang functions for i18n and HTML encoding for safety.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/modal.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$columns[] = array(\n  'name' => 'content_ids[]',\n  'value' => $content->getId(),\n  'data'  => array(\n    'confirm' => lang('content') . ': <b>' . htmlentities($content->title, ENT_QUOTES, 'UTF-8') . '</b>'\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Form Field Sections in ExpressionEngine Using PHP\nDESCRIPTION: This PHP snippet sets up a nested associative array defining form sections and fields for an ExpressionEngine shared form. Each section consists of input controls like text fields, textareas, radios, and selects, using specific 'type' keys as defined by the documentation. Field properties control appearance, validation, selection choices, and dynamic default values drawn from the ExpressionEngine configuration. This array is intended for use with ExpressionEngine's CP form rendering engine, and supports customizable fieldsets and dependency injection by referencing variables such as $site and method calls like ee()->localize->timezone_menu().\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/shared-form-view.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$vars['sections'] = array(\n  array(\n    array(\n      'title' => 'site_name',\n      'fields' => array(\n        'site_name' => array(\n          'type' => 'text',\n          'value' => $site->site_label,\n          'required' => TRUE\n        )\n      )\n    ),\n    array(\n      'title' => 'site_short_name',\n      'desc' => 'site_short_name_desc',\n      'fields' => array(\n        'site_short_name' => array(\n          'type' => 'text',\n          'value' => $site->site_name,\n          'required' => TRUE\n        )\n      )\n    ),\n    array(\n      'title' => 'site_online',\n      'desc' => 'site_online_desc',\n      'fields' => array(\n        'is_system_on' => array(\n          'type' => 'inline_radio',\n          'choices' => array(\n            'y' => 'online',\n            'n' => 'offline'\n          )\n        )\n      )\n    ),\n    array(\n      'title' => 'site_offline_description',\n      'fields' => array(\n        'site_offline_description' => array(\n          'type' => 'textarea',\n          'rows' => 6,\n          'attrs' => 'cols=\"100\"', // Textarea rows and cols can be added here as well\n          'value' => $site->site_label,\n          'required' => TRUE\n        )\n      )\n    ),\n  ),\n  'date_time_settings' => array(\n    array(\n      'title' => 'timezone',\n      'desc' => 'timezone_desc',\n      'fields' => array(\n        'default_site_timezone' => array(\n          'type' => 'html',\n          'content' => ee()->localize->timezone_menu(\n            set_value('default_site_timezone') ?: ee()->config->item('default_site_timezone')\n          )\n        )\n      )\n    ),\n    array(\n      'title' => 'date_time_fmt',\n      'desc' => 'date_time_fmt_desc',\n      'fields' => array(\n        'date_format' => array(\n          'type' => 'select',\n          'choices' => array(\n            '%n/%j/%y' => 'mm/dd/yy',\n            '%j-%n-%y' => 'dd-mm-yy',\n            '%Y-%m-%d' => 'yyyy-mm-dd'\n          )\n        ),\n        'time_format' => array(\n          'type' => 'select',\n          'choices' => array(\n            '24' => lang('24_hour'),\n            '12' => lang('12_hour')\n          )\n        )\n      )\n    ),\n    array(\n      'title' => 'include_seconds',\n      'desc' => 'include_seconds_desc',\n      'fields' => array(\n        'include_seconds' => array('type' => 'yes_no')\n      )\n    )\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Main Forum Table Rows Template Hook Implementation\nDESCRIPTION: Extension hook for modifying the forum table rows template before parsing. Allows customization of how forum topics are displayed in the main forum table.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/forum.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$table_rows = ee()->extensions->universal_call('main_forum_table_rows_template', $this, $table_rows, $row, $markers, $read_topics);\nif (ee()->extensions->end_script === TRUE) return $table_rows;\n```\n\n----------------------------------------\n\nTITLE: Defining a Password Input Field in ExpressionEngine Profile Form\nDESCRIPTION: Standard HTML markup for the new password input field within the `exp:member:edit_profile` form. The `name` attribute must be `password`. This field is required when changing the password.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<label>Your New Password</label><br />\n<input type=\"password\" name=\"password\" value=\"\" maxlength=\"50\" size=\"40\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Password Confirmation Field in ExpressionEngine Profile Form\nDESCRIPTION: Standard HTML markup for the password confirmation input field. The `name` attribute must be `password_confirm`. This field is required and must match the `password` field if a new password is being set.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<label>Confirm New Password</label><br />\n<input type=\"password\" name=\"password_confirm\" value=\"\" maxlength=\"50\" size=\"40\" />\n```\n\n----------------------------------------\n\nTITLE: Converting Accented Characters to ASCII in PHP\nDESCRIPTION: Demonstrates how to use the accentsToAscii() method to convert accented characters to their ASCII equivalents.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$written_check = ee('Format')->make('Text', 'über crème brûlée')->accentsToAscii();\n// uber creme brulee\n```\n\n----------------------------------------\n\nTITLE: HTML Input Field with Placeholder Example\nDESCRIPTION: Shows an example of an HTML `<input>` tag demonstrating how the 'URL Scheme Placeholder' setting might render in a form. It uses the `placeholder` attribute to display \"https://\" as a visual cue within the field before the user enters text. The inline `style` attribute sets the width of the input field to 50%.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/url.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input placeholder=\"https://\" style=\"width:50%\">\n```\n\n----------------------------------------\n\nTITLE: Specifying Add-On Generation Options in Bash (ExpressionEngine CLI)\nDESCRIPTION: This Bash snippet lists the available option flags for the 'make:addon' CLI command in ExpressionEngine. Each flag is described, showing both the long-form (e.g., --version) and abbreviated (e.g., -v) variants. No external dependencies other than the ExpressionEngine CLI are required. Expected input values include add-on metadata details, and the listed options should be passed to the CLI tool to configure the generated add-on files.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/make-addon.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n    --version=<value>\\n    -v <value>\\n        Version of the add-on\\n\\n    --description=<value>\\n    -d <value>\\n        Description of the add-on\\n\\n    --author=<value>\\n    -a <value>\\n        Author of the add-on\\n\\n    --author-url=<value>\\n    -u <value>\\n        Author url of the add-on\n```\n\n----------------------------------------\n\nTITLE: Setting Result Offset in Model Queries in ExpressionEngine PHP\nDESCRIPTION: Demonstrates using the offset() method to specify the starting point of model selection, useful for pagination.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$page_two = ee('Model')->get('Template')->offset(10)->limit(10)->all();\n```\n\n----------------------------------------\n\nTITLE: Field Override Syntax for Moblog Emails\nDESCRIPTION: Examples of how to override the default field into which content is placed in Moblog emails, including format specifications.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{field:entry_body}food_images{/field:entry_body}\n\n<field:entry_body>Food Images</field:entry_body>\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Pattern Comparison - Incorrect vs Correct Usage\nDESCRIPTION: Demonstrates when to avoid PCRE functions in favor of simpler string operations for better performance.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/performance.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$str = preg_replace('/foo/', 'bar', $str);\n$arr = preg_split('|', $str);\n$arr = preg_split('|', $str, -1, PREG_SPLIT_NO_EMPTY);\n```\n\nLANGUAGE: php\nCODE:\n```\n$str = str_replace('foo', 'bar', $str);\n$arr = explode('|', $str);\n$arr = explode('|', trim($str, '|'));\n```\n\n----------------------------------------\n\nTITLE: Calling Before Site Insert Hook - PHP\nDESCRIPTION: Extension hook called before a site object is inserted into the database. Changes made to the object will be automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/site.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_site_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Handling No Results Condition in Search\nDESCRIPTION: Examples showing different ways to handle scenarios where no search results are found, including displaying a message, redirecting to another template, or showing a 404 page.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/search/results.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{if no_results}  <p>There are no entries available.</p>  {/if}\n```\n\nLANGUAGE: html\nCODE:\n```\n{if no_results} {redirect=\"channel/noresult\"} {/if}\n```\n\nLANGUAGE: html\nCODE:\n```\n{if no_results} {redirect=\"404\"} {/if}\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic for Selectable Items in ExpressionEngine Templates\nDESCRIPTION: This example demonstrates using conditional logic in ExpressionEngine templates to evaluate selected items by value or label. This emphasizes best practices for maintainability by recommending conditional statements based on item values.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/selectable-buttons.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n{if field_name == 'Two'}Yep!{/if}\n{if field_name:value == 2}Yep!{/if}\n{if field_name:label == 'Two'}Yep!{/if}\n```\n\n----------------------------------------\n\nTITLE: Generating Encryption Keys with PHP on Windows\nDESCRIPTION: Windows-specific PHP command line example showing how to generate a secure random string for use as an encryption key in ExpressionEngine when PHP is not in the system path.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/error-messages.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nC:\\PHP7\\php.exe -r 'echo sha1(uniqid(random_int(-PHP_INT_MAX, PHP_INT_MAX), TRUE));echo \"\\r\";'\n```\n\n----------------------------------------\n\nTITLE: Whitespace Removal with :trim Modifier\nDESCRIPTION: Removes whitespace or specified characters from the beginning and end of a string. Takes an optional characters parameter to specify which characters to trim.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n{if layout:header_image:trim}\n    <style>\n    .main-header-and-search-form {\n        background-image: url('{layout:header_image:trim}');\n    }\n    </style>\n{/if}\n\n{hello:trim characters='Hdle'}\n{!-- o Wor --}\n```\n\n----------------------------------------\n\nTITLE: Running Update Command via CLI - PHP\nDESCRIPTION: This example shows how to invoke the ExpressionEngine update routine with verbose output using PHP's CLI. The command 'php eecli.php update --verbose' should be run from the terminal within the ExpressionEngine project root. Required dependencies: PHP installed, proper permissions, and the 'eecli.php' script available. The '--verbose' flag increases output detail. Input consists of any permitted command-line options, and output is printed to the shell. Avoid using the '-y' flag unless automation of all confirmations is desired.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/update.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nphp eecli.php update --verbose\n```\n\n----------------------------------------\n\nTITLE: Calling sessions_end Extension Hook in PHP\nDESCRIPTION: This snippet demonstrates how the sessions_end hook is called in ExpressionEngine. It allows modification of user session/member data and additional login methods.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/session.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->extensions->call('sessions_end', $this);\nif ($this->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Rendering a Prefixed View using the View Service in PHP\nDESCRIPTION: Shows how to render an add-on-specific view file (`myview`) using the View service (`ee('View')`). The `make()` method is called with the view name prefixed by the add-on's name (`addonname:`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/architecture.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nee('View')->make('addonname:myview');\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Service with Hidden Dependencies in PHP\nDESCRIPTION: Shows retrieving the 'Session' service via `make()`. The underlying dependency on 'Database', which is resolved internally by the 'Session' factory, remains hidden from the caller, simplifying the usage.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/architecture.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$di->make('Session'); // no mention of a database\n```\n\n----------------------------------------\n\nTITLE: Moderating Flagged Content with ExpressionEngine Spam Service (PHP)\nDESCRIPTION: This PHP snippet shows the use of the ExpressionEngine Spam service's `moderate` method to store and manage content identified as spam. The method records the relevant callback information for false positive review and correction by administrators. You need to provide the file path, class name, callback method name, additional data array, and the original text as parameters; it relies on the Spam Module for full functionality.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/spam.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee('Spam')->moderate($file, $class, $method, $data, $text)\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers with Ordinal Suffixes\nDESCRIPTION: Formats a number with its appropriate ordinal suffix (like 1st, 2nd, 3rd) with support for different locales.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n{rank:ordinal}\n{!-- 42nd --}\n\n{rank:ordinal locale='es_ES'}\n{!-- 42.º --}\n```\n\n----------------------------------------\n\nTITLE: Preparing Text for Form Fields in PHP\nDESCRIPTION: Shows how to use the formPrep() method to prepare content for use in form fields.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$value = ee('Format')->make('Text', 'A discussion about \"Wonko the Sane\"')->formPrep();\n// A discussion about &quot;Wonko the Sane&quot;\n```\n\n----------------------------------------\n\nTITLE: Restricting Template Access to Member Roles in ExpressionEngine Model in PHP\nDESCRIPTION: This example demonstrates how to assign specific member roles to a template, thus restricting its access within ExpressionEngine. It fetches the template object, assigns role models using a query by ID, performs validation, and saves the configuration if valid. This snippet assumes ExpressionEngine\\'s Role models are available and the template ID and role IDs are correctly specified.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/template.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n// Get the template object.\\n$template = ee('Model')->get('Template')->filter('template_id', 6)->first();\\n\\n// Assign the Role Models.\\n$template->Roles = ee('Model')->get('Role', array(5))->all();\\n\\n// Validate and Save the new template.\\n$result = $template->validate();\\n\\nif ($result->isValid())\\n{\\n  $template->save();\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Route Variables with Segment Parameters\nDESCRIPTION: Demonstrates using route variables with defined segment parameters for dynamic URL generation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/path.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n{route='channel/archives' year='2009' month='june'}\n```\n\n----------------------------------------\n\nTITLE: Multiple Required Fields Using Array Notation in ExpressionEngine Forms\nDESCRIPTION: Example of implementing multiple required fields using array notation in an ExpressionEngine contact form.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_4\n\nLANGUAGE: ee\nCODE:\n```\nAge: <input type=\"text\" name=\"required[]\" size=\"3\" maxlength=\"3\" /><br /> <br />\nBio: <textarea name=\"required[]\" rows=\"5\" cols=\"40\"></textarea>\n```\n\n----------------------------------------\n\nTITLE: Displaying Total Search Results Count in ExpressionEngine\nDESCRIPTION: Tags for displaying the total number of results found during a search. Shows both the single tag and tag pair approaches.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/search/results.md#2025-04-22_snippet_4\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:search:total_results}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:search:total_results}\n    {total_results}\n{/exp:search:total_results}\n```\n\n----------------------------------------\n\nTITLE: Creating Abbreviations with BBCode\nDESCRIPTION: Shows how to define an abbreviation using the [abbr] BBCode tag, providing the full term as an attribute. This renders as an HTML <abbr> tag with a title attribute.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/bbcode.md#2025-04-22_snippet_13\n\nLANGUAGE: bbcode\nCODE:\n```\n[abbr=\"Cascading Style Sheets\"]CSS[/abbr]\n```\n\nLANGUAGE: html\nCODE:\n```\n<abbr title=\"Cascading Style Sheets\">CSS</abbr>\n```\n\n----------------------------------------\n\nTITLE: Displaying Checkbox Values Using a Single Variable in ExpressionEngine Templates\nDESCRIPTION: Shows how to output checkbox field values as a comma-separated list using a single variable in ExpressionEngine templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/checkboxes.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{field_name} {!-- One,Two,Three --}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Search Parameters with pro_search_post_search Hook\nDESCRIPTION: Overall search parameters can be altered post-execution using this hook. The code facilitates changes to search criteria, returning a modified parameter array, all handled within ExpressionEngine's template and extension system.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/hooks.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$params = ee()->extensions->call('pro_search_post_search', $params);\nif (ee()->extensions->end_script === TRUE) return ee()->TMPL->tagdata;\n```\n\n----------------------------------------\n\nTITLE: Creating a CSRF Exempt Action via CLI\nDESCRIPTION: This command uses the ExpressionEngine CLI to create a new action with CSRF exemption enabled from the start. The `--csrf_exempt` or `-c` flag modifies the generated migration and potentially the database entry if used with `--install`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nphp system/ee/eecli.php make:action --csrf_exempt\n```\n\n----------------------------------------\n\nTITLE: Using Contains Words Parameter in ExpressionEngine\nDESCRIPTION: Example showing how to use the contains_words parameter to force full term matching in search fields.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/filters.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncontains_words=\"search:field_name\"\n```\n\n----------------------------------------\n\nTITLE: Testing for MFA Enabled Status\nDESCRIPTION: Demonstrates how to check if Multi-Factor Authentication is enabled for a user.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_30\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if !mfa_enabled}Enable multi-factor authentication for more security{/if}\n```\n\n----------------------------------------\n\nTITLE: Checking if Path is Readable in PHP\nDESCRIPTION: Checks if the given `$path` string points to an existing file or directory and if it is readable by the current process. Returns `TRUE` if it exists and is readable, `FALSE` otherwise. Requires the path string as input.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/filesystem.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nisReadable($path)\n```\n\n----------------------------------------\n\nTITLE: Category Model Properties with Validation Rules\nDESCRIPTION: Property definitions for the Category model including validation rules. Properties include cat_id, site_id, group_id, parent_id, cat_name, cat_url_title, cat_description, cat_image, and cat_order with their respective validation rules.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/category.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ncat_id\nsite_id\ngroup_id\nparent_id => validateParentCategory\ncat_name => required, noHtml, xss\ncat_url_title => required, alphaDash, unique[group_id]\ncat_description => xss\ncat_image\ncat_order => isNaturalNoZero\n```\n\n----------------------------------------\n\nTITLE: Creating Email Input Field - HTML - HTML\nDESCRIPTION: Provides standard HTML input markup for collecting the user's email address. Field is mandatory for submission and integrates with the ExpressionEngine form for authentication recovery.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/forgot-username.md#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<label for=\"email\">Email</label>\n<input type=\"email\" name=\"email\" value=\"\" maxlength=\"120\" size=\"40\" />\n```\n\n----------------------------------------\n\nTITLE: ROT13 Encryption with :rot13 Modifier\nDESCRIPTION: Performs a ROT13 substitution cypher on the content, commonly used for hiding spoilers or sensitive information in a reversible way.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"spoiler\" data-secret=\"{spoiler:attr_safe}\">{content:rot13}</span>\n{!-- <span class=\"spoiler\" data-secret=\"He was dead the whole time!\">Ur jnf qrnq gur jubyr gvzr!</span> --}\n```\n\n----------------------------------------\n\nTITLE: Implementing replace_tag_catchall() for Google Maps Fieldtype\nDESCRIPTION: Creates a catch-all function for handling any custom tag modifiers. This allows for flexibility in implementing additional template functionality for the fieldtype.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/example.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction replace_tag_catchall($file_info, $params = array(), $tagdata = FALSE, $modifier = FALSE)\n```\n\n----------------------------------------\n\nTITLE: Example URL for Channel RSS Feed\nDESCRIPTION: An example of a full URL pointing to the RSS feed template for a specific channel. This is used in the 'RSS feed' setting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/channels.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n<https://example.com/channel/rss_2.0>\n```\n\n----------------------------------------\n\nTITLE: Implementing the 'Auto Login' Checkbox in ExpressionEngine\nDESCRIPTION: Shows the HTML for the 'auto_login' checkbox. If checked (value='1'), ExpressionEngine will attempt to automatically log the user in on subsequent visits using cookies. Requires 'cookies only' session preference and should ideally be wrapped in the `{if auto_login}` conditional.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/login.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<input class=\"checkbox\" type=\"checkbox\" name=\"auto_login\" value=\"1\"> Auto-login on future visits\n```\n\n----------------------------------------\n\nTITLE: Defining Category URL Indicator in ExpressionEngine\nDESCRIPTION: Sets the word used in URLs to indicate that the following segment is a category URL title. Must not conflict with existing template group or template names.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_121\n\nLANGUAGE: php\nCODE:\n```\n$config['reserved_category_word'] = 'category';\n```\n\n----------------------------------------\n\nTITLE: Fieldset Definition for Shared Form View in PHP\nDESCRIPTION: Defines a fieldset for use with the Shared Form View, including GridInput rendering.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/table.md#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\narray(\n  'title' => 'constrain_or_crop',\n  'desc' => 'constrain_or_crop_desc',\n  'wide' => TRUE,\n  'grid' => TRUE,\n  'fields' => array(\n    'image_manipulations' => array(\n      'type' => 'html',\n      'content' => ee('View')->make('ee:_shared/table')->render($sm_grid->viewData())\n    )\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Toolbar Items to ExpressionEngine Add-on Settings\nDESCRIPTION: Code snippet showing how to add custom toolbar items to an ExpressionEngine add-on settings page. The toolbar provides quick links to different sections of the add-on by defining an array of items with href links and title attributes that determine which icon to display.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/modules.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$header['toolbar_items'] = array(\n    'settings' => array(\n        'href'  => ee('CP/URL','addons/settings/amazing_add_on'),\n        'title' => 'settings'\n    ),\n    'user ' => array(\n        'href'  => ee('CP/URL','addons/settings/amazing_add_on/user_settings'),\n        'title' => 'Users'\n    ),\n    'export ' => array(\n        'href'  => ee('CP/URL','addons/settings/amazing_add_on/export'),\n        'title' => 'Export Data'\n    )\n);\n\nee()->view->header = $header;\n```\n\n----------------------------------------\n\nTITLE: Future Entries Select Field - ExpressionEngine Search\nDESCRIPTION: Dropdown select implementation for including future entries in search results.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/search/simple.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"field_show_future_entries\">Include Future Entries?</label>\n<select name=\"show_future_entries\" id=\"field_show_future_entries\">\n    <option value=\"no\">No</option>\n    <option value=\"yes\">Yes</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Filtering Consent Requests by User Creation Status - ExpressionEngine Template\nDESCRIPTION: This snippet shows how to use the user_created parameter to filter consent requests based on whether they were user-created or system/add-on created. Setting 'only' returns only user-created requests. Place this as a parameter on the {exp:consent:requests} tag. No code execution is performed; this is used for tag configuration.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/consent.md#2025-04-22_snippet_6\n\nLANGUAGE: expressionengine-template\nCODE:\n```\nuser_created='only'\n```\n\n----------------------------------------\n\nTITLE: Resizing and Cropping Image Using :resize_crop in ExpressionEngine - Markdown\nDESCRIPTION: This snippet shows how to chain :resize_crop on an image field in ExpressionEngine templates, specifying separate resize and crop arguments. Required dependencies are an image field (news_image) and the ExpressionEngine templating system. Key parameters include resize:width, resize:height, crop:width, and crop:height, among others. The result is an image that is first resized and then cropped according to the given settings.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/file.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n    {news_image:resize_crop resize:width=\\\"300\\\" crop:width=\\\"100\\\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing after_category_field_delete Hook in PHP\nDESCRIPTION: Example of how the after_category_field_delete hook is called in ExpressionEngine. This hook is triggered after a category field is deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-field.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_category_field_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Registering Cookies by Type in ExpressionEngine Add-on Setup\nDESCRIPTION: Declares cookies used by the add-on, categorized by their purpose (necessary, functionality, performance, or targeting). This ensures compliance with user consent preferences.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n'cookies.necessary' => [\n  'unique_id',\n],\n'cookies.functionality' => [\n  'font_size',\n],\n'cookies.performance' => [\n  'analytics_id',\n],\n'cookies.targeting' => [\n  'advertising_tracker',\n],\n```\n\n----------------------------------------\n\nTITLE: Calling before_template_route_bulk_delete Hook\nDESCRIPTION: Extension hook called before bulk deleting template route objects. Useful for handling expensive operations in bulk.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-route.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_template_route_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Includes for Automatic Modal Triggering: PHP\nDESCRIPTION: This includes a JavaScript file from ExpressionEngine's control panel to handle confirming removals, specifically aimed at facilitating bulk deletion modal operations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/modal.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nee()->cp->add_js_script(array(\n  'file' => array('cp/confirm_remove'),\n));\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Images in RTE Field with Tag Pair - ExpressionEngine Template and HTML\nDESCRIPTION: Demonstrates the use of the RTE field as a tag pair to iterate over images and output custom HTML for each, such as a list of images with their properties. The tag pair exposes variables like 'src', 'width', 'height', and 'alt' for each image in the RTE field, which can be used inside standard HTML structures. Inputs: images_only parameter, RTE field image data. Outputs: Structured HTML with image details for each image in the field. Limitations: Usable only in tag pair mode and requires 'images_only' set to 'yes'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/rte.md#2025-04-22_snippet_7\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n<ul>\n    {rte_field images_only=\"yes\"}\n        <li><img src=\"{src}\" width=\"{width}\" height=\"{height}\" alt=\"{alt}\" /></li>\n    {/rte_field}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating URL Structure in ExpressionEngine Templates\nDESCRIPTION: Shows the standard URL format for accessing templates in ExpressionEngine, where the URL contains the template group and specific template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: md\nCODE:\n```\nhttps://example.com/template_group/template\n```\n\n----------------------------------------\n\nTITLE: Customizing Submenu with Links and Filters - ExpressionEngine - PHP\nDESCRIPTION: This snippet illustrates the API for the Submenu object in ExpressionEngine's custom menu framework. It adds items to the submenu, attaches a link to create new items, and configures a filter search box within the dropdown. Methods include addItem, withAddLink, and withFilter—all called on a Submenu instance returned by addSubmenu. Requires the Submenu object and valid URL objects.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/menu.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$sub->addItem('Title', ee('CP/URL')->make('addons/settings/myaddon'));\n\n// call withAddLink to add a new/create link to the menu\n$sub->withAddLink('Title', ee('CP/URL')->make('addons/settings/myaddon/create'));\n\n// call withFilter to add a create fuzzy filter searchbox inside the menu\n// the first and only parameter is the input's placeholder text\n$sub->withFilter('find entries ...');\n```\n\n----------------------------------------\n\nTITLE: Generating Mailto Links with Modifier in ExpressionEngine\nDESCRIPTION: This snippet illustrates using the `mailto` modifier on an Email Address fieldtype tag. It generates an HTML mailto link, automatically encoding it by default for spam protection. Optional parameters like `title`, `subject`, and `encode` (set to 'no' here to override default encoding) allow customization of the link.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/email-address.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n{contact_email_address:mailto title=\"Email about their dog\" subject=\"Question about your dog\" encode=\"no\"}\n{!-- Outputs: --}\n<a href=\"mailto:username@example.com?subject=Question%20about%20your%dog\">Email about their dog</a>\n```\n\n----------------------------------------\n\nTITLE: Linking to Entries by ID using {entry_id_path} in ExpressionEngine\nDESCRIPTION: Demonstrates creating permalinks to individual entries within an `{entry_titles}` loop using the `{entry_id_path}` variable. This variable generates a URL containing the entry's unique ID, pointing to the specified template group/template path (`site/index` in this example).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n{entry_titles}\n    <a href=\"{entry_id_path='site/index'}\">{title}</a>\n{/entry_titles}\n```\n\n----------------------------------------\n\nTITLE: Requiring Specific Entry and Handling 404 - ExpressionEngine Template\nDESCRIPTION: This block combines the {exp:channel:entries} tag pair with entry validation by requiring a specific entry (using require_entry and url_title) and redirects to a 404 page on no results. It is tailored for single-entry pages, checking if the entry exists for the URL title in the third segment, with automatic redirection if not found. Dependencies include a configured 'blog' channel, ExpressionEngine template engine, and proper segment routing. Inputs: URL segments; Output: entry contents or 404 redirect.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/404pages.md#2025-04-22_snippet_2\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{exp:channel:entries channel=\"blog\" limit=\"1\" require_entry=\"yes\" url_title=\"{segment_3}\"}\n  {if no_results}\n    {redirect=\"404\"}\n  {/if}\n\n  Stuff here.\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Modifier in ExpressionEngine Template\nDESCRIPTION: Example template code demonstrating how to use the custom modifier with both direct and prefixed syntax.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/modifiers.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:entries entry_id=\"1\"}\n    <div class=\"title\">\n        <span>{title}</span> - Hello\n    </div>\n    <div class=\"hacker\">\n        <span>{title:hacker}</span> - H3110\n    </div>\n    <div class=\"seeo_hacker\">\n        <span>{title:seeo_hacker}</span> - H3110\n    </div>\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Registering Modifier in addon.setup.php\nDESCRIPTION: Configuration code to register the custom modifier in the add-on's setup file.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/modifiers.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'modifiers' => array(\n    'hacker'\n),\n```\n\n----------------------------------------\n\nTITLE: Using low_array_is_numeric Helper Function in Pro Search\nDESCRIPTION: Checks if a given array consists only of numeric values, returning a boolean result.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/functions.md#2025-04-22_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nif (low_array_is_numeric($array)) {\n    // Array only contains numeric values\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone for Date Display\nDESCRIPTION: Shows how to specify a timezone parameter to convert dates to a specific timezone, overriding system and user settings.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/date-variable-formatting.md#2025-04-22_snippet_2\n\nLANGUAGE: ee\nCODE:\n```\ntimezone=\"America/Los_Angeles\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Preview Function in ExpressionEngine\nDESCRIPTION: An ExpressionEngine tag setup enabling email preview functionality, allowing users to review their composed emails with form fields parsed from the preview configuration, enhancing user confidence before actual sending.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_19\n\nLANGUAGE: HTML\nCODE:\n```\n{exp:email:preview}\n  <dl>\n    <dt>From</dt>\n    <dd>{name} ({from})</dd>\n    <dt>To</dt>\n    <dd>{to}</dd>\n    <dt>Subject</dt>\n    <dd>{subject}</dd>\n  </dl>\n  {message}\n{/exp:email:preview}\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_entry_version_delete Hook in PHP\nDESCRIPTION: Code demonstrating how the before_channel_entry_version_delete hook is called in ExpressionEngine before entry versions are deleted. The hook passes the current ChannelEntry model object and an array of versions to be deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-entry.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$versions = ee()->extensions->call('before_channel_entry_version_delete', $this, $versions);\n```\n\n----------------------------------------\n\nTITLE: Calling before_category_group_bulk_delete Hook in PHP\nDESCRIPTION: Example of how the before_category_group_bulk_delete hook is called. This hook is triggered before multiple category groups are deleted in a single operation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-group.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_category_group_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Namespace Declaration Example\nDESCRIPTION: Demonstrates proper namespace and import declaration formatting in PHP files.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/general.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyAddon\\Addon;\n\nuse Vendor\\ClassName;\nuse Member\\PrivateMessages;\n\n/**\n * Comment describing the class\n */\nclass Awesome {\n```\n\n----------------------------------------\n\nTITLE: Tag Parameter Validation Using Switch Statement\nDESCRIPTION: Example of validating tag parameters using a switch statement for specific allowed values\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/security.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nswitch ($foo = ee()->TMPL->fetch_param('foo'))\n{\n    case 'bar':\n    case 'baz':\n    case 'bag':\n        break;\n    default:\n        $foo = '';\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Calendar Heading Variable in ExpressionEngine\nDESCRIPTION: Displays the calendar days of the week as a table row, adaptable to user language settings.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/calendar.md#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n{calendar_heading}\n    <td class=\"calendarDayHeading\">{lang:weekday_abrev}</td>\n{/calendar_heading}\n```\n\n----------------------------------------\n\nTITLE: Defining Add-on Namespace in PHP\nDESCRIPTION: Specifies the `namespace` key within the `addon.setup.php` file. This key defines the primary PHP namespace for the add-on's classes. ExpressionEngine uses this to autoload classes located within the add-on's directory. It is a required field.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'namespace' => 'Example\\HelloWorld'\n```\n\n----------------------------------------\n\nTITLE: Nested Category Archive Navigation Implementation\nDESCRIPTION: Example of using the nested style to create hierarchical category navigation with custom classes and entry details\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<nav class=\"header-nav\">\n    {exp:channel:category_archive show_empty=\"no\" disable=\"category_fields\"\n    style=\"nested\" category_group=\"7\" class=\"header-nav__list\"}\n        {categories}\n            {category_name}\n        {/categories}\n\n        {entry_titles}\n            <a\n                id=\"entry--{entry_id}\"\n                href=\"{channel_url}/{url_title}\"\n            >{title}</a>\n            <small id=\"{channel_id}\" class=\"channel--{channel_short_name}\">\n                {channel}\n            </small>\n        {/entry_titles}\n    {/exp:channel:category_archive}\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Defining foreign_character_conversion_array Hook in ExpressionEngine\nDESCRIPTION: This snippet defines the 'foreign_character_conversion_array' extension hook for text processing in ExpressionEngine. It references the implementation in Content_publish, suggesting it may be used for character conversion or transliteration.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/text-helper.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## `foreign_character_conversion_array`\n\nSee Content_publish's `foreign_character_conversion_array`.\n```\n\n----------------------------------------\n\nTITLE: Generating Channel Form Templates in ExpressionEngine CLI\nDESCRIPTION: This command generates a Channel Form template using the ExpressionEngine CLI. It specifies the template group and the channel to use for the form.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/generators.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp system/ee/eecli.php generate:templates channel:form --template_group=artists --channel=artists\n```\n\n----------------------------------------\n\nTITLE: Basic View Tracking Implementation in ExpressionEngine Channel Entries\nDESCRIPTION: Example of implementing view tracking in a channel entries tag using the track_views parameter to track views under counter 'one'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entry-tracking.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:entries channel=\"news\" limit=\"1\" track_views=\"one\"}\n    <h3>{title}</h3>\n    {body}\n    <div class=\"date\">Posted on {entry_date format=\"%M %d, %Y\"}</div>\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Creating a Prolet using CLI in ExpressionEngine\nDESCRIPTION: This snippet demonstrates how to create a Prolet using the ExpressionEngine CLI command `make:prolet`. It generates necessary files for integrating Prolets in your add-ons. Before using this command, ensure an add-on framework is in place. The result is a PHP file structured to host your Prolet logic.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/prolets.md#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ php system/ee/eecli.php make:prolet\n```\n\n----------------------------------------\n\nTITLE: Rendering an ExpressionEngine View with Data in PHP\nDESCRIPTION: Illustrates rendering a view with dynamic data using the 'render' method. The method takes an associative array where each key is accessible inside the view as a variable. Requires a view object previously instantiated via the View Service. This approach is useful for injecting dynamic content into templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/view.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$view->render(array('username' => 'Mike'));\n```\n\n----------------------------------------\n\nTITLE: CAPTCHA Implementation in ExpressionEngine Contact Forms\nDESCRIPTION: Example of conditional CAPTCHA implementation in contact forms. This code shows how to display a CAPTCHA field only when required by the system preferences.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_2\n\nLANGUAGE: ee\nCODE:\n```\n{if captcha}\n        <p>Please enter the word you see in the image below:</p>\n        <p>{captcha}<br /> <input type=\"text\" name=\"captcha\" value=\"\" maxlength=\"20\" /></p>\n    {/if}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Partial Model Data in ExpressionEngine PHP\nDESCRIPTION: Shows how to retrieve only specific fields from a model to reduce memory usage using the fields() method.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$template = ee('Model')\n  ->get('Template')\n  ->fields('template_id', 'template_name')\n  ->first();\n```\n\n----------------------------------------\n\nTITLE: Configuring a Recipient's Email Address Field in ExpressionEngine\nDESCRIPTION: HTML input field to specify the target email addresses for the form submission, supporting multiple recipients separated by commas. This field is crucial for directing the email to intended parties.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"text\" name=\"to\" size=\"40\" />\n```\n\n----------------------------------------\n\nTITLE: Modifying Search Scores Using pro_search_modify_score Hook\nDESCRIPTION: This snippet modifies search result scores in ExpressionEngine using the pro_search_modify_score hook. It processes an array with entry IDs and scores, enabling alterations to prioritize search results according to custom criteria within the extensions framework.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/hooks.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$results = ee()->extensions->call('pro_search_modify_score', $results);\n```\n\n----------------------------------------\n\nTITLE: News Article Template\nDESCRIPTION: Template for displaying individual news articles with dynamic title and sidebar content.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/layouts.md#2025-04-22_snippet_10\n\nLANGUAGE: expressionengine\nCODE:\n```\n{layout=\"news/_layout\"}\n\n{exp:channel:entries channel=\"news\" require_entry=\"yes\"}\n  {layout:set name=\"title\" value=\"{title}\"}\n\n  <h1>{title}<h1>\n  {body}\n{/exp:channel:entries}\n\n{layout:set name=\"sidebar\"}\n  {embed=\"news/_embed-search\"}\n  {embed=\"news/_embed-recent-articles\"}\n{/layout:set}\n```\n\n----------------------------------------\n\nTITLE: Enhanced HTML Layout with CSS and JavaScript Support\nDESCRIPTION: Extended HTML layout template that includes support for dynamic CSS and JavaScript injection through layout variables.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/layouts.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Site Name{if layout:title != ''} | {layout:title}{/if}</title>\n\n    <link rel=\"stylesheet\" href=\"/assets/global.css\" type=\"text/css\" />\n    {layout:css}\n  </head>\n  <body>\n    {layout:contents}\n    {layout:js}\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Before Template Group Update Hook Call\nDESCRIPTION: Extension hook called before updating a template group. Changes made to the object will be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-group.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_template_group_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Setting Comment Order - ExpressionEngine Template\nDESCRIPTION: This snippet configures the orderby parameter to set the sorting order of comments, such as by date. Useful for displaying most recent comments first or last.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_7\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\norderby=\"date\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers with Custom Settings\nDESCRIPTION: Formats numbers with custom decimal precision, decimal point character, and thousands separator.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n{volume:number_format decimals='2'}\n{!-- 1,234.56 --}\n```\n\n----------------------------------------\n\nTITLE: Setting Member Account Activation Requirements in ExpressionEngine\nDESCRIPTION: Configures how new member accounts are activated - automatically, via email verification, or requiring manual approval by an administrator.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_116\n\nLANGUAGE: php\nCODE:\n```\n$config['req_mbr_activation'] = 'none';\n```\n\n----------------------------------------\n\nTITLE: Reassigning Template Group and Template in PHP\nDESCRIPTION: The 'core_template_route' hook is responsible for changing the template group and template for parsing in ExpressionEngine. It takes the URI string as input and returns an array with the names of the template group and template. Ensure the returned data is correctly structured.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/core.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$edata = ee()->extensions->call('core_template_route', ee()->uri->uri_string);\nif (is_array($edata) && count($edata) == 2)\n{\n    list($template_group, $template) = $edata;\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\narray(\n    'template_group', // Template group name\n    'template'        // Template name\n);\n```\n\n----------------------------------------\n\nTITLE: Checking a Single Validation Rule with check() Method - ExpressionEngine - PHP\nDESCRIPTION: This snippet checks a single validation rule against a value using ExpressionEngine's 'check' method. It passes a rule (like 'uniqueEmail') and a target value, returning TRUE or FALSE for validity. Requires ExpressionEngine's Validation Service; inputs and outputs are both simple strings or booleans. This is suitable for basic, ad-hoc validation outside of full rule sets.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/validation.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$valid = ee('Validation')->check('uniqueEmail', 'email@example.com');\n```\n\n----------------------------------------\n\nTITLE: Setting Signature Image Width Limit in ExpressionEngine (PHP)\nDESCRIPTION: Sets the maximum width in pixels allowed for user-uploaded signature images in Discussion Forum. Helps control signature size for consistent forum appearance.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_139\n\nLANGUAGE: PHP\nCODE:\n```\n$config['sig_img_max_width'] = '150';\n```\n\n----------------------------------------\n\nTITLE: Protected Characters Example in ExpressionEngine\nDESCRIPTION: Example showing how to handle curly braces in conditional statements using HTML entities.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_2\n\nLANGUAGE: ee\nCODE:\n```\n{if title == 'Curly and the Braces: &#123;&#125;'}\n```\n\n----------------------------------------\n\nTITLE: Invoking the `category_delete` Extension Hook in ExpressionEngine PHP\nDESCRIPTION: This PHP code demonstrates how to call the `category_delete` extension hook in ExpressionEngine using the `ee()->extensions->call()` method. The hook is triggered when categories are deleted via the control panel, passing an array of category IDs (`$cat_ids`) to any subscribed extensions. This allows developers to execute custom logic before categories are removed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/admin-content.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('category_delete', $cat_ids);\n```\n\n----------------------------------------\n\nTITLE: Category-based Search with Single List in ExpressionEngine\nDESCRIPTION: Implementation of category-based search using a single list of checkboxes where multiple categories can be selected. Results show entries matching any of the selected categories.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/examples.md#2025-04-22_snippet_1\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_search:form query=\"{segment_3}\"}\n  {exp:channel:categories category_group=\"3\" style=\"linear\"}\n    <label>\n      <input type=\"checkbox\" name=\"category[]\" value=\"{category_id}\"{if pro_search_category ~ '/\\b'.category_id.'\\b/'} checked{/if}>\n      {category_name}\n    </label>\n  {/exp:channel:categories}\n  <button type=\"submit\">Go</button>\n{/exp:pro_search:form}\n\n{exp:pro_search:results\n  query=\"{segment_3}\"\n  channel=\"products\"\n  orderby=\"title\"\n  sort=\"asc\"\n}\n  {if count == 1}<ul>{/if}\n    <li><a href=\"{auto_path}\">{title}</a></li>\n  {if count == total_results}</ul>{/if}\n\n  {paginate}\n    {current_page}/{total_pages} | {pagination_links}\n  {/paginate}\n{/exp:pro_search:results}\n```\n\n----------------------------------------\n\nTITLE: Creating a CAPTCHA Input in ExpressionEngine\nDESCRIPTION: This HTML snippet defines a CAPTCHA input field for an ExpressionEngine form, aimed at enhancing the security by ensuring user interaction. It is conditionally displayed and should be properly configured in the Email Configuration preferences for effective use.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"text\" name=\"captcha\" value=\"\" maxlength=\"20\" />\n\n{if captcha}\n    <p>Please enter the word you see in the image below:</p>\n    <p>{captcha}<br /> <input type=\"text\" name=\"captcha\" value=\"\" maxlength=\"20\" /></p>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Editing a Role Group Name in PHP\nDESCRIPTION: This example shows how to edit the name of an existing Role Group, including validation and saving.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/role-group.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$roleGroup = ee('Model')->get('RoleGroup', 6)->first();\n$roleGroup->name = 'Marvel Members';\n\n// Validate and Save.\n$result = $roleGroup->validate();\n\nif ($result->isValid())\n{\n  $roleGroup->save();\n}\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_entry_bulk_delete Hook in PHP\nDESCRIPTION: Code demonstrating how the before_channel_entry_bulk_delete hook is called in ExpressionEngine before multiple channel entries are deleted. The hook passes an array of entry IDs to be deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-entry.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_entry_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Configuring CAPTCHA Font in ExpressionEngine (PHP)\nDESCRIPTION: Sets whether TrueType fonts should be used for CAPTCHA images. 'y' enables TrueType fonts (default), 'n' disables them.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$config['captcha_font'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_entry_delete Hook in PHP\nDESCRIPTION: Code demonstrating how the before_channel_entry_delete hook is called in ExpressionEngine before a channel entry is deleted. The hook passes the current ChannelEntry model object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-entry.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_entry_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Successful Response from ExpressionEngine Action\nDESCRIPTION: This snippet shows the successful response from the ExpressionEngine action after disabling CSRF protection. It returns the requested entry title.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n...\nThe Entry You Requested\n...\n```\n\n----------------------------------------\n\nTITLE: Channel Form Submit Entry Start Hook\nDESCRIPTION: Extension hook that fires when a Channel Form entry submission begins, providing access to the Channel Form library object.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/development.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('channel_form_submit_entry_start', $this);\n```\n\n----------------------------------------\n\nTITLE: Enabling Template Revision History in ExpressionEngine\nDESCRIPTION: Controls whether the system saves revisions of templates when changes are made in the template editor. Set to 'y' to enable revision history or 'n' to disable.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_124\n\nLANGUAGE: php\nCODE:\n```\n$config['save_tmpl_revisions'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Specifying Form Action URL for ExpressionEngine Logout Form\nDESCRIPTION: Example of the `action` parameter for the `{exp:member:logout_form}` tag. This parameter allows specifying a custom URL for the form's action attribute, useful for scenarios like directing the form submission to an SSL-enabled URL.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/logout.md#2025-04-22_snippet_3\n\nLANGUAGE: ee\nCODE:\n```\naction=\"https://example.com/\"\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Add-on Actions\nDESCRIPTION: Illustrates the directory structure created within an ExpressionEngine add-on after generating an action. An `Actions` folder is created, containing a PHP file named after the action's method.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\namazing_add_on\n ┣ Actions\n ┃ ┗ [MethodName].php\n ┗...\n```\n\n----------------------------------------\n\nTITLE: Calling After Insert Hook in ExpressionEngine PHP\nDESCRIPTION: Extension hook called after inserting a specialty template object. Changes made to the object will not be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-specialty-template.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_specialty_template_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Invoking the 'email_send' Extension Hook in ExpressionEngine (PHP)\nDESCRIPTION: This PHP snippet demonstrates how the `email_send` extension hook is triggered within ExpressionEngine's email functionality. It uses `ee()->extensions->call()` to execute any active extensions hooked to 'email_send', passing an array of email properties (headers, recipients, subject, body) by reference. This allows extensions to modify these properties directly. The code also checks the `end_script` flag; if set to TRUE by an extension, it indicates the extension handled email sending, and its return value (`$ret`) is used.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/email.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    $ret = ee()->extensions->call(\n        'email_send',\n        array(\n            'headers'       => &$this->_headers,     // Email headers array\n            'header_str'    => &$this->_header_str,  // Header string\n            'recipients'    => &$this->_recipients,  // Recipients string\n            'cc_array'      => &$this->_cc_array,    // CC recipients, populated by Email::cc(), used by SMTP\n            'bcc_array'     => &$this->_bcc_array,   // BCC recipients, populated by Email::bcc(), used by SMTP\n            'subject'       => &$this->_subject,     // Email subject\n            'finalbody'     => &$this->_finalbody    // Final email body text\n        )\n    );\n\n    if (ee()->extensions->end_script === TRUE)\n    {\n        return $ret;\n    }\n```\n\n----------------------------------------\n\nTITLE: Managing Field State and Input Values in ExpressionEngine using PHP\nDESCRIPTION: Contains methods to set and get the disabled state, input value, and required status of a field in ExpressionEngine. Users can toggle editability and manage input constraints using these functionalities.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/cp-form/fields.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n### `setDisabled($disabled)`\n\nWhether the Field should be editable (`disabled`).\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| $disabled | `boolean` | Simple boolean |\n| Returns | `Form\\Field` | `$this`, the Field object to help in chaining |\n```\n\nLANGUAGE: PHP\nCODE:\n```\n### `getDisabled()`\n\nWhether the Field is disabled (`disabled`)\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| Returns | `null` or `boolean` | Note that if this isn't set, it'll be null by default |\n```\n\nLANGUAGE: PHP\nCODE:\n```\n### `setValue($value)`\n\nThe value to use for the \"value\" parameter (`value`).\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| $value | `mixed` | What you want to use. |\n| Returns | `Form\\Field` | `$this`, the Field object to help in chaining |\n```\n\nLANGUAGE: PHP\nCODE:\n```\n### `getValue()`\n\nThe value to use on the Field (`value`)\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| Returns | `mixed` | The set value |\n```\n\nLANGUAGE: PHP\nCODE:\n```\n### `setRequired($required)`\n\nWhether the field can accept input/editing (`required`).\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| $required | `boolean` | Whether the Field is required |\n| Returns | `Form\\Field` | `$this`, the Field object to help in chaining |\n```\n\nLANGUAGE: PHP\nCODE:\n```\n### `getRequired()`\n\nWhether this Field is required (`required`)\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| Returns | `boolean` | Whether the Field is required |\n```\n\n----------------------------------------\n\nTITLE: Handling No Channel Entry Results - ExpressionEngine Template\nDESCRIPTION: This code block is used within an ExpressionEngine template to catch cases where a channel entries tag pair returns no results. The {if no_results} conditional triggers a redirect to the 404 template when no matching entry is found, ensuring visitors see a proper error page for mistyped or invalid URLs. Requires the {exp:channel:entries} tag pair and appropriate template routing. Input: result set of entries; Output: 404 redirect on empty result.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/404pages.md#2025-04-22_snippet_1\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{if no_results}\n  {redirect=\"404\"}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dependencies via a Provider in PHP\nDESCRIPTION: Illustrates retrieving dependencies using `make()` on a `Provider`. If a non-prefixed name (`'service'`) is requested, the provider's prefix is automatically added (`myaddon:service`). If an already prefixed name (`'addoff:service'`) is requested, the specified prefix is used directly, allowing access to services registered by other providers or add-ons.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/architecture.md#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$provider->make('service'); // addon:service\n$provider->make('addoff:service'); // addoff:service\n```\n\n----------------------------------------\n\nTITLE: Calling member_anonymize Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the member_anonymize hook is called in ExpressionEngine. This hook is triggered when an anonymization action is taken on a member, providing an opportunity to anonymize personally-identifiable information.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('member_anonymize', $this);\n```\n\n----------------------------------------\n\nTITLE: Defining an HTML Dashboard Widget ExpressionEngine HTML\nDESCRIPTION: Demonstrates the format of an HTML widget file for ExpressionEngine, using the required {widget} tag with parameters such as title, class, and width. The HTML widget content makes use of standard HTML markup plus any ExpressionEngine template tags for dynamic content. Dependencies include the ExpressionEngine template engine, and parameters in the {widget} tag (title is required, class and width are optional). The output is rendered as an HTML dashboard widget.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/widgets.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{widget class=\"widget--support\" title=\"ExpressionEngine Support\" width=\"half\"}\n\n<p>Get <b>direct</b>, <b>fast</b>, <b>unlimited</b> support from the same team that builds your favorite CMS.</p>\n\n<p><a href=\"https://expressionengine.com/support\" target=\"_blank\" class=\"button button--default\">Learn More</a></p>\n```\n\n----------------------------------------\n\nTITLE: JSON Encoding Text in PHP\nDESCRIPTION: Demonstrates the json() method for JSON encoding a string.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$value = ee('Format')->make('Text', 'A discussion about \"Wonko the Sane\"')->json();\n// \"A discussion about &quot;Wonko the Sane&quot;\"\n```\n\n----------------------------------------\n\nTITLE: Initialize Reorderable Table - ExpressionEngine PHP\nDESCRIPTION: Initiates a table object with reorderable rows. Requires JavaScript utilities for handling row reordering and includes specific settings to disable sorting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/table.md#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$table = ee('CP/Table', array(\n  'reorder' => TRUE,\n  'sortable' => FALSE\n));\n```\n\n----------------------------------------\n\nTITLE: Channel Entries with Disabled Features - ExpressionEngine\nDESCRIPTION: Advanced example showing how to optimize performance by disabling unused features when displaying entry titles.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_3\n\nLANGUAGE: ee\nCODE:\n```\n{exp:channel:entries orderby=\"date\" sort=\"desc\" limit=\"10\" disable=\"categories|custom_fields|member_data|pagination\"}\n    <a href=\"{title_permalink='channel/comments'}\">{title}</a><br>\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Calling after_template_route_bulk_delete Hook\nDESCRIPTION: Extension hook called after bulk deleting template route objects. Useful for handling expensive operations in bulk.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-route.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_template_route_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Rules for ExpressionEngine Generator Options (PHP)\nDESCRIPTION: Illustrates how to specify validation rules for the generator's options using the protected `$_validation_rules` property within the generator class. This example links the 'channel' option defined in `$options` to a custom validation method 'validateChannelExists' within the same class, ensuring data integrity via ExpressionEngine's Validation service.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/template-generator.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n    protected $_validation_rules = [\n        'channel' => 'validateChannelExists'\n    ];\n```\n\n----------------------------------------\n\nTITLE: Calling before_template_route_save Hook\nDESCRIPTION: Extension hook called before saving (inserting or updating) a template route object. Changes will be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-route.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_template_route_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Modifying .htaccess for URL Rewriting in Apache\nDESCRIPTION: Configures URL rewriting rules in the .htaccess file for Apache servers to remove 'index.php' from URLs while routing requests correctly. Requires a UNIX-based server with Apache and mod_rewrite enabled. Inputs include server configurations and URL structures. Outputs are rewritten user-friendly URLs. Consider server restrictions like PHP-FPM that might necessitate additional conditions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/best-practices.md#2025-04-22_snippet_1\n\nLANGUAGE: Apache\nCODE:\n```\n<IfModule mod_rewrite.c>\n    RewriteEngine On\n    RewriteBase /\n\n    # Removes index.php from ExpressionEngine URLs\n    RewriteCond %{THE_REQUEST} ^GET.*index\\.php [NC]\n    RewriteCond %{REQUEST_URI} !/system/.* [NC]\n    RewriteRule (.*?)index\\.php/*(.*) /$1$2 [R=301,NE,L]\n\n    # Directs all EE web requests through the site index file\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME} !-d\n    RewriteRule ^(.*)$ /index.php/$1 [L]\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Configuring forum_is_installed in ExpressionEngine\nDESCRIPTION: Setting to indicate whether the Discussion Forum module is installed, automatically enabled during forum installation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_78\n\nLANGUAGE: php\nCODE:\n```\n$config['forum_is_installed'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Applying Class Attribute to Member Search Form - ExpressionEngine Template\nDESCRIPTION: Illustrates how to set a CSS class on the generated member search form using the form_class parameter. No external dependencies other than template rendering and CSS availability. The value corresponds to a class selector in your CSS.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_2\n\nLANGUAGE: ExpressionEngine Template Markup\nCODE:\n```\nform_class=\"login\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic Parameters Form Implementation\nDESCRIPTION: Demonstrates a complete HTML form implementation for dynamic parameter filtering, including sorting options, order direction, and category selection. Includes CSRF token for security.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/dynamic-parameters.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"post\" action=\"{path='template_group/template_name'}\">\n  <input type=\"hidden\" name=\"csrf_token\" value=\"{csrf_token}\" />\n\n    <select name=\"orderby\">\n        <option value=\"date\">Sort By:</option>\n        <option value=\"date\">Date</option>\n        <option value=\"title\">Title</option>\n        <option value=\"comment_total\">Most Comments</option>\n    </select>\n    <select name=\"sort\">\n        <option value=\"asc\">Order In:</option>\n        <option value=\"asc\">Ascending</option>\n        <option value=\"desc\">Descending</option>\n    </select>\n    <select name=\"category[]\">\n        <option value=\"\">Result Limit:</option>\n        <option value=\"1\">Dogs</option>\n        <option value=\"3\">Cats</option>\n        <option value=\"5\">Gerbils</option>\n    </select>\n\n    <input type=\"submit\" value=\"Go!\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Updating Extension Method Name in ExpressionEngine\nDESCRIPTION: Demonstrates how to change the method name of an extension by retrieving the extension record by class name, modifying the method property, and saving the changes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/addon-extension.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$method = ee('Model')\n            ->get('Extension')\n            ->filter('class', 'My_extension_class_ext')\n            ->first();\n\n$method->method = 'my_new_method_name';\n\n$method->save();\n```\n\n----------------------------------------\n\nTITLE: Displaying Data in ExpressionEngine Views with PHP and HTML\nDESCRIPTION: Shows how variables passed to a view become accessible within the view template file. Uses the PHP short echo tag to display the variable value in rendered HTML output. Depends on passing 'username' as a parameter during render. Useful for showing dynamic contents in templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/view.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<h1><?=$username?></h1>\n```\n\n----------------------------------------\n\nTITLE: Adding Roles to a Role Group in PHP\nDESCRIPTION: This example demonstrates how to add multiple Roles to a Role Group using their IDs and the Roles relationship.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/role-group.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Role IDs to add to Role Group.\n$role_members = array(1,2,3);\n\n// Use the Roles relationship to get each Role object.\n$roleGroup->Roles = ee('Model')->get('Role', $role_members)->all();\n\n// Validate and Save.\n$result = $roleGroup->validate();\n\nif ($result->isValid())\n{\n  $roleGroup->save();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Path and URL Configurations in ExpressionEngine PHP\nDESCRIPTION: This PHP snippet provides configuration settings for various site components in ExpressionEngine, including site URL, theme folder paths, CAPTCHA, avatars, signature attachments, and upload preferences. Each entry requires updating the server path and URL to reflect the new server infrastructure. These updates ensure proper URL references and resource management across the website.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/moving.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$config['site_url'] = \"https://example.com/\";\n\n$config['theme_folder_url'] = \"https://example.com/themes/\";\n$config['theme_folder_path'] = \"/home/user/example.com/themes/\";\n\n$config['captcha_url'] = \"https://example.com/images/captchas/\";\n$config['captcha_path'] = \"/home/user/example.com/images/captchas/\";\n\n$config['emoticon_url'] = \"https://example.com/images/smileys/\";\n\n$config['avatar_url'] = \"https://example.com/images/avatars/\";\n$config['avatar_path'] = \"/home/user/example.com/images/avatars/\";\n\n$config['sig_img_url'] = \"https://example.com/images/signature_attachments/\";\n$config['sig_img_path'] = \"/home/user/example.com/images/signature_attachments/\";\n\n$config['upload_preferences'] = array(\n    6 => array(                                                    // ID of upload destination\n        'name'        => 'Image Uploads',                          // Display name in control panel\n        'server_path' => '/home/user/example.com/images/uploads/', // Server path to upload directory\n        'url'         => 'https://example.com/images/uploads/'      // URL of upload directory\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Relationships in ExpressionEngine PHP\nDESCRIPTION: Demonstrates how to set a relationship by assigning a model and saving the changes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/relationships.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$member->PrimaryRole = ee('Model')->get('Role', 1)->first();\n$member->save();\n```\n\n----------------------------------------\n\nTITLE: Advanced Parsing Order Example in ExpressionEngine\nDESCRIPTION: Demonstrates a complex example of both default (outward) and modified (inward) parsing order with multiple nested plugins.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/language.md#2025-04-22_snippet_11\n\nLANGUAGE: ee\nCODE:\n```\n{exp:rss_parser url=\"https://ellislab.com/blog/rss-feed\" limit=\"5\" parse=\"inward\"}\n    <ul>\n    {feed_items}\n        <li><a href=\"{item_link}\">{item_title}</a><br />\n                {exp:word_limit total=\"35\"}\n                    {exp:xml_encode}\n                        {content}\n                    {/exp:xml_encode}\n                {/exp:word_limit}\n            </li>\n    {/feed_items}\n    </ul>\n{/exp:rss_parser}\n```\n\n----------------------------------------\n\nTITLE: Specifying Post-Login Redirect URL in ExpressionEngine\nDESCRIPTION: Demonstrates using the `return=` parameter to define the page (either as a standard ExpressionEngine `template_group/template` path or a full URL) where the user should be redirected after a successful login.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/login.md#2025-04-22_snippet_6\n\nLANGUAGE: ee\nCODE:\n```\nreturn=\"site/index\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Member Fields in ExpressionEngine\nDESCRIPTION: Illustrates how custom member profile fields (e.g., age, gender, zodiac) can be accessed within comment templates using their defined 'short name' as variables.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_30\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{age} {gender} {zodiac} etc..\n```\n\n----------------------------------------\n\nTITLE: Listing Options for the make:migration Command (CLI)\nDESCRIPTION: This section details the command-line options available for the `make:migration` ExpressionEngine CLI command. It includes flags for specifying the migration name (`--name`, `-n`), target table (`--table`, `-t`), status (`--status`, `-s`), location (core or add-on, `--location`, `-l`), and type of migration (create `--create` or update `--update`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/make-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n    --name=<value>\n    -n <value>\n        Name of migration\n\n    --table=<value>\n    -t <value>\n        Table name\n\n    --status=<value>\n    -s <value>\n        Status name\n\n    --location=<value>\n    -l <value>\n        Migration location. Current options are ExpressionEngine or shortname of an add-on that is currently installed. Defaults to ExpressionEngine.\n\n    --create\n    -c\n        Specify command is a create command\n\n    --update\n    -u\n        Specify command is an update command\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict URLs in ExpressionEngine (PHP)\nDESCRIPTION: Enables or disables strict URL handling, affecting how the first URL segment is interpreted for template groups.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_156\n\nLANGUAGE: php\nCODE:\n```\n$config['strict_urls'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: Adding Manual Filters in jQuery Table Plugin\nDESCRIPTION: Shows how to add one or more specific filters manually by passing a plain JavaScript object to the `add_filter` function of the ExpressionEngine table plugin. This allows defining filters with specific key-value pairs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/table.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n$('table').table('add_filter', { name: 'igor' });\n```\n\n----------------------------------------\n\nTITLE: Invoking form_declaration_return Hook in ExpressionEngine PHP\nDESCRIPTION: This PHP snippet shows the invocation of the `form_declaration_return` hook using `$this->extensions->call()`, passing the form data array (`$data`). If an extension handles the form tag generation completely, it should return the form tag string and set `end_script` to `TRUE` to bypass the core form generation logic.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/functions.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$form = $this->extensions->call('form_declaration_return', $data);\nif ($this->extensions->end_script === TRUE) return $form;\n```\n\n----------------------------------------\n\nTITLE: Bulk Action Bar for Deleting Selected Items with Modals: PHP\nDESCRIPTION: This snippet illustrates embedding a shared view to create a bulk action bar with embedded modal triggers. Special attrs data attribute is used for identifying selected items to be deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/modal.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php $this->embed('ee:_shared/form/bulk-action-bar', [\n  'options' => [\n    [\n      'value' => \"\",\n      'text' => '-- ' . lang('with_selected') . ' --'\n    ],\n    [\n      'value' => \"remove\",\n      'text' => lang('delete'),\n      'attrs' => ' data-confirm-trigger=\"selected\" rel=\"modal-confirm-remove\"'\n    ]\n  ],\n  'modal' => true\n]); ?>\n```\n\n----------------------------------------\n\nTITLE: Extending Control Panel CSS with Hooks in PHP\nDESCRIPTION: The 'cp_css_end()' hook allows developers to add custom CSS to every Control Panel page in the ExpressionEngine framework. This function calls the 'cp_css_end' method from the extensions, returning a string containing CSS. No dependencies are required other than ExpressionEngine's built-in extension system. The returned string is appended as custom CSS on each page.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/css.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$str = $this->extensions->call('cp_css_end');\n```\n\n----------------------------------------\n\nTITLE: Field-specific Search with Country Selection in ExpressionEngine\nDESCRIPTION: Implementation of field-specific search using REEgion Select for country selection. Allows exact matching on country codes with single and multiple selection options.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/examples.md#2025-04-22_snippet_3\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_search:form query=\"{segment_3}\"}\n  <select name=\"search:people_region\">\n    <option value=\"\">--</option>\n    {exp:reegion_select:countries}\n      <option value=\"{region_alpha2}\"{if region_alpha2 == pro_search_search:people_region} selected{/if}>\n        {region_name}\n      </option>\n    {/exp:reegion_select:countries}\n  </select>\n  <button type=\"submit\">Go</button>\n{/exp:pro_search:form}\n\n{exp:pro_search:results\n  query=\"{segment_3}\"\n  exact=\"search:people_region\"\n  channel=\"people\"\n}\n  <p>{title}</p>\n  {if no_results}\n    <p>\n      Sorry, nothing found in\n      {exp:reegion_select:countries show=\"{pro_search_search:people_region}\"}\n        {region_name}.\n      {/exp:reegion_select:countries}\n    </p>\n  {/if}\n{/exp:pro_search:results}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Headers Config in ExpressionEngine\nDESCRIPTION: Configuration snippet to disable explicit HTTP headers in ExpressionEngine when running PHP as CGI. This setting can be added to the system/user/config/config.php file when Control Panel access is not available.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$config['send_headers'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: Describing CLI Options for make:extension-hook\nDESCRIPTION: This snippet lists the command-line options available for the `make:extension-hook` command. It specifically shows the `--addon` (or `-a`) option, which is used to specify the folder name of the third-party add-on where the extension hook should be implemented.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/make-extension-hook.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n    --addon=<value>\n    -a <value>\n        Folder for third-party add-on you want to add extension hook to\n```\n\n----------------------------------------\n\nTITLE: Displaying View Counts in ExpressionEngine Channel Entries\nDESCRIPTION: Example showing how to display the number of views for entries using view_count variables within a channel entries tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entry-tracking.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:entries channel=\"news\" limit=\"15\"}\n    <h3>{title}</h3>\n    {body}\n\n    <div class=\"date\">Posted on {entry_date format=\"%M %d, %Y\"}</div>\n    This entry has been viewed {view_count_one} times.\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Outputting Grid Variable Row Count in ExpressionEngine\nDESCRIPTION: Demonstrates how to output the total number of rows in a Grid variable using the pro_variables:single tag with a modifier.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/type.md#2025-04-22_snippet_3\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_variables:single var=\"my_var\" modifier=\"total_rows\"}\n```\n\n----------------------------------------\n\nTITLE: Using _log Helper Function in Pro Search\nDESCRIPTION: A shortcut for ee()->TMPL->log_item() to log messages from within a custom filter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/functions.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$this->_log('Your log message here');\n```\n\n----------------------------------------\n\nTITLE: Expired Entries Select Field - ExpressionEngine Search\nDESCRIPTION: Dropdown select implementation for including expired entries in search results.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/search/simple.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"field_show_expired\">Include Expired Entries?</label>\n<select name=\"show_expired\" id=\"field_show_expired\">\n    <option value=\"no\">No</option>\n    <option value=\"yes\">Yes</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: After Template Group Delete Hook Call\nDESCRIPTION: Extension hook called after deleting a template group.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-group.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_template_group_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Configuring Character Set in ExpressionEngine (PHP)\nDESCRIPTION: Specifies the default character set for the system. It's recommended to leave this at the default value of 'UTF-8' unless you have a specific reason to change it.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$config['charset'] = 'UTF-8';\n```\n\n----------------------------------------\n\nTITLE: Using the Script Global Variable in ExpressionEngine\nDESCRIPTION: Basic syntax for the script global variable used to generate URLs for JavaScript files. Replace 'template_group' and 'js_template' with your actual template group and JS template names.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/scripts.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{script='template_group/js_template'}\n```\n\n----------------------------------------\n\nTITLE: Calling before_template_update Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the before_template_update hook is called in ExpressionEngine. This hook is triggered before a template is updated and includes the modified values array, allowing modifications that will be automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_template_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Comment in ExpressionEngine\nDESCRIPTION: This snippet demonstrates how to create a new comment using the Comment Model in ExpressionEngine. It shows how to set various properties of the comment, including site ID, entry ID, channel ID, author ID, and comment content. Optional fields like IP address, name, email, URL, and location are also shown.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/comment.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$entry = ee('Model')->get('ChannelEntry', $entry_id)->first();\n\n$comment = ee('Model')->make('Comment');\n$comment->site_id    = ee()->config->item('site_id');\n$comment->entry_id   = $entry->getId();\n$comment->channel_id = $entry->channel_id;\n$comment->author_id  = ee()->session->userdata['member_id']; // Get currently logged-in user.\n$comment->comment    = 'My super awesome comment.';\n$comment->status     = 's'; // Status is needed to have comment display in the CP.\n\n// Optional:\n$comment->ip_address   = ee()->session->userdata['ip_address'];\n$comment->name         = ee()->session->userdata['screen_name'];\n$comment->email        = ee()->session->userdata['email'];\n$comment->url          = ee()->session->userdata['url'];\n$comment->location     = ee()->session->userdata['location'];\n$comment->comment_date = ee()->localize->now;\n\n$comment->save();\n```\n\n----------------------------------------\n\nTITLE: After Comment Delete Hook Call\nDESCRIPTION: Extension hook called after a comment is deleted from the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/comment.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_comment_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Replacing Low Variables Tags with Pro Variables Format using Search and Replace\nDESCRIPTION: Example of replacing the old Low Variables tag format with the new Pro Variables format using ExpressionEngine's Search and Replace utility. This is a recommended best practice after upgrading to ExpressionEngine v7.0.0.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/upgrade-from-low-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsearch for `{exp:low_variables:` and replace with `{exp:pro_variables:`\n```\n\n----------------------------------------\n\nTITLE: Checking User's Comment Count\nDESCRIPTION: Shows how to test against the total number of comments by the user.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_25\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if logged_in_total_comments < 1}  Care to comment?  {/if}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Channels Associated with an ExpressionEngine Field (PHP)\nDESCRIPTION: Shows how to get the channels a specific field is assigned to directly (not via field groups). It retrieves the ChannelField model, accesses its 'Channels' relationship, and uses `pluck()` to get an array of channel IDs. A concise one-line version is also provided.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-field.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n```php\n// Get the field object.  #4 is the About Images field.\n$field = ee('Model')->get('ChannelField', 4)->first();\n\n// Get the Channel's object using the Channel relationship.\n$channels = $field->Channels;\n\n// Returns an array of channel IDs.\n$channel_ids = $channels->pluck('channel_id');\n\n// As one line:\n $channel_ids = ee('Model')->get('ChannelField', 4)->first()->Channels->pluck('channel_id');\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Block Data in Parent View Templates (PHP)\nDESCRIPTION: Shows how the parent view accesses named blocks created by the child view via the $blocks associative array. The example outputs the 'js' block, which could contain scripts or other markup. This mechanism supports promoting modular and maintainable templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/view.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?=$blocks['js']?>\n```\n\n----------------------------------------\n\nTITLE: Setting Signature Images URL in ExpressionEngine (PHP)\nDESCRIPTION: Sets the URL to the signature images directory. The default URL is {base_url}/images/signature_attachments/ when no override is set.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_141\n\nLANGUAGE: PHP\nCODE:\n```\n$config['sig_img_url'] = 'https://example.com/images/signatures/';\n```\n\n----------------------------------------\n\nTITLE: PHP Test Script for Security Verification\nDESCRIPTION: Simple PHP script to test if security measures are preventing PHP execution in protected directories.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/security/general-tips.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php echo \"This should not be visible.\";\n```\n\n----------------------------------------\n\nTITLE: Labeling Custom Front-end Edit Links using {if frontedit}\nDESCRIPTION: Uses the `{if frontedit}` conditional tag to display a text label (e.g., \"Edit Entry Title\") immediately before a custom `{frontedit_link}` tag. This label provides user-friendly context for the edit link and will only appear when front-end editing is enabled and available.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/advanced-usage/front-end/frontend.md#2025-04-22_snippet_8\n\nLANGUAGE: ee\nCODE:\n```\n{if frontedit}Edit Entry Title{/if}{frontedit_link entry_id=\"{entry_id}\" field_name=\"title\"}\n```\n\n----------------------------------------\n\nTITLE: MSM Site Environment Variables in PHP Configurations\nDESCRIPTION: This snippet shows how to use environment variables for MSM sites within the ExpressionEngine `config.php`, featuring `$GLOBALS['assign_to_config']['site_name']` for dynamic site-specific configurations. The setup facilitates centralized management of multiple site paths and URLs based on the MSM structure.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/advanced-usage/env-support.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');\\n\\n$config['save_tmpl_files'] = 'y';\\n\\n$config['base_path'] = $_ENV[$GLOBALS['assign_to_config']['site_name'] . '.' . 'BASE_PATH'];\\n$config['base_url'] = $_ENV[$GLOBALS['assign_to_config']['site_name'] . '.' . 'BASE_URL'];\\n\\n$config['site_url'] = $config['base_url'];\\n\\n$config['app_version'] = '7.5.8';\\n$config['encryption_key'] = 'bb748b72de235352315122d00';\\n$config['session_crypt_key'] = '985796e4444444563463e2c80242';\\n\\n$config['database'] = array(\\n\\t'expressionengine' => array(\\n\\t\\t'hostname' => $_ENV['DB_HOSTNAME'],\\n\\t\\t'database' => $_ENV['DB_DATABASE'],\\n\\t\\t'username' => $_ENV['DB_USERNAME'],\\n\\t\\t'password' => $_ENV['DB_PASSWORD'],\\n\\t\\t'dbprefix' => 'exp_',\\n\\t\\t'char_set' => 'utf8mb4',\\n\\t\\t'dbcollat' => 'utf8mb4_unicode_ci',\\n\\t\\t'port'     => $_ENV['DB_PORT'],\\n\\t),\\n);\\n$config['show_ee_news'] = 'y';\\n\\n// EOF\n```\n\n----------------------------------------\n\nTITLE: Setting 'No Results' Text - ExpressionEngine PHP\nDESCRIPTION: This snippet sets the message to be displayed when no table results are available. It includes a call-to-action button with specified text and URL. Requires ExpressionEngine's 'CP/URL' service for generating URLs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/table.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$table->setNoResultsText('no_channels', 'create_channel', ee('CP/URL', 'channels/create'));\n```\n\n----------------------------------------\n\nTITLE: Setting MIME Whitelist Member Exceptions\nDESCRIPTION: Specifies member IDs to exclude from MIME type whitelist restrictions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_96\n\nLANGUAGE: php\nCODE:\n```\n$config['mime_whitelist_member_exception'] = '3, 14, 83';\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Site Settings with Environment Variables\nDESCRIPTION: This example illustrates configuring a Multi-Site Manager (MSM) setup in ExpressionEngine, allowing individual site settings using environment variables. It demonstrates using site-specific prefixes in variable names, with the global configuration accessed via `$GLOBALS['assign_to_config']['site_name']`. Addresses features like path settings for different sites.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/advanced-usage/env-support.md#2025-04-22_snippet_2\n\nLANGUAGE: ENV\nCODE:\n```\n#.env.php\\n#SITE-SPECIFIC SETTINGS\\ndefault_site.BASE_PATH=/home/sites/mysite.test/\\ndefault_site.BASE_URL=http://mysite.test/\\n\\nsecond_site.BASE_PATH=/home/sites/anothersite.test/\\nsecond_site.BASE_URL=http://anothersite.test/\\n\\n#DATABASE SETTINGS\\nDB_HOSTNAME=db\\nDB_DATABASE=db\\nDB_USERNAME=db\\nDB_PASSWORD=db\\nDB_PORT=3306\n```\n\n----------------------------------------\n\nTITLE: Automatically Open a Modal using URL with Hash\nDESCRIPTION: This snippet describes using HTML attributes to automatically open a modal upon page load by including a specific hash in the URL. The 'rev' attribute must exceed 5 characters for functionality.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/modal.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"modal-wrap app-modal\" rev=\"my-automatic-modal\">\n```\n\n----------------------------------------\n\nTITLE: Handling Table Load Start Event in jQuery Table Plugin\nDESCRIPTION: Demonstrates how to bind a function to the `tableload` event fired by the ExpressionEngine table plugin. This event occurs at the beginning of a table change (e.g., sorting, filtering, pagination) and can be used to show a loading indicator.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/table.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n$('table').bind('tableload', function() {\n    $('#indicator').show();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Number Formatter in PHP\nDESCRIPTION: Demonstrates how to create a Number Formatter to format content as bytes using the Format Service in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$display_size = ee('Format')->make('Number', $content)->bytes();\n```\n\n----------------------------------------\n\nTITLE: Nested No Results Handling in ExpressionEngine - markup\nDESCRIPTION: Illustrates the necessity for nested {if no_results} conditionals when dealing with complex tag structures, such as those involving Grid fields within channel entries tags. Proper nesting is required to ensure correct parsing of conditionals.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_48\n\nLANGUAGE: markup\nCODE:\n```\n{exp:channel:entries channel=\"blog\"}\n    {if no_results} No entries {/if}\n    {my_grid_field}\n        {if no_results} Grid is empty {/if}\n        {my_grid_field:text}\n    {/my_grid_field}\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: After Comment Insert Hook Call\nDESCRIPTION: Extension hook called after a comment is inserted into the database. Changes to the object at this point require manual saving.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/comment.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_comment_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Defining Add-on Target Option for make:model Command (Bash)\nDESCRIPTION: Specifies the command-line options for the `make:model` command. The `--addon` or `-a` flag is required to indicate the target add-on folder where the new model file should be created. `<value>` should be replaced with the name of the add-on's folder.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/make-model.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n    --addon=<value>\n    -a <value>\n        Folder for third-party add-on you want to add model to\n```\n\n----------------------------------------\n\nTITLE: Enabling Editing for a FolderItem in PHP\nDESCRIPTION: Shows the edit button associated with this `FolderItem` in the sidebar interface. Returns the `FolderItem` instance (`$this`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\ncanEdit()\n```\n\n----------------------------------------\n\nTITLE: Calling Before Insert Hook in ExpressionEngine PHP\nDESCRIPTION: Extension hook called before inserting a specialty template object. Changes made to the object will be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-specialty-template.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_specialty_template_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Properly Formatted Multi-Line SQL Query - PHP\nDESCRIPTION: Demonstrates the best practice for embedding a MySQL query in PHP by capitalizing keywords and splitting clauses onto new lines. This structure enhances readability and maintains alignment with ExpressionEngine's preferred coding style. No special dependencies are required; input and output follow PHP and SQL conventions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/general.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$query = ee()->db->query(\"SELECT foo, bar, baz, foofoo, foobar AS raboof, foobaz\n    FROM exp_pre_email_addresses\n    WHERE foo != 'oof'\n    AND baz != 'zab'\n    ORDER BY foobaz\n    LIMIT 5, 100\");\n```\n\n----------------------------------------\n\nTITLE: Attaching and Accessing Node Data in PHP\nDESCRIPTION: Illustrates how to attach data when creating a node and how to access the data. Node names and data, if stored as an array, are directly accessible through the class methods.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/tree-datastructure.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$node = new EE_TreeNode('Lennie', array('friend' => 'George'));\n```\n\nLANGUAGE: php\nCODE:\n```\necho $node->name(); // prints \"Lennie\"\n```\n\nLANGUAGE: php\nCODE:\n```\necho $node->friend; // prints \"George\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$data = $node->data();\necho $data['friend']; // prints \"George\"\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Tracking Threshold in ExpressionEngine (PHP)\nDESCRIPTION: Sets the maximum number of online visitors to track before temporarily disabling tracking features. Helps maintain site performance during traffic spikes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$config['dynamic_tracking_disabling'] = '350';\n```\n\n----------------------------------------\n\nTITLE: Rendering MFA Enable/Disable Links Using ExpressionEngine Templating - Markdown\nDESCRIPTION: This snippet demonstrates the usage of ExpressionEngine's {exp:member:mfa_links} templating tag, which conditionally displays links to enable or disable multi-factor authentication (MFA) for the logged-in user, depending on their current MFA status. It supports embedding dynamic links for enabling and disabling MFA within member-facing templates. This snippet relies on ExpressionEngine’s member module and requires proper configuration of MFA and Control Panel permissions. The main parameters are the built-in tag variables ({enable_mfa_link} and {disable_mfa_link}) used in an if/else-style block to determine which action should be presented to the member. Output consists of rendered anchor tags relevant to the member’s current MFA state.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/mfa.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n{exp:member:mfa_links}\n  {if mfa_enabled}\n    <a href=\"{disable_mfa_link}\">Disable MFA</a>\n  {if:else}\n    <a href=\"{enable_mfa_link}\">Enable MFA</a>\n  {/if}\n{/exp:member:mfa_links}\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_form_settings_save Extension Hook in PHP\nDESCRIPTION: Demonstrates how the before_channel_form_settings_save extension hook is called. This hook triggers before a channel form settings object is inserted or updated, and changes made to the object will be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-form-settings.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_form_settings_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Retrieving Child Entries in ExpressionEngine\nDESCRIPTION: Demonstrates how to get child entries related to a parent entry, with both multi-line and single-line approaches.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-entry.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// The parent entry.\n$entry_id = 1;\n\n// Get the Entry's object.\n$entry = ee('Model')->get('ChannelEntry', $entry_id)->first();\n\n// Get the children relationship, and returns entry objects.\n$children = $entry->Children;\n\n$children_ids = $children->pluck('entry_id');\n// Output array(2, 3, 4...etc);\n```\n\nLANGUAGE: php\nCODE:\n```\n$children_ids = ee('Model')->get('ChannelEntry', 1)->first()->Children->pluck('entry_id');\n```\n\n----------------------------------------\n\nTITLE: Using Channel Field Tag in ExpressionEngine Templates\nDESCRIPTION: Example showing how to use the {exp:channel:field} tag to display field label and options from a department field. The code demonstrates accessing field properties and looping through field options.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/fields.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:field field_name=\"department\"}\n    <div>\n        <p>Choose <b>{field_label}</b>:</p>\n        {field_options}\n            <p><span class=\"value\">{value}</span>: <span class=\"label\">{label}</span></p>\n        {/field_options}\n    </div>\n{/exp:channel:field}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Based on URL Segment in ExpressionEngine Templates\nDESCRIPTION: This ExpressionEngine template code snippet checks if the second URL segment (`segment_2`) is not empty. If a second segment exists, it redirects the user to the site's configured 404 page using the `{redirect=}` global variable. This is useful within an 'index' template of a Template Group to enforce stricter URL handling when 'Strict URLs' are enabled, preventing access like `/template_group/index/some_value` and ensuring only `/template_group/` (or `/template_group/index`) is valid for the index template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/settings/template.md#2025-04-22_snippet_0\n\nLANGUAGE: ee\nCODE:\n```\n{if segment_2 != ''} \\u00a0\\u00a0{redirect=\"404\"} {/if}\n```\n\n----------------------------------------\n\nTITLE: Censoring Text in PHP\nDESCRIPTION: Shows how to use the censor() method to replace configured naughty words in a string.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$text = ee('Format')->make('Text', 'A discussion about \"Wonko the Sane\"')->censor();\n// A discussion about \"Wonko the ####\" (presuming \"sane\" is a configured naughty word)\n```\n\n----------------------------------------\n\nTITLE: DocBlock Style Comments\nDESCRIPTION: Example of proper DocBlock documentation for classes and methods that can be parsed by IDEs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/general.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n* Super Class\n*\n* @package Package Name\n* @subpackage  Subpackage\n* @category    Category\n* @author  Author Name\n* @link    https://example.com\n*/\nclass Super_class {\n\n    /**\n    * Encodes string for use in XML\n    *\n    * @param   string\n    * @return  string\n    */\n    function xml_encode($str)\n```\n\n----------------------------------------\n\nTITLE: Setting Private Key Path for Simple Commerce PayPal Integration\nDESCRIPTION: Specifies the server path to the private key file needed for encrypted PayPal transactions. Should be stored in a location not accessible via the web for security.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_129\n\nLANGUAGE: php\nCODE:\n```\n$config['sc_private_key'] = \"/path/to/private_key.pem\";\n```\n\n----------------------------------------\n\nTITLE: Displaying Field Errors in ExpressionEngine\nDESCRIPTION: This snippet showcases how to render errors specific to form fields using the {field_errors} tag pair. It is useful when inline error handling is preferred. The setup for inline handling of errors must be configured prior to using this tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n\n{field_errors}{error}{/field_errors}\n\n```\n\n----------------------------------------\n\nTITLE: Displaying RTF Text/Textarea Fields in ExpressionEngine Fluid Field\nDESCRIPTION: Shows the basic method for outputting the content of a Rich Text Format (RTF) or Textarea field (`my_textarea`) nested within a Fluid Field (`my_fluid_field`) using the `{content}` variable.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/fluid.md#2025-04-22_snippet_14\n\nLANGUAGE: ee\nCODE:\n```\n{my_fluid_field}\n  {my_fluid_field:my_textarea}\n    {content}\n  {/my_fluid_field:my_textarea}\n{/my_fluid_field}\n```\n\n----------------------------------------\n\nTITLE: Setting Error Return Template - ExpressionEngine Tag - ExpressionEngine Tag\nDESCRIPTION: Demonstrates how to define a template to return users to if validation errors occur using return_error. Supports error handling customization by specifying an appropriate template group.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/forgot-username.md#2025-04-22_snippet_5\n\nLANGUAGE: ExpressionEngine Tag\nCODE:\n```\nreturn_error=\"template_group/error\"\n```\n\n----------------------------------------\n\nTITLE: Generating a Custom Fieldtype with CLI in ExpressionEngine\nDESCRIPTION: Shows how to use ExpressionEngine's CLI tool to generate a new fieldtype file with proper naming conventions. The command creates the basic structure needed for a custom fieldtype.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/example.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ php system/ee/eecli.php make:fieldtype\nLet's implement a fieldtype!\nWhat is the fieldtype name? Amazing Fieldtype\nWhat add-on is the fieldtype being added to? [amazing_add_on]:  amazing_add_on\nBuilding fieldtype.\nFieldtype created successfully!\n```\n\n----------------------------------------\n\nTITLE: Calling insert_comment_end Hook in PHP\nDESCRIPTION: This snippet demonstrates how the insert_comment_end hook is called at the end of the comment inserting routine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/comment.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('insert_comment_end', $data, $comment_moderate, $comment_id);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Contributors Grid Layout HTML\nDESCRIPTION: HTML markup for displaying contributor profiles in a responsive grid layout using Tailwind CSS classes. Shows contributor avatars, names and GitHub links.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_31\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/194579?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Andy Johnson</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=ajohnson\" target=\"_BLANK\">@ajohnson</a></p></div></div></div></li>\n<!-- Additional contributor entries follow same pattern -->\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Supported Evaluation Rules for Conditional Fields in PHP\nDESCRIPTION: Various ways to configure which evaluation rules are supported by a fieldtype when used as a source for conditional fields.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/enhanced.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic $supportedEvaluationRules = null;\n\n// OR\n\npublic $supportedEvaluationRules = ['isEmpty', 'isNotEmpty', 'contains', 'notContains'];\n\n// AND\n\npublic $defaultEvaluationRule = 'contains';\n```\n\n----------------------------------------\n\nTITLE: Processing File Attachments with File Type Filtering in Moblog Templates in Markdown\nDESCRIPTION: Shows how to use the {files} tag pair with a match parameter to control which file types from attachments are processed. The 'match' attribute accepts file type patterns (pipe-separated), filtering output to only files matching those categories. The inner HTML uses the {file} variable for outputting file URLs, typically in an anchor tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n{files match=\"movie|files\"} <p>View the <a href=\"{file}\">presentation</a>.</p> {/files}\n```\n\n----------------------------------------\n\nTITLE: Inserting New Control Panel Log Entry with ExpressionEngine Model in PHP\nDESCRIPTION: This snippet shows how to create and persist a new control panel log entry in ExpressionEngine using the model API. It gathers user context (member_id, username, ip_address), sets the action message, and records the current time. Validation ensures the integrity of the data before saving the CpLog record. Dependencies include the ExpressionEngine environment and an authenticated session for accessing \\u0022ee()->session\\u0022 and \\u0022ee()->localize\\u0022.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/cp-log.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$log             = ee('Model')->make('CpLog');\n$log->member_id  = ee()->session->userdata('member_id');\n$log->username   = ee()->session->userdata('username');\n$log->ip_address = ee()->session->userdata('ip_address');\n$log->act_date   = ee()->localize->now;\n$log->action     = \"Your Message!\";\n\n// Validate and Save.\n$result = $log->validate();\n\nif ($result->isValid())\n{\n  $log->save();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Add-on Version in PHP\nDESCRIPTION: Specifies the `version` key within the `addon.setup.php` file. This key indicates the current version number of the add-on, preferably following Semantic Versioning (SemVer). It is a required field used for tracking updates and compatibility.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'version' => '2.0.0'\n```\n\n----------------------------------------\n\nTITLE: Paginate Block for Member List - ExpressionEngine Template/HTML\nDESCRIPTION: Shows a {paginate}...{/paginate} block that provides navigation for paging through long member lists. Includes variables for current/total pages and pagination links. Can be styled per site requirements.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_19\n\nLANGUAGE: ExpressionEngine Template Markup\nCODE:\n```\n{paginate}\n    <p>Page {current_page} of {total_pages} pages {pagination_links}</p>\n{/paginate}\n```\n\n----------------------------------------\n\nTITLE: Title Input Field Implementation - HTML\nDESCRIPTION: Required input field for setting an entry's title with character limits and live URL title generation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/inputs.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"title\">Title</label>\n<input type=\"text\" name=\"title\" id=\"title\" value=\"{title}\" size=\"50\" maxlength=\"100\" onkeyup=\"liveUrlTitle(event);\">\n```\n\n----------------------------------------\n\nTITLE: Generating a Dashboard Widget with EE CLI - Bash\nDESCRIPTION: This code snippet demonstrates how to generate a new Dashboard Widget named 'MyNewWidget' for an existing add-on by invoking the 'eecli.php' script via PHP. The '--addon' option specifies the target add-on directory. Usage requires PHP and the ExpressionEngine CLI tools installed, as well as an existing add-on named 'my_existing_addon'. The command will scaffold a new widget structure within the specified add-on folder.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/make-widget.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php make:widget MyNewWidget --addon=my_existing_addon\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fluid Field Component Data in PHP\nDESCRIPTION: Demonstrates fetching data for individual fields within an ExpressionEngine Fluid field for a given entry. It uses the `ee('Model')` service to query `fluid_field:FluidField` records, filtering by `entry_id` and the main `fluid_field_id`. Ordering by `order` is important to maintain sequence. The `all()` method retrieves the field objects. Methods like `pluck('field_id')` can extract specific attributes (like the contained field IDs), and `fetchFieldData()` retrieves the actual data associated with each contained field.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-entry.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$field_objects = ee('Model')\n                    ->get('fluid_field:FluidField')\n                    ->filter('entry_id', $entry_id) // The Entry ID\n                    ->filter('fluid_field_id', $fluid_field_id) // The fluid field in the entry.\n                    ->order('order') // Important to maintain the field order within the fluid field.\n                    ->all(); // Get all the individual fields within the fluid field.\n\n// Get an array of field IDs\n$field_objects->pluck('field_id'); // array(3, 45, 2, 5);\n\n// Get an array of data from each field within a Fluid fieldtype:\n$field_objects->fetchFieldData();\n```\n\n----------------------------------------\n\nTITLE: Implementing Status Menu Using status_menu Tag Pair\nDESCRIPTION: Demonstrates how to create a status selection dropdown menu using ExpressionEngine's status_menu tag pair which automatically generates status options.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/status.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{status_menu}\n  <p>Status<br>\n    <select name=\"status\">\n      {select_options}\n    </select>\n  </p>\n{/status_menu}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Populating a Table Field in ExpressionEngine (PHP)\nDESCRIPTION: This snippet demonstrates setting up a Table field in ExpressionEngine by configuring options, defining columns, customizing the no-results message, setting a base URL, adding data, and appending rows. Dependencies include a valid FieldSet object, ExpressionEngine CP Url, and the ExpressionEngine Table Field class. Key parameters are arrays defining options, columns, and data; a Url object for base url. The input consists of table data arrays, and the output is a configured Table field instance ready for rendering; inputs must be correctly structured as per requirements.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/cp-form/fields.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$table = $field_set->getField('my_table', 'table');\n\n$table->setOptions([\n    'lang_cols' => true,\n    'class' => 'product_channels'\n]);\n\n$table->setColumns([\n    'details' => ['sort' => false],\n    'value' => ['sort' => false],\n]);\n\n$table->setNoResultsText(sprintf(lang('no_found'), lang('product_channels')));\n$table->setBaseUrl( ee('CP/URL')->make($this->base_url ));\n$data = [];\n$data[] = [\n    'Hello',\n    'You',\n];\n\n$table->setData($data);\n$table->addRow([\n    'No, Hello',\n    'To You!',\n]);\n```\n\n----------------------------------------\n\nTITLE: Changing Module Name using ExpressionEngine Module Model in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a module by its current name, update its name, and save the changes using the ExpressionEngine Module Model. It uses the ee() function to access the Model service, filters the modules to find the one with the old name, updates the name, and saves the changes without requiring validation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/addon-module.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$module = ee('Model')\n            ->get('Module')\n            ->filter('module_name', 'Old Module Name')\n            ->first();\n\n$module->module_name = 'My New Module Name';\n\n// Validation would not check the name, so not required.\n$module->save();\n```\n\n----------------------------------------\n\nTITLE: Channel Form Submit Entry End Hook\nDESCRIPTION: Extension hook that fires when a Channel Form entry submission completes, providing access to the Channel Form library object.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/development.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('channel_form_submit_entry_end', $this);\n```\n\n----------------------------------------\n\nTITLE: Debug Mode Enable Configuration\nDESCRIPTION: Example of enabling debug mode in ExpressionEngine's index.php file to show PHP/SQL error messages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/general.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$debug = 1;\n```\n\n----------------------------------------\n\nTITLE: Testing User Email Domain\nDESCRIPTION: Shows how to test against the email domain of the logged in user.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_14\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if logged_in_email $= 'example.com'}  One of us! One of us!  {/if}\n```\n\n----------------------------------------\n\nTITLE: Using Pro Variables with Additional Data in Channel Entries\nDESCRIPTION: This example shows how to use the Pro Variables template tag to output additional data for a variable, such as its label and formatted content.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/fieldtype.md#2025-04-22_snippet_1\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:channel:entries channel=\"news\"}\n  <h2>{title}</h2>\n  {news_intro}\n  <div class=\"meta\">\n    <p>{exp:pro_variables:label var=\"{news_quote}\"}:</p>\n    <blockquote>{exp:pro_variables:single var=\"{news_quote}\" format=\"textile\"}</blockquote>\n  </div>\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Limiting Collections by Language - ExpressionEngine Template Tag\nDESCRIPTION: Demonstrates restricting the output of {exp:pro_search:collections} by the collection_lang parameter, limiting results to those matching a specific language code. Useful for multilingual setups in EE templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_24\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:collections collection_lang=\"en\"}\n```\n\n----------------------------------------\n\nTITLE: Pre-Purchase Action Hook Call in PHP\nDESCRIPTION: Shows the simple_commerce_perform_actions_start hook call that executes before ExpressionEngine's purchase processing. Receives the Simple Commerce object and store item database record.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/simple-commerce.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->universal_call('simple_commerce_perform_actions_start', $this, $query->row());\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Category Display Control with Show Parameter - markup\nDESCRIPTION: Uses the 'show' parameter to specify or exclude particular categories by ID from being displayed within the {categories} tag pair. Categories are listed using IDs separated by a pipe character.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_58\n\nLANGUAGE: markup\nCODE:\n```\n{categories show=\"4|7\"}\n{categories show=\"not 3|6|8\"}\n```\n\n----------------------------------------\n\nTITLE: Displaying Recent Comments with {exp:comment:entries} in ExpressionEngine\nDESCRIPTION: Demonstrates how to use the {exp:comment:entries} tag to display a list of recent comments, typically used in a site's sidebar. The example includes sorting, ordering, limiting, and disabling dynamic behavior.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_40\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:comment:entries sort=\"desc\" orderby=\"date\" limit=\"10\" dynamic=\"no\"}\n  {comment}\n  <p>\n    By {name} on {comment_date format=\"%Y %m %d\"}<br>\n    From the entry '<a href=\"{comment_url_title_auto_path}\">{title}</a>'.\n  </p>\n{/exp:comment:entries}\n```\n\n----------------------------------------\n\nTITLE: Setting the Return URL Parameter in ExpressionEngine\nDESCRIPTION: This snippet demonstrates the usage of the 'return=' parameter within an ExpressionEngine tag, likely the {exp:member:edit_avatar} tag. It specifies the URL path (member/profile) where the user should be redirected after the form submission is processed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-avatar.md#2025-04-22_snippet_1\n\nLANGUAGE: expressionengine\nCODE:\n```\nreturn=\"member/profile\"\n```\n\n----------------------------------------\n\nTITLE: Calling Before Channel Field Group Delete Hook in PHP\nDESCRIPTION: Example of how the before_channel_field_group_delete hook is called. This hook runs before a ChannelFieldGroup is deleted, allowing for pre-deletion processing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field-group.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_field_group_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Generating Paths for Templates with Assigned Routes in ExpressionEngine\nDESCRIPTION: Illustrates how to generate paths for templates that have assigned template routes, including passing segment values.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/routes.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n{route=\"template_group/template\" first_name=\"Enrico\" last_name=\"Fermi\"}\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Attributes to BBCode Links\nDESCRIPTION: Illustrates adding HTML attributes like 'class' to a BBCode URL tag. Safe HTML settings permit attributes such as rel, title, class, style, and target. Quotes are required for attribute values.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/bbcode.md#2025-04-22_snippet_1\n\nLANGUAGE: bbcode\nCODE:\n```\n[url=https://example.com/ class=\"link\"]my site[/url]\n```\n\n----------------------------------------\n\nTITLE: Filtering Comments by URL Title - ExpressionEngine Template\nDESCRIPTION: By specifying the url_title parameter, this code forces the comment entries tag to pull comments for a particular entry based on its URL title. Takes priority over dynamic URL-based entry detection.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_13\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\nurl_title=\"my_wedding\"\n```\n\n----------------------------------------\n\nTITLE: Listing Available Update Options - Plaintext\nDESCRIPTION: This snippet lists all command-line options accepted by the 'update' command for ExpressionEngine's CLI. No dependencies are required except access to a shell and the ExpressionEngine installation. The snippet comments on option purposes, such as '--rollback' for reverting updates and '--force-addon-upgrades' for addon-updater automation. No input is required beyond including the desired flags when running an update.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/update.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n    --rollback\n        Rollback last update\n\n    --verbose\n    -v\n        Verbose output\n\n    --microapp\n        Run as microapp\n\n    --step=<value>\n        command_update_option_step:\n\n    --no-bootstrap\n        Runs with no bootstrap\n\n    --force-addon-upgrades\n        Automatically runs all addon updaters at end of update (advanced)\n\n    -y\n        Skip all confirmations. Don't do this.\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of an ExpressionEngine Action Class\nDESCRIPTION: This PHP code shows the basic structure of an action class (`ExampleAction`) generated by the ExpressionEngine CLI. It extends `AbstractRoute` and contains a `process()` method where the action's logic should be implemented. The namespace corresponds to the add-on's structure.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace ExpressionengineDeveloper\\AmazingAddon\\Actions;\n\nuse ExpressionEngine\\Service\\Addon\\Controllers\\Action\\AbstractRoute;\n\nclass ExampleAction extends AbstractRoute\n{\n    public function process()\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling after_template_route_insert Hook\nDESCRIPTION: Extension hook called after inserting a template route object. Changes to the object will not be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-route.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_template_route_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: XML Encode with Protect Entities Parameter in ExpressionEngine\nDESCRIPTION: Demonstrates the use of the 'protect_entities' parameter in the XML Encode plugin. When set to 'yes', this parameter prevents existing HTML entities from being double-encoded.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/xml-encode.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{exp:xml_encode}\n    Text &amp; Entities\n{/exp:xml_encode}\n```\n\nLANGUAGE: html\nCODE:\n```\n{exp:xml_encode protect_entities=\"yes\"}\n    Text &amp; Entities\n{/exp:xml_encode}\n```\n\n----------------------------------------\n\nTITLE: Enabling Email Batch Mode in ExpressionEngine (PHP)\nDESCRIPTION: Controls whether emails are sent in batches to prevent server timeouts when sending to large mailing lists. Helps manage server load and avoid execution time limits.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n$config['email_batchmode'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Creating Mailto Links with Email Fields in Relationship Tags\nDESCRIPTION: Use email address fields within relationship tags to generate mailto links with specific title and subject parameters, without encoding.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_9\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{relationship_field}\\n    {relationship_field:my_email:mailto title=\\\"Email about their dog\\\" subject=\\\"Question about your dog\\\" encode=\\\"no\\\"}\\n{/relationship_field}\n```\n\n----------------------------------------\n\nTITLE: Querying for FULLTEXT Indexes in MySQL Database using SQL\nDESCRIPTION: SQL query to check for tables using FULLTEXT indexes within a specified MySQL database ('database_name'). This check is crucial before converting tables to InnoDB, as older InnoDB versions lacked FULLTEXT index support. Execution requires read access to the `information_schema` database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/converting-to-innodb.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT TABLE_SCHEMA, TABLE_NAME\nFROM information_schema.statistics\nWHERE TABLE_SCHEMA = 'database_name' AND index_type LIKE 'FULLTEXT%'\n```\n\n----------------------------------------\n\nTITLE: Calling before_file_update Hook in PHP\nDESCRIPTION: Illustrates the usage of the before_file_update hook in ExpressionEngine. This hook is triggered before a file object is updated, allowing for automatic saving of changes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/file.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_file_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Implementing Initializable Prolets in PHP\nDESCRIPTION: This snippet describes the implementation of Initializable Prolets, which only appear on specific pages where they have been initialized. It involves implementing `InitializableProletInterface` and utilizing `ee('pro:Prolet')->initialize()` in a conditional block to ensure compatibility with ExpressionEngine Pro versions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/prolets.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse ExpressionEngine\\Addons\\Pro\\Service\\Prolet;\n\nclass Sample_prolet_pro extends Prolet\\AbstractProlet implements Prolet\\InitializableProletInterface\n{\n    protected $name = 'Sample prolet';\n\n    public function index()\n    {\n        return 'Hello world!';\n    }\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\nif (defined('IS_PRO') && IS_PRO) {\n    ee('pro:Prolet')->initialize('sample_prolet', ['entry_id' => $entry_id]);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Base Path in ExpressionEngine (PHP)\nDESCRIPTION: Configures the site's base server path for use in other path configurations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$config['base_path'] = '/var/www/html/';\n```\n\n----------------------------------------\n\nTITLE: Unclosed if Statement Error\nDESCRIPTION: Shows an error where the closing {/if} tag is missing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_35\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if segment_1 == 'site'}HELLO WORLD\n```\n\n----------------------------------------\n\nTITLE: Illustrating Distinct Instances from Factory Calls in PHP\nDESCRIPTION: This commented-out line clarifies an important behavior of factories registered with the dependency container: each call to `make()` typically executes the factory and returns a completely new object instance. Therefore, `$u1`, `$u2`, and `$u3` are expected to reference different objects.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/architecture.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// $u1 != $u2 != $u3\n```\n\n----------------------------------------\n\nTITLE: Configuring Autosave Interval in ExpressionEngine (PHP)\nDESCRIPTION: Sets the time interval in seconds between automatic saves on the Publish Page.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$config['autosave_interval_seconds'] = '30';\n```\n\n----------------------------------------\n\nTITLE: Enabling Template File Saving in ExpressionEngine\nDESCRIPTION: Controls whether templates are saved as files on the server. Setting 'y' enables file-based template storage, while 'n' stores templates only in the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_122\n\nLANGUAGE: php\nCODE:\n```\n$config['save_tmpl_files'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Prefixed Configuration Item in PHP\nDESCRIPTION: Demonstrates accessing an add-on-specific configuration item using the `addonname:item` syntax. It retrieves the Config service via `ee('Config')` and calls its `get()` method with the prefixed item name.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/architecture.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nee('Config')->get('addonname:item');\n```\n\n----------------------------------------\n\nTITLE: Indicating Add-on Settings Existence in PHP\nDESCRIPTION: Specifies the `settings_exist` key within the `addon.setup.php` file. This boolean key indicates whether the add-on provides configurable settings accessible through the Add-On Manager. The default value is `FALSE`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n'settings_exist' => TRUE\n```\n\n----------------------------------------\n\nTITLE: Basic Channel Category Archive Implementation\nDESCRIPTION: Shows basic structure for displaying channel entries organized by category with titles and links\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h3>Category One</h3>\n<a href=\"www.mysite.com/1/\">title one</a><br />\n<a href=\"www.mysite.com/2/\">title two</a><br />\n<a href=\"www.mysite.com/3/\">title three</a><br />\n```\n\n----------------------------------------\n\nTITLE: Generating Channel Entries Templates in ExpressionEngine CLI\nDESCRIPTION: This command generates templates for channel entries using the ExpressionEngine CLI. It specifies the template group, templates to generate, and the channel to use.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/generators.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp system/ee/eecli.php generate:templates channel:entries --template_group=news --templates=all --channel=news\n```\n\n----------------------------------------\n\nTITLE: Calling the member_manager Extension Hook in PHP\nDESCRIPTION: This snippet demonstrates how the 'member_manager' extension hook is called within the ExpressionEngine Member Module. It allows for universal extension of Member Module functionality and provides a way to seize control over any user-side request.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/member.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$edata = ee()->extensions->universal_call('member_manager', $this);\nif (ee()->extensions->end_script === TRUE) return $edata;\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyword Search with Suggestions in ExpressionEngine\nDESCRIPTION: Example of a basic keyword search implementation with search suggestions and plural/singular matching. Includes form submission and results display with pagination and search suggestions when no results are found.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/examples.md#2025-04-22_snippet_0\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_search:form required=\"keywords\"}\n  <fieldset>\n    <input type=\"search\" name=\"keywords\" placeholder=\"Search this site...\">\n    <button type=\"submit\">Go</button>\n    {if pro_search_keywords_missing}<em>Keywords are required</em>{/if}\n  </fieldset>\n{/exp:pro_search:form}\n\n{exp:pro_search:results\n  query=\"{segment_3}\"\n  keywords:lang=\"en\"\n  keywords:inflect=\"yes\"\n  limit=\"10\"\n}\n  {if count == 1}\n    <p>\n      Searched for <strong>{pro_search_keywords}</strong>.\n      Search results: <strong>{absolute_results}</strong>\n    </p>\n  {/if}\n\n  <h3>{title}</h3>\n  <p>Found in {pro_search_collection_label}, with a score of {pro_search_score}</p>\n  <p>{pro_search_excerpt}</p>\n  <p><a href=\"{auto_path}\">{auto_path}</a></p>\n\n  {paginate}\n    {current_page}/{total_pages} | {pagination_links}\n  {/paginate}\n\n  {if pro_search_no_results}\n    <p>\n      No results for \"{pro_search_keywords}\".\n      {exp:pro_search:suggestions keywords=\"{pro_search_keywords}\" keywords:lang=\"en\" limit=\"2\"}\n        {if suggestion_count == 1}Did you mean{/if}\n        <a href=\"{pro_search:url keywords=\"{suggestion}\"}\">{suggestion}</a>{if suggestion_count != total_suggestions}&nbsp;or&nbsp;{if:else}?{/if}\n        {if no_suggestions}Check your spelling or try a different search term.{/if}\n      {/exp:pro_search:suggestions}\n    </p>\n  {/if}\n{/exp:pro_search:results}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Inclusion for Form Groups\nDESCRIPTION: Required JavaScript inclusion to enable form group toggle functionality.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/shared-form-view.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nee()->cp->add_js_script(array(\n  'file' => array('cp/form_group'),\n));\n```\n\n----------------------------------------\n\nTITLE: Calling Before Template Snippet Save Hook in PHP\nDESCRIPTION: This code shows how the 'before_template_snippet_save' hook is called in ExpressionEngine. It passes the current TemplateSnippet model object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-snippet.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_template_snippet_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Using Foreach Loop with Alternative Syntax in PHP\nDESCRIPTION: Shows how to use the alternative syntax for a foreach loop in PHP, eliminating braces and using colon and endforeach.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/view-php-syntax.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<ul>\n    <?php foreach($todo as $item): ?>\n        <li><?=$item?></li>\n    <?php endforeach; ?>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Filters in PHP\nDESCRIPTION: Shows how to add multiple filters to the CP/Filter Service using method chaining.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/filter.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$filters = ee('CP/Filter')->add('Date')\n  ->add('Site')\n  ->add('Perpage', count($items));\n```\n\n----------------------------------------\n\nTITLE: Embed Table in Shared View - ExpressionEngine PHP\nDESCRIPTION: This snippet embeds the table in a shared view template using PHP syntax. The table is passed to the 'ee:_shared/table' view for rendering.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/table.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php $this->embed('ee:_shared/table', $table); ?>\n```\n\n----------------------------------------\n\nTITLE: Filtering by First Letter Using Pro Search and Low List - ExpressionEngine - HTML\nDESCRIPTION: Implements a search form with radio buttons for A-Z, filtering entries where their title starts with the selected letter. Utilizes the 'Low List' add-on within the 'pro_search:form' to generate an alphabet set, and submits the selected initial letter as a parameter to results, which are filtered via the 'starts_with' parameter. Dependencies include the Pro Search and Low List add-ons. Inputs are the selected radio letter; outputs are the entries starting with that letter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/examples.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:form query=\"{segment_3}\"}\n  {exp:low_list:each items=\"A|Z\" as=\"letter\" range=\"yes\"}\n    <label>\n      <input type=\"radio\" name=\"search:title\" value=\"{letter}\"{if letter == pro_search_search:title} checked{/if}>\n      {letter}\n    </label>\n  {/exp:low_list:each}\n  <button type=\"submit\">Go</button>\n{/exp:pro_search:form}\n```\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:results\n  query=\"{segment_3}\"\n  starts_with=\"search:title\"\n  channel=\"people\"\n}\n  ...\n{/exp:pro_search:results}\n```\n\n----------------------------------------\n\nTITLE: Outputting Date Variable with Custom Format in ExpressionEngine\nDESCRIPTION: Demonstrates how to output a Date variable type using the pro_variables:single tag with custom date formatting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/type.md#2025-04-22_snippet_0\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_variables:single var=\"my_var\" format=\"%Y-%m-%d\"}\n```\n\n----------------------------------------\n\nTITLE: Specifying Password Reset URL in ExpressionEngine Form\nDESCRIPTION: Shows how to set the `password_reset_url` parameter for the `exp:member:forgot_password_form` tag. This defines the URL base (e.g., 'member/reset-password') that will be included in the password reset email, followed by the unique reset hash.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/forgot-password.md#2025-04-22_snippet_3\n\nLANGUAGE: ee\nCODE:\n```\npassword_reset_url=\"member/reset-password\"\n```\n\n----------------------------------------\n\nTITLE: Checking User's Forum Post Count\nDESCRIPTION: Shows how to test against the total number of forum posts by the user.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_27\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if logged_in_total_forum_posts > 1000}  Loquacious aren't we?  {/if}\n```\n\n----------------------------------------\n\nTITLE: Checking for Specific User Role\nDESCRIPTION: Shows how to check if a logged in user has a specific role, including secondary roles.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_19\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if has_role_editor} Logged in with editor permissions {/if}\n```\n\n----------------------------------------\n\nTITLE: Updating FluidField Hook Call\nDESCRIPTION: Extension hook called before updating an existing fluid field. Allows modification of field values before update.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/fluid-field.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('fluid_field_update_field', $field_table_name, $values);\n```\n\n----------------------------------------\n\nTITLE: Default ExpressionEngine URL Format\nDESCRIPTION: Shows the default, search-engine friendly URL format used by ExpressionEngine when 'Force URL query strings?' is disabled. Segments are passed directly in the URL path without an explicit query string marker.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/settings/debug-output.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://example.com/channel/joe/\n```\n\n----------------------------------------\n\nTITLE: Configuring Member List Sort Order\nDESCRIPTION: Sets the default sort order for the member list display.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_100\n\nLANGUAGE: php\nCODE:\n```\n$config['memberlist_sort_order'] = 'desc';\n```\n\n----------------------------------------\n\nTITLE: Checking for Consent Response Status in ExpressionEngine\nDESCRIPTION: This complex example demonstrates how to check if a user has responded to a consent request, and conditionally display either the consent request form or content based on their response. It uses the has_responded prefix and consent request module.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/consent.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{if ! consent:has_responded:my_cool_widget}\n  {exp:consent:requests consent='my_cool_widget'}\n    <h1>{consent_title}</h1>\n    <div>{consent_request}</div>\n\n    <ul>\n      <li><a href=\"{consent_grant_url}\">Allow</a></li>\n      <li><a href=\"{consent_withdraw_url}\">Decline</a></li>\n    </ul>\n  {/exp:consent:requests}\n{/if}\n\n{if consent:my_cool_widget}\n  {exp:my_cool_widget:display}\n    {!-- this is super cool! --}\n  {/exp:my_cool_widget}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Setting No Results Text for FolderList in PHP\nDESCRIPTION: Defines the text message to display if the associated list(s) within the `FolderList` are empty. Returns the `FolderList` instance (`$this`) for method chaining.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nwithNoResultsText($msg)\n```\n\n----------------------------------------\n\nTITLE: Embedding Templates in ExpressionEngine\nDESCRIPTION: Shows how to embed one template within another to reuse page components. This is useful for headers, footers, and other repeated elements.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/language.md#2025-04-22_snippet_6\n\nLANGUAGE: ee\nCODE:\n```\n{embed=\"template_group/template\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Ban Settings in ExpressionEngine (PHP)\nDESCRIPTION: Sets up IP banning behavior including action, destination and message.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$config['ban_action'] = 'message';\n$config['ban_destination'] = 'https://www.example.com';\n$config['ban_message'] = 'This site is currently unavailable.';\n```\n\n----------------------------------------\n\nTITLE: Calling after_file_save Hook in PHP\nDESCRIPTION: Illustrates the usage of the after_file_save hook in ExpressionEngine. This hook is called after a file object is inserted or updated, but changes are not automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/file.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_file_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Range Context for DOM Manipulation - HTML\nDESCRIPTION: This snippet shows a sample of HTML markup intended to illustrate how user selection maps to the DOM structure. The code demonstrates nested elements (<div>, <p>, <span>, <em>) and shows realistic scenarios for range selection in a rich text editor. There are no dependencies or external libraries required for this HTML fragment, and it's intended for demonstration and explanation of selection positions within DOM nodes. Inputs: none explicitly; Output: renders content whose structure is analyzed for selection.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/rangesandselections.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div><p><span>Look at </span><em>me</em> still talking</p><p><span>when there's Science to do!</span><p></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Control Panel Session Type in ExpressionEngine\nDESCRIPTION: Determines the method for session handling in the Control Panel. Options include cookies only, session ID only, or both (default). This affects how user sessions are maintained.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$config['cp_session_type'] = 's';\n```\n\n----------------------------------------\n\nTITLE: Header Template Structure\nDESCRIPTION: Example of a basic header template structure\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/layouts.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>News Site</title>\n  </head>\n  <body>\n```\n\n----------------------------------------\n\nTITLE: Displaying Relationship Fields in ExpressionEngine Fluid Field\nDESCRIPTION: Demonstrates iterating through entries selected in a Relationship field (`my_relationship`) nested within a Fluid Field (`my_fluid_field`) using the `{content}` variable pair. It shows accessing fields within the related entries (like `{content:title}` and `{content:my_file:med wrap=\"image\"}`) and accessing fields within nested relationships (`{content:my_related_field_in_child_entry}`). It also uses relationship-specific variables like `{content:count}` and `{content:total_results}` and the `status` parameter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/fluid.md#2025-04-22_snippet_13\n\nLANGUAGE: ee\nCODE:\n```\n{my_fluid_field}\n  {my_fluid_field:my_relationship}\n    {content status=\"open\"}\n      {if content:count == 1}<h3>Relationships ({content:total_results})</h3>{/if}\n\n      Related entry title: {content:title}\n      Related entry file field, med custom image size: {content:my_file:med wrap=\"image\"}\n\n      Related field in the related child entry:\n      {content:my_related_field_in_child_entry}\n        {content:cmy_related_field_in_child_entry:title}\n      {/content:my_related_field_in_child_entry}\n    {/content}\n  {/my_fluid_field:my_relationship}\n{/my_fluid_field}\n```\n\n----------------------------------------\n\nTITLE: ExpressionEngine URL Title Variable for Preview URL\nDESCRIPTION: The `{url_title}` variable can be used within the 'Preview URL' setting. ExpressionEngine replaces this variable with the specific entry's URL title when generating the live preview link.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/channels.md#2025-04-22_snippet_7\n\nLANGUAGE: expressionengine\nCODE:\n```\n{url_title}\n```\n\n----------------------------------------\n\nTITLE: Adding Row to CSV Using Array Method\nDESCRIPTION: Shows how to add a single row of data to a CSV instance using an associative array format.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/csv.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$csv->addRow(array(\n  'email' => 'team at example dot com',\n  'title' => 'Example Team'\n));\n```\n\n----------------------------------------\n\nTITLE: Dynamic Embed Variables in ExpressionEngine\nDESCRIPTION: Shows how to set embed variables dynamically using other ExpressionEngine tags, in this case within a channel entries loop.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/embedding.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:entries channel=\"default_site\" limit=\"1\"}\n    {embed=\"site/export\" the_id=\"{entry_id}\"}\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Setting backspace Parameter in ExpressionEngine Member List - ExpressionEngine Template\nDESCRIPTION: Demonstrates how to use the backspace parameter for member list output, allowing the removal of trailing characters from the last iteration of the loop or tag pair. No dependencies beyond ExpressionEngine template parser. The parameter accepts a numeric value specifying the number of characters to remove.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine Template Markup\nCODE:\n```\nbackspace=\"3\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Thumbnails with Width Variable in Moblog Templates in Markdown\nDESCRIPTION: This example demonstrates the use of the {thumb_width} Moblog variable for setting the width of a generated thumbnail image within an HTML <img> element. The snippet is meant for Moblog template customizations and expects the Moblog parser to translate the template variables appropriately.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n{images} <img src=\"{thumbnail}\" width=\"{thumb_width}\" height=\"{thumb_height}\" alt=\"thumbnail image\" /> {/images}\n```\n\n----------------------------------------\n\nTITLE: Calling the file_after_save Hook in ExpressionEngine (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to invoke the 'file_after_save' extension hook using ExpressionEngine's internal extensions system. It sends the file ID and an array containing file data to all registered hooks, enabling custom actions after saving a file. If any hook sets 'end_script' to TRUE, the function returns early, preventing further processing.\nPrerequisites: ExpressionEngine CMS installation and proper extension registration. Key parameters are the file's ID and data array; no output is expected, as the hook is for side-effects.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/filemanager.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->extensions->call('file_after_save', $file_id, $data);\nif ($this->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Logout Path Variable\nDESCRIPTION: Demonstrates the logout path variable usage for creating logout links.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/path.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{path='logout'}\n```\n\n----------------------------------------\n\nTITLE: Populating ExpressionEngine List Field Options with Value-Label Pairs (PHP)\nDESCRIPTION: Demonstrates populating list field options using an associative array of value-label pairs. It retrieves the field's current settings, merges the `value_label_pairs` array into the `field_settings`, and updates the field using `setProperty()`. Requires validation and saving.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-field.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n```php\n// populate with value-labels pairs\n$checkboxes_settings = array(\n\t\t    'value_label_pairs' => array('winner' => 'first', 'player' => 'second', 'loser' => 'third')\n\t\t\t);\n// change field settings\n$changing_settings = $field->getSettingsValues()['field_settings'];\nforeach ($checkboxes_settings as $s => $s_value) {\n\t\t\t$changing_settings[$s] = $s_value;\n\t\t}\n$field->setProperty('field_settings', $changing_settings);\n// Validate and Save.\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Required Language Strings for an ExpressionEngine Add-on in PHP\nDESCRIPTION: This PHP snippet shows the basic structure of an ExpressionEngine add-on language file (`addon_name_lang.php`). It defines the `$lang` array, which must include keys for the add-on's name (`'my_module_module_name'`) and description (`'my_module_module_description'`) to be displayed on the Modules page. Additional key-value pairs for other localized text within the add-on can be added.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/add-on-language-files.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$lang = array(\n\n// Required for MODULES page\n\n'my_module_module_name'     => 'Module Name',\n'my_module_module_description'  => 'Brief description of the module- displayed on the Modules page',\n\n//----------------------------------------\n\n// Additional Key => Value pairs go here\n\n// END\n''=>''\n);\n```\n\n----------------------------------------\n\nTITLE: Compiling URL Objects into Strings - PHP\nDESCRIPTION: This snippet illustrates using the `compile()` method to convert a CP/URL object into a string in situations where the object is needed as a string. This is particularly useful for JSON encoding or when using URLs as array keys.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/url.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$breadcrumb = array(\n  ee('CP/URL', 'addons/settings/fortune_cookie')->compile() => lang('fortune_cookie_management')\n);\n```\n\nLANGUAGE: php\nCODE:\n```\nee()->javascript->set_global(array(\n  'fortune_cookie.autosave.URL' => ee('CP/URL', 'addons/settings/fortune_cookie/autosave/')->compile()\n));\n```\n\n----------------------------------------\n\nTITLE: Setting Depth for Relative Dates in ExpressionEngine\nDESCRIPTION: Examples of using the depth parameter to display multiple units in relative dates. When depth=2, units are joined with 'and', while depth>2 uses commas.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/date-variable-formatting.md#2025-04-22_snippet_8\n\nLANGUAGE: expressionengine\nCODE:\n```\n{entry_date:relative depth=\"2\"}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{entry_date:relative depth=\"3\"}\n```\n\n----------------------------------------\n\nTITLE: Setting No Results Text for GridInput in PHP\nDESCRIPTION: Sets the 'no results' message and button label for the GridInput.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/table.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$grid->setNoResultsText('no_manipulations', 'add_manipulation');\n```\n\n----------------------------------------\n\nTITLE: Adding Fields to a Channel Field Group in PHP\nDESCRIPTION: Demonstrates how to add multiple Channel Fields to an existing Channel Field Group.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-field-group.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$group = ee('Model')->get('ChannelFieldGroup', 2)->first();\n\n// Get the Field Objects.  Note the plural differences.\n$group->ChannelFields = ee('Model')->get('ChannelField', array(4,5,6))->all();\n\n// Validate and Save.\n$result = $field->validate();\n\nif ($result->isValid())\n{\n  $field->save();\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Contributors Display\nDESCRIPTION: HTML markup for displaying contributor information in a responsive grid layout with avatars, names, and GitHub links. This structure is repeated across multiple version sections.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/1181219?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">robinsowell</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=robinsowell\" target=\"_BLANK\">@robinsowell</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/23382425?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yulya Lebed</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=Yulyaswan\" target=\"_BLANK\">@Yulyaswan</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calling before_category_group_save Hook in PHP\nDESCRIPTION: Example of how the before_category_group_save hook is called. This hook is triggered before a category group is saved (either inserted or updated) in the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-group.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_category_group_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Configuring Add-on Tabs in ExpressionEngine PHP\nDESCRIPTION: The `tabs` function provides a configuration for adding publish page tabs. It returns a multidimensional associative array specifying tab names and their field properties like visibility, collapsibility, and width. This setup assists in integrating functional and informational tabs within publish layouts.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/add-on-update-file.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction tabs()\n{\n    $tabs['tab_name'] = array(\n        'field_name_one'=> array(\n            'visible'   => 'true',\n            'collapse'  => 'false',\n            'htmlbuttons'   => 'true',\n            'width'     => '100%'\n            ),\n        'field_name_two'=> array(\n            'visible'   => 'true',\n            'collapse'  => 'false',\n            'htmlbuttons'   => 'true',\n            'width'     => '100%'\n            ),\n        );\n\n    return $tabs;\n}\n```\n\n----------------------------------------\n\nTITLE: Calling the pagination_fetch_data Extension Hook in PHP\nDESCRIPTION: Code showing how the pagination_fetch_data extension hook is called within the ExpressionEngine Pagination library. This hook works in conjunction with pagination_create to allow modification of the rendered {paginate} tagdata.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/pagination.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->extensions->call('pagination_fetch_data', $this);\nif ($this->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Online User Tracking Configuration in PHP\nDESCRIPTION: Enables or disables tracking of online user statistics.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_65\n\nLANGUAGE: php\nCODE:\n```\n$config['enable_online_user_tracking'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Setting Category Parent Assignment in ExpressionEngine (PHP)\nDESCRIPTION: Configuration for automatically assigning entries to parent categories when a child category is selected.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$config['auto_assign_cat_parents'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Checking Accept Email Condition with If Statement - ExpressionEngine Conditional\nDESCRIPTION: Uses an {if ...}{/if} block to only render content (e.g., email link) if the member allows receiving emails. The enclosing markup can be HTML or tags for email actions. Useful for conditional feature display.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_18\n\nLANGUAGE: ExpressionEngine Template Markup\nCODE:\n```\n{if accept_email}\n    <a href=\"#\" {email_console}>Email Console</a>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Displaying Duration Field Value in ExpressionEngine Template\nDESCRIPTION: Example of displaying a duration field in an ExpressionEngine template. This shows how the duration value is output with default formatting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/duration.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLap 1: {duration}\n{!-- Lap 1: 5:33 --}\n```\n\n----------------------------------------\n\nTITLE: Delete Method for Tab Data in PHP\nDESCRIPTION: Manages cleaning up of data tied to entries that are being deleted. This method ensures that any records associated with deleted entries are also purged effectively.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/tab-files.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    public function delete($entry_ids){\n\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Before Comment Update Hook Call\nDESCRIPTION: Extension hook called before a comment is updated. Allows modifying the comment object before changes are saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/comment.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_comment_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Configuring CAPTCHA URL in ExpressionEngine (PHP)\nDESCRIPTION: Sets the full URL to the directory containing CAPTCHA images.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$config['captcha_url'] = 'https://www.example.com/images/captchas';\n```\n\n----------------------------------------\n\nTITLE: Filtering Entries by Specific IDs in ExpressionEngine\nDESCRIPTION: The `entry_id` parameter filters the channel entries tag to show only specific entries. Provide a single ID, multiple IDs separated by pipes (`|`), or use `not` followed by pipe-separated IDs to exclude specific entries. Setting the parameter to no value (`entry_id=\"\"`) causes it to be ignored.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_9\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\nentry_id=\"147\"\n```\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\nentry_id=\"13|42|147\"\n```\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\nentry_id=\"not 45|534|807\"\n```\n\n----------------------------------------\n\nTITLE: Running Migrations for All Add-ons - PHP\nDESCRIPTION: Use these commands to execute migrations for all add-ons within ExpressionEngine. The `--addons` option targets all extension migrations, facilitating broad updates across all installed add-ons.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/migrate.md#2025-04-22_snippet_4\n\nLANGUAGE: CLI\nCODE:\n```\nphp eecli.php migrate --addons\n```\n\nLANGUAGE: CLI\nCODE:\n```\nphp eecli.php migrate:addon --all\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mini-Calendar with ExpressionEngine Calendar Tag\nDESCRIPTION: This snippet demonstrates how to create a minimal calendar that displays days as links when entries exist. It includes navigation to previous/next months and proper date formatting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/calendar.md#2025-04-22_snippet_0\n\nLANGUAGE: ee\nCODE:\n```\n{exp:channel:calendar switch=\"calendarToday|calendarCell\"}\n\n<table class=\"calendarBG\" border=\"0\" cellpadding=\"6\" cellspacing=\"1\" summary=\"My Calendar\">\n    <tr class=\"calendarHeader\">\n        <th>\n            <div class=\"calendarMonthLinks\"><a href=\"{previous_path='channel/index'}\">&lt;&lt;</a>\n            </div>\n        </th>\n        <th colspan=\"5\">\n            {date format=\"%F %Y\"}\n        </th>\n        <th>\n            <div class=\"calendarMonthLinks\">\n                <a class=\"calendarMonthLinks\" href=\"{next_path='channel/index'}\">&gt;&gt;</a>\n            </div>\n        </th>\n    </tr>\n    <tr>\n    {calendar_heading}\n    <td class=\"calendarDayHeading\">{lang:weekday_abrev}</td>\n    {/calendar_heading}\n    </tr>\n    {calendar_rows}\n        {row_start}<tr>{/row_start}\n        {if entries}\n            <td class='{switch}' align='center'><a href=\"{day_path='channel/index'}\">{day_number}</a>\n            </td>\n        {/if}\n        {if not_entries}\n            <td class='{switch}' align='center'>{day_number}</td>\n        {/if}\n        {if blank}\n            <td class='calendarBlank'>{day_number}</td>\n        {/if}\n        {row_end}</tr>{/row_end}\n    {/calendar_rows}\n    </table>\n{/exp:channel:calendar}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Structured documentation for ExpressionEngine Fieldtype Bridge, including file header comments, available properties, and method descriptions for Pro Variables integration.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/development/fieldtype-bridge.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\n    This source file is part of the open source project\n    ExpressionEngine User Guide (https://github.com/ExpressionEngine/ExpressionEngine-User-Guide)\n\n    @link      https://expressionengine.com/\n    @copyright Copyright (c) 2003-2020, Packet Tide, LLC (https://packettide.com)\n    @license   https://expressionengine.com/license Licensed under Apache License, Version 2.0\n-->\n\n# Fieldtype Bridge\n----------------\n\nTo make your fieldtype compatible with Pro Variables, you can choose to return `TRUE` for the content type `pro_variables` in your `accepts_content_type` method. You can also use specific methods which are called. As a rule, these methods are named `var_x`, where `x` is the original method name.\n```\n\n----------------------------------------\n\nTITLE: After Template Group Bulk Delete Hook Call\nDESCRIPTION: Extension hook called after bulk deleting template groups. Useful for expensive operations that should be handled in bulk.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-group.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_template_group_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Generating Grant Consent Link with Optional Redirect - ExpressionEngine Template\nDESCRIPTION: These snippets show how to create a hyperlink that allows a user to grant consent for a specific request, using the {consent_grant_url} variable. The second variant demonstrates passing an optional return= parameter to change the redirection page after action. Insert these anchor elements inside consent-related template loops. The Grant URL is auto-generated by ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/consent.md#2025-04-22_snippet_9\n\nLANGUAGE: expressionengine-template\nCODE:\n```\n<a href=\"{consent_grant_url}\">Grant</a>\n```\n\nLANGUAGE: expressionengine-template\nCODE:\n```\n<a href=\"{consent_grant_url return='preferences/saved'}\">Grant</a>\n```\n\n----------------------------------------\n\nTITLE: Calling the relationships_modify_rows Hook in PHP\nDESCRIPTION: This code demonstrates the call to the relationships_modify_rows hook. It allows developers to modify or add to the relationship rows right before parsing happens.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/relationships.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$rows = ee()->extensions->call('relationships_modify_rows', $rows, $node);\n```\n\n----------------------------------------\n\nTITLE: Defining Add-on Author in PHP\nDESCRIPTION: Specifies the `author` key within the `addon.setup.php` file. This key holds the name of the company or individual responsible for the add-on. It is a required field used for attribution and filtering in the ExpressionEngine Add-On Manager.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'author' => 'Example, Inc'\n```\n\n----------------------------------------\n\nTITLE: Checking if Path is File in PHP\nDESCRIPTION: Checks if the given `$path` string points to an existing file. Returns `TRUE` if it's a file, `FALSE` otherwise. Requires the path string as input.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/filesystem.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nisFile($path)\n```\n\n----------------------------------------\n\nTITLE: Forum Topics Loop End Hook Implementation\nDESCRIPTION: Extension hook called after processing each forum topic row but before appending to output. Allows final modifications to processed topic content.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/forum.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$temp = ee()->extensions->universal_call('forum_topics_loop_end', $this, $query->result(), $row, $temp);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Formatting Duration Output with Custom Parameters in ExpressionEngine\nDESCRIPTION: Example of using the format parameter to customize how a duration is displayed in an ExpressionEngine template. This allows for more specific display of hours, minutes, and seconds.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/duration.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nRunning length: {duration format=\"%h hrs, %m min\"}\n{!-- Running length: 2 hrs, 15 min --}\n```\n\n----------------------------------------\n\nTITLE: Calling before_category_bulk_delete Hook in PHP\nDESCRIPTION: This code demonstrates how the before_category_bulk_delete hook is called. It passes an array of primary key IDs of the models being deleted as a parameter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_category_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Creating Image Tags with Wrap Parameter in ExprEngine\nDESCRIPTION: Shows how to use the wrap parameter to generate an HTML image tag in ExpressionEngine templates, using the file's name as the alt attribute.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/file.md#2025-04-22_snippet_3\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{news_image wrap=\"image\"}\n```\n\n----------------------------------------\n\nTITLE: Terminal Styling Options\nDESCRIPTION: Lists available styling options for text in terminal output, including text colors, background colors, and text styles in POSIX terminals. It's essential to always reset styles to avoid persistent formatting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/displaying-output.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nreset       reset display to defaults\\n\\nblack       black text\\nred         red text\\ngreen       green text\\nyellow      yellow text\\nblue        blue text\\nmagenta     magenta (purple) text\\ncyan        cyan (light blue) text\\nwhite       white text\\n\\nblackbg     black background\\nredbg       red background\\ngreenbg     green background\\nyellowbg    yellow background\\nbluebg      blue background\\nmagentabg   magenta (purple) background\\ncyanbg      cyan (light blue) background\\nwhitebg     white background\\n\\nbold        bold in the current text and background colors\\ndim         dim in the current text and background colors\\nul          underline in the current text and background colors\\nblink       blinking in the current text and background colors\\nreverse     reverse the current text and background colors\n```\n\n----------------------------------------\n\nTITLE: Conditionally Showing Content for Expired Comments in ExpressionEngine\nDESCRIPTION: Uses the `{if comments_expired}` conditional tag. The content enclosed within this pair will be displayed if commenting for the entry has expired, unless expiration is overridden by moderation settings. Note: `{if no_results}` takes precedence.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_33\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{if comments_expired} content {/if}\n```\n\n----------------------------------------\n\nTITLE: Disabling IP and User Agent Requirements for Login in ExpressionEngine\nDESCRIPTION: Controls whether users must have a valid IP address and browser user agent when logging in, which helps prevent hackers from using direct socket connections or masked IP addresses.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_117\n\nLANGUAGE: php\nCODE:\n```\n$config['require_ip_for_login'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: Accessing a Registered Service via DI Container in PHP\nDESCRIPTION: Shows how to access a service registered via the `services` key in `addon.setup.php` from within an ExpressionEngine add-on's code. It uses the `ee()` helper function with the add-on's short package name and the service alias defined in the setup file.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nee('example:MyService');\n```\n\n----------------------------------------\n\nTITLE: Resetting Search Query Inheritance in URL Tags - ExpressionEngine Template Tag\nDESCRIPTION: This snippet disables the inheritance of the current search query when generating a URL using {exp:pro_search:url} and the reset parameter. Useful for starting a fresh query context in template-generated links.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_15\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:url reset=\"yes\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring PayPal Certificate Path for Simple Commerce\nDESCRIPTION: Sets the server path to the PayPal-provided certificate file used for encrypted transactions. For security, it's recommended to store this above web root.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_128\n\nLANGUAGE: php\nCODE:\n```\n$config['sc_paypal_certificate'] = \"/path/to/paypal_certificate.pem\";\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in ExpressionEngine Configurations\nDESCRIPTION: This code snippet shows how to use previously defined environment variables within the `config.php` of ExpressionEngine. Values such as database host and base URL are configured using `_ENV` array, helping in centralizing and manipulating settings easily. It includes settings for app version, encryption keys, and database connection details.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/advanced-usage/env-support.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');\\n\\n$config['save_tmpl_files'] = 'y';\\n\\n$config['base_url'] = $_ENV['BASE_URL'];\\n$config['site_url'] = $config['base_url'];\\n\\n$config['app_version'] = '7.5.8';\\n$config['encryption_key'] = 'bb748b72de235352315122d00';\\n$config['session_crypt_key'] = '985796e4444444563463e2c80242';\\n\\n$config['database'] = array(\\n\\t'expressionengine' => array(\\n\\t\\t'hostname' => $_ENV['DB_HOSTNAME'],\\n\\t\\t'database' => $_ENV['DB_DATABASE'],\\n\\t\\t'username' => $_ENV['DB_USERNAME'],\\n\\t\\t'password' => $_ENV['DB_PASSWORD'],\\n\\t\\t'dbprefix' => 'exp_',\\n\\t\\t'char_set' => 'utf8mb4',\\n\\t\\t'dbcollat' => 'utf8mb4_unicode_ci',\\n\\t\\t'port'     => $_ENV['DB_PORT'],\\n\\t),\\n);\\n$config['show_ee_news'] = 'y';\\n\\n// EOF\n```\n\n----------------------------------------\n\nTITLE: Embedding Images with BBCode\nDESCRIPTION: Provides the BBCode syntax for displaying an image within the content by specifying the image URL.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/bbcode.md#2025-04-22_snippet_3\n\nLANGUAGE: bbcode\nCODE:\n```\n[img]https://example.com/pic.jpg[/img]\n```\n\n----------------------------------------\n\nTITLE: Specifying Fieldtype Usage Context in PHP\nDESCRIPTION: Demonstrates the `use` array within a fieldtype definition in `addon.setup.php`. This array lists additional ExpressionEngine model names (like `MemberField` for Custom Member Fields) where the custom fieldtype can be utilized, beyond the default Channel Fields.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n'use' => array(\n  'MemberField'\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Evaluation Rules in Fieldtype Class in PHP\nDESCRIPTION: Code snippet showing how to enable custom evaluation rules in a fieldtype class by listing their names in the supportedEvaluationRules property.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/enhanced.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic $supportedEvaluationRules = ['turnedOn', 'turnedOff'];\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Results Display in ExpressionEngine Templates\nDESCRIPTION: Example template showing how to display search results in a table format with pagination. This snippet demonstrates common elements like title, excerpt, author, date, and comment information along with pagination controls.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/search/results.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table border=\"0\" cellpadding=\"6\" cellspacing=\"1\" width=\"100%\">\n    <tr>\n        <th>{lang:title}</th>\n        <th>{lang:excerpt}</th>\n        <th>{lang:author}</th>\n        <th>{lang:date}</th>\n        <th>{lang:total_comments}</th>\n        <th>{lang:recent_comments}</th>\n    </tr>\n\n{exp:search:search_results}\n\n    <tr class=\"{switch=\"resultRowOne|resultRowTwo\"}\">\n        <td width=\"30%\" valign=\"top\"><b><a href=\"{auto_path}\">{title}</a></b></td>\n        <td width=\"30%\" valign=\"top\">{excerpt}</td>\n        <td width=\"10%\" valign=\"top\"><a href=\"{member_path='member/index'}\">{author}</a></td>\n        <td width=\"10%\" valign=\"top\">{entry_date format=\"%m/%d/%y\"}</td>\n        <td width=\"10%\" valign=\"top\">{comment_total}</td>\n        <td width=\"10%\" valign=\"top\">{recent_comment_date format=\"%m/%d/%y\"}</td>\n    </tr>\n\n    {if count == total_results}\n        </table>\n    {/if}\n\n    {paginate}\n        <p>Page {current_page} of {total_pages} pages {pagination_links}</p>\n    {/paginate}\n\n{/exp:search:search_results}\n\n</table>\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Template Using ExpressionEngine Model in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a template object from the ExpressionEngine database using the Model service's \\'get\\' and \\'filter\\' methods in PHP. It requires the ExpressionEngine CMS and Model service to be available. The parameter \\'template_id\\' specifies the template to fetch, and the output is a Template model instance if found, otherwise null.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/template.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n$template = ee('Model')->get('Template')->filter('template_id', 6)->first();\\n?>\n```\n\n----------------------------------------\n\nTITLE: Displaying Pro Search Results Using a Query or Shortcut in ExpressionEngine\nDESCRIPTION: Demonstrates the `exp:pro_search:results` ExpressionEngine tag used to display search results. It shows how the tag can accept either an encoded search query via the `query` parameter or a saved shortcut name via the `shortcut` parameter. Both parameters are shown dynamically pulling their value from the second URL segment (`{segment_2}`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/shortcuts.md#2025-04-22_snippet_1\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_search:results query=\"{segment_2}\" shortcut=\"{segment_2}\"}\n  ...\n{/exp:pro_search:results}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Input Fields (number and color) in ExpressionEngine (PHP)\nDESCRIPTION: This snippet illustrates how to create Input fields of type 'color' and 'number' using ExpressionEngine's shared form API. You create input fields by requesting them from a FieldSet, use setValue to specify a value, and params to customize additional HTML5 attributes (such as min/max). Dependencies include the FieldGroup, FieldSet, and Field classes. The expected input is associative arrays of parameters; the output is a properly configured Input field ready for use in a form.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/cp-form/fields.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$field_set = $field_group->getFieldSet('color');\n$field_set->getField('my_color_field', 'color')->setValue('#C86565');\n\n$field_set = $field_group->getFieldSet('number');\n$field_set->getField('my_number_field', 'number')->params(['min' => 100, 'max' => 1000])->setRequired(true);\n```\n\n----------------------------------------\n\nTITLE: Using the member_relationships_display_field Hook in PHP\nDESCRIPTION: This code snippet demonstrates how the member_relationships_display_field hook is implemented within ExpressionEngine. It checks if the hook is active and calls it with entry ID, field ID, and compiled SQL parameters. If the hook is not active, it executes the database query directly.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/member-ft.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif (ee()->extensions->active_hook('member_relationships_display_field') === TRUE)\n{\n    $related = ee()->extensions->call(\n        'member_relationships_display_field',\n        $entry_id,\n        $this->field_id,\n        ee()->db->_compile_select()\n    );\n}\nelse\n{\n    $related = ee()->db->get()->result_array();\n}\n```\n\n----------------------------------------\n\nTITLE: Calling the relationships_display_field Hook in PHP\nDESCRIPTION: This snippet shows how the relationships_display_field hook is called within ExpressionEngine. It allows developers to modify the query that retrieves related entries for the publish field or perform custom queries.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/relationships.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif (ee()->extensions->active_hook('relationships_display_field') === TRUE)\n{\n    $related = ee()->extensions->call(\n        'relationships_display_field',\n        $entry_id,\n        $this->field_id,\n        ee()->db->_compile_select()\n    );\n}\nelse\n{\n    $related = ee()->db->get()->result_array();\n}\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_form_settings_insert Extension Hook in PHP\nDESCRIPTION: Demonstrates how the after_channel_form_settings_insert extension hook is called. This hook triggers after a channel form settings object is inserted, and any changes made to the object will not be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-form-settings.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_form_settings_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Creating Lists with BBCode\nDESCRIPTION: Demonstrates how to create an unordered list using the [list] and [*] BBCode tags. The [list] tag can optionally take a symbol type (e.g., [list=circle]) to change the list item marker.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/bbcode.md#2025-04-22_snippet_14\n\nLANGUAGE: bbcode\nCODE:\n```\n[list]\n\n[*]First\n\n[*]Second\n\n[*]Third\n\n[/list]\n```\n\n----------------------------------------\n\nTITLE: Calling comment_preview_comment_format Hook in PHP\nDESCRIPTION: This snippet shows how the comment_preview_comment_format hook is called to modify the formatting of a comment preview.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/comment.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$data = ee()->extensions->call('comment_preview_comment_format', $query->row());\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Calling before_category_group_insert Hook in PHP\nDESCRIPTION: Example of how the before_category_group_insert hook is called. This hook is triggered before a category group is inserted into the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-group.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_category_group_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Configuring Removal of Unparsed Variables in ExpressionEngine\nDESCRIPTION: Determines whether unparsed ExpressionEngine variables should be removed from the output when debug mode is disabled.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_115\n\nLANGUAGE: php\nCODE:\n```\n$config['remove_unparsed_vars'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Defining Add-on Documentation URL in PHP\nDESCRIPTION: Specifies the `docs_url` key within the `addon.setup.php` file. This optional key provides an external URL pointing to the add-on's documentation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n'docs_url' => 'https://example.com/hello_world/docs'\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in ExpressionEngine config.php\nDESCRIPTION: Example configuration for the database connection in ExpressionEngine's config.php file when using MAMP. Shows how to properly set the hostname, database, credentials, character set, and port for a MySQL connection.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/error-messages.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$config['database'] = array(\n\t'expressionengine' => array(\n\t\t'hostname' => '127.0.0.1',\n\t\t'database' => 'EEdb',\n\t\t'username' => 'root',\n\t\t'password' => 'root',\n\t\t'dbprefix' => 'exp_',\n\t\t'char_set' => 'utf8mb4',\n\t\t'dbcollat' => 'utf8mb4_unicode_ci',\n\t\t'port'     => '8889'\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Calling after_category_insert Hook in PHP\nDESCRIPTION: This snippet shows the implementation of the after_category_insert hook call in ExpressionEngine. It passes the current Category model object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_category_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Deleting All Spam Comments in ExpressionEngine\nDESCRIPTION: This snippet shows how to delete all comments marked as spam in ExpressionEngine. It uses the Comment Model to fetch all comments with a 'spam' status and then iterates through them to delete each one.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/comment.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$comments = ee('Model')->get('Comment')->filter('status', 's')->all();\n\nforeach($comments as $comment)\n{\n    $comment->delete();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring System Path in PHP ExpressionEngine\nDESCRIPTION: Updates the system directory path in PHP files after renaming or moving the directory for enhanced security. Dependencies include ExpressionEngine installation, and input parameters are the new directory name. Must update both index.php and admin.php with the modified path to ensure successful execution.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/best-practices.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$system_path = './dazzle';\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Path and Filename for ExpressionEngine DB Backup\nDESCRIPTION: Demonstrates backing up the ExpressionEngine database using the CLI while specifying a custom filename (`deploy_backup.sql`) and a custom absolute path (`/home/forge/backups`) for the resulting SQL file, utilizing the `--file_name` and `--absolute_path` options.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/backup-database.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp eecli.php backup:database --file_name=deploy_backup.sql --absolute_path='/home/forge/backups'\n```\n\n----------------------------------------\n\nTITLE: Using the member_relationships_post_save Hook in PHP\nDESCRIPTION: This code snippet demonstrates how the member_relationships_post_save hook is implemented within ExpressionEngine. It calls the extension hook with an array of member IDs, entry ID, and field ID as parameters, allowing developers to modify relationships before saving.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/member-ft.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$ships = ee()->extensions->call('member_relationships_post_save', $ships, $entry_id, $field_id);\n```\n\n----------------------------------------\n\nTITLE: Tracking Cookie Configuration in PHP\nDESCRIPTION: Controls the setting of exp_tracker cookie for browsing history navigation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_66\n\nLANGUAGE: php\nCODE:\n```\n$config['enable_tracking_cookie'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: Removing FluidField Hook Call\nDESCRIPTION: Extension hook called before deleting a fluid field. Allows performing actions before field deletion.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/fluid-field.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('fluid_field_remove_field', $fluid_field);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Array Values with Request Get Tag\nDESCRIPTION: Example showing how to use the request:get tag pair to iterate over array values. Uses the {item} variable to output each array element.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/request.md#2025-04-22_snippet_0\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:request:get name=\"my-var\"}\n<li>{item}</li>\n{/exp:request:get}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Memory Limit in PHP\nDESCRIPTION: This snippet demonstrates how to get the current memory limit in bytes using the Memory service in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/memory.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$current_limit = ee('Memory')->getMemoryLimitBytes();\n// e.g. 536870912\n```\n\n----------------------------------------\n\nTITLE: Setting Image Resize Protocol Configuration in PHP\nDESCRIPTION: Configuration for specifying the image manipulation library to use in ExpressionEngine. Supports GD, GD2, ImageMagick, and NetPBM libraries.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_88\n\nLANGUAGE: php\nCODE:\n```\n$config['image_resize_protocol'] = 'netpbm';\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Consent in PHP\nDESCRIPTION: Example demonstrating how to withdraw previously granted consent.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/consent.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif ( ! get_bool_from_string(ee()->input->post('allow_do_stuff')))\n{\n  ee('Consent')->withdraw('my_addon:do_stuff');\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a POST Request to ExpressionEngine Action Endpoint\nDESCRIPTION: This cURL command demonstrates how to send a POST request to the ExpressionEngine action endpoint, including the action ID and the entry ID as form data.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://anamzingwebsite.test/?ACT=41' --form 'id=\"1\"'\n```\n\n----------------------------------------\n\nTITLE: Deleting Publish Tabs in ExpressionEngine PHP\nDESCRIPTION: This segment of code removes tabs added by an add-on from publish layouts using the `layout` library. It's utilized during the uninstallation phase to clean up tabs created by the `tabs()` function, aiding in maintaining a tidy interface.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/add-on-update-file.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nee()->load->library('layout');\nee()->layout->delete_layout_tabs($this->tabs(), 'module_name');\n```\n\n----------------------------------------\n\nTITLE: Linking to Entries by URL Title using {path} in ExpressionEngine\nDESCRIPTION: Demonstrates creating permalinks to individual entries within an `{entry_titles}` loop using the `{path}` variable. This variable generates a URL containing the entry's URL title (a human-readable string), pointing to the specified template path (`site/index`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n{entry_titles} <a href=\"{path='site/index'}\">{title}</a> {/entry_titles}\n```\n\n----------------------------------------\n\nTITLE: Executing the make:tag Command in Shell\nDESCRIPTION: This example demonstrates how to use the `make:tag` command via the ExpressionEngine CLI (`eecli.php`). It generates a new tag named `MyNewTag` within the add-on located in the `my_existing_addon` folder. Requires PHP and ExpressionEngine CLI to be set up.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/make-tag.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp eecli.php make:tag MyNewTag --addon=my_existing_addon\n```\n\n----------------------------------------\n\nTITLE: Executing a Basic ExpressionEngine CLI Command (Shell)\nDESCRIPTION: Demonstrates the fundamental syntax for running an ExpressionEngine CLI command. This example executes the 'hello' command, which typically outputs a simple greeting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/usage.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ php system/ee/eecli.php hello\n```\n\n----------------------------------------\n\nTITLE: Generating Month and Year Selection in ExpressionEngine Pro Search Form\nDESCRIPTION: This snippet demonstrates how to create dropdown selects for month and year using ExpressionEngine Pro Search form tags and Low List. It generates options for months 1-12 and years 2015-2005, with selected values based on current search parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/examples.md#2025-04-22_snippet_15\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_search:form query=\"{segment_3}\"}\n  <select name=\"month\">\n    {exp:low_list:each items=\"1|12\" as=\"month\" range=\"yes\"}\n      <option value=\"{month}\"{if pro_search_month == month} selected{/if}>\n        {month}\n      </option>\n    {/exp:low_list:each}\n  </select>\n  <select name=\"year\">\n    {exp:low_list:each items=\"2015|2005\" as=\"year\" range=\"yes\"}\n      <option value=\"{year}\"{if pro_search_year == year} selected{/if}>\n        {year}\n      </option>\n    {/exp:low_list:each}\n  </select>\n  <button type=\"submit\">Go</button>\n{/exp:pro_search:form}\n```\n\n----------------------------------------\n\nTITLE: Adding Preflight Hooks in ExpressionEngine Upgrade\nDESCRIPTION: This snippet shows how to add preflight hooks in the upgrade.config.php file. Preflight hooks allow developers to execute arbitrary PHP closure functions before the main upgrade logic runs. Custom hooks must be defined within the 'preflight_hooks' array to be executed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/upgrading-from-ee2.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n'preflight_hooks'           => [\n    'slugified_module_name' => function() { \n    \techo \"Hello\";\n    },\n],\n```\n\n----------------------------------------\n\nTITLE: Calling Member Login Start Extension Hook in PHP\nDESCRIPTION: Illustrates how to call the 'member_member_login_start' extension hook, which allows for additional processing or control before the member login routine begins.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/member-auth.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('member_member_login_start');\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Creating an Extension Hook with the ExpressionEngine CLI\nDESCRIPTION: Complete example of creating and installing an extension hook with the CLI, including naming the hook, specifying which core hook to use, and selecting the target add-on.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extensions.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ php system/ee/eecli.php make:extension-hook -i\nLet's implement an extension hook!\nWhat is the extension hook name? Amazing Hook\nWhat hooks would you like to use? (Read more: https://docs.expressionengine.com/latest/development/extensions.html) typography_parse_type_end\nWhat add-on is the extension hook being added to? [amazing_add_on]:  amazing_add_on\nBuilding Extension hook.\nExtension hook created successfully!\nInstalling extension hook...\nExtension hook installed!\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the {if auto_login} Conditional in ExpressionEngine\nDESCRIPTION: Demonstrates the basic structure of the `{if auto_login}` conditional tag pair. Content placed between these tags will only be displayed if the site's session preferences allow for auto-login (cookies only).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/login.md#2025-04-22_snippet_12\n\nLANGUAGE: ee\nCODE:\n```\n{if auto_login} {/if}\n```\n\n----------------------------------------\n\nTITLE: Sending Test Email in ExpressionEngine\nDESCRIPTION: Guidance on using the Communicate utility in ExpressionEngine to send a test email. This helps in diagnosing email delivery issues by providing error messages if the send fails.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/email.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n4.  Attempt to send an email via `Tools --> Utilities --> Communicate`. If that fails it will output an error that will assist with troubleshooting the problem.\n```\n\n----------------------------------------\n\nTITLE: Calling Edit Wiki Article End Hook in PHP\nDESCRIPTION: Extension hook called after editing a wiki article to allow additional processing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/wiki.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$edata = ee()->extensions->universal_call('edit_wiki_article_end', $this, $query);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Generating Mailto Links from Email Fields in ExpressionEngine Fluid Field\nDESCRIPTION: Illustrates how to use an email address field (`my_email`) nested within a Fluid Field (`my_fluid_field`) to generate a `mailto:` link. It utilizes the `{content:mailto}` tag with parameters like `title`, `subject`, and `encode`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/fluid.md#2025-04-22_snippet_8\n\nLANGUAGE: ee\nCODE:\n```\n{my_fluid_field}\n  {my_fluid_field:my_email}\n    {content:mailto title=\"Email about their dog\" subject=\"Question about your dog\" encode=\"no\"}\n  {/my_fluid_field:my_email}\n{/my_fluid_field}\n```\n\n----------------------------------------\n\nTITLE: Implementing before_category_field_update Hook in PHP\nDESCRIPTION: Example of how the before_category_field_update hook is called in ExpressionEngine. This hook is triggered before a category field is updated and includes modified values array.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-field.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_category_field_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Retrieving an ExpressionEngine Member by Username in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a specific member object from the ExpressionEngine database using the Model service. It filters members by the 'username' field and fetches the first matching record. Requires the ExpressionEngine Model service (`ee('Model')`) and a valid username string.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/member.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n```php\n$username = 'bob';\n$member_object = ee('Model')->get('Member')->filter('username', $username)->first();\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Row to CSV Using Object Method\nDESCRIPTION: Demonstrates adding a row to CSV using a standard PHP object instead of an array.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/csv.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$row = new \\stdClass();\n$row->email = 'team at example dot com';\n$row->name = 'Example Team';\n$result = $csv->addRow($row);\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Member Templates in ExpressionEngine PHP\nDESCRIPTION: To enable legacy member profile templates in ExpressionEngine 6, add the specified configuration option in the config.php file of your installation. This is required for accessing the member profile area of your website and is automatically set during an upgrade or new installation if using a forum module. Ensure your config.php is writable.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/profile-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$config['legacy_member_templates'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Setting Moblog Textarea Restrictions\nDESCRIPTION: Configures whether to remove Moblog's textarea-only restriction for Channel Fields.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_98\n\nLANGUAGE: php\nCODE:\n```\n$config['moblog_allow_nontextareas'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Author Profile Link Template - HTML with EE Variables\nDESCRIPTION: This HTML snippet creates a link to a user's member profile using the {author_id} and {author} variables provided by ExpressionEngine, intended for use within a comment list. If the comment was made by a registered user, the linked page will show the author's member profile.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://example.com/index.php/member/{author_id}/\">{author}</a>\n```\n\n----------------------------------------\n\nTITLE: Fetching Models in ExpressionEngine\nDESCRIPTION: Shows how to fetch one or more existing models using the get() method with a model name, then using all() to fetch a collection or first() to get a single model.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$templates = ee('Model')->get('Template')->all();\n\n$template = ee('Model')->get('Template')->first();\n```\n\n----------------------------------------\n\nTITLE: Accessing Relationships in Models in ExpressionEngine PHP\nDESCRIPTION: Demonstrates how to access related models through singular and plural relationships defined in the model.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// singular\n$template = ee('Model')->get('Template')->first();\n$template_group = $template->TemplateGroup;\n\n// plural\n$status_group = ee('Model')->get('StatusGroup')->first();\n$statuses = $status_group->Statuses;\n```\n\n----------------------------------------\n\nTITLE: Layout Template Implementation\nDESCRIPTION: Complete example of a layout template with content placeholder\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/layouts.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>News Site</title>\n  </head>\n  <body>\n    {layout:contents}\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating an Email Subject Field in ExpressionEngine\nDESCRIPTION: An HTML input field for specifying the subject of emails sent via the ExpressionEngine form. It ensures that each email has a relevant subject line, even if as a hidden field.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_16\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"text\" name=\"subject\" size=\"40\" />\n```\n\n----------------------------------------\n\nTITLE: Calling After Site Update Hook - PHP\nDESCRIPTION: Extension hook called after a site object is updated. Changes will not be automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/site.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_site_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Configuring CodeMirror Font Size in ExpressionEngine (PHP)\nDESCRIPTION: Sets the font size of CodeMirror textareas in the control panel. The default value is '1rem'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$config['codemirror_fontsize'] = '0.9rem';\n```\n\n----------------------------------------\n\nTITLE: Defining Fields in ExpressionEngine PHP\nDESCRIPTION: This snippet details an example of a field definition in an ExpressionEngine PHP form. Fields are defined with attributes such as type, value, and required status. The example provided is for a text input field. Understanding this structure is crucial for customizing form inputs in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/shared-form-view.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'fields' => array(\n  'site_name' => array(\n    'type' => 'text',\n    'value' => $site->site_label,\n    'required' => TRUE\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Inserting Role Options Select Dropdown - HTML with ExpressionEngine Variables\nDESCRIPTION: Demonstrates how to populate a select field for roles using the {role_options} variable. The ExpressionEngine template variable expands into relevant option tags for each role. Needed for filtering members by role in the form.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<select name='role_id' class='select'>\n    {role_options}\n</select>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Index Entries with pro_search_get_index_entries Hook\nDESCRIPTION: This hook facilitates the retrieval of entries to be indexed for search in ExpressionEngine. By passing collection details and optional entry IDs, it returns an array of entries expected for processing. Leveraging this allows for customized indexing strategies.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/hooks.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$entries = ee()->extensions->call('pro_search_get_index_entries', $col, $entry_ids);\n```\n\n----------------------------------------\n\nTITLE: Defining Pipe-Delimited and Parameterized Validation Rules - ExpressionEngine - PHP\nDESCRIPTION: These short PHP rule strings demonstrate how multiple validation rules are composed for ExpressionEngine: by pipe-delimiting (e.g., required and alphaNumeric) or by supplying parameters via brackets (e.g., enum allows only 'blue', 'red', 'yellow'). These rules are meant to be set as part of a ruleset in ExpressionEngine's validator and require the same underlying service. Inputs can include user-provided data where fields must meet criteria enforced by these rules.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/validation.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"required|alphaNumeric\"\n```\n\nLANGUAGE: php\nCODE:\n```\n\"required|enum[blue,red,yellow]\" // only allow these three color names\n```\n\nLANGUAGE: php\nCODE:\n```\n\"numeric|alpha\" // despite conflicting rules, a blank field will pass\n```\n\n----------------------------------------\n\nTITLE: Replacing Low Search Tags with Pro Search Tags in ExpressionEngine\nDESCRIPTION: Instructions for using the Find and Replace utility to update Low Search tags to Pro Search tags. This should be done after backing up the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/upgrade-from-low-search.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsearch for `{exp:low_search:` and replace with `{exp:pro_search:`\n```\n\n----------------------------------------\n\nTITLE: Calling after_category_group_bulk_delete Hook in PHP\nDESCRIPTION: Example of how the after_category_group_bulk_delete hook is called. This hook is triggered after multiple category groups are deleted in a single operation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-group.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_category_group_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Calling the typography_parse_type_start Extension Hook in PHP\nDESCRIPTION: This snippet shows how the typography_parse_type_start hook is called within the Typography library. This hook allows modification of a string before any typography processing is applied.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/typography.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$str = $this->extensions->call('typography_parse_type_start', $str, $this, $prefs);\n```\n\n----------------------------------------\n\nTITLE: Using Named Route Segments in ExpressionEngine\nDESCRIPTION: Demonstrates how to access named segments defined in template routes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/url-segments.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{segment:segment_name}\n```\n\n----------------------------------------\n\nTITLE: Updating .env.php via ExpressionEngine CLI (Bash)\nDESCRIPTION: Illustrates using the `php eecli.php config:env` command to update environment variables within the `.env.php` file. The `-e` or `--env-variable` option specifies the environment variable key, and the `-v` or `--value` option provides the value to set. Examples cover setting the system online/offline status (`IS_SYSTEM_ON`) and the installation mode (`EE_INSTALL_MODE`). Requires PHP and the ExpressionEngine CLI tool.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/config-management.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php config:env -e IS_SYSTEM_ON -v n\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php config:env -e IS_SYSTEM_ON -v y\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php config:env -e EE_INSTALL_MODE -v FALSE\n```\n\n----------------------------------------\n\nTITLE: Before Comment Save Hook Call\nDESCRIPTION: Extension hook called before any comment save operation (insert or update). Changes will be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/comment.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_comment_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: ExpressionEngine Encryption Keys Configuration\nDESCRIPTION: Example of the encryption_key and session_crypt_key configuration values in ExpressionEngine's config.php file. These keys are essential for security and should be unique random strings.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/error-messages.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$config['encryption_key']    = '26791dcd5c7cc9e569cc05b16b96235985cc9f03';\n$config['session_crypt_key'] = 'd9e776dc9a5de0cd83e7c76a76756daa64ff4b8b';\n```\n\n----------------------------------------\n\nTITLE: Customizing Relative Date Rounding Text in ExpressionEngine\nDESCRIPTION: Example of customizing the text used when a relative date has been rounded. The 'about' parameter changes the default text 'about' to 'nearly'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/date-variable-formatting.md#2025-04-22_snippet_7\n\nLANGUAGE: expressionengine\nCODE:\n```\n{entry_date:relative about=\"nearly\"}\n```\n\n----------------------------------------\n\nTITLE: Calling after_template_delete Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the after_template_delete hook is called in ExpressionEngine. This hook is triggered after a template is deleted, allowing for cleanup or additional actions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_template_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Custom CAPTCHA Words Configuration\nDESCRIPTION: PHP configuration file for defining custom CAPTCHA words array to override the default dictionary.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/security/captchas.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n  'your',\n  'words',\n  'here',\n  /* ... */\n];\n```\n\n----------------------------------------\n\nTITLE: Template Route with Pagination and Category Handling in ExpressionEngine\nDESCRIPTION: Demonstrates how to set up a template route that includes built-in handling for pagination and categories.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/routes.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n/blog/{section:category}/{page:pagination}\n```\n\n----------------------------------------\n\nTITLE: Outputting Multiple Pro Variables in Channel Entries\nDESCRIPTION: This snippet demonstrates how to output multiple Pro Variables selected in a single field using a variable pair. It uses the {var} variable to output each selected variable name.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/fieldtype.md#2025-04-22_snippet_2\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:channel:entries channel=\"news\"}\n  <h2>{title}</h2>\n  {news_intro}\n  {news_quotes}\n    <blockquote><p>{{var}}</p></blockquote>\n  {/news_quotes}\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Creating and Installing 'ExampleAction' for Demo\nDESCRIPTION: Shows the CLI interaction for creating and immediately installing the `ExampleAction` for the `amazing_add_on`, preparing it for the form processing example.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ php system/ee/eecli.php make:action --install\nWhat is the action name? ExampleAction\nWhat add-on is the action being added to? [amazing_add_on,...]: amazing_add_on\n```\n\n----------------------------------------\n\nTITLE: Adding Text Field to Fluid Field in PHP\nDESCRIPTION: Shows how to create a new Fluid Field object, assign required values including entry_id, fluid_field_id, field_id, field_data_id, and order, and save the changes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/fluid-field.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n```php\n// Create a Fluid object.\n$field = ee('Model')->make('fluid_field:FluidField');\n\n// Assign required values.\n$field->entry_id        = 19; // The Entry we want to associate this fluid field with.\n$field->fluid_field_id  = 15; // The Fluid Field ID itself.\n$field->field_id        = 9; // The Text Field ID to add.\n$field->field_data_id   = 4; // The row of data in the text field to use.\n$field->order           = 5; // Set the order relative to other fields within the fluid field. Omitting will put the new field first.\n\n// Save the changes.\n$field->save();\n```\n```\n\n----------------------------------------\n\nTITLE: Clone Data Method in PHP\nDESCRIPTION: Handles the cloning of entry data specific to a tab field, allowing adjustments to field data before validation. This method is used during entry cloning operations ensuring unique field entries and validating page URIs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/tab-files.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n    public function cloneData(ChannelEntry $entry, $values)\n    {\n        if ($values['pages_uri'] == '') {\n            return $values;\n        }\n        //check if submitted URI exists\n        $static_pages = ee()->config->item('site_pages');\n        $uris = $static_pages[ee()->config->item('site_id')]['uris'];\n\n        //exclude current page from check\n        if (isset($uris[$entry->entry_id])) {\n            unset($uris[$entry->entry_id]);\n        }\n        //ensure leading slash is present\n        $value = '/' . trim($values['pages_uri'], '/');\n\n        while (in_array($value, $uris)) {\n            $value .= '_1';\n        }\n        $_POST['pages__pages_uri'] = $values['pages_uri'] = $value;\n\n        return $values;\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Generating an Update Table Migration for an Add-on (Shell)\nDESCRIPTION: This example demonstrates using the ExpressionEngine CLI (`eecli.php`) to generate a database migration file intended for updating an existing table named `addon_data` within an add-on called `my_addon`. It specifies the add-on location, a descriptive name for the update, the target table, and uses the `--update` flag to signify an update operation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/make-migration.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp eecli.php make:migration --location=my_addon --name add_field_to_myaddon_table --update --table=addon_data\n```\n\n----------------------------------------\n\nTITLE: Alternating CSS Classes using Switch Variable in ExpressionEngine/HTML\nDESCRIPTION: Shows a practical use of the `{switch=}` variable within a `{exp:comment:entries}` loop to alternate CSS classes ('one' and 'two') on the wrapping `<div>` for each comment, allowing for alternating row styles.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n{exp:comment:entries} <div class=\"{switch=\"one|two\"}\"> <h1>{name}</h1> {comment} </div> {/exp:comment:entries}\n```\n\n----------------------------------------\n\nTITLE: Building Documentation\nDESCRIPTION: Command to build the documentation files from Markdown to HTML.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Filtering Children by Selected Parent Entry (Band Select) - ExpressionEngine - HTML\nDESCRIPTION: Displays a dropdown of parent entries (bands) where selecting one will find all related children (musicians), with results filtered using the 'parent:member' parameter. Inputs include selection from a dynamically generated list, while outputs are the corresponding children. Requires Pro Search and proper channel/relationship field setup.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/examples.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:form query=\"{segment_3}\"}\n  <select name=\"parent:member\">\n    <option value=\"\">--</option>\n    {exp:channel:entries channel=\"bands\" dynamic=\"no\"}\n      <option value=\"{entry_id}\"{if entry_id == pro_search_parent:member} selected{/if}>\n        {category_name}\n      </option>\n    {/exp:channel:entries}\n  </select>\n  <button type=\"submit\">Go</button>\n{/exp:pro_search:form}\n```\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:results\n  query=\"{segment_3}\"\n  channel=\"musicians\"\n  orderby=\"title\"\n  sort=\"asc\"\n}\n  ...\n{/exp:pro_search:results}\n```\n\n----------------------------------------\n\nTITLE: Configuring ExpressionEngine Upgrade in PHP\nDESCRIPTION: This PHP configuration snippet outlines advanced settings for upgrading an ExpressionEngine website. Dependencies include the EECLI tool and a correctly configured server environment. Key parameters include the paths for old and new base and system directories, as well as flags for optional behaviors like moving templates or themes. This configuration is critical for ensuring files are moved to their designated places during the upgrade.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/upgrading-from-ee2.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// This is for advanced usage only. This custom config will be uploaded\nreturn [\n    // Your current EE version. We'll try and grab this from the config if you\n    // leave this blank\n    'ee_version'                => '',\n\n    // Set our temporary caching directory\n    'temp_directory'            => 'tmp',\n    \n    // Here we'll set some path variables. Include a trailing slash\n    'old_base_path'             => '',\n    'new_base_path'             => '',\n    'old_public_path'           => '',\n    'new_public_path'           => '',\n    // Should the upgrader move the current system path. This is best used when\n    // upgrading from EE2 to the current version. The installer will\n    // automatically build your new file structure. Include a trailing slash.\n    'should_move_system_path'   => false,\n    'old_system_path'           => null,\n    'new_system_path'           => null,\n    // Should the upgrader move the current theme path. This is best used when\n    // upgrading from EE2 to the current version. The installer will automatically\n    // build your new file structure. Include a trailing slash.\n    'should_move_theme_path'    => false,\n    'old_theme_path'            => null,\n    'new_theme_path'            => null,\n    // Should the upgrader move your current template files. This is best used when\n    // upgrading from EE2 to the current version. The installer will automatically\n    // build your new file structure. Include a trailing slash.\n    'should_move_template_path' => false,\n    'old_template_path'         => '',\n    'new_template_path'         => '',\n\n    // Upgrade EE\n    'upgrade_ee'                => false,\n\n    'run_preflight_hooks'       => false,\n    'run_postflight_hooks'      => false,\n\n    // CUSTOM HOOKS\n    // During the upgrader process, we'll run a preflight and postflight\n    // Here you can include functions that will run during those calls\n    'preflight_hooks'           => [\n        // 'hook_name'          => function() { \n        // echo \"Hello\";\n        // },\n    ],\n    'postflight_hooks'          => [\n    ],\n\n    // Upgrade map\n    // If you have custom config files (i.e. Master Config) or custom paths,\n    // Use this to map the appropriate folders. Otherwise, we'll try and \n    // load these via the standard EE paths.\n    'upgrade_map'               => [\n        'config_path'           => '',\n        'database_path'         => '',\n        'config_file'           => '',\n        'database_file'         => '',\n        'template_path'         => '',\n        'index_file'            => 'index.php',\n        'admin_file'            => 'admin.php',\n        'index_file_old'        => 'index-old.php',\n        'admin_file_old'        => 'admin-old.php',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Directory Structure after Creating 'ExampleAction'\nDESCRIPTION: Illustrates the resulting directory structure after creating the `ExampleAction`. The `ExampleAction.php` file is placed within the `Actions` folder of the `amazing_add_on`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\namazing_add_on\n ┣ Actions\n ┃ ┗ ExampleAction.php\n ┗...\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache HTTP Authorization for ExpressionEngine Authentication\nDESCRIPTION: Apache configuration directives to make HTTP Authorization headers available to PHP-FPM, which is necessary for ExpressionEngine's HTTP Authentication feature to work properly.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/templates.md#2025-04-22_snippet_0\n\nLANGUAGE: apache\nCODE:\n```\nSetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n```\n\n----------------------------------------\n\nTITLE: Applying Backspace Parameter in Categories - markup\nDESCRIPTION: Shows how to use the 'backspace' parameter within a {categories} tag pair to remove unwanted characters like break tags or newlines after the final category in the list.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_56\n\nLANGUAGE: markup\nCODE:\n```\n{categories backspace=\"5\"}\n    {category_name}<br>\n{/categories}\n```\n\n----------------------------------------\n\nTITLE: Creating a Delete Confirmation Modal for Single Items: PHP\nDESCRIPTION: This snippet showcases how to construct a PHP modal to confirm the deletion of items. It sets up a form URL for handling deletions, and uses placeholders for content IDs. It utilizes ExpressionEngine's view service for modal creation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/modal.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$modal_vars = array(\n  'name'    => 'modal-confirm-remove',\n  'form_url'  => ee('CP/URL')->make('addons/myaddon/remove'),\n  'hidden'  => array(\n    'content_id' => ''\n  )\n);\n$modal_html = ee('View')->make('ee:_shared/modal_confirm_remove')->render($modal_vars);\nee('CP/Modal')->addModal('remove', $modal_html);\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Password Length in ExpressionEngine\nDESCRIPTION: Defines the minimum number of characters required for member passwords.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_108\n\nLANGUAGE: php\nCODE:\n```\n$config['pw_min_len'] = '8';\n```\n\n----------------------------------------\n\nTITLE: Using Backspace Parameter with Checkbox Fields in ExpressionEngine\nDESCRIPTION: Shows how to use the backspace parameter to remove characters from the last iteration of a checkbox field loop in ExpressionEngine templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/checkboxes.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n{field_name backspace='5'}\n    {item}<br>\n{/field_name}\n```\n\n----------------------------------------\n\nTITLE: Counting Global Errors in ExpressionEngine\nDESCRIPTION: This example shows how to count and process global error occurrences using the {global_errors:count} conditional in ExpressionEngine forms. Inline error handling needs to be enabled for this to function as expected.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n\n{if global_errors:count}{/if}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Numerical Entry Limit in ExpressionEngine\nDESCRIPTION: The `limit` parameter restricts the number of entries displayed. If `display_by` is not used, this parameter limits the total number of entries shown. The default limit is 100 if not specified. When pagination is enabled, `limit` determines the number of entries per page.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_5\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\nlimit=\"20\"\n```\n\n----------------------------------------\n\nTITLE: Calling comment_entries_comment_ids_query Hook in PHP\nDESCRIPTION: This snippet shows how the comment_entries_comment_ids_query hook is called to manipulate the database query object for gathering comment IDs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/comment.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('comment_entries_comment_ids_query', ee()->db);\nif (ee()->extensions->end_script === TRUE) return ee()->TMPL->tagdata;\n```\n\n----------------------------------------\n\nTITLE: Username Error Output - ExpressionEngine Template Syntax\nDESCRIPTION: Inserts inline errors specific to the username field, helping guide the user to resolve input issues. Output is managed by ExpressionEngine's template conditional logic.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_27\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\n{if error:username}{error:username}{/if}\n```\n\n----------------------------------------\n\nTITLE: Using Suffix Placeholder in Variable Names and Labels\nDESCRIPTION: Demonstrates the use of {suffix} placeholder when creating multiple variables with suffixes in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/manage.md#2025-04-22_snippet_1\n\nLANGUAGE: expressionengine\nCODE:\n```\n{suffix}\n```\n\n----------------------------------------\n\nTITLE: Class Constructor Implementation\nDESCRIPTION: Shows proper and improper ways to implement class constructors in PHP, emphasizing the use of __construct().\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/general.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass SuperClass {\n    function SuperClass()      // does not use __construct()\n    {\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass SuperClass {\n    function __construct()\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Result Extension Hook Implementation\nDESCRIPTION: Shows how the channel_entries_query_result hook is called to modify query results before parsing loop begins.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/channel.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$query_result = $this->extensions->call('channel_entries_query_result', $this, $query_result);\nif ($this->extensions->end_script === TRUE) return $this->TMPL->tagdata;\n```\n\n----------------------------------------\n\nTITLE: Providing a Query Parameter for Suggestions - ExpressionEngine Template Tag\nDESCRIPTION: This snippet passes a query parameter (from template variable segment_3) to {exp:pro_search:suggestions}, ensuring the suggestions are based on stored or encoded query terms. Best used when showing suggestions related to previous searches.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_28\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:suggestions query=\"{segment_3}\"}\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_entry_bulk_delete Hook in PHP\nDESCRIPTION: Code demonstrating how the after_channel_entry_bulk_delete hook is called in ExpressionEngine after multiple channel entries are deleted. The hook passes an array of entry IDs that were deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-entry.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_entry_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Basic Last Segment Usage\nDESCRIPTION: Demonstrates simple output of the last_segment variable.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/url-segments.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\nHey {last_segment}, where you goin' with that?\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Offset in ExpressionEngine (PHP)\nDESCRIPTION: Sets the server time offset in minutes to correct server clock discrepancies. Uses a positive integer for slow clocks and negative integer for fast clocks. This permanently changes timestamp values in the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_133\n\nLANGUAGE: PHP\nCODE:\n```\n$config['server_offset'] = '-15';\n```\n\n----------------------------------------\n\nTITLE: Site Settings Query with Base Variable Parsing\nDESCRIPTION: Query showing how to retrieve and parse site settings with base variables from the upload preferences table.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/query.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>site_id</th>\n      <th>server_path</th>\n      <th>url</th>\n    </tr>\n  </thead>\n  <tbody>\n    {exp:query\n      sql=\"SELECT site_id, server_path , url FROM exp_upload_prefs\"\n      parse_bases=\"yes\"\n    }\n      <tr>\n        <td>{site_id}</td>\n        <td>{server_path}</td>\n        <td>{url}</td>\n      </tr>\n    {/exp:query}\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Conditionals with Variable Modifiers\nDESCRIPTION: Examples showing when braces can be omitted with variable modifiers and when they are required.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_10\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if grid_field:total_rows}\n\nBut you will need braces in there cases:\n\n{if {grid_field:total_rows} AND {another_grid_field:total_rows}}\n\n{if {grid_field:text_column:length}}\n\n{fluid:rte_field}\n  {if '{content:has_excerpt}' == 'y'}<h1>Read More</h1>{/if}\n{/fluid:rte_field}\n```\n\n----------------------------------------\n\nTITLE: Using params->in_param Method in Pro Search\nDESCRIPTION: Checks if a given value is present in a specified parameter, returning a boolean result.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/functions.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nif ($this->params->in_param('value', 'parameter_name')) {\n    // Value exists in parameter\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Live Preview Content Display\nDESCRIPTION: This snippet demonstrates using the is_live_preview_request variable to show preview-specific content or messages to content authors while previewing but not on the live site.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/single-variables.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n{if is_live_preview_request}\n    <span>DRAFT: Verify before publishing.</span>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Post-Processing Search Entries with pro_search_post_replace Hook\nDESCRIPTION: This hook provides the capability for additional processing after Find & Replace operations in ExpressionEngine's search functionality. By passing affected entry IDs, developers can implement actions like cache clearing. It integrates neatly with the Pro Search functionality.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/hooks.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nee()->extensions->call('pro_search_post_replace', $entry_ids);\n```\n\n----------------------------------------\n\nTITLE: Updating Search Index Data with pro_search_update_index Hook\nDESCRIPTION: Facilitates changes to index data for search entries. The hook handles data to be inserted or updated, merging custom alterations with existing data structures in the ExpressionEngine platform, thus ensuring flexible index management.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/hooks.md#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$ext_data = ee()->extensions->call('pro_search_update_index', $data, $entry);\n\nif (is_array($ext_data) && ! empty($ext_data))\n{\n  $data = array_merge($data, $ext_data);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading JavaScript in ExpressionEngine Control Panel\nDESCRIPTION: Examples of best practices for using JavaScript in the ExpressionEngine Control Panel. This code shows how to load jQuery plugins, output JavaScript to the browser, and compile JavaScript for display.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/modules.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nee()->cp->add_js_script(array('plugin' => 'dataTables'));\n\nee()->javascript->output();\n\nee()->javascript->compile();\n```\n\n----------------------------------------\n\nTITLE: JavaScript for Handling Deletion Modal Triggers\nDESCRIPTION: This JavaScript snippet ties UI interactions and data passing necessary for functioning deletion modals. It dynamically updates modal content and ensures correct data is forwarded to the deletion request handler.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/modal.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$(document).ready(function () {\n  $('a.m-link').click(function (e) {\n    var modalIs = $('.' + $(this).attr('rel'));\n\n    $('.checklist', modalIs)\n      .html('') // Reset it\n      .append('<li>' + $(this).data('confirm') + '</li>');\n    $('input[name=\"content_id\"]', modalIs).val($(this).data('content_id'));\n\n    e.preventDefault();\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grid Field Data using Grid Model in PHP\nDESCRIPTION: Shows how to fetch all rows and columns for a specific Grid field associated with a channel entry using the `get_entry` method of the `grid_model`. Requires the entry ID (`$entry_id`) and the Grid field ID (`$grid_field_id`). The third parameter specifies the content type ('channel'). Returns an array containing row data.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-entry.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$grid_data = ee()->grid_model->get_entry($entry_id, $grid_field_id, 'channel');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Action ID and Creating Action URL in ExpressionEngine PHP\nDESCRIPTION: Demonstrates how to fetch an action ID by method name and construct a URL for that action. The example shows filtering the Action model by method name and using the site index to create a complete action URL.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/addon-action.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$action_id = ee('Model')\n                ->get('Action')\n                ->filter('method', 'your_addon_method')\n                ->first()\n                ->action_id;\n\n// Create a URL to that action.\n$action_url = ee()->functions->fetch_site_index(0, 0) . QUERY_MARKER . 'ACT=' . $action_id;\n// Example returns: https://example.com/index.php?ACT=123\n```\n\n----------------------------------------\n\nTITLE: Implementing before_category_field_insert Hook in PHP\nDESCRIPTION: Example of how the before_category_field_insert hook is called in ExpressionEngine. This hook is triggered before a category field is inserted and allows modifications to the object before saving.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-field.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_category_field_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Implementing ColumnInterface for Entry Manager Display in PHP\nDESCRIPTION: Example class definition showing how to implement the ColumnInterface to allow a custom fieldtype to display its data in the Entry Manager.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/enhanced.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse ExpressionEngine\\Library\\CP\\EntryManager\\ColumnInterface;\nclass Google_maps_ft extends EE_Fieldtype implements ColumnInterface {\n    // Class implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Entry Date Field with Datepicker - HTML\nDESCRIPTION: Enhanced entry date input field with datepicker functionality and timestamp support.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/inputs.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p>Date <br> <input type=\"text\" name=\"entry_date\" value=\"{entry_date}\" maxlength=\"23\" size=\"25\" rel=\"date-picker\" data-timestamp=\"{entry_timestamp}\"></p>\n```\n\n----------------------------------------\n\nTITLE: Calling publish_live_preview_route Hook in ExpressionEngine (PHP)\nDESCRIPTION: Shows how to execute the 'publish_live_preview_route' hook to customize live preview behavior for entries in ExpressionEngine. The example merges POST and entry data, and passes the intended URI and template ID to the extension system, which may return custom values for those keys. Requires ExpressionEngine's PHP API, access to the extensions service, and a publish context with entry data and template settings.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/publish.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$route = ee()->extensions->call('publish_live_preview_route', array_merge($_POST, $data), $uri, $template_id);\n$uri = $route['uri'];\n$template_id = $route['template_id'];\n```\n\n----------------------------------------\n\nTITLE: Configuring Signature Images Directory Path in ExpressionEngine (PHP)\nDESCRIPTION: Sets the server path to the signature images directory. The default path is {base_path}/images/signature_attachments/ when no override is set.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_140\n\nLANGUAGE: PHP\nCODE:\n```\n$config['sig_img_path'] = '/path/image/folder/';\n```\n\n----------------------------------------\n\nTITLE: Creating Symlink for README File\nDESCRIPTION: Command to create a symbolic link between the add-on's README.md and the repository root README.md file.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/in-app-documentation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nln -s ./<your_addon>/README.md ./README.md\n```\n\n----------------------------------------\n\nTITLE: Calling insert_comment_start Hook in PHP\nDESCRIPTION: This snippet shows how the insert_comment_start hook is called at the beginning of the comment submission routine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/comment.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('insert_comment_start');\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Adding PHP CGI Shebang Line\nDESCRIPTION: Example of adding a shebang line at the top of PHP files when running PHP as CGI. This must be added before the opening PHP tag in index.php and system/index.php files.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n#!/usr/bin/php <?php\n```\n\n----------------------------------------\n\nTITLE: Calling Extension Hooks for Member Validation in PHP\nDESCRIPTION: This code snippet shows how to call 'cp_members_validate_members' after validating pending members in the control panel. It requires an array of member IDs and is dependent on the ExpressionEngine environment.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/members.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->extensions->call('cp_members_validate_members', $ids);\nif ($this->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Conditional Statements with Alternative Syntax in PHP\nDESCRIPTION: Illustrates the use of if/elseif/else statements using the alternative syntax in PHP, replacing braces with colons and endif.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/view-php-syntax.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php if ($username == 'sally'): ?>\n    <h3>Hi Sally</h3>\n<?php elseif ($username == 'joe'): ?>\n    <h3>Hi Joe</h3>\n<?php else: ?>\n    <h3>Hi unknown user</h3>\n<?php endif; ?>\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Upload Directory with ExpressionEngine CLI in PHP\nDESCRIPTION: This command is used to synchronize the database file records with files in a specified upload directory. It offers options to specify the upload directory ID and image manipulations to regenerate. If these parameters are not provided, a list of available IDs and manipulations is shown. The command also expects valid directory and manipulation IDs for accurate execution.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/sync-upload-directory.md#2025-04-22_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n    --upload-id=<value>\n    -u <value>\n        Upload Directory ID. If not provided, list of Upload Directories with corresponding IDs will be shown to choose from\n\n    --manipulations=<value>\n    -m <value>\n        Image manipulations to regenerate. Comma separated list of manipulation IDs. Use 'all' to regenerate all manipulations. If not provided, a list of available manipulations with corresponding IDs will be shown to choose from\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\nphp eecli.php sync:upload-directory --upload-id=6 --manipulations=all\n```\n\n----------------------------------------\n\nTITLE: Handling Table Update Completion Event in jQuery Table Plugin\nDESCRIPTION: Illustrates how to bind a function to the `tableupdate` event fired by the ExpressionEngine table plugin. This event occurs when the table's HTML content has been refreshed after a change, suitable for hiding a loading indicator. Note: The provided example code incorrectly uses 'tableload' and '.show()'; it should likely bind to 'tableupdate' and use '.hide()'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/table.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n$('table').bind('tableload', function() {\n    $('#indicator').show();\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Entries in a Fixed Order by ID in ExpressionEngine\nDESCRIPTION: The `fixed_order` parameter forces the channel entries tag to display entries in the exact order specified by the pipe-delimited list of entry IDs. This parameter implicitly sets the `entry_id` parameter to the same list of IDs. The `sort=\"desc\"` parameter can be used to reverse the specified order.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_12\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\nfixed_order=\"3|7|1\"\n```\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\nfixed_order=\"3|7|1\" sort=\"desc\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Config Items in ExpressionEngine PHP\nDESCRIPTION: Demonstrates how to retrieve configuration items from an add-on's config file using the Config service. Config files are located in the ./config/ directory relative to the addon.setup.php file.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/config.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee('Config')->get('my_addon:my_config.my_item');\n```\n\n----------------------------------------\n\nTITLE: Using censor Modifier for Word Censorship\nDESCRIPTION: Censors inappropriate words based on the site's Word Censorship settings.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{variable:censor}\n{!-- Some ####### content with naughty words censored --}\n```\n\n----------------------------------------\n\nTITLE: Calling Before Site Save Hook - PHP\nDESCRIPTION: Extension hook called before any site object save operation (insert or update). Changes are saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/site.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_site_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling Before Site Delete Hook - PHP\nDESCRIPTION: Extension hook called before a site object is deleted from the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/site.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_site_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling before_file_insert Hook in PHP\nDESCRIPTION: Demonstrates how the before_file_insert hook is called in ExpressionEngine. This hook is triggered before a file object is inserted, allowing modifications to be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/file.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_file_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Comments via Legacy ExpressionEngine Subscription Library (PHP)\nDESCRIPTION: Illustrates how to subscribe a user to a comment thread using the legacy ExpressionEngine 'subscription' library. This snippet requires the library to be loaded through the ExpressionEngine app and accepts either a member ID (if logged in) or a guest email. The code initializes the subscription for a specified entry and attempts to subscribe the current session user or a guest.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/comment-subscription.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n$entry_id = 4;\\n\\nee()->load->library('subscription');\\n// @params module, publisher array, anonymous\\nee()->subscription->init('comment', array('entry_id' => $entry_id), true);\\n\\nif ($member_id = ee()->session->userdata('member_id')) {\\n    ee()->subscription->subscribe($member_id);\\n} else {\\n    ee()->subscription->subscribe($guest_email);\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Results Per Page Selection in ExpressionEngine Pro Search Form\nDESCRIPTION: This snippet shows how to add a dropdown select for choosing the number of results per page in an ExpressionEngine Pro Search form. It uses Low List to generate options for 5, 10, 20, 50, and 100 results, with the current limit selected based on the search parameter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/examples.md#2025-04-22_snippet_16\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_search:form query=\"{segment_3}\"}\n  ...\n  <select name=\"limit\">\n    {exp:low_list:each items=\"5|10|20|50|100\" as=\"limit\"}\n      <option value=\"{limit}\"{if limit == pro_search_limit} selected{/if}>\n        {limit}\n      </option>\n    {/exp:low_list:each}\n  </select>\n\n  <button type=\"submit\">Go</button>\n{/exp:pro_search:form}\n```\n\n----------------------------------------\n\nTITLE: Modifying Result Query Hook Implementation in PHP\nDESCRIPTION: Example of how the channel_search_modify_result_query hook is called within ExpressionEngine. This hook allows modification of the cached search query when retrieving search results.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/search.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modified_sql = ee()->extensions->call('channel_search_modify_result_query', $sql, $search_id);\n```\n\n----------------------------------------\n\nTITLE: AJAX URL Construction for My Account Extensions - ExpressionEngine PHP\nDESCRIPTION: This snippet demonstrates the URL construction for AJAX requests within My Account extensions. It shows how to construct a URL for AJAX operations, replacing 'extension_name' and 'method_name' with the appropriate values for custom POST or GET operations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/myaccount.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'C=myaccount'.AMP.'M=custom_action'.AMP.'extension=extension_name'.AMP.'method=method_name'\n```\n\n----------------------------------------\n\nTITLE: Defining Add-on Update Class in ExpressionEngine PHP\nDESCRIPTION: This PHP code defines an add-on update class which extends the ExpressionEngine `Installer` service. It outlines methods for installing, updating, and uninstalling an add-on. The update class properties indicate if the add-on has a control panel backend or publish fields. It utilizes ExpressionEngine's CLI for automated file creation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/add-on-update-file.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nif (! defined('BASEPATH')) {\n    exit('No direct script access allowed');\n}\n\nuse ExpressionEngine\\Service\\Addon\\Installer;\n\nclass Amazing_add_on_upd extends Installer\n{\n    public $has_cp_backend = 'y';\n    public $has_publish_fields = 'n';\n\n    public function install()\n    {\n        parent::install();\n\n        return true;\n    }\n\n    public function update($current = '')\n    {\n        // Runs migrations\n        parent::update($current);\n\n        return true;\n    }\n\n    public function uninstall()\n    {\n        parent::uninstall();\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Entry Comment Link by ID in ExpressionEngine/HTML\nDESCRIPTION: Creates a link to a specified template (e.g., 'channel/comments') using the `{entry_id_path}` variable, automatically appending the entry's ID to the URL. This is useful for linking to a specific entry's comment view or section.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{entry_id_path='channel/comments'}\">my entry</a>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Template Group in ExpressionEngine - PHP\nDESCRIPTION: This example demonstrates how to retrieve a Template Group by its name using ExpressionEngine's Model service. It filters the group by 'group_name' to fetch the first matching result. Required dependencies include the ExpressionEngine framework with its model handling available.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/template-group.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$group = ee('Model')->get('TemplateGroup')->filter('group_name', 'about')->first();\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Pro Search Filter Class in PHP\nDESCRIPTION: This code snippet demonstrates the proper class definition format for a custom Pro Search filter. The class should follow the naming convention 'Pro_search_filter_foo' (where 'foo' is your filter name) and extend the base 'Pro_search_filter' class.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/create.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Pro_search_filter_foo extends Pro_search_filter {}\n```\n\n----------------------------------------\n\nTITLE: Outputting HTML-Safe Parameter Values - ExpressionEngine Template Tag\nDESCRIPTION: Shows how to set the output formatting for a parameter value using the format parameter with the {exp:pro_search:param} tag. The example uses format='html-safe' ensuring the value is suitable for HTML inclusion.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_20\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:param format=\"html-safe\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Email Configuration in PHP\nDESCRIPTION: Configuration for email protocol settings including SMTP, PHP Mail, Sendmail, and dummy logging options in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_92\n\nLANGUAGE: php\nCODE:\n```\n$config['mail_protocol'] = 'smtp';\n```\n\n----------------------------------------\n\nTITLE: Single Tag Usage in ExpressionEngine\nDESCRIPTION: Shows the syntax for using the Single tag variant for Pro Variables\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/tags.md#2025-04-22_snippet_2\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_variables:single var=\"my_var\"}\n```\n\n----------------------------------------\n\nTITLE: ExpressionEngine Email Form Preview Template\nDESCRIPTION: Part of the email preview feature, this template provides a structure for displaying a preview of the email before sending. It uses various form fields and includes an option to parse the message with Markdown.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_8\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{exp:email:preview}\n  <dl>\n    <dt>From</dt>\n    <dd>{name} ({from})</dd>\n    <dt>To</dt>\n    <dd>{to}</dd>\n    <dt>Subject</dt>\n    <dd>{subject}</dd>\n  </dl>\n  {message}\n{/exp:email:preview}\n```\n\n----------------------------------------\n\nTITLE: ExpressionEngine Category Archive Tag Implementation\nDESCRIPTION: Example showing how to use ExpressionEngine tags to generate a categorized list of entries with titles and descriptions\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_1\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:channel:category_archive channel=\"default_site\" style=\"linear\"}\n    {categories}\n        <h3>{category_name}</h3>\n        {if category_description}\n            <p>{category_description}</p>\n        {/if}\n    {/categories}\n    {entry_titles}\n        <a href=\"{path='SITE_INDEX'}\">{title}</a><br />\n    {/entry_titles}\n{/exp:channel:category_archive}\n```\n\n----------------------------------------\n\nTITLE: Setting the Right Button for ActionBar in PHP\nDESCRIPTION: Configures the button displayed on the right side of the `ActionBar`. Requires button text and a URL (CP/URL object or string), with an optional `rel` attribute string. Returns the `ActionBar` instance (`$this`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nwithRightButton($text, $url, $rel = NULL)\n```\n\n----------------------------------------\n\nTITLE: Setting SameSite Cookie Policy in ExpressionEngine\nDESCRIPTION: Configures the SameSite attribute for cookies, determining whether cookies are restricted to first-party or same-site contexts. Options include None, Lax (default), and Strict.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$config['cookie_samesite'] = 'Strict';\n```\n\n----------------------------------------\n\nTITLE: PHP Class for ExpressionEngine Tab Functionality\nDESCRIPTION: This class provides several methods to manage tab functionality such as rendering the interface, validating input, cloning data, and deleting data in the context of ExpressionEngine add-ons. It ensures data consistency and interaction within publish layouts through specific validation and data manipulation functions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/tab-files.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass Amazing_add_on_tab\n{\n\n    public function display($channel_id, $entry_id = ''){\n\n        $settings = [\n            //array of settings\n        ];\n        return $settings;\n    }\n\n    public function validate($entry, $values){\n        $validator = ee('Validation')->make(array(\n            'amazing_field_one' => 'required',\n            'amazing_field_two' => 'required|enum[y,n]',\n        ));\n\n        return $validator->validate($values);\n    }\n\n    public function cloneData($entry, $values){\n\n        return $values;\n    }\n\n    public function save($entry, $values){\n\n    }\n\n    public function delete($entry_ids){\n\n    }\n\n\n    // This function is needed to display data as an Entry Manager column\n    public function renderTableCell($data, $field_id, $entry)\n    {\n        $entry_meta = $this->getEntryMeta($entry->entry_id);\n        return json_encode($entry_meta);\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Bold Text Formatting Plugin - ExpressionEngine PHP\nDESCRIPTION: Defines a PHP class 'Bold' for use as an ExpressionEngine text formatting plugin. This class accepts a string parameter, and if none is provided, it defaults to EE's template tag data. It wraps the string in HTML <b> tags and assigns the result to the class property 'return_data' for rendering. Requires the ExpressionEngine environment for accessing 'ee()->TMPL->tagdata'. Used by placing the plugin file in the appropriate add-on directory with the 'pi' prefix, such as 'pi.amazing_bold_add_on.php'. Expected input is a string (optionally via constructor), output is the same string wrapped in bold HTML tags. Main constraint: relies on ExpressionEngine's template system.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/text-formatting.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Bold\n{\n    public $return_data = '';\n\n    function __construct($str = NULL)\n    {\n        if (empty($str))\n        {\n            $str = ee()->TMPL->tagdata;\n        }\n\n        $this->return_data = \"<b>\".$str.\"</b>\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Template Redirection with Status Code\nDESCRIPTION: This snippet shows how to use the redirect variable to send visitors to another template, with an optional status_code parameter to specify HTTP redirect codes like 301 for permanent redirects.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/single-variables.md#2025-04-22_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n{redirect='news/local' status_code=\"301\"}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Users with Access to a Status in ExpressionEngine PHP\nDESCRIPTION: Demonstrates how to get usernames of members who have access to a specific status through their roles.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/status.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Get the Status Object.\n$status = ee('Model')->get('Status')->filter('status','open')->first();\n\n// Get the related Roles.\n$roles = $status->Roles;\n\n// Get the Members in those Roles\n$members = $roles->Members->all();\n\n// Return the usernames to an array.\n$usernames = $members->pluck('username);\n\n// As one one line:\n$username_arrays = $ee('Model')\n                    ->get('Status')\n                    ->filter('status','open')\n                    ->first()\n                    ->Roles\n                    ->Members\n                    ->all()\n                    ->pluck('username');\n```\n\n----------------------------------------\n\nTITLE: Displaying Future Entries in ExpressionEngine Channel\nDESCRIPTION: Code snippet demonstrating how to enable the display of future-dated entries in an ExpressionEngine channel using the show_future_entries parameter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/channels-and-entries.md#2025-04-22_snippet_0\n\nLANGUAGE: ee\nCODE:\n```\n{exp:channel:entries channel=\"foobar\" show_future_entries=\"yes\"}\n```\n\n----------------------------------------\n\nTITLE: Creating URL Slug in PHP\nDESCRIPTION: Generates a URL slug from text with options for separators, casing, and removal of stopwords. Runs on PHP string functions. Core parameters include 'separator', 'lowercase', and 'remove_stopwords'. Yields a Formatter object.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n### `urlSlug(\\$options = [])`\n\nMake a URL slug from the text\n\n| Parameter | Type     | Description                                                                                                                                                                                                                                                                                                                        |\n| --------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| \\$options | `Array`  | (string) **separator** (default: `-`) - the character used to separate words. If not specified, will respect the application preferences. <br> (bool) **lowercase** (default: TRUE) - whether or not to force lowercase <br> (bool) **remove_stopwords** (default: FALSE) - whether or not to remove stopwords (a, the, and, etc.) |\n| Returns   | `Object` | A Formatter object\n```\n\n----------------------------------------\n\nTITLE: Using Embed Variables in ExpressionEngine Templates\nDESCRIPTION: Demonstrates how to use variables passed to an embedded template within the template itself using the 'embed:' prefix.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/embedding.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h2>My dog's name is {embed:dog_name}</h2>\n```\n\n----------------------------------------\n\nTITLE: Disabling IP and User Agent Requirements for Posting in ExpressionEngine\nDESCRIPTION: Determines whether users need a valid IP address and browser user agent when posting comments or Channel Form entries.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_118\n\nLANGUAGE: php\nCODE:\n```\n$config['require_ip_for_posting'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: ExpressionEngine OptionsField Management using PHP\nDESCRIPTION: Provides methods for handling field options and choices within the ExpressionEngine framework, including setting choices, encoding values, and managing empty states. These operations enable flexible management of dynamic input field options.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/cp-form/fields.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n### `setChoices($value)`\n\nA simple key=>value array pair to populate options (`choices`).\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| $choices | `array` | The array of options. |\n| Returns | `Form\\OptionsField` | `$this`, the Field object to help in chaining |\n```\n\nLANGUAGE: PHP\nCODE:\n```\n### `getChoices()`\n\nThe value to use on the Field (`choices`)\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| Returns | `mixed` | The set choices |\n```\n\nLANGUAGE: PHP\nCODE:\n```\n### `setEncode($encode)`\n\nWhether to format text so that it can be safely placed in a form field in the event it has HTML tags (`encode`).\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| $encode | `boolean` | Whether the Field is encoded |\n| Returns | `Form\\OptionsField` | `$this`, the Field object to help in chaining |\n```\n\nLANGUAGE: PHP\nCODE:\n```\n### `getEncode()`\n\nWhether this Field is encoded (`encode`)\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| Returns | `boolean` | Whether the Field is encoded |\n```\n\nLANGUAGE: PHP\nCODE:\n```\n### `setDisabledChoices($disabled_choices)`\n\nA list of keys used in the options array to prevent selection\t (`disabled_choices`).\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| $disabled_choices | `array` | The array of options to disable. |\n| Returns | `Form\\OptionsField` | `$this`, the Field object to help in chaining |\n```\n\nLANGUAGE: PHP\nCODE:\n```\n### `getDisabledChoices()`\n\nThe set disabled choices (`disabled_choices`)\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| Returns | `mixed` | The set disabled choices |\n```\n\nLANGUAGE: PHP\nCODE:\n```\n### `setEmptyText($disabled_choices)`\n\nThe text to display if there are no options (`empty_text`).\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| $empty_text | `string` | The text to display. |\n| Returns | `Form\\OptionsField` | `$this`, the Field object to help in chaining |\n```\n\nLANGUAGE: PHP\nCODE:\n```\n### `getEmptyText()`\n\nThe set text to display (`empty_text`)\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| Returns | `string` | The set text (`null` if not set) |\n```\n\n----------------------------------------\n\nTITLE: Category ID Parameter Usage in ExpressionEngine\nDESCRIPTION: Examples of using the category_id parameter to filter specific categories, including multiple categories and exclusions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-heading.md#2025-04-22_snippet_1\n\nLANGUAGE: ee\nCODE:\n```\ncategory_id=\"5\"\n```\n\nLANGUAGE: ee\nCODE:\n```\ncategory_id=\"13|42|147\"\n```\n\nLANGUAGE: ee\nCODE:\n```\ncategory_id=\"not 45|534|807\"\n```\n\n----------------------------------------\n\nTITLE: Querying Fluid Field by Field ID in PHP\nDESCRIPTION: Demonstrates how to retrieve a Fluid Field by filtering on entry_id and fluid_field_id, and ordering the results.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/fluid-field.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\n$fluid_field = ee('Model')\n            ->get('fluid_field:FluidField')\n            ->filter('entry_id', 4)\n            ->filter('fluid_field_id', 5)\n            ->order('order')\n            ->all();\n```\n```\n\n----------------------------------------\n\nTITLE: Member Email Input Field Markup - HTML\nDESCRIPTION: Provides a required email input field with an associated label, using type=\\\"email\\\" and standard HTML attributes. This is essential for the registration form and is compatible with front-end and ExpressionEngine validation logic.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<label for=\"email\">Email</label>\n<input type=\"email\" name=\"email\" value=\"\" maxlength=\"120\" size=\"40\" />\n```\n\n----------------------------------------\n\nTITLE: Pre-Execution Search Parameter Modification via pro_search_pre_search\nDESCRIPTION: This PHP hook allows pre-execution customization of search parameters within ExpressionEngine's Pro Search. Developers can append conditions to keyword queries, influencing how searches are processed while working with extension hooks.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/hooks.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$params = ee()->extensions->call('pro_search_pre_search', $params);\nif (ee()->extensions->end_script === TRUE) return ee()->TMPL->tagdata;\n```\n\n----------------------------------------\n\nTITLE: Defining Add-on Models in PHP\nDESCRIPTION: Specifies the `models` key within the `addon.setup.php` file. This associative array maps model aliases (keys) to their corresponding class names (values), relative to the add-on's defined namespace. This makes the add-on's models accessible through ExpressionEngine's model service (e.g., `ee('Model')->get('package:Name')`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n'models' => array(\n  'Name' => 'Model\\ClassName'\n)\n```\n\n----------------------------------------\n\nTITLE: After Comment Update Hook Call\nDESCRIPTION: Extension hook called after a comment is updated. Changes to the object at this point require manual saving.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/comment.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_comment_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Calling before_template_route_update Hook\nDESCRIPTION: Extension hook called before updating a template route object. Changes made to the object will be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-route.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_template_route_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Listing Example CAPTCHA Image URLs in Markdown\nDESCRIPTION: This Markdown snippet provides URL examples for the CAPTCHA image directory for use in the ExpressionEngine Control Panel. These URLs serve as templates for configuring the CAPTCHA web-accessible image location. The user must substitute their own domain or path as needed. The examples address different forms of URL syntax supported by ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/settings/captcha.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `https://example.com/images/captchas/`\n- `///example.com/images/captchas/`\n- `/images/captchas/`\n```\n\n----------------------------------------\n\nTITLE: HTML Link Tag Using ExpressionEngine Stylesheet Variable\nDESCRIPTION: Complete HTML link tag example that uses the stylesheet variable to reference a CSS template. This generates a proper link to the stylesheet with the appropriate media attributes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/stylesheet.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"{stylesheet='template_group/css_template'}\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Grid Model in ExpressionEngine\nDESCRIPTION: Shows how to load the legacy Grid model required for working with Grid fields.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-entry.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->load->model('grid_model');\n```\n\n----------------------------------------\n\nTITLE: Testing User's Forum Topic Count\nDESCRIPTION: Example of checking the total number of forum topics created by the user.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_28\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if logged_in_total_forum_topics < 1}  Care to start something?  {/if}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Keys for Relationship Mapping\nDESCRIPTION: Example showing how to specify custom from_key and to_key values for relationship mapping. This allows precise control over which columns are used to establish the relationship.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/relating-models.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nprotected static $_relationships = array(\n  'Authors' => array(\n    'type' => 'hasMany',\n    'model' => 'ee:Member',\n    'from_key' => 'author_id',\n    'to_key' => 'member_id'\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Calling after_template_route_update Hook\nDESCRIPTION: Extension hook called after updating a template route object. Changes to the object will not be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-route.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_template_route_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Setting expire_session_on_browser_close in ExpressionEngine\nDESCRIPTION: Configuration setting to end a user's session when the browser is closed, enhancing security but potentially requiring more frequent logins.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_73\n\nLANGUAGE: php\nCODE:\n```\n$config['expire_session_on_browser_close'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Multiple Message Fields Using Array Notation in ExpressionEngine Forms\nDESCRIPTION: Example showing how to use array notation with the message field to capture multiple pieces of information in a contact form.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_3\n\nLANGUAGE: ee\nCODE:\n```\nHome Phone: <input type=\"text\" name=\"message[]\" size=\"12\" maxlength=\"15\" /><br /> <br />\nCell Phone: <input type=\"text\" name=\"message[]\" size=\"12\" maxlength=\"15\" />\n```\n\n----------------------------------------\n\nTITLE: Naming a Prolet in PHP\nDESCRIPTION: This snippet illustrates how to assign a name to a Prolet using the `$name` property or the `getName()` method. The name serves as the title for both the Dock button and popup window of the Prolet. Using the method form allows for localization through language keys.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/prolets.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nprotected $name = 'Sample Prolet';\n```\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getName()\n{\n    return lang('sample_prolet');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ignore_member_stats in ExpressionEngine\nDESCRIPTION: Setting to disable member role count being saved during creating/updating of members when using models, which can improve performance.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_86\n\nLANGUAGE: php\nCODE:\n```\n$config['ignore_member_stats'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Setting Site URL in ExpressionEngine Index File (PHP)\nDESCRIPTION: Sets the full URL to the site's web root directly in the index file. Useful for multi-site setups or when the URL needs to be determined dynamically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_149\n\nLANGUAGE: PHP\nCODE:\n```\n$assign_to_config['site_url'] = 'https://domain2.com';\n```\n\n----------------------------------------\n\nTITLE: Setting the Form Name Attribute in ExpressionEngine\nDESCRIPTION: This snippet illustrates the use of the 'form_name=' parameter in an ExpressionEngine tag, for example {exp:member:edit_avatar}. It sets the 'name' attribute of the generated HTML <form> tag to 'login'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-avatar.md#2025-04-22_snippet_4\n\nLANGUAGE: expressionengine\nCODE:\n```\nform_name=\"login\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Display if Avatar Exists in ExpressionEngine\nDESCRIPTION: This ExpressionEngine conditional tag checks if the current member has an avatar uploaded. If an avatar exists, the content within the {if avatar} ... {/if} block is displayed, allowing access to avatar variables like {avatar_url}, {avatar_width}, and {avatar_height}.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-avatar.md#2025-04-22_snippet_7\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if avatar}\n    Your current avatar:\n    <img src=\"{avatar_url}\" width=\"{avatar_width}\" height=\"{avatar_height}\">\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Automated Index Building URL Example in ExpressionEngine\nDESCRIPTION: Examples of URLs for automated building of search indexes in ExpressionEngine's Pro Search module. These URLs can be used in CRON jobs to trigger index and lexicon updates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/collections.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttp://example.com/index.php?ACT=99&key=12345&collection_id=3\n\nhttp://example.com/index.php?ACT=99&key=12345&entry_id=14,15,16&build=lexicon\n\nhttp://example.com/index.php?ACT=99&key=12345&collection_id=1,2&build=index\n```\n\n----------------------------------------\n\nTITLE: Advanced Live Preview with Channel Entries Parameter Control\nDESCRIPTION: This snippet shows a more complex use of is_live_preview_request to control parameters within a channel entries tag, allowing preview templates to show content that wouldn't appear on the live site.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/single-variables.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n{if is_live_preview_request}\n    {exp:channel:entries\n        channel=\"events\"\n        limit=\"1\"\n        {if is_live_preview_request}\n        \tstatus=\"open|archive|draft\" show_future_entries=\"yes\" show_expired=\"yes\"\n        {if:else}\n        \tstatus=\"open\"\n        {/if}\n        disable=\"category_fields|member_data|pagination\"\n    }\n        {title}\n    {/exp:channel:entries}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Excluding Member Role IDs from XSS Cleaning in PHP\nDESCRIPTION: This snippet demonstrates how to exclude specific member role IDs from XSS cleaning in ExpressionEngine. It uses the 'xss_clean_member_group_exception' configuration option to list exempt role IDs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_179\n\nLANGUAGE: php\nCODE:\n```\n$config['xss_clean_member_group_exception'] = '2, 5';\n```\n\n----------------------------------------\n\nTITLE: Pair Tag Usage with Variable Modifiers\nDESCRIPTION: Demonstrates using the Pair tag with variable modifiers for advanced functionality\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/tags.md#2025-04-22_snippet_3\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_variables:parse}\n  Encrypted text var: {my_text:encrypt}\n{/exp:pro_variables:parse}\n```\n\n----------------------------------------\n\nTITLE: Generating a Dashboard Widget via CLI ExpressionEngine PHP\nDESCRIPTION: Provides the command to automatically generate the required files for a PHP-based dashboard widget within an addon using the ExpressionEngine CLI. This command-line instruction assumes that PHP and ExpressionEngine CLI are already set up and accessible. It does not take parameters or produce output, but creates the necessary boilerplate files for a widget in the designated addon directory.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/widgets.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp system/ee/eecli.php make:widget\n```\n\n----------------------------------------\n\nTITLE: Calling After Template Snippet Update Hook in PHP\nDESCRIPTION: This snippet illustrates the call to the 'after_template_snippet_update' hook in ExpressionEngine. It passes the current TemplateSnippet model object, its values, and modified values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-snippet.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_template_snippet_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Calling before_status_update Extension Hook in PHP\nDESCRIPTION: Example of how the before_status_update hook is called. This hook fires before a status object is updated and includes the modified values, allowing changes to be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/status.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_status_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Example HTML List Output from `markup` Parameter (HTML)\nDESCRIPTION: This shows the rendered HTML output generated by the ExpressionEngine template snippet using `markup='ul'`. It creates an unordered list (`<ul>`) with each selected item label in its own list item (`<li>`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/multiselect.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n    <li>Green</li>\n    <li>Blue</li>\n    <li>Orange</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Setting ignore_entry_stats in ExpressionEngine\nDESCRIPTION: Configuration to disable entry stats and analytics being saved during creating/updating of entries when using models, which can improve performance.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_85\n\nLANGUAGE: php\nCODE:\n```\n$config['ignore_entry_stats'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Distance-based Search in ExpressionEngine\nDESCRIPTION: Example of distance-based search implementation using latitude/longitude coordinates. Filters entries based on distance from a fixed point and includes radius selection.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/examples.md#2025-04-22_snippet_2\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_search:form query=\"{segment_3}\"}\n\n  {!-- The user's lat/long values --}\n  <input type=\"hidden\" name=\"distance:from\" value=\"52.163298|4.505547\">\n\n  <select name=\"distance:radius\">\n    <option value=\"\">--</option>\n    {exp:low_list:each items=\"5|10|50|100\" as=\"distance\"}\n      <option value=\"{distance}\"{if distance == pro_search_distance:radius} selected{/if}>\n        {distance}km\n      </option>\n    {/exp:low_list:each}\n  </select>\n\n  <button type=\"submit\">Go</button>\n{/exp:pro_search:form}\n\n{exp:pro_search:results\n  query=\"{segment_3}\"\n  channel=\"people\"\n  distance:to=\"cf_location_lat|cf_location_long\"\n  distance:unit=\"km\"\n}\n  <p>{title} is {pro_search_distance}km away.</p>\n  {if no_results}\n    <p>Sorry, nothing found within a {pro_search_distance:radius}km radius.</p>\n  {/if}\n{/exp:pro_search:results}\n```\n\n----------------------------------------\n\nTITLE: Optional Permission Configuration for ExpressionEngine Jump Menu Command\nDESCRIPTION: This snippet shows how to add an optional permission configuration to a jump menu command. It specifies the ExpressionEngine Role permission required for a user to see the command.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/jump-menu.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'permission' => 'ban_users'\n```\n\n----------------------------------------\n\nTITLE: Listing Comment Subscribers in ExpressionEngine\nDESCRIPTION: This snippet utilizes the `{exp:comment:subscriber_list}` tag pair to display a formatted list of subscribers for a specific entry's comments. It demonstrates using conditionals like `{if subscriber_count == 1}` and `{if subscriber_is_member}` along with variables such as `{subscriber_total_results}`, `{subscriber_screen_name}`, `{subscriber_member_id}`, and `{subscriber_guest_total}` to structure the output. This tag is intended for single entry pages and its variables are prefixed to avoid conflicts when used within other tags.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/subscriptions.md#2025-04-22_snippet_1\n\nLANGUAGE: ee\nCODE:\n```\n{exp:comment:subscriber_list}\n  {if subscriber_count == 1}\n    <p>{subscriber_total_results} Subscribed</p>\n    <ul>\n  {/if}\n\n  {if subscriber_is_member}\n    <li><a href=\"{path='member/{subscriber_member_id}'}\">{subscriber_screen_name}</a></li>\n  {/if}\n\n  {if subscriber_count == subscriber_total_results}\n    <li>and {subscriber_guest_total} Guest{if subscriber_guest_total != 1}s{/if}</li>\n    </ul>\n  {/if}\n{/exp:comment:subscriber_list}\n```\n\n----------------------------------------\n\nTITLE: HTML Layout for Contributors Section in ExpressionEngine Release Notes\nDESCRIPTION: HTML markup used to display a grid of contributors in the ExpressionEngine release notes. The layout includes profile images, names, and GitHub username links in a responsive grid format.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/11818941?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Matt Johnson</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=matthewjohns0n\" target=\"_BLANK\">@matthewjohns0n</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/563996?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Bryan Nielsen</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bryannielsen\" target=\"_BLANK\">@bryannielsen</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calling after_file_bulk_delete Hook in PHP\nDESCRIPTION: Demonstrates the implementation of the after_file_bulk_delete hook in ExpressionEngine. This hook is called after a bulk deletion of file objects.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/file.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_file_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Encoding URL in PHP\nDESCRIPTION: Encodes URL with an option to convert spaces to plus signs, uses PHP's URL encoding functions. Important parameter is 'plus_encoded_spaces'. Generates a Formatter object.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\n### `urlEncode(\\$options = [])`\n\nURL encode the text\n\n| Parameter | Type     | Description                                                                                               |\n| --------- | -------- | --------------------------------------------------------------------------------------------------------- |\n| \\$options | `Array`  | (bool) **plus_encoded_spaces** (default: FALSE) - whether or not to encode spaces as `+` instead of `%20` |\n| Returns   | `Object` | A Formatter object\n```\n\n----------------------------------------\n\nTITLE: Setting Blank Row Template for GridInput in PHP\nDESCRIPTION: Defines a template for new blank rows in the GridInput.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/table.md#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$grid->setBlankRow(array(\n  form_input('short_name'),\n  form_dropdown(\n    'resize_type',\n    array(\n      'constrain' => lang('image_manip_type_opt_constrain'),\n      'crop' => lang('image_manip_type_opt_crop'),\n    )\n  ),\n  form_input('width'),\n  form_input('height')\n));\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Migrations - PHP\nDESCRIPTION: This snippet includes commands to roll back migrations, such as using `rollback` for the last group of migrations, `rollback --steps=3` to undo the last three groups, and `reset` to clear all migrations. These are essential for managing unwanted or erroneous modifications in the database schema during development or deployment.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/migrate.md#2025-04-22_snippet_5\n\nLANGUAGE: CLI\nCODE:\n```\nphp eecli.php migrate:rollback\n```\n\nLANGUAGE: CLI\nCODE:\n```\nphp eecli.php migrate:rollback --steps=3\n```\n\nLANGUAGE: CLI\nCODE:\n```\nphp eecli.php migrate:reset\n```\n\n----------------------------------------\n\nTITLE: Defining a Template-Based Dashboard Widget ExpressionEngine HTML\nDESCRIPTION: Shows how to create a custom dashboard widget as a template file in the 'pro-dashboard-widgets' template group in ExpressionEngine. The widget uses the same {widget} tag as HTML widgets for metadata and markup, and then calls ExpressionEngine’s channel:entries tag to loop through and render recent entries from the 'news' channel. No external dependencies are required apart from ExpressionEngine’s template system and channel module. Inputs are parameters in the {widget} tag and channel:entries specification; output is dynamic HTML populating the widget.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/widgets.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{widget title=\"Recent Entries\" width=\"half\"}\n{exp:channel:entries channel=\"news\" limit=\"10\"}\n    <h2>{title}</h2>\n    {body}\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic HTML Structure for Fieldtype Inputs in PHP\nDESCRIPTION: Shows the HTML input structure for a custom fieldtype with multiple text fields. This structure determines how form data will be organized when submitted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/enhanced.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" name=\"field_id_1[text1]\">\n<input type=\"text\" name=\"field_id_1[text2]\">\n```\n\n----------------------------------------\n\nTITLE: Accessing Text and Child Nodes in the DOM - JavaScript\nDESCRIPTION: These snippets demonstrate basic access to text content and child nodes of DOM elements using JavaScript. \"someTextNode.textValue\" (should be \"textContent\") retrieves the text of a TextNode, while \"someElementNode.childNodes\" accesses the child nodes of an Element. Dependencies: standard DOM API, no external libraries. Use these basics to traverse and inspect DOM node trees. Inputs: valid DOM Node objects; Outputs: strings or NodeList respectively. The code assumes execution in a browser environment.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/rangesandselections.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsomeTextNode.textValue // node text\nsomeElementNode.childNodes // children\n```\n\n----------------------------------------\n\nTITLE: Number with Colon Error\nDESCRIPTION: Example of an error with a number followed by a colon in a conditional.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_39\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if 5:2}\n```\n\n----------------------------------------\n\nTITLE: Using Aliases in Complex Model Queries in ExpressionEngine PHP\nDESCRIPTION: Demonstrates how to simplify complex queries by aliasing models and using those aliases in filters and sorting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n->get('Template as t')\n->with('TemplateGroup as tg')\n->filter('tg.group_name', 'news')\n->sort('t.template_name')\n->all();\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Form Class Parameter - ExpressionEngine Template Syntax\nDESCRIPTION: Shows how to specify a custom CSS class for the registration form using the form_class parameter in ExpressionEngine. This enables style customization through external or embedded CSS. No special dependencies are required.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_2\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\nform_class=\"register\"\n```\n\n----------------------------------------\n\nTITLE: Generating Entry Comment Link by URL Title in ExpressionEngine/HTML\nDESCRIPTION: Creates a permalink to a specified template (e.g., 'channel/comments') using the `{url_title_path}` variable, automatically appending the entry's URL title to the path.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{url_title_path='channel/comments'}\">permalink</a>\n```\n\n----------------------------------------\n\nTITLE: Invoking before_role_save Extension Hook in PHP\nDESCRIPTION: Called before a role object is inserted or updated. Changes made to the object will be automatically saved. Accepts the role object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/role.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_role_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling rte_before_replace Hook in PHP\nDESCRIPTION: Demonstrates how the rte_before_replace hook is called in ExpressionEngine. This hook allows modification of field data before it is displayed using a template tag and before any internal replacements are made.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/rte.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$data = ee()->extensions->call('rte_before_replace', $this, $data);\n```\n\n----------------------------------------\n\nTITLE: Implementing the install() Method for Google Maps Fieldtype\nDESCRIPTION: This method provides default global settings for the Google Maps fieldtype, setting initial values for latitude, longitude, and zoom level. These values determine what the default map looks like.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/example.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction install()\n{\n    // Somewhere in Oregon ...\n    return array(\n        'latitude'  => '44.06193297865348',\n        'longitude' => '-121.27584457397461',\n        'zoom'      => 13\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing save_settings() for Google Maps Fieldtype\nDESCRIPTION: Handles saving the field-specific settings for individual instances of the Google Maps fieldtype. Processes the latitude, longitude, and zoom values from the POST data.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/example.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction save_settings($data)\n{\n    return array(\n        'latitude'  => ee()->input->post('latitude'),\n        'longitude' => ee()->input->post('longitude'),\n        'zoom'      => ee()->input->post('zoom')\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Models in ExpressionEngine\nDESCRIPTION: Demonstrates how to delete an existing model by calling the delete() method.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$template->delete();\necho $template->template_name;\n```\n\n----------------------------------------\n\nTITLE: Calling after_template_insert Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the after_template_insert hook is called in ExpressionEngine. This hook is triggered after a template is inserted, but any changes made to the object will not be automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_template_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Emoticons Configuration in PHP\nDESCRIPTION: Enables or disables the conversion of text smileys to emoji.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_59\n\nLANGUAGE: php\nCODE:\n```\n$config['enable_emoticons'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Setting Site Index File in ExpressionEngine Index File (PHP)\nDESCRIPTION: Sets the filename of the site index file directly in the index file. Useful for multi-site setups or when customizing the index filename.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_146\n\nLANGUAGE: PHP\nCODE:\n```\n$assign_to_config['site_index'] = 'secondsite.php';\n```\n\n----------------------------------------\n\nTITLE: Initializing ExpressionEngine CP Table with Custom Options in PHP\nDESCRIPTION: Instantiates the ExpressionEngine Control Panel Table service using the `ee()` dependency injection helper, passing an array of options. This example enables the `autosort` and `autosearch` features by setting their corresponding keys to TRUE in the options array. Requires the ExpressionEngine framework and its dependency injection container.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/table.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Specify other options\n$table = ee('CP/Table', array('autosort' => TRUE, 'autosearch' => TRUE));\n```\n\n----------------------------------------\n\nTITLE: Category URL Title Parameter in ExpressionEngine\nDESCRIPTION: Example of using the category_url_title parameter to display a specific category by its URL title.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-heading.md#2025-04-22_snippet_2\n\nLANGUAGE: ee\nCODE:\n```\ncategory_url_title=\"press-releases\"\n```\n\n----------------------------------------\n\nTITLE: Setting Comment Edit Time Limit in ExpressionEngine (PHP)\nDESCRIPTION: Sets the time limit in seconds for members to edit their comments on the front end. Set to 0 for no limit. Super Admins are exempt from this limit.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$config['comment_edit_time_limit'] = '120';\n```\n\n----------------------------------------\n\nTITLE: Using low_flatten_results Helper Function in Pro Search\nDESCRIPTION: Functions like array_column() but also works for PHP versions earlier than 5.5.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/functions.md#2025-04-22_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n$column_values = low_flatten_results($array, 'column_name');\n```\n\n----------------------------------------\n\nTITLE: Fetching ExpressionEngine Version History JSON Feed\nDESCRIPTION: URL to retrieve the JSON feed containing ExpressionEngine's current version and version history. This feed provides up-to-date information on available versions and their release dates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/json-version-feed.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://expressionengine.com/support/expressionengine-version-history.json\n```\n\n----------------------------------------\n\nTITLE: Enhancement in ExpressionEngine 7.2.13 - New Channel Entries Parameter\nDESCRIPTION: A new parameter called 'needed_fields_only' was added to the channel entries loop in ExpressionEngine 7.2.13. This parameter allows developers to optimize performance by only loading required fields in channel entries queries.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n- **Enhancements** 🚀\n  - Added new needed_fields_only parameter to channel entries loop\n```\n\n----------------------------------------\n\nTITLE: Saving CSV to File\nDESCRIPTION: Shows how to save CSV data to a file on disk using the save() method.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/csv.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$csv->save('/path/to/file.csv');\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_layout_update Hook in PHP\nDESCRIPTION: Example of how the before_channel_layout_update hook is called before updating a channel layout. It passes the current ChannelLayout object, its values, and modified values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-layout.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_layout_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: After Template Group Save Hook Call\nDESCRIPTION: Extension hook called after saving a template group. Changes to the object will not be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-group.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_template_group_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: ExpressionEngine License Header\nDESCRIPTION: HTML comment block containing project attribution, copyright information, and license details for the ExpressionEngine User Guide.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/channels-and-entries.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\n    This source file is part of the open source project\n    ExpressionEngine User Guide (https://github.com/ExpressionEngine/ExpressionEngine-User-Guide)\n\n    @link      https://expressionengine.com/\n    @copyright Copyright (c) 2003-2020, Packet Tide, LLC (https://packettide.com)\n    @license   https://expressionengine.com/license Licensed under Apache License, Version 2.0\n-->\n```\n\n----------------------------------------\n\nTITLE: String Comparison Operators in ExpressionEngine\nDESCRIPTION: Examples of string comparison operators for begins with, ends with, and contains checks.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_3\n\nLANGUAGE: ee\nCODE:\n```\n{if \"ExpressionEngine\" ^= \"Express\"}Yes it does{/if}\n\n{if url $= \".fr\"}Your website is from France.{/if}\n\n{if body *= excerpt}Noone expected that.{/if}\n```\n\n----------------------------------------\n\nTITLE: Marking a FolderItem as Default in PHP\nDESCRIPTION: Designates the `FolderItem` as the default item within its context. Returns the `FolderItem` instance (`$this`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nasDefaultItem()\n```\n\n----------------------------------------\n\nTITLE: Navigating to Email Settings in ExpressionEngine\nDESCRIPTION: Instructions for accessing the outgoing email settings in ExpressionEngine's admin panel. This step is crucial for configuring and troubleshooting email functionality.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/email.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1.  Navigate to `Settings --> Outgoing Email`.\n```\n\n----------------------------------------\n\nTITLE: Contributor Grid Layout HTML\nDESCRIPTION: HTML structure for displaying contributor information in a responsive grid layout using Tailwind CSS classes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/563996?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Bryan Nielsen</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bryannielsen\" target=\"_BLANK\">@bryannielsen</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Selecting Member by ID - ExpressionEngine Template Parameter - Markdown\nDESCRIPTION: This snippet shows how to specify a member by ID in the custom_profile_data tag using the member_id parameter. It allows template authors to display information for a specific user based on their unique numeric ID. This parameter works independently or in combination with other parameters within ExpressionEngine template tags.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/custom-profile-data.md#2025-04-22_snippet_1\n\nLANGUAGE: ExpressionEngine Template Tags\nCODE:\n```\nmember_id=\"147\"\n```\n\n----------------------------------------\n\nTITLE: Before Template Group Insert Hook Call\nDESCRIPTION: Extension hook called before inserting a template group. Changes made to the object will be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-group.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_template_group_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Invoking cache_clearing_end Hook in ExpressionEngine PHP\nDESCRIPTION: This PHP snippet demonstrates calling the `cache_clearing_end` extension hook using `ee()->extensions->call()`. It passes the `$which` parameter (indicating the type of cache cleared: 'all', 'page', 'db', 'tag', or 'sql') to any active extensions listening to this hook. This allows extensions to perform actions after specific cache types are cleared.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/functions.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$result = ee()->extensions->call('cache_clearing_end', $which);\n```\n\n----------------------------------------\n\nTITLE: Running Add-on Migrations via CLI\nDESCRIPTION: This command executes pending database migrations for a specific ExpressionEngine add-on using the CLI. This is necessary to activate newly created actions by running the associated migration file.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp system/ee/eecli.php migrate\n```\n\n----------------------------------------\n\nTITLE: Calling the relationships_query Hook in PHP\nDESCRIPTION: This code demonstrates how the relationships_query hook is called. It allows developers to modify the existing query that retrieves related entries for front end tag parsing or perform custom queries.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/relationships.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif (ee()->extensions->active_hook('relationships_query') === TRUE)\n{\n    $result = ee()->extensions->call(\n        'relationships_query',\n        $node->field_name(),\n        $entry_ids,\n        $depths,\n        $db->_compile_select()\n    );\n}\nelse\n{\n    $result = $db->get()->result_array();\n}\n```\n\n----------------------------------------\n\nTITLE: Render Table in View - ExpressionEngine PHP\nDESCRIPTION: This code compiles the table data for view consumption and renders it using a shared view. It requires the base URL for creating sorting links and makes use of ExpressionEngine's View service.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/table.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$vars['table'] = $table->viewData(ee('CP/URL', 'channels'));\nreturn ee('View')->make('channels/index')->render($vars);\n```\n\n----------------------------------------\n\nTITLE: Complete Edit Avatar Form Example in ExpressionEngine\nDESCRIPTION: This is a complete example of the {exp:member:edit_avatar} tag usage in ExpressionEngine. It includes setting a return path, conditionally displaying the current avatar or a 'No avatar' message using {if avatar} and {if no_avatar}, providing a file input ('userfile') for uploading a new avatar, and conditionally showing a 'Remove Avatar' button ('remove') if an avatar already exists.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-avatar.md#2025-04-22_snippet_9\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:member:edit_avatar return=\"{segment_1}/profile-avatar\"}\n\n    Current Avatar:\n    {if avatar}\n    My avatar: <img src=\"{avatar_url}\" border=\"0\" width=\"{avatar_width}\" height=\"{avatar_height}\" />\n    {/if}\n    {if no_avatar}No avatar{/if}\n\n    <div>\n    Upload an avatar: <input type=\"file\" name=\"userfile\" size=\"20\" class=\"input\" /><br>\n    </div>\n\n    <input type='submit' class='submit' value='Upload Avatar' />\n\n    {if avatar}\n    <input type='submit' class='submit' value='Remove Avatar' name=\"remove\" />\n    {/if}\n\n{/exp:member:edit_avatar}\n```\n\n----------------------------------------\n\nTITLE: Adding Field to Field Set in ExpressionEngine PHP\nDESCRIPTION: Shows how to add a Field to a Field Set using the getField method. This example creates a text input field named 'first_name'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/cp-form/field-sets.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$field = $field_set->getField('first_name', 'text');\n```\n\n----------------------------------------\n\nTITLE: Excluding Member IDs from XSS Cleaning in PHP\nDESCRIPTION: This code illustrates how to exclude specific member IDs from XSS cleaning in ExpressionEngine. It uses the 'xss_clean_member_exception' configuration option to list exempt member IDs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_178\n\nLANGUAGE: php\nCODE:\n```\n$config['xss_clean_member_exception'] = '3, 14, 83';\n```\n\n----------------------------------------\n\nTITLE: Using variable_time Tag in ExpressionEngine Templates\nDESCRIPTION: Demonstrates usage of the {variable_time} tag with various date formats and parameters. This tag allows for flexible date manipulation and formatting in templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/single-variables.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n{variable_time date=\"2 days ago\" format=\"%F %d, %Y\"}\n{variable_time:relative date='2018-10-25' units='days'}\n{variable_time date='{segment_3}-{segment_4}' format='%F'}\n{if \"{variable_time date='2 weeks ago' format='%U'}\" >= \"{variable_time date='2018-04-12'}\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Webmaster Name for Auto-generated Emails in PHP\nDESCRIPTION: This snippet demonstrates how to set the 'From' name for auto-generated emails in ExpressionEngine. It uses the 'webmaster_name' configuration option.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_173\n\nLANGUAGE: php\nCODE:\n```\n$config['webmaster_name'] = 'Your Favorite Website';\n```\n\n----------------------------------------\n\nTITLE: Preview Email Functionality in ExpressionEngine\nDESCRIPTION: This code shows how to provide a preview of an email message using ExpressionEngine. It includes setting up a preview parameter and using the email:preview tag pair in the template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_7\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{exp:email:contact_form preview=\"about/contact-preview\"}\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{exp:email:tell_a_friend preview=\"about/tellafriend-preview\"}\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP Password in ExpressionEngine (PHP)\nDESCRIPTION: Sets the password for SMTP authentication when mail protocol is set to SMTP. Required for sending emails through an SMTP server that requires authentication.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_151\n\nLANGUAGE: PHP\nCODE:\n```\n$config['smtp_password'] = 'ic6XpWJnv4ip';\n```\n\n----------------------------------------\n\nTITLE: Invoking before_role_insert Extension Hook in PHP\nDESCRIPTION: Called before a role object is inserted. Changes made to the object will be automatically saved. Accepts the role object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/role.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_role_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Implementing display_global_settings() for Google Maps Fieldtype\nDESCRIPTION: Creates the interface for managing global settings for the Google Maps fieldtype in the ExpressionEngine control panel. This function generates form elements for latitude, longitude, and zoom settings.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/example.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction display_global_settings()\n{\n    $val = array_merge($this->settings, $_POST);\n\n    $form = form_label('latitude', 'latitude').NBS.form_input('latitude', $val['latitude']).NBS.NBS.NBS.' ';\n    $form .= form_label('longitude', 'longitude').NBS.form_input('longitude', $val['longitude']).NBS.NBS.NBS.' ';\n    $form .= form_label('zoom', 'zoom').NBS.form_dropdown('zoom', range(1, 20), $val['zoom']);\n\n    return $form;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Private Message Link for User - ExpressionEngine Variable in HTML\nDESCRIPTION: This snippet demonstrates how to create an anchor tag that allows sending a private message to a user. The {send_private_message} variable provides the URL, and {screen_name} personalizes the link's label. The resulting link opens the messaging interface for that user.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/custom-profile-data.md#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"{send_private_message}\">Send Private Message to {screen_name}.</a>\n```\n\n----------------------------------------\n\nTITLE: Archiving and Compressing rsync Backups With tar - Unix Shell\nDESCRIPTION: This chained command first performs a sync from a remote production server to a 'backup_latest' folder using rsync, then uses tar to archive and compress the results into a dated .tgz file. The tar command preserves ownership data and uses the snapshot folder as its source. Dependencies are rsync, tar, and shell utilities; both commands should succeed for the .tgz file to be created. Outputs include an up-to-date folder and a compressed dated archive.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/database-backup.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nrsync -ahvz --delete user@production_server:~/public/ ~/backups/backup_latest/ &&\ntar pcvzfC ~/backups/$(date +%F).tgz --same-owner ~/backups/backup_latest .\n```\n\n----------------------------------------\n\nTITLE: Using Checkbox and Multi Select Relationship Fields\nDESCRIPTION: Examples of how to use checkbox and multiselect fields within relationship tags in ExpressionEngine. The output can be a comma-separated list of labels or detailed pairs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_7\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{relationship_field}\\n  {relationship_field:my_checkbox}\\n{/relationship_field}\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{relationship_field}\\n  {relationship_field:my_checkbox}\\n     Value: {item}<br>\\n     Value: {item:value}<br>\\n     Label: {item:label}<br>\\n  {/relationship_field:my_checkbox}\\n{/relationship_field}\n```\n\n----------------------------------------\n\nTITLE: Human-Readable File Size in ExpressionEngine\nDESCRIPTION: Demonstrates how to display the file size in a readable format with HTML tags or spelled out. Requires a file field with file size property enabled.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/file.md#2025-04-22_snippet_5\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{file_size:human}\n```\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{file_size:human_long}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in PHP\nDESCRIPTION: This code sets up a connection to the ExpressionEngine database, detailing parameters such as hostname, database name, user credentials, character set, and more, necessary for database interactions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/config/config.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$config['database'] = array(\n    'expressionengine' => array(\n        'hostname' => 'localhost',\n        'database' => 'ee740',\n        'username' => 'root',\n        'password' => '',\n        'dbprefix' => 'exp_',\n        'char_set' => 'utf8mb4',\n        'dbcollat' => 'utf8mb4_unicode_ci',\n        'port'     => ''\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Outputting Pro Variables in Channel Entries\nDESCRIPTION: This snippet demonstrates how to output a Pro Variable quote field in a channel entries loop. It uses the ':var' suffix to output the variable name as a variable itself.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/fieldtype.md#2025-04-22_snippet_0\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:channel:entries channel=\"news\"}\n  <h2>{title}</h2>\n  {news_intro}\n  {if news_quote}<blockquote><p>{news_quote:var}</p></blockquote>{/if}\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Traversing Trees with Iterators in PHP\nDESCRIPTION: Shows various tree traversal methods including preorder, postorder, breadth-first, and leaf iteration. Each iterator provides a way to navigate and process nodes starting from the root or leaves.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/tree-datastructure.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$it = $node->some_iterator_function();\n\nforeach ($it as $node)\n{\n    $indent = str_repeat(' ', 4 * $it->getDepth()); // indent each level 4 spaces\n    echo $indent.$node->name();\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Site Manager Template Partial Examples\nDESCRIPTION: Demonstrates naming conventions for Template partials in a Multiple Site Manager setup, showing site-specific and global partial naming patterns.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/partials.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{packettide_date_formatting}\n\n{expressionengine_date_formatting}\n\n{global_date_formatting}\n```\n\n----------------------------------------\n\nTITLE: Using params->get Method in Pro Search\nDESCRIPTION: Retrieves parameters for the search query, either all parameters or a single one with an optional fallback value.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/functions.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$value = $this->params->get('parameter_name', 'fallback_value');\n```\n\n----------------------------------------\n\nTITLE: Image Resizing in Templates in Example\nDESCRIPTION: Shows how to perform on-the-fly image resizing in an ExpressionEngine template using specific parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/file.md#2025-04-22_snippet_6\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{news_image:resize width=\"100\" height=\"100\"}\n```\n\n----------------------------------------\n\nTITLE: Using {if no_results} Conditional in ExpressionEngine\nDESCRIPTION: Demonstrates how to use the {if no_results} conditional to display a message when no comments are returned or redirect to another template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_38\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if no_results} content {/if}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if no_results}  <p>There are no comments for this entry yet.</p>  {/if}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if no_results} {redirect=\"site/noresult\"} {/if}\n```\n\n----------------------------------------\n\nTITLE: Calling Before Channel Field Group Insert Hook in PHP\nDESCRIPTION: Example of how the before_channel_field_group_insert hook is called in ExpressionEngine. This hook allows modification of the ChannelFieldGroup model before it's inserted into the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field-group.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_field_group_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Implementing replace_tag() for Google Maps Fieldtype\nDESCRIPTION: Renders the Google Maps field for the frontend, generating the necessary JavaScript and HTML container. This method is called when the field's tag is used in a template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/example.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction replace_tag($data, $params = array(), $tagdata = FALSE)\n{\n    static $script_on_page = FALSE;\n    $ret = '';\n\n    list($latitude, $longitude, $zoom) = explode('|', $data);\n\n    // google maps javascript ...\n\n    return $ret.'<div style=\"height: 500px;\"><div id=\"map_canvas_'.$this->field_id.'\" style=\"width: 100%; height: 100%\"></div></div>';\n}\n```\n\n----------------------------------------\n\nTITLE: Using member_update_start Hook in ExpressionEngine PHP\nDESCRIPTION: This code demonstrates how the member_update_start hook is called before updating member data. It allows modification of the data before the update is processed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/member-model.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$data = $this->extensions->call('member_update_start', $member_id, $data);\n```\n\n----------------------------------------\n\nTITLE: Setting Error Return Path in ExpressionEngine\nDESCRIPTION: The `return_error` parameter specifies the template path (template_group/template) where the user should be redirected if form validation errors occur. This is used when `inline_errors` is not enabled.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_11\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\nreturn_error=\"template_group/error\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Duration in PHP using ExpressionEngine's Number Formatter\nDESCRIPTION: Demonstrates how to format a number of seconds into a duration string using the duration() method.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/number.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$duration = ee('Format')->make('Number', 112358)->duration();\n// 31:12:38\n```\n\n----------------------------------------\n\nTITLE: Number to Text Conversion with :spellout Modifier\nDESCRIPTION: Converts numbers to spelled-out text with options for capitalization and locale settings. Supports parameters for formatting and language selection.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n{rank:spellout}\n{!-- forty-two --}\n\n{rank:spellout capitalize='ucfirst'}\n{!-- Forty-two --}\n\n{rank:spellout locale='de_DE'}\n{!-- zwei­und­vierzig --}\n```\n\n----------------------------------------\n\nTITLE: HTML Compatibility Matrix Table for ExpressionEngine PHP Requirements\nDESCRIPTION: A structured HTML table displaying PHP version compatibility across ExpressionEngine versions. Uses CSS classes ee-works, ee-maybe, and ee-fail to indicate compatibility status, with SVG logos for both PHP and ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/requirements.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"ee-version-compatiblity\">\n    <div class=\"table-wrapper\">\n        <table>\n            <thead>\n                <tr>\n                    <th><strong></strong></th>\n                    <th><img src=\"../_images/php-logo.svg\" class=\"php-logo\"><strong>4.0</strong></th>\n                    <th><img src=\"../_images/php-logo.svg\" class=\"php-logo\"><strong>5.6</strong></th>\n                    <th><img src=\"../_images/php-logo.svg\" class=\"php-logo\"><strong>7.0</strong></th>\n                    <th><img src=\"../_images/php-logo.svg\" class=\"php-logo\"><strong>7.2</strong></th>\n                    <th><img src=\"../_images/php-logo.svg\" class=\"php-logo\"><strong>7.4</strong></th>\n                    <th><img src=\"../_images/php-logo.svg\" class=\"php-logo\"><strong>8.0</strong></th>\n                    <th><img src=\"../_images/php-logo.svg\" class=\"php-logo\"><strong>8.2</strong></th>\n                    <th><img src=\"../_images/php-logo.svg\" class=\"php-logo\"><strong>8.3</strong></th>\n                </tr>\n            </thead>\n            <tbody><!-- Table content truncated for brevity --></tbody>\n        </table>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cookie Values\nDESCRIPTION: Example of using the request:cookie tag to retrieve a cookie value.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/request.md#2025-04-22_snippet_4\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:request:cookie name=\"my-var\"}\n```\n\n----------------------------------------\n\nTITLE: Replacing Text in PHP\nDESCRIPTION: Replaces text within a string with options for case sensitivity and regex. Requires PHP usage of regex if enabled. Key parameters include 'find', 'replace', 'case_sensitive', and 'regex'. Outputs a Formatter object.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n### `replace(\\$options = [])`\n\nEncrypt the text\n\n| Parameter | Type     | Description                                                                                                                                                                                                                                                                                                                                                                                    |\n| --------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| \\$options | `Array`  | (string) **find** - the text to be replaced <br> (string) **replace** - the replacement text <br> (bool) **case_sensitive** (default: TRUE) - whether or not the replacement is case-sensitive (has no effect if regex replacement is used, in those cases use the `i` regex flag) <br> (bool) **regex** (default: FALSE) - whether the find string should be processed as a regex replacement |\n| Returns   | `Object` | A Formatter object\n```\n\n----------------------------------------\n\nTITLE: Basic Moblog Email Content Example\nDESCRIPTION: Example of a basic email body text that would be submitted via Moblog to create a Channel Entry.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nHere's a quick picture of the train station this morning on the way to work.\nNotice the guy selling flowers? He's been there every morning like clockwork for the last 2 years.\nHe's always cheerful and actually has some pretty nice flowers.\n```\n\n----------------------------------------\n\nTITLE: Configuring enable_throttling in ExpressionEngine\nDESCRIPTION: Configuration setting to enable or disable system throttling for excessive web requests from potentially malicious users.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_70\n\nLANGUAGE: php\nCODE:\n```\n$config['enable_throttling'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Setting Channel Form Overwrite in ExpressionEngine (PHP)\nDESCRIPTION: Allows Channel Form authors to overwrite their own files when uploading files with the same name. 'y' allows overwriting, 'n' appends a number to new files (default).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$config['channel_form_overwrite'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Implementing third_party_search_index Method for Pro Search in ExpressionEngine\nDESCRIPTION: This example demonstrates how to implement the third_party_search_index method in a custom field type to provide Pro Search with the correct content to index. The method queries a custom table to retrieve the actual content to be indexed based on the entry ID and stored field data.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/api.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function third_party_search_index($data)\n{\n  $query = $this->EE->db->select('real_content')\n         ->from('custom_table')\n         ->where('entry_id', $this->settings['entry_id'])\n         ->where('other_key', $data)\n         ->get();\n\n  return $query->row('real_content');\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Apache Security Configuration\nDESCRIPTION: Alternative .htaccess configuration to specifically block PHP file execution using FilesMatch directive.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/security/general-tips.md#2025-04-22_snippet_2\n\nLANGUAGE: apache\nCODE:\n```\n<FilesMatch \"(?i)\\.(php[s0-9]?|phtml)\">\n  Order Deny,Allow\n  Deny from All\n</FilesMatch>\n```\n\n----------------------------------------\n\nTITLE: Calling rte_before_display Hook in PHP\nDESCRIPTION: Demonstrates how the rte_before_display hook is called in ExpressionEngine. This hook allows modification of field data before the field is displayed in the Control Panel or Channel Form.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/rte.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$data = ee()->extensions->call('rte_before_display', $this, $data);\n```\n\n----------------------------------------\n\nTITLE: Defining UploadDestination Class in PHP\nDESCRIPTION: Definition of the UploadDestination class within the ExpressionEngine\\Model\\File namespace. This class represents an upload destination in the ExpressionEngine system.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/upload-destination.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass ExpressionEngine\\Model\\File\\UploadDestination\n```\n\n----------------------------------------\n\nTITLE: Field with Format Override Example for Moblog Emails\nDESCRIPTION: Example showing how to specify formatting for a field in a Moblog email.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n{field:body format=\"xhtml\"}This is the body text.{/field:body}\n```\n\n----------------------------------------\n\nTITLE: Using pro_variables_delete Hook in ExpressionEngine (PHP)\nDESCRIPTION: A code example showing how to implement the pro_variables_delete hook in ExpressionEngine. This hook allows for extra processing just before variables are deleted. It passes an array of variable IDs that are about to be deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/development/hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    $this->EE->extensions->call('pro_variables_delete', $var_ids);\n```\n\n----------------------------------------\n\nTITLE: Custom Field Input Form Tag - ExpressionEngine Template Syntax\nDESCRIPTION: Displays the input field for a specified custom member profile field in registration forms by inserting {field:field_name}. This tag only works if the field is set as visible on registration in ExpressionEngine's backend.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_28\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\n{field:field_name}\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP Server in ExpressionEngine (PHP)\nDESCRIPTION: Sets the mail server hostname when mail protocol is set to SMTP. Can connect to SSL servers if OpenSSL is installed on the server hosting ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_153\n\nLANGUAGE: PHP\nCODE:\n```\n$config['smtp_server'] = 'mail.example.com';\n```\n\n----------------------------------------\n\nTITLE: Placing Custom Front-end Edit Links with {frontedit_link} Tag\nDESCRIPTION: The `{frontedit_link}` tag allows placing a front-end edit link in an arbitrary location, potentially outside the standard field output or even outside an `exp:channel:entries` tag. It requires parameters like `entry_id` and either `field_name` or `field_id`. An optional `class` parameter can be used for custom styling, and `site_id` can specify the site if needed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/advanced-usage/front-end/frontend.md#2025-04-22_snippet_6\n\nLANGUAGE: ee\nCODE:\n```\n{frontedit_link entry_id=\"{entry_id}\" field_name=\"title\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring MIME Whitelist Role Exceptions\nDESCRIPTION: Specifies member role IDs to exclude from MIME type whitelist restrictions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_97\n\nLANGUAGE: php\nCODE:\n```\n$config['mime_whitelist_member_group_exception'] = '2, 5';\n```\n\n----------------------------------------\n\nTITLE: Displaying Single Fluid Field Content Loop - ExpressionEngine Template\nDESCRIPTION: This snippet demonstrates how to loop over a Fluid field and render the contents of a specific included field, using variable pairs. It assumes the presence of a Fluid field named 'fluid_content' in the channel entry, and a text field called 'fluid_text'. There are no parameters in the tag pair, and rendered output relies on predefined field assignments and author selection in the entry. Input: channel entry with Fluid field. Output: All inserted 'fluid_text' contents in author-defined order.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/fluid.md#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{fluid_content}\n\n  {fluid_content:fluid_text}\n    {content}\n  {/fluid_content:fluid_text}\n\n{/fluid_content}\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Link Tag in ExpressionEngine\nDESCRIPTION: Example of the rendered HTML after the stylesheet variable is processed. The link points to the CSS file using the query parameter approach.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/stylesheet.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"https://example.com?css=template_group/css_template\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Mailto Links with Email Fields in Parent Entries\nDESCRIPTION: Demonstrates generating mailto links using email fields in parent entries of ExpressionEngine templates, with control over title and subject.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_19\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{parents field=\\\"relationship_field\\\"}\\n    {parents:my_email:mailto title=\\\"Email about their dog\\\" subject=\\\"Question about your dog\\\" encode=\\\"no\\\"}\\n{/parents}\n```\n\n----------------------------------------\n\nTITLE: Declaring Model Dependencies in addon.setup.php\nDESCRIPTION: Shows how to declare model dependencies in the addon.setup.php file. This is necessary when relating to models that are not part of your addon.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/relating-models.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n'models.dependencies' => array(\n  'MyModel'   => array(\n    'ee:Member'\n  )\n),\n```\n\n----------------------------------------\n\nTITLE: Using Year Heading Variable Pair in ExpressionEngine Archive Month Links\nDESCRIPTION: Demonstrates the year_heading variable pair that allows displaying information once for each year in the archive list.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/archive-months.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{year_heading}\n    <p>{year}</p>\n{/year_heading}\n```\n\n----------------------------------------\n\nTITLE: Creating a Message Textarea in ExpressionEngine\nDESCRIPTION: Defines the main email message textarea within an ExpressionEngine form. By default, it's editable but can be set to read-only or hidden to prevent user modification, reducing the risk of spam and phishing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<textarea name=\"message\" rows=\"10\" cols=\"40\"></textarea>\n```\n\n----------------------------------------\n\nTITLE: Requesting Confirmation from User in ExpressionEngine CLI (PHP)\nDESCRIPTION: Demonstrates using the `$this->confirm()` method in an ExpressionEngine CLI command (extending `Cli`) to ask a boolean (yes/no) confirmation question. The method takes the confirmation question string as input and returns `true` if the user provides a truthy answer (like 'yes', 'y', '1') and `false` otherwise.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/defining-input.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$answer = $this->confirm(\"Are you liking these questions?\");\n```\n\n----------------------------------------\n\nTITLE: Fetching Member IDs Using :member_ids Modifier in ExpressionEngine\nDESCRIPTION: This snippet shows how to use the `:member_ids` modifier with a single Members field tag (`{members_field:member_ids}`) in ExpressionEngine. It outputs a pipe-delimited string containing the IDs of all members related through this field.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/member.md#2025-04-22_snippet_5\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{members_field:member_ids}\n```\n\n----------------------------------------\n\nTITLE: Filtering Cookies by Provider Parameter - ExpressionEngine Template\nDESCRIPTION: This snippet shows how to configure the {exp:consent:cookies} tag to display cookies from specific providers or to exclude certain providers. Can be used to narrow cookie lists to those set by either core, add-ons, or control panel. Set as a parameter in the cookies tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/consent.md#2025-04-22_snippet_17\n\nLANGUAGE: expressionengine-template\nCODE:\n```\nprovider='ee'\n```\n\nLANGUAGE: expressionengine-template\nCODE:\n```\nprovider='not forum|cp'\n```\n\n----------------------------------------\n\nTITLE: Comparing Formatted Dates with Bracing\nDESCRIPTION: Shows when bracing is required for formatted date comparisons in conditionals.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_7\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if \"{entry_date format='%Y'}\" == \"{current_time format='%'}\"}\n```\n\n----------------------------------------\n\nTITLE: Querying All Custom Member Fields in PHP\nDESCRIPTION: Demonstrates how to retrieve all custom member fields from the database and create a dictionary with field IDs and labels.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/member-field.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$all_member_fields = ee('Model')\n        ->get('MemberField')\n        ->fields('m_field_label','m_field_id')\n        ->all()\n        ->getDictionary('m_field_id', 'm_field_label');\n\n// Example return: [4 => 'My Field Name']\n```\n\n----------------------------------------\n\nTITLE: Embedding Sub-Views with Data Injection in ExpressionEngine Views\nDESCRIPTION: Demonstrates embedding a sub-view and injecting specific variables via the second parameter. Variables such as 'username' are made available only to the embedded view. Useful for rendering children with unique data while inheriting the parent's context. The embed method is called from a parent view template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/view.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<p><?php $this->embed('addon_name:sub/view', array('username' => $member->username)) ?></p>\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Mode in ExpressionEngine\nDESCRIPTION: Configuration change in index.php to enable debug mode for displaying PHP errors. This helps troubleshoot blank pages by showing suppressed PHP error messages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/general.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$debug = 0;\n```\n\n----------------------------------------\n\nTITLE: Generating Encryption Keys with PHP CLI\nDESCRIPTION: PHP command line example showing how to generate a secure random string for use as an encryption key in ExpressionEngine using PHP's cryptographically secure random functions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/error-messages.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp -r 'echo sha1(uniqid(random_int(-PHP_INT_MAX, PHP_INT_MAX), TRUE));echo \"\\n\";'\n```\n\n----------------------------------------\n\nTITLE: Email Variable Output - ExpressionEngine Template Syntax\nDESCRIPTION: Shows an example of conditionally displaying the email variable's current value in the registration form. Useful for repopulating the field after unsuccessful submission.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_20\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\n{if email}{email}{/if}\n```\n\n----------------------------------------\n\nTITLE: Example Structure of Retrieved Fluid Field Component Data in PHP\nDESCRIPTION: Provides an example structure of the data returned by `fetchFieldData()` when querying Fluid field components. Each sub-array represents data associated with a specific field instance within the Fluid container for that entry, including its unique ID (`id`), the parent `entry_id`, and the field's specific data (`field_id_X` and `field_ft_X`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-entry.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// Example Return:\narray(\n    array(\n        'id'         => 2\n        'entry_id'   => 4,\n        'field_id_1' => 'your field data',\n        'field_ft_1' => 'none',\n    ),\n    array(\n        'id'          => 5\n        'entry_id'    => 4,\n        'field_id_5'  => 'your field data',\n        'field_ft_5'  => 'xhtml',\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Calling before_member_field_insert Extension Hook in PHP\nDESCRIPTION: Demonstrates how the before_member_field_insert hook is called before a MemberField model is inserted. Changes made to the model object will be automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member-field.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_member_field_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Subscriber Email to Super Admins in ExpressionEngine\nDESCRIPTION: This snippet demonstrates using the `{if subscriber_is_member}` conditional and the `{subscriber_email}` variable within the `{exp:comment:subscriber_list}` tag pair. It shows how to display the subscriber's screen name if they are a member, or their email address if they are a guest. Crucially, the `{subscriber_email}` variable will only output a value if the currently logged-in user is a Super Admin, ensuring member privacy.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/subscriptions.md#2025-04-22_snippet_4\n\nLANGUAGE: ee\nCODE:\n```\n{if subscriber_is_member}\n    {subscriber_screen_name}\n{if:else}\n    {encode=\"{subscriber_email}\"}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Type Casting Format Result to String in PHP\nDESCRIPTION: Shows how to use PHP's type casting to convert a Formatter result directly to a string when adding it to an array.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$array = array('size' => (string) ee('Format')->make('Number', $content)->bytes());\n```\n\n----------------------------------------\n\nTITLE: Sending Namespaced Window Broadcast Events with jQuery (JavaScript)\nDESCRIPTION: This example illustrates how to send a namespaced 'broadcast' event using jQuery's event namespacing feature ('.greatAddon'). This helps avoid conflicts with other addons or core functionality using the same event. The data payload ({ maxVolume: 11 }) is sent along with the event. Note that only JavaScript primitives can be sent as data, as it's JSON encoded.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/events.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n$(window).trigger('broadcast.greatAddon', { maxVolume: 11 });\n```\n\n----------------------------------------\n\nTITLE: Creating a New Status in ExpressionEngine PHP\nDESCRIPTION: Demonstrates how to create a new Status object, set its properties, validate it, and save it to the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/status.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Make the Status Model.\n$status = ee('Model')->make('Status');\n\n// Set the Title and Hex Color\n$status->status = \"MyNewStatus\";\n$status->highlight = '009933';\n\n// Validate and Save.\n$result = $status->validate();\n\nif ($result->isValid())\n{\n  $status->save();\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Replace Tag Method for Live Preview Compatibility in PHP\nDESCRIPTION: Shows how to adapt the replace_tag method to handle both normal template rendering and live preview scenarios by checking preview state and formatting data appropriately.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/enhanced.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction replace_tag($data)\n{\n    // Looks like we're in live preview, reformat our data for presentation\n    if (ee('LivePreview')->hasEntryData())\n    {\n        return $data['text1'] . $data['text2'];\n    }\n\n    return $data;\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Item Deletion Confirmation Modal in ExpressionEngine: PHP\nDESCRIPTION: Explains setting up a modal for bulk deletions using the ExpressionEngine view service. It supports Table::COL_CHECKBOX for listing content and utilizes bulk action controls. The example showcases a modal prepared for multiple items, with JavaScript handling included automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/modal.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$modal_vars = array(\n  'name'    => 'modal-confirm-remove',\n  'form_url'  => ee('CP/URL')->make('addons/myaddon/remove')\n);\n$modal_html = ee('View')->make('ee:_shared/modal_confirm_remove')->render($modal_vars);\nee('CP/Modal')->addModal('remove', $modal_html);\n```\n\n----------------------------------------\n\nTITLE: Incorrect String Usage - PHP\nDESCRIPTION: Illustrates common mistakes in PHP string declaration, such as using double quotes without variable parsing, improper variable interpolation, and unnecessarily escaping single quotes. No special dependencies are needed. These anti-patterns can cause confusion and should be avoided according to recommended standards.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/general.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\"My String\"                 // no variable parsing, so no use for double quotes\n\"My string $foo\"            // needs braces\n'SELECT foo FROM bar WHERE baz = \\'bag\\''   // ugly\n```\n\n----------------------------------------\n\nTITLE: Marking FolderItem URL as External in PHP\nDESCRIPTION: Specifies whether the URL associated with the `FolderItem` is external. Takes an optional boolean parameter (`TRUE` for external, default). Returns the `FolderItem` instance (`$this`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nurlIsExternal($external = TRUE)\n```\n\n----------------------------------------\n\nTITLE: Defining Email Subject Parameter - ExpressionEngine Tag - ExpressionEngine Tag\nDESCRIPTION: Demonstrates how to set the email_subject parameter in the forgot username form, customizing the email subject line. The parameter is passed as an attribute in the tag and requires no additional dependencies.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/forgot-username.md#2025-04-22_snippet_1\n\nLANGUAGE: ExpressionEngine Tag\nCODE:\n```\nemail_subject=\"Your Username\"\n```\n\n----------------------------------------\n\nTITLE: Custom Empty Feed Handling in ExpressionEngine\nDESCRIPTION: Example of creating a custom RSS feed structure to handle empty feeds and display tag errors using the {if empty_feed} conditional and {error} variable.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/rss.md#2025-04-22_snippet_3\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{if empty_feed}\n    <?xml version=\"1.0\" encoding=\"{charset}\"?>\n    <rss version=\"2.0\">\n        <channel>\n            <title>{site_name}</title>\n            <link>{site_url}</link>\n            <description>{site_name}</description>\n            <item>\n                <title>Feed Error</title>\n                <description>{error}</description>\n            </item>\n        </channel>\n    </rss>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Configuring gmail_duplication_prevention in ExpressionEngine\nDESCRIPTION: Setting to control whether ExpressionEngine prevents duplicate registrations from equivalent Gmail addresses that use different dot placements.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_80\n\nLANGUAGE: php\nCODE:\n```\n$config['gmail_duplication_prevention'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: Implementing after_category_field_bulk_delete Hook in PHP\nDESCRIPTION: Example of how the after_category_field_bulk_delete hook is called in ExpressionEngine. This hook is triggered after multiple category fields are deleted in bulk.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-field.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_category_field_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Combining Filters with OR Logic in ExpressionEngine PHP\nDESCRIPTION: Demonstrates using the orFilter() method to create an OR condition between two filters when querying models.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n->filter('username' 'bob')\n->orFilter('role_id', 1)\n```\n\n----------------------------------------\n\nTITLE: Setting an Icon for a Prolet in PHP\nDESCRIPTION: In this snippet, customization of the Prolet icon is achieved by setting the `$icon` property or implementing the `getIcon()` method. It demonstrates how to specify an icon using a file from the add-on's folder, modifying the appearance of the Prolet button within the ExpressionEngine Dock.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/prolets.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nprotected $icon = 'sample_prolet.png';\n```\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getIcon()\n{\n    return 'sample_prolet.png';\n}\n```\n\n----------------------------------------\n\nTITLE: Using Parameters with Selectable Items in ExpressionEngine\nDESCRIPTION: Shows an example of using parameters such as 'markup' and 'backspace' in ExpressionEngine's template context to adjust output formatting for selectable items.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/selectable-buttons.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n{field_name markup='ul'}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Strength Indicator with JavaScript\nDESCRIPTION: This JavaScript code creates a client-side password strength indicator. It retrieves the validation URL from ExpressionEngine, sets up an event listener on the password input field, and sends the current password value via an asynchronous POST request (AJAX) to the validation endpoint on every keyup. The script then parses the JSON response and updates the visual indicator's text and style based on the returned password rank.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/password-validation.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\">\n    var validationUrl = '{exp:member:validation_url fields=\"password_rank\"}';\n\n    // Creat visual password strength meter block\n    var rankWrap = '<div class=\"rank-wrap\"><p class=\"status-tag \"><span class=\"rank_text\"></span></p></div>';\n\n    // Find password input\n    var passwordInput = document.querySelector('input[name=\"password\"]');\n\n    // Create wrapper container. It can be added in the html part and needed for the correct positioning of the password strength meter block on the page \n    var wrapper = document.createElement('span');\n\n    passwordInput.parentNode.insertBefore(wrapper, passwordInput);\n\n    // move passwordInput into wrapper\n    wrapper.appendChild(passwordInput);\n\n    // Closest parent for password input\n    var passwordInputContainer = passwordInput.parentElement;\n\n    passwordInputContainer.style.position = 'relative';\n    passwordInputContainer.style.display = 'block';\n\n    // Insert visual password strength meter block after password input\n    passwordInput.insertAdjacentHTML('afterend', rankWrap);\n\n    document.getElementsByName('password')[0].addEventListener('keyup', function(e){\n        var inputValLength = this.value.length;\n\n        //create a new XMLHttpRequest object\n        var request = new XMLHttpRequest();\n\n        //configure it to do an asynchronous GET request for some URL\n        request.open(\"POST\", validationUrl, true);\n        request.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        request.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\n        //add a listener for the \"load\" event, which\n        //will happen when the data returns\n        request.addEventListener(\"load\", function() {\n            if (request.status >= 200 && request.status < 400) {\n                var data = JSON.parse(request.responseText);\n                if (inputValLength == 0) {\n                    document.querySelector('.rank-wrap').style.display = 'none';\n                    document.querySelector('.rank-wrap > p').className = '';\n                    document.querySelector('.rank-wrap .rank_text').textContent = '';\n                } else {\n                    var rank_text = data['rank_text'].toLowerCase();\n                    var classList = 'status-tag ' + rank_text;\n                    document.querySelector('.rank-wrap > p').className = classList;\n                    document.querySelector('.rank-wrap .rank_text').textContent = rank_text;\n                    document.querySelector('.rank-wrap').style.display = 'block';\n                }\n            } else {\n\n            }\n        });\n\n        //finally, send the request to the server\n        request.send('password=' + e.target.value);\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Field Types within a Fluid Field in ExpressionEngine\nDESCRIPTION: This snippet demonstrates how to use an ExpressionEngine Fluid Field (`{fluid_field}`) to output content from various nested field types: a text field (`{full_text}`), a grid field (`{img_card}`), a relationship field (`{featured_entry}`), and a field group (`{seo_group}`). It respects the order defined during content entry and uses specific tag pairs for each field type to control its markup.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/fluid.md#2025-04-22_snippet_4\n\nLANGUAGE: ee\nCODE:\n```\n{\n  \"codeSnippets\": [\n    {\n      \"title\": \"Displaying Multiple Field Types within a Fluid Field in ExpressionEngine\",\n      \"description\": \"This snippet demonstrates how to use an ExpressionEngine Fluid Field (`{fluid_field}`) to output content from various nested field types: a text field (`{full_text}`), a grid field (`{img_card}`), a relationship field (`{featured_entry}`), and a field group (`{seo_group}`). It respects the order defined during content entry and uses specific tag pairs for each field type to control its markup.\",\n      \"language\": \"ee\",\n      \"codeList\": [\n        {\n          \"language\": \"ee\",\n          \"code\": \"{fluid_field}\\n\\n  {fluid_field:full_text}\\n    <div class=\\\"text\\\">\\n      {content}\\n    </div>\\n  {/fluid_field:full_text}\\n\\n  {fluid_field:img_card}\\n    {content}\\n      <div class=\\\"card\\\">\\n        <img src=\\\"{content:grid_image_column}\\\">\\n        {content:grid_text_column}\\n      </div>\\n    {/content}\\n  {/fluid_field:img_card}\\n\\n  {fluid_field:featured_entry}\\n    <div class=\\\"feature\\\">\\n      {content status=\\\"open|Featured\\\" }\\n        {if content:count == 1}Featured!{/if}\\n        {content:title}\\n        {content:hero_image}\\n          <img src=\\\"{url:med}\\\">\\n        {/content:hero_image}\\n      {/content}\\n    </div>\\n  {/fluid_field:featured_entry}\\n\\n  {fluid_field:seo_group}\\n    {fields}\\n      {fluid_field:seo_title}\\n        <title>{content}</title>\\n      {/fluid_field:seo_title}\\n      {fluid_field:seo_description}\\n        <meta name=\\\"description\\\" content=\\\"{content}\\\">\\n      {/fluid_field:seo_description}\\n    {/fields}\\n  {/fluid_field:seo_group}\\n\\n{/fluid_field}\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Template Group in ExpressionEngine - PHP\nDESCRIPTION: This code snippet outlines the process of creating a new Template Group. It demonstrates making a new group, setting required fields such as 'group_name' and 'site_id', and then validating and saving the new group. Dependencies include ExpressionEngine's Configuration service for fetching the site ID.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/template-group.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Make a new template object.\n$group = ee('Model')->make('TemplateGroup');\n\n// Add the required fields.\n$group->group_name = 'mytemplates';\n$group->site_id    = ee()->config->item('site_id');\n\n// Validate and Save the template.\n$result = $group->validate();\n\nif ($result->isValid())\n{\n  $group->save();\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Before Template Snippet Delete Hook in PHP\nDESCRIPTION: This code illustrates how the 'before_template_snippet_delete' hook is called in ExpressionEngine. It passes the current TemplateSnippet model object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-snippet.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_template_snippet_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Accessing Channel Settings in ExpressionEngine Control Panel\nDESCRIPTION: Specifies the menu path within the ExpressionEngine control panel to navigate to the channel creation or editing screen, specifically highlighting the 'Settings' tab.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/channels.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDeveloper > Channels> New/Edit Channel > Settings\n```\n\n----------------------------------------\n\nTITLE: Registering a Factory Closure with the Dependency Container in PHP\nDESCRIPTION: Shows how to register a closure (an anonymous function) as a factory. When `make()` is called with the registered name ('User'), this closure is executed to create and return a new object. The closure receives the container instance (`$di`) and any additional arguments passed to `make()`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/architecture.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$di->register('User', function($di, $name)\n{\n  return new User($name);\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers as Currency\nDESCRIPTION: Formats a number as currency with options for different currencies, locales, and decimal precision.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{cost:currency}\n{!-- $142.73 --}\n\n{cost:currency currency='EUR' locale='de_DE'}\n{!-- 142,73 € --}\n\n{cost:currency decimals='0'}\n{!-- $399,000 --}\n```\n\n----------------------------------------\n\nTITLE: Selecting Member by Username - ExpressionEngine Template Parameter - Markdown\nDESCRIPTION: This snippet demonstrates the usage of the username parameter to specify a particular member for which to display profile data. By providing username=\\\"admin\\\", templates can fetch and show details for the user with the username \\\"admin\\\". Requires that a user with the given username exists.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/custom-profile-data.md#2025-04-22_snippet_2\n\nLANGUAGE: ExpressionEngine Template Tags\nCODE:\n```\nusername=\"admin\"\n```\n\n----------------------------------------\n\nTITLE: Configuring System Availability in PHP\nDESCRIPTION: Configuration for controlling system accessibility and maintenance mode settings in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_91\n\nLANGUAGE: php\nCODE:\n```\n$config['is_system_on'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Calling After Template Snippet Delete Hook in PHP\nDESCRIPTION: This snippet shows the call to the 'after_template_snippet_delete' hook in ExpressionEngine. It passes the current TemplateSnippet model object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-snippet.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_template_snippet_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Member Search Field Selection\nDESCRIPTION: Dropdown select menu for choosing which field to search in, including screen name, email, and custom profile fields.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/search.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<select name='search_field_1' class='select' >\n    <option value='screen_name'>Search Field</option>\n    <option value='screen_name'>Screen Name</option>\n    <option value='email'>Email Address</option>\n    {custom_profile_field_options}\n</select>\n```\n\n----------------------------------------\n\nTITLE: Channel Categories with HTML Markup in ExpressionEngine\nDESCRIPTION: Shows how to wrap each category with HTML markup, creating links to category pages and conditionally displaying category descriptions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/categories.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:categories}\n    <a href=\"{path='channel/index'}\">{category_name}</a>\n    {if category_description}{category_description}{/if}\n{/exp:channel:categories}\n```\n\n----------------------------------------\n\nTITLE: Limiting Signature Length in ExpressionEngine (PHP)\nDESCRIPTION: Sets the maximum number of characters allowed in a member's signature for Discussion Forum. Controls signature length for consistent forum appearance.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_142\n\nLANGUAGE: PHP\nCODE:\n```\n$config['sig_maxlength'] = '500';\n```\n\n----------------------------------------\n\nTITLE: Defining a Screen Name Input Field in ExpressionEngine Profile Form\nDESCRIPTION: Standard HTML markup for the screen name input field. The `name` attribute must be `screen_name`. This is a required field. The `{screen_name}` variable displays the member's current screen name.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_16\n\nLANGUAGE: HTML\nCODE:\n```\n<label for=\"screen_name\">Screen Name</label>\n<input type=\"text\" name=\"screen_name\" value=\"{screen_name}\" maxlength=\"120\" size=\"40\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Signature Image Height Limit in ExpressionEngine (PHP)\nDESCRIPTION: Sets the maximum height in pixels allowed for user-uploaded signature images in Discussion Forum. Helps control signature size for consistent forum appearance.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_137\n\nLANGUAGE: PHP\nCODE:\n```\n$config['sig_img_max_height'] = '150';\n```\n\n----------------------------------------\n\nTITLE: Displaying File Fields (Variable Pair) in ExpressionEngine Fluid Field\nDESCRIPTION: Demonstrates accessing detailed properties of a file field (`my_image`) nested within a Fluid Field (`fluid_field` or `my_fluid_field`) using the `{content}` variable pair. It shows how to retrieve the file extension, upload date (with formatting), base URL, and custom thumbnail URLs (e.g., `{url:med}`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/fluid.md#2025-04-22_snippet_9\n\nLANGUAGE: ee\nCODE:\n```\n{my_fluid_field}\n  {fluid_field:my_image}\n    {content}\n      Extension: {extension}\n      Upload date: {upload_date format=\"%Y %m %d\"}\n      URL: {url}\n      Custom med thumbnail url: {url:med}\n    {/content}\n  {/fluid_field:my_image}\n{/my_fluid_field}\n```\n\n----------------------------------------\n\nTITLE: Defining a Username Input Field in ExpressionEngine Profile Form\nDESCRIPTION: Standard HTML markup for the username input field. The `name` attribute must be `username`. This is a required field and must be unique across the site. The `{username}` variable displays the member's current username.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\n<label for=\"username\">Username</label>\n<input type=\"text\" name=\"username\" value=\"{username}\" maxlength=\"120\" size=\"40\" />\n```\n\n----------------------------------------\n\nTITLE: Formatting Date Fields in Parent Entries\nDESCRIPTION: This snippet shows how to format date fields in parent entries within ExpressionEngine using specific date format strings.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_18\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{parents field=\\\"relationship_field\\\"}\\n  {parents:my_date format=\\\"%F %d %Y\\\"}\\n{/parents}\n```\n\n----------------------------------------\n\nTITLE: Example: Generating an ExpressionEngine CLI Command\nDESCRIPTION: Demonstrates how to use the `make:command` via `eecli.php` to generate a new CLI command named 'Awesome CLI Command' for the 'my_example_addon'. It specifies the add-on folder using `--addon`, provides a description with `--description`, and sets the command signature using `--signature`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/make-command.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php make:command \"Awesome CLI Command\" --addon=my_example_addon --description='This command is awesome' --signature='my_addon:awesome-example'\n```\n\n----------------------------------------\n\nTITLE: Status Override Syntax for Moblog Emails\nDESCRIPTION: Examples of how to override the default status setting in Moblog emails using either braces or angle brackets.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n{status}pending{/status}\n\n<status>Closed</status>\n```\n\n----------------------------------------\n\nTITLE: Using Relative Dates for Future Dates in ExpressionEngine\nDESCRIPTION: Example of using the relative date modifier for a future date. This displays the time difference as 'in X days' for upcoming events or deadlines.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/date-variable-formatting.md#2025-04-22_snippet_6\n\nLANGUAGE: expressionengine\nCODE:\n```\n{launch_date:relative}\n```\n\n----------------------------------------\n\nTITLE: Text Replacement with :replace Modifier\nDESCRIPTION: Replaces text within content using simple find/replace or regex patterns. Parameters include case_sensitive, find, regex, and replace.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n{content:replace find='vegetables' replace='pizza'}\n{!-- You should eat pizza every day. --}\n\n{full_name:replace find='/(.*?),\\s*(.*)/' replace='$2 $1' regex='yes'}\n{!-- John Doe (presuming {full_name} is \"Doe, John\") --}\n\n{!-- Getting thumbnails from a Youtube URL --}\nsrcset=\"\n    {src:replace find='/^.*(?:(?:youtu\\.be\\/|v\\/|vi\\/|u\\/\\w\\/|embed\\/)|(?:(?:watch)?\\?v(?:i)?=|\\&v(?:i)?=))([^#\\&\\?]*).*$/' replace='https://i.ytimg.com/vi/$1/default.jpg' regex='yes'} 120w,\n    {src:replace find='/^.*(?:(?:youtu\\.be\\/|v\\/|vi\\/|u\\/\\w\\/|embed\\/)|(?:(?:watch)?\\?v(?:i)?=|\\&v(?:i)?=))([^#\\&\\?]*).*$/' replace='https://i.ytimg.com/vi/$1/mqdefault.jpg' regex='yes'} 320w,\n    {src:replace find='/^.*(?:(?:youtu\\.be\\/|v\\/|vi\\/|u\\/\\w\\/|embed\\/)|(?:(?:watch)?\\?v(?:i)?=|\\&v(?:i)?=))([^#\\&\\?]*).*$/' replace='https://i.ytimg.com/vi/$1/hqdefault.jpg' regex='yes'} 480w\n\"\n```\n\n----------------------------------------\n\nTITLE: Invoking CLI Boot Extension Hook in ExpressionEngine - PHP\nDESCRIPTION: This snippet demonstrates how to call the 'cli_boot' extension hook before processing any CLI request in ExpressionEngine. It retrieves all registered 'cli_boot' hooks, passes the CLI handler object to them, and completes execution if 'end_script' is flagged. Dependencies: ExpressionEngine's extension system and the CLI handler object. Parameters: none directly, but relies on current context. Input: current CLI handler; Output: runs all registered hooks and may terminate early. Should be inserted at the beginning of CLI scripts to allow pre-processing. This pattern is not reentrant and assumes a global CLI handler.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/cli.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$command = ee()->extensions->call('cli_boot', $this);\nif (ee()->extensions->end_script === true) {\n    $this->complete('');\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting Color Values with ExpressionEngine's Color Picker Field\nDESCRIPTION: Basic usage of the color picker field tag which outputs CSS hexadecimal color values. When used in templates, the tag directly renders the selected color in hexadecimal format.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/colorpicker.md#2025-04-22_snippet_0\n\nLANGUAGE: ee\nCODE:\n```\n{my_colorpicker_field}\n{!-- Example Output: #ff0000  --}\n```\n\n----------------------------------------\n\nTITLE: Calling Extension Hooks for Member Deletion in PHP\nDESCRIPTION: The code snippet demonstrates invoking the 'cp_members_member_delete_end' hook to allow additional processing after control panel member deletions. It requires passing an array of member IDs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/members.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->extensions->call('cp_members_member_delete_end', $member_ids);\nif ($this->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Google reCAPTCHA v3 Implementation\nDESCRIPTION: Simplified code for implementing Google's reCAPTCHA v3, which provides invisible CAPTCHA functionality.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/security/captchas.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{if captcha}\n    {captcha}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Creating Dated Snapshots Using rsync - Unix Shell\nDESCRIPTION: This snippet automates creation of backup snapshots by appending the current date as a folder name, enabling retention of multiple dated backups rather than only the most recent. It utilizes command substitution for date formatting and otherwise retains all features of rsync, such as permission preservation and deletion of extraneous files. Intended for use in scheduled jobs (e.g., cron); requires a Bash-compatible shell, rsync, and date utilities.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/database-backup.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrsync -ahvz --delete user@production_server:~/public/ ~/backups/$(date +%F)/\n```\n\n----------------------------------------\n\nTITLE: Filtering Entries by URL Title in ExpressionEngine\nDESCRIPTION: Demonstrates how to use the url_title parameter to filter channel entries by their URL titles. It shows examples of including and excluding specific URL titles.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_35\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nurl_title=\"my_wedding\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nurl_title=\"my_wedding|my_honeymoon|my_kids\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nurl_title=\"not my_in_laws\"\n```\n\n----------------------------------------\n\nTITLE: Disabling All Tracking in ExpressionEngine (PHP)\nDESCRIPTION: Emergency override to disable all tracking features when enabled. Useful for server administrators to respond to traffic spikes and maintain site performance.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$config['disable_all_tracking'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Generating Withdraw Consent Link with Optional Redirect - ExpressionEngine Template\nDESCRIPTION: This snippet shows how to construct a withdraw link using the {consent_withdraw_url} variable, allowing users to withdraw consent. Also includes an example of using the return= parameter to control redirection. Used inside consent loops within templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/consent.md#2025-04-22_snippet_13\n\nLANGUAGE: expressionengine-template\nCODE:\n```\n<a href=\"{consent_withdraw_url}\">Withdraw</a>\n```\n\nLANGUAGE: expressionengine-template\nCODE:\n```\n<a href=\"{consent_grant_url return='preferences/saved'}\">Grant</a>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Hyperlinks with BBCode\nDESCRIPTION: Demonstrates how to create hyperlinks using BBCode. The first example shows a simple link where the URL itself is the link text. The second example shows how to provide custom link text.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/bbcode.md#2025-04-22_snippet_0\n\nLANGUAGE: bbcode\nCODE:\n```\n[url]https://example.com/[/url]\n[url=https://example.com/]my site[/url]\n```\n\n----------------------------------------\n\nTITLE: Setting Result Page in Search URL - ExpressionEngine Template Tag\nDESCRIPTION: Demonstrates generation of a search URL pointing to a specific group/template result page by passing result_page to {exp:pro_search:url}. Employs ExpressionEngine’s templating features to create navigable result links.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_16\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:url result_page=\"group/template\"}\n```\n\n----------------------------------------\n\nTITLE: Nesting Font Size and Color BBCode Tags\nDESCRIPTION: Demonstrates nesting BBCode tags to apply multiple formatting options simultaneously, such as changing both font size and color.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/bbcode.md#2025-04-22_snippet_7\n\nLANGUAGE: bbcode\nCODE:\n```\n[size=4][color=green]some larger green text[/color][/size]\n```\n\n----------------------------------------\n\nTITLE: Template Layout Reference in ExpressionEngine Multiple Sites\nDESCRIPTION: Demonstrates how to reference a template layout from another site using the site short name prefix.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/msm/code.md#2025-04-22_snippet_1\n\nLANGUAGE: expressionengine\nCODE:\n```\n{layout=\"site_short_name:template_group/layout_template\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Memcached Configuration in PHP\nDESCRIPTION: Configuration for multiple Memcached servers with host, port and weight parameters for cache storage in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_90\n\nLANGUAGE: php\nCODE:\n```\n$config['memcached'] = array(\n  array(\n    'host' => '192.168.1.100',\n    'port' => 11211,\n    'weight' => 2,\n  ),\n  array(\n    'host' => '192.168.1.101',\n    'port' => 11211,\n    'weight' => 1,\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring CSRF Exemption in Action Migration\nDESCRIPTION: This PHP snippet demonstrates how to modify the `up()` method within an action's database migration file to set the `csrf_exempt` property to `true`. This ensures the action is exempt from CSRF protection upon installation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n...\npublic function up()\n{\n    ee('Model')->make('Action', [\n        'class' => 'Amazing_add_on',\n        'method' => 'AmazingAction',\n        'csrf_exempt' => true,\n    ])->save();\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Default CLI Config Values in ExpressionEngine PHP\nDESCRIPTION: This code snippet demonstrates how to set default values for the add-on author and URL in the ExpressionEngine configuration file to avoid being prompted for these values when creating an add-on using the CLI.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-development-overview.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n...\n$config['cli_default_addon_author'] = 'ExpressionEngine Developer';\n$config['cli_default_addon_author_url'] = 'https://expressionengine.com';\n...\n```\n\n----------------------------------------\n\nTITLE: Filtering Models with Default Equal Operator in ExpressionEngine PHP\nDESCRIPTION: Shows how to filter with a default equal operator, which is applied when no operator is explicitly specified.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n->filter('template_name', 'index')\n// same as:\n->filter('template_name', '==', 'index')\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Navigation Items in My Account - ExpressionEngine PHP\nDESCRIPTION: This snippet demonstrates how to append additional menu items to the My Account settings page using a custom hook. It highlights the use of associative arrays to match My Account sections, the integration of previous hook modifications, and the requirement of using specific structure for extensions and methods.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/myaccount.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$vars['additional_nav'] = array(\n    'personal_settings' => array(),\n    'utilities' => array(),\n    'private_messages' => array(),\n    'customize_cp' => array(),\n    'channel_preferences' => array(),\n    'administrative_options' => array()\n);\n\n$vars['additional_nav'] = array_merge_recursive(\n    $vars['additional_nav'],\n    $this->extensions->call('myaccount_nav_setup')\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Class Aliases for Backward Compatibility in ExpressionEngine\nDESCRIPTION: Creates class aliases to maintain compatibility between ExpressionEngine versions or to redirect class references. Useful for add-ons that need to work across different ExpressionEngine versions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n'aliases' => [\n  'ExpressionEngine\\Model\\Channel\\ChannelEntry',\n],\n```\n\n----------------------------------------\n\nTITLE: Example Output with `backspace` Parameter (HTML)\nDESCRIPTION: This shows the rendered HTML output of the ExpressionEngine template using the `backspace='5'` parameter. The final `<br>` tag (plus the newline character, totaling 5 characters) is removed from the output.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/multiselect.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\nGreen<br>\nBlue<br>\nOrange\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Folder URL in ExpressionEngine (PHP)\nDESCRIPTION: Specifies the URL to the themes directory for ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_160\n\nLANGUAGE: php\nCODE:\n```\n$config['theme_folder_url'] = 'https://example.com/themes/';\n```\n\n----------------------------------------\n\nTITLE: Manually Enabling Datepicker for HTML Date Field\nDESCRIPTION: If manually constructing a date field within the edit profile form, add the `rel=\"date-picker\"` attribute to the input element to apply the date picker functionality, assuming it hasn't been globally disabled via the `datepicker=\"no\"` parameter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\nrel=\"date-picker\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Model Relationships Metadata - PHP\nDESCRIPTION: Details how to define relationships between models using the $_relationships metadata array in PHP. The snippet shows the syntax for a BelongsTo relation, mapping the relationship name to the related model and type. It supports custom keys for precise mapping to DB columns. Inputs are relationship names, related models, and key field names; output is the relationships metadata array.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/building-your-own.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nprotected static $_relationships = array(\n  'Author' => array(\n    'model' => 'Member',\n    'type' => 'BelongsTo'\n  )\n);\n\n$my_model->Author; // fetches member that created this entry\n```\n\n----------------------------------------\n\nTITLE: Implementing the Username/Email Input Field in ExpressionEngine Login Form\nDESCRIPTION: Shows the required HTML structure for the username input field (`<input type=\"text\" name=\"username\">`). As of EE 7.4, users can log in using either their username or email address in this field. This field is mandatory.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/login.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"username\">Username / email</label>\n<input type=\"text\" name=\"username\" value=\"\" maxlength=\"32\" size=\"25\" />\n```\n\n----------------------------------------\n\nTITLE: Code Heading Examples in Markdown\nDESCRIPTION: Demonstrates proper formatting for method, variable, and parameter headings in documentation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/style-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### `my_method($foo)`\n\n### `{some_variable}`\n```\n\n----------------------------------------\n\nTITLE: Testing User's Primary Role Short Name\nDESCRIPTION: Demonstrates checking against the short name of the primary role.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_17\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if logged_in_primary_role_short_name == 'super_admin'} Secret content {/if}\n```\n\n----------------------------------------\n\nTITLE: Setting System Path in admin.php for Additional Site\nDESCRIPTION: Configuration for the system path in admin.php file for additional sites in a multi-site setup. This points to the main installation's system directory.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/msm/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$system_path = '../domain1.com/system/';\n```\n\n----------------------------------------\n\nTITLE: Disabling Dynamic URL Parameter Influence in ExpressionEngine\nDESCRIPTION: The `dynamic=\"no\"` parameter prevents the `{exp:channel:entries}` tag from automatically adjusting its behavior based on URL segments or query strings. This is useful for creating static content blocks, like sidebars, that should remain consistent across different site pages. Using the `paginate=` parameter alongside `dynamic=\"no\"` will still allow pagination data from the URL to function.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_6\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\ndynamic=\"no\"\n```\n\n----------------------------------------\n\nTITLE: Template Routes Configuration in PHP\nDESCRIPTION: Enables or disables the Template Routes functionality.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_69\n\nLANGUAGE: php\nCODE:\n```\n$config['enable_template_routes'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Using Toggle Fields in Relationship Tags\nDESCRIPTION: This snippet highlights how to use toggle fields within relationship tags in ExpressionEngine, outputting text conditionally based on the toggle status.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_15\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{relationship_field}\\n  {if relationship_field:my_toggle}YES there is a toggle value!{/if}\\n{/relationship_field}\n```\n\n----------------------------------------\n\nTITLE: Triggering 404 Page for Invalid URL Segments\nDESCRIPTION: This snippet shows how to trigger a 404 error page for invalid URLs by redirecting to the 404 template when unwanted URL segments are present. This helps control site navigation and URL structure.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/single-variables.md#2025-04-22_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n{if segment_2 != ''}   {redirect=\"404\"} {/if}\n```\n\n----------------------------------------\n\nTITLE: Calling Edit Wiki Article Form End Hook in PHP\nDESCRIPTION: Extension hook called at the end of the edit form to allow modification of the edit page output.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/wiki.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$this->return_data = ee()->extensions->universal_call('edit_wiki_article_form_end', $this, $query);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Updating a Channel Field Group Name in PHP\nDESCRIPTION: Shows how to change the name of a Channel Field Group, including validation and saving.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-field-group.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$group = ee('Model')->get('ChannelFieldGroup', 2)->first();\n\n$group->group_name = 'A New Group Name';\n\n// Validate and Save.\n$result = $group->validate();\n\nif ($result->isValid())\n{\n  $group->save();\n}\n```\n\n----------------------------------------\n\nTITLE: Using {if signature_image} Conditional in ExpressionEngine\nDESCRIPTION: Shows how to use the {if signature_image} conditional to display content when the current entry's author has a signature image specified.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_39\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if signature_image} content {/if}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if signature_image} <img src=\"{signature_image_url}\" width=\"{signature_image_width}\" height=\"{signature_image_height}\" alt=\"{author}'s signature\" /> {/if}\n```\n\n----------------------------------------\n\nTITLE: ExpressionEngine Template Directory Structure Example\nDESCRIPTION: Shows the typical directory structure for templates when saved as files, including template groups, partials, variables, and multi-site organization.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: md\nCODE:\n```\n|\n|-- system\n|   |-- user\n|   |   |-- templates\n|   |   |   |-- _global_partials\n|   |   |   |   |-- _header.html\n|   |   |   |   |-- _footer.html\n|   |   |   |-- _global_variables\n|   |   |   |   |-- logo.html\n|   |   |   |-- default_site\n|   |   |   |   |-- _partials\n|   |   |   |   |   |-- sidebar.html\n|   |   |   |   |-- _variables\n|   |   |   |   |   |-- address.html\n|   |   |   |   |-- blog.group\n|   |   |   |   |   |-- entry.html\n|   |   |   |   |   |-- feed.xml\n|   |   |   |   |   |-- index.html\n|   |   |   |   |-- home.group\n|   |   |   |   |   |-- contact.html\n|   |   |   |   |   |-- about.html\n|   |   |   |   |   |-- index.html\n|   |   |   |   |-- styles.group\n|   |   |   |   |   |-- contact.css\n|   |   |   |   |   |-- index.css\n|   |   |   |-- second_msm_site\n|   |   |   |   |-- _partials\n|   |   |   |   |   |-- sidebar.html\n|   |   |   |   |-- _variables\n|   |   |   |   |   |-- address.html\n|   |   |   |   |-- home.group\n|   |   |   |   |   |-- about.html\n|   |   |   |   |   |-- index.html\n```\n\n----------------------------------------\n\nTITLE: Add Scripts for Reordering - ExpressionEngine PHP\nDESCRIPTION: Includes JavaScript files necessary for enabling table row reordering. This requires ExpressionEngine's script inclusion functions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/table.md#2025-04-22_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nee()->cp->add_js_script('file', 'cp/sort_helper');\nee()->cp->add_js_script('plugin', 'ee_table_reorder');\n```\n\n----------------------------------------\n\nTITLE: Calling before_member_insert Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the before_member_insert hook is called in ExpressionEngine. This hook is triggered before a member object is inserted into the database, allowing modifications to be automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_member_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Dependency Globally using ee() in PHP\nDESCRIPTION: Illustrates using the global `ee()` helper function, a shortcut for accessing the `make()` method on the default dependency provider. This allows easy retrieval of core services or prefixed add-on services.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/architecture.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee('Something');\n```\n\n----------------------------------------\n\nTITLE: Checking for Unread Private Messages\nDESCRIPTION: Shows how to test if a user has unread private messages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_23\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if logged_in_private_messages > 0}  You have unread private messages.  {/if}\n```\n\n----------------------------------------\n\nTITLE: Filtering Statistics by Site Parameter in ExpressionEngine\nDESCRIPTION: Example of how to use the site parameter to restrict statistics reporting to specific sites when using Multiple Site Manager. Shows both inclusion and exclusion methods.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/statistics.md#2025-04-22_snippet_1\n\nLANGUAGE: expressionengine\nCODE:\n```\nsite=\"default_site\"\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\nsite=\"default_site|boston|new_york\"\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\nsite=\"not chicago|los_angeles\"\n```\n\n----------------------------------------\n\nTITLE: Calling Forum Submit Post End Hook\nDESCRIPTION: Example of calling the forum_submit_post_end hook for post-submission processing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/forum.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$edata = ee()->extensions->universal_call('forum_submit_post_end', $this, $data);\nif (ee()->extensions->end_script === TRUE) return $edata;\n```\n\n----------------------------------------\n\nTITLE: Usage of Error Handling Parameter - ExpressionEngine Template Syntax\nDESCRIPTION: Illustrates how to add inline error handling capability to registration forms in ExpressionEngine. Sets the error_handling parameter to \\\"inline\\\", enabling conditional error tag rendering (e.g., {error:field_name}). This parameter is part of the registration form's tag attributes and requires the form validation logic provided by ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_1\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\nerror_handling=\"inline\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Subject Field in HTML Email Form\nDESCRIPTION: This HTML code snippet defines an input field for specifying the subject of the email. It is mandatory to include this field in the form even if it is a hidden field.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"text\" name=\"subject\" size=\"40\" />\n```\n\n----------------------------------------\n\nTITLE: Using Checkbox and Multi Select Fields for Parent Entries\nDESCRIPTION: Examples for utilizing checkbox and multiselect fields within parent entries in ExpressionEngine, outputting single labels and detailed pairs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_17\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{parents field=\\\"relationship_field\\\"}\\n  {parents:my_checkbox}\\n{/parents}\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{parents field=\\\"relationship_field\\\"}\\n  {parents:my_checkbox}\\n     Value: {item}<br>\\n     Value: {item:value}<br>\\n     Label: {item:label}<br>\\n  {/parents:my_checkbox}\\n{/parents}\n```\n\n----------------------------------------\n\nTITLE: Basic Dynamic Layout Template with Title Variable\nDESCRIPTION: HTML layout template that demonstrates using conditional title variables in Expression Engine layouts.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/layouts.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Site Name{if layout:title != ''} | {layout:title}{/if}</title>\n  </head>\n  <body>\n    {layout:contents}\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw CLI Arguments in ExpressionEngine (PHP)\nDESCRIPTION: Illustrates how to retrieve all raw command-line arguments passed to an ExpressionEngine CLI command within a class extending `Cli`. The `$this->arguments` property holds an array containing all parts of the command input, starting with the command name itself. The example shows printing this array and its typical structure.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/defining-input.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprint_r($this->arguments);\n\n// Returns\n// Array\n// (\n//     [0] => make:extension\n//     [1] => AwesomeExtension\n// )\n// => true\n```\n\n----------------------------------------\n\nTITLE: Creating a URL with CP/URL Service - PHP\nDESCRIPTION: This snippet demonstrates how to construct a simple URL using the CP/URL Service by providing a path. This method automatically manages session IDs when necessary, simplifying URL creation in the ExpressionEngine control panel.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/url.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$url = ee('CP/URL', 'publish/create/1');\n```\n\n----------------------------------------\n\nTITLE: Instantiating the Dependency Container in PHP\nDESCRIPTION: Demonstrates how to create a new instance of ExpressionEngine's `InjectionContainer`. This container is used to manage application dependencies and services.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/architecture.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse ExpressionEngine\\Service\\Dependency\\InjectionContainer;\n$di = new InjectionContainer();\n```\n\n----------------------------------------\n\nTITLE: Decrypting Content with decrypt Modifier\nDESCRIPTION: Decrypts content that was previously encrypted, with options for base64 decoding and custom encryption keys.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{secret:decrypt}\n{!-- No more secrets --}\n```\n\n----------------------------------------\n\nTITLE: Setting Webmaster Email in ExpressionEngine (PHP)\nDESCRIPTION: Configures the site's return email address for auto-generated emails in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_172\n\nLANGUAGE: php\nCODE:\n```\n$config['webmaster_email'] = 'hello@example.com';\n```\n\n----------------------------------------\n\nTITLE: Styling Password Strength Indicator with CSS\nDESCRIPTION: This CSS code provides styles for the password strength indicator generated by the accompanying JavaScript. It includes basic form styling and specific rules for positioning the indicator (`rank-wrap`) absolutely within the password input's container. It also defines distinct styles (border and text color) for the different password strength levels (`weak`, `good`, `strong`, `very strong`) applied dynamically via JavaScript.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/password-validation.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style type=\"text/css\">\n    form label {\n        display: block;\n        color: #0d0d19;\n        margin-bottom: 5px;\n        font-weight: 500;\n    }\n\n    form input:not([type=\"submit\"]) {\n        display: block;\n        width: 100%;\n        padding: 8px 15px;\n        font-size: 1rem;\n        line-height: 1.6;\n        color: #0d0d19;\n        background-color: #fff;\n        background-image: none;\n        transition: border-color .2s ease,box-shadow .2s ease;\n        -webkit-appearance: none;\n        border: 1px solid #cbcbda;\n        border-radius: 5px;\n    }\n\n    /* Styles for the main password strength indicator wrapper */\n\n    .rank-wrap {\n        position: absolute;\n        right: 15px;\n        top: 10px;\n        background: #fff;\n        text-transform: uppercase;\n    }\n\n    /* Default styles for the password strength indicator text wrap */\n\n    .rank-wrap .status-tag {\n        background: none;\n        text-transform: uppercase;\n        border: 1px solid transparent;\n        font-family: Roboto,system-ui,-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Helvetica Neue\",Oxygen,Cantarell,sans-serif;\n        display: inline-block;\n        padding: 3px 8px 2px;\n        color: #8f90b0;\n        font-size: 12px;\n        font-weight: 500;\n        letter-spacing: 1px;\n        border-radius: 3px;\n        margin: 0;\n    }\n\n    /* Styles for strong and very strong password */\n\n    .rank-wrap .status-tag.strong {\n        border-color: #00c571;\n        color: #00c571;\n    }\n\n    /* Styles for good password */\n\n    .rank-wrap .status-tag.good {\n        border-color: #ffb40b;\n        color: #ffb40b;\n    }\n\n    /* Styles for weak password */\n\n    .rank-wrap .status-tag.weak {\n        border-color: #fa5252;\n        color: #fa5252;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Defining Function with Default Arguments - PHP\nDESCRIPTION: Shows a PHP function definition with default values for arguments, exemplifying how to prevent errors from missing parameters and to provide sensible fallbacks. No dependencies are required. Parameters include 'bar' defaulting to an empty string and 'baz' defaulting to FALSE, ensuring robust function calls.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/general.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nfunction foo($bar = '', $baz = FALSE)\n```\n\n----------------------------------------\n\nTITLE: Calling before_template_save Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the before_template_save hook is called in ExpressionEngine. This hook is triggered before a template is inserted or updated, allowing modifications that will be automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_template_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Tracing Function Calls with ExpressionEngine - PHP\nDESCRIPTION: Illustrates how to use the trace helper function to print a debug backtrace, revealing the series of function calls leading to the current point. Particularly useful for tracking down the origin of code invocation when debugging ExpressionEngine add-ons. The optional parameter (e.g., 10) is the number of steps/functions to include in the trace output. Requires ExpressionEngine's environment. The output is a readable trace of function calls up to the specified number of steps.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/debugging.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ntrace(10)\n```\n\n----------------------------------------\n\nTITLE: Limiting Shortcuts by ID - ExpressionEngine Template Tag\nDESCRIPTION: This snippet limits which shortcuts are rendered by specifying a shortcut_id. It ensures only shortcuts matching the passed ID(s) appear in the template output, using ExpressionEngine’s {exp:pro_search:shortcuts} tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_8\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:shortcuts shortcut_id=\"2\"}\n```\n\n----------------------------------------\n\nTITLE: Calling before_category_save Hook in PHP\nDESCRIPTION: This code shows how the before_category_save hook is called in ExpressionEngine. It passes the current Category model object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_category_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling After Template Snippet Insert Hook in PHP\nDESCRIPTION: This snippet shows the call to the 'after_template_snippet_insert' hook in ExpressionEngine. It passes the current TemplateSnippet model object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-snippet.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_template_snippet_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Using Toggle Fields in Parent Entries\nDESCRIPTION: This snippet highlights how to use toggle fields within parent entries in ExpressionEngine, outputting conditional content based on toggle status.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_25\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{parents field=\\\"relationship_field\\\"}\\n  {if parents:my_toggle}YES there is a toggle value!{/if}\\n{/parents}\n```\n\n----------------------------------------\n\nTITLE: Using pro_variables_post_save Hook in ExpressionEngine (PHP)\nDESCRIPTION: A code example showing how to implement the pro_variables_post_save hook in ExpressionEngine. This hook allows for extra processing after variable values are saved, such as clearing the cache. It passes the saved variable IDs and any skipped variable IDs as arguments.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/development/hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    $this->EE->extensions->call('pro_variables_post_save', array_keys($vars), $skipped);\n```\n\n----------------------------------------\n\nTITLE: Testing User's Entry Count\nDESCRIPTION: Example of checking the total number of entries submitted by the user.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_26\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if logged_in_total_entries > 1000}  Gold star contributor!  {/if}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom CKEditor Build Process for ExpressionEngine\nDESCRIPTION: Instructions for creating a custom CKEditor build with additional plugins. This process involves cloning the ExpressionEngine repository, making changes to the CKEditor configuration files, and building the custom version.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/rte.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build:ckeditor\n```\n\n----------------------------------------\n\nTITLE: Searching Fields by Content with \\'search:field_name\\' Parameter - ExpressionEngine Template Syntax\nDESCRIPTION: Restricts channel entries output to entries whose field values match or contain a given term, providing exact matching (using '=') and exclusion (using '=not ...'). Used by specifying the field's short_name as the parameter. Some field types (e.g., relationship, non-searchable grid columns) may not be supported.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_25\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\nsearch:body=\"pickles\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\nsearch:body=\"=pickles|shoes\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\nsearch:body=\"=not pickles|shoes\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Logout Form in ExpressionEngine\nDESCRIPTION: This ExpressionEngine tag pair generates a complete HTML form that allows users to log out. It includes a submit button and supports various parameters for customization, such as specifying a return URL after logout.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/logout.md#2025-04-22_snippet_2\n\nLANGUAGE: ee\nCODE:\n```\n{exp:member:logout_form return=\"mymb/login\"}\n\t    <input type=\"submit\" value=\"Logout\">\n    {/exp:member:logout_form}\n```\n\n----------------------------------------\n\nTITLE: Setting encode_removed_text in ExpressionEngine\nDESCRIPTION: Configuration setting that defines replacement text when encode_email is set to FALSE in the Template class.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_71\n\nLANGUAGE: php\nCODE:\n```\n$config['encode_removed_text'] = 'Encoded emails not allowed';\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Entries in ExpressionEngine\nDESCRIPTION: Shows how to retrieve and display parent entries of the current entry through a relationship field. The `field` parameter specifies the field used for retrieval.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_3\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{exp:channel:entries channel=\"childChannel\"}\n  {parents field=\"relationship_field\"}\n    {parents:title} - {parents:field1} - {parents:field2}\n  {/parents}\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Calling after_file_update Hook in PHP\nDESCRIPTION: Demonstrates the implementation of the after_file_update hook in ExpressionEngine. This hook is called after a file object is updated, but changes are not automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/file.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_file_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Simplified Group Toggle Structure\nDESCRIPTION: Alternative form structure with group toggles applied to individual fieldsets within the same section.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/shared-form-view.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$vars['sections'] = array(\n  array(\n    array(\n      'title' => 'type',\n      'fields' => array(\n        'type' => array(\n          'type' => 'select',\n          'choices' => array(\n            'text' => lang('text'),\n            'image' => lang('image')\n          ),\n          'group_toggle' => array(\n            'text' => 'text_options',\n            'image' => 'image_options'\n          ),\n          'value' => $type\n        )\n      )\n    ),\n    array(\n      'title' => 'text',\n      'group' => 'text_options',\n      'fields' => array(\n        'text' => array(\n          'type' => 'text',\n          'value' => $text\n        )\n      )\n    ),\n    array(\n      'title' => 'image_path',\n      'group' => 'image_options',\n      'fields' => array(\n        'image_path' => array(\n          'type' => 'text',\n          'value' => $image_path\n        )\n      )\n    )\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Tagdata Modification Hook Implementation\nDESCRIPTION: Demonstrates the channel_entries_tagdata hook implementation for modifying entry tagdata before parsing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/channel.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$tagdata = $this->extensions->call('channel_entries_tagdata', $tagdata, $row, $this);\nif ($this->extensions->end_script === TRUE) return $tagdata;\n```\n\n----------------------------------------\n\nTITLE: Displaying Table Variables in ExpressionEngine\nDESCRIPTION: Examples of using Pro Variables module tags to display table variables with sorting and limiting options.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/type.md#2025-04-22_snippet_5\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_variables:pair var=\"lv_table_var\"}\n  {if count == 1}<ul>{/if}\n    <li><a href=\"{cell_1}\">{cell_2}</a></li>\n  {if count == total_results}</ul>{/if}\n{/exp:pro_variables:pair}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_variables:pair var=\"lv_table_var\" sort=\"random\" limit=\"1\"}\n  Random link: <a href=\"{cell_1}\">{cell_2}</a>\n{/exp:pro_variables:pair}\n```\n\n----------------------------------------\n\nTITLE: Replacing Fluid Field Content via Entry Model in PHP\nDESCRIPTION: Shows how to replace the entire content of an ExpressionEngine Fluid field by assigning a specially structured array to the corresponding property on the entry model object (`$entry`). The array must have a `fields` key. Within `fields`, use keys like `field_X` (where X is the existing ID from the Fluid Field data table, accessible via `$fluid->id`) to specify which existing component field instance to update, providing its field ID (`field_id_Y`) and the new data. Saving the entry applies the changes, overwriting all previous content.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-entry.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$entry->{$entry->getCustomFieldPrefix() . $fluid_field_id} = array(\n    'fields' => array(\n\n        // Replace/edit data\n        // The ID in the Fluid Field table, $fluid->id.\n        'field_7' => array(\n\n            // The existing field ID.\n            'field_id_5' => 'Field data'\n        ),\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Publish Form Tab Label in an ExpressionEngine Add-on Language File (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to customize the tab label displayed on the ExpressionEngine publish form for fields associated with an add-on. It involves adding a key to the `$lang` array in the add-on's language file (`addon_name_lang.php`) that matches the module's internal name (represented here as `'module_name'`), with the value being the desired tab label text.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/add-on-language-files.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Additional Key => Value pairs go here\n\n/**\n * Tab Label for publish fields\n *\n * Assign the label you wish to use to the module_name array key\n * Remember only alphanumeric characters, underscores, dashes and spaces are allowed.\n */\n\n'module_name' => 'Tab label'\n```\n\n----------------------------------------\n\nTITLE: Calling member_member_register Hook in PHP\nDESCRIPTION: This snippet demonstrates how the member_member_register hook is called within ExpressionEngine. It passes member data and ID, and checks for script termination.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/member-register.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('member_member_register', $data, $member_id);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Testing User's Member ID\nDESCRIPTION: Example of checking the specific member ID of the logged in user.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_22\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if logged_in_member_id == '147'}  Ooh, you're really special, Frank!!  {/if}\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_form_settings_update Extension Hook in PHP\nDESCRIPTION: Demonstrates how the after_channel_form_settings_update extension hook is called. This hook triggers after a channel form settings object is updated, and changes made to the object will not be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-form-settings.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_form_settings_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Performing 'Contains' Search in ExpressionEngine Channel Entries\nDESCRIPTION: Demonstrates how to use 'Contains' matching in ExpressionEngine channel entries searches. This allows searching for terms within fields, including options for inclusive sets and whole word matching.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_26\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsearch:body=\"pickles|shoes\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsearch:body=\"not pickles|shoes\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsearch:body=\"pickles&&shoes\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsearch:body=\"not pickles&&shoes\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\nsearch:body=\"cat\\W\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Output When No Consent Requests are Available - ExpressionEngine Template\nDESCRIPTION: This snippet demonstrates how to use the {if no_results} conditional inside the consent requests loop to display a message if no consent requests match the given filters. Place at the top of a requests loop to provide fallback output.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/consent.md#2025-04-22_snippet_14\n\nLANGUAGE: expressionengine-template\nCODE:\n```\n{if no_results}\n  No Consent Requests Available\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Displaying Channel Field Content in ExpressionEngine Templates\nDESCRIPTION: Example template code showing how to properly display content from a custom channel field in ExpressionEngine. This demonstrates the correct tag syntax within a channel entries tag pair.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/templates.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:entries}\n    {extended}\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Evaluating IPN Response Hook Call in PHP\nDESCRIPTION: Shows how the simple_commerce_evaluate_ipn_response hook is called to process PayPal's IPN confirmation response. The hook receives the Simple Commerce object and PayPal's response, and can modify the response.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/simple-commerce.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$result = ee()->extensions->universal_call('simple_commerce_evaluate_ipn_response', $this, $result);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Using Negative Search Syntax in ExpressionEngine\nDESCRIPTION: Demonstrates how to exclude specific terms from search results by using the negative sign (-) operator. This example shows searching for \"Lance Armstrong\" while excluding results containing \"charity\".\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/search/index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\"Lance Armstrong\" -charity\n```\n\n----------------------------------------\n\nTITLE: Using Numeric Values in Conditionals\nDESCRIPTION: Shows how to use numeric values like Fluid field count variables in conditionals.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_9\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if {fluid_content:count type=\"long_form_text\"} == 3}\n```\n\n----------------------------------------\n\nTITLE: Sticky Entry Checkbox Implementation - HTML\nDESCRIPTION: Checkbox input for toggling an entry's sticky status.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/inputs.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<p><input type=\"checkbox\" name=\"sticky\" value=\"y\"  {sticky} /> Make Entry Sticky</p>\n```\n\n----------------------------------------\n\nTITLE: Member Role Selection\nDESCRIPTION: Dropdown select menu for filtering search results by member role.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/search.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<select name='search_group_id' class='select' >\n    {group_id_options}\n</select>\n```\n\n----------------------------------------\n\nTITLE: Accessing Item Value and Label Explicitly (ExpressionEngine)\nDESCRIPTION: Within a Multi Select field variable pair, this snippet demonstrates how to access both the stored value (`{item:value}`) and the display label (`{item:label}`) for each selected item explicitly. The basic `{item}` variable defaults to the label.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/multiselect.md#2025-04-22_snippet_3\n\nLANGUAGE: expressionengine\nCODE:\n```\n{field_name}\n    Value: {item}<br> {!-- One --}\n    Value: {item:value}<br> {!-- 1 --}\n    Label: {item:label}<br> {!-- One --}\n{/field_name}\n```\n\n----------------------------------------\n\nTITLE: Enabling Secure Cookies in ExpressionEngine\nDESCRIPTION: Requires a secure connection (HTTPS) for ExpressionEngine to set cookies, enhancing security by preventing cookies from being transmitted over non-secure connections.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$config['cookie_secure'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Contributors List Display in HTML\nDESCRIPTION: HTML structure for displaying contributor profiles in a responsive grid layout using Tailwind CSS classes. Shows contributor avatars, names and GitHub links.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/563996?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Bryan Nielsen</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bryannielsen\" target=\"_BLANK\">@bryannielsen</a></p></div></div></div></li>\n</ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Title Field Focus on Publish Page in ExpressionEngine\nDESCRIPTION: Controls whether the title field automatically receives focus when the publish page is loaded.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_107\n\nLANGUAGE: php\nCODE:\n```\n$config['publish_page_title_focus'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: Calling Extension Hooks for Member Creation Start in PHP\nDESCRIPTION: The snippet demonstrates how to invoke the 'cp_members_member_create_start' hook to perform additional tasks before the control panel member creation process. No dependencies apart from the ExpressionEngine environment are required.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/members.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->extensions->call('cp_members_member_create_start');\nif ($this->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Channel Parameter Implementation in ExpressionEngine\nDESCRIPTION: Example of specifying a channel name for category filtering.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-heading.md#2025-04-22_snippet_4\n\nLANGUAGE: ee\nCODE:\n```\nchannel=\"news\"\n```\n\n----------------------------------------\n\nTITLE: Calling after_member_field_save Extension Hook in PHP\nDESCRIPTION: Demonstrates how the after_member_field_save hook is called after a MemberField model is saved (inserted or updated). Changes made to the model object will not be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member-field.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_member_field_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributors List for v7.5.9 in HTML\nDESCRIPTION: This HTML snippet displays the list of contributors for the ExpressionEngine v7.5.9 release. It leverages Tailwind CSS for a responsive grid layout and styling elements like avatars and text. Contributor avatars are sourced from GitHub, and links direct to their respective commit pages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/563996?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Bryan Nielsen</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bryannielsen\" target=\"_BLANK\">@bryannielsen</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/11818941?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Matt Johnson</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=matthewjohns0n\" target=\"_BLANK\">@matthewjohns0n</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Missing Closing Brace Error\nDESCRIPTION: Shows an error where a closing brace is missing in a conditional.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_37\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if segment_1 == \"site\" HELLO WORLD{/if}\n```\n\n----------------------------------------\n\nTITLE: Creating ExpressionEngine Entry Form in HTML\nDESCRIPTION: This HTML snippet defines a form embedded with ExpressionEngine tags to facilitate dynamic entry handling. Fields for title, URL title, and entry date are included. Upon submission, data is processed, optionally utilizing JavaScript for URL title generation. It operates based on the ExpressionEngine environment, necessitating specific channel and template configurations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/examples.md#2025-04-22_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n{exp:channel:form channel=\"products\" return=\"form_template/ENTRY_ID\" entry_id=\"{segment_2}\" json=\"yes\"}\n    <label for=\"title\">Title</label>\n    <input type=\"text\" name=\"title\" id=\"title\" value=\"{title}\" size=\"50\" maxlength=\"100\" onkeyup=\"liveUrlTitle(event);\">\n\n    <label for=\"url_title\">URL Title</label>\n    <input type=\"text\" name=\"url_title\" id=\"url_title\" value=\"{url_title}\" maxlength=\"75\" size=\"50\">\n\n    <label for=\"entry_date\">Date</label>\n    <input type=\"text\" name=\"entry_date\" id=\"entry_date\" value=\"{entry_date}\" maxlength=\"23\" size=\"25\">\n\n    <input type=\"submit\" name=\"submit\" value=\"Submit\">\n{/exp:channel:form}\n```\n\n----------------------------------------\n\nTITLE: Controlling Pagination Placement - ExpressionEngine Template\nDESCRIPTION: This demonstrates the use of the paginate parameter to control where the pagination controls for comments are displayed: above, below, both, or inline with the comment list. Allows for customizing user navigation experience.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_8\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\npaginate=\"top\" paginate=\"bottom\"  paginate=\"both\"  paginate=\"inline\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Grid Fields in ExpressionEngine Fluid Field\nDESCRIPTION: Illustrates how to loop through rows of a Grid field (`my_grid`) nested within a Fluid Field (`my_fluid_field`) using the `{content}` variable pair. Inside the loop, it accesses various field types within the grid row: a date field (`{content:my_grid format=\"%Y %m\"}`), a toggle field (`{content:my_toggle}`), a file field pair (`{content:my_file}`), and a relationship field pair (`{content:my_relationship}`). It also demonstrates using grid-specific variables like `{content:count}` and `{content:total_rows}`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/fluid.md#2025-04-22_snippet_11\n\nLANGUAGE: ee\nCODE:\n```\n{my_fluid_field}\n  {my_fluid_field:my_grid}\n    {content}\n      {if content:count == 1}<h3>Grid total rows: {content:total_rows}{/if}\n      Date field: {content:my_grid format=\"%Y %m\"}\n      Toggle: {if content:my_toggle}YES there is a toggle value!{/if}\n\n      File field pair:\n      {content:my_file}\n        Upload date: {upload_date format=\"%Y %m %d\"}\n        Custom med thumbnail url: {url:med}\n      {/content:my_file}\n\n      Relationship field pair:\n      {content:my_relationship}\n        {if content:my_relationship:count == 1}<h3>Relationship {content:my_relationship:total_results}){/if}\n        {content:my_relationship:title}<br>\n      {/content:my_relationship}\n    {/content}\n  {/my_fluid_field:my_grid}\n{/my_fluid_field}\n```\n\n----------------------------------------\n\nTITLE: Displaying Radio Button Field Values in ExpressionEngine Templates (Markdown)\nDESCRIPTION: This snippet illustrates how to access and render the value or label of a Radio Button field in an ExpressionEngine template. The placeholders {field_name}, {field_name:value}, and {field_name:label} are used to get the selected item's value and label in your template output. The snippet assumes the field is named accordingly and that ExpressionEngine's template parsing system is being used. No external dependencies are required, and output will be controlled by ExpressionEngine's tag processing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/radio-buttons.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nValue: {field_name}<br>\nValue: {field_name:value}<br>\nLabel: {field_name:label}<br>\n```\n\n----------------------------------------\n\nTITLE: Post-Purchase Action Hook Call in PHP\nDESCRIPTION: Demonstrates the simple_commerce_perform_actions_end hook call that executes after a purchase is recorded. Receives the Simple Commerce object and the store item database record.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/simple-commerce.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->universal_call('simple_commerce_perform_actions_end', $this, $query->row());\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Crypto Method for SMTP in ExpressionEngine (PHP)\nDESCRIPTION: Sets the stream encryption method for TLS when sending emails over SMTP.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_163\n\nLANGUAGE: php\nCODE:\n```\n$config['tls_crypto_method'] = STREAM_CRYPTO_METHOD_TLSv1_3_CLIENT;\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Member Fields in ExpressionEngine Members Field Tag Pair\nDESCRIPTION: This example shows how to access custom member field data within an ExpressionEngine Members field tag pair. Use the Members field short name as a prefix, followed by a colon and the custom member field's short name (e.g., `{members_field:member_custom_field}`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/member.md#2025-04-22_snippet_4\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{members_field:member_custom_field}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video via HTML iframe in Markdown Documentation - HTML\nDESCRIPTION: This snippet embeds a YouTube video using the HTML <iframe> tag within markdown documentation. It displays a YouTube video (with HD1080 quality hint) at 1920x1080 pixels and enables fullscreen controls across different browsers via allowfullscreen attributes. No external dependencies are required beyond standard web browser capabilities. Input parameters include the video URL and iframe attributes, and output is a rendered embedded video player on the documentation page. Suitable for inclusion in markdown or HTML-based documentation where visual instruction is needed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/getting-started/ten-minute-primer.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\\\"video-wrapper\\\">\\n<iframe src=\\\"https://www.youtube.com/embed/qKaOirMRz2s?vq=HD1080\\\" width=\\\"1920\\\" height=\\\"1080\\\" frameborder=\\\"0\\\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Quote Mark Handling in Conditionals\nDESCRIPTION: Demonstrates how to properly handle quote marks when multiple levels of quotation are needed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_8\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if \"{current_time format='%F'}\" == \"May\"}\n\nor this:\n\n{if \"{current_time format=\\\"%F\\\"}\" == \"May\"}\n```\n\n----------------------------------------\n\nTITLE: Display Signature Image Condition - markup\nDESCRIPTION: Shows how to use {if signature_image} to conditionally display an author's signature image if one is specified for the current entry. Includes image attributes like URL, width, height, and author name.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_51\n\nLANGUAGE: markup\nCODE:\n```\n{if signature_image} content {/if}\n{if signature_image}\n    <img src=\"{signature_image_url}\" width=\"{signature_image_width}\" height=\"{signature_image_height}\" alt=\"{author}'s signature\">\n{/if}\n```\n\n----------------------------------------\n\nTITLE: CSRF Protection Error Response in ExpressionEngine\nDESCRIPTION: This HTML snippet shows the error response returned by ExpressionEngine when CSRF protection prevents the action from being executed. It indicates that the form has expired and needs to be refreshed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"panel redirect\">\n    <div class=\"panel-heading\">\n        <h3>The following errors were encountered</h3>\n    </div>\n    <div class=\"panel-body\">\n        <ul><li>This form has expired. Please refresh and try again.</li></ul>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Disable Parameter Usage in ExpressionEngine\nDESCRIPTION: Example showing how to disable specific tag features for performance optimization.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-heading.md#2025-04-22_snippet_3\n\nLANGUAGE: ee\nCODE:\n```\ndisable=\"category_fields\"\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_layout_insert Hook in PHP\nDESCRIPTION: Example of how the before_channel_layout_insert hook is called before inserting a new channel layout. It passes the current ChannelLayout object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-layout.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_layout_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Return Format for member_create_start Hook in ExpressionEngine PHP\nDESCRIPTION: Example showing the expected return format for the member_create_start hook. Extensions must return an array containing the modified data and custom data arrays.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/member-model.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\narray($data, $cdata)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Global Variables in ExpressionEngine Config\nDESCRIPTION: Shows how to define custom global variables in ExpressionEngine's config.php or index.php files. These variables can be accessed across all templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/single-variables.md#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$assign_to_config['global_vars'] = array(\n    'show_banner' => 'y',\n);\n\n$config['global_vars'] = array(\n    'show_banner' => 'n',\n);\n\n$config['global_vars'] = array(\n    'show_banner' => $_ENV['SHOW_BANNER'],\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Member's Primary Role in ExpressionEngine 6\nDESCRIPTION: Example showing how to access a member's primary role name in ExpressionEngine 6, replacing the deprecated MemberGroup model with the new Role model.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/v6-add-on-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->session->getMember()->PrimaryRole->name;\n// name of member's primary role\n```\n\n----------------------------------------\n\nTITLE: Image Rotation in Templates in ExprEngine\nDESCRIPTION: Describes how to rotate images in an ExpressionEngine template using specified angles.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/file.md#2025-04-22_snippet_8\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{news_image:rotate angle=\"hor\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Registration Page Link for Member Profiles in ExpressionEngine HTML\nDESCRIPTION: This code snippet allows you to create a link to the member registration page using a path variable in ExpressionEngine. It's designed to be embedded within your HTML code to facilitate new users in signing up on your site.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/profile-templates.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{path='member/register'}\">Register as a new member</a>\n```\n\n----------------------------------------\n\nTITLE: Creating a Memberlist Link in ExpressionEngine HTML\nDESCRIPTION: Generates a hyperlink to a page listing all registered members using an ExpressionEngine path variable. This link is designed for front-end navigation, allowing visitors to see the memberlist easily.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/profile-templates.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{path='member/memberlist'}\">View the Memberlist</a>\n```\n\n----------------------------------------\n\nTITLE: Calling comment_form_tagdata Hook in PHP\nDESCRIPTION: This snippet demonstrates how the comment_form_tagdata hook is called to modify the tagdata in the Comment Form tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/comment.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$tagdata = ee()->extensions->call('comment_form_tagdata', $tagdata);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Creating a New Template and Assigning to a Group in ExpressionEngine Model in PHP\nDESCRIPTION: This snippet shows how to create a new Template model object, set its required properties, validate, and persist it using ExpressionEngine\\'s Model service. Dependencies include an active ExpressionEngine installation, a pre-existing template group (specified by \\'group_id\\'), and access to the \\'ee()\\' method. Inputs are template property assignments, outputs are the result of the validation and save operations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/template.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n// Make a new template object.\\n$template = ee('Model')->make('Template');\\n\\n// Add the required fields.\\n$template->site_id       = ee()->config->item('site_id');\\n$template->group_id      = 1; // Must be an existing group.\\n$template->template_name = 'My New Template';\\n$template->template_type = 'webpage';\\n\\n// Validate and Save the new template.\\n$result = $template->validate();\\n\\nif ($result->isValid())\\n{\\n  $template->save();\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating an ExpressionEngine Member's Primary Role in PHP\nDESCRIPTION: This snippet shows how to change the primary role of an existing ExpressionEngine member object. It sets the `role_id` property to a new ID, validates the changes using `$member_object->validate()`, and saves the member object if validation passes. Requires an existing `$member_object` and the `$new_role_id`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/member.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n```php\n$new_role_id = 8;\n$member_object->role_id = $new_role_id;\n\n// Validate and Save.\n$result = $member_object->validate();\n\nif ($result->isValid())\n{\n  $member_object->save();\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Modal in ExpressionEngine: PHP\nDESCRIPTION: This PHP snippet demonstrates how to create a simple modal using the ExpressionEngine View service. The modal displays 'Hello, world!' and requires defining 'name' and 'contents' as view variables. It outputs HTML that is later injected into the page's DOM as a hidden modal ready to be triggered.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/modal.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modal_vars = array(\n  'name' => 'hello',\n  'contents' => '<p>Hello, world!</p>'\n);\n$modal_html = ee('View')->make('ee:_shared/modal')->render($modal_vars);\n```\n\n----------------------------------------\n\nTITLE: Using Preload Replacements for Channel Names in ExpressionEngine\nDESCRIPTION: Example showing how to use preload replacements to store channel short names that can be reused across multiple tags in the same template, reducing repetition and simplifying maintenance.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/preload-replacement.md#2025-04-22_snippet_1\n\nLANGUAGE: expressionengine\nCODE:\n```\n{preload_replace:channels=\"news|reviews\"}\n\n{exp:channel:category_heading channel=\"{channels}\"}\n    <h1>{category_name}</h1>\n    {if category_description != \"\"}<p>{category_description}</p>{/if}\n{/exp:channel:category_heading}\n\n{exp:channel:entries channel=\"{channels}\" limit=\"10\"}\n    <h2>{title}</h2>\n    {body}\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Logout Link in HTML/ExpressionEngine\nDESCRIPTION: Demonstrates how to create a basic HTML anchor tag that serves as a logout link. It uses the `{path='logout'}` ExpressionEngine variable to dynamically generate the correct logout URL for the href attribute.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/logout.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{path='logout'}\">Log Out</a>\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_entry_save Hook in PHP\nDESCRIPTION: Code demonstrating how the after_channel_entry_save hook is called in ExpressionEngine after a channel entry is saved. The hook passes the current ChannelEntry model object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-entry.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_entry_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Image Output with Dynamic Attributes in Moblog Templates in Markdown\nDESCRIPTION: This snippet is a single HTML image element leveraging Moblog template variables for file, width, and height. When rendered, {file} becomes the image URL, while {width} and {height} become the image's dimensions in pixels. Used to output uploaded images in Moblog-created entries. No dependencies outside ExpressionEngine template parsing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n<img src=\"{file}\" width=\"{width}\" height=\"{height}\" alt=\"pic\" />\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_update Hook in PHP\nDESCRIPTION: Example of how the before_channel_update hook is called in ExpressionEngine. This hook is triggered before a channel object is updated, allowing modifications to be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: ExpressionEngine Version History JSON Feed Format\nDESCRIPTION: Example of the JSON feed structure returned by the version history endpoint. It includes the current version and a hash table of version numbers with their corresponding release dates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/json-version-feed.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"current_version\": \"5.1.2\",\n    \"version_history\": {\n        \"5.1.2\": \"2019-01-03\",\n        \"5.1.1\": \"2018-12-21\",\n        \"5.1.0\": \"2018-12-20\",\n        \"5.0.2\": \"2018-12-13\",\n        \"5.0.1\": \"2018-11-18\",\n        \"4.3.8\": \"2019-01-03\",\n        \"4.3.7\": \"2018-12-21\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning an ExpressionEngine Channel Field to Field Groups (PHP)\nDESCRIPTION: Demonstrates how to assign an existing ChannelField to one or more ChannelFieldGroups. It retrieves the field and the target group models by their IDs, then assigns the collection of groups to the `ChannelFieldGroups` relationship on the field model. This action overwrites any previous group assignments. Finally, it validates and saves the changes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-field.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n```php\n// Get an existing field.\n$field = ee('Model')->get('ChannelField', 4)->first();\n\n// Add the field groups by ID.  Note the plural differences. This overwrites any existing assignments.\n$field->ChannelFieldGroups = ee('Model')->get('ChannelFieldGroup', array(1,2))->all();\n\n// Validate and Save.\n$result = $field->validate();\n\nif ($result->isValid())\n{\n  $field->save();\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Models with Not Equal Operator in ExpressionEngine PHP\nDESCRIPTION: Demonstrates filtering templates by name, excluding those named 'index' using the not-equal operator.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n->filter('template_name', '!=', 'index')\n```\n\n----------------------------------------\n\nTITLE: Calling after_member_field_bulk_delete Extension Hook in PHP\nDESCRIPTION: Demonstrates how the after_member_field_bulk_delete hook is called after multiple MemberField models are deleted in bulk. This hook was introduced in ExpressionEngine 4.3.0.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member-field.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_member_field_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Using URL Fields in Parent Entries\nDESCRIPTION: Illustrates the use of URL fields in parent entries of ExpressionEngine templates, facilitating the creation of hyperlinks with dynamic URLs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_26\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{parents field=\\\"relationship_field\\\"}\\n  <a href=\\\"{parents:my_url}\\\">Your Link</a>\\n{/parents}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Stemmers in PHP\nDESCRIPTION: Shows how to add support for custom stemmers in different languages by configuring the Pro Search module's config file. This enables matching keywords by their stem for non-English languages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/filters.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$config['pro_search_stemmers'][lang] = array(\n  file_path,\n  class_name,\n  method\n);\n```\n\n----------------------------------------\n\nTITLE: Specifying Plain Text Passwords in ExpressionEngine Member XML\nDESCRIPTION: This XML snippet shows how to define a plain text password within the ExpressionEngine member import format. The `<password>` tag uses the attribute `type=\"text\"`. ExpressionEngine will automatically encrypt these passwords upon import using the site's configured encryption method, allowing seamless import from systems storing unencrypted passwords.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/member-import-xml-format.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<password type=\"text\">pa55w0id</password>\n```\n\n----------------------------------------\n\nTITLE: Implementing replace_latitude() for Google Maps Fieldtype\nDESCRIPTION: Creates a tag modifier that returns only the latitude value from the stored map data. This allows templates to access the specific latitude component using {fieldname:latitude}.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/example.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction replace_latitude($data, $params = array(), $tagdata = FALSE)\n{\n    list($latitude, $longitude, $zoom) = explode('|', $data);\n    return $latitude;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AJAX Form Submission with jQuery\nDESCRIPTION: The code snippet initializes an AJAX form using jQuery and the jQuery Form plugin. When the document is ready, it binds the form with ID \"publishForm\" to handle submissions asynchronously in JSON format. On a successful response, it alerts the user with the new entry ID; on failure, it lists errors. Dependencies include jQuery and jQuery Form plugin.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/examples.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(document).ready(function(){\n    $('#publishForm').ajaxForm({\n        dataType: 'json',\n        success: function(data) {\n            if (data.success) {\n                alert('You successfully added a new entry with entry_id '+data.entry_id)\n            } else {\n                alert('Failed with the following errors: '+data.errors.join(', '));\n            }\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Field Options Loop Example in ExpressionEngine\nDESCRIPTION: Example showing how to loop through and display field option values and labels using the {field_options} tag pair.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/fields.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{field_options}\n    {value} / {label}\n{/field_options}\n```\n\n----------------------------------------\n\nTITLE: Limiting Checkbox Output in ExpressionEngine Templates\nDESCRIPTION: Shows how to limit the number of displayed checkbox items using the limit parameter in ExpressionEngine templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/checkboxes.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{field_name limit=\"2\"} {!-- One,Two --}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Single Selectable Items in ExpressionEngine\nDESCRIPTION: Illustrates how to render a single selectable item using ExpressionEngine template tags when multiple selection is disabled. This requires understanding of the template syntax and doesn't need external dependencies.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/selectable-buttons.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nLabel: {field_name}<br>\nValue: {field_name:value}<br>\nLabel: {field_name:label}<br>\n```\n\n----------------------------------------\n\nTITLE: Specifying Error Redirect Template in ExpressionEngine Login Form\nDESCRIPTION: Illustrates how to use the `return_error=` parameter to specify the template (e.g., `template_group/error`) where the user should be redirected if form validation errors occur. This is used when `inline_errors` is not enabled (`no`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/login.md#2025-04-22_snippet_7\n\nLANGUAGE: ee\nCODE:\n```\nreturn_error=\"template_group/error\"\n```\n\n----------------------------------------\n\nTITLE: Configuring force_query_string in ExpressionEngine\nDESCRIPTION: Setting to force ExpressionEngine to render URLs with a question mark following index.php, required for certain web server configurations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_76\n\nLANGUAGE: php\nCODE:\n```\n$config['force_query_string'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Processing Images from Moblog Attachments with Template Variables in Markdown\nDESCRIPTION: A complete tag pair for rendering each attached image in Moblog emails. Each {images}...{/images} block iterates over every image attachment, inserting its URL and dimensions. Used in the template for automatic attachment rendering; requires Moblog module support.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n{images} <img src=\"{file}\" width=\"{width}\" height=\"{height}\" alt=\"pic\" /> {/images}\n```\n\n----------------------------------------\n\nTITLE: Example HTML Tag with Content\nDESCRIPTION: An example `<h1>` tag containing text, used to demonstrate the effect of the 'Allow all HTML' setting for HTML formatting in comments, which would render this tag directly in the DOM.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/channels.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<h1>test</h1>\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of ExpressionEngine Add-on Jump File\nDESCRIPTION: This code snippet shows the basic structure of a jump file for an ExpressionEngine add-on. It includes the necessary class definition and the static $items array where jump menu commands are defined.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/jump-menu.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse ExpressionEngine\\Service\\JumpMenu\\AbstractJumpMenu;\n\nclass [AddonName]_jump extends AbstractJumpMenu\n{\n\n    protected static $items = array(\n      'commandArrayTitle' => array(\n        'icon' => 'fa-file',\n        'command' => 'few lowercase words to be fuzzy-matched in jump menu',\n        'command_title' => 'Displayed <b>command title upon match from above</b>',\n        'dynamic' => false,\n        'requires_keyword' => false,\n        'target' => 'See Below. Behavior changes based on dynamic element above'\n    ));\n```\n\n----------------------------------------\n\nTITLE: Generating a Nested Category List\nDESCRIPTION: Example demonstrating the use of {exp:channel:categories} with 'style=\"nested\"' to generate a hierarchical (nested) list of categories from the 'politics' channel. Each category links to the main site index.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/categories.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n{exp:channel:categories channel=\"politics\" style=\"nested\"}\n    <a href=\"{path='SITE_INDEX'}\">{category_name}</a>\n{/exp:channel:categories}\n```\n\n----------------------------------------\n\nTITLE: Username Field for Registration - HTML\nDESCRIPTION: HTML markup for the unique username input used during member registration in ExpressionEngine. The input enforces uniqueness and a length constraint to ensure proper account identification.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<label for=\"username\">Username</label>\n<input type=\"text\" name=\"username\" value=\"\" maxlength=\"120\" size=\"40\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring hidden_template_indicator in ExpressionEngine\nDESCRIPTION: Setting to specify the character(s) that denote a hidden template when used to prefix a template name.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_82\n\nLANGUAGE: php\nCODE:\n```\n$config['hidden_template_indicator'] = '.';\n```\n\n----------------------------------------\n\nTITLE: Accessing Checkbox Item Values and Labels in ExpressionEngine Templates\nDESCRIPTION: Shows how to access both values and labels for checkbox items in ExpressionEngine templates using modifiers on the item variable.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/checkboxes.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{field_name}\n    Value: {item}<br> {!-- 1 --}\n    Value: {item:value}<br> {!-- 1 --}\n    Label: {item:label}<br> {!-- One --}\n{/field_name}\n```\n\n----------------------------------------\n\nTITLE: Calling after_template_save Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the after_template_save hook is called in ExpressionEngine. This hook is triggered after a template is inserted or updated, with changes to the object not being saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_template_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Enabling Entry Pagination Mode with \\'paginate_type\\' Parameter - ExpressionEngine Template Syntax\nDESCRIPTION: Activates field-based pagination for channel entry fields, allowing entries to span multiple pages using the paginate_type parameter. Accepts a field name as value. Useful for splitting lengthy entry content across several template pages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_20\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\npaginate_type=\"field\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Editing for a FolderItem in PHP\nDESCRIPTION: Hides the edit button associated with this `FolderItem` in the sidebar interface. Returns the `FolderItem` instance (`$this`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ncannotEdit()\n```\n\n----------------------------------------\n\nTITLE: Combining Statements in PHP - PHP\nDESCRIPTION: Demonstrates an incorrect pattern where multiple PHP statements are combined on a single line. Such usage can reduce code readability and make debugging harder. No external dependencies are required. This snippet serves as an anti-pattern, warning developers to avoid this practice.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/general.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$foo = 'this'; $bar = 'that'; $bat = str_replace($foo, $bar, $bag);\n```\n\n----------------------------------------\n\nTITLE: Rendering CP/Form in an ExpressionEngine View Template\nDESCRIPTION: Code for rendering a CP/Form in an ExpressionEngine view template. This snippet checks if a form variable has been passed to the view and then uses the ExpressionEngine View service to render it using the shared form template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/modules.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nif (isset($form)) {\n    echo ee('View')->make('ee:_shared/form')->render($form);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Extended Content after Excerpt in ExpressionEngine Template - ExpressionEngine Template\nDESCRIPTION: Demonstrates how to separately output both the excerpt and the extended content portions of an RTE field. The '{rte_field:extended}' variable returns content after the 'Read More' separator, or nothing if the separator is not present. Suitable for layouts that show summaries with expandable detail. Inputs: None. Outputs: Both excerpt and extended content sections.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/rte.md#2025-04-22_snippet_3\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{rte_field:excerpt}\n\n<div class=\"extended\">\n    {rte_field:extended}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calling the 'cp_member_logout' Hook in PHP\nDESCRIPTION: This snippet illustrates how the 'cp_member_logout' extension hook is called in ExpressionEngine. It allows developers to perform additional actions after a user logs out of the control panel. The hook takes no parameters and returns void. Execution can be halted if the hook sets the 'end_script' property to TRUE.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/login.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->extensions->call('cp_member_logout');\nif ($this->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Setting Default Language in ExpressionEngine (PHP)\nDESCRIPTION: Specifies the default language to be used throughout the site. Requires the corresponding language pack to be installed in the system/user/language/ directory.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$config['deft_lang'] = 'french';\n```\n\n----------------------------------------\n\nTITLE: Basic Form Structure with Field Groups\nDESCRIPTION: Initial setup of a form with select field and separate sections for text and image options using ExpressionEngine's form structure.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/shared-form-view.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$vars['sections'] = array(\n  array(\n    array(\n      'title' => 'type',\n      'fields' => array(\n        'type' => array(\n          'type' => 'select',\n          'choices' => array(\n            'text' => lang('text'),\n            'image' => lang('image')\n          ),\n          'value' => $type\n        )\n      )\n    ),\n  ),\n  'text_options' => array(\n    array(\n      'title' => 'text',\n      'fields' => array(\n        'text' => array(\n          'type' => 'text',\n          'value' => $text\n        )\n      )\n    ),\n  ),\n  'image_options' => array(\n    array(\n      'title' => 'image_path',\n      'fields' => array(\n        'image_path' => array(\n          'type' => 'text',\n          'value' => $image_path\n        )\n      )\n    )\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Modifying Template Group Name in ExpressionEngine - PHP\nDESCRIPTION: This snippet shows how to modify the name of an existing Template Group. It retrieves the group, assigns a new name, validates the change, and then saves it if valid. This requires the Validation service to ensure the name change adheres to constraints.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/template-group.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Get the group object.\n$group = ee('Model')->get('TemplateGroup')->filter('group_name', 'about')->first();\n\n// Change the name.\n$group->group_name = 'newgroupname';\n\n// Validate and Save the template.\n$result = $group->validate();\n\nif ($result->isValid())\n{\n  $group->save();\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Status in ExpressionEngine PHP\nDESCRIPTION: Demonstrates how to retrieve a Status object by filtering on the 'status' property.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/status.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$status = ee('Model')->get('Status')->filter('status','open')->first();\n```\n\n----------------------------------------\n\nTITLE: Disabling HttpOnly Flag for Cookies in ExpressionEngine\nDESCRIPTION: Configures whether to set the HttpOnly flag on cookies, which is a security feature that prevents client-side scripts from accessing cookies. By default, HttpOnly is enabled.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$config['cookie_httponly'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: Complete ExpressionEngine Login Form Example with Error Handling\nDESCRIPTION: Provides a comprehensive example of the `{exp:member:login_form}` tag, demonstrating the use of parameters like `return` and `inline_errors`, conditional error display (`{if error:fieldname}`), input value persistence (`{old:username}`), the `{if auto_login}` conditional, the `anon` checkbox, and links for forgotten password/username.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/login.md#2025-04-22_snippet_14\n\nLANGUAGE: ee\nCODE:\n```\n{exp:member:login_form return=\"member/index\" inline_errors=\"yes\"}\n    {!-- You can display all errors at the top of the page or use the individual field {error:} tags shown later --}\n    {!--\n    {if errors}\n        <fieldset class=\"error\">\n            <legend>Errors</legend>\n            {errors}\n                <p>{error}</p>\n            {/errors}\n        </fieldset>\n    {/if}\n    --}\n\n    {if error:general}\n        <span class=\"error\">{error:general}</span>\n    {/if}\n\n    <p>\n        <label>Username</label><br />\n        <input type=\"text\" name=\"username\" value=\"{if old:username}{old:username}{/if}\" maxlength=\"32\" size=\"25\" />\n        {if error:username}\n            <span class=\"error\">{error:username}</span>\n        {/if}\n    </p>\n    <p>\n        <label>Password</label><br />\n        <input type=\"password\" name=\"password\" value=\"\" maxlength=\"32\" size=\"25\" />\n        {if error:password}\n            <span class=\"error\">{error:password}</span>\n        {/if}\n    </p>\n    {if auto_login}\n    <p>\n        <input type=\"checkbox\" name=\"auto_login\" value=\"1\" /> Auto-login on future visits\n    </p>\n    {/if}\n\n    <p>\n        <input type=\"checkbox\" name=\"anon\" value=\"1\" checked=\"checked\" /> Show my name in the online users list\n    </p>\n\n    <p><input type=\"submit\" name=\"submit\" value=\"Submit\" /></p>\n\n    <p><a href=\"{path='member/forgot-password'}\">Forgot password?</a> &nbsp; &nbsp; <a href=\"{path='member/forgot-username'}\">Forgot username?</a></p>\n{/exp:member:login_form}\n```\n\n----------------------------------------\n\nTITLE: Calling Before Channel Field Group Update Hook in PHP\nDESCRIPTION: Example of how the before_channel_field_group_update hook is called. This hook enables modification of the ChannelFieldGroup model before an update is saved, with access to modified values.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field-group.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_field_group_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Grid in HTML/Markdown\nDESCRIPTION: This snippet displays a grid of contributor avatars and information using HTML and Markdown formatting. It includes images, names, and GitHub links for each contributor.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/563996?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Bryan Nielsen</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bryannielsen\" target=\"_BLANK\">@bryannielsen</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/6020323?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Doug Black</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=dougblackjr\" target=\"_BLANK\">@dougblackjr</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/1679951?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Gary Reckard</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=GaryReckard\" target=\"_BLANK\">@GaryReckard</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Text Formatting Option: XHTML\nDESCRIPTION: Specifies the 'XHTML' option for the 'Text formatting' setting within channel comment configurations. This option applies XHTML formatting rules to the comment text using the Typography library.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/channels.md#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nXHTML\n```\n\n----------------------------------------\n\nTITLE: Category Path Variable Usage in ExpressionEngine\nDESCRIPTION: Shows how to use the path variable within an HTML link tag to create links to category-specific pages or templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/categories.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{path='channel/index'}\">{category_name}</a>\n```\n\n----------------------------------------\n\nTITLE: Customizing Checkbox Output Using Variable Pairs in ExpressionEngine\nDESCRIPTION: Demonstrates how to customize the output of checkbox values using variable pairs in ExpressionEngine templates, allowing for custom formatting of each selected item.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/checkboxes.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{field_name}\n    {item}<br>\n{/field_name}\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Selectable Items in ExpressionEngine Templates\nDESCRIPTION: This template code snippet demonstrates how to render multiple selectable items using ExpressionEngine's template tags. It explains how to iterate over selected items and access their attributes such as label and value. This setup requires ExpressionEngine's templating engine and the snippet operates within a template context.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/selectable-buttons.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{field_name}\n    {item}<br>\n{/field_name}\n```\n\n----------------------------------------\n\nTITLE: Avatar Display Conditional - HTML with EE Variables\nDESCRIPTION: This HTML fragment conditionally displays the comment author's avatar image if available, outputting the image URL as well as the width and height variables from ExpressionEngine. Typically used within comment lists where avatar display is desired for registered users.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_16\n\nLANGUAGE: HTML\nCODE:\n```\n{if avatar} <img src=\"{avatar_url}\" width=\"{avatar_image_width}\" height=\"{avatar_image_height}\" alt=\"{author}'s avatar\" /> {/if}\n```\n\n----------------------------------------\n\nTITLE: Setting Censor Replacement in ExpressionEngine (PHP)\nDESCRIPTION: Specifies a word or phrase to be used when replacing censored words. If not set, a pound symbol will be used for each censored character.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$config['censor_replacement'] = 'tisk tisk';\n```\n\n----------------------------------------\n\nTITLE: Setting Email Character Encoding in ExpressionEngine (PHP)\nDESCRIPTION: Defines the character encoding used for the content of outgoing emails. Ensures proper display of special characters in email messages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$config['email_charset'] = 'utf-8';\n```\n\n----------------------------------------\n\nTITLE: Calendar Background and Layout Styling in CSS\nDESCRIPTION: Defines CSS classes for a calendar component's visual structure including background colors, font styling, and cell formatting. These classes style different elements like headers, day cells, month navigation links, and special highlighting for the current day.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/_downloads/calendar-css.txt#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.calendarBG {\n background-color: #000; \n}\n\n.calendarBlank { \n background-color: #9DB7A7;\n}\n\n.calendarHeader { \n font-weight: bold; \n color: #fff; \n text-align: center;\n background-color: #000; \n}\n\n.calendarMonthLinks {\n font-family:       Arial, Trebuchet MS, Tahoma, Verdana, Sans-serif;\n font-size:         11px;\n font-weight:\t\tbold;\n letter-spacing:\t.1em;\n text-decoration:   none;\n color:             #fff;\n background-color:  transparent;\n}\n\n.calendarMonthLinks a {\n color:             #fff;\n text-decoration:   none;\n background-color:  transparent;\n}\n  \n.calendarMonthLinks a:visited {\n color:             #fff;\n text-decoration:   none;\n background-color:  transparent;\n}\n\n.calendarMonthLinks a:hover {\n color:             #ccc;\n text-decoration:   underline;\n background-color:  transparent;\n}\n\n.calendarDayHeading {\n font-weight: bold; \n font-size:\t11px;\n color: #fff; \n background-color: #663300; \n text-align:  center;\n vertical-align: middle;\n}\n\n.calendarToday { \n font-family:       Arial, Trebuchet MS, Tahoma, Verdana, Sans-serif;\n font-size:         12px;\n font-weight:\t\tbold;\n letter-spacing:\t.1em;\n text-decoration:   none;\n text-align:  center;\n vertical-align: middle;\n color:             #000;\n background-color: \t#ccc;\n}\n\n.calendarCell {\n font-family:       Arial, Trebuchet MS, Tahoma, Verdana, Sans-serif;\n font-size:         12px;\n font-weight:\t\tbold;\n letter-spacing:\t.1em;\n text-decoration:   none;\n text-align:  center;\n vertical-align: middle;\n color:             #666;\n background-color:  #fff;\n}\n\n.calendarCell a {\n color:             #000;\n text-decoration:   underline;\n background-color:  transparent;\n}\n  \n.calendarCell a:visited {\n color:             #000;\n text-decoration:   underline;\n background-color:  transparent;\n}\n\n.calendarCell a:hover {\n color:             #fff;\n text-decoration:   none;\n background-color:  transparent;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Add-on Fieldtypes in PHP\nDESCRIPTION: Specifies the `fieldtypes` key within the `addon.setup.php` file. This key defines an associative array of custom fieldtypes provided by the add-on. Each key in the array corresponds to the fieldtype's short name (e.g., 'hello_world' for `ft.hello_world.php`), and the value is another array defining its display `name` and `compatibility` with core fieldtype groups.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n'fieldtypes' => array(\n  'hello_world' => array(\n    'name' => 'Hello World',\n    'compatibility' => 'text',\n    'use' => array(\n      'MemberField'\n    )\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Terms of Service Checkbox Markup - HTML\nDESCRIPTION: HTML markup for the Terms of Service checkbox required in the registration form. The checkbox, when checked, indicates user acceptance of the site's terms. This field must be present for form validity.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"checkbox\" name=\"accept_terms\" value=\"y\" >\n```\n\n----------------------------------------\n\nTITLE: Basic Template Partial Usage with Date Formatting\nDESCRIPTION: Demonstrates how to use a Template partial named 'my_date_formatting' within an entry_date tag to apply consistent date formatting across templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/partials.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{entry_date {my_date_formatting}}\n```\n\n----------------------------------------\n\nTITLE: Defining a Prolet Class in PHP\nDESCRIPTION: This code snippet defines a basic Prolet class in PHP, implementing the `ProletInterface`. It extends `AbstractProlet`, ensuring necessary methods are included. The main function `index()` serves as the default action, rendering output for the Prolet. It showcases essential linguistic and structural elements needed for ExpressionEngine Prolet classes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/prolets.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse ExpressionEngine\\Addons\\Pro\\Service\\Prolet\\AbstractProlet;\nuse ExpressionEngine\\Addons\\Pro\\Service\\Prolet\\ProletInterface;\n\nclass Amazing_add_on_pro extends AbstractProlet implements ProletInterface\n{\n    protected $name = 'Amazing Prolet';\n\n    public function index()\n    {\n        return 'This is a new prolet generated from the CLI.';\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Pre-formatted Text with BBCode\nDESCRIPTION: Illustrates using the [pre] and [code] BBCode tags to display text exactly as entered, preserving whitespace and line breaks. This is useful for code examples and renders using HTML <pre> tags. Long lines might not wrap automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/bbcode.md#2025-04-22_snippet_12\n\nLANGUAGE: bbcode\nCODE:\n```\n[pre]Some pre-formatted text...[/pre]\n[code]Some pre-formatted text...[/code]\n```\n\n----------------------------------------\n\nTITLE: Calling Before Site Update Hook - PHP\nDESCRIPTION: Extension hook called before a site object is updated. Includes modified values array tracking changes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/site.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_site_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Contributors Grid Layout in HTML\nDESCRIPTION: HTML structure for displaying contributor profiles in a responsive grid layout using Tailwind CSS classes. Shows contributor avatars, names and GitHub links.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_21\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/17011377?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Brad Akin</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bakin1999\" target=\"_BLANK\">@bakin1999</a></p></div></div></div></li>\n</ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Render Table Cell Method for Entry Manager in PHP\nDESCRIPTION: Renders tab data into a format suitable for display in an Entry Manager column within ExpressionEngine. It formats entry metadata into JSON for display purposes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/tab-files.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n    public function renderTableCell($data, $field_id, $entry)\n    {\n        $entry_meta = $this->getEntryMeta($entry->entry_id);\n        return json_encode($entry_meta);\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Calling after_global_variable_save Hook in PHP\nDESCRIPTION: Example of how the after_global_variable_save hook is called. This hook executes after a global variable is inserted or updated. Changes to the object will not be automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-global-variable.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_global_variable_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Batch Size in ExpressionEngine (PHP)\nDESCRIPTION: Sets the number of emails to be sent in each batch when using batch mode. The optimal value depends on email protocol, server configuration, and server resources.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n$config['email_batch_size'] = '300';\n```\n\n----------------------------------------\n\nTITLE: Using SQL Parameters in Pro Search (SQL)\nDESCRIPTION: Demonstrates how to use SQL parameters in Pro Search to filter results based on database queries. Includes examples for comparing prices and filtering by author status.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/parameters.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT AVG(field_id_5) FROM exp_channel_data WHERE channel_id = 3;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT entry_id FROM exp_channel_titles WHERE channel_id = 4 AND status != 'closed';\n```\n\n----------------------------------------\n\nTITLE: Recent Articles Embed Template\nDESCRIPTION: Template for displaying a list of recent articles in the sidebar using Channel Entries.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/layouts.md#2025-04-22_snippet_13\n\nLANGUAGE: expressionengine\nCODE:\n```\n{layout=\"news/_sidebar-layout\" header=\"Recent Articles\"}\n\n<ul>\n  {exp:channel:entries channel=\"news\" limit=\"10\" dynamic=\"no\" disable=\"custom_fields\"}\n    <li>{title}</li>\n  {/exp:channel:entries}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Evaluation Rule for Conditional Fields in PHP\nDESCRIPTION: Complete implementation of a custom evaluation rule (TurnedOn) for a toggle fieldtype, showing how to create fieldtype-specific conditional logic.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/enhanced.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace ExpressionEngine\\Addons\\ToggleField\\EvaluationRules;\nuse ExpressionEngine\\Service\\ConditionalFields\\EvaluationRules\\AbstractEvaluationRule;\nuse ExpressionEngine\\Service\\ConditionalFields\\EvaluationRules\\EvaluationRuleInterface;\n\nclass TurnedOn extends AbstractEvaluationRule implements EvaluationRuleInterface\n{\n    public function evaluate($fieldValue, $expectedValue, $fieldSettings)\n    {\n        if (is_null($fieldValue)) {\n            $fieldValue = $fieldSettings['field_default_value'];\n        }\n        return get_bool_from_string($fieldValue);\n    }\n\n    public function getConditionalFieldInputType()\n    {\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Columns for GridInput in PHP\nDESCRIPTION: Defines columns for the GridInput, including column titles and descriptions using language keys.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/table.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$grid->setColumns(\n  array(\n    'image_manip_name' => array(\n      'desc'  => 'image_manip_name_desc'\n    ),\n    'image_manip_type' => array(\n      'desc'  => 'image_manip_type_desc'\n    ),\n    'image_manip_width' => array(\n      'desc'  => 'image_manip_width_desc'\n    ),\n    'image_manip_height' => array(\n      'desc'  => 'image_manip_height_desc'\n    )\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Individual Field Errors in ExpressionEngine Form\nDESCRIPTION: This example shows how to display an error message for a specific form field (username) in an ExpressionEngine template. It also demonstrates preserving the user's input using the {old:field_name} variable.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/form-validation.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p>\n    <label for=\"username\">Username:</label>\n    <input type=\"text\" name=\"username\" value=\"{if old:username}{old:username}{/if}\" />\n    {if error:username}\n        <span class=\"error\">{error:username}</span>\n    {/if}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Updating ExpressionEngine Add-ons via CLI (PHP)\nDESCRIPTION: Executes the `addons:update` command using the ExpressionEngine CLI (`eecli.php`). This command can update add-ons in several ways: interactively prompting for an add-on selection, updating a specific add-on provided via the `--addon` or `-a` option, or updating all add-ons that have updates available using the `--all` flag. Requires PHP and the ExpressionEngine CLI environment.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/addons.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php addons:update\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php addons:update --addon block_and_allow\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php addons:update --all\n```\n\n----------------------------------------\n\nTITLE: Displaying Entry Channel Short Name in ExpressionEngine\nDESCRIPTION: The `{channel_short_name}` variable outputs the defined short name (a machine-readable identifier) of the channel for the current entry. Useful within `{entry_titles}` loops or similar entry contexts.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n{channel_short_name}\n```\n\n----------------------------------------\n\nTITLE: Calling Wiki Special Page Hook in PHP\nDESCRIPTION: Extension hook called for special pages to allow complete takeover of special page processing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/wiki.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->universal_call('wiki_special_page', $this, $topic);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Calling before_status_delete Extension Hook in PHP\nDESCRIPTION: Example of how the before_status_delete hook is called. This hook fires before a status object is deleted, allowing for actions to be taken before deletion.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/status.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_status_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Complex Parse Tag Examples in ExpressionEngine\nDESCRIPTION: Shows multiple examples of Parse tag usage including variable pairs and multiple parameter handling\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/tags.md#2025-04-22_snippet_1\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_variables:parse var=\"my_site:my_var\"}\n\n{exp:pro_variables:parse}\n  Some code riddled with {my_var}\n  and {my_other_var}.\n{/exp:pro_variables:parse}\n\n{exp:pro_variables:parse var=\"my_select_var\" multiple=\"yes\"}\n  <p>\n    Number {my_select_var:count} of {my_select_var:total_results}:\n    {my_select_var:data} ({my_select_var:data_label})\n  </p>\n  {if no_results}No values found{/if}\n{/exp:pro_variables:parse}\n\n{exp:pro_variables:parse var=\"my_matrix_var\"}\n  all matrix variables here\n{/exp:pro_variables:parse}\n```\n\n----------------------------------------\n\nTITLE: Assigning Primary Role Parameter - ExpressionEngine Template Syntax\nDESCRIPTION: Uses the primary_role parameter to assign a specific user role (role ID \\\"7\\\") to newly registered members. This allows overriding default role assignments during registration.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_6\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\nprimary_role=\"7\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Preferences in ExpressionEngine (PHP)\nDESCRIPTION: Specifies upload destination paths, URLs, and titles for ExpressionEngine file uploads.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_167\n\nLANGUAGE: php\nCODE:\n```\n$config['upload_preferences'] = array(\n    1 => array(                                                            // ID of upload destination\n        'name'        => 'Staging Image Uploads',                          // Display name in control panel\n        'server_path' => '/home/user/example.com/staging/images/uploads/', // Server path to upload directory\n        'url'         => 'https://staging.example.com/images/uploads/'      // URL of upload directory\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Information in HTML/Markdown\nDESCRIPTION: This snippet shows how to display contributor information using HTML and Markdown formatting. It creates a grid of contributor avatars, names, and GitHub links.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/563996?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Bryan Nielsen</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bryannielsen\" target=\"_BLANK\">@bryannielsen</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/23382425?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yulya Lebed</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=Yulyaswan\" target=\"_BLANK\">@Yulyaswan</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Tab Implementation in Forms\nDESCRIPTION: Example of implementing tabs in ExpressionEngine forms with dynamic content rendering.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/shared-form-view.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$permissions_tab = '';\n\n// Assuming $sections looks like $var['sections'] as above\nforeach ($sections as $name => $settings)\n{\n  $permissions_tab .= ee('View')->make('ee:_shared/form/section')\n    ->render(array('name' => $name, 'settings' => $settings));\n}\n\n$var['tabs'] = array(\n  'permissions' => $permissions_tab\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Member Field Input Using Tag - ExpressionEngine Template Syntax\nDESCRIPTION: Illustrates simplified usage of ExpressionEngine's {field:work_title} tag to render the input form for a custom member profile field. Requires the field to be set as visible during registration in the ExpressionEngine backend.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_16\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\n<label for=\"work_title\">Work title</label>\n{field:work_title}\n```\n\n----------------------------------------\n\nTITLE: Displaying RTE Field Content in ExpressionEngine Template - ExpressionEngine Template\nDESCRIPTION: Demonstrates how to output the formatted content of an RTE custom field in a template. The field variable, here named 'rte_field', renders the saved HTML for the field as entered in the control panel. This basic usage requires no additional parameters and simply injects the field's content into the template. Inputs: None (uses the current entry's field data). Outputs: The formatted HTML content of the 'rte_field'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/rte.md#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{rte_field}\n```\n\n----------------------------------------\n\nTITLE: Removing Trailing Characters with `backspace` (ExpressionEngine)\nDESCRIPTION: This snippet demonstrates the `backspace` parameter used within a Multi Select variable pair. It removes a specified number of characters from the end of the output generated by the final iteration of the loop, useful for removing trailing separators like `<br>` tags.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/multiselect.md#2025-04-22_snippet_8\n\nLANGUAGE: expressionengine\nCODE:\n```\n{field_name backspace='5'}\n    {item}<br>\n{/field_name}\n```\n\n----------------------------------------\n\nTITLE: Rendering YouTube Video using HTML\nDESCRIPTION: This snippet embeds a YouTube video within a web page using an iframe. The video is set to a high definition resolution and allows fullscreen playback. The width, height, and other attributes are specified to ensure proper display.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/value-slider.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\\\"video-wrapper\\\">\\n<iframe src=\\\"https://www.youtube.com/embed/zPyPAmVQLNQ?vq=HD1080\\\" width=\\\"1920\\\" height=\\\"1080\\\" frameborder=\\\"0\\\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Disabling Dynamic Parameter Parsing - ExpressionEngine Template\nDESCRIPTION: This snippet demonstrates how to set the dynamic parameter to 'no' to prevent ExpressionEngine from using URL-based filtering, suitable for sidebar lists or 'recent comments' widgets. This ensures the tag always displays the predetermined set of comments regardless of context or navigation. Pagination still works, using 'N' as the indicator.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_3\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\ndynamic=\"no\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default XML Language for RSS Feeds in PHP\nDESCRIPTION: This snippet shows how to set the default XML language for RSS feeds in ExpressionEngine. It uses the 'xml_lang' configuration option to set English as the default language.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_177\n\nLANGUAGE: php\nCODE:\n```\n$config['xml_lang'] = 'en';\n```\n\n----------------------------------------\n\nTITLE: Setting hidden_template_404 in ExpressionEngine\nDESCRIPTION: Configuration to show a 404 page when a hidden template is directly loaded in a browser.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_83\n\nLANGUAGE: php\nCODE:\n```\n$config['hidden_template_404'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Information in HTML\nDESCRIPTION: This HTML snippet creates a grid layout to display contributor information, including avatars, names, and GitHub links. It uses Tailwind CSS classes for styling.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/892072?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Aaron Kirkham</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=aaronkirkham\" target=\"_BLANK\">@aaronkirkham</a></p></div></div></div></li>\n<!-- Additional contributor entries -->\n</ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Path in ExpressionEngine\nDESCRIPTION: Restricts cookie sharing to pages with matching URL paths. This is useful for installations in subdirectories to ensure cookies are only accessible to specific ExpressionEngine installations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$config['cookie_path'] = '/blog/';\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Stub Name in ExpressionEngine Fieldtype (PHP)\nDESCRIPTION: Shows how to customize the base name for a fieldtype's template stub file within its class definition (which extends `EE_Fieldtype`). By setting the public `$stub` property (e.g., to 'example'), the fieldtype instructs the Template Generator Service to look for `example.php` (or type-specific variations like `example.xml.php`) instead of the default `field.php` when rendering its template tag via a generator.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/template-generator.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass Example_ft extends EE_Fieldtype\n{\n    public $stub = 'example';\n}\n```\n\n----------------------------------------\n\nTITLE: Expiration Date Field with Datepicker - HTML\nDESCRIPTION: Enhanced expiration date input field with datepicker functionality and timestamp support.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/inputs.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<p>Expiration Date <br>\n  <input type=\"text\" name=\"expiration_date\" value=\"{expiration_date}\" maxlength=\"23\" size=\"25\" rel=\"date-picker\" data-timestamp=\"{expiration_timestamp}\">\n</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination Location with \\'paginate\\' Parameter - ExpressionEngine Template Syntax\nDESCRIPTION: Shows how to use the paginate parameter to determine where pagination controls appear in the entry list. Parameter accepts values such as \\\"top\\\", \\\"bottom\\\", \\\"both\\\", \\\"hidden\\\", and \\\"inline\\\". No dependencies outside core EE channel entries required.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_18\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\npaginate=\"top\"\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_form_settings_insert Extension Hook in PHP\nDESCRIPTION: Demonstrates how the before_channel_form_settings_insert extension hook is called. This hook triggers before a channel form settings object is inserted, and changes made to the object will be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-form-settings.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_form_settings_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Manual Field Construction in Channel Form\nDESCRIPTION: Shows how to manually construct form fields including various input types like text, textarea, select, multi-select, checkbox, and radio buttons.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/examples.md#2025-04-22_snippet_4\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:channel:form channel=\"products\" return=\"form_template/ENTRY_ID\" entry_id=\"{segment_2}\"}\n    [...content truncated for brevity...]\n    <select name=\"my_field_name[]\">\n        {options:my_field_name}\n            <option value=\"{option_value}\"{selected}>{option_name}</option>\n        {/options:my_field_name}\n    </select>\n    [...content truncated for brevity...]\n{/exp:channel:form}\n```\n\n----------------------------------------\n\nTITLE: Setting Entry Order with \\'orderby\\' Parameter - ExpressionEngine Template Syntax\nDESCRIPTION: Demonstrates how to configure the display order of entries in the {exp:channel:entries} tag by specifying the orderby parameter. Supports various system-provided fields, custom channel fields (using short_name), and site field namespaces. No external dependencies are required. Input is the orderby parameter string; the effect is sorting of entry output accordingly.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_17\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"date\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"comment_total\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"edit_date\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"entry_id\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"expiration_date\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"most_recent_comment\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"random\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"screen_name\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"status\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"title\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"url_title\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"username\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"view_count_one\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"view_count_two\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"view_count_three\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"view_count_four\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"name_of_field\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"screen_name|date\" sort=\"asc|desc\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"default_site:body|second_site:summary\"\n```\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\norderby=\"body\"\n```\n\n----------------------------------------\n\nTITLE: Checking User's Primary Role Name\nDESCRIPTION: Shows how to test against the primary role name of the logged in user.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_16\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if logged_in_primary_role_name *= 'games'}  Shall we play a game?  {/if}\n```\n\n----------------------------------------\n\nTITLE: Calling before_global_variable_update Hook in PHP\nDESCRIPTION: Example of how the before_global_variable_update hook is called. This hook executes before a global variable is updated, allowing modifications to the object which will be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-global-variable.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_global_variable_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: SMTP Crypto Protocol Configuration in PHP\nDESCRIPTION: Sets the cryptographic protocol for SMTP when a secure connection is required.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n$config['email_smtp_crypto'] = 'tls';\n```\n\n----------------------------------------\n\nTITLE: Modifying Margin Attributes in ExpressionEngine Form Fields using PHP\nDESCRIPTION: This set of methods allows for the addition or removal of the 'margin_top' and 'margin_left' classes in form field elements when using ExpressionEngine. These methods help in chaining by returning the Field object itself.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/cp-form/fields.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n### `withOutMarginTop()`\n\nRemoves the `margin_top` from your input\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| Returns | `Form\\Field` | `$this`, the Field object to help in chaining |\n```\n\nLANGUAGE: PHP\nCODE:\n```\n### `withMarginLeft()`\n\nThe class `margin_left` is added to your input element.\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| Returns | `Form\\Field` | `$this`, the Field object to help in chaining |\n```\n\nLANGUAGE: PHP\nCODE:\n```\n### `withOutMarginLeft()`\n\nRemoves the `margin_left` from your input\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| Returns | `Form\\Field` | `$this`, the Field object to help in chaining |\n```\n\n----------------------------------------\n\nTITLE: Calling after_template_bulk_delete Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the after_template_bulk_delete hook is called in ExpressionEngine. This hook is triggered after multiple templates are deleted in bulk, providing an array of IDs that were deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_template_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Setting the Left Button for ActionBar in PHP\nDESCRIPTION: Configures the button displayed on the left side of the `ActionBar`. Requires button text and a URL (CP/URL object or string), with an optional `rel` attribute string. Returns the `ActionBar` instance (`$this`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nwithLeftButton($text, $url, $rel = NULL)\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Settings in index.php\nDESCRIPTION: Configuration settings in index.php for site name, control panel URL, and main site URL in a multi-site setup.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/msm/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$assign_to_config['site_name'] = 'domain2_short_name';\n$assign_to_config['cp_url']    = 'https://domain2.com/admin.php';\n$assign_to_config['site_url']  = 'https://domain2.com';\n```\n\n----------------------------------------\n\nTITLE: Setting Success Return Path in ExpressionEngine\nDESCRIPTION: The `return` parameter specifies the template path (template_group/template) where the user should be redirected after successfully submitting the edit profile form.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_10\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\nreturn=\"member/registration/success\"\n```\n\n----------------------------------------\n\nTITLE: Using Template Variables in ExpressionEngine Templates\nDESCRIPTION: Demonstrates how to implement a custom template variable in an ExpressionEngine template. The example shows a 'copyright' variable being referenced within curly braces.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{copyright}\n```\n\n----------------------------------------\n\nTITLE: Detailed File Info with Variable Pair in ExprEngine\nDESCRIPTION: Using variable pairs to display detailed information like extension and upload date of a file in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/file.md#2025-04-22_snippet_4\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{news_image}\n  This file is a {extension} and was uploaded on {upload_date format=\"%Y %m %d\"}\n  <a href=\"{url}\">View it now</a>\n{/news_image}\n```\n\n----------------------------------------\n\nTITLE: Looping Through Consent Requests - ExpressionEngine Template\nDESCRIPTION: This snippet demonstrates how to use the {exp:consent:requests} tag to iterate over all available Consent Requests, showing their titles, descriptions, and providing links for granting or withdrawing consent. The snippet includes handling for the case where no consent requests are available using the {if no_results} conditional, and outputs request variables such as {consent_title} and {consent_grant_url}. Required: ExpressionEngine with the Consent module enabled. No external dependencies are needed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/consent.md#2025-04-22_snippet_4\n\nLANGUAGE: expressionengine-template\nCODE:\n```\n{exp:consent:requests}\n  {if no_results}\n    <h1>No Consent Requests to Display</h1>\n  {/if}\n\n  <h1>{consent_title}</h1>\n  <div>{consent_request}</div>\n\n  <ul>\n    <li><a href=\"{consent_grant_url}\">Grant</a></li>\n    <li><a href=\"{consent_withdraw_url}\">Withdraw</a></li>\n  </ul>\n{/exp:consent:requests}\n```\n\n----------------------------------------\n\nTITLE: Calling Extension Hooks for Member Creation in PHP\nDESCRIPTION: This snippet shows how to call the 'cp_members_member_create' hook after a new member is created, allowing additional processing before stats recounting. Requires an ExpressionEngine context.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/members.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->extensions->call('cp_members_member_create', $member_id, $data);\nif ($this->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Assigning Name Attribute to Member Search Form - ExpressionEngine Template\nDESCRIPTION: Shows how to specify the name attribute for the search form with form_name. This makes the form accessible by name in scripts or styling. Depends on proper ExpressionEngine template rendering.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_4\n\nLANGUAGE: ExpressionEngine Template Markup\nCODE:\n```\nform_name=\"login\"\n```\n\n----------------------------------------\n\nTITLE: Example of Using the removeElement Method with Conditional Filtering\nDESCRIPTION: Demonstrates how to use the removeElement method to filter a collection based on a conditional test. This example removes elements that don't match a specific value in a field.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/collection.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nforeach($collection as $element) {\n    if($element->field != 'reference_value') {\n        $collection->removeElement($element);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Fieldtype Settings in ExpressionEngine PHP\nDESCRIPTION: Demonstrates how to use the Validation Service to validate fieldtype settings, including custom validation rules and callbacks.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/fieldtypes.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction validate_settings($data)\n{\n    $validator = ee('Validation')->make(array(\n        'allowed_directories' => 'required|allowedDirectories'\n    ));\n\n    $validator->defineRule('allowedDirectories', array($this, '_validate_file_settings'));\n\n    return $validator->validate($settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Template in ExpressionEngine (PHP)\nDESCRIPTION: Specifies the default template to be used when the site is loaded without URL segments. Must be used with template_group setting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_157\n\nLANGUAGE: php\nCODE:\n```\n$config['template'] = 'index';\n```\n\nLANGUAGE: php\nCODE:\n```\n$assign_to_config['template'] = 'index';\n```\n\n----------------------------------------\n\nTITLE: Encoding Email Address for Spam Protection in ExpressionEngine\nDESCRIPTION: This snippet shows how to use ExpressionEngine's global `encode` tag to protect an email address from spam bots. It takes the email from the 'contact_email_address' field, adds a subject line, sets a title for the resulting link, and outputs an encoded mailto link.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/email-address.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n{encode=\"{contact_email_address}?subject=Some%20Subject\" title=\"Send an Email to {first_name}\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Up URL Fields in ExpressionEngine\nDESCRIPTION: This code snippet demonstrates handling URL fields within a `grid_field` in ExpressionEngine by embedding them in anchor tags to create clickable links within templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/grid.md#2025-04-22_snippet_4\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{grid_field}\n  <a href=\"{grid_field:my_url}\">Your Link</a>\n{/grid_field}\n```\n\n----------------------------------------\n\nTITLE: Category Override Syntax for Moblog Emails\nDESCRIPTION: Examples of how to override default category selections in Moblog emails using either braces or angle brackets.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{category}3,News,7{/category}\n\n<category>3,News,7</category>\n```\n\n----------------------------------------\n\nTITLE: Limiting Displayed Shortcuts - ExpressionEngine Template Tag\nDESCRIPTION: This example shows use of the limit parameter to restrict the number of displayed Pro Search shortcuts. It demonstrates how to pass a limit to the {exp:pro_search:shortcuts} tag in an ExpressionEngine template, controlling the maximum shortcuts shown.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_5\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:shortcuts limit=\"5\"}\n```\n\n----------------------------------------\n\nTITLE: Username Variable Output - ExpressionEngine Template Syntax\nDESCRIPTION: Used in registration forms to repopulate the username field after submission failures, improving the user experience. Ensures that the user's previously entered data is preserved in the UI.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_26\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\n{if username}{username}{/if}\n```\n\n----------------------------------------\n\nTITLE: Multi-factor Authentication Configuration in PHP\nDESCRIPTION: Enables or disables Multi-factor authentication options for member roles.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_64\n\nLANGUAGE: php\nCODE:\n```\n$config['enable_mfa'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Setting Return Path (Template) for ExpressionEngine Logout Form\nDESCRIPTION: Example of the `return` parameter for the `{exp:member:logout_form}` tag using the Template_Group/Template syntax. This specifies the template to redirect the user to after they successfully log out.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/logout.md#2025-04-22_snippet_7\n\nLANGUAGE: ee\nCODE:\n```\nreturn=\"site/index\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Redirection Based on URL Segments\nDESCRIPTION: This snippet demonstrates how to use the redirect variable with conditionals to control access to templates based on URL segments. It redirects to another template if a condition is met.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/single-variables.md#2025-04-22_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n{if segment_3 != 'cookies'}   {redirect='bake/cookies'} {/if}\n```\n\n----------------------------------------\n\nTITLE: Defining Add-on Variable Modifiers in PHP\nDESCRIPTION: Specifies the `modifiers` key within the `addon.setup.php` file. This key holds an array of strings, where each string is the name of a variable modifier provided by the add-on for use in ExpressionEngine templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n'modifiers' => array(\n  'modifier_name',\n  'another_modifier_name'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an ExpressionEngine Action via CLI\nDESCRIPTION: This snippet shows how to use the ExpressionEngine CLI to create a new action. It prompts for the action name and the add-on it belongs to.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ php system/ee/eecli.php make:action --install\nWhat is the action name? ExampleAction\nWhat add-on is the action being added to? [amazing_add_on,...]: amazing_add_on\n```\n\n----------------------------------------\n\nTITLE: Setting Member Theme Configuration in ExpressionEngine\nDESCRIPTION: Sets the default member profile theme directory name located in themes/member.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_93\n\nLANGUAGE: php\nCODE:\n```\n$config['member_theme'] = 'default';\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_field_delete Hook in PHP\nDESCRIPTION: Code showing how the after_channel_field_delete hook is called within ExpressionEngine. This hook is triggered after a channel field is deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_field_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Rendering Only Images from RTE Field - ExpressionEngine Template\nDESCRIPTION: Demonstrates how to display only the images from the RTE field content by using the 'images_only' parameter. This strips out all content except for images, helpful for image galleries or previews. Inputs: images_only parameter. Outputs: Images extracted from RTE field.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/rte.md#2025-04-22_snippet_6\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{rte_field images_only=\"yes\"}\n```\n\n----------------------------------------\n\nTITLE: Using params->prep Method in Pro Search\nDESCRIPTION: Modifies a parameter value to ExpressionEngine syntax based on the presence of the parameter name in other parameters like require_all or exclude.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/functions.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$modified_value = $this->params->prep('parameter_name', $value);\n```\n\n----------------------------------------\n\nTITLE: Upload Destinations Configuration in JSON\nDESCRIPTION: Configuration for file upload destinations used by file fields.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/sets.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"upload_destinations\": [\n        {\n            \"name\": \"Blog Images\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic RSS Feed Structure in ExpressionEngine\nDESCRIPTION: The basic structure for creating an RSS feed using the RSS module tag in ExpressionEngine. This tag is used in conjunction with the Channel Entries tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/rss.md#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{exp:rss:feed}\n\n{/exp:rss:feed}\n```\n\n----------------------------------------\n\nTITLE: Conditional Visibility of Content Based on Member Roles in HTML\nDESCRIPTION: This snippet illustrates the use of the `{exp:member:has_role}` tag to conditionally display content if a member belongs to a specified role. It uses the `role_id` parameter to check membership and `member_id` for targeting specific members. Content displays for members belonging to the specified roles, otherwise, alternate content within `{if no_results}...{/if}` is shown.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/member-roles-tags.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n{exp:member:has_role role_id=\"6\"}\n  <p>Editor</p>\n  {if no_results}\n    <p>Not an editor</p>\n  {/if}\n{/exp:member:has_role}\n```\n\n----------------------------------------\n\nTITLE: Disabling Front-end Edit Link via Field Tag Parameter\nDESCRIPTION: Uses the `disable=\"frontedit\"` parameter directly within an ExpressionEngine field tag (e.g., `{page_content}`) to prevent the automatic generation of the front-end edit link specifically for that instance of the field.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/advanced-usage/front-end/frontend.md#2025-04-22_snippet_4\n\nLANGUAGE: ee\nCODE:\n```\n{page_content disable=\"frontedit\"}\n```\n\n----------------------------------------\n\nTITLE: Category Menu with Show Group Parameter\nDESCRIPTION: Example of using the show_group parameter to display categories from specific groups.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/categories.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{category_menu show_group=\"1|3\"}\n```\n\n----------------------------------------\n\nTITLE: Referencing Consent Version ID in Output - ExpressionEngine Template\nDESCRIPTION: This snippet demonstrates how to output the consent version_id (often used to track content changes) in a template. Insert inside a consent loop. No transformation or formatting is applied.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/consent.md#2025-04-22_snippet_12\n\nLANGUAGE: expressionengine-template\nCODE:\n```\n{version_id}\n```\n\n----------------------------------------\n\nTITLE: Using email_module_send_email_end Hook in PHP\nDESCRIPTION: Code showing how the email_module_send_email_end hook is called after emails are sent. This hook allows for additional processing with access to the email subject, message, and recipient lists.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/email.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('email_module_send_email_end', $subject, $message, $approved_tos, $approved_recipients);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Formatting Date Fields in ExpressionEngine Variables - ExpressionEngine Template Tag\nDESCRIPTION: This snippet shows how to use the format parameter with date-related ExpressionEngine tag variables. Appending format=\\\"%Y %m %d\\\" customizes the output date format for fields like join_date, last_activity, last_comment_date, last_entry_date, last_forum_post_date, last_visit, and local_time. The output will be a string representing the date in the specified year-month-day format. Requires that the field being used supports date formatting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/custom-profile-data.md#2025-04-22_snippet_4\n\nLANGUAGE: ExpressionEngine Template Tags\nCODE:\n```\n{join_date format=\"%Y %m %d\"}\n```\n\nLANGUAGE: ExpressionEngine Template Tags\nCODE:\n```\n{last_activity format=\"%Y %m %d\"}\n```\n\nLANGUAGE: ExpressionEngine Template Tags\nCODE:\n```\n{last_comment_date format=\"%Y %m %d\"}\n```\n\nLANGUAGE: ExpressionEngine Template Tags\nCODE:\n```\n{last_entry_date format=\"%Y %m %d\"}\n```\n\nLANGUAGE: ExpressionEngine Template Tags\nCODE:\n```\n{last_forum_post_date format=\"%Y %m %d\"}\n```\n\nLANGUAGE: ExpressionEngine Template Tags\nCODE:\n```\n{last_visit format=\"%Y %m %d\"}\n```\n\nLANGUAGE: ExpressionEngine Template Tags\nCODE:\n```\n{local_time format=\"%Y %m %d\"}\n```\n\n----------------------------------------\n\nTITLE: Checking User's Location\nDESCRIPTION: Shows how to test against the location of the logged in user.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_21\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if logged_in_location *= 'Vulcan'}  Live long and prosper.  {/if}\n```\n\n----------------------------------------\n\nTITLE: Displaying File Variables in ExpressionEngine\nDESCRIPTION: Examples of using Pro Variables module tags to display file variables with image manipulations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/type.md#2025-04-22_snippet_4\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_variables:single var=\"lv_files_var\" manipulation=\"squared\"}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_variables:pair var=\"lv_files_var\"}\n  <img src=\"{lv_files_var:squared}\" alt=\"\">\n{/exp:pro_variables:pair}\n```\n\n----------------------------------------\n\nTITLE: Including JavaScript with Preload and Script Tags in ExpressionEngine\nDESCRIPTION: Example of using the script global variable in HTML to link to JavaScript files. This demonstrates how to include the script both as a preloaded resource and as a standard script.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/scripts.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preload\" as=\"script\" href=\"{script='channel/channel_js'}\" />\n\n<script src=\"{script='channel/channel_js'}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Site Index File in ExpressionEngine Config (PHP)\nDESCRIPTION: Sets the filename of the site index file. By default, this is index.php. Useful when customizing URLs or using a different index filename.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_145\n\nLANGUAGE: PHP\nCODE:\n```\n$config['site_index'] = 'coolpage.php';\n```\n\n----------------------------------------\n\nTITLE: Embedding a Specific Template Example in ExpressionEngine\nDESCRIPTION: Shows a concrete example of embedding a header template from the 'site' template group.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/embedding.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{embed=\"site/header\"}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Action ID by Method in ExpressionEngine PHP\nDESCRIPTION: Example demonstrates how to retrieve an action ID by filtering on a method name and create a URL for that action. This is commonly used when building addon functionality that needs to reference specific actions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/action.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$action_id = ee('Model')\n                ->get('Action')\n                ->filter('method', 'your_addon_method')\n                ->first()\n                ->action_id;\n                \n// Create a URL to that action.\n$action_url = ee()->functions->fetch_site_index(0, 0) . QUERY_MARKER . 'ACT=' . $action_id;\n```\n\n----------------------------------------\n\nTITLE: Using ID Path Variable in ExpressionEngine\nDESCRIPTION: Demonstrates how to use the id_path variable to create URLs with automatic entry ID insertion\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/file.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{id_path='gallery/full_image'}\">my picture</a>\n```\n\n----------------------------------------\n\nTITLE: Channel Entries Cache Configuration - ExpressionEngine\nDESCRIPTION: Example of enabling tag caching with refresh interval and optional cache prefix for shared caching between pages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_2\n\nLANGUAGE: ee\nCODE:\n```\ncache=\"yes\" refresh=\"60\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Agent String\nDESCRIPTION: Example of using the request:user_agent tag to retrieve the client's User Agent string.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/request.md#2025-04-22_snippet_6\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:request:user_agent}\n```\n\n----------------------------------------\n\nTITLE: After Comment Save Hook Call\nDESCRIPTION: Extension hook called after any comment save operation. Changes require manual saving.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/comment.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_comment_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Example URL for Channel Search Results using Base URL\nDESCRIPTION: Illustrates how to construct the URL for channel search results using the `{base_url}` variable. This example URL structure, including Template Group and Template, is intended for the 'Search results' setting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/channels.md#2025-04-22_snippet_3\n\nLANGUAGE: expressionengine\nCODE:\n```\n{base_url}/index.php/channel/comments/\n```\n\n----------------------------------------\n\nTITLE: Channel Form Entry Form Absolute Start Hook\nDESCRIPTION: Hook called at the absolute beginning of channel form processing. Receives the channel form object as parameter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/channel-form.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('channel_form_entry_form_absolute_start', $this);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Sidebar Layout Template\nDESCRIPTION: Reusable layout template for sidebar components with header and content areas.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/layouts.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"sidebar-item\">\n  <header>{layout:header}</header>\n  {layout:contents}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calling before_template_route_delete Hook\nDESCRIPTION: Extension hook called before deleting a template route object.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-route.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_template_route_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling Before Channel Field Group Save Hook in PHP\nDESCRIPTION: Example of how the before_channel_field_group_save hook is called. This generic hook is triggered before any save operation, whether insert or update.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field-group.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_field_group_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Setting the Form ID Attribute in ExpressionEngine\nDESCRIPTION: This snippet demonstrates the 'form_id=' parameter for an ExpressionEngine tag like {exp:member:edit_avatar}. It assigns the HTML id 'login' to the generated <form> tag, allowing for specific targeting via CSS or JavaScript.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-avatar.md#2025-04-22_snippet_3\n\nLANGUAGE: expressionengine\nCODE:\n```\nform_id=\"login\"\n```\n\n----------------------------------------\n\nTITLE: Setting Server Upload Path Example - Markdown\nDESCRIPTION: This Markdown code block provides an example of the server file path to be entered in the Messaging Settings for the Private Message attachment upload directory. Unlike a URL, the path should be the absolute location on the server's filesystem, which must be writable. This example is meant for illustration and should be adapted to match the hosting environment.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/settings/messages.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n    /home/example.com/public\\_html/images/pm\\_attachments/\n```\n\n----------------------------------------\n\nTITLE: Dynamically Generating Image Paths with Toggle Field - HTML with ExpressionEngine Tags\nDESCRIPTION: This code illustrates how to interpolate a Toggle field value directly into an image path using ExpressionEngine template tags within HTML. The resulting src will be \\\"/images/robot_0.png\\\" when off, or \\\"/images/robot_1.png\\\" when on. Requires the presence of a Toggle field named toggle_field in the entry, and expects robot images matching the naming scheme. This approach enables image switching in templates based on field values with no custom scripting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/toggle.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\\\"/images/robot_{toggle_field}.png\\\"> <!-- robot_0.png or robot_1.png -->\n```\n\n----------------------------------------\n\nTITLE: Adding ID Attribute to ExpressionEngine Logout Form\nDESCRIPTION: Example of the `form_id` parameter for the `{exp:member:logout_form}` tag. This parameter allows adding a specific ID attribute to the generated `<form>` tag, useful for JavaScript targeting or specific styling.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/logout.md#2025-04-22_snippet_5\n\nLANGUAGE: ee\nCODE:\n```\nform_id=\"login\"\n```\n\n----------------------------------------\n\nTITLE: Linking Entry to Site Index by URL Title using {path} in ExpressionEngine\nDESCRIPTION: Shows how to use the `SITE_INDEX` constant with the `{path}` variable in ExpressionEngine to create an entry link pointing to the main site index page. The generated URL will use the entry's URL title.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{path='SITE_INDEX'}\">{title}</a>\n```\n\n----------------------------------------\n\nTITLE: Formatting Consent Creation and Response Dates - ExpressionEngine Template\nDESCRIPTION: These snippets illustrate how to format and display the consent creation or response dates using the format parameter inside the consent variable tags. The format string must be valid according to ExpressionEngine documentation. Place these tags within a consent loop to output human-readable date values.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/consent.md#2025-04-22_snippet_7\n\nLANGUAGE: expressionengine-template\nCODE:\n```\n{consent_creation_date format='%Y %m %d'}\n```\n\nLANGUAGE: expressionengine-template\nCODE:\n```\n{consent_response_date format='%Y %m %d'}\n```\n\n----------------------------------------\n\nTITLE: Calling member_edit_preferences Hook in PHP\nDESCRIPTION: This snippet demonstrates how to call the 'member_edit_preferences' extension hook. It allows adding preferences to the user-side preferences form by modifying the preference form template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/member-settings.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$element = ee()->extensions->call('member_edit_preferences', $element);\n```\n\n----------------------------------------\n\nTITLE: Invoking the `category_save` Extension Hook in ExpressionEngine PHP\nDESCRIPTION: This PHP snippet shows the invocation of the `category_save` extension hook within ExpressionEngine using `ee()->extensions->call()`. This hook is called after a new category is created or an existing one is updated in the control panel. It passes the category ID (`$cat_id`) and the category's metadata (`$category_data`) to subscribed extensions, enabling custom actions post-save.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/admin-content.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('category_save', $cat_id, $category_data);\n```\n\n----------------------------------------\n\nTITLE: Formatting Join Date Variable - ExpressionEngine Variable\nDESCRIPTION: Shows how to format the join_date variable with a specific date string using the format parameter. The value can be customized to suit display preferences. Only available inside appropriate tag pairs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_16\n\nLANGUAGE: ExpressionEngine Template Markup\nCODE:\n```\n{join_date format=\"%m/%d/%Y\"}\n```\n\n----------------------------------------\n\nTITLE: Rendering RTE Field Excluding Images - ExpressionEngine Template\nDESCRIPTION: Shows how to render RTE field content, removing only images while retaining other HTML markup, by setting the 'remove_images' parameter to 'yes'. This is useful if you want to display clean markup without image content for any context. Inputs: remove_images parameter. Outputs: HTML minus images.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/rte.md#2025-04-22_snippet_5\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{rte_field remove_images=\"yes\"}\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_save Hook in PHP\nDESCRIPTION: Example of how the before_channel_save hook is called in ExpressionEngine. This hook is triggered before a channel object is inserted or updated, allowing modifications to be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL in ExpressionEngine Configuration (PHP)\nDESCRIPTION: Sets the site's base URL for use in other URL configurations. This value is made available via a {base_url} variable that can be used in other URL configuration fields in the control panel.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$config['base_url'] = 'https://example.com';\n```\n\n----------------------------------------\n\nTITLE: Channel Form Entry Form Tagdata Start Hook\nDESCRIPTION: Hook called at the start of template tagdata processing. Receives the template chunk and channel form object as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/channel-form.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->TMPL->tagdata = ee()->extensions->call('channel_form_entry_form_tagdata_start', ee()->TMPL->tagdata, $this);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Invoking before_role_bulk_delete Extension Hook in PHP\nDESCRIPTION: Called before multiple role objects are deleted in bulk. Accepts an array of primary key IDs of models being deleted. Useful for efficiently handling expensive operations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/role.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_role_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Member Field by ID in PHP\nDESCRIPTION: Demonstrates accessing a custom member field value using the member field ID.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/member-field.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$member_id = 3;  // Example member ID\n$field_column_name = 'm_field_id_1';  // Based on the field ID being 1\n\n$member = ee('Model')->get('Member', $member_id)->first();\necho $member->$field_column_name;\n```\n\n----------------------------------------\n\nTITLE: Setting Week Start Day in ExpressionEngine Config\nDESCRIPTION: This snippet illustrates how to set the starting day of the week in ExpressionEngine. It uses the 'week_start' configuration option to set Monday as the first day of the week.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_175\n\nLANGUAGE: php\nCODE:\n```\n$config['week_start'] = 'monday';\n```\n\n----------------------------------------\n\nTITLE: Including Assets for Custom Fields in ExpressionEngine\nDESCRIPTION: The `include_assets` parameter controls the automatic inclusion of necessary JavaScript and CSS for custom member fields. Set to \"yes\" to include them; the default is \"no\".\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_6\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\ninclude_assets=\"yes\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Error Return Template - ExpressionEngine Template\nDESCRIPTION: Sets the return_error parameter for form validation errors, determining where the user is sent if errors are detected. The parameter should indicate an existing template path.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_10\n\nLANGUAGE: ExpressionEngine Template Markup\nCODE:\n```\nreturn_error=\"template_group/error\"\n```\n\n----------------------------------------\n\nTITLE: Calling comment_entries_tagdata Hook in PHP\nDESCRIPTION: This snippet shows how the comment_entries_tagdata hook is called to modify the tagdata within the comment entries tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/comment.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$tagdata = ee()->extensions->call('comment_entries_tagdata', $tagdata, $row);\nif (ee()->extensions->end_script === TRUE) return $tagdata;\n```\n\n----------------------------------------\n\nTITLE: Captcha Handling in ExpressionEngine Forms\nDESCRIPTION: The snippet shows how to implement captcha checks in ExpressionEngine forms, which include prompts for user input to verify against displayed images. This method is contingent on captcha settings being enabled in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n\n{if captcha}\n  <label for=\"captcha\">Please enter the word you see in the image below:</label>\n  {captcha}\n  <input type=\"text\" name=\"captcha\" value=\"{captcha_word}\" maxlength=\"20\">\n{/if}\n\n```\n\n----------------------------------------\n\nTITLE: Generating Search Path Link for User Entries - ExpressionEngine Variable in HTML\nDESCRIPTION: This snippet shows how to generate an HTML anchor tag using the {search_path} ExpressionEngine variable to provide users with a link to view all entries posted by a specific user. The variable is expected to contain a URL that leads to the filtered list or search results for that user's content.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/custom-profile-data.md#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"{search_path}\">View Entries by User</a>\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers in PHP using ExpressionEngine's Number Formatter\nDESCRIPTION: Shows how to format a number with thousands separators and decimal points using the number_format() method.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/number.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$number = ee('Format')->make('Number, 12345.67890)->number_format();\n// 12,346\n```\n\n----------------------------------------\n\nTITLE: Rendering Consent Form in ExpressionEngine Templates\nDESCRIPTION: This snippet demonstrates how to use the exp:consent:form tag pair to create a form allowing visitors to grant or withdraw consent for specific requests. It loops through consent requests and displays checkboxes for each.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/consent.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{exp:consent:form consent='ee:cookies_functionality'}\n  {consents}\n      <h2>{consent_title}</h2>\n\n      {consent_request}\n\n      Accepted: <input type=\"checkbox\" name=\"{consent_short_name}\" value=\"y\" {if consent_granted}checked{/if}>\n  {/consents}\n\n  <input type=\"submit\" name=\"submit\" value=\"Submit\">\n\n{/exp:consent:form}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Full-Featured Calendar with Entry Details\nDESCRIPTION: This code snippet shows how to create a detailed calendar that not only links to days with entries but also displays the entry titles and authors directly in the calendar cells.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/calendar.md#2025-04-22_snippet_1\n\nLANGUAGE: ee\nCODE:\n```\n{exp:channel:calendar switch=\"calendarToday|calendarCell\" channel=\"default_site\"}\n<table class=\"calendarBG\" border=\"0\" cellpadding=\"6\" cellspacing=\"1\" summary=\"My Calendar\" width=\"90%\">\n    <tr class=\"calendarHeader\">\n        <th>\n            <div class=\"calendarMonthLinks\">\n                <a href=\"{previous_path='channel/cal'}\">&lt;&lt;</a>\n            </div>\n        </th>\n        <th colspan=\"5\">{date format=\"%F %Y\"}</th>\n        <th>\n            <div class=\"calendarMonthLinks\">\n                <a class=\"calendarMonthLinks\" href=\"{next_path='channel/cal'}\">&gt;&gt;</a>\n            </div>\n        </th>\n    </tr>\n    <tr>\n    {calendar_heading}\n        <td class=\"calendarDayHeading\">{lang:weekday_abrev}</td>\n    {/calendar_heading}\n    </tr>\n    {calendar_rows}\n        {row_start}<tr>{/row_start}\n        {if entries}\n            <td class='{switch}' align='center'>\n                <a href=\"{day_path='channel/index'}\">{day_number}</a>\n                {entries}\n                <div>\n                    <a href=\"{title_permalink='channel/index'}\">{title}</a>\n                    <a href=\"{profile_path='member/profile'}\">{author}</a>\n                </div>\n                {/entries}\n            </td>\n        {/if}\n        {if not_entries}\n            <td class='{switch}' align='center'>{day_number}</td>\n        {/if}\n        {if blank}\n            <td class='calendarBlank'>{day_number}</td>\n        {/if}\n        {row_end}</tr>{/row_end}\n    {/calendar_rows}\n</table>\n{/exp:channel:calendar}\n```\n\n----------------------------------------\n\nTITLE: Channel Form Entry Form Tagdata End Hook\nDESCRIPTION: Hook called after template tagdata has been fully processed. Receives the processed tagdata and channel form object as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/channel-form.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$return = ee()->extensions->call('channel_form_entry_form_tagdata_end', $return, $this);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Using File Grid Fields in Parent Entries\nDESCRIPTION: How to manage file grid fields in parent entries within ExpressionEngine, showcasing access to specific file details like extension and upload dates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_21\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{parents field=\\\"relationship_field\\\"}\\n   {parents:my_file_grid}\\n     {parents:my_file_grid:my_image}\\n         Extension: {extension}\\n         Upload date: {upload_date format=\\\"%Y %m %d\\\"}\\n         URL: {url}\\n         Custom med thumbnail url: {url:med}\\n     {/parents:my_file_grid:my_image}\\n   {/parents:my_file_grid}\\n {/parents}\n```\n\n----------------------------------------\n\nTITLE: Setting Data for GridInput in PHP\nDESCRIPTION: Populates the GridInput with existing data, including form inputs and dropdowns.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/table.md#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$data = array();\nforeach ($sizes as $size)\n{\n  $data[] = array(\n    'attrs' => array('row_id' => $size['id']),\n    'columns' => array(\n      form_input('short_name', $size['short_name']),\n      form_dropdown(\n        'resize_type',\n        array(\n          'constrain' => lang('image_manip_type_opt_constrain'),\n          'crop' => lang('image_manip_type_opt_crop'),\n        ),\n        $size['resize_type']\n      ),\n      form_input('width', $size['width']),\n      form_input('height', $size['height'])\n    )\n  );\n}\n\n$grid->setData($data);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Tag Parameters\nDESCRIPTION: Method for setting and handling default values for tag parameters\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/security.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$defaults = array(\n    'type'    => '',\n    'show_foo'  => FALSE,\n    'limit'   => 5\n);\n\nforeach ($defaults as $key => $val)\n{\n    $$key = ($$key = ee()->TMPL->fetch_param($key)) ? $$key : $val;\n}\n```\n\n----------------------------------------\n\nTITLE: Calling after_category_update Hook in PHP\nDESCRIPTION: This snippet illustrates the call to the after_category_update hook. It passes the current Category model object, its values, and an array of modified values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_category_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Granting Consent in ExpressionEngine\nDESCRIPTION: Shows how to grant consent using the Consent service with the add-on's prefix and consent request name.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nee('Consent')->grant('my_addon:do_stuff');\n```\n\n----------------------------------------\n\nTITLE: Sticky Override Syntax for Moblog Emails\nDESCRIPTION: Examples of how to override the default sticky setting in Moblog emails using either braces or angle brackets.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n{sticky}yes{/sticky}\n\n<sticky>no</sticky>\n```\n\n----------------------------------------\n\nTITLE: Next/Previous Pagination in ExpressionEngine Comments\nDESCRIPTION: Example demonstrating next/previous style pagination implementation in a comments tag\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/pagination.md#2025-04-22_snippet_1\n\nLANGUAGE: ee\nCODE:\n```\n{exp:comment:entries channel=\"news\" sort=\"desc\" limit=\"1\" paginate=\"bottom\"}\n    {comment}\n    <p>By {name} on {comment_date format=\"%Y %m %d\"}</p>\n\n    {paginate}\n        {if previous_page}\n            <a href=\"{auto_path}\">Previous Page</a> &nbsp;\n        {/if}\n        {if next_page}\n            <a href=\"{auto_path}\">Next Page</a>\n        {/if}\n    {/paginate}\n{/exp:comment:entries}\n```\n\n----------------------------------------\n\nTITLE: Outputting Grid Variable with Custom Markup in ExpressionEngine\nDESCRIPTION: Illustrates how to output a Grid variable type using the pro_variables:pair tag, including custom HTML markup for each row.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/type.md#2025-04-22_snippet_2\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_variables:pair var=\"my_var\"}\n\t<figure>\n\t\t<img src=\"{my_var:image}\">\n\t\t<figcaption>Photo by {my_var:credit}</figcaption>\n\t</figure>\n\t{my_var:description}\n{/exp:pro_variables:pair}\n```\n\n----------------------------------------\n\nTITLE: Assigning a Channel Field Group to a Channel in PHP\nDESCRIPTION: Shows how to assign a Channel Field Group to a specific Channel using the relationship between the two models.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/channel-field-group.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Get the Field Group object.\n$group = ee('Model')->get('ChannelFieldGroup', 2)->first();\n\n// Get the Channel object for each channel and assign using the Relationship.\n$group->Channels = ee('Model')->get('Channel', array(2))->all();\n\n// Validate and Save.\n$result = $field->validate();\n\nif ($result->isValid())\n{\n  $field->save();\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Showing Comment Edit UI in ExpressionEngine\nDESCRIPTION: Uses the `{if editable}` conditional tag to check if the currently logged-in member has permission to edit the specific comment being displayed. This is typically used to show an 'Edit' link or form for comment editing on the front-end.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_35\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{if editable} Show Edit Form {/if}\n```\n\n----------------------------------------\n\nTITLE: Limiting Shortcuts by Name - ExpressionEngine Template Tag\nDESCRIPTION: This demonstrates limiting displayed Pro Search shortcuts by their names using the shortcut_name parameter. It filters output so that only specified shortcuts are shown within the dynamic template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_9\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:shortcuts shortcut_name=\"name\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Edit Avatar Tag Usage in ExpressionEngine\nDESCRIPTION: This snippet shows the basic structure of the {exp:member:edit_avatar} tag pair in ExpressionEngine Template Language. It creates a form enabling logged-in users to manage their avatar.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-avatar.md#2025-04-22_snippet_0\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:member:edit_avatar}\n\n{/exp:member:edit_avatar}\n```\n\n----------------------------------------\n\nTITLE: Calling the relationships_post_save Hook in PHP\nDESCRIPTION: This snippet shows the invocation of the relationships_post_save hook. It allows developers to modify or add to the relationships array before saving.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/relationships.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$ships = ee()->extensions->call('relationships_post_save', $ships, $entry_id, $field_id);\n```\n\n----------------------------------------\n\nTITLE: Using the backspace Parameter with Members Field Tag Pair in ExpressionEngine\nDESCRIPTION: This example demonstrates the `backspace` parameter for the Members fieldtype tag pair in ExpressionEngine. It removes the specified number of characters (7 in this case) from the end of the content generated within the last iteration of the loop, similar to the Channel Entries tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/member.md#2025-04-22_snippet_1\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\nbackspace=\"7\"\n```\n\n----------------------------------------\n\nTITLE: Receiving Namespaced Window Broadcast Events with jQuery (JavaScript)\nDESCRIPTION: This snippet shows how to listen specifically for namespaced 'broadcast' events ('.greatAddon') using jQuery. The callback function receives the data payload sent with the event (in this case, an object accessible via the 'msg' parameter). Using namespaces ensures the listener only reacts to relevant broadcast messages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/events.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n$(window).on('broadcast.greatAddon', function(msg) {\n  console.log(msg.maxVolume);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Form Attributes to Save Form - ExpressionEngine Template Tag\nDESCRIPTION: Shows how to add custom HTML attributes, like id and class, to the Pro Search Save form using the form_id and form_class parameters. Helps to integrate with CSS or JavaScript in ExpressionEngine template code.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_11\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:save form_id=\"search\" form_class=\"searchform\"}\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_layout_insert Hook in PHP\nDESCRIPTION: Example of how the after_channel_layout_insert hook is called after inserting a new channel layout. It passes the current ChannelLayout object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-layout.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_layout_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Explicitly Named MySQL Table Keys - SQL\nDESCRIPTION: Illustrates the correct way to name MySQL primary keys for single and multiple columns, using explicit and descriptive identifiers. This prevents collisions and clarifies intent in database migrations or updates. No dependencies or special parameters are needed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/general.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nPRIMARY KEY `field_name` (`field_name`)\nPRIMARY KEY `field_one_field_two` (`field_one`, `field_two`)\n```\n\n----------------------------------------\n\nTITLE: Filtering Entries by ID Range (Start) in ExpressionEngine\nDESCRIPTION: The `entry_id_from` parameter specifies the starting entry ID for a range display. It must be used in conjunction with the `entry_id_to` parameter. This example would start displaying entries from ID 20 onwards, up to the ID specified by `entry_id_to`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_10\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\nentry_id_from=\"20\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring a Text Field in ExpressionEngine CP/Form using PHP\nDESCRIPTION: This snippet demonstrates the basic workflow for adding a form field using the ExpressionEngine CP/Form service. It retrieves the Form service instance, gets a specific Field Group and Field Set, and then adds a 'text' input field named 'first_name' to the Field Set. Method chaining is used to set the field's placeholder text and mark it as required. Requires the ExpressionEngine environment and the `ee('CP/Form')` service.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/cp-form/fields.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$form = ee('CP/Form');\n$field_group = $form->getGroup('General Settings');\n$field_set = $field_group->getFieldSet('First Name');\n\n$field = $field_set->getField('first_name', 'text')\n    ->setPlaceholder('First Name')\n    ->setRequired(true);\n```\n\n----------------------------------------\n\nTITLE: Backspace Parameter Example - ExpressionEngine\nDESCRIPTION: Shows how to use the backspace parameter to remove characters from the last iteration of a Channel Entries tag pair.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_1\n\nLANGUAGE: ee\nCODE:\n```\n{exp:channel:entries backspace=\"7\"}\n    {title}<br />\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Formatting and Displaying Entry Date in ExpressionEngine\nDESCRIPTION: Shows the `{entry_date}` variable used to display the submission date of an entry within loops like `{entry_titles}`. The `format` parameter allows customization using standard date formatting codes (e.g., `%Y %m %d` for year, month, day).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n{entry_date format=\"%Y %m %d\"}\n```\n\n----------------------------------------\n\nTITLE: Comment Container with Anchor and Link - HTML with EE Variables\nDESCRIPTION: This example displays how each comment can be given a unique HTML ID using {comment_id}, allowing direct anchoring. It also includes a link to the comments page, using the {comment_id} in the anchor reference for smooth in-page navigation. Intended for use within a comment entries loop.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_20\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"comment-{comment_id}\">\n  {comment}\n  <p><a href=\"{path='news/comments'}#comment-{comment_id}\">link</a></p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calling before_status_insert Extension Hook in PHP\nDESCRIPTION: Example of how the before_status_insert hook is called within the Status model. This hook fires before a status object is inserted, allowing modifications to be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/status.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_status_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling insert_comment_preferences_sql Hook in PHP\nDESCRIPTION: This snippet demonstrates how the insert_comment_preferences_sql hook is called to modify the SQL query for retrieving comment preferences.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/comment.md#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$sql = ee()->extensions->call('insert_comment_preferences_sql', $sql);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Displaying Emoji List in HTML\nDESCRIPTION: This snippet demonstrates how to use the {exp:emoji:emoji_list} tag to output a list of all cataloged emoji in an HTML definition list.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/emoji.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<dl>\n  {exp:emoji:emoji_list}\n    <dt>{short_name}</dt>\n    <dd>{html_entity}</dd>\n  {/exp:emoji:emoji_list}\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Placing Email Body Text in Moblog Custom Fields using Template Variables in Markdown\nDESCRIPTION: This demonstrates injecting the main email text into a specific Moblog custom field using the {field} tag. The 'extended' field name and 'xhtml' format are specified, with {text} containing the email/entry body. Only textarea-type fields can be targeted in this way.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n{field name=\"extended\" format=\"xhtml\"} {text} {/field}\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Information in HTML\nDESCRIPTION: This HTML snippet creates a grid layout to display contributor information, including their avatar, name, and GitHub username. It uses Tailwind CSS classes for styling.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_23\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/422821?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">TomJaeger</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=TomJaeger\" target=\"_BLANK\">@TomJaeger</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/11818941?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Matt Johnson</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=matthewjohns0n\" target=\"_BLANK\">@matthewjohns0n</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/23382425?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yulya Lebed</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=Yulyaswan\" target=\"_BLANK\">@Yulyaswan</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Entry Row Data Hook Implementation\nDESCRIPTION: Shows how the channel_entries_row hook is called to modify entry data before parsing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/channel.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$row = $this->extensions->call('channel_entries_row', $this, $row);\nif ($this->extensions->end_script === TRUE) return $tagdata;\n```\n\n----------------------------------------\n\nTITLE: Label Tag Usage in ExpressionEngine\nDESCRIPTION: Shows how to use the Label tag to display variable labels\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/tags.md#2025-04-22_snippet_4\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_variables:label var=\"my_var\"}\n```\n\n----------------------------------------\n\nTITLE: Template Embedding in ExpressionEngine Multiple Sites\nDESCRIPTION: Shows how to embed a template from another site using the site short name prefix.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/msm/code.md#2025-04-22_snippet_0\n\nLANGUAGE: expressionengine\nCODE:\n```\n{embed=\"site_short_name:template_group/template\"}\n```\n\n----------------------------------------\n\nTITLE: Displaying Comment Subscription/Unsubscription Links in ExpressionEngine\nDESCRIPTION: This snippet uses the `{exp:comment:notification_links}` tag pair in ExpressionEngine to display a link allowing logged-in members to either subscribe or unsubscribe from comment notifications for the current entry. It uses the `{if subscribed}` conditional and the `{subscribe_link}` and `{unsubscribe_link}` variables. This tag must be used on a single entry page and will return nothing for guests. If the entry context isn't clear from the URL, the `entry_id` or `url_title` parameter is required.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/subscriptions.md#2025-04-22_snippet_0\n\nLANGUAGE: ee\nCODE:\n```\n{exp:comment:notification_links}\n  {if subscribed}\n    <h5><a href=\"{unsubscribe_link}\">Unsubscribe to comment notification for this entry.</a></h5>\n  {if:else}\n    <h5><a href=\"{subscribe_link}\">Subscribe to comment notification for this entry.</a></h5>\n  {/if}\n{/exp:comment:notification_links}\n```\n\n----------------------------------------\n\nTITLE: Generating a Search URL with Keywords - ExpressionEngine Template Tag\nDESCRIPTION: This snippet renders a search URL containing the specified keywords using the {exp:pro_search:url} tag in ExpressionEngine. Useful for creating bookmarkable or shareable links with preset search parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_13\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:url keywords=\"foo\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Name Attribute to ExpressionEngine Logout Form\nDESCRIPTION: Example of the `form_name` parameter for the `{exp:member:logout_form}` tag. This parameter allows adding a specific name attribute to the generated `<form>` tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/logout.md#2025-04-22_snippet_6\n\nLANGUAGE: ee\nCODE:\n```\nform_name=\"login\"\n```\n\n----------------------------------------\n\nTITLE: Member Name Search Field - ExpressionEngine Search\nDESCRIPTION: Optional member name search field implementation for searching by screen name.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/search/simple.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"member_name\">Member Name:</label><br>\n<input type=\"text\" name=\"member_name\" id=\"member_name\" maxlength=\"100\" size=\"40\">\n```\n\n----------------------------------------\n\nTITLE: Placing Email Text Content into Custom Fields in Moblog Templates in Markdown\nDESCRIPTION: Demonstrates using the {field} tag in Moblog templates to specify where the main text content from an email should be stored. The 'name' parameter selects the field short name (must be 'textarea' type), and 'format' controls content formatting. The {text} variable within the tag contains the email body, which is assigned to the selected field.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n{field name=\"extended\" format=\"xhtml\"} {text} {/field}\n```\n\n----------------------------------------\n\nTITLE: Offsetting Shortcuts Output - ExpressionEngine Template Tag\nDESCRIPTION: This snippet shows how to use the offset parameter with the {exp:pro_search:shortcuts} tag to skip a specified number of shortcuts in the output. Useful when paginating or customizing which results start the listing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_6\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:shortcuts offset=\"3\"}\n```\n\n----------------------------------------\n\nTITLE: Calling before_category_insert Hook in PHP\nDESCRIPTION: This snippet demonstrates how the before_category_insert hook is called in ExpressionEngine. It passes the current Category model object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_category_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Prefixed Service via ee() in PHP\nDESCRIPTION: Shows the syntax for retrieving an add-on-specific service (`ServiceName`) from the global dependency container using the `ee()` helper. The service name is prefixed with the add-on's name (`addonname:`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/architecture.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nee('addonname:ServiceName')\n```\n\n----------------------------------------\n\nTITLE: Generating RSS 2.0 Feed with ExpressionEngine\nDESCRIPTION: This snippet creates an RSS 2.0 feed using ExpressionEngine tags. It sets up the XML structure, includes channel metadata, and generates RSS items from channel entries. The feed uses various XML namespaces and includes dynamic content from the channel.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/_downloads/sample-rss.txt#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{preload_replace:master_channel_name=\"default_site\"}\n{exp:rss:feed channel=\"{master_channel_name}\"}\n\n<?xml version=\"1.0\" encoding=\"{encoding}\"?>\n<rss version=\"2.0\"\n    xmlns:dc=\"https://purl.org/dc/elements/1.1/\"\n    xmlns:sy=\"https://purl.org/rss/1.0/modules/syndication/\"\n    xmlns:admin=\"http://webns.net/mvcb/\"\n    xmlns:rdf=\"https://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n    xmlns:content=\"https://purl.org/rss/1.0/modules/content/\">\n\n    <channel>\n    \n    <title><![CDATA[{channel_name}]]></title>\n    <link>{channel_url}</link>\n    <description>{channel_description}</description>\n    <dc:language>{channel_language}</dc:language>\n    <dc:creator>{email}</dc:creator>\n    <dc:rights>Copyright {gmt_date format=\"%Y\"}</dc:rights>\n    <dc:date>{gmt_date format=\"%Y-%m-%dT%H:%i:%s%Q\"}</dc:date>\n    <admin:generatorAgent rdf:resource=\"https://expressionengine.com/\" />\n    \n{exp:channel:entries channel=\"{master_channel_name}\" limit=\"10\" dynamic_start=\"on\" disable=\"member_data|pagination\"}\n    <item>\n      <title><![CDATA[{title}]]></title>\n      <link>{title_permalink='site/index'}</link>\n      <guid>{title_permalink='site/index'}#When:{gmt_entry_date format=\"%H:%i:%sZ\"}</guid>\n      <description><![CDATA[{summary}{body}]]></description>\n      <dc:subject><![CDATA[{categories backspace=\"1\"}{category_name}, {/categories}]]></dc:subject>\n      <dc:date>{gmt_entry_date format=\"%Y-%m-%dT%H:%i:%s%Q\"}</dc:date>\n    </item>\n{/exp:channel:entries}\n    \n    </channel>\n</rss>\n\n{/exp:rss:feed}\n```\n\n----------------------------------------\n\nTITLE: Calling After Template Snippet Save Hook in PHP\nDESCRIPTION: This snippet demonstrates the call to the 'after_template_snippet_save' hook in ExpressionEngine. It passes the current TemplateSnippet model object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-snippet.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_template_snippet_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Using Namespaced Variables in ExpressionEngine Templates\nDESCRIPTION: This code snippet demonstrates how to use namespaced variables within relationship tag pairs in ExpressionEngine, ensuring variables are correctly associated with specific entries.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_6\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{exp:channel:entries channel=\\\"childChannel\\\"}\\n\\n  {parents}\\n\\n    {if parents:count == \\\"1\\\"}\\n      <h3>Parents</h3>\\n    {/if}\\n\\n    {parents:title} - {parents:field1} - {parents:field2}\\n\\n    {if parents:no_results}\\n      No parent entries\\n    {/if}\\n\\n    {parents:switch=\\\"one|two\\\"}\\n\\n  {/parents}\\n\\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Setting gzip_output in ExpressionEngine\nDESCRIPTION: Configuration to enable serving compressed front-end pages for faster load times, assuming browser support and PHP's zlib extension is loaded.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_81\n\nLANGUAGE: php\nCODE:\n```\n$config['gzip_output'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Using params->get_prefixed Method in Pro Search\nDESCRIPTION: Retrieves all parameters where the name starts with the given prefix, with an option to strip the prefix from parameter names.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/functions.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$prefixed_params = $this->params->get_prefixed('prefix_', TRUE);\n```\n\n----------------------------------------\n\nTITLE: Before Comment Insert Hook Call\nDESCRIPTION: Extension hook called before a comment is inserted into the database. Allows modifying the comment object before saving.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/comment.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_comment_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Using email_module_tellafriend_override Hook in PHP\nDESCRIPTION: Code showing how the email_module_tellafriend_override hook is called to extend Tell-A-Friend functionality. This hook allows developers to customize the Tell-A-Friend feature for content types other than channel entries.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/email.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$tagdata = ee()->extensions->call('email_module_tellafriend_override', $qstring, $this);\nif (ee()->extensions->end_script === TRUE) return $tagdata;\n```\n\n----------------------------------------\n\nTITLE: Categories Template Structure in ExpressionEngine\nDESCRIPTION: Shows how to implement category loops with backspace parameter and custom category fields\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/file.md#2025-04-22_snippet_4\n\nLANGUAGE: expressionengine\nCODE:\n```\n{categories}\n  {category_image} <a href=\"{path='gallery/index'}\">{category_name}</a>\n{/categories}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{categories backspace=\"7\"}\n    {category_name}<br /> \n{/categories}\n```\n\n----------------------------------------\n\nTITLE: Tracking Views for Channel Entries in ExpressionEngine\nDESCRIPTION: Demonstrates how to enable view tracking for channel entries in ExpressionEngine, allowing up to four different instances of the view counter on different pages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_34\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\ntrack_views=\"one\" track_views=\"two\" track_views=\"three\" track_views=\"four\"\n```\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{view_count_one}{view_count_two}{view_count_three}{view_count_four}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing File Usage Records via ExpressionEngine CLI - PHP\nDESCRIPTION: This snippet demonstrates how to manually run the sync:file-usage command using the ExpressionEngine Command Line Interface (EE CLI). The command updates legacy file format data to the latest format and refreshes file usage tracking in the database. Prerequisites include access to an installation of ExpressionEngine and the eecli.php tool. Running this command requires PHP on the command line, and the expected output is an updated state for file usage records within the system database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/sync-file-usage.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`php eecli.php sync:file-usage`\n```\n\n----------------------------------------\n\nTITLE: Calling template_fetch_template Hook in PHP\nDESCRIPTION: Demonstrates how to call the template_fetch_template hook, which allows access to template data prior to template parsing. The hook takes an array of data for the current template as a parameter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/template.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('template_fetch_template', $row);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Name Usage in ExpressionEngine Templates\nDESCRIPTION: Shows how to reference a variable in ExpressionEngine templates using the lv_ prefix.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/manage.md#2025-04-22_snippet_0\n\nLANGUAGE: expressionengine\nCODE:\n```\nlv_my_special_var\n```\n\n----------------------------------------\n\nTITLE: Calling After Channel Field Group Delete Hook in PHP\nDESCRIPTION: Example of how the after_channel_field_group_delete hook is called. This hook is triggered after a ChannelFieldGroup has been deleted from the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field-group.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_field_group_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Example: Generating a Model for an ExpressionEngine Add-on (Bash)\nDESCRIPTION: Demonstrates how to use the `make:model` command via the ExpressionEngine CLI (`eecli.php`). This specific example generates a model named 'MyAwesomeModel' within the 'my_existing_addon' add-on folder. The command requires PHP to execute the CLI script.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/make-model.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php make:model MyAwesomeModel --addon=my_existing_addon\n```\n\n----------------------------------------\n\nTITLE: Calling Wiki Article End Hook in PHP\nDESCRIPTION: Extension hook called at the end of article display to allow modification of the final article output.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/wiki.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->return_data = ee()->extensions->universal_call('wiki_article_end', $this, $query);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Member Fields - ExpressionEngine Template Tags\nDESCRIPTION: This snippet outlines the usage of custom member fields in templates using their respective short names, such as {age} and {gender}. These fields are defined by the site administrator in ExpressionEngine and their values are accessible in templates using curly braces. No additional dependencies are required except for the member fields being properly configured in the ExpressionEngine admin panel.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/custom-profile-data.md#2025-04-22_snippet_7\n\nLANGUAGE: ExpressionEngine Template Tags\nCODE:\n```\n{age}\n{gender}\n{zodiac}\netc..\n```\n\n----------------------------------------\n\nTITLE: Toggling a Parameter in Search Query URLs - ExpressionEngine Template Tag\nDESCRIPTION: Illustrates dynamically toggling a query parameter’s value (such as featured) in the generated search URL using the toggle:parameter syntax with the {exp:pro_search:url} tag. Enables convenient query manipulation for alternative search URLs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_17\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:url toggle:featured=\"yes\"}\n```\n\n----------------------------------------\n\nTITLE: Branching Conditionals in ExpressionEngine\nDESCRIPTION: Example showing how to use if/elseif/else branching logic in ExpressionEngine templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_1\n\nLANGUAGE: ee\nCODE:\n```\n{if age == 30}\n  You are 30!\n{if:elseif username == 'Bob'}\n  You are Bob!\n{if:else}\n  You're not 30 or Bob. That's all we know.\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Assigning a CSS Class to the ExpressionEngine Login Form\nDESCRIPTION: Shows how to use the `form_class=` parameter to add a CSS class attribute to the generated `<form>` tag, allowing for specific styling of the login form.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/login.md#2025-04-22_snippet_2\n\nLANGUAGE: ee\nCODE:\n```\nform_class=\"login\"\n```\n\n----------------------------------------\n\nTITLE: Linking Category to Site Index using {path} in ExpressionEngine\nDESCRIPTION: Shows how to use the `SITE_INDEX` constant with the `{path}` variable in ExpressionEngine to create a link pointing to the main site index page (homepage). This is useful when categories are displayed on the homepage, resulting in a cleaner URL.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{path='SITE_INDEX'}\">{category_name}</a>\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Error Handling in Member Registration Form - ExpressionEngine Template\nDESCRIPTION: Shows setting the error_handling parameter to 'inline', which enables error messages to appear in the form using {error:field_name} tags. Requires ExpressionEngine form processing and template error tag support. Useful for user-friendly inline validation feedback.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_1\n\nLANGUAGE: ExpressionEngine Template Markup\nCODE:\n```\nerror_handling=\"inline\"\n```\n\n----------------------------------------\n\nTITLE: PHP Method Signature - getHTMLButtonsForSite\nDESCRIPTION: Method to get HTML buttons for a specific site ID, returning a collection of HTMLButton entities.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/member.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ngetHTMLButtonsForSite($site_id)\nParameters: Int $site_id\nReturns: Collection\n```\n\n----------------------------------------\n\nTITLE: Configuring 404 Error Page in ExpressionEngine Index File (PHP)\nDESCRIPTION: Sets which template should be displayed when a visitor tries to access an invalid URL. This version is for use in the site index file.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_144\n\nLANGUAGE: PHP\nCODE:\n```\n$assign_to_config['site_404'] = 'site/notfound';\n```\n\n----------------------------------------\n\nTITLE: Site Index Path Variable\nDESCRIPTION: Shows how to use the site_index path variable to link to the main site index.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/path.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n{path='site_index'}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Role Group by ID in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a Role Group by its ID using the ExpressionEngine Model service.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/role-group.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$role_id = 6;\n$roleGroup = ee('Model')->get('RoleGroup', $role_id)->first();\n```\n\n----------------------------------------\n\nTITLE: After Template Group Insert Hook Call\nDESCRIPTION: Extension hook called after inserting a template group. Changes to the object will not be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-group.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_template_group_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Member Search Keywords Input\nDESCRIPTION: HTML input field for search keywords with associated label.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/search.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"search_keywords_1\">Search</label>\n<input type=\"text\" name=\"search_keywords_1\" />\n```\n\n----------------------------------------\n\nTITLE: Linking Entry to Site Index by ID using {entry_id_path} in ExpressionEngine\nDESCRIPTION: Shows how to use the `SITE_INDEX` constant with the `{entry_id_path}` variable in ExpressionEngine to create an entry link pointing to the main site index page. The generated URL will include the entry's ID.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{entry_id_path='SITE_INDEX'}\">{title}</a>\n```\n\n----------------------------------------\n\nTITLE: Using Relationship Fields in Relationship Tags\nDESCRIPTION: Demonstrates nesting relationship fields within relationship tags in ExpressionEngine, displaying related entries and their metadata.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_14\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{relationship_field}\\n  <h3>Related entry's title: {relationship_field:title}</h3>\\n\\n  {relationship_field:my_relationship status=\\\"open\\\"}\\n      {if relationship_field:my_relationship:count == 1}\\n          <h3>Relationships ({relationship_field:my_relationship:total_results})</h3>\\n      {/if}\\n\\n      <h3>Related entry's related entry's title: {relationship_field:my_relationship:title}</h3>\\n\\n      Related entry's file field, med custom image size: {relationship_field:my_relationship:my_file:med wrap=\\\"image\\\"}\\n\\n  {/relationship_field:my_relationship}\\n{/relationship_field}\n```\n\n----------------------------------------\n\nTITLE: Using Command State Check in JavaScript\nDESCRIPTION: Example of using the is() method to check the current state of a text selection formatting attribute\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/wysihat-api.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nthis.is('bold')\n```\n\n----------------------------------------\n\nTITLE: HTML File Input for Avatar Upload\nDESCRIPTION: This HTML snippet defines a label and a file input field. The input field has the name 'userfile', which is the expected name for the ExpressionEngine {exp:member:edit_avatar} tag to process the uploaded avatar image.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-avatar.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"email\">Select file to upload as avatar</label>\n<input type=\"file\" name=\"userfile\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Add-on Description in PHP\nDESCRIPTION: Specifies the `description` key within the `addon.setup.php` file. This key provides a brief summary of the add-on's functionality. It is a required field displayed in the ExpressionEngine interface.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'description' => 'Displays a friendly \"Hello world!\" message.'\n```\n\n----------------------------------------\n\nTITLE: Calling the Password Reset Hook in PHP\nDESCRIPTION: This snippet shows the invocation related to the 'cp_member_reset_password' hook (although the code calls 'cp_member_process_reset_password'). It allows developers to perform additional actions after a user resets their password via the control panel. The hook does not receive any parameters and returns void. Execution can be halted if the hook sets the 'end_script' property to TRUE.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/login.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->extensions->call('cp_member_process_reset_password');\nif ($this->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Excluding Guests from Comment Subscriber List in ExpressionEngine\nDESCRIPTION: This snippet demonstrates using the `exclude_guests=\"yes\"` parameter within the `{exp:comment:subscriber_list}` tag in ExpressionEngine. Setting this parameter prevents guest (non-member) subscribers from being included in the list output and the calculated totals.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/subscriptions.md#2025-04-22_snippet_3\n\nLANGUAGE: ee\nCODE:\n```\nexclude_guests=\"yes\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Information in HTML\nDESCRIPTION: This HTML snippet creates a grid layout to display contributor information, including their avatar, name, and GitHub username. It uses Tailwind CSS classes for styling.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_22\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/839534?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Martin D</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=martinduparc\" target=\"_BLANK\">@martinduparc</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/11818941?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Matt Johnson</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=matthewjohns0n\" target=\"_BLANK\">@matthewjohns0n</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/23382425?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yulya Lebed</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=Yulyaswan\" target=\"_BLANK\">@Yulyaswan</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Grid in Markdown\nDESCRIPTION: This snippet defines an HTML structure for displaying a grid of contributor profiles, including avatars, names, and GitHub links. It uses Markdown syntax with embedded HTML for styling and layout.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/5134048?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Asad Munir</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=asadmunir\" target=\"_BLANK\">@asadmunir</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/563996?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Bryan Nielsen</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bryannielsen\" target=\"_BLANK\">@bryannielsen</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/23382425?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yulyaswan</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=Yulyaswan\" target=\"_BLANK\">@Yulyaswan</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using fields->grid_col_id Method in Pro Search\nDESCRIPTION: Retrieves the Grid column ID for a given Grid column name, returning the field ID or FALSE if no valid ID is found.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/functions.md#2025-04-22_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n$grid_col_id = $this->fields->grid_col_id($field_id, 'column_name');\n```\n\n----------------------------------------\n\nTITLE: Member Search URL Parameter\nDESCRIPTION: Example of setting the memberlist_url parameter to specify the search results page.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/search.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nmemberlist_url=\"member/memberlist\"\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_field_delete Hook in PHP\nDESCRIPTION: Code showing how the before_channel_field_delete hook is called within ExpressionEngine. This hook is triggered before a channel field is deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_field_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: File Path Parsing Query\nDESCRIPTION: Query demonstrating how to parse file paths from grid fields with the parse_files parameter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/query.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{exp:query sql=\"SELECT col_id_1 AS src, col_id_5 AS description\n    FROM exp_channel_grid_field_2;\"\n    parse_files=\"y\"\n}\n    <img src=\"{src}\" alt=\"{description}\" />\n{/exp:query}\n```\n\n----------------------------------------\n\nTITLE: Using Avatar Conditional Variables\nDESCRIPTION: Demonstrates how to conditionally display a user's avatar using global variables.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_13\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if logged_in_avatar_filename}<img src=\"/avatars/{logged_in_avatar_filename}\" width=\"{logged_in_avatar_width}\" height=\"{logged_in_avatar_height}\" />{/if}\n```\n\n----------------------------------------\n\nTITLE: Disabling the Datepicker for Date Fields in ExpressionEngine\nDESCRIPTION: The `datepicker` parameter controls whether the JavaScript datepicker is automatically added to date fields within the edit profile form. Set to \"no\" to disable it. The default is \"yes\".\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_1\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\ndatepicker=\"no\"\n```\n\n----------------------------------------\n\nTITLE: Generating Entry Link by URL Title with {path} in ExpressionEngine\nDESCRIPTION: Provides a basic, standalone example of an HTML anchor tag using ExpressionEngine's `{path}` variable to create a link to an entry based on its URL title. The `site/index` parameter defines the target template path.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{path='site/index'}\">{title}</a>\n```\n\n----------------------------------------\n\nTITLE: Limiting Number of Members Displayed - ExpressionEngine Template\nDESCRIPTION: Demonstrates the limit parameter, which constrains how many member records are shown. Defaults are controlled by site settings if not set. Accepts integer values.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_5\n\nLANGUAGE: ExpressionEngine Template Markup\nCODE:\n```\nlimit=\"30\"\n```\n\n----------------------------------------\n\nTITLE: Specifying SHA1 Hashed Passwords in ExpressionEngine Member XML\nDESCRIPTION: This XML snippet illustrates how to specify a SHA1 hashed password for member import in ExpressionEngine. The `<password>` tag includes the attribute `type=\"sha1\"` and the corresponding SHA1 hash (US Secure Hash Algorithm 1). The imported password will only function correctly if the ExpressionEngine installation is also configured to use SHA1 encryption; otherwise, users will need to reset their passwords.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/member-import-xml-format.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<password type=\"sha1\">1b4395b877794a16a7f4db5747380dbaafc7ff18</password>\n```\n\n----------------------------------------\n\nTITLE: Nesting Dependency Resolution within Factories in PHP\nDESCRIPTION: Illustrates dependency injection within factories. The factory for 'Session' resolves its dependency on 'Database' by calling `$di->make('Database', 'local')` internally. This hides the implementation detail of the Session requiring a Database from the code that requests the Session service.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/architecture.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$di->register('Database', function($di, $name)\n{\n  return new Database($name);\n})\n\n$di->register('Session', function($di)\n{\n  return new Session(\n    $di->make('Database', 'local')\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Tree from List in PHP\nDESCRIPTION: Constructs a tree from a list using the `from_list` method. This method takes an array of associative arrays with id and parent_id keys. Optional configurations can be provided to change default behavior.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/tree-datastructure.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$data = array(\n    array('id' => 'root', 'parent_id' => ''),\n    array('id' => 'child1', 'parent_id' => 'root'),\n    array('id' => 'child2', 'parent_id' => 'root'),\n    array('id' => 'subchild', 'parent_id' => 'child2'),\n);\n\n$root = ee()->tree->from_list($data);\n```\n\nLANGUAGE: php\nCODE:\n```\n$root = ee()->tree->from_list($data, array(\n    'id'          => 'category_id',\n    'parent'      => 'parent_category_id',\n    'class_name'  => 'MyCatTreeNode',\n    'name_key'    => 'title'\n));\n```\n\n----------------------------------------\n\nTITLE: Before Template Group Delete Hook Call\nDESCRIPTION: Extension hook called before deleting a template group.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-group.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_template_group_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: URL Path Definition in ExpressionEngine Templates\nDESCRIPTION: Sets a URL path to the previous month's calendar page. Intended for navigation purposes through calendar pages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/calendar.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n{previous_path='channel/calendar'}\n```\n\n----------------------------------------\n\nTITLE: Calling the `grid_save` Extension Hook in ExpressionEngine (PHP)\nDESCRIPTION: This PHP code shows the invocation of the `grid_save` extension hook within ExpressionEngine. It passes the entry ID, field ID, content type, table name, and the prepared data array (containing new, updated, and deleted rows) to the hook. Extensions can modify this data array before it's used in the database operations for saving Grid field content. The potentially modified data is returned from the hook call.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/grid.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$data = ee()->extensions->call(\n  'grid_save',\n  $entry_id,\n  $field_id,\n  $content_type,\n  $table_name,\n  $data\n);\n```\n\n----------------------------------------\n\nTITLE: Example HTML Tag for Formatting Demonstration\nDESCRIPTION: An example `<h1>` HTML tag used to demonstrate how the 'Convert to HTML entities' option for the 'HTML formatting' setting works within comments.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/channels.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<h1>\n```\n\n----------------------------------------\n\nTITLE: Serving Documentation Locally with http-server\nDESCRIPTION: Command to start a local web server for viewing the documentation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx http-server -o\n```\n\n----------------------------------------\n\nTITLE: Locating Default Forum Theme Files\nDESCRIPTION: Specifies the default directory path within an ExpressionEngine installation where the forum theme files are located. Users can modify themes by editing files within this path, though creating a copy is recommended.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/template-manager.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nthemes/forum_themes/\n```\n\n----------------------------------------\n\nTITLE: Example URL for Channel Comment Form\nDESCRIPTION: An example of a full URL pointing to the comments page template for a specific channel. This URL is used in the 'Comment form' setting and should include the relevant Template Group and Template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/channels.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n<https://example.com/channel/comments/>\n```\n\n----------------------------------------\n\nTITLE: Using _remove_rogue_vars Helper Function in Pro Search\nDESCRIPTION: Removes unset variables from the template before ExpressionEngine processes it. This is useful if your variables could be input for other tags.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/functions.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$this->_remove_rogue_vars('variable_name');\n```\n\n----------------------------------------\n\nTITLE: Using member_delete Hook in ExpressionEngine PHP\nDESCRIPTION: This code demonstrates how the member_delete hook is called before deleting members. It provides the opportunity to run custom deletion routines and/or modify the list of member IDs to be deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/member-model.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$member_ids = $this->extensions->call('member_delete', $member_ids);\n```\n\n----------------------------------------\n\nTITLE: Using the Stylesheet Global Variable in ExpressionEngine\nDESCRIPTION: Basic syntax for the stylesheet global variable which generates URLs for linking to CSS templates. This approach prevents ExpressionEngine from parsing tags and PHP in the template, serving the CSS file more efficiently.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/stylesheet.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{stylesheet='template_group/css_template'}\n```\n\n----------------------------------------\n\nTITLE: Accessing Selectable Button Item Attributes in ExpressionEngine\nDESCRIPTION: This snippet shows how to access and render attributes (value and label) of selectable button items within ExpressionEngine templates. The code illustrates the use of template tags to output both value and label for each selected item. This code runs in an ExpressionEngine template and doesn't require external libraries.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/selectable-buttons.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n{field_name}\n    Value: {item}<br>\n    Value: {item:value}<br>\n    Label: {item:label}<br>\n{/field_name}\n```\n\n----------------------------------------\n\nTITLE: Granting Consent from POST Request in PHP\nDESCRIPTION: Example showing how to grant consent based on a POST form submission.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/consent.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif (get_bool_from_string(ee()->input->post('allow_do_stuff')))\n{\n  ee('Consent')->grant('my_addon:do_stuff');\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Template Generators in ExpressionEngine Add-on Setup (PHP)\nDESCRIPTION: Demonstrates the structure of the `addon.setup.php` return array for an ExpressionEngine add-on, specifically highlighting the `templateGenerators` array used to register custom template generators. The example registers a generator named 'Entries' for the 'Channel' add-on. This registration makes the generator discoverable by the Template Generator Service when the add-on is installed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/template-generator.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn array(\n    'author' => 'ExpressionEngine',\n    'author_url' => 'https://expressionengine.com/',\n    'name' => 'Channel',\n    'description' => '',\n    'version' => '2.1.0',\n    'namespace' => 'ExpressionEngine\\Addons\\Channel',\n    'settings_exist' => true,\n    'templateGenerators' => array(\n        'Entries',\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Calling member_update_preferences Hook in PHP\nDESCRIPTION: This snippet shows how to call the 'member_update_preferences' extension hook. It allows updating of added preferences via the user-side preferences form and includes a check to end the script if necessary.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/member-settings.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('member_update_preferences', $data);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Comparing Stylesheet Variable and Path Variable in ExpressionEngine\nDESCRIPTION: Examples showing the difference between using the stylesheet variable (no parsing) and the path variable (full parsing). This demonstrates the two different ways to link to CSS templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/stylesheet.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nNO PARSING: {stylesheet='template_group/css_template'}\n\nhttps://example.com/?css=template_group/css_template\n\nFULL PARSING: {path='template_group/css_template'}\n\nhttps://example.com/template_group/css_template\n```\n\n----------------------------------------\n\nTITLE: Defining Transliteration Rules in ExpressionEngine PHP Configuration\nDESCRIPTION: This PHP code snippet defines an associative array that maps numeric string representations of character codes to their ASCII equivalents for use in transliteration routines within ExpressionEngine. The array serves as the default lookup table for converting Latin-expanded and other special characters to simpler forms, facilitating consistent URL generation. Required dependency: a PHP environment (>=5.x), and the file is typically located at system\\ee\\ExpressionEngine\\Config\\foreign_chars.php. The function expects character codes as keys and their replacements as values, with comments indicating specific substitutions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/localization/transliteration.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn array(\n    '223' => \"ss\", // ß\n    '192' => \"a\", // À\n    '193' => \"a\", // Á\n    '194' => \"a\", // Â\n    '195' => \"a\", // Ã\n    '196' => \"a\", // Ä\n    '224' => \"a\",\n    '225' => \"a\",\n    '226' => \"a\",\n    '229' => \"a\",\n    '227' => \"ae\", // ã\n    '228' => \"ae\", // ä\n    '230' => \"ae\", // æ\n    '199' => \"c\", // Ç\n    '231' => \"c\",\n    '200' => \"e\",  // È\n    '201' => \"e\",  // É\n    '202' => \"e\",  // Ê\n    '203' => \"e\",  // Ë\n    '232' => \"e\",  // è\n    '233' => \"e\",  // é\n    '234' => \"e\",  // ê\n    '235' => \"e\",  // ë\n    '204' => \"i\",  // Ì\n    '205' => \"i\",  // Í\n    '206' => \"i\",  // Î\n    '207' => \"i\",  // Ï\n    '236' => \"i\",\n    '237' => \"i\",\n    '238' => \"i\",\n    '239' => \"i\",\n    '241' => \"n\",\n    '242' => \"o\",\n    '210' => \"o\", // Ò\n    '211' => \"o\", // Ó\n    '212' => \"o\", // Ô\n    '213' => \"o\", // Õ\n    '243' => \"o\",\n    '244' => \"o\",\n    '245' => \"o\",\n    '246' => \"oe\", // ö\n    '249' => \"u\",\n    '217' => \"u\", // Ù\n    '218' => \"u\", // Ú\n    '219' => \"u\", // Û\n    '220' => \"u\", // Ü\n    '250' => \"u\",\n    '251' => \"u\",\n    '252' => \"ue\", // ü\n    '255' => \"y\",\n    '257' => \"aa\",\n    '269' => \"ch\",\n    '275' => \"ee\",\n    '291' => \"gj\",\n    '299' => \"ii\",\n    '311' => \"kj\",\n    '316' => \"lj\",\n    '326' => \"nj\",\n    '353' => \"sh\",\n    '363' => \"uu\",\n    '382' => \"zh\",\n    '256' => \"aa\",\n    '268' => \"ch\",\n    '274' => \"ee\",\n    '290' => \"gj\",\n    '298' => \"ii\",\n    '310' => \"kj\",\n    '315' => \"lj\",\n    '325' => \"nj\",\n    '352' => \"sh\",\n    '362' => \"uu\",\n    '381' => \"zh\",\n);\n```\n\n----------------------------------------\n\nTITLE: Outputting Raw Email Address in ExpressionEngine Template\nDESCRIPTION: This snippet demonstrates the standard usage of an Email Address fieldtype tag within an ExpressionEngine template. It outputs the raw email address stored in the field named 'contact_email_address'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/email-address.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{contact_email_address}\n{!-- Outputs: contact@example.com  --}\n```\n\n----------------------------------------\n\nTITLE: Poorly Formatted SQL Query in PHP - PHP\nDESCRIPTION: Displays an incorrect approach to writing a MySQL query within a PHP statement: all SQL keywords are lowercase, and the long query is placed on a single line, reducing legibility. No dependencies are needed. The snippet serves as a warning against compressed lines and promotes use of proper casing and multi-line formatting for readability.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/general.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// keywords are lowercase and query is too long for\n// a single line (... indicates continuation of line)\n$query = ee()->db->query(\"select foo, bar, baz, foofoo, foobar as raboof, foobaz from exp_pre_email_addresses where foo != 'oof' and baz != 'zab' order by foobaz limit 5, 100\");\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_layout_delete Hook in PHP\nDESCRIPTION: Example of how the before_channel_layout_delete hook is called before deleting a channel layout. It passes the current ChannelLayout object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-layout.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_layout_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Using Segment Variables in ExpressionEngine Templates\nDESCRIPTION: Shows how to use segment variables defined in template routes within ExpressionEngine templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/routes.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n{segment:name}\n```\n\n----------------------------------------\n\nTITLE: Basic Date Formatting in ExpressionEngine\nDESCRIPTION: Shows how to format a date using the format parameter with percent-prefixed codes to display month, day and year.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/date-variable-formatting.md#2025-04-22_snippet_0\n\nLANGUAGE: ee\nCODE:\n```\n{current_time format=\"%F %d %Y\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Mode in ExpressionEngine (PHP)\nDESCRIPTION: Sets the display preferences for PHP and database error messages in ExpressionEngine. Options include hiding errors, showing only to admins, or showing to all users.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$config['debug'] = '1';\n```\n\n----------------------------------------\n\nTITLE: Conditional Display if No Avatar Exists in ExpressionEngine\nDESCRIPTION: This ExpressionEngine conditional tag checks if the current member does *not* have an avatar. If no avatar exists, the content within the {if no_avatar} ... {/if} block is displayed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-avatar.md#2025-04-22_snippet_8\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if no_avatar}\n    No avatar image.\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Category Menu with Show Parameter\nDESCRIPTION: Example of using the show parameter to display specific categories by ID.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/categories.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{category_menu show=\"4|7\"}\n```\n\n----------------------------------------\n\nTITLE: Error Output for Accept Terms Variable - ExpressionEngine Template Syntax\nDESCRIPTION: Renders custom error messages related to the accept_terms field by conditionally outputting an inline error statement. This snippet is used to provide feedback to users failing to accept the terms during registration.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_19\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\n{if error:accept_terms}{error:accept_terms}{/if}\n```\n\n----------------------------------------\n\nTITLE: Setting Entry Status Filter - ExpressionEngine Template\nDESCRIPTION: This snippet applies the entry_status parameter to restrict displayed comments to those associated with entries having a particular status, such as 'Featured'. It lets template designers show comments only for active or highlighted content.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_5\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\nentry_status=\"Featured\"\n```\n\n----------------------------------------\n\nTITLE: Exact Matching Checkbox - ExpressionEngine Search\nDESCRIPTION: Checkbox implementation for exact member name matching option.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/search/simple.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"checkbox\" name=\"exact_match\" id=\"exact_match\" value=\"y\">\n<label for=\"exact_match\">Match Name Exactly</label>\n```\n\n----------------------------------------\n\nTITLE: Creating a Prefixed Provider Instance in PHP\nDESCRIPTION: Demonstrates how to instantiate a `Provider` object. It wraps an existing dependency container (`$dependencies`) and associates all subsequent registrations and retrievals through this provider instance with the specified prefix (`'myaddon'`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/architecture.md#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$prefix = 'myaddon';\n$provider = new Provider($dependencies, $prefix);\n```\n\n----------------------------------------\n\nTITLE: Running Specific Cypress Test with Parameters\nDESCRIPTION: Executes a specific test file using Cypress, with options to keep the browser open and not exit after tests. This command is useful for running focused tests during development.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/cypress-tests.md#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpx cypress run --headed --no-exit -s cypress/integration/cp/login.ee6.js\n```\n\n----------------------------------------\n\nTITLE: Invoking after_role_bulk_delete Extension Hook in PHP\nDESCRIPTION: Called after multiple role objects are deleted in bulk. Accepts an array of primary key IDs of models being deleted. Useful for efficiently handling expensive operations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/role.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_role_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Check Moblog Tag with Multiple Moblogs Selection\nDESCRIPTION: Example of the Check Moblog tag with multiple Moblogs specified using the pipe character.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_12\n\nLANGUAGE: ee\nCODE:\n```\nwhich=\"cellphone|moblog2|samsung\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to and Emitting Internal Model Events - PHP\nDESCRIPTION: Illustrates the process of subscribing to and emitting events on a model instance in PHP within the ExpressionEngine framework. Uses the 'on' method to attach a callback and the 'emit' method to trigger the event. This enables customized behavior for various model lifecycle actions. Inputs are event names and callbacks; output is event binding and emission behavior.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/building-your-own.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$my_model->on('boom', function($model)\n{\n  echo 'boom event happened on '.$model->getName();\n});\n\n$my_model->emit('boom');\n```\n\n----------------------------------------\n\nTITLE: Filtering Statistics by Channel Parameter in ExpressionEngine\nDESCRIPTION: Examples showing how to use the channel parameter to limit statistics reporting to specific channels. Demonstrates both inclusion and exclusion syntax.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/statistics.md#2025-04-22_snippet_2\n\nLANGUAGE: expressionengine\nCODE:\n```\nchannel=\"default_site\"\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\nchannel=\"default_site|sports|news\"\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\nchannel=\"not channel5|channel6\"\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:stats channel=\"news|sports\"}\n    statistics content\n{/exp:stats}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Pair Variable (with Content Modifiers) in Fluid Field - ExpressionEngine Template\nDESCRIPTION: This snippet shows how to access a variable pair for a file/image field inside a Fluid field, using the '{content}' variable as a wrapper for additional image variables such as URL and height. The example is for a Fluid field named 'news_content' containing an image/file field 'hero_image'. The purpose is to illustrate accessing and displaying modified image data (such as different sizes or attributes) in the template output.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/fluid.md#2025-04-22_snippet_3\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{news_content}\n\n  {news_content:hero_image}\n    {content}\n      <img src=\"{url:med}\" height=\"{height:med}\">\n    {/content}\n  {/news_content:hero_image}\n\n{/news_content}\n```\n\n----------------------------------------\n\nTITLE: Using make:prolet Command with Options - Shell\nDESCRIPTION: This snippet outlines the available options for the 'make:prolet' EECLI command, used to scaffold a prolet for a third-party add-on. Required and optional flags are shown for specifying the target add-on folder, prolet description, and an optional associated widget. This configuration table is referenced when invoking the generator, ensuring correct parameters are used.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/make-prolet.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n    --addon=<value>\n    -a <value>\n        Folder for third-party add-on you want to add prolet to\n\n    --description=<value>\n    -d <value>\n        Description of prolet\n\n    --has-widget\n    -w\n        Create a widget for the add-on after generating the prolet (optional)\n\n    --widget-name=<value>\n    -n <value>\n        Name of widget\n\n```\n\n----------------------------------------\n\nTITLE: Setting Site Name in ExpressionEngine Index Files (PHP)\nDESCRIPTION: Sets the short name of the site. Typically used for additional sites in MSM-enabled installations. This can only be used in index.php or admin.php.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_147\n\nLANGUAGE: PHP\nCODE:\n```\n$assign_to_config['site_name'] = 'domain2_short_name';\n```\n\n----------------------------------------\n\nTITLE: Front-end Editing Links Configuration in PHP\nDESCRIPTION: Controls automatic creation of content management links on the front-end.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n$config['enable_frontedit_links'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Calling after_category_group_delete Hook in PHP\nDESCRIPTION: Example of how the after_category_group_delete hook is called. This hook is triggered after a category group is deleted from the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-group.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_category_group_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Setting Form Name Attribute in ExpressionEngine\nDESCRIPTION: The `form_name` parameter allows specifying a custom name attribute for the generated `<form>` tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_5\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\nform_name=\"login\"\n```\n\n----------------------------------------\n\nTITLE: ExpressionEngine Template Example\nDESCRIPTION: Example of ExpressionEngine template code showing channel entries tag usage.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/style-guide.md#2025-04-22_snippet_4\n\nLANGUAGE: ee\nCODE:\n```\n{!-- This is some ExpressionEngine code! --}\n\n{exp:channel:entries channel=\"news\" orderby=\"date\" sort=\"desc\" limit=\"1\"}\n    <h1>{title}</h1>\n{/exp:channel:entries}\n```\n\n----------------------------------------\n\nTITLE: Limiting Signature Image File Size in ExpressionEngine (PHP)\nDESCRIPTION: Sets the maximum file size in kilobytes allowed for user-uploaded signature images in Discussion Forum. Controls server storage requirements for signature images.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_138\n\nLANGUAGE: PHP\nCODE:\n```\n$config['sig_img_max_kb'] = '50';\n```\n\n----------------------------------------\n\nTITLE: Calling before_template_route_insert Hook\nDESCRIPTION: Extension hook called before inserting a template route object. Changes made to the object will be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-route.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_template_route_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Short Conditional for Logged In Members\nDESCRIPTION: Demonstrates the shortened conditional to check if a user is logged in.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_11\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if logged_in}  Welcome back to the site!<br /> <a href=\"{path='LOGOUT'}\">Logout</a>  {/if}\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Size for Statistics Recounting in ExpressionEngine\nDESCRIPTION: Sets the batch size for recounting statistics to manage server load. Higher values are suitable for high-performance servers, while lower values are better for servers with limited resources.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_109\n\nLANGUAGE: php\nCODE:\n```\n$config['recount_batch_total'] = '200';\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video Tutorial in HTML\nDESCRIPTION: This HTML snippet uses an iframe to embed a YouTube video tutorial directly into the documentation page. The video demonstrates how to hide and show field short names within the ExpressionEngine publish area, complementing the description of the 'Show field names on Publish' role setting. Attributes control the video source, title, dimensions, and fullscreen options.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/member-manager.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"video-wrapper\">\n<iframe src=\"https://www.youtube.com/embed/ai2-OiI9iDc?si=-0ox0OSj37V5EcFv\" title=\"Hide and Show Field Short names in the ExpressionEngine publish area\" width=\"1920\" height=\"1080\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Alternative Category Selection Using Categories Tag\nDESCRIPTION: Creates a category selection menu using the categories tag pair, offering more direct control over the HTML structure.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/categories.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"categories\">Categories</label>\n<select name=\"category[]\" id=\"categories\" size=\"4\" multiple=\"multiple\">\n  {categories}\n    <option value=\"{category_id}\"{selected}>{category_name}</option>\n  {/categories}\n</select>\n```\n\n----------------------------------------\n\nTITLE: Implementing after_category_field_insert Hook in PHP\nDESCRIPTION: Example of how the after_category_field_insert hook is called in ExpressionEngine. This hook is triggered after a category field is inserted, with changes to the object not being saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-field.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_category_field_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Including Channel Form Assets in HTML\nDESCRIPTION: Shows how to include the required CSS stylesheet for Channel Form functionality\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"{path='css/_ee_channel_form_css'}\" type=\"text/css\" rel=\"stylesheet\" media=\"screen\">\n```\n\n----------------------------------------\n\nTITLE: Calling After Channel Field Group Update Hook in PHP\nDESCRIPTION: Example of how the after_channel_field_group_update hook is called. This hook is triggered after a ChannelFieldGroup update, providing access to the updated values and modified fields.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field-group.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_field_group_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Channel Parameter Syntax\nDESCRIPTION: Shows the required syntax for specifying the channel parameter, which is mandatory for the channel:info tag to function.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/info.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nchannel=\"channel_name\"\n```\n\n----------------------------------------\n\nTITLE: HTML Button to Remove Avatar\nDESCRIPTION: This HTML snippet shows a button input. When submitted as part of the {exp:member:edit_avatar} form, the presence of the 'remove' input name signals ExpressionEngine to delete the user's current avatar.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-avatar.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"button\" name=\"remove\" value=\"Remove avatar\" />\n```\n\n----------------------------------------\n\nTITLE: Generating Atom Feed with ExpressionEngine\nDESCRIPTION: This snippet demonstrates how to create an Atom feed using ExpressionEngine tags and XML structure. It includes channel information, entry details, and proper Atom feed formatting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/_downloads/sample-atom.txt#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{preload_replace:master_channel_name=\"default_site\"}\n{preload_replace:atom_feed_location=\"site/atom\"}\n\n{exp:rss:feed channel=\"{master_channel_name}\"}\n\n<?xml version=\"1.0\" encoding=\"{encoding}\"?>\n<feed xmlns=\"http://www.w3.org/2005/Atom\" xml:lang=\"{channel_language}\">\n\n    <title type=\"text\"><![CDATA[{channel_name}]]></title>\n    <subtitle type=\"text\"><![CDATA[{channel_name} - {channel_description}]]></subtitle>\n    <link rel=\"alternate\" type=\"text/html\" href=\"{channel_url}\" />\n    <link rel=\"self\" type=\"application/atom+xml\" href=\"{path='{atom_feed_location}'}\" />\n    <updated>{gmt_edit_date format='%Y-%m-%dT%H:%i:%sZ'}</updated>\n    <rights>Copyright (c) {gmt_date format=\"%Y\"}, {author}</rights>\n    <generator uri=\"https://expressionengine.com/\" version=\"{version}\">ExpressionEngine</generator>\n    <id>tag:{trimmed_url},{gmt_date format=\"%Y:%m:%d\"}</id>\n\n{exp:channel:entries channel=\"{master_channel_name}\" limit=\"15\" dynamic_start=\"on\" disable=\"member_data|pagination\"}\n    <entry>\n      <title><![CDATA[{title}]]></title>\n      <link rel=\"alternate\" type=\"text/html\" href=\"{url_title_path=site/index}\" />\n      <id>tag:{trimmed_url},{gmt_entry_date format=\"%Y\"}:{relative_url}/{channel_id}.{entry_id}</id>\n      <published>{gmt_entry_date format=\"%Y-%m-%dT%H:%i:%sZ\"}</published>\n      <updated>{gmt_edit_date format='%Y-%m-%dT%H:%i:%sZ'}</updated>\n      <author>\n            <name>{author}</name>\n            <email>{email}</email>\n            {if url}<uri>{url}</uri>{/if}\n      </author>\n{categories}\n      <category term=\"<![CDATA[{category_name}]]>\"\n        scheme=\"{path=site/index}\"\n        label=\"<![CDATA[{category_name}]]>\" />{/categories}\n      <content type=\"html\"><![CDATA[\n        {body} {extended}\n      ]]></content>\n    </entry>\n{/exp:channel:entries}\n\n</feed>\n\n{/exp:rss:feed}\n```\n\n----------------------------------------\n\nTITLE: Allowing Category Indicator with Multi-Channel Using \\'relaxed_categories\\' Parameter - ExpressionEngine Template Syntax\nDESCRIPTION: Shows how to enable relaxed_categories so category indicators in URLs can be used with entry tags spanning multiple channels without shared category groups. No additional dependencies required.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_23\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\nrelaxed_categories=\"yes\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Field Groups (Date/Email) in ExpressionEngine Fluid Field\nDESCRIPTION: Illustrates how to access fields within a Field Group (`my_field_group`) that is nested inside a Fluid Field (`my_fluid_field`). It requires wrapping the field group's contents within a `{fields}` tag pair. This example shows accessing a date field (`my_date`) and an email field (`my_email`) within the group.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/fluid.md#2025-04-22_snippet_17\n\nLANGUAGE: ee\nCODE:\n```\n{my_fluid_field}\n\t  {my_fluid_field:my_field_group}\n\t    {fields}\n\n          {my_fluid_field:my_date}\n            {content format=\"%F %d %Y\"}\n          {/my_fluid_field:my_date}\n\n          {my_fluid_field:my_email}\n            {content:mailto title=\"Email about their dog\" subject=\"Question about your dog\" encode=\"no\"}\n          {/my_fluid_field:my_email}\n\n\t\t{/fields}\n      {/my_fluid_field:my_field_group}\n    {/my_fluid_field}\n```\n\n----------------------------------------\n\nTITLE: Accessing Related Models in ExpressionEngine PHP\nDESCRIPTION: Demonstrates how to access related models using CamelCase relationship names directly on the model object.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/relationships.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$group = $member->PrimaryRole;\n```\n\n----------------------------------------\n\nTITLE: User Authorization Syntax for Moblog Emails\nDESCRIPTION: Example of how to specify user authorization in a Moblog email to override the default author.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\nAUTH:johnsmith:mysecretword\n```\n\n----------------------------------------\n\nTITLE: Invoking the set_cookie_end Extension Hook in ExpressionEngine (PHP)\nDESCRIPTION: This PHP snippet demonstrates how the ExpressionEngine core invokes the `set_cookie_end` extension hook. It passes an array `$data` containing normalized cookie parameters (prefix, name, value, expire, path, domain, secure_cookie, samesite) to any listening extensions. Extensions can modify this data or prevent the default cookie setting by setting `ee()->extensions->end_script` to `TRUE`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/input.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('set_cookie_end', $data);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Calling before_category_update Hook in PHP\nDESCRIPTION: This code demonstrates how the before_category_update hook is called. It passes the current Category model object, its values, and an array of modified values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_category_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Switch Variable Usage in ExpressionEngine\nDESCRIPTION: Demonstrates how to use the switch variable for rotating through multiple values in templates\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/file.md#2025-04-22_snippet_3\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:file:entries} <div class=\"{switch=\\\"one|two\\\"}\"> <h1>{filename}</h1> {description} </div> {/exp:file:entries}\n```\n\n----------------------------------------\n\nTITLE: Custom Member Field Input by ID - HTML\nDESCRIPTION: Describes usage of a custom member field input, shown with label and referencing ExpressionEngine's m_field_id_X naming. This approach allows custom field values to be captured on registration, utilizing ExpressionEngine's custom profile field system.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\n<label for=\"work_title\">Work title</label>\n<input type=\"text\" id=\"work_title\" name=\"m_field_id_1\" size=\"40\" value=\"{if m_field_id_1}{m_field_id_1}{/if}\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Filesystem Service in ExpressionEngine PHP\nDESCRIPTION: This snippet demonstrates how to initialize and use the Filesystem Service in ExpressionEngine to get directory contents. It shows the basic usage pattern for the service.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/filesystem.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$directory_list = ee('Filesystem')->getDirectoryContents($path, true);\n```\n\n----------------------------------------\n\nTITLE: Invoking before_role_update Extension Hook in PHP\nDESCRIPTION: Called before a role object is updated. Changes made to the object will be automatically saved. Accepts the role object, its values, and modified values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/role.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_role_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Specifying Server Path for CAPTCHA Image Directory in Markdown\nDESCRIPTION: This snippet provides an example of the server file path for storing CAPTCHA images, useful for configuring ExpressionEngine to save CAPTCHA assets on the server. No external dependencies are required, but the folder must be writable. The expected input is a valid absolute path as recognized by the operating system and hosting environment, with the example demonstrating a typical Linux server layout.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/settings/captcha.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\n    /home/example.com/public_html/images/captchas/\n\n```\n\n----------------------------------------\n\nTITLE: Setting CAPTCHA Path in ExpressionEngine (PHP)\nDESCRIPTION: Sets the server path to the directory containing CAPTCHA images.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$config['captcha_path'] = '/path/to/captcha/folder/';\n```\n\n----------------------------------------\n\nTITLE: Defining PHP Version Compatibility Status Indicators in HTML\nDESCRIPTION: HTML code that defines two span elements with CSS classes to visually indicate PHP version compatibility. The 'ee-fail' class indicates critical incompatibility, while the 'ee-maybe' class indicates potential compatibility issues.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/requirements.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"ee-fail\"></span> - the system will not work under this PHP version, or a significant part of functionality will not work\n\n<span class=\"ee-maybe\"></span> - some of the functionality might work incorrectly, or compatibility has not been checked\n```\n\n----------------------------------------\n\nTITLE: Invoking create_captcha_start Hook in ExpressionEngine PHP\nDESCRIPTION: This PHP snippet illustrates the invocation of the `create_captcha_start` extension hook. It passes an optional `$old_word` and checks if an extension has set `end_script` to `TRUE`, indicating that the extension handled CAPTCHA creation and returned its own data (`$edata`), thereby stopping further core execution.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/functions.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$edata = ee()->extensions->call('create_captcha_start', $old_word);\nif (ee()->extensions->end_script === TRUE) return $edata;\n```\n\n----------------------------------------\n\nTITLE: Cookie Type Constants in PHP\nDESCRIPTION: Constants defining the four different types of cookies that can be registered in ExpressionEngine's CookieRegistry service.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/cookie-registry.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Necessary cookies (0)\nee('CookieRegistry)::NECESSARY;\n\n//Functionality cookies (1)\nee('CookieRegistry)::FUNCTIONALITY;\n\n// Performance cookies (2)\nee('CookieRegistry)::PERFORMANCE;\n\n// Targeting cookies (4)\nee('CookieRegistry)::TARGETING;\n```\n\n----------------------------------------\n\nTITLE: Enabling Removal for a FolderItem in PHP\nDESCRIPTION: Shows the delete button associated with this `FolderItem` in the sidebar interface. Returns the `FolderItem` instance (`$this`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\ncanRemove()\n```\n\n----------------------------------------\n\nTITLE: Enabling Rank Denial for Submitted Links in ExpressionEngine\nDESCRIPTION: Applies rank denial to user-submitted links by rewriting them to point to an intermediate redirect page, helping prevent comment spammers from gaining search engine advantages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_111\n\nLANGUAGE: php\nCODE:\n```\n$config['redirect_submitted_links'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Displaying Member Names with Statistics Module in ExpressionEngine\nDESCRIPTION: Examples for using the member_names variable pair to show currently logged-in users, including linking to member profiles and conditional usage.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/statistics.md#2025-04-22_snippet_4\n\nLANGUAGE: expressionengine\nCODE:\n```\n{member_names}\n    <a href=\"{member_path='member/index'}\">{name}</a><br>\n{/member_names}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if member_names}\n    {member_names}\n        {name}<br>\n    {/member_names}\n{/if}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{member_names backspace=\"5\"}\n    <a href=\"{member_path='member/index'}\">{name}</a><br>\n{/member_names}\n```\n\n----------------------------------------\n\nTITLE: Creating Email Links with BBCode\nDESCRIPTION: Shows how to create mailto links using BBCode. The first example displays the email address as the link text, while the second uses custom text. These tags automatically encode the email address to deter spam bots.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/bbcode.md#2025-04-22_snippet_2\n\nLANGUAGE: bbcode\nCODE:\n```\n[email]you@example.com[/email]\n[email=you@example.com]click here to email[/email]\n```\n\n----------------------------------------\n\nTITLE: Calling before_global_variable_insert Hook in PHP\nDESCRIPTION: Example of how the before_global_variable_insert hook is called. This hook executes before a global variable is inserted, allowing modifications to the object which will be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-global-variable.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_global_variable_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Customizing 'Less Than' Text for Relative Dates in ExpressionEngine\nDESCRIPTION: Example of customizing the text used when a relative date is below the threshold of the smallest unit. Changes 'less than' to 'not quite'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/date-variable-formatting.md#2025-04-22_snippet_10\n\nLANGUAGE: expressionengine\nCODE:\n```\n{entry_date:relative units=\"minutes\" less_than=\"not quite\"}\n```\n\n----------------------------------------\n\nTITLE: Calling before_member_delete Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the before_member_delete hook is called in ExpressionEngine. This hook is triggered before a member object is deleted from the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_member_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Direct CSS URL Pattern in ExpressionEngine\nDESCRIPTION: Example of directly accessing a CSS template through a URL path using the 'css' trigger word instead of using the stylesheet variable.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/stylesheet.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nhttps://example.com/css/channel/channel_css\n```\n\n----------------------------------------\n\nTITLE: Accessing WysiHat Helper Classes via Constructor Shortcut (JavaScript)\nDESCRIPTION: Provides an alternative method, mainly intended for debugging, to directly access instances of WysiHat helper classes like `Undo` or `Selection`. This technique involves calling the `wysihat` jQuery function on the target element, passing the name of the desired helper class as a string argument.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/wysihat-api.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$('textarea').wysihat('undo'); // undo stack\n```\n\nLANGUAGE: javascript\nCODE:\n```\n$('textarea').wysihat('selection'); // selection utility\n```\n\n----------------------------------------\n\nTITLE: Generating Entry Link by ID with {entry_id_path} in ExpressionEngine\nDESCRIPTION: Provides a basic, standalone example of an HTML anchor tag using ExpressionEngine's `{entry_id_path}` variable to create a link to an entry based on its ID. The `site/index` parameter defines the target template path.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{entry_id_path='site/index'}\">{title}</a>\n```\n\n----------------------------------------\n\nTITLE: Path Variables with Multiple Segments\nDESCRIPTION: Example of using path variables with multiple URL segments for more complex routing structures.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/path.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{path='company/employees/customer-service/joe'}\">Joe, Customer Service</a>\n```\n\n----------------------------------------\n\nTITLE: Calling Before Template Snippet Update Hook in PHP\nDESCRIPTION: This code demonstrates the call to the 'before_template_snippet_update' hook in ExpressionEngine. It passes the current TemplateSnippet model object, its values, and modified values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-snippet.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_template_snippet_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Wrap Parameter for File Links in ExprEngine\nDESCRIPTION: Illustrates how to use the wrap parameter to create file links in ExpressionEngine templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/file.md#2025-04-22_snippet_2\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{news_image wrap=\"link\"}\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_entry_update Hook in PHP\nDESCRIPTION: Code demonstrating how the after_channel_entry_update hook is called in ExpressionEngine after a channel entry is updated. The hook passes the current ChannelEntry model object, its values, and an array of modified values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-entry.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_entry_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Email Newline Characters Configuration in PHP\nDESCRIPTION: Overrides the core Email class setting for newline characters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n$config['email_newline'] = \"\\r\\n\";\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_layout_delete Hook in PHP\nDESCRIPTION: Example of how the after_channel_layout_delete hook is called after deleting a channel layout. It passes the current ChannelLayout object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-layout.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_layout_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Testing Total Site Entries\nDESCRIPTION: Shows how to check the total number of entries on the entire site.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_33\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if total_entries > 1000}  Yowza!  This is one hot site!  {/if}\n```\n\n----------------------------------------\n\nTITLE: Configuring Recipient Field in HTML Email Form\nDESCRIPTION: This HTML snippet defines an input field for specifying email recipients. The field is required and allows multiple email addresses separated by commas, but care must be taken to prevent spamming.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"text\" name=\"to\" size=\"40\" />\n```\n\n----------------------------------------\n\nTITLE: SQL Caching Configuration in PHP\nDESCRIPTION: Controls caching of Channel Entries tag queries for improved performance.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_68\n\nLANGUAGE: php\nCODE:\n```\n$config['enable_sql_caching'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: JavaScript for Table Reordering - JavaScript\nDESCRIPTION: Binds reorder functionality to the table with optional callback actions using JavaScript. Relies on ExpressionEngine's 'ee_table_reorder' plugin and expects a jQuery environment.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/table.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n$('table').eeTableReorder({\n  afterSort: function(row) {\n    // Whatever you like\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting PayPal Account Email for Simple Commerce\nDESCRIPTION: Specifies the primary email address associated with the PayPal account that processes payments for Simple Commerce store purchases.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_127\n\nLANGUAGE: php\nCODE:\n```\n$config['sc_paypal_account'] = 'paypal_email@example.com';\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Conditional in ExpressionEngine Templates\nDESCRIPTION: Shows how to use regular expression conditionals in ExpressionEngine templates to check for the presence of a value in a pipe-separated list of items.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/parameters.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<select name=\"category[]\" multiple>\n  {exp:channel:categories channel=\"news\" style=\"linear\"}\n    <option value=\"{category_id}\"{if pro_search_category ~ '/(^|\\|)'.category_id.'($|\\|)/'} selected{/if}>\n      {category_name}\n    <option>\n  {/exp:channel:categories}\n</select>\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Classes with BBCode\nDESCRIPTION: Demonstrates how to apply a CSS class to a specific piece of content using the [style] BBCode tag. This tag renders as an HTML span element with the specified class.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/bbcode.md#2025-04-22_snippet_4\n\nLANGUAGE: bbcode\nCODE:\n```\n[style=class_name]your content[/style]\n```\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"class_name\">your content</span>\n```\n\n----------------------------------------\n\nTITLE: Rendering Thumbnails with Height Variable in Moblog Templates in Markdown\nDESCRIPTION: This snippet repeats the thumbnail usage example, emphasizing the {thumb_height} variable to dynamically set the height of the generated thumbnail image in output HTML. Intended for Moblog templates that wish to display thumbnail previews from attached images.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n{images} <img src=\"{thumbnail}\" width=\"{thumb_width}\" height=\"{thumb_height}\" alt=\"thumbnail image\" /> {/images}\n```\n\n----------------------------------------\n\nTITLE: Removing Related Models from Collections in ExpressionEngine PHP\nDESCRIPTION: Shows how to remove a related model from a collection using the remove() method with either the model object or its primary key.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/relationships.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$member_group->remove($member);\n$member_group->remove(5); // remove member_id 5\n```\n\n----------------------------------------\n\nTITLE: Disabling Front-end Edit Link in ExpressionEngine Fieldtype (PHP)\nDESCRIPTION: This code snippet shows how to disable front-end editing for a specific fieldtype in ExpressionEngine. Setting the $disable_frontedit property to true will prevent edit links from appearing for this fieldtype in the front-end content management interface.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/enhanced.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic $disable_frontedit = true;\n```\n\n----------------------------------------\n\nTITLE: Grouping Cypress Tests Using Context\nDESCRIPTION: Shows how to organize multiple Cypress tests into groups using 'context', which is useful for logically separating tests and improving maintainability.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/cypress-tests.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontext('Test', () => {\n    it('test something', () => {\n        cy.log('performing the test...')\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Member Rows with Tag Pair - ExpressionEngine Template/HTML\nDESCRIPTION: Demonstrates a block for looping over members using {member_rows}...{/member_rows} pair. Each loop iteration renders information like member name. Can be expanded to output more fields and markup as needed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_15\n\nLANGUAGE: ExpressionEngine Template Markup\nCODE:\n```\n{member_rows}\n    <p>{name}</p>\n{/member_rows}\n```\n\n----------------------------------------\n\nTITLE: Enabling Relaxed Entry Views Tracking in ExpressionEngine\nDESCRIPTION: Allows Entry Views Tracking to work for any combination that results in only one entry being returned, including when Channel query caching is used.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_113\n\nLANGUAGE: php\nCODE:\n```\n$config['relaxed_track_views'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Making Content Safe for Form Fields\nDESCRIPTION: Uses form_prep modifier to make content safe to use as a value in an HTML form field by properly escaping special characters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<input name=\"myField\" type=\"text\" value=\"{excerpt:form_prep}\">\n{!-- <input name=\"myField\" type=\"text\" value=\"A &lt;em&gt;brief&lt;/em&gt; discussion about &quot;Wonko the Sane&quot;\"> --}\n```\n\n----------------------------------------\n\nTITLE: Filtering Consent Requests by Short Name - ExpressionEngine Template\nDESCRIPTION: These snippets exemplify how to use the consent parameter to include, exclude, or combine specific consent requests by their short name when calling the consent:requests tag. Used to limit the list to certain types of consents or exclude unwanted ones. Insert these as parameters within the opening tag. No code execution is performed; the parameter is used for tag configuration.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/consent.md#2025-04-22_snippet_5\n\nLANGUAGE: expressionengine-template\nCODE:\n```\nconsent='ee:cookies_functionality'\n```\n\nLANGUAGE: expressionengine-template\nCODE:\n```\nconsent='ee:cookies_functionality|terms_of_service'\n```\n\nLANGUAGE: expressionengine-template\nCODE:\n```\nconsent='not twitter_app'\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributors List for v7.5.10 in HTML\nDESCRIPTION: This HTML snippet renders a styled list of contributors for the ExpressionEngine v7.5.10 release. It uses Tailwind CSS classes for layout (grid, spacing, centering) and styling (rounded images, text size, color). Avatars are fetched from GitHub and links point to individual contributor commit histories on GitHub.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/563996?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Bryan Nielsen</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bryannielsen\" target=\"_BLANK\">@bryannielsen</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/11818941?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Matt Johnson</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=matthewjohns0n\" target=\"_BLANK\">@matthewjohns0n</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/1181219?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">robinsowell</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=robinsowell\" target=\"_BLANK\">@robinsowell</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Including CSS Parameter - ExpressionEngine Template Syntax\nDESCRIPTION: Specifies whether to include required CSS independently from the include_assets parameter in registration forms. By setting include_css to \\\"no\\\", default CSS is not added, allowing for manual styling or conditional asset management.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_4\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\ninclude_css=\"no\"\n```\n\n----------------------------------------\n\nTITLE: Calling comment_entries_query_result Hook in PHP\nDESCRIPTION: This snippet demonstrates how the comment_entries_query_result hook is called to modify the result of the query that gathers data for the Comment Entries tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/comment.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$results = ee()->extensions->call('comment_entries_query_result', $results);\nif (ee()->extensions->end_script === TRUE) return ee()->TMPL->tagdata;\n```\n\n----------------------------------------\n\nTITLE: After Comment Bulk Delete Hook Call\nDESCRIPTION: Extension hook called after multiple comments are deleted in bulk. Available since version 4.3.0.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/comment.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_comment_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Configuring Member List Sorting in ExpressionEngine\nDESCRIPTION: Sets the default sorting criteria for the member list display.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_94\n\nLANGUAGE: php\nCODE:\n```\n$config['memberlist_order_by'] = 'total_posts';\n```\n\n----------------------------------------\n\nTITLE: Embedding a Template in ExpressionEngine\nDESCRIPTION: Demonstrates the basic syntax for embedding a template within another template using the embed tag. The template group and template name must be specified.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/embedding.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{embed=\"template_group/template\"}\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency in PHP using ExpressionEngine's Number Formatter\nDESCRIPTION: Shows how to format a number as currency using the currency() method. It supports different locales and currency types.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/number.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$money = ee('Format')->make('Number', 4736234.5)->currency();\n// $4,736,234.58 (presuming default / US locale in the PHP environment)\n\n$money = ee('Format')->make('Number', 4736234.58)->currency(['locale' => 'de_DE', 'currency' => 'EUR']);\n// 4.736.234,58 €\n```\n\n----------------------------------------\n\nTITLE: Calling member_member_register_errors Hook in PHP\nDESCRIPTION: This code shows the invocation of the member_member_register_errors hook. It passes the current Member_register object and checks for script termination.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/member-register.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('member_member_register_errors', $this);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Invoking before_role_delete Extension Hook in PHP\nDESCRIPTION: Called before a role object is deleted. Accepts the role object and its values as parameters. For conditional deletion, inverse relationships are recommended instead.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/role.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_role_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP Port in ExpressionEngine (PHP)\nDESCRIPTION: Sets the mail server port when mail protocol is set to SMTP. Default is 25, but other common ports include 465 (SSL) and 587 (TLS).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_152\n\nLANGUAGE: PHP\nCODE:\n```\n$config['smtp_port'] = '2525';\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Contributors Grid in HTML\nDESCRIPTION: Extended HTML layout for displaying multiple contributors in a responsive grid format. Each contributor is shown with their profile picture, name, and a link to their GitHub commits in the ExpressionEngine repository.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_30\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/55093827?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Andy McCormick</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=ops-andy\" target=\"_BLANK\">@ops-andy</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/563996?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Bryan Nielsen</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bryannielsen\" target=\"_BLANK\">@bryannielsen</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/11818941?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Matt Johnson</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=matthewjohns0n\" target=\"_BLANK\">@matthewjohns0n</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/23382425?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yulya Lebed</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=Yulyaswan\" target=\"_BLANK\">@Yulyaswan</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Changing Suggestion Method to Soundex - ExpressionEngine Template Tag\nDESCRIPTION: Demonstrates switching the suggestion algorithm to 'soundex' by passing the method parameter to {exp:pro_search:suggestions}. Useful for languages with a Latin-based alphabet and sound-based suggestions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_27\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:suggestions method=\"soundex\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Field Editing Window Size in ExpressionEngine Fieldtype (PHP)\nDESCRIPTION: This snippet demonstrates how to specify the size of the editing window for a fieldtype in ExpressionEngine's front-end editing feature. The $size property can be set to 'large', 'small', or 'footer' to control the pop-up window size.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/enhanced.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic $size = 'large';\n```\n\n----------------------------------------\n\nTITLE: Configuring encryption_key in ExpressionEngine\nDESCRIPTION: Setting a key used for encoding and decoding encrypted data. The recommended length is 32 characters including numbers and letters of varying case.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_72\n\nLANGUAGE: php\nCODE:\n```\n$config['encryption_key'] = 'sy22k6QK6JzH38u4nLZ65bHOdK6VL89d';\n```\n\n----------------------------------------\n\nTITLE: Schema Overview of `exp_actions` Table\nDESCRIPTION: A simplified representation of the `exp_actions` database table schema in ExpressionEngine, showing the columns `action_id`, `class`, `method`, and `csrf_exempt`, along with example data.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| action_id | class          | method         |csrf_exempt |\n|-----------|----------------|----------------|------------|\n|        41 | Amazing_add_on | ExampleAction  |          0 |\n```\n\n----------------------------------------\n\nTITLE: Fixing Javascript Template Parse Error\nDESCRIPTION: Demonstrates how to fix template parsing errors caused by whitespace in Javascript code that gets incorrectly parsed as a conditional. Shows incorrect and correct formatting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/error-messages.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  function foo(){if(cond...) ...code... };\n</script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  function foo() { if (cond...) ...code... };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Contributors Grid Layout in HTML\nDESCRIPTION: HTML structure for displaying contributor profiles in a responsive grid layout using Tailwind CSS classes. Shows contributor avatars, names and GitHub links.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/563996?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Bryan Nielsen</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bryannielsen\" target=\"_BLANK\">@bryannielsen</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parameter Usage in Pro Search (HTML)\nDESCRIPTION: Shows how to use parameters as input fields in an HTML form, including hidden inputs, checkboxes, and select dropdowns. Demonstrates handling of multiple values and inclusive filtering.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/parameters.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" name=\"channel\" value=\"news\">\n<input type=\"checkbox\" name=\"search:featured\" value=\"yes\" checked>\n\n<select name=\"category[]\" multiple>\n  <option value=\"1\">Category One<option>\n  <option value=\"2\" selected>Category Two<option>\n  <option value=\"3\">Category Three<option>\n  <option value=\"4\" selected>Category Four<option>\n  <option value=\"5\">Category Five<option>\n  <option value=\"6\" selected>Category Six<option>\n</select>\n\n<input type=\"checkbox\" name=\"search:number[]\" value=\"one\" checked> One\n<input type=\"checkbox\" name=\"search:number[]\" value=\"two\"> Two\n<input type=\"checkbox\" name=\"search:number[]\" value=\"three\" checked> Three\n\n<input type=\"hidden\" name=\"require_all\" value=\"category|search:number\">\n\n<input type=\"hidden\" name=\"exclude\" value=\"category|search:number\">\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Directories Using rsync - Unix Shell\nDESCRIPTION: This snippet uses 'rsync' with several options to synchronize a directory on a remote production server with a local backup directory. It maintains folder structure, file permissions, ownership, and timestamps, compresses data for network transfer, and deletes any files from the destination that do not exist in the source to ensure an exact mirror. Requires 'rsync' to be installed on both source and destination machines, SSH connectivity, and appropriate permissions. Inputs include the source and destination directory paths and user/server information. Output is an updated backup matching the source files exactly.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/database-backup.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrsync -ahvz --delete user@production_server:~/public/ ~/backup/\n```\n\n----------------------------------------\n\nTITLE: File Archive Override Syntax for Moblog Emails\nDESCRIPTION: Examples of how to override the default file archive setting in Moblog emails using either braces or angle brackets.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n{file_archive}yes{/file_archive}\n\n<file_archive>yes</file_archive>\n```\n\n----------------------------------------\n\nTITLE: Calling comment_form_end Hook in PHP\nDESCRIPTION: This snippet demonstrates how the comment_form_end hook is called to modify the comment form at the end of processing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/comment.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$res = ee()->extensions->call('comment_form_end', $res);\nif (ee()->extensions->end_script === TRUE) return $res;\n```\n\n----------------------------------------\n\nTITLE: Setting Error Return Template for ExpressionEngine Form\nDESCRIPTION: Illustrates the use of the `return_error` parameter with the `exp:member:forgot_password_form` tag. This parameter defines the template (e.g., 'template_group/error') to which the user is redirected if form validation errors occur and `inline_errors` is not enabled.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/forgot-password.md#2025-04-22_snippet_5\n\nLANGUAGE: ee\nCODE:\n```\nreturn_error=\"template_group/error\"\n```\n\n----------------------------------------\n\nTITLE: Using ExpressionEngine Template Tag for Number Field (Markdown)\nDESCRIPTION: This snippet presents the use of an ExpressionEngine template tag to render a numeric field's value within templates. The tag `{my_number_field}` outputs the stored number, and the optional `decimal_place` parameter allows formatting the number to a specified number of decimal places. It is used exclusively in templates and requires the field to exist in the channel entry.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/number.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n{my_number_field}\n```\n\n----------------------------------------\n\nTITLE: Calling After Channel Field Group Save Hook in PHP\nDESCRIPTION: Example of how the after_channel_field_group_save hook is called. This generic hook runs after any save operation, whether the model was inserted or updated.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field-group.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_field_group_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Setting Up Access Throttling in ExpressionEngine (PHP)\nDESCRIPTION: Configures throttling behavior for excessive page loads including IP masking and custom messages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$config['banish_masked_ips'] = 'y';\n$config['banishment_message'] = 'You have exceeded the allowed page load frequency.';\n$config['banishment_type'] = 'message';\n$config['banishment_url'] = 'https://www.yahoo.com';\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Prefix in ExpressionEngine\nDESCRIPTION: Specifies a prefix for ExpressionEngine cookie names to prevent collisions from separate installations on the same cookie domain. This helps maintain separate cookies for different installations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$config['cookie_prefix'] = 'site1';\n```\n\n----------------------------------------\n\nTITLE: Validating Models in ExpressionEngine\nDESCRIPTION: Shows how to validate a model before saving by calling validate() and checking if the result is valid using the isValid() method.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$template->template_name = 'Mike';\n$result = $template->validate();\n\nif ($result->isValid())\n{\n  $template->save();\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Text Formatting Commands in JavaScript\nDESCRIPTION: Examples showing how to use the make() method to apply formatting using both native command names and aliases\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/wysihat-api.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nthis.make('italicize'); // native name\nthis.make('italic'); // alias\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Grid Layout for Contributor Display\nDESCRIPTION: HTML structure for displaying contributor information in a responsive grid format, including avatars, names, and GitHub links. The layout adapts to different screen sizes using responsive class names.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/11818941?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Matt Johnson</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=matthewjohns0n\" target=\"_BLANK\">@matthewjohns0n</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/563996?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Bryan Nielsen</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bryannielsen\" target=\"_BLANK\">@bryannielsen</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/23382425?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yulya Lebed</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=Yulyaswan\" target=\"_BLANK\">@Yulyaswan</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_field_update Hook in PHP\nDESCRIPTION: Code showing how the after_channel_field_update hook is called within ExpressionEngine. This hook is triggered after a channel field is updated and includes the modified values as a parameter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_field_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Calling after_member_insert Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the after_member_insert hook is called in ExpressionEngine. This hook is triggered after a member object is inserted into the database. Changes made to the object will not be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_member_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Setting Static Status with Hidden Input\nDESCRIPTION: Demonstrates how to manually set an entry's status using a hidden form field, useful when you want to automatically assign a specific status without user input.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/status.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" name=\"status\" value=\"Shipped\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Grid Layout in HTML\nDESCRIPTION: HTML structure for displaying contributor profiles in a responsive grid layout using Tailwind CSS classes. Shows contributor images, names and GitHub links.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_19\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/53965?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Brian Litzinger</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=litzinger\" target=\"_BLANK\">@litzinger</a></p></div></div></div></li>\n</ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Control Panel URL in PHP for ExpressionEngine\nDESCRIPTION: Updates the Control Panel URL in the ExpressionEngine configuration after renaming the admin.php file. This PHP configuration is mandatory if the admin filename is altered. Changes should be reflected in system/user/config/config.php under the cp_url key, with the new URL as input.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/best-practices.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$config['cp_url'] = \"https://example.com/razzle.php\";\n```\n\n----------------------------------------\n\nTITLE: Email Console Timelock Configuration in PHP\nDESCRIPTION: Sets the number of minutes that must pass before a member can send another email via the Email Console in member profile pages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n$config['email_console_timelock'] = '300';\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Information in HTML\nDESCRIPTION: This HTML snippet creates a grid layout to display contributor information, including their avatar, name, and GitHub username. It uses Tailwind CSS classes for styling.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/23382425?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yulyaswan</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=Yulyaswan\" target=\"_BLANK\">@Yulyaswan</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calling before_global_variable_delete Hook in PHP\nDESCRIPTION: Example of how the before_global_variable_delete hook is called. This hook executes before a global variable is deleted. For conditional deletions, an inverse relationship is recommended instead.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-global-variable.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_global_variable_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Passing a Search Query to Save Form - ExpressionEngine Template Tag\nDESCRIPTION: Demonstrates passing the query parameter, referencing a segment variable, to the {exp:pro_search:save} tag. Ensures that the save form associates with a dynamically generated query value for shortcut saving.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_12\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:save query=\"{segment_3}\"}\n```\n\n----------------------------------------\n\nTITLE: Setting CodeMirror Height in ExpressionEngine (PHP)\nDESCRIPTION: Sets the height of CodeMirror textareas in the control panel, such as the Template Editor.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$config['codemirror_height'] = '18em';\n```\n\n----------------------------------------\n\nTITLE: Disabling Emoji Shorthand in ExpressionEngine (PHP)\nDESCRIPTION: Controls whether emoji shortcodes like :rocket: are parsed into actual emoji characters. When enabled, shortcodes are converted to their corresponding emoji.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$config['disable_emoji_shorthand'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Re-indexing All Sites with `sync:reindex` ExpressionEngine CLI Command (Shell)\nDESCRIPTION: This command executes the ExpressionEngine `sync:reindex` task via the `eecli.php` script. By default, without any site-specific options, it re-indexes the searchable content for all configured sites within the ExpressionEngine installation, ensuring data freshness.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/sync-reindex.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nphp eecli.php sync:reindex\n```\n\n----------------------------------------\n\nTITLE: Word Censoring Configuration in PHP\nDESCRIPTION: Enables or disables the system's word censoring functionality for channel entries, comments, and forum posts.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n$config['enable_censoring'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Calling after_category_group_update Hook in PHP\nDESCRIPTION: Example of how the after_category_group_update hook is called. This hook is triggered after a category group is updated in the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-group.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_category_group_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Navigating Tree Nodes in PHP\nDESCRIPTION: Demonstrates moving between nodes in a tree—accessing parent, children, and utilizing tree traversal functions. Helps avoid going past tree boundaries by checking if nodes are leaves or roots.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/tree-datastructure.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$parent = $node->parent();\n```\n\nLANGUAGE: php\nCODE:\n```\n$children = $node->children();\n$child1 = $children[0];\n$child2 = $children[1];\n```\n\nLANGUAGE: php\nCODE:\n```\n$child1 = $node->get('child1');\n```\n\nLANGUAGE: php\nCODE:\n```\n$root = $node->root();\n```\n\nLANGUAGE: php\nCODE:\n```\n$node->is_leaf();\n$node->is_root();\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Directories in Reverse Using rsync - Unix Shell\nDESCRIPTION: This rsync command is run on the production server to synchronize the local public directory to a remote backup server. It uses similar flags as the previous snippet to preserve structure, permissions, and compression, but with the source and destination paths reversed. Dependencies include rsync and SSH availability between the servers. Purpose is to allow flexibility in where the backup operation is initiated and where data is transferred.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/database-backup.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrsync -ahvz --delete ~/public/ user@backup_server:~/backup/\n```\n\n----------------------------------------\n\nTITLE: Displaying Raw Content with :raw_content Modifier\nDESCRIPTION: Outputs the raw, unparsed content of a variable as stored in the database without typography variable interpolation. Useful for content export templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n{checkbox:raw_content}\n{!-- IL|OR|HI --}\n```\n\n----------------------------------------\n\nTITLE: Using Image Modifier Tags as Tag Pairs in ExpressionEngine - Markdown\nDESCRIPTION: This example demonstrates wrapping content in a modifier tag pair to access variables such as {url}, {width}, and {height} for processed images in ExpressionEngine. It requires an image field and correct implementation in a template file. Parameters set the target width and height for resizing. The snippet outputs an HTML img tag referencing the processed image URL and its dimensions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/file.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n    {news_image:resize width=\\\"100\\\" height=\\\"100\\\"}\n        <img src=\\\"{url}\\\" width=\\\"{width}\\\" height=\\\"{height}\\\" />\n    {/news_image:resize}\n```\n\n----------------------------------------\n\nTITLE: Adding Attribution Header in Markdown\nDESCRIPTION: Required attribution header that must be included at the top of all documentation files.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/style-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\n    This source file is part of the open source project\n    ExpressionEngine User Guide (https://github.com/ExpressionEngine/ExpressionEngine-User-Guide)\n\n    @link      https://expressionengine.com/\n    @copyright Copyright (c) 2003-2020, Packet Tide, LLC (https://packettide.com)\n    @license   https://expressionengine.com/license Licensed under Apache License, Version 2.0\n-->\n```\n\n----------------------------------------\n\nTITLE: Calling entry_save_and_close_redirect Hook in ExpressionEngine (PHP)\nDESCRIPTION: Demonstrates how to invoke the 'entry_save_and_close_redirect' extension hook when a member chooses to save and close a channel entry in the ExpressionEngine publish form. This snippet calls the method using the ExpressionEngine extension system, passing the entry model, and expects a custom redirect URL in return. Requires ExpressionEngine's PHP API and an initialized extensions service.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/publish.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$redirect_url = ee()->extensions->call('entry_save_and_close_redirect', $entry);\n```\n\n----------------------------------------\n\nTITLE: Defining Email Console Log Model Class in PHP\nDESCRIPTION: Declaration of the ExpressionEngine\\Model\\Log\\EmailConsoleCache class with its properties, relationships, and methods. This class represents the email console log model in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/email-console-cache.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass ExpressionEngine\\Model\\Log\\EmailConsoleCache\n{\n    // Properties\n    public $cache_id; // Key\n    public $cache_date;\n    public $member_id;\n    public $member_name;\n    public $ip_address;\n    public $recipient;\n    public $recipient_name;\n    public $subject;\n    public $message;\n\n    // Relationships\n    public function Member() {}\n\n    // No additional methods\n\n    // No events\n}\n```\n\n----------------------------------------\n\nTITLE: Calling after_global_variable_update Hook in PHP\nDESCRIPTION: Example of how the after_global_variable_update hook is called. This hook executes after a global variable is updated. Changes to the object will not be automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-global-variable.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_global_variable_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Author Signature Image in ExpressionEngine/HTML\nDESCRIPTION: Uses the `{if signature_image}` conditional to check if the comment author has a signature image uploaded. If it exists, an HTML `<img>` tag is rendered using the image URL, width, and height variables (`{signature_image_url}`, `{signature_image_width}`, `{signature_image_height}`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n{if signature_image} <img src=\"{signature_image_url}\" width=\"{signature_image_width}\" height=\"{signature_image_height}\" alt=\"{author}'s signature\" /> {/if}\n```\n\n----------------------------------------\n\nTITLE: Basic Parse Tag Usage in ExpressionEngine\nDESCRIPTION: Demonstrates the basic syntax for using the Parse tag to output Pro Variables content\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/tags.md#2025-04-22_snippet_0\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_variables:parse var=\"my_var\"}\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_field_insert Hook in PHP\nDESCRIPTION: Code showing how the after_channel_field_insert hook is called within ExpressionEngine. This hook is triggered after a channel field is inserted, but changes made won't be automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_field_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Final Tagdata Processing Hook Implementation\nDESCRIPTION: Demonstrates the channel_entries_tagdata_end hook for final modifications to parsed entry data.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/channel.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$tagdata = $this->extensions->call('channel_entries_tagdata_end', $tagdata, $row, $this);\nif ($this->extensions->end_script === TRUE) return $tagdata;\n```\n\n----------------------------------------\n\nTITLE: Testing User's Primary Role Description\nDESCRIPTION: Example of testing against the role description of the logged in user.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_18\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if logged_in_primary_role_description *= 'games'}  Shall we play a game?  {/if}\n```\n\n----------------------------------------\n\nTITLE: Calling After Site Save Hook - PHP\nDESCRIPTION: Extension hook called after any site object save operation completes. Changes are not automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/site.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_site_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Basic Consent Variable Conditional Check in ExpressionEngine\nDESCRIPTION: Example of the basic syntax for checking a consent variable in an ExpressionEngine template conditional. This pattern is used to conditionally display content based on whether a specific consent has been granted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/consent.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{if consent:consent_short_name}\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Grid in HTML\nDESCRIPTION: HTML code for displaying a responsive grid of contributors with their profile pictures, names, and GitHub usernames. The layout uses responsive design with different column counts for different viewport sizes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/563996?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Bryan Nielsen</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bryannielsen\" target=\"_BLANK\">@bryannielsen</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Assigning Additional Roles to an ExpressionEngine Member in PHP\nDESCRIPTION: This example demonstrates adding multiple new roles to an ExpressionEngine member while preserving existing ones. It retrieves the member, gets current role IDs, merges them with an array of new role IDs (`$roles_to_add`), fetches the corresponding Role models, assigns them to the member's `Roles` relationship, validates, and saves. Depends on `ee('Model')`, an existing `$member_object`, and an array `$roles_to_add` containing role IDs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/member.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n```php\n// Get the member object.\n$member_object = ee('Model')->get('Member')->filter('username', $username)->first();\n\n// Get Member's existing role ID.\n$current_role_ids = $member_object->Roles->pluck('role_id');\n\n// Your list of new roles to add.\n$roles_to_add = array(5,6);\n\n// Merge the two arrays.\n$all_roles = array_merge($current_role_ids, $roles_to_add);\n\n// Add the roles to the member.\n$member_object->Roles = ee('Model')->get('Role', $all_roles)->all();\n\n// Validate and Save.\n$result = $member_object->validate();\n\nif ($result->isValid())\n{\n  $member_object->save();\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Tag Caching in ExpressionEngine (PHP)\nDESCRIPTION: Emergency feature to temporarily disable tag caching. Warning: This should only be used in extreme circumstances as it can cause high disk I/O on busy sites.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$config['disable_tag_caching'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Using {if auto_login} to Conditionally Display the Auto-Login Checkbox\nDESCRIPTION: Illustrates the recommended use of the `{if auto_login}` conditional to wrap the 'Auto-login on future visits' checkbox. This ensures the checkbox is only shown when the auto-login feature is enabled and usable based on session settings (cookies only).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/login.md#2025-04-22_snippet_13\n\nLANGUAGE: ee\nCODE:\n```\n{if auto_login}\n  <p><input class=\"checkbox\" type=\"checkbox\" name=\"auto_login\" value=\"1\"> Auto-login on future visits</p>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor List in HTML/Markdown\nDESCRIPTION: This snippet demonstrates how to render a list of contributors with their avatars, names, and GitHub links using HTML and Markdown syntax.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/23382425?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yulya Lebed</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=Yulyaswan\" target=\"_BLANK\">@Yulyaswan</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/6020323?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Doug Black</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=dougblackjr\" target=\"_BLANK\">@dougblackjr</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Invalid Number Format Error\nDESCRIPTION: Shows an error with too many decimal points in a number.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_40\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if 1.2.3}\n```\n\n----------------------------------------\n\nTITLE: Image Output with Width Variable in Moblog Templates in Markdown\nDESCRIPTION: An example snippet of how the {width} variable is used for dynamically setting the HTML width attribute of an uploaded image within Moblog templates. When rendered, {width} is replaced by the pixel width of the original uploaded image.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n<img src=\"{file}\" width=\"{width}\" height=\"{height}\" alt=\"pic\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Comment Moderation Override in ExpressionEngine\nDESCRIPTION: Configures ExpressionEngine to allow moderated comments on entries even after their comment expiration date has passed. The default behavior is to not allow comments after expiration.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$config['comment_moderation_override'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Logging in ExpressionEngine's config.php\nDESCRIPTION: This code snippet demonstrates how to enable error logging in ExpressionEngine by setting the log_date_format and log_threshold configuration parameters in the config.php file. The log_threshold value of '1' enables logging of errors, while the date format specifies how timestamps will appear in log entries.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/error-logging.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    $config['log_date_format'] = 'Y-m-d H:i:s';\n    $config['log_threshold'] = '1';\n```\n\n----------------------------------------\n\nTITLE: Asset Linking in ExpressionEngine Multiple Sites\nDESCRIPTION: Shows how to link stylesheets and scripts from another site using the site short name prefix.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/msm/code.md#2025-04-22_snippet_2\n\nLANGUAGE: expressionengine\nCODE:\n```\n{stylesheet=\"site_short_name:template_group/style\"}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{script=\"site_short_name:template_group/script\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Private Message Waiting Period for New Members in ExpressionEngine\nDESCRIPTION: Configures how long new members must wait after registration before being allowed to send private messages. Super Admins are exempt from this restriction.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_106\n\nLANGUAGE: php\nCODE:\n```\n$config['prv_msg_waiting_period'] = '4';\n```\n\n----------------------------------------\n\nTITLE: Setting HTML String Content for ExpressionEngine Add-on Control Panel\nDESCRIPTION: Example of creating a simple Control Panel page by outputting a direct HTML string. This approach uses the setBody() method with a single HTML string parameter to render content in the main body of the add-on's Control Panel page.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/modules.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n public function process($id = false)\n    {\n      $this->addBreadcrumb('index', 'Home');\n\n      $html = \"<h2>Welcome to my add-on</h2><p>This is an amazing add-on that does amazing things!\"\n\n      $this->setBody($html);\n\n      return $this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Calling after_global_variable_delete Hook in PHP\nDESCRIPTION: Example of how the after_global_variable_delete hook is called. This hook executes after a global variable is deleted. For conditional deletions, an inverse relationship is recommended instead.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-global-variable.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_global_variable_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Highlighting Active Category Link using {active} Conditional\nDESCRIPTION: Demonstrates using the ExpressionEngine {active} conditional variable within a category loop to apply a CSS class (e.g., 'active') to the link of the currently active category, determined by the URI segment.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/categories.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{path='news/index'}\"{if active} class=\"active\"{/if}>{category_name}</a>\n```\n\n----------------------------------------\n\nTITLE: Enabling New Relic in ExpressionEngine (PHP)\nDESCRIPTION: Enables or disables New Relic Real User Monitoring JavaScript on all ExpressionEngine-powered pages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_171\n\nLANGUAGE: php\nCODE:\n```\n$config['use_newrelic'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Parsing and Displaying RSS Feed with ExpressionEngine RSS Parser Plugin\nDESCRIPTION: This snippet demonstrates how to use the RSS Parser plugin to fetch and display the five most recent posts from the ExpressionEngine blog feed. It showcases the usage of various variables and formatting options provided by the plugin.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/rss-parser.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{exp:rss_parser url=\"https://expressionengine.com/blog/rss-feed\" limit=\"5\"}\n<h1>{feed_title}</h1>\n<ul>\n    {feed_items}\n        <li>\n            <h2><a href=\"{item_link}\">{item_title}</a></h2>\n            <ul class=\"metadata\">\n                <li class=\"byline\">by {item_authors backspace=\"2\"}{author_name}, {/item_authors}</li>\n                <li class=\"date\">{item_date format=\"%F %d %Y\"}</li>\n            </ul>\n            {item_content}\n        </li>\n    {/feed_items}\n</ul>\n{/exp:rss_parser}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Interaction Events with jQuery in ExpressionEngine (JavaScript)\nDESCRIPTION: This snippet demonstrates how to bind the custom 'interact' event to a form element using jQuery. The event fires immediately when a user modifies any form input (text, checkbox, dropdown, etc.) within the form, unlike the standard 'change' event which often requires a focus change. Note that this event does not trigger on form submission when bound to the form itself.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/events.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n$('form').on('interact', function() {\n    // I see typing!\n});\n```\n\n----------------------------------------\n\nTITLE: Invoking after_role_save Extension Hook in PHP\nDESCRIPTION: Called after a role object is inserted or updated. Changes made to the object will not be automatically saved. Accepts the role object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/role.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_role_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Contributor Grid Layout HTML\nDESCRIPTION: HTML markup for displaying contributor information in a responsive grid layout using Tailwind CSS classes. Shows contributor avatars, names and GitHub links.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/563996?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Bryan Nielsen</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bryannielsen\" target=\"_BLANK\">@bryannielsen</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calling before_global_variable_save Hook in PHP\nDESCRIPTION: Example of how the before_global_variable_save hook is called. This hook executes before a global variable is inserted or updated, allowing modifications to the object which will be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-global-variable.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_global_variable_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Reinitializing ExpressionEngine Pro Front-end Editing via JavaScript\nDESCRIPTION: Calls the `EE.pro.refresh()` JavaScript function. This is necessary to correctly initialize front-end edit links and their associated functionality on page content loaded dynamically via AJAX or other methods after the initial page load. The example shows calling `EE.pro.refresh()` within a success callback (`reInitPro`) of an AJAX request.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/advanced-usage/front-end/frontend.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getData() {\n    $.ajax({\n        url : 'example.com',\n        type: 'GET',\n        success : reInitPro\n    })\n}\n\nfunction reInitPro(){\n    EE.pro.refresh();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Application Version in PHP Array\nDESCRIPTION: This snippet sets the current version of the ExpressionEngine application in the configuration file. This version number is crucial for determining if updates are available and should not be modified unless required for triggering update scripts.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/config/config.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$config['app_version'] = '7.4.0';\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributors Grid with HTML Layout\nDESCRIPTION: HTML code displaying a grid of contributors to ExpressionEngine 7.2.0 with their avatars, names, and GitHub links using a responsive grid layout.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/563996?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Bryan Nielsen</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bryannielsen\" target=\"_BLANK\">@bryannielsen</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/48652147?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">CreepCaster</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=CreepCaster\" target=\"_BLANK\">@CreepCaster</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/1008036?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Eric Lamb</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=mithra62\" target=\"_BLANK\">@mithra62</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/11818941?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Matt Johnson</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=matthewjohns0n\" target=\"_BLANK\">@matthewjohns0n</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/25546953?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Thomas Knaller</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=tknaller\" target=\"_BLANK\">@tknaller</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/23382425?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yulya Lebed</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=Yulyaswan\" target=\"_BLANK\">@Yulyaswan</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/1181219?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">robinsowell</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=robinsowell\" target=\"_BLANK\">@robinsowell</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Dock Feature Configuration in PHP\nDESCRIPTION: Controls the visibility of Dock and enables/disables front-end editing and Prolets functionality.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n$config['enable_dock'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: Using params->site_ids Method in Pro Search\nDESCRIPTION: Retrieves the current site IDs based on the 'site' parameter in the search query.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/functions.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$site_ids = $this->params->site_ids();\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_update Hook in PHP\nDESCRIPTION: Example of how the after_channel_update hook is called in ExpressionEngine. This hook is triggered after a channel object is updated, but changes made to the object are not automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Setting URI Protocol in ExpressionEngine (PHP)\nDESCRIPTION: Specifies which server global should be used to retrieve the URI string in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_168\n\nLANGUAGE: php\nCODE:\n```\n$config['uri_protocol'] = 'PATH_INFO';\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Form Validation Errors in ExpressionEngine\nDESCRIPTION: Illustrates using the `inline_errors=\"yes\"` parameter with the `exp:member:forgot_password_form` tag. This enables inline display of validation errors within the form itself, rather than redirecting to a separate error template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/forgot-password.md#2025-04-22_snippet_2\n\nLANGUAGE: ee\nCODE:\n```\ninline_errors=\"yes\"\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Attributes and Values of ExpressionEngine Fields using PHP\nDESCRIPTION: Methods for setting and getting field notes, attributes, and other properties in ExpressionEngine. These methods facilitate customization by handling custom input parameters, providing getters and setters for various attributes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/cp-form/fields.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n### `setNote($note)`\n\nThe string you want to use for your Note (`note`).\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| $note | `string` | The string to use for your note |\n| Returns | `Form\\Field` | `$this`, the Field object to help in chaining |\n```\n\nLANGUAGE: PHP\nCODE:\n```\n### `getNote()`\n\nReturns the note string (`note`)\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| Returns | `null` or `string` | The value to use |\n```\n\nLANGUAGE: PHP\nCODE:\n```\n### `setAttrs($attrs)`\n\nAny custom input parameters you want to attach to your Field (`attrs`).\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| $attrs | `string` | The attributes. Note they have to be in the form ' param=\"X\" param2=\"y\" ' |\n| Returns | `Form\\Field` | `$this`, the Field object to help in chaining |\n```\n\nLANGUAGE: PHP\nCODE:\n```\n### `getAttrs()`\n\nReturns the attributes string (`attrs`)\n\n| Parameter | Type | Description |\n| --------- | ---- | ----------- |\n| Returns | `null` or `string` | The value to use |\n```\n\n----------------------------------------\n\nTITLE: Displaying Suggestions Based on Keywords and Distance - ExpressionEngine Template Tag\nDESCRIPTION: This snippet displays alternative search suggestions by using {exp:pro_search:suggestions} with parameters like keywords, language, distance, and limit. It wraps output conditionally to prompt the user with suggestions, dynamically generating links for each suggestion, and providing a fallback for no results. The code uses multiple template variables and logic unique to the Pro Search module.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_25\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:suggestions keywords=\"{pro_search_keywords}\" keywords:lang=\"en\" distance=\"2\" limit=\"4\"}\n {if suggestion_count == 1}Did you mean{/if}\n  <a href=\"{pro_search:url keywords=\"{suggestion}\"}\">{suggestion}</a>{if suggestion_count != total_suggestions}&nbsp;or&nbsp;{if:else}?{/if}\n {if no_results}Check your spelling or try a different search term.{/if}\n{/exp:pro_search:suggestions}\n```\n\n----------------------------------------\n\nTITLE: Unnamed MySQL Table Keys - SQL\nDESCRIPTION: Shows incorrect MySQL table key definitions lacking explicit names, which can lead to ambiguous or duplicate indexes. No dependencies are required. This anti-pattern should be avoided to ensure safe database schema operations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/general.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nPRIMARY KEY (`field_name`)\nPRIMARY KEY (`field_one`, `field_two`)\n```\n\n----------------------------------------\n\nTITLE: Calling after_file_delete Hook in PHP\nDESCRIPTION: Shows the implementation of the after_file_delete hook in ExpressionEngine. This hook is called after a file object is deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/file.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_file_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling Before Update Hook in ExpressionEngine PHP\nDESCRIPTION: Extension hook called before updating a specialty template object. Changes made to the object will be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-specialty-template.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_specialty_template_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Restricting Member List to a Role - ExpressionEngine Template\nDESCRIPTION: Demonstrates use of role_id parameter to filter member output by a specified role. This replaces and is functionally identical to the previous group_id parameter. Expects role IDs as set up in the Member Manager.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_7\n\nLANGUAGE: ExpressionEngine Template Markup\nCODE:\n```\nrole_id=\"5\"\n```\n\n----------------------------------------\n\nTITLE: Displaying URL Fields in ExpressionEngine Fluid Field\nDESCRIPTION: Shows how to output a URL field (`my_url`) nested within a Fluid Field (`my_fluid_field`) to create a hyperlink. The `{content}` variable contains the URL itself.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/fluid.md#2025-04-22_snippet_16\n\nLANGUAGE: ee\nCODE:\n```\n{my_fluid_field}\n  {my_fluid_field:my_url}\n    <a href=\"{content}\">Your Link</a>\n  {/my_fluid_field:my_url}\n{/my_fluid_field}\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Dependencies in ExpressionEngine\nDESCRIPTION: Shows how to include jQuery UI components and plugins in ExpressionEngine Channel Forms by declaring dependencies using the CP class methods.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/development.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->cp->add_js_script(array('ui' => array('sortable', 'tabs')));\nee()->cp->add_js_script('plugin', 'tablesorter');\n```\n\n----------------------------------------\n\nTITLE: Calling rte_before_save Hook in PHP\nDESCRIPTION: Demonstrates how the rte_before_save hook is called in ExpressionEngine. This hook allows modification of field data before it is saved to the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/rte.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$data = ee()->extensions->call('rte_before_save', $this, $data);\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Route Array in publish_live_preview_route Hook (PHP)\nDESCRIPTION: Provides an example of returning a custom array from within the 'publish_live_preview_route' extension hook implementation. The returned array must contain both the 'uri' (string) key and the 'template_id' (integer) key, even if only one is changed. Intended for use within a custom extension handler for ExpressionEngine's PHP API.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/publish.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'uri'         => 'my/special/uri',\n    'template_id' => 5\n];\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Grid in HTML\nDESCRIPTION: This HTML snippet creates a responsive grid layout to display contributor information, including profile pictures, names, and GitHub links.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/563996?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Bryan Nielsen</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bryannielsen\" target=\"_BLANK\">@bryannielsen</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/11818941?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Matt Johnson</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=matthewjohns0n\" target=\"_BLANK\">@matthewjohns0n</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/23382425?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yulya Lebed</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=Yulyaswan\" target=\"_BLANK\">@Yulyaswan</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Attachment Upload Directory - Markdown\nDESCRIPTION: These Markdown code snippets demonstrate various valid formats for specifying the URL of the attachments upload directory within the Messaging Settings interface. Each example shows a different syntactical variant for referencing a public web directory, which must correspond to the location where message attachments are stored. These are static path examples rather than executable code, intended to illustrate suitable input values.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/settings/messages.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`https://example.com/images/pm_attachments/`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`///example.com/images/pm_attachments/`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`/images/pm_attachments/`\n```\n\n----------------------------------------\n\nTITLE: Multiple Field Override Example for Moblog Emails\nDESCRIPTION: Example showing how to specify content for multiple fields in a single Moblog email.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n{field:body}This is the body text.{/field:body}\n\n{field:summary}This is a summary.{/field:summary}\n```\n\n----------------------------------------\n\nTITLE: Invoking after_role_update Extension Hook in PHP\nDESCRIPTION: Called after a role object is updated. Changes made to the object will not be automatically saved. Accepts the role object, its values, and modified values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/role.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_role_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Implementing the 'Anon' Checkbox in ExpressionEngine Login Form\nDESCRIPTION: Provides the HTML code for the 'anon' checkbox input within the login form. When checked (value='1'), the user's name will be hidden from the online users list if displayed using the Statistics Module.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/login.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"checkbox\" name=\"anon\" value=\"1\" checked=\"checked\" /> Show my name in the online users list\n```\n\n----------------------------------------\n\nTITLE: Encoded URI Search Query Example\nDESCRIPTION: Example of how an encoded search query appears in the URI format using Pro Search.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/settings.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndomain.com/search/results/eyJrZXl3b3JkcyI6ImhlbGxvIHdvcmxkIn0\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a Sidebar with the ExpressionEngine Sidebar Service in PHP\nDESCRIPTION: Demonstrates the basic usage of the ExpressionEngine `CP/Sidebar` service in PHP to construct a control panel sidebar. It shows how to instantiate the sidebar, add basic items with optional icons and active states, insert dividers, add headers, create basic and folder lists under headers, and add items to these lists with various configurations like edit URLs, remove confirmations, identifiers, and default/delete actions. This illustrates the fluent interface for building complex sidebar structures.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// The Control Panel's left sidebar is built with the Sidebar Service:\n$sidebar = ee('CP/Sidebar')->make();\n\n// You can add items:\n$item = $sidebar->addItem(lang('new'), ee('CP/URL', 'addons/settings/fortune_cookie/create'));\n\n// Items can have an icon:\n$item->withIcon('truck');\n\n// Items may be marked as active:\n$item->isActive();\n\n// You can add dividers:\n$sidebar->addDivider();\n\n// You can add a header:\n$header = $sidebar->addHeader('Settings');\n\n// Header's may have a list. A list may be a basic list or a folder list:\n$basic_list  = $header->addBasicList();\n$folder_list = $header->addFolderList($name);\n\n// Lists have items:\n$basic_item  = $basic_list->addItem($text, $url);\n$folder_item = $folder_list->addItem($text, $url)\n    ->withEditUrl($url)\n    ->withRemoveConfirmation($msg)\n    ->identifiedBy($id);\n\n// Folder list items may also be marked as default:\n$folder_item->asDefaultItem();\n\n// Basic list items may also be marked as a delete action:\n$basic_item->asDeleteAction();\n\n// You can add a folder list directly to a sidebar without a header:\n$folder_list = $sidebar->addFolderList($name);\n```\n\n----------------------------------------\n\nTITLE: Configuring 404 Error Page in ExpressionEngine Config (PHP)\nDESCRIPTION: Sets which template should be displayed when a visitor tries to access an invalid URL. Defines the template group and template name to use for 404 responses.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_143\n\nLANGUAGE: PHP\nCODE:\n```\n$config['site_404'] = 'site/404';\n```\n\n----------------------------------------\n\nTITLE: Specifying Relationship Keys in HasMany/BelongsTo Relations - PHP\nDESCRIPTION: Expands on relationship metadata by demonstrating how to specify custom 'from_key' and 'to_key' fields in PHP. This is necessary when the default keys don’t match the underlying database schema. The output is a relationships array correctly mapping properties to DB columns, allowing for flexible ORM associations in ExpressionEngine models.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/building-your-own.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprotected static $_relationships = array(\n  'Author' => array(\n    'model' => 'Member',\n    'type' => 'BelongsTo',\n    'from_key' => 'author_id',\n    'to_key' => 'member_id'\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache for HTTP Authentication with PHP-FPM/FastCGI\nDESCRIPTION: Provides `.htaccess` rules to ensure the `HTTP_AUTHORIZATION` environment variable is correctly passed to PHP when using PHP-FPM or FastCGI. This is necessary for ExpressionEngine's HTTP Authentication feature to work in such server environments. Two alternative methods using `SetEnvIf` or `RewriteRule` are shown.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/template-manager.md#2025-04-22_snippet_0\n\nLANGUAGE: apacheconf\nCODE:\n```\nSetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n```\n\nLANGUAGE: apacheconf\nCODE:\n```\nRewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\n```\n\n----------------------------------------\n\nTITLE: Calling Member Logout Extension Hook in PHP\nDESCRIPTION: Demonstrates the call to the 'member_member_logout' extension hook, which enables performing additional actions after a member logs out.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/member-auth.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$edata = ee()->extensions->call('member_member_logout');\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection Type in ExpressionEngine\nDESCRIPTION: PHP configuration setting to ensure non-persistent database connections in ExpressionEngine's config.php file.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/error-messages.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$config['db_conntype'] = \"0\";\n```\n\n----------------------------------------\n\nTITLE: Formatting Last Visit Variable - ExpressionEngine Variable\nDESCRIPTION: Illustrates formatted date output for last_visit using format parameter. The formatting follows strftime conventions. Only accessible within a member row context.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_17\n\nLANGUAGE: ExpressionEngine Template Markup\nCODE:\n```\n{last_visit format=\"%m/%d/%Y\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing save_global_settings() for Google Maps Fieldtype\nDESCRIPTION: Handles saving the global settings for the Google Maps fieldtype. This method merges the POST data with existing settings to ensure all settings are preserved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/example.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction save_global_settings()\n{\n    return array_merge($this->settings, $_POST);\n}\n```\n\n----------------------------------------\n\nTITLE: Calling the relationships_query_result Hook in PHP\nDESCRIPTION: This snippet shows how the relationships_query_result hook is invoked. It allows developers to modify or add columns to the relationships array, but should not be used to remove elements.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/relationships.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$entry_lookup = ee()->extensions->call('relationships_query_result', $entry_lookup);\n```\n\n----------------------------------------\n\nTITLE: Calling Process Reset Password Extension Hook in PHP\nDESCRIPTION: Shows how to call the 'member_process_reset_password' extension hook, allowing for additional actions after a user resets their password.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/member-auth.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$data = ee()->extensions->call('member_process_reset_password', $data);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy IP Addresses in ExpressionEngine\nDESCRIPTION: Sets an allow list of reverse proxy servers that may forward the visitor's IP address. This setting is deprecated in favor of using the proxy.php config file.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_103\n\nLANGUAGE: php\nCODE:\n```\n$config['proxy_ips'] = '10.0.1.25, 10.0.1.26';\n```\n\n----------------------------------------\n\nTITLE: Setting the URL for a FolderItem in PHP\nDESCRIPTION: Sets the navigation URL for the `FolderItem`. Accepts a CP/URL object or a string. Returns the `FolderItem` instance (`$this`) for method chaining.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nwithUrl($url)\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_form_settings_save Extension Hook in PHP\nDESCRIPTION: Demonstrates how the after_channel_form_settings_save extension hook is called. This hook triggers after a channel form settings object is inserted or updated, and changes made to the object will not be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-form-settings.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_form_settings_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Configuring URI Protocol in ExpressionEngine (PHP)\nDESCRIPTION: This PHP configuration snippet illustrates how to explicitly set the URI protocol for ExpressionEngine (EE) by modifying the system/user/config/config.php file. The setting $config['uri_protocol'] = 'QUERY_STRING'; instructs EE to parse URLs based on the query string method, which is critical on some hosting environments where EE's default URL parsing may not work. It assumes EE is fully installed and configured, and does not require additional dependencies other than access to the config file. This impacts how the system resolves templates and content from permalinks.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/url-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$config['uri_protocol'] = 'QUERY_STRING';\n```\n\n----------------------------------------\n\nTITLE: Checking User's Username\nDESCRIPTION: Shows how to test against the username of the logged in user.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_29\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if username != \"HAL9000\"}  I'm sorry Dave, I'm afraid I can't do that.  {/if}\n```\n\n----------------------------------------\n\nTITLE: Limiting Characters in PHP\nDESCRIPTION: Limits a string to a predefined number of characters with an optional end character. No additional dependencies apart from PHP standard library. Parameters include 'characters' and 'end_char'. Returns a Formatter object.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n### `limitChars(\\$options = [])`\n\nLimit to X characters, with an optional end character\n\n| Parameter | Type     | Description                                                                                                                                                                                                  |\n| --------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| \\$options | `Array`  | (int) **characters** (default: 500) - number of characters to limit to, does not preserve whole words <br> (string) **end_char** (default: &\\#8230;) - character to use when the limit terminates the string |\n| Returns   | `Object` | A Formatter object\n```\n\n----------------------------------------\n\nTITLE: Binding Fluid JavaScript Events\nDESCRIPTION: Shows how to bind JavaScript events for Fluid fieldtypes, allowing fieldtypes to respond to Fluid field-related actions on the publish form.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/fieldtypes.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nFluidField.on(\"date\", \"add\", function(element)\n{\n    // Act on event\n});\n```\n\n----------------------------------------\n\nTITLE: Defining CategoryGroupSettings Class in PHP\nDESCRIPTION: Class definition for ExpressionEngine\\Model\\CategoryGroupSettings, including properties, relationships, methods, and events.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/category-group-settings.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass ExpressionEngine\\Model\\CategoryGroupSettings\n{\n    // Properties\n    public $category_group_settings_id;\n    public $site_id;\n    public $group_id;\n    public $channel_id;\n    public $cat_required;\n    public $cat_allow_multiple;\n\n    // Relationships\n    public function Site() {}\n    public function Channel() {}\n    public function CategoryGroup() {}\n\n    // Methods\n    public function getAllCustomFields() {}\n    public function createCategoryField() {}\n    public function getContentType() {}\n    public function getCategoryTree() {}\n    public function getFieldMetadata() {}\n    public function populateCategories() {}\n    public function buildCategoryOptionsTree() {}\n    public function buildCategoryList($categories, $sort_column) {}\n\n    // Events\n    public function afterDelete() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Example Email List for Channel Notifications\nDESCRIPTION: Illustrates the format for specifying multiple email recipients for channel entry or comment notifications when notifications are enabled. Addresses should be enclosed in angle brackets (optional but shown) and separated by commas.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/channels.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n<admin@example.com>, <joe@example.com>\n```\n\n----------------------------------------\n\nTITLE: Calling before_member_field_save Extension Hook in PHP\nDESCRIPTION: Demonstrates how the before_member_field_save hook is called before a MemberField model is saved (inserted or updated). Changes made to the model object will be automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member-field.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_member_field_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: URL Path Variable Usage in ExpressionEngine\nDESCRIPTION: Examples showing how to use path variables for creating entry links, including both ID-based and URL title-based paths.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entry-linking.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{id_path='site/index'}\">{title}</a>\n<a href=\"{path='SITE_INDEX'}\">{title}</a>\n```\n\n----------------------------------------\n\nTITLE: Filtering Comments by Status - ExpressionEngine Template\nDESCRIPTION: The status parameter restricts comments shown to those matching a specific status, such as 'Closed'. This is often used for workflow and moderation control.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_12\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\nstatus=\"Closed\"\n```\n\n----------------------------------------\n\nTITLE: Changing Parsing Order in ExpressionEngine Templates\nDESCRIPTION: Shows how to control the order in which nested plugins are parsed using the parse=\"inward\" parameter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/language.md#2025-04-22_snippet_10\n\nLANGUAGE: ee\nCODE:\n```\n{exp:rss_parser url=\"https://ellislab.com/blog/rss-feed\" limit=\"5\" parse=\"inward\"}\n    {feed_items}\n        <a href=\"{item_link}\">{item_title}</a><br />\n        {exp:word_limit total=\"20\"}\n            {content}\n        {/exp:word_limit}<br />\n    {/feed_items}\n{/exp:rss_parser}\n```\n\n----------------------------------------\n\nTITLE: Customizing Excerpt Data with pro_search_excerpt Hook\nDESCRIPTION: This hook allows customization of the excerpt data before display in Pro Search. It receives entry IDs, entry details, and field ID, returning modified excerpt data. The hook fits in the ExpressionEngine framework, enabling developers to control the formatting of search result excerpts.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$str = ee()->extensions->call('pro_search_excerpt', $entry_ids, $row, $field_id);\n```\n\n----------------------------------------\n\nTITLE: Locating Default Member Profile Theme Files\nDESCRIPTION: Specifies the default directory path within an ExpressionEngine installation where the legacy Member Profile Template files are located.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/template-manager.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nthemes/ee/member/default/\n```\n\n----------------------------------------\n\nTITLE: Implementing JavaScript Event Listeners for Live Preview in JavaScript\nDESCRIPTION: JavaScript event handler that listens for live preview opening to allow fieldtypes to perform special initialization or cleanup when the preview modal opens.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/enhanced.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$(document).on('entry:preview-open', function(event) {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing before_category_field_delete Hook in PHP\nDESCRIPTION: Example of how the before_category_field_delete hook is called in ExpressionEngine. This hook is triggered before a category field is deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-field.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_category_field_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Row End Definition in ExpressionEngine\nDESCRIPTION: Defines the end tag for a table row in calendar templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/calendar.md#2025-04-22_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n{row_end}</tr>{/row_end}\n```\n\n----------------------------------------\n\nTITLE: Looping Over Multi-Valued Parameters - ExpressionEngine Template Tag\nDESCRIPTION: This snippet demonstrates looping over a multi-valued parameter called category using the paired {exp:pro_search:param:loop} tag. It sets the variable name with the as parameter and references a dynamic query source, outputting each value in sequence.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_19\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:param:loop get=\"category\" as=\"cat_id\" query=\"{segment_3}\"}\n {cat_id}\n{/exp:pro_search:param:loop}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Markdown\nDESCRIPTION: This snippet demonstrates how to embed a YouTube video using HTML within a Markdown file. It creates a responsive video wrapper with an iframe for the YouTube video.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/advanced-usage/front-end/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"video-wrapper\">\n<iframe src=\"https://www.youtube.com/embed/O5G3hd9PBUM?vq=HD1080\" width=\"1920\" height=\"1080\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Removing Close All HTML Tags Button in ExpressionEngine\nDESCRIPTION: Controls whether to display the button that closes all HTML tags on the publish page and in user-side HTML formatting tools. Modern browsers typically don't need this feature.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_114\n\nLANGUAGE: php\nCODE:\n```\n$config['remove_close_all_button'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Enabling Template Global Variables File Saving in ExpressionEngine\nDESCRIPTION: Determines whether template global variables are saved as files. Set to 'y' to enable file-based storage of global variables or 'n' to disable.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_123\n\nLANGUAGE: php\nCODE:\n```\n$config['save_tmpl_globals'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Entry Cloning Configuration in PHP\nDESCRIPTION: Enables or disables the 'Clone to New Entry' option globally.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n$config['enable_entry_cloning'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Displaying Ignore List Members with ExpressionEngine Ignore List Tag - ExpressionEngine Tag Syntax\nDESCRIPTION: This code snippet shows how to use the {exp:member:ignore_list} tag pair in an ExpressionEngine template to display the screen name of each member in the current user's ignore list. No parameters are specified here, so it operates on the currently logged-in user's ignore list. The output will create a paragraph for each ignored member's screen name. Avoid using template caching with this tag; otherwise, data will be shared incorrectly across users.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/ignore-list.md#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine Tag Syntax\nCODE:\n```\n{exp:member:ignore_list}\\n  <p>{ignore_screen_name}</p>\\n{/exp:member:ignore_list}\n```\n\n----------------------------------------\n\nTITLE: Implementing Eager Loading for Relationships in ExpressionEngine PHP\nDESCRIPTION: Shows how to use eager loading with the with() method to improve performance by loading related models in a single query.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$templates = ee('Model')->get('Template')->with('TemplateGroup')->all();\n\nforeach ($templates as $template)\n{\n  $group = $template->TemplateGroup; // OK, already loaded\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Window Broadcast Events with jQuery in ExpressionEngine (JavaScript)\nDESCRIPTION: This snippet demonstrates how to listen for ExpressionEngine's custom 'broadcast' event on the window object using jQuery. The provided callback function executes when a 'broadcast' event is received from another window, receiving the sent message as an argument.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/events.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n$(window).on('broadcast', function(message) {\n  alert(message);\n});\n```\n\n----------------------------------------\n\nTITLE: Calling before_file_delete Hook in PHP\nDESCRIPTION: Demonstrates how the before_file_delete hook is called in ExpressionEngine. This hook is triggered before a file object is deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/file.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_file_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests Through UI\nDESCRIPTION: Opens the Cypress UI which allows individual test selection and execution. This command is useful for debugging and visual check of test execution flow.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/cypress-tests.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run cypress:open\n```\n\n----------------------------------------\n\nTITLE: Calling after_template_route_delete Hook\nDESCRIPTION: Extension hook called after deleting a template route object.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-route.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_template_route_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Anonymizing IP Addresses using ExpressionEngine's IP Address Service\nDESCRIPTION: This snippet demonstrates how to use the IP Address service to anonymize an IP address. The anonymize() method uses subnet masks to remove specific details while retaining general geographic information.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/ipaddress.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$ip_address = ee('IpAddress')->anonymize($ip_address);\n```\n\n----------------------------------------\n\nTITLE: Save Method for Tab Data in PHP\nDESCRIPTION: Facilitates the persistence of tab field data into the database during and after an entry save operation. It ensures that fields marked for saving are updated within the database upon successful validation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/tab-files.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n    function save($entry, $values)\n    {\n        if (! isset($values['field_name_one']) OR $values['field_name_one'] == '')\n        {\n            return;\n        }\n\n        $data = array(\n            'entry_id' => $entry->entry_id,\n            'file_id' => $values['field_name_one']\n        );\n\n        ee()->db->insert('table_name', $data);\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Form Element as a Filter in jQuery Table Plugin\nDESCRIPTION: Demonstrates how to add a filter to the ExpressionEngine table plugin using a jQuery object representing a form element. The plugin will use the form's input values to filter the table data. This requires the table to be initialized with the plugin.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/table.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n$('table').table('add_filter', $('form'));\n```\n\n----------------------------------------\n\nTITLE: Generating Database Migration for an ExpressionEngine Action\nDESCRIPTION: This PHP code represents a database migration automatically generated by the ExpressionEngine CLI when creating an action. The `up()` method registers the action (class, method, CSRF status) in the `exp_actions` table upon add-on installation or update. The `down()` method removes the action entry during uninstallation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n//database/migrations/[timestamp]_[mirgrationname].php\n<?php\n\nuse ExpressionEngine\\Service\\Migration\\Migration;\n\nclass CreateactionamazingactionforaddonamazingAddOn extends Migration\n{\n    /**\n     * Execute the migration\n     * @return void\n     */\n    public function up()\n    {\n        ee('Model')->make('Action', [\n            'class' => 'Amazing_add_on',\n            'method' => 'AmazingAction',\n            'csrf_exempt' => false,\n        ])->save();\n    }\n\n    /**\n     * Rollback the migration\n     * @return void\n     */\n    public function down()\n    {\n        ee('Model')->get('Action')\n            ->filter('class', 'Amazing_add_on')\n            ->filter('method', 'AmazingAction')\n            ->delete();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Items and Submenus to Control Panel Menu - ExpressionEngine - PHP\nDESCRIPTION: This snippet shows how to utilize the ExpressionEngine\\Service\\CustomMenu\\Menu object's API to add new items and submenus to the control panel menu. addItem inserts a single link, while addSubmenu creates a dropdown submenu for grouping multiple related links. These methods require the Menu object and use the ee('CP/URL')->make method to build URLs. The resulting menu or submenu can be further customized.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/menu.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$menu->addItem('Title', ee('CP/URL')->make('addons/settings/myaddon'));\n\n// call addSubmenu to create a dropdown menu\n// this returns a submenu object\n$sub = $menu->addSubmenu('Title');\n```\n\n----------------------------------------\n\nTITLE: Calling after_category_bulk_delete Hook in PHP\nDESCRIPTION: This snippet illustrates the call to the after_category_bulk_delete hook. It passes an array of primary key IDs of the models that were deleted as a parameter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_category_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Quoting Text with BBCode\nDESCRIPTION: Demonstrates using the [quote] BBCode tag to enclose text that is being quoted from another source. This typically renders as an HTML <blockquote> element.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/bbcode.md#2025-04-22_snippet_11\n\nLANGUAGE: bbcode\nCODE:\n```\n[quote]Some text. blah, blah, blah...[/quote]\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Folder Path in ExpressionEngine (PHP)\nDESCRIPTION: Sets the server path to the themes directory for ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_159\n\nLANGUAGE: php\nCODE:\n```\n$config['theme_folder_path'] = '/home/usr/domain.com/public_html/themes/';\n```\n\n----------------------------------------\n\nTITLE: Calling before_member_field_bulk_delete Extension Hook in PHP\nDESCRIPTION: Demonstrates how the before_member_field_bulk_delete hook is called before multiple MemberField models are deleted in bulk. This hook was introduced in ExpressionEngine 4.3.0.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member-field.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_member_field_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Grid in HTML\nDESCRIPTION: This HTML snippet creates a responsive grid layout to display contributor information, including avatars, names, and GitHub links.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/23382425?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yulyaswan</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=Yulyaswan\" target=\"_BLANK\">@Yulyaswan</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/563996?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Bryan Nielsen</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bryannielsen\" target=\"_BLANK\">@bryannielsen</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/6020323?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Doug Black</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=dougblackjr\" target=\"_BLANK\">@dougblackjr</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering RTE Field in Text-Only Mode - ExpressionEngine Template\nDESCRIPTION: Shows how to output the content of an RTE field with all HTML tags removed by using the 'text_only' parameter set to 'yes'. This is useful for generating plain text versions of content (e.g. RSS feeds). Inputs: text_only parameter. Outputs: Plain text from the RTE field.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/rte.md#2025-04-22_snippet_4\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{rte_field text_only=\"yes\"}\n```\n\n----------------------------------------\n\nTITLE: Generating Category Link with {path} in ExpressionEngine\nDESCRIPTION: Provides a standalone example of an HTML anchor tag using ExpressionEngine's `{path}` variable to create a link. The `site/categories` parameter defines the target template group/template path for displaying entries of the associated category.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{path='site/categories'}\">{category_name}</a>\n```\n\n----------------------------------------\n\nTITLE: Using path Variable with Archive Month Links in ExpressionEngine\nDESCRIPTION: Demonstrates how to create clickable archive links using the path variable to point to a specific template, with the month/year automatically appended to the URL.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/archive-months.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{path='channel/archives'}\">{month}, {year}</a>\n```\n\n----------------------------------------\n\nTITLE: Calling after_member_bulk_delete Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the after_member_bulk_delete hook is called in ExpressionEngine. This hook is triggered after multiple member objects are deleted from the database in a bulk operation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_member_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Embedding a YouTube Video in Documentation (HTML)\nDESCRIPTION: This snippet demonstrates how to embed a YouTube video within documentation using an HTML iframe. It specifies the source URL, sets dimensions, and enables fullscreen mode with several compatibility parameters. No external dependencies are required; the code is intended to be placed in HTML or Markdown supporting raw HTML.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/number.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\\\"video-wrapper\\\">\\n<iframe src=\\\"https://www.youtube.com/embed/84i7HlkRxfg?vq=HD1080\\\" width=\\\"1920\\\" height=\\\"1080\\\" frameborder=\\\"0\\\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Enabling PayPal Button Encryption for Simple Commerce\nDESCRIPTION: Controls encryption for PayPal purchase links and buttons. Requires OpenSSL support and proper certificate configuration. Set to 'y' to enable encryption or 'n' to disable.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_126\n\nLANGUAGE: php\nCODE:\n```\n$config['sc_encrypt_buttons'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Interactive Add-On Generation with ExpressionEngine CLI - Bash\nDESCRIPTION: This Bash code block demonstrates an interactive session with the ExpressionEngine make:addon command. The user executes the PHP CLI tool, answers a series of prompts about the new add-on such as its name, description, version, author, and author URL. The CLI then confirms creation. The snippet expects ExpressionEngine and its CLI script to be installed, and users must provide details interactively during execution.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/make-addon.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n    $ php system/ee/eecli.php make:addon\\n    Let's build your add-on!\\n    What is the name of your add-on? Amazing Add-On\\n    Add-on description? [Amazing Add-on description] This add-on does amazing things!\\n    Add-on version? [1.0.0]1.0.0\\n    Add-on author? ExpressionEngine Developer\\n    Add-on author URL? www.expressionengine.com\\n    Let's build!\\n    Your add-on has been created successfully!\n```\n\n----------------------------------------\n\nTITLE: Calling before_template_insert Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the before_template_insert hook is called in ExpressionEngine. This hook is triggered before a template is inserted and allows modifications to the template object that will be automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_template_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling after_category_group_insert Hook in PHP\nDESCRIPTION: Example of how the after_category_group_insert hook is called. This hook is triggered after a category group is inserted into the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-group.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_category_group_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in HTML\nDESCRIPTION: This snippet demonstrates how to embed a YouTube video using an iframe within a div for responsive layout. The video showcases side-by-side field layout in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/channels.md#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"video-wrapper\">\n<iframe src=\"https://www.youtube.com/embed/B7HvEKOF7gU?si=y4q_45V1bcZIEKa_\" title=\"Side by Side Field Layout in ExpressionEngine\" width=\"1920\" height=\"1080\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Formatting Comment Edit Date in ExpressionEngine\nDESCRIPTION: Displays the date a comment was last edited using the `{edit_date}` variable. The `format` parameter allows specifying the output format using standard date formatting codes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_22\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{edit_date format=\"%Y %m %d\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Sub-Sort Criteria in jQuery Table Plugin\nDESCRIPTION: Provides an example of adding a secondary sorting criterion (sub-sort) to the current sort configuration using the `add_sort` method of the ExpressionEngine table plugin. Takes column name and direction (`asc` or `desc`) as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/table.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n$('table').table('add_sort', 'age', 'desc');\n```\n\n----------------------------------------\n\nTITLE: Calling After Save Hook in ExpressionEngine PHP\nDESCRIPTION: Extension hook called after saving (inserting or updating) a specialty template object. Changes made to the object will not be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-specialty-template.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_specialty_template_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Fieldtype Generator Class\nDESCRIPTION: Complete implementation of a Grid fieldtype generator class that extends AbstractFieldTemplateGenerator. Demonstrates how to generate variables for Grid columns including their properties and associated fieldtype information.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/template-generator.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace ExpressionEngine\\Addons\\Grid\\TemplateGenerators;\n\nuse ExpressionEngine\\Service\\TemplateGenerator\\AbstractFieldTemplateGenerator;\nuse ExpressionEngine\\Service\\TemplateGenerator\\FieldTemplateGeneratorInterface;\n\nclass Grid extends AbstractFieldTemplateGenerator implements FieldTemplateGeneratorInterface\n{\n    public function getVariables(): array\n    {\n        $vars = [\n            'columns' => []\n        ];\n\n        //get the list of columns for this field\n        foreach ($this->field->GridColumns as $column) {\n            $fieldtypeGenerator = ee('TemplateGenerator')->getFieldtype($column->col_type);\n\n            $vars['columns']['grid_col_' . $column->col_id] = [\n                'col_type' => $column->col_type,\n                'col_name' => $column->col_name,\n                'col_label' => $column->col_label,\n                'field_type' => $column->col_type,\n                'field_name' => $prefix . ':' . $column->col_name,\n                'field_label' => $column->col_label,\n                'stub' => $fieldtypeGenerator['stub'],\n                'docs_url' => $fieldtypeGenerator['docs_url'],\n                'is_tag_pair' => $fieldtypeGenerator['is_tag_pair'],\n            ];\n        }\n\n        return $vars;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling before_file_save Hook in PHP\nDESCRIPTION: Shows how the before_file_save hook is called in ExpressionEngine. This hook is triggered before a file object is inserted or updated, with changes being saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/file.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_file_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Encrypted Files Path for Simple Commerce\nDESCRIPTION: Specifies the server path where temporarily stored encrypted files for PayPal transactions will be saved. Should be in a location not accessible via the web.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_131\n\nLANGUAGE: php\nCODE:\n```\n$config['sc_temp_path'] = \"/path/to/tmp\";\n```\n\n----------------------------------------\n\nTITLE: Generating AJAX Edit URL in ExpressionEngine\nDESCRIPTION: Demonstrates how to output an AJAX URL for comment editing in ExpressionEngine. This URL is crucial for routing client-side edit requests to server-side handlers, requiring parameters like comment id and action type. Ensure secure forms setting is configured if applicable.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/form.md#2025-04-22_snippet_3\n\nLANGUAGE: EE Template Language\nCODE:\n```\n{exp:comment:ajax_edit_url}\n```\n\n----------------------------------------\n\nTITLE: Generating Jump File for ExpressionEngine Add-on using CLI\nDESCRIPTION: This snippet demonstrates how to use the ExpressionEngine CLI to generate a jump file for an add-on. It creates a 'jump.amazing_add_on.php' file in the add-on directory.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/jump-menu.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php make:jump \nLet's create an add-on Jump File!\nWhat add-on is the Jumps file being added to? (amazing_add_on, cron):  [amazing_add_on]\nBuilding Add-on Jumps file now.\nJumps file successfully created! Please note: You may need to clear your browser cache before you can see the new jump menu items\n```\n\n----------------------------------------\n\nTITLE: Redirecting on Extra URL Segments - ExpressionEngine Template\nDESCRIPTION: This snippet uses an {if} conditional to check if the third URL segment (segment_3) is not empty. If so, it uses the {redirect} global variable to send the user to the defined 404 error template. This approach is typically used in a template file to handle situations where the URL includes more segments than expected. Dependencies include ExpressionEngine template variables and proper 404 template configuration. Inputs: URL segments; Output: 404 redirect if condition is met.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/404pages.md#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{if segment_3 != ''}\n  {redirect=\"404\"}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Working with Model Relationships in ExpressionEngine\nDESCRIPTION: Demonstrates how to access relationships between models using their uppercase name as a property, which may return either a collection or a single related model.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$channel->ChannelEntries;\n```\n\n----------------------------------------\n\nTITLE: Using Site Index Path in ExpressionEngine Categories\nDESCRIPTION: Demonstrates using the SITE_INDEX keyword in the path variable to create cleaner URLs pointing to the main site index page.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/categories.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{path='SITE_INDEX'}\">{category_name}</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hidden Template Indicator in ExpressionEngine\nDESCRIPTION: PHP configuration to change the default hidden template indicator from underscore to another character, like a period.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$config['hidden_template_indicator'] = '.';\n```\n\n----------------------------------------\n\nTITLE: Conditional Display Based on RTE Excerpt Existence - ExpressionEngine Template\nDESCRIPTION: Illustrates using an ExpressionEngine conditional to check if the RTE field contains a 'Read More' separator. If present (when 'has_excerpt' equals 'y'), it outputs a 'Read more...' link. Dependencies: Requires ExpressionEngine conditionals and a blog channel with 'url_title'. Inputs: The condition uses 'rte_field:has_excerpt'. Outputs: Optionally adds a link based on excerpt availability.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/rte.md#2025-04-22_snippet_2\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{if rte_field:has_excerpt=='y'}\n    <a href=\"{path='blog/full-posts/{url_title}'}\">Read more...</a>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Specify Category Groups in Display with Show Group - markup\nDESCRIPTION: The 'show_group' parameter allows selection of specific category groups to display in {categories}. It filters categories by group IDs and can also exclude certain groups using the 'not' keyword.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_59\n\nLANGUAGE: markup\nCODE:\n```\n{categories show_group=\"1|3\"}\n{categories show_group=\"not 2|4\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Model Query in ExpressionEngine PHP\nDESCRIPTION: Gets a model builder object for the Template model, which is used to narrow down selection criteria before retrieving data.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder = ee('Model')->get('Template');\n```\n\n----------------------------------------\n\nTITLE: Displaying Checkbox/Multi Select (Variable Pair) in ExpressionEngine Fluid Field\nDESCRIPTION: Demonstrates iterating through the selected options of a checkbox or multi-select field (`my_checkbox`) nested within a Fluid Field (`my_fluid_field`) using the `{content}` variable pair. It shows how to access both the value (`{item:value}`) and label (`{item:label}` or shorthand `{item}`) for each selected option.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/fluid.md#2025-04-22_snippet_6\n\nLANGUAGE: ee\nCODE:\n```\n{my_fluid_field}\n  {my_fluid_field:my_checkbox}\n    {content}\n     Value: {item}<br>\n     Value: {item:value}<br>\n     Label: {item:label}<br>\n   {/content}\n  {/my_fluid_field:my_checkbox}\n{/my_fluid_field}\n```\n\n----------------------------------------\n\nTITLE: Including Assets Parameter - ExpressionEngine Template Syntax\nDESCRIPTION: Configures the form to include required JavaScript and CSS by setting the include_assets parameter. Required for handling custom member fields' UI in registration forms. By default, these assets are not included, so explicit inclusion may be necessary to ensure complete functionality.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_3\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\ninclude_assets=\"yes\"\n```\n\n----------------------------------------\n\nTITLE: Search Log Configuration in PHP\nDESCRIPTION: Enables or disables logging of searched terms.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_67\n\nLANGUAGE: php\nCODE:\n```\n$config['enable_search_log'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: Using fields->id Method in Pro Search\nDESCRIPTION: Retrieves the field ID for a given custom field name, returning the field ID or 0 if no valid ID is found.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/functions.md#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$field_id = $this->fields->id('field_name');\n```\n\n----------------------------------------\n\nTITLE: Categories Hook Implementation\nDESCRIPTION: Demonstrates the channel_module_categories_start hook for category tag processing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/channel.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->extensions->call('channel_module_categories_start');\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_delete Hook in PHP\nDESCRIPTION: Example of how the before_channel_delete hook is called in ExpressionEngine. This hook is triggered before a channel object is deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Listing Uninstalled ExpressionEngine Add-ons via CLI (PHP)\nDESCRIPTION: Executes the `addons:list` command with the `u` or `uninstalled` flag using the ExpressionEngine CLI (`eecli.php`). This command filters the list to show only add-ons that are present in the system files but are not currently installed. Requires PHP and the ExpressionEngine CLI environment.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/addons.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php addons:list u\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php addons:list uninstalled\n```\n\n----------------------------------------\n\nTITLE: Basic Simple Search Form Implementation - ExpressionEngine Template\nDESCRIPTION: Shows the basic implementation of a Simple Search Form with keywords input and submit button. Includes an optional link to advanced search.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/search/simple.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{exp:search:simple_form channel=\"news\"}\n    <p>\n        <label for=\"keywords\">Search:</label><br>\n        <input type=\"text\" name=\"keywords\" id=\"keywords\" value=\"\" size=\"18\" maxlength=\"100\">\n    </p>\n    <p>\n        <a href=\"{path='search/index'}\">Advanced Search</a>\n    </p>\n    <p>\n        <input type=\"submit\" value=\"submit\" class=\"submit\">\n    </p>\n{/exp:search:simple_form}\n```\n\n----------------------------------------\n\nTITLE: Breadcrumbs JSON-LD Implementation\nDESCRIPTION: Advanced example showing breadcrumb implementation with JSON-LD structured data\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/layouts.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"BreadcrumbList\",\n  \"itemListElement\": [\n    {\n      \"@type\": \"ListItem\",\n      \"position\": 1,\n      \"item\": {\n        \"@id\": \"{homepage}\",\n        \"name\": \"Home\"\n      }\n    }\n    {layout:breadcrumb_urls}\n      ,{\n        \"@type\": \"ListItem\",\n        \"position\": {layout:breadcrumb_jsonld_positions index='{index}'},\n        \"item\": {\n          \"@id\": \"{value}\",\n          \"name\": \"{layout:breadcrumb_titles index='{index}'}\"\n        }\n      }\n    {/layout:breadcrumb_urls}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Last Segment Check\nDESCRIPTION: Shows how to use the last_segment variable in a conditional statement.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/url-segments.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{if last_segment == 'joe'}  Hey Joe, where you goin' with that? {/if}\n```\n\n----------------------------------------\n\nTITLE: Using pro_search_catch_search Hook in ExpressionEngine PHP\nDESCRIPTION: This snippet demonstrates using the pro_search_catch_search hook for checking and modifying incoming data after a Pro Search form submission. It processes the combined GET and POST data, with the potential to terminate script execution if desired. Dependencies include the ExpressionEngine extensions library.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$data = ee()->extensions->call('pro_search_catch_search', $data);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Example HTML Form Submitting to an Action URL\nDESCRIPTION: This HTML snippet shows a basic web form that collects a first name and last name. The form's `action` attribute is set to the ExpressionEngine action URL (`/?ACT=41`), which targets the specific action created earlier (assuming its ID is 41). It uses the POST method.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"post\" action=\"/?ACT=41\">\n\n    <label for=\"fname\">First name:</label><br>\n    <input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br>\n    <label for=\"lname\">Last name:</label><br>\n    <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br>\n    <input type=\"submit\" value=\"Submit\">\n\n</form>\n```\n\n----------------------------------------\n\nTITLE: Calling before_file_bulk_delete Hook in PHP\nDESCRIPTION: Illustrates the usage of the before_file_bulk_delete hook in ExpressionEngine. This hook is triggered before a bulk deletion of file objects.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/file.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_file_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Calling after_category_group_save Hook in PHP\nDESCRIPTION: Example of how the after_category_group_save hook is called. This hook is triggered after a category group is saved (either inserted or updated) in the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-group.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_category_group_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Looping Through Cookies by Type - ExpressionEngine Template\nDESCRIPTION: This snippet shows how to use the {exp:consent:cookies} tag to display details about cookies used on the site, filtered by type using the type parameter (e.g., necessary). The template outputs formatted labels and variable values such as {cookie_name}, {cookie_provider}, and {cookie_lifetime}. Used for building cookie disclosure or policy pages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/consent.md#2025-04-22_snippet_15\n\nLANGUAGE: expressionengine-template\nCODE:\n```\n{exp:consent:cookies type=\"necessary\"}\n    Cookie name: {cookie_name}<br />\n    Title: {cookie_title}<br />\n    Description: {cookie_description}<br />\n    Is set by: {cookie_provider}<br />\n    Lifetime: {cookie_lifetime}<hr />\n{/exp:consent:cookies}\n```\n\n----------------------------------------\n\nTITLE: Calling member_register_validate_members Hook in PHP\nDESCRIPTION: This code demonstrates the call to the member_register_validate_members hook. It passes the member ID and checks for script termination.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/member-register.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('member_register_validate_members', $member_id);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Setting Control Panel URL in ExpressionEngine\nDESCRIPTION: Configures the full URL to the ExpressionEngine Control Panel. This can be set in the main configuration file or in the site/CP index files.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$config['cp_url'] = 'https://example.com/admin.php';\n```\n\nLANGUAGE: php\nCODE:\n```\n$assign_to_config['cp_url'] = 'https://domain2.com/admin.php';\n```\n\n----------------------------------------\n\nTITLE: Password Confirmation Input Field - HTML\nDESCRIPTION: Field for entering password confirmation during registration, ensuring the user's intended password is confirmed accurately. Uses type=\\\"password\\\" to mask the input.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<label>Confirm New Password</label><br />\n<input type=\"password\" name=\"password_confirm\" value=\"\" maxlength=\"50\" size=\"40\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Backup Cache Driver in ExpressionEngine (PHP)\nDESCRIPTION: Specifies a backup caching driver to use if the primary driver is unavailable. Accepts the same values as the primary cache_driver setting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$config['cache_driver_backup'] = 'file';\n```\n\n----------------------------------------\n\nTITLE: Front-end Editing Configuration in PHP\nDESCRIPTION: Controls the front-end editing functionality while maintaining Dock visibility and Prolets.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_61\n\nLANGUAGE: php\nCODE:\n```\n$config['enable_frontedit'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: Basic Layout Template Tag Usage\nDESCRIPTION: Shows how to reference a layout template using the layout tag syntax\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/layouts.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{layout=\"template_group/template\"}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Template Generators in ExpressionEngine CLI\nDESCRIPTION: This command lists all available template generators in the ExpressionEngine system using the Command Line Interface.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/generators.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp system/ee/eecli.php generate:templates --list\n```\n\n----------------------------------------\n\nTITLE: Invalid Operator Error\nDESCRIPTION: Examples of errors with invalid or missing operators in conditionals.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_38\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if segment_1 \"site\"}HELLO WORLD{/if}\n\nor:\n\n{if segment_1 ==== \"site\"}HELLO WORLD{/if}\n```\n\n----------------------------------------\n\nTITLE: Multi-Field Implementation Example in ExpressionEngine\nDESCRIPTION: Example showing specific field usage for multi-page content splitting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entry-spanning.md#2025-04-22_snippet_2\n\nLANGUAGE: expressionengine\nCODE:\n```\n{multi_field=\"page1|page2|page3\"}\n```\n\n----------------------------------------\n\nTITLE: URL Normalization in PHP\nDESCRIPTION: Demonstrates the url() method for normalizing and validating URLs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$str = 'www.example.com';\n$url = ee('Format')->make('Text', $str)->url();\n// https://www.example.com\n\n$str = 'https://';\n$url = ee('Format')->make('Text', $str)->url();\n// empty string, URL is invalid\n```\n\n----------------------------------------\n\nTITLE: Calling before_template_delete Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the before_template_delete hook is called in ExpressionEngine. This hook is triggered before a template is deleted, allowing for additional actions before deletion.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_template_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Outputting Date Variable as Relative Time in ExpressionEngine\nDESCRIPTION: Shows how to output a Date variable type as a relative time string using the pro_variables:single tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/type.md#2025-04-22_snippet_1\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_variables:single var=\"my_var\" modifier=\"relative\"}\n```\n\n----------------------------------------\n\nTITLE: Modifying and Saving Template Data with ExpressionEngine Model in PHP\nDESCRIPTION: This code provides an example of updating the contents of a template object retrieved using the ExpressionEngine Model service. After fetching the template, it assigns HTML code to the \\'template_data\\' property, validates the object, and saves it conditionally based on validation status. Requires ExpressionEngine environment and proper permissions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/template.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n// Get the template object.\\n$template = ee('Model')->get('Template')->filter('template_id', 6)->first();\\n\\n// Add the template code (html, EE tags...etc)\\n$template->template_data = \"<html>....</html>\";\\n\\n// Validate and Save the template.\\n$result = $template->validate();\\n\\nif ($result->isValid())\\n{\\n  $template->save();\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Channel Form Submit Entry Start Hook\nDESCRIPTION: Hook called at the start of entry submission processing. Receives the channel form object as parameter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/channel-form.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('channel_form_submit_entry_start', $this);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP Username in ExpressionEngine (PHP)\nDESCRIPTION: Sets the username for SMTP authentication when mail protocol is set to SMTP. Required for sending emails through an SMTP server that requires authentication.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_154\n\nLANGUAGE: PHP\nCODE:\n```\n$config['smtp_username'] = 'joe@example.com';\n```\n\n----------------------------------------\n\nTITLE: Required Email Input Field for Forgot Password Form\nDESCRIPTION: This HTML snippet shows the required email input field structure for the ExpressionEngine forgot password form. It includes a label and an input element of type 'email' with the name attribute set to 'email'. This field is mandatory for the form to function.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/forgot-password.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"email\">Email</label>\n<input type=\"email\" name=\"email\" value=\"\" maxlength=\"120\" size=\"40\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Future Text for Relative Dates in ExpressionEngine\nDESCRIPTION: Examples of customizing how future relative dates are displayed using the 'future' parameter. The %s placeholder is replaced with the relative date value.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/date-variable-formatting.md#2025-04-22_snippet_9\n\nLANGUAGE: expressionengine\nCODE:\n```\n{entry_date:relative future=\"%s until\"}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{entry_date:relative future=\"in %s time\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Login Link for Member Profiles in ExpressionEngine HTML\nDESCRIPTION: Provides a way to create a hyperlink pointing to the personal profile login page using an ExpressionEngine path variable. Integrate this link into your site's navigation to allow users easy access to log in to their profiles.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/profile-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{path='member/login'}\">Log In</a>\n```\n\n----------------------------------------\n\nTITLE: Contributors List HTML for ExpressionEngine 7.1.0\nDESCRIPTION: HTML markup that displays a grid of contributors to ExpressionEngine version 7.1.0, showing their profile images, names, and GitHub usernames with links to their commits.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/13821249?v=4\"><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Gavin * JCOGS</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=jcogs-design\" target=\"_BLANK\">@jcogs-design</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/53965?v=4\"><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Brian Litzinger</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=litzinger\" target=\"_BLANK\">@litzinger</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/35812875?v=4\"><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Gilbert</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=gilbert-hop\" target=\"_BLANK\">@gilbert-hop</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/931642?v=4\"><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Sobral</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=robsonsobral\" target=\"_BLANK\">@robsonsobral</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/14606?v=4\"><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Daniel Jalkut</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=danielpunkass\" target=\"_BLANK\">@danielpunkass</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/194579?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Andy Johnson</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=ajohnson\" target=\"_BLANK\">@ajohnson</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/11818941?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Matt Johnson</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=matthewjohns0n\" target=\"_BLANK\">@matthewjohns0n</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/23382425?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yulya Lebed</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=Yulyaswan\" target=\"_BLANK\">@Yulyaswan</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/1181219?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">robinsowell</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=robinsowell\" target=\"_BLANK\">@robinsowell</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calling the 'login_authenticate_start' Hook in PHP\nDESCRIPTION: This snippet shows how the 'login_authenticate_start' extension hook is called in ExpressionEngine. It allows developers to perform additional actions or take over the control panel login routine before standard authentication begins. The hook does not receive any parameters and returns void. Execution can be halted if the hook sets the 'end_script' property to TRUE.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/login.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->extensions->call('login_authenticate_start');\nif ($this->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Inserting Sort Order Options Select Dropdown - HTML with ExpressionEngine Variables\nDESCRIPTION: Provides select input for allowing user to choose between ascending and descending sort order via {sort_order_options}. Generates value options accordingly in the rendered form.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<select name='sort_order' class='select'>\n    {sort_order_options}\n</select>\n```\n\n----------------------------------------\n\nTITLE: Branch Naming Conventions in Markdown\nDESCRIPTION: Examples of recommended branch naming conventions for feature and bug fix branches.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `feature/my-feature-slug`\n- `bug/bug-description-slug`\n```\n\n----------------------------------------\n\nTITLE: Profile Path URL in ExpressionEngine Templates\nDESCRIPTION: Sets a URL to the author's profile for the current entry. Used within the 'entries' variable pair to link authors.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/calendar.md#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n{profile_path='member/profile'}\n```\n\n----------------------------------------\n\nTITLE: Rendering Date Field in ExpressionEngine Templates\nDESCRIPTION: Example of using a date field in an ExpressionEngine template with formatting parameters. The format parameter determines how the date will be displayed, in this case showing the month name, day number and year.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/date.md#2025-04-22_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n{date_field format=\"%F %d %Y\"}\n{!-- January 01 2019 --}\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_delete Hook in PHP\nDESCRIPTION: Example of how the after_channel_delete hook is called in ExpressionEngine. This hook is triggered after a channel object is deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Listing Available CLI Commands in ExpressionEngine with PHP\nDESCRIPTION: This snippet demonstrates how to use the ExpressionEngine command-line interface (eecli.php) to list all available CLI commands, including those from add-ons, via a simple shell command. There are no extra dependencies other than having PHP and ExpressionEngine installed. The primary parameter (\\\"list\\\") is passed to indicate the desired operation, and the expected output is a comprehensive list of CLI commands. Limitations include requiring correct path access to eecli.php.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/list.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n`php eecli.php list`\n```\n\n----------------------------------------\n\nTITLE: Rendering Options Loop in HTML Forms\nDESCRIPTION: This snippet demonstrates how to loop through options for fields that support choices, like checkboxes or dropdowns, in HTML forms within ExpressionEngine. The tag structure allows customizing the display of each option. This requires the field to have pre-defined options and assumes the use of ExpressionEngine's template parsing system.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n\n<select name=\"my_field_name\">\n  {options:my_field_name}\n    <option value=\"{option_value}\"{selected}>{option_name}</option>\n  {/options:my_field_name}\n</select>\n\n```\n\n----------------------------------------\n\nTITLE: Displaying a List of Popular Keywords - ExpressionEngine Template Tag\nDESCRIPTION: This snippet lists popular search keywords by count, using {exp:pro_search:popular}, and wraps the output in a <ul> if results are found. It expects Search Log to be enabled and may use variables like count, total_results, keywords, and search_count for dynamic result rendering.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_21\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:popular limit=\"10\"}\n {if count == 1}<ul>{/if}\n  <li>{keywords}: {search_count}</li>\n {if count == total_results}</ul>{/if}\n{/exp:pro_search:popular}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Fetching an Action ID in PHP\nDESCRIPTION: This PHP snippet demonstrates how to retrieve the Action ID (`ACT` ID) for a specific add-on method dynamically using ExpressionEngine's Control Panel library (`CP Class`). This is the recommended way to get the action ID for use in templates, as IDs can vary between installations. It fetches the ID for the `ExampleAction` method within the `Amazing_add_on` class.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$aid = ee()->cp->fetch_action_id(`Amazing_add_on`, `ExampleAction`);\n```\n\n----------------------------------------\n\nTITLE: Filtering Comments by Channel - ExpressionEngine Template\nDESCRIPTION: This snippet shows how to restrict the {exp:comment:entries} tag to specific channels by using the channel parameter. It is essential for limiting comment retrieval to approved or relevant content, thus preventing unauthorized display of comments from other channels. It supports combining channels with pipe-separated values and using the not keyword for exclusion.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_1\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\nchannel=\"channel1|channel2|channel3\"\n```\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\nchannel=\"not channel1|channel2|channel3\"\n```\n\n----------------------------------------\n\nTITLE: Checking All Permissions in a List using ExpressionEngine Permission Service - PHP\nDESCRIPTION: This snippet illustrates checking whether the user holds all the specified permissions ('can_delete_all_comments', 'can_delete_own_comments') through the hasAll method of the Permission Service in PHP. The result, a boolean, is assigned to a variable (here, $can_delete) for later use in conditional logic. Dependencies include the ExpressionEngine PHP environment and a session with defined permissions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/permission.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$can_delete = ee('Permission')->hasAll('can_delete_all_comments', 'can_delete_own_comments')\n```\n\n----------------------------------------\n\nTITLE: Calling Forum Include Extras Hook\nDESCRIPTION: Example of calling the forum_include_extras extension hook for additional template processing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/forum.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$element = ee()->extensions->call('forum_include_extras', $this, $function, $element);\n```\n\n----------------------------------------\n\nTITLE: Configuring Ban Lists in ExpressionEngine (PHP)\nDESCRIPTION: Sets up banned emails, IPs, screen names and usernames using pipe-delimited lists.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$config['banned_emails'] = 'user@example.com|johndoe@example.com|*@spammydomain.com';\n$config['banned_ips'] = '123.456.789.1|123.321.*';\n$config['banned_screen_names'] = 'Garfield|Snoopy|Hobbes';\n$config['banned_usernames'] = 'garfield|snoopy|hobbes';\n```\n\n----------------------------------------\n\nTITLE: Defining a 'From' Address Field in ExpressionEngine\nDESCRIPTION: This HTML snippet sets up a text input field for the sender's email address in an ExpressionEngine form. It warns users of potential spamming misuse, emphasizing the need for controlled user input.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"text\" name=\"from\" size=\"40\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Existing WysiHat Editor Instance via jQuery Data (JavaScript)\nDESCRIPTION: Illustrates how to retrieve an already initialized WysiHat editor instance associated with a specific textarea element (`$myTextarea`). This is achieved using jQuery's `data()` method with the key 'wysihat', allowing programmatic interaction with the existing editor.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/wysihat-api.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$myTextarea.data('wysihat');\n```\n\n----------------------------------------\n\nTITLE: Inserting Row Limit Options Select Dropdown - HTML with ExpressionEngine Variables\nDESCRIPTION: Illustrates dynamic generation of a row limit dropdown for controlling number of results via {row_limit_options}. Useful for user-directed pagination or display control.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<select name='row_limit' class='select'>\n    {row_limit_options}\n</select>\n```\n\n----------------------------------------\n\nTITLE: Building Theme Assets\nDESCRIPTION: Command to build CSS and JavaScript theme assets from source files.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run buildAssets\n```\n\n----------------------------------------\n\nTITLE: Defining Fieldset in ExpressionEngine PHP\nDESCRIPTION: This snippet shows the structure of a fieldset definition in ExpressionEngine PHP forms. Key properties such as 'title', 'desc', and 'fields' determine the fieldset's configuration. Each fieldset can contain multiple fields with additional settings for security, attributes, and grid layouts. The snippet requires familiarity with PHP arrays and ExpressionEngine's form structure.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/shared-form-view.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\narray(\n  'title' => 'site_name',\n  'desc' => 'site_name_desc',\n  'fields' => array( ... )\n)\n```\n\n----------------------------------------\n\nTITLE: Updating File/Directory Access/Modification Time (touch) in PHP\nDESCRIPTION: Sets the access and modification times of the file or directory specified by `$path`. If `$time` (an integer Unix timestamp) is provided, it sets the modification time to that value; otherwise, it uses the current server time. Returns `TRUE` on success, `FALSE` on failure. Requires the path string `$path` and optionally an integer timestamp `$time`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/filesystem.md#2025-04-22_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\ntouch($path, $time = null)\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Using CP/Form Service in ExpressionEngine\nDESCRIPTION: Helper method that demonstrates how to use the ExpressionEngine CP/Form service to create a structured form. This method sets up a form with a tab layout, file upload capability, and a text field that's disabled and pre-populated.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/modules.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprivate function getForm()\n{\n  $form = ee('CP/Form');\n  $form->asTab();\n  $form->asFileUpload();\n  $field_group = $form->getGroup('header 1');\n  $field_set = $field_group->getFieldSet('first_name');\n  $field_set->getField('first_name', 'text')\n            ->setDisabled(true)\n            ->setValue('Eric');\n  \n  return $form->toArray();\n}\n```\n\n----------------------------------------\n\nTITLE: Calling after_category_delete Hook in PHP\nDESCRIPTION: This snippet shows the implementation of the after_category_delete hook call. It passes the current Category model object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_category_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Incorrect Variable Bracing in Conditionals\nDESCRIPTION: Examples of incorrect ways to use variables in conditionals, which should be avoided.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_6\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if {my_snippet} == \"hello world\"}\n{if \"{my_snippet}\" == \"hello world\"}\n```\n\n----------------------------------------\n\nTITLE: Updating Installer File Structure for ExpressionEngine 7.2+\nDESCRIPTION: Shows how to update an installer file to use the new Installer service by extending the base Installer class.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/modernizing-existing-add-ons.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse ExpressionEngine\\Service\\Addon\\Installer;\n\nclass Amazing_add_on_upd extends Installer\n{\n```\n\n----------------------------------------\n\nTITLE: Calling after_status_delete Extension Hook in PHP\nDESCRIPTION: Example of how the after_status_delete hook is called. This hook fires after a status object is deleted, enabling post-deletion processing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/status.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_status_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Classifying Text Using Spam Service in ExpressionEngine (PHP)\nDESCRIPTION: This PHP example demonstrates how to use the ExpressionEngine Spam service's `isSpam` method to classify a string as spam or ham. It requires the ExpressionEngine Spam Module to be installed and loaded; otherwise, the method always returns FALSE. Pass the text string as the parameter to receive a boolean indicating its classification.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/spam.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee('Spam')->isSpam($text)\n```\n\n----------------------------------------\n\nTITLE: Setting the Form Action URL in ExpressionEngine Login Form\nDESCRIPTION: Illustrates how to use the `action=` parameter within the `{exp:member:login_form}` tag to specify the URL where the form data should be submitted. This is useful for directing logins to specific endpoints, like secure SSL pages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/login.md#2025-04-22_snippet_1\n\nLANGUAGE: ee\nCODE:\n```\naction=\"https://example.com/\"\n```\n\n----------------------------------------\n\nTITLE: Signing Data Using ExpressionEngine Encrypt Service (PHP)\nDESCRIPTION: This snippet shows how to generate a signed hash from arbitrary data using the Encrypt service's sign() method. It uses ExpressionEngine's service system and creates a cryptographically secure signature, typically for establishing data integrity. Dependencies are the ExpressionEngine framework, and the method accepts string input data and creates a signed hash, which is a string output.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/encrypt.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$signed = ee('Encrypt')->sign($data);\n```\n\n----------------------------------------\n\nTITLE: Querying Custom Template Types via Extension Hook in ExpressionEngine (PHP)\nDESCRIPTION: Demonstrates how to invoke the template_types extension hook to retrieve current template types using PHP in the ExpressionEngine framework. The variable $template_types is set by calling the hook via the ExpressionEngine extensions library. No parameters are passed; the output is an array of template type definitions. This pattern is required to retrieve and iterate custom template types dynamically added by extensions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/cp/design.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$template_types = $EE->extensions->call('template_types');\n```\n\n----------------------------------------\n\nTITLE: Generating a Prolet via EECLI - Shell\nDESCRIPTION: This snippet demonstrates an example command-line invocation of the 'make:prolet' generator using EECLI. It shows how to specify the new prolet's name, associate it with an add-on, and add a description. Users should replace placeholders like 'MyNewProlet' and 'my_addon' with their specific values.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/make-prolet.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp eecli.php make:prolet MyNewProlet --addon=my_addon --description=\\\"This is my prolet description\\\"\n```\n\n----------------------------------------\n\nTITLE: Forum Topics Start Hook Implementation\nDESCRIPTION: Extension hook called before processing the main topics template. Allows modification of the entire topics display template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/forum.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$str = ee()->extensions->universal_call('forum_topics_start', $this, $str);\nif (ee()->extensions->end_script === TRUE) return $str;\n```\n\n----------------------------------------\n\nTITLE: Pro Search Filters Example\nDESCRIPTION: Example showing how to create a list of one-click filters based on current search using categories.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_2\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_search:filters query=\"{segment_3}\"}\n {exp:channel:categories channel=\"entries\" style=\"linear\"}\n  {if count ==  1}<ul>{/if}\n   <li>\n    <a href=\"{pro_search:url toggle:category=\\\"{category_id}\\\"}\">{category_name}</a>\n    {if pro_search_category ~ '/(^||)'.category_id.'($||)/'}&check;{/if}\n   </li>\n  {if count == total_results}</ul>{/if}\n {/exp:channel:categories}\n{/exp:pro_search:filters}\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding Rows to CSV in PHP\nDESCRIPTION: Demonstrates basic usage of the CSV library to create a CSV structure and add rows using associative arrays. Shows how the data is formatted in the resulting CSV output.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/csv.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$csv = ee('CSV');\n$csv->addRow(array(\n  'email' => 'team at example dot com',\n  'title' => 'Example Team'\n))->addRow(array(\n  'email' => 'hello at example dot com',\n  'name' => 'Hello to Example'\n));\necho (string) $csv;\n```\n\n----------------------------------------\n\nTITLE: Disabling jQuery Inclusion in ExpressionEngine\nDESCRIPTION: The `include_jquery` parameter controls the automatic inclusion of the jQuery library. Set to \"no\" if you are loading jQuery manually elsewhere (ensure it loads before the form). Defaults to \"yes\".\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_8\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\ninclude_jquery=\"no\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Entries by Author's Primary Role ID in ExpressionEngine\nDESCRIPTION: The `group_id` parameter filters entries based on the primary role ID of the authoring member. You can specify a single role ID, multiple IDs separated by pipes (`|`), or exclude roles using `not` followed by pipe-separated IDs. It is recommended to use the equivalent `primary_role_id=` parameter instead for clarity.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_13\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\ngroup_id=\"4\"\n```\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\ngroup_id=\"2|3|4\"\n```\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\ngroup_id=\"not 2|3|4\"\n```\n\n----------------------------------------\n\nTITLE: Creating Tab File Structure in PHP\nDESCRIPTION: This snippet outlines the basic file structure for an ExpressionEngine add-on tab file in PHP. It is located in the root of the add-on's folder and is crucial for managing additional publish page tabs. This file must be created manually as it can't be autogenerated through CLI, and it should follow the naming pattern 'tab.[addon_name].php'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/tab-files.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\namazing_add_on\n...\n┣ tab.amazing_add_on.php\n┗...\n```\n\n----------------------------------------\n\nTITLE: Adding Publish Tabs in ExpressionEngine PHP\nDESCRIPTION: This method adds new publish tabs to the ExpressionEngine interfaces by utilizing the `layout` library to integrate tab fields into existing layouts. It returns an array mapping tab names to their properties, which specify field visibility, collapsibility, and layout. The tab fields are namespaced to prevent variable collisions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/add-on-update-file.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nee()->load->library('layout');\nee()->layout->add_layout_tabs($this->tabs(), 'module_name');\n```\n\n----------------------------------------\n\nTITLE: Using File Grid Fields in Relationship Tags\nDESCRIPTION: How to manage file grid fields within relationship tags in ExpressionEngine, including accessing specific metadata like extension and upload date.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_11\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{relationship_field}\\n   {relationship_field:my_file_grid}\\n     {relationship_field:my_file_grid:my_image}\\n         Extension: {extension}\\n         Upload date: {upload_date format=\\\"%Y %m %d\\\"}\\n         URL: {url}\\n         Custom med thumbnail url: {url:med}\\n     {/relationship_field:my_file_grid:my_image}\\n   {/relationship_field:my_file_grid}\\n {/relationship_field}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Category Fields in ExpressionEngine\nDESCRIPTION: Illustrates how custom category fields in ExpressionEngine are accessed using their defined 'short name' as variables within category loops (e.g., `{categories}`). Any custom field created for a category group is automatically available using its short name.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{class} {extended_description} {category_name_fr} etc..\n```\n\n----------------------------------------\n\nTITLE: Running an ExpressionEngine CLI Command with Confirmation (Shell)\nDESCRIPTION: Illustrates how to run an ExpressionEngine CLI command ('hello') using the confirmation flag ('-c'). The command prompts the user for a 'yes/no' input before potentially proceeding. Includes sample interaction and output.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/usage.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ php system/ee/eecli.php hello -c\n\nHello world\nAre you liking these questions? (yes/no) [no]\nyes\nThat's good to hear!\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Author Signature in ExpressionEngine/HTML\nDESCRIPTION: Uses the `{if signature}` conditional to check if the comment author has a signature defined in their profile. If a signature exists, it is displayed within a paragraph tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n{if signature} <p>{signature}</p> {/if}\n```\n\n----------------------------------------\n\nTITLE: Registering Consent Requests in ExpressionEngine Add-on Setup\nDESCRIPTION: Defines consent requests that will be registered with the add-on namespace. Each consent request includes a title, request text, optional format for parsing, and optional double opt-in setting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n'consent.requests' => [\n  'do_stuff' => [\n    'title' => 'Do Stuff',\n    'request' => 'We will *do stuff* with your data, okay?',\n    'request_format' => 'markdown',\n  ],\n  'do_some_other_stuff' => [\n    'title' => 'Do Some Other Stuff',\n    'request' => 'We will *do some other stuff* with your data, okay?',\n    'request_format' => 'markdown',\n    'double_opt_in' => TRUE,\n  ],\n],\n```\n\n----------------------------------------\n\nTITLE: Example JSON Request for Importing a License in ExpressionEngine\nDESCRIPTION: An example JSON payload for a POST request to import a license. It includes all required fields such as auth_key, addon_shortname, customer details, license information, and optional fields like notes and price.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/license-validation/importing-licenses.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"auth_key\": \"your_api_key\",\n    \"addon_shortname\": \"your_addon_shortname\",\n    \"customer_name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"license_key\": \"ABC123XYZ\",\n    \"purchase_date\": \"2024-01-15\",\n    \"expiration_date\": \"2025-01-15\",\n    \"notes\": \"This is a test license import.\",\n    \"price\": 49.99\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Forum Add Template Hook\nDESCRIPTION: Example of calling the forum_add_template extension hook which allows adding new templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/forum.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$classname = ee()->extensions->call('forum_add_template', $which, $classname);\n```\n\n----------------------------------------\n\nTITLE: Calling before_status_save Extension Hook in PHP\nDESCRIPTION: Example of how the before_status_save hook is called. This hook fires before a status object is inserted or updated, allowing modifications to be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/status.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_status_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Assigning an ID to the ExpressionEngine Login Form\nDESCRIPTION: Demonstrates using the `form_id=` parameter to add an ID attribute to the generated `<form>` tag, useful for JavaScript targeting or specific CSS styling.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/login.md#2025-04-22_snippet_3\n\nLANGUAGE: ee\nCODE:\n```\nform_id=\"login\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Keywords from a Query - ExpressionEngine Template Tag\nDESCRIPTION: Shows usage of the single {exp:pro_search:keywords} tag to output keywords from a given encoded search query, referencing a segment from the template context. Useful as a shortcut for keyword extraction.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_23\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:keywords query=\"{segment_3}\"}\n```\n\n----------------------------------------\n\nTITLE: Disabling CSS Inclusion in ExpressionEngine\nDESCRIPTION: The `include_css` parameter allows disabling the automatic inclusion of required CSS, independent of the `include_assets` parameter. Set to \"no\" to disable. Defaults to \"yes\".\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_7\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\ninclude_css=\"no\"\n```\n\n----------------------------------------\n\nTITLE: Triggering a Modal with HTML and Attributes\nDESCRIPTION: This HTML anchor element is crafted to trigger a pre-defined modal when clicked. It uses a specific class 'm-link' and the 'rel' attribute to reference the modal by name.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/modal.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"\" class=\"m-link\" rel=\"hello\">Say hello</a>\n```\n\n----------------------------------------\n\nTITLE: Interval-Based Date Heading Display - markup\nDESCRIPTION: Illustrates the use of {date_heading} to display headings at defined intervals. It supports the use of an optional 'display' parameter to control frequency. Commonly used with the weekly interval and {week_date} variable for week-specific headings.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_54\n\nLANGUAGE: markup\nCODE:\n```\n{date_heading}  <h1>{entry_date format=\"%Y %m %d\"}</h1>  {/date_heading}\n{date_heading display=\"weekly\"}Week of {week_date format=\"%Y %m %d\"}{/date_heading}\n{date_heading display=\"daily\"}\n```\n\n----------------------------------------\n\nTITLE: Specifying Entry ID for Comment Subscriber List in ExpressionEngine\nDESCRIPTION: This snippet shows how to use the `entry_id` parameter within an ExpressionEngine tag, specifically demonstrated for `{exp:comment:subscriber_list}`. Hardcoding the `entry_id` forces the tag to display subscribers for that specific entry, overriding any entry ID determined dynamically from the URL.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/subscriptions.md#2025-04-22_snippet_2\n\nLANGUAGE: ee\nCODE:\n```\nentry_id=\"24\"\n```\n\n----------------------------------------\n\nTITLE: Detailed Schema of `exp_actions` Table\nDESCRIPTION: Provides a detailed breakdown of the columns in the `exp_actions` database table, including column name, data type, and a description of its purpose within ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/actions.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Column Name    | Data Type   | Description                                                  |\n|----------------|-------------|--------------------------------------------------------------|\n|action_id       | int(4)      | Action ID given to our action                                |\n|class           | varchar(50) | A class name based on our add-on's name                      |\n|method          | varchar(50) | Method in our add-on that is ran when this action is executed|\n|csrf_exempt     | tinyint(1)  | Is this endpoint csrf exempt or not                          |\n```\n\n----------------------------------------\n\nTITLE: Accessing WysiHat Helper Classes via Editor Instance (JavaScript)\nDESCRIPTION: Shows how to access WysiHat helper class instances, such as `Selection`, which are bound to the main editor object. First, the editor instance is retrieved using `$.data('wysihat')`, and then its properties (representing the helper instances) can be accessed directly.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/wysihat-api.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor = $('textarea').data('wysihat');\nselection = editor.Selection;\n```\n\n----------------------------------------\n\nTITLE: Setting Member List Row Limit\nDESCRIPTION: Configures the default number of rows to display in the member list.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_99\n\nLANGUAGE: php\nCODE:\n```\n$config['memberlist_row_limit'] = '20';\n```\n\n----------------------------------------\n\nTITLE: Basic View Template for ExpressionEngine Add-on Control Panel\nDESCRIPTION: Example of a simple View file (Index.php) that receives and displays variables passed from the controller. This template outputs basic HTML with dynamic content based on the variables received from the route file.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/modules.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\necho \"<h2>Time to make magic</h2>\";\n\nif (isset($name)) {\n    echo \"<p>Name: \" . $name . \"</p>\";\n}\n\nif (isset($color)) {\n    echo \"<p>Color: \" . $color . \"</p>\";\n}\n```\n\n----------------------------------------\n\nTITLE: Anonymize Method Signature for IP Address Service in ExpressionEngine\nDESCRIPTION: This code block shows the method signature for the anonymize() function in the IP Address service. It takes a string IP address as input and returns an anonymized string IP address.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/ipaddress.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nanonymize($address)\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Lists from Multi Select Fields (ExpressionEngine)\nDESCRIPTION: This snippet shows how to use the `markup` parameter with a Multi Select field tag used as a single variable. Setting `markup='ul'` or `markup='ol'` automatically wraps the selected item labels in an HTML unordered or ordered list, respectively.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/multiselect.md#2025-04-22_snippet_6\n\nLANGUAGE: expressionengine\nCODE:\n```\n{field_name markup='ul'}\n```\n\n----------------------------------------\n\nTITLE: Comment Entry ID Path Link - HTML with EE Variables\nDESCRIPTION: This snippet shows how to construct a link to a specific channel entry's comment page using the {comment_entry_id_auto_path} variable. ExpressionEngine replaces this placeholder with a full URL to the entry, allowing seamless navigation from comment listings.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_19\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"{comment_entry_id_auto_path}\">my entry</a>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Showing/Hiding Ignored User Comments with JavaScript in ExpressionEngine/HTML/JS\nDESCRIPTION: Provides an advanced example using the `{if is_ignored}` conditional along with JavaScript. It initially hides comments from ignored users but provides a 'View / Hide' link that allows the logged-in user to toggle the visibility of the comment using a simple JavaScript function. Requires unique element IDs (using `{comment_id}`). Avoid template caching.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\">\n  function showHideComment(el) {\n      if (document.getElementById(el).style.display == \"block\") {\n          document.getElementById(el).style.display = \"none\";\n      }\n      else {\n          document.getElementById(el).style.display = \"block\";\n      }\n  }\n</script>\n```\n\nLANGUAGE: html\nCODE:\n```\n{exp:comment:entries}\n  {if is_ignored}\n      <p><a href=\"#\" onclick=\"showHideComment('{comment_id}')\">View / Hide</a> comment from ignored member: {author}</p>\n  {/if}\n\n  <div id=\"{comment_id}\" {if is_ignored}style=\"display: none;\"{/if}>{comment}</div>\n{/exp:comment:entries}\n```\n\n----------------------------------------\n\nTITLE: Setting Site URL in ExpressionEngine Config (PHP)\nDESCRIPTION: Sets the full URL to the site's web root. Defines the base URL for the ExpressionEngine installation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_148\n\nLANGUAGE: PHP\nCODE:\n```\n$config['site_url'] = 'https://example.com';\n```\n\n----------------------------------------\n\nTITLE: Defining Email Template Parameter - ExpressionEngine Tag - ExpressionEngine Tag\nDESCRIPTION: Illustrates use of the email_template parameter to specify which template is used for the email sent to the user. This enhances email customization and requires a valid email template path in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/forgot-username.md#2025-04-22_snippet_2\n\nLANGUAGE: ExpressionEngine Tag\nCODE:\n```\nemail_template=\"member/email-forgot-username\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Object Retrieval from Dependency Container in PHP\nDESCRIPTION: Demonstrates that calling `make()` with the name used during registration (`'Member'`) returns the exact same object instance (`$member`) that was previously registered directly. The comment `// true` signifies the expected outcome.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/architecture.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$di->make('Member') == $member // true\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Paths in ExpressionEngine\nDESCRIPTION: Sets the base path, base URL, and site URL in the ExpressionEngine configuration. This setup is crucial for running tests correctly as it determines the environment's base addresses. These configurations should mirror real deployments for accurate testing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/cypress-tests.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$config['base_path'] = $_SERVER['DOCUMENT_ROOT'];\n$config['base_url'] = 'http://ee6pro.local/';\n$config['site_url'] = $config['base_url'];\n```\n\n----------------------------------------\n\nTITLE: Using the Switch Variable in ExpressionEngine\nDESCRIPTION: Demonstrates the `{switch=}` variable, which cycles through a pipe-delimited list of values for each item being displayed in a loop (like comments). This example shows the basic syntax for rotating through three options.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_27\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{switch=\"option_one|option_two|option_three\"}\n```\n\n----------------------------------------\n\nTITLE: Processing Search Results with pro_search_channel_entries PHP Hook\nDESCRIPTION: This code snippet uses the pro_search_channel_entries hook to customize the method for parsing search results using the channel entries data in ExpressionEngine. It checks for active hooks and processes the tagdata accordingly. The hook operates within the ExpressionEngine extensions system.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nif (ee()->extensions->active_hook('pro_search_channel_entries') === TRUE)\n{\n  $tagdata = ee()->extensions->call('pro_search_channel_entries');\n}\n```\n\n----------------------------------------\n\nTITLE: Calling after_member_field_delete Extension Hook in PHP\nDESCRIPTION: Demonstrates how the after_member_field_delete hook is called after a MemberField model is deleted. The documentation suggests using inverse relationships instead for better performance.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member-field.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_member_field_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling After Update Hook in ExpressionEngine PHP\nDESCRIPTION: Extension hook called after updating a specialty template object. Changes made to the object will not be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-specialty-template.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_specialty_template_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Basic Tag Caching Example\nDESCRIPTION: Example showing how to implement basic tag caching with refresh interval in ExpressionEngine using cache and refresh parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/optimization/caching.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{exp:channel:entries cache=\"yes\" refresh=\"30\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Control Panel Link with Session ID\nDESCRIPTION: This snippet shows how to create a control panel link for admin users, using the cp_url and cp_session_id variables. The conditional ensures only primary admins see the link, and the session ID is included if available.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/single-variables.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n{if logged_in_primary_role_id == 1}\n  &bull; <a href=\"{cp_url}?/cp/addons/settings/my_addon{if cp_session_id}&S={cp_session_id}{/if}\">CP Link</a>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Enabling Output Profiler in ExpressionEngine (PHP)\nDESCRIPTION: Enables the Output Profiler which displays benchmark results, SQL queries, and submitted form data for Super Admins. Template debugging is included on the front end.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_134\n\nLANGUAGE: PHP\nCODE:\n```\n$config['show_profiler'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Sending Window Broadcast Events with jQuery in ExpressionEngine (JavaScript)\nDESCRIPTION: This code shows how to trigger ExpressionEngine's custom 'broadcast' event on the window object using jQuery. This sends a message ('a message' in this case) that can be received by other control panel windows within the same browser session.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/events.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n$(window).trigger('broadcast', 'a message');\n```\n\n----------------------------------------\n\nTITLE: Initializing WysiHat Editor with jQuery (JavaScript)\nDESCRIPTION: Demonstrates the primary method to initialize the WysiHat editor on a textarea element using the jQuery `wysihat` plugin. It accepts an options object where configurations, such as the list of toolbar buttons, can be specified. Requires jQuery and the WysiHat library.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/wysihat-api.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$('textarea').wysihat({\n\t'buttons': ['bold', 'italic', 'underline']\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing FieldManager Callback in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to implement a callback for when a field's settings form is displayed using 'FieldManager.on'. This ensures that the fieldtype's settings load correctly in the channel manager. No additional dependencies are required.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/v4-addon-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nFieldManager.on('fieldModalDisplay', function(modal) {\n  // Do something where modal contains your fieldtype's settings form\n});\n```\n\n----------------------------------------\n\nTITLE: Basic ExpressionEngine Add-on File Structure (Text)\nDESCRIPTION: Displays the initial directory and file structure generated for a new ExpressionEngine add-on named 'amazing_add_on' using the `make:addon` CLI command. This basic structure includes the main add-on folder, a language directory with an English sub-directory containing the language file, the core setup file (`addon.setup.php`), the module file (`mod.amazing_add_on.php`), and the update/installer file (`upd.amazing_add_on.php`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-development-overview.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\namazing_add_on/\n┣ language/\n┃ ┣ english/\n┃ ┃ ┣ amazing_add_on_lang.php\n┣ addon.setup.php\n┣ mod.amazing_add_on.php\n┗ upd.amazing_add_on.php\n```\n\n----------------------------------------\n\nTITLE: Using the ExpressionEngine Base URL Variable\nDESCRIPTION: This snippet shows the `{base_url}` variable, which is recommended for use in URL settings within ExpressionEngine channels. It dynamically inserts the site's base URL defined in the main URL and Path Settings.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/channels.md#2025-04-22_snippet_1\n\nLANGUAGE: expressionengine\nCODE:\n```\n{base_url}\n```\n\n----------------------------------------\n\nTITLE: Conditional Output Based on Radio Button Field Selection in ExpressionEngine Templates (Markdown)\nDESCRIPTION: This snippet shows how to use ExpressionEngine template conditionals to check for selected values and labels in a Radio Button field. It demonstrates checking equality between the field, its value, or its label, and preset constants in template tags. The example assumes a Radio Button field named 'field_name' with set value/label pairs and shows output based on selection. No external dependencies required, works within ExpressionEngine template parsing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/radio-buttons.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{if field_name == 2}Yep!{/if}\n{if field_name:value == 2}Yep!{/if}\n{if field_name:label == 'Two'}Yep!{/if}\n```\n\n----------------------------------------\n\nTITLE: Filtering Comments by Comment ID - ExpressionEngine Template\nDESCRIPTION: The example demonstrates how to directly target comments by their IDs with the comment_id parameter. This is useful for displaying only specific comments. Multiple IDs can be supplied, separated by the pipe character. This parameter overrides any dynamic or entry-related filtering.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_2\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\ncomment_id=\"22\"\n```\n\n----------------------------------------\n\nTITLE: Generating Member Entry Search Link in ExpressionEngine/HTML\nDESCRIPTION: Creates a link to a search results template using the `{member_search_path}` variable, passing the comment author's member name. This allows users to view all entries made by that specific author. Requires specifying the target search results Template_Group/Template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{member_search_path='search/results'}\">View entries by this member</a>\n```\n\n----------------------------------------\n\nTITLE: Re-indexing a Specific Site using `-s` with `sync:reindex` (Shell)\nDESCRIPTION: This command demonstrates using the short option `-s 1` to execute the ExpressionEngine `sync:reindex` task via `eecli.php` specifically for Site ID 1. It achieves the same result as using the `--site_id=1` option, re-indexing content only for the specified site.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/sync-reindex.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nphp eecli.php sync:reindex -s 1\n```\n\n----------------------------------------\n\nTITLE: Counting Related Members Using :length/:total_rows Modifiers in ExpressionEngine\nDESCRIPTION: This snippet illustrates using the `:length` or `:total_rows` modifiers with a single Members field tag in ExpressionEngine (e.g., `{members_field:length}`). Both modifiers return the total number of members associated with the entry through that specific Members field.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/member.md#2025-04-22_snippet_7\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\n{members_field:length} // 2\n{members_field:total_rows} // 2\n```\n\n----------------------------------------\n\nTITLE: Checking Overall Validation Failure in ExpressionEngine with PHP\nDESCRIPTION: Shows how to determine if the validation process failed using the `isNotValid()` method on the validation result object (`$result`). This method returns `true` if any rule failed for any field, and `false` otherwise. It's the logical opposite of `isValid()`.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/validation.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$result->isNotValid(); // false | true\n```\n\n----------------------------------------\n\nTITLE: Styling and Displaying Emoji Picker Content\nDESCRIPTION: This snippet shows the content of the emoji picker template, including CSS for grid layout and HTML structure for displaying emojis using the {exp:emoji:emoji_list} tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/emoji.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  .container{\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(50px, 1fr));\n    grid-gap: 1rem\n  }\n</style>\n\n<div class=\"container\">\n  {exp:emoji:emoji_list}\n    <div class=\"item\"><a href=\"#\" onclick=\"addEmoji(':{short_name}:');\">{html_entity}</a></div>\n  {/exp:emoji:emoji_list}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calling after_template_route_save Hook\nDESCRIPTION: Extension hook called after saving a template route object. Changes to the object will not be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-route.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_template_route_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Settings in admin.php\nDESCRIPTION: Configuration settings in admin.php for site name and control panel URL in a multi-site setup.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/msm/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$assign_to_config['site_name'] = 'domain2_short_name';\n$assign_to_config['cp_url']    = 'https://domain2.com/admin.php';\n```\n\n----------------------------------------\n\nTITLE: Checked State for Accept Terms Variable - ExpressionEngine Template Syntax\nDESCRIPTION: Demonstrates conditional output for the accept_terms variable to set the checkbox as checked when the user has previously indicated acceptance. Used within form markup as part of ExpressionEngine's template variable parsing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_18\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\n{if accept_terms == 'y'}checked=\"checked\"{/if}\n```\n\n----------------------------------------\n\nTITLE: Status Configuration in JSON\nDESCRIPTION: Configuration for custom status definitions including name and highlight color.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/sets.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"statuses\": [\n        {\n            \"name\": \"Default Page\",\n            \"highlight\": \"2051B3\"\n        }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Autosave Pruning in ExpressionEngine (PHP)\nDESCRIPTION: Configures the age in hours at which autosaved Channel Entries are automatically deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$config['autosave_prune_hours'] = '4';\n```\n\n----------------------------------------\n\nTITLE: Listing Installed ExpressionEngine Add-ons via CLI (PHP)\nDESCRIPTION: Executes the `addons:list` command with the `i` or `installed` flag using the ExpressionEngine CLI (`eecli.php`). This filters the list to show only the add-ons that are currently installed in the ExpressionEngine system. Requires PHP and the ExpressionEngine CLI environment.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/addons.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php addons:list i\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php addons:list installed\n```\n\n----------------------------------------\n\nTITLE: Running DocSearch Scraper with Docker\nDESCRIPTION: Docker command to run the MeiliSearch docs-scraper against local documentation for search indexing. Requires configuring search.config.json and a valid API key.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -t --rm --network=host \\\n    -e MEILISEARCH_HOST_URL=https://docsearch.expressionengine.com \\\n    -e MEILISEARCH_API_KEY={{ SECRET_KEY }} \\\n    -v ./search.config.json:/docs-scraper/search.config.json \\\n    getmeili/docs-scraper:latest pipenv run ./docs_scraper search.config.json\n```\n\n----------------------------------------\n\nTITLE: Return Error URL Parameter - ExpressionEngine Template Syntax\nDESCRIPTION: Controls redirection to an error template upon validation failure by setting the return_error parameter. Useful in form validation and error handling workflows.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_8\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\nreturn_error=\"template_group/error\"\n```\n\n----------------------------------------\n\nTITLE: Safe Attribute Formatting with Character Limiting in PHP\nDESCRIPTION: Demonstrates the attributeSafe() method, which combines attribute escaping with additional formatting options like character limiting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$str = 'A discussion about &quot;Wonko the Sane&quot;';\n$attr = ee('Format')->make('Text', $str)->attributeSafe(['limit' => 20]);\n// A discussion…\n```\n\n----------------------------------------\n\nTITLE: Using Contrast Color Modifier with ExpressionEngine's Color Picker\nDESCRIPTION: Example of using the contrast_color modifier with a color picker field. This modifier automatically outputs either black or white color text depending on what will contrast best with the selected background color, ensuring text remains legible.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/colorpicker.md#2025-04-22_snippet_1\n\nLANGUAGE: ee\nCODE:\n```\n<div style=\"background: {my_colorpicker_field};\">\n    <p style=\"color: {my_colorpicker_field:contrast_color};\">\n        This text will contrast with the background so it's always legible.\n    </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Parsing File References in ExpressionEngine (PHP)\nDESCRIPTION: This snippet demonstrates how to parse file references in content, supporting both file ID and directory ID with filename formats. It uses the file_field library to handle both compatibility mode and non-compatibility mode file references.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/enhanced.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nee()->load->library('file_field');\n$data = ee()->file_field->parse_string($data);\n```\n\n----------------------------------------\n\nTITLE: Setting the Removal Key Variable Name for FolderList in PHP\nDESCRIPTION: Specifies the name of the variable that will be passed when a removal action is triggered on an item within the `FolderList`. Returns the `FolderList` instance (`$this`) for method chaining.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nwithRemovalKey($key)\n```\n\n----------------------------------------\n\nTITLE: Using Grid Fields in Relationship Tags\nDESCRIPTION: This code snippet provides examples for utilizing grid fields within relationship tags in ExpressionEngine, including managing image uploads and grid text.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_13\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{relationship_field}\\n   {relationship_field:my_grid}\\n     {relationship_field:my_grid:my_image}\\n         Upload date: {upload_date format=\\\"%Y %m %d\\\"}\\n         URL: {url}\\n     {/relationship_field:my_grid:my_image}\\n     Some text in the grid: {relationship_field:my_grid:my_text}\\n   {/relationship_field:my_grid}\\n {/relationship_field}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inflection Rules in PHP\nDESCRIPTION: Demonstrates how to add custom inflection rules for language support in the Pro Search module's config file. This allows for singular and plural matching of keywords in different languages.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/filters.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$config['pro_search_inflection_rules'][lang] = array(\n  'plural'      => array(),\n  'singular'    => array(),\n  'irregular'   => array(),\n  'uncountable' => array()\n);\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Add-ons in ExpressionEngine PHP\nDESCRIPTION: The `uninstall` method facilitates the removal of add-ons by cleaning up extensions, actions, and any additional configurations or data structures added during installation. It ensures an orderly rollback of changes made by the add-on.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/add-on-update-file.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\npublic function uninstall()\n{\n    parent::uninstall();\n\n    // remove my database tables\n    // remove any publish tabs\n    // turn off the lights\n\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Forgotten Password Link in ExpressionEngine HTML\nDESCRIPTION: Provides the HTML code structure for a hyperlink leading to a password retrieval page using a path variable in ExpressionEngine. This snippet assists in building user-friendly interfaces for password recovery processes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/profile-templates.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{path='member/forgot_password'}\">Forget your password?</a>\n```\n\n----------------------------------------\n\nTITLE: Category Heading Hook Implementation\nDESCRIPTION: Shows the channel_module_category_heading_start hook for category heading processing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/channel.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->TMPL->tagdata = $this->extensions->call('channel_module_category_heading_start');\nif ($this->extensions->end_script === TRUE) return ee()->TMPL->tagdata;\n```\n\n----------------------------------------\n\nTITLE: Adjusting Output with Backspace Parameter in ExpressionEngine\nDESCRIPTION: Details how to use the backspace parameter in an ExpressionEngine template to clean up the output formatting by removing trailing characters after a loop iteration.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/selectable-buttons.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n{field_name backspace='5'}\n    {item}<br>\n{/field_name}\n```\n\n----------------------------------------\n\nTITLE: Entry View Tracking Configuration in PHP\nDESCRIPTION: Enables or disables the Entry Views Tracking Tag feature in the Channel module.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n$config['enable_entry_view_tracking'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Initializing ExpressionEngine CP Table with Default Options in PHP\nDESCRIPTION: Instantiates the ExpressionEngine Control Panel Table service using the `ee()` dependency injection helper with default configuration. This is the basic method for creating a table object when no specific options like autosort or autosearch are initially required.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/table.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Use default options\n$table = ee('CP/Table');\n```\n\n----------------------------------------\n\nTITLE: Changing Font Color with BBCode\nDESCRIPTION: Shows how to apply a specific color to text using the [color] BBCode tag. Color names or hex codes can typically be used.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/bbcode.md#2025-04-22_snippet_6\n\nLANGUAGE: bbcode\nCODE:\n```\n[color=green]Some green text[/color]\n```\n\n----------------------------------------\n\nTITLE: Text Formatting Option: Auto Line Break\nDESCRIPTION: Specifies the 'Auto line break' option for the 'Text formatting' setting within channel comment configurations. This option automatically converts line breaks into `<br />` tags.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/channels.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nAuto line break\n```\n\n----------------------------------------\n\nTITLE: Example Output of the ExpressionEngine List Command (Text)\nDESCRIPTION: Displays a sample output format generated by the 'list' command in the ExpressionEngine CLI. The output is typically a table showing the command name and its description.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/usage.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ php system/ee/eecli.php list\n\n| Command             | Description                              |\n------------------------------------------------------------------\n| hello               | The most basic of commands               |\n| list                | Lists all available commands             |\n| update              | Updates ExpressionEngine                 |\n| cache:clear         | Clears all ExpressionEngine caches       |\n...\n```\n\n----------------------------------------\n\nTITLE: Calling the pagination_create Extension Hook in PHP\nDESCRIPTION: Code showing how the pagination_create extension hook is called within the ExpressionEngine Pagination library. This hook allows for rewriting or extending the pagination functionality and passes the current pagination object and item count.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/pagination.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->extensions->call('pagination_create', $this, $count);\nif ($this->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Getters and Setters in ExpressionEngine Models\nDESCRIPTION: Example showing how to create custom getters and setters using the get__<property> and set__<property> method naming convention. This allows for computed properties that combine or transform other model properties.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/building-your-own.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nprotected $first_name;\nprotected $last_name;\n\nprotected function get__name()\n{\n  return $this->first_name.' '.$this->last_name;\n}\n\nprotected function set__name($value)\n{\n  list($first, $last) = explode(' ', $value);\n\n  $this->setRawProperty('first_name', $first);\n  $this->setRawProperty('last_name', $last);\n}\n\n$my_model->name = 'Bob Bobson';\n$my_model->first_name; // Bob\n```\n\n----------------------------------------\n\nTITLE: Customizing Lexicon Updates with pro_search_update_lexicon Hook\nDESCRIPTION: This hook is utilized for modifying lexicon data prior to database insertion. It allows for custom alterations within the Pro Search feature of ExpressionEngine, seamlessly integrating into the existing extension and template architecture.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/hooks.md#2025-04-22_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$ext_data = ee()->extensions->call('pro_search_update_lexicon', $data, $entry);\n\nif (is_array($ext_data) && ! empty($ext_data))\n{\n  $data = array_merge($data, $ext_data);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Stop Conditions for Relative Dates in ExpressionEngine\nDESCRIPTION: Examples of using the 'stop' parameter to switch from relative to standard date display after specific time conditions. Uses PHP's strtotime() compatible values.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/date-variable-formatting.md#2025-04-22_snippet_13\n\nLANGUAGE: expressionengine\nCODE:\n```\n{entry_date:relative stop=\"+1 day\" format=\"%F %d %Y\"}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{entry_date:relative stop=\"tomorrow\" format=\"%F %d %Y\" timezone=\"Pacific/Tahiti\"}\n```\n\n----------------------------------------\n\nTITLE: Selecting Numeric Ranges Using Pro Search and Low List - ExpressionEngine - HTML\nDESCRIPTION: Features a dropdown to select predefined numeric ranges for 'service_price' using Low List. The 'range:service_price' parameter in the form is matched with 'service_price' in entries using the Pro Search range filter. Designed for numeric fields; requires 'service_price' to use a numeric format. Inputs are selected range values; outputs are the entries with service_price within that range. Dependencies: Pro Search and Low List add-ons.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/examples.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:form query=\"{segment_3}\"}\n  <select name=\"range:service_price\">\n    <option value=\"\">--</option>\n    {exp:low_list:each items=\"0|15:15 and below;15|25:15 - 25;25|50:25 - 50;50|:50 and up\" sep=\";\"}\n      <option value=\"{key}\"{if key == pro_search_range:service_price} selected{/if}>\n        {val}\n      </option>\n    {/exp:low_list:each}\n  </select>\n\n  <button type=\"submit\">Go</button>\n{/exp:pro_search:form}\n```\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:results\n  query=\"{segment_3}\"\n  channel=\"services\"\n  orderby=\"service_price\"\n  sort=\"asc\"\n}\n  <p>{title}: {service_price}</p>\n{/exp:pro_search:results}\n```\n\n----------------------------------------\n\nTITLE: Comment Date Formatting - ExpressionEngine Template\nDESCRIPTION: This line demonstrates how to use the {comment_date} variable with a format parameter to consistently display the comment's creation date in Year-Month-Day order. Date formatting codes follow ExpressionEngine specifications.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_17\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{comment_date format=\"%Y %m %d\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Sort Order for Members - ExpressionEngine Template\nDESCRIPTION: Shows usage for sort parameter to control ascending or descending display order. Accepts 'asc' or 'desc' as values. Integrates with orderby for customized sorting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_8\n\nLANGUAGE: ExpressionEngine Template Markup\nCODE:\n```\nsort=\"asc\"\n```\n\nLANGUAGE: ExpressionEngine Template Markup\nCODE:\n```\nsort=\"desc\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Pagination Base - ExpressionEngine Template\nDESCRIPTION: This snippet uses the paginate_base parameter to explicitly set the template group and template location for pagination links, overriding the default behavior. Useful for advanced template routing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_9\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\npaginate_base=\"site/index\"\n```\n\n----------------------------------------\n\nTITLE: Setting the Edit URL for a FolderItem in PHP\nDESCRIPTION: Specifies the URL to navigate to when the edit action is triggered for this `FolderItem`. Accepts a CP/URL object or a string. Returns the `FolderItem` instance (`$this`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nwithEditUrl($url)\n```\n\n----------------------------------------\n\nTITLE: Setting Manual Sorting in jQuery Table Plugin\nDESCRIPTION: Illustrates how to manually set the primary sorting column and direction (`asc` or `desc`) for the table using the `set_sort` method of the ExpressionEngine table plugin. This overrides any existing sort.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/table.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n$('table').table('set_sort', 'name', 'asc');\n```\n\n----------------------------------------\n\nTITLE: Calling rte_before_replace_end Hook in PHP\nDESCRIPTION: Demonstrates how the rte_before_replace_end hook is called in ExpressionEngine. This hook allows modification of field data before it is displayed using a template tag but after internal replacements are made.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/rte.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$data = ee()->extensions->call('rte_before_replace_end', $this, $data);\n```\n\n----------------------------------------\n\nTITLE: Multiple Category Selection Field Example\nDESCRIPTION: Shows how to implement a select field that allows multiple category selections using array notation in the field name.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/dynamic-parameters.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<select name=\"category[]\">\n```\n\n----------------------------------------\n\nTITLE: Defining Add-on Author URL in PHP\nDESCRIPTION: Specifies the `author_url` key within the `addon.setup.php` file. This key holds the URL associated with the add-on's author or project. It is a required field used for linking in the ExpressionEngine interface.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'author_url' => 'https://example.com'\n```\n\n----------------------------------------\n\nTITLE: Changing Font Size with BBCode\nDESCRIPTION: Illustrates using the [size] BBCode tag to change the font size of text. Valid sizes range from 1 (smallest) to 6 (largest).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/bbcode.md#2025-04-22_snippet_5\n\nLANGUAGE: bbcode\nCODE:\n```\n[size=4]Hey look at this![/size]\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_field_save Hook in PHP\nDESCRIPTION: Code showing how the after_channel_field_save hook is called within ExpressionEngine. This hook is triggered after a channel field is inserted or updated, but changes won't be automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_field_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling after_member_update Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the after_member_update hook is called in ExpressionEngine. This hook is triggered after a member object is updated in the database. Changes made to the object will not be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_member_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Ordering Popular Keywords Alphabetically - ExpressionEngine Template Tag\nDESCRIPTION: Demonstrates how to order the displayed popular keywords alphabetically by keyword using the orderby parameter with {exp:pro_search:popular}. Useful for customizing display order beyond the default count.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_22\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:popular orderby=\"keywords\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Preview and Submit Buttons in ExpressionEngine\nDESCRIPTION: An HTML snippet to provide users with options to preview or submit their email messages within an ExpressionEngine form, improving user experience by enabling revisions before final submission.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_18\n\nLANGUAGE: HTML\nCODE:\n```\n<input name=\"preview\" type='submit' value='Preview' />\n<input name=\"submit\" type='submit' value='Send' />\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Settings in ExpressionEngine Pro Add-on\nDESCRIPTION: Defines custom settings for cookies including descriptions and whether lifetime can be changed. This configuration is only applicable for ExpressionEngine Pro users.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n'cookie_settings' => [\n    'forum_theme' => [\n        'description' => 'lang:forum_theme_desc'\n        'lifetime_changeable' => false,\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_field_update Hook in PHP\nDESCRIPTION: Code showing how the before_channel_field_update hook is called within ExpressionEngine. This hook is triggered before a channel field is updated and includes modified values as a parameter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_field_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Calling after_status_insert Extension Hook in PHP\nDESCRIPTION: Example of how the after_status_insert hook is called within the Status model. This hook fires after a status object is inserted, but changes made to the object won't be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/status.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_status_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_field_insert Hook in PHP\nDESCRIPTION: Code showing how the before_channel_field_insert hook is called within ExpressionEngine. This hook is triggered before a channel field is inserted and allows modifications to be automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-field.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_field_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Using member_update_end Hook in ExpressionEngine PHP\nDESCRIPTION: This code shows how the member_update_end hook is called immediately before member data is updated. It allows execution of additional code with access to the member ID and data being updated.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/member-model.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->extensions->call('member_update_end', $member_id, $data);\n```\n\n----------------------------------------\n\nTITLE: Enabling Reordering for FolderList in PHP\nDESCRIPTION: Allows the items within the `FolderList` to be reordered by the user interface. Returns the `FolderList` instance (`$this`) for method chaining.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ncanReorder()\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Prefixed Model using the Model Service in PHP\nDESCRIPTION: Illustrates retrieving an add-on-specific model (`MyModel`) via the Model service (`ee('Model')`). The `get()` method is called with the model name prefixed by the add-on's name (`addonname:`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/architecture.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nee('Model')->get('addonname:MyModel')\n```\n\n----------------------------------------\n\nTITLE: Using fields->is_grid Method in Pro Search\nDESCRIPTION: Determines whether a given field name is a Grid field, returning TRUE or FALSE.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/functions.md#2025-04-22_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nif ($this->fields->is_grid('field_name')) {\n    // Field is a Grid field\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Sort Order - ExpressionEngine Template\nDESCRIPTION: This code shows how to use the sort parameter ('asc' or 'desc') to determine the direction of comment listings. Defaults to 'desc'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_11\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\nsort=\"asc\" ``sort=\"desc\"``\n```\n\n----------------------------------------\n\nTITLE: Generated Extension Hook Skeleton in ExpressionEngine\nDESCRIPTION: The initial structure of the TypographyParseTypeEnd extension class generated by the CLI. This shows the basic structure before any custom functionality is added.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extensions.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace ExpressionengineDeveloper\\AmazingAddOn\\Extensions;\n\nuse ExpressionEngine\\Service\\Addon\\Controllers\\Extension\\AbstractRoute;\n\nclass TypographyParseTypeEnd extends AbstractRoute\n{\n    public function process()\n    {\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Invoking after_role_delete Extension Hook in PHP\nDESCRIPTION: Called after a role object is deleted. Accepts the role object and its values as parameters. For conditional deletion, inverse relationships are recommended instead.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/role.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_role_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling Before Template Snippet Insert Hook in PHP\nDESCRIPTION: This snippet demonstrates how the 'before_template_snippet_insert' hook is called in ExpressionEngine. It passes the current TemplateSnippet model object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-snippet.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_template_snippet_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling the typography_parse_type_end Extension Hook in PHP\nDESCRIPTION: This snippet shows how the typography_parse_type_end hook is called within the Typography library. This hook allows modification of a string after all typography processing has been completed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/typography.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$str = $this->extensions->call('typography_parse_type_end', $str, $this, $prefs);\n```\n\n----------------------------------------\n\nTITLE: Using Model Service to Query Data in ExpressionEngine 3.0\nDESCRIPTION: Utilizes the Model Service to access ExpressionEngine's data types in a more idiomatic manner, allowing simplified data retrieval and manipulation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/v3-add-on-migration.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$oscar = ee('Model')->get('Member')\n  ->filter('screen_name’, ‘Oscar')\n  ->first();\n\n$oscar->bio = 'I got this.';\n$oscar->save();\n```\n\n----------------------------------------\n\nTITLE: ExpressionEngine Entry ID Variable for Preview URL\nDESCRIPTION: The `{entry_id}` variable can be used within the 'Preview URL' setting. ExpressionEngine replaces this variable with the specific entry's ID when generating the live preview link.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/channels.md#2025-04-22_snippet_6\n\nLANGUAGE: expressionengine\nCODE:\n```\n{entry_id}\n```\n\n----------------------------------------\n\nTITLE: Example Add-on Documentation Structure\nDESCRIPTION: Directory structure showing the recommended organization of add-on documentation files.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/in-app-documentation.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nAdd-on Name\n├── Requirements (optional)\n├── Installation (optional)\n├── Usage\n│   └── {exp:tag}\n│       ├── Example Usage\n│       ├── Parameters\n│       │   ├── param_name\n│       │   └── another_param\n│       └── Variables\n│           ├── variable_name\n│           └── another_var\n├── Changelog\n│   └── X.Y.Z\n├── Disclaimer (optional)\n└── License (optional)\n```\n\n----------------------------------------\n\nTITLE: Displaying Entry Channel URL in ExpressionEngine\nDESCRIPTION: The `{channel_url}` variable outputs the URL configured for the channel of the current entry in the Control Panel settings (Settings tab). This variable is available within `{entry_titles}` loops.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n{channel_url}\n```\n\n----------------------------------------\n\nTITLE: Getting FluidField Data Hook Call\nDESCRIPTION: Extension hook called before returning the fluid field object. Allows modification of fluid field data.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/fluid-field.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('fluid_field_get_all_data', $data, $fluid_field_id);\n```\n\n----------------------------------------\n\nTITLE: Calling before_member_field_delete Extension Hook in PHP\nDESCRIPTION: Demonstrates how the before_member_field_delete hook is called before a MemberField model is deleted. The documentation suggests using inverse relationships instead for better performance.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member-field.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_member_field_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: ExpressionEngine Specific Custom Cypress Commands\nDESCRIPTION: Provides custom commands tailored for ExpressionEngine in Cypress tests, extending its testing capabilities with specialized operations such as authentication and configuration management.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/cypress-tests.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ncy.eeConfig({ item: 'save_tmpl_files', value: 'n' })\ncy.eeConfig({ item: 'site_url' })\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_entry_insert Hook in PHP\nDESCRIPTION: Code demonstrating how the before_channel_entry_insert hook is called in ExpressionEngine before a channel entry is inserted. The hook passes the current ChannelEntry model object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-entry.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_entry_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_entry_delete Hook in PHP\nDESCRIPTION: Code demonstrating how the after_channel_entry_delete hook is called in ExpressionEngine after a channel entry is deleted. The hook passes the current ChannelEntry model object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-entry.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_entry_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Using Relationship Fields in Parent Entries\nDESCRIPTION: Shows how to display nested relationship fields within parent entries in ExpressionEngine, including accessing titles and related entry metadata.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_24\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{parents field=\\\"relationship_field\\\"}\\n  <h3>Related entry's title: {parents:title}</h3>\\n\\n  {parents:my_relationship status=\\\"open\\\"}\\n      {if parents:my_relationship:count == 1}\\n          <h3>Relationships ({parents:my_relationship:total_results})</h3>\\n      {/if}\\n\\n      <h3>Related entry's related entry's title: {parents:my_relationship:title}</h3>\\n\\n      Related entry's file field, med custom image size: {parents:my_relationship:my_file:med wrap=\\\"image\\\"}\\n\\n  {/parents:my_relationship}\\n{/parents}\n```\n\n----------------------------------------\n\nTITLE: Implementing Save and Replace Tag Methods for Fieldtypes in PHP\nDESCRIPTION: Demonstrates the fieldtype's save and replace_tag methods that handle data processing before saving to the database and displaying in templates.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/enhanced.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction save($data)\n{\n    // Concatenate this data to save in the database\n    return $data['text1'] . $data['text2'];\n}\n\nfunction replace_tag($data)\n{\n    // Data is preformatted, just return it!\n    return $data;\n}\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_entry_insert Hook in PHP\nDESCRIPTION: Code demonstrating how the after_channel_entry_insert hook is called in ExpressionEngine after a channel entry is inserted. The hook passes the current ChannelEntry model object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-entry.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_entry_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling before_member_bulk_delete Hook in ExpressionEngine (PHP)\nDESCRIPTION: Example of how the before_member_bulk_delete hook is called in ExpressionEngine. This hook is triggered before multiple member objects are deleted from the database in a bulk operation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_member_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Disabling Removal for a FolderItem in PHP\nDESCRIPTION: Hides the delete button associated with this `FolderItem` in the sidebar interface. Returns the `FolderItem` instance (`$this`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ncannotRemove()\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Class Aliases in ExpressionEngine Add-on\nDESCRIPTION: Sets up a class alias that maps one fully qualified class name to another, allowing references to a class to be redirected to a different implementation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n'aliases' => [\n  'MyVendor\\Services\\ClassName' => 'AnotherVendor\\Services\\ClassName',\n],\n```\n\n----------------------------------------\n\nTITLE: Formatting Current Time Display\nDESCRIPTION: This snippet demonstrates how to display the current server time using the current_time variable with date formatting. The time is localized to each user's particular setting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/single-variables.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n{current_time format=\"%Y %m %d %H:%i:%s\"}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Roles in ExpressionEngine 6\nDESCRIPTION: Code example demonstrating how to get all roles in the system using the new Role model in ExpressionEngine 6, returning a dictionary of role IDs and names.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/v6-add-on-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee('Model')->get('Role')->all()->getDictionary('role_id', 'name');\n// get all roles present in the system\n```\n\n----------------------------------------\n\nTITLE: Loading Multi-Site Pages in ExpressionEngine\nDESCRIPTION: Example of using the pages:load_site_pages tag to load page data from multiple sites when using the Multiple Site Manager. Shows how to specify multiple sites using the site parameter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pages.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{exp:pages:load_site_pages site=\"default_site|corporate_site\"}\n```\n\n----------------------------------------\n\nTITLE: Calling after_global_variable_insert Hook in PHP\nDESCRIPTION: Example of how the after_global_variable_insert hook is called. This hook executes after a global variable is inserted. Changes to the object will not be automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-global-variable.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_global_variable_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Invoking after_role_insert Extension Hook in PHP\nDESCRIPTION: Called after a role object is inserted. Changes made to the object will not be automatically saved. Accepts the role object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/role.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_role_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Block - ExpressionEngine Documentation Header\nDESCRIPTION: License and copyright information for the ExpressionEngine User Guide documentation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\n    This source file is part of the open source project\n    ExpressionEngine User Guide (https://github.com/ExpressionEngine/ExpressionEngine-User-Guide)\n\n    @link      https://expressionengine.com/\n    @copyright Copyright (c) 2003-2020, Packet Tide, LLC (https://packettide.com)\n    @license   https://expressionengine.com/license Licensed under Apache License, Version 2.0\n-->\n```\n\n----------------------------------------\n\nTITLE: Optimized Database Query Pattern\nDESCRIPTION: Shows how to optimize multiple database queries by caching results and avoiding redundant queries in loops.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/performance.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nforeach ($ids as $id)\n{\n    $query = ee()->db->query(\"SELECT name FROM exp_pre_email_addresses WHERE id = {$id}\");\n\n    if ($query->num_rows() > 0)\n    {\n        $name = $query->row('name');\n        // rest of the code\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nif ( ! isset(ee()->session->cache['super_class']['names']))\n{\n    $query = ee()->db->query('SELECT id, name FROM exp_pre_email_addresses WHERE id IN ('.implode(',', $ids).')');\n\n    if ($query->num_rows() > 0)\n    {\n        foreach ($query->result_array() as $row)\n        {\n            ee()->session->cache['super_class']['names'][$row['id']] = $row['name'];\n        }\n    }\n}\n\n$names = ee()->session->cache['super_class']['names'];\n\n// later in the code looped queries are no longer used\nforeach ($ids as $id)\n{\n    $name = $names[$id];\n    // rest of the code\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Relationships in ExpressionEngine PHP\nDESCRIPTION: Demonstrates how to unset a relationship by assigning NULL to the relationship property.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/relationships.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$member->PrimaryRole = NULL;\n```\n\n----------------------------------------\n\nTITLE: Using member_create_start Hook in ExpressionEngine PHP\nDESCRIPTION: This code demonstrates how the member_create_start hook is called in ExpressionEngine. It allows modification of member data and custom member data before a member is created in the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/member-model.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nlist($data, $cdata) = $this->extensions->call('member_create_start', $data, $cdata);\n```\n\n----------------------------------------\n\nTITLE: Profile Path and Entry Author Link\nDESCRIPTION: Shows how to construct a URL linking to the author's profile of the current entry, with the author's ID automatically appended to the URL.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/entries.md#2025-04-22_snippet_43\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"{profile_path='member'}\">{author}</a>\n```\n\n----------------------------------------\n\nTITLE: Ordering Shortcuts by Field - ExpressionEngine Template Tag\nDESCRIPTION: Demonstrates using the orderby parameter to control sorting of Pro Search shortcuts by a specific field, overriding the default sort. Applies in ExpressionEngine templates to change result ordering.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_7\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:shortcuts orderby=\"field\"}\n```\n\n----------------------------------------\n\nTITLE: Using compile() Method with JavaScript in PHP\nDESCRIPTION: Illustrates the use of the compile() method when setting a global JavaScript variable with formatted content in ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->javascript->set_global(array(\n  'form.some_input.value' => ee('Format')->make('String', $content)->attribute_escape()->compile()\n));\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Content Using Toggle Field - ExpressionEngine Template\nDESCRIPTION: This snippet demonstrates how to conditionally display content based on the value of a Toggle field in ExpressionEngine templates. The {if toggle_field} conditional outputs \\\"Yes\\\" or \\\"No\\\" depending on whether the Toggle field is on (1) or off (0). No additional dependencies are needed, but the channel entry must contain a Toggle field. Useful for providing user-friendly labels in templates based on boolean field data.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/toggle.md#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{if toggle_field}\n  Yes\n{if:else}\n  No\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Displaying Template Edit Date with Formatting\nDESCRIPTION: This snippet demonstrates how to display the last update time of the current template using the template_edit_date variable with date formatting. The date is displayed according to the specified format.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/single-variables.md#2025-04-22_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n{template_edit_date format=\"%Y %m %d %H:%i:%s\"}\n```\n\n----------------------------------------\n\nTITLE: Calling member_member_register_start Hook in PHP\nDESCRIPTION: This snippet illustrates how the member_member_register_start hook is called. It has no parameters and checks for script termination after execution.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/member-register.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('member_member_register_start');\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Defining Add-on Name in PHP\nDESCRIPTION: Specifies the `name` key within the `addon.setup.php` file. This key defines the display name of the add-on as it appears in the ExpressionEngine Add-On Manager. It is a required field.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/addon-setup-php-file.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'name' => 'Hello World'\n```\n\n----------------------------------------\n\nTITLE: Setting an Icon for a FolderItem in PHP\nDESCRIPTION: Assigns an icon to the `FolderItem` using the specified icon name (string). Returns the `FolderItem` instance (`$this`) for method chaining.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nwithIcon($icon)\n```\n\n----------------------------------------\n\nTITLE: Calling Member Login Single Extension Hook in PHP\nDESCRIPTION: Shows the implementation of calling the 'member_member_login_single' extension hook, which is triggered when a member logs in normally to ExpressionEngine.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/member-auth.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('member_member_login_single', $this->_hook_data());\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Calling after_member_field_update Extension Hook in PHP\nDESCRIPTION: Demonstrates how the after_member_field_update hook is called after a MemberField model is updated. Changes made to the model object will not be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member-field.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_member_field_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Channel Configuration in JSON\nDESCRIPTION: Channel configuration object showing how to define channel properties including title, status group, field group, and category groups.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/sets.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"channels\": [\n        {\n            \"channel_title\": \"Blog\",\n            \"status_group\": \"Default\",\n            \"field_group\": \"blog\",\n            \"cat_groups\": [\n                \"Blog\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Date Formatting with Multiple Elements\nDESCRIPTION: Demonstrates advanced date formatting combining multiple elements including day name, month, date, year, and time with custom separators.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/date-variable-formatting.md#2025-04-22_snippet_1\n\nLANGUAGE: ee\nCODE:\n```\n{current_time format=\"%D, %F %d, %Y - %g:%i:%s\"}\n```\n\n----------------------------------------\n\nTITLE: Pro Search Results Example\nDESCRIPTION: Example showing how to display search results with pagination and no-results handling.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_3\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_search:results query=\"{segment_3}\" default:limit=\"10\"}\n {if count ==  1}<ol>{/if}\n  <li><a href=\"{comment_url_title_auto_path}\">{title}</a></li>\n {if count == total_results}</ol>{/if}\n {if no_results}No search results{/if}\n{/exp:pro_search:results}\n```\n\n----------------------------------------\n\nTITLE: Accessing Fluid-specific Settings in PHP\nDESCRIPTION: Demonstrates how to access Fluid-specific settings within a fieldtype class, specifically the Fluid field Data entity ID.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/fieldtypes/fieldtypes.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$this->settings['fluid_field_data_id'];\n```\n\n----------------------------------------\n\nTITLE: Calling Forum Submit Post Start Hook\nDESCRIPTION: Example of calling the forum_submit_post_start hook for pre-submission processing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/forum.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$edata = ee()->extensions->universal_call('forum_submit_post_start', $this);\nif (ee()->extensions->end_script === TRUE) return $edata;\n```\n\n----------------------------------------\n\nTITLE: Setting PayPal Certificate ID for Simple Commerce\nDESCRIPTION: Specifies the unique ID supplied by PayPal after providing them with a public certificate. Required for encrypted PayPal transactions in Simple Commerce.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_125\n\nLANGUAGE: php\nCODE:\n```\n$config['sc_certificate_id'] = 'SX4DT7FDO1234';\n```\n\n----------------------------------------\n\nTITLE: Before Template Group Save Hook Call\nDESCRIPTION: Extension hook called before saving (inserting or updating) a template group. Changes made to the object will be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-group.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_template_group_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Registering a Dependency via a Provider in PHP\nDESCRIPTION: Shows registering an object (`$obj`) with the name `'service'` using a `Provider` instance. The provider automatically prepends its assigned prefix (`'myaddon'`) to the name, making the registration equivalent to calling `register('myaddon:service', $obj)` on the underlying container.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/architecture.md#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$provider->register('service', $obj);\n// ==\n$dependencies->register('myaddon:service', $obj);\n```\n\n----------------------------------------\n\nTITLE: Calling after_member_field_insert Extension Hook in PHP\nDESCRIPTION: Demonstrates how the after_member_field_insert hook is called after a MemberField model is inserted. Changes made to the model object will not be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member-field.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_member_field_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Implementing before_category_field_bulk_delete Hook in PHP\nDESCRIPTION: Example of how the before_category_field_bulk_delete hook is called in ExpressionEngine. This hook is triggered before multiple category fields are deleted in bulk.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-field.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_category_field_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Implementing before_category_field_save Hook in PHP\nDESCRIPTION: Example of how the before_category_field_save hook is called in ExpressionEngine. This hook is triggered before a category field is saved (insert or update).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-field.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_category_field_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling before_member_field_update Extension Hook in PHP\nDESCRIPTION: Demonstrates how the before_member_field_update hook is called before a MemberField model is updated. Changes made to the model object will be automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/member-field.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_member_field_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Date Format in ExpressionEngine\nDESCRIPTION: Configures the default format for displaying dates in ExpressionEngine using date formatting codes. This can be overridden by member localization preferences if enabled.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$config['date_format'] = '%F %d %Y';\n```\n\n----------------------------------------\n\nTITLE: Branch Structure Example in Markdown\nDESCRIPTION: Shows the branching structure used in the ExpressionEngine documentation repository, including release and development branches.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Branch | Purpose |\n| ------ | ------- |\n| #.x | Currently released and published version.\n| #.dev | Updates for the next version of ExpressionEngine (current version is the default branch). Does not exist for previous versions. |\n```\n\n----------------------------------------\n\nTITLE: Calling comment_form_hidden_fields Hook in PHP\nDESCRIPTION: This snippet shows how the comment_form_hidden_fields hook is called to add or remove hidden fields in the comment form.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/comment.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$hidden_fields = ee()->extensions->call('comment_form_hidden_fields', $hidden_fields);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_form_settings_delete Extension Hook in PHP\nDESCRIPTION: Demonstrates how the after_channel_form_settings_delete extension hook is called. This hook triggers after a channel form settings object is deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-form-settings.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_form_settings_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Defining Return Template after Search - ExpressionEngine Template\nDESCRIPTION: Specifies the return parameter for redirecting after a search form submission, pointing to a target member/memberlist template. Useful for navigation flow. The template group and name should exist in the ExpressionEngine site.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_9\n\nLANGUAGE: ExpressionEngine Template Markup\nCODE:\n```\nreturn=\"member/memberlist\"\n```\n\n----------------------------------------\n\nTITLE: After Template Group Update Hook Call\nDESCRIPTION: Extension hook called after updating a template group. Changes to the object will not be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-group.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_template_group_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Listing Pro Search Shortcuts - ExpressionEngine Template Tag\nDESCRIPTION: This snippet demonstrates how to list Pro Search shortcuts using the {exp:pro_search:shortcuts} tag. It includes conditionals to generate a <ul> only for the first and last result, outputs each shortcut as a list item with a link, and supports additional parameters to limit, offset, or order the results. The code relies on ExpressionEngine tag parsing and is contextualized for use in templates. Expected inputs are the group ID via the group_id parameter, and outputs include rendered HTML lists of search shortcut links.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_4\n\nLANGUAGE: ExpressionEngine Template Tag\nCODE:\n```\n{exp:pro_search:shortcuts group_id=\"1\"}\n {if count == 1}<ul>{/if}\n  <li><a href=\"{path=\"search/{shortcut_name}\"}\">{shortcut_label}</a></li>\n {if count == total_results}</ul>{/if}\n{/exp:pro_search:shortcuts}\n```\n\n----------------------------------------\n\nTITLE: Implementing Emoji Picker in HTML and JavaScript\nDESCRIPTION: This snippet demonstrates how to implement a clickable emoji catalog using jQuery UI Dialog. It includes HTML for the picker link and container, and JavaScript for loading and displaying the emoji picker.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/emoji.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"\" class=\"emoji-picker-link\">Pick Emoji</a>\n<div id=\"emoji-picker\"></div>\n\n<link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css\">\n<script src=\"//code.jquery.com/jquery-3.2.1.min.js\"></script>\n<script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n<script type=\"text/javascript\">\n  $(function() {\n    $('#emoji-picker').dialog({\n      autoOpen: false,\n      maxHeight: 300,\n    });\n\n    $('.emoji-picker-link').on('click', function() {\n      $(\"#emoji-picker\").load(\"{path='site/emoji-picker'}\").dialog('open');\n      return false;\n    });\n    addEmoji = function(emoji) {\n      var comment = $('#comment_form textarea[name=comment]');\n        comment.val(comment.val() + ' ' + emoji + ' ');\n        return false;\n    }\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Date Fields with Formatting in Relationship Tags\nDESCRIPTION: This snippet shows how to format date fields within relationship tags in ExpressionEngine templates using a specified format.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/relationships.md#2025-04-22_snippet_8\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{relationship_field}\\n  {relationship_field:my_date format=\\\"%F %d %Y\\\"}\\n{/relationship_field}\n```\n\n----------------------------------------\n\nTITLE: Calling before_category_group_update Hook in PHP\nDESCRIPTION: Example of how the before_category_group_update hook is called. This hook is triggered before a category group is updated in the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/category-group.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_category_group_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Displaying Date-Based Statistics in ExpressionEngine\nDESCRIPTION: Examples showing how to format date-based statistics variables such as last comment date, last entry date, and visitor dates with custom formatting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/statistics.md#2025-04-22_snippet_3\n\nLANGUAGE: expressionengine\nCODE:\n```\n{last_comment_date format=\"%m/%d/%Y %h:%i %a\"}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{last_entry_date format=\"%m/%d/%Y %h:%i %a\"}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{last_visitor_date format=\"%m/%d/%Y %h:%i %a\"}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{most_visitor_date format=\"%m/%d/%Y %h:%i %a\"}\n```\n\n----------------------------------------\n\nTITLE: Applying Emphasis and Italic Formatting with BBCode\nDESCRIPTION: Provides examples of using the [em] and [i] BBCode tags to render text with emphasis or in italics.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/bbcode.md#2025-04-22_snippet_9\n\nLANGUAGE: bbcode\nCODE:\n```\n[em]some em text[/em]  [i]some italic text[/i]\n```\n\n----------------------------------------\n\nTITLE: API Endpoint for Importing Licenses in ExpressionEngine\nDESCRIPTION: The API endpoint for importing licenses into the ExpressionEngine system. Add-on developers should make a JSON POST request to this URL.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/license-validation/importing-licenses.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST https://expressionengine.com/vendor-api/import-license\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection with Model Data in ExpressionEngine PHP\nDESCRIPTION: Executes the query and returns a Collection containing all matching Templates. The all() method finalizes the query and retrieves the data.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$templates = $builder->all();\n```\n\n----------------------------------------\n\nTITLE: Expanded Template Partial Example\nDESCRIPTION: Shows how the Template partial is expanded in the final template output, displaying the actual date formatting parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/partials.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{entry_date format=\"%m-%d-%Y\"}\n```\n\n----------------------------------------\n\nTITLE: Calling Forum Submission Form Start Hook\nDESCRIPTION: Example of calling the forum_submission_form_start hook for modifying submission form template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/forum.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$str = ee()->extensions->universal_call('forum_submission_form_start', $this, $str);\nif (ee()->extensions->end_script === TRUE) return $str;\n```\n\n----------------------------------------\n\nTITLE: Generating Logout URL Path in ExpressionEngine\nDESCRIPTION: This ExpressionEngine template variable generates the URL path required for a user to log out of the system. It should be used within an HTML anchor tag's href attribute.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/logout.md#2025-04-22_snippet_0\n\nLANGUAGE: ee\nCODE:\n```\n{path='logout'}\n```\n\n----------------------------------------\n\nTITLE: Running All Migrations - PHP\nDESCRIPTION: Commands for running all migrations in ExpressionEngine. It demonstrates using the aliases for executing all available migrations, which include `--all`, `--everything`, and `-e`. These commands require ExpressionEngine's CLI tool, `eecli.php`, and the output is the execution of all defined migrations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/migrate.md#2025-04-22_snippet_1\n\nLANGUAGE: CLI\nCODE:\n```\nphp eecli.php migrate --all\n```\n\nLANGUAGE: CLI\nCODE:\n```\nphp eecli.php migrate --everything\n```\n\nLANGUAGE: CLI\nCODE:\n```\nphp eecli.php migrate -e\n```\n\nLANGUAGE: CLI\nCODE:\n```\nphp eecli.php migrate:all\n```\n\n----------------------------------------\n\nTITLE: URL Generated by the Stylesheet Variable in ExpressionEngine\nDESCRIPTION: Example output URL when using the stylesheet variable with a base URL of example.com. The CSS is accessed through a query parameter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/stylesheet.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://example.com/?css=template_group/css_template\n```\n\n----------------------------------------\n\nTITLE: Multiple Field Selection Query\nDESCRIPTION: Query demonstrating selection of multiple fields from the members table with group filtering.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/query.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{exp:query sql=\"SELECT screen_name, email, location FROM exp_members WHERE group_id = '1'\"}\n    {screen_name}\n    {email}\n    {location}\n{/exp:query}\n```\n\n----------------------------------------\n\nTITLE: Generating Member Management Templates in ExpressionEngine CLI\nDESCRIPTION: This command generates member management templates using the ExpressionEngine CLI. It specifies the template group for the member profiles.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/generators.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp system/ee/eecli.php generate:templates member:profile --template_group=members\n```\n\n----------------------------------------\n\nTITLE: Setting Redirect Method for Windows Servers\nDESCRIPTION: Configuration setting to resolve Control Panel login issues on Windows-based servers by modifying the redirect method in the system configuration file.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/control-panel.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$config['redirect_method'] = \"refresh\";\n```\n\n----------------------------------------\n\nTITLE: Listing Available ExpressionEngine CLI Commands (Shell)\nDESCRIPTION: Provides the command used to display a list of all registered commands available within the ExpressionEngine CLI environment.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/usage.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nphp system/ee/eecli.php list\n```\n\n----------------------------------------\n\nTITLE: Using Pro Search Settings Helper in Pro Search\nDESCRIPTION: Retrieves Pro Search settings, either all settings or a single one with an optional fallback value.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/development/functions.md#2025-04-22_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n$setting = ee()->pro_search_settings->get('setting_name', 'fallback_value');\n```\n\n----------------------------------------\n\nTITLE: Calling Edit Wiki Article Form Start Hook in PHP\nDESCRIPTION: Extension hook called at the start of the edit form to allow additional processing or takeover.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/wiki.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->universal_call('edit_wiki_article_form_start', $this, $title, $query);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Adding FluidField Hook Call\nDESCRIPTION: Extension hook called before inserting a new fluid field. Allows modification of field values before insertion.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/fluid-field.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('fluid_field_add_field', $field_table_name, $values);\n```\n\n----------------------------------------\n\nTITLE: Chaining Model Queries in ExpressionEngine PHP\nDESCRIPTION: Shows how to chain model methods together for brevity, combining the get() and all() methods in a single statement.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/fetching.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$templates = ee('Model')->get('Template')->all();\n```\n\n----------------------------------------\n\nTITLE: Calling Wiki Article Start Hook in PHP\nDESCRIPTION: Extension hook called at the start of article display to allow additional processing or takeover of wiki article display.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/wiki.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->universal_call('wiki_article_start', $this, $title, $query);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Inclusive Stack Parameter Configuration\nDESCRIPTION: Demonstrates how to configure dynamic parameters to treat multiple values as an inclusive stack using the [&] notation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/dynamic-parameters.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\ndynamic_parameters=\"orderby|limit|category[&]\"\n```\n\n----------------------------------------\n\nTITLE: Calling After Site Insert Hook - PHP\nDESCRIPTION: Extension hook called after a site object is inserted. Changes to the object will not be automatically saved.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/site.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_site_insert', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Address Fields in ExpressionEngine\nDESCRIPTION: This snippet demonstrates how to use email fields within `grid_field` contexts in ExpressionEngine. It checks for the presence of an email field and sets up a mailto link with a specified title and subject. The encode attribute is also shown to be configurable.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/grid.md#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine\nCODE:\n```\n{grid_field}\n  {if grid_field:my_email}\n    {grid_field:my_email:mailto title=\"Email about their dog\" subject=\"Question about your dog\" encode=\"no\"}\n  {/if}\n{/grid_field}\n```\n\n----------------------------------------\n\nTITLE: Using Backspace Parameter in Search Results\nDESCRIPTION: Example showing how to use the backspace parameter to remove characters from the last iteration of the search results loop. This is useful for removing line breaks or HTML elements after the final item.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/search/results.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{exp:search:search_results backspace=\"7\"}\n    {title}<br />\n{/exp:search:search_results}\n```\n\n----------------------------------------\n\nTITLE: Ordering Members by Field - ExpressionEngine Template\nDESCRIPTION: Shows setting the orderby parameter to display members sorted by a specific field, such as screen_name. Supports built-in member fields and integrates with other filter options. Field values must match allowed set.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_6\n\nLANGUAGE: ExpressionEngine Template Markup\nCODE:\n```\norderby=\"screen_name\"\n```\n\n----------------------------------------\n\nTITLE: Channel Form Submit Entry End Hook\nDESCRIPTION: Hook called after entry submission is complete. Receives the channel form object as parameter.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/channel-form.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('channel_form_submit_entry_end', $this);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: SQL Injection Prevention with Manual Query Escaping\nDESCRIPTION: Example of properly escaping variables in SQL queries to prevent injection attacks\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/security.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$query = ee()->db->query(\"SELECT * FROM exp_members WHERE username='{$evil}'\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Textarea Variables in ExpressionEngine\nDESCRIPTION: Examples of using Pro Variables module tags to display textarea variables with formatting and preparsing options.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-variables/type.md#2025-04-22_snippet_6\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_variables:single var=\"my_var\" formatting=\"xhtml\" html=\"all\"}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:pro_variables:single var=\"my_var\" preparse:entry_id=\"12\"}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Collections in ExpressionEngine\nDESCRIPTION: Example showing how to create a Collection object and use basic methods like count(), first(), and sortBy(). The Collection class provides enhanced functionality for manipulating arrays of data.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/collection.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse ExpressionEngine\\Library\\Data\\Collection;\n\n$collection = new Collection(array(\n  array('name' => 'Anne', 'age' => 47),\n  array('name' => 'Bob', 'age' => 32),\n  array('name' => 'Julie', 'age' => 14),\n  array('name' => 'Jack', 'age' => 86)\n));\n\n$collection->count(); // 4\n$collection->first(); // Anne's array\n\n$sorted = $collection->sortBy('age');\n$sorted->first(); // Julie's array\n```\n\n----------------------------------------\n\nTITLE: Retrieving a File Model Instance in PHP\nDESCRIPTION: Demonstrates how to retrieve a File model instance using the ExpressionEngine Model service. This snippet fetches the File with ID 4.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/file.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$file = ee('Model')->get('File', 4)->first();\n```\n\n----------------------------------------\n\nTITLE: Pro Search Term Definitions\nDESCRIPTION: Defines common terms used throughout the documentation including parameter requirements and limitations.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/tags.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrequired: This parameter/field is required for this tag to function.\nform only: This can only be set as a field in the form and not as a parameter in the tag.\nparam only: This parameter can only be set in the tag and not as a field in the form.\nfixed value: This field cannot be edited and is set with a fixed value.\nrecurring only: This parameter/field only applies to recurring charges.\none-time only: This parameter/field only applies to one-time charges.\nadded in X.X.X: This parameter/field is only available from this version forward.\nlogged in: This tag is only available if the user is logged in.\n```\n\n----------------------------------------\n\nTITLE: Executing make:extension-hook in Bash\nDESCRIPTION: This example demonstrates how to execute the `make:extension-hook` command via the ExpressionEngine CLI (`eecli.php`). It shows how to implement the `sessions_start` extension hook specifically within an add-on located in the `my_existing_addon` folder. This command will generate the necessary boilerplate code for the hook within that add-on.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/built-in-commands/make-extension-hook.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp eecli.php make:extension-hook sessions_start --addon=my_existing_addon\n```\n\n----------------------------------------\n\nTITLE: Calling Wiki Start Hook in PHP\nDESCRIPTION: Extension hook called at the start of wiki page processing to allow modification of the page template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/wiki.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->return_data = ee()->extensions->universal_call('wiki_start', $this);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: URL Decoding in PHP\nDESCRIPTION: Demonstrates the urlDecode() method for decoding URL-encoded strings.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$text = ee('Format')->make('Text', 'A%20discussion%20about%20%22Wonko%20the%20Sane%22')->urlDecode();\n// A discussion about \"Wonko the Sane\"\n```\n\n----------------------------------------\n\nTITLE: PHP Method Example\nDESCRIPTION: Example of PHP code usage with library loading and array configuration.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/style-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nee()->load->library('some_class');\n\n$bar = array(\n    'something'   => 'Here is this parameter!',\n    'something_else'  => 42\n);\n```\n\n----------------------------------------\n\nTITLE: Getting String Length in PHP\nDESCRIPTION: Shows how to use the length() method to get the length of a string.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$length = ee('Format')->make('Text', 'A discussion about \"Wonko the Sane\"')->length();\n// 35\n```\n\n----------------------------------------\n\nTITLE: GET Variables Search Query Example\nDESCRIPTION: Example of how a search query appears in the URL using GET variables instead of encoded format.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/settings.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndomain.com/search/results?keywords=hello+world\n```\n\n----------------------------------------\n\nTITLE: Assigning a Name to the ExpressionEngine Login Form\nDESCRIPTION: Illustrates using the `form_name=` parameter to add a name attribute to the generated `<form>` tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/login.md#2025-04-22_snippet_4\n\nLANGUAGE: ee\nCODE:\n```\nform_name=\"login\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Member Navigation Using Conditional Template Tags - ExpressionEngine Template\nDESCRIPTION: This code demonstrates how to leverage ExpressionEngine's conditional template tags to dynamically render navigation links based on the user's authentication state. It outputs profile editing, member listing, and logout links for logged-in users, while providing login, registration, and forgot password links to logged-out visitors. This approach requires ExpressionEngine's template parsing system and access to member-related template variables. The input state is derived from whether the \\'logged_in\\' or \\'logged_out\\' conditional evaluates true in the session; the output is context-dependent navigation HTML. Limitations: Only works within ExpressionEngine templates and assumes standard member URL routes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/index.md#2025-04-22_snippet_0\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{if logged_in}\n  <a href=\"{path='member/profile'}\">Edit your profile</a><br>\n  <a href=\"{path='member/memberlist'}\">View the Memberlist</a><br>\n  <a href=\"{path='logout'}\">Log Out</a>\n{/if}\n{if logged_out}\n  Are you a member? Please <a href=\"{path='member/login'}\">log-in</a>.<br>\n  Not a member? <a href=\"{path='member/register'}\">Register</a>.<br>\n  Have you <a href=\"{path='member/forgot'}\">forgotten your password</a>?\n{/if}\n```\n\n----------------------------------------\n\nTITLE: PHP Property Access Example\nDESCRIPTION: Example showing required member properties including role_id, username, email, and password.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/member.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n- role_id\n- username\n- email\n- password\n```\n\n----------------------------------------\n\nTITLE: Date Formatting in ExpressionEngine\nDESCRIPTION: Shows how to format dates for modified and upload dates using ExpressionEngine's date variable formatting\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/file.md#2025-04-22_snippet_2\n\nLANGUAGE: expressionengine\nCODE:\n```\n{modified_date format=\"%Y %m %d\"}\n```\n\nLANGUAGE: expressionengine\nCODE:\n```\n{upload_date format=\"%Y %m %d\"}\n```\n\n----------------------------------------\n\nTITLE: Calendar Hook Implementation\nDESCRIPTION: Shows the channel_module_calendar_start hook implementation for calendar data rendering.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/channel.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$edata = $this->extensions->call('channel_module_calendar_start');\nif ($this->extensions->end_script === TRUE) return $edata;\n```\n\n----------------------------------------\n\nTITLE: Before Comment Delete Hook Call\nDESCRIPTION: Extension hook called before a comment is deleted from the database.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/comment.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_comment_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling After Delete Hook in ExpressionEngine PHP\nDESCRIPTION: Extension hook called after deleting a specialty template object.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-specialty-template.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_specialty_template_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Setting CAPTCHA Requirement for Members in ExpressionEngine (PHP)\nDESCRIPTION: Specifies whether to require logged-in members to pass CAPTCHA validation for front-end forms. 'y' requires CAPTCHA, 'n' does not (default).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$config['captcha_require_members'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Generating Comment Page Link with URL Title in ExpressionEngine/HTML\nDESCRIPTION: Demonstrates using the `{comment_url_title_auto_path}` variable within an HTML anchor tag to create a link to the entry's comment page, as defined in channel settings. ExpressionEngine automatically appends the entry's URL title to the base comment URL.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{comment_url_title_auto_path}\">my entry</a>\n```\n\n----------------------------------------\n\nTITLE: Disabling IP Address Requirement for Login\nDESCRIPTION: PHP configuration setting to disable the IP address requirement for ExpressionEngine login in config.php file.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/error-messages.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$config['require_ip_for_login'] = \"n\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Thumbnails with Dynamic Sizing in Moblog Templates in Markdown\nDESCRIPTION: This snippet shows how to use template variables for thumbnail previews. The {images} tag iterates over each image, and {thumbnail}, {thumb_width}, and {thumb_height} are inserted into an <img> HTML tag. These variables provide the URL, width, and height of the automatically generated thumbnail for each attached image.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n{images} <img src=\"{thumbnail}\" width=\"{thumb_width}\" height=\"{thumb_height}\" alt=\"thumbnail image\" /> {/images}\n```\n\n----------------------------------------\n\nTITLE: Watching Theme Assets for Changes\nDESCRIPTION: Command to automatically rebuild theme assets when source files change.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watchAssets\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: Command to install all the required npm dependencies for building the documentation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Testing User's Screen Name\nDESCRIPTION: Example of checking the screen name of the logged in user.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_24\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if logged_in_screen_name == \"Mr. Ed\"}  Thanks for all your hard work on the site, Ed!  {/if}\n```\n\n----------------------------------------\n\nTITLE: Getting Client IP Address\nDESCRIPTION: Example of using the request:ip_address tag to retrieve the client's IP address.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/request.md#2025-04-22_snippet_5\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:request:ip_address}\n```\n\n----------------------------------------\n\nTITLE: Configuring favicon in ExpressionEngine Control Panel\nDESCRIPTION: Setting the URL to a file used as the favicon in the Control Panel interface.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_74\n\nLANGUAGE: php\nCODE:\n```\n$config['favicon'] = '/url/to/icon.png';\n```\n\n----------------------------------------\n\nTITLE: Watching Documentation Files for Changes\nDESCRIPTION: Command to automatically rebuild documentation when source files change.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Registering CLI Commands in ExpressionEngine addon.setup.php (PHP)\nDESCRIPTION: This PHP array structure is returned by an add-on's `addon.setup.php` file to define the add-on's metadata. The `commands` key specifically registers CLI commands by mapping a unique command handle (e.g., `amazing:run`) to the fully qualified class name (or a string representation) responsible for executing that command. This allows the ExpressionEngine CLI tool to discover and execute the custom commands.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/creating-a-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn array(\n    'author'             => 'Awesome Developer',\n    'author_url'         => 'https://example.com/',\n    'name'               => 'My Amazing Module',\n    'description'        => 'Does amazing things',\n    'version'            => '1.0',\n    'namespace'          => 'Awesome\\AmazingModule',\n    'settings_exist'     => true,\n    'commands'            => [\n        'amazing:run'            => Awesome\\AmazingModule\\Commands\\DoThings::class,\n        'amazing:more-things'    => 'Awesome\\AmazingModule\\Commands\\DoMoreThings',\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Single Tag Template in ExpressionEngine\nDESCRIPTION: This snippet shows how to render a single template tag for a range slider field in ExpressionEngine, displaying a preselected numerical range on a webpage. The template takes various parameters, including 'decimal_place', 'prefix', and 'suffix', to customize the output format.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/range-slider.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{my_range_slider_field}\n```\n\n----------------------------------------\n\nTITLE: CSRF Token Implementation in HTML Form\nDESCRIPTION: Example of including CSRF token in HTML forms for security\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/guidelines/security.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" name=\"csrf_token\" value=\"{csrf_token}\">\n```\n\n----------------------------------------\n\nTITLE: Setting force_redirect in ExpressionEngine\nDESCRIPTION: Configuration to show an interstitial confirmation message when a user clicks a submitted link, preventing redirection issues.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_77\n\nLANGUAGE: php\nCODE:\n```\n$config['force_redirect'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding Ignored User Comments in ExpressionEngine/HTML\nDESCRIPTION: Demonstrates using the `{if is_ignored}` conditional within a `{exp:comment:entries}` loop to hide comments made by users on the logged-in user's ignore list. It shows a message indicating the user is ignored and applies an inline style `display: none;` to the comment container.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_36\n\nLANGUAGE: html\nCODE:\n```\n{exp:comment:entries}\n  {if is_ignored}You are ignoring {author}.{/if}\n  <div {if is_ignored}style=\"display: none;\"{/if}>{comment}</div>\n{/exp:comment:entries}\n```\n\n----------------------------------------\n\nTITLE: Inserting Order By Options Select Dropdown - HTML with ExpressionEngine Variables\nDESCRIPTION: Shows dynamic select field for order by options, using {order_by_options} to generate HTML option tags. Used for letting users pick the member sorting criterion from allowed fields.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/memberlist.md#2025-04-22_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<select name='order_by' class='select'>\n    {order_by_options}\n</select>\n```\n\n----------------------------------------\n\nTITLE: Defining Image Output with Moblog Template Variables in Markdown\nDESCRIPTION: This snippet shows how to use the {images} tag pair to iterate over images attached to a Moblog email, embedding each image's URL and its dimensions in standard HTML. No dependencies are required except the ExpressionEngine Moblog parser. The parameters {file}, {width}, and {height} represent the URL, width, and height of each image, with the template outputting each as an <img> tag; the enclosing {images}...{/images} determines the repetition for multiple attachments.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n{images}<img src=\"{file}\" width=\"{width}\" height=\"{height}\" alt=\"pic\" />{/images}\n{text}\n```\n\n----------------------------------------\n\nTITLE: Calling after_channel_layout_save Hook in PHP\nDESCRIPTION: Example of how the after_channel_layout_save hook is called after saving a channel layout (insert or update). It passes the current ChannelLayout object and its values as parameters.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-layout.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_channel_layout_save', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Getting Help for an ExpressionEngine CLI Command (Shell)\nDESCRIPTION: Demonstrates how to retrieve detailed help information for a specific ExpressionEngine CLI command (in this case, 'hello') by appending the '--help' or '-h' parameter. The output includes a summary, usage instructions, description, and available options.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/usage.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ php system/ee/eecli.php hello -h\n\nSUMMARY\n    Hello World -- This is a sample command used to test the CLI\n\nUSAGE\n    Hello World php eecli.php hello\n\nDESCRIPTION\n    The most basic of commands\n\nOPTIONS\n    --verbose\n    -v\n        Hello world, but longer\n\n    --interactive\n    -i\n        Let's interact!\n\n    --confirm\n    -c\n        Test the confirmation\n```\n\n----------------------------------------\n\nTITLE: Calling comment_preview_tagdata Hook in PHP\nDESCRIPTION: This snippet demonstrates how the comment_preview_tagdata hook is called to modify the tagdata contents of the comment preview.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/comment.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$tagdata = ee()->extensions->call('comment_preview_tagdata', $tagdata);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Specifying Fields and Formats in Moblog Entry Templates in Markdown\nDESCRIPTION: This snippet demonstrates the use of the {field} tag pair within a Moblog template to direct submitted content into a specific field, with formatting specified as an attribute. The 'name' parameter indicates the custom field short name, and 'format' selects the text formatting ('xhtml' or 'none'). Dependencies are limited to ExpressionEngine's Moblog templating capabilities. The wrapped content is substituted into the correct channel field on processing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n{field name=\"body\" format=\"xhtml\"} {text} {/field}\n{field name=\"body_image\" format=\"none\"} {images} <img src=\"{file}\" width=\"{width}\" height=\"{height}\" alt=\"pic\" /> {/images} {/field}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Template Group in ExpressionEngine (PHP)\nDESCRIPTION: Specifies the default template group to be used when the site is loaded without URL segments. Must be used with template setting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_158\n\nLANGUAGE: php\nCODE:\n```\n$config['template_group'] = 'about';\n```\n\nLANGUAGE: php\nCODE:\n```\n$assign_to_config['template_group'] = 'site_2';\n```\n\n----------------------------------------\n\nTITLE: Configuring Avatar Dimensions and Size in ExpressionEngine (PHP)\nDESCRIPTION: Sets maximum height, width and file size limits for user avatars.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$config['avatar_max_height'] = '120';\n$config['avatar_max_width'] = '120';\n$config['avatar_max_kb'] = '200';\n```\n\n----------------------------------------\n\nTITLE: Displaying Entry Channel Name in ExpressionEngine\nDESCRIPTION: The `{channel}` variable outputs the full, human-readable name of the channel for the current entry, as defined in the Control Panel. Used within `{entry_titles}` loops or other entry contexts.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n{channel}\n```\n\n----------------------------------------\n\nTITLE: Limiting Number of Comments - ExpressionEngine Template\nDESCRIPTION: This code sets the limit parameter to restrict the number of comments displayed per page via the Comment Entries Tag. The default is 100, but this can be set as needed and interacts with pagination for customized comment page sizes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_6\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\nlimit=\"30\"\n```\n\n----------------------------------------\n\nTITLE: Updating Module File Structure for ExpressionEngine 7.2+\nDESCRIPTION: Shows how to update a module file to use the new Module service by extending the base Module class and adding required addon_name property.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/modernizing-existing-add-ons.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse ExpressionEngine\\Service\\Addon\\Module;\n\nclass Amazing_add_on extends Module\n{\n    protected $addon_name = 'amazing_add_on';\n```\n\n----------------------------------------\n\nTITLE: Entry Title Override Syntax for Moblog Emails\nDESCRIPTION: Examples of how to override the default entry title in Moblog emails using either braces or angle brackets.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{entry_title}My Unique Title{/entry_title}\n\n<entry_title>My Unique Title</entry_title>\n```\n\n----------------------------------------\n\nTITLE: Comment Expiration Date Formatting - ExpressionEngine Template\nDESCRIPTION: This line shows how to use the {comment_expiration_date} variable with a custom format to output the expiration date of comment acceptance for an entry. Useful for informing users when commenting closes.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/comment/entries.md#2025-04-22_snippet_18\n\nLANGUAGE: ExpressionEngine Template\nCODE:\n```\n{comment_expiration_date format='%Y-%m-%d'}\n```\n\n----------------------------------------\n\nTITLE: Filtering Parents by Selected Child Entries (Specialty Pizzas) - ExpressionEngine - HTML\nDESCRIPTION: Renders a list of child entries (e.g., pizza types) as checkboxes. When selected, the Pro Search results tag finds parent entries (e.g., shops) related to any chosen children, using the 'child:specialty_pizzas[]' parameter. Adding 'require_all' to the results tag restricts the filter to matching all selected children. Inputs are selected checkboxes for pizzas; outputs are parent entries serving selected pizzas.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/pro-search/examples.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:form query=\"{segment_3}\"}\n  {exp:channel:entries channel=\"pizzas\" dynamic=\"no\"}\n    <label>\n      <input type=\"checkbox\" name=\"child:specialty_pizzas[]\" value=\"{entry_id}\"{if pro_search_child:specialty_pizzas ~ '/\\b'.entry_id.'\\b/'} checked{/if}>\n      {title}\n    </label>\n  {/exp:channel:entries}\n  <button type=\"submit\">Go</button>\n{/exp:pro_search:form}\n```\n\nLANGUAGE: html\nCODE:\n```\n{exp:pro_search:results\n  query=\"{segment_3}\"\n  channel=\"stores\"\n  orderby=\"title\"\n  sort=\"asc\"\n}\n  ...\n{/exp:pro_search:results}\n```\n\n----------------------------------------\n\nTITLE: Calling Member Login Multi Extension Hook in PHP\nDESCRIPTION: Demonstrates how to call the 'member_member_login_multi' extension hook, which is triggered when a member logs in using the Multi-Login functionality.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/member-auth.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('member_member_login_multi', $this->_hook_data());\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Comment Expiration Date Field with Datepicker - HTML\nDESCRIPTION: Enhanced comment expiration date input field with datepicker functionality and timestamp support.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/inputs.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<p>Comment Expiration Date <br>\n<input type=\"text\" name=\"comment_expiration_date\" value=\"{comment_expiration_date}\" maxlength=\"23\" size=\"25\" rel=\"date-picker\" data-timestamp=\"{comment_expiration_timestamp}\">\n</p>\n```\n\n----------------------------------------\n\nTITLE: Referencing Emoji List Tag in ExpressionEngine\nDESCRIPTION: This code snippet shows how to reference the emoji_list tag in ExpressionEngine, which is the recommended replacement for the deprecated Emoticon module.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/emoticon.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{exp:emoji:emoji_list}\n```\n\n----------------------------------------\n\nTITLE: Template Hit Tracking Configuration in PHP\nDESCRIPTION: Enables or disables hit tracking when templates are loaded.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_63\n\nLANGUAGE: php\nCODE:\n```\n$config['enable_hit_tracking'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: PHP Class Definition for ExpressionEngine Fieldtype Model\nDESCRIPTION: Class definition for the ExpressionEngine Fieldtype model that handles field type properties including ID, name, version, hook, settings and global settings flag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/models/addon-fieldtype.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass ExpressionEngine\\Model\\Addon\\Fieldtype\n{\n    // Properties\n    public $fieldtype_id;\n    public $name;           // Name of the addon's class\n    public $version;        // Name of the method executed\n    public $hook;          // The EE hook name\n    public $settings;      // Serialized settings for the extension (base64Serialized)\n    public $has_global_settings; // boolString\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration for Cypress\nDESCRIPTION: Copies the example environment configuration file to a new file for customization. This file holds credentials and configurations necessary for connecting Cypress to the ExpressionEngine site.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/cypress-tests.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncp cypress.env.example.json cypress.env.json\n```\n\n----------------------------------------\n\nTITLE: URL Encoding with :url_encode Modifier\nDESCRIPTION: Encodes strings for safe use in URLs. Includes a parameter to control how spaces are encoded (as + or %20).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{path='view/{location:url_encode}'}\">{location}</a>\n{!-- <a href=\"https://example.com/view/New%20Zealand}\">New Zealand</a> --}\n```\n\n----------------------------------------\n\nTITLE: Setting the Identifier for a FolderItem in PHP\nDESCRIPTION: Assigns an identifying value (string) to the `FolderItem`. This value is typically used in the data attribute for JavaScript interactions, especially during removal actions. Returns the `FolderItem` instance (`$this`).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/sidebar.md#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nidentifiedBy($val)\n```\n\n----------------------------------------\n\nTITLE: Conditional Output Based on User-Created Consent Status - ExpressionEngine Template\nDESCRIPTION: This snippet shows how to use the {consent_user_created} boolean variable within a conditional statement to display a message if a consent was created by a site administrator. Place within a consent loop to distinguish custom requests from system ones.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/consent.md#2025-04-22_snippet_11\n\nLANGUAGE: expressionengine-template\nCODE:\n```\n{if consent_user_created}\n    This consent request is a custom request created by a site administrator.\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Calling delete_comment_additional Hook in PHP\nDESCRIPTION: This snippet demonstrates how the delete_comment_additional hook is called after a comment is deleted. It passes an array of comment IDs being deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/comment.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('delete_comment_additional', $comment_ids);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Basic Category Heading Implementation in ExpressionEngine\nDESCRIPTION: Basic example showing how to display a category name and optional description using the channel:category_heading tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-heading.md#2025-04-22_snippet_0\n\nLANGUAGE: ee\nCODE:\n```\n{exp:channel:category_heading}\n    <h1>{category_name}</h1>\n    {if category_description}\n        <p>{category_description}</p>\n    {/if}\n{/exp:channel:category_heading}\n```\n\n----------------------------------------\n\nTITLE: Decoding URL in PHP\nDESCRIPTION: Decodes a URL with optional conversion of plus signs to spaces, dependent on PHP URL handling functions. Principal parameter 'plus_encoded_spaces'. Returns a Formatter object.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/format/text.md#2025-04-22_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n### `urlDecode(\\$options = [])`\n\nURL encode the text\n\n| Parameter | Type     | Description                                                                              |\n| --------- | -------- | ---------------------------------------------------------------------------------------- |\n| \\$options | `Array`  | (bool) **plus_encoded_spaces** (default: FALSE) - whether or not to decode `+` to spaces |\n| Returns   | `Object` | A Formatter object\n```\n\n----------------------------------------\n\nTITLE: Limiting Multi Select Output Items (ExpressionEngine)\nDESCRIPTION: This snippet demonstrates the `limit` parameter for a Multi Select field tag. When used as a single variable, it restricts the number of selected items included in the comma-separated list.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/fieldtypes/multiselect.md#2025-04-22_snippet_5\n\nLANGUAGE: expressionengine\nCODE:\n```\n{field_name limit=\"2\"} {!-- One,Two --}\n```\n\n----------------------------------------\n\nTITLE: URL Normalization with :url Modifier\nDESCRIPTION: Normalizes a URL for use in markup by ensuring it contains a valid protocol. Particularly useful for values from plugins or external sources.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n{website:url}\n{!-- https://www.example.com/ --}\n```\n\n----------------------------------------\n\nTITLE: Defining Relationship Metadata Array in PHP\nDESCRIPTION: Shows how to declare the relationships metadata array in an ExpressionEngine model. This is the base structure that holds all relationship definitions.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/services/model/relating-models.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprotected static $_relationships = array();\n```\n\n----------------------------------------\n\nTITLE: Calling Forum Submission Form End Hook\nDESCRIPTION: Example of calling the forum_submission_form_end hook for final form modifications.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/forum.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$str = ee()->extensions->universal_call('forum_submission_form_end', $this, $str);\nif (ee()->extensions->end_script === TRUE) return $str;\n```\n\n----------------------------------------\n\nTITLE: Using the Basic Statistics Tag in ExpressionEngine\nDESCRIPTION: The basic implementation of the Statistics Module tag pair which allows you to display various system statistics within your template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/statistics.md#2025-04-22_snippet_0\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:stats}\n    statistics content\n{/exp:stats}\n```\n\n----------------------------------------\n\nTITLE: Generating Front-end Edit Link using :frontedit Modifier\nDESCRIPTION: Appends the `:frontedit` modifier to a field tag (e.g., `{title:frontedit}`) within an `{exp:channel:entries}` tag pair. This manually generates and places the front-end edit link for that specific field. This is particularly useful when automatic link generation is globally disabled via configuration.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/advanced-usage/front-end/frontend.md#2025-04-22_snippet_5\n\nLANGUAGE: ee\nCODE:\n```\n{title:frontedit}\n```\n\n----------------------------------------\n\nTITLE: Calling before_channel_form_settings_delete Extension Hook in PHP\nDESCRIPTION: Demonstrates how the before_channel_form_settings_delete extension hook is called. This hook triggers before a channel form settings object is deleted.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/channel-form-settings.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_channel_form_settings_delete', $this, $this->getValues());\n```\n\n----------------------------------------\n\nTITLE: Calling after_status_update Extension Hook in PHP\nDESCRIPTION: Example of how the after_status_update hook is called. This hook fires after a status object is updated and includes the modified values, but changes won't be saved automatically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/status.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('after_status_update', $this, $this->getValues(), $modified);\n```\n\n----------------------------------------\n\nTITLE: Forum Topics Loop Start Hook Implementation\nDESCRIPTION: Extension hook called at the start of processing each forum topic row. Allows modification of topic template and data before processing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/module/forum.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$temp = ee()->extensions->universal_call('forum_topics_loop_start', $this, $query->result(), $row, $temp);\nif (ee()->extensions->end_script === TRUE) return;\n```\n\n----------------------------------------\n\nTITLE: Displaying Entry Channel ID in ExpressionEngine\nDESCRIPTION: The `{channel_id}` variable outputs the numeric ID of the channel to which the current entry belongs. It's typically used within an `{entry_titles}` loop or other entry-related contexts.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/category-archive.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n{channel_id}\n```\n\n----------------------------------------\n\nTITLE: Using member_create_end Hook in ExpressionEngine PHP\nDESCRIPTION: This code shows how the member_create_end hook is called after a member has been created. It provides the opportunity to execute additional code after member creation with access to the new member ID.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/global/member-model.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->extensions->call('member_create_end', $member_id, $data, $cdata);\n```\n\n----------------------------------------\n\nTITLE: Path Variable Example with Channel Comments\nDESCRIPTION: Demonstrates how a path variable gets rendered with the full site URL for a channel comments page.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/path.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{path='channel/comments'}\n```\n\n----------------------------------------\n\nTITLE: Category Groups Configuration in JSON\nDESCRIPTION: Definition of category groups and their associated categories.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/sets.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"category_groups\": [\n        {\n            \"name\": \"Blog\",\n            \"categories\": [\n                \"News\",\n                \"Personal\",\n                \"Photos\",\n                \"Videos\",\n                \"Music\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Duplicate Data Protection in ExpressionEngine (PHP)\nDESCRIPTION: Controls whether to reject duplicate data submissions, such as identical comments. When enabled, it blocks submission of content that already exists on the site.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$config['deny_duplicate_data'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: Traditional Template Embedding Example\nDESCRIPTION: Demonstrates the traditional way of embedding header and footer templates\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/layouts.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{embed=\"site/_header\"}\n\n{exp:channel:entries channel=\"news\"}\n  <h2>{title}</h2>\n  {summary}\n{/exp:channel:entries}\n\n{embed=\"site/_footer\"}\n```\n\n----------------------------------------\n\nTITLE: Clearing Sort Configuration in jQuery Table Plugin\nDESCRIPTION: Shows how to revert the table's sorting configuration back to its initial state using the `clear_sort` method of the ExpressionEngine table plugin. The example code includes parameters, although their specific function in clearing might need clarification based on implementation.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/control-panel-js/table.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n$('table').table('clear_sort', 'age', 'desc');\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Query Example\nDESCRIPTION: Query showing how to format dates from the channel_titles table with custom date formatting.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/query.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>Dates for the Last Five Entries:</p>\n{exp:query sql=\"SELECT entry_date FROM exp_channel_titles ORDER BY entry_date DESC LIMIT 5\"}\n    <p>{entry_date format=\"%Y %m %d\"}</p>\n{/exp:query}\n```\n\n----------------------------------------\n\nTITLE: Conditional Statements with Embed Variables in ExpressionEngine\nDESCRIPTION: Illustrates the use of embed variables within conditional statements in an embedded template.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/embedding.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n{if embed:dog_name == \"Shadow\"}\n    My dog's name is {embed:dog_name}.\n{if:else}\n    {embed:dog_name} will never be as cool as Shadow.\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Setting Multi-Login Sites\nDESCRIPTION: Configures multiple frontend sites for login functionality.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_101\n\nLANGUAGE: php\nCODE:\n```\n$config['multi_login_sites'] = 'https://example.com|https://different_example.com';\n```\n\n----------------------------------------\n\nTITLE: Contributors Grid Layout in HTML\nDESCRIPTION: HTML markup for displaying a responsive grid of contributor avatars and information using Tailwind CSS classes. The grid adapts from 2 columns on mobile to 4 columns on larger screens.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n</ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Row Start Definition in ExpressionEngine\nDESCRIPTION: Defines the start tag for a table row in calendar template structures.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/calendar.md#2025-04-22_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n{row_start}<tr>{/row_start}\n```\n\n----------------------------------------\n\nTITLE: Encrypting Content with encrypt Modifier\nDESCRIPTION: Encrypts content for secure storage or transmission, with options for base64 encoding and custom encryption keys.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/variable-modifiers.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{secret:encrypt}\n{!-- H8JwSqsqVYUCvYBUmKqaXjO4VzLsyj791dtim3EfJT8= --}\n```\n\n----------------------------------------\n\nTITLE: Advanced Moblog Email with Overrides Example\nDESCRIPTION: A more complex Moblog email example that uses authentication and various field overrides to customize the Channel Entry submission.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nAUTH:johnsmith:mysecretword\n\n{category}3,6{/category}\n{field:body format=\"xhtml\"}\n    Here's a quick picture of the train station this morning on the way to work.\n    Notice the guy selling flowers?  He's been there every morning like clockwork for the last 2 years.\n    He's always cheerful and actually has some pretty nice flowers.\n{/field:body}\n{field:location format=\"none\"}Train Station{/field:location}\n```\n\n----------------------------------------\n\nTITLE: Processing Attached Audio Files in Moblog Templates in Markdown\nDESCRIPTION: Uses the {audio} tag pair to handle audio file attachments in Moblog emails. The {file} variable is replaced by the URL to the uploaded audio. This snippet assumes Moblog supports audio parsing and rendering. The output is a paragraph with a link to the audio file for users to click and listen.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n{audio} <p>Listen to the <a href=\"{file}\">audio</a>!</p> {/audio}\n```\n\n----------------------------------------\n\nTITLE: Setting Time Interval for Throttling in ExpressionEngine (PHP)\nDESCRIPTION: Configures the time interval for measuring page loads to trigger throttling, affecting user access.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_162\n\nLANGUAGE: php\nCODE:\n```\n$config['time_interval'] = '10';\n```\n\n----------------------------------------\n\nTITLE: Using charset Variable in HTML Meta Tag\nDESCRIPTION: This snippet demonstrates how to use the {charset} global variable to set the character encoding in HTML meta tags. The charset variable is substituted with the global character set (UTF-8).\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/globals/single-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset={charset}\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Session Crypt Key in Configuration\nDESCRIPTION: Similar to the encryption_key, this setting is used to safeguard session data with a secret key, set automatically during installation and crucial for session security.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/config/config.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$config['session_crypt_key'] = 'd9e776dc9a5de0cd83e7c76a76756daa64ff4b8b';\n```\n\n----------------------------------------\n\nTITLE: Setting Default Member Group in ExpressionEngine (PHP)\nDESCRIPTION: Defines the primary member role ID to which new users will be assigned when registering on the site.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$config['default_member_group'] = '6';\n```\n\n----------------------------------------\n\nTITLE: Adding Comments in ExpressionEngine Templates\nDESCRIPTION: Shows how to add comments to templates that won't be displayed when the template is rendered.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/language.md#2025-04-22_snippet_8\n\nLANGUAGE: ee\nCODE:\n```\n{!--  Show the next blog post if it exists.  --}\n```\n\n----------------------------------------\n\nTITLE: Before Comment Bulk Delete Hook Call\nDESCRIPTION: Extension hook called before multiple comments are deleted in bulk. Available since version 4.3.0.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/comment.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_comment_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Including jQuery Parameter - ExpressionEngine Template Syntax\nDESCRIPTION: Controls automatic inclusion of jQuery in the form by setting include_jquery parameter to \\\"no\\\". This is useful when the developer wants to manually manage the jQuery inclusion order or source. Defaults to \\\"yes\\\" otherwise.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_5\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\ninclude_jquery=\"no\"\n```\n\n----------------------------------------\n\nTITLE: Alternative Apache HTTP Authorization Configuration Using RewriteRule\nDESCRIPTION: An alternative approach to make HTTP Authorization headers available to PHP-FPM using Apache's RewriteRule directive, enabling ExpressionEngine's HTTP Authentication feature.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/troubleshooting/templates.md#2025-04-22_snippet_1\n\nLANGUAGE: apache\nCODE:\n```\nRewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\n```\n\n----------------------------------------\n\nTITLE: Defining the Current Password Field in ExpressionEngine Profile Form\nDESCRIPTION: Standard HTML markup for the current password input field. The `name` attribute must be `current_password`. This field is required if the user is attempting to change their email address or password.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\n<label>Confirm New Password</label><br />\n<input type=\"password\" name=\"current_password\" value=\"\" maxlength=\"50\" size=\"40\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Smart Static Parsing in ExpressionEngine (PHP)\nDESCRIPTION: Controls whether embedded templates without static setting should be parsed as static when possible. Default is enabled. Disabling forces all non-static templates to be parsed dynamically.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_150\n\nLANGUAGE: PHP\nCODE:\n```\n$config['smart_static_parsing'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: Defining ExpressionEngine Member Import Structure in XML\nDESCRIPTION: This XML snippet illustrates the required structure for importing members into ExpressionEngine. It uses a root `<members>` tag containing individual `<member>` elements. Each `<member>` includes essential data like `<username>`, `<screen_name>`, `<email>`, and a `<password>` tag with a `type` attribute specifying the hash algorithm (e.g., 'md5', 'sha1'). All tags correspond to fields in the exp_members database table, except 'unique_id'.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/member-import-xml-format.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<members>\n    <member>\n        <username>brettb</username>\n        <screen_name>Brett Bretterson</screen_name>\n        <password type=\"md5\">653132ffd94b986bf2bb806b3c67d190</password>\n        <email>brett@example.com</email>\n    </member>\n    <member>\n        <username>robr</username>\n        <screen_name>Robert Robertson</screen_name>\n        <password type=\"sha1\">1b4395b877794a16a7f4db5747380dbaafc7ff18</password>\n        <email>robert@example.com</email>\n    </member>\n</members>\n```\n\n----------------------------------------\n\nTITLE: Before Template Group Bulk Delete Hook Call\nDESCRIPTION: Extension hook called before bulk deleting template groups. Useful for expensive operations that should be handled in bulk.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/development/extension-hooks/model/template-group.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nee()->extensions->call('before_template_group_bulk_delete', $delete_ids);\n```\n\n----------------------------------------\n\nTITLE: Altering MySQL Table Storage Engine to InnoDB using SQL\nDESCRIPTION: SQL command to change the storage engine of a specific MySQL table ('table_name') to InnoDB. This is the core command for the conversion process and should be executed for each table individually after ensuring prerequisites (like backup and absence of FULLTEXT indexes if incompatible) are met. Requires ALTER privileges on the table.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/converting-to-innodb.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE table_name ENGINE=InnoDB;\n```\n\n----------------------------------------\n\nTITLE: Enabling Advanced Update Options in ExpressionEngine (PHP)\nDESCRIPTION: Allows advanced options to be displayed during the ExpressionEngine update process.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_165\n\nLANGUAGE: php\nCODE:\n```\n$config['updater_allow_advanced'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Example Template Path for Live Preview URL\nDESCRIPTION: Shows an example template path or route used for the 'Preview URL' setting for Live Preview. It includes the `{url_title}` variable, which will be replaced with the entry's URL title during preview rendering. Note that an Entry's Page URI takes precedence.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/control-panel/channels.md#2025-04-22_snippet_5\n\nLANGUAGE: expressionengine\nCODE:\n```\nblog/entry/{url_title}\n```\n\n----------------------------------------\n\nTITLE: Setting the Form Class Attribute in ExpressionEngine\nDESCRIPTION: This snippet shows how to use the 'form_class=' parameter within an ExpressionEngine tag, such as {exp:member:edit_avatar}. It assigns the CSS class 'login' to the generated HTML <form> tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-avatar.md#2025-04-22_snippet_2\n\nLANGUAGE: expressionengine\nCODE:\n```\nform_class=\"login\"\n```\n\n----------------------------------------\n\nTITLE: Example Output of a Basic CLI Command (Text)\nDESCRIPTION: Shows the expected output when running the basic 'hello' command in the ExpressionEngine CLI.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/cli/usage.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nHello world\n```\n\n----------------------------------------\n\nTITLE: URL Title Input Field Implementation - HTML\nDESCRIPTION: Input field for setting the URL-friendly version of the entry title.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/inputs.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"url_title\">URL Title</label>\n<input type=\"text\" name=\"url_title\" id=\"url_title\" value=\"{url_title}\" maxlength=\"75\" size=\"50\">\n```\n\n----------------------------------------\n\nTITLE: Enabling Signature Image Uploads in ExpressionEngine (PHP)\nDESCRIPTION: Sets whether members can upload their own signature images for Discussion Forum. Default setting is to not allow signature image uploads.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_136\n\nLANGUAGE: PHP\nCODE:\n```\n$config['sig_allow_img_upload'] = 'y';\n```\n\n----------------------------------------\n\nTITLE: Processing Movie File Attachments in Moblog Templates in Markdown\nDESCRIPTION: Mirrors the structure of other tag pairs, using {movie}...{/movie} to process and display attached movie files. The {file} variable is substituted with the URL to the uploaded movie, letting the template author create links to the movie file. No additional dependencies outside the base Moblog tag parsing.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n{movie} <p>Watch our new <a href=\"{file}\">movie</a> now.</p> {/movie}\n```\n\n----------------------------------------\n\nTITLE: Displaying Search Keywords in ExpressionEngine\nDESCRIPTION: Simple tag for displaying the keywords used in a search. This can be used on the search results page to show users what terms they searched for.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/search/results.md#2025-04-22_snippet_3\n\nLANGUAGE: expressionengine\nCODE:\n```\n{exp:search:keywords}\n```\n\n----------------------------------------\n\nTITLE: Controlling HTTP Headers in ExpressionEngine\nDESCRIPTION: Determines whether the system automatically sends HTTP page headers when serving pages to visitors. Set to 'y' to enable header generation or 'n' to disable.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_132\n\nLANGUAGE: php\nCODE:\n```\n$config['send_headers'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: Basic Expiration Date Field - HTML\nDESCRIPTION: Basic input field for setting an entry's expiration date.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/channel-form/inputs.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>Expiration Date <br>\n  <input type=\"text\" name=\"expiration_date\" value=\"{expiration_date}\" maxlength=\"23\" size=\"25\">\n</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Random Numbers in CAPTCHA for ExpressionEngine (PHP)\nDESCRIPTION: Specifies whether to add a random three-digit number to the end of each generated CAPTCHA word. 'y' adds random numbers (default), 'n' does not.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$config['captcha_rand'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: Applying Bold and Strong Emphasis with BBCode\nDESCRIPTION: Provides examples of using the [b] and [strong] BBCode tags to render text as bold or strongly emphasized.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/bbcode.md#2025-04-22_snippet_8\n\nLANGUAGE: bbcode\nCODE:\n```\n[b]some bold text[/b]  [strong]some strong text[/strong]\n```\n\n----------------------------------------\n\nTITLE: Check Moblog Tag with Exclusion Syntax\nDESCRIPTION: Example of the Check Moblog tag using the 'not' keyword to exclude specific Moblogs.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_13\n\nLANGUAGE: ee\nCODE:\n```\nwhich=\"not moblog2|samsung\"\n```\n\n----------------------------------------\n\nTITLE: Setting Private Message Throttling Period in ExpressionEngine\nDESCRIPTION: Configures the cooldown period between private message sending. This restriction does not apply to Super Admin group members.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_104\n\nLANGUAGE: php\nCODE:\n```\n$config['prv_msg_throttling_period'] = '60';\n```\n\n----------------------------------------\n\nTITLE: Linking to Tell-A-Friend Template in ExpressionEngine\nDESCRIPTION: HTML snippet to create a hyperlink pointing to the Tell-a-Friend Template, facilitating easy access for users to share entries via email.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/email.md#2025-04-22_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"{permalink='channel/friend'}\">Tell-a-Friend</a>\n```\n\n----------------------------------------\n\nTITLE: Email CRLF Characters Configuration in PHP\nDESCRIPTION: Overrides the core Email class setting for CRLF characters in quoted-printable encoded emails.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n$config['email_crlf'] = \"\\r\\n\";\n```\n\n----------------------------------------\n\nTITLE: Rendered Output Example for Archive Month Links in ExpressionEngine\nDESCRIPTION: Shows an example of how the path variable is rendered in the final HTML output, with the month and year information appended to the URL.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/channels/archive-months.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"example.com/channel/archives/2003/12/\">December, 2003</a>\n```\n\n----------------------------------------\n\nTITLE: Setting Form Class Attribute in ExpressionEngine\nDESCRIPTION: The `form_class` parameter allows specifying a custom CSS class attribute for the generated `<form>` tag.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/edit-profile.md#2025-04-22_snippet_3\n\nLANGUAGE: ExpressionEngine Template Language\nCODE:\n```\nform_class=\"login\"\n```\n\n----------------------------------------\n\nTITLE: Check Moblog Tag Implementation\nDESCRIPTION: Example of the ExpressionEngine template tag used to check for new Moblog messages with parameters for silent mode and specific Moblog selection.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/add-ons/moblog.md#2025-04-22_snippet_11\n\nLANGUAGE: ee\nCODE:\n```\n{exp:moblog:check silent=\"yes\" which=\"cellphone\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring htaccess_path in ExpressionEngine\nDESCRIPTION: Setting to specify the server path used by the Block/Allow module to write rules to the .htaccess file.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_84\n\nLANGUAGE: php\nCODE:\n```\n$config['htaccess_path'] = '/server/path/to/your/.htaccess';\n```\n\n----------------------------------------\n\nTITLE: Configuring Signature Image Hotlinking in ExpressionEngine (PHP)\nDESCRIPTION: Specifies whether members can link to images hosted on other websites as their signature image for Discussion Forum. Default is to not allow external image linking.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_135\n\nLANGUAGE: PHP\nCODE:\n```\n$config['sig_allow_img_hotlink'] = 'n';\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Grid Layout\nDESCRIPTION: HTML structure for displaying contributor profile cards in a responsive grid layout using Tailwind CSS classes. Shows contributor avatars, names and GitHub profile links.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/563996?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Bryan Nielsen</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bryannielsen\" target=\"_BLANK\">@bryannielsen</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting forum_trigger in ExpressionEngine\nDESCRIPTION: Configuration to set the forum triggering word when the Discussion Forum module is installed.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_79\n\nLANGUAGE: php\nCODE:\n```\n$config['forum_trigger'] = 'eerox';\n```\n\n----------------------------------------\n\nTITLE: Specifying MD5 Hashed Passwords in ExpressionEngine Member XML\nDESCRIPTION: This XML snippet demonstrates how to include an MD5 hashed password in the ExpressionEngine member import file. The `<password>` tag uses the attribute `type=\"md5\"` along with the pre-hashed password string (RSA Data Security, Inc. MD5 Message-Digest Algorithm). Ensure the ExpressionEngine site's password encryption setting matches MD5 for these passwords to work directly after import.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/member-import-xml-format.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<password type=\"md5\">653132ffd94b986bf2bb806b3c67d190</password>\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Block for ExpressionEngine Documentation\nDESCRIPTION: License and copyright information for the ExpressionEngine User Guide documentation in HTML comment format.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/optimization/throttling.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\n    This source file is part of the open source project\n    ExpressionEngine User Guide (https://github.com/ExpressionEngine/ExpressionEngine-User-Guide)\n\n    @link      https://expressionengine.com/\n    @copyright Copyright (c) 2003-2020, Packet Tide, LLC (https://packettide.com)\n    @license   https://expressionengine.com/license Licensed under Apache License, Version 2.0\n-->\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor List in HTML\nDESCRIPTION: This HTML snippet creates a grid layout to display contributor information including avatars, names, and GitHub usernames. It uses Tailwind CSS classes for styling.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/23382425?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yulya Lebed</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=Yulyaswan\" target=\"_BLANK\">@Yulyaswan</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/563996?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Bryan Nielsen</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=bryannielsen\" target=\"_BLANK\">@bryannielsen</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Emoticon URL Configuration in PHP\nDESCRIPTION: Sets the base URL where smiley graphics are stored.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n$config['emoticon_url'] = 'https://example.com/images/smileys/';\n```\n\n----------------------------------------\n\nTITLE: Password Variable Output - ExpressionEngine Template Syntax\nDESCRIPTION: Conditionally outputs the password variable's value if it exists, aiding form repopulation or validation. For security, typically password values are not echoed, but this example is meant to illustrate the syntax.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/member/registration.md#2025-04-22_snippet_22\n\nLANGUAGE: ExpressionEngine Template Syntax\nCODE:\n```\n{if password}{password}{/if}\n```\n\n----------------------------------------\n\nTITLE: Setting Spellcheck Language in ExpressionEngine (PHP)\nDESCRIPTION: Sets the language used by the spellcheck feature using a 2-letter ISO 639 language code.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/general/system-configuration-overrides.md#2025-04-22_snippet_155\n\nLANGUAGE: php\nCODE:\n```\n$config['spellcheck_language_code'] = 'en';\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Reference Table in Markdown\nDESCRIPTION: Markdown table containing all available date formatting codes with their descriptions and sample renderings. Includes codes for time units, date components, and timezone information.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/date-variable-formatting.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable    | Description                                                                                                                                                 | Sample Rendering                           |\n| ----------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------ |\n| **Seconds** |                                                                                                                                                             |                                            |\n| %s          | seconds                                                                                                                                                     | \"00\" to \"59\"                               |\n| %U          | seconds since the epoch                                                                                                                                     |                                            |\n| %u          | Microseconds (always 000000, see note, below)                                                                                                               | \"000000\"                                   |\n```\n\n----------------------------------------\n\nTITLE: Unclosed String Error\nDESCRIPTION: Example of an error with an unclosed quoted string in a conditional.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/templates/conditionals.md#2025-04-22_snippet_36\n\nLANGUAGE: expressionengine\nCODE:\n```\n{if segment_1 == \"site}HELLO WORLD{/if}\n```\n\n----------------------------------------\n\nTITLE: Configuring TOC in YAML\nDESCRIPTION: Examples of how to structure table of contents entries in the _toc.yml file, including page links and nested categories.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/style-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n- name: My Page Title\n  href: path-to/my-page.md\n```\n\nLANGUAGE: yml\nCODE:\n```\n- name: Category\n  items:\n    - name: Sub Page\n      href: path-to/sub-page.md\n```\n\n----------------------------------------\n\nTITLE: Contributors List HTML for ExpressionEngine 7.0.3\nDESCRIPTION: HTML markup that displays a grid of contributors to ExpressionEngine version 7.0.3, showing their profile images, names, and GitHub usernames with links to their commits.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/installation/changelog.md#2025-04-22_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"max-w-7xl mx-autotext-center\">\n<div class=\"space-y-8 sm:space-y-12\">\n    <ul role=\"list\" class=\"mx-auto grid grid-cols-2 gap-x-4 gap-y-1 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-1 xl:grid-cols-5\">\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/11818941?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Matt Johnson</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=matthewjohns0n\" target=\"_BLANK\">@matthewjohns0n</a></p></div></div></div></li>\n<li><div class=\"space-y-4 text-center\"><img class=\"mx-auto h-20 w-20 rounded-full lg:w-24 lg:h-24\" src=\"https://avatars.githubusercontent.com/u/752126?v=4\" /><div class=\"space-y-2\"><div class=\"text-xs font-medium lg:text-sm\"><p class=\"mb-1\">Yuri Salimovskiy</p><p class=\"text-indigo-600\"><a href=\"https://github.com/ExpressionEngine/ExpressionEngine/commits?author=intoeetive\" target=\"_BLANK\">@intoeetive</a></p></div></div></div></li>\n    </ul>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: File Header Comment Block in ExpressionEngine Documentation\nDESCRIPTION: Copyright and license information for the ExpressionEngine User Guide documentation file, including project links and attribution to Packet Tide, LLC.\nSOURCE: https://github.com/expressionengine/expressionengine-user-guide/blob/7.dev/docs/optimization/new-relic.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\n    This source file is part of the open source project\n    ExpressionEngine User Guide (https://github.com/ExpressionEngine/ExpressionEngine-User-Guide)\n\n    @link      https://expressionengine.com/\n    @copyright Copyright (c) 2003-2020, Packet Tide, LLC (https://packettide.com)\n    @license   https://expressionengine.com/license Licensed under Apache License, Version 2.0\n-->\n```"
  }
]