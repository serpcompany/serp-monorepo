[
  {
    "owner": "alpinejs",
    "repo": "alpine",
    "content": "TITLE: Installing Alpine.js via CDN Script Tag\nDESCRIPTION: Demonstrates how to include Alpine.js in an HTML page using a CDN script tag. The defer attribute ensures Alpine loads after the HTML is parsed, and the script is placed in the head section.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        ...\n\n        <script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"></script>\n    </head>\n    ...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Building a Counter Component with Alpine.js\nDESCRIPTION: Implementation of a simple counter component that demonstrates state management and event handling in Alpine.js. Uses x-data to declare state, x-on to listen for click events, and x-text to display the current count value.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/start-here.md#2025-04-22_snippet_1\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ count: 0 }\">\n    <button x-on:click=\"count++\">Increment</button>\n\n    <span x-text=\"count\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using a Specific Alpine.js Version via CDN\nDESCRIPTION: Shows how to reference a specific version of Alpine.js in production for stability. This ensures your application doesn't break when new versions are released.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.14.9/dist/cdn.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Custom Event Dispatching in Alpine.js\nDESCRIPTION: Demonstrates how to dispatch and listen for custom events using $dispatch.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/events.md#2025-04-22_snippet_6\n\nLANGUAGE: alpine\nCODE:\n```\n<div @foo=\"console.log('foo was dispatched')\">\n    <button @click=\"$dispatch('foo')\"></button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Alpine.js as a Module\nDESCRIPTION: Shows how to import Alpine.js into a JavaScript bundle, assign it to the window object, and initialize it. The window assignment is optional but provides flexibility for debugging and extensions.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/installation.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Alpine from 'alpinejs'\n\nwindow.Alpine = Alpine\n\nAlpine.start()\n```\n\n----------------------------------------\n\nTITLE: Building a Filterable Search Input with Alpine.js\nDESCRIPTION: Advanced Alpine.js component that implements a search filter for a list of items. Demonstrates x-model for two-way data binding with inputs, computed properties using getters, and x-for directive for rendering dynamic lists.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/start-here.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<div\n    x-data=\"{\n        search: '',\n\n        items: ['foo', 'bar', 'baz'],\n\n        get filteredItems() {\n            return this.items.filter(\n                i => i.startsWith(this.search)\n            )\n        }\n    }\"\n>\n    <input x-model=\"search\" placeholder=\"Search...\">\n\n    <ul>\n        <template x-for=\"item in filteredItems\" :key=\"item\">\n            <li x-text=\"item\"></li>\n        </template>\n    </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Alpine.js Component with x-data\nDESCRIPTION: Demonstrates a simple dropdown component using x-data to define reactive state.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/data.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button @click=\"open = ! open\">Toggle Content</button>\n\n    <div x-show=\"open\">\n        Content...\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Declaring Local State with x-data in Alpine.js\nDESCRIPTION: Shows how to declare local state for an HTML block using the x-data attribute in Alpine.js. This example sets up a boolean 'open' state.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/state.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting up Alpine.js in an HTML File\nDESCRIPTION: Basic HTML template for getting started with Alpine.js. Includes the CDN link in the head section and demonstrates a simple data binding using x-data and x-text directives.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/start-here.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<html>\n<head>\n    <script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"></script>\n</head>\n<body>\n    <h1 x-data=\"{ message: 'I ❤️ Alpine' }\" x-text=\"message\"></h1>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Basic Click Event Handling in Alpine.js\nDESCRIPTION: Demonstrates how to listen for a click event using x-on directive in Alpine.js.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/events.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<button x-on:click=\"console.log('clicked')\">...</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Computed Properties with Getters in Alpine.js\nDESCRIPTION: This snippet demonstrates how to define a data object with a regular property 'items' and a computed property 'filteredItems' using JavaScript getters. The getter filters the items array based on a search term that's bound to an input field.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/start-here.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n    ...\n    items: ['foo', 'bar', 'baz'],\n\n    get filteredItems() {\n        return this.items.filter(\n            i => i.startsWith(this.search)\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Alpine.js x-data Directive Usage in HTML\nDESCRIPTION: This snippet shows how to use the x-data directive in Alpine.js to initialize data for an element. It creates a simple counter with increment and decrement functionality.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div x-data=\"{ count: 0 }\">\n    <button x-on:click=\"count++\">Increment</button>\n    <span x-text=\"count\"></span>\n    <button x-on:click=\"count--\">Decrement</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Text Input Binding with x-model in Alpine.js\nDESCRIPTION: A simple example demonstrating how to use x-model to bind a text input value to Alpine.js data. As the user types in the input field, the message property is updated and displayed in the span element.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ message: '' }\">\n    <input type=\"text\" x-model=\"message\">\n\n    <span x-text=\"message\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with x-init in Alpine.js\nDESCRIPTION: Shows how to use x-init to fetch JSON data and store it in x-data before component processing.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/init.md#2025-04-22_snippet_1\n\nLANGUAGE: alpine\nCODE:\n```\n<div\n    x-data=\"{ posts: [] }\"\n    x-init=\"posts = await (await fetch('/posts')).json()\"\n>...</div>\n```\n\n----------------------------------------\n\nTITLE: Using x-ref with Alpine.js for DOM Element Reference\nDESCRIPTION: Demonstrates how to use x-ref to mark a DOM element and $refs to access it for manipulation. Shows a button that removes a text element when clicked. Note that this requires a parent element with x-data directive.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/ref.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<button @click=\"$refs.text.remove()\">Remove Text</button>\n\n<span x-ref=\"text\">Hello 👋</span>\n```\n\n----------------------------------------\n\nTITLE: Text Input with x-model in Alpine.js\nDESCRIPTION: Example of using x-model with a standard text input. The value of the input is bound to the message property and displayed in real-time using x-text.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_2\n\nLANGUAGE: alpine\nCODE:\n```\n<input type=\"text\" x-model=\"message\">\n\n<span x-text=\"message\"></span>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Dropdown with x-show in Alpine.js\nDESCRIPTION: This snippet demonstrates how to create a basic dropdown component using the x-show directive in Alpine.js. It toggles the visibility of the dropdown content based on a boolean state.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/show.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button x-on:click=\"open = ! open\">Toggle Dropdown</button>\n\n    <div x-show=\"open\">\n        Dropdown Contents...\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Registering Global State with Alpine.store()\nDESCRIPTION: Shows how to register a global store using Alpine.store(), making data available to all components on the page. This example creates a 'tabs' store.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/state.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nAlpine.store('tabs', {\n    current: 'first',\n\n    items: ['first', 'second', 'third'],\n})\n```\n\n----------------------------------------\n\nTITLE: Alpine.js Component with Methods\nDESCRIPTION: Demonstrates how to define and use methods within x-data objects.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/data.md#2025-04-22_snippet_2\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false, toggle() { this.open = ! this.open } }\">\n    <button @click=\"toggle()\">Toggle Content</button>\n\n    <div x-show=\"open\">\n        Content...\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using x-if Directive with Template Tag in Alpine.js\nDESCRIPTION: Demonstrates how to conditionally render elements using x-if directive within a template tag. The element is completely added or removed from the DOM based on the 'open' boolean condition. Must be used within a parent element that has x-data defined.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/if.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<template x-if=\"open\">\n    <div>Contents...</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Re-usable Data with Alpine.data()\nDESCRIPTION: Shows how to create re-usable component data using Alpine.data(). This example defines a 'dropdown' component with toggle functionality.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/state.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nAlpine.data('dropdown', () => ({\n    open: false,\n\n    toggle() {\n        this.open = ! this.open\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Alpine.js Component with Getters\nDESCRIPTION: Shows how to use JavaScript getters in x-data for computed-like properties.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/data.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{\n    open: false,\n    get isOpen() { return this.open },\n    toggle() { this.open = ! this.open },\n}\">\n    <button @click=\"toggle()\">Toggle Content</button>\n\n    <div x-show=\"isOpen\">\n        Content...\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Two-way Binding with x-model in Alpine.js\nDESCRIPTION: This example shows the two-way binding nature of x-model by adding a button that changes the message value programmatically. When clicked, the input field's value is instantly updated to 'changed'.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_1\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ message: '' }\">\n    <input type=\"text\" x-model=\"message\">\n\n    <button x-on:click=\"message = 'changed'\">Change Message</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Looping Elements with x-for in Alpine.js\nDESCRIPTION: Demonstrates using the x-for directive to iterate over an array and generate repeated elements in the template.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/templating.md#2025-04-22_snippet_10\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ statuses: ['open', 'closed', 'archived'] }\">\n    <template x-for=\"status in statuses\">\n        <div x-text=\"status\"></div>\n    </template>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Reusable Alpine.js Component Definition\nDESCRIPTION: Demonstrates how to create reusable components using Alpine.data().\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/data.md#2025-04-22_snippet_4\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"dropdown\">\n    <button @click=\"toggle\">Toggle Content</button>\n\n    <div x-show=\"open\">\n        Content...\n    </div>\n</div>\n\n<script>\n    document.addEventListener('alpine:init', () => {\n        Alpine.data('dropdown', () => ({\n            open: false,\n\n            toggle() {\n                this.open = ! this.open\n            },\n        }))\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Toggle Dropdown with Alpine.js\nDESCRIPTION: Implementation of a dropdown component that toggles visibility based on user interaction. Uses x-show to conditionally display content and @click.outside modifier to close the dropdown when clicking elsewhere on the page.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/start-here.md#2025-04-22_snippet_2\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button @click=\"open = ! open\">Toggle</button>\n\n    <div x-show=\"open\" @click.outside=\"open = false\">Contents...</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Reactive Data with Alpine.reactive() in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a reactive version of a JavaScript object using Alpine.reactive(). It shows that the reactive object behaves similarly to the original object but allows Alpine to track changes.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/reactivity.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nlet data = { count: 1 }\n\nlet reactiveData = Alpine.reactive(data)\n```\n\n----------------------------------------\n\nTITLE: Setting placeholder with x-bind in Alpine.js\nDESCRIPTION: Demonstrates how to use x-bind to set the placeholder attribute of an input element based on a JavaScript expression.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/bind.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div x-data=\"{ placeholder: 'Type here...' }\">\n    <input type=\"text\" x-bind:placeholder=\"placeholder\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component with Alpine.js Core Functions\nDESCRIPTION: This code snippet shows how to implement a simple counter component using Alpine.reactive() and Alpine.effect() without Alpine's declarative syntax. It demonstrates the core reactive behavior that underpins Alpine.js.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/reactivity.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<button>Increment</button>\n\nCount: <span></span>\n```\n\nLANGUAGE: js\nCODE:\n```\nlet button = document.querySelector('button')\nlet span = document.querySelector('span')\n\nlet data = Alpine.reactive({ count: 1 })\n\nAlpine.effect(() => {\n    span.textContent = data.count\n})\n\nbutton.addEventListener('click', () => {\n    data.count = data.count + 1\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Text Content with x-text in Alpine.js\nDESCRIPTION: Demonstrates using the x-text directive to set an element's text content dynamically based on a data property.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/templating.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ title: 'Start Here' }\">\n    <h1 x-text=\"title\"></h1>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Toggling class with x-bind in Alpine.js\nDESCRIPTION: Illustrates how to use x-bind to toggle a class based on a boolean state variable.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/bind.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button x-on:click=\"open = ! open\">Toggle Dropdown</button>\n\n    <div :class=\"open ? '' : 'hidden'\">\n        Dropdown Contents...\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Event Handling with $dispatch Helper in Alpine.js\nDESCRIPTION: The same custom event example using Alpine's $dispatch helper for a cleaner syntax.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div x-data @foo=\"alert('Button Was Clicked!')\">\n    <button @click=\"$dispatch('foo')\">...</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic x-teleport Usage for Modal in Alpine.js\nDESCRIPTION: Demonstrates how to use x-teleport to move a modal template to the body element. The modal can be toggled, and its contents appear after other page content due to teleportation.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/teleport.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<body>\n    <div x-data=\"{ open: false }\">\n        <button @click=\"open = ! open\">Toggle Modal</button>\n\n        <template x-teleport=\"body\">\n            <div x-show=\"open\">\n                Modal contents...\n            </div>\n        </template>\n    </div>\n\n    <div>Some other content placed AFTER the modal markup.</div>\n\n    ...\n\n</body>\n```\n\n----------------------------------------\n\nTITLE: Toggling Classes with Object Syntax in Alpine.js\nDESCRIPTION: Shows how to toggle classes using the object syntax with x-bind:class for more complex class bindings.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/templating.md#2025-04-22_snippet_9\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: true }\">\n    <span :class=\"{ 'hidden': ! open }\">...</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Event Shorthand Syntax in Alpine.js\nDESCRIPTION: Shows the shorthand @ syntax for event handling in Alpine.js.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/events.md#2025-04-22_snippet_1\n\nLANGUAGE: alpine\nCODE:\n```\n<button @click=\"...\">...</button>\n```\n\n----------------------------------------\n\nTITLE: Modifying Alpine Store Data with Event Handlers\nDESCRIPTION: This snippet shows how to modify properties within an Alpine.js store using event handlers. When the button is clicked, it toggles the darkMode state.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/globals/alpine-store.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<button x-data @click=\"$store.darkMode.toggle()\">Toggle Dark Mode</button>\n```\n\n----------------------------------------\n\nTITLE: Combined Key Modifiers in Alpine.js\nDESCRIPTION: Demonstrates how to listen for multiple key combinations using multiple modifiers.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/events.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<input @keyup.shift.enter=\"...\">\n```\n\n----------------------------------------\n\nTITLE: Adding Transitions to x-show in Alpine.js\nDESCRIPTION: This example shows how to apply smooth transitions to the x-show behavior using the x-transition directive. It enhances the dropdown component with animated show/hide effects.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/show.md#2025-04-22_snippet_1\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button x-on:click=\"open = ! open\">Toggle Dropdown</button>\n\n    <div x-show=\"open\" x-transition>\n        Dropdown Contents...\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Toggling Elements with x-show in Alpine.js\nDESCRIPTION: Demonstrates using the x-show directive to toggle the visibility of an element based on a boolean data property.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/templating.md#2025-04-22_snippet_2\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button @click=\"open = ! open\">Expand</button>\n\n    <div x-show=\"open\">\n        Content...\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Nesting Data in Alpine.js Components\nDESCRIPTION: Demonstrates how to nest data in Alpine.js components, allowing child elements to access parent data while maintaining their own local state.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/state.md#2025-04-22_snippet_1\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <div x-data=\"{ label: 'Content:' }\">\n        <span x-text=\"label\"></span>\n        <span x-show=\"open\"></span>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Alpine.js Nested Scope Example\nDESCRIPTION: Shows how x-data properties are scoped and inherited in nested components.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/data.md#2025-04-22_snippet_1\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ foo: 'bar' }\">\n    <span x-text=\"foo\"><!-- Will output: \"bar\" --></span>\n\n    <div x-data=\"{ bar: 'baz' }\">\n        <span x-text=\"foo\"><!-- Will output: \"bar\" --></span>\n\n        <div x-data=\"{ foo: 'bob' }\">\n            <span x-text=\"foo\"><!-- Will output: \"bob\" --></span>\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Transition Classes in Alpine.js\nDESCRIPTION: Shows how to apply custom CSS classes for fine-grained control over transitions using x-transition directives.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/templating.md#2025-04-22_snippet_7\n\nLANGUAGE: alpine\nCODE:\n```\n<div\n    x-show=\"open\"\n    x-transition:enter=\"transition ease-out duration-300\"\n    x-transition:enter-start=\"opacity-0 transform scale-90\"\n    x-transition:enter-end=\"opacity-100 transform scale-100\"\n    x-transition:leave=\"transition ease-in duration-300\"\n    x-transition:leave-start=\"opacity-100 transform scale-100\"\n    x-transition:leave-end=\"opacity-0 transform scale-90\"\n>...</div>\n```\n\n----------------------------------------\n\nTITLE: Class object syntax with x-bind in Alpine.js\nDESCRIPTION: Demonstrates the class object syntax for x-bind, which allows toggling multiple classes based on boolean expressions.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/bind.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div :class=\"{ 'hidden': ! show }\">\n```\n\n----------------------------------------\n\nTITLE: Using x-effect Directive in Alpine.js\nDESCRIPTION: Demonstrates how to use x-effect to watch and respond to data changes automatically. The example shows a button that modifies a label property, with x-effect logging the value to console whenever it changes.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/effect.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ label: 'Hello' }\" x-effect=\"console.log(label)\">\n    <button @click=\"label += ' World!'\">Change Message</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Elements with x-if in Alpine.js\nDESCRIPTION: Shows how to use the x-if directive to conditionally add or remove elements from the DOM based on a boolean condition.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/templating.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button @click=\"open = ! open\">Expand</button>\n\n    <template x-if=\"open\">\n        <div>\n            Content...\n        </div>\n    </template>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Binding Attributes with x-bind in Alpine.js\nDESCRIPTION: Demonstrates dynamically binding HTML attributes using the x-bind directive, including a shorthand syntax.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/templating.md#2025-04-22_snippet_8\n\nLANGUAGE: alpine\nCODE:\n```\n<button\n    x-data=\"{ red: false }\"\n    x-bind:class=\"red ? 'bg-red' : ''\"\n    @click=\"red = ! red\"\n>\n    Toggle Red\n</button>\n```\n\n----------------------------------------\n\nTITLE: Setting Text Content with Alpine.js x-text Directive\nDESCRIPTION: Demonstrates how to use the x-text directive to dynamically set an element's text content based on a data property. In this example, a username value is displayed within a strong tag using x-text.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/text.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ username: 'calebporzio' }\">\n    Username: <strong x-text=\"username\"></strong>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating x-modelable Usage in Alpine.js\nDESCRIPTION: This snippet shows how to use x-modelable to expose a variable for binding with x-model. It creates a nested structure where an inner scope's 'count' property is bound to an outer scope's 'number' property.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/modelable.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ number: 5 }\">\n    <div x-data=\"{ count: 0 }\" x-modelable=\"count\" x-model=\"number\">\n        <button @click=\"count++\">Increment</button>\n    </div>\n\n    Number: <span x-text=\"number\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic x-transition Usage in Alpine.js\nDESCRIPTION: Demonstrates the simplest way to achieve a transition using Alpine.js by adding x-transition to an element with x-show. This example toggles the visibility of a div element with a default fade and scale transition.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/transition.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button @click=\"open = ! open\">Toggle</button>\n\n    <div x-show=\"open\" x-transition>\n        Hello 👋\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Object-Based Store in Alpine.js\nDESCRIPTION: Shows how to create and use an object-based store for managing dark mode state. The example demonstrates store registration, toggling state, and reactive UI updates based on store values.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/store.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<button x-data @click=\"$store.darkMode.toggle()\">Toggle Dark Mode</button>\n\n...\n\n<div x-data :class=\"$store.darkMode.on && 'bg-black'\">\n    ...\n</div>\n\n\n<script>\n    document.addEventListener('alpine:init', () => {\n        Alpine.store('darkMode', {\n            on: false,\n\n            toggle() {\n                this.on = ! this.on\n            }\n        })\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Object in Alpine.js\nDESCRIPTION: Example of accessing the native event object using the $event magic variable.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/events.md#2025-04-22_snippet_5\n\nLANGUAGE: alpine\nCODE:\n```\n<button @click=\"$event.target.remove()\">Remove Me</button>\n```\n\n----------------------------------------\n\nTITLE: Shorthand Syntax for Event Handling in Alpine.js\nDESCRIPTION: The same click handler using Alpine.js's @ shorthand syntax instead of x-on.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button @click=\"alert('Hello World!')\">Say Hi</button>\n```\n\n----------------------------------------\n\nTITLE: Registering an Alpine Store from a Script Tag\nDESCRIPTION: This snippet demonstrates how to register an Alpine.js store within an 'alpine:init' event listener when including Alpine via a script tag. The example creates a 'darkMode' store with an 'on' property and a toggle method.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/globals/alpine-store.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<script>\n    document.addEventListener('alpine:init', () => {\n        Alpine.store('darkMode', {\n            on: false,\n\n            toggle() {\n                this.on = ! this.on\n            }\n        })\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Re-usable Data in Alpine.js Components\nDESCRIPTION: Demonstrates how to use re-usable data defined with Alpine.data() in multiple components, promoting code reuse and consistency.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/state.md#2025-04-22_snippet_5\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"dropdown\">\n    <button @click=\"toggle\">Expand</button>\n\n    <span x-show=\"open\">Content...</span>\n</div>\n\n<div x-data=\"dropdown\">\n    <button @click=\"toggle\">Expand</button>\n\n    <span x-show=\"open\">Some Other Content...</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic x-on Click Handler in Alpine.js\nDESCRIPTION: A simple button that shows an alert dialog when clicked using the x-on directive.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button x-on:click=\"alert('Hello World!')\">Say Hi</button>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Populated Select Options in Alpine.js\nDESCRIPTION: Creating select options dynamically using x-for with x-model. Options are generated from an array and the selected value is bound to the color property.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_10\n\nLANGUAGE: alpine\nCODE:\n```\n<select x-model=\"color\">\n    <template x-for=\"color in ['Red', 'Orange', 'Yellow']\">\n        <option x-text=\"color\"></option>\n    </template>\n</select>\n\nColor: <span x-text=\"color\"></span>\n```\n\n----------------------------------------\n\nTITLE: Window-Level Event Listening in Alpine.js\nDESCRIPTION: Using the .window modifier to register event listeners on the global window object instead of a specific element.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<div @keyup.escape.window=\"...\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Alpine Store Data in Templates\nDESCRIPTION: This snippet demonstrates how to access data from an Alpine.js store within Alpine expressions using the $store magic property. The example shows conditional class binding based on a store value.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/globals/alpine-store.md#2025-04-22_snippet_2\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data :class=\"$store.darkMode.on && 'bg-black'\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Basic $refs DOM Manipulation in Alpine.js\nDESCRIPTION: Demonstrates how to use $refs to reference and remove a DOM element when clicking a button. The example shows a simple implementation of element removal using Alpine.js's $refs property.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/refs.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<button @click=\"$refs.text.remove()\">Remove Text</button>\n\n<span x-ref=\"text\">Hello 👋</span>\n```\n\n----------------------------------------\n\nTITLE: Component Communication with $dispatch in Alpine.js\nDESCRIPTION: Demonstrates how to use $dispatch for communication between different Alpine.js components using window-level events.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/dispatch.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<div\\n    x-data=\"{ title: 'Hello' }\"\\n    @set-title.window=\"title = $event.detail\"\\n>\\n    <h1 x-text=\"title\"></h1>\\n</div>\\n\\n<div x-data>\\n    <button @click=\"$dispatch('set-title', 'Hello World!')\">Click me</button>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic x-init Usage in Alpine.js\nDESCRIPTION: Demonstrates the basic usage of x-init directive to execute code during element initialization.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/init.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-init=\"console.log('I\\'m being initialized!')\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using an Asynchronous Function in Alpine.js with await\nDESCRIPTION: An example of using an asynchronous JavaScript function within an Alpine.js x-text directive. The 'await' keyword must be used before the function call to properly handle the promise.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/async.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<span x-text=\"await getLabel()\"></span>\n```\n\n----------------------------------------\n\nTITLE: Multiple Select Dropdown in Alpine.js\nDESCRIPTION: Using x-model with a multiple select element. Multiple selected options are stored in the color property as an array.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_9\n\nLANGUAGE: alpine\nCODE:\n```\n<select x-model=\"color\" multiple>\n    <option>Red</option>\n    <option>Orange</option>\n    <option>Yellow</option>\n</select>\n\nColors: <span x-text=\"color\"></span>\n```\n\n----------------------------------------\n\nTITLE: Using Single-Value Alpine Stores\nDESCRIPTION: This snippet demonstrates using a simple single-value store in Alpine.js instead of an object. The example uses a boolean value for the darkMode store, toggling it directly and using it for conditional class binding.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/globals/alpine-store.md#2025-04-22_snippet_6\n\nLANGUAGE: alpine\nCODE:\n```\n<button x-data @click=\"$store.darkMode = ! $store.darkMode\">Toggle Dark Mode</button>\n\n...\n\n<div x-data :class=\"$store.darkMode && 'bg-black'\">\n    ...\n</div>\n\n\n<script>\n    document.addEventListener('alpine:init', () => {\n        Alpine.store('darkMode', false)\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Stop Event Propagation in Alpine.js\nDESCRIPTION: Using the .stop modifier to prevent an event from bubbling up to parent elements.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div @click=\"console.log('I will not get logged')\">\n    <button @click.stop>Click Me</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Passing Alpine.js $data to External Functions\nDESCRIPTION: This example demonstrates how to use Alpine.js's $data magic property to pass the current data scope to an external JavaScript function. The code shows nested x-data scopes where the button click passes the combined scope to a sayHello function that destructures the greeting and name properties.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/data.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ greeting: 'Hello' }\">\n    <div x-data=\"{ name: 'Caleb' }\">\n        <button @click=\"sayHello($data)\">Say Hello</button>\n    </div>\n</div>\n\n<script>\n    function sayHello({ greeting, name }) {\n        alert(greeting + ' ' + name + '!')\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Self Modifier for Event Handling in Alpine.js\nDESCRIPTION: Demonstrates the self modifier which ensures the event handler only responds to events originating from the element itself, not its children.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_16\n\nLANGUAGE: alpine\nCODE:\n```\n<button @click.self=\"handleClick\">\n    Click Me\n\n    <img src=\"...\">\n</button>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Programmatic Access to x-model in Alpine.js\nDESCRIPTION: This snippet shows how to use the _x_model property to get and set values bound with x-model. It includes a div with x-model binding, a button to change the value, and a span to display the current value.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_19\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ username: 'calebporzio' }\">\n    <div x-ref=\"div\" x-model=\"username\"></div>\n\n    <button @click=\"$refs.div._x_model.set('phantomatrix')\">\n        Change username to: 'phantomatrix'\n    </button>\n\n    <span x-text=\"$refs.div._x_model.get()\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Single Select Dropdown with x-model in Alpine.js\nDESCRIPTION: Binding a standard select dropdown to Alpine data using x-model. The selected option value is stored in the color property.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_7\n\nLANGUAGE: alpine\nCODE:\n```\n<select x-model=\"color\">\n    <option>Red</option>\n    <option>Orange</option>\n    <option>Yellow</option>\n</select>\n\nColor: <span x-text=\"color\"></span>\n```\n\n----------------------------------------\n\nTITLE: Nesting Modals with x-teleport in Alpine.js\nDESCRIPTION: Illustrates how to nest one modal within another using x-teleport. Both modals are teleported to the body, allowing them to render as siblings rather than nested elements.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/teleport.md#2025-04-22_snippet_2\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button @click=\"open = ! open\">Toggle Modal</button>\n\n    <template x-teleport=\"body\">\n        <div x-show=\"open\">\n            Modal contents...\n\n            <div x-data=\"{ open: false }\">\n                <button @click=\"open = ! open\">Toggle Nested Modal</button>\n\n                <template x-teleport=\"body\">\n                    <div x-show=\"open\">\n                        Nested modal contents...\n                    </div>\n                </template>\n            </div>\n        </div>\n    </template>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Click Outside Detection in Alpine.js\nDESCRIPTION: Using the .outside modifier to detect clicks outside of an element, useful for dropdowns and modals.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button @click=\"open = ! open\">Toggle</button>\n\n    <div x-show=\"open\" @click.outside=\"open = false\">\n        Contents...\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Watching a Component Property with Alpine.js $watch\nDESCRIPTION: Demonstrates how to use the $watch method to observe changes in a component property. When the 'open' property changes, the callback function logs the new value to the console.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/watch.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div x-data=\"{ open: false }\" x-init=\"$watch('open', value => console.log(value))\">\n    <button @click=\"open = ! open\">Toggle Open</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Binding styles with x-bind in Alpine.js\nDESCRIPTION: Shows how to use x-bind with an object syntax to set inline styles on an element.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/bind.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div :style=\"{ color: 'red', display: 'flex' }\">\n```\n\n----------------------------------------\n\nTITLE: Prevent Default Event Behavior in Alpine.js\nDESCRIPTION: Using the .prevent modifier to stop the default form submission behavior when a button is clicked.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<form @submit.prevent=\"console.log('submitted')\" action=\"/foo\">\n    <button>Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Global State in Alpine.js\nDESCRIPTION: Demonstrates how to access and modify global state from Alpine.js components using the $store magic method. This example shows interaction with the 'tabs' store.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/state.md#2025-04-22_snippet_7\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data>\n    <template x-for=\"tab in $store.tabs.items\">\n        ...\n    </template>\n</div>\n\n<div x-data>\n    <button @click=\"$store.tabs.current = 'first'\">First Tab</button>\n    <button @click=\"$store.tabs.current = 'second'\">Second Tab</button>\n    <button @click=\"$store.tabs.current = 'third'\">Third Tab</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Deep Watching in Alpine.js $watch\nDESCRIPTION: Demonstrates deep watching of nested objects. When a nested property changes, the watcher returns the entire watched object, not just the changed subproperty.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/watch.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div x-data=\"{ foo: { bar: 'baz' }}\" x-init=\"$watch('foo', (value, oldValue) => console.log(value, oldValue))\">\n    <button @click=\"foo.bar = 'bob'\">Update</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Textarea Input with x-model in Alpine.js\nDESCRIPTION: Implementation of x-model with a textarea element. As with text inputs, the content of the textarea is bound to the message property and reflected in the span element.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<textarea x-model=\"message\"></textarea>\n\n<span x-text=\"message\"></span>\n```\n\n----------------------------------------\n\nTITLE: Creating Clipboard Magic Function in Alpine.js\nDESCRIPTION: Implements a $clipboard magic function that copies provided text to the system clipboard. Demonstrates how to create callable magic functions that accept parameters.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/extending.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nAlpine.magic('clipboard', () => {\n    return subject => navigator.clipboard.writeText(subject)\n})\n```\n\nLANGUAGE: alpine\nCODE:\n```\n<button @click=\"$clipboard('hello world')\">Copy \"Hello World\"</button>\n```\n\nLANGUAGE: js\nCODE:\n```\nAlpine.magic('clipboard', () => subject => {\n    navigator.clipboard.writeText(subject)\n})\n```\n\n----------------------------------------\n\nTITLE: Binding multiple directives with x-bind in Alpine.js\nDESCRIPTION: Illustrates how to use x-bind to apply multiple directives and attributes to an element using an object syntax.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/bind.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div x-data=\"dropdown\">\n    <button x-bind=\"trigger\">Open Dropdown</button>\n\n    <span x-bind=\"dialogue\">Dropdown Contents</span>\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('alpine:init', () => {\n    Alpine.data('dropdown', () => ({\n        open: false,\n\n        trigger: {\n            ['x-ref']: 'trigger',\n            ['@click']() {\n                this.open = true\n            },\n        },\n\n        dialogue: {\n            ['x-show']() {\n                return this.open\n            },\n            ['@click.outside']() {\n                this.open = false\n            },\n        },\n    }))\n})\n```\n\n----------------------------------------\n\nTITLE: x-model Integration with $dispatch in Alpine.js\nDESCRIPTION: Shows how to use $dispatch to trigger updates in x-model data bindings for custom input components.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/dispatch.md#2025-04-22_snippet_4\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ title: 'Hello' }\">\\n    <span x-model=\"title\">\\n        <button @click=\"$dispatch('input', 'Hello World!')\">Click me</button>\\n    </span>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using $persist to Persist Data in Alpine.js\nDESCRIPTION: Illustrates how to use the $persist magic method to persist a count value across page loads in an Alpine.js component.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/persist.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div x-data=\"{ count: $persist(0) }\">\n    <button x-on:click=\"count++\">Increment</button>\n\n    <span x-text=\"count\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling Keyboard Events with Enter Key in Alpine.js\nDESCRIPTION: Listening for the Enter key press within an input element using key modifiers.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" @keyup.enter=\"alert('Submitted!')\">\n```\n\n----------------------------------------\n\nTITLE: Accessing Old Values in Alpine.js $watch Callback\nDESCRIPTION: Illustrates how to access both the new and old values of a watched property in the $watch callback function. This is useful for comparing changes or performing actions based on value transitions.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/watch.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div x-data=\"{ open: false }\" x-init=\"$watch('open', (value, oldValue) => console.log(value, oldValue))\">\n    <button @click=\"open = ! open\">Toggle Open</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Single-Value Store in Alpine.js\nDESCRIPTION: Demonstrates a simplified implementation using a boolean value store instead of an object-based store. Shows direct value manipulation and DOM updates based on store changes.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/store.md#2025-04-22_snippet_1\n\nLANGUAGE: alpine\nCODE:\n```\n<button x-data @click=\"$store.darkMode = ! $store.darkMode\">Toggle Dark Mode</button>\n\n...\n\n<div x-data :class=\"$store.darkMode && 'bg-black'\">\n    ...\n</div>\n\n\n<script>\n    document.addEventListener('alpine:init', () => {\n        Alpine.store('darkMode', false)\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Watching Nested Properties with Alpine.js $watch\nDESCRIPTION: Shows how to watch deeply nested properties using dot notation. In this example, changes to 'foo.bar' are observed and logged to the console.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/watch.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div x-data=\"{ foo: { bar: 'baz' }}\" x-init=\"$watch('foo.bar', value => console.log(value))\">\n    <button @click=\"foo.bar = 'bob'\">Toggle Open</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using $nextTick with Promises in Alpine.js\nDESCRIPTION: This example shows how to use $nextTick as a promise in an async function. It updates the button text, waits for the DOM update using await $nextTick(), and then logs the new text content.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/nextTick.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div x-data=\"{ title: 'Hello' }\">\n    <button\n        @click=\"\n            title = 'Hello World!';\n            await $nextTick();\n            console.log($el.innerText);\n        \"\n        x-text=\"title\"\n    ></button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Looping Through Items with Alpine.js x-for Directive\nDESCRIPTION: This code demonstrates how to use Alpine.js's x-for directive to loop through the filteredItems array and render each item as a list element. The x-for directive must be used on a template element, and x-text is used to display each item.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/start-here.md#2025-04-22_snippet_6\n\nLANGUAGE: alpine\nCODE:\n```\n<ul>\n    <template x-for=\"item in filteredItems\">\n        <li x-text=\"item\"></li>\n    </template>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using $nextTick for DOM Interaction After Updates in Alpine.js\nDESCRIPTION: This snippet demonstrates how to use $nextTick to execute a function after Alpine.js has updated the DOM. It updates a button's text and then logs the new text content.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/nextTick.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div x-data=\"{ title: 'Hello' }\">\n    <button\n        @click=\"\n            title = 'Hello World!';\n            $nextTick(() => { console.log($el.innerText) });\n        \"\n        x-text=\"title\"\n    ></button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Auto-evaluate init() Method in Alpine.js Components\nDESCRIPTION: Demonstrates how init() method in x-data object is automatically called during initialization.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/init.md#2025-04-22_snippet_4\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{\n    init() {\n        console.log('I am called automatically')\n    }\n}\">\n    ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Event Dispatch in Alpine.js\nDESCRIPTION: Demonstrates basic usage of $dispatch to trigger a custom 'notify' event that shows an alert.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/dispatch.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<div @notify=\"alert('Hello World!')\">\\n    <button @click=\"$dispatch('notify')\">\\n        Notify\\n    </button>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using x-trap Directive in Alpine.js\nDESCRIPTION: Illustrates how to use the x-trap directive to trap focus within an element based on a condition. This example shows a dialog that traps focus when open.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/focus.md#2025-04-22_snippet_2\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button @click=\"open = true\">Open Dialog</button>\n\n    <span x-show=\"open\" x-trap=\"open\">\n        <p>...</p>\n\n        <input type=\"text\" placeholder=\"Some input...\">\n\n        <input type=\"text\" placeholder=\"Some other input...\">\n\n        <button @click=\"open = false\">Close Dialog</button>\n    </span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Single-element Data Usage in Alpine.js\nDESCRIPTION: Shows how to use Alpine.js data within a single element, combining state declaration and usage in one tag.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/state.md#2025-04-22_snippet_2\n\nLANGUAGE: alpine\nCODE:\n```\n<button x-data=\"{ label: 'Click Here' }\" x-text=\"label\"></button>\n```\n\n----------------------------------------\n\nTITLE: Single Checkbox with Boolean Value in Alpine.js\nDESCRIPTION: Using x-model with a single checkbox to bind to a boolean value. The checkbox state (checked or unchecked) is bound to the show property and displayed in the label.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_4\n\nLANGUAGE: alpine\nCODE:\n```\n<input type=\"checkbox\" id=\"checkbox\" x-model=\"show\">\n\n<label for=\"checkbox\" x-text=\"show\"></label>\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous Function in JavaScript\nDESCRIPTION: An asynchronous function that fetches data from an API endpoint. This function uses the async/await pattern to handle promises and must be awaited when used in Alpine.js directives.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/async.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nasync function getLabel() {\n    let response = await fetch('/api/label')\n\n    return await response.text()\n}\n```\n\n----------------------------------------\n\nTITLE: Using an Asynchronous Function in Alpine.js without Parentheses\nDESCRIPTION: An example showing how Alpine.js can automatically detect and handle asynchronous functions even when called without parentheses. Alpine will properly await the function result.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/async.md#2025-04-22_snippet_4\n\nLANGUAGE: alpine\nCODE:\n```\n<span x-text=\"getLabel\"></span>\n```\n\n----------------------------------------\n\nTITLE: Using .noscroll Modifier with x-trap in Alpine.js\nDESCRIPTION: Demonstrates how to use the .noscroll modifier with x-trap to disable scrolling on the page when a dialog is open.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/focus.md#2025-04-22_snippet_5\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button @click=\"open = true\">Open Dialog</button>\n\n    <div x-show=\"open\" x-trap.noscroll=\"open\">\n        Dialog Contents\n\n        <button @click=\"open = false\">Close Dialog</button>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Key-Specific Event Handling in Alpine.js\nDESCRIPTION: Example of listening for specific key events using the .enter modifier.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/events.md#2025-04-22_snippet_2\n\nLANGUAGE: alpine\nCODE:\n```\n<input @keyup.enter=\"...\">\n```\n\n----------------------------------------\n\nTITLE: Multiple Checkboxes Bound to Array in Alpine.js\nDESCRIPTION: Binding multiple checkboxes to a single array using x-model. Each selected checkbox value is added to the colors array and removed when unselected.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_5\n\nLANGUAGE: alpine\nCODE:\n```\n<input type=\"checkbox\" value=\"red\" x-model=\"colors\">\n<input type=\"checkbox\" value=\"orange\" x-model=\"colors\">\n<input type=\"checkbox\" value=\"yellow\" x-model=\"colors\">\n\nColors: <span x-text=\"colors\"></span>\n```\n\n----------------------------------------\n\nTITLE: Using x-id Directive with $id Magic in Alpine.js\nDESCRIPTION: Demonstrates how to use x-id directive to create unique ID scopes for form elements. The example shows two identical form structures where the $id magic generates unique IDs with different suffixes for each scope.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/id.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-id=\"['text-input']\">\n    <label :for=\"$id('text-input')\">Username</label>\n    <!-- for=\"text-input-1\" -->\n\n    <input type=\"text\" :id=\"$id('text-input')\">\n    <!-- id=\"text-input-1\" -->\n</div>\n\n<div x-id=\"['text-input']\">\n    <label :for=\"$id('text-input')\">Username</label>\n    <!-- for=\"text-input-2\" -->\n\n    <input type=\"text\" :id=\"$id('text-input')\">\n    <!-- id=\"text-input-2\" -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Select Dropdown with Placeholder in Alpine.js\nDESCRIPTION: Adding a disabled placeholder option to a select dropdown using x-model. The placeholder is shown initially and disappears once a selection is made.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_8\n\nLANGUAGE: alpine\nCODE:\n```\n<select x-model=\"color\">\n    <option value=\"\" disabled>Select A Color</option>\n    <option>Red</option>\n    <option>Orange</option>\n    <option>Yellow</option>\n</select>\n\nColor: <span x-text=\"color\"></span>\n```\n\n----------------------------------------\n\nTITLE: Separate Enter and Leave Transition Durations in Alpine.js\nDESCRIPTION: Demonstrates setting different durations for enter and leave transitions using x-transition:enter and x-transition:leave.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/templating.md#2025-04-22_snippet_6\n\nLANGUAGE: alpine\nCODE:\n```\n<div\n    x-show=\"open\"\n    x-transition:enter.duration.500ms\n    x-transition:leave.duration.1000ms\n>\n```\n\n----------------------------------------\n\nTITLE: Using Dot Notation in Event Names with Alpine.js\nDESCRIPTION: Demonstrates how to listen for events with dots in their names using the dot modifier.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_18\n\nLANGUAGE: alpine\nCODE:\n```\n<div @custom-event.dot=\"handleCustomEvent\">\n    ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Alpine Store with init() Method\nDESCRIPTION: This snippet shows how to use the init() method in an Alpine.js store to initialize state with sensible starting values. The example initializes the dark mode state based on the browser's color scheme preference.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/globals/alpine-store.md#2025-04-22_snippet_5\n\nLANGUAGE: alpine\nCODE:\n```\n<script>\n    document.addEventListener('alpine:init', () => {\n        Alpine.store('darkMode', {\n            init() {\n                this.on = window.matchMedia('(prefers-color-scheme: dark)').matches\n            },\n\n            on: false,\n\n            toggle() {\n                this.on = ! this.on\n            }\n        })\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Window-Level Event Listening in Alpine.js\nDESCRIPTION: Shows how to listen for events at the window level for cross-component communication.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/events.md#2025-04-22_snippet_7\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data>\n    <button @click=\"$dispatch('foo')\"></button>\n</div>\n\n<div x-data @foo.window=\"console.log('foo was dispatched')\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating x-ignore Directive in Alpine.js\nDESCRIPTION: This snippet shows how to use the x-ignore directive to prevent Alpine.js from initializing a specific section of HTML within an x-data scope. The x-text directive inside the ignored section will not be processed.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/ignore.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ label: 'From Alpine' }\">\n    <div x-ignore>\n        <span x-text=\"label\"></span>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Grouping IDs with x-data in Alpine.js\nDESCRIPTION: Shows how to use x-data to group and reference the same ID for both label and input elements.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/id.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div x-data=\"{ id: $id('text-input') }\">\n    <label :for=\"id\"> <!-- \"text-input-1\" -->\n    <input type=\"text\" :id=\"id\"> <!-- \"text-input-1\" -->\n</div>\n\n<div x-data=\"{ id: $id('text-input') }\">\n    <label :for=\"id\"> <!-- \"text-input-2\" -->\n    <input type=\"text\" :id=\"id\"> <!-- \"text-input-2\" -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Event Behavior in Alpine.js\nDESCRIPTION: Shows how to prevent default event behavior using the .prevent modifier.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/events.md#2025-04-22_snippet_4\n\nLANGUAGE: alpine\nCODE:\n```\n<form @submit.prevent=\"...\">...</form>\n```\n\n----------------------------------------\n\nTITLE: Radio Input Binding in Alpine.js\nDESCRIPTION: Using x-model with radio inputs to capture a single selection. The value of the selected radio button is bound to the answer property.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_6\n\nLANGUAGE: alpine\nCODE:\n```\n<input type=\"radio\" value=\"yes\" x-model=\"answer\">\n<input type=\"radio\" value=\"no\" x-model=\"answer\">\n\nAnswer: <span x-text=\"answer\"></span>\n```\n\n----------------------------------------\n\nTITLE: Setting innerHTML with Alpine.js x-html Directive\nDESCRIPTION: Demonstrates using x-html directive to set innerHTML of a span element with formatted HTML content. The example shows how to display a username with bold formatting using the x-html directive.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/html.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ username: '<strong>calebporzio</strong>' }\">\n    Username: <span x-html=\"username\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Credit Card Mask Implementation\nDESCRIPTION: Example of using x-mask:dynamic to dynamically format credit card numbers based on card type.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/mask.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<input x-mask:dynamic=\"\n    $input.startsWith('34') || $input.startsWith('37')\n        ? '9999 999999 99999' : '9999 9999 9999 9999'\n\">\n```\n\n----------------------------------------\n\nTITLE: Event Forwarding with x-teleport in Alpine.js\nDESCRIPTION: Shows how to forward events from teleported content back to the original component scope. This example allows closing the modal by clicking anywhere inside it.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/teleport.md#2025-04-22_snippet_1\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button @click=\"open = ! open\">Toggle Modal</button>\n\n    <template x-teleport=\"body\" @click=\"open = false\">\n        <div x-show=\"open\">\n            Modal contents...\n            (click to close)\n        </div>\n    </template>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Lazy Modifier with x-model in Alpine.js\nDESCRIPTION: Using the .lazy modifier to update the bound property only when the user blurs away from the input rather than on every keystroke. Useful for validation that should only trigger after field completion.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_12\n\nLANGUAGE: alpine\nCODE:\n```\n<input type=\"text\" x-model.lazy=\"username\">\n<span x-show=\"username.length > 20\">The username is too long.</span>\n```\n\n----------------------------------------\n\nTITLE: Using $el Magic Property to Replace Element Content in Alpine.js\nDESCRIPTION: This example shows how to use the $el magic property in Alpine.js to access and modify the current DOM element. When the button is clicked, its inner HTML is replaced with 'Hello World!'.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/el.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<button @click=\"$el.innerHTML = 'Hello World!'\">Replace me with \"Hello World!\"</button>\n```\n\n----------------------------------------\n\nTITLE: Event Dispatch with Data Payload in Alpine.js\nDESCRIPTION: Shows how to pass additional data with the dispatched event, accessible via the event.detail property.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/dispatch.md#2025-04-22_snippet_1\n\nLANGUAGE: alpine\nCODE:\n```\n<div @notify=\"alert($event.detail.message)\">\\n    <button @click=\"$dispatch('notify', { message: 'Hello World!' })\">\\n        Notify\\n    </button>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Range Input with x-model in Alpine.js\nDESCRIPTION: Binding a range input to Alpine data using x-model. The slider position value is stored in the range property and displayed in real-time.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_11\n\nLANGUAGE: alpine\nCODE:\n```\n<input type=\"range\" x-model=\"range\" min=\"0\" max=\"1\" step=\"0.1\">\n\n<span x-text=\"range\"></span>\n```\n\n----------------------------------------\n\nTITLE: Setting Inner HTML with x-html Directive in Alpine.js\nDESCRIPTION: Demonstrates how to use the x-html directive to dynamically set HTML content within a div element. The example shows binding an HTML string containing an h1 element to a div using x-html. Important security note: Should only be used with trusted content to prevent XSS vulnerabilities.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/templating.md#2025-04-22_snippet_11\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ title: '<h1>Start Here</h1>' }\">\n    <div x-html=\"title\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Number Modifier with x-model in Alpine.js\nDESCRIPTION: Using the .number modifier to ensure the bound value is stored as a JavaScript number type rather than a string. The typeof operator confirms the data type is 'number'.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_13\n\nLANGUAGE: alpine\nCODE:\n```\n<input type=\"text\" x-model.number=\"age\">\n<span x-text=\"typeof age\"></span>\n```\n\n----------------------------------------\n\nTITLE: Nesting x-id Groups in Alpine.js\nDESCRIPTION: Illustrates how x-id groups can be nested to create hierarchical ID scopes.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/id.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div x-id=\"['text-input']\">\n    <label :for=\"$id('text-input')\"> <!-- \"text-input-1\" -->\n    <input type=\"text\" :id=\"$id('text-input')\"> <!-- \"text-input-1\" -->\n\n    <div x-id=\"['text-input']\">\n        <label :for=\"$id('text-input')\"> <!-- \"text-input-2\" -->\n        <input type=\"text\" :id=\"$id('text-input')\"> <!-- \"text-input-2\" -->\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Alpine.morph() to Update HTML While Preserving Component State\nDESCRIPTION: Example of using Alpine.morph() to update an Alpine component with new HTML while preserving the component's state. The example includes a text input bound to Alpine data and a button to trigger the morph.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/morph.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ message: 'Change me, then press the button!' }\">\n    <input type=\"text\" x-model=\"message\">\n    <span x-text=\"message\"></span>\n</div>\n\n<button>Run Morph</button>\n\n<script>\n    document.querySelector('button').addEventListener('click', () => {\n        let el = document.querySelector('div')\n\n        Alpine.morph(el, `\n            <div x-data=\"{ message: 'Change me, then press the button!' }\">\n                <h2>See how new elements have been added</h2>\n\n                <input type=\"text\" x-model=\"message\">\n                <span x-text=\"message\"></span>\n\n                <h2>but the state of this component hasn't changed? Magical.</h2>\n            </div>\n        `)\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of x-intersect Directive in Alpine.js\nDESCRIPTION: Example showing how to use the x-intersect directive to execute code when an element enters the viewport, triggering a transition effect.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/intersect.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ shown: false }\" x-intersect=\"shown = true\">\n    <div x-show=\"shown\" x-transition>\n        I'm in the viewport!\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Controlling Focus with First and Last Element Buttons in Alpine.js\nDESCRIPTION: This example demonstrates how to programmatically control focus within a specific element group. It uses $focus.within() to scope the focus operations to a specific reference, and includes buttons to focus the first and last elements in that group.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/focus.md#2025-04-22_snippet_9\n\nLANGUAGE: alpine\nCODE:\n```\n<button @click=\"$focus.within($refs.buttons).first()\">Focus \"First\"</button>\n<button @click=\"$focus.within($refs.buttons).last()\">Focus \"Last\"</button>\n\n<div\n    x-ref=\"buttons\"\n    @keydown.right=\"$focus.wrap().next()\"\n    @keydown.left=\"$focus.wrap().previous()\"\n>\n    <button>First</button>\n    <button>Second</button>\n    <button>Third</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Navigating Focus with Arrow Keys in Alpine.js\nDESCRIPTION: This example demonstrates how to implement focus navigation between buttons using the right and left arrow keys. The $focus.next() and $focus.previous() methods are used to move focus to the next and previous focusable elements respectively.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/focus.md#2025-04-22_snippet_7\n\nLANGUAGE: alpine\nCODE:\n```\n<div\n    @keydown.right=\"$focus.next()\"\n    @keydown.left=\"$focus.previous()\"\n>\n    <button>First</button>\n    <button>Second</button>\n    <button>Third</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using x-intersect:enter in Alpine.js\nDESCRIPTION: Demonstrates the :enter suffix which is an alias for x-intersect, used for clarity when also using the :leave suffix.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/intersect.md#2025-04-22_snippet_4\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-intersect:enter=\"shown = true\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Key for Persisted Data in Alpine.js\nDESCRIPTION: Shows how to use the .as modifier to set a custom key for persisted data, useful for differentiating between components with the same property names.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/persist.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div x-data=\"{ count: $persist(0).as('other-count') }\">\n    <button x-on:click=\"count++\">Increment</button>\n\n    <span x-text=\"count\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing x-transition Duration in Alpine.js\nDESCRIPTION: Shows how to customize the duration of x-transition using the .duration modifier. This example sets different durations for entering and leaving transitions.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/transition.md#2025-04-22_snippet_1\n\nLANGUAGE: alpine\nCODE:\n```\n<div ...\n    x-transition:enter.duration.500ms\n    x-transition:leave.duration.400ms\n>\n```\n\n----------------------------------------\n\nTITLE: Accessing Data Attributes Using $root in Alpine.js\nDESCRIPTION: This example demonstrates how to use the $root magic property to access data attributes from the root Alpine.js component. When the button is clicked, it displays an alert with the message stored in the data-message attribute of the root element.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/root.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data data-message=\"Hello World!\">\n    <button @click=\"alert($root.dataset.message)\">Say Hi</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of x-collapse Directive\nDESCRIPTION: Shows the basic implementation of the x-collapse directive on an element with x-show to create smooth expand/collapse animations.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/collapse.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ expanded: false }\">\n    <button @click=\"expanded = ! expanded\">Toggle Content</button>\n\n    <p x-show=\"expanded\" x-collapse>\n        ...\n    </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using the .full Modifier with x-intersect in Alpine.js\nDESCRIPTION: Demonstrates the .full modifier which evaluates the expression when 99% of the element is in the viewport.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/intersect.md#2025-04-22_snippet_8\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-intersect.full=\"shown = true\">...</div> // when `0.99` of the element is in the viewport\n```\n\n----------------------------------------\n\nTITLE: Sorting Groups Implementation\nDESCRIPTION: Example showing how to implement multiple sortable lists that can exchange items.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/sort.md#2025-04-22_snippet_5\n\nLANGUAGE: alpine\nCODE:\n```\n<div>\n    <ul x-sort x-sort:group=\"todos\">\n        <li x-sort:item=\"1\">foo</li>\n        <li x-sort:item=\"2\">bar</li>\n        <li x-sort:item=\"3\">baz</li>\n    </ul>\n\n    <ol x-sort x-sort:group=\"todos\">\n        <li x-sort:item=\"4\">foo</li>\n        <li x-sort:item=\"5\">bar</li>\n        <li x-sort:item=\"6\">baz</li>\n    </ol>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Object in Alpine.js\nDESCRIPTION: Example of accessing the native JavaScript event object using Alpine's $event magic property to retrieve data from the clicked element.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button @click=\"alert($event.target.getAttribute('message'))\" message=\"Hello World\">Say Hi</button>\n```\n\n----------------------------------------\n\nTITLE: One-Time Event Handling in Alpine.js\nDESCRIPTION: Using the .once modifier to ensure an event handler is only executed a single time, regardless of how many times the event occurs.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<button @click.once=\"console.log('I will only log once')\">...</button>\n```\n\n----------------------------------------\n\nTITLE: Keyed IDs for Looping in Alpine.js\nDESCRIPTION: Shows how to use keyed IDs with $id for scenarios like listboxes where unique identification within loops is necessary.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/id.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ul\n    x-id=\"['list-item']\"\n    :aria-activedescendant=\"$id('list-item', activeItem.id)\"\n>\n    <template x-for=\"item in items\" :key=\"item.id\">\n        <li :id=\"$id('list-item', item.id)\">...</li>\n    </template>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using x-resize Directive to Track Element Dimensions\nDESCRIPTION: Example of using the x-resize directive to track and display an element's width and height as it changes size. Uses the $width and $height magic properties.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/resize.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<div\n    x-data=\"{ width: 0, height: 0 }\"\n    x-resize=\"width = $width; height = $height\"\n>\n    <p x-text=\"'Width: ' + width + 'px'\"></p>\n    <p x-text=\"'Height: ' + height + 'px'\"></p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using sessionStorage for Persisted Data in Alpine.js\nDESCRIPTION: Demonstrates how to use the .using modifier to persist data to sessionStorage instead of localStorage.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/persist.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div x-data=\"{ count: $persist(0).using(sessionStorage) }\">\n    <button x-on:click=\"count++\">Increment</button>\n\n    <span x-text=\"count\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Wrap-Around Focus Navigation in Alpine.js\nDESCRIPTION: This example enhances the previous one by adding wrap-around functionality using the $focus.wrap() method. When focus is on the last element and the right arrow is pressed, focus will wrap to the first element, and vice versa.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/focus.md#2025-04-22_snippet_8\n\nLANGUAGE: alpine\nCODE:\n```\n<div\n    @keydown.right=\"$focus.wrap().next()\"\n    @keydown.left=\"$focus.wrap().previous()\"\n>\n    <button>First</button>\n    <button>Second</button>\n    <button>Third</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Debounce Event Handling in Alpine.js\nDESCRIPTION: Demonstrates the use of the debounce modifier to delay event handling until after a period of inactivity. Default delay is 250ms, but can be customized.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_14\n\nLANGUAGE: alpine\nCODE:\n```\n<input @input.debounce=\"fetchResults\">\n```\n\nLANGUAGE: alpine\nCODE:\n```\n<input @input.debounce.500ms=\"fetchResults\">\n```\n\n----------------------------------------\n\nTITLE: Using Capture Phase Event Handling in Alpine.js\nDESCRIPTION: Demonstrates how to handle events in the capturing phase before they bubble up using the capture modifier.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_20\n\nLANGUAGE: alpine\nCODE:\n```\n<div @click.capture=\"console.log('I will log first')\">\n    <button @click=\"console.log('I will log second')\"></button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Passive Event Listeners in Alpine.js\nDESCRIPTION: Shows how to implement passive event listeners for better scroll performance in touch events.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_19\n\nLANGUAGE: alpine\nCODE:\n```\n<div @touchstart.passive=\"...\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Alpine Anchor with Custom Positioning\nDESCRIPTION: Shows how to use positioning modifiers with x-anchor for custom dropdown placement.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/anchor.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button x-ref=\"button\" @click=\"open = ! open\">Toggle</button>\n\n    <div x-show=\"open\" x-anchor.bottom-start=\"$refs.button\">\n        Dropdown content\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Alpine.data() Component Registration with init()\nDESCRIPTION: Shows how to use init() method in components registered using Alpine.data() syntax.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/init.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nAlpine.data('dropdown', () => ({\n    init() {\n        console.log('I will get evaluated when initializing each \"dropdown\" component.')\n    },\n}))\n```\n\n----------------------------------------\n\nTITLE: Using Alpine.effect() for Reactive Logging in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of Alpine.effect() to create a reactive effect. It logs the value of a reactive data property and will re-run whenever that property changes.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/reactivity.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nlet data = Alpine.reactive({ count: 1 })\n\nAlpine.effect(() => {\n    console.log(data.count)\n})\n```\n\n----------------------------------------\n\nTITLE: Using shorthand syntax for x-bind in Alpine.js\nDESCRIPTION: Shows the shorthand syntax for x-bind, using a colon (:) instead of the full x-bind: prefix.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/bind.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" :placeholder=\"placeholder\">\n```\n\n----------------------------------------\n\nTITLE: Live Demo of Alpine.js Sortable with Custom Configuration\nDESCRIPTION: This snippet provides a live, interactive demo of the custom SortableJS configuration in Alpine.js. It includes an unordered list with sortable items and applies the custom animation setting along with cursor styling.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/sort.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div x-data>\n    <ul x-sort x-sort:config=\"{ animation: 0 }\">\n        <li x-sort:item class=\"cursor-pointer\">foo</li>\n        <li x-sort:item class=\"cursor-pointer\">bar</li>\n        <li x-sort:item class=\"cursor-pointer\">baz</li>\n    </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Function-based Dynamic Credit Card Mask\nDESCRIPTION: Implementation of dynamic credit card masking using a separate JavaScript function.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/mask.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<input x-mask:dynamic=\"creditCardMask\">\n\n<script>\nfunction creditCardMask(input) {\n    return input.startsWith('34') || input.startsWith('37')\n        ? '9999 999999 99999'\n        : '9999 9999 9999 9999'\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Simple Uppercase Directive Implementation\nDESCRIPTION: Example of a basic custom directive that converts text content to uppercase.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/extending.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nAlpine.directive('uppercase', el => {\n    el.textContent = el.textContent.toUpperCase()\n})\n```\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data>\n    <span x-uppercase>Hello World!</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Combined init() and x-init Usage in Alpine.js\nDESCRIPTION: Demonstrates the execution order when both init() method and x-init directive are used together.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/init.md#2025-04-22_snippet_6\n\nLANGUAGE: alpine\nCODE:\n```\n<div\n    x-data=\"{\n        init() {\n            console.log('I am called first')\n        }\n    }\"\n    x-init=\"console.log('I am called second')\"\n    >\n    ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using the .margin Modifier with x-intersect in Alpine.js\nDESCRIPTION: Examples of using the .margin modifier to control the rootMargin property of the IntersectionObserver, adjusting the viewport boundary for intersection detection.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/intersect.md#2025-04-22_snippet_10\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-intersect.margin.200px=\"loaded = true\">...</div> // Load when the element is within 200px of the viewport\n```\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-intersect:leave.margin.10%.25px.25.25px=\"loaded = false\">...</div> // Unload when the element gets within 10% of the top of the viewport, or within 25px of the other three edges\n```\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-intersect.margin.-100px=\"visible = true\">...</div> // Mark as visible when element is more than 100 pixels into the viewport.\n```\n\n----------------------------------------\n\nTITLE: Debounce Modifier with x-model in Alpine.js\nDESCRIPTION: Using the .debounce modifier to delay updating the bound property until typing has stopped. Useful for search inputs where you want to limit API calls until the user finishes typing.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_15\n\nLANGUAGE: alpine\nCODE:\n```\n<input type=\"text\" x-model.debounce=\"search\">\n```\n\n----------------------------------------\n\nTITLE: Filtering Items with JavaScript Array Filter Method\nDESCRIPTION: This snippet shows the implementation of the filter callback that powers the 'filteredItems' getter. It uses JavaScript's array filter method with a callback that checks if each item starts with the current search term.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/start-here.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nreturn this.items.filter(\n    i => i.startsWith(this.search)\n)\n```\n\n----------------------------------------\n\nTITLE: NPM Module Extension Registration\nDESCRIPTION: Demonstrates how to register Alpine extensions when using NPM module imports.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/extending.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport Alpine from 'alpinejs'\n\nAlpine.directive('foo', ...)\n\nwindow.Alpine = Alpine\nwindow.Alpine.start()\n```\n\n----------------------------------------\n\nTITLE: Alternative to x-cloak Using Template and x-if in Alpine.js\nDESCRIPTION: An alternative approach to achieve the same effect as x-cloak without requiring global CSS. This technique uses template elements and x-if to prevent content from being visible before Alpine.js initializes.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/cloak.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<template x-if=\"true\">\n    <span x-text=\"message\"></span>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Reactive Directive Implementation\nDESCRIPTION: Demonstrates implementing a reactive custom directive using evaluateLater and effect APIs.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/extending.md#2025-04-22_snippet_6\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ message: 'Hello World!' }\">\n    <div x-log=\"message\"></div>\n    <button @click=\"message = 'yolo'\">Change</button>\n</div>\n```\n\nLANGUAGE: js\nCODE:\n```\nAlpine.directive('log', (el, { expression }, { evaluateLater, effect }) => {\n    let getThingToLog = evaluateLater(expression)\n\n    effect(() => {\n        getThingToLog(thingToLog => {\n            console.log(thingToLog)\n        })\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of $id in Alpine.js\nDESCRIPTION: Demonstrates how to use the $id utility to generate unique IDs for input elements on a page.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/id.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" :id=\"$id('text-input')\">\n<!-- id=\"text-input-1\" -->\n\n<input type=\"text\" :id=\"$id('text-input')\">\n<!-- id=\"text-input-2\" -->\n```\n\n----------------------------------------\n\nTITLE: Using Keys with Alpine Morph for List Reordering\nDESCRIPTION: HTML example demonstrating the use of keys with Alpine Morph to properly handle reordering of list items. Without keys, elements would be incorrectly updated instead of being moved to their new positions.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/morph.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- \"Live\" Dom on the page: -->\n<ul>\n    <li key=\"1\">Mark</li>\n    <li key=\"2\">Tom</li>\n    <li key=\"3\">Travis</li>\n</ul>\n\n<!-- New HTML to \"morph to\": -->\n<ul>\n    <li key=\"3\">Travis</li>\n    <li key=\"1\">Mark</li>\n    <li key=\"2\">Tom</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Standalone x-init Usage in Alpine.js\nDESCRIPTION: Shows how x-init can be used both inside and outside x-data blocks.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/init.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data>\n    <span x-init=\"console.log('I can initialize')\"></span>\n</div>\n\n<span x-init=\"console.log('I can initialize too')\"></span>\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Time Property in Alpine.js\nDESCRIPTION: Creates a $now magic helper that returns the current time as a localized string. The property behaves like a static value but updates dynamically when accessed.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/extending.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nAlpine.magic('now', () => {\n    return (new Date).toLocaleTimeString()\n})\n```\n\nLANGUAGE: alpine\nCODE:\n```\n<span x-text=\"$now\"></span>\n```\n\n----------------------------------------\n\nTITLE: Boolean Modifier with x-model in Alpine.js\nDESCRIPTION: Using the .boolean modifier to convert string values to JavaScript boolean type. Works with string representations of booleans like 'true'/'false' and converts them to actual boolean values.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_14\n\nLANGUAGE: alpine\nCODE:\n```\n<select x-model.boolean=\"isActive\">\n    <option value=\"true\">Yes</option>\n    <option value=\"false\">No</option>\n</select>\n<span x-text=\"typeof isActive\"></span>\n```\n\n----------------------------------------\n\nTITLE: Basic Alpine Anchor Usage\nDESCRIPTION: Demonstrates basic usage of x-anchor directive to create a dropdown anchored to a button.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/anchor.md#2025-04-22_snippet_2\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button x-ref=\"button\" @click=\"open = ! open\">Toggle</button>\n\n    <div x-show=\"open\" x-anchor=\"$refs.button\">\n        Dropdown content\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using x-cloak with x-text in Alpine.js\nDESCRIPTION: Example showing how x-cloak can be used with x-text to hide an element until its content is properly set by Alpine.js. The element remains hidden until the message property is correctly assigned.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/cloak.md#2025-04-22_snippet_2\n\nLANGUAGE: alpine\nCODE:\n```\n<span x-cloak x-text=\"message\"></span>\n```\n\n----------------------------------------\n\nTITLE: Adding Required CSS for x-cloak in Alpine.js\nDESCRIPTION: The CSS rule needed to make x-cloak work properly. This hides elements with the x-cloak attribute until Alpine.js is fully loaded on the page.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/cloak.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n[x-cloak] { display: none !important; }\n```\n\n----------------------------------------\n\nTITLE: Money Input Mask Examples\nDESCRIPTION: Various implementations of money input masking with different formatting options.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/mask.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<input x-mask:dynamic=\"$money($input)\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<input x-mask:dynamic=\"$money($input, ',')\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<input x-mask:dynamic=\"$money($input, '.', ' ')\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<input x-mask:dynamic=\"$money($input, '.', ',', 4)\">\n```\n\n----------------------------------------\n\nTITLE: Nesting Dialogs with x-trap in Alpine.js\nDESCRIPTION: Demonstrates how to nest dialogs using x-trap, showcasing the automatic handling of focus trapping in nested scenarios.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/focus.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button @click=\"open = true\">Open Dialog</button>\n\n    <span x-show=\"open\" x-trap=\"open\">\n\n        ...\n\n        <div x-data=\"{ open: false }\">\n            <button @click=\"open = true\">Open Nested Dialog</button>\n\n            <span x-show=\"open\" x-trap=\"open\">\n\n                ...\n\n                <button @click=\"open = false\">Close Nested Dialog</button>\n            </span>\n        </div>\n\n        <button @click=\"open = false\">Close Dialog</button>\n    </span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using .noreturn Modifier with x-trap in Alpine.js\nDESCRIPTION: Shows how to use the .noreturn modifier with x-trap to prevent focus from returning to the previous element when closing a dialog.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/focus.md#2025-04-22_snippet_6\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\" x-trap.noreturn=\"open\">\n    <input type=\"search\" placeholder=\"search for something\" />\n\n    <div x-show=\"open\">\n        Search results\n\n        <button @click=\"open = false\">Close</button>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Manual Styling with Alpine Anchor\nDESCRIPTION: Shows how to manually control positioning styles using the $anchor magic helper.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/anchor.md#2025-04-22_snippet_5\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button x-ref=\"button\" @click=\"open = ! open\">Toggle</button>\n\n    <div\n        x-show=\"open\"\n        x-anchor.no-style=\"$refs.button\"\n        x-bind:style=\"{ position: 'absolute', top: $anchor.y+'px', left: $anchor.x+'px' }\"\n    >\n        Dropdown content\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using x-cloak with x-show in Alpine.js\nDESCRIPTION: Example of using x-cloak with x-show to prevent an element from appearing briefly before Alpine.js initializes. This prevents any 'blip' of the hidden element on screen during page load.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/cloak.md#2025-04-22_snippet_1\n\nLANGUAGE: alpine\nCODE:\n```\n<span x-cloak x-show=\"false\">This will not 'blip' onto screen at any point</span>\n```\n\n----------------------------------------\n\nTITLE: Initializing Alpine Extension via Script Tag\nDESCRIPTION: Example showing how to register custom Alpine extensions when using script tag implementation.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/extending.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<html>\n    <script src=\"/js/alpine.js\" defer></script>\n\n    <div x-data x-foo></div>\n\n    <script>\n        document.addEventListener('alpine:init', () => {\n            Alpine.directive('foo', ...)\n        })\n    </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring SortableJS in Alpine.js with Custom Animation Setting\nDESCRIPTION: This snippet shows how to use the x-sort:config directive to customize SortableJS options in Alpine.js. It specifically demonstrates setting the animation option to 0, which disables sorting animations.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/sort.md#2025-04-22_snippet_6\n\nLANGUAGE: alpine\nCODE:\n```\n<ul x-sort x-sort:config=\"{ animation: 0 }\">\n    <li x-sort:item>foo</li>\n    <li x-sort:item>bar</li>\n    <li x-sort:item>baz</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Duration Modifier with x-collapse\nDESCRIPTION: Demonstrates how to customize the duration of collapse/expand transitions using the .duration modifier with a specified time in milliseconds.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/collapse.md#2025-04-22_snippet_4\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ expanded: false }\">\n    <button @click=\"expanded = ! expanded\">Toggle Content</button>\n\n    <p x-show=\"expanded\" x-collapse.duration.1000ms>\n        ...\n    </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Alpine.js Plugin as Script Include\nDESCRIPTION: Shows how to create an Alpine.js plugin that can be included via a script tag. The plugin registers custom directives and magic properties using the alpine:init event.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/extending.md#2025-04-22_snippet_12\n\nLANGUAGE: alpine\nCODE:\n```\n<html>\n    <script src=\"/js/foo.js\" defer></script>\n    <script src=\"/js/alpine.js\" defer></script>\n\n    <div x-data x-init=\"$foo()\">\n        <span x-foo=\"'hello world'\">\n    </div>\n</html>\n```\n\nLANGUAGE: js\nCODE:\n```\ndocument.addEventListener('alpine:init', () => {\n    window.Alpine.directive('foo', ...)\n\n    window.Alpine.magic('foo', ...)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Throttle Event Handling in Alpine.js\nDESCRIPTION: Shows how to use the throttle modifier to limit event handling to occur at regular intervals. Useful for scroll events and other frequent updates.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_15\n\nLANGUAGE: alpine\nCODE:\n```\n<div @scroll.window.throttle=\"handleScroll\">...</div>\n```\n\nLANGUAGE: alpine\nCODE:\n```\n<div @scroll.window.throttle.750ms=\"handleScroll\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Comparing Original and Reactive Data in JavaScript\nDESCRIPTION: This code snippet compares the behavior of the original data object and its reactive counterpart. It demonstrates that changes to the reactive object are reflected in the original object and vice versa.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/reactivity.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(data.count) // 1\nconsole.log(reactiveData.count) // 1\n\nreactiveData.count = 2\n\nconsole.log(data.count) // 2\nconsole.log(reactiveData.count) // 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Alpine.morph() with Lifecycle Hooks\nDESCRIPTION: JavaScript code showing all available lifecycle hooks and configuration options for Alpine.morph(). The example includes hooks for updating, removing, and adding elements, as well as key configuration and lookahead option.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/morph.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nAlpine.morph(el, newHtml, {\n    updating(el, toEl, childrenOnly, skip) {\n        //\n    },\n\n    updated(el, toEl) {\n        //\n    },\n\n    removing(el, skip) {\n        //\n    },\n\n    removed(el) {\n        //\n    },\n\n    adding(el, skip) {\n        //\n    },\n\n    added(el) {\n        //\n    },\n\n    key(el) {\n        // By default Alpine uses the `key=\"\"` HTML attribute.\n        return el.id\n    },\n\n    lookahead: true, // Default: false\n})\n```\n\n----------------------------------------\n\nTITLE: Using Alpine.$persist Global in Alpine.js Stores\nDESCRIPTION: Shows how to use the globally exposed Alpine.$persist to persist data in Alpine.store, allowing for persistence outside of x-data contexts.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/persist.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nAlpine.store('darkMode', {\n    on: Alpine.$persist(true).as('darkMode_on')\n});\n```\n\n----------------------------------------\n\nTITLE: Throttle Modifier with x-model in Alpine.js\nDESCRIPTION: Using the .throttle modifier to limit how often the bound property updates during continuous input. Unlike debounce, throttle updates at regular intervals while input is occurring.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_17\n\nLANGUAGE: alpine\nCODE:\n```\n<input type=\"text\" x-model.throttle.500ms=\"search\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Storage for Persisted Data in Alpine.js\nDESCRIPTION: Shows how to create and use a custom storage object (cookieStorage) for persisting data in Alpine.js using session cookies.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/persist.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script>\n    window.cookieStorage = {\n        getItem(key) {\n            let cookies = document.cookie.split(\";\");\n            for (let i = 0; i < cookies.length; i++) {\n                let cookie = cookies[i].split(\"=\");\n                if (key == cookie[0].trim()) {\n                    return decodeURIComponent(cookie[1]);\n                }\n            }\n            return null;\n        },\n        setItem(key, value) {\n            document.cookie = key+' = '+encodeURIComponent(value)\n        }\n    }\n</script>\n\n<div x-data=\"{ count: $persist(0).using(cookieStorage) }\">\n    <button x-on:click=\"count++\">Increment</button>\n\n    <span x-text=\"count\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Alpine Anchor with Offset\nDESCRIPTION: Example of using the offset modifier to add spacing between anchored elements.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/anchor.md#2025-04-22_snippet_4\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button x-ref=\"button\" @click=\"open = ! open\">Toggle</button>\n\n    <div x-show=\"open\" x-anchor.offset.10=\"$refs.button\">\n        Dropdown content\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Auto-evaluating init() Functions in Alpine.js V3\nDESCRIPTION: Alpine.js V3 automatically calls init() methods on data objects, eliminating the need for manual initialization in x-init.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/upgrade-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Before -->\n<div x-data=\"foo()\" x-init=\"init()\"></div>\n\n<!-- After -->\n<div x-data=\"foo()\"></div>\n\n<script>\n    function foo() {\n        return {\n            init() {\n                //\n            }\n        }\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using $nextTick in Alpine.js\nDESCRIPTION: Demonstrates how to use $nextTick to execute code after Alpine has finished rendering.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/init.md#2025-04-22_snippet_2\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-init=\"$nextTick(() => { ... })\"></div>\n```\n\n----------------------------------------\n\nTITLE: Chaining Key Modifiers in Alpine.js\nDESCRIPTION: Example of chaining key modifiers to listen for Shift+Enter key combination in an input element.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" @keyup.shift.enter=\"alert('Submitted!')\">\n```\n\n----------------------------------------\n\nTITLE: Custom Debounce Time with x-model in Alpine.js\nDESCRIPTION: Specifying a custom debounce time with the .debounce modifier. This example sets the debounce delay to 500 milliseconds instead of the default 250ms.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_16\n\nLANGUAGE: alpine\nCODE:\n```\n<input type=\"text\" x-model.debounce.500ms=\"search\">\n```\n\n----------------------------------------\n\nTITLE: Alpine Anchor with Element ID\nDESCRIPTION: Demonstrates anchoring to an element using its ID instead of an Alpine reference.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/anchor.md#2025-04-22_snippet_6\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button id=\"trigger\" @click=\"open = ! open\">Toggle</button>\n\n    <div x-show=\"open\" x-anchor=\"document.getElementById('trigger')\">\n        Dropdown content\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using x-resize with document Modifier\nDESCRIPTION: Example of using the x-resize directive with the .document modifier to observe the entire document's size rather than a specific element.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/resize.md#2025-04-22_snippet_4\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-resize.document=\"...\">\n```\n\n----------------------------------------\n\nTITLE: Updating Click-Away Event Modifier in Alpine.js\nDESCRIPTION: Shows how to migrate from the deprecated .away event modifier to the new .outside modifier for handling clicks outside an element. Both achieve the same functionality of closing/hiding elements when clicking outside.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/upgrade-guide.md#2025-04-22_snippet_10\n\nLANGUAGE: alpine\nCODE:\n```\n<!-- 🚫 Before -->\n<div x-show=\"open\" @click.away=\"open = false\">\n    ...\n</div>\n\n<!-- ✅ After -->\n<div x-show=\"open\" @click.outside=\"open = false\">\n    ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using the .once Modifier with x-intersect in Alpine.js\nDESCRIPTION: Demonstrates the .once modifier which evaluates the expression only the first time an element enters the viewport, useful for triggering animations.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/intersect.md#2025-04-22_snippet_6\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-intersect.once=\"shown = true\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Date Input Mask Example\nDESCRIPTION: Simple example of using x-mask directive to format a date input field with a specific pattern.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/mask.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<input x-mask=\"99/99/9999\" placeholder=\"MM/DD/YYYY\">\n```\n\n----------------------------------------\n\nTITLE: Using Kebab-Case Key Names in Alpine.js\nDESCRIPTION: Example of using kebab-case to represent specific keyboard keys like Page Down for event listeners.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" @keyup.page-down=\"alert('Submitted!')\">\n```\n\n----------------------------------------\n\nTITLE: Event Propagation Examples in Alpine.js\nDESCRIPTION: Illustrates correct and incorrect approaches to event propagation using the .window modifier.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/dispatch.md#2025-04-22_snippet_2\n\nLANGUAGE: alpine\nCODE:\n```\n<!-- 🚫 Won't work -->\\n<div x-data>\\n    <span @notify=\"...\"></span>\\n    <button @click=\"$dispatch('notify')\">Notify</button>\\n</div>\\n\\n<!-- ✅ Will work (because of .window) -->\\n<div x-data>\\n    <span @notify.window=\"...\"></span>\\n    <button @click=\"$dispatch('notify')\">Notify</button>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Migrating to Alpine.data() from Global Functions\nDESCRIPTION: Demonstrates how to replace global function data providers with Alpine.data() for component initialization. The new approach using Alpine.data() must be defined before Alpine.start() and provides better encapsulation.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/upgrade-guide.md#2025-04-22_snippet_11\n\nLANGUAGE: alpine\nCODE:\n```\n<!-- 🚫 Before -->\n<div x-data=\"dropdown()\">\n    ...\n</div>\n\n<script>\n    function dropdown() {\n        return {\n            ...\n        }\n    }\n</script>\n\n<!-- ✅ After -->\n<div x-data=\"dropdown\">\n    ...\n</div>\n\n<script>\n    document.addEventListener('alpine:init', () => {\n        Alpine.data('dropdown', () => ({\n            ...\n        }))\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Mouse Event Modifiers in Alpine.js\nDESCRIPTION: A button that changes behavior based on mouse events and modifier keys, particularly when Shift is held down.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\"\n    @click=\"message = 'selected'\"\n    @click.shift=\"message = 'added to selection'\"\n    @mousemove.shift=\"message = 'add to selection'\"\n    @mouseout=\"message = 'select'\"\n    x-text=\"message\"></button>\n```\n\n----------------------------------------\n\nTITLE: Using a Synchronous Function in Alpine.js\nDESCRIPTION: An example of using a synchronous JavaScript function within an Alpine.js x-text directive. The function is called with parentheses to execute it immediately.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/async.md#2025-04-22_snippet_1\n\nLANGUAGE: alpine\nCODE:\n```\n<span x-text=\"getLabel()\"></span>\n```\n\n----------------------------------------\n\nTITLE: Using .inert Modifier with x-trap in Alpine.js\nDESCRIPTION: Shows how to use the .inert modifier with x-trap to hide other elements from screen readers when trapping focus.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/focus.md#2025-04-22_snippet_4\n\nLANGUAGE: alpine\nCODE:\n```\n<!-- When `open` is `false`: -->\n<body x-data=\"{ open: false }\">\n    <div x-trap.inert=\"open\" ...>\n        ...\n    </div>\n\n    <div>\n        ...\n    </div>\n</body>\n\n<!-- When `open` is `true`: -->\n<body x-data=\"{ open: true }\">\n    <div x-trap.inert=\"open\" ...>\n        ...\n    </div>\n\n    <div aria-hidden=\"true\">\n        ...\n    </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Dynamic $refs Binding Limitation in Alpine.js V3\nDESCRIPTION: Illustrates a limitation in Alpine.js V3 where dynamic $refs binding in x-for loops doesn't work as expected. The example shows that dynamic references will store the literal string rather than the evaluated value.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/refs.md#2025-04-22_snippet_1\n\nLANGUAGE: alpine\nCODE:\n```\n<template x-for=\"item in items\" :key=\"item.id\" >\n    <div :x-ref=\"item.name\">\n    some content ...\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Invalid Inline Component Example\nDESCRIPTION: Shows an example of an invalid inline component structure that won't work with the CSP build.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/csp.md#2025-04-22_snippet_4\n\nLANGUAGE: alpine\nCODE:\n```\n<!-- Bad -->\n<div x-data=\"{ count: 1 }\">\n    <button @click=\"count++\">Increment</button>\n\n    <span x-text=\"count\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Data-less Alpine.js Usage\nDESCRIPTION: Demonstrates how to use Alpine.js functionality without declaring reactive data, suitable for simple interactions like alerts.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/state.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<button x-data @click=\"alert('I\\'ve been clicked!')\">Click Me</button>\n```\n\n----------------------------------------\n\nTITLE: Using x-id Directive for ID Grouping in Alpine.js\nDESCRIPTION: Demonstrates the use of the x-id directive to create ID scopes for more flexible ID grouping.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/id.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div x-id=\"['text-input']\">\n    <label :for=\"$id('text-input')\"> <!-- \"text-input-1\" -->\n    <input type=\"text\" :id=\"$id('text-input')\"> <!-- \"text-input-1\" -->\n</div>\n\n<div x-id=\"['text-input']\">\n    <label :for=\"$id('text-input')\"> <!-- \"text-input-2\" -->\n    <input type=\"text\" :id=\"$id('text-input')\"> <!-- \"text-input-2\" -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using $persist with Alpine.data in Alpine.js\nDESCRIPTION: Demonstrates how to use $persist within an Alpine.data function, requiring the use of a standard function instead of an arrow function.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/persist.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nAlpine.data('dropdown', function () {\n    return {\n        open: this.$persist(false)\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Expression Evaluation Example\nDESCRIPTION: Shows how to evaluate expressions in custom directives using Alpine's evaluate API.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/extending.md#2025-04-22_snippet_5\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ message: 'Hello World!' }\">\n    <div x-log=\"message\"></div>\n</div>\n```\n\nLANGUAGE: js\nCODE:\n```\nAlpine.directive('log', (el, { expression }, { evaluate }) => {\n    console.log(\n        evaluate(expression)\n    )\n})\n```\n\n----------------------------------------\n\nTITLE: Complete CSP Example with Counter Component\nDESCRIPTION: A full HTML example showing how to implement a counter component using Alpine.js CSP build with proper security headers and nonce attributes.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/csp.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<html>\n    <head>\n        <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'nonce-a23gbfz9e'\">\n\n        <script defer nonce=\"a23gbfz9e\" src=\"https://cdn.jsdelivr.net/npm/@alpinejs/csp@3.x.x/dist/cdn.min.js\"></script>\n    </head>\n\n    <body>\n        <div x-data=\"counter\">\n            <button x-on:click=\"increment\"></button>\n\n            <span x-text=\"count\"></span>\n        </div>\n\n        <script nonce=\"a23gbfz9e\">\n            document.addEventListener('alpine:init', () => {\n                Alpine.data('counter', () => {\n                    return {\n                        count: 1,\n\n                        increment() {\n                            this.count++;\n                        },\n                    }\n                })\n            })\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Alpine Sort\nDESCRIPTION: Basic example showing how to implement sortable list items using x-sort directive.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/sort.md#2025-04-22_snippet_3\n\nLANGUAGE: alpine\nCODE:\n```\n<ul x-sort>\n    <li x-sort:item>foo</li>\n    <li x-sort:item>bar</li>\n    <li x-sort:item>baz</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Min Height Modifier with x-collapse\nDESCRIPTION: Shows how to set a minimum height for the collapsed state using the .min modifier, which allows content to be cut off rather than fully hidden.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/collapse.md#2025-04-22_snippet_5\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ expanded: false }\">\n    <button @click=\"expanded = ! expanded\">Toggle Content</button>\n\n    <p x-show=\"expanded\" x-collapse.min.50px>\n        ...\n    </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Directive Ordering\nDESCRIPTION: Example of controlling directive execution order using the before() method.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/extending.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nAlpine.directive('foo', (el, { value, modifiers, expression }) => {\n    Alpine.addScopeToNode(el, {foo: 'bar'})\n}).before('bind')\n```\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data>\n    <span x-foo x-bind:foo=\"foo\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: External Extension File Setup\nDESCRIPTION: Shows proper script tag ordering when including external Alpine extension files.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/extending.md#2025-04-22_snippet_1\n\nLANGUAGE: alpine\nCODE:\n```\n<html>\n    <script src=\"/js/foo.js\" defer></script>\n    <script src=\"/js/alpine.js\" defer></script>\n\n    <div x-data x-foo></div>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Replacing x-show.transition with x-transition in Alpine.js V3\nDESCRIPTION: The x-show.transition helper has been replaced with a more unified x-transition API in Alpine.js V3.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/upgrade-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- Before -->\n<div x-show.transition=\"open\"></div>\n<!-- After -->\n<div x-show=\"open\" x-transition></div>\n\n<!-- Before -->\n<div x-show.transition.duration.500ms=\"open\"></div>\n<!-- After -->\n<div x-show=\"open\" x-transition.duration.500ms></div>\n\n<!-- Before -->\n<div x-show.transition.in.duration.500ms.out.duration.750ms=\"open\"></div>\n<!-- After -->\n<div\n    x-show=\"open\"\n    x-transition:enter.duration.500ms\n    x-transition:leave.duration.750ms\n></div>\n```\n\n----------------------------------------\n\nTITLE: Using x-intersect:leave in Alpine.js\nDESCRIPTION: Shows how to use the :leave suffix to run an expression when an element leaves the viewport.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/intersect.md#2025-04-22_snippet_5\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-intersect:leave=\"shown = true\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Using Camel Case Event Names in Alpine.js\nDESCRIPTION: Shows how to listen for camelCased event names using the camel modifier in Alpine.js.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_17\n\nLANGUAGE: alpine\nCODE:\n```\n<div @custom-event.camel=\"handleCustomEvent\">\n    ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine.js Collapse Plugin via CDN\nDESCRIPTION: Demonstrates how to include the Alpine.js Collapse plugin using CDN script tags, which should be included before Alpine's core JS file.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/collapse.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<!-- Alpine Plugins -->\n<script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/collapse@3.x.x/dist/cdn.min.js\"></script>\n\n<!-- Alpine Core -->\n<script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine.js via NPM\nDESCRIPTION: Command to install Alpine.js through NPM for use in module-based projects. This approach is recommended for more complex applications using a build system.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install alpinejs\n```\n\n----------------------------------------\n\nTITLE: Registering an Alpine Store from a Bundle\nDESCRIPTION: This snippet shows how to register an Alpine.js store when importing Alpine into a build system. The store is created before manually calling Alpine.start().\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/globals/alpine-store.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport Alpine from 'alpinejs'\n\nAlpine.store('darkMode', {\n    on: false,\n\n    toggle() {\n        this.on = ! this.on\n    }\n})\n\nAlpine.start()\n```\n\n----------------------------------------\n\nTITLE: Using the .half Modifier with x-intersect in Alpine.js\nDESCRIPTION: Shows the .half modifier which evaluates the expression when 50% of the element is in the viewport.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/intersect.md#2025-04-22_snippet_7\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-intersect.half=\"shown = true\">...</div> // when `0.5` of the element is in the viewport\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine Morph Plugin via CDN\nDESCRIPTION: HTML script tags for including the Alpine Morph plugin and Alpine core via CDN. The plugin script must be included before Alpine's core script.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/morph.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<!-- Alpine Plugins -->\n<script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/morph@3.x.x/dist/cdn.min.js\"></script>\n\n<!-- Alpine Core -->\n<script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Infinite Loop Warning in Alpine.js $watch\nDESCRIPTION: Illustrates an incorrect usage of $watch that results in an infinite loop. Changing a property of a watched object within the $watch callback can cause recursive updates and eventually error.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/magics/watch.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- 🚫 Infinite loop -->\n<div x-data=\"{ foo: { bar: 'baz', bob: 'lob' }}\" x-init=\"$watch('foo', value => foo.bob = foo.bar)\">\n    <button @click=\"foo.bar = 'bob'\">Update</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Alpine Mask Plugin in JS Bundle\nDESCRIPTION: JavaScript code to import and initialize the Alpine Mask plugin in a bundled application.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/mask.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Alpine from 'alpinejs'\nimport mask from '@alpinejs/mask'\n\nAlpine.plugin(mask)\n\n...\n```\n\n----------------------------------------\n\nTITLE: Sort Handlers with Item Keys\nDESCRIPTION: Example of implementing sort handlers with item keys to track position changes.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/sort.md#2025-04-22_snippet_4\n\nLANGUAGE: alpine\nCODE:\n```\n<ul x-sort=\"alert($item + ' - ' + $position)\">\n    <li x-sort:item=\"1\">foo</li>\n    <li x-sort:item=\"2\">bar</li>\n    <li x-sort:item=\"3\">baz</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Updating $el Reference in Alpine.js V3\nDESCRIPTION: In Alpine.js V3, $el now always refers to the current element instead of the root component element. To access the root element, use $root instead.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/upgrade-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Before -->\n<div x-data>\n    <button @click=\"console.log($el)\"></button>\n    <!-- In V2, $el would have been the <div>, now it's the <button> -->\n</div>\n\n<!-- After -->\n<div x-data>\n    <button @click=\"console.log($root)\"></button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine Anchor Plugin via NPM\nDESCRIPTION: Commands for installing the Anchor plugin via NPM and initializing it in a JavaScript bundle.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/anchor.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @alpinejs/anchor\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Alpine from 'alpinejs'\nimport anchor from '@alpinejs/anchor'\n\nAlpine.plugin(anchor)\n\n...\n```\n\n----------------------------------------\n\nTITLE: Initializing Alpine Morph Plugin in JavaScript Bundle\nDESCRIPTION: JavaScript code to import and initialize the Alpine Morph plugin in a bundled application. The code imports Alpine and the Morph plugin, then registers the plugin with Alpine.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/morph.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport Alpine from 'alpinejs'\nimport morph from '@alpinejs/morph'\n\nwindow.Alpine = Alpine\nAlpine.plugin(morph)\n\n...\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Expressions with x-text in Alpine.js\nDESCRIPTION: Shows how to use JavaScript expressions within the x-text directive to compute text content dynamically.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/templating.md#2025-04-22_snippet_1\n\nLANGUAGE: alpine\nCODE:\n```\n<span x-text=\"1 + 2\"></span>\n```\n\n----------------------------------------\n\nTITLE: Custom Event Handling with dispatchEvent in Alpine.js\nDESCRIPTION: Example of dispatching and listening for a custom DOM event using the native dispatchEvent API.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/on.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div x-data @foo=\"alert('Button Was Clicked!')\">\n    <button @click=\"$event.target.dispatchEvent(new CustomEvent('foo', { bubbles: true }))\">...</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Alpine.js Resize Plugin in JavaScript Bundle\nDESCRIPTION: JavaScript code to import and initialize the Alpine.js Resize plugin in a bundled application.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/resize.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport Alpine from 'alpinejs'\nimport resize from '@alpinejs/resize'\n\nAlpine.plugin(resize)\n\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine Morph Plugin via NPM\nDESCRIPTION: Shell command to install the Alpine Morph plugin using NPM for use in a JavaScript bundle.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/morph.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @alpinejs/morph\n```\n\n----------------------------------------\n\nTITLE: Applying Transitions with x-transition in Alpine.js\nDESCRIPTION: Demonstrates using the x-transition directive to apply smooth transitions when toggling element visibility.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/templating.md#2025-04-22_snippet_4\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button @click=\"open = ! open\">Expands</button>\n\n    <div x-show=\"open\" x-transition>\n        Content...\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Global Lifecycle Events in Alpine.js V3\nDESCRIPTION: Alpine.js V3 replaces the deferLoadingAlpine() method with global lifecycle events for execution before and after Alpine initialization.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/upgrade-guide.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- Before -->\n<script>\n    window.deferLoadingAlpine = startAlpine => {\n        // Will be executed before initializing Alpine.\n\n        startAlpine()\n\n        // Will be executed after initializing Alpine.\n    }\n</script>\n\n<!-- After -->\n<script>\n    document.addEventListener('alpine:init', () => {\n        // Will be executed before initializing Alpine.\n    })\n\n    document.addEventListener('alpine:initialized', () => {\n        // Will be executed after initializing Alpine.\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine Mask Plugin via CDN\nDESCRIPTION: Adding the Alpine Mask plugin and Alpine core via CDN script tags. The mask plugin must be included before Alpine's core JS file.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/mask.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Alpine Plugins -->\n<script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/mask@3.x.x/dist/cdn.min.js\"></script>\n\n<!-- Alpine Core -->\n<script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Directive Cleanup Handler\nDESCRIPTION: Shows how to implement cleanup handling for custom directives to prevent memory leaks.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/extending.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nAlpine.directive('...', (el, {}, { cleanup }) => {\n    let handler = () => {}\n\n    window.addEventListener('click', handler)\n\n    cleanup(() => {\n        window.removeEventListener('click', handler)\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Including Focus Plugin via CDN in HTML\nDESCRIPTION: Shows how to include the Focus plugin and Alpine.js core via CDN script tags. The Focus plugin script must be included before Alpine's core script.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/focus.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Alpine Plugins -->\n<script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/focus@3.x.x/dist/cdn.min.js\"></script>\n\n<!-- Alpine Core -->\n<script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Transition Duration in Alpine.js\nDESCRIPTION: Shows how to customize the duration of transitions using the .duration modifier with x-transition.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials/templating.md#2025-04-22_snippet_5\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-show=\"open\" x-transition.duration.500ms>\n```\n\n----------------------------------------\n\nTITLE: Fill Modifier with x-model in Alpine.js\nDESCRIPTION: Using the .fill modifier to initialize a bound property with the input's value attribute when the property is empty. This allows setting default values via HTML rather than JavaScript.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/model.md#2025-04-22_snippet_18\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ message: null }\">\n  <input type=\"text\" x-model.fill=\"message\" value=\"This is the default message.\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Directive Method Signature\nDESCRIPTION: Shows the method signature for registering custom Alpine directives.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/extending.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nAlpine.directive('[name]', (el, { value, modifiers, expression }, { Alpine, effect, cleanup }) => {})\n```\n\n----------------------------------------\n\nTITLE: Including Alpine.js Resize Plugin via CDN\nDESCRIPTION: Shows how to include the Alpine.js Resize plugin via CDN using script tags, ensuring the plugin is loaded before Alpine's core JavaScript file.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/resize.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<!-- Alpine Plugins -->\n<script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/resize@3.x.x/dist/cdn.min.js\"></script>\n\n<!-- Alpine Core -->\n<script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using the Important Modifier with x-show in Alpine.js\nDESCRIPTION: This snippet demonstrates the use of the .important modifier with x-show. It's useful when you need to override CSS that uses !important, ensuring the element is hidden properly.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/show.md#2025-04-22_snippet_2\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button x-on:click=\"open = ! open\">Toggle Dropdown</button>\n\n    <div x-show.important=\"open\">\n        Dropdown Contents...\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Alpine.js Plugin as Bundle Module\nDESCRIPTION: Demonstrates how to create an Alpine.js plugin that can be installed via NPM and imported into a bundle. Uses Alpine.plugin() to register custom functionality.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/extending.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport Alpine from 'alpinejs'\n\nimport foo from 'foo'\nAlpine.plugin(foo)\n\nwindow.Alpine = Alpine\nwindow.Alpine.start()\n```\n\nLANGUAGE: js\nCODE:\n```\nexport default function (Alpine) {\n    Alpine.directive('foo', ...)\n    Alpine.magic('foo', ...)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine Mask Plugin via NPM\nDESCRIPTION: Command to install the Alpine Mask plugin using NPM package manager.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/mask.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @alpinejs/mask\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine.js Intersect Plugin via CDN\nDESCRIPTION: Includes the Intersect plugin via CDN script tags before Alpine's core JS file.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/intersect.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<!-- Alpine Plugins -->\n<script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/intersect@3.x.x/dist/cdn.min.js\"></script>\n\n<!-- Alpine Core -->\n<script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Classes for x-transition in Alpine.js\nDESCRIPTION: Demonstrates how to apply CSS classes at different stages of the transition for more direct control. This example uses TailwindCSS utility classes to create a custom fade and scale transition.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/directives/transition.md#2025-04-22_snippet_2\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-data=\"{ open: false }\">\n    <button @click=\"open = ! open\">Toggle</button>\n\n    <div\n        x-show=\"open\"\n        x-transition:enter=\"transition ease-out duration-300\"\n        x-transition:enter-start=\"opacity-0 scale-90\"\n        x-transition:enter-end=\"opacity-100 scale-100\"\n        x-transition:leave=\"transition ease-in duration-300\"\n        x-transition:leave-start=\"opacity-100 scale-100\"\n        x-transition:leave-end=\"opacity-0 scale-90\"\n    >Hello 👋</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Alpine Store Externally via Script\nDESCRIPTION: This snippet demonstrates how to access an Alpine.js store externally from a script by calling Alpine.store() with only the store name parameter.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/globals/alpine-store.md#2025-04-22_snippet_4\n\nLANGUAGE: alpine\nCODE:\n```\n<script>\n    Alpine.store('darkMode').toggle()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine.js Collapse Plugin via NPM\nDESCRIPTION: Shows how to install the Alpine.js Collapse plugin using NPM for use in a JavaScript bundle.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/collapse.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @alpinejs/collapse\n```\n\n----------------------------------------\n\nTITLE: Defining Alpine.js Documentation Page Frontmatter in Markdown\nDESCRIPTION: Frontmatter block for an Alpine.js documentation page that defines the order, title, and type of the content. This sets up the page as a sub-directory for essential concepts in Alpine.js documentation.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/essentials.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\norder: 3\ntitle: Essentials\ntype: sub-directory\n---\n```\n\n----------------------------------------\n\nTITLE: Magic Method Registration\nDESCRIPTION: Shows the method signature for registering custom magic properties in Alpine.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/extending.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nAlpine.magic('[name]', (el, { Alpine }) => {})\n```\n\n----------------------------------------\n\nTITLE: Component Registration with Alpine.data\nDESCRIPTION: Shows how to properly register a component using Alpine.data() for CSP compliance.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/csp.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nAlpine.data('counter', () => ({\n    count: 1,\n\n    increment() {\n        this.count++\n    },\n}))\n```\n\n----------------------------------------\n\nTITLE: Initializing Alpine.js Intersect Plugin in a Bundle\nDESCRIPTION: JavaScript code to import and initialize the Intersect plugin in a bundled environment.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/intersect.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport Alpine from 'alpinejs'\nimport intersect from '@alpinejs/intersect'\n\nAlpine.plugin(intersect)\n\n...\n```\n\n----------------------------------------\n\nTITLE: Cascading x-data Scope in Alpine.js V3\nDESCRIPTION: In Alpine.js V3, x-data scope now cascades to child elements unless overwritten by a nested x-data expression.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/upgrade-guide.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- Before -->\n<div x-data=\"{ foo: 'bar' }\">\n    <div x-data=\"{}\">\n        <!-- foo is undefined -->\n    </div>\n</div>\n\n<!-- After -->\n<div x-data=\"{ foo: 'bar' }\">\n    <div x-data=\"{}\">\n        <!-- foo is 'bar' -->\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine.js CSP Build via CDN\nDESCRIPTION: Shows how to include the CSP-friendly build of Alpine.js using a CDN script tag.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/csp.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<!-- Alpine's CSP-friendly Core -->\n<script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/csp@3.x.x/dist/cdn.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using the .threshold Modifier with x-intersect in Alpine.js\nDESCRIPTION: Shows how to use the .threshold modifier to control the threshold property of the IntersectionObserver, specifying what percentage of the element must be visible.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/intersect.md#2025-04-22_snippet_9\n\nLANGUAGE: alpine\nCODE:\n```\n<div x-intersect.threshold.50=\"shown = true\">...</div> // when 50% of the element is in the viewport\n```\n\n----------------------------------------\n\nTITLE: Using $nextTick for Deferred Execution in x-init\nDESCRIPTION: Alpine.js V3 requires manual use of $nextTick() for deferred execution in x-init, as it no longer accepts a callback return.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/upgrade-guide.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- Before -->\n<div x-data x-init=\"() => { ... }\">...</div>\n\n<!-- After -->\n<div x-data x-init=\"$nextTick(() => { ... })\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Valid Component Structure with External API\nDESCRIPTION: Demonstrates the correct way to structure components using external APIs with the CSP build.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/csp.md#2025-04-22_snippet_5\n\nLANGUAGE: alpine\nCODE:\n```\n<!-- Good -->\n<div x-data=\"counter\">\n    <button @click=\"increment\">Increment</button>\n\n    <span x-text=\"count\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Alpine.js V3 as a Module\nDESCRIPTION: When importing Alpine.js V3 as a module, you now need to manually call Alpine.start() to initialize the framework.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/upgrade-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nimport 'alpinejs'\n\n// After\nimport Alpine from 'alpinejs'\n\nwindow.Alpine = Alpine\n\nAlpine.start()\n```\n\n----------------------------------------\n\nTITLE: Installing Focus Plugin via NPM\nDESCRIPTION: Demonstrates how to install the Focus plugin using NPM and initialize it in a JavaScript bundle.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/focus.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @alpinejs/focus\n```\n\nLANGUAGE: js\nCODE:\n```\nimport Alpine from 'alpinejs'\nimport focus from '@alpinejs/focus'\n\nAlpine.plugin(focus)\n\n...\n```\n\n----------------------------------------\n\nTITLE: Explicit Event Prevention in Alpine.js V3\nDESCRIPTION: Returning false from event handlers no longer implicitly prevents the default action. Use e.preventDefault() explicitly in Alpine.js V3.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/upgrade-guide.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- Before -->\n<div x-data=\"{ blockInput() { return false } }\">\n    <input type=\"text\" @input=\"blockInput()\">\n</div>\n\n<!-- After -->\n<div x-data=\"{ blockInput(e) { e.preventDefault() }\">\n    <input type=\"text\" @input=\"blockInput($event)\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Nested Properties Access Example\nDESCRIPTION: Demonstrates how to access nested properties using dot notation in the CSP build.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/csp.md#2025-04-22_snippet_7\n\nLANGUAGE: alpine\nCODE:\n```\n<!-- This works too -->\n<div x-data=\"counter\">\n    <button @click=\"foo.increment\">Increment</button>\n\n    <span x-text=\"foo.count\"></span>\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nAlpine.data('counter', () => ({\n    foo: {\n        count: 1,\n\n        increment() {\n            this.count++\n        },\n    },\n}))\n```\n\n----------------------------------------\n\nTITLE: Defining a Synchronous Function in JavaScript\nDESCRIPTION: A simple synchronous JavaScript function that returns a string value. This function can be used directly in Alpine.js directives without special handling.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/async.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nfunction getLabel() {\n    return 'Hello World!'\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing x-spread with x-bind in Alpine.js V3\nDESCRIPTION: The x-spread directive for applying multiple bindings has been replaced with x-bind in Alpine.js V3.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/upgrade-guide.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- Before -->\n<div x-data=\"dropdown()\">\n    <button x-spread=\"trigger\">Toggle</button>\n\n    <div x-spread=\"dialogue\">...</div>\n</div>\n\n<!-- After -->\n<div x-data=\"dropdown()\">\n    <button x-bind=\"trigger\">Toggle</button>\n\n    <div x-bind=\"dialogue\">...</div>\n</div>\n\n\n<script>\n    function dropdown() {\n        return {\n            open: false,\n\n            trigger: {\n                'x-on:click'() { this.open = ! this.open },\n            },\n\n            dialogue: {\n                'x-show'() { return this.open },\n                'x-bind:class'() { return 'foo bar' },\n            },\n        }\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Alpine.js Version in JavaScript\nDESCRIPTION: This snippet demonstrates how to access the version of Alpine.js being used in your project. The version is stored as a string in the Alpine.version property.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/globals.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nAlpine.version // => '3.x.x'\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine.js Persist Plugin via NPM\nDESCRIPTION: Demonstrates how to install the Persist plugin using NPM and initialize it in a JavaScript bundle.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/persist.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @alpinejs/persist\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Alpine from 'alpinejs'\nimport persist from '@alpinejs/persist'\n\nAlpine.plugin(persist)\n\n...\n```\n\n----------------------------------------\n\nTITLE: Removing x-transition Support for x-if in Alpine.js V3\nDESCRIPTION: Alpine.js V3 no longer supports transitions with x-if. Use x-show with x-transition instead for element transitions.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/upgrade-guide.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Before -->\n<template x-if.transition=\"open\">\n    <div>...</div>\n</template>\n\n<!-- After -->\n<div x-show=\"open\" x-transition>...</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine.js Persist Plugin via CDN\nDESCRIPTION: Shows how to include the Persist plugin and Alpine.js core via CDN script tags. The plugin script must be included before the core Alpine.js script.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/persist.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Alpine Plugins -->\n<script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/persist@3.x.x/dist/cdn.min.js\"></script>\n\n<!-- Alpine Core -->\n<script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine Anchor Plugin via CDN\nDESCRIPTION: Shows how to include the Alpine Anchor plugin and Alpine core via CDN script tags.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/anchor.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<!-- Alpine Plugins -->\n<script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/anchor@3.x.x/dist/cdn.min.js\"></script>\n\n<!-- Alpine Core -->\n<script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Alpine.js CSP Build\nDESCRIPTION: Shows how to initialize the CSP build of Alpine.js in a JavaScript bundle.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/csp.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Alpine from '@alpinejs/csp'\n\nwindow.Alpine = Alpine\n\nAlpine.start()\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine.js Intersect Plugin via NPM\nDESCRIPTION: Commands to install the Intersect plugin using NPM for use in a JavaScript bundle.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/intersect.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @alpinejs/intersect\n```\n\n----------------------------------------\n\nTITLE: Initializing Alpine Sort Plugin in JS Bundle\nDESCRIPTION: JavaScript code to initialize the Sort plugin in a bundle environment.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/sort.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport Alpine from 'alpinejs'\nimport sort from '@alpinejs/sort'\n\nAlpine.plugin(sort)\n\n...\n```\n\n----------------------------------------\n\nTITLE: Initializing Alpine.js Collapse Plugin in JavaScript Bundle\nDESCRIPTION: Demonstrates how to import and initialize the Alpine.js Collapse plugin in a JavaScript bundle after NPM installation.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/collapse.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport Alpine from 'alpinejs'\nimport collapse from '@alpinejs/collapse'\n\nAlpine.plugin(collapse)\n\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine Sort Plugin via NPM\nDESCRIPTION: Command to install the Alpine Sort plugin using NPM package manager.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/sort.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @alpinejs/sort\n```\n\n----------------------------------------\n\nTITLE: Package Overview Table in Markdown\nDESCRIPTION: A markdown table listing all packages in the Alpine.js monorepo with their descriptions, including core functionality and plugins.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nPackage | Description\n--- | ---\n[alpinejs](packages/alpinejs) | The main Alpine repo with all of Alpine's core\n[collapse](packages/collapse) | A plugin for expanding and collapsing elements using smooth animations\n[csp](packages/csp) | A repo to provide a \"CSP safe\" build of Alpine\n[docs](packages/docs) | The Alpine documentation\n[focus](packages/focus) | A plugin that allows you to manage focus inside an element\n[history](packages/history) | A plugin for binding data to query string parameters using the history API (name is likely to change)\n[intersect](packages/intersect) | A plugin for triggering JS expressions based on elements intersecting with the viewport\n[mask](packages/mask) | A plugin for automatically formatting a text input field as a user types\n[morph](packages/morph) | A plugin for morphing HTML (like morphdom) inside the page intelligently\n[persist](packages/persist) | A plugin for persisting Alpine state across page loads\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine.js Resize Plugin via NPM\nDESCRIPTION: Command to install the Alpine.js Resize plugin through NPM for use in bundled applications.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/resize.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @alpinejs/resize\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine Sort Plugin via CDN\nDESCRIPTION: How to include the Alpine Sort plugin using CDN script tags before the Alpine core file.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/plugins/sort.md#2025-04-22_snippet_0\n\nLANGUAGE: alpine\nCODE:\n```\n<!-- Alpine Plugins -->\n<script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/sort@3.x.x/dist/cdn.min.js\"></script>\n\n<!-- Alpine Core -->\n<script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine.js CSP Build via NPM\nDESCRIPTION: Demonstrates NPM installation command for the CSP build of Alpine.js.\nSOURCE: https://github.com/alpinejs/alpine/blob/main/packages/docs/src/en/advanced/csp.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @alpinejs/csp\n```"
  }
]