[
  {
    "owner": "niceberginc",
    "repo": "agentipy",
    "content": "TITLE: Integrating AgentiPy with Langchain for Natural Language Trading\nDESCRIPTION: Shows how to integrate AgentiPy with Langchain to process natural language trading commands. Uses OpenAI's language model to interpret trading instructions and execute them via AgentiPy's trading tools.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/README.md#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain.llms import OpenAI\nfrom agentipy.agent import SolanaAgentKit\nfrom agentipy.tools.trade import TradeManager\n\nllm = OpenAI(openai_api_key=\"YOUR_OPENAI_API_KEY\")\nagent = SolanaAgentKit(\n    private_key=\"YOUR_PRIVATE_KEY\",\n    rpc_url=\"https://api.mainnet-beta.solana.com\"\n)\n\nprompt = \"Buy 1 SOL of USDC\"\n\naction = llm(prompt)\n\ntry:\n    TradeManager.trade(\n        agent=agent,\n        output_mint=\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n        input_amount=0.1\n    )\n    print(f\"Performed action: {action}\")\nexcept Exception as e:\n    print(f\"Error processing trade: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Executing Solana Token Swaps with AgentiPy\nDESCRIPTION: Demonstrates how to swap a user-specified amount of SOL for another token using Jupiter DEX. Includes token data fetching from CoinGecko and user confirmation flow. Requires AgentiPy, Solders, and asyncio dependencies.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/README.md#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom agentipy.agent import SolanaAgentKit\nfrom agentipy.tools.trade import TradeManager\nfrom agentipy.tools.use_coingecko import CoingeckoManager\nfrom agentipy.tools.get_token_data import TokenDataManager\nfrom solders.pubkey import Pubkey\nimport asyncio\n\nasync def main():\n    PRIVATE_KEY = \"YOUR_PRIVATE_KEY_HERE\"\n\n    agent = SolanaAgentKit(\n        private_key=PRIVATE_KEY,\n        rpc_url=\"https://api.mainnet-beta.solana.com\"\n    )\n\n    USDC_MINT = Pubkey.from_string(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\")\n    SOL_MINT = Pubkey.from_string(\"So11111111111111111111111111111111111111112\")\n\n    target_token_input = input(\"Enter Target Token Ticker (e.g., USDC, BONK) or Contract Address: \").strip()\n    swap_amount_sol_input = input(\"Enter Amount of SOL to Swap: \").strip()\n\n    # [Rest of implementation omitted for brevity]\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Jupiter Exchange USDC-SOL Swap Implementation\nDESCRIPTION: Example of performing a USDC to SOL swap on Jupiter Exchange using AgentiPy. Features detailed security warnings and demonstrates proper token swap configuration.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/README.md#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom agentipy.agent import SolanaAgentKit\nfrom agentipy.tools.trade import TradeManager\nfrom solders.pubkey import Pubkey\nimport asyncio\n\nasync def main():\n    \"\"\"\n    Quick Start Example: Swap SOL for USDC on Jupiter Exchange using AgentiPy.\n    \"\"\"\n    # **!!! IMPORTANT SECURITY WARNING !!!**\n    # NEVER hardcode your private key directly into your code, ESPECIALLY for Mainnet.\n    # This is for demonstration purposes ONLY.\n    # In a real application, use environment variables, secure key vaults, or other\n    # secure key management practices.  Compromising your private key can lead to\n    # loss of funds.\n\n    PRIVATE_KEY = \"YOUR_PRIVATE_KEY_HERE\"  # ⚠️ REPLACE THIS SECURELY! ⚠️\n\n    agent = SolanaAgentKit(\n        private_key=PRIVATE_KEY,\n        rpc_url=\"https://api.mainnet-beta.solana.com\"  # Mainnet RPC endpoint\n    )\n\n    USDC_MINT = Pubkey.from_string(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\")  # Mainnet USDC\n    SOL_MINT = Pubkey.from_string(\"So11111111111111111111111111111111111111112\")   # Mainnet SOL\n\n    SWAP_AMOUNT_SOL = 0.0001  # A tiny amount of SOL to swap for USDC (adjust as needed)\n\n    try:\n        print(f\"Attempting to swap {SWAP_AMOUNT_SOL} SOL for USDC on Jupiter...\")\n        transaction_signature = await TradeManager.trade(\n            agent=agent,\n            output_mint=USDC_MINT,  # output token is USDC (what you receive)\n            input_amount=SWAP_AMOUNT_SOL, # Amount of input token (SOL)\n            input_mint=SOL_MINT      # input token is SOL (what you send/give)\n        )\n\n        print(f\"Swap successful!\")\n        print(f\"Transaction Signature: https://explorer.solana.com/tx/{transaction_signature}\")\n\n    except Exception as e:\n        print(f\"Error: Swap failed: {e}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Jupiter Exchange SOL-USDC Swap Implementation\nDESCRIPTION: Example of performing a SOL to USDC swap on Jupiter Exchange using AgentiPy. Demonstrates token swap functionality with proper mint address setup and error handling.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/README.md#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom agentipy.agent import SolanaAgentKit\nfrom agentipy.tools.trade import TradeManager\nfrom solders.pubkey import Pubkey\nimport asyncio\n\nasync def main():\n    \"\"\"\n    Quick Start Example: Swap SOL for USDC on Jupiter Exchange .\n    \"\"\"\n    # **!!! IMPORTANT SECURITY WARNING !!!**\n    # NEVER hardcode your private key directly into your code, ESPECIALLY for Mainnet.\n    # This is for demonstration purposes ONLY.\n    # In a real application, use environment variables, secure key vaults, or other\n    # secure key management practices.\n\n    PRIVATE_KEY = \"YOUR_PRIVATE_KEY_HERE\"  # ⚠️ REPLACE THIS SECURELY! ⚠️\n\n    agent = SolanaAgentKit(\n        private_key=PRIVATE_KEY,\n        rpc_url=\"https://api.mainnet-beta.solana.com\"  # Mainnet RPC endpoint\n    )\n\n    # Mainnet Token Mint Addresses:\n    USDC_MINT = Pubkey.from_string(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\")\n    SOL_MINT = Pubkey.from_string(\"So11111111111111111111111111111111111111112\")\n\n    SWAP_AMOUNT_SOL = 0.0001\n\n    try:\n        print(f\"Attempting to swap {SWAP_AMOUNT_SOL} SOL for USDC on Jupiter...\")\n        transaction_signature = await TradeManager.trade(\n            agent=agent,\n            output_mint=USDC_MINT,\n            input_amount=SWAP_AMOUNT_SOL,\n            input_mint=SOL_MINT\n        )\n\n        print(f\"Swap successful!\")\n        print(f\"Transaction Signature: https://explorer.solana.com/tx/{transaction_signature}\")\n\n        await asyncio.sleep(1)  # 1-second delay to help with rate limits due to RPC Delay\n\n    except Exception as e:\n        print(f\"Error: Swap failed: {e}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Fetching CoinGecko Market Data and Trending Tokens with AgentiPy\nDESCRIPTION: Script to retrieve trending tokens and detailed market metrics from CoinGecko using AgentiPy. Demonstrates fetching token prices, market cap, volume, and 24h changes for user-specified tokens.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/README.md#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom agentipy.agent import SolanaAgentKit\nfrom agentipy.tools.use_coingecko import CoingeckoManager\nfrom agentipy.tools.get_token_data import TokenDataManager\nfrom solders.pubkey import Pubkey\nimport asyncio\n\nasync def main():\n    \"\"\"\n    Quick Start Example:\n    1. Fetch Trending Tokens from CoinGecko.\n    2. Fetch and display data metrics for a user-specified token ticker.\n    \"\"\"\n\n    agent = SolanaAgentKit(\n        private_key=\"\",  # Private key not needed for this example\n        rpc_url=\"https://api.mainnet-beta.solana.com\"\n    )\n\n    # -------------------------------------------------------------\n    # Section 1: Fetch and Display Trending Tokens (No API key needed)\n    # -------------------------------------------------------------\n    try:\n        trending_tokens_data = await CoingeckoManager.get_trending_tokens(agent)\n\n        if trending_tokens_data and 'coins' in trending_tokens_data:\n            print(\"Trending Tokens on CoinGecko:\")\n            for token in trending_tokens_data['coins']:\n                print(f\"- {token['item']['symbol']} ({token['item']['name']})\")\n            print(\"\\nSuccessfully fetched trending tokens!\\n\" + \"-\" * 40)\n        else:\n            print(\"No trending tokens data received.\\n\" + \"-\" * 40)\n\n    except Exception as e:\n        print(f\"Error fetching trending tokens: {e}\\n\" + \"-\" * 40)\n\n    # -------------------------------------------------------------\n    # Section 2: Fetch and Display Data Metrics for User-Specified Ticker\n    # -------------------------------------------------------------\n    token_ticker = input(\"Enter a Token Ticker (e.g., SOL, USDC) to get its metrics: \").strip()\n\n    if token_ticker:\n        token_address = None\n        try:\n            resolved_address = TokenDataManager.get_token_address_from_ticker(token_ticker)\n            if resolved_address:\n                token_address = resolved_address\n                print(f\"Resolved ticker '{token_ticker}' to Contract Address: {token_address}\")\n            else:\n                raise ValueError(f\"Could not resolve ticker '{token_ticker}' to a Contract Address.\")\n\n            if token_address:\n                price_data = await CoingeckoManager.get_token_price_data(agent, [token_address])\n\n                if token_address in price_data and price_data[token_address]:\n                    token_info = price_data[token_address]\n\n                    print(f\"\\nData Metrics for {token_ticker.upper()} from CoinGecko:\")\n                    print(f\"- Current Price (USD): ${token_info['usd']:.4f}\")\n                    print(f\"- Market Cap (USD): ${token_info['usd_market_cap']:.2f}\")\n                    print(f\"- 24h Volume (USD): ${token_info['usd_24h_vol']:.2f}\")\n                    print(f\"- 24h Change (%): {token_info['usd_24h_change']:.2f}%\")\n                    print(f\"- Last Updated: {token_info['last_updated_at']}\")\n                    print(\"\\nSuccessfully fetched token data metrics!\\n\" + \"-\" * 40)\n\n                else:\n                    print(f\"Could not retrieve price data for ticker: {token_ticker}.\\n\" + \"-\" * 40)\n\n            else:\n                print(f\"Could not get token address for ticker: {token_ticker}.\\n\" + \"-\" * 40)\n\n\n        except Exception as e:\n            print(f\"Error fetching data metrics for ticker '{token_ticker}': {e}\\n\" + \"-\" * 40)\n    else:\n        print(\"No token ticker entered.\\n\" + \"-\" * 40)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Using PythManager in Trading Workflows\nDESCRIPTION: An example of integrating price data into a trading strategy workflow, showing how to check price status before executing strategy logic.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/pyth_tool/readme.md#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def trading_strategy():\n    sol_price = await PythManager.get_price(SOL_ADDRESS)\n    if sol_price[\"status\"] == \"TRADING\":\n        # Execute strategy logic\n```\n\n----------------------------------------\n\nTITLE: Integrating PythManager with an Agentipy Agent\nDESCRIPTION: Example showing how to integrate the PythManager within an Agentipy Agent class, allowing price feeds to be accessed as part of the agent's capabilities.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/pyth_tool/readme.md#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom agentipy import Agent\nfrom agentipy.tools.use_pyth import PythManager\n\nclass MyAgent(Agent):\n    async def get_prices(self):\n        return await PythManager.get_price(...)\n```\n\n----------------------------------------\n\nTITLE: Concurrent Price Fetching with asyncio\nDESCRIPTION: An asynchronous function that demonstrates how to fetch multiple price feeds concurrently using asyncio.gather, improving performance when multiple prices are needed simultaneously.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/pyth_tool/readme.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def fetch_multiple_prices():\n    addresses = [\n        \"H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG\",  # SOL\n        \"GVXRSBjFk6e6J3NbVPXohDJetcTjaeeuykUpbQF8UoMU\"   # BTC\n    ]\n    tasks = [PythManager.get_price(addr) for addr in addresses]\n    return await asyncio.gather(*tasks)\n```\n\n----------------------------------------\n\nTITLE: Checking SOL Balance on Solana Mainnet using AgentiPy\nDESCRIPTION: This code snippet illustrates how to use AgentiPy to check the SOL balance of a wallet on the Solana mainnet. It initializes a SolanaAgentKit with a private key and RPC URL, then uses BalanceFetcher to retrieve and display the wallet balance.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/README.md#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom agentipy.agent import SolanaAgentKit\nfrom agentipy.tools.get_balance import BalanceFetcher\nimport asyncio\n\nasync def main():\n    \"\"\"\n    Quick Start Example: Get SOL Balance on Mainnet.\n    \"\"\"\n    # **Important Security Note:**\n    # NEVER hardcode your private key directly into your code.\n    # Use environment variables or secure key management systems in production.\n    PRIVATE_KEY = \"YOUR_PRIVATE_KEY_HERE\"  # Replace with your actual private key (securely!)\n    WALLET_ADDRESS = \"YOUR_WALLET_ADDRESS_HERE\" # Replace with your actual wallet address\n\n    agent = SolanaAgentKit(\n        private_key=PRIVATE_KEY,\n        rpc_url=\"https://api.mainnet-beta.solana.com\"  # Mainnet RPC endpoint\n    )\n\n    try:\n        balance_sol = await BalanceFetcher.get_balance(agent)\n        print(f\"Wallet Balance for {WALLET_ADDRESS}: {balance_sol:.4f} SOL\")\n        print(\"Successfully retrieved SOL balance!\")\n\n    except Exception as e:\n        print(f\"Error: Could not retrieve SOL balance: {e}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Transferring SOL Tokens on Solana Mainnet using AgentiPy\nDESCRIPTION: This snippet demonstrates how to use AgentiPy to transfer a small amount of SOL on the Solana mainnet. It initializes a SolanaAgentKit, sets up transfer parameters, and executes the transfer using TokenTransferManager. The code includes important security warnings about private key handling.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/README.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom agentipy.agent import SolanaAgentKit\nfrom agentipy.tools.transfer import TokenTransferManager\nimport asyncio\n\nasync def main():\n    \"\"\"\n    Quick Start Example: Transfer SOL on Mainnet.\n    \"\"\"\n    # **!!! IMPORTANT SECURITY WARNING !!!**\n    # NEVER hardcode your private key directly into your code, ESPECIALLY for Mainnet.\n    # This is for demonstration purposes ONLY.\n    # In a real application, use environment variables, secure key vaults, or other\n    # secure key management practices.  Compromising your private key can lead to\n    # loss of funds.\n\n    PRIVATE_KEY = \"\"  # ⚠️ REPLACE THIS SECURELY! ⚠️\n    RECIPIENT_WALLET_ADDRESS = \"\" # 👤 REPLACE THIS WITH RECIPIENT ADDRESS 👤\n\n    agent = SolanaAgentKit(\n        private_key=PRIVATE_KEY,\n        rpc_url=\"https://api.mainnet-beta.solana.com\"  # Mainnet RPC endpoint\n    )\n\n    TRANSFER_AMOUNT_SOL = 0.0001 # A very small amount of SOL for testing.  Adjust as needed.\n\n    try:\n        transfer_signature = await TokenTransferManager.transfer(\n            agent=agent,\n            to=RECIPIENT_WALLET_ADDRESS,\n            amount=TRANSFER_AMOUNT_SOL\n        )\n        print(f\"Transfer successful!\")\n        print(f\"Transaction Signature: https://explorer.solana.com/tx/{transfer_signature}\")\n\n    except RuntimeError as e:\n        print(f\"Error: Transfer failed: {e}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Handling Prediction API Requests\nDESCRIPTION: Flask route that processes prediction requests for different assets and timeframes. It converts user inputs to Allora enums and calls the SDK to fetch price predictions.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/Allora/allora-dashboard/readme.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/predict/<asset>/<timeframe>')\nasync def get_prediction(asset, timeframe):\n    # Converts user input to Allora enums\n    token = PriceInferenceToken[asset.upper()]\n    timeframe_enum = PriceInferenceTimeframe[timeframe.upper()]\n    return await allora.get_price_prediction(token, timeframe_enum)\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Operations\nDESCRIPTION: Python code that sets up an asynchronous event loop for handling Allora API requests in a separate thread, preventing the main Flask thread from blocking.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/Allora/allora-dashboard/readme.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nloop = asyncio.new_event_loop()\nThread(target=run_async_loop, daemon=True).start()\n```\n\n----------------------------------------\n\nTITLE: Basic Asynchronous Price Fetching Example\nDESCRIPTION: An asynchronous function that demonstrates how to fetch the price of Solana (SOL) using its Pyth feed address, and then prints the price and confidence interval if the feed status is active.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/pyth_tool/readme.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def get_sol_price():\n    result = await PythManager.get_price(\"H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG\")\n    if result[\"status\"] == \"TRADING\":\n        print(f\"SOL Price: ${result['price']:.4f} ± {result['confidence_interval']:.4f}\")\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Pyth Price Feeds\nDESCRIPTION: Example showing proper error handling when fetching price data, distinguishing between invalid address errors and network-related exceptions.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/pyth_tool/readme.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    price_data = await PythManager.get_price(mint_address)\nexcept ValueError as e:\n    print(f\"Invalid mint address: {e}\")\nexcept Exception as e:\n    print(f\"Network error: {e}\")\n```\n\n----------------------------------------\n\nTITLE: API Response Model for Predictions\nDESCRIPTION: JSON structure showing the format of prediction responses including cryptocurrency prices and timestamp.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/Allora/readme.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"btc_5min\": 85309.35,\n  \"eth_5min\": 1919.23,\n  \"btc_8hour\": 85522.42,\n  \"eth_8hour\": 1914.92,\n  \"last_updated\": \"2025-04-01T17:01:44.750Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Structure\nDESCRIPTION: JSON format for error responses including status and detailed message.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/Allora/readme.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"ERROR\",\n  \"message\": \"Detailed error description\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Discord Output Format\nDESCRIPTION: Example of the formatted output message that appears in Discord\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/CryptoMarketDashboard/readme.md#2025-04-11_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n🌐 Crypto Market Dashboard\n🔸 SOL/USD\n+ Price: $114.3103\n± Confidence: $0.0668\n🕒 Updated: 16:32:37 UTC\n🔸 BTC/USD\n+ Price: $82102.5530\n± Confidence: $33.9927\n🕒 Updated: 16:32:38 UTC\n​\n​\n🔸 ETH/USD\n+ Price: $1784.4891\n± Confidence: $0.8132\n🕒 Updated: 16:32:39 UTC\n🔸 TRUMP/USD\n+ Price: $9.0251\n± Confidence: $0.0144\n🕒 Updated: 16:32:40 UTC\n🔮 AI Forecast\nBTC Predictions\n▫️ 5min: $82047.61 (±$82047.61)\n▫️ 8hr: $82747.61 (±$82747.61)\n🔮 AI Forecast\nETH Predictions\n▫️ 5min: $1784.39 (±$1784.39)\n▫️ 8hr: $1816.56 (±$1816.56)\nMarket Intelligence v2.4•Today at 5:32 PM\n```\n\n----------------------------------------\n\nTITLE: Example Output from Pyth Oracle Tool\nDESCRIPTION: Sample output from running a Python script that fetches SOL/USD and BTC/USD prices, showing the formatted price and confidence interval values.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/pyth_tool/readme.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ python pyth_example.py\n\nFetching SOL/USD price...\nSOL/USD:\n  Price: $126.4243\n  Confidence: ±$0.0646\n\nFetching BTC/USD price...\nBTC/USD:\n  Price: $85257.2530\n  Confidence: ±$32.6970\n```\n\n----------------------------------------\n\nTITLE: Example Input for RugCheck CLI Tool\nDESCRIPTION: Sample contract addresses for different tokens (Wrapped SOL, USDC, and Raydium) to be used as input for the RugCheck CLI Tool.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/rugCheck/readme.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSo11111111111111111111111111111111111111112\n```\n\nLANGUAGE: bash\nCODE:\n```\nEPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\n```\n\nLANGUAGE: bash\nCODE:\n```\n4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration\nDESCRIPTION: Sample environment configuration (.env file) containing API key setup for Allora Network. Includes an optional configuration for testnet access.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/Allora/allora-dashboard/readme.md#2025-04-11_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nALLORA_API_KEY=UP-your-key-here\n# ALLORA_ENV=TESTNET  # Uncomment for testnet\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for AgentiPY\nDESCRIPTION: Environment configuration settings including the required Allora API key and optional parameters for update frequency and network selection.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/Allora/readme.md#2025-04-11_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# Required\nALLORA_API_KEY=\"your_api_key_here\"\n\n# Optional\nSLEEP_INTERVAL=300  # Update frequency in seconds (default: 300)\nALLORA_ENV=\"MAINNET\"  # MAINNET or TESTNET\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Example of setting required environment variables for Elfa AI API key and Solana private key\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/Elfaai/readme.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport ELFA_AI_API_KEY=\"YOUR_ELFA_AI_API_KEY\"\nexport SOLANA_PRIVATE_KEY=\"YOUR_SOLANA_PRIVATE_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Verifying AgentiPy Installation in Python\nDESCRIPTION: Python code to import the AgentiPy library and verify the installed version to ensure proper installation.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/README.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport agentipy\nprint(agentipy.__version__)  # Example output: 2.0.2\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies\nDESCRIPTION: Lists the required Python package dependencies for the AgentIPY project, including aiohttp for async HTTP requests and python-dotenv for environment variable management.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/CryptoMarketDashboard/requirements.txt#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naiohttp\npython-dotenv\nagentipy\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: A list of required Python packages for a project, including the core library agentipy, allora-sdk for SDK functionality, flask for web framework, and python-dotenv for environment variable management.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/Allora/allora-dashboard/requirements.txt#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nagentipy\nallora-sdk\nflask\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Importing the PythManager Tool\nDESCRIPTION: Python import statement to include the PythManager from Agentipy's tools, which is the main interface for interacting with Pyth Network price feeds.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/pyth_tool/readme.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom agentipy.tools.use_pyth import PythManager\n```\n\n----------------------------------------\n\nTITLE: Running the Monitor Script\nDESCRIPTION: Command to execute the main monitoring script\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/CryptoMarketDashboard/readme.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Running the Flask Application\nDESCRIPTION: Command to start the Flask web application that serves the Allora Prediction Web Interface, making it accessible at http://localhost:5000.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/Allora/allora-dashboard/readme.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Starting the FastAPI Service\nDESCRIPTION: Command to start the FastAPI service using Uvicorn with hot reload enabled.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/Allora/readme.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn main:app --reload\n```\n\n----------------------------------------\n\nTITLE: Running Interactive Elfa AI Script\nDESCRIPTION: Command to execute the interactive Elfa AI analysis script (elfaai2.py)\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/Elfaai/readme.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython elfaai2.py\n```\n\n----------------------------------------\n\nTITLE: Running Basic Elfa AI Script\nDESCRIPTION: Command to execute the basic Elfa AI integration script (elfaai1.py)\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/Elfaai/readme.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython elfaai1.py\n```\n\n----------------------------------------\n\nTITLE: Running the CoinGecko Chatbot\nDESCRIPTION: Command to execute the Python script that starts the CoinGecko chatbot.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/langChain/CoinGecko/readme.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython coingecko_chatbot.py\n```\n\n----------------------------------------\n\nTITLE: Running RugCheck CLI Tool\nDESCRIPTION: Command to execute the RugCheck CLI Tool Python script.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/rugCheck/readme.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython rugcheck_cli.py\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Command to install all required Python packages specified in the requirements.txt file for the Allora Prediction Web Interface.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/Allora/allora-dashboard/readme.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Command to install required Python packages using pip package manager\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/CryptoMarketDashboard/readme.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Agentipy Dependencies\nDESCRIPTION: Command to install the Agentipy library and its dependencies including elfaai integration and langchain\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/Elfaai/readme.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentipy\n```\n\n----------------------------------------\n\nTITLE: Installing Agentipy via pip\nDESCRIPTION: Command to install the Agentipy package via pip, which is a prerequisite for using the Pyth Oracle Tool.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/pyth_tool/readme.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentipy\n```\n\n----------------------------------------\n\nTITLE: Installing AgentiPy via pip\nDESCRIPTION: Command to install the AgentiPy package using pip package manager.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install agentipy\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries with pip\nDESCRIPTION: Command to install the agentipy library which is required for running the CoinGecko chatbot.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/langChain/CoinGecko/readme.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentipy\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Up the AgentiPY Project Environment\nDESCRIPTION: Commands for cloning the repository, creating and activating a virtual environment, and installing dependencies.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/Allora/readme.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/niceberginc/agentipy.git\ncd agentipy/examples\npython -m venv venv\nsource venv/bin/activate  # Linux/MacOS\nvenv\\Scripts\\activate  # Windows\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Cloning and Navigating to the Project Repository\nDESCRIPTION: Commands to clone the agentipy repository and navigate to the examples directory where the Allora Prediction Web Interface is located.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/Allora/allora-dashboard/readme.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/niceberginc/agentipy.git\ncd agentipy/examples\n```\n\n----------------------------------------\n\nTITLE: Installing Repository and Navigation\nDESCRIPTION: Commands to clone the repository and navigate to the project directory\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/CryptoMarketDashboard/readme.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/niceberginc/agentipy.git\ncd agentipy/examples/CryptoMarketDashboard\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up RugCheck CLI Tool Repository\nDESCRIPTION: Commands to clone the RugCheck CLI Tool repository and install the required dependency (aiohttp).\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/rugCheck/readme.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/yourusername/rugcheck-cli.git\ncd rugcheck-cli\npip install aiohttp\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment for AgentiPy Installation\nDESCRIPTION: Command to create a Python virtual environment to isolate project dependencies for AgentiPy.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Linux/macOS for AgentiPy\nDESCRIPTION: Command to activate the Python virtual environment on Linux or macOS systems before installing AgentiPy.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Windows for AgentiPy\nDESCRIPTION: Command to activate the Python virtual environment on Windows systems before installing AgentiPy.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvenv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Cloning and Navigating to the Repository\nDESCRIPTION: Commands to clone the CoinGecko chatbot repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/langChain/CoinGecko/readme.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username/coingecko-chatbot.git\ncd coingecko-chatbot\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Linting\nDESCRIPTION: Commands for running tests and code quality checks using pytest, flake8, and black\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/CONTRIBUTING.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest\nflake8 agentipy tests\nblack agentipy tests\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes\nDESCRIPTION: Git commands for committing and pushing changes following conventional commits specification\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/CONTRIBUTING.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"feat: Add new Jupiter swap action\"\ngit push origin <your_branch_name>\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch\nDESCRIPTION: Command to create a new branch for development work\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/CONTRIBUTING.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <your_branch_name>\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies\nDESCRIPTION: Command to install AgentiPy in editable mode with development dependencies\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/CONTRIBUTING.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .[dev]  # Installs agentipy in editable mode with development dependencies\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual Environment\nDESCRIPTION: Commands for creating and activating a Python virtual environment for development\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate  # Linux/macOS\nvenv\\Scripts\\activate  # Windows\n```\n\n----------------------------------------\n\nTITLE: Cloning AgentiPy Repository\nDESCRIPTION: Instructions for cloning the forked AgentiPy repository to local machine\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your_username>/agentipy.git\ncd agentipy\n```\n\n----------------------------------------\n\nTITLE: Example Interaction with CoinGecko Chatbot\nDESCRIPTION: A sample dialogue showing how to interact with the CoinGecko chatbot, including entering an API key, querying top gainers, exporting data, and getting token prices.\nSOURCE: https://github.com/niceberginc/agentipy/blob/main/examples/langChain/CoinGecko/readme.md#2025-04-11_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nEnter your CoinGecko API key: YOUR_API_KEY\nWelcome to the CoinGecko Chatbot! Type 'exit' to quit.\n\nWhat would you like to know? What are the top gainers?\n🔼 Top Gainers (1h):\n{\n    \"top_gainers\": [...],\n    \"message\": \"Success\"\n}\nExport this data? (yes/no): yes\nData exported to top_gainers.json\n\nWhat would you like to know? Get token prices.\nEnter token addresses (comma-separated): So11111111111111111111111111111111111111112,EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\n💲 Token Prices:\n{\n    \"price_data\": [...],\n    \"message\": \"Success\"\n}\nExport this data? (yes/no): no\n\nWhat would you like to know? exit\nGoodbye!\n```"
  }
]