[
  {
    "owner": "iyear",
    "repo": "tdl",
    "content": "TITLE: Login with QR Code - TDL\nDESCRIPTION: This command initiates the login process using a QR code. The user will need to scan the QR code using their Telegram app.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/quick-start.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntdl login -T qr\n```\n\n----------------------------------------\n\nTITLE: Login with Phone Number and Code - TDL\nDESCRIPTION: Logs in to TDL using a phone number and verification code. It utilizes the `tdl login -T code` command. The `-T code` flag specifies that the login method is phone number and code.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/quick-start.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ntdl login -T code\n```\n\n----------------------------------------\n\nTITLE: Download Files from Telegram Links with tdl\nDESCRIPTION: Downloads files from specified Telegram message links.  Multiple links can be specified using the `-u` flag. This command directly retrieves the files linked in the given Telegram messages.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/download.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 -u https://t.me/tdl/2\n```\n\n----------------------------------------\n\nTITLE: Download Files from JSON with tdl\nDESCRIPTION: Downloads files based on information provided in JSON files. Multiple JSON files can be specified using the `-f` flag.  The JSON files should contain information about the files to download, as exported from Telegram clients.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/download.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntdl dl -f result1.json -f result2.json\n```\n\n----------------------------------------\n\nTITLE: Forward Messages to Specific Chat\nDESCRIPTION: This command forwards messages from an exported JSON file to a specific chat. It uses the `tdl forward` command with the `--from` flag to specify the source JSON file and the `--to` flag to specify the destination chat (CHAT).\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/forward.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ntdl forward --from tdl-export.json --to CHAT\n```\n\n----------------------------------------\n\nTITLE: Install TDL with Homebrew\nDESCRIPTION: Installs TDL on macOS using the Homebrew package manager.  This is a simple and convenient way to install TDL if Homebrew is already installed.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbrew install telegram-downloader\n```\n\n----------------------------------------\n\nTITLE: Enable Bash Completion for tdl\nDESCRIPTION: This command appends a line to the .bashrc file, which sources the output of the `tdl completion bash` command. This enables autocompletion for the `tdl` command in Bash shell sessions. The changes take effect after restarting the shell or sourcing the .bashrc file.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/shell-completion.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"source <(tdl completion bash)\" >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Enable Zsh Completion for tdl\nDESCRIPTION: This command appends a line to the .zshrc file, which sources the output of the `tdl completion zsh` command. This enables autocompletion for the `tdl` command in Zsh shell sessions. The changes take effect after restarting the shell or sourcing the .zshrc file.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/shell-completion.md#_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\necho \"source <(tdl completion zsh)\" >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Enable Bash Autocompletion for TDL\nDESCRIPTION: This command adds a line to the user's .bashrc file that sources the TDL autocompletion script for Bash. This enables autocompletion for the tdl command in new Bash sessions. It uses command substitution to get the autocompletion script and appends it to the .bashrc file.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/shell-completion.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"source <(tdl completion bash)\" >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Backup Data\nDESCRIPTION: This command backs up all namespace data to a file. By default, the output file name is `<date>.backup.tdl`.  No dependencies are explicitly listed, but `tdl` command-line tool needs to be installed and configured. It writes a backup file to the current directory or to a specified directory.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/migration.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ntdl backup\n```\n\n----------------------------------------\n\nTITLE: tdl Namespace Configuration\nDESCRIPTION: This snippet shows how to specify a namespace (Telegram account) for the tdl command using the `-n` or `--ns` option. It's important to set this option for each command if you are using multiple accounts.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/global-config.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntdl -n iyear\n```\n\n----------------------------------------\n\nTITLE: Setting Namespace in TDL\nDESCRIPTION: This command demonstrates how to specify a Telegram account namespace using the `-n` or `--ns` flag.  This allows you to manage multiple Telegram accounts with TDL by assigning a unique namespace to each account.  You need to set this for every command.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/global-config.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ntdl -n iyear\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy in TDL\nDESCRIPTION: These commands show how to configure a proxy server for TDL using the `--proxy` flag. Supported protocols include SOCKS5, HTTP, and HTTPS.  The format is `protocol://username:password@host:port`.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/global-config.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ntdl --proxy socks5://localhost:1080\n```\n\nLANGUAGE: Shell\nCODE:\n```\ntdl --proxy http://localhost:8080\n```\n\nLANGUAGE: Shell\nCODE:\n```\ntdl --proxy https://localhost:8081\n```\n\n----------------------------------------\n\nTITLE: Export All Messages (Including Non-Media) in tdl\nDESCRIPTION: Exports all messages from the chat, including those that do not contain media. The `--all` flag overrides the default behavior of only exporting media messages, which is useful for debugging or backing up entire conversations.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/export-messages.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT --all\n```\n\n----------------------------------------\n\nTITLE: Uploading files/directories to Saved Messages using tdl\nDESCRIPTION: This snippet shows how to upload files and directories to the 'Saved Messages' chat using the `tdl up` command. The `-p` flag specifies the path to the file or directory to be uploaded. This is the basic usage of the command.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/upload.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntdl up -p /path/to/file -p /path/to/dir\n```\n\n----------------------------------------\n\nTITLE: Download Files to Custom Destination with tdl\nDESCRIPTION: Downloads files to a specified custom directory. The `-d` flag specifies the destination directory. If the directory does not exist, `tdl` may create it, or it might return an error depending on the implementation.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/download.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 -d /path/to/dir\n```\n\n----------------------------------------\n\nTITLE: Run TDL in Docker with Persistent Config and Downloads\nDESCRIPTION: Runs TDL in a Docker container, mounting both the config directory ($HOME/.tdl) and the Downloads directory ($HOME/Downloads). This allows for persistent configuration and easy access to downloaded files.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_15\n\nLANGUAGE: dockerfile\nCODE:\n```\ndocker run --rm -it \\\n-v $HOME/.tdl:/root/.tdl \\\n-v $HOME/Downloads:/downloads \\\niyear/tdl <ARGUMENTS>\n```\n\n----------------------------------------\n\nTITLE: Run tdl as a Docker container with persistent config and downloads\nDESCRIPTION: This command executes tdl within a Docker container, utilizing volume mounts for persistent configuration at `$HOME/.tdl:/root/.tdl` and providing access to downloads at `$HOME/Downloads:/downloads`. It removes the container upon completion.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_15\n\nLANGUAGE: docker\nCODE:\n```\ndocker run --rm -it \\\n-v $HOME/.tdl:/root/.tdl \\\n-v $HOME/Downloads:/downloads \\\niyear/tdl <ARGUMENTS>\n```\n\n----------------------------------------\n\nTITLE: Enable Zsh Autocompletion for TDL\nDESCRIPTION: This command adds a line to the user's .zshrc file that sources the TDL autocompletion script for Zsh. This enables autocompletion for the tdl command in new Zsh sessions. It uses command substitution to get the autocompletion script and appends it to the .zshrc file.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/shell-completion.md#_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\necho \"source <(tdl completion zsh)\" >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Login with Phone & Code - TDL\nDESCRIPTION: This command initiates the login process using phone number and verification code authentication method.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/quick-start.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntdl login -T code\n```\n\n----------------------------------------\n\nTITLE: Download Files with Blacklist Filters using tdl\nDESCRIPTION: Downloads all files except those with specified extensions (blacklist). The `-e` flag specifies the excluded extensions, separated by commas. The extension matching is based on the file name, not the MIME type.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/download.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 -e mp4,flv\n```\n\n----------------------------------------\n\nTITLE: Blacklist File Extensions - TDL\nDESCRIPTION: Downloads all files except those with the specified extensions, creating a blacklist. The `-e` flag is followed by a comma-separated list of extensions to exclude.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/download.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 -e mp4,flv\n```\n\n----------------------------------------\n\nTITLE: Whitelist File Extensions - TDL\nDESCRIPTION: Downloads only files with specific extensions, creating a whitelist. The `-i` flag is followed by a comma-separated list of extensions (e.g., jpg,png).\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/download.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 -i jpg,png\n```\n\n----------------------------------------\n\nTITLE: Exporting media messages to a custom output path\nDESCRIPTION: This command exports media messages to a file specified by the `-o` option.  The `-c` flag specifies the chat, and the `-o` flag specifies the output file path. This allows users to control where the exported JSON file is saved.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/export-messages.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT -o /path/to/output.json\n```\n\n----------------------------------------\n\nTITLE: Installing a TDL Extension from GitHub\nDESCRIPTION: This command installs a TDL extension from a GitHub repository. Replace `<owner>/<repo>` with the owner and repository name of the extension.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/extensions.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension install <owner>/<repo>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling TDL Extensions\nDESCRIPTION: This command uninstalls specified TDL extensions. Replace `EXTENSION1 EXTENSION2 ...` with the names of the extensions to uninstall.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/extensions.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension remove EXTENSION1 EXTENSION2 ...\n```\n\n----------------------------------------\n\nTITLE: Download Files in Descending Order using tdl\nDESCRIPTION: Downloads files in descending order (newest to oldest) when using a JSON file as input.  The `--desc` flag enables this behavior. Note that changing the download order may affect the ability to resume downloads.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/download.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntdl dl -f result.json --desc\n```\n\n----------------------------------------\n\nTITLE: Recover Data from Backup\nDESCRIPTION: This command recovers data from a specified TDL backup file. Existing namespace data will be overwritten. The `-f` flag is used to define the input file path. The `tdl` command-line tool must be installed and configured, and the specified backup file must exist. The recovered data overwrites the existing data.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/migration.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ntdl recover -f /path/to/custom.backup.tdl\n```\n\n----------------------------------------\n\nTITLE: tdl Proxy Configuration\nDESCRIPTION: This snippet illustrates how to configure a proxy server for tdl using the `--proxy` option.  The format is protocol://username:password@host:port. Supported protocols include socks5, http, and https.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/global-config.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntdl --proxy socks5://localhost:1080\ntdl --proxy http://localhost:8080\ntdl --proxy https://localhost:8081\n```\n\n----------------------------------------\n\nTITLE: Download Media from Telegram Channel - TDL\nDESCRIPTION: This command downloads media from a specified Telegram channel URL.  The -u flag specifies the URL.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/quick-start.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntdl dl -u https://t.me/telegram/193\n```\n\n----------------------------------------\n\nTITLE: Install TDL with Scoop\nDESCRIPTION: Installs TDL on Windows using the Scoop package manager.  The `extras` bucket must be added before installing.  Scoop provides a command-line installation method.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nscoop bucket add extras\nscoop install telegram-downloader\n```\n\n----------------------------------------\n\nTITLE: Download Files with Whitelist Filters using tdl\nDESCRIPTION: Downloads only files with specified extensions (whitelist).  The `-i` flag specifies the allowed extensions, separated by commas.  The extension matching is based on the file name, not the MIME type.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/download.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 -i jpg,png\n```\n\n----------------------------------------\n\nTITLE: Migrate Data to File Storage\nDESCRIPTION: This command migrates data from the current storage to file storage. The `--to` flag specifies the destination storage type and path. Requires the `tdl` command-line tool to be installed. Migrates all data to the specified JSON file.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/migration.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ntdl migrate --to type=file,path=/path/to/data.json\n```\n\n----------------------------------------\n\nTITLE: Download Files with Custom Name Template using tdl\nDESCRIPTION: Downloads files and uses a custom template for the file name. The `--template` flag specifies the template string. The template can include variables like DialogID, MessageID, DownloadDate, and FileName.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/download.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 \\\n--template \"{{ .DialogID }}_{{ .MessageID }}_{{ .DownloadDate }}_{{ .FileName }}\"\n```\n\n----------------------------------------\n\nTITLE: Login with QR Code - TDL\nDESCRIPTION: Logs in to TDL using a QR code. It utilizes the `tdl login -T qr` command. The `-T qr` flag specifies that the login method is QR code.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/quick-start.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ntdl login -T qr\n```\n\n----------------------------------------\n\nTITLE: Run TDL in Docker (one-off command)\nDESCRIPTION: Runs TDL in a Docker container as a one-off command.  The `--rm` flag removes the container after it exits, and `-it` provides an interactive terminal.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_13\n\nLANGUAGE: dockerfile\nCODE:\n```\ndocker run --rm -it iyear/tdl <ARGUMENTS>\n```\n\n----------------------------------------\n\nTITLE: Custom Download Directory - TDL\nDESCRIPTION: Downloads files to a custom directory instead of the default location. The `-d` flag is used to specify the desired output directory path. The specified directory must exist.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/download.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 -d /path/to/dir\n```\n\n----------------------------------------\n\nTITLE: Installing a GitHub Extension\nDESCRIPTION: Installs a tdl extension hosted on a GitHub repository. Requires the repository owner and name.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/extensions.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension install <owner>/<repo>\n```\n\n----------------------------------------\n\nTITLE: Listing Chats in JSON Format with TDL\nDESCRIPTION: This command lists all available chats using the TDL command-line tool and formats the output as a JSON string. It requires the TDL tool to be installed and configured. The `-o json` flag specifies the output format.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/list-chats.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ntdl chat ls -o json\n```\n\n----------------------------------------\n\nTITLE: Install Latest tdl (Windows) via ghproxy mirror\nDESCRIPTION: This PowerShell script downloads and executes an installation script for the latest version of tdl, using a mirror via ghproxy.com. It installs tdl to `$Env:SystemDrive\\tdl` and adds it to the system's PATH. It also can be used to upgrade tdl.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$Script=iwr -useb https://docs.iyear.me/tdl/install.ps1;\n$Block=[ScriptBlock]::Create($Script); Invoke-Command -ScriptBlock $Block -ArgumentList \"\", \"$True\"\n```\n\n----------------------------------------\n\nTITLE: Install Specific tdl Version (Windows) via Script\nDESCRIPTION: This PowerShell script downloads and executes an installation script for a specific version of tdl.  The desired version is set using the `$Env:TDLVersion` environment variable before executing the script. It installs tdl to `$Env:SystemDrive\\tdl` and adds it to the system's PATH. It also can be used to upgrade tdl.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:TDLVersion = \"VERSION\"\n$Script=iwr -useb https://docs.iyear.me/tdl/install.ps1;\n$Block=[ScriptBlock]::Create($Script); Invoke-Command -ScriptBlock $Block -ArgumentList \"$Env:TDLVersion\"\n```\n\n----------------------------------------\n\nTITLE: HTTP File Server with Custom Port - TDL\nDESCRIPTION: Exposes downloaded files as an HTTP server on a custom port. This requires the `--serve` flag to enable the server and the `--port` flag to set the desired port number.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/download.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 --serve --port 8081\n```\n\n----------------------------------------\n\nTITLE: Migrate Data to File Storage with tdl\nDESCRIPTION: Migrates data from the current storage to a file-based storage. It uses the `tdl migrate` command with `--to` parameter to specify the destination storage type and path.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/migration.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ntdl migrate --to type=file,path=/path/to/data.json\n```\n\n----------------------------------------\n\nTITLE: Uploading files with extension filtering using tdl\nDESCRIPTION: This snippet shows how to filter files based on their extensions during the upload process. The `-e` flag is used to specify the extensions to exclude from the upload. In this case, files with `.so` and `.tmp` extensions will be skipped.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/upload.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntdl up -p /path/to/file -p /path/to/dir -e .so -e .tmp\n```\n\n----------------------------------------\n\nTITLE: Installing a TDL Extension from a Local Path\nDESCRIPTION: This command installs a TDL extension from a local path. Replace `/path/to/extension` with the actual path to the extension.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/extensions.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension install /path/to/extension\n```\n\n----------------------------------------\n\nTITLE: Uploading files and deleting them after using tdl\nDESCRIPTION: This snippet demonstrates how to delete the local file after it has been successfully uploaded. The `--rm` flag is used to enable this behavior. This is useful for managing disk space when the local copy is no longer needed.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/upload.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntdl up -p /path/to/file --rm\n```\n\n----------------------------------------\n\nTITLE: Run TDL with Docker Compose\nDESCRIPTION: Runs TDL with Docker Compose.  This command starts the TDL service defined in the docker-compose.yml file.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_19\n\nLANGUAGE: dockerfile\nCODE:\n```\ndocker compose run --rm tdl <ARGUMENTS>\n```\n\n----------------------------------------\n\nTITLE: tdl Storage Configuration\nDESCRIPTION: This snippet demonstrates how to configure the storage type and options for tdl using the `--storage` option. The format is `type=driver,opt1=val1,opt2=val2,...`. Available drivers include bolt, file, and legacy.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/global-config.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntdl --storage type=bolt,path=/path/to/data-dir\n```\n\n----------------------------------------\n\nTITLE: Install TDL with Nix (nix-env)\nDESCRIPTION: Installs TDL using the Nix package manager's nix-env command. This method directly installs TDL into the user environment.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnix-env -iA nixos.tdl\n```\n\n----------------------------------------\n\nTITLE: Forward Message with Routing from File\nDESCRIPTION: This command forwards messages from an exported JSON file using routing rules defined in the `router.txt` file.  The file contains an expression to determine the destination chat.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/forward.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntdl forward --from tdl-export.json --to router.txt\n```\n\n----------------------------------------\n\nTITLE: Installing a TDL Extension from a Private GitHub Repository\nDESCRIPTION: This command installs a TDL extension from a private GitHub repository. It requires setting the `GITHUB_TOKEN` environment variable with a personal access token that has `Contents` read permission. Replace `<owner>/<private-repo>` with the appropriate values.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/extensions.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nexport GITHUB_TOKEN=YOUR_TOKEN\ntdl extension install <owner>/<private-repo>\n```\n\n----------------------------------------\n\nTITLE: Download Files with Custom Parameters using tdl\nDESCRIPTION: Downloads files with custom thread and task parameters. The `-t` flag specifies the number of threads per task, and the `-l` flag specifies the number of concurrent tasks.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/download.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 -t 8 -l 4\n```\n\n----------------------------------------\n\nTITLE: Configure NixOS to include tdl\nDESCRIPTION: This code snippet configures a NixOS system to include tdl as a system package. This ensures tdl is available system-wide.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_11\n\nLANGUAGE: nix\nCODE:\n```\nenvironment.systemPackages = [\n    pkgs.tdl\n];\n```\n\n----------------------------------------\n\nTITLE: Skipping Duplicate Files - TDL\nDESCRIPTION: Skips downloading files that have the same name and size as existing files in the destination directory.  The `--skip-same` flag enables this feature.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/download.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 --skip-same\n```\n\n----------------------------------------\n\nTITLE: Uploading files to a custom chat using tdl\nDESCRIPTION: This snippet demonstrates how to upload a file to a specific chat other than 'Saved Messages'. The `-c` flag is used to specify the target chat. CHAT is a placeholder and should be replaced with the actual chat identifier or name.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/upload.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntdl up -p /path/to/file -c CHAT\n```\n\n----------------------------------------\n\nTITLE: Running a TDL Extension with Global Flags\nDESCRIPTION: This command runs a TDL extension with global configuration flags, such as specifying a namespace and proxy. It demonstrates how global flags can be applied when executing an extension. In this example, it runs the `whoami` extension.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/extensions.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ntdl -n foo --proxy socks5://localhost:1080 whoami\n```\n\n----------------------------------------\n\nTITLE: Serve Files over HTTP using tdl\nDESCRIPTION: Exposes the files to be downloaded via an HTTP server instead of downloading them directly. The `--serve` flag enables this feature. This is useful for using download managers like aria2, wget, or IDM.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/download.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 --serve\n```\n\n----------------------------------------\n\nTITLE: Running a TDL Extension with Extension-Specific Flags\nDESCRIPTION: This command runs a TDL extension with both global and extension-specific flags. Global flags should precede the extension name, and extension flags should follow. In this example, it runs the `whoami` extension with the verbose flag `-v`.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/extensions.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ntdl -n foo whoami -v\n```\n\n----------------------------------------\n\nTITLE: Run TDL in Docker with Persistent Config\nDESCRIPTION: Runs TDL in a Docker container, mounting the $HOME/.tdl directory to persist the configuration. This ensures that TDL retains its configuration across container runs.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_14\n\nLANGUAGE: dockerfile\nCODE:\n```\ndocker run --rm -it \\\n-v $HOME/.tdl:/root/.tdl \\\niyear/tdl <ARGUMENTS>\n```\n\n----------------------------------------\n\nTITLE: Listing All Chats with tdl\nDESCRIPTION: This command lists all chats accessible via the 'tdl' tool. It displays the basic chat information in the default output format.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/list-chats.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ntdl chat ls\n```\n\n----------------------------------------\n\nTITLE: Running an Extension with Global Options\nDESCRIPTION: Runs a tdl extension with global options such as namespace and proxy settings.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/extensions.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ntdl -n foo --proxy socks5://localhost:1080 whoami\n```\n\n----------------------------------------\n\nTITLE: Migrate Data from Custom Storage to File Storage\nDESCRIPTION: This command migrates data from a custom source storage to file storage. The `--storage` flag specifies the source storage type and path, and the `--to` flag specifies the destination storage type and path. The `tdl` tool must be installed. Migrates data from a BoltDB to a JSON file.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/migration.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ntdl migrate --storage type=bolt,path=/path/to/data-directory  --to type=file,path=/path/to/data.json\n```\n\n----------------------------------------\n\nTITLE: Run TDL in Docker with Host Network\nDESCRIPTION: Runs TDL in a Docker container using the `host` network mode, which is necessary for using proxies with localhost addresses.  This allows the container to share the host's network stack.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_17\n\nLANGUAGE: dockerfile\nCODE:\n```\ndocker run --rm -it <FLAGS> --network host iyear/tdl <ARGUMENTS>\n```\n\n----------------------------------------\n\nTITLE: tdl Connection Pool Size Configuration\nDESCRIPTION: This snippet demonstrates how to set the Telegram client connection pool size using the `--pool` option. The default value is 8. Increasing the pool size (or setting it to 0 for unlimited) can improve speed.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/global-config.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ntdl --pool 2\n```\n\n----------------------------------------\n\nTITLE: Listing Channels Containing 'Telegram' with TDL\nDESCRIPTION: This command lists all channels whose visible name contains 'Telegram' using the TDL command-line tool. It requires the TDL tool to be installed and configured. The `-f` flag is used to specify the filter expression.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/list-chats.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ntdl chat ls -f \"Type contains 'channel' && VisibleName contains 'Telegram'\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Channels by Name with tdl\nDESCRIPTION: This command lists channels where the VisibleName contains 'Telegram'.  The -f flag is used to specify the filter expression. This example filters for chats of 'channel' type and whose VisibleName attribute contains 'Telegram'.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/list-chats.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ntdl chat ls -f \"Type contains 'channel' && VisibleName contains 'Telegram'\"\n```\n\n----------------------------------------\n\nTITLE: Running an Extension with Extension-Specific Options\nDESCRIPTION: Runs a tdl extension with extension-specific options, ensuring correct order: global options, extension name, extension options.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/extensions.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ntdl -n foo whoami -v\n```\n\n----------------------------------------\n\nTITLE: Exporting media messages within a time range\nDESCRIPTION: This command exports media messages within a specified timestamp range. The `-c` flag specifies the chat, `-T time` specifies the type of range, and `-i` specifies the start and end timestamps (Unix epoch seconds).  Omitting `-T time` will have the same effect as it is the default.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/export-messages.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT -T time -i 1665700000,1665761624\n```\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT -i 1665700000,1665761624\n```\n\n----------------------------------------\n\nTITLE: Download Files and Skip Same Files using tdl\nDESCRIPTION: Downloads files and skips files that already exist with the same name and size. The `--skip-same` flag enables this feature.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/download.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 --skip-same\n```\n\n----------------------------------------\n\nTITLE: Exporting media messages with content\nDESCRIPTION: This command exports media messages along with their content. The `-c` flag specifies the chat, and `--with-content` includes the message content in the exported data. Note that retrieving message content may have privacy implications.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/export-messages.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT --with-content\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Extensions\nDESCRIPTION: Installs multiple extensions at once, from both GitHub and local paths.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/extensions.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension install <owner>/<repo1> /path/to/extension2 ...\n```\n\n----------------------------------------\n\nTITLE: MIME Type Rewriting - TDL\nDESCRIPTION: Enables MIME type detection and renames files if the file extension does not match the MIME type. The `--rewrite-ext` flag enables this feature.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/download.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 --rewrite-ext\n```\n\n----------------------------------------\n\nTITLE: Forward Messages with HTML Styling\nDESCRIPTION: This command forwards messages with HTML styling applied using the `--edit` flag and a JavaScript expression that includes HTML tags. The expression constructs a new message including bold text and a link.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/forward.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ntdl forward --from tdl-export.json --edit \\\n    'Message.Message + `<b>Bold</b> <a href=\"https://example.com\">Link</a>`'\n```\n\n----------------------------------------\n\nTITLE: List Available Message Fields\nDESCRIPTION: This command lists all available fields that can be used in message routing expressions. It uses the `tdl forward` command with the `--from` flag to specify the source JSON file and the `--to` flag set to `-` to indicate that the fields should be listed.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/forward.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ntdl forward --from tdl-export.json --to -\n```\n\n----------------------------------------\n\nTITLE: Upgrading TDL Extensions\nDESCRIPTION: This command upgrades specified TDL extensions to their latest versions. Replace `EXTENSION1 EXTENSION2 ...` with the names of the extensions to upgrade.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/extensions.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension upgrade EXTENSION1 EXTENSION2 ...\n```\n\n----------------------------------------\n\nTITLE: List Filter Fields in tdl\nDESCRIPTION: Lists all available filter fields that can be used with the `-f` option during export. The `-f -` option instructs tdl to list the available fields instead of filtering.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/export-messages.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT -f -\n```\n\n----------------------------------------\n\nTITLE: Forward Messages with Appended Text\nDESCRIPTION: This command forwards messages with additional text appended to the original message content. It uses the `--edit` flag with a JavaScript expression to modify the message content.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/forward.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ntdl forward --from tdl-export.json --edit 'Message.Message + \" Test Forwarded Message\"'\n```\n\n----------------------------------------\n\nTITLE: Message Router Configuration File (router.txt)\nDESCRIPTION: This code snippet shows an example of a complex expression used for message routing when a filename is provided. It uses a switch-like statement to determine the destination chat based on message content, sender ID, and views.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/forward.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nMessage.Message contains \"foo\" ? \"CHAT1\" :\nFrom.ID == 123456 ? \"CHAT2\" :\nMessage.Views > 30 ? { Peer: \"CHAT3\", Thread: 101 } :\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Forward Message with Appended Text\nDESCRIPTION: This command forwards messages from an exported JSON file and appends the text \" 测试转发消息\" to the end of each message.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/forward.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ntdl forward --from tdl-export.json --edit 'Message.Message + \" 测试转发消息\"'\n```\n\n----------------------------------------\n\nTITLE: Forward Message Silently\nDESCRIPTION: This command forwards messages from an exported JSON file silently, without notifying other members of the chat.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/forward.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ntdl forward --from tdl-export.json --silent\n```\n\n----------------------------------------\n\nTITLE: Uploading to a custom chat\nDESCRIPTION: Uploads the specified file to a custom chat, using the `-c` flag to specify the chat ID.  The 'CHAT' variable represents the target chat identifier.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/upload.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ntdl up -p /path/to/file -c CHAT\n```\n\n----------------------------------------\n\nTITLE: Uploading images as photos using tdl\nDESCRIPTION: This snippet shows how to upload images as photos instead of as documents. The `--photo` flag is used to specify that the file should be treated as a photo. This will ensure the image is displayed as a photo in Telegram rather than being sent as a file.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/upload.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntdl up -p /path/to/file --photo\n```\n\n----------------------------------------\n\nTITLE: Install Latest tdl (Windows) via Script\nDESCRIPTION: This PowerShell script downloads and executes an installation script for the latest version of tdl. It installs tdl to `$Env:SystemDrive\\tdl` and adds it to the system's PATH. It also can be used to upgrade tdl.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\niwr -useb https://docs.iyear.me/tdl/install.ps1 | iex\n```\n\n----------------------------------------\n\nTITLE: Custom Parameters for Downloads - TDL\nDESCRIPTION: Configures the number of threads per task and the maximum concurrent tasks for downloading. The `-t` flag sets the number of threads, and the `-l` flag sets the concurrency limit.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/download.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 -t 8 -l 4\n```\n\n----------------------------------------\n\nTITLE: Message Editing Expression Example\nDESCRIPTION: Example `javascript` code demonstrating message editing by repeating the original message, adding HTML elements, and including the sender's visible name.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/forward.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nrepeat(Message.Message, 2) + `\\n<a href=\"https://www.google.com\">谷歌</a>\\n<a href=\"https://www.bing.com\">必应</a>\\n<b>粗体</b>\\n<i>斜体</i>\\n<code>代码</code>\\n<tg-spoiler>剧透</tg-spoiler>\\n<pre><code class=\"language-go\">\\npackage main\\n\\nimport \"fmt\"\\n\\nfunc main() {\\n    fmt.Println(\"hello world\")\\n}\\n</code></pre>\\n` + From.VisibleName\n```\n\n----------------------------------------\n\nTITLE: Filtering files by extension\nDESCRIPTION: Uploads files, excluding those with the specified extensions.  The `-e` flag is used to exclude files with extensions like `.so` and `.tmp`.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/upload.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ntdl up -p /path/to/file -p /path/to/dir -e .so -e .tmp\n```\n\n----------------------------------------\n\nTITLE: Export Media Messages from Topic in tdl\nDESCRIPTION: Exports media messages from a specific topic within a chat.  `CHAT` specifies the chat, and `--topic TOPIC_ID` specifies the ID of the topic. Requires knowing the Topic ID either via message link or `tdl chat ls` command.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/export-messages.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT --topic TOPIC_ID\n```\n\n----------------------------------------\n\nTITLE: Exporting media messages with custom filtering\nDESCRIPTION: This command exports the latest 10 media messages that meet specific criteria defined by the filter expression. The `-c` flag specifies the chat, `-T last` and `-i 10` specify the last 10 messages, and `-f` specifies the filter expression. The filter checks for messages with views greater than 200, a media name ending with '.zip', and a media size greater than 5MiB.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/export-messages.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT -T last -i 10 -f \"Views>200 && Media.Name endsWith '.zip' && Media.Size > 5*1024*1024\"\n```\n\n----------------------------------------\n\nTITLE: Export chat users to a custom file path using tdl\nDESCRIPTION: This command exports chat members to a user-specified file path. The `-c` flag specifies the chat identifier, and the `-o` flag determines the output file path. It provides flexibility in managing exported data.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/export-members.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ntdl chat users -c CHAT -o /path/to/export.json\n```\n\n----------------------------------------\n\nTITLE: Exporting media messages from a specific topic\nDESCRIPTION: This command exports media messages from a specific topic within a chat. The `-c` flag specifies the chat, and the `--topic` flag specifies the topic ID. The topic ID can be obtained from message links or by using the `tdl chat ls` command.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/export-messages.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT --topic TOPIC_ID\n```\n\n----------------------------------------\n\nTITLE: Forward Messages Using Edit File\nDESCRIPTION: This command forwards messages using an editing expression defined in the `edit.txt` file. It uses the `tdl forward` command with the `--from` flag to specify the source JSON file and the `--edit` flag to specify the edit file.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/forward.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\ntdl forward --from tdl-export.json --edit edit.txt\n```\n\n----------------------------------------\n\nTITLE: Forward Messages Individually\nDESCRIPTION: This command forwards messages individually, disabling the default behavior of detecting and forwarding grouped messages as an album. It uses the `--single` flag.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/forward.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\ntdl forward --from tdl-export.json --single\n```\n\n----------------------------------------\n\nTITLE: Run TDL shell inside Docker Compose container\nDESCRIPTION: Runs TDL inside the container shell using Docker Compose by overriding the entrypoint.  This is useful for debugging or running commands directly within the container environment.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_20\n\nLANGUAGE: dockerfile\nCODE:\n```\ndocker compose run --rm --entrypoint sh tdl\n```\n\n----------------------------------------\n\nTITLE: Setting Storage in TDL\nDESCRIPTION: This command demonstrates how to configure the storage driver for TDL using the `--storage` flag. The format is `type=DRIVER,opt1=val1,opt2=val2,...`.  Available drivers include `bolt`, `file`, and `legacy`, each with its own options, such as the storage path.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/global-config.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ntdl --storage type=bolt,path=/path/to/data-dir\n```\n\n----------------------------------------\n\nTITLE: Enable Fish Autocompletion for TDL\nDESCRIPTION: This command adds a line to the user's config.fish file that sources the TDL autocompletion script for Fish shell.  It enables autocompletion for the tdl command in new Fish sessions by piping the completion script to source and appending it to the config file.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/shell-completion.md#_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\necho \"tdl completion fish | source\" >> ~/.config/fish/config.fish\n```\n\n----------------------------------------\n\nTITLE: Forward Message with Editing from File\nDESCRIPTION: This command forwards messages from an exported JSON file and applies edits defined in the `edit.txt` file.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/forward.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ntdl forward --from tdl-export.json --edit edit.txt\n```\n\n----------------------------------------\n\nTITLE: Run tdl interactively inside a Docker container\nDESCRIPTION: This command starts an interactive shell (`sh`) inside the tdl Docker container. This allows you to run tdl commands directly within the container's environment. The container is removed after exiting.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_16\n\nLANGUAGE: docker\nCODE:\n```\ndocker run --rm -it <FLAGS> --entrypoint sh iyear/tdl\n```\n\n----------------------------------------\n\nTITLE: Listing Installed TDL Extensions\nDESCRIPTION: This command lists all currently installed TDL extensions, along with information such as their authors and versions.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/extensions.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension list\n```\n\n----------------------------------------\n\nTITLE: Installing a Local Extension\nDESCRIPTION: Installs a tdl extension from a local file system path.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/extensions.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension install /path/to/extension\n```\n\n----------------------------------------\n\nTITLE: Backup Data to Custom File with tdl\nDESCRIPTION: Backs up data to a specified output file. Requires the `tdl` command-line tool.  The `-d` parameter specifies the destination file path.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/migration.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ntdl backup -d /path/to/custom.tdl\n```\n\n----------------------------------------\n\nTITLE: Updating All Extensions\nDESCRIPTION: Updates all installed tdl extensions to their latest versions.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/extensions.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension upgrade\n```\n\n----------------------------------------\n\nTITLE: Enable Fish Completion for tdl\nDESCRIPTION: This command appends a line to the config.fish file, which sources the output of the `tdl completion fish` command. This enables autocompletion for the `tdl` command in Fish shell sessions. The changes take effect after restarting the shell or sourcing the config.fish file.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/shell-completion.md#_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\necho \"tdl completion fish | source\" >> ~/.config/fish/config.fish\n```\n\n----------------------------------------\n\nTITLE: Listing Available Filter Fields with TDL\nDESCRIPTION: This command lists the available filter fields that can be used with the TDL command-line tool to filter chats. It requires the TDL tool to be installed and configured. The `-f -` flag specifies that the available filter fields should be listed.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/list-chats.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ntdl chat ls -f -\n```\n\n----------------------------------------\n\nTITLE: Dry-Run Extension Upgrade\nDESCRIPTION: Performs a dry-run of extension upgrades, printing information without actually upgrading the extensions.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/extensions.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension upgrade --dry-run EXTENSION\n```\n\n----------------------------------------\n\nTITLE: Forward Message from Multiple Sources\nDESCRIPTION: This command forwards messages from multiple sources, including Telegram channels and exported JSON files.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/forward.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntdl forward \\\n--from https://t.me/telegram/193 \\\n--from https://t.me/telegram/195 \\\n--from tdl-export.json \\\n--from tdl-export2.json\n```\n\n----------------------------------------\n\nTITLE: Dry-Run Extension Removal\nDESCRIPTION: Performs a dry-run of extension removal, printing information without actually removing the extensions.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/extensions.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension remove --dry-run EXTENSION\n```\n\n----------------------------------------\n\nTITLE: Run tdl as a one-off Docker container\nDESCRIPTION: This command runs the tdl application as a Docker container, removing the container after it exits. It uses the iyear/tdl image and passes arguments directly to the tdl application.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_13\n\nLANGUAGE: docker\nCODE:\n```\ndocker run --rm -it iyear/tdl <ARGUMENTS>\n```\n\n----------------------------------------\n\nTITLE: Upgrading a TDL Extension from a Private GitHub Repository\nDESCRIPTION: This command upgrades a TDL extension from a private GitHub repository. It requires setting the `GITHUB_TOKEN` environment variable with a personal access token that has `Contents` read permission. Replace `EXTENSION` with the extension name.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/extensions.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nexport GITHUB_TOKEN=YOUR_TOKEN\ntdl extension upgrade EXTENSION\n```\n\n----------------------------------------\n\nTITLE: Dry Run Uninstall of a TDL Extension\nDESCRIPTION: This command performs a dry run uninstall of a TDL extension, printing information without actually uninstalling it. Replace `EXTENSION` with the name of the extension.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/extensions.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension remove --dry-run EXTENSION\n```\n\n----------------------------------------\n\nTITLE: Login with Custom Client Path - TDL\nDESCRIPTION: This command allows specifying a custom path to the Telegram Desktop client for login.  This is useful if the client isn't in a standard location.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/quick-start.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntdl login -d /path/to/TelegramDesktop\n```\n\n----------------------------------------\n\nTITLE: Exporting media messages from a specific reply\nDESCRIPTION: This command exports media messages from replies to a specific post in a channel. The `-c` flag specifies the chat (channel), and the `--reply` flag specifies the post ID.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/export-messages.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT --reply POST_ID\n```\n\n----------------------------------------\n\nTITLE: tdl Debug Mode Configuration\nDESCRIPTION: This snippet shows how to enable debug-level logging for tdl using the `--debug` option. Enabling debug mode provides more verbose output for troubleshooting.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/global-config.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntdl --debug\n```\n\n----------------------------------------\n\nTITLE: Export Raw Telegram Message Structure in tdl\nDESCRIPTION: Exports the raw Telegram MTProto message structure for each message. This is primarily used for debugging purposes. The `--raw` flag enables the export of the raw message data.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/export-messages.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT --raw\n```\n\n----------------------------------------\n\nTITLE: Exporting media messages within an ID range\nDESCRIPTION: This command exports media messages within a specified message ID range. The `-c` flag specifies the chat, `-T id` specifies the type of range, and `-i` specifies the start and end message IDs.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/export-messages.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT -T id -i 100,500\n```\n\n----------------------------------------\n\nTITLE: Download Files with Takeout Session using tdl\nDESCRIPTION: Downloads files using a takeout session to avoid flood wait limits. The `--takeout` flag enables this feature.  Requires setting up a takeout session beforehand, likely using a Telegram client library.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/download.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 --takeout\n```\n\n----------------------------------------\n\nTITLE: Takeout Session Download - TDL\nDESCRIPTION: Downloads files using a 'Takeout' session, which allows for exporting data from your account with a lower rate limit. The `--takeout` flag enables this.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/download.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 --takeout\n```\n\n----------------------------------------\n\nTITLE: Enable PowerShell Autocompletion for TDL\nDESCRIPTION: This command adds a line to the user's PowerShell profile that executes the TDL autocompletion script for PowerShell.  This enables autocompletion for the tdl command in new PowerShell sessions. The output is piped to Out-String and then to Invoke-Expression to execute the autocompletion script.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/shell-completion.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-Content -Path $PROFILE -Value \"tdl completion powershell | Out-String | Invoke-Expression\"\n```\n\n----------------------------------------\n\nTITLE: Exporting all messages, including non-media messages\nDESCRIPTION: This command exports all messages, including those without media, for debugging or backup purposes. The `-c` flag specifies the chat, and `--all` includes all message types in the exported data.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/export-messages.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT --all\n```\n\n----------------------------------------\n\nTITLE: Uploading files and directories\nDESCRIPTION: Uploads the specified file and directory to the 'Saved Messages' chat. The `-p` flag specifies the path to the file or directory to upload.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/upload.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ntdl up -p /path/to/file -p /path/to/dir\n```\n\n----------------------------------------\n\nTITLE: Forward Message from Telegram Channel\nDESCRIPTION: This command forwards messages from a specified Telegram channel to the default 'Favorites' destination.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/forward.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntdl forward --from https://t.me/telegram/193\n```\n\n----------------------------------------\n\nTITLE: Setting NTP Server in TDL\nDESCRIPTION: This command shows how to set the NTP server host for TDL using the `--ntp` flag. If the flag is not set, system time will be used.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/global-config.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ntdl --ntp pool.ntp.org\n```\n\n----------------------------------------\n\nTITLE: Uploading images as photos\nDESCRIPTION: Uploads an image file as a photo instead of a generic file. The `--photo` flag indicates that the file should be treated as a photo.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/upload.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ntdl up -p /path/to/file --photo\n```\n\n----------------------------------------\n\nTITLE: Install tdl from source using Go\nDESCRIPTION: This command installs tdl from source using the `go install` command. It requires Go 1.21 or later to be installed and configured correctly. It then checks the installed version.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_20\n\nLANGUAGE: go\nCODE:\n```\ngo install github.com/iyear/tdl@latest\ntdl version\n```\n\n----------------------------------------\n\nTITLE: tdl Task Delay Configuration\nDESCRIPTION: This snippet shows how to set the delay between tasks using the `--delay` option. The default value is 0s. Setting a longer delay can help avoid rate limiting.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/global-config.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ntdl --delay 5s\n```\n\n----------------------------------------\n\nTITLE: Build and Install TDL from Source\nDESCRIPTION: Builds and installs TDL from source using Go. This involves installing Git and Go, updating the PATH environment variable, and then using `go install` to build and install the TDL binary.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_21\n\nLANGUAGE: go\nCODE:\n```\ngo install github.com/iyear/tdl@latest\ntdl version\n```\n\n----------------------------------------\n\nTITLE: Template Example\nDESCRIPTION: This example demonstrates how to use variables and functions within a TDL template to generate file names based on Telegram message and file information. It uses variables like DialogID, MessageID, FileCaption, FileName, DownloadDate, and FileSize, along with functions like replace, formatDate, and lower.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/template.md#_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ .DialogID }}_{{ .MessageID }}_{{ replace .FileCaption `/` `_` `\\` `_` `:` `_` }}\n\n{{ .FileName }}_{{ formatDate .DownloadDate }}_{{ .FileSize }}\n\n{{ .FileName }}_{{ formatDate .DownloadDate \"2006-01-02-15-04-05\"}}_{{ .FileSize }}\n\n{{ lower (replace .FileName ` ` `_`) }}\n\n{{ formatDate (now) }}\n```\n\n----------------------------------------\n\nTITLE: Install TDL with NixOS Configuration\nDESCRIPTION: Configures TDL to be installed as a system package in NixOS. This involves adding `pkgs.tdl` to the `environment.systemPackages` list in the NixOS configuration file.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_11\n\nLANGUAGE: dockerfile\nCODE:\n```\nenvironment.systemPackages = [\n    pkgs.tdl\n];\n```\n\n----------------------------------------\n\nTITLE: Go Template Examples\nDESCRIPTION: This snippet showcases several examples of using template variables and functions to format file names, message IDs, and download dates.  It includes usage of replace, formatDate, lower, and now functions. It demonstrates how to access fields like DialogID, MessageID, FileCaption, FileName, FileSize, and DownloadDate.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/template.md#_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ .DialogID }}_{{ .MessageID }}_{{ replace .FileCaption `/` `_` `\\` `_` `:` `_` }}\n\n{{ .FileName }}_{{ formatDate .DownloadDate }}_{{ .FileSize }}\n\n{{ .FileName }}_{{ formatDate .DownloadDate \"2006-01-02-15-04-05\"}}_{{ .FileSize }}\n\n{{ lower (replace .FileName ` ` `_`) }}\n\n{{ formatDate (now) }}\n```\n\n----------------------------------------\n\nTITLE: Forward Messages Silently\nDESCRIPTION: This command forwards messages without sending any notifications to the recipients. It uses the `--silent` flag to suppress notifications.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/forward.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\ntdl forward --from tdl-export.json --silent\n```\n\n----------------------------------------\n\nTITLE: Login with Desktop Client & Passcode - TDL\nDESCRIPTION: This command initiates the login process with the Telegram Desktop client, using a specified local passcode for authentication.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/quick-start.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntdl login -p YOUR_PASSCODE\n```\n\n----------------------------------------\n\nTITLE: Forward Message as Single Message\nDESCRIPTION: This command forwards messages from an exported JSON file as single messages, disabling the automatic grouping of messages.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/forward.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ntdl forward --from tdl-export.json --single\n```\n\n----------------------------------------\n\nTITLE: Download Files and Detect Grouped Messages using tdl\nDESCRIPTION: Downloads files and automatically detects if the message is an album/grouped message and downloads all files in the group. The `--group` flag enables this feature.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/download.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 --group\n```\n\n----------------------------------------\n\nTITLE: Enable PowerShell Completion for tdl\nDESCRIPTION: This command appends a line to the PowerShell profile file ($PROFILE), which executes the output of the `tdl completion powershell` command. This enables autocompletion for the `tdl` command in PowerShell sessions. The `Out-String` cmdlet converts the output to a string, and `Invoke-Expression` executes the resulting string as a PowerShell command.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/shell-completion.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-Content -Path $PROFILE -Value \"tdl completion powershell | Out-String | Invoke-Expression\"\n```\n\n----------------------------------------\n\nTITLE: List Available Message Edit Fields\nDESCRIPTION: This command lists all available fields that can be used in message editing expressions. It uses the `tdl forward` command with the `--from` flag to specify the source JSON file and the `--edit` flag set to `-` to indicate that the fields should be listed.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/forward.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ntdl forward --from tdl-export.json --edit -\n```\n\n----------------------------------------\n\nTITLE: Forward Message with Dry Run\nDESCRIPTION: This command performs a dry run of the message forwarding process using an exported JSON file as the source, printing the progress without actually sending messages.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/forward.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ntdl forward --from tdl-export.json --dry-run\n```\n\n----------------------------------------\n\nTITLE: Backup Data with tdl\nDESCRIPTION: Backs up data to a default file named `<date>.backup.tdl`. No external dependencies are needed. Executes the `tdl backup` command.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/migration.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ntdl backup\n```\n\n----------------------------------------\n\nTITLE: Export with ID Range in tdl\nDESCRIPTION: Exports media messages within a specific message ID range. The `-T id` flag specifies the ID range, and the `-i` option defines the start and end IDs (100 and 500 in this case), separated by a comma.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/export-messages.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT -T id -i 100,500\n```\n\n----------------------------------------\n\nTITLE: Export Raw Chat Users with tdl\nDESCRIPTION: Exports raw Telegram MTProto user structures from a specified chat. Useful for debugging purposes.  Requires the `tdl` command-line tool to be installed and configured.  The `CHAT` placeholder should be replaced with the actual chat ID.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/export-members.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntdl chat users -c CHAT --raw\n```\n\n----------------------------------------\n\nTITLE: Exporting all media messages in a chat\nDESCRIPTION: This command exports all messages containing media from the specified chat to a file named `tdl-export.json`.  The `-c` flag specifies the target chat. No additional dependencies are required other than having the `tdl` tool installed and configured.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/export-messages.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT\n```\n\n----------------------------------------\n\nTITLE: Forward Messages from Multiple Sources\nDESCRIPTION: This command forwards messages from multiple sources, including Telegram channels and exported JSON files. It uses the `tdl forward` command with multiple `--from` flags to specify each source.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/forward.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ntdl forward \\\n    --from https://t.me/telegram/193 \\\n    --from https://t.me/telegram/195 \\\n    --from tdl-export.json \\\n    --from tdl-export2.json\n```\n\n----------------------------------------\n\nTITLE: Forward Messages with Conditional Routing\nDESCRIPTION: This command forwards messages based on a conditional expression. If the message contains 'foo', it's forwarded to 'CHAT1'; otherwise, it's forwarded to 'Saved Messages'. An empty string as target CHAT defaults to `Saved Messages`.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/forward.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ntdl forward --from tdl-export.json \\\n    --to 'Message.Message contains \"foo\" ? \"CHAT1\" : \"\"'\n```\n\n----------------------------------------\n\nTITLE: Exporting raw Telegram MTProto messages\nDESCRIPTION: This command exports the raw Telegram MTProto message structure for debugging purposes. The `-c` flag specifies the chat, and `--raw` enables the export of raw message data.  This is primarily useful for developers or advanced users familiar with the MTProto protocol.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/export-messages.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT --raw\n```\n\n----------------------------------------\n\nTITLE: Forward Message in Reverse Order\nDESCRIPTION: This command forwards messages from an exported JSON file in reverse order.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/forward.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ntdl forward --from tdl-export.json --desc\n```\n\n----------------------------------------\n\nTITLE: Install specific TDL version (Windows)\nDESCRIPTION: Installs a specific version of TDL on Windows by setting the TDLVersion environment variable before downloading and executing the install.ps1 PowerShell script. This is useful for installing older or specific versions of TDL.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:TDLVersion = \"VERSION\"\n$Script=iwr -useb https://docs.iyear.me/tdl/install.ps1;\n$Block=[ScriptBlock]::Create($Script); Invoke-Command -ScriptBlock $Block -ArgumentList \"$Env:TDLVersion\"\n```\n\n----------------------------------------\n\nTITLE: Export with Time Range in tdl\nDESCRIPTION: Exports media messages within a specific timestamp range. The `-T time` or just `-T` flag specifies that a time range will be used.  `-i` option accepts two timestamps as the range, separated by a comma.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/export-messages.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT -T time -i 1665700000,1665761624\n```\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT -i 1665700000,1665761624\n```\n\n----------------------------------------\n\nTITLE: Download Files and Rewrite Extension with tdl\nDESCRIPTION: Downloads files and rewrites the file extension if it doesn't match the MIME type.  The `--rewrite-ext` flag enables this feature.  This may cause unexpected side effects, such as renaming `.apk` files to `.zip`.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/download.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 --rewrite-ext\n```\n\n----------------------------------------\n\nTITLE: Export with Filter in tdl\nDESCRIPTION: Exports messages based on a specified filter expression. The `-f` flag takes a filter expression as its argument. This expression is used to select messages that match the defined criteria. Requires knowledge about filter syntax.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/export-messages.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT -T last -i 10 -f \"Views>200 && Media.Name endsWith '.zip' && Media.Size > 5*1024*1024\"\n```\n\n----------------------------------------\n\nTITLE: Install Latest tdl (macOS/Linux) via ghproxy mirror\nDESCRIPTION: This shell script downloads and executes an installation script for the latest version of tdl, using a mirror via ghproxy.com. It installs `tdl` to `/usr/local/bin/tdl`. It also can be used to upgrade tdl.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://docs.iyear.me/tdl/install.sh | sudo bash -s -- --proxy\n```\n\n----------------------------------------\n\nTITLE: Listing Groups with Topics using TDL\nDESCRIPTION: This command lists all groups that have topics using the TDL command-line tool. It requires the TDL tool to be installed and configured. The `-f` flag is used to specify the filter expression to filter based on the length of the Topics array.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/list-chats.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ntdl chat ls -f \"len(Topics)>0\"\n```\n\n----------------------------------------\n\nTITLE: Export All Chat Users to JSON with tdl\nDESCRIPTION: Exports all users from a specified Telegram chat to a JSON file named `tdl-users.json`.  Requires the `tdl` command-line tool to be installed and configured.  The `CHAT` placeholder should be replaced with the actual chat ID.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/export-members.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntdl chat users -c CHAT\n```\n\n----------------------------------------\n\nTITLE: Export with Custom Destination in tdl\nDESCRIPTION: Exports media messages and saves them to a custom file path. The `-o` flag is used to specify the output file path, which in the example is `/path/to/output.json`. `CHAT` represents the target chat to export from.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/export-messages.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT -o /path/to/output.json\n```\n\n----------------------------------------\n\nTITLE: Forward Messages in Clone Mode\nDESCRIPTION: This command forwards messages using the 'clone' mode, which copies the messages without the forwarded header. Some content types like polls and invoices are ignored in this mode.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/forward.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ntdl forward --from tdl-export.json --mode clone\n```\n\n----------------------------------------\n\nTITLE: Install TDL with ghproxy.com (Windows)\nDESCRIPTION: Installs TDL on Windows using ghproxy.com as a proxy by downloading and executing the install.ps1 PowerShell script.  This method allows for faster downloads by leveraging a GitHub proxy service.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$Script=iwr -useb https://docs.iyear.me/tdl/install.ps1;\n$Block=[ScriptBlock]::Create($Script); Invoke-Command -ScriptBlock $Block -ArgumentList \"\", \"$True\"\n```\n\n----------------------------------------\n\nTITLE: Forward Messages in Descending Order\nDESCRIPTION: This command forwards messages in descending order for each source, meaning the most recent messages are forwarded first.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/forward.md#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\ntdl forward --from tdl-export.json --desc\n```\n\n----------------------------------------\n\nTITLE: Install TDL with ghproxy.com (macOS & Linux)\nDESCRIPTION: Installs TDL on macOS and Linux using ghproxy.com as a proxy by downloading and executing the install.sh bash script with the --proxy argument. This method utilizes a GitHub proxy for potentially faster downloads.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://docs.iyear.me/tdl/install.sh | sudo bash -s -- --proxy\n```\n\n----------------------------------------\n\nTITLE: Forward Messages Using Router File\nDESCRIPTION: This command forwards messages using a routing expression defined in the `router.txt` file. It uses the `tdl forward` command with the `--from` flag to specify the source JSON file and the `--to` flag to specify the router file.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/forward.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ntdl forward --from tdl-export.json --to router.txt\n```\n\n----------------------------------------\n\nTITLE: Install tdl using Scoop (Windows)\nDESCRIPTION: This set of commands installs the tdl package using the Scoop package manager on Windows. It first adds the 'extras' bucket and then installs the 'telegram-downloader' package. Scoop must be installed prior to running these commands.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nscoop bucket add extras\nscoop install telegram-downloader\n```\n\n----------------------------------------\n\nTITLE: Backup Data to Custom File\nDESCRIPTION: This command backs up all namespace data to a specified file path. The `-d` flag is used to define the output file path. The `tdl` command-line tool needs to be installed and configured. It writes a backup file to the specified location.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/migration.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ntdl backup -d /path/to/custom.tdl\n```\n\n----------------------------------------\n\nTITLE: Forward Messages with Complex Routing\nDESCRIPTION: This command forwards messages with more complex routing logic. If the message contains 'foo', it's forwarded to 'CHAT1'; otherwise, it's forwarded to reply to message/topic '4' in 'CHAT2'.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/forward.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ntdl forward --from tdl-export.json \\\n--to 'Message.Message contains \"foo\" ? \"CHAT1\" : { Peer: \"CHAT2\", Thread: 4 }'\n```\n\n----------------------------------------\n\nTITLE: Export all chat users to tdl-users.json using tdl\nDESCRIPTION: This command exports all chat members to a file named `tdl-users.json`. It requires the `CHAT` identifier of the target chat. No additional dependencies are needed besides the tdl command-line tool.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/export-members.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ntdl chat users -c CHAT\n```\n\n----------------------------------------\n\nTITLE: Setting Reconnect Timeout in TDL\nDESCRIPTION: This command demonstrates how to set the Telegram client reconnect timeout using the `--reconnect-timeout` flag.  The default value is `2m`. A higher timeout or 0 (INF) might be needed for poor networks.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/global-config.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ntdl --reconnect-timeout 1m30s\n```\n\n----------------------------------------\n\nTITLE: Exporting the latest media messages\nDESCRIPTION: This command exports the latest `n` media messages from a chat. The `-c` flag specifies the chat, `-T last` specifies that we want the latest messages, and `-i` specifies the number of messages to export.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/export-messages.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT -T last -i 100\n```\n\n----------------------------------------\n\nTITLE: Setting DC Pool Size in TDL\nDESCRIPTION: This command demonstrates how to set the DC (Data Center) pool size for the Telegram client using the `--pool` flag. The default value is `8`. A higher value might result in faster speed.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/global-config.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ntdl --pool 2\n```\n\n----------------------------------------\n\nTITLE: Run tdl with Docker Compose\nDESCRIPTION: This command runs the tdl service defined in a `docker-compose.yml` file. It starts the tdl container with the specified configurations, such as volumes and network settings. The container is removed after exiting.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_18\n\nLANGUAGE: docker-compose\nCODE:\n```\ndocker compose run --rm tdl <ARGUMENTS>\n```\n\n----------------------------------------\n\nTITLE: Setting Task Delay in TDL\nDESCRIPTION: This command shows how to set the delay between each task using the `--delay` flag. The default value is `0s`. A higher delay time might help avoid Telegram's flood control.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/global-config.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ntdl --delay 5s\n```\n\n----------------------------------------\n\nTITLE: Custom Filename Template - TDL\nDESCRIPTION: Uses a custom filename template for downloaded files, allowing dynamic naming based on message and download properties. The `--template` flag sets the template string. See the template guide for details.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/download.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 \\\n--template \"{{ .DialogID }}_{{ .MessageID }}_{{ .DownloadDate }}_{{ .FileName }}\"\n```\n\n----------------------------------------\n\nTITLE: Forward Messages in Direct Mode\nDESCRIPTION: This command forwards messages using the 'direct' mode, which prefers the official forward API. If the API is not allowed, it falls back to 'clone' mode.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/forward.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ntdl forward --from tdl-export.json --mode direct\n```\n\n----------------------------------------\n\nTITLE: Forward Message from Telegram Channel\nDESCRIPTION: This command forwards messages from a specified Telegram channel to the 'Saved Messages' destination. It uses the `tdl forward` command with the `--from` flag to specify the source channel.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/forward.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ntdl forward --from https://t.me/telegram/193\n```\n\n----------------------------------------\n\nTITLE: Forward Message with Clone Mode\nDESCRIPTION: This command forwards messages from an exported JSON file using the 'clone' mode, which copies the message content without forwarding headers.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/forward.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntdl forward --from tdl-export.json --mode clone\n```\n\n----------------------------------------\n\nTITLE: Install tdl using Nix (nix-env)\nDESCRIPTION: This command installs tdl using the Nix package manager and the `nix-env` tool.  It adds tdl to the user environment.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_10\n\nLANGUAGE: nix\nCODE:\n```\nnix-env -iA nixos.tdl\n```\n\n----------------------------------------\n\nTITLE: Listing Groups with Topics using tdl\nDESCRIPTION: This command lists groups that have topics associated with them. The filter expression len(Topics)>0 checks if the length of the Topics list is greater than 0, indicating that the group has topics.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/list-chats.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ntdl chat ls -f \"len(Topics)>0\"\n```\n\n----------------------------------------\n\nTITLE: Install TDL latest version (macOS & Linux)\nDESCRIPTION: Installs the latest version of TDL on macOS and Linux by downloading and executing the install.sh bash script. This script installs TDL to /usr/local/bin/tdl and can also be used to upgrade TDL.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://docs.iyear.me/tdl/install.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: tdl NTP Server Configuration\nDESCRIPTION: This snippet shows how to set an NTP server for tdl using the `--ntp` option.  If empty, the system time is used. Setting a correct NTP server can be crucial for proper operation.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/global-config.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntdl --ntp pool.ntp.org\n```\n\n----------------------------------------\n\nTITLE: Install TDL latest version (Windows)\nDESCRIPTION: Installs the latest version of TDL on Windows by downloading and executing the install.ps1 PowerShell script. This script adds TDL to the system PATH. It can also be used to upgrade TDL.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\niwr -useb https://docs.iyear.me/tdl/install.ps1 | iex\n```\n\n----------------------------------------\n\nTITLE: Forward Message with Conditional Routing\nDESCRIPTION: This command forwards messages from an exported JSON file based on a conditional expression. If the message contains \"foo\", it is forwarded to 'CHAT1'; otherwise, it is forwarded to 'Favorites'.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/forward.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntdl forward --from tdl-export.json \\\n--to 'Message.Message contains \"foo\" ? \"CHAT1\" : \"\"'\n```\n\n----------------------------------------\n\nTITLE: List Available Fields for Message Routing\nDESCRIPTION: This command lists all available fields that can be used for message routing based on the content of an exported JSON file.  The output is directed to standard output (`-`).\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/forward.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntdl forward --from tdl-export.json --to -\n```\n\n----------------------------------------\n\nTITLE: Install Latest tdl (macOS/Linux) via Script\nDESCRIPTION: This shell script downloads and executes an installation script for the latest version of tdl.  It installs `tdl` to `/usr/local/bin/tdl`.  It also can be used to upgrade tdl.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://docs.iyear.me/tdl/install.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Reverse Order Download - TDL\nDESCRIPTION: Downloads files in reverse order, starting from the most recent to the oldest. The `--desc` flag enables reverse order downloading. Note that this affects the 'resume download' functionality.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/download.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntdl dl -f result.json --desc\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple TDL Extensions at Once\nDESCRIPTION: This command installs multiple TDL extensions simultaneously, allowing installations from GitHub repositories and local paths.  Replace `<owner>/<repo1>` and `/path/to/extension2` with actual values.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/extensions.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension install <owner>/<repo1> /path/to/extension2 ...\n```\n\n----------------------------------------\n\nTITLE: Install specific TDL version (macOS & Linux)\nDESCRIPTION: Installs a specific version of TDL on macOS and Linux by downloading and executing the install.sh bash script with the --version argument. This allows installation of specific TDL releases.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://docs.iyear.me/tdl/install.sh | sudo bash -s -- --version VERSION\n```\n\n----------------------------------------\n\nTITLE: Download File from Telegram Channel - TDL\nDESCRIPTION: Downloads a file from a Telegram channel using its URL. It uses the `tdl dl -u https://t.me/telegram/193` command, where `https://t.me/telegram/193` is the URL of the Telegram channel post.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/quick-start.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ntdl dl -u https://t.me/telegram/193\n```\n\n----------------------------------------\n\nTITLE: Dry Run Message Forwarding\nDESCRIPTION: This command performs a dry run of the message forwarding process, printing the progress without actually sending any messages. This is useful for debugging message routing logic.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/forward.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\ntdl forward --from tdl-export.json --dry-run\n```\n\n----------------------------------------\n\nTITLE: Forward Message with Direct Mode\nDESCRIPTION: This command forwards messages from an exported JSON file using the 'direct' mode, which attempts to use the official Telegram forwarding API.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/forward.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntdl forward --from tdl-export.json --mode direct\n```\n\n----------------------------------------\n\nTITLE: Download Files from URLs - TDL\nDESCRIPTION: Downloads files from specified Telegram message URLs using the `tdl dl` command. The `-u` flag is used to provide the URLs of the messages containing the files to be downloaded.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/download.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 -u https://t.me/tdl/2\n```\n\n----------------------------------------\n\nTITLE: Dry-Run Extension Installation\nDESCRIPTION: Performs a dry-run of extension installation, printing information without actually installing the extension.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/extensions.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension install --dry-run EXTENSION\n```\n\n----------------------------------------\n\nTITLE: Dry Run Upgrade of a TDL Extension\nDESCRIPTION: This command performs a dry run upgrade of a TDL extension, printing information without actually upgrading it. Replace `EXTENSION` with the name of the extension.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/extensions.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension upgrade --dry-run EXTENSION\n```\n\n----------------------------------------\n\nTITLE: Dry Run Installation of a TDL Extension\nDESCRIPTION: This command performs a dry run installation of a TDL extension, printing information without actually installing it. Replace `EXTENSION` with the name or path of the extension.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/extensions.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension install --dry-run EXTENSION\n```\n\n----------------------------------------\n\nTITLE: Message Routing Expression Example\nDESCRIPTION: Example `javascript` code to demonstrate message routing based on various criteria, including message content, sender ID, and view count.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/forward.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nMessage.Message contains \"foo\" ? \"CHAT1\" :\nFrom.ID == 123456 ? \"CHAT2\" :\nMessage.Views > 30 ? { Peer: \"CHAT3\", Thread: 101 } :\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Available Filter Fields with tdl\nDESCRIPTION: This command lists all available fields that can be used for filtering chats. The -f - flag indicates that the available filter fields should be displayed.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/list-chats.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ntdl chat ls -f -\n```\n\n----------------------------------------\n\nTITLE: Running a TDL Extension\nDESCRIPTION: This command runs a TDL extension after it has been installed.  The `EXTENSION-NAME` is the repository name without the `tdl-` prefix. In this example, it runs the `whoami` extension.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/extensions.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ntdl whoami\n```\n\n----------------------------------------\n\nTITLE: Customizing concurrency parameters\nDESCRIPTION: Uploads a file using custom concurrency parameters. `-t` specifies the number of threads per task, and `-l` specifies the number of concurrent tasks.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/upload.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ntdl up -p /path/to/file -t 8 -l 4\n```\n\n----------------------------------------\n\nTITLE: HTTP File Server - TDL\nDESCRIPTION: Exposes downloaded files as an HTTP server without saving them to disk, enabling download managers to retrieve the files. The `--serve` flag initiates the server.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/download.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 --serve\n```\n\n----------------------------------------\n\nTITLE: Listing All Chats with TDL\nDESCRIPTION: This command lists all available chats using the TDL command-line tool. It requires the TDL tool to be installed and configured. The output is a list of chats in a default format.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/list-chats.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ntdl chat ls\n```\n\n----------------------------------------\n\nTITLE: Export Media Messages from Channel Post Replies in tdl\nDESCRIPTION: Exports media messages from specific channel post replies. `CHAT` specifies the chat/channel, and `--reply POST_ID` specifies the ID of the post from which to export replies.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/export-messages.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT --reply POST_ID\n```\n\n----------------------------------------\n\nTITLE: Export With Content in tdl\nDESCRIPTION: Exports media messages along with their associated text content. The `--with-content` flag ensures that the message content is included in the exported data.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/export-messages.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT --with-content\n```\n\n----------------------------------------\n\nTITLE: Download Files from JSON - TDL\nDESCRIPTION: Downloads files based on information provided in JSON files. The `-f` flag specifies the path to the JSON files containing the message details and file information.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/download.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntdl dl -f result1.json -f result2.json\n```\n\n----------------------------------------\n\nTITLE: List Available Fields for Message Editing\nDESCRIPTION: This command lists the available fields of a message that can be edited before forwarding using an exported JSON file as the source.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/forward.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ntdl forward --from tdl-export.json --edit -\n```\n\n----------------------------------------\n\nTITLE: Group Message Detection - TDL\nDESCRIPTION: Automatically detects and downloads all files associated with album or group messages. The `--group` flag activates this functionality.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/download.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 --group\n```\n\n----------------------------------------\n\nTITLE: Listing available filter fields\nDESCRIPTION: This command lists all available filtering fields that can be used with the `-f` option in the `tdl chat export` command. The `-c` flag specifies the chat, and `-f -` indicates that the available fields should be printed to standard output.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/export-messages.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT -f -\n```\n\n----------------------------------------\n\nTITLE: Forward Message with HTML Styling\nDESCRIPTION: This command forwards messages from an exported JSON file and applies HTML styling to the message content.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/forward.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ntdl forward --from tdl-export.json --edit \\\n'Message.Message + `<b>粗体</b> <a href=\"https://example.com\">链接</a>`'\n```\n\n----------------------------------------\n\nTITLE: Forcing Extension Installation\nDESCRIPTION: Forces the installation of an extension, overwriting an existing one with the same name.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/extensions.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension install --force EXTENSION\n```\n\n----------------------------------------\n\nTITLE: Recover Data from Backup with tdl\nDESCRIPTION: Restores data from a specified backup file.  Requires the `tdl` command-line tool and access to the backup file.  The `-f` parameter specifies the file path to the backup file.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/migration.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ntdl recover -f /path/to/custom.backup.tdl\n```\n\n----------------------------------------\n\nTITLE: Export All Media Messages in tdl\nDESCRIPTION: Exports all media messages from a specified chat (CHAT) to a file named `tdl-export.json`. The chat identifier is passed using the `-c` flag.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/export-messages.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT\n```\n\n----------------------------------------\n\nTITLE: Installing a Private GitHub Extension\nDESCRIPTION: Installs a tdl extension from a private GitHub repository. Requires setting the GITHUB_TOKEN environment variable with appropriate access rights.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/extensions.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nexport GITHUB_TOKEN=YOUR_TOKEN\ntdl extension install <owner>/<private-repo>\n```\n\n----------------------------------------\n\nTITLE: Export Last N Messages in tdl\nDESCRIPTION: Exports the last 'N' media messages. `-T last` signifies to export the last messages and `-i` specifies the count.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/export-messages.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ntdl chat export -c CHAT -T last -i 100\n```\n\n----------------------------------------\n\nTITLE: Upgrading All TDL Extensions\nDESCRIPTION: This command upgrades all installed TDL extensions to their latest versions.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/extensions.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension upgrade\n```\n\n----------------------------------------\n\nTITLE: Updating Private GitHub Extensions\nDESCRIPTION: Updates a tdl extension from a private GitHub repository, requiring the GITHUB_TOKEN environment variable.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/extensions.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nexport GITHUB_TOKEN=YOUR_TOKEN\ntdl extension upgrade EXTENSION\n```\n\n----------------------------------------\n\nTITLE: Run tdl in a Nix Shell\nDESCRIPTION: This command starts a Nix shell environment with tdl available. It's useful for running tdl without permanently installing it.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_12\n\nLANGUAGE: nix\nCODE:\n```\nnix-shell -p tdl\n```\n\n----------------------------------------\n\nTITLE: Run tdl inside a Docker container with host network\nDESCRIPTION: This command runs tdl within a Docker container utilizing the host network, enabling access to localhost addresses. The container is removed upon exiting.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_17\n\nLANGUAGE: docker\nCODE:\n```\ndocker run --rm -it <FLAGS> --network host iyear/tdl <ARGUMENTS>\n```\n\n----------------------------------------\n\nTITLE: Restart Download - TDL\nDESCRIPTION: Restarts a download from the beginning without requiring user interaction. The `--restart` flag forces the download to begin again.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/download.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 --restart\n```\n\n----------------------------------------\n\nTITLE: Forward Message to Specific Chat\nDESCRIPTION: This command forwards messages from an exported JSON file to a specific chat, identified by `CHAT`.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/forward.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntdl forward --from tdl-export.json --to CHAT\n```\n\n----------------------------------------\n\nTITLE: Resume Download - TDL\nDESCRIPTION: Resumes an interrupted download without requiring user interaction. The `--continue` flag is used to enable this.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/download.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 --continue\n```\n\n----------------------------------------\n\nTITLE: Install TDL with Termux\nDESCRIPTION: Installs TDL on Android using the Termux package manager.  This is a straightforward installation method for Termux environments.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npkg install tdl\n```\n\n----------------------------------------\n\nTITLE: Automatically deleting uploaded files\nDESCRIPTION: Uploads a file and automatically deletes it after a successful upload. The `--rm` flag enables the automatic deletion feature.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/upload.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ntdl up -p /path/to/file --rm\n```\n\n----------------------------------------\n\nTITLE: Migrate Data from Custom Storage with tdl\nDESCRIPTION: Migrates data from a custom storage location (specified with `--storage`) to a file-based storage location (specified with `--to`). Requires the `tdl` command-line tool.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/migration.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ntdl migrate --storage type=bolt,path=/path/to/data-directory  --to type=file,path=/path/to/data.json\n```\n\n----------------------------------------\n\nTITLE: Run tdl interactively inside a Docker Compose container\nDESCRIPTION: This command runs the tdl service defined in a `docker-compose.yml` file, starting an interactive shell (`sh`) within the container.  This allows you to execute commands directly inside the tdl service's container. The container is removed after exiting.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_19\n\nLANGUAGE: docker-compose\nCODE:\n```\ndocker compose run --rm --entrypoint sh tdl\n```\n\n----------------------------------------\n\nTITLE: Run TDL in Nix Shell\nDESCRIPTION: Runs TDL in a Nix shell environment. This provides an isolated environment with TDL available for use.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnix-shell -p tdl\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Extensions\nDESCRIPTION: Lists all installed tdl extensions along with their author and version information.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/extensions.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension list\n```\n\n----------------------------------------\n\nTITLE: Install Specific tdl Version (macOS/Linux) via Script\nDESCRIPTION: This shell script downloads and executes an installation script for a specific version of tdl. The version to install is specified using the `--version` flag. It installs `tdl` to `/usr/local/bin/tdl`. It also can be used to upgrade tdl.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://docs.iyear.me/tdl/install.sh | sudo bash -s -- --version VERSION\n```\n\n----------------------------------------\n\nTITLE: Login with Desktop Client (Default Path) - TDL\nDESCRIPTION: Logs in to TDL using the Telegram Desktop client with the default installation path. It utilizes the `tdl login` command.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/quick-start.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntdl login\n```\n\n----------------------------------------\n\nTITLE: Login with Desktop Client - TDL\nDESCRIPTION: This command attempts to automatically locate the Telegram Desktop client path and initiate the login process. It uses the default namespace.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/quick-start.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntdl login\n```\n\n----------------------------------------\n\nTITLE: Force Installing a TDL Extension\nDESCRIPTION: This command forces the installation of a TDL extension, even if it already exists. Replace `EXTENSION` with the name or path of the extension.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/extensions.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension install --force EXTENSION\n```\n\n----------------------------------------\n\nTITLE: Login with Desktop Client (Passcode) - TDL\nDESCRIPTION: Logs in to TDL using the Telegram Desktop client with a specified passcode. It utilizes the `tdl login -p YOUR_PASSCODE` command, where YOUR_PASSCODE is the user's passcode.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/quick-start.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ntdl login -p YOUR_PASSCODE\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in TDL\nDESCRIPTION: This command shows how to enable debug-level logging in TDL using the `--debug` flag.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/global-config.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ntdl --debug\n```\n\n----------------------------------------\n\nTITLE: Updating Extensions\nDESCRIPTION: Updates specific tdl extensions to their latest versions.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/extensions.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension upgrade EXTENSION1 EXTENSION2 ...\n```\n\n----------------------------------------\n\nTITLE: Run tdl as a Docker container with persistent config\nDESCRIPTION: This command runs tdl in a Docker container, mounting the `$HOME/.tdl` directory on the host to `/root/.tdl` in the container for persistent configuration. The container is removed after exiting.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_14\n\nLANGUAGE: docker\nCODE:\n```\ndocker run --rm -it \\\n-v $HOME/.tdl:/root/.tdl \\\niyear/tdl <ARGUMENTS>\n```\n\n----------------------------------------\n\nTITLE: Login with Desktop Client (Custom Path) - TDL\nDESCRIPTION: Logs in to TDL using the Telegram Desktop client with a custom installation path. It utilizes the `tdl login -d /path/to/TelegramDesktop` command, where `/path/to/TelegramDesktop` is the path to the Telegram Desktop executable.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/quick-start.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ntdl login -d /path/to/TelegramDesktop\n```\n\n----------------------------------------\n\nTITLE: Combined URL and JSON Download - TDL\nDESCRIPTION: Downloads files from both specified Telegram message URLs and JSON files.  The `-u` flag provides the URLs, and the `-f` flag specifies the JSON file paths. This allows for a mix of direct links and data from exported chats.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/download.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntdl dl \\\n-u https://t.me/tdl/1 -u https://t.me/tdl/2 \\\n-f result1.json -f result2.json\n```\n\n----------------------------------------\n\nTITLE: Removing Extensions\nDESCRIPTION: Removes specified tdl extensions.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/extensions.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\ntdl extension remove EXTENSION1 EXTENSION2 ...\n```\n\n----------------------------------------\n\nTITLE: Listing Chats in JSON Format with tdl\nDESCRIPTION: This command lists all chats and outputs the result in JSON format.  The -o json flag specifies the output format to be JSON, making it easy to parse and process programmatically.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/list-chats.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ntdl chat ls -o json\n```\n\n----------------------------------------\n\nTITLE: Forward Message with Complex Conditional Routing\nDESCRIPTION: This command forwards messages from an exported JSON file based on a complex conditional expression. Messages containing 'foo' are sent to 'CHAT1'. Otherwise, messages are sent to thread ID 4 in peer 'CHAT2'.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/forward.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntdl forward --from tdl-export.json \\\n--to 'Message.Message contains \"foo\" ? \"CHAT1\" : { Peer: \"CHAT2\", Thread: 4 }'\n```\n\n----------------------------------------\n\nTITLE: Default Go Template Example\nDESCRIPTION: This snippet shows the default template structure for file naming, using DialogID, MessageID, and FileName, employing the filenamify function to ensure the file name is valid. It is a basic template combining identifiers and safe file naming.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/template.md#_snippet_1\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ .DialogID }}_{{ .MessageID }}_{{ filenamify .FileName }}\n```\n\n----------------------------------------\n\nTITLE: Export Chat Users to Custom JSON Path with tdl\nDESCRIPTION: Exports users from a specified Telegram chat to a JSON file at the specified path. Requires the `tdl` command-line tool to be installed and configured.  The `CHAT` placeholder should be replaced with the actual chat ID and `/path/to/export.json` with the desired file path.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/tools/export-members.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntdl chat users -c CHAT -o /path/to/export.json\n```\n\n----------------------------------------\n\nTITLE: Download Files from Links and JSON with tdl\nDESCRIPTION: Downloads files specified by both Telegram links and JSON files. This command combines the functionality of downloading from links and JSON files in a single command.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/download.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntdl dl \\\n-u https://t.me/tdl/1 -u https://t.me/tdl/2 \\\n-f result1.json -f result2.json\n```\n\n----------------------------------------\n\nTITLE: Running an Extension\nDESCRIPTION: Runs an installed tdl extension using the 'tdl' command followed by the extension name.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/extensions.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ntdl whoami\n```\n\n----------------------------------------\n\nTITLE: Export raw Telegram MTProto user data using tdl\nDESCRIPTION: This command exports the raw Telegram MTProto user structure, intended for debugging purposes. The `--raw` flag triggers the export of the raw data format. It's useful for understanding the underlying data structure.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/tools/export-members.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ntdl chat users -c CHAT --raw\n```\n\n----------------------------------------\n\nTITLE: Restart Downloads using tdl\nDESCRIPTION: Restarts a download from the beginning without user interaction. The `--restart` flag enables this feature.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/download.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 --restart\n```\n\n----------------------------------------\n\nTITLE: Message Edit Configuration File (edit.txt)\nDESCRIPTION: This code snippet shows an example of a complex expression used for message editing when a filename is provided. It repeats the message, adds HTML styled text, and appends sender info.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/forward.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nrepeat(Message.Message, 2) + `\\n<a href=\"https://www.google.com\">Google</a>\\n<a href=\"https://www.bing.com\">Bing</a>\\n<b>bold</b>\\n<i>italic</i>\\n<code>code</code>\\n<tg-spoiler>spoiler</tg-spoiler>\\n<pre><code class=\"language-go\">\\npackage main\\n\\nimport \"fmt\"\\n\\nfunc main() {\\n    fmt.Println(\"hello world\")\\n}\\n</code></pre>\\n` + From.VisibleName\n```\n\n----------------------------------------\n\nTITLE: Default Template\nDESCRIPTION: This snippet represents the default TDL template, which uses variables such as DialogID, MessageID and FileName. The filenamify function is applied to the FileName variable to ensure a valid filename is generated.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/template.md#_snippet_1\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ .DialogID }}_{{ .MessageID }}_{{ filenamify .FileName }}\n```\n\n----------------------------------------\n\nTITLE: Resume Downloads using tdl\nDESCRIPTION: Resumes an interrupted download without user interaction.  The `--continue` flag enables this feature.  Requires a previous download attempt with associated state files.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/download.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 --continue\n```\n\n----------------------------------------\n\nTITLE: Uploading files with custom threading parameters using tdl\nDESCRIPTION: This snippet illustrates how to customize the upload process using threading parameters. The `-t` flag specifies the number of threads per task (8 in this example), and the `-l` flag defines the number of concurrent tasks (4 in this example).\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/upload.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntdl up -p /path/to/file -t 8 -l 4\n```\n\n----------------------------------------\n\nTITLE: tdl Reconnect Timeout Configuration\nDESCRIPTION: This snippet illustrates how to set the Telegram connection reconnect timeout using the `--reconnect-timeout` option.  The default value is 2m. Setting this to a longer time or 0 (infinite) is useful for unstable networks.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/guide/global-config.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntdl --reconnect-timeout 1m30s\n```\n\n----------------------------------------\n\nTITLE: TDL Docker Compose configuration\nDESCRIPTION: A sample docker-compose.yml file to configure TDL with Docker Compose. It defines the TDL service, sets up volume mounts for persistent configuration and downloads, and specifies the network mode.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  tdl:\n    image: iyear/tdl # or specify X.Y.Z tag for a specific version\n    volumes:\n      - $HOME/.tdl:/root/.tdl # keep config persistent\n      - $HOME/Downloads:/downloads # optional\n      # - /path/to/your/need:/path/in/container\n    stdin_open: true\n    tty: true\n    # use host network if you need to use proxy with localhost address\n    network_mode: host\n```\n\n----------------------------------------\n\nTITLE: Install TDL with AUR (Arch Linux)\nDESCRIPTION: Installs TDL on Arch Linux or an Arch-based distribution using an AUR helper like Yay.  This method is for users familiar with the Arch User Repository.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyay -S tdl\n```\n\n----------------------------------------\n\nTITLE: Install tdl using Homebrew (macOS)\nDESCRIPTION: This command installs the tdl package using the Homebrew package manager on macOS. Homebrew must be installed prior to running this command.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbrew install telegram-downloader\n```\n\n----------------------------------------\n\nTITLE: Install tdl using AUR (Arch Linux)\nDESCRIPTION: This command installs the tdl package using the AUR helper 'yay' on Arch Linux. 'yay' or another AUR helper must be installed prior to running this command.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyay -S tdl\n```\n\n----------------------------------------\n\nTITLE: Run TDL inside Docker container shell\nDESCRIPTION: Runs TDL inside the container shell using the `sh` shell by overriding the entrypoint. This allows for interactive exploration and debugging within the container.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/getting-started/installation.md#_snippet_16\n\nLANGUAGE: dockerfile\nCODE:\n```\ndocker run --rm -it <FLAGS> --entrypoint sh iyear/tdl\n```\n\n----------------------------------------\n\nTITLE: Serve Files over HTTP with Custom Port using tdl\nDESCRIPTION: Exposes files over HTTP on a custom port. The `--serve` flag enables HTTP serving, and the `--port` flag specifies the port number.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/en/guide/download.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ntdl dl -u https://t.me/tdl/1 --serve --port 8081\n```\n\n----------------------------------------\n\nTITLE: Install tdl using Termux (Android)\nDESCRIPTION: This command installs the tdl package using the Termux package manager on Android. Termux must be installed prior to running this command.\nSOURCE: https://github.com/iyear/tdl/blob/master/docs/content/zh/getting-started/installation.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npkg install tdl\n```"
  }
]