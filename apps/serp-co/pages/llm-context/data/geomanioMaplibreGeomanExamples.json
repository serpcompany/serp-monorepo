[
  {
    "owner": "geoman-io",
    "repo": "maplibre-geoman-examples",
    "content": "TITLE: Starting Angular Development Server\nDESCRIPTION: Command to start the local development server for the Angular application. Once running, the application will be available at http://localhost:4200/ and will automatically reload when source files are changed.\nSOURCE: https://github.com/geoman-io/maplibre-geoman-examples/blob/master/maplibre-geoman-angular/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Running Development Server Commands for Next.js Application\nDESCRIPTION: Various command options to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/geoman-io/maplibre-geoman-examples/blob/master/maplibre-geoman-nextjs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components\nDESCRIPTION: Command to scaffold a new Angular component using the Angular CLI. This creates the component files with boilerplate code following Angular best practices.\nSOURCE: https://github.com/geoman-io/maplibre-geoman-examples/blob/master/maplibre-geoman-angular/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Setting Up React Plugin in ESLint Configuration\nDESCRIPTION: Demonstrates how to configure ESLint with the React plugin. This includes setting the React version, adding the plugin, and enabling recommended rules for React and JSX runtime.\nSOURCE: https://github.com/geoman-io/maplibre-geoman-examples/blob/master/maplibre-geoman-react/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport react from 'eslint-plugin-react'\n\nexport default tseslint.config({\n  // Set the react version\n  settings: { react: { version: '18.3' } },\n  plugins: {\n    // Add the react plugin\n    react,\n  },\n  rules: {\n    // other rules...\n    // Enable its recommended rules\n    ...react.configs.recommended.rules,\n    ...react.configs['jsx-runtime'].rules,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Building Angular Application\nDESCRIPTION: Command to compile the Angular application for production. The build artifacts will be stored in the dist/ directory, with optimization for performance by default.\nSOURCE: https://github.com/geoman-io/maplibre-geoman-examples/blob/master/maplibre-geoman-angular/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Parser Options for ESLint\nDESCRIPTION: Sets up the parserOptions property in the ESLint configuration to enable type-aware linting rules. It specifies project paths for TypeScript configuration files and sets the root directory.\nSOURCE: https://github.com/geoman-io/maplibre-geoman-examples/blob/master/maplibre-geoman-react/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: ['./tsconfig.node.json', './tsconfig.app.json'],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Command to execute unit tests using the Karma test runner. This runs all tests defined in the spec files throughout the application.\nSOURCE: https://github.com/geoman-io/maplibre-geoman-examples/blob/master/maplibre-geoman-angular/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Running Angular End-to-End Tests\nDESCRIPTION: Command to execute end-to-end tests for the Angular application. Note that Angular CLI doesn't include an e2e testing framework by default, so one must be installed separately.\nSOURCE: https://github.com/geoman-io/maplibre-geoman-examples/blob/master/maplibre-geoman-angular/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Displaying Angular CLI Help Information\nDESCRIPTION: Command to show available Angular CLI generation options including components, directives, pipes, and more. Useful for exploring all available code scaffolding capabilities.\nSOURCE: https://github.com/geoman-io/maplibre-geoman-examples/blob/master/maplibre-geoman-angular/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng generate --help\n```\n\n----------------------------------------\n\nTITLE: Creating External Store for HMR State Preservation in Svelte\nDESCRIPTION: A simple example of creating an external store in Svelte to preserve component state during Hot Module Replacement (HMR). This approach helps avoid state loss issues that commonly occur with HMR in Svelte applications.\nSOURCE: https://github.com/geoman-io/maplibre-geoman-examples/blob/master/maplibre-geoman-svelte/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// store.ts\n// An extremely simple external store\nimport { writable } from 'svelte/store'\nexport default writable(0)\n```\n\n----------------------------------------\n\nTITLE: Creating External Store in Svelte TypeScript\nDESCRIPTION: Demonstrates how to create a simple external store in Svelte to preserve component state during Hot Module Replacement (HMR). The store uses Svelte's writable store pattern for state management.\nSOURCE: https://github.com/geoman-io/maplibre-geoman-examples/blob/master/mapbox-geoman-svelte/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// store.ts\n// An extremely simple external store\nimport { writable } from 'svelte/store'\nexport default writable(0)\n```"
  }
]