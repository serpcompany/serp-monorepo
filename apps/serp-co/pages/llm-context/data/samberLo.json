[
  {
    "owner": "samber",
    "repo": "lo",
    "content": "TITLE: Using Lo's Parallel Map Function for Concurrent Processing\nDESCRIPTION: Example demonstrating the parallel version of Map function which processes elements concurrently in goroutines while maintaining the original order in the result.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport lop \"github.com/samber/lo/parallel\"\n\nlop.Map([]int64{1, 2, 3, 4}, func(x int64, _ int) string {\n    return strconv.FormatInt(x, 10)\n})\n// []string{\"1\", \"2\", \"3\", \"4\"}\n```\n\n----------------------------------------\n\nTITLE: Function Retry in Go with Attempt\nDESCRIPTION: Attempt invokes a function repeatedly until it succeeds or reaches a maximum number of attempts. Returns the iteration count and error (if any).\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_198\n\nLANGUAGE: go\nCODE:\n```\niter, err := lo.Attempt(42, func(i int) error {\n    if i == 5 {\n        return nil\n    }\n\n    return fmt.Errorf(\"failed\")\n})\n// 6\n// nil\n\niter, err := lo.Attempt(2, func(i int) error {\n    if i == 5 {\n        return nil\n    }\n\n    return fmt.Errorf(\"failed\")\n})\n// 2\n// error \"failed\"\n\niter, err := lo.Attempt(0, func(i int) error {\n    if i < 42 {\n        return fmt.Errorf(\"failed\")\n    }\n\n    return nil\n})\n// 43\n// nil\n```\n\n----------------------------------------\n\nTITLE: Using Lo's Map Function to Transform Types\nDESCRIPTION: Example showing how to use Lo's Map function to transform a slice of int64 values into string representations. The mapper function receives both the element and its index.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/samber/lo\"\n\nlo.Map([]int64{1, 2, 3, 4}, func(x int64, index int) string {\n    return strconv.FormatInt(x, 10)\n})\n// []string{\"1\", \"2\", \"3\", \"4\"}\n```\n\n----------------------------------------\n\nTITLE: Checking for Nil Values with IsNil in Go\nDESCRIPTION: Checks if a value is nil or if it's a reference type with a nil underlying value. Works with interfaces that contain nil values, which is different from a direct nil check.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_175\n\nLANGUAGE: go\nCODE:\n```\nvar x int\nlo.IsNil(x)\n// false\n\nvar k struct{}\nlo.IsNil(k)\n// false\n\nvar i *int\nlo.IsNil(i)\n// true\n\nvar ifaceWithNilValue any = (*string)(nil)\nlo.IsNil(ifaceWithNilValue)\n// true\nifaceWithNilValue == nil\n// false\n```\n\n----------------------------------------\n\nTITLE: Implementing Saga Pattern Transactions in Go\nDESCRIPTION: Implements the Saga pattern for distributed transactions with compensation actions for rollback.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_207\n\nLANGUAGE: go\nCODE:\n```\ntransaction := NewTransaction().\n    Then(\n        func(state int) (int, error) {\n            fmt.Println(\"step 1\")\n            return state + 10, nil\n        },\n        func(state int) int {\n            fmt.Println(\"rollback 1\")\n            return state - 10\n        },\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Generator Pattern in Go with Lo Library\nDESCRIPTION: Shows how to implement the generator design pattern using the Generator function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_108\n\nLANGUAGE: go\nCODE:\n```\ngenerator := func(yield func(int)) {\n    yield(1)\n    yield(2)\n    yield(3)\n}\n\nfor v := range lo.Generator(2, generator) {\n    println(v)\n}\n// prints 1, then 2, then 3\n```\n\n----------------------------------------\n\nTITLE: Debouncing Functions in Go with NewDebounce\nDESCRIPTION: NewDebounce creates a debounced function that delays invoking the provided function until after a specified wait time has elapsed since the last call. Returns the debounced function and a cancel function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_202\n\nLANGUAGE: go\nCODE:\n```\nf := func() {\n    println(\"Called once after 100ms when debounce stopped invoking!\")\n}\n\ndebounce, cancel := lo.NewDebounce(100 * time.Millisecond, f)\nfor j := 0; j < 10; j++ {\n    debounce()\n}\n\ntime.Sleep(1 * time.Second)\ncancel()\n```\n\n----------------------------------------\n\nTITLE: Implementing Ternary Operation with Functions in Go\nDESCRIPTION: Provides a one-line if/else statement functionality with function options. Evaluates only the function corresponding to the condition result, which helps avoid nil-pointer dereferencing or unnecessary code execution.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_167\n\nLANGUAGE: go\nCODE:\n```\nresult := lo.TernaryF(true, func() string { return \"a\" }, func() string { return \"b\" })\n// \"a\"\n\nresult := lo.TernaryF(false, func() string { return \"a\" }, func() string { return \"b\" })\n// \"b\"\n```\n\n----------------------------------------\n\nTITLE: Polling with WaitFor Functions in Go\nDESCRIPTION: Implements polling functionality to periodically check conditions with timeout support and context cancellation.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_208\n\nLANGUAGE: go\nCODE:\n```\niterations, duration, ok := lo.WaitFor(alwaysTrue, 10*time.Millisecond, 2 * time.Millisecond)\n// 1\n// 1ms\n// true\n\niterations, duration, ok := lo.WaitFor(alwaysFalse, 10*time.Millisecond, time.Millisecond)\n// 10 \n// 10ms\n// false\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Maps in Go\nDESCRIPTION: Assign merges multiple maps from left to right, with later maps' values taking precedence over earlier ones in case of key collisions. This is useful for combining configuration or parameter maps.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_71\n\nLANGUAGE: go\nCODE:\n```\nmergedMaps := lo.Assign(\n    map[string]int{\"a\": 1, \"b\": 2},\n    map[string]int{\"b\": 3, \"c\": 4},\n)\n// map[string]int{\"a\": 1, \"b\": 3, \"c\": 4}\n```\n\n----------------------------------------\n\nTITLE: Using Reduce for Slice Operations in Go\nDESCRIPTION: Reduce combines slice elements into a single value by applying an accumulator function to each element. Each invocation receives the previous accumulated value.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nsum := lo.Reduce([]int{1, 2, 3, 4}, func(agg int, item int, _ int) int {\n    return agg + item\n}, 0)\n// 10\n```\n\n----------------------------------------\n\nTITLE: Implementing If-ElseIf-Else Chain in Go\nDESCRIPTION: Provides a fluent API for if/elseif/else conditional logic, returning the value associated with the first true condition or the else value if no conditions are met.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_169\n\nLANGUAGE: go\nCODE:\n```\nresult := lo.If(true, 1).\n    ElseIf(false, 2).\n    Else(3)\n// 1\n\nresult := lo.If(false, 1).\n    ElseIf(true, 2).\n    Else(3)\n// 2\n\nresult := lo.If(false, 1).\n    ElseIf(false, 2).\n    Else(3)\n// 3\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch-Case-Default with Functions in Go\nDESCRIPTION: Provides a fluent API for switch/case/default conditional logic with function callbacks, evaluating only the function associated with the matching case or the default function if no cases match.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_173\n\nLANGUAGE: go\nCODE:\n```\nresult := lo.Switch(1).\n    CaseF(1, func() string {\n        return \"1\"\n    }).\n    CaseF(2, func() string {\n        return \"2\"\n    }).\n    DefaultF(func() string {\n        return \"3\"\n    })\n// \"1\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Function Retry in Go with AttemptWhile\nDESCRIPTION: AttemptWhile invokes a function repeatedly with early termination capability based on the second boolean return value. Continues until success, max attempts, or explicit termination.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_200\n\nLANGUAGE: go\nCODE:\n```\ncount1, err1 := lo.AttemptWhile(5, func(i int) (error, bool) {\n    err := doMockedHTTPRequest(i)\n    if err != nil {\n        if errors.Is(err, ErrBadRequest) { // lets assume ErrBadRequest is a critical error that needs to terminate the invoke\n            return err, false // flag the second return value as false to terminate the invoke\n        }\n\n        return err, true\n    }\n\n    return nil, false\n})\n```\n\n----------------------------------------\n\nTITLE: Function Retry with Delay in Go using AttemptWithDelay\nDESCRIPTION: AttemptWithDelay invokes a function repeatedly with a specified delay between attempts until it succeeds or reaches a maximum number of attempts. Returns iteration count, duration, and error (if any).\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_199\n\nLANGUAGE: go\nCODE:\n```\niter, duration, err := lo.AttemptWithDelay(5, 2*time.Second, func(i int, duration time.Duration) error {\n    if i == 2 {\n        return nil\n    }\n\n    return fmt.Errorf(\"failed\")\n})\n// 3\n// ~ 4 seconds\n// nil\n```\n\n----------------------------------------\n\nTITLE: Executing Async Operations with Channels in Go\nDESCRIPTION: Launches functions asynchronously in goroutines and returns results through channels. Supports functions with 0-6 return values.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_206\n\nLANGUAGE: go\nCODE:\n```\nch := lo.Async0(func() { time.Sleep(10 * time.Second) })\n// chan struct{}\n\nch := lo.Async1(func() int {\n  time.Sleep(10 * time.Second);\n  return 42\n})\n// chan int (42)\n\nch := lo.Async2(func() (int, string) {\n  time.Sleep(10 * time.Second);\n  return 42, \"Hello\"\n})\n// chan lo.Tuple2[int, string] ({42, \"Hello\"})\n```\n\n----------------------------------------\n\nTITLE: Dereferencing Pointers with Fallback using FromPtrOr in Go\nDESCRIPTION: Returns the pointer value or a specified fallback value if the pointer is nil. Provides a safe way to dereference pointers with custom fallback values.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_181\n\nLANGUAGE: go\nCODE:\n```\nstr := \"hello world\"\nvalue := lo.FromPtrOr(&str, \"empty\")\n// \"hello world\"\n\nvalue := lo.FromPtrOr(nil, \"empty\")\n// \"empty\"\n```\n\n----------------------------------------\n\nTITLE: Throttling Function Calls in Go with Throttle Functions\nDESCRIPTION: Various throttle functions that limit execution frequency for operations. Includes basic throttling, count-limited throttling, and key-based throttling variants.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_204\n\nLANGUAGE: go\nCODE:\n```\nf := func() {\n\tprintln(\"Called once in every 100ms\")\n}\n\nthrottle, reset := lo.NewThrottle(100 * time.Millisecond, f)\n\nfor j := 0; j < 10; j++ {\n\tthrottle()\n\ttime.Sleep(30 * time.Millisecond)\n}\n\nreset()\nthrottle()\n```\n\nLANGUAGE: go\nCODE:\n```\nf := func() {\n\tprintln(\"Called three times in every 100ms\")\n}\n\nthrottle, reset := lo.NewThrottleWithCount(100 * time.Millisecond, f)\n\nfor j := 0; j < 10; j++ {\n\tthrottle()\n\ttime.Sleep(30 * time.Millisecond)\n}\n\nreset()\nthrottle()\n```\n\nLANGUAGE: go\nCODE:\n```\nf := func(key string) {\n\tprintln(key, \"Called three times in every 100ms\")\n}\n\nthrottle, reset := lo.NewThrottleByWithCount(100 * time.Millisecond, f)\n\nfor j := 0; j < 10; j++ {\n\tthrottle(\"foo\")\n\ttime.Sleep(30 * time.Millisecond)\n}\n\nreset()\nthrottle()\n```\n\n----------------------------------------\n\nTITLE: Using FilterMap for Slices in Go\nDESCRIPTION: FilterMap returns a new slice after both filtering and mapping using a callback function. The callback returns both the mapped value and a boolean indicating inclusion.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmatching := lo.FilterMap([]string{\"cpu\", \"gpu\", \"mouse\", \"keyboard\"}, func(x string, _ int) (string, bool) {\n    if strings.HasSuffix(x, \"pu\") {\n        return \"xpu\", true\n    }\n    return \"\", false\n})\n// []string{\"xpu\", \"xpu\"}\n```\n\n----------------------------------------\n\nTITLE: Using Parallel ForEach for Slice Iteration in Go\nDESCRIPTION: The parallel version of ForEach processes each element in a goroutine, enabling concurrent execution but with non-deterministic order of processing.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nimport lop \"github.com/samber/lo/parallel\"\n\nlop.ForEach([]string{\"hello\", \"world\"}, func(x string, _ int) {\n    println(x)\n})\n// prints \"hello\\nworld\\n\" or \"world\\nhello\\n\"\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Channel Messages in Go with Lo Library\nDESCRIPTION: Demonstrates how to broadcast all upstream messages to multiple downstream channels using the FanOut function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_113\n\nLANGUAGE: go\nCODE:\n```\nstream := make(chan int, 42)\n\nall := lo.FanOut(5, 100, stream)\n// [5]<-chan int\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutex-Based Synchronization in Go\nDESCRIPTION: Wraps callbacks in a mutex for sequential execution. Provides synchronized access to shared resources across goroutines.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_205\n\nLANGUAGE: go\nCODE:\n```\ns := lo.Synchronize()\n\nfor i := 0; i < 10; i++ {\n    go s.Do(func () {\n        println(\"will be called sequentially\")\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Set with Keyify in Go\nDESCRIPTION: Converts a slice to a map where each unique element becomes a key with an empty struct as value, essentially creating a set data structure.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_35\n\nLANGUAGE: go\nCODE:\n```\nset := lo.Keyify([]int{1, 1, 2, 3, 4})\n// map[int]struct{}{1:{}, 2:{}, 3:{}, 4:{}}\n```\n\n----------------------------------------\n\nTITLE: Implementing If-ElseIf-Else Chain with Functions in Go\nDESCRIPTION: Provides a fluent API for if/elseif/else conditional logic with function callbacks, evaluating only the function associated with the first true condition or the else function if no conditions are met.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_170\n\nLANGUAGE: go\nCODE:\n```\nresult := lo.IfF(true, func () int {\n        return 1\n    }).\n    ElseIfF(false, func () int {\n        return 2\n    }).\n    ElseF(func () int {\n        return 3\n    })\n// 1\n```\n\n----------------------------------------\n\nTITLE: Implementing Ternary Operation in Go\nDESCRIPTION: Provides a one-line if/else statement functionality. Returns the first value if the condition is true, otherwise returns the second value. Both expressions are evaluated regardless of the condition.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_166\n\nLANGUAGE: go\nCODE:\n```\nresult := lo.Ternary(true, \"a\", \"b\")\n// \"a\"\n\nresult := lo.Ternary(false, \"a\", \"b\")\n// \"b\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Function Retry with Delay in Go using AttemptWhileWithDelay\nDESCRIPTION: AttemptWhileWithDelay invokes a function repeatedly with delays and early termination capability. Continues until success, max attempts, or explicit termination.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_201\n\nLANGUAGE: go\nCODE:\n```\ncount1, time1, err1 := lo.AttemptWhileWithDelay(5, time.Millisecond, func(i int, d time.Duration) (error, bool) {\n    err := doMockedHTTPRequest(i)\n    if err != nil {\n        if errors.Is(err, ErrBadRequest) { // lets assume ErrBadRequest is a critical error that needs to terminate the invoke\n            return err, false // flag the second return value as false to terminate the invoke\n        }\n\n        return err, true\n    }\n\n    return nil, false\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch-Case-Default in Go\nDESCRIPTION: Provides a fluent API for switch/case/default conditional logic, returning the value associated with the matching case or the default value if no cases match.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_172\n\nLANGUAGE: go\nCODE:\n```\nresult := lo.Switch(1).\n    Case(1, \"1\").\n    Case(2, \"2\").\n    Default(\"3\")\n// \"1\"\n\nresult := lo.Switch(2).\n    Case(1, \"1\").\n    Case(2, \"2\").\n    Default(\"3\")\n// \"2\"\n\nresult := lo.Switch(42).\n    Case(1, \"1\").\n    Case(2, \"2\").\n    Default(\"3\")\n// \"3\"\n```\n\n----------------------------------------\n\nTITLE: Using GroupBy for Slice Categorization in Go\nDESCRIPTION: GroupBy creates a map of grouped elements based on a key generated by the iteratee function. Elements with the same key are grouped together in an array.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nimport lo \"github.com/samber/lo\"\n\ngroups := lo.GroupBy([]int{0, 1, 2, 3, 4, 5}, func(i int) int {\n    return i%3\n})\n// map[int][]int{0: []int{0, 3}, 1: []int{1, 4}, 2: []int{2, 5}}\n```\n\n----------------------------------------\n\nTITLE: Using Find to search for an element using a predicate in Go\nDESCRIPTION: Find searches an element in a slice based on a predicate. It returns the element and true if the element was found, otherwise it returns the zero value and false.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_131\n\nLANGUAGE: go\nCODE:\n```\nstr, ok := lo.Find([]string{\"a\", \"b\", \"c\", \"d\"}, func(i string) bool {\n    return i == \"b\"\n})\n// \"b\", true\n\nstr, ok := lo.Find([]string{\"foobar\"}, func(i string) bool {\n    return i == \"b\"\n})\n// \"\", false\n```\n\n----------------------------------------\n\nTITLE: Using GroupByMap for Slice Categorization with Value Transformation in Go\nDESCRIPTION: GroupByMap creates a map of grouped elements, allowing both key generation and value transformation through the iteratee function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nimport lo \"github.com/samber/lo\"\n\ngroups := lo.GroupByMap([]int{0, 1, 2, 3, 4, 5}, func(i int) (int, int) {\n    return i%3, i*2\n})\n// map[int][]int{0: []int{0, 6}, 1: []int{2, 8}, 2: []int{4, 10}}\n```\n\n----------------------------------------\n\nTITLE: Partial Function Application in Go with Partial\nDESCRIPTION: Partial returns a new function with its first argument preset to a provided value. This implements basic currying/partial application functionality.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_196\n\nLANGUAGE: go\nCODE:\n```\nadd := func(x, y int) int { return x + y }\nf := lo.Partial(add, 5)\n\nf(10)\n// 15\n\nf(42)\n// 47\n```\n\n----------------------------------------\n\nTITLE: Using KeyBy for Converting Slices to Maps in Go\nDESCRIPTION: KeyBy transforms a slice into a map where the keys are determined by a callback function. This enables efficient lookups based on specific attributes of the elements.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_32\n\nLANGUAGE: go\nCODE:\n```\nm := lo.KeyBy([]string{\"a\", \"aa\", \"aaa\"}, func(str string) int {\n    return len(str)\n})\n// map[int]string{1: \"a\", 2: \"aa\", 3: \"aaa\"}\n\ntype Character struct {\n  dir  string\n  code int\n}\ncharacters := []Character{\n    {dir: \"left\", code: 97},\n    {dir: \"right\", code: 100},\n}\nresult := lo.KeyBy(characters, func(char Character) string {\n    return string(rune(char.code))\n})\n//map[a:{dir:left code:97} d:{dir:right code:100}]\n```\n\n----------------------------------------\n\nTITLE: Using Lo's Filter Function with Integer Slices\nDESCRIPTION: Example demonstrating Lo's Filter function to select even numbers from an integer slice. The predicate function takes both the element and its index as parameters.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\neven := lo.Filter([]int{1, 2, 3, 4}, func(x int, index int) bool {\n    return x%2 == 0\n})\n// []int{2, 4}\n```\n\n----------------------------------------\n\nTITLE: Installing Lo Library in Go\nDESCRIPTION: This snippet shows how to install the Lo library using the go get command. It demonstrates the command to fetch and install the library from the GitHub repository.\nSOURCE: https://github.com/samber/lo/blob/master/img/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/samber/lo\n```\n\n----------------------------------------\n\nTITLE: Converting Slices to Pointer Slices with ToSlicePtr in Go\nDESCRIPTION: Returns a slice of pointer copies for each value in the input slice. Useful for converting value slices to pointer slices.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_182\n\nLANGUAGE: go\nCODE:\n```\nptr := lo.ToSlicePtr([]string{\"hello\", \"world\"})\n// []*string{\"hello\", \"world\"}\n```\n\n----------------------------------------\n\nTITLE: Extended Partial Function Application in Go with Partial2-5\nDESCRIPTION: Partial2 through Partial5 provide partial application for functions with more parameters, allowing fixing the first parameter's value and returning a new function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_197\n\nLANGUAGE: go\nCODE:\n```\nadd := func(x, y, z int) int { return x + y + z }\nf := lo.Partial2(add, 42)\n\nf(10, 5)\n// 57\n\nf(42, -4)\n// 80\n```\n\n----------------------------------------\n\nTITLE: Creating Pointers from Values with ToPtr in Go\nDESCRIPTION: Returns a pointer copy of the given value, useful for quickly creating pointers to values without separate variable declarations.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_177\n\nLANGUAGE: go\nCODE:\n```\nptr := lo.ToPtr(\"hello world\")\n// *string{\"hello world\"}\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Channels in Go with Lo Library\nDESCRIPTION: Shows how to merge messages from multiple input channels into a single buffered channel using the FanIn function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_112\n\nLANGUAGE: go\nCODE:\n```\nstream1 := make(chan int, 42)\nstream2 := make(chan int, 42)\nstream3 := make(chan int, 42)\n\nall := lo.FanIn(100, stream1, stream2, stream3)\n// <-chan int\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Lo Library in Go\nDESCRIPTION: This code snippet demonstrates how to import and use the Lo library in a Go program. It shows the import statement and a basic example of using the Filter function from the library.\nSOURCE: https://github.com/samber/lo/blob/master/img/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/samber/lo\"\n    \"github.com/samber/lo/parallel\"\n)\n\neven := lo.Filter([]int{1, 2, 3, 4}, func(x int, _ int) bool {\n    return x%2 == 0\n})\n```\n\n----------------------------------------\n\nTITLE: Using Some to check if any elements of a subset exist in a collection in Go\nDESCRIPTION: Some returns true if at least one element of a subset is contained in a collection. If the subset is empty, Some returns false. It checks for any overlap between two slices.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_118\n\nLANGUAGE: go\nCODE:\n```\nok := lo.Some([]int{0, 1, 2, 3, 4, 5}, []int{0, 6})\n// true\n\nok := lo.Some([]int{0, 1, 2, 3, 4, 5}, []int{-1, 6})\n// false\n```\n\n----------------------------------------\n\nTITLE: Checking Element Presence in Collection in Go with Lo Library\nDESCRIPTION: Shows how to check if an element is present in a collection using the Contains function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_114\n\nLANGUAGE: go\nCODE:\n```\npresent := lo.Contains([]int{0, 1, 2, 3, 4, 5}, 5)\n// true\n```\n\n----------------------------------------\n\nTITLE: Buffering Channel Data in Go with Lo Library\nDESCRIPTION: Demonstrates how to create a slice of n elements from a channel using the Buffer function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_109\n\nLANGUAGE: go\nCODE:\n```\nch := lo.SliceToChannel(2, []int{1, 2, 3, 4, 5})\n\nitems1, length1, duration1, ok1 := lo.Buffer(ch, 3)\n// []int{1, 2, 3}, 3, 0s, true\nitems2, length2, duration2, ok2 := lo.Buffer(ch, 3)\n// []int{4, 5}, 2, 0s, false\n```\n\n----------------------------------------\n\nTITLE: Channel Dispatcher in Go with Lo Library\nDESCRIPTION: Demonstrates how to distribute messages from input channels into multiple child channels using the ChannelDispatcher function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_105\n\nLANGUAGE: go\nCODE:\n```\nch := make(chan int, 42)\nfor i := 0; i <= 10; i++ {\n    ch <- i\n}\n\nchildren := lo.ChannelDispatcher(ch, 5, 10, DispatchingStrategyRoundRobin[int])\n// []<-chan int{...}\n\nconsumer := func(c <-chan int) {\n    for {\n        msg, ok := <-c\n        if !ok {\n            println(\"closed\")\n\n            break\n        }\n\n        println(msg)\n    }\n}\n\nfor i := range children {\n    go consumer(children[i])\n}\n```\n\n----------------------------------------\n\nTITLE: Using FlatMap for Slices in Go\nDESCRIPTION: FlatMap transforms and flattens a slice into a slice of another type. The transform function returns a slice, and nil values are not added to the final result.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nlo.FlatMap([]int64{0, 1, 2}, func(x int64, _ int) []string {\n    return []string{\n        strconv.FormatInt(x, 10),\n        strconv.FormatInt(x, 10),\n    }\n})\n// []string{\"0\", \"0\", \"1\", \"1\", \"2\", \"2\"}\n```\n\n----------------------------------------\n\nTITLE: Using ForEachWhile for Conditional Iteration in Go\nDESCRIPTION: ForEachWhile iterates over collection elements and continues only while the callback returns true, allowing early termination of the iteration based on a condition.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nlist := []int64{1, 2, -42, 4}\n\nlo.ForEachWhile(list, func(x int64, _ int) bool {\n\tif x < 0 {\n\t\treturn false\n\t}\n\tfmt.Println(x)\n\treturn true\n})\n// 1\n// 2\n```\n\n----------------------------------------\n\nTITLE: Using MinIndexBy for custom minimum value and index in Go\nDESCRIPTION: MinIndexBy searches for the minimum value in a collection using a custom comparison function and returns both the value and its index. If several values match, it returns the first such value.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_144\n\nLANGUAGE: go\nCODE:\n```\nmin, index := lo.MinIndexBy([]string{\"s1\", \"string2\", \"s3\"}, func(item string, min string) bool {\n    return len(item) < len(min)\n})\n// \"s1\", 0\n\nmin, index := lo.MinIndexBy([]string{}, func(item string, min string) bool {\n    return len(item) < len(min)\n})\n// \"\", -1\n```\n\n----------------------------------------\n\nTITLE: Counting Value Frequencies with CountValues in Go\nDESCRIPTION: Creates a map counting the occurrences of each unique element in a collection.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_46\n\nLANGUAGE: go\nCODE:\n```\nlo.CountValues([]int{})\n// map[int]int{}\n\nlo.CountValues([]int{1, 2})\n// map[int]int{1: 1, 2: 1}\n\nlo.CountValues([]int{1, 2, 2})\n// map[int]int{1: 1, 2: 2}\n\nlo.CountValues([]string{\"foo\", \"bar\", \"\"})\n// map[string]int{\"\": 1, \"foo\": 1, \"bar\": 1}\n\nlo.CountValues([]string{\"foo\", \"bar\", \"bar\"})\n// map[string]int{\"foo\": 1, \"bar\": 2}\n```\n\n----------------------------------------\n\nTITLE: Using Parallel Times for Concurrent Operation Generation in Go\nDESCRIPTION: The parallel version of Times runs each iteration in a goroutine, providing concurrent execution while maintaining output order in the final result.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nimport lop \"github.com/samber/lo/parallel\"\n\nlop.Times(3, func(i int) string {\n    return strconv.FormatInt(int64(i), 10)\n})\n// []string{\"0\", \"1\", \"2\"}\n```\n\n----------------------------------------\n\nTITLE: Filtering Out Elements with Reject in Go\nDESCRIPTION: The opposite of Filter, returns elements that do not satisfy the predicate function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_41\n\nLANGUAGE: go\nCODE:\n```\nodd := lo.Reject([]int{1, 2, 3, 4}, func(x int, _ int) bool {\n    return x%2 == 0\n})\n// []int{1, 3}\n```\n\n----------------------------------------\n\nTITLE: Using FindLastIndexOf to search for last matching element with index in Go\nDESCRIPTION: FindLastIndexOf searches an element in a slice based on a predicate and returns the last matching element, its index, and true. It returns zero value, -1, and false if no matching element is found.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_133\n\nLANGUAGE: go\nCODE:\n```\nstr, index, ok := lo.FindLastIndexOf([]string{\"a\", \"b\", \"a\", \"b\"}, func(i string) bool {\n    return i == \"b\"\n})\n// \"b\", 4, true\n\nstr, index, ok := lo.FindLastIndexOf([]string{\"foobar\"}, func(i string) bool {\n    return i == \"b\"\n})\n// \"\", -1, false\n```\n\n----------------------------------------\n\nTITLE: Filtering Maps by Keys in Go\nDESCRIPTION: PickByKeys returns a new map containing only the entries with keys that match the provided list of keys. This allows for selective extraction of map entries based on their keys.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_63\n\nLANGUAGE: go\nCODE:\n```\nm := lo.PickByKeys(map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3}, []string{\"foo\", \"baz\"})\n// map[string]int{\"foo\": 1, \"baz\": 3}\n```\n\n----------------------------------------\n\nTITLE: Using FindOrElse with fallback values in Go\nDESCRIPTION: FindOrElse searches an element in a slice based on a predicate and returns the element if found or a given fallback value otherwise. It provides a way to handle the case when no element is found.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_134\n\nLANGUAGE: go\nCODE:\n```\nstr := lo.FindOrElse([]string{\"a\", \"b\", \"c\", \"d\"}, \"x\", func(i string) bool {\n    return i == \"b\"\n})\n// \"b\"\n\nstr := lo.FindOrElse([]string{\"foobar\"}, \"x\", func(i string) bool {\n    return i == \"b\"\n})\n// \"x\"\n```\n\n----------------------------------------\n\nTITLE: Converting Map to Key-Value Pairs in Go\nDESCRIPTION: Entries (alias: ToPairs) transforms a map into an array of key/value pairs represented as Entry structs. This is useful for ordered iteration or manipulating the map as a collection.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_68\n\nLANGUAGE: go\nCODE:\n```\nentries := lo.Entries(map[string]int{\"foo\": 1, \"bar\": 2})\n// []lo.Entry[string, int]{\n//     {\n//         Key: \"foo\",\n//         Value: 1,\n//     },\n//     {\n//         Key: \"bar\",\n//         Value: 2,\n//     },\n// }\n```\n\n----------------------------------------\n\nTITLE: Transforming Map Values in Go\nDESCRIPTION: MapValues manipulates a map's values and transforms it to a map of potentially different value type. It applies a transformation function to each value-key pair to generate new values.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_74\n\nLANGUAGE: go\nCODE:\n```\nm1 := map[int]int64{1: 1, 2: 2, 3: 3}\n\nm2 := lo.MapValues(m1, func(x int64, _ int) string {\n    return strconv.FormatInt(x, 10)\n})\n// map[int]string{1: \"1\", 2: \"2\", 3: \"3\"}\n```\n\n----------------------------------------\n\nTITLE: Coalescing Maps in Go with CoalesceMap\nDESCRIPTION: CoalesceMap returns the first non-empty map from a list of maps. Returns the map and a boolean indicating if a non-empty map was found.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_194\n\nLANGUAGE: go\nCODE:\n```\nresult, ok := lo.CoalesceMap(map[string]int{\"1\": 1, \"2\": 2, \"3\": 3}, map[string]int{\"4\": 4, \"5\": 5, \"6\": 6})\n// {\"1\": 1, \"2\": 2, \"3\": 3}\n// true\n\nresult, ok := lo.CoalesceMap(nil, map[string]int{})\n// {}\n// true\n\nresult, ok := lo.CoalesceMap(map[string]int(nil))\n// {}\n// false\n```\n\n----------------------------------------\n\nTITLE: Transforming Map Entries in Go\nDESCRIPTION: MapEntries manipulates a map's entries and transforms it to a map of potentially different key and value types. It applies a transformation function to each key-value pair to generate new entries.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_75\n\nLANGUAGE: go\nCODE:\n```\nin := map[string]int{\"foo\": 1, \"bar\": 2}\n\nout := lo.MapEntries(in, func(k string, v int) (int, string) {\n    return v,k\n})\n// map[int]string{1: \"foo\", 2: \"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Using Chunk for Splitting Slices into Groups in Go\nDESCRIPTION: Chunk divides a slice into groups of specified size. If the slice can't be split evenly, the final chunk contains the remaining elements.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nlo.Chunk([]int{0, 1, 2, 3, 4, 5}, 2)\n// [][]int{{0, 1}, {2, 3}, {4, 5}}\n\nlo.Chunk([]int{0, 1, 2, 3, 4, 5, 6}, 2)\n// [][]int{{0, 1}, {2, 3}, {4, 5}, {6}}\n\nlo.Chunk([]int{}, 2)\n// [][]int{}\n\nlo.Chunk([]int{0}, 2)\n// [][]int{{0}}\n```\n\n----------------------------------------\n\nTITLE: Checking for Empty Values in Go with IsEmpty\nDESCRIPTION: IsEmpty checks if a value equals its zero value, working with primitive types and structs. Useful for validating if a value has been initialized.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_188\n\nLANGUAGE: go\nCODE:\n```\nlo.IsEmpty(0)\n// true\nlo.IsEmpty(42)\n// false\n\nlo.IsEmpty(\"\")\n// true\nlo.IsEmpty(\"foobar\")\n// false\n\ntype test struct {\n    foobar string\n}\n\nlo.IsEmpty(test{foobar: \"\"})\n// true\nlo.IsEmpty(test{foobar: \"foobar\"})\n// false\n```\n\n----------------------------------------\n\nTITLE: Converting Map to Slice in Go\nDESCRIPTION: MapToSlice transforms a map into a slice by applying a transformation function to each key-value pair. The function determines how to represent each entry in the resulting slice.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_76\n\nLANGUAGE: go\nCODE:\n```\nm := map[int]int64{1: 4, 2: 5, 3: 6}\n\ns := lo.MapToSlice(m, func(k int, v int64) string {\n    return fmt.Sprintf(\"%d_%d\", k, v)\n})\n// []string{\"1_4\", \"2_5\", \"3_6\"}\n```\n\n----------------------------------------\n\nTITLE: Using PartitionBy for Dynamic Slice Grouping in Go\nDESCRIPTION: PartitionBy splits a slice into groups based on the result of running each element through the iteratee function. Elements that return the same value are grouped together.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nimport lo \"github.com/samber/lo\"\n\npartitions := lo.PartitionBy([]int{-2, -1, 0, 1, 2, 3, 4, 5}, func(x int) string {\n    if x < 0 {\n        return \"negative\"\n    } else if x%2 == 0 {\n        return \"even\"\n    }\n    return \"odd\"\n})\n// [][]int{{-2, -1}, {0, 2, 4}, {1, 3, 5}}\n```\n\n----------------------------------------\n\nTITLE: Filtering Maps by Predicate in Go\nDESCRIPTION: PickBy returns a new map containing only the entries that satisfy the given predicate function. The function tests each key-value pair against the condition to determine inclusion.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_62\n\nLANGUAGE: go\nCODE:\n```\nm := lo.PickBy(map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3}, func(key string, value int) bool {\n    return value%2 == 1\n})\n// map[string]int{\"foo\": 1, \"baz\": 3}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Try Functions in Go\nDESCRIPTION: Provides error handling utilities that catch panics and errors, with support for default values and custom error handling.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_209\n\nLANGUAGE: go\nCODE:\n```\nok := lo.Try(func() error {\n    panic(\"error\")\n    return nil\n})\n// false\n\nok := lo.Try(func() error {\n    return nil\n})\n// true\n```\n\n----------------------------------------\n\nTITLE: Using FindKeyBy with predicate function for maps in Go\nDESCRIPTION: FindKeyBy returns the key of the first element for which the predicate returns true. It allows searching a map based on a condition involving both key and value.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_136\n\nLANGUAGE: go\nCODE:\n```\nresult1, ok1 := lo.FindKeyBy(map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3}, func(k string, v int) bool {\n    return k == \"foo\"\n})\n// \"foo\", true\n\nresult2, ok2 := lo.FindKeyBy(map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3}, func(k string, v int) bool {\n    return false\n})\n// \"\", false\n```\n\n----------------------------------------\n\nTITLE: Clamping Numbers within Bounds in Go\nDESCRIPTION: Clamp constrains a number to fall within the inclusive lower and upper bounds. It returns the lower bound if the value is less than it, the upper bound if the value is greater than it, or the value itself if it's within range.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_78\n\nLANGUAGE: go\nCODE:\n```\nr1 := lo.Clamp(0, -10, 10)\n// 0\n\nr2 := lo.Clamp(-42, -10, 10)\n// -10\n\nr3 := lo.Clamp(42, -10, 10)\n// 10\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value and Index with Custom Comparison using MaxIndexBy in Go\nDESCRIPTION: Searches for the maximum value and its index in a collection using a custom comparison function. Returns the first maximum value if multiple exist, or (zero value, -1) when the collection is empty.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_150\n\nLANGUAGE: go\nCODE:\n```\nmax, index := lo.MaxIndexBy([]string{\"string1\", \"s2\", \"string3\"}, func(item string, max string) bool {\n    return len(item) > len(max)\n})\n// \"string1\", 0\n\nmax, index := lo.MaxIndexBy([]string{}, func(item string, max string) bool {\n    return len(item) > len(max)\n})\n// \"\", -1\n```\n\n----------------------------------------\n\nTITLE: Measuring Function Execution Time in Go with Lo Library\nDESCRIPTION: Shows how to measure the execution time of a function using the Duration and Duration0 to Duration10 functions.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_104\n\nLANGUAGE: go\nCODE:\n```\nduration := lo.Duration(func() {\n    // very long job\n})\n// 3s\n```\n\nLANGUAGE: go\nCODE:\n```\nduration := lo.Duration0(func() {\n    // very long job\n})\n// 3s\n\nerr, duration := lo.Duration1(func() error {\n    // very long job\n    return fmt.Errorf(\"an error\")\n})\n// an error\n// 3s\n\nstr, nbr, err, duration := lo.Duration3(func() (string, int, error) {\n    // very long job\n    return \"hello\", 42, nil\n})\n// hello\n// 42\n// nil\n// 3s\n```\n\n----------------------------------------\n\nTITLE: Dereferencing Pointers with FromPtr in Go\nDESCRIPTION: Returns the pointer value or the zero value of the type if the pointer is nil. Provides a safe way to dereference pointers without checking for nil first.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_180\n\nLANGUAGE: go\nCODE:\n```\nstr := \"hello world\"\nvalue := lo.FromPtr(&str)\n// \"hello world\"\n\nvalue := lo.FromPtr(nil)\n// \"\"\n```\n\n----------------------------------------\n\nTITLE: Mixing Function and Value Returns in If-Else Chain in Go\nDESCRIPTION: Shows how to mix function and direct value returns in the If-ElseIf-Else chain for flexible conditional logic.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_171\n\nLANGUAGE: go\nCODE:\n```\nresult := lo.IfF(true, func () int {\n        return 1\n    }).\n    Else(42)\n// 1\n```\n\n----------------------------------------\n\nTITLE: Using FindIndexOf to search and return element with index in Go\nDESCRIPTION: FindIndexOf searches an element in a slice based on a predicate and returns the element, its index, and true if found. It returns zero value, -1, and false if the element is not found.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_132\n\nLANGUAGE: go\nCODE:\n```\nstr, index, ok := lo.FindIndexOf([]string{\"a\", \"b\", \"a\", \"b\"}, func(i string) bool {\n    return i == \"b\"\n})\n// \"b\", 1, true\n\nstr, index, ok := lo.FindIndexOf([]string{\"foobar\"}, func(i string) bool {\n    return i == \"b\"\n})\n// \"\", -1, false\n```\n\n----------------------------------------\n\nTITLE: Using MinBy to find minimum value using custom comparison in Go\nDESCRIPTION: MinBy searches for the minimum value in a collection using the given comparison function. If several values are equal to the smallest value, it returns the first such value.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_143\n\nLANGUAGE: go\nCODE:\n```\nmin := lo.MinBy([]string{\"s1\", \"string2\", \"s3\"}, func(item string, min string) bool {\n    return len(item) < len(min)\n})\n// \"s1\"\n\nmin := lo.MinBy([]string{}, func(item string, min string) bool {\n    return len(item) < len(min)\n})\n// \"\"\n```\n\n----------------------------------------\n\nTITLE: Using UniqMap for Slices in Go\nDESCRIPTION: UniqMap transforms a slice to another type with unique values based on a mapping function. This example converts a slice of User structs to unique names.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n    Name string\n    Age  int\n}\nusers := []User{{Name: \"Alex\", Age: 10}, {Name: \"Alex\", Age: 12}, {Name: \"Bob\", Age: 11}, {Name: \"Alice\", Age: 20}}\n\nnames := lo.UniqMap(users, func(u User, index int) string {\n    return u.Name\n})\n// []string{\"Alex\", \"Bob\", \"Alice\"}\n```\n\n----------------------------------------\n\nTITLE: Checking for Non-Empty Values in Go with IsNotEmpty\nDESCRIPTION: IsNotEmpty is the inverse of IsEmpty, returning true when a value is not equal to its zero value. Works with primitive types and structs.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_189\n\nLANGUAGE: go\nCODE:\n```\nlo.IsNotEmpty(0)\n// false\nlo.IsNotEmpty(42)\n// true\n\nlo.IsNotEmpty(\"\")\n// false\nlo.IsNotEmpty(\"foobar\")\n// true\n\ntype test struct {\n    foobar string\n}\n\nlo.IsNotEmpty(test{foobar: \"\"})\n// false\nlo.IsNotEmpty(test{foobar: \"foobar\"})\n// true\n```\n\n----------------------------------------\n\nTITLE: Removing Zero Values with Compact in Go\nDESCRIPTION: Returns a slice with all zero or empty values removed, keeping only non-zero elements.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_52\n\nLANGUAGE: go\nCODE:\n```\nin := []string{\"\", \"foo\", \"\", \"bar\", \"\"}\n\nslice := lo.Compact(in)\n// []string{\"foo\", \"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Filtering Slice to Map with FilterSliceToMap in Go\nDESCRIPTION: Creates a map from a slice by applying a transform function that returns a key, value, and boolean indicating whether to include the pair in the result map.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_34\n\nLANGUAGE: go\nCODE:\n```\nlist := []string{\"a\", \"aa\", \"aaa\"}\n\nresult := lo.FilterSliceToMap(list, func(str string) (string, int, bool) {\n    return str, len(str), len(str) > 1\n})\n// map[string][int]{\"aa\":2 \"aaa\":3}\n```\n\n----------------------------------------\n\nTITLE: Using Difference to find elements unique to each collection in Go\nDESCRIPTION: Difference returns the differences between two collections. The first return value contains elements in first slice but not second slice, while the second return value contains elements in second slice but not first slice.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_123\n\nLANGUAGE: go\nCODE:\n```\nleft, right := lo.Difference([]int{0, 1, 2, 3, 4, 5}, []int{0, 2, 6})\n// []int{1, 3, 4, 5}, []int{6}\n\nleft, right := lo.Difference([]int{0, 1, 2, 3, 4, 5}, []int{0, 1, 2, 3, 4, 5})\n// []int{}, []int{}\n```\n\n----------------------------------------\n\nTITLE: Using Lo's Uniq Function with String Slices\nDESCRIPTION: Example showing how to use Lo's Uniq function to remove duplicate elements from a string slice. The function returns a new slice with unique values.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nnames := lo.Uniq([]string{\"Samuel\", \"John\", \"Samuel\"})\n// []string{\"Samuel\", \"John\"}\n```\n\n----------------------------------------\n\nTITLE: Using ContainsBy to check for element existence in Go\nDESCRIPTION: ContainsBy returns true if the predicate function returns true for any element in the collection. It's used to check if an element matching specific criteria exists in a slice.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_115\n\nLANGUAGE: go\nCODE:\n```\npresent := lo.ContainsBy([]int{0, 1, 2, 3, 4, 5}, func(x int) bool {\n    return x == 3\n})\n// true\n```\n\n----------------------------------------\n\nTITLE: Coalescing Non-Empty Values in Go with Coalesce\nDESCRIPTION: Coalesce returns the first non-empty value from a list of arguments. Returns the value and a boolean indicating if a non-empty value was found.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_190\n\nLANGUAGE: go\nCODE:\n```\nresult, ok := lo.Coalesce(0, 1, 2, 3)\n// 1 true\n\nresult, ok := lo.Coalesce(\"\")\n// \"\" false\n\nvar nilStr *string\nstr := \"foobar\"\nresult, ok := lo.Coalesce(nil, nilStr, &str)\n// &\"foobar\" true\n```\n\n----------------------------------------\n\nTITLE: Counting Values by Transformed Key with CountValuesBy in Go\nDESCRIPTION: Creates a map counting occurrences of values after transforming them with a function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_47\n\nLANGUAGE: go\nCODE:\n```\nisEven := func(v int) bool {\n    return v%2==0\n}\n\nlo.CountValuesBy([]int{}, isEven)\n// map[bool]int{}\n\nlo.CountValuesBy([]int{1, 2}, isEven)\n// map[bool]int{false: 1, true: 1}\n\nlo.CountValuesBy([]int{1, 2, 2}, isEven)\n// map[bool]int{false: 1, true: 2}\n\nlength := func(v string) int {\n    return len(v)\n}\n\nlo.CountValuesBy([]string{\"foo\", \"bar\", \"\"}, length)\n// map[int]int{0: 1, 3: 2}\n\nlo.CountValuesBy([]string{\"foo\", \"bar\", \"bar\"}, length)\n// map[int]int{3: 3}\n```\n\n----------------------------------------\n\nTITLE: Using FindUniques to get elements appearing exactly once in Go\nDESCRIPTION: FindUniques returns a slice with all the unique elements of the collection that appear exactly once. The order of result values is determined by the order they occur in the array.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_137\n\nLANGUAGE: go\nCODE:\n```\nuniqueValues := lo.FindUniques([]int{1, 2, 2, 1, 2, 3})\n// []int{3}\n```\n\n----------------------------------------\n\nTITLE: Getting Multiple Random Elements with Custom Generator using SamplesBy in Go\nDESCRIPTION: Returns N random unique items from a collection in random order, using a provided random integer generator.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_165\n\nLANGUAGE: go\nCODE:\n```\nr := rand.New(rand.NewSource(42))\nlo.SamplesBy([]string{\"a\", \"b\", \"c\"}, 3, r.Intn)\n// []string{\"a\", \"b\", \"c\"} in random order, using a seeded random generator\n```\n\n----------------------------------------\n\nTITLE: Using EveryBy to test all elements against a predicate in Go\nDESCRIPTION: EveryBy returns true if the predicate returns true for all elements in the collection or if the collection is empty. It tests whether all elements satisfy a given condition.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_117\n\nLANGUAGE: go\nCODE:\n```\nb := EveryBy([]int{1, 2, 3, 4}, func(x int) bool {\n    return x < 5\n})\n// true\n```\n\n----------------------------------------\n\nTITLE: Separating Elements with FilterReject in Go\nDESCRIPTION: Splits a collection into two slices: one with elements that satisfy the predicate and one with elements that don't.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_43\n\nLANGUAGE: go\nCODE:\n```\nkept, rejected := lo.FilterReject([]int{1, 2, 3, 4}, func(x int, _ int) bool {\n    return x%2 == 0\n})\n// []int{2, 4}\n// []int{1, 3}\n```\n\n----------------------------------------\n\nTITLE: Using MinIndex to find minimum value and its index in Go\nDESCRIPTION: MinIndex searches for the minimum value in a collection and returns both the value and its index. Returns (zero value, -1) when the collection is empty.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_142\n\nLANGUAGE: go\nCODE:\n```\nmin, index := lo.MinIndex([]int{1, 2, 3})\n// 1, 0\n\nmin, index := lo.MinIndex([]int{})\n// 0, -1\n\nmin, index := lo.MinIndex([]time.Duration{time.Second, time.Hour})\n// 1s, 0\n```\n\n----------------------------------------\n\nTITLE: Buffering Channel Data with Context in Go using Lo Library\nDESCRIPTION: Shows how to create a slice of n elements from a channel with context using the BufferWithContext function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_110\n\nLANGUAGE: go\nCODE:\n```\nctx, cancel := context.WithCancel(context.TODO())\ngo func() {\n    ch <- 0\n    time.Sleep(10*time.Millisecond)\n    ch <- 1\n    time.Sleep(10*time.Millisecond)\n    ch <- 2\n    time.Sleep(10*time.Millisecond)\n    ch <- 3\n    time.Sleep(10*time.Millisecond)\n    ch <- 4\n    time.Sleep(10*time.Millisecond)\n    cancel()\n}()\n\nitems1, length1, duration1, ok1 := lo.BufferWithContext(ctx, ch, 3)\n// []int{0, 1, 2}, 3, 20ms, true\nitems2, length2, duration2, ok2 := lo.BufferWithContext(ctx, ch, 3)\n// []int{3, 4}, 2, 30ms, false\n```\n\n----------------------------------------\n\nTITLE: Using Shuffle for Random Reordering of Slices in Go\nDESCRIPTION: Shuffle randomly reorders slice elements using the Fisher-Yates algorithm. This is a mutable operation that directly modifies the input slice.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_27\n\nLANGUAGE: go\nCODE:\n```\nimport lom \"github.com/samber/lo/mutable\"\n\nlist := []int{0, 1, 2, 3, 4, 5}\nlom.Shuffle(list)\n\nlist\n// []int{1, 4, 0, 3, 5, 2}\n```\n\n----------------------------------------\n\nTITLE: Filtering and Mapping with RejectMap in Go\nDESCRIPTION: Performs both filtering and mapping in one operation, rejecting elements based on a boolean condition returned by the callback.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_42\n\nLANGUAGE: go\nCODE:\n```\nitems := lo.RejectMap([]int{1, 2, 3, 4}, func(x int, _ int) (int, bool) {\n    return x*10, x%2 == 0\n})\n// []int{10, 30}\n```\n\n----------------------------------------\n\nTITLE: Using Union to combine distinct elements from multiple collections in Go\nDESCRIPTION: Union returns all distinct elements from given collections. Result will not change the order of elements relatively. It merges multiple slices while eliminating duplicates.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_124\n\nLANGUAGE: go\nCODE:\n```\nunion := lo.Union([]int{0, 1, 2, 3, 4, 5}, []int{0, 2}, []int{0, 10})\n// []int{0, 1, 2, 3, 4, 5, 10}\n```\n\n----------------------------------------\n\nTITLE: Using Reverse for Inverting Slice Order in Go\nDESCRIPTION: Reverse changes the order of elements in a slice so that the first becomes the last and so on. This is a mutable operation that directly modifies the input slice.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_28\n\nLANGUAGE: go\nCODE:\n```\nimport lom \"github.com/samber/lo/mutable\"\n\nlist := []int{0, 1, 2, 3, 4, 5}\nlom.Reverse(list)\n\nlist\n// []int{5, 4, 3, 2, 1, 0}\n```\n\n----------------------------------------\n\nTITLE: Using ForEach for Slice Iteration in Go\nDESCRIPTION: ForEach iterates over elements of a collection and invokes a function for each element. This example demonstrates the standard sequential version of the function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/samber/lo\"\n\nlo.ForEach([]string{\"hello\", \"world\"}, func(x string, _ int) {\n    println(x)\n})\n// prints \"hello\\nworld\\n\"\n```\n\n----------------------------------------\n\nTITLE: Transforming Slice to Map with SliceToMap in Go\nDESCRIPTION: Converts a slice to a map by applying a transform function to each element. The function extracts a key-value pair from each element. If duplicate keys occur, the last one wins.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_33\n\nLANGUAGE: go\nCODE:\n```\nin := []*foo{{baz: \"apple\", bar: 1}, {baz: \"banana\", bar: 2}}\n\naMap := lo.SliceToMap(in, func (f *foo) (string, int) {\n    return f.baz, f.bar\n})\n// map[string][int]{ \"apple\":1, \"banana\":2 }\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to snake_case in Go\nDESCRIPTION: SnakeCase converts a string to snake case format where all words are lowercase and separated by underscores. This is commonly used for database column names and constants.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_92\n\nLANGUAGE: go\nCODE:\n```\nstr := lo.SnakeCase(\"HelloWorld\")\n// hello_world\n```\n\n----------------------------------------\n\nTITLE: Using Parallel GroupBy for Concurrent Slice Categorization in Go\nDESCRIPTION: The parallel version of GroupBy runs the callback in separate goroutines for concurrent processing while maintaining the same grouping logic.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nimport lop \"github.com/samber/lo/parallel\"\n\nlop.GroupBy([]int{0, 1, 2, 3, 4, 5}, func(i int) int {\n    return i%3\n})\n// map[int][]int{0: []int{0, 3}, 1: []int{1, 4}, 2: []int{2, 5}}\n```\n\n----------------------------------------\n\nTITLE: Using Intersect to find common elements between collections in Go\nDESCRIPTION: Intersect returns the intersection between two collections. It creates a new slice containing only elements that exist in both input slices.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_122\n\nLANGUAGE: go\nCODE:\n```\nresult1 := lo.Intersect([]int{0, 1, 2, 3, 4, 5}, []int{0, 2})\n// []int{0, 2}\n\nresult2 := lo.Intersect([]int{0, 1, 2, 3, 4, 5}, []int{0, 6})\n// []int{0}\n\nresult3 := lo.Intersect([]int{0, 1, 2, 3, 4, 5}, []int{-1, 6})\n// []int{}\n```\n\n----------------------------------------\n\nTITLE: Replacing Values in Slice with Replace in Go\nDESCRIPTION: Returns a copy of the slice with the first n occurrences of a value replaced by a new value.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_50\n\nLANGUAGE: go\nCODE:\n```\nin := []int{0, 1, 0, 1, 2, 3, 0}\n\nslice := lo.Replace(in, 0, 42, 1)\n// []int{42, 1, 0, 1, 2, 3, 0}\n\nslice := lo.Replace(in, -1, 42, 1)\n// []int{0, 1, 0, 1, 2, 3, 0}\n\nslice := lo.Replace(in, 0, 42, 2)\n// []int{42, 1, 42, 1, 2, 3, 0}\n\nslice := lo.Replace(in, 0, 42, -1)\n// []int{42, 1, 42, 1, 2, 3, 42}\n```\n\n----------------------------------------\n\nTITLE: Cartesian Product of Lists in Go with Lo Library\nDESCRIPTION: Shows how to compute the cartesian product of multiple lists using the CrossJoin2 function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_102\n\nLANGUAGE: go\nCODE:\n```\nresult := lo.CrossJoin2([]string{\"hello\", \"john\", \"doe\"}, []int{1, 2})\n// lo.Tuple2{\"hello\", 1}\n// lo.Tuple2{\"hello\", 2}\n// lo.Tuple2{\"john\", 1}\n// lo.Tuple2{\"john\", 2}\n// lo.Tuple2{\"doe\", 1}\n// lo.Tuple2{\"doe\", 2}\n```\n\n----------------------------------------\n\nTITLE: Finding Latest Time with Latest in Go\nDESCRIPTION: Searches for the maximum time.Time in a collection. Returns the zero value when the collection is empty.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_151\n\nLANGUAGE: go\nCODE:\n```\nlatest := lo.Latest([]time.Time{time.Now(), time.Time{}})\n// 2023-04-01 01:02:03 +0000 UTC\n```\n\n----------------------------------------\n\nTITLE: Using FindKey to get map key by value in Go\nDESCRIPTION: FindKey returns the key of the first value matching the input. It searches a map for a specific value and returns its key with a boolean indicating success.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_135\n\nLANGUAGE: go\nCODE:\n```\nresult1, ok1 := lo.FindKey(map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3}, 2)\n// \"bar\", true\n\nresult2, ok2 := lo.FindKey(map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3}, 42)\n// \"\", false\n\ntype test struct {\n    foobar string\n}\nresult3, ok3 := lo.FindKey(map[string]test{\"foo\": test{\"foo\"}, \"bar\": test{\"bar\"}, \"baz\": test{\"baz\"}}, test{\"foo\"})\n// \"foo\", true\n```\n\n----------------------------------------\n\nTITLE: Using Every to check if all elements of a subset exist in a collection in Go\nDESCRIPTION: Every returns true if all elements of a subset are contained in a collection or if the subset is empty. It verifies that every element in the second slice exists in the first slice.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_116\n\nLANGUAGE: go\nCODE:\n```\nok := lo.Every([]int{0, 1, 2, 3, 4, 5}, []int{0, 2})\n// true\n\nok := lo.Every([]int{0, 1, 2, 3, 4, 5}, []int{0, 6})\n// false\n```\n\n----------------------------------------\n\nTITLE: Checking if Slice is Sorted with IsSorted in Go\nDESCRIPTION: Determines whether a slice is already sorted in ascending order.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_53\n\nLANGUAGE: go\nCODE:\n```\nslice := lo.IsSorted([]int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n// true\n```\n\n----------------------------------------\n\nTITLE: Using Uniq for Removing Duplicates in Go Slices\nDESCRIPTION: Uniq returns a duplicate-free version of an array, keeping only the first occurrence of each element while preserving the original order.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nuniqValues := lo.Uniq([]int{1, 2, 2, 1})\n// []int{1, 2}\n```\n\n----------------------------------------\n\nTITLE: Getting Last Element or Empty with LastOrEmpty in Go\nDESCRIPTION: Returns the last element of a collection or the zero value if the collection is empty.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_157\n\nLANGUAGE: go\nCODE:\n```\nlast := lo.LastOrEmpty([]int{1, 2, 3})\n// 3\n\nlast := lo.LastOrEmpty([]int{})\n// 0\n```\n\n----------------------------------------\n\nTITLE: Creating Pointers from Non-Zero Values with EmptyableToPtr in Go\nDESCRIPTION: Returns a pointer copy of a value if it's nonzero, otherwise returns a nil pointer. Useful for converting optional values to optional pointers.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_179\n\nLANGUAGE: go\nCODE:\n```\nptr := lo.EmptyableToPtr(nil)\n// nil\n\nptr := lo.EmptyableToPtr(\"\")\n// nil\n\nptr := lo.EmptyableToPtr([]int{})\n// *[]int{}\n\nptr := lo.EmptyableToPtr(\"hello world\")\n// *string{\"hello world\"}\n```\n\n----------------------------------------\n\nTITLE: Converting Key-Value Pairs to Map in Go\nDESCRIPTION: FromEntries (alias: FromPairs) transforms an array of key/value pairs into a map. This is the inverse operation of Entries, useful for rebuilding a map after manipulating its entries.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_69\n\nLANGUAGE: go\nCODE:\n```\nm := lo.FromEntries([]lo.Entry[string, int]{\n    {\n        Key: \"foo\",\n        Value: 1,\n    },\n    {\n        Key: \"bar\",\n        Value: 2,\n    },\n})\n// map[string]int{\"foo\": 1, \"bar\": 2}\n```\n\n----------------------------------------\n\nTITLE: Dropping Elements from End of Slice with DropRight in Go\nDESCRIPTION: Removes a specified number of elements from the end of a slice, returning a new slice.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_37\n\nLANGUAGE: go\nCODE:\n```\nl := lo.DropRight([]int{0, 1, 2, 3, 4, 5}, 2)\n// []int{0, 1, 2, 3}\n```\n\n----------------------------------------\n\nTITLE: Using Min to find minimum value in a collection in Go\nDESCRIPTION: Min searches for the minimum value in a collection. Returns zero value when the collection is empty. It works with any comparable type including numbers and duration.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_141\n\nLANGUAGE: go\nCODE:\n```\nmin := lo.Min([]int{1, 2, 3})\n// 1\n\nmin := lo.Min([]int{})\n// 0\n\nmin := lo.Min([]time.Duration{time.Second, time.Hour})\n// 1s\n```\n\n----------------------------------------\n\nTITLE: Converting to Any Slice in Go with ToAnySlice\nDESCRIPTION: ToAnySlice converts a typed slice to a slice of interface{} (any) type. This is useful when you need to work with heterogeneous collections.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_185\n\nLANGUAGE: go\nCODE:\n```\nelements := lo.ToAnySlice([]int{1, 5, 1})\n// []any{1, 5, 1}\n```\n\n----------------------------------------\n\nTITLE: Using WithoutEmpty to exclude zero values from a slice in Go\nDESCRIPTION: WithoutEmpty returns a slice excluding zero values. It creates a new slice that contains all non-zero elements from the original slice.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_127\n\nLANGUAGE: go\nCODE:\n```\nsubset := lo.WithoutEmpty([]int{0, 2, 10})\n// []int{2, 10}\n```\n\n----------------------------------------\n\nTITLE: Buffering Channel Data with Timeout in Go using Lo Library\nDESCRIPTION: Demonstrates how to create a slice of n elements from a channel with timeout using the BufferWithTimeout function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_111\n\nLANGUAGE: go\nCODE:\n```\ngenerator := func(yield func(int)) {\n    for i := 0; i < 5; i++ {\n        yield(i)\n        time.Sleep(35*time.Millisecond)\n    }\n}\n\nch := lo.Generator(0, generator)\n\nitems1, length1, duration1, ok1 := lo.BufferWithTimeout(ch, 3, 100*time.Millisecond)\n// []int{1, 2}, 2, 100ms, true\nitems2, length2, duration2, ok2 := lo.BufferWithTimeout(ch, 3, 100*time.Millisecond)\n// []int{3, 4, 5}, 3, 75ms, true\nitems3, length3, duration2, ok3 := lo.BufferWithTimeout(ch, 3, 100*time.Millisecond)\n// []int{}, 0, 10ms, false\n```\n\n----------------------------------------\n\nTITLE: Transforming Map Keys in Go\nDESCRIPTION: MapKeys manipulates a map's keys and transforms it to a map of potentially different key type. It applies a transformation function to each key-value pair to generate new keys.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_73\n\nLANGUAGE: go\nCODE:\n```\nm2 := lo.MapKeys(map[int]int{1: 1, 2: 2, 3: 3, 4: 4}, func(_ int, v int) string {\n    return strconv.FormatInt(int64(v), 10)\n})\n// map[string]int{\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4}\n```\n\n----------------------------------------\n\nTITLE: Using RepeatBy for Creating Slices with Generated Values in Go\nDESCRIPTION: RepeatBy builds a slice with values returned by N calls to a callback function. The callback receives the current index and returns the value for that position.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_31\n\nLANGUAGE: go\nCODE:\n```\nslice := lo.RepeatBy(0, func (i int) string {\n    return strconv.FormatInt(int64(math.Pow(float64(i), 2)), 10)\n})\n// []string{}\n\nslice := lo.RepeatBy(5, func(i int) string {\n    return strconv.FormatInt(int64(math.Pow(float64(i), 2)), 10)\n})\n// []string{\"0\", \"1\", \"4\", \"9\", \"16\"}\n```\n\n----------------------------------------\n\nTITLE: Checking if Key Exists with HasKey in Go\nDESCRIPTION: Determines whether a specified key exists in a map.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_58\n\nLANGUAGE: go\nCODE:\n```\nexists := lo.HasKey(map[string]int{\"foo\": 1, \"bar\": 2}, \"foo\")\n// true\n\nexists := lo.HasKey(map[string]int{\"foo\": 1, \"bar\": 2}, \"baz\")\n// false\n```\n\n----------------------------------------\n\nTITLE: Basic Lo Import in Go\nDESCRIPTION: Example showing how to import the Lo library in a Go file. The standard import for the main package and a parallel version with the 'lop' alias are demonstrated.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/samber/lo\"\n    lop \"github.com/samber/lo/parallel\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using FindUniquesBy with custom uniqueness criteria in Go\nDESCRIPTION: FindUniquesBy returns elements that have unique results when passed through the iteratee function. It accepts a function that generates the criterion by which uniqueness is computed.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_138\n\nLANGUAGE: go\nCODE:\n```\nuniqueValues := lo.FindUniquesBy([]int{3, 4, 5, 6, 7}, func(i int) int {\n    return i%3\n})\n// []int{5}\n```\n\n----------------------------------------\n\nTITLE: Inverting Map Keys and Values in Go\nDESCRIPTION: Invert creates a new map by flipping the keys and values of the original map. If the original map contains duplicate values, subsequent values overwrite previous ones in the result.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_70\n\nLANGUAGE: go\nCODE:\n```\nm1 := lo.Invert(map[string]int{\"a\": 1, \"b\": 2})\n// map[int]string{1: \"a\", 2: \"b\"}\n\nm2 := lo.Invert(map[string]int{\"a\": 1, \"b\": 2, \"c\": 1})\n// map[int]string{1: \"c\", 2: \"b\"}\n```\n\n----------------------------------------\n\nTITLE: Extracting Map Values with Values in Go\nDESCRIPTION: Creates a slice containing all values from one or more maps. May include duplicate values.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_59\n\nLANGUAGE: go\nCODE:\n```\nvalues := lo.Values(map[string]int{\"foo\": 1, \"bar\": 2})\n// []int{1, 2}\n\nvalues := lo.Values(map[string]int{\"foo\": 1, \"bar\": 2}, map[string]int{\"baz\": 3})\n// []int{1, 2, 3}\n\nvalues := lo.Values(map[string]int{\"foo\": 1, \"bar\": 2}, map[string]int{\"bar\": 2})\n// []int{1, 2, 2}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Strings in Go\nDESCRIPTION: RandomString generates a random string of the specified length using characters from the provided charset. This is useful for creating random identifiers, passwords, or test data.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_85\n\nLANGUAGE: go\nCODE:\n```\nstr := lo.RandomString(5, lo.LettersCharset)\n// example: \"eIGbt\"\n```\n\n----------------------------------------\n\nTITLE: Getting First Element with First in Go\nDESCRIPTION: Returns the first element of a collection along with a boolean indicating if the element exists. Returns (zero value, false) when the collection is empty.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_153\n\nLANGUAGE: go\nCODE:\n```\nfirst, ok := lo.First([]int{1, 2, 3})\n// 1, true\n\nfirst, ok := lo.First([]int{})\n// 0, false\n```\n\n----------------------------------------\n\nTITLE: Using FromSlicePtrOr in Go with Custom Fallback Values\nDESCRIPTION: FromSlicePtrOr returns a slice with all pointer values dereferenced, using a provided fallback value for nil pointers rather than the zero value.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_184\n\nLANGUAGE: go\nCODE:\n```\nstr1 := \"hello\"\nstr2 := \"world\"\n\nptr := lo.FromSlicePtrOr([]*string{&str1, nil, &str2}, \"fallback value\")\n// []string{\"hello\", \"fallback value\", \"world\"}\n```\n\n----------------------------------------\n\nTITLE: Extracting Unique Map Values with UniqValues in Go\nDESCRIPTION: Creates a slice of unique values from one or more maps, eliminating duplicates.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_60\n\nLANGUAGE: go\nCODE:\n```\nvalues := lo.UniqValues(map[string]int{\"foo\": 1, \"bar\": 2})\n// []int{1, 2}\n\nvalues := lo.UniqValues(map[string]int{\"foo\": 1, \"bar\": 2}, map[string]int{\"baz\": 3})\n// []int{1, 2, 3}\n\nvalues := lo.UniqValues(map[string]int{\"foo\": 1, \"bar\": 2}, map[string]int{\"bar\": 2})\n// []int{1, 2}\n```\n\n----------------------------------------\n\nTITLE: Creating Slice with Start/End Indices using Slice in Go\nDESCRIPTION: Returns a portion of a slice from start up to end index. Handles overflow safely without panicking.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_49\n\nLANGUAGE: go\nCODE:\n```\nin := []int{0, 1, 2, 3, 4}\n\nslice := lo.Slice(in, 0, 5)\n// []int{0, 1, 2, 3, 4}\n\nslice := lo.Slice(in, 2, 3)\n// []int{2}\n\nslice := lo.Slice(in, 2, 6)\n// []int{2, 3, 4}\n\nslice := lo.Slice(in, 4, 3)\n// []int{}\n```\n\n----------------------------------------\n\nTITLE: Getting First Element or Empty with FirstOrEmpty in Go\nDESCRIPTION: Returns the first element of a collection or the zero value if the collection is empty.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_154\n\nLANGUAGE: go\nCODE:\n```\nfirst := lo.FirstOrEmpty([]int{1, 2, 3})\n// 1\n\nfirst := lo.FirstOrEmpty([]int{})\n// 0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Map Values with Fallback in Go\nDESCRIPTION: ValueOr returns the value for a given key in a map, or a fallback value if the key is not present. This function helps avoid boilerplate code for checking key existence.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_61\n\nLANGUAGE: go\nCODE:\n```\nvalue := lo.ValueOr(map[string]int{\"foo\": 1, \"bar\": 2}, \"foo\", 42)\n// 1\n\nvalue := lo.ValueOr(map[string]int{\"foo\": 1, \"bar\": 2}, \"baz\", 42)\n// 42\n```\n\n----------------------------------------\n\nTITLE: Excluding Map Entries by Predicate in Go\nDESCRIPTION: OmitBy returns a new map excluding entries that satisfy the given predicate function. It's the inverse operation of PickBy, removing entries that match the condition.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_65\n\nLANGUAGE: go\nCODE:\n```\nm := lo.OmitBy(map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3}, func(key string, value int) bool {\n    return value%2 == 1\n})\n// map[string]int{\"bar\": 2}\n```\n\n----------------------------------------\n\nTITLE: Getting First Element or Fallback with FirstOr in Go\nDESCRIPTION: Returns the first element of a collection or the provided fallback value if the collection is empty.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_155\n\nLANGUAGE: go\nCODE:\n```\nfirst := lo.FirstOr([]int{1, 2, 3}, 245)\n// 1\n\nfirst := lo.FirstOr([]int{}, 31)\n// 31\n```\n\n----------------------------------------\n\nTITLE: Mixing Function and Value Returns in Switch-Case Chain in Go\nDESCRIPTION: Shows how to mix function and direct value returns in the Switch-Case-Default chain for flexible conditional logic.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_174\n\nLANGUAGE: go\nCODE:\n```\nresult := lo.Switch(1).\n    CaseF(1, func() string {\n        return \"1\"\n    }).\n    Default(\"42\")\n// \"1\"\n```\n\n----------------------------------------\n\nTITLE: Importing Lo into Global Namespace (Not Recommended)\nDESCRIPTION: Example showing how to import the entire Lo library into the global namespace using the dot import syntax. The author notes this is not recommended practice.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    . \"github.com/samber/lo\"\n)\n```\n\n----------------------------------------\n\nTITLE: Excluding Map Entries by Values in Go\nDESCRIPTION: OmitByValues returns a new map excluding entries with values that match the provided list of values. It's the inverse operation of PickByValues, removing entries with specified values.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_67\n\nLANGUAGE: go\nCODE:\n```\nm := lo.OmitByValues(map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3}, []int{1, 3})\n// map[string]int{\"bar\": 2}\n```\n\n----------------------------------------\n\nTITLE: Getting Last Element or Fallback with LastOr in Go\nDESCRIPTION: Returns the last element of a collection or the provided fallback value if the collection is empty.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_158\n\nLANGUAGE: go\nCODE:\n```\nlast := lo.LastOr([]int{1, 2, 3}, 245)\n// 3\n\nlast := lo.LastOr([]int{}, 31)\n// 31\n```\n\n----------------------------------------\n\nTITLE: Using Flatten for Multi-dimensional Slice Flattening in Go\nDESCRIPTION: Flatten combines nested slices into a single-level slice by concatenating all elements from the inner slices into one flat array.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_25\n\nLANGUAGE: go\nCODE:\n```\nflat := lo.Flatten([][]int{{0, 1}, {2, 3, 4, 5}})\n// []int{0, 1, 2, 3, 4, 5}\n```\n\n----------------------------------------\n\nTITLE: Coalescing Slices with Default in Go using CoalesceSliceOrEmpty\nDESCRIPTION: CoalesceSliceOrEmpty returns the first non-empty slice from a list of slices, or an empty slice if all inputs are empty. Similar to CoalesceSlice but without the boolean return.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_193\n\nLANGUAGE: go\nCODE:\n```\nresult := lo.CoalesceSliceOrEmpty([]int{1, 2, 3}, []int{4, 5, 6})\n// [1, 2, 3]\n\nresult := lo.CoalesceSliceOrEmpty(nil, []int{})\n// []\n```\n\n----------------------------------------\n\nTITLE: Summing Derived Values in Collections in Go\nDESCRIPTION: SumBy calculates the sum of values derived from collection elements using a mapping function. This allows summing based on a specific attribute or transformed value of each element.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_80\n\nLANGUAGE: go\nCODE:\n```\nstrings := []string{\"foo\", \"bar\"}\nsum := lo.SumBy(strings, func(item string) int {\n    return len(item)\n})\n// 6\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value with Max in Go\nDESCRIPTION: Searches for the maximum value in a collection. Returns the zero value when the collection is empty. Works with various comparable types like integers and time.Duration.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_147\n\nLANGUAGE: go\nCODE:\n```\nmax := lo.Max([]int{1, 2, 3})\n// 3\n\nmax := lo.Max([]int{})\n// 0\n\nmax := lo.Max([]time.Duration{time.Second, time.Hour})\n// 1h\n```\n\n----------------------------------------\n\nTITLE: Using FromSlicePtr in Go for Dereferencing Pointer Slices\nDESCRIPTION: FromSlicePtr returns a slice with all pointer values dereferenced, with nil pointers converted to zero values. Useful for safely unpacking slices of pointers.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_183\n\nLANGUAGE: go\nCODE:\n```\nstr1 := \"hello\"\nstr2 := \"world\"\n\nptr := lo.FromSlicePtr[string]([]*string{&str1, &str2, nil})\n// []string{\"hello\", \"world\", \"\"}\n\nptr := lo.Compact(\n    lo.FromSlicePtr[string]([]*string{&str1, &str2, nil}),\n)\n// []string{\"hello\", \"world\"}\n```\n\n----------------------------------------\n\nTITLE: Using SomeBy to test if any element satisfies a predicate in Go\nDESCRIPTION: SomeBy returns true if the predicate returns true for any of the elements in the collection. If the collection is empty, SomeBy returns false. It tests if any element satisfies a condition.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_119\n\nLANGUAGE: go\nCODE:\n```\nb := SomeBy([]int{1, 2, 3, 4}, func(x int) bool {\n    return x < 3\n})\n// true\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value with Custom Comparison using MaxBy in Go\nDESCRIPTION: Searches for the maximum value in a collection using a custom comparison function. Returns the first maximum value if multiple exist, or zero value when the collection is empty.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_149\n\nLANGUAGE: go\nCODE:\n```\nmax := lo.MaxBy([]string{\"string1\", \"s2\", \"string3\"}, func(item string, max string) bool {\n    return len(item) > len(max)\n})\n// \"string1\"\n\nmax := lo.MaxBy([]string{}, func(item string, max string) bool {\n    return len(item) > len(max)\n})\n// \"\"\n```\n\n----------------------------------------\n\nTITLE: Coalescing Maps with Default in Go using CoalesceMapOrEmpty\nDESCRIPTION: CoalesceMapOrEmpty returns the first non-empty map from a list of maps, or an empty map if all inputs are empty. Similar to CoalesceMap but without the boolean return.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_195\n\nLANGUAGE: go\nCODE:\n```\nresult := lo.CoalesceMapOrEmpty(map[string]int{\"1\": 1, \"2\": 2, \"3\": 3}, map[string]int{\"4\": 4, \"5\": 5, \"6\": 6})\n// {\"1\": 1, \"2\": 2, \"3\": 3}\n\nresult := lo.CoalesceMapOrEmpty(nil, map[string]int{})\n// {}\n```\n\n----------------------------------------\n\nTITLE: Custom Zipping with Transformation in Go using Lo Library\nDESCRIPTION: Demonstrates how to create a slice of transformed elements from multiple arrays using the ZipBy2 function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_99\n\nLANGUAGE: go\nCODE:\n```\nitems := lo.ZipBy2([]string{\"a\", \"b\"}, []int{1, 2}, func(a string, b int) string {\n    return fmt.Sprintf(\"%s-%d\", a, b)\n})\n// []string{\"a-1\", \"b-2\"}\n```\n\n----------------------------------------\n\nTITLE: Using IndexOf to find the first occurrence of a value in Go\nDESCRIPTION: IndexOf returns the index at which the first occurrence of a value is found in an array or return -1 if the value cannot be found. It locates the position of an element in a slice.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_129\n\nLANGUAGE: go\nCODE:\n```\nfound := lo.IndexOf([]int{0, 1, 2, 1, 2, 3}, 2)\n// 2\n\nnotFound := lo.IndexOf([]int{0, 1, 2, 1, 2, 3}, 6)\n// -1\n```\n\n----------------------------------------\n\nTITLE: Extracting Subset of Slice with Subset in Go\nDESCRIPTION: Returns a portion of a slice starting from offset with specified length. Handles overflow safely unlike standard slice operations.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_48\n\nLANGUAGE: go\nCODE:\n```\nin := []int{0, 1, 2, 3, 4}\n\nsub := lo.Subset(in, 2, 3)\n// []int{2, 3, 4}\n\nsub := lo.Subset(in, -4, 3)\n// []int{1, 2, 3}\n\nsub := lo.Subset(in, -2, math.MaxUint)\n// []int{3, 4}\n```\n\n----------------------------------------\n\nTITLE: Using WithoutBy to filter elements by extracted keys in Go\nDESCRIPTION: WithoutBy filters a slice by excluding elements whose extracted keys match any in the exclude list. It returns a new slice containing only the elements whose keys are not in the exclude list.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_126\n\nLANGUAGE: go\nCODE:\n```\ntype struct User {\n    ID int\n    Name string\n}\n\n// original users\nusers := []User{\n    {ID: 1, Name: \"Alice\"},\n    {ID: 2, Name: \"Bob\"},\n    {ID: 3, Name: \"Charlie\"},\n}\n\n// extract function to get the user ID\ngetID := func(user User) int {\n    return user.ID\n}\n\n// exclude users with IDs 2 and 3\nexcludedIDs := []int{2, 3}\n\n// filtering users\nfilteredUsers := lo.WithoutBy(users, getID, excludedIDs...)\n// []User[{ID: 1, Name: \"Alice\"}]\n```\n\n----------------------------------------\n\nTITLE: Replacing All Occurrences with ReplaceAll in Go\nDESCRIPTION: Returns a copy of the slice with all occurrences of a value replaced by a new value.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_51\n\nLANGUAGE: go\nCODE:\n```\nin := []int{0, 1, 0, 1, 2, 3, 0}\n\nslice := lo.ReplaceAll(in, 0, 42)\n// []int{42, 1, 42, 1, 2, 3, 42}\n\nslice := lo.ReplaceAll(in, -1, 42)\n// []int{0, 1, 0, 1, 2, 3, 0}\n```\n\n----------------------------------------\n\nTITLE: Using LastIndexOf to find the last occurrence of a value in Go\nDESCRIPTION: LastIndexOf returns the index at which the last occurrence of a value is found in an array or return -1 if the value cannot be found. It locates the last position of an element in a slice.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_130\n\nLANGUAGE: go\nCODE:\n```\nfound := lo.LastIndexOf([]int{0, 1, 2, 1, 2, 3}, 2)\n// 4\n\nnotFound := lo.LastIndexOf([]int{0, 1, 2, 1, 2, 3}, 6)\n// -1\n```\n\n----------------------------------------\n\nTITLE: Getting Last Element with Last in Go\nDESCRIPTION: Returns the last element of a collection along with a boolean indicating if the element exists. Returns (zero value, false) when the collection is empty.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_156\n\nLANGUAGE: go\nCODE:\n```\nlast, ok := lo.Last([]int{1, 2, 3})\n// 3\n// true\n\nlast, ok := lo.Last([]int{})\n// 0\n// false\n```\n\n----------------------------------------\n\nTITLE: Using Repeat for Creating Slices with Repeated Values in Go\nDESCRIPTION: Repeat builds a slice with N copies of the initial value. It works with any type that has a Clone method to ensure proper copying of values.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_30\n\nLANGUAGE: go\nCODE:\n```\ntype foo struct {\n  bar string\n}\n\nfunc (f foo) Clone() foo {\n  return foo{f.bar}\n}\n\nslice := lo.Repeat(2, foo{\"a\"})\n// []foo{foo{\"a\"}, foo{\"a\"}}\n```\n\n----------------------------------------\n\nTITLE: Using FindDuplicates to identify repeated elements in Go\nDESCRIPTION: FindDuplicates returns a slice with the first occurrence of each duplicated element in the collection. The order of result values is determined by the order they occur in the array.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_139\n\nLANGUAGE: go\nCODE:\n```\nduplicatedValues := lo.FindDuplicates([]int{1, 2, 2, 1, 2, 3})\n// []int{1, 2}\n```\n\n----------------------------------------\n\nTITLE: Using TernaryF to Avoid Nil-Pointer Dereferencing in Go\nDESCRIPTION: Shows how to use TernaryF to safely handle potentially nil pointers by evaluating only the appropriate function based on the condition.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_168\n\nLANGUAGE: go\nCODE:\n```\nvar s *string\n\nsomeStr := TernaryF(s == nil, func() string { return uuid.New().String() }, func() string { return *s })\n// ef782193-c30c-4e2e-a7ae-f8ab5e125e02\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value and Index with MaxIndex in Go\nDESCRIPTION: Searches for the maximum value in a collection and returns both the value and its index. Returns (zero value, -1) when the collection is empty.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_148\n\nLANGUAGE: go\nCODE:\n```\nmax, index := lo.MaxIndex([]int{1, 2, 3})\n// 3, 2\n\nmax, index := lo.MaxIndex([]int{})\n// 0, -1\n\nmax, index := lo.MaxIndex([]time.Duration{time.Second, time.Hour})\n// 1h, 1\n```\n\n----------------------------------------\n\nTITLE: Using FindDuplicatesBy with custom duplication criteria in Go\nDESCRIPTION: FindDuplicatesBy returns elements that have duplicate results when passed through the iteratee function. It accepts a function that generates the criterion by which duplication is computed.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_140\n\nLANGUAGE: go\nCODE:\n```\nduplicatedValues := lo.FindDuplicatesBy([]int{3, 4, 5, 6, 7}, func(i int) int {\n    return i%3\n})\n// []int{3, 4}\n```\n\n----------------------------------------\n\nTITLE: Using Fill for Initializing Slice Elements in Go\nDESCRIPTION: Fill replaces all elements in a slice with copies of the initial value. It works with any type that has a Clone method for proper copying.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_29\n\nLANGUAGE: go\nCODE:\n```\ntype foo struct {\n  bar string\n}\n\nfunc (f foo) Clone() foo {\n  return foo{f.bar}\n}\n\ninitializedSlice := lo.Fill([]foo{foo{\"a\"}, foo{\"a\"}}, foo{\"b\"})\n// []foo{foo{\"b\"}, foo{\"b\"}}\n```\n\n----------------------------------------\n\nTITLE: Dropping Elements by Index with DropByIndex in Go\nDESCRIPTION: Removes elements from a slice at specified indices. Negative indices count from the end of the slice.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_40\n\nLANGUAGE: go\nCODE:\n```\nl := lo.DropByIndex([]int{0, 1, 2, 3, 4, 5}, 2, 4, -1)\n// []int{0, 1, 3}\n```\n\n----------------------------------------\n\nTITLE: Finding Earliest Time with EarliestBy in Go\nDESCRIPTION: Searches for the minimum time.Time in a collection using a provided iteratee function. Returns the zero value when the collection is empty.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_146\n\nLANGUAGE: go\nCODE:\n```\ntype foo struct {\n    bar time.Time\n}\n\nearliest := lo.EarliestBy([]foo{{time.Now()}, {}}, func(i foo) time.Time {\n    return i.bar\n})\n// {bar:{2023-04-01 01:02:03 +0000 UTC}}\n```\n\n----------------------------------------\n\nTITLE: Using UniqBy for Custom Duplicate Removal in Go Slices\nDESCRIPTION: UniqBy creates a duplicate-free version of an array based on a custom iteratee function that determines the criterion for uniqueness.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nuniqValues := lo.UniqBy([]int{0, 1, 2, 3, 4, 5}, func(i int) int {\n    return i%3\n})\n// []int{0, 1, 2}\n```\n\n----------------------------------------\n\nTITLE: Excluding Map Entries by Keys in Go\nDESCRIPTION: OmitByKeys returns a new map excluding entries with keys that match the provided list of keys. It's the inverse operation of PickByKeys, removing entries with specified keys.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_66\n\nLANGUAGE: go\nCODE:\n```\nm := lo.OmitByKeys(map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3}, []string{\"foo\", \"baz\"})\n// map[string]int{\"bar\": 2}\n```\n\n----------------------------------------\n\nTITLE: Calculating Mean of Collections in Go\nDESCRIPTION: Mean calculates the arithmetic mean (average) of values in a numeric collection. If the collection is empty, it returns 0. This provides a simple way to find the average of a set of numbers.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_83\n\nLANGUAGE: go\nCODE:\n```\nmean := lo.Mean([]int{2, 3, 4, 5})\n// 3\n\nmean := lo.Mean([]float64{2, 3, 4, 5})\n// 3.5\n\nmean := lo.Mean([]float64{})\n// 0\n```\n\n----------------------------------------\n\nTITLE: Counting Occurrences with Count in Go\nDESCRIPTION: Counts the number of times a specific value appears in a collection.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_44\n\nLANGUAGE: go\nCODE:\n```\ncount := lo.Count([]int{1, 5, 1}, 1)\n// 2\n```\n\n----------------------------------------\n\nTITLE: Using Earliest to find minimum time.Time value in Go\nDESCRIPTION: Earliest searches for the minimum time.Time value in a collection. Returns zero value when the collection is empty. It's specifically designed for working with time values.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_145\n\nLANGUAGE: go\nCODE:\n```\nearliest := lo.Earliest(time.Now(), time.Time{})\n// 0001-01-01 00:00:00 +0000 UTC\n```\n\n----------------------------------------\n\nTITLE: Calculating Products of Derived Values in Go\nDESCRIPTION: ProductBy calculates the product of values derived from collection elements using a mapping function. This allows multiplication based on a specific attribute or transformed value of each element.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_82\n\nLANGUAGE: go\nCODE:\n```\nstrings := []string{\"foo\", \"bar\"}\nproduct := lo.ProductBy(strings, func(item string) int {\n    return len(item)\n})\n// 9\n```\n\n----------------------------------------\n\nTITLE: Calculating Mean of Derived Values in Go\nDESCRIPTION: MeanBy calculates the arithmetic mean of values derived from collection elements using a mapping function. This allows averaging based on a specific attribute or transformed value of each element.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_84\n\nLANGUAGE: go\nCODE:\n```\nlist := []string{\"aa\", \"bbb\", \"cccc\", \"ddddd\"}\nmapper := func(item string) float64 {\n    return float64(len(item))\n}\n\nmean := lo.MeanBy(list, mapper)\n// 3.5\n\nmean := lo.MeanBy([]float64{}, mapper)\n// 0\n```\n\n----------------------------------------\n\nTITLE: Dropping Elements from Beginning of Slice with Drop in Go\nDESCRIPTION: Removes a specified number of elements from the beginning of a slice, returning a new slice.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_36\n\nLANGUAGE: go\nCODE:\n```\nl := lo.Drop([]int{0, 1, 2, 3, 4, 5}, 2)\n// []int{2, 3, 4, 5}\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to PascalCase in Go\nDESCRIPTION: PascalCase converts a string to pascal case format where all words start with an uppercase letter and have no separators. This is commonly used for type and class names.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_89\n\nLANGUAGE: go\nCODE:\n```\nstr := lo.PascalCase(\"hello_world\")\n// HelloWorld\n```\n\n----------------------------------------\n\nTITLE: Counting Elements by Condition with CountBy in Go\nDESCRIPTION: Counts the number of elements in a collection that satisfy a predicate function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_45\n\nLANGUAGE: go\nCODE:\n```\ncount := lo.CountBy([]int{1, 5, 1}, func(i int) bool {\n    return i < 4\n})\n// 2\n```\n\n----------------------------------------\n\nTITLE: Calculating Products of Collections in Go\nDESCRIPTION: Product calculates the product of all values in a numeric collection. If the collection is empty, it returns 0. This is useful for operations requiring multiplication of multiple values.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_81\n\nLANGUAGE: go\nCODE:\n```\nlist := []int{1, 2, 3, 4, 5}\nproduct := lo.Product(list)\n// 120\n```\n\n----------------------------------------\n\nTITLE: Getting Nth Element or Empty with NthOrEmpty in Go\nDESCRIPTION: Returns the element at index 'nth' of a collection or the zero value if the index is out of bounds. Supports negative indices to access elements from the end.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_161\n\nLANGUAGE: go\nCODE:\n```\nnth := lo.NthOrEmpty([]int{10, 20, 30, 40, 50}, 2)\n// 30\n\nnth := lo.NthOrEmpty([]int{10, 20, 30, 40, 50}, -1)\n// 50\n\nnth := lo.NthOrEmpty([]int{10, 20, 30, 40, 50}, 5)\n// 0 (zero value for int)\n\nnth := lo.NthOrEmpty([]string{\"apple\", \"banana\", \"cherry\"}, 2)\n// \"cherry\"\n\nnth := lo.NthOrEmpty([]string{\"apple\", \"banana\", \"cherry\"}, 5)\n// \"\" (zero value for string)\n```\n\n----------------------------------------\n\nTITLE: Extracting Map Keys with Keys in Go\nDESCRIPTION: Creates a slice containing all the keys from one or more maps. May include duplicate keys if multiple maps are provided.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_56\n\nLANGUAGE: go\nCODE:\n```\nkeys := lo.Keys(map[string]int{\"foo\": 1, \"bar\": 2})\n// []string{\"foo\", \"bar\"}\n\nkeys := lo.Keys(map[string]int{\"foo\": 1, \"bar\": 2}, map[string]int{\"baz\": 3})\n// []string{\"foo\", \"bar\", \"baz\"}\n\nkeys := lo.Keys(map[string]int{\"foo\": 1, \"bar\": 2}, map[string]int{\"bar\": 3})\n// []string{\"foo\", \"bar\", \"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Generating Numeric Sequences in Go\nDESCRIPTION: Range, RangeFrom, and RangeWithSteps create arrays of numbers progressing from start up to, but not including, end. These functions provide flexibility for creating sequences with different starting points and increments.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_77\n\nLANGUAGE: go\nCODE:\n```\nresult := lo.Range(4)\n// [0, 1, 2, 3]\n\nresult := lo.Range(-4)\n// [0, -1, -2, -3]\n\nresult := lo.RangeFrom(1, 5)\n// [1, 2, 3, 4, 5]\n\nresult := lo.RangeFrom[float64](1.0, 5)\n// [1.0, 2.0, 3.0, 4.0, 5.0]\n\nresult := lo.RangeWithSteps(0, 20, 5)\n// [0, 5, 10, 15]\n\nresult := lo.RangeWithSteps[float32](-1.0, -4.0, -1.0)\n// [-1.0, -2.0, -3.0]\n\nresult := lo.RangeWithSteps(1, 4, -1)\n// []\n\nresult := lo.Range(0)\n// []\n```\n\n----------------------------------------\n\nTITLE: Running Development Environment with Docker\nDESCRIPTION: Command to start the development environment using Docker Compose. This runs a containerized development environment.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_210\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose run --rm dev\n```\n\n----------------------------------------\n\nTITLE: Using Parallel PartitionBy for Concurrent Slice Grouping in Go\nDESCRIPTION: The parallel version of PartitionBy runs the callback in goroutines for concurrent processing while maintaining the output order in the final result.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nimport lop \"github.com/samber/lo/parallel\"\n\npartitions := lop.PartitionBy([]int{-2, -1, 0, 1, 2, 3, 4, 5}, func(x int) string {\n    if x < 0 {\n        return \"negative\"\n    } else if x%2 == 0 {\n        return \"even\"\n    }\n    return \"odd\"\n})\n// [][]int{{-2, -1}, {0, 2, 4}, {1, 3, 5}}\n```\n\n----------------------------------------\n\nTITLE: Checking if Slice is Sorted by Key with IsSortedByKey in Go\nDESCRIPTION: Determines whether a slice is sorted according to the value returned by an iteratee function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_54\n\nLANGUAGE: go\nCODE:\n```\nslice := lo.IsSortedByKey([]string{\"a\", \"bb\", \"ccc\"}, func(s string) int {\n    return len(s)\n})\n// true\n```\n\n----------------------------------------\n\nTITLE: Using Interleave for Merging Multiple Slices in Go\nDESCRIPTION: Interleave combines multiple slices in a round-robin fashion, taking one element from each input slice in sequence until all elements are used.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_26\n\nLANGUAGE: go\nCODE:\n```\ninterleaved := lo.Interleave([]int{1, 4, 7}, []int{2, 5, 8}, []int{3, 6, 9})\n// []int{1, 2, 3, 4, 5, 6, 7, 8, 9}\n\ninterleaved := lo.Interleave([]int{1}, []int{2, 5, 8}, []int{3, 6}, []int{4, 7, 9, 10})\n// []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n```\n\n----------------------------------------\n\nTITLE: Capitalizing Strings in Go\nDESCRIPTION: Capitalize converts the first character of a string to uppercase and the remaining characters to lowercase. This is useful for formatting names, titles, and sentences.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_94\n\nLANGUAGE: go\nCODE:\n```\nstr := lo.Capitalize(\"heLLO\")\n// Hello\n```\n\n----------------------------------------\n\nTITLE: Summing Values in Collections in Go\nDESCRIPTION: Sum calculates the sum of all values in a numeric collection. If the collection is empty, it returns 0. This function simplifies the common operation of aggregating values.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_79\n\nLANGUAGE: go\nCODE:\n```\nlist := []int{1, 2, 3, 4, 5}\nsum := lo.Sum(list)\n// 15\n```\n\n----------------------------------------\n\nTITLE: Extracting Unique Map Keys with UniqKeys in Go\nDESCRIPTION: Creates a slice of unique keys from one or more maps, eliminating duplicates.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_57\n\nLANGUAGE: go\nCODE:\n```\nkeys := lo.UniqKeys(map[string]int{\"foo\": 1, \"bar\": 2}, map[string]int{\"baz\": 3})\n// []string{\"foo\", \"bar\", \"baz\"}\n\nkeys := lo.UniqKeys(map[string]int{\"foo\": 1, \"bar\": 2}, map[string]int{\"bar\": 3})\n// []string{\"foo\", \"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to kebab-case in Go\nDESCRIPTION: KebabCase converts a string to kebab case format where all words are lowercase and separated by hyphens. This is commonly used for URLs, HTML attributes, and CSS classes.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_91\n\nLANGUAGE: go\nCODE:\n```\nstr := lo.KebabCase(\"helloWorld\")\n// hello-world\n```\n\n----------------------------------------\n\nTITLE: Getting Nth Element or Fallback with NthOr in Go\nDESCRIPTION: Returns the element at index 'nth' of a collection or a fallback value if the index is out of bounds. Supports negative indices to access elements from the end.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_160\n\nLANGUAGE: go\nCODE:\n```\nnth := lo.NthOr([]int{10, 20, 30, 40, 50}, 2, -1)\n// 30\n\nnth := lo.NthOr([]int{10, 20, 30, 40, 50}, -1, -1)\n// 50\n\nnth := lo.NthOr([]int{10, 20, 30, 40, 50}, 5, -1)\n// -1 (fallback value)\n```\n\n----------------------------------------\n\nTITLE: Filtering Maps by Values in Go\nDESCRIPTION: PickByValues returns a new map containing only the entries with values that match the provided list of values. This allows for selective extraction of map entries based on their values.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_64\n\nLANGUAGE: go\nCODE:\n```\nm := lo.PickByValues(map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3}, []int{1, 3})\n// map[string]int{\"foo\": 1, \"baz\": 3}\n```\n\n----------------------------------------\n\nTITLE: Using Without to exclude specified values from a slice in Go\nDESCRIPTION: Without returns slice excluding all given values. It creates a new slice that contains all elements from the original slice except those specified in the arguments.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_125\n\nLANGUAGE: go\nCODE:\n```\nsubset := lo.Without([]int{0, 2, 10}, 2)\n// []int{0, 10}\n\nsubset := lo.Without([]int{0, 2, 10}, 0, 1, 2, 3, 4, 5)\n// []int{10}\n```\n\n----------------------------------------\n\nTITLE: Extracting Substrings in Go\nDESCRIPTION: Substring extracts a portion of a string starting from the specified position for the given length. It supports negative indices for counting from the end and handles boundary cases.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_86\n\nLANGUAGE: go\nCODE:\n```\nsub := lo.Substring(\"hello\", 2, 3)\n// \"llo\"\n\nsub := lo.Substring(\"hello\", -4, 3)\n// \"ell\"\n\nsub := lo.Substring(\"hello\", -2, math.MaxUint)\n// \"lo\"\n```\n\n----------------------------------------\n\nTITLE: Chunking Maps into Smaller Maps in Go\nDESCRIPTION: ChunkEntries splits a map into an array of smaller maps with the specified size. If the map cannot be split evenly, the final chunk will contain the remaining elements.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_72\n\nLANGUAGE: go\nCODE:\n```\nmaps := lo.ChunkEntries(\n    map[string]int{\n        \"a\": 1,\n        \"b\": 2,\n        \"c\": 3,\n        \"d\": 4,\n        \"e\": 5,\n    },\n    3,\n)\n// []map[string]int{\n//    {\"a\": 1, \"b\": 2, \"c\": 3},\n//    {\"d\": 4, \"e\": 5},\n// }\n```\n\n----------------------------------------\n\nTITLE: Using Times for Repeated Operation Generation in Go\nDESCRIPTION: Times invokes a callback function n times, returning an array of the results. The callback receives the current index as an argument.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/samber/lo\"\n\nlo.Times(3, func(i int) string {\n    return strconv.FormatInt(int64(i), 10)\n})\n// []string{\"0\", \"1\", \"2\"}\n```\n\n----------------------------------------\n\nTITLE: Counting Unicode Characters in Strings in Go\nDESCRIPTION: RuneLength is an alias to utf8.RuneCountInString which returns the number of Unicode code points (runes) in a string. This correctly handles multi-byte characters unlike the len() function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_88\n\nLANGUAGE: go\nCODE:\n```\nsub := lo.RuneLength(\"hellô\")\n// 5\n\nsub := len(\"hellô\")\n// 6\n```\n\n----------------------------------------\n\nTITLE: Dropping Elements from End While Condition is True with DropRightWhile in Go\nDESCRIPTION: Removes elements from the end of a slice while the predicate function returns true for each element.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_39\n\nLANGUAGE: go\nCODE:\n```\nl := lo.DropRightWhile([]string{\"a\", \"aa\", \"aaa\", \"aa\", \"aa\"}, func(val string) bool {\n    return len(val) <= 2\n})\n// []string{\"a\", \"aa\", \"aaa\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Tuples from Values in Go\nDESCRIPTION: T2 through T9 functions create tuples from a list of values. Tuples provide a way to group multiple values of potentially different types into a single structure for return values or complex data handling.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_96\n\nLANGUAGE: go\nCODE:\n```\ntuple1 := lo.T2(\"x\", 1)\n// Tuple2[string, int]{A: \"x\", B: 1}\n\nfunc example() (string, int) { return \"y\", 2 }\ntuple2 := lo.T2(example())\n// Tuple2[string, int]{A: \"y\", B: 2}\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings into Words in Go\nDESCRIPTION: Words splits a string into an array of its constituent words by detecting case changes, underscores, and other word boundaries. This is useful for text processing and formatting.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_93\n\nLANGUAGE: go\nCODE:\n```\nstr := lo.Words(\"helloWorld\")\n// []string{\"hello\", \"world\"}\n```\n\n----------------------------------------\n\nTITLE: Getting Nth Element with Nth in Go\nDESCRIPTION: Returns the element at index 'nth' of a collection. Supports negative indices to access elements from the end. Returns an error when the index is out of bounds.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_159\n\nLANGUAGE: go\nCODE:\n```\nnth, err := lo.Nth([]int{0, 1, 2, 3}, 2)\n// 2\n\nnth, err := lo.Nth([]int{0, 1, 2, 3}, -2)\n// 2\n```\n\n----------------------------------------\n\nTITLE: Unpacking Tuples in Go with Lo Library\nDESCRIPTION: Demonstrates how to unpack values from a tuple using the Unpack2 function and as a method of TupleX.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_97\n\nLANGUAGE: go\nCODE:\n```\nr1, r2 := lo.Unpack2(lo.Tuple2[string, int]{\"a\", 1})\n// \"a\", 1\n```\n\nLANGUAGE: go\nCODE:\n```\ntuple2 := lo.T2(\"a\", 1)\na, b := tuple2.Unpack()\n// \"a\", 1\n```\n\n----------------------------------------\n\nTITLE: Creating Nil Pointers with Nil in Go\nDESCRIPTION: Returns a nil pointer of the specified type, useful for creating typed nil pointers without verbose type declarations.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_178\n\nLANGUAGE: go\nCODE:\n```\nptr := lo.Nil[float64]()\n// nil\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings into Chunks in Go\nDESCRIPTION: ChunkString splits a string into an array of strings of the specified length. If the string can't be split evenly, the final chunk will contain the remaining characters.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_87\n\nLANGUAGE: go\nCODE:\n```\nlo.ChunkString(\"123456\", 2)\n// []string{\"12\", \"34\", \"56\"}\n\nlo.ChunkString(\"1234567\", 2)\n// []string{\"12\", \"34\", \"56\", \"7\"}\n\nlo.ChunkString(\"\", 2)\n// []string{\"\"}\n\nlo.ChunkString(\"1\", 2)\n// []string{\"1\"}\n```\n\n----------------------------------------\n\nTITLE: Zipping Arrays in Go with Lo Library\nDESCRIPTION: Shows how to create a slice of grouped elements from multiple arrays using the Zip2 function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_98\n\nLANGUAGE: go\nCODE:\n```\ntuples := lo.Zip2([]string{\"a\", \"b\"}, []int{1, 2})\n// []Tuple2[string, int]{{A: \"a\", B: 1}, {A: \"b\", B: 2}}\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to camelCase in Go\nDESCRIPTION: CamelCase converts a string to camel case format where all words except the first start with an uppercase letter and have no separators. This is commonly used for variable and function names.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_90\n\nLANGUAGE: go\nCODE:\n```\nstr := lo.CamelCase(\"hello_world\")\n// helloWorld\n```\n\n----------------------------------------\n\nTITLE: Truncating Strings with Ellipsis in Go\nDESCRIPTION: Ellipsis trims and truncates a string to a specified length and appends an ellipsis if truncated. This is useful for creating previews or summaries of longer text.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_95\n\nLANGUAGE: go\nCODE:\n```\nstr := lo.Ellipsis(\"  Lorem Ipsum  \", 5)\n// Lo...\n\nstr := lo.Ellipsis(\"Lorem Ipsum\", 100)\n// Lorem Ipsum\n\nstr := lo.Ellipsis(\"Lorem Ipsum\", 3)\n// ...\n```\n\n----------------------------------------\n\nTITLE: Unzipping Tuples in Go with Lo Library\nDESCRIPTION: Shows how to unzip an array of grouped elements back into separate arrays using the Unzip2 function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_100\n\nLANGUAGE: go\nCODE:\n```\na, b := lo.Unzip2([]Tuple2[string, int]{{A: \"a\", B: 1}, {A: \"b\", B: 2}})\n// []string{\"a\", \"b\"}\n// []int{1, 2}\n```\n\n----------------------------------------\n\nTITLE: Checking for Non-Nil Values with IsNotNil in Go\nDESCRIPTION: Checks if a value is not nil or if it's not a reference type with a nil underlying value. Works with interfaces that contain nil values, which is different from a direct nil check.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_176\n\nLANGUAGE: go\nCODE:\n```\nvar x int\nlo.IsNotNil(x)\n// true\n\nvar k struct{}\nlo.IsNotNil(k)\n// true\n\nvar i *int\nlo.IsNotNil(i)\n// false\n\nvar ifaceWithNilValue any = (*string)(nil)\nlo.IsNotNil(ifaceWithNilValue)\n// false\nifaceWithNilValue == nil\n// true\n```\n\n----------------------------------------\n\nTITLE: Getting Multiple Random Elements with Samples in Go\nDESCRIPTION: Returns N random unique items from a collection in random order.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_164\n\nLANGUAGE: go\nCODE:\n```\nlo.Samples([]string{\"a\", \"b\", \"c\"}, 3)\n// []string{\"a\", \"b\", \"c\"} in random order\n```\n\n----------------------------------------\n\nTITLE: Custom Unzipping with Transformation in Go using Lo Library\nDESCRIPTION: Demonstrates how to unzip a collection into separate arrays with custom transformation using the UnzipBy2 function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_101\n\nLANGUAGE: go\nCODE:\n```\na, b := lo.UnzipBy2([]string{\"hello\", \"john\", \"doe\"}, func(str string) (string, int) {\n    return str, len(str)\n})\n// []string{\"hello\", \"john\", \"doe\"}\n// []int{5, 4, 3}\n```\n\n----------------------------------------\n\nTITLE: Installing Lo Library in Go\nDESCRIPTION: Command to install the Lo library using Go modules. The library follows SemVer strictly and has no dependencies outside the Go standard library.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/samber/lo@v1\n```\n\n----------------------------------------\n\nTITLE: Inserting Elements at Index with Splice in Go\nDESCRIPTION: Inserts multiple elements at a specified index in a slice. Handles negative indices and overflow conditions safely.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_55\n\nLANGUAGE: go\nCODE:\n```\nresult := lo.Splice([]string{\"a\", \"b\"}, 1, \"1\", \"2\")\n// []string{\"a\", \"1\", \"2\", \"b\"}\n\n// negative\nresult = lo.Splice([]string{\"a\", \"b\"}, -1, \"1\", \"2\")\n// []string{\"a\", \"1\", \"2\", \"b\"}\n\n// overflow\nresult = lo.Splice([]string{\"a\", \"b\"}, 42, \"1\", \"2\")\n// []string{\"a\", \"b\", \"1\", \"2\"}\n```\n\n----------------------------------------\n\nTITLE: Converting Slice to Channel in Go with Lo Library\nDESCRIPTION: Shows how to convert a slice to a read-only channel using the SliceToChannel function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_106\n\nLANGUAGE: go\nCODE:\n```\nlist := []int{1, 2, 3, 4, 5}\n\nfor v := range lo.SliceToChannel(2, list) {\n    println(v)\n}\n// prints 1, then 2, then 3, then 4, then 5\n```\n\n----------------------------------------\n\nTITLE: Using None to check if no elements of a subset exist in a collection in Go\nDESCRIPTION: None returns true if no elements of a subset are contained in a collection or if the subset is empty. It ensures there's no overlap between two slices.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_120\n\nLANGUAGE: go\nCODE:\n```\nb := None([]int{0, 1, 2, 3, 4, 5}, []int{0, 2})\n// false\nb := None([]int{0, 1, 2, 3, 4, 5}, []int{-1, 6})\n// true\n```\n\n----------------------------------------\n\nTITLE: Converting Channel to Slice in Go with Lo Library\nDESCRIPTION: Demonstrates how to convert a channel to a slice using the ChannelToSlice function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_107\n\nLANGUAGE: go\nCODE:\n```\nlist := []int{1, 2, 3, 4, 5}\nch := lo.SliceToChannel(2, list)\n\nitems := ChannelToSlice(ch)\n// []int{1, 2, 3, 4, 5}\n```\n\n----------------------------------------\n\nTITLE: Using WithoutNth to exclude elements at specified positions in Go\nDESCRIPTION: WithoutNth returns a slice excluding elements at the specified positions. It creates a new slice that contains all elements from the original slice except those at the given indices.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_128\n\nLANGUAGE: go\nCODE:\n```\nsubset := lo.WithoutNth([]int{-2, -1, 0, 1, 2}, 3, -42, 1)\n// []int{-2, 0, 2}\n```\n\n----------------------------------------\n\nTITLE: Finding Latest Time with LatestBy in Go\nDESCRIPTION: Searches for the maximum time.Time in a collection using a provided iteratee function. Returns the zero value when the collection is empty.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_152\n\nLANGUAGE: go\nCODE:\n```\ntype foo struct {\n    bar time.Time\n}\n\nlatest := lo.LatestBy([]foo{{time.Now()}, {}}, func(i foo) time.Time {\n    return i.bar\n})\n// {bar:{2023-04-01 01:02:03 +0000 UTC}}\n```\n\n----------------------------------------\n\nTITLE: Custom Cartesian Product with Projection in Go using Lo Library\nDESCRIPTION: Demonstrates how to compute a custom cartesian product with projection using the CrossJoinBy2 function.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_103\n\nLANGUAGE: go\nCODE:\n```\nresult := lo.CrossJoinBy2([]string{\"hello\", \"john\", \"doe\"}, []int{1, 2}, func(a A, b B) string {\n    return fmt.Sprintf(\"%s - %d\", a, b)\n})\n// \"hello - 1\"\n// \"hello - 2\"\n// \"john - 1\"\n// \"john - 2\"\n// \"doe - 1\"\n// \"doe - 2\"\n```\n\n----------------------------------------\n\nTITLE: Getting Random Element with Sample in Go\nDESCRIPTION: Returns a random item from a collection. Returns the zero value when the collection is empty.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_162\n\nLANGUAGE: go\nCODE:\n```\nlo.Sample([]string{\"a\", \"b\", \"c\"})\n// a random string from []string{\"a\", \"b\", \"c\"}\n\nlo.Sample([]string{})\n// \"\"\n```\n\n----------------------------------------\n\nTITLE: Getting Random Element with Custom Generator using SampleBy in Go\nDESCRIPTION: Returns a random item from a collection using a provided random integer generator. Returns the zero value when the collection is empty.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_163\n\nLANGUAGE: go\nCODE:\n```\nimport \"math/rand\"\n\nr := rand.New(rand.NewSource(42))\nlo.SampleBy([]string{\"a\", \"b\", \"c\"}, r.Intn)\n// a random string from []string{\"a\", \"b\", \"c\"}, using a seeded random generator\n\nlo.SampleBy([]string{}, r.Intn)\n// \"\"\n```\n\n----------------------------------------\n\nTITLE: Converting from Any Slice in Go with FromAnySlice\nDESCRIPTION: FromAnySlice attempts to convert a slice of interface{} (any) to a typed slice. Returns a boolean indicating whether all elements were successfully converted.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_186\n\nLANGUAGE: go\nCODE:\n```\nelements, ok := lo.FromAnySlice([]any{\"foobar\", 42})\n// []string{}, false\n\nelements, ok := lo.FromAnySlice([]any{\"foobar\", \"42\"})\n// []string{\"foobar\", \"42\"}, true\n```\n\n----------------------------------------\n\nTITLE: Getting Zero Values in Go with Empty Function\nDESCRIPTION: Empty returns the zero value for a specified type, providing a type-safe way to get default values for any Go type.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_187\n\nLANGUAGE: go\nCODE:\n```\nlo.Empty[int]()\n// 0\nlo.Empty[string]()\n// \"\"\nlo.Empty[bool]()\n// false\n```\n\n----------------------------------------\n\nTITLE: Coalescing with Default in Go using CoalesceOrEmpty\nDESCRIPTION: CoalesceOrEmpty returns the first non-empty value from a list of arguments or the zero value if all are empty. Similar to Coalesce but without the boolean return.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_191\n\nLANGUAGE: go\nCODE:\n```\nresult := lo.CoalesceOrEmpty(0, 1, 2, 3)\n// 1\n\nresult := lo.CoalesceOrEmpty(\"\")\n// \"\"\n\nvar nilStr *string\nstr := \"foobar\"\nresult := lo.CoalesceOrEmpty(nil, nilStr, &str)\n// &\"foobar\"\n```\n\n----------------------------------------\n\nTITLE: Coalescing Slices in Go with CoalesceSlice\nDESCRIPTION: CoalesceSlice returns the first non-empty slice from a list of slices. Returns the slice and a boolean indicating if a non-empty slice was found.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_192\n\nLANGUAGE: go\nCODE:\n```\nresult, ok := lo.CoalesceSlice([]int{1, 2, 3}, []int{4, 5, 6})\n// [1, 2, 3]\n// true\n\nresult, ok := lo.CoalesceSlice(nil, []int{})\n// []\n// true\n\nresult, ok := lo.CoalesceSlice([]int(nil))\n// []\n// false\n```\n\n----------------------------------------\n\nTITLE: Keyed Debouncing in Go with NewDebounceBy\nDESCRIPTION: NewDebounceBy creates separate debounced functions for each distinct key, each delaying invocation until after the wait time. Returns the debounced function and a cancel function that takes a key parameter.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_203\n\nLANGUAGE: go\nCODE:\n```\nf := func(key string, count int) {\n    println(key + \": Called once after 100ms when debounce stopped invoking!\")\n}\n\ndebounce, cancel := lo.NewDebounceBy(100 * time.Millisecond, f)\nfor j := 0; j < 10; j++ {\n    debounce(\"first key\")\n    debounce(\"second key\")\n}\n\ntime.Sleep(1 * time.Second)\ncancel(\"first key\")\ncancel(\"second key\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment Without Docker\nDESCRIPTION: Commands for setting up the development environment locally without Docker. Includes installing dev dependencies and running tests with options for continuous test watching.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_211\n\nLANGUAGE: bash\nCODE:\n```\n# Install some dev dependencies\nmake tools\n\n# Run tests\nmake test\n# or\nmake watch-test\n```\n\n----------------------------------------\n\nTITLE: Dropping Elements While Condition is True with DropWhile in Go\nDESCRIPTION: Removes elements from the beginning of a slice while the predicate function returns true for each element.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_38\n\nLANGUAGE: go\nCODE:\n```\nl := lo.DropWhile([]string{\"a\", \"aa\", \"aaa\", \"aa\", \"aa\"}, func(val string) bool {\n    return len(val) <= 2\n})\n// []string{\"aaa\", \"aa\", \"aa\"}\n```\n\n----------------------------------------\n\nTITLE: Using ReduceRight for Slice Operations in Go\nDESCRIPTION: ReduceRight is similar to Reduce but iterates over elements from right to left, creating a different aggregation order for operations that rely on sequence.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nresult := lo.ReduceRight([][]int{{0, 1}, {2, 3}, {4, 5}}, func(agg []int, item []int, _ int) []int {\n    return append(agg, item...)\n}, []int{})\n// []int{4, 5, 2, 3, 0, 1}\n```\n\n----------------------------------------\n\nTITLE: Using NoneBy to test if no element satisfies a predicate in Go\nDESCRIPTION: NoneBy returns true if the predicate returns true for none of the elements in the collection or if the collection is empty. It verifies that no element satisfies a given condition.\nSOURCE: https://github.com/samber/lo/blob/master/README.md#2025-04-22_snippet_121\n\nLANGUAGE: go\nCODE:\n```\nb := NoneBy([]int{1, 2, 3, 4}, func(x int) bool {\n    return x < 0\n})\n// true\n```"
  }
]