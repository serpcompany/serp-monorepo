[
  {
    "owner": "communitytoolkit",
    "repo": "windows",
    "content": "TITLE: Executing Tasks using DispatcherQueue in C#\nDESCRIPTION: This snippet demonstrates how to get a DispatcherQueue instance on the UI thread, which can later be cached for use in background threads. It showcases dispatching code execution, both synchronous and asynchronous, using the EnqueueAsync method. The code returns results via Task objects, highlighting the flexibility in returning values.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/DispatcherQueueExtensions.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Get a DispatcherQueue instance for later use. This has to be called on the UI thread,\\n// but it can then be cached for later use and accessed from a background thread as well.\\nDispatcherQueue dispatcherQueue = DispatcherQueue.GetForCurrentThread();\\n\\n// Execute some code on the target dispatcher queue\\nawait dispatcherQueue.EnqueueAsync(() =>\\n{\\n});\\n\\n// Execute some code that also returns a value\\nint someValue = await dispatcherQueue.EnqueueAsync(() =>\\n{\\n    return 42;\\n});\\n\\n// Execute some asynchronous code\\nawait dispatcherQueue.EnqueueAsync(async () =>\\n{\\n    await Task.Delay(100);\\n});\\n\\n// Execute some asynchronous code that also returns a value\\nint someOtherValue = await dispatcherQueue.EnqueueAsync(async () =>\\n{\\n    await Task.Delay(100);\\n\\n    return 42;\\n});\n```\n\n----------------------------------------\n\nTITLE: String Formatting Conversion C#\nDESCRIPTION: Format a string property via data binding, limited to using a single input string, but can apply standard string.Format methodologies for formatting.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Converters/samples/Converters.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// StringFormatConverter Example Placeholder\n```\n\n----------------------------------------\n\nTITLE: Utilizing CameraHelper for Video Preview in C#\nDESCRIPTION: This snippet demonstrates initializing and using CameraHelper to fetch frame source groups, handle video preview events, and frame arrivals in UWP. It elucidates the integration path for CameraHelper, which is crucial for accessing video streams from connected cameras.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/CameraPreview/samples/CameraPreview.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar availableFrameSourceGroups = await CameraHelper.GetFrameSourceGroupsAsync();\nif(availableFrameSourceGroups != null)\n{\n  CameraHelper cameraHelper = new CameraHelper() { FrameSourceGroup = availableFrameSourceGroups.FirstOrDefault() };\n  _cameraPreviewControl.PreviewFailed += CameraPreviewControl_PreviewFailed;\n  await _cameraPreviewControl.StartAsync(cameraHelper);\n  _cameraPreviewControl.CameraHelper.FrameArrived += CameraPreviewControl_FrameArrived; \n}\n```\n\n----------------------------------------\n\nTITLE: Boolean to Object Conversion C#\nDESCRIPTION: Transforms a boolean into another object type, which is particularly beneficial for converting boolean values into visual representations like visibility or color in UI bindings.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Converters/samples/Converters.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// BoolToObject Converter Example Placeholder\n```\n\n----------------------------------------\n\nTITLE: Initializing CameraHelper and Capturing Video Frames in C#\nDESCRIPTION: This snippet demonstrates how to create a CameraHelper instance, initialize it, start capturing video frames, and handle frame arrival events. It also includes error handling for when camera initialization fails.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Helpers/samples/CameraHelper.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Creates a Camera Helper and gets video frames from an available frame source.\nusing CommunityToolkit.WinUI.Helpers.CameraHelper;\n\nCameraHelper _cameraHelper = new CameraHelper();\nvar result = await _cameraHelper.InitializeAndStartCaptureAsync();\n\n// Camera Initialization and Capture failed for some reason\nif(result != CameraHelperResult.Success)\n{\n  // get error information\n  var errorMessage = result.ToString();\n}\nelse \n{\n  // Subscribe to get frames as they arrive\n  _cameraHelper.FrameArrived += CameraHelper_FrameArrived;\n}\n\nprivate void CameraHelper_FrameArrived(object sender, FrameEventArgs e)\n{\n  // Gets the current video frame\n  VideoFrame currentVideoFrame  = e.VideoFrame;\n\n  // Gets the software bitmap image\n  SoftwareBitmap softwareBitmap = currentVideoFrame.SoftwareBitmap;\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Hyperlink to Commands in XAML using HyperlinkExtensions\nDESCRIPTION: This example demonstrates how to use HyperlinkExtensions attached properties to connect a Hyperlink element to a command in a viewmodel. The hyperlink is embedded within a TextBlock and configured to execute the bound command when clicked, passing the current data context as a parameter.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/HyperlinkExtensions.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<!-- Use Hyperlink in a wrapped TextBlock with text either side and ensure it executes a\n     command when clicked, passing the current data context as the command parameter -->\n<TextBlock xmlns:ui=\"using:CommunityToolkit.WinUI\">\n    <Run>Some leading text with a</Run>\n        <Hyperlink\n            ui:HyperlinkExtensions.Command=\"{Binding HyperlinkClicked}\"\n            ui:HyperlinkExtensions.CommandParameter=\"{Binding}\">hyperlink</Hyperlink>\n    <Run>in the middle.</Run>\n</TextBlock>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding with EnumValuesExtensions in XAML and C#\nDESCRIPTION: This example shows how to implement two-way binding between a ComboBox populated with enum values using EnumValuesExtensions and a property in the view model. It includes both the XAML markup and the corresponding C# property implementation.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/EnumValuesExtension.md#2025-04-22_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ComboBox\n    xmlns:ui=\"using:CommunityToolkit.WinUI\"\n    xmlns:enums=\"using:MyApplication.Enums\"\n    ItemsSource=\"{ui:EnumValues Type=enums:Animal}\"\n    SelectedItem=\"{x:Bind SelectedAnimal, Mode=OneWay}\" />\n```\n\nLANGUAGE: csharp\nCODE:\n```\nprivate Animal selectedAnimal = Animal.Dog;\n\npublic Animal SelectedAnimal\n{\n    get => selectedAnimal;\n    set\n    {\n        selectedAnimal = value;\n        OnPropertyChanged(nameof(SelectedAnimal));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Paged Data Source with IIncrementalSource Interface in C#\nDESCRIPTION: This snippet demonstrates how to implement the IIncrementalSource<> interface from CommunityToolkit.WinUI.Collections to create a paged collection source (PeopleSource) that serves as the backend for incremental loading scenarios. Dependencies include the CommunityToolkit.WinUI.Collections namespace, and a sample Person class. The GetPagedItemsAsync method fetches a specific page based on pageIndex and pageSize, and simulates asynchronous data access using Task.Delay. The input parameters are pageIndex and pageSize, and it returns an IEnumerable<Person> representing a subrange of available items. Data is provided dynamically, making this implementation suitable for large or remote data sets.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Collections/samples/IncrementalLoadingCollection.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Be sure to include the using at the top of the file:\n//using CommunityToolkit.WinUI.Collections;\n\npublic class Person\n{\n    public string Name { get; set; }\n}\n\npublic class PeopleSource : IIncrementalSource<Person>\n{\n    private readonly List<Person> people;\n\n    public PeopleSource()\n    {\n        // Creates an example collection.\n        people = new List<Person>();\n\n        for (int i = 1; i <= 200; i++)\n        {\n            var p = new Person { Name = \"Person \" + i };\n            people.Add(p);\n        }\n    }\n\n    public async Task<IEnumerable<Person>> GetPagedItemsAsync(int pageIndex, int pageSize)\n    {\n        // Gets items from the collection according to pageIndex and pageSize parameters.\n        var result = (from p in people\n                        select p).Skip(pageIndex * pageSize).Take(pageSize);\n\n        // Simulates a longer request...\n        await Task.Delay(1000);\n\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding IncrementalLoadingCollection to ListView in C#\nDESCRIPTION: This snippet shows how to initialize and bind an IncrementalLoadingCollection to a ListView control for on-demand loading of items. The collection is instantiated with a specified IIncrementalSource implementation (PeopleSource) and data type (Person), enabling automatic loading as the user scrolls. Requires CommunityToolkit.WinUI.Collections and a compatible ListView or GridView instance in the UI. Expects that PeopleListView is declared elsewhere and that the source (PeopleSource) supports incremental paging.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Collections/samples/IncrementalLoadingCollection.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar collection = new IncrementalLoadingCollection<PeopleSource, Person>();\nPeopleListView.ItemsSource = collection;\n```\n\n----------------------------------------\n\nTITLE: Migrating from DispatcherHelper to DispatcherQueue in C#\nDESCRIPTION: This snippet provides the necessary steps to migrate from CoreDispatcher and DispatcherHelper to the new DispatcherQueue system. It outlines the change required when accessing UI components from background threads, demonstrating the updated approach using DispatcherQueue to execute UI-related code asynchronously.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/DispatcherQueueExtensions.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Before\\nTask.Run(() =>\\n{\\n    await DispatcherHelper.ExecuteOnUIThreadAsync(() =>\\n    {\\n        MyTextBlock.Text = \\\"Hello from a background thread!\\\";\\n    });\\n});\\n\\n// After\\nDispatcherQueue dispatcherQueue = DispatcherQueue.GetForCurrentThread();\\n\\nTask.Run(() =>\\n{\\n    await dispatcherQueue.EnqueueAsync(() =>\\n    {\\n        MyTextBlock.Text = \\\"Hello from a background thread!\\\";\\n    });\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing QuickReturnHeaderBehavior in C#\nDESCRIPTION: QuickReturnHeaderBehavior allows header elements to quickly return into view when users scroll up, regardless of their position in the collection. Can be used in both collection controls and standard ScrollViewers.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Behaviors/samples/HeaderBehaviors.md#2025-04-22_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Setting Visual Properties using VisualExtensions in XAML\nDESCRIPTION: Example showing how to use VisualExtensions attached properties to modify Visual properties of a Border element. Demonstrates setting CenterPoint, Opacity, RotationAngleInDegrees, Scale, and NormalizedCenterPoint properties. The NormalizedCenterPoint property uses a Composition Expression animation to keep the center point synchronized with the Visual object size.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/VisualExtensions.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Page ...\n    xmlns:ui=\"using:CommunityToolkit.WinUI\">\n\n<Border\n    Height=\"100\"\n    Width=\"100\"\n    Background=\"Purple\"\n    ui:VisualExtensions.CenterPoint=\"50,50,0\"\n    ui:VisualExtensions.Opacity=\"0.5\"\n    ui:VisualExtensions.RotationAngleInDegrees=\"80\"\n    ui:VisualExtensions.Scale=\"2, 0.5, 1\"\n    ui:VisualExtensions.NormalizedCenterPoint=\"0.5, 0.5\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing sequential animations with activities in XAML\nDESCRIPTION: This complex example shows how to use IsSequential mode to create a sequence of animations that run one after another. It demonstrates coordinating animations across different UI elements by combining animation scopes with activities that trigger other animation sets.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Behaviors/samples/AnimationSet.md#2025-04-22_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<!--This set first runs a scope with three animations and waits for its completion.\n    Then, an activity is used to trigger another animation on its attached parent.\n    When that completes as well, the last animation in this set will be executed.-->\n<Button Content=\"Click me!\" Foreground=\"White\">\n    <animations:Explicit.Animations>\n        <animations:AnimationSet x:Name=\"SequentialAnimation\" IsSequential=\"True\">\n            <animations:AnimationScope>\n                <animations:ScaleAnimation From=\"1\" To=\"1.2\"/>\n                <animations:TranslationAnimation From=\"-20,0,0\" To=\"0\"/>\n                <animations:OpacityAnimation From=\"0\" To=\"1\"/>\n            </animations:AnimationScope>\n            <animations:StartAnimationActivity Animation=\"{x:Bind AnotherAnimation}\"/>\n            <animations:ScaleAnimation To=\"1\"/>\n        </animations:AnimationSet>\n    </animations:Explicit.Animations>\n</Button>\n\n<!--This rectangle will wiggle left and right when the activity is reached in the\n    sequential animation schedule for the button above. When this animation set\n    completes, the one that invoked it will resume playing normally.-->\n<Rectangle Height=\"80\" Width=\"120\" Fill=\"Green\">\n    <animations:Explicit.Animations>\n        <animations:AnimationSet x:Name=\"AnotherAnimation\">\n            <animations:TranslationAnimation Duration=\"0:0:1\" From=\"0\" To=\"0\">\n                <animations:Vector3KeyFrame Key=\"0.3\" Value=\"-20,0,0\"/>\n                <animations:Vector3KeyFrame Key=\"0.6\" Value=\"20,0,0\"/>\n            </animations:TranslationAnimation>\n        </animations:AnimationSet>\n    </animations:Explicit.Animations>\n</Rectangle>\n```\n\n----------------------------------------\n\nTITLE: Resource Name to Resource String Conversion C#\nDESCRIPTION: Takes a source string from the application resources and returns the associated resource value if it exists.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Converters/samples/Converters.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// ResourceNameToResourceString Converter Example Placeholder\n```\n\n----------------------------------------\n\nTITLE: Implementing Smooth Scroll into View in C#\nDESCRIPTION: Demonstrates the SmoothScrollIntoView extension methods for scrolling items into view with animation. Provides options for scrolling by index or item reference.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/ListViewExtensions.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Scrolling with index\nawait MyGridView.SmoothScrollIntoViewWithIndexAsync(index: int, itemPlacement: ItemPlacement, disableAnimation: bool, scrollIfVisible: bool, additionalHorizontalOffset: int, additionalVerticalOffset: int);\n\n// Scrolling with item\nawait MyGridView.SmoothScrollIntoViewWithItemAsync(item: object, itemPlacement: ItemPlacement, disableAnimation: bool, scrollIfVisible: bool, additionalHorizontalOffset: int, additionalVerticalOffset: int);\n```\n\n----------------------------------------\n\nTITLE: File Size to Friendly String Conversion C#\nDESCRIPTION: Converts a file size from bytes into a human-readable format using a conversion method for user-friendly display in UI.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Converters/samples/Converters.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// FileSizeToFriendlyString Converter Example Placeholder\n```\n\n----------------------------------------\n\nTITLE: Binding Commands to ListView Items in XAML\nDESCRIPTION: Demonstrates how to attach an ICommand to handle ListView item interactions using the Command extension property. Requires IsItemClickEnabled to be true.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/ListViewExtensions.md#2025-04-22_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<Page ...\n     xmlns:ui=\"using:CommunityToolkit.WinUI\">\n     \n<ListView\n    ui:ListViewExtensions.Command=\"{x:Bind MainViewModel.ItemSelectedCommand, Mode=OneWay}\"\n    IsItemClickEnabled=\"True\"\n    ItemsSource=\"{x:Bind MainViewModel.Items, Mode=OneWay}\"\n    SelectionMode=\"None\" />\n```\n\n----------------------------------------\n\nTITLE: Inverting Boolean Value C#\nDESCRIPTION: This converter reverses a boolean value — changing True to False, and vice versa. It can be useful for data binding scenarios where logical negation is needed.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Converters/samples/Converters.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// BoolNegation Converter Example Placeholder\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorPicker Control in C#\nDESCRIPTION: The ColorPicker control provides users with multiple ways to select colors including a color spectrum, palette, sliders, and text input. It can be used as a standalone control for color selection in UWP applications.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/ColorPicker/samples/ColorPicker.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nColorPicker\n```\n\n----------------------------------------\n\nTITLE: Using CameraHelper with a Specific Media Frame Source Group in C#\nDESCRIPTION: This example shows how to get available frame source groups, initialize CameraHelper with a specific group, and optionally set a different frame source format. It's useful when you need to work with a particular camera on a device with multiple cameras.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Helpers/samples/CameraHelper.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing CommunityToolkit.WinUI.Helpers.CameraHelper;\n\nvar availableFrameSourceGroups = await CameraHelper.GetFrameSourceGroupsAsync();\nif(availableFrameSourceGroups != null)\n{\n  CameraHelper cameraHelper = new CameraHelper() { FrameSourceGroup = availableFrameSourceGroups.FirstOrDefault() };\n  var result = await cameraHelper.InitializeAndStartCaptureAsync();\n\n  // Camera Initialization succeeded\n  if(result == CameraHelperResult.Success)\n  {\n    // Subscribe to get frames as they arrive\n    cameraHelper.FrameArrived += CameraHelper_FrameArrived;\n\n    // Optionally set a different frame source format\n    var newFormat = cameraHelper.FrameFormatsAvailable.Find((format) => format.VideoFormat.Width == 640);\n    if (newFormat != null)\n    {\n      await cameraHelper.PreviewFrameSource.SetFormatAsync(newFormat);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Surface Dial Support to TextBox\nDESCRIPTION: Example of implementing Surface Dial integration with TextBox controls, enabling value modification through dial rotation and navigation through dial clicks.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/TextBoxExtensions.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nSurfaceDialOptionsSample\n```\n\n----------------------------------------\n\nTITLE: Finding Visual Descendants and Ascendants with DependencyObjectExtensions in C#\nDESCRIPTION: These code examples demonstrate how to use DependencyObjectExtensions to navigate the XAML visual tree in UWP applications. They require references to the Microsoft.Toolkit.Uwp.UI namespace and optionally System.Linq for collection filtering. Key methods shown include FindDescendant (by name or type), FindDescendants (for all children), and FindAscendant (by name or type), allowing developers to efficiently search UI elements in both directions. The inputs are UI elements (DependencyObject instances) and optionally type parameters or element names; the outputs are matching descendant or ascendant UI elements, supporting robust customization and querying of complex visual trees.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/DependencyObjectExtensions.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Include the namespace to access extensions\nusing Microsoft.Toolkit.Uwp.UI;\n\n// Find a visual descendant control using its name\nvar control = uiElement.FindDescendant(\"MyTextBox\");\n\n// Find the first visual descendant control of a specified type\ncontrol = uiElement.FindDescendant<ListView>();\n\n// Find all visual descendant controls of the specified type.\n// We use LINQ here to filter children of a specific type.\nusing System.Linq;\n\nforeach (var child in uiElement.FindDescendants().OfType<ListViewItem>())\n{\n    // ...\n}\n\n// Find the first visual ascendant control using its name\ncontrol = uiElement.FindAscendant(\"MyScrollViewer\");\n\n// Find the first visual ascendant control of a specified type\ncontrol = uiElement.FindAscendant<ScrollViewer>();\n```\n\n----------------------------------------\n\nTITLE: Implementing AttachedDropShadow as a Resource in XAML\nDESCRIPTION: Shows how to define an AttachedDropShadow as a resource that can be reused throughout the application to maintain consistent shadow styling across multiple elements.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/AttachedDropShadow.md#2025-04-22_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n> [!SAMPLE AttachedDropShadowResourceSample]\n```\n\n----------------------------------------\n\nTITLE: Creating a simple AnimationSet with opacity and translation animations in XAML\nDESCRIPTION: A basic animation example that fades in a button while translating it. The animation is attached directly to the Button using the Explicit.Animations attached property and can be referenced via x:Name to start it programmatically.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Behaviors/samples/AnimationSet.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<!--A simple animation using default animation types-->\n<Button Content=\"Click me!\">\n    <animations:Explicit.Animations>\n        <animations:AnimationSet x:Name=\"FadeInAnimation\">\n            <animations:OpacityAnimation From=\"0\" To=\"1\"/>\n            <animations:TranslationAnimation From=\"-20,0,0\" To=\"0\"/>\n        </animations:AnimationSet>\n    </animations:Explicit.Animations>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Loading, Setting, and Saving Images with ImageCropper (C#)\nDESCRIPTION: Shows how to load images from file and set the source for the ImageCropper control in C#. Also demonstrates saving the cropped image to a stream in PNG format. Requires a reference to CommunityToolkit.WinUI.Controls and appropriate using directives. Key parameters: file (StorageFile), writeableBitmap (WritableBitmap), and fileStream. Output is a cropped image saved to a user-specified file or stream. Ensure appropriate permissions for file access.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/ImageCropper/samples/ImageCropper.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n//Load an image.\\nawait ImageCropper.LoadImageFromFile(file);\\n\\n//Another way to load an image.\\nImageCropper.Source = writeableBitmap;\\n\\n//Saves the cropped image to a stream.\\nusing (var fileStream = await someFile.OpenAsync(FileAccessMode.ReadWrite, StorageOpenOptions.None))\\n{\\n    await _imageCropper.SaveAsync(fileStream, BitmapFileFormat.Png);\\n}\n```\n\n----------------------------------------\n\nTITLE: Animating Composition/Win2D Effects with Behaviors in XAML\nDESCRIPTION: This XAML example illustrates combining standard UI animations (`ScaleAnimation`) with effect animations (`BlurEffectAnimation`, `SaturationEffectAnimation`, `ExposureEffectAnimation`) within a single `AnimationSet`. The effects are applied to a `Button` using `PipelineVisualFactory` from `CommunityToolkit.WinUI.Media`, and the entire animation sequence is triggered on button click via `EventTriggerBehavior` and `StartAnimationAction`. Note the requirement to set `IsAnimatable=\\\"True\\\"` on the effects intended for animation.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Behaviors/samples/AnimationSet.md#2025-04-22_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<Button>\n    <!--Behavior to trigger the animation on click-->\n    <Interactivity:Interaction.Behaviors>\n        <Interactions:EventTriggerBehavior EventName=\"Click\">\n            <behaviors:StartAnimationAction Animation=\"{x:Bind MyAnimationSet}\" />\n        </Interactions:EventTriggerBehavior>\n    </Interactivity:Interaction.Behaviors>\n\n    <!--VisualFactory to create and attach a custom Win2D/Composition pipeline-->\n    <media:UIElementExtensions.VisualFactory>\n        <media:PipelineVisualFactory Source=\"{media:BackdropSource}\">\n            <media:BlurEffect x:Name=\"ImageBlurEffect\" Amount=\"32\" IsAnimatable=\"True\"/>\n            <media:SaturationEffect x:Name=\"ImageSaturationEffect\" Value=\"0\" IsAnimatable=\"True\"/>\n            <media:ExposureEffect x:Name=\"ImageExposureEffect\" Amount=\"0\" IsAnimatable=\"True\"/>\n        </media:PipelineVisualFactory>\n    </media:UIElementExtensions.VisualFactory>\n\n    <!--AnimationSet mixing UI element animations and effect animations-->\n    <animations:Explicit.Animations>\n        <animations:AnimationSet x:Name=\"MyAnimationSet\">\n            <animations:AnimationScope Duration=\"0:0:5\" EasingMode=\"EaseOut\">\n                <animations:ScaleAnimation From=\"1.1\" To=\"1\"/>\n                <animations:BlurEffectAnimation From=\"32\" To=\"0\" Target=\"{x:Bind ImageBlurEffect}\"/>\n                <animations:SaturationEffectAnimation From=\"0\" To=\"1\" Target=\"{x:Bind ImageSaturationEffect}\"/>\n                <animations:ExposureEffectAnimation From=\"1\" To=\"0\" Target=\"{x:Bind ImageExposureEffect}\"/>\n            </animations:AnimationScope>\n        </animations:AnimationSet>\n    </animations:Explicit.Animations>\n    \n    <!--Button content here...-->\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Using String Extensions for Email and Decimal Validation in C#\nDESCRIPTION: Demonstrates how to use string extension methods from the CommunityToolkit.WinUI namespace to validate email addresses and check if a string contains a decimal number.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/StringExtensions.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing CommunityToolkit.WinUI;\n\nstring str = \"test@test.com\";\nbool isValid = str.IsEmail();    //Returns true\n\nstring str = \"123+888\";\nbool isValid = str.IsDecimal();  //Returns false\n```\n\n----------------------------------------\n\nTITLE: Using Logical Tree Extensions with C# in Windows Community Toolkit\nDESCRIPTION: Examples of using the logical tree extension methods such as FindChild, FindParent, and GetContentControl to explore the logical tree from a FrameworkElement instance. These methods help find child or parent objects connected to a UI element.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/FrameworkElementExtensions.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Include the namespace to access the extensions\nusing CommunityToolkit.WinUI;\n\n// Find a logical child control using its name\nvar control = uiElement.FindChild(\"MyTextBox\");\n\n// Find the first logical child control of a specified type\ncontrol = uiElement.FindChild<ListView>();\n\n// Find all logical child controls of the specified type.\n// The FindChildren extension will iterate through all the existing\n// child nodes of the starting control, so here we also use the\n// OfType<T>() LINQ extension (from System.Linq) to filter to a type.\nforeach (var child in uiElement.FindChildren().OfType<ListViewItem>())\n{\n    // ...\n}\n\n// Find the first logical parent using its name\ncontrol = uiElement.FindParent(\"MyGrid\");\n\n// Find the first logical parent control of a specified type\ncontrol = uiElement.FindParent<Grid>();\n\n// Retrieves the Content for the specified control from whatever its \"Content\" property may be\nvar content = uiElement.GetContentControl();\n```\n\n----------------------------------------\n\nTITLE: Creating an AnimationSet with keyframes and XAML layer targeting\nDESCRIPTION: An advanced animation example that uses AnimationScope to group animations with the same duration and easing, and demonstrates how to use keyframes for complex color animations. It also shows how to target the XAML layer to animate a brush property.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Behaviors/samples/AnimationSet.md#2025-04-22_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<!--An animation set using a scope and explicit keyframes-->\n<Button Content=\"Click me!\" Foreground=\"White\">\n    <animations:Explicit.Animations>\n        <animations:AnimationSet x:Name=\"FadeInAnimation\">\n            <animations:AnimationScope Duration=\"0:0:1\" EasingType=\"Sine\">\n                <animations:OpacityAnimation From=\"0\" To=\"1\"/>\n                <animations:ColorAnimation Target=\"(Button.Foreground).(SolidColorBrush.Color)\" Layer=\"Xaml\">\n                    <animations:ColorKeyFrame Key=\"0.0\" Value=\"White\"/>\n                    <animations:ColorKeyFrame Key=\"0.5\" Value=\"Orange\"/>\n                    <animations:ColorKeyFrame Key=\"0.8\" Value=\"Green\" EasingType=\"Linear\"/>\n                    <animations:ColorKeyFrame Key=\"1.0\" Value=\"White\" EasingType=\"Cubic\" EasingMode=\"EaseOut\"/>\n                </animations:ColorAnimation>\n            </animations:AnimationScope>\n        </animations:AnimationSet>\n    </animations:Explicit.Animations>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Using NotificationDeferrer in AdvancedCollectionView\nDESCRIPTION: Demonstrates how to use the NotificationDeferrer helper to improve performance when doing bulk modifications to an AdvancedCollectionView. The deferrer temporarily suspends updates and automatically refreshes the collection when disposed.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Collections/samples/AdvancedCollectionView.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing (acv.DeferRefresh())\n{\n    for (var i = 0; i < 500; i++)\n    {\n        acv.Add(new Person { Name = \"defer\" });\n    }\n} // acv.Refresh() gets called here\n```\n\n----------------------------------------\n\nTITLE: Implementing StackedNotificationsBehavior with InfoBar in XAML\nDESCRIPTION: Shows how to attach the StackedNotificationsBehavior to a WinUI InfoBar control to enable notification functionality. This is the recommended replacement for the previous InAppNotification control.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Behaviors/samples/StackedNotificationsBehavior.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<muxc:InfoBar>\n  <interactivity:Interaction.Behaviors>\n    <behaviors:StackedNotificationsBehavior x:Name=\"ExampleInAppNotification\" />\n  </interactivity:Interaction.Behaviors>\n</muxc:InfoBar>\n```\n\n----------------------------------------\n\nTITLE: Visibility to Boolean Conversion C#\nDESCRIPTION: Converts a Visibility enumeration into a boolean, facilitating straightforward UX adaptations between visible elements and boolean logic.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Converters/samples/Converters.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n// VisibilityToBool Converter Example Placeholder\n```\n\n----------------------------------------\n\nTITLE: String to Visibility Conversion C#\nDESCRIPTION: Converts a string to a Visibility enumeration, reverting to a collapsed state if the string is empty or null for UX simplification.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Converters/samples/Converters.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// StringVisibility Converter Example Placeholder\n```\n\n----------------------------------------\n\nTITLE: Implementing TextBox Regex Validation\nDESCRIPTION: Code sample demonstrating regex validation for TextBox controls with three validation modes: Normal, Forced, and Dynamic. These modes control how validation is applied and how invalid input is handled.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/TextBoxExtensions.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nRegexSample\n```\n\n----------------------------------------\n\nTITLE: Setting List Data Item for Connected Animation\nDESCRIPTION: Code example showing how to specify which item should be animated during navigation using the SetListDataItemForNextConnectedAnimation extension method.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Animations/samples/ConnectedAnimations.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    // dataItemToAnimate is an object in the ListViewBase.ItemsSource collection\n    Frame.SetListDataItemForNextConnectedAnimation(dataItemToAnimate);\n    Frame.Navigate(typeof(DetailsPage), dataItemToAnimate.Id);\n```\n\n----------------------------------------\n\nTITLE: Handling RangeSelector Thumb Drag Events in ScrollViewer - Windows CommunityToolkit - C#\nDESCRIPTION: This C# code implements the event handlers for the RangeSelector's ThumbDragStarted and ThumbDragCompleted events within a ScrollViewer. When a user begins dragging a RangeSelector thumb, scrolling is temporarily disabled to allow pointer event capture by the control; scrolling is restored once the drag operation completes. Dependencies include a ScrollViewer instance, the RangeSelector, and appropriate event arguments. Key parameters are the event argument instances and the ScrollViewer's scroll mode properties. Inputs are the drag events triggered by user interaction, and outputs are the runtime property changes to the ScrollViewer. Limitation: This approach expects ScrollViewer and RangeSelector are present and named accordingly.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/RangeSelector/samples/RangeSelector.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void Selector_OnDragStarted(object sender, DragStartedEventArgs e)\n{\n ScrollViewer.HorizontalScrollMode = ScrollMode.Disabled;\n ScrollViewer.VerticalScrollMode = ScrollMode.Disabled;\n}\n\nprivate void Selector_OnDragCompleted(object sender, DragCompletedEventArgs e)\n{\n ScrollViewer.HorizontalScrollMode = ScrollMode.Auto;\n ScrollViewer.VerticalScrollMode = ScrollMode.Auto;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating CameraPreview Control in XAML\nDESCRIPTION: This XAML snippet demonstrates how to initiate the CameraPreview control within a XAML page. The control is used to display video from a camera source. It is essential to ensure the webcam capability is enabled in the application manifest.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/CameraPreview/samples/CameraPreview.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<controls:CameraPreview x:Name=\"CameraPreviewControl\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing StickyHeaderBehavior in C#\nDESCRIPTION: StickyHeaderBehavior keeps header elements visible while users scroll through the collection. It works with both standard collection controls and HeaderedItemsControl to maintain context at the top of the view.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Behaviors/samples/HeaderBehaviors.md#2025-04-22_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Implementing TextBox Mask Formatting\nDESCRIPTION: Sample showing text mask implementation for TextBox controls using built-in variables (a, 9, *) and custom masks. Supports both variable and fixed characters with escape sequences for special formatting.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/TextBoxExtensions.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTextBoxMaskSample\n```\n\n----------------------------------------\n\nTITLE: Double to Visibility Conversion C#\nDESCRIPTION: Converts a double value into another object, used often to adapt double values to UI visual indicators like visibility, with conditions based on GreaterThan/LessThan parameters.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Converters/samples/Converters.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// DoubleToVisibility Converter Example Placeholder\n```\n\n----------------------------------------\n\nTITLE: Enabling MiddleClickScrolling in XAML\nDESCRIPTION: This XAML code snippet demonstrates how to enable middle-click scrolling functionality in a ScrollViewer or a ListView using the EnableMiddleClickScrolling property from ScrollViewerExtensions. This allows users to scroll using the middle mouse button by moving the pointer in the desired scroll direction.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/ScrollViewerExtensions.md#2025-04-22_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<!-- Setting MiddleClickScrolling directly for ScrollViewer -->\n<ScrollViewer\n    xmlns:ui=\"using:CommunityToolkit.WinUI\"\n    ui:ScrollViewerExtensions.EnableMiddleClickScrolling=\"True\">\n    <!-- ScrollViewer items -->\n</ScrollViewer>\n\n<!-- Setting MiddleClickScrolling fot the ancestor of ScrollViewer -->\n<ListView\n    xmlns:ui=\"using:CommunityToolkit.WinUI\"\n    ui:ScrollViewerExtensions.EnableMiddleClickScrolling=\"True\">\n    <!-- ListView items -->\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Using expression animations with keyframes in AnimationSet\nDESCRIPTION: This example demonstrates how to use expression animations within keyframes when targeting the Composition layer. The rotation animation uses an expression to dynamically calculate the rotation value based on the target element's opacity.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Behaviors/samples/AnimationSet.md#2025-04-22_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<!--Keyframes can use expressions as well (on the Composition layer)-->\n<Button Content=\"Click me!\">\n    <animations:Explicit.Animations>\n        <animations:AnimationSet x:Name=\"RotationAnimation\">\n            <animations:RotationInDegreesAnimation>\n                <animations:ScalarKeyFrame Key=\"0.0\" Value=\"0\"/>\n                <animations:ScalarKeyFrame Key=\"1.0\" Expression=\"Lerp(-180, 180, this.Target.Opacity)\"/>\n            </animations:RotationInDegreesAnimation>\n        </animations:AnimationSet>\n    </animations:Explicit.Animations>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Hover Animation with AttachedCardShadow in XAML\nDESCRIPTION: This code demonstrates how to create a shadow animation effect when hovering over an image. It uses AttachedCardShadow with OffsetDropShadowAnimation, triggered by pointer events. The animation increases the shadow offset on hover and reverts it when the pointer exits.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/ShadowAnimations.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n    xmlns:ui=\"using:CommunityToolkit.WinUI\"\n    xmlns:media=\"using:CommunityToolkit.WinUI.Media\"\n    xmlns:interactivity=\"using:Microsoft.Xaml.Interactivity\"\n    xmlns:interactions=\"using:Microsoft.Xaml.Interactions.Core\"\n    xmlns:ani=\"using:CommunityToolkit.WinUI.Animations\"\n    xmlns:behaviors=\"using:CommunityToolkit.WinUI.Behaviors\"/>\n\n    <Image Height=\"100\" Width=\"100\"\n           Source=\"ms-appx:///Assets/Photos/Owl.jpg\">\n        <ui:Effects.Shadow>\n            <media:AttachedCardShadow Offset=\"4\" CornerRadius=\"0\"/>\n        </ui:Effects.Shadow>\n        <ani:Explicit.Animations>\n            <ani:AnimationSet x:Name=\"ShadowEnterAnimation\">\n                <ani:OffsetDropShadowAnimation To=\"12\"/>\n            </ani:AnimationSet>\n\n            <ani:AnimationSet x:Name=\"ShadowExitAnimation\">\n                <ani:OffsetDropShadowAnimation To=\"4\"/>\n            </ani:AnimationSet>\n        </ani:Explicit.Animations>\n        <interactivity:Interaction.Behaviors>\n            <interactions:EventTriggerBehavior EventName=\"PointerEntered\">\n                <behaviors:StartAnimationAction Animation=\"{x:Bind ShadowEnterAnimation}\"/>\n            </interactions:EventTriggerBehavior>\n            <interactions:EventTriggerBehavior EventName=\"PointerExited\">\n                <behaviors:StartAnimationAction Animation=\"{x:Bind ShadowExitAnimation}\"/>\n            </interactions:EventTriggerBehavior>\n        </interactivity:Interaction.Behaviors>\n    </Image>\n```\n\n----------------------------------------\n\nTITLE: Converting Between Color Formats Using ColorHelper in C#\nDESCRIPTION: This snippet demonstrates how to convert colors between different formats including HTML hex strings, color names, HSL, HSV, and integer representations using the ColorHelper extension methods.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Helpers/samples/ColorHelper.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nColor color = \"#FFFF0000\".ToColor();\nColor color = \"Red\".ToColor();\nstring hex = Colors.Red.ToHex();\nHslColor hsl = Colors.Red.ToHsl();\nHsvColor hsv = Colors.Red.ToHsv();\nint i = Colors.Red.ToInt();\n```\n\n----------------------------------------\n\nTITLE: Applying AttachedDropShadow Through Styles in XAML\nDESCRIPTION: Demonstrates how to incorporate AttachedDropShadow into styles, allowing for automatic application of shadows to elements of a certain type without individually attaching shadows to each element.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/AttachedDropShadow.md#2025-04-22_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n> [!SAMPLE AttachedDropShadowStyleSample]\n```\n\n----------------------------------------\n\nTITLE: Defining a RichSuggestBox Control in XAML\nDESCRIPTION: The XAML snippet demonstrates how to define a RichSuggestBox control with placeholder text, a template for suggestion items, and specified prefixes for initiating suggestions. Dependencies include a resource dictionary for suggestion templates.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/RichSuggestBox/samples/RichSuggestBox.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<controls:RichSuggestBox\n  PlaceholderText=\"Leave a comment\"\n  ItemTemplate=\"{StaticResource SuggestionTemplate}\"\n  Prefixes=\"@#\" />\n```\n\n----------------------------------------\n\nTITLE: Color to Display Name Conversion C#\nDESCRIPTION: This converter translates a color value to its closest display name. This may enhance UI understandability by using recognizable color names.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Converters/samples/Converters.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// ColorToDisplay Name Converter Example Placeholder\n```\n\n----------------------------------------\n\nTITLE: Defining RangeSelector within ScrollViewer - Windows CommunityToolkit - XAML\nDESCRIPTION: This XAML snippet demonstrates how to declare a RangeSelector control inside a ScrollViewer. It assigns event handlers for the thumb drag started and completed events, enabling developers to manage ScrollViewer behavior during RangeSelector interactions. The snippet is suitable for UWP or WinUI XAML applications and requires the Windows CommunityToolkit and its controls namespace. Inputs include pointer events from user interaction with the RangeSelector thumbs. There are no direct outputs; instead, the purpose is to wire up the visual and interactive elements for further handling in code-behind. Limitations: Additional code is needed to handle pointer events to avoid ScrollViewer interference.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/RangeSelector/samples/RangeSelector.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<controls:RangeSelector x:Name=\\\"Selector\\\" ThumbDragStarted=\\\"Selector_OnDragStarted\\\" ThumbDragCompleted=\\\"Selector_OnDragCompleted\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Checking for Design Time Mode in C#\nDESCRIPTION: This code snippet demonstrates how to use the DesignTimeHelpers class to detect if the code is running in design time mode, either legacy or enhanced. This allows developers to implement conditional logic that only executes at design time.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Helpers/samples/DesignTimeHelper.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nif (DesignTimeHelpers.IsRunningInLegacyDesignerMode || DesignTimeHelpers.IsRunningInEnhancedDesignerMode)\n{\n  // Design time\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Token Selection in RichSuggestBox\nDESCRIPTION: The C# code implements event handlers for handling token selection and suggestion requests within a RichSuggestBox. Dependencies include collections of SampleHashtagDataType and SampleEmailDataType for providing suggestions.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/RichSuggestBox/samples/RichSuggestBox.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void OnSuggestionChosen(RichSuggestBox sender, SuggestionChosenEventArgs args)\n{\n  if (args.Prefix == \"#\")\n  {\n    // User selected a hashtag item\n    args.DisplayText = ((SampleHashtagDataType)args.SelectedItem).Text;\n  }\n  else\n  {\n    // User selected a mention item\n    args.DisplayText = ((SampleEmailDataType)args.SelectedItem).DisplayName;\n  }\n}\n\nprivate void OnSuggestionRequested(RichSuggestBox sender, SuggestionRequestedEventArgs args)\n{\n  sender.ItemsSource = args.Prefix == \"#\"\n    ? _hashtags.Where(x => x.Text.Contains(args.QueryText, StringComparison.OrdinalIgnoreCase))\n    : _emails.Where(x => x.DisplayName.Contains(args.QueryText, StringComparison.OrdinalIgnoreCase));\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Standard Animations with Behaviors in XAML\nDESCRIPTION: This XAML snippet shows how to use `EventTriggerBehavior` and `StartAnimationAction` from the Behaviors package to start a `ScaleAnimation` defined within an `AnimationSet` when a `Button` is clicked. It also demonstrates using `AnimationEndBehavior` to execute an `InvokeCommandAction` upon the animation's completion, linking UI interaction directly to ViewModel logic declaratively.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Behaviors/samples/AnimationSet.md#2025-04-22_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<Button>\n    <!--Use StartAnimationAction to trigger the animation on click-->\n    <Interactivity:Interaction.Behaviors>\n        <Interactions:EventTriggerBehavior EventName=\"Click\">\n            <behaviors:StartAnimationAction Animation=\"{x:Bind ScaleAnimation}\" />\n        </Interactions:EventTriggerBehavior>\n    </Interactivity:Interaction.Behaviors>\n    <animations:Explicit.Animations>\n        <animations:AnimationSet x:Name=\"ScaleAnimation\">\n            <animations:ScaleAnimation From=\"1\" To=\"1.2\"/>\n\n            <!--Use AnimationEndBehavior to invoke a command when the animation ends-->\n            <Interactivity:Interaction.Behaviors>\n                <behaviors:AnimationEndBehavior>\n                    <Interactions:InvokeCommandAction Command=\"{x:Bind ViewModel.MyCommand}\"/>\n                </behaviors:AnimationEndBehavior>\n            </Interactivity:Interaction.Behaviors>\n        </animations:AnimationSet>\n    </animations:Explicit.Animations>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Basic SettingsExpander Usage in XAML\nDESCRIPTION: Demonstrates the fundamental use of the `SettingsExpander` control in XAML. It shows how to group multiple `SettingsCard` controls within the expander's `Items` collection to create a collapsible section. The expander itself can also display primary content like a `SettingsCard`.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/SettingsControls/samples/SettingsExpander.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n[!SAMPLE SettingsExpanderSample]\n```\n\n----------------------------------------\n\nTITLE: KeyDownTriggerBehavior Implementation\nDESCRIPTION: A behavior that monitors key press events on a UIElement and executes defined actions in response. Extends the Microsoft.Xaml.Behaviors functionality.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Behaviors/samples/Behaviors.md#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Connected Animation GridView Implementation\nDESCRIPTION: XAML implementation showing how to set up connected animations in a GridView with ListItemKey and ListItemElementName.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Animations/samples/ConnectedAnimations.md#2025-04-22_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<GridView x:Name=\"listView\" Margin=\"0, 40, 0, 0\" SelectionMode=\"None\"\nGrid.Row=\"1\" ItemClick=\"ListView_ItemClick\" IsItemClickEnabled=\"True\"\nanimations:Connected.ListItemElementName=\"ItemThumbnail\"\nanimations:Connected.ListItemKey=\"listItem\">\n    <GridView.ItemTemplate>\n        <DataTemplate x:DataType=\"data:Item\">\n            <StackPanel>\n                <Border x:Name=\"ItemThumbnail\" Background=\"Purple\" Height=\"200\" Width=\"200\"/>\n                <TextBlock Text=\"{x:Bind Title}\"/>\n            </StackPanel>\n        </DataTemplate>\n    </GridView.ItemTemplate>\n</GridView>\n```\n\n----------------------------------------\n\nTITLE: Applying AcrylicBrush in XAML\nDESCRIPTION: Demonstrates how to apply an AcrylicBrush to add a translucent texture on app surfaces, enhancing depth and visual hierarchy in UWP applications. It includes modes for 'Backdrop' and 'HostBackdrop'.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Media/samples/Brushes.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[!SAMPLE AcrylicBrushSample]\n```\n\n----------------------------------------\n\nTITLE: Attaching Implicit Animations to UI Elements in XAML\nDESCRIPTION: This example demonstrates how to attach show, hide, and property-triggered implicit animations to a UI element using the Implicit class. It includes translation, opacity, scalar, offset, rotation and scale animations with varying durations and properties.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Animations/samples/Animations.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<!--Implicit show animations-->\n<animations:Implicit.ShowAnimations>\n  <animations:TranslationAnimation Duration=\"0:0:1\" From=\"0,-200,0\" To=\"0\"/>\n  <animations:OpacityAnimation Duration=\"0:0:1\" From=\"0\" To=\"1.0\"/>\n</animations:Implicit.ShowAnimations>\n\n<!--Implicit hide animations (using both default and custom animations)-->\n<animations:Implicit.HideAnimations>\n  <animations:OpacityAnimation Duration=\"0:0:1\" To=\"0\"/>\n  <animations:ScalarAnimation Target=\"Translation.Y\" Duration=\"0:0:1\" To=\"-200\">\n    <animations:ScalarKeyFrame Key=\"0.1\" Value=\"30\"/>\n    <animations:ScalarKeyFrame Key=\"0.5\" Value=\"0.0\"/>\n  </animations:ScalarAnimation>\n</animations:Implicit.HideAnimations>\n\n<!--Implicit animations (using an expression keyframe as well).\n    These animations can also bind to other properties as triggers: in this\n    example we are animating the rotation whenever the Offset changes.-->\n<animations:Implicit.Animations>\n  <animations:OffsetAnimation Duration=\"0:0:1\"/>\n  <animations:RotationInDegreesAnimation ImplicitTarget=\"Offset\" Duration=\"0:0:1.5\">\n    <animations:ScalarKeyFrame Key=\"1.0\" Expression=\"this.Target.Offset.X\"/>\n  </animations:RotationInDegreesAnimation>\n  <animations:ScaleAnimation Duration=\"0:0:1\"/>\n</animations:Implicit.Animations>\n```\n\n----------------------------------------\n\nTITLE: Collection Size to Object Conversion C#\nDESCRIPTION: Converts a collection's size to another object for UI depiction. Derivative converters may further refine into visibility logic, assuming initial collection state inspection only.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Converters/samples/Converters.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// CollectionVisibility Converter Example Placeholder\n```\n\n----------------------------------------\n\nTITLE: Populating MetadataControl Items in C#\nDESCRIPTION: This C# snippet demonstrates how to programmatically populate a MetadataControl named 'metadataControl' with data. It creates an array of MetadataItem objects, where each item represents an entry in the control. Items can have just a 'Label' (rendered as text) or both a 'Label' and a 'Command' (rendered as a hyperlink). This array is then assigned to the 'Items' property of the control. Requires an existing MetadataControl instance and the MetadataItem class definition.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/MetadataControl/samples/MetadataControl.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nmetadataControl.Items = new[]\n{\n    new MetadataItem { Label = \"Hello\" },\n    new MetadataItem { Label = \"World\", Command = myCommand },\n};\n```\n\n----------------------------------------\n\nTITLE: Using FontIconSourceExtension in XAML for SwipeItems\nDESCRIPTION: This example shows how to use the FontIconSourceExtension markup extension to create a FontIconSource instance for a SwipeItem. The extension provides a more concise syntax than explicitly creating a FontIconSource object.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/IconMarkupExtensions.md#2025-04-22_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<SwipeItems\n    xmlns:ui=\"using:CommunityToolkit.WinUI\"\n    Mode=\"Reveal\">\n\n    <!--Before-->\n    <SwipeItem Text=\"Accept\">\n        <SwipeItem.IconSource>\n            <FontIconSource Glyph=\"&#xE10B;\"/>\n        </SwipeItem.IconSource>\n    </SwipeItem>\n    \n    <!--After-->\n    <SwipeItem Text=\"Accept\" IconSource=\"{ui:FontIconSource Glyph=&#xE10B;}\"/>\n</SwipeItems>\n```\n\n----------------------------------------\n\nTITLE: Type-Based Object Return C#\nDESCRIPTION: Evaluates the type of a provided value against another specified Type, returning one of the objects based on the evaluation outcome.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Converters/samples/Converters.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n// TypeToObject Converter Example Placeholder\n```\n\n----------------------------------------\n\nTITLE: Using SymbolIconSourceExtension in XAML for SwipeItems\nDESCRIPTION: This example shows how to use the SymbolIconSourceExtension markup extension to create a FontIconSource instance based on a Symbol value for a SwipeItem. It provides a cleaner syntax for creating symbol-based icon sources.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/IconMarkupExtensions.md#2025-04-22_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<SwipeItems\n    xmlns:ui=\"using:CommunityToolkit.WinUI\"\n    Mode=\"Reveal\">\n    <SwipeItem Text=\"Play\" IconSource=\"{ui:SymbolIconSource Symbol=Play}\"/>\n</SwipeItems>\n```\n\n----------------------------------------\n\nTITLE: Implementing Alternate Item Template in XAML\nDESCRIPTION: Shows how to set up alternate DataTemplates for ListView items using the AlternateItemTemplate property. Demonstrates defining normal and alternate templates with different text colors.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/ListViewExtensions.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Page ...\n     xmlns:ui=\"using:CommunityToolkit.WinUI\">\n\n<Page.Resources>\n    <DataTemplate x:Name=\"NormalTemplate\">\n        <TextBlock Text=\"{Binding \" Foreground=\"Green\"></TextBlock>\n    </DataTemplate>\n    \n    <DataTemplate x:Name=\"AlternateTemplate\">\n        <TextBlock Text=\"{Binding}\" Foreground=\"Orange\"></TextBlock>\n    </DataTemplate>\n</Page.Resources>\n\n<ListView\n    ItemTemplate=\"{StaticResource NormalTemplate}\"\n    ui:ListViewExtensions.AlternateItemTemplate=\"{StaticResource AlternateTemplate}\"\n    ItemsSource=\"{x:Bind MainViewModel.Items, Mode=OneWay}\" />\n```\n\n----------------------------------------\n\nTITLE: Using BitmapIconSourceExtension in XAML for SwipeItems\nDESCRIPTION: This example shows how to use the BitmapIconSourceExtension markup extension to create a BitmapIconSource instance for a SwipeItem. This extension provides a more compact syntax compared to the traditional XAML approach.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/IconMarkupExtensions.md#2025-04-22_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<SwipeItems\n    xmlns:ui=\"using:CommunityToolkit.WinUI\"\n    Mode=\"Reveal\">\n    <SwipeItem Text=\"Send\" IconSource=\"{ui:BitmapIconSource Source=/Assets/myicon.png}\"/>\n</SwipeItems>\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a WeakEventListener for PropertyChanged Events in C#\nDESCRIPTION: This snippet demonstrates how to create and implement a WeakEventListener for INotifyPropertyChanged events. The WeakEventListener allows the owner (in this case, a DataGrid) to be garbage collected even if it has active event subscriptions, preventing memory leaks.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Helpers/samples/WeakEventListener.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar inpc = rowGroupInfo.CollectionViewGroup as INotifyPropertyChanged;\nvar weakPropertyChangedListener = new WeakEventListener<DataGrid, object, PropertyChangedEventArgs>(this)\n{\n    OnEventAction = static (instance, source, eventArgs) => instance.CollectionViewGroup_PropertyChanged(source, eventArgs),\n    OnDetachAction = (weakEventListener) => inpc.PropertyChanged -= weakEventListener.OnEvent // Use Local References Only\n}\ninpc.PropertyChanged += weakPropertyChangedListener.OnEvent;\n```\n\n----------------------------------------\n\nTITLE: Binding ScrollBarMargin with Converter in XAML\nDESCRIPTION: This XAML example shows how to bind the VerticalScrollBarMargin property of a ListView to an element using a converter. The DoubleTopThicknessConverter is used here to provide dynamic margin changes linked to the MinHeight of an element named MyHeaderGrid.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/ScrollViewerExtensions.md#2025-04-22_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ListView\n    Name=\"listView\"\n    xmlns:ui=\"using:CommunityToolkit.WinUI\"\n    ui:ScrollViewerExtensions.VerticalScrollBarMargin=\"{Binding MinHeight, ElementName=MyHeaderGrid, Converter={StaticResource DoubleTopThicknessConverter}}\">\n    <ListView.Header>\n        <controls:ScrollHeader Mode=\"Sticky\">\n            <Grid\n                x:Name=\"MyHeaderGrid\"\n                MinHeight=\"100\"\n                Background=\"{ThemeResource SystemControlAccentAcrylicElementAccentMediumHighBrush}\">\n                <StackPanel HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\">\n                    <TextBlock\n                        Margin=\"12\"\n                        FontSize=\"48\"\n                        FontWeight=\"Bold\"\n                        Foreground=\"{StaticResource Brush-White}\"\n                        Text=\"Scroll Header\"\n                        TextAlignment=\"Center\"\n                        TextWrapping=\"WrapWholeWords\" />\n                </StackPanel>\n            </Grid>\n        </controls:ScrollHeader>\n    </ListView.Header>\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Binding Enum Values to ComboBox using EnumValuesExtensions in XAML\nDESCRIPTION: This example demonstrates how to use the EnumValuesExtensions markup extension to bind all values of an Animal enum to a ComboBox control. The extension automatically populates the ItemsSource with all enum values.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/EnumValuesExtension.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ComboBox\n    xmlns:ui=\"using:CommunityToolkit.WinUI\"\n    xmlns:enums=\"using:MyApplication.Enums\"\n    ItemsSource=\"{ui:EnumValues Type=enums:Animal}\"\n    SelectedIndex=\"0\"/>\n```\n\n----------------------------------------\n\nTITLE: Empty Value to Object Conversion C#\nDESCRIPTION: Transforms empty or null object values into specified objects, adapting them for UI binding elements. Includes specialized conversion for strings.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Converters/samples/Converters.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// EmptyStringToObject Converter Example Placeholder\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of AttachedDropShadow in XAML\nDESCRIPTION: Demonstrates the basic setup of AttachedDropShadow where a sibling element serves as the shadow host for other elements. This pattern allows multiple elements to cast shadows onto a common backdrop.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/AttachedDropShadow.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n> [!SAMPLE AttachedDropShadowBasicSample]\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Mouse Cursor with XAML in Windows Community Toolkit\nDESCRIPTION: Example of using the Cursor attached property to change the mouse cursor when hovering over a specific FrameworkElement. This property accepts values from the CoreCursorType enumeration.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/FrameworkElementExtensions.md#2025-04-22_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<Page\n    x:Class=\"Microsoft.Toolkit.Uwp.SampleApp.SamplePages.MouseCursorPage\"\n    xmlns=\"https://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"https://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:ui=\"using:CommunityToolkit.WinUI\">\n\n    <Grid Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <Border\n            ui:FrameworkElementExtensions.Cursor=\"Hand\"\n            Width=\"220\" Height=\"120\" Background=\"DeepSkyBlue\"\n            HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>\n    </Grid>\n</Page>\n```\n\n----------------------------------------\n\nTITLE: Creating Sepia Tones with BackdropSepiaBrush\nDESCRIPTION: Demonstrates how the BackdropSepiaBrush applies a sepia effect on background visuals, with an Intensity property ranging from 0.0 to 1.0 for effect strength.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Media/samples/Brushes.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[!SAMPLE BackdropSepiaBrushSample]\n```\n\n----------------------------------------\n\nTITLE: Handling Camera Preview Events with C#\nDESCRIPTION: This C# snippet illustrates how to handle events related to camera preview, such as starting the preview and processing frame arrivals. It requires integration with CameraHelper and is dependent on having the webcam capability enabled. The snippet also covers error handling during the preview process.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/CameraPreview/samples/CameraPreview.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\nCameraPreviewControl.PreviewFailed += CameraPreviewControl_PreviewFailed;\nawait CameraPreviewControl.StartAsync();\nCameraPreviewControl.CameraHelper.FrameArrived += CameraPreviewControl_FrameArrived;\n\n\nprivate void CameraPreviewControl_FrameArrived(object sender, FrameEventArgs e)\n{\n     var videoFrame = e.VideoFrame;\n     var softwareBitmap = videoFrame.SoftwareBitmap;\n}\n\nprivate void CameraPreviewControl_PreviewFailed(object sender, PreviewFailedEventArgs e)\n{\n    var errorMessage = e.Error;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ScrollBarMargin in XAML\nDESCRIPTION: This XAML snippet demonstrates how to apply the HorizontalScrollBarMargin and VerticalScrollBarMargin properties from ScrollViewerExtensions to customize the margin of scrollbars within a ListView. The properties allow assignment of Thickness values to both vertical and horizontal scrollbars.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/ScrollViewerExtensions.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Page xmlns:ui=\"using:CommunityToolkit.WinUI\">\n    <ListView ui:ScrollViewerExtensions.HorizontalScrollBarMargin=\"2, 2, 2, 2\">\n        <!-- ListView Item -->\n    </ListView>\n\n    <ListView ui:ScrollViewerExtensions.VerticalScrollBarMargin=\"2, 2, 2, 2\">\n        <!-- ListView Item -->\n    </ListView>\n</Page>\n```\n\n----------------------------------------\n\nTITLE: Using Array Extensions for Filling and Debugging Arrays in C#\nDESCRIPTION: Demonstrates how to use the array extensions to fill a portion of a 2D boolean array with values and then output its contents as a formatted string for debugging. The example shows the Fill method and ToArrayString method usage.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/ArrayExtensions.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing CommunityToolkit.WinUI.Extensions;\n\nbool[,] inside = new bool[4, 5];\n\n// Fill the inside of the boolean array with 'true' values.\ninside.Fill(true, 1, 1, 3, 2);\n\nDebug.WriteLine(inside.ToArrayString());\n\n/*\nOutput:\n[[False, False, False, False, False],\n [False, True,  True,  True,  False],\n [False, True,  True,  True,  False],\n [False, False, False, False, False]]\n */\n```\n\n----------------------------------------\n\nTITLE: Modifying Aspect Ratio of the Cropped Image (C#)\nDESCRIPTION: Sets the AspectRatio property of the ImageCropper to dynamically adjust the cropping rectangle. Accepts a double value representing the width-to-height ratio (e.g., 16d/9d). Useful for constraining cropped images to a specific aspect ratio. Requires CommunityToolkit.WinUI.Controls. Input: double value; Output: UI crop area constrained to the specified ratio.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/ImageCropper/samples/ImageCropper.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nImageCropper.AspectRatio = 16d / 9d;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Full Settings Page Layout in XAML\nDESCRIPTION: Provides a comprehensive example of a settings page layout using `SettingsExpander` and `SettingsCard`, adhering to Windows 11 design guidelines for spacing and section headers. This example may also incorporate a workaround for a known visual glitch involving `ItemsRepeater` within `SettingsExpander` when a parent `StackPanel` has `MaxWidth` set, by wrapping the `StackPanel` in a `Grid`.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/SettingsControls/samples/SettingsExpander.md#2025-04-22_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n[!SAMPLE SettingsPageExample]\n```\n\n----------------------------------------\n\nTITLE: Converting Screen Units using ScreenUnitHelper in C#\nDESCRIPTION: Demonstrates how to use the ScreenUnitHelper class to convert between different screen measurement units. In this example, it converts 1 inch to pixels, resulting in 96 pixels which is the standard DPI value.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Helpers/samples/ScreenUnitHelper.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nfloat result = ScreenUnitHelper.Convert(ScreenUnit.Inch, ScreenUnit.Pixel, 1); // 96\n```\n\n----------------------------------------\n\nTITLE: Using BitmapIconExtension in XAML to Simplify Icon Declaration\nDESCRIPTION: This example demonstrates how the BitmapIconExtension markup extension simplifies the creation of BitmapIcon instances in XAML. It shows a before and after comparison of creating a BitmapIcon for a MenuFlyoutItem.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/IconMarkupExtensions.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<MenuFlyout xmlns:ui=\"using:CommunityToolkit.WinUI\">\n\n    <!--Before-->\n    <MenuFlyoutItem Text=\"Click me!\">\n        <MenuFlyoutItem.Icon>\n            <BitmapIcon Source=\"/Assets/myicon.png\"/>\n        </MenuFlyoutItem.Icon>\n    </MenuFlyoutItem>\n\n    <!--After-->\n    <MenuFlyoutItem\n        Text=\"No, click me!\"\n        Icon=\"{ui:BitmapIcon Source=/Assets/myicon.png}\" />\n</MenuFlyout>\n```\n\n----------------------------------------\n\nTITLE: Second Page Connected Animation with Anchored Element\nDESCRIPTION: XAML setup for the second page demonstrating connected animation with an anchored element and GridView implementation.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Animations/samples/ConnectedAnimations.md#2025-04-22_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<StackPanel Orientation=\"Horizontal\">\n    <Border x:Name=\"HeroElement\" Height=\"300\" Width=\"300\" Background=\"Purple\"\n    animations:Connected.Key=\"item\"/>\n\n    <StackPanel x:Name=\"HeroDetailsElement\" Margin=\"20,0\" VerticalAlignment=\"Bottom\" MaxWidth=\"500\"\n        animations:Connected.AnchorElement=\"{x:Bind HeroElement}\">\n        <TextBlock Text=\"Header\" FontSize=\"50\" Text=\"Header\"/>\n        <TextBlock TextWrapping=\"WrapWholeWords\" Text=\"Lorem ipsum ...\"/>\n    </StackPanel>\n</StackPanel>\n```\n\n----------------------------------------\n\nTITLE: Implementing FadeHeaderBehavior in C#\nDESCRIPTION: FadeHeaderBehavior enables header elements to fade in and out as users scroll at the top of a collection. This behavior should be applied directly to the header element that needs to be manipulated.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Behaviors/samples/HeaderBehaviors.md#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Applying BackdropInvertBrush for Color Inversion\nDESCRIPTION: Demonstrates the BackdropInvertBrush effect for inverting colors of the background in applications, creating a visually contrasting effect.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Media/samples/Brushes.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[!SAMPLE BackdropInvertBrushSample]\n```\n\n----------------------------------------\n\nTITLE: Using FontIconExtension in XAML for AppBarButton Icons\nDESCRIPTION: This example demonstrates the FontIconExtension markup extension which creates FontIcon instances with a more compact representation. It shows a before and after comparison of creating a FontIcon for an AppBarButton.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/IconMarkupExtensions.md#2025-04-22_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<CommandBar xmlns:ui=\"using:CommunityToolkit.WinUI\">\n\n    <!--Before-->\n    <AppBarButton>\n        <AppBarButton.Icon>\n            <FontIcon Glyph=\"&#xE102;\" FontFamily=\"{ThemeResource SymbolThemeFontFamily}\"/>\n        </AppBarButton.Icon>\n    </AppBarButton>\n\n    <!--After-->\n    <AppBarButton Icon=\"{ui:FontIcon Glyph=&#xE102;}\"/>\n</CommandBar>\n```\n\n----------------------------------------\n\nTITLE: Adjusting Color Saturation with BackdropSaturationBrush\nDESCRIPTION: Explains the usage of BackdropSaturationBrush to adjust the saturation levels of background colors, with a property ranging from 0.0 (monochrome) to 1.0 (fully saturated).\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Media/samples/Brushes.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[!SAMPLE BackdropSaturationBrushSample]\n```\n\n----------------------------------------\n\nTITLE: Configuring WrapLayout in CommunityToolkit with XAML\nDESCRIPTION: This snippet illustrates the implementation of a WrapLayout control in XAML, demonstrating both horizontal and vertical item arrangement within a Grid. It showcases how to use the Orientation, HorizontalSpacing, and VerticalSpacing properties to customize layout behavior. Dependencies include CommunityToolkit.WinUI.Controls, Microsoft.UI.Xaml.Controls, and proper XAML namespaces. The ItemsRepeater is bound to data sources for dynamic item rendering, and Buttons are provided to handle user interactions for each layout. The snippet expects ItemsSource bindings (\\\"_horizontalItems\\\" and \\\"_verticalItems\\\") to be present. Outputs are visually wrapped item collections according to spacing and orientation settings.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Primitives/samples/WrapLayout.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Page ....\n      xmlns:controls=\"using:CommunityToolkit.WinUI.Controls\"\n      xmlns:winui=\"using:Microsoft.UI.Xaml.Controls\">\n\n    <Grid Background=\"{StaticResource Brush-Grey-05}\">\n        <Grid.RowDefinitions>\n            <RowDefinition />\n            <RowDefinition />\n        </Grid.RowDefinitions>\n        <Grid>\n            <Grid.RowDefinitions>\n                <RowDefinition Height=\"50\" />\n                <RowDefinition />\n            </Grid.RowDefinitions>\n            <Button Name=\"HorizontalButton\" Click=\"HorizontalButton_Click\" Content=\"Add Horizontal Control\" />\n            <winui:ItemsRepeater ItemsSource=\"{x:Bind _horizontalItems}\" Grid.Row=\"1\" Margin=\"2\">\n                <winui:ItemsRepeater.Layout>\n                    <controls:WrapLayout VerticalSpacing=\"10\"\n                                         HorizontalSpacing=\"10\"/>\n                </winui:ItemsRepeater.Layout>\n            </winui:ItemsRepeater>\n        </Grid>\n\n        <Grid Grid.Row=\"1\">\n            <Grid.RowDefinitions>\n                <RowDefinition Height=\"50\" />\n                <RowDefinition />\n            </Grid.RowDefinitions>\n            <Button Name=\"VerticalButton\" Click=\"VerticalButton_Click\" Content=\"Add Vertical Control\" />\n            <winui:ItemsRepeater ItemsSource=\"{x:Bind _verticalItems}\" Grid.Row=\"1\" Margin=\"2\">\n                <winui:ItemsRepeater.Layout>\n                    <controls:WrapLayout Orientation=\"Vertical\" \n                                         VerticalSpacing=\"10\"\n                                         HorizontalSpacing=\"10\"/>\n                </winui:ItemsRepeater.Layout>\n            </winui:ItemsRepeater>\n        </Grid>\n    </Grid>\n</Page>\n```\n\n----------------------------------------\n\nTITLE: Using OnDevice Markup Extension in XAML\nDESCRIPTION: Illustrates how to apply the OnDevice markup extension in a XAML file to customize the UI text displayed on different devices, such as desktops and Xbox. This helps developers tailor user interfaces based on specific device families, following patterns similar to those in Xamarin.Forms.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/OnDeviceExtension.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<TextBlock\n   xmlns:ui=\"using:CommunityToolkit.WinUI\"\n   Text=\"{ui:OnDevice Default=Hi, Desktop=Hello, Xbox=World}\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Crop Shape to Circular (C#)\nDESCRIPTION: Sets the CropShape property of the ImageCropper to Circular, enabling circular cropping. Requires the CommunityToolkit.WinUI.Controls package and a reference to the CropShape enum. Input is a direct property assignment; there are no outputs. Useful for user avatars or rounded image displays. Only applies to instantiated ImageCropper objects.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/ImageCropper/samples/ImageCropper.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nImageCropper.CropShape = CropShape.Circular;\n```\n\n----------------------------------------\n\nTITLE: Phone Number Formats Supported by IsPhoneNumber Extension in C#\nDESCRIPTION: Lists various phone number formats that are recognized as valid by the IsPhoneNumber extension method in the StringExtensions class.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/StringExtensions.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n(987) 654-3210\n(987)654-3210\n987-654-3210\n9876543210\n+1 9876543210\n001 9876543210\n001 987-654-3210\n19876543210\n1-987-654-3210\n```\n\n----------------------------------------\n\nTITLE: Using PipelineVisualFactory to Apply Effects (Sample)\nDESCRIPTION: Demonstrates the usage of PipelineVisualFactory to create and attach a custom visual effect pipeline directly to a UI element's backing visual. This sample illustrates how to achieve effects without needing an intermediate PipelineBrush, potentially simplifying the XAML structure and improving rendering efficiency.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Media/samples/PipelineVisualFactory.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[!SAMPLE PipelineVisualFactorySample]\n```\n\n----------------------------------------\n\nTITLE: Cropping Without a Fixed Aspect Ratio (C#)\nDESCRIPTION: Sets the AspectRatio property of ImageCropper to null, allowing freeform selection of the crop area. This removes aspect ratio constraints and enables arbitrary shapes. Applies to the referenced ImageCropper control. No required dependencies beyond control instantiation.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/ImageCropper/samples/ImageCropper.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nImageCropper.AspectRatio = null;\n```\n\n----------------------------------------\n\nTITLE: Using BackdropGammaTransferBrush for Color Adjustments\nDESCRIPTION: Shows how to adjust color intensities through the BackdropGammaTransferBrush using a gamma function defined by an amplitude, exponent, and offset for each color channel.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Media/samples/Brushes.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[!SAMPLE BackdropGammaTransferBrushSample]\n```\n\n----------------------------------------\n\nTITLE: Third Page Connected Animation Layout\nDESCRIPTION: XAML layout for the third page showing the final destination of the connected animation with anchored elements.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Animations/samples/ConnectedAnimations.md#2025-04-22_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<StackPanel>\n    <StackPanel Orientation=\"Horizontal\" HorizontalAlignment=\"Right\">\n        <StackPanel x:Name=\"HeroDetailsElement\" Margin=\"20,0\" VerticalAlignment=\"Bottom\" MaxWidth=\"500\"\n        animations:Connected.AnchorElement=\"{x:Bind ItemHeroElement}\">\n            <TextBlock Text=\"{x:Bind item.Title}\" FontSize=\"50\"/>\n            <TextBlock TextWrapping=\"WrapWholeWords\" Text=\"Lorem ipsum...\"/>\n        </StackPanel>\n\n        <Border x:Name=\"ItemHeroElement\" Height=\"300\" Width=\"300\" Background=\"Purple\"\n        animations:Connected.Key=\"listItem\"/>\n    </StackPanel>\n\n    <TextBlock Margin=\"0,40\" TextWrapping=\"WrapWholeWords\" Text=\"Lorem ipsum...\"/>\n</StackPanel>\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorPickerButton Control in C#\nDESCRIPTION: The ColorPickerButton is a DropDownButton variant that shows the currently selected color and expands to show the full ColorPicker interface when clicked. It provides a more compact color selection interface.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/ColorPicker/samples/ColorPicker.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nColorPickerButton\n```\n\n----------------------------------------\n\nTITLE: Double to Object Conversion C#\nDESCRIPTION: Transforms a double to another object, useful for data representations like visibility or color changes in UI binding. Conditional logic applies for GreaterThan and LessThan parameters.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Converters/samples/Converters.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// DoubleToObject Converter Example Placeholder\n```\n\n----------------------------------------\n\nTITLE: Boolean to Visibility Conversion C#\nDESCRIPTION: Converts a boolean value to a Visibility enumeration. The conversion logic may be inverted by setting the ConverterParameter to True.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Converters/samples/Converters.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// BoolToVisibility Converter Example Placeholder\n```\n\n----------------------------------------\n\nTITLE: Including WinUI XAML Resources for UWP Projects\nDESCRIPTION: Code snippet for adding the required WinUI XAML Resources to App.xaml file in UWP projects. This configuration is necessary for proper functioning of WinUI 2 controls.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/DeveloperTools/src/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <Application.Resources>\n        <XamlControlsResources xmlns=\"using:Microsoft.UI.Xaml.Controls\" />\n    </Application.Resources>\n```\n\n----------------------------------------\n\nTITLE: Implementing BackdropBlurBrush in XAML\nDESCRIPTION: Illustrates the use of BackdropBlurBrush for blurring the background in applications, providing a soft, diffused appearance behind app content.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Media/samples/Brushes.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[!SAMPLE BackdropBlurBrushSample]\n```\n\n----------------------------------------\n\nTITLE: Configuring WinUI XAML Resources in UWP App.xaml (XML)\nDESCRIPTION: This XML snippet shows how to include the necessary `XamlControlsResources` in the `Application.Resources` section of a UWP application's `App.xaml` file. This is a required step when using WinUI 2 controls, including those from the Community Toolkit, to ensure proper styling and resource loading.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/LayoutTransformControl/src/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n```xml\n    <Application.Resources>\n        <XamlControlsResources xmlns=\"using:Microsoft.UI.Xaml.Controls\" />\n    </Application.Resources>\n```\n```\n\n----------------------------------------\n\nTITLE: Inserting Tokens with RichSuggestBox in C#\nDESCRIPTION: This C# code example shows how to use the RichSuggestBox control to insert tokens with a unique prefix and display text using Guid and Zero Width Spaces. The code is encapsulated within double quotes and appropriately escaped.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/RichSuggestBox/samples/RichSuggestBox.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\"\\u200b@John Doe\\u200b\"\n```\n\n----------------------------------------\n\nTITLE: Including WinUI XAML Resources in UWP App\nDESCRIPTION: This snippet demonstrates how to include WinUI XAML Resources in the App.xaml file of a UWP project. It requires the Microsoft.UI.Xaml.Controls namespace and is crucial for integrating WinUI 2 references in the project.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/CameraPreview/src/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <Application.Resources>\n        <XamlControlsResources xmlns=\"using:Microsoft.UI.Xaml.Controls\" />\n    </Application.Resources>\n```\n\n----------------------------------------\n\nTITLE: Referencing the RadialGauge Code Sample\nDESCRIPTION: This markdown directive is used within the documentation system to link to or embed a specific code sample named 'RadialGaugeSample'. This sample demonstrates the implementation and usage of the RadialGauge control.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/RadialGauge/samples/RadialGauge.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[!Sample RadialGaugeSample]\n```\n\n----------------------------------------\n\nTITLE: Configuring WinUI XAML Resources in App.xaml - XML\nDESCRIPTION: This XML snippet demonstrates how to add WinUI XAML resources to the Application.Resources section of your App.xaml file in a UWP project using WinUI 2. Including the <XamlControlsResources> element ensures that all necessary WinUI styles and controls are available throughout your application. Prerequisites include referencing the WinUI 2 NuGet package, and the xmlns attribute should match the requirements of your project setup. This configuration step is required for proper rendering and usage of Windows Community Toolkit controls like ImageCropper.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/ImageCropper/src/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Application.Resources>\\n    <XamlControlsResources xmlns=\\\"using:Microsoft.UI.Xaml.Controls\\\" />\\n</Application.Resources>\n```\n\n----------------------------------------\n\nTITLE: Task Result Extraction C#\nDESCRIPTION: Extracts and processes results securely from Task<TResult> instances with guidance towards practical examples through additional resources.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Converters/samples/Converters.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n// TaskResultConverter Example Placeholder\n```\n\n----------------------------------------\n\nTITLE: Referencing HeaderedItemsControl Sample in C#\nDESCRIPTION: This code snippet demonstrates how to reference a sample for the HeaderedItemsControl. It uses a special syntax to include a sample named 'HeaderedItemsControlSample'.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/HeaderedControls/samples/HeaderedItemsControl.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n> [!Sample HeaderedItemsControlSample]\n```\n\n----------------------------------------\n\nTITLE: Binding ItemsSource to SettingsExpander in XAML\nDESCRIPTION: Illustrates how to populate a `SettingsExpander` dynamically from a data collection using the `ItemsSource` property. An `ItemTemplate` is defined to specify how each data object should be represented as a `SettingsCard`. This snippet also shows the usage of `ItemsHeader` and `ItemsFooter` for adding custom content around the list of items.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/SettingsControls/samples/SettingsExpander.md#2025-04-22_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n[!SAMPLE SettingsExpanderItemsSourceSample]\n```\n\n----------------------------------------\n\nTITLE: Declaring MetadataControl in XAML\nDESCRIPTION: This XAML snippet shows how to declare the MetadataControl within a page. It sets the visual separator using the 'Separator' property and the separator used for accessibility purposes via the 'AccessibleSeparator' property. An appropriate namespace alias (e.g., 'controls') referencing the Windows Community Toolkit library is required.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/MetadataControl/samples/MetadataControl.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<controls:MetadataControl\n    x:Name=\"metadataControl\"\n    Separator=\"   \"\n    AccessibleSeparator=\", \"/>\n```\n\n----------------------------------------\n\nTITLE: AutoSelectBehavior Implementation\nDESCRIPTION: A behavior that automatically selects all text content in a TextBox control when it loads into the visual tree.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Behaviors/samples/Behaviors.md#2025-04-22_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Applying Matrix Transformations with LayoutTransformControl in XAML\nDESCRIPTION: This snippet demonstrates how to apply a RotateTransform to a FrameworkElement using LayoutTransformControl in XAML. It requires a reference to the Windows Community Toolkit and uses properties such as Background, HorizontalAlignment, and RenderTransformOrigin. This example defines a LayoutTransformControl that rotates its children 90 degrees around its center.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/LayoutTransformControl/samples/LayoutTransformControl.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<controls:LayoutTransformControl Background=\\\"Black\\\" \\n                                 HorizontalAlignment=\\\"Center\\\" \\n                                 VerticalAlignment=\\\"Center\\\"\\n                                 RenderTransformOrigin=\\\"0.5,0.5\\\">\\n    <controls:LayoutTransformControl.Transform>\\n        <RotateTransform Angle=\\\"90\\\" />\\n    </controls:LayoutTransformControl.Transform>\\n\\n    <Border HorizontalAlignment=\\\"Center\\\" \\n            VerticalAlignment=\\\"Center\\\"\\n            BorderBrush=\\\"Red\\\"\\n            BorderThickness=\\\"5\\\">\\n        <Grid>\\n            <TextBlock Padding=\\\"10\\\" Foreground=\\\"White\\\" Text=\\\"This is a test message.\\\" />\\n        </Grid>\\n    </Border>\\n</controls:LayoutTransformControl>\n```\n\n----------------------------------------\n\nTITLE: Binding to ActualWidth and ActualHeight with XAML in Windows Community Toolkit\nDESCRIPTION: Example of enabling ActualSizeBinding to allow binding to the ActualHeight and ActualWidth properties of a FrameworkElement object. This allows other elements to react to size changes of the target element.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/FrameworkElementExtensions.md#2025-04-22_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<Rectangle\n    x:Name=\"TargetObject\"\n    ui:FrameworkElementExtensions.EnableActualSizeBinding=\"true\"/>\n...\n<TextBlock Text=\"{Binding ElementName=TargetObject, Path=(ui:FrameworkElementExtensions.ActualHeight)}\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing WrapPanel Layout in XAML\nDESCRIPTION: This XAML snippet demonstrates the usage of the WrapPanel control within a WinUI Page. It shows two WrapPanel instances: 'HorizontalWrapPanel' with the default horizontal orientation and 'VerticalWrapPanel' explicitly set to vertical orientation with 10 units of horizontal and vertical spacing between items. Buttons are included to potentially add controls dynamically to these panels via code-behind event handlers (not shown). Requires the CommunityToolkit.WinUI.Controls namespace.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Primitives/samples/WrapPanel.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Page ....\n      xmlns:controls=\"using:CommunityToolkit.WinUI.Controls\">\n\n    <Grid Background=\"{StaticResource Brush-Grey-05}\">\n        <Grid.RowDefinitions>\n            <RowDefinition />\n            <RowDefinition />\n        </Grid.RowDefinitions>\n        <Grid>\n            <Grid.RowDefinitions>\n                <RowDefinition Height=\"50\" />\n                <RowDefinition />\n            </Grid.RowDefinitions>\n            <Button Name=\"HorizontalButton\" Click=\"HorizontalButton_Click\" Content=\"Add Horizontal Control\" />\n            <controls:WrapPanel Name=\"HorizontalWrapPanel\" Grid.Row=\"1\" Margin=\"2\" />\n        </Grid>\n\n        <Grid Grid.Row=\"1\">\n            <Grid.RowDefinitions>\n                <RowDefinition Height=\"50\" />\n                <RowDefinition />\n            </Grid.RowDefinitions>\n            <Button Name=\"VerticalButton\" Click=\"VerticalButton_Click\" Content=\"Add Vertical Control\" />\n            <controls:WrapPanel Name=\"VerticalWrapPanel\" Grid.Row=\"1\" Margin=\"2\"\n                                 VerticalSpacing=\"10\" HorizontalSpacing=\"10\" Orientation=\"Vertical\" />\n        </Grid>\n    </Grid>\n</Page>\n```\n\n----------------------------------------\n\nTITLE: Declaring ImageCropper Control in XAML (XAML)\nDESCRIPTION: Demonstrates how to declare the ImageCropper control in a WinUI XAML page and include the necessary XML namespace. Requires CommunityToolkit.WinUI.Controls library to be referenced. The control is assigned the name 'ImageCropper' for programmatic access. No parameters required. Initializes the control visually in the UI; further configuration and usage require code-behind or binding.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/ImageCropper/samples/ImageCropper.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Page ...\\n     xmlns:controls=\\\"using:CommunityToolkit.WinUI.Controls\\\"/>\\n    <controls:ImageCropper x:Name=\\\"ImageCropper\\\" />\\n</Page>\n```\n\n----------------------------------------\n\nTITLE: Defining a DockPanel Layout in XAML\nDESCRIPTION: This XAML snippet demonstrates the setup of a DockPanel to arrange child elements either horizontally or vertically. It explores different docking options (Top, Left, Bottom, Right) using StackPanels with different background colors. The DockPanel's LastChildFill property is set to False, indicating the last child will not automatically fill the remaining space. The CommunityToolkit namespace is utilized.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Primitives/samples/DockPanel.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Page ...\n     xmlns:controls=\"using:CommunityToolkit.WinUI.Controls\">\n\n    <controls:DockPanel Name=\"SampleDockPanel\" Margin=\"2\" Background=\"LightGray\" LastChildFill=\"False\" >\n      <StackPanel Height=\"100\" controls:DockPanel.Dock=\"Top\" Background=\"Black\"></StackPanel>\n      <StackPanel Width=\"100\" controls:DockPanel.Dock=\"Left\" Background=\"Red\"></StackPanel>\n      <StackPanel Height=\"100\" controls:DockPanel.Dock=\"Bottom\" Background=\"Green\"></StackPanel>\n      <StackPanel Width=\"100\" controls:DockPanel.Dock=\"Right\" Background=\"Blue\"></StackPanel>\n    </controls:DockPanel>\n\n</Page>\n```\n\n----------------------------------------\n\nTITLE: Blending Images with ImageBlendBrush\nDESCRIPTION: Illustrates the ImageBlendBrush functionality for blending images with backdrops using different blend modes, controlled by the ImageBlendMode property.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Media/samples/Brushes.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[!SAMPLE ImageBlendBrushSample]\n```\n\n----------------------------------------\n\nTITLE: Implementing DoubleTopThicknessConverter in C#\nDESCRIPTION: The DoubleTopThicknessConverter is a C# converter that modifies the top margin of a Thickness property. It facilitates the dynamic adjustment of the ScrollBar's top margin by translating a double input value into a Thickness with a non-zero top component. This converter can be used for data binding in XAML.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/ScrollViewerExtensions.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DoubleTopThicknessConverter : IValueConverter\n{\n    public object Convert(object value, Type targetType, object parameter, string language)\n    {\n        return new Thickness(0, (double)value, 0, 0);\n    }\n\n    public object ConvertBack(object value, Type targetType, object parameter, string language)\n    {\n        return ((Thickness)value).Top;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tiling Backgrounds with TilesBrush\nDESCRIPTION: Provides an example of using TilesBrush to apply a tiled image as a background in applications, enriching the visual design with repeated patterns.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Media/samples/Brushes.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[!SAMPLE TilesBrushSample]\n```\n\n----------------------------------------\n\nTITLE: First Page Connected Animation XAML\nDESCRIPTION: XAML code for the first page showing how to set up the initial element with a connected animation key.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Animations/samples/ConnectedAnimations.md#2025-04-22_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<Grid>\n    <Border Height=\"100\" Width=\"100\" Background=\"Purple\" VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\"\n        animations:Connected.Key=\"item\" />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Using SymbolIconExtension in XAML for AppBarButton Icons\nDESCRIPTION: This example demonstrates the SymbolIconExtension markup extension which creates icons using Symbol enumeration values. It provides a more concise way to create symbol-based icons compared to the traditional XAML approach.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/IconMarkupExtensions.md#2025-04-22_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<CommandBar xmlns:ui=\"using:CommunityToolkit.WinUI\">\n\n    <!--Before-->\n    <AppBarButton>\n        <AppBarButton.Icon>\n            <SymbolIcon Symbol=\"Play\"/>\n        </AppBarButton.Icon>\n    </AppBarButton>\n\n    <!--After-->\n    <AppBarButton Icon=\"{ui:SymbolIcon Symbol=Play}\"/>\n</CommandBar>\n```\n\n----------------------------------------\n\nTITLE: Customizing RowDefinitions and ColumnDefinitions in UniformGrid - CommunityToolkit WinUI XAML\nDESCRIPTION: This XAML example demonstrates how to explicitly override row and column sizing in a UniformGrid by specifying RowDefinitions and ColumnDefinitions. Requires CommunityToolkit.WinUI.Controls and XAML 16299 or later. The specified definitions control respective dimension sizes, and additional required rows/columns will be added as needed. The setup allows for advanced customization of grid layouts.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Primitives/samples/UniformGrid.md#2025-04-22_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n    <controls:UniformGrid>\n      <controls:UniformGrid.RowDefinitions>\n        <RowDefinition/>\n        <RowDefinition Height=\"20\"/>\n        <RowDefinition/>\n      </controls:UniformGrid.RowDefinitions>\n      <controls:UniformGrid.ColumnDefinitions>\n        <ColumnDefinition/>\n        <ColumnDefinition Width=\"20\"/>\n        <ColumnDefinition/>\n      </controls:UniformGrid.ColumnDefinitions>\n      <Border Background=\"AliceBlue\"><TextBlock Text=\"1\"/></Border>\n      <Border Background=\"Cornsilk\"><TextBlock Text=\"2\"/></Border>\n      <Border Background=\"DarkSalmon\"><TextBlock Text=\"3\"/></Border>\n      <Border Background=\"Gainsboro\"><TextBlock Text=\"4\"/></Border>\n      <Border Background=\"LightBlue\"><TextBlock Text=\"5\"/></Border>\n      <Border Background=\"MediumAquamarine\"><TextBlock Text=\"6\"/></Border>\n      <Border Background=\"MistyRose\"><TextBlock Text=\"7\"/></Border>\n    </controls:UniformGrid>\n```\n\n----------------------------------------\n\nTITLE: Defining Fixed Child Locations using Grid.Row and Grid.Column - CommunityToolkit WinUI XAML\nDESCRIPTION: This code demonstrates how to assign specific cell locations to child elements inside a UniformGrid by using Grid.Row and Grid.Column attached properties. Dependencies include importing the controls: namespace and using the UniformGrid from CommunityToolkit. Elements with explicit row and column assignments are pinned in place, and automatic layout processes around these fixed positions. Fixed locations must be set before the layout is initialized.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Primitives/samples/UniformGrid.md#2025-04-22_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n    <controls:UniformGrid>\n      <Border Background=\"AliceBlue\" Grid.Row=\"1\" Grid.Column=\"1\"><TextBlock Text=\"1\"/></Border>\n      <Border Background=\"Cornsilk\"><TextBlock Text=\"2\"/></Border>\n      <Border Background=\"DarkSalmon\"><TextBlock Text=\"3\"/></Border>\n      <Border Background=\"Gainsboro\"><TextBlock Text=\"4\"/></Border>\n      <Border Background=\"LightBlue\"><TextBlock Text=\"5\"/></Border>\n      <Border Background=\"MediumAquamarine\"><TextBlock Text=\"6\"/></Border>\n      <Border Background=\"MistyRose\"><TextBlock Text=\"7\"/></Border>\n    </controls:UniformGrid>\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Orientation in UniformGrid - CommunityToolkit WinUI XAML\nDESCRIPTION: This snippet illustrates setting the Orientation property to Vertical in a UniformGrid, changing item placement from the default horizontal flow to a vertical layout. Requires the CommunityToolkit.WinUI.Controls library and the controls: namespace. Orientation can be combined with FlowDirection for various layout flows; the grid arranges children top-to-bottom when Orientation is Vertical.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Primitives/samples/UniformGrid.md#2025-04-22_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n    <controls:UniformGrid Orientation=\"Vertical\">\n      <Border Background=\"AliceBlue\"><TextBlock Text=\"1\"/></Border>\n      <Border Background=\"Cornsilk\"><TextBlock Text=\"2\"/></Border>\n      <Border Background=\"DarkSalmon\"><TextBlock Text=\"3\"/></Border>\n      <Border Background=\"Gainsboro\"><TextBlock Text=\"4\"/></Border>\n      <Border Background=\"LightBlue\"><TextBlock Text=\"5\"/></Border>\n      <Border Background=\"MediumAquamarine\"><TextBlock Text=\"6\"/></Border>\n      <Border Background=\"MistyRose\"><TextBlock Text=\"7\"/></Border>\n    </controls:UniformGrid>\n```\n\n----------------------------------------\n\nTITLE: Including WinUI XAML Resources in UWP App.xaml (XAML)\nDESCRIPTION: This XAML snippet demonstrates how to add the required `XamlControlsResources` to the `Application.Resources` section of an App.xaml file. This is necessary for UWP projects using WinUI 2 controls, like the RichSuggestBox, to ensure proper styling and control rendering. See Microsoft Learn for more details on getting started with WinUI 2.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/RichSuggestBox/src/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <Application.Resources>\n        <XamlControlsResources xmlns=\"using:Microsoft.UI.Xaml.Controls\" />\n    </Application.Resources>\n```\n\n----------------------------------------\n\nTITLE: Using Plain Text with RichSuggestBox\nDESCRIPTION: This XAML example shows how to configure a RichSuggestBox to allow only plain text input, disabling all formatting accelerators. It's intended for scenarios where tokens remain the only formatted text.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/RichSuggestBox/samples/RichSuggestBox.md#2025-04-22_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<controls:RichSuggestBox\n  ClipboardCopyFormat=\"PlainText\"\n  ClipboardPasteFormat=\"PlainText\"\n  DisabledFormattingAccelerators=\"All\" />\n```\n\n----------------------------------------\n\nTITLE: Using Grid.RowSpan and Grid.ColumnSpan for Sized Children - CommunityToolkit WinUI XAML\nDESCRIPTION: This XAML snippet showcases how to use Grid.RowSpan and Grid.ColumnSpan attached properties within a UniformGrid to allow certain child elements to occupy more than one row or column. Requirements include referencing the proper namespace and using UniformGrid as the container. Spanned elements will occupy larger areas, and the grid automatically skips appropriate cells during layout. Edge cases may result in cropping if requested spans exceed available space.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Primitives/samples/UniformGrid.md#2025-04-22_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n    <controls:UniformGrid>\n      <Border Background=\"AliceBlue\" Grid.ColumnSpan=\"2\"><TextBlock Text=\"1\"/></Border>\n      <Border Background=\"Cornsilk\"><TextBlock Text=\"2\"/></Border>\n      <Border Background=\"DarkSalmon\"><TextBlock Text=\"3\"/></Border>\n      <Border Background=\"Gainsboro\" Grid.RowSpan=\"2\"><TextBlock Text=\"4\"/></Border>\n      <Border Background=\"LightBlue\"><TextBlock Text=\"5\"/></Border>\n      <Border Background=\"MediumAquamarine\"><TextBlock Text=\"6\"/></Border>\n      <Border Background=\"MistyRose\"><TextBlock Text=\"7\"/></Border>\n    </controls:UniformGrid>\n```\n\n----------------------------------------\n\nTITLE: Including WinUI 2 XAML Resource References in App.xaml - XML\nDESCRIPTION: This snippet demonstrates how to add WinUI 2 resource dictionaries to a UWP application's App.xaml file. Including the <XamlControlsResources> element ensures that WinUI controls, such as MetadataControl from the Windows Community Toolkit, are styled and function correctly. The xmlns specifies the appropriate namespace for Microsoft UI XAML controls; failure to include these resources may result in missing styles or runtime errors with custom controls.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/MetadataControl/src/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <Application.Resources>\\n        <XamlControlsResources xmlns=\\\"using:Microsoft.UI.Xaml.Controls\\\" />\\n    </Application.Resources>\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring WinUI 2 Resources in App.xaml (XML)\nDESCRIPTION: This XAML snippet shows how to add the required `XamlControlsResources` within the `Application.Resources` of `App.xaml` for UWP/WinUI 2 projects. This ensures that styles and resources for WinUI 2 controls, including those from the Community Toolkit, are correctly loaded. It references the `Microsoft.UI.Xaml.Controls` namespace.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Segmented/src/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <Application.Resources>\\n        <XamlControlsResources xmlns=\\\"using:Microsoft.UI.Xaml.Controls\\\" />\\n    </Application.Resources>\n```\n\n----------------------------------------\n\nTITLE: Registering WinUI XAML Resources in App.xaml using XML\nDESCRIPTION: This XML snippet demonstrates how to add WinUI XAML controls resources to the application's resource dictionary in App.xaml for UWP projects utilizing WinUI 2. The code requires the Microsoft.UI.Xaml.Controls namespace via the 'using' statement in the XML tag. It must be placed inside the <Application.Resources> section of your App.xaml file to ensure WinUI controls render correctly. Input is the resource registration tag, and it outputs the initialization of WinUI-specific XAML controls across the application.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/RangeSelector/src/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <Application.Resources>\\n        <XamlControlsResources xmlns=\\\"using:Microsoft.UI.Xaml.Controls\\\" />\\n    </Application.Resources>\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring WinUI XAML Resources in App.xaml (XML)\nDESCRIPTION: This snippet demonstrates how to add XamlControlsResources to the Application.Resources section in App.xaml, which is necessary for UWP projects using the Windows Community Toolkit controls such as RadialGauge. The xmlns attribute ensures correct reference to Microsoft UI XAML resources. No additional package dependencies are required beyond referencing WinUI 2 and the appropriate toolkit package. Inputs: place the Resource dictionary within your App.xaml's Application.Resources; Output: enables WinUI 2 visual styles and controls for the app.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/RadialGauge/src/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <Application.Resources>\\n        <XamlControlsResources xmlns=\\\"using:Microsoft.UI.Xaml.Controls\\\" />\\n    </Application.Resources>\n```\n\n----------------------------------------\n\nTITLE: NavigateToUriAction Implementation\nDESCRIPTION: An action behavior that enables URI-based navigation directly from XAML, similar to Hyperlink functionality but can be used with standard buttons without code-behind.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Behaviors/samples/Behaviors.md#2025-04-22_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Including WinUI XAML Resources in UWP App.xaml\nDESCRIPTION: This snippet demonstrates how to include WinUI XAML Resources in the App.xaml file for a UWP project using WinUI 2. This is necessary when referencing WinUI 2 controls, ensuring that the necessary UI resources are available for the application. The XamlControlsResources tag is used to import these resources.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Primitives/src/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <Application.Resources>\n        <XamlControlsResources xmlns=\"using:Microsoft.UI.Xaml.Controls\" />\n    </Application.Resources>\n```\n\n----------------------------------------\n\nTITLE: Implementing HeaderedContentControl in XAML\nDESCRIPTION: Basic syntax for implementing the HeaderedContentControl in a XAML page. The control allows content to be displayed with a specified header where header content can be customized using HeaderTemplate.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/HeaderedControls/samples/HeaderedContentControl.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Page ...\n     xmlns:controls=\"using:CommunityToolkit.WinUI.Controls\"/>\n\n<controls:HeaderedContentControl>\n    <!-- Header content or HeaderTemplate content -->\n</controls:HeaderedContentControl>\n```\n\n----------------------------------------\n\nTITLE: Including WinUI XAML Resources in UWP Applications\nDESCRIPTION: This XML snippet shows how to include WinUI XAML Resources in a UWP application's App.xaml file. It is necessary to set up resources for applications built using WinUI 2.0. Ensure that the `XamlControlsResources` is declared within the `Application.Resources` tag to leverage WinUI's capabilities.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Triggers/src/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <Application.Resources>\n        <XamlControlsResources xmlns=\"using:Microsoft.UI.Xaml.Controls\" />\n    </Application.Resources>\n```\n\n----------------------------------------\n\nTITLE: Adding WinUI 2 XAML Resources in UWP App.xaml (XML)\nDESCRIPTION: This XML snippet demonstrates how to include the necessary WinUI 2 XAML resources (`XamlControlsResources`) within the `Application.Resources` section of a UWP application's `App.xaml` file. This is required for UWP projects using WinUI 2 controls, including those from the Community Toolkit. It uses the `Microsoft.UI.Xaml.Controls` namespace.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Sizers/src/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <Application.Resources>\n        <XamlControlsResources xmlns=\"using:Microsoft.UI.Xaml.Controls\" />\n    </Application.Resources>\n```\n\n----------------------------------------\n\nTITLE: Integrating WinUI XAML Resources in UWP Application\nDESCRIPTION: This snippet shows how to include WinUI XAML resources in the App.xaml file for UWP projects. It is necessary to reference these resources when using the WinUI 2 library in a Universal Windows Platform application. The snippet includes setting the XAML namespace to 'Microsoft.UI.Xaml.Controls'.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/SettingsControls/src/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Application.Resources>\n    <XamlControlsResources xmlns=\"using:Microsoft.UI.Xaml.Controls\" />\n</Application.Resources>\n```\n\n----------------------------------------\n\nTITLE: ViewportBehavior Implementation\nDESCRIPTION: A behavior that monitors when an element enters or exits a ScrollViewer's viewport, enabling viewport-based triggers and actions.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Behaviors/samples/Behaviors.md#2025-04-22_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Configuring WinUI XAML Resources for UWP\nDESCRIPTION: Example of how to include WinUI XAML Resources in App.xaml for UWP projects using WinUI 2. This configuration is required for proper functionality of the HeaderedControls components.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/HeaderedControls/src/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Application.Resources>\n    <XamlControlsResources xmlns=\"using:Microsoft.UI.Xaml.Controls\" />\n</Application.Resources>\n```\n\n----------------------------------------\n\nTITLE: Configuring XAML Resources for WinUI - XML\nDESCRIPTION: This XML snippet demonstrates how to include the WinUI XAML resources in your App.xaml file, a requirement when using the TokenizingTextBox with UWP projects and WinUI 2. It shows how to add the <XamlControlsResources> element within <Application.Resources>, which is necessary for the controls in the Windows Community Toolkit to function correctly. Ensure the main WinUI package is referenced in your project and that you adjust the namespace as needed.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/TokenizingTextBox/src/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Application.Resources>\\n    <XamlControlsResources xmlns=\\\"using:Microsoft.UI.Xaml.Controls\\\" />\\n</Application.Resources>\n```\n\n----------------------------------------\n\nTITLE: FocusBehavior Implementation\nDESCRIPTION: A behavior that sets focus on the first eligible control from a list of targets. Only works with enabled controls that are loaded in the visual tree.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Behaviors/samples/Behaviors.md#2025-04-22_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Original InAppNotification Implementation\nDESCRIPTION: Shows the previous method of implementing in-app notifications using the InAppNotification control from the Windows Community Toolkit. This is shown for reference when migrating to the new StackedNotificationsBehavior.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Behaviors/samples/StackedNotificationsBehavior.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<controls:InAppNotification x:Name=\"ExampleInAppNotification\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Column and Row Spacing in UniformGrid - CommunityToolkit WinUI XAML\nDESCRIPTION: This XAML snippet demonstrates how to set up a UniformGrid with custom ColumnSpacing and RowSpacing attributes for consistent spacing between grid cells. Requires reference to the CommunityToolkit.WinUI.Controls library and the xmlns:controls namespace. The ColumnSpacing and RowSpacing properties determine the horizontal and vertical gaps between elements; values are in device-independent units. Inputs are UI elements as children, and the output is a visually spaced grid layout.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Primitives/samples/UniformGrid.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<controls:UniformGrid ColumnSpacing=\"24\" RowSpacing=\"24\">\n```\n\n----------------------------------------\n\nTITLE: Cloning Windows Community Toolkit Repository\nDESCRIPTION: Git command to clone the Windows Community Toolkit repository with its submodules. The --recurse-submodules flag is required to properly clone the tooling submodule.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --recurse-submodules https://github.com/CommunityToolkit/Windows.git\n```\n\n----------------------------------------\n\nTITLE: Initializing Connected Animation Basic Structure in XAML\nDESCRIPTION: Basic setup showing the core XAML structure for connected animations including namespace declaration and key properties.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Animations/samples/ConnectedAnimations.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Page ...\n    xmlns:animations=\"using:CommunityToolkit.WinUI.Animations\">\n\n<Border x:Name=\"Element\" animations:Connected.Key=\"item\"/>\n\n<TextBlock animations:Connected.AnchorElement=\"{x:Bind Element}\" Text=\"Hello World\"/>\n\n<GridView animations:Connected.ListItemElementName=\"ItemThumbnail\"\n          animations:Connected.ListItemKey=\"listItem\">\n    <GridView.ItemTemplate>\n        <DataTemplate>\n            <Image x:Name=\"ItemThumbnail\" Height=\"200\" Width=\"200\"/>\n        </DataTemplate>\n    </GridView.ItemTemplate>\n</GridView>\n</Page>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dependency Object with Nullable Boolean Property in C#\nDESCRIPTION: This code snippet shows how to implement a dependency object with a nullable boolean property that can be targeted by the NullableBoolExtension. It registers a dependency property of type bool? with a default value of null.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/NullableBoolExtension.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyApp.Helpers\n{\n    public class ObjectWithNullableBoolProperty : DependencyObject\n    {\n        // Using a DependencyProperty as the backing store for NullableBool. \n        // This enables animation, styling, binding, etc...\n        public static readonly DependencyProperty NullableBoolProperty = DependencyProperty.Register(\n            nameof(NullableBool),\n            typeof(bool?),\n            typeof(ObjectWithNullableBoolProperty),\n            new PropertyMetadata(null));\n\n        public bool? NullableBool\n        {\n            get => (bool?)GetValue(NullableBoolProperty);\n            set => SetValue(NullableBoolProperty, value);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using NullableBoolExtension in XAML with a Resource Object\nDESCRIPTION: This example demonstrates how to use the NullableBoolExtension markup extension in XAML to set a nullable boolean property on a resource object. The extension is used with the syntax '{ui:NullableBool Value=True}' to explicitly set the nullable boolean value.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/NullableBoolExtension.md#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Page.Resources\n    xmlns:ui=\"using:CommunityToolkit.WinUI\"\n    xmlns:helpers=\"using:MyApp.Helpers\">\n    <helpers:ObjectWithNullableBoolProperty\n        x:Key=\"OurObject\"\n        NullableBool=\"{ui:NullableBool Value=True}\"/>\n</Page.Resources>\n```\n\n----------------------------------------\n\nTITLE: Configuring Item Container Stretch Direction in XAML\nDESCRIPTION: Shows how to use the StretchItemContainerDirection property to stretch item containers horizontally, vertically, or both ways.\nSOURCE: https://github.com/communitytoolkit/windows/blob/main/components/Extensions/samples/ListViewExtensions.md#2025-04-22_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<Page ...\n     xmlns:ui=\"using:CommunityToolkit.WinUI\">\n\n<ListView\n    ui:ListViewExtensions.StretchItemContainerDirection=\"Horizontal\"\n    ItemsSource=\"{x:Bind MainViewModel.Items, Mode=OneWay}\" />\n```"
  }
]