[
  {
    "owner": "getbrevo",
    "repo": "brevo-php",
    "content": "TITLE: Retrieving WhatsApp Campaigns with Brevo PHP SDK\nDESCRIPTION: This snippet showcases how to retrieve a list of WhatsApp campaigns using the Brevo PHP SDK, including configuration of API key authentication and definition of parameters such as date filters, pagination, and sort order. Dependencies include the 'brevo-php' client library and Guzzle HTTP client. The main parameters are startDate and endDate (used for date filtering), limit (number of campaigns per page), offset (the starting index), and sort (order of results). The output is a \\Brevo\\Client\\Model\\GetWhatsappCampaigns object containing campaign data. Both API key and partner key authorization mechanisms are supported, and the function will handle exceptions in API calls.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/WhatsAppCampaignsApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\WhatsAppCampaignsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$startDate = \"startDate_example\"; // string | **Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created. **Prefer to pass your timezone in date-time format for accurate result**\n$endDate = \"endDate_example\"; // string | **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created. **Prefer to pass your timezone in date-time format for accurate result**\n$limit = 50; // int | Number of documents per page\n$offset = 0; // int | Index of the first document in the page\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed\n\ntry {\n    $result = $apiInstance->getWhatsAppCampaigns($startDate, $endDate, $limit, $offset, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling WhatsAppCampaignsApi->getWhatsAppCampaigns: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Sending Test Template with Brevo PHP SDK\nDESCRIPTION: This snippet shows how to send a template to a test list using the Brevo PHP SDK. It initializes the API client with the necessary authorization keys and demonstrates sending a test email using a specified template ID.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$templateId = 789; // int | Id of the template\n$sendTestEmail = new \\Brevo\\Client\\Model\\SendTestEmail(); // \\Brevo\\Client\\Model\\SendTestEmail | \n\ntry {\n    $apiInstance->sendTestTemplate($templateId, $sendTestEmail);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalEmailsApi->sendTestTemplate: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Sending Email Campaign Immediately using Brevo PHP Client\nDESCRIPTION: This PHP snippet shows how to send an email campaign right away by configuring Brevo client authentication and calling the sendEmailCampaignNow method. It needs the Brevo PHP SDK, GuzzleHttp, and a valid campaign ID. On execution, the method sends the campaign; errors are captured and output via exception handling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EmailCampaignsApi.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nrequire_once(__DIR__ . '/vendor/autoload.php');\\n\\n// Configure API key authorization: api-key\\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\\n// Configure API key authorization: partner-key\\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\\n\\n$apiInstance = new Brevo\\Client\\Api\\EmailCampaignsApi(\\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\\n    new GuzzleHttp\\Client(),\\n    $config\\n);\\n$campaignId = 789; // int | Id of the campaign\\n\\ntry {\\n    $apiInstance->sendEmailCampaignNow($campaignId);\\n} catch (Exception $e) {\\n    echo 'Exception when calling EmailCampaignsApi->sendEmailCampaignNow: ', $e->getMessage(), PHP_EOL;\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting Hardbounces with Brevo PHP SDK\nDESCRIPTION: Example code demonstrating how to delete hardbounces using the Brevo PHP SDK. Requires API key authorization and handles hardbounce deletion for temporary ISP failures.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$deleteHardbounces = new \\Brevo\\Client\\Model\\DeleteHardbounces();\n\ntry {\n    $apiInstance->deleteHardbounces($deleteHardbounces);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalEmailsApi->deleteHardbounces: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Brevo PHP SDK\nDESCRIPTION: Complete example showing how to initialize the Brevo PHP SDK with API key authentication and make a basic API call to get account information. Demonstrates error handling and configuration setup.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\AccountApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getAccount();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling AccountApi->getAccount: ', $e->getMessage(), PHP_EOL;\n}\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetching Scheduled Email by Message ID with Brevo PHP Client\nDESCRIPTION: This PHP snippet demonstrates how to fetch a specific scheduled email using its message ID via the Brevo API. It requires the Brevo PHP client library and GuzzleHttp. The code initializes the configuration with API keys, creates an instance of `TransactionalEmailsApi`, and calls the `getScheduledEmailByMessageId` method with the `messageId` and optional `startDate` and `endDate`. The result, an instance of `\\Brevo\\Client\\Model\\GetScheduledEmailByMessageId`, is printed, or an exception message is displayed upon failure. Data can be retrieved for up to 30 days old.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$messageId = \"messageId_example\"; // string | The messageId of scheduled email\n$startDate = new \\DateTime(\"2013-10-20\"); // \\DateTime | Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Can be maximum 30 days older tha current date.\n$endDate = new \\DateTime(\"2013-10-20\"); // \\DateTime | Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.\n\ntry {\n    $result = $apiInstance->getScheduledEmailByMessageId($messageId, $startDate, $endDate);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalEmailsApi->getScheduledEmailByMessageId: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Individual Contact with Brevo PHP API\nDESCRIPTION: Example of how to update a single contact using the Brevo PHP API. This code shows two different ways to identify a contact (by email/ID directly or by specifying identifier type) and updates contact information accordingly.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$identifier = \"identifier_example\"; // string | Email (urlencoded) OR ID of the contact OR EXT_ID attribute (urlencoded) OR its SMS attribute value OR its WHATSAPP attribute value OR its LANDLINE attribute value\n$updateContact = new \\Brevo\\Client\\Model\\UpdateContact(); // \\Brevo\\Client\\Model\\UpdateContact | Values to update a contact\n$identifierType = new \\stdClass; // object | email_id for Email, contact_id for ID of the contact, ext_id for EXT_ID attribute, phone_id for SMS attribute, whatsapp_id for WHATSAPP attribute, landline_number_id for LANDLINE attribute\n\ntry {\n    $apiInstance->updateContact($identifier, $updateContact, $identifierType);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->updateContact: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Sending SMS Campaign Reports with Brevo PHP SDK\nDESCRIPTION: This code demonstrates how to send SMS campaign reports using the Brevo PHP SDK. It configures API keys, initializes the SMSCampaignsApi instance, and sends a report for a specified campaign ID.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/SMSCampaignsApi.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\SMSCampaignsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$campaignId = 789; // int | id of the campaign\n$sendReport = new \\Brevo\\Client\\Model\\SendReport(); // \\Brevo\\Client\\Model\\SendReport | Values for send a report\n\ntry {\n    $apiInstance->sendSmsReport($campaignId, $sendReport);\n} catch (Exception $e) {\n    echo 'Exception when calling SMSCampaignsApi->sendSmsReport: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Sending Transactional SMS with Brevo PHP SDK\nDESCRIPTION: Example code demonstrating how to send a transactional SMS message using the Brevo PHP SDK. Shows configuration of API keys, instantiation of the TransactionalSMSApi client, and error handling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalSMSApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalSMSApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$sendTransacSms = new \\Brevo\\Client\\Model\\SendTransacSms(); // \\Brevo\\Client\\Model\\SendTransacSms | Values to send a transactional SMS\n\ntry {\n    $result = $apiInstance->sendTransacSms($sendTransacSms);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalSMSApi->sendTransacSms: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transactional Email List with Brevo PHP SDK\nDESCRIPTION: This snippet demonstrates how to use the Brevo PHP SDK to retrieve a list of transactional emails. It initializes the API client with authorization keys and provides various optional filtering parameters such as email address, template ID, and date range.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$email = \"email_example\"; // string | Mandatory if templateId and messageId are not passed in query filters. Email address to which transactional email has been sent.\n$templateId = 789; // int | Mandatory if email and messageId are not passed in query filters. Id of the template that was used to compose transactional email.\n$messageId = \"messageId_example\"; // string | Mandatory if templateId and email are not passed in query filters. Message ID of the transactional email sent.\n$startDate = \"startDate_example\"; // string | Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month.\n$endDate = \"endDate_example\"; // string | Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n$limit = 500; // int | Number of documents returned per page\n$offset = 0; // int | Index of the first document in the page\n\ntry {\n    $result = $apiInstance->getTransacEmailsList($email, $templateId, $messageId, $startDate, $endDate, $sort, $limit, $offset);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalEmailsApi->getTransacEmailsList: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Sending Transactional Email with Brevo PHP SDK\nDESCRIPTION: This snippet demonstrates how to send a transactional email using the Brevo PHP SDK. It initializes the API client with the required authorization keys and shows how to send an email using the sendTransacEmail method with SMTP email configuration.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$sendSmtpEmail = new \\Brevo\\Client\\Model\\SendSmtpEmail(); // \\Brevo\\Client\\Model\\SendSmtpEmail | Values to send a transactional email\n\ntry {\n    $result = $apiInstance->sendTransacEmail($sendSmtpEmail);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalEmailsApi->sendTransacEmail: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Exporting Email Campaign Recipients with Brevo PHP Client\nDESCRIPTION: This snippet illustrates how to export the recipients of an email campaign using the Brevo PHP client library. It configures API authentication, initializes the EmailCampaignsApi, and sends a POST request to export recipients for a specific campaign.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EmailCampaignsApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EmailCampaignsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$campaignId = 789; // int | Id of the campaign\n$recipientExport = new \\Brevo\\Client\\Model\\EmailExportRecipients(); // \\Brevo\\Client\\Model\\EmailExportRecipients | Values to send for a recipient export request\n\ntry {\n    $result = $apiInstance->emailExportRecipients($campaignId, $recipientExport);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling EmailCampaignsApi->emailExportRecipients: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving A/B Test Campaign Results with Brevo PHP Client\nDESCRIPTION: This snippet demonstrates how to retrieve the results of an A/B test email campaign using the Brevo PHP client library. It sets up API authentication, creates an EmailCampaignsApi instance, and sends a GET request to obtain the winning version of the campaign.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EmailCampaignsApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EmailCampaignsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$campaignId = 789; // int | Id of the campaign\n\ntry {\n    $result = $apiInstance->getAbTestCampaignResult($campaignId);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling EmailCampaignsApi->getAbTestCampaignResult: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Importing Contacts with Brevo PHP Client\nDESCRIPTION: Example code for importing contacts using the Brevo PHP client. This code shows how to initialize the API client and make a request to import contacts, returning a background process ID that will call a notification URL upon completion.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$requestContactImport = new \\Brevo\\Client\\Model\\RequestContactImport(); // \\Brevo\\Client\\Model\\RequestContactImport | Values to import contacts in Brevo. To know more about the expected format, please have a look at ``https://help.brevo.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns``\n\ntry {\n    $result = $apiInstance->importContacts($requestContactImport);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->importContacts: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Installing Brevo PHP SDK via Composer Configuration\nDESCRIPTION: Composer configuration for installing the Brevo PHP SDK. Requires adding the dependency to composer.json and running composer install.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"require\": {\n\"getbrevo/brevo-php\": \"1.x.x\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching SMTP Template Information with Brevo PHP Client\nDESCRIPTION: This PHP example demonstrates fetching details of a specific SMTP email template using the Brevo API. It depends on the Brevo PHP client library and GuzzleHttp. The script configures authentication using API keys, initializes the `TransactionalEmailsApi` client, and calls the `getSmtpTemplate` method, passing the required `templateId` (integer). The returned template information, an object of type `\\Brevo\\Client\\Model\\GetSmtpTemplateOverview`, is printed to the output. If an error occurs, the exception message is caught and displayed.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$templateId = 789; // int | id of the template\n\ntry {\n    $result = $apiInstance->getSmtpTemplate($templateId);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalEmailsApi->getSmtpTemplate: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Batch Products with Brevo eCommerce API in PHP\nDESCRIPTION: Example of creating multiple products in batch using the Brevo API. Demonstrates API configuration and result handling. Requires Brevo client library and GuzzleHttp client.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EcommerceApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EcommerceApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$createUpdateBatchProducts = new \\Brevo\\Client\\Model\\CreateUpdateBatchProducts();\n\ntry {\n    $result = $apiInstance->createUpdateBatchProducts($createUpdateBatchProducts);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling EcommerceApi->createUpdateBatchProducts: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving WhatsApp Event Reports in PHP using Brevo API\nDESCRIPTION: This example demonstrates how to retrieve unaggregated WhatsApp activity statistics using the Brevo API. It configures API authorization, instantiates the WhatsApp API client, sets optional parameters for filtering and sorting results, and handles the API response.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalWhatsAppApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalWhatsAppApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$limit = 2500; // int | Number limitation for the result returned\n$offset = 0; // int | Beginning point in the list to retrieve from\n$startDate = \"startDate_example\"; // string | **Mandatory if endDate is used.** Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate\n$endDate = \"endDate_example\"; // string | **Mandatory if startDate is used.** Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate\n$days = 789; // int | Number of days in the past including today (positive integer). _Not compatible with 'startDate' and 'endDate'_\n$contactNumber = \"contactNumber_example\"; // string | Filter results for specific contact (WhatsApp Number with country code. Example, 85264318721)\n$event = \"event_example\"; // string | Filter the report for a specific event type\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n\ntry {\n    $result = $apiInstance->getWhatsappEventReport($limit, $offset, $startDate, $endDate, $days, $contactNumber, $event, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalWhatsAppApi->getWhatsappEventReport: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Webhook using Brevo PHP Client\nDESCRIPTION: This snippet demonstrates how to create a new webhook using the Brevo PHP client library. It initializes the API client, sets up authentication, and calls the createWebhook method with the required parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/WebhooksApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\WebhooksApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$createWebhook = new \\Brevo\\Client\\Model\\CreateWebhook(); // \\Brevo\\Client\\Model\\CreateWebhook | Values to create a webhook\n\ntry {\n    $result = $apiInstance->createWebhook($createWebhook);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling WebhooksApi->createWebhook: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating a folder using Brevo PHP client\nDESCRIPTION: This snippet demonstrates how to update a folder in the Brevo platform using the PHP client. It shows configuration for API keys, instantiation of the ContactsApi class, and the updateFolder method call with required parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$folderId = 789; // int | Id of the folder\n$updateFolder = new \\Brevo\\Client\\Model\\CreateUpdateFolder(); // \\Brevo\\Client\\Model\\CreateUpdateFolder | Name of the folder\n\ntry {\n    $apiInstance->updateFolder($folderId, $updateFolder);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->updateFolder: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating CRM Note with Brevo PHP SDK\nDESCRIPTION: Example of creating a note in Brevo CRM using PHP SDK. Demonstrates API key authorization setup and note creation with error handling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CRMApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\CRMApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$body = new \\Brevo\\Client\\Model\\NoteData();\n\ntry {\n    $result = $apiInstance->crmNotesPost($body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CRMApi->crmNotesPost: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Folders using Brevo PHP API\nDESCRIPTION: This PHP snippet demonstrates how to fetch a list of folders using the Brevo API's `FoldersApi`. It includes setting up API key authentication (both 'api-key' and 'partner-key'), instantiating the API client (optionally with a custom GuzzleHttp client), calling the `getFolders` method with pagination (`limit`, `offset`) and sorting (`sort`) parameters, printing the result, and handling potential exceptions. It depends on the Brevo PHP client library and GuzzleHttp.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/FoldersApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\FoldersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$limit = 10; // int | Number of documents per page\n$offset = 0; // int | Index of the first document of the page\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n\ntry {\n    $result = $apiInstance->getFolders($limit, $offset, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FoldersApi->getFolders: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Unblocking Contacts in Brevo's SMTP Service using PHP\nDESCRIPTION: Example PHP code for unblocking a contact's email address from Brevo's SMTP blocked contacts list. The code initializes the Brevo client with API authentication, creates a TransactionalEmailsApi instance, and calls the smtpBlockedContactsEmailDelete method with the contact's email address.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$email = \"email_example\"; // string | contact email (urlencoded) to unblock.\n\ntry {\n    $apiInstance->smtpBlockedContactsEmailDelete($email);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalEmailsApi->smtpBlockedContactsEmailDelete: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Email Templates in Brevo using PHP\nDESCRIPTION: Example PHP code for updating an existing email template in Brevo's platform. The code sets up the API client with authentication, creates a TransactionalEmailsApi instance, and calls the updateSmtpTemplate method with the template ID and an UpdateSmtpTemplate object containing the new template values.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$templateId = 789; // int | id of the template\n$smtpTemplate = new \\Brevo\\Client\\Model\\UpdateSmtpTemplate(); // \\Brevo\\Client\\Model\\UpdateSmtpTemplate | values to update in transactional email template\n\ntry {\n    $apiInstance->updateSmtpTemplate($templateId, $smtpTemplate);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalEmailsApi->updateSmtpTemplate: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Contact List in Brevo API using PHP\nDESCRIPTION: Example code showing how to create a new contact list using the Brevo API. Requires API key authorization and accepts list creation parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ListsApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\ListsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$createList = new \\Brevo\\Client\\Model\\CreateList();\n\ntry {\n    $result = $apiInstance->createList($createList);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ListsApi->createList: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Contact using Brevo PHP API\nDESCRIPTION: Example of creating a contact using Brevo PHP API client. Includes API key configuration, client initialization, and error handling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$createContact = new \\Brevo\\Client\\Model\\CreateContact();\n\ntry {\n    $result = $apiInstance->createContact($createContact);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->createContact: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving WhatsApp Templates with Brevo PHP SDK\nDESCRIPTION: This code sample illustrates how to fetch a list of WhatsApp templates you've created using the Brevo PHP SDK, including authentication by API key or partner key. It demonstrates initialization of the client, and passing optional filter parameters: startDate, endDate (for date filtering), limit (number of templates per page), offset (starting index), sort (sorting order), and source (template origin). The output is a \\Brevo\\Client\\Model\\GetWATemplates object containing the requested template data. Use of dependencies such as 'brevo-php' and Guzzle is required, and errors are handled with exception catching.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/WhatsAppCampaignsApi.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\WhatsAppCampaignsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$startDate = \"startDate_example\"; // string | **Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created. **Prefer to pass your timezone in date-time format for accurate result**\n$endDate = \"endDate_example\"; // string | **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created. **Prefer to pass your timezone in date-time format for accurate result**\n$limit = 50; // int | Number of documents per page\n$offset = 0; // int | Index of the first document in the page\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed\n$source = \"source_example\"; // string | source of the template\n\ntry {\n    $result = $apiInstance->getWhatsAppTemplates($startDate, $endDate, $limit, $offset, $sort, $source);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling WhatsAppCampaignsApi->getWhatsAppTemplates: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating an SMS Campaign with Brevo PHP Client\nDESCRIPTION: This snippet demonstrates how to create a new SMS campaign using the Brevo PHP client library. It configures API keys, initializes the SMSCampaignsApi instance, and calls the createSmsCampaign method with campaign details.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/SMSCampaignsApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\SMSCampaignsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$createSmsCampaign = new \\Brevo\\Client\\Model\\CreateSmsCampaign(); // \\Brevo\\Client\\Model\\CreateSmsCampaign | Values to create an SMS Campaign\n\ntry {\n    $result = $apiInstance->createSmsCampaign($createSmsCampaign);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SMSCampaignsApi->createSmsCampaign: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating an Email Campaign with Brevo PHP Client\nDESCRIPTION: This snippet demonstrates how to create a new email campaign using the Brevo PHP client library. It configures API authentication, initializes the EmailCampaignsApi instance, and sends a POST request to create the campaign.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EmailCampaignsApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EmailCampaignsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$emailCampaigns = new \\Brevo\\Client\\Model\\CreateEmailCampaign(); // \\Brevo\\Client\\Model\\CreateEmailCampaign | Values to create a campaign\n\ntry {\n    $result = $apiInstance->createEmailCampaign($emailCampaigns);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling EmailCampaignsApi->createEmailCampaign: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Contacts with Brevo PHP API\nDESCRIPTION: Example showing how to update multiple contacts in a batch operation using the Brevo PHP API. This code demonstrates API key configuration, initialization of the ContactsApi, and how to handle the batch update request.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$updateBatchContacts = new \\Brevo\\Client\\Model\\UpdateBatchContacts(); // \\Brevo\\Client\\Model\\UpdateBatchContacts | Values to update multiple contacts\n\ntry {\n    $apiInstance->updateBatchContacts($updateBatchContacts);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->updateBatchContacts: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetching All Lists using Brevo ContactsApi in PHP\nDESCRIPTION: This code illustrates how to get all contact lists using the Brevo PHP SDK. It follows the standard pattern of configuring the client with API keys, creating a ContactsApi instance, and then calling the `getLists` method. Parameters for pagination (`limit`, `offset`) and sorting (`sort`) are provided to manage the output. The fetched list data is printed, with error handling implemented using a try-catch block.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$limit = 10; // int | Number of documents per page\n$offset = 0; // int | Index of the first document of the page\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n\ntry {\n    $result = $apiInstance->getLists($limit, $offset, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->getLists: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Webhooks with Brevo PHP SDK\nDESCRIPTION: Example of how to fetch webhooks using the Brevo PHP client. Includes API key configuration, optional filtering by webhook type, and result sorting. Requires Brevo PHP SDK and GuzzleHttp client.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/WebhooksApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\WebhooksApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$type = \"transactional\"; // string | Filter on webhook type\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of webhook creation\n\ntry {\n    $result = $apiInstance->getWebhooks($type, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling WebhooksApi->getWebhooks: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetching All Folders using Brevo ContactsApi in PHP\nDESCRIPTION: This example shows how to retrieve all contact folders using the Brevo PHP SDK. It sets up the API client configuration, instantiates the ContactsApi, and invokes the `getFolders` method. Pagination (`limit`, `offset`) and sorting (`sort`) parameters are used to control the results. The retrieved folders are printed, and errors are handled via a try-catch block.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$limit = 10; // int | Number of documents per page\n$offset = 0; // int | Index of the first document of the page\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n\ntry {\n    $result = $apiInstance->getFolders($limit, $offset, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->getFolders: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Sending Test Email with Brevo PHP Client\nDESCRIPTION: This PHP code demonstrates sending a campaign as a test email to specified addresses using the Brevo API. Dependencies are similar to other snippets, with required parameters being the campaign ID and an instance of SendTestEmail containing test recipient addresses. The code handles errors through a try-catch block.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EmailCampaignsApi.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nrequire_once(__DIR__ . '/vendor/autoload.php');\\n\\n// Configure API key authorization: api-key\\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\\n// Configure API key authorization: partner-key\\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\\n\\n$apiInstance = new Brevo\\Client\\Api\\EmailCampaignsApi(\\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\\n    new GuzzleHttp\\Client(),\\n    $config\\n);\\n$campaignId = 789; // int | Id of the campaign\\n$emailTo = new \\Brevo\\Client\\Model\\SendTestEmail(); // \\Brevo\\Client\\Model\\SendTestEmail | \\n\\ntry {\\n    $apiInstance->sendTestEmail($campaignId, $emailTo);\\n} catch (Exception $e) {\\n    echo 'Exception when calling EmailCampaignsApi->sendTestEmail: ', $e->getMessage(), PHP_EOL;\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Querying Email Event Reports with Brevo PHP SDK in PHP\nDESCRIPTION: This code snippet illustrates how to query and filter transactional email events using the getEmailEventReport method of the Brevo PHP SDK. Parameters such as date ranges, result limits, filtering email, tags, and sort order can be specified, with suggestions for default and optional values. The output is a GetEmailEventReport object containing detailed unaggregated email event data. The SDK should be installed and properly configured for authentication before use.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nrequire_once(__DIR__ . '/vendor/autoload.php');\\n\\n// Configure API key authorization: api-key\\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\\n// Configure API key authorization: partner-key\\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\\n\\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\\n    new GuzzleHttp\\Client(),\\n    $config\\n);\\n$limit = 2500; // int | Number limitation for the result returned\\n$offset = 0; // int | Beginning point in the list to retrieve from.\\n$startDate = \"startDate_example\"; // string | Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate\\n$endDate = \"endDate_example\"; // string | Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate\\n$days = 789; // int | Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'\\n$email = \"email_example\"; // string | Filter the report for a specific email addresses\\n$event = \"event_example\"; // string | Filter the report for a specific event type\\n$tags = \"tags_example\"; // string | Filter the report for tags (serialized and urlencoded array)\\n$messageId = \"messageId_example\"; // string | Filter on a specific message id\\n$templateId = 789; // int | Filter on a specific template id\\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\\n\\ntry {\\n    $result = $apiInstance->getEmailEventReport($limit, $offset, $startDate, $endDate, $days, $email, $event, $tags, $messageId, $templateId, $sort);\\n    print_r($result);\\n} catch (Exception $e) {\\n    echo 'Exception when calling TransactionalEmailsApi->getEmailEventReport: ', $e->getMessage(), PHP_EOL;\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetching All CRM Pipeline Details with Brevo PHP SDK\nDESCRIPTION: This PHP snippet demonstrates how to retrieve details for all CRM pipelines using the Brevo API. It initializes the Brevo client configuration with 'api-key' and 'partner-key', instantiates the `DealsApi`, and calls the `crmPipelineDetailsGet` method without parameters. The script requires the Brevo PHP SDK (`vendor/autoload.php`) and uses GuzzleHttp for HTTP requests. Results are printed upon success, and exceptions are caught and their messages displayed.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/DealsApi.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->crmPipelineDetailsGet();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->crmPipelineDetailsGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Transactional Email Content using Brevo PHP SDK\nDESCRIPTION: This PHP snippet demonstrates fetching the personalized content of a specific sent transactional email using the Brevo API. It requires configuring API key authentication, initializing the `TransactionalEmailsApi` client, and calling the `getTransacEmailContent` method with the unique `uuid` of the desired email. The retrieved email content is printed, and error handling is included to catch potential exceptions.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$uuid = \"uuid_example\"; // string | Unique id of the transactional email that has been sent to a particular contact\n\ntry {\n    $result = $apiInstance->getTransacEmailContent($uuid);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalEmailsApi->getTransacEmailContent: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Sender with Brevo SendersApi in PHP\nDESCRIPTION: Example of deleting a sender identity using the Brevo PHP SDK. This snippet shows how to configure API authorization, instantiate the SendersApi client, and call the deleteSender method with a sender ID.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/SendersApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\SendersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$senderId = 789; // int | Id of the sender\n\ntry {\n    $apiInstance->deleteSender($senderId);\n} catch (Exception $e) {\n    echo 'Exception when calling SendersApi->deleteSender: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Daily SMS Report with Brevo API in PHP\nDESCRIPTION: Example code showing how to get SMS activity reports aggregated by day using the Brevo API. Includes options for date filtering and sorting.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalSMSApi.md#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalSMSApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$startDate = \"startDate_example\";\n$endDate = \"endDate_example\";\n$sort = \"desc\";\n\ntry {\n    $result = $apiInstance->getTransacSmsReport($startDate, $endDate, null, null, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalSMSApi->getTransacSmsReport: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Removing Contact from List with Brevo PHP SDK\nDESCRIPTION: Removes a contact from a specified list using either email address or contact ID. Returns contact information via PostContactInfo model.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ListsApi.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ListsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$listId = 789; // int | Id of the list\n$contactEmails = new \\Brevo\\Client\\Model\\RemoveContactFromList(); // \\Brevo\\Client\\Model\\RemoveContactFromList | Emails addresses OR IDs of the contacts\n\ntry {\n    $result = $apiInstance->removeContactFromList($listId, $contactEmails);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ListsApi->removeContactFromList: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Contact using Brevo API in PHP\nDESCRIPTION: This snippet demonstrates how to delete a contact using the Brevo PHP SDK. It involves configuring API key authorization, instantiating the `ContactsApi` client, and calling the `deleteContact` method. The contact can be identified by email, contact ID, external ID, phone number, WhatsApp number, or landline number, specified using the `$identifier` and optional `$identifierType` parameters. Proper error handling using a try-catch block is included.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$identifier = \"identifier_example\"; // string | Email (urlencoded) OR ID of the contact OR EXT_ID attribute (urlencoded)\n$identifierType = new \\stdClass; // object | email_id for Email, contact_id for ID of the contact, ext_id for EXT_ID attribute, phone_id for SMS attribute, whatsapp_id for WHATSAPP attribute, landline_number_id for LANDLINE_NUMBER attribute\n\ntry {\n    $apiInstance->deleteContact($identifier, $identifierType);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->deleteContact: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Create Deal Example in PHP\nDESCRIPTION: Example of creating a new deal using the Brevo PHP client. Returns deal creation response.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/DealsApi.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\DealsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$body = new \\Brevo\\Client\\Model\\Body5();\n\ntry {\n    $result = $apiInstance->crmDealsPost($body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->crmDealsPost: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating SMTP Template Example in PHP\nDESCRIPTION: Example of creating an email template using the Brevo API. Shows how to initialize the API client and create a new SMTP template with custom values.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$smtpTemplate = new \\Brevo\\Client\\Model\\CreateSmtpTemplate();\n\ntry {\n    $result = $apiInstance->createSmtpTemplate($smtpTemplate);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalEmailsApi->createSmtpTemplate: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetching Orders with Brevo EcommerceApi in PHP\nDESCRIPTION: This PHP code shows how to fetch a list of ecommerce orders using the `getOrders` method of the `Brevo\\Client\\Api\\EcommerceApi`. It involves setting up the API client with authentication keys (api-key, partner-key). Optional parameters like `$limit`, `$offset`, `$sort`, `$modifiedSince`, and `$createdSince` can be used for pagination, sorting, and filtering by modification or creation date. The expected output is an instance of `\\Brevo\\Client\\Model\\GetOrders` containing the order list, or an exception message if an error occurs. Dependencies include the Brevo PHP SDK (`vendor/autoload.php`) and GuzzleHttp.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EcommerceApi.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EcommerceApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$limit = 50; // int | Number of documents per page\n$offset = 0; // int | Index of the first document in the page\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n$modifiedSince = \"modifiedSince_example\"; // string | Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**\n$createdSince = \"createdSince_example\"; // string | Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**\n\ntry {\n    $result = $apiInstance->getOrders($limit, $offset, $sort, $modifiedSince, $createdSince);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling EcommerceApi->getOrders: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Removing Credits from Brevo Reseller Child Account in PHP\nDESCRIPTION: This PHP snippet shows how to remove Email and/or SMS credits from a specific reseller child account via the Brevo API. It utilizes the Brevo PHP SDK, sets up API key authentication, creates an instance of `ResellerApi`, prepares a `RemoveCredits` model object with the values to remove, and calls the `removeCredits` method. The remaining credits after the operation are printed, or an error message is shown upon exception.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ResellerApi.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ResellerApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$childIdentifier = \"childIdentifier_example\"; // string | Either auth key or id of reseller's child\n$removeCredits = new \\Brevo\\Client\\Model\\RemoveCredits(); // \\Brevo\\Client\\Model\\RemoveCredits | Values to post to remove email or SMS credits from a specific child account\n\ntry {\n    $result = $apiInstance->removeCredits($childIdentifier, $removeCredits);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ResellerApi->removeCredits: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Sending WhatsApp Messages in PHP using Brevo API\nDESCRIPTION: This example demonstrates how to send a WhatsApp message through the Brevo API. It configures API authorization, initializes the TransactionalWhatsAppApi client, creates a new message model, and handles the API response. Note that the first API message requires a Template ID from a predefined WhatsApp template.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalWhatsAppApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalWhatsAppApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$sendWhatsappMessage = new \\Brevo\\Client\\Model\\SendWhatsappMessage(); // \\Brevo\\Client\\Model\\SendWhatsappMessage | Values to send WhatsApp message\n\ntry {\n    $result = $apiInstance->sendWhatsappMessage($sendWhatsappMessage);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalWhatsAppApi->sendWhatsappMessage: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating SMS Campaign Status with Brevo PHP SDK\nDESCRIPTION: This code demonstrates how to update an SMS campaign's status using the Brevo PHP SDK. It configures API keys, initializes the SMSCampaignsApi instance, and updates the campaign status with the values specified in the status object.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/SMSCampaignsApi.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\SMSCampaignsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$campaignId = 789; // int | id of the campaign\n$status = new \\Brevo\\Client\\Model\\UpdateCampaignStatus(); // \\Brevo\\Client\\Model\\UpdateCampaignStatus | Status of the campaign.\n\ntry {\n    $apiInstance->updateSmsCampaignStatus($campaignId, $status);\n} catch (Exception $e) {\n    echo 'Exception when calling SMSCampaignsApi->updateSmsCampaignStatus: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating DOI Contact using Brevo PHP API\nDESCRIPTION: Example of creating a Double-Opt-In (DOI) contact using Brevo PHP API client with authentication and error handling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$createDoiContact = new \\Brevo\\Client\\Model\\CreateDoiContact();\n\ntry {\n    $apiInstance->createDoiContact($createDoiContact);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->createDoiContact: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Requesting Contact Export with Brevo PHP API\nDESCRIPTION: Example of how to request a contact export using the Brevo PHP API. The code initializes the API client with API keys, creates a request for contact export, and handles the response or possible exceptions.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$requestContactExport = new \\Brevo\\Client\\Model\\RequestContactExport(); // \\Brevo\\Client\\Model\\RequestContactExport | Values to request a contact export\n\ntry {\n    $result = $apiInstance->requestContactExport($requestContactExport);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->requestContactExport: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Domain with Brevo API in PHP\nDESCRIPTION: Example code demonstrating how to create a new domain using the Brevo API with PHP. The code configures API authorization, instantiates the DomainsApi, and calls the createDomain method with a CreateDomain model object.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/DomainsApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\DomainsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$domainName = new \\Brevo\\Client\\Model\\CreateDomain(); // \\Brevo\\Client\\Model\\CreateDomain | domain's name\n\ntry {\n    $result = $apiInstance->createDomain($domainName);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DomainsApi->createDomain: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating a Product in PHP using Brevo SDK\nDESCRIPTION: This snippet shows how to create or update a product using the Brevo PHP SDK. It sets up API key authorization, creates an EcommerceApi instance, and calls the createUpdateProduct method with product data.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EcommerceApi.md#2025-04-23_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EcommerceApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$createUpdateProduct = new \\Brevo\\Client\\Model\\CreateUpdateProduct(); // \\Brevo\\Client\\Model\\CreateUpdateProduct | Values to create/update a product\n\ntry {\n    $result = $apiInstance->createUpdateProduct($createUpdateProduct);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling EcommerceApi->createUpdateProduct: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Create Company Using Brevo PHP API\nDESCRIPTION: Example of creating a new company using the Brevo PHP client. Requires API key authentication and accepts company creation details as parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CompaniesApi.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\CompaniesApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$body = new \\Brevo\\Client\\Model\\Body2();\n\ntry {\n    $result = $apiInstance->companiesPost($body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CompaniesApi->companiesPost: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating a Folder using Brevo PHP API\nDESCRIPTION: This PHP snippet shows how to update a specific folder identified by its ID using the Brevo API's `FoldersApi`. It covers API key configuration (for both 'api-key' and 'partner-key'), API client instantiation (potentially with a custom GuzzleHttp client), preparing the `updateFolder` payload as an instance of `\\Brevo\\Client\\Model\\CreateUpdateFolder`, calling the `updateFolder` method with the target `folderId` and the update payload, and managing potential exceptions. It relies on the Brevo PHP client library and GuzzleHttp.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/FoldersApi.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\FoldersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$folderId = 789; // int | Id of the folder\n$updateFolder = new \\Brevo\\Client\\Model\\CreateUpdateFolder(); // \\Brevo\\Client\\Model\\CreateUpdateFolder | Name of the folder\n\ntry {\n    $apiInstance->updateFolder($folderId, $updateFolder);\n} catch (Exception $e) {\n    echo 'Exception when calling FoldersApi->updateFolder: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Link/Unlink Deal Example in PHP\nDESCRIPTION: Example of linking and unlinking a deal with contacts and companies using the Brevo PHP client.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/DealsApi.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\DealsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\";\n$body = new \\Brevo\\Client\\Model\\Body7();\n\ntry {\n    $apiInstance->crmDealsLinkUnlinkIdPatch($id, $body);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->crmDealsLinkUnlinkIdPatch: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Brevo SDK and Calling getProducts Method in PHP\nDESCRIPTION: This snippet demonstrates how to set up the Brevo PHP SDK, configure API keys, initialize the EcommerceApi, and call the getProducts method with various optional parameters. It includes error handling and result display.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EcommerceApi.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EcommerceApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$limit = 50; // int | Number of documents per page\n$offset = 0; // int | Index of the first document in the page\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n$ids = array(\"ids_example\"); // string[] | Filter by product ids\n$name = \"name_example\"; // string | Filter by product name, minimum 3 characters should be present for search\n$priceLte = 8.14; // float | Price filter for products less than and equals to particular amount\n$priceGte = 8.14; // float | Price filter for products greater than and equals to particular amount\n$priceLt = 8.14; // float | Price filter for products less than particular amount\n$priceGt = 8.14; // float | Price filter for products greater than particular amount\n$priceEq = 8.14; // float | Price filter for products equals to particular amount\n$priceNe = 8.14; // float | Price filter for products not equals to particular amount\n$categories = array(\"categories_example\"); // string[] | Filter by category ids\n$modifiedSince = \"modifiedSince_example\"; // string | Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**\n$createdSince = \"createdSince_example\"; // string | Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**\n\ntry {\n    $result = $apiInstance->getProducts($limit, $offset, $sort, $ids, $name, $priceLte, $priceGte, $priceLt, $priceGt, $priceEq, $priceNe, $categories, $modifiedSince, $createdSince);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling EcommerceApi->getProducts: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting List Details with Brevo PHP SDK\nDESCRIPTION: Retrieves detailed information about a specific contact list using its ID. Returns extended list details via GetExtendedList model.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ListsApi.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ListsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$listId = 789; // int | Id of the list\n\ntry {\n    $result = $apiInstance->getList($listId);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ListsApi->getList: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Update CRM Task Example in PHP\nDESCRIPTION: Example showing how to update an existing CRM task using the Brevo PHP SDK. Requires API key authentication and accepts task ID and updated task details as parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CRMApi.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\CRMApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\"; // string | \n$body = new \\Brevo\\Client\\Model\\Body1(); // \\Brevo\\Client\\Model\\Body1 | Updated task details.\n\ntry {\n    $apiInstance->crmTasksIdPatch($id, $body);\n} catch (Exception $e) {\n    echo 'Exception when calling CRMApi->crmTasksIdPatch: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Note using Brevo NotesApi in PHP\nDESCRIPTION: This code snippet demonstrates how to use the Brevo PHP client to create a new note. It includes API key configuration, client initialization, and error handling. The example uses the crmNotesPost method of the NotesApi class.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/NotesApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\NotesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$body = new \\Brevo\\Client\\Model\\NoteData(); // \\Brevo\\Client\\Model\\NoteData | Note data to create a note.\n\ntry {\n    $result = $apiInstance->crmNotesPost($body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling NotesApi->crmNotesPost: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Get Deal Attributes Example - PHP\nDESCRIPTION: Example code showing how to retrieve deal attributes using the Brevo API. Requires API key authentication and uses the GuzzleHttp client for making requests.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/DealsApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\DealsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->crmAttributesDealsGet();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->crmAttributesDealsGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating API Key for Sub-Account with Brevo PHP API\nDESCRIPTION: Generates a new API v3 key for a sub-account using the Brevo API. Requires master account API key authentication and returns the generated API key response.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/MasterAccountApi.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\MasterAccountApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$createApiKeyRequest = new \\Brevo\\Client\\Model\\CreateApiKeyRequest();\n\ntry {\n    $result = $apiInstance->corporateSubAccountKeyPost($createApiKeyRequest);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling MasterAccountApi->corporateSubAccountKeyPost: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Querying Scheduled Email Batches by Batch ID with Brevo PHP SDK in PHP\nDESCRIPTION: This snippet demonstrates fetching scheduled emails using the getScheduledEmailByBatchId method in the Brevo PHP SDK for PHP. Users can filter by batch ID, date ranges, status, sort order, limit, and paging offset. Dates should be \\\\DateTime objects, and the output conforms to the GetScheduledEmailByBatchId model. The approach requires setup of proper authentication and usage of the TransactionalEmailsApi class.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nrequire_once(__DIR__ . '/vendor/autoload.php');\\n\\n// Configure API key authorization: api-key\\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\\n// Configure API key authorization: partner-key\\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\\n\\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\\n    new GuzzleHttp\\Client(),\\n    $config\\n);\\n$batchId = \"batchId_example\"; // string | The batchId of scheduled emails batch (Should be a valid UUIDv4)\\n$startDate = new \\\\DateTime(\"2013-10-20\"); // \\\\DateTime | Mandatory if `endDate` is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Can be maximum 30 days older tha current date.\\n$endDate = new \\\\DateTime(\"2013-10-20\"); // \\\\DateTime | Mandatory if `startDate` is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.\\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\\n$status = \"status_example\"; // string | Filter the records by `status` of the scheduled email batch or message.\\n$limit = 100; // int | Number of documents returned per page\\n$offset = 0; // int | Index of the first document on the page\\n\\ntry {\\n    $result = $apiInstance->getScheduledEmailByBatchId($batchId, $startDate, $endDate, $sort, $status, $limit, $offset);\\n    print_r($result);\\n} catch (Exception $e) {\\n    echo 'Exception when calling TransactionalEmailsApi->getScheduledEmailByBatchId: ', $e->getMessage(), PHP_EOL;\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Email Campaign Status with Brevo PHP Client\nDESCRIPTION: This snippet demonstrates updating the status of an email campaign (e.g., pausing, resuming, or stopping) using the Brevo PHP client. Required dependencies are the Brevo PHP SDK and GuzzleHttp, with inputs being the campaign ID and a status object representing the new state. The example includes API initialization and structured error management.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EmailCampaignsApi.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nrequire_once(__DIR__ . '/vendor/autoload.php');\\n\\n// Configure API key authorization: api-key\\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\\n// Configure API key authorization: partner-key\\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\\n\\n$apiInstance = new Brevo\\Client\\Api\\EmailCampaignsApi(\\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\\n    new GuzzleHttp\\Client(),\\n    $config\\n);\\n$campaignId = 789; // int | Id of the campaign\\n$status = new \\Brevo\\Client\\Model\\UpdateCampaignStatus(); // \\Brevo\\Client\\Model\\UpdateCampaignStatus | Status of the campaign\\n\\ntry {\\n    $apiInstance->updateCampaignStatus($campaignId, $status);\\n} catch (Exception $e) {\\n    echo 'Exception when calling EmailCampaignsApi->updateCampaignStatus: ', $e->getMessage(), PHP_EOL;\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shared Template URL with Brevo PHP Client\nDESCRIPTION: This PHP snippet demonstrates how to configure API key authorizations and use the Brevo PHP client to retrieve a shared template URL for a campaign. It requires dependencies including the Brevo PHP SDK and GuzzleHttp, and expects a valid numeric campaign or template ID as input. Successful execution returns an instance of GetSharedTemplateUrl; exceptions are caught and printed for error handling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EmailCampaignsApi.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nrequire_once(__DIR__ . '/vendor/autoload.php');\\n\\n// Configure API key authorization: api-key\\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\\n// Configure API key authorization: partner-key\\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\\n\\n$apiInstance = new Brevo\\Client\\Api\\EmailCampaignsApi(\\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\\n    new GuzzleHttp\\Client(),\\n    $config\\n);\\n$campaignId = 789; // int | Id of the campaign or template\\n\\ntry {\\n    $result = $apiInstance->getSharedTemplateUrl($campaignId);\\n    print_r($result);\\n} catch (Exception $e) {\\n    echo 'Exception when calling EmailCampaignsApi->getSharedTemplateUrl: ', $e->getMessage(), PHP_EOL;\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Sender with Brevo SendersApi in PHP\nDESCRIPTION: Example of creating a new sender identity using the Brevo PHP SDK. This snippet demonstrates how to configure API authorization, instantiate the SendersApi client, and call the createSender method with a CreateSender model object.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/SendersApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\SendersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$sender = new \\Brevo\\Client\\Model\\CreateSender(); // \\Brevo\\Client\\Model\\CreateSender | sender's name\n\ntry {\n    $result = $apiInstance->createSender($sender);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SendersApi->createSender: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Authenticating a Domain with Brevo API in PHP\nDESCRIPTION: Example code showing how to authenticate a domain using the Brevo API with PHP. The code sets up API key authorization, instantiates the DomainsApi, and calls the authenticateDomain method with a domain name parameter.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/DomainsApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\DomainsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$domainName = \"domainName_example\"; // string | Domain name\n\ntry {\n    $result = $apiInstance->authenticateDomain($domainName);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DomainsApi->authenticateDomain: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Information with Brevo PHP API\nDESCRIPTION: Example of how to get account information, plan and credits details using the Brevo PHP client. Requires API key or partner key authentication. Returns GetAccount model object containing account details.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/AccountApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\AccountApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getAccount();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling AccountApi->getAccount: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Tasks with Brevo PHP SDK\nDESCRIPTION: Example of updating an existing task using the Brevo TasksApi. Demonstrates API key configuration and error handling when patching task details.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TasksApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TasksApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\"; // string | \n$body = new \\Brevo\\Client\\Model\\Body9(); // \\Brevo\\Client\\Model\\Body9 | Updated task details.\n\ntry {\n    $apiInstance->crmTasksIdPatch($id, $body);\n} catch (Exception $e) {\n    echo 'Exception when calling TasksApi->crmTasksIdPatch: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting Aggregated SMTP Reports with Brevo PHP SDK\nDESCRIPTION: Example code showing how to retrieve aggregated transactional email activity reports using the Brevo PHP SDK. Supports date range filtering and tag-based filtering.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$startDate = \"startDate_example\";\n$endDate = \"endDate_example\";\n$days = 789;\n$tag = \"tag_example\";\n\ntry {\n    $result = $apiInstance->getAggregatedSmtpReport($startDate, $endDate, $days, $tag);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalEmailsApi->getAggregatedSmtpReport: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting All Lists with Brevo PHP SDK\nDESCRIPTION: Retrieves all contact lists with pagination support. Returns list information via GetLists model.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ListsApi.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ListsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$limit = 10; // int | Number of documents per page\n$offset = 0; // int | Index of the first document of the page\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n\ntry {\n    $result = $apiInstance->getLists($limit, $offset, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ListsApi->getLists: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Installing Brevo PHP SDK via Composer Command\nDESCRIPTION: Direct installation command for the Brevo PHP SDK using Composer.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require getbrevo/brevo-php \"1.x.x\"\n```\n\n----------------------------------------\n\nTITLE: Updating Contact Attribute with Brevo PHP API\nDESCRIPTION: Example demonstrating how to update a contact attribute using the Brevo PHP API. It shows the configuration of API keys, creation of the ContactsApi instance, and the parameters needed to update an attribute including category and name.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$attributeCategory = \"attributeCategory_example\"; // string | Category of the attribute\n$attributeName = \"attributeName_example\"; // string | Name of the existing attribute\n$updateAttribute = new \\Brevo\\Client\\Model\\UpdateAttribute(); // \\Brevo\\Client\\Model\\UpdateAttribute | Values to update an attribute\n\ntry {\n    $apiInstance->updateAttribute($attributeCategory, $attributeName, $updateAttribute);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->updateAttribute: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Contact Attribute - PHP Brevo API\nDESCRIPTION: Example of creating a contact attribute using the Brevo API. Requires API key authentication and accepts attribute category, name and creation parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$attributeCategory = \"attributeCategory_example\";\n$attributeName = \"attributeName_example\";\n$createAttribute = new \\Brevo\\Client\\Model\\CreateAttribute();\n\ntry {\n    $apiInstance->createAttribute($attributeCategory, $attributeName, $createAttribute);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->createAttribute: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting A/B Test Campaign Results with Brevo PHP\nDESCRIPTION: Example of retrieving A/B test campaign results using the Brevo PHP client. Requires API key authorization and handles campaign ID as input parameter.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EmailCampaignsApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EmailCampaignsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$campaignId = 789;\n\ntry {\n    $result = $apiInstance->getAbTestCampaignResult($campaignId);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling EmailCampaignsApi->getAbTestCampaignResult: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Adding Contacts to List in Brevo API using PHP\nDESCRIPTION: Example code demonstrating how to add existing contacts to a list using the Brevo API. Requires API key authorization and accepts list ID and contact emails as parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ListsApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\ListsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$listId = 789;\n$contactEmails = new \\Brevo\\Client\\Model\\AddContactToList();\n\ntry {\n    $result = $apiInstance->addContactToList($listId, $contactEmails);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ListsApi->addContactToList: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Sending Agent Message with Brevo Conversations API in PHP\nDESCRIPTION: Example of sending a message as an agent using the Brevo Conversations API. Requires API key authentication and proper request configuration.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ConversationsApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\ConversationsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$body = new \\Brevo\\Client\\Model\\Body10();\n\ntry {\n    $result = $apiInstance->conversationsMessagesPost($body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ConversationsApi->conversationsMessagesPost: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Sending an SMS Campaign Immediately using Brevo PHP Client\nDESCRIPTION: This code example illustrates how to trigger the immediate sending of a specific SMS campaign using the Brevo PHP client library. It requires configuring the API keys, initializing the SMSCampaignsApi client, and providing the ID of the campaign to be sent. The sendSmsCampaignNow method is invoked within a try-catch block to handle any errors during the API call. The method returns void upon success.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/SMSCampaignsApi.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\SMSCampaignsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$campaignId = 789; // int | id of the campaign\n\ntry {\n    $apiInstance->sendSmsCampaignNow($campaignId);\n} catch (Exception $e) {\n    echo 'Exception when calling SMSCampaignsApi->sendSmsCampaignNow: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Blocking New Domain Example in PHP\nDESCRIPTION: Example of blocking a new domain using the Brevo API. The code demonstrates how to initialize the API client with authentication and make a request to block a domain from receiving messages.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$blockDomain = new \\Brevo\\Client\\Model\\BlockDomain();\n\ntry {\n    $apiInstance->blockNewDomain($blockDomain);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalEmailsApi->blockNewDomain: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Sending Test SMS Campaign with Brevo PHP SDK\nDESCRIPTION: This code demonstrates how to send a test SMS campaign using the Brevo PHP SDK. It configures API keys, initializes the SMSCampaignsApi instance, and sends a test SMS to a specified phone number for a campaign ID.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/SMSCampaignsApi.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\SMSCampaignsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$campaignId = 789; // int | Id of the SMS campaign\n$phoneNumber = new \\Brevo\\Client\\Model\\SendTestSms(); // \\Brevo\\Client\\Model\\SendTestSms | Mobile number of the recipient with the country code. This number must belong to one of your contacts in Brevo account and must not be blacklisted\n\ntry {\n    $apiInstance->sendTestSms($campaignId, $phoneNumber);\n} catch (Exception $e) {\n    echo 'Exception when calling SMSCampaignsApi->sendTestSms: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating WhatsApp Campaign with PHP Brevo Client\nDESCRIPTION: Example code showing how to create and send a WhatsApp campaign using the Brevo PHP client. Requires API key authentication and the campaign details as input parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/WhatsAppCampaignsApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\WhatsAppCampaignsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$whatsAppCampaigns = new \\Brevo\\Client\\Model\\CreateWhatsAppCampaign();\n\ntry {\n    $result = $apiInstance->createWhatsAppCampaign($whatsAppCampaigns);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling WhatsAppCampaignsApi->createWhatsAppCampaign: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating a Category in PHP using Brevo SDK\nDESCRIPTION: This snippet demonstrates how to create or update a category using the Brevo PHP SDK. It configures API key authorization, initializes the EcommerceApi instance, and calls the createUpdateCategory method with category data.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EcommerceApi.md#2025-04-23_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EcommerceApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$createUpdateCategory = new \\Brevo\\Client\\Model\\CreateUpdateCategory(); // \\Brevo\\Client\\Model\\CreateUpdateCategory | Values to create/update a category\n\ntry {\n    $result = $apiInstance->createUpdateCategory($createUpdateCategory);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling EcommerceApi->createUpdateCategory: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Removing a Contact from a List with Brevo PHP Client\nDESCRIPTION: Example code for removing a contact from a specific list using the Brevo PHP client. This snippet demonstrates how to initialize the API client and make a request to delete contacts from a list by providing the list ID and contact emails/IDs.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$listId = 789; // int | Id of the list\n$contactEmails = new \\Brevo\\Client\\Model\\RemoveContactFromList(); // \\Brevo\\Client\\Model\\RemoveContactFromList | Emails addresses OR IDs of the contacts\n\ntry {\n    $result = $apiInstance->removeContactFromList($listId, $contactEmails);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->removeContactFromList: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Querying Contacts from a List with Brevo PHP SDK - PHP\nDESCRIPTION: This snippet illustrates how to fetch contacts specifically from a given list using the Brevo PHP SDK. It requires setting up authorization via API key or partner key, and can filter contacts based on modification timestamp, support pagination, and sort order. Required parameters include the listId (integer), while others are optional for filtering and sorting. The example demonstrates exception handling and outputs the fetched contacts or any errors encountered.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$listId = 789; // int | Id of the list\n$modifiedSince = \"modifiedSince_example\"; // string | Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.\n$limit = 50; // int | Number of documents per page\n$offset = 0; // int | Index of the first document of the page\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n\ntry {\n    $result = $apiInstance->getContactsFromList($listId, $modifiedSince, $limit, $offset, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->getContactsFromList: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting Aggregated SMS Report with Brevo API in PHP\nDESCRIPTION: Example code demonstrating how to retrieve aggregated SMS activity reports over a specified time period using the Brevo API.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalSMSApi.md#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalSMSApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$startDate = \"startDate_example\";\n$endDate = \"endDate_example\";\n\ntry {\n    $result = $apiInstance->getTransacAggregatedSmsReport($startDate, $endDate);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalSMSApi->getTransacAggregatedSmsReport: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Coupon Collections using Brevo PHP Client\nDESCRIPTION: This snippet shows how to retrieve all coupon collections using the Brevo PHP client. It sets up the API client, configures optional parameters for pagination and sorting, and makes a GET request to fetch the collections.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CouponsApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\CouponsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$limit = 50; // int | Number of documents returned per page\n$offset = 0; // int | Index of the first document on the page\n$sort = \"desc\"; // string | Sort the results by creation time in ascending/descending order\n\ntry {\n    $result = $apiInstance->getCouponCollections($limit, $offset, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CouponsApi->getCouponCollections: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating SMS Campaign with Brevo PHP SDK\nDESCRIPTION: This code demonstrates how to update an SMS campaign using the Brevo PHP SDK. It configures API keys, initializes the SMSCampaignsApi instance, and updates the campaign with new values specified in the updateSmsCampaign object.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/SMSCampaignsApi.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\SMSCampaignsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$campaignId = 789; // int | id of the SMS campaign\n$updateSmsCampaign = new \\Brevo\\Client\\Model\\UpdateSmsCampaign(); // \\Brevo\\Client\\Model\\UpdateSmsCampaign | Values to update an SMS Campaign\n\ntry {\n    $apiInstance->updateSmsCampaign($campaignId, $updateSmsCampaign);\n} catch (Exception $e) {\n    echo 'Exception when calling SMSCampaignsApi->updateSmsCampaign: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Querying Contacts with Brevo PHP SDK - PHP\nDESCRIPTION: This snippet shows how to use the Brevo PHP SDK to query the main 'contacts' resource, retrieving contact records according to various filters such as modification date, creation date, segment or list inclusion, sorting, and custom attribute filtering. It requires autoloading via Composer, valid API or partner keys, and (optionally) GuzzleHttp for HTTP requests. Key parameters include pagination (limit, offset), modification timestamps, and versatile attribute-based filtering for fine-grained queries. The method returns a GetContacts model and prints the results, or captures exceptions in case of errors.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$limit = 50; // int | Number of documents per page\n$offset = 0; // int | Index of the first document of the page\n$modifiedSince = \"modifiedSince_example\"; // string | Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.\n$createdSince = \"createdSince_example\"; // string | Filter (urlencoded) the contacts created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n$segmentId = 789; // int | Id of the segment. **Either listIds or segmentId can be passed.**\n$listIds = array(56); // int[] | Ids of the list. **Either listIds or segmentId can be passed.**\n$filter = \"filter_example\"; // string | Filter the contacts on the basis of attributes. **Allowed operator: equals. (e.g. filter=equals(FIRSTNAME,\\\"Antoine\\\"), filter=equals(B1, true), filter=equals(DOB, \\\"1989-11-23\\\"))**\n\ntry {\n    $result = $apiInstance->getContacts($limit, $offset, $modifiedSince, $createdSince, $sort, $segmentId, $listIds, $filter);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->getContacts: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Create CRM Task Example in PHP\nDESCRIPTION: Example demonstrating how to create a new CRM task using the Brevo PHP SDK. Requires API key authentication and accepts task details as parameters. Returns the created task response.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CRMApi.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\CRMApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$body = new \\Brevo\\Client\\Model\\Body(); // \\Brevo\\Client\\Model\\Body | Task name.\n\ntry {\n    $result = $apiInstance->crmTasksPost($body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CRMApi->crmTasksPost: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Folder with Brevo PHP Client\nDESCRIPTION: Example of how to create a new contact folder using the Brevo PHP client library. It configures the API client, instantiates the FoldersApi, and calls the createFolder method.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/FoldersApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\FoldersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$createFolder = new \\Brevo\\Client\\Model\\CreateUpdateFolder(); // \\Brevo\\Client\\Model\\CreateUpdateFolder | Name of the folder\n\ntry {\n    $result = $apiInstance->createFolder($createFolder);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FoldersApi->createFolder: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating New Sub-Account with Brevo PHP API\nDESCRIPTION: Creates a new sub-account under a master account using the Brevo API. Requires master account authentication and returns the created sub-account details.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/MasterAccountApi.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\MasterAccountApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$subAccountCreate = new \\Brevo\\Client\\Model\\CreateSubAccount();\n\ntry {\n    $result = $apiInstance->corporateSubAccountPost($subAccountCreate);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling MasterAccountApi->corporateSubAccountPost: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contacts from List in Brevo API using PHP\nDESCRIPTION: Example code showing how to retrieve contacts from a list using the Brevo API. Supports pagination, sorting, and filtering by modification date.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ListsApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\ListsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$listId = 789;\n$modifiedSince = \"modifiedSince_example\";\n$limit = 50;\n$offset = 0;\n$sort = \"desc\";\n\ntry {\n    $result = $apiInstance->getContactsFromList($listId, $modifiedSince, $limit, $offset, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ListsApi->getContactsFromList: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Update Group of Sub-accounts in Brevo using PHP\nDESCRIPTION: Example code demonstrating how to update a group of sub-accounts using the Brevo API. Requires API key authentication and accepts group ID and update details as parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/MasterAccountApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\MasterAccountApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\";\n$body = new \\Brevo\\Client\\Model\\Body1();\n\ntry {\n    $apiInstance->corporateGroupIdPut($id, $body);\n} catch (Exception $e) {\n    echo 'Exception when calling MasterAccountApi->corporateGroupIdPut: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inbound Email Events by UUID in PHP\nDESCRIPTION: Example of fetching the event history for a specific received email using its UUID. Returns detailed event information for the specified email.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/InboundParsingApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\InboundParsingApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$uuid = \"uuid_example\";\n\ntry {\n    $result = $apiInstance->getInboundEmailEventsByUuid($uuid);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling InboundParsingApi->getInboundEmailEventsByUuid: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Automated Message with Brevo Conversations API in PHP\nDESCRIPTION: Example of retrieving an automated message using its ID. Returns message details in ConversationsMessage format.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ConversationsApi.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\ConversationsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\";\n\ntry {\n    $result = $apiInstance->conversationsPushedMessagesIdGet($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ConversationsApi->conversationsPushedMessagesIdGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Update Deal Example in PHP\nDESCRIPTION: Example of updating an existing deal using the Brevo PHP client. Demonstrates API key configuration and error handling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/DealsApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\DealsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\";\n$body = new \\Brevo\\Client\\Model\\Body6();\n\ntry {\n    $apiInstance->crmDealsIdPatch($id, $body);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->crmDealsIdPatch: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lists in a Folder with Brevo PHP Client\nDESCRIPTION: Example of how to retrieve lists within a specific contact folder using the Brevo PHP client library. It configures the API client, instantiates the FoldersApi, and calls the getFolderLists method with optional pagination parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/FoldersApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\FoldersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$folderId = 789; // int | Id of the folder\n$limit = 10; // int | Number of documents per page\n$offset = 0; // int | Index of the first document of the page\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n\ntry {\n    $result = $apiInstance->getFolderLists($folderId, $limit, $offset, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FoldersApi->getFolderLists: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Querying Blocked Domains with Brevo PHP SDK in PHP\nDESCRIPTION: This code snippet retrieves the list of blocked domains using the Brevo TransactionalEmailsApi in PHP. It uses API key authentication, client configuration setup, and the getBlockedDomains method. No input parameters are required, and the output is an object containing blocked domain details as per the API's GetBlockedDomains model. Ensure the Brevo PHP SDK is installed and credentials are set correctly in your environment before use.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nrequire_once(__DIR__ . '/vendor/autoload.php');\\n\\n// Configure API key authorization: api-key\\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\\n// Configure API key authorization: partner-key\\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\\n\\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\\n    new GuzzleHttp\\Client(),\\n    $config\\n);\\n\\ntry {\\n    $result = $apiInstance->getBlockedDomains();\\n    print_r($result);\\n} catch (Exception $e) {\\n    echo 'Exception when calling TransactionalEmailsApi->getBlockedDomains: ', $e->getMessage(), PHP_EOL;\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating a contact list using Brevo PHP client\nDESCRIPTION: This snippet demonstrates how to update a contact list in the Brevo platform using the PHP client. It shows configuration for API keys, instantiation of the ContactsApi class, and the updateList method call with required parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$listId = 789; // int | Id of the list\n$updateList = new \\Brevo\\Client\\Model\\UpdateList(); // \\Brevo\\Client\\Model\\UpdateList | Values to update a list\n\ntry {\n    $apiInstance->updateList($listId, $updateList);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->updateList: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating an External Feed in PHP using Brevo API\nDESCRIPTION: This snippet demonstrates how to create an external feed using the Brevo PHP client. It initializes the API client, sets up authentication, and makes a POST request to create a new external feed.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ExternalFeedsApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ExternalFeedsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$createExternalFeed = new \\Brevo\\Client\\Model\\CreateExternalFeed(); // \\Brevo\\Client\\Model\\CreateExternalFeed | Values to create a feed\n\ntry {\n    $result = $apiInstance->createExternalFeed($createExternalFeed);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ExternalFeedsApi->createExternalFeed: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating External Feed using Brevo PHP API\nDESCRIPTION: Shows how to update an existing external feed using its UUID. Includes API key configuration, client initialization, and error handling. Requires Brevo PHP client library and GuzzleHttp client.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ExternalFeedsApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ExternalFeedsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$uuid = \"uuid_example\"; // string | UUID of the feed to update\n$updateExternalFeed = new \\Brevo\\Client\\Model\\UpdateExternalFeed(); // \\Brevo\\Client\\Model\\UpdateExternalFeed | Values to update a feed\n\ntry {\n    $apiInstance->updateExternalFeed($uuid, $updateExternalFeed);\n} catch (Exception $e) {\n    echo 'Exception when calling ExternalFeedsApi->updateExternalFeed: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Revoking User Permissions via Brevo PHP API\nDESCRIPTION: Example of how to revoke permissions for a specific user using their email address. Requires API key authentication and uses the UserApi class to revoke permissions.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/UserApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\UserApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$email = \"email_example\"; // string | Email of the invited user.\n\ntry {\n    $result = $apiInstance->putRevokeUserPermission($email);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UserApi->putRevokeUserPermission: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Folder using Brevo PHP API\nDESCRIPTION: Example of creating a folder using Brevo PHP API client with authentication and error handling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$createFolder = new \\Brevo\\Client\\Model\\CreateUpdateFolder();\n\ntry {\n    $result = $apiInstance->createFolder($createFolder);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->createFolder: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Get Contact Attributes Example - PHP\nDESCRIPTION: Example showing how to retrieve all contact attributes using the Brevo PHP client library. Requires API key authentication and returns GetAttributes model object.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getAttributes();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->getAttributes: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving SMTP Reports with Brevo PHP Client\nDESCRIPTION: This PHP snippet shows how to retrieve aggregated transactional email activity reports using the Brevo API. It utilizes the Brevo PHP client and GuzzleHttp. After configuring API keys and instantiating `TransactionalEmailsApi`, it calls the `getSmtpReport` method. Optional parameters like `limit`, `offset`, `startDate`, `endDate`, `days`, `tag`, and `sort` can be provided to filter and paginate the results. The function returns a `\\Brevo\\Client\\Model\\GetReports` object which is printed, or an exception is caught and its message displayed.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$limit = 10; // int | Number of documents returned per page\n$offset = 0; // int | Index of the first document on the page\n$startDate = \"startDate_example\"; // string | Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)\n$endDate = \"endDate_example\"; // string | Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)\n$days = 789; // int | Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'\n$tag = \"tag_example\"; // string | Tag of the emails\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n\ntry {\n    $result = $apiInstance->getSmtpReport($limit, $offset, $startDate, $endDate, $days, $tag, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalEmailsApi->getSmtpReport: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Contact Attributes with Brevo API in PHP\nDESCRIPTION: Example code demonstrating how to update an existing contact attribute using the Brevo PHP client. Requires API key authorization and accepts attribute category, name and update values as parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/AttributesApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\AttributesApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$attributeCategory = \"attributeCategory_example\";\n$attributeName = \"attributeName_example\";\n$updateAttribute = new \\Brevo\\Client\\Model\\UpdateAttribute();\n\ntry {\n    $apiInstance->updateAttribute($attributeCategory, $attributeName, $updateAttribute);\n} catch (Exception $e) {\n    echo 'Exception when calling AttributesApi->updateAttribute: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting Sender Information using Brevo PHP API\nDESCRIPTION: Example of retrieving sender information filtered by IP and domain using the Brevo PHP API client. Requires API key authentication and handles both successful responses and exceptions.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/SendersApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\SendersApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$ip = \"ip_example\";\n$domain = \"domain_example\";\n\ntry {\n    $result = $apiInstance->getSenders($ip, $domain);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SendersApi->getSenders: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Querying Account Activity Logs with Brevo API in PHP\nDESCRIPTION: This snippet shows how to request account activity logs using the getAccountActivity endpoint. It requires specifying a start and end date in UTC (YYYY-MM-DD), with support for pagination via limit and offset (default 10 and 0). The code prints the retrieved logs or catches errors, and returns a GetAccountActivity model on success.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/MasterAccountApi.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nrequire_once(__DIR__ . '/vendor/autoload.php');\\n\\n// Configure API key authorization: api-key\\n$config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\\n// Configure API key authorization: partner-key\\n$config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\\n\\n$apiInstance = new Brevo\\\\Client\\\\Api\\\\MasterAccountApi(\\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\\\ClientInterface`.\\n    // This is optional, `GuzzleHttp\\\\Client` will be used as default.\\n    new GuzzleHttp\\\\Client(),\\n    $config\\n);\\n$startDate = \\\"startDate_example\\\"; // string | Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search.\\n$endDate = \\\"endDate_example\\\"; // string | Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month.\\n$limit = 10; // int | Number of documents per page\\n$offset = 0; // int | Index of the first document in the page.\\n\\ntry {\\n    $result = $apiInstance->getAccountActivity($startDate, $endDate, $limit, $offset);\\n    print_r($result);\\n} catch (Exception $e) {\\n    echo 'Exception when calling MasterAccountApi->getAccountActivity: ', $e->getMessage(), PHP_EOL;\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Activating eCommerce App in PHP using Brevo SDK\nDESCRIPTION: This snippet demonstrates how to activate the eCommerce app using the Brevo PHP SDK. It configures API key authorization, initializes the EcommerceApi instance, and calls the ecommerceActivatePost method.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EcommerceApi.md#2025-04-23_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EcommerceApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $apiInstance->ecommerceActivatePost();\n} catch (Exception $e) {\n    echo 'Exception when calling EcommerceApi->ecommerceActivatePost: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Notes with PHP Brevo Client\nDESCRIPTION: Example code demonstrating how to retrieve all CRM notes using the Brevo PHP client library. Supports filtering by entity type, entity IDs, date range and includes pagination options.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/NotesApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\NotesApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$entity = \"entity_example\"; // string | Filter by note entity type\n$entityIds = \"entityIds_example\"; // string | Filter by note entity IDs\n$dateFrom = 56; // int | dateFrom to date range filter type (timestamp in milliseconds)\n$dateTo = 56; // int | dateTo to date range filter type (timestamp in milliseconds)\n$offset = 789; // int | Index of the first document of the page\n$limit = 50; // int | Number of documents per page\n$sort = \"sort_example\"; // string | Sort the results in the ascending/descending order\n\ntry {\n    $result = $apiInstance->crmNotesGet($entity, $entityIds, $dateFrom, $dateTo, $offset, $limit, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling NotesApi->crmNotesGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating WhatsApp Template with PHP Brevo Client\nDESCRIPTION: Example code showing how to create a WhatsApp template using the Brevo PHP client. Requires API key authentication and template details as input parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/WhatsAppCampaignsApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\WhatsAppCampaignsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$whatsAppTemplates = new \\Brevo\\Client\\Model\\CreateWhatsAppTemplate();\n\ntry {\n    $result = $apiInstance->createWhatsAppTemplate($whatsAppTemplates);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling WhatsAppCampaignsApi->createWhatsAppTemplate: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Category Details with Brevo EcommerceApi in PHP\nDESCRIPTION: This PHP snippet demonstrates how to retrieve detailed information for a specific ecommerce category using the `getCategoryInfo` method of the `Brevo\\Client\\Api\\EcommerceApi`. It requires initializing the API client with API keys (api-key, partner-key) and passing the category ID (`$id`) as an argument. The result, an instance of `\\Brevo\\Client\\Model\\GetCategoryDetails`, is printed upon success, or an exception message is displayed on failure. Dependencies include the Brevo PHP SDK (`vendor/autoload.php`) and GuzzleHttp.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EcommerceApi.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EcommerceApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\"; // string | Category ID\n\ntry {\n    $result = $apiInstance->getCategoryInfo($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling EcommerceApi->getCategoryInfo: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving SMS Events with Brevo API in PHP\nDESCRIPTION: Example code showing how to retrieve SMS activity events using the Brevo API. Demonstrates configuration of API keys and making a request to get SMS events with optional filtering parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalSMSApi.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalSMSApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$limit = 50;\n$startDate = \"startDate_example\";\n$endDate = \"endDate_example\";\n$offset = 0;\n\ntry {\n    $result = $apiInstance->getSmsEvents($limit, $startDate, $endDate, $offset);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalSMSApi->getSmsEvents: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Downloading a File from Brevo CRM in PHP\nDESCRIPTION: Example code to download a file from Brevo's CRM system. Shows how to set up API authorization, instantiate the API client, and retrieve a downloadable link for the specified file.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/FilesApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\FilesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\"; // string | File id to download.\n\ntry {\n    $result = $apiInstance->crmFilesIdGet($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FilesApi->crmFilesIdGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with Brevo PHP API Client\nDESCRIPTION: Demonstrates configuring API authorization and uploading files via the Brevo API. Includes setup for both api-key and partner-key authentication, file upload with optional parameters for linking to deals, contacts, and companies. Uses GuzzleHttp client for HTTP requests.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/FilesApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\FilesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$file = \"/path/to/file.txt\"; // \\SplFileObject | File data to create a file.\n$dealId = \"dealId_example\"; // string | Deal id linked to a file\n$contactId = 789; // int | Contact id linked to a file\n$companyId = \"companyId_example\"; // string | Company id linked to a file\n\ntry {\n    $result = $apiInstance->crmFilesPost($file, $dealId, $contactId, $companyId);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FilesApi->crmFilesPost: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Revoking Invited User Email with Brevo API in PHP\nDESCRIPTION: This PHP snippet demonstrates how to revoke the invitation of a user by email using the Brevo API. It requires the Brevo PHP client library and a valid API key or partner key for authorization. The key parameter is the invited user's email, and the operation returns no response body (void); exceptions are caught and output to the console.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/MasterAccountApi.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nrequire_once(__DIR__ . '/vendor/autoload.php');\\n\\n// Configure API key authorization: api-key\\n$config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\\n// Configure API key authorization: partner-key\\n$config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\\n\\n$apiInstance = new Brevo\\\\Client\\\\Api\\\\MasterAccountApi(\\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\\\ClientInterface`.\\n    // This is optional, `GuzzleHttp\\\\Client` will be used as default.\\n    new GuzzleHttp\\\\Client(),\\n    $config\\n);\\n$email = \\\"email_example\\\"; // string | Email of the invited user\\n\\ntry {\\n    $apiInstance->corporateUserRevokeEmailDelete($email);\\n} catch (Exception $e) {\\n    echo 'Exception when calling MasterAccountApi->corporateUserRevokeEmailDelete: ', $e->getMessage(), PHP_EOL;\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetching Blocked Transactional Contacts using Brevo PHP SDK\nDESCRIPTION: This PHP snippet shows how to get a list of blocked or unsubscribed transactional contacts via the Brevo API. It configures API key authentication, creates an instance of `TransactionalEmailsApi`, and invokes the `getTransacBlockedContacts` method. It utilizes optional parameters like `startDate`, `endDate`, `limit`, `offset`, `senders`, and `sort` for filtering and pagination. The result, containing the blocked contacts list, is printed, and any exceptions during the API call are handled.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$startDate = \"startDate_example\"; // string | Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts\n$endDate = \"endDate_example\"; // string | Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts\n$limit = 50; // int | Number of documents returned per page\n$offset = 0; // int | Index of the first document on the page\n$senders = array(\"senders_example\"); // string[] | Comma separated list of emails of the senders from which contacts are blocked or unsubscribed\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n\ntry {\n    $result = $apiInstance->getTransacBlockedContacts($startDate, $endDate, $limit, $offset, $senders, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalEmailsApi->getTransacBlockedContacts: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Querying Folder Details with Brevo PHP SDK - PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a folder's details using the Brevo PHP SDK. It sets up authorization using an API or partner key, optionally via a Bearer prefix, and then queries folder information by folderId (integer), outputting the folder's details on success or an error message if the call fails. Only the folderId parameter is required, and the code supports substitution of custom HTTP clients as needed.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$folderId = 789; // int | id of the folder\n\ntry {\n    $result = $apiInstance->getFolder($folderId);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->getFolder: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Batch Categories with Brevo eCommerce API in PHP\nDESCRIPTION: Example of creating multiple categories in batch using the Brevo API. Shows configuration setup and response handling. Requires Brevo client library and GuzzleHttp client.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EcommerceApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EcommerceApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$createUpdateBatchCategory = new \\Brevo\\Client\\Model\\CreateUpdateBatchCategory();\n\ntry {\n    $result = $apiInstance->createUpdateBatchCategory($createUpdateBatchCategory);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling EcommerceApi->createUpdateBatchCategory: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Folder Details with Brevo PHP Client\nDESCRIPTION: Example of how to retrieve details of a specific contact folder using the Brevo PHP client library. It configures the API client, instantiates the FoldersApi, and calls the getFolder method with a folder ID.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/FoldersApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\FoldersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$folderId = 789; // int | id of the folder\n\ntry {\n    $result = $apiInstance->getFolder($folderId);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FoldersApi->getFolder: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting File Details from Brevo CRM in PHP\nDESCRIPTION: Example demonstrating how to retrieve detailed information about a specific file in Brevo's CRM. Shows configuration of API keys, instantiation of the API client, and handling of the file data response.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/FilesApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\FilesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\"; // string | File id to get file data.\n\ntry {\n    $result = $apiInstance->crmFilesIdDataGet($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FilesApi->crmFilesIdDataGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Posting Pushed Messages with Brevo Conversations API in PHP\nDESCRIPTION: Example code showing how to initialize the Brevo PHP client, configure API keys, and make a POST request to send pushed messages in conversations. Includes error handling and uses GuzzleHttp client for HTTP requests.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ConversationsApi.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ConversationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$body = new \\Brevo\\Client\\Model\\Body12(); // \\Brevo\\Client\\Model\\Body12 | \n\ntry {\n    $result = $apiInstance->conversationsPushedMessagesPost($body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ConversationsApi->conversationsPushedMessagesPost: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Managing User Invitations via Brevo PHP API\nDESCRIPTION: Example of how to resend or cancel user invitations. Requires API key authentication and uses the UserApi class to manage invitation status.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/UserApi.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\UserApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$action = \"action_example\"; // string | action\n$email = \"email_example\"; // string | Email of the invited user.\n\ntry {\n    $result = $apiInstance->putresendcancelinvitation($action, $email);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UserApi->putresendcancelinvitation: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting Sub-Account Details in PHP using Brevo API\nDESCRIPTION: PHP implementation for retrieving detailed information about a specific sub-account using its ID. Returns SubAccountDetailsResponse object.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/MasterAccountApi.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\MasterAccountApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 789;\n\ntry {\n    $result = $apiInstance->corporateSubAccountIdGet($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling MasterAccountApi->corporateSubAccountIdGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Batch Orders with Brevo eCommerce API in PHP\nDESCRIPTION: Example of creating multiple orders in batch using the Brevo API. Demonstrates API key configuration and error handling. Requires Brevo client library and GuzzleHttp client.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EcommerceApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EcommerceApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$orderBatch = new \\Brevo\\Client\\Model\\OrderBatch();\n\ntry {\n    $apiInstance->createBatchOrder($orderBatch);\n} catch (Exception $e) {\n    echo 'Exception when calling EcommerceApi->createBatchOrder: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetching Folder Lists using Brevo ContactsApi in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve lists belonging to a specific folder using the Brevo PHP SDK. It initializes the configuration with API keys, creates an instance of ContactsApi, and calls the `getFolderLists` method with parameters for folder ID, pagination (`limit`, `offset`), and sorting (`sort`). The result, containing the lists, is printed, and exceptions are caught and displayed.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$folderId = 789; // int | Id of the folder\n$limit = 10; // int | Number of documents per page\n$offset = 0; // int | Index of the first document of the page\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n\ntry {\n    $result = $apiInstance->getFolderLists($folderId, $limit, $offset, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->getFolderLists: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Validating Sender using OTP in Brevo PHP API\nDESCRIPTION: Example of validating a sender using OTP (One-Time Password) through the Brevo PHP API client. Requires API key authentication and includes error handling for validation process.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/SendersApi.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\SendersApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$senderId = 789;\n$otp = new \\Brevo\\Client\\Model\\Otp();\n\ntry {\n    $apiInstance->validateSenderByOTP($senderId, $otp);\n} catch (Exception $e) {\n    echo 'Exception when calling SendersApi->validateSenderByOTP: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Associating Dedicated IP to Child Account in Brevo API using PHP\nDESCRIPTION: This snippet shows how to associate a dedicated IP to a child account using the Brevo API. It requires the child identifier and IP details.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ResellerApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ResellerApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$childIdentifier = \"childIdentifier_example\"; // string | Either auth key or id of reseller's child\n$ip = new \\Brevo\\Client\\Model\\ManageIp(); // \\Brevo\\Client\\Model\\ManageIp | IP to associate\n\ntry {\n    $apiInstance->associateIpToChild($childIdentifier, $ip);\n} catch (Exception $e) {\n    echo 'Exception when calling ResellerApi->associateIpToChild: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating WhatsApp Campaign - PHP Brevo SDK\nDESCRIPTION: Example of updating an existing WhatsApp campaign using the Brevo PHP SDK. Configures API keys, initializes the WhatsAppCampaignsApi client, and updates campaign details with provided values. Includes error handling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/WhatsAppCampaignsApi.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\WhatsAppCampaignsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$campaignId = 789; // int | Id of the campaign\n$whatsAppCampaign = new \\Brevo\\Client\\Model\\UpdateWhatsAppCampaign(); // \\Brevo\\Client\\Model\\UpdateWhatsAppCampaign | values to update WhatsApp Campaign\n\ntry {\n    $apiInstance->updateWhatsAppCampaign($campaignId, $whatsAppCampaign);\n} catch (Exception $e) {\n    echo 'Exception when calling WhatsAppCampaignsApi->updateWhatsAppCampaign: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting Lists in a Folder with Brevo PHP SDK\nDESCRIPTION: Makes API request to retrieve lists within a specified folder. Requires folder ID and supports pagination parameters. Returns folder list details via GetFolderLists model.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ListsApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ListsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$folderId = 789; // int | Id of the folder\n$limit = 10; // int | Number of documents per page\n$offset = 0; // int | Index of the first document of the page\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n\ntry {\n    $result = $apiInstance->getFolderLists($folderId, $limit, $offset, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ListsApi->getFolderLists: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions in Brevo API (PHP)\nDESCRIPTION: This snippet demonstrates how to check permissions for a specific user using their email address in the Brevo API. It includes setting up the API client and handling the API response.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/UserApi.md#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\UserApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$email = \"email_example\"; // string | Email of the invited user.\n\ntry {\n    $result = $apiInstance->getUserPermission($email);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UserApi->getUserPermission: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting Blocked Domain Example in PHP\nDESCRIPTION: Example of unblocking a domain from the list of blocked domains using the Brevo API. Demonstrates API client initialization and domain deletion process.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$domain = \"domain_example\";\n\ntry {\n    $apiInstance->deleteBlockedDomain($domain);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalEmailsApi->deleteBlockedDomain: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting Attribute using Brevo PHP API\nDESCRIPTION: Example of deleting a contact attribute using Brevo PHP API client with authentication and error handling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$attributeCategory = \"attributeCategory_example\";\n$attributeName = \"attributeName_example\";\n\ntry {\n    $apiInstance->deleteAttribute($attributeCategory, $attributeName);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->deleteAttribute: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving SMTP Email Templates using Brevo PHP SDK\nDESCRIPTION: This PHP snippet demonstrates how to retrieve a list of SMTP email templates using the Brevo API. It involves setting up API key authentication (both 'api-key' and 'partner-key'), instantiating the `TransactionalEmailsApi` client, and calling the `getSmtpTemplates` method. Optional parameters like `templateStatus`, `limit`, `offset`, and `sort` are used to filter and paginate the results. The response, containing the list of templates, is printed, and potential exceptions are caught and displayed.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$templateStatus = true; // bool | Filter on the status of the template. Active = true, inactive = false\n$limit = 50; // int | Number of documents returned per page\n$offset = 0; // int | Index of the first document in the page\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n\ntry {\n    $result = $apiInstance->getSmtpTemplates($templateStatus, $limit, $offset, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalEmailsApi->getSmtpTemplates: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Get All Deals Example - PHP\nDESCRIPTION: Example code demonstrating how to fetch all deals with optional filtering and pagination parameters. Supports filtering by deal name, linked companies, and contacts.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/DealsApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\DealsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$filtersAttributesDealName = \"filtersAttributesDealName_example\";\n$filtersLinkedCompaniesIds = \"filtersLinkedCompaniesIds_example\";\n$filtersLinkedContactsIds = \"filtersLinkedContactsIds_example\";\n$offset = 789;\n$limit = 50;\n$sort = \"sort_example\";\n$sortBy = \"sortBy_example\";\n\ntry {\n    $result = $apiInstance->crmDealsGet($filtersAttributesDealName, $filtersLinkedCompaniesIds, $filtersLinkedContactsIds, $offset, $limit, $sort, $sortBy);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->crmDealsGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Automated Message with Brevo Conversations API in PHP\nDESCRIPTION: Example of updating an existing automated message using its ID. Accepts message update parameters in request body.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ConversationsApi.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\ConversationsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\";\n$body = new \\Brevo\\Client\\Model\\Body13();\n\ntry {\n    $result = $apiInstance->conversationsPushedMessagesIdPut($id, $body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ConversationsApi->conversationsPushedMessagesIdPut: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating a Coupon Collection by ID using Brevo PHP Client\nDESCRIPTION: This snippet demonstrates how to update an existing coupon collection by its ID using the Brevo PHP client. It initializes the API client, sets up authorization, and makes a PATCH request to update the collection details.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CouponsApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\CouponsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\"; // string | Id of the coupon collection to update\n$updateCouponCollection = new \\Brevo\\Client\\Model\\UpdateCouponCollection(); // \\Brevo\\Client\\Model\\UpdateCouponCollection | Values to update a coupon collection\n\ntry {\n    $result = $apiInstance->updateCouponCollection($id, $updateCouponCollection);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CouponsApi->updateCouponCollection: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Message Details in Brevo API (PHP)\nDESCRIPTION: Example of getting details for a specific message using its ID. Requires API key authentication.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ConversationsApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\ConversationsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\"; // string | ID of the message\n\ntry {\n    $result = $apiInstance->conversationsMessagesIdGet($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ConversationsApi->conversationsMessagesIdGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Get Child Account Creation Status in PHP\nDESCRIPTION: Example of checking a child account's creation status using the Brevo PHP client. Requires API key authentication and uses the ResellerApi class.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ResellerApi.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ResellerApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$childIdentifier = \"childIdentifier_example\";\n\ntry {\n    $result = $apiInstance->getChildAccountCreationStatus($childIdentifier);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ResellerApi->getChildAccountCreationStatus: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting Scheduled Emails with Brevo PHP SDK\nDESCRIPTION: Example code showing how to delete scheduled emails by batchId or messageId using the Brevo PHP SDK. Requires API key authorization.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$identifier = \"identifier_example\";\n\ntry {\n    $apiInstance->deleteScheduledEmailById($identifier);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalEmailsApi->deleteScheduledEmailById: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Adding Contacts to List - PHP Brevo API\nDESCRIPTION: Example of adding existing contacts to a list using the Brevo API. Requires API key authentication and accepts list ID and contact emails as parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$listId = 789;\n$contactEmails = new \\Brevo\\Client\\Model\\AddContactToList();\n\ntry {\n    $result = $apiInstance->addContactToList($listId, $contactEmails);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->addContactToList: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Company by ID with Brevo PHP Client\nDESCRIPTION: This snippet shows how to retrieve a specific company by its ID using the Brevo PHP client library.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CompaniesApi.md#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\CompaniesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\"; // string | \n\ntry {\n    $result = $apiInstance->companiesIdGet($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CompaniesApi->companiesIdGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Files with Brevo API in PHP\nDESCRIPTION: Example of how to get all files from Brevo's CRM using the API. Demonstrates configuring API authorization, creating an API instance, setting optional filters, and handling the response.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/FilesApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\FilesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$entity = \"entity_example\"; // string | Filter by file entity type\n$entityIds = \"entityIds_example\"; // string | Filter by file entity IDs\n$dateFrom = 56; // int | dateFrom to date range filter type (timestamp in milliseconds)\n$dateTo = 56; // int | dateTo to date range filter type (timestamp in milliseconds)\n$offset = 789; // int | Index of the first document of the page\n$limit = 50; // int | Number of documents per page\n$sort = \"sort_example\"; // string | Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed\n\ntry {\n    $result = $apiInstance->crmFilesGet($entity, $entityIds, $dateFrom, $dateTo, $offset, $limit, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FilesApi->crmFilesGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Process with Brevo PHP Client\nDESCRIPTION: Example of how to retrieve information for a specific process using the Brevo PHP client. Requires API key authentication and accepts a process ID parameter. Returns a GetProcess model object containing process details.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ProcessApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ProcessApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$processId = 789; // int | Id of the process\n\ntry {\n    $result = $apiInstance->getProcess($processId);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProcessApi->getProcess: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Companies with Brevo PHP Client\nDESCRIPTION: This snippet shows how to retrieve all companies using the Brevo PHP client library. It includes optional parameters for filtering, pagination, and sorting the results.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CompaniesApi.md#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\CompaniesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$filters = \"filters_example\"; // string | Filter by attrbutes. If you have filter for owner on your side please send it as {\\\"attributes.owner\\\":\\\"5b1a17d914b73d35a76ca0c7\\\"}\n$linkedContactsIds = 789; // int | Filter by linked contacts ids\n$linkedDealsIds = \"linkedDealsIds_example\"; // string | Filter by linked deals ids\n$page = 789; // int | Index of the first document of the page\n$limit = 50; // int | Number of documents per page\n$sort = \"sort_example\"; // string | Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed\n$sortBy = \"sortBy_example\"; // string | The field used to sort field names.\n\ntry {\n    $result = $apiInstance->companiesGet($filters, $linkedContactsIds, $linkedDealsIds, $page, $limit, $sort, $sortBy);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CompaniesApi->companiesGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Coupon Collection with Brevo PHP API\nDESCRIPTION: Demonstrates how to update a coupon collection using the Brevo PHP API client. The code shows API key configuration, client initialization, and making an update request with proper error handling. Requires GuzzleHttp client and Brevo PHP SDK.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CouponsApi.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\CouponsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\"; // string | Id of the collection to update\n$updateCouponCollection = new \\Brevo\\Client\\Model\\UpdateCouponCollection(); // \\Brevo\\Client\\Model\\UpdateCouponCollection | Values to update the coupon collection\n\ntry {\n    $result = $apiInstance->updateCouponCollection($id, $updateCouponCollection);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CouponsApi->updateCouponCollection: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Generating Brevo SSO Token for Reseller Child in PHP\nDESCRIPTION: This PHP snippet demonstrates how to generate a Single Sign-On (SSO) token for a specific reseller child account using the Brevo API. It requires the Brevo PHP SDK, configures API key authentication ('api-key' and 'partner-key'), instantiates the `ResellerApi`, and calls the `getSsoToken` method with the child's identifier. The resulting SSO token information is printed, or an exception message is displayed if an error occurs.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ResellerApi.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ResellerApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$childIdentifier = \"childIdentifier_example\"; // string | Either auth key or id of reseller's child\n\ntry {\n    $result = $apiInstance->getSsoToken($childIdentifier);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ResellerApi->getSsoToken: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Update Company Using Brevo PHP API\nDESCRIPTION: Example of updating a company's details using the Brevo PHP client. Requires API key authentication and accepts company ID and updated details as parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CompaniesApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\CompaniesApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\";\n$body = new \\Brevo\\Client\\Model\\Body3();\n\ntry {\n    $result = $apiInstance->companiesIdPatch($id, $body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CompaniesApi->companiesIdPatch: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific CRM Pipeline Details by ID with Brevo PHP SDK\nDESCRIPTION: This PHP code illustrates how to get details for a specific CRM pipeline using its ID via the Brevo API. It sets up the Brevo client configuration with necessary API keys ('api-key', 'partner-key'), creates an instance of the `DealsApi`, specifies the target `pipelineID` (e.g., \"pipelineID_example\"), and invokes the `crmPipelineDetailsPipelineIDGet` method with the ID. Dependencies include the Brevo PHP SDK (`vendor/autoload.php`) and GuzzleHttp. The response (expected to be a `\\Brevo\\Client\\Model\\Pipelines` object) or any caught exception message is printed.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/DealsApi.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$pipelineID = \"pipelineID_example\"; // string | \n\ntry {\n    $result = $apiInstance->crmPipelineDetailsPipelineIDGet($pipelineID);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->crmPipelineDetailsPipelineIDGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Generating SSO Token for Brevo Access with PHP API\nDESCRIPTION: Generates an SSO token to authenticate and access a sub-account through Brevo's account endpoint. The token can be used to access the sub-account via a specific URL.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/MasterAccountApi.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\MasterAccountApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$ssoTokenRequest = new \\Brevo\\Client\\Model\\SsoTokenRequest();\n\ntry {\n    $result = $apiInstance->corporateSubAccountSsoTokenPost($ssoTokenRequest);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling MasterAccountApi->corporateSubAccountSsoTokenPost: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Activity Logs with Brevo PHP API\nDESCRIPTION: Example of how to retrieve user activity logs with optional date filtering and pagination. Supports filtering by date range up to one month, with logs available for the past 12 months. Returns GetAccountActivity model containing activity details.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/AccountApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\AccountApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$startDate = \"startDate_example\"; // string | Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search.\n$endDate = \"endDate_example\"; // string | Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month.\n$limit = 10; // int | Number of documents per page\n$offset = 0; // int | Index of the first document in the page.\n\ntry {\n    $result = $apiInstance->getAccountActivity($startDate, $endDate, $limit, $offset);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling AccountApi->getAccountActivity: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Processes with Brevo PHP Client\nDESCRIPTION: Example of how to retrieve all processes for an account using the Brevo PHP client. Supports pagination through limit and offset parameters, and sorting options. Returns a GetProcesses model object containing a list of processes.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ProcessApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ProcessApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$limit = 10; // int | Number limitation for the result returned\n$offset = 0; // int | Beginning point in the list to retrieve from.\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n\ntry {\n    $result = $apiInstance->getProcesses($limit, $offset, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProcessApi->getProcesses: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting SMTP Transactional Logs in Brevo using PHP\nDESCRIPTION: Example PHP code for deleting SMTP transactional logs by their identifier from Brevo. The code configures the API client with authentication keys, creates a TransactionalEmailsApi instance, and calls the smtpLogIdentifierDelete method using either a MessageId or Email as the identifier.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$identifier = \"identifier_example\"; // string | MessageId or Email of the transactional log(s) to delete\n\ntry {\n    $apiInstance->smtpLogIdentifierDelete($identifier);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalEmailsApi->smtpLogIdentifierDelete: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Tasks with PHP using Brevo API\nDESCRIPTION: This snippet demonstrates how to retrieve all tasks using the Brevo API. It configures the API client, sets up request parameters, and makes a GET request to fetch task data.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TasksApi.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\TasksApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->crmTasksGet($filterType, $filterStatus, $filterDate, $filterAssignTo, $filterContacts, $filterDeals, $filterCompanies, $dateFrom, $dateTo, $offset, $limit, $sort, $sortBy);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TasksApi->crmTasksGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Inviting Users via Brevo PHP API\nDESCRIPTION: Example of how to invite a user to Brevo platform with specific feature permissions. Requires API key authentication and uses the UserApi class to send invitations. Features include email campaigns, SMS campaigns, contacts management, templates, workflows and more.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/UserApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\UserApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$sendInvitation = new \\Brevo\\Client\\Model\\Inviteuser(); // \\Brevo\\Client\\Model\\Inviteuser | Values to create an invitation\n\ntry {\n    $result = $apiInstance->inviteuser($sendInvitation);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UserApi->inviteuser: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sub-Accounts List in PHP using Brevo API\nDESCRIPTION: PHP implementation for getting a paginated list of sub-accounts using the Brevo MasterAccountApi. Uses API key authentication and accepts offset and limit parameters for pagination.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/MasterAccountApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\MasterAccountApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$offset = 56;\n$limit = 56;\n\ntry {\n    $result = $apiInstance->corporateSubAccountGet($offset, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling MasterAccountApi->corporateSubAccountGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Task with PHP using Brevo API\nDESCRIPTION: This snippet demonstrates how to retrieve a specific task by its ID using the Brevo API. It configures the API client and makes a GET request to fetch the task details.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TasksApi.md#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\TasksApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n$id = \"id_example\";\n\ntry {\n    $result = $apiInstance->crmTasksIdGet($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TasksApi->crmTasksIdGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetching WhatsApp API Account Information with Brevo PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve WhatsApp API account configuration details, including current API client initialization and authentication setup. The Brevo PHP SDK and Guzzle HTTP client must be available. No parameters are needed for this call; authentication can be provided with either API key or partner key. The output is a \\Brevo\\Client\\Model\\GetWhatsAppConfig instance with account metadata. Exception handling is included for error cases.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/WhatsAppCampaignsApi.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\WhatsAppCampaignsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getWhatsAppConfig();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling WhatsAppCampaignsApi->getWhatsAppConfig: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific List Details using Brevo ContactsApi in PHP\nDESCRIPTION: This PHP snippet demonstrates retrieving detailed information for a specific contact list using the Brevo SDK. After configuring API keys and initializing the ContactsApi, it calls the `getList` method with the target `listId`. Optional `startDate` and `endDate` parameters can be provided to aggregate campaign statistics for the list within that period. The result object is printed, and potential exceptions are caught.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$listId = 789; // int | Id of the list\n$startDate = \"startDate_example\"; // string | Mandatory if endDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to aggregate the sent email campaigns for a specific list id.Prefer to pass your timezone in date-time format for accurate result\n$endDate = \"endDate_example\"; // string | Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to aggregate the sent email campaigns for a specific list id.Prefer to pass your timezone in date-time format for accurate result\n\ntry {\n    $result = $apiInstance->getList($listId, $startDate, $endDate);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->getList: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Webhook using Brevo PHP Client\nDESCRIPTION: This snippet shows how to delete an existing webhook using the Brevo PHP client library. It sets up the API client with authentication and calls the deleteWebhook method with the webhook ID.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/WebhooksApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\WebhooksApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$webhookId = 789; // int | Id of the webhook\n\ntry {\n    $apiInstance->deleteWebhook($webhookId);\n} catch (Exception $e) {\n    echo 'Exception when calling WebhooksApi->deleteWebhook: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting All CRM Notes with PHP\nDESCRIPTION: Example of retrieving all CRM notes using the Brevo API client. Demonstrates authentication setup and note filtering options including entity type, date range, and pagination.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CRMApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\CRMApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$entity = \"entity_example\";\n$entityIds = \"entityIds_example\";\n$dateFrom = 56;\n$dateTo = 56;\n$offset = 789;\n$limit = 50;\n$sort = \"sort_example\";\n\ntry {\n    $result = $apiInstance->crmNotesGet($entity, $entityIds, $dateFrom, $dateTo, $offset, $limit, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CRMApi->crmNotesGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating a Task with PHP using Brevo API\nDESCRIPTION: This snippet shows how to update an existing task using the Brevo API. It sets up the API client and makes a PATCH request to modify the task with the given ID.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TasksApi.md#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\TasksApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n$id = \"id_example\";\n$body = new \\Brevo\\Client\\Model\\Body();\n\ntry {\n    $apiInstance->crmTasksIdPatch($id, $body);\n} catch (Exception $e) {\n    echo 'Exception when calling TasksApi->crmTasksIdPatch: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Admin User List with Brevo API in PHP\nDESCRIPTION: This example demonstrates how to fetch the list of all admin users in the account using the getCorporateInvitedUsersList method. No parameters are required; the code initializes the API client with a valid API key or partner key and prints the returned user list or any exceptions encountered. The endpoint returns a GetCorporateInvitedUsersList model.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/MasterAccountApi.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nrequire_once(__DIR__ . '/vendor/autoload.php');\\n\\n// Configure API key authorization: api-key\\n$config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\\n// Configure API key authorization: partner-key\\n$config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\\n\\n$apiInstance = new Brevo\\\\Client\\\\Api\\\\MasterAccountApi(\\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\\\ClientInterface`.\\n    // This is optional, `GuzzleHttp\\\\Client` will be used as default.\\n    new GuzzleHttp\\\\Client(),\\n    $config\\n);\\n\\ntry {\\n    $result = $apiInstance->getCorporateInvitedUsersList();\\n    print_r($result);\\n} catch (Exception $e) {\\n    echo 'Exception when calling MasterAccountApi->getCorporateInvitedUsersList: ', $e->getMessage(), PHP_EOL;\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks with Brevo PHP SDK\nDESCRIPTION: Example of creating a new task using the Brevo TasksApi. Shows how to configure API authentication and create a task with specified details.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TasksApi.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TasksApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$body = new \\Brevo\\Client\\Model\\Body8(); // \\Brevo\\Client\\Model\\Body8 | Task name.\n\ntry {\n    $result = $apiInstance->crmTasksPost($body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TasksApi->crmTasksPost: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Contact Attributes with Brevo API in PHP\nDESCRIPTION: Example code showing how to create a new contact attribute using the Brevo PHP client. Requires API key authorization and accepts attribute category, name and creation values as parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/AttributesApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\AttributesApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$attributeCategory = \"attributeCategory_example\";\n$attributeName = \"attributeName_example\";\n$createAttribute = new \\Brevo\\Client\\Model\\CreateAttribute();\n\ntry {\n    $apiInstance->createAttribute($attributeCategory, $attributeName, $createAttribute);\n} catch (Exception $e) {\n    echo 'Exception when calling AttributesApi->createAttribute: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating an Event using Brevo PHP Client\nDESCRIPTION: This snippet demonstrates how to use the createEvent method of the EventsApi class to track a contact's interaction. It includes setting up API key authorization and handling exceptions.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EventsApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EventsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$event = new \\Brevo\\Client\\Model\\Event(); // \\Brevo\\Client\\Model\\Event | \n\ntry {\n    $apiInstance->createEvent($event);\n} catch (Exception $e) {\n    echo 'Exception when calling EventsApi->createEvent: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Agent Message in Brevo API (PHP)\nDESCRIPTION: Example of updating a message sent by an agent. Only messages sent by agents can be edited. Requires API key authentication.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ConversationsApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\ConversationsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\"; // string | ID of the message\n$body = new \\Brevo\\Client\\Model\\Body11();\n\ntry {\n    $result = $apiInstance->conversationsMessagesIdPut($id, $body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ConversationsApi->conversationsMessagesIdPut: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting Single CRM Note with PHP Brevo Client\nDESCRIPTION: Example code demonstrating how to retrieve a specific CRM note by ID using the Brevo PHP client library.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/NotesApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\NotesApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\"; // string | Note ID to get\n\ntry {\n    $result = $apiInstance->crmNotesIdGet($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling NotesApi->crmNotesIdGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Brevo Reseller Child Account Status in PHP\nDESCRIPTION: This PHP snippet demonstrates updating the status information for a reseller's child account using the Brevo API and PHP SDK. It configures the necessary API keys, initializes the `ResellerApi` client, creates an `UpdateChildAccountStatus` model object containing the desired status updates, and invokes the `updateChildAccountStatus` method with the child identifier and the update object. Exception handling is included to display potential errors.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ResellerApi.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ResellerApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$childIdentifier = \"childIdentifier_example\"; // string | Either auth key or id of reseller's child\n$updateChildAccountStatus = new \\Brevo\\Client\\Model\\UpdateChildAccountStatus(); // \\Brevo\\Client\\Model\\UpdateChildAccountStatus | values to update in child account status\n\ntry {\n    $apiInstance->updateChildAccountStatus($childIdentifier, $updateChildAccountStatus);\n} catch (Exception $e) {\n    echo 'Exception when calling ResellerApi->updateChildAccountStatus: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Contact Folder using Brevo API in PHP\nDESCRIPTION: This snippet shows how to delete a contact folder (including all lists within it) using the Brevo PHP SDK. It requires configuring API key authorization, creating an instance of `ContactsApi`, and calling the `deleteFolder` method with the target folder's ID (`$folderId`). The example includes basic error handling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$folderId = 789; // int | Id of the folder\n\ntry {\n    $apiInstance->deleteFolder($folderId);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->deleteFolder: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting Email Campaign Report with Brevo PHP\nDESCRIPTION: Example of retrieving an email campaign report using the Brevo PHP client. Takes campaign ID and optional statistics filter as parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EmailCampaignsApi.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EmailCampaignsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$campaignId = 789;\n$statistics = \"statistics_example\";\n\ntry {\n    $result = $apiInstance->getEmailCampaign($campaignId, $statistics);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling EmailCampaignsApi->getEmailCampaign: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reseller Child Account in PHP\nDESCRIPTION: Example of how to create a new reseller child account using the Brevo PHP SDK. It demonstrates configuring API keys, instantiating the API client, and making the API call to create the child account.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ResellerApi.md#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\ResellerApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$resellerChild = new \\Brevo\\Client\\Model\\CreateChild();\n\ntry {\n    $result = $apiInstance->createResellerChild($resellerChild);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ResellerApi->createResellerChild: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Domain with Brevo API in PHP\nDESCRIPTION: Example code showing how to delete a domain using the Brevo API with PHP. The code sets up API key authorization, instantiates the DomainsApi, and calls the deleteDomain method with a domain name parameter.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/DomainsApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\DomainsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$domainName = \"domainName_example\"; // string | Domain name\n\ntry {\n    $apiInstance->deleteDomain($domainName);\n} catch (Exception $e) {\n    echo 'Exception when calling DomainsApi->deleteDomain: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Tasks with Brevo PHP SDK\nDESCRIPTION: Example of retrieving tasks from Brevo CRM with optional filtering and pagination parameters. Includes API key setup and error handling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CRMApi.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\CRMApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->crmTasksGet($filterType, $filterStatus, $filterDate, $filterAssignTo, $filterContacts, $filterDeals, $filterCompanies, $dateFrom, $dateTo, $offset, $limit, $sort, $sortBy);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CRMApi->crmTasksGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting All Domains with Brevo API in PHP\nDESCRIPTION: Example code showing how to retrieve a list of all domains using the Brevo API with PHP. The code sets up API key authorization, instantiates the DomainsApi, and calls the getDomains method.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/DomainsApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\DomainsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getDomains();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DomainsApi->getDomains: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Reseller Child Account in PHP\nDESCRIPTION: Example of how to delete a reseller child account using the Brevo PHP SDK. It demonstrates configuring API keys, creating the API client instance, and calling the delete child account endpoint.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ResellerApi.md#2025-04-23_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\ResellerApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$childIdentifier = \"childIdentifier_example\";\n\ntry {\n    $apiInstance->deleteResellerChild($childIdentifier);\n} catch (Exception $e) {\n    echo 'Exception when calling ResellerApi->deleteResellerChild: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Coupon Collection using Brevo PHP Client\nDESCRIPTION: This snippet demonstrates how to create a coupon collection using the Brevo PHP client. It initializes the API client, sets up authorization, and makes a POST request to create a new coupon collection.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CouponsApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\CouponsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$createCouponCollection = new \\Brevo\\Client\\Model\\CreateCouponCollection(); // \\Brevo\\Client\\Model\\CreateCouponCollection | Values to create a coupon collection\n\ntry {\n    $result = $apiInstance->createCouponCollection($createCouponCollection);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CouponsApi->createCouponCollection: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving an SMS Campaign with Brevo PHP Client\nDESCRIPTION: This snippet demonstrates how to retrieve details of a specific SMS campaign using the Brevo PHP client library. It configures API keys, initializes the SMSCampaignsApi instance, and calls the getSmsCampaign method with the campaign ID.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/SMSCampaignsApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\SMSCampaignsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$campaignId = 789; // int | id of the SMS campaign\n\ntry {\n    $result = $apiInstance->getSmsCampaign($campaignId);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SMSCampaignsApi->getSmsCampaign: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving SMS Campaigns using Brevo PHP Client\nDESCRIPTION: This snippet demonstrates how to retrieve a list of SMS campaigns using the Brevo PHP client library. It includes setting up API key authorization, instantiating the SMSCampaignsApi client, defining filtering parameters (status, start date, end date, limit, offset, sort), and calling the getSmsCampaigns method within a try-catch block to handle potential exceptions. The result, containing a list of campaigns matching the criteria, is printed.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/SMSCampaignsApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\SMSCampaignsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$status = \"status_example\"; // string | Status of campaign.\n$startDate = \"startDate_example\"; // string | Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )\n$endDate = \"endDate_example\"; // string | Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )\n$limit = 500; // int | Number limitation for the result returned\n$offset = 0; // int | Beginning point in the list to retrieve from.\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n\ntry {\n    $result = $apiInstance->getSmsCampaigns($status, $startDate, $endDate, $limit, $offset, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SMSCampaignsApi->getSmsCampaigns: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Validating Domain Configuration with Brevo API in PHP\nDESCRIPTION: Example code demonstrating how to validate domain configuration using the Brevo API with PHP. The code configures API authorization, instantiates the DomainsApi, and calls the getDomainConfiguration method with a domain name parameter.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/DomainsApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\DomainsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$domainName = \"domainName_example\"; // string | Domain name\n\ntry {\n    $result = $apiInstance->getDomainConfiguration($domainName);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DomainsApi->getDomainConfiguration: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetching All External Feeds in PHP using Brevo API\nDESCRIPTION: This snippet demonstrates how to retrieve all external feeds using the Brevo PHP client. It initializes the API client, sets up authentication, and makes a GET request to fetch the list of external feeds with optional filtering and pagination parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ExternalFeedsApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ExternalFeedsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$search = \"search_example\"; // string | Can be used to filter records by search keyword on feed name\n$startDate = new \\DateTime(\"2013-10-20\"); // \\DateTime | Mandatory if `endDate` is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Can be maximum 30 days older than current date.\n$endDate = new \\DateTime(\"2013-10-20\"); // \\DateTime | Mandatory if `startDate` is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed.\n$authType = \"authType_example\"; // string | Filter the records by `authType` of the feed.\n$limit = 50; // int | Number of documents returned per page.\n$offset = 0; // int | Index of the first document on the page.\n\ntry {\n    $result = $apiInstance->getAllExternalFeeds($search, $startDate, $endDate, $sort, $authType, $limit, $offset);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ExternalFeedsApi->getAllExternalFeeds: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Categories in PHP using Brevo SDK\nDESCRIPTION: This snippet shows how to retrieve categories using the Brevo PHP SDK. It sets up API key authorization, creates an EcommerceApi instance, and calls the getCategories method with optional filtering parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EcommerceApi.md#2025-04-23_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EcommerceApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$limit = 50; // int | Number of documents per page\n$offset = 0; // int | Index of the first document in the page\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n$ids = array(\"ids_example\"); // string[] | Filter by category ids\n$name = \"name_example\"; // string | Filter by category name\n$modifiedSince = \"modifiedSince_example\"; // string | Filter (urlencoded) the categories modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**\n$createdSince = \"createdSince_example\"; // string | Filter (urlencoded) the categories created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**\n\ntry {\n    $result = $apiInstance->getCategories($limit, $offset, $sort, $ids, $name, $modifiedSince, $createdSince);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling EcommerceApi->getCategories: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving External Feed by UUID using Brevo PHP API\nDESCRIPTION: Demonstrates how to fetch an external feed using its UUID. Includes API key configuration, client initialization, and error handling. Requires Brevo PHP client library and GuzzleHttp client.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ExternalFeedsApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ExternalFeedsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$uuid = \"uuid_example\"; // string | UUID of the feed to fetch\n\ntry {\n    $result = $apiInstance->getExternalFeedByUUID($uuid);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ExternalFeedsApi->getExternalFeedByUUID: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dedicated IPs for a Sender with Brevo SendersApi in PHP\nDESCRIPTION: Example of retrieving all dedicated IPs for a specific sender using the Brevo PHP SDK. This snippet shows how to configure API authorization, instantiate the SendersApi client, and call the getIpsFromSender method with a sender ID.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/SendersApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\SendersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$senderId = 789; // int | Id of the sender\n\ntry {\n    $result = $apiInstance->getIpsFromSender($senderId);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SendersApi->getIpsFromSender: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Listing Email Campaigns with Brevo PHP\nDESCRIPTION: Example of retrieving all email campaigns with optional filtering and pagination parameters using the Brevo PHP client.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EmailCampaignsApi.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EmailCampaignsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$type = \"type_example\";\n$status = \"status_example\";\n$statistics = \"statistics_example\";\n$startDate = \"startDate_example\";\n$endDate = \"endDate_example\";\n$limit = 50;\n$offset = 0;\n$sort = \"desc\";\n$excludeHtmlContent = true;\n\ntry {\n    $result = $apiInstance->getEmailCampaigns($type, $status, $statistics, $startDate, $endDate, $limit, $offset, $sort, $excludeHtmlContent);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling EmailCampaignsApi->getEmailCampaigns: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Querying Domains with Brevo SDK - PHP\nDESCRIPTION: This PHP code demonstrates how to use the Brevo PHP SDK to query the list of domains configured for your account via the DomainsApi. Dependencies include the Brevo SDK (autoloaded via Composer) and GuzzleHttp for HTTP requests. The script requires API key or partner-key authentication, with optional prefix configuration (e.g., Bearer). No additional parameters are required; the resulting object is of type \\Brevo\\Client\\Model\\GetDomainsList. Exceptions are handled and printed to the standard output.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/DomainsApi.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nrequire_once(__DIR__ . '/vendor/autoload.php');\\n\\n// Configure API key authorization: api-key\\n$config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\\n// Configure API key authorization: partner-key\\n$config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\\n\\n$apiInstance = new Brevo\\\\Client\\\\Api\\\\DomainsApi(\\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\\\ClientInterface`.\\n    // This is optional, `GuzzleHttp\\\\Client` will be used as default.\\n    new GuzzleHttp\\\\Client(),\\n    $config\\n);\\n\\ntry {\\n    $result = $apiInstance->getDomains();\\n    print_r($result);\\n} catch (Exception $e) {\\n    echo 'Exception when calling DomainsApi->getDomains: ', $e->getMessage(), PHP_EOL;\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining CreateSmtpTemplate Model Properties (Markdown)\nDESCRIPTION: Markdown table detailing the properties of the `CreateSmtpTemplate` model for the Brevo PHP library. It lists each property's name, data type (including links to related models like `CreateSmtpTemplateSender`), a description of its purpose, and whether it's optional. Key properties include sender details, template name, HTML content/URL, subject, and activation status.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateSmtpTemplate.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**tag** | **string** | Tag of the template | [optional] \n**sender** | [**\\Brevo\\Client\\Model\\CreateSmtpTemplateSender**](CreateSmtpTemplateSender.md) |  | \n**templateName** | **string** | Name of the template | \n**htmlContent** | **string** | Body of the message (HTML version). The field must have more than 10 characters. REQUIRED if htmlUrl is empty | [optional] \n**htmlUrl** | **string** | Url which contents the body of the email message. REQUIRED if htmlContent is empty | [optional] \n**subject** | **string** | Subject of the template | \n**replyTo** | **string** | Email on which campaign recipients will be able to reply to | [optional] \n**toField** | **string** | To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your Brevo account. If input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization | [optional] \n**attachmentUrl** | **string** | Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps | [optional] \n**isActive** | **bool** | Status of template. isActive = true means template is active and isActive = false means template is inactive | [optional] \n```\n\n----------------------------------------\n\nTITLE: Managing Order Status with Brevo eCommerce API in PHP\nDESCRIPTION: Example of managing the transactional status of an order using the Brevo API. Shows API key setup and error handling implementation. Requires Brevo client library and GuzzleHttp client.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EcommerceApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EcommerceApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$order = new \\Brevo\\Client\\Model\\Order();\n\ntry {\n    $apiInstance->createOrder($order);\n} catch (Exception $e) {\n    echo 'Exception when calling EcommerceApi->createOrder: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting WhatsApp Campaign Details with PHP Brevo Client\nDESCRIPTION: Example code showing how to retrieve details of a WhatsApp campaign using the Brevo PHP client. Requires API key authentication and campaign ID as input parameter.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/WhatsAppCampaignsApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\WhatsAppCampaignsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$campaignId = 789;\n\ntry {\n    $result = $apiInstance->getWhatsAppCampaign($campaignId);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling WhatsAppCampaignsApi->getWhatsAppCampaign: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Toggling Sub-Account Applications in PHP using Brevo API\nDESCRIPTION: PHP implementation for enabling/disabling applications for a specific sub-account. Requires sub-account ID and a list of applications to toggle.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/MasterAccountApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\MasterAccountApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 789;\n$toggleApplications = new \\Brevo\\Client\\Model\\SubAccountAppsToggleRequest();\n\ntry {\n    $apiInstance->corporateSubAccountIdApplicationsTogglePut($id, $toggleApplications);\n} catch (Exception $e) {\n    echo 'Exception when calling MasterAccountApi->corporateSubAccountIdApplicationsTogglePut: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting a File from Brevo CRM in PHP\nDESCRIPTION: Example showing how to delete a specific file from the Brevo CRM system. Demonstrates API key configuration, creating the API client instance, and executing the delete operation.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/FilesApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\FilesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\"; // string | File id to delete.\n\ntry {\n    $apiInstance->crmFilesIdDelete($id);\n} catch (Exception $e) {\n    echo 'Exception when calling FilesApi->crmFilesIdDelete: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating CRM Notes with PHP\nDESCRIPTION: Example of updating an existing CRM note using the Brevo API client. Shows authentication setup and how to send update data.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CRMApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\CRMApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\";\n$body = new \\Brevo\\Client\\Model\\NoteData();\n\ntry {\n    $apiInstance->crmNotesIdPatch($id, $body);\n} catch (Exception $e) {\n    echo 'Exception when calling CRMApi->crmNotesIdPatch: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating List using Brevo PHP API\nDESCRIPTION: Example of creating a contact list using Brevo PHP API client with authentication and error handling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$createList = new \\Brevo\\Client\\Model\\CreateList();\n\ntry {\n    $result = $apiInstance->createList($createList);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->createList: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Company with Brevo PHP Client\nDESCRIPTION: This snippet demonstrates how to delete a company using the Brevo PHP client library. It requires the company ID as a parameter.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CompaniesApi.md#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\CompaniesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\"; // string | \n\ntry {\n    $apiInstance->companiesIdDelete($id);\n} catch (Exception $e) {\n    echo 'Exception when calling CompaniesApi->companiesIdDelete: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: CreateSmsCampaign Model Properties\nDESCRIPTION: Property definitions for the CreateSmsCampaign model including name, sender, content, recipients, scheduling, and messaging format options. Each property includes its type, description, and validation requirements.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateSmsCampaign.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**name** | **string** | Name of the campaign\n**sender** | **string** | Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters**\n**content** | **string** | Content of the message. The maximum characters used per SMS is 160, if used more than that, it will be counted as more than one SMS\n**recipients** | [**\\Brevo\\Client\\Model\\CreateSmsCampaignRecipients**](CreateSmsCampaignRecipients.md) |  | [optional]\n**scheduledAt** | **string** | UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. | [optional]\n**unicodeEnabled** | **bool** | Format of the message. It indicates whether the content should be treated as unicode or not. | [optional] [default to false]\n**organisationPrefix** | **string** | A recognizable prefix will ensure your audience knows who you are. Recommended by U.S. carriers. This will be added as your Brand Name before the message content. **Prefer verifying maximum length of 160 characters including this prefix in message content to avoid multiple sending of same sms.** | [optional]\n**unsubscribeInstruction** | **string** | Instructions to unsubscribe from future communications. Recommended by U.S. carriers. Must include **STOP** keyword. This will be added as instructions after the end of message content. **Prefer verifying maximum length of 160 characters including this instructions in message content to avoid multiple sending of same sms.** | [optional]\n```\n\n----------------------------------------\n\nTITLE: Requesting SMS Campaign Recipient Export using Brevo PHP Client\nDESCRIPTION: This snippet shows how to request an export of recipients for a specific SMS campaign using the Brevo PHP client. It involves configuring API keys, creating an SMSCampaignsApi instance, specifying the campaign ID, and providing recipient export parameters via a RequestSmsRecipientExport object. The requestSmsRecipientExport method is called, returning a process ID for the background export task. Potential exceptions during the API call are caught and displayed.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/SMSCampaignsApi.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\SMSCampaignsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$campaignId = 789; // int | id of the campaign\n$recipientExport = new \\Brevo\\Client\\Model\\RequestSmsRecipientExport(); // \\Brevo\\Client\\Model\\RequestSmsRecipientExport | Values to send for a recipient export request\n\ntry {\n    $result = $apiInstance->requestSmsRecipientExport($campaignId, $recipientExport);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SMSCampaignsApi->requestSmsRecipientExport: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Product Details with Brevo EcommerceApi in PHP\nDESCRIPTION: This PHP example illustrates retrieving detailed information for a specific ecommerce product by its ID using the `getProductInfo` method from the `Brevo\\Client\\Api\\EcommerceApi`. The process includes configuring the client with API keys (api-key, partner-key), instantiating the `EcommerceApi`, and calling the method with the product ID (`$id`). The script prints the `\\Brevo\\Client\\Model\\GetProductDetails` result or catches and displays any exceptions. It depends on the Brevo PHP SDK (`vendor/autoload.php`) and GuzzleHttp.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EcommerceApi.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EcommerceApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\"; // string | Product ID\n\ntry {\n    $result = $apiInstance->getProductInfo($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling EcommerceApi->getProductInfo: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Listing Groups on Admin Account with Brevo API in PHP\nDESCRIPTION: This snippet illustrates how to retrieve all groups created on the admin account by calling getSubAccountGroups. It uses API key or partner key authentication and does not require any request parameters. The method returns a list of group models (InlineResponse200[]) and prints them or handles exceptions during the request.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/MasterAccountApi.md#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nrequire_once(__DIR__ . '/vendor/autoload.php');\\n\\n// Configure API key authorization: api-key\\n$config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\\n// Configure API key authorization: partner-key\\n$config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\\\Client\\\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\\n\\n$apiInstance = new Brevo\\\\Client\\\\Api\\\\MasterAccountApi(\\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\\\ClientInterface`.\\n    // This is optional, `GuzzleHttp\\\\Client` will be used as default.\\n    new GuzzleHttp\\\\Client(),\\n    $config\\n);\\n\\ntry {\\n    $result = $apiInstance->getSubAccountGroups();\\n    print_r($result);\\n} catch (Exception $e) {\\n    echo 'Exception when calling MasterAccountApi->getSubAccountGroups: ', $e->getMessage(), PHP_EOL;\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Domain for Child Account in Brevo API using PHP\nDESCRIPTION: This snippet demonstrates how to create a domain for a child account using the Brevo API. It requires the child identifier and domain details.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ResellerApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ResellerApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$childIdentifier = \"childIdentifier_example\"; // string | Either auth key or id of reseller's child\n$addChildDomain = new \\Brevo\\Client\\Model\\AddChildDomain(); // \\Brevo\\Client\\Model\\AddChildDomain | Sender domain to add for a specific child account. This will not be displayed to the parent account.\n\ntry {\n    $apiInstance->createChildDomain($childIdentifier, $addChildDomain);\n} catch (Exception $e) {\n    echo 'Exception when calling ResellerApi->createChildDomain: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Webhook Details using Brevo PHP Client\nDESCRIPTION: This snippet shows how to retrieve details of a specific webhook using the Brevo PHP client library. It sets up the API client with authentication and calls the getWebhook method with the webhook ID.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/WebhooksApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\WebhooksApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$webhookId = 789; // int | Id of the webhook\n\ntry {\n    $result = $apiInstance->getWebhook($webhookId);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling WebhooksApi->getWebhook: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Company Attributes with Brevo PHP Client\nDESCRIPTION: This snippet demonstrates how to retrieve company attributes using the Brevo PHP client library. It configures the API key authorization and makes a GET request to the /companies/attributes endpoint.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CompaniesApi.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\CompaniesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->companiesAttributesGet();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CompaniesApi->companiesAttributesGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Contact Model Properties Definition - Markdown\nDESCRIPTION: Defines the properties of the Contact model including data types and descriptions. Properties include virtual tasks, email, assignments, IDs, CRM lists, attributes, and timestamps.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/Contact.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nvirtualNextTask | object | Next incomplete task of contact | [optional] \nemail | string | Contact email | \nassignToId | string | User id to whom contact is assigned | [optional] \ncontactsId | int | Contact id | [optional] \ncrmLists | object | CRM lists in which contact is added | \nattributes | object | Contact attributes e.g firstname / lastname / SMS etc. | [optional] \ncreatedAt | \\DateTime | Contact created date/time | [optional] \nupdatedAt | \\DateTime | Contact updated date/time | [optional]\n```\n\n----------------------------------------\n\nTITLE: Creating Coupons for a Collection using Brevo PHP Client\nDESCRIPTION: This snippet shows how to create coupons for an existing coupon collection using the Brevo PHP client. It sets up the API client with authorization and sends a POST request to create coupons.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CouponsApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\CouponsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$createCoupons = new \\Brevo\\Client\\Model\\CreateCoupons(); // \\Brevo\\Client\\Model\\CreateCoupons | Values to create coupons\n\ntry {\n    $apiInstance->createCoupons($createCoupons);\n} catch (Exception $e) {\n    echo 'Exception when calling CouponsApi->createCoupons: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Inviting Admin Users with Brevo PHP API Client\nDESCRIPTION: This snippet demonstrates how to use the Brevo PHP API client to invite a new administrator user. It configures API keys for authorization, initializes the MasterAccountApi client, sends an invitation, and handles potential exceptions.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/MasterAccountApi.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\MasterAccountApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$sendInvitation = new \\Brevo\\Client\\Model\\InviteAdminUser(); // \\Brevo\\Client\\Model\\InviteAdminUser | Payload to send an invitation\n\ntry {\n    $result = $apiInstance->inviteAdminUser($sendInvitation);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling MasterAccountApi->inviteAdminUser: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting Agent Message in Brevo API (PHP)\nDESCRIPTION: Example of deleting a message sent by an agent. Only messages sent by agents can be deleted. Requires API key authentication.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ConversationsApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\ConversationsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\"; // string | ID of the message\n\ntry {\n    $apiInstance->conversationsMessagesIdDelete($id);\n} catch (Exception $e) {\n    echo 'Exception when calling ConversationsApi->conversationsMessagesIdDelete: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting CRM Notes with PHP Brevo Client\nDESCRIPTION: Example code showing how to delete a specific CRM note by ID using the Brevo PHP client library.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/NotesApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\NotesApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\"; // string | Note ID to delete\n\ntry {\n    $apiInstance->crmNotesIdDelete($id);\n} catch (Exception $e) {\n    echo 'Exception when calling NotesApi->crmNotesIdDelete: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Sub-Account Plan with Brevo PHP API\nDESCRIPTION: Updates a sub-account plan by making a PUT request to the Brevo API. Requires API key authentication and handles sub-account organization ID and plan details as parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/MasterAccountApi.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\MasterAccountApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 789;\n$updatePlanDetails = new \\Brevo\\Client\\Model\\SubAccountUpdatePlanRequest();\n\ntry {\n    $apiInstance->corporateSubAccountIdPlanPut($id, $updatePlanDetails);\n} catch (Exception $e) {\n    echo 'Exception when calling MasterAccountApi->corporateSubAccountIdPlanPut: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Create New Sub-account Group in Brevo using PHP\nDESCRIPTION: Example code showing how to create a new group of sub-accounts using the Brevo API. Requires API key authentication and accepts group details in the request body.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/MasterAccountApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\MasterAccountApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$body = new \\Brevo\\Client\\Model\\Body();\n\ntry {\n    $result = $apiInstance->corporateGroupPost($body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling MasterAccountApi->corporateGroupPost: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Invited Users List in Brevo API (PHP)\nDESCRIPTION: This snippet shows how to get the list of all invited users using the Brevo API. It includes setting up the API client and handling the API response.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/UserApi.md#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\UserApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getInvitedUsersList();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UserApi->getInvitedUsersList: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Company Properties Schema Definition in Markdown\nDESCRIPTION: Defines the data structure for Company objects with properties including unique ID, attributes, linked contacts, and deals. Used for documenting the Company model in the Brevo PHP SDK.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/Company.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **string** | Unique company id | [optional] \n**attributes** | **object** | Company attributes with values | [optional] \n**linkedContactsIds** | **int[]** | Contact ids for contacts linked to this company | [optional] \n**linkedDealsIds** | **string[]** | Deals ids for companies linked to this company | [optional]\n```\n\n----------------------------------------\n\nTITLE: Get Master Account Details in Brevo using PHP\nDESCRIPTION: Example code demonstrating how to retrieve details of a master account using the Brevo API. Requires API key authentication and returns account information.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/MasterAccountApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\MasterAccountApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->corporateMasterAccountGet();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling MasterAccountApi->corporateMasterAccountGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting an External Feed in PHP using Brevo API\nDESCRIPTION: This snippet shows how to delete an external feed using the Brevo PHP client. It sets up the API client with authentication and makes a DELETE request to remove a feed specified by its UUID.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ExternalFeedsApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ExternalFeedsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$uuid = \"uuid_example\"; // string | UUID of the feed to delete\n\ntry {\n    $apiInstance->deleteExternalFeed($uuid);\n} catch (Exception $e) {\n    echo 'Exception when calling ExternalFeedsApi->deleteExternalFeed: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining CreateAttribute Properties in PHP\nDESCRIPTION: This code snippet defines the properties of the CreateAttribute model. It includes various attribute types such as string, boolean, array, and custom object types. Each property is documented with its type, description, and optional status.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateAttribute.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass CreateAttribute {\n    /** @var string $value Value of the attribute. Use only if the attribute's category is 'calculated' or 'global' */\n    public $value;\n    \n    /** @var bool $isRecurring Type of the attribute. Use only if the attribute's category is 'calculated' or 'global' */\n    public $isRecurring;\n    \n    /** @var \\Brevo\\Client\\Model\\CreateAttributeEnumeration[] $enumeration List of values and labels that the attribute can take. Use only if the attribute's category is \"category\". */\n    public $enumeration;\n    \n    /** @var string[] $multiCategoryOptions List of options for multiple-choice attribute. Use only if the attribute's category is \"normal\" and attribute's type is \"multiple-choice\". */\n    public $multiCategoryOptions;\n    \n    /** @var string $type Type of the attribute. Use only if the attribute's category is 'normal', 'category' or 'transactional' */\n    public $type;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Folder with Brevo PHP Client\nDESCRIPTION: Example of how to delete a contact folder using the Brevo PHP client library. It configures the API client, instantiates the FoldersApi, and calls the deleteFolder method with a folder ID.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/FoldersApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\FoldersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$folderId = 789; // int | Id of the folder\n\ntry {\n    $apiInstance->deleteFolder($folderId);\n} catch (Exception $e) {\n    echo 'Exception when calling FoldersApi->deleteFolder: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating a List with Brevo PHP SDK\nDESCRIPTION: Example of how to update a list using the Brevo PHP SDK. This code initializes the ListsApi with proper API key authentication and calls the updateList method with the list ID and update values.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ListsApi.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ListsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$listId = 789; // int | Id of the list\n$updateList = new \\Brevo\\Client\\Model\\UpdateList(); // \\Brevo\\Client\\Model\\UpdateList | Values to update a list\n\ntry {\n    $apiInstance->updateList($listId, $updateList);\n} catch (Exception $e) {\n    echo 'Exception when calling ListsApi->updateList: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting CRM Notes with PHP\nDESCRIPTION: Example of deleting a CRM note by ID using the Brevo API client. Shows authentication setup and error handling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CRMApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\CRMApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\";\n\ntry {\n    $apiInstance->crmNotesIdDelete($id);\n} catch (Exception $e) {\n    echo 'Exception when calling CRMApi->crmNotesIdDelete: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: CreateSenderIps Properties Schema\nDESCRIPTION: Defines three main properties for sender IP configuration: ip (dedicated IP address), domain (IP domain), and weight (optional balancing weight). The weight property must sum to 100 across all IPs when used.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateSenderIps.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass CreateSenderIps {\n    /**\n     * @var string $ip Dedicated IP available in your account\n     */\n    public $ip;\n\n    /**\n     * @var string $domain Domain of the IP\n     */\n    public $domain;\n\n    /**\n     * @var int $weight Weight to apply to the IP. Sum of all IP weights must be 100.\n     */\n    public $weight;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Segments with Brevo PHP Client\nDESCRIPTION: Example code for retrieving all segments using the Brevo PHP client. This snippet demonstrates how to initialize the ContactsApi client with API keys and make a request to get segments with pagination parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$limit = 10; // int | Number of documents per page\n$offset = 0; // int | Index of the first document of the page\n$sort = \"desc\"; // string | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed\n\ntry {\n    $result = $apiInstance->getSegments($limit, $offset, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->getSegments: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Exporting Webhook History using Brevo PHP Client\nDESCRIPTION: This snippet demonstrates how to export the history of webhooks using the Brevo PHP client library. It initializes the API client, sets up authentication, and calls the exportWebhooksHistory method with the required parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/WebhooksApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\WebhooksApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$exportWebhookHistory = new \\Brevo\\Client\\Model\\ExportWebhooksHistory(); // \\Brevo\\Client\\Model\\ExportWebhooksHistory | Values to submit for webhooks history\n\ntry {\n    $result = $apiInstance->exportWebhooksHistory($exportWebhookHistory);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling WebhooksApi->exportWebhooksHistory: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Running PHP Unit Tests for Brevo SDK\nDESCRIPTION: Commands to install dependencies and run unit tests for the Brevo PHP SDK.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n./vendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: CreateContact Model Properties - PHP\nDESCRIPTION: Property definitions for the CreateContact model class including email, external ID, custom attributes, blacklist settings, list IDs, and update configurations. Each property is typed and documented with notes about usage requirements and constraints.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateContact.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @var string $email Email address of the user (optional if SMS provided)\n */\npublic $email;\n\n/**\n * @var string $extId Custom ID for contact creation\n */\npublic $extId;\n\n/**\n * @var object $attributes Custom contact attributes (must be uppercase)\n */\npublic $attributes;\n\n/**\n * @var bool $emailBlacklisted Email blacklist status\n */\npublic $emailBlacklisted;\n\n/**\n * @var bool $smsBlacklisted SMS blacklist status\n */\npublic $smsBlacklisted;\n\n/**\n * @var int[] $listIds List IDs to add contact to\n */\npublic $listIds;\n\n/**\n * @var bool $updateEnabled Enable contact update in same request\n */\npublic $updateEnabled = false;\n\n/**\n * @var string[] $smtpBlacklistSender Forbidden email senders for contact\n */\npublic $smtpBlacklistSender;\n```\n\n----------------------------------------\n\nTITLE: Get All Pipelines Example in PHP\nDESCRIPTION: Example of retrieving all pipelines using the Brevo PHP client.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/DealsApi.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\DealsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->crmPipelineDetailsAllGet();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->crmPipelineDetailsAllGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Get Contact Details Example - PHP\nDESCRIPTION: Example showing how to get a contact's details by identifier (email, ID, SMS, or EXT_ID) using the Brevo PHP client library. Includes optional date range parameters for campaign statistics.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$identifier = \"identifier_example\"; // string\n$identifierType = new \\stdClass; \n$startDate = \"startDate_example\";\n$endDate = \"endDate_example\";\n\ntry {\n    $result = $apiInstance->getContactInfo($identifier, $identifierType, $startDate, $endDate);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->getContactInfo: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting Single CRM Note with PHP\nDESCRIPTION: Example of retrieving a single CRM note by ID using the Brevo API client. Demonstrates authentication and handling of individual note retrieval.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CRMApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\CRMApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\";\n\ntry {\n    $result = $apiInstance->crmNotesIdGet($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CRMApi->crmNotesIdGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: CreateSmsCampaignRecipients Properties Table\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the CreateSmsCampaignRecipients model. Includes listIds for targeting campaign recipients and exclusionListIds for excluding specific lists.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateSmsCampaignRecipients.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nlistIds | **int[]** | Lists Ids to send the campaign to. REQUIRED if scheduledAt is not empty | \nexclusionListIds | **int[]** | List ids which have to be excluded from a campaign | [optional]\n```\n\n----------------------------------------\n\nTITLE: Adding Credits to Child Account in Brevo API using PHP\nDESCRIPTION: This snippet demonstrates how to add email and/or SMS credits to a specific child account using the Brevo API. It requires the child identifier and credit details.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ResellerApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ResellerApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$childIdentifier = \"childIdentifier_example\"; // string | Either auth key or id of reseller's child\n$addCredits = new \\Brevo\\Client\\Model\\AddCredits(); // \\Brevo\\Client\\Model\\AddCredits | Values to post to add credit to a specific child account\n\ntry {\n    $result = $apiInstance->addCredits($childIdentifier, $addCredits);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ResellerApi->addCredits: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: CreateSmtpEmail Properties Table in Markdown\nDESCRIPTION: Markdown table documenting the properties of the CreateSmtpEmail model, including message ID fields for tracking transactional emails.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateSmtpEmail.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**messageId** | **string** | Message ID of the transactional email sent | [optional] \n**messageIds** | **string[]** |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: CreateDoiContact Model Properties Table\nDESCRIPTION: Defines the required and optional properties for creating a double opt-in contact, including their types and descriptions. Key properties include email address, custom attributes, list IDs for inclusion/exclusion, DOI template ID, and redirection URL.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateDoiContact.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **string** | Email address where the confirmation email will be sent. This email address will be the identifier for all other contact attributes. | \n**attributes** | **object** | Pass the set of attributes and their values. These attributes must be present in your Brevo account. For eg. {'FNAME':'Elly', 'LNAME':'Roger'} | [optional] \n**includeListIds** | **int[]** | Lists under user account where contact should be added | \n**excludeListIds** | **int[]** | Lists under user account where contact should not be added | [optional] \n**templateId** | **int** | Id of the Double opt-in (DOI) template | \n**redirectionUrl** | **string** | URL of the web page that user will be redirected to after clicking on the double opt in URL. When editing your DOI template you can reference this URL by using the tag {{ params.DOIurl }}. |\n```\n\n----------------------------------------\n\nTITLE: Deleting Email Templates with Brevo PHP SDK\nDESCRIPTION: Example code demonstrating how to delete an inactive email template using the Brevo PHP SDK. Requires API key authorization.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TransactionalEmailsApi.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TransactionalEmailsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$templateId = 789;\n\ntry {\n    $apiInstance->deleteSmtpTemplate($templateId);\n} catch (Exception $e) {\n    echo 'Exception when calling TransactionalEmailsApi->deleteSmtpTemplate: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Get Deal By ID Example - PHP\nDESCRIPTION: Example code demonstrating how to retrieve a specific deal by its ID using the Brevo API. Returns detailed deal information.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/DealsApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\DealsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\";\n\ntry {\n    $result = $apiInstance->crmDealsIdGet($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->crmDealsIdGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting Contact Attributes with Brevo API in PHP\nDESCRIPTION: Example code demonstrating how to delete an existing contact attribute using the Brevo PHP client. Requires API key authorization and takes attribute category and name as parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/AttributesApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\AttributesApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$attributeCategory = \"attributeCategory_example\";\n$attributeName = \"attributeName_example\";\n\ntry {\n    $apiInstance->deleteAttribute($attributeCategory, $attributeName);\n} catch (Exception $e) {\n    echo 'Exception when calling AttributesApi->deleteAttribute: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining Pipeline Properties for Brevo Client Model in PHP\nDESCRIPTION: This snippet describes the properties available on the Pipeline data model in the Brevo PHP SDK, listing each field's name, type, and usage notes. It provides documentation notes to facilitate API client code generation and ease of integration. No explicit code is shown, but the structure mirrors PHPDoc comments used to define model properties for an object representing a Pipeline, typically required for interacting with CRM pipeline endpoints. There are no additional dependencies beyond the Brevo PHP client library. All fields are optional and designed for flexibility in input/output modeling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/Pipeline.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# Pipeline\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**pipeline** | **string** | Pipeline id | [optional] \n**pipelineName** | **string** | Pipeline Name | [optional] \n**stages** | [**\\Brevo\\Client\\Model\\PipelineStage[]**](PipelineStage.md) | List of stages | [optional] \n```\n\n----------------------------------------\n\nTITLE: Sending WhatsApp Template Approval Request - PHP Brevo SDK\nDESCRIPTION: Example of sending a WhatsApp template for approval using the Brevo PHP SDK. Configures API keys, initializes the WhatsAppCampaignsApi client, and sends the approval request for a specified template ID with error handling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/WhatsAppCampaignsApi.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\WhatsAppCampaignsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$templateId = 789; // int | id of the campaign\n\ntry {\n    $apiInstance->sendWhatsAppTemplateApproval($templateId);\n} catch (Exception $e) {\n    echo 'Exception when calling WhatsAppCampaignsApi->sendWhatsAppTemplateApproval: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Get Child Account Details in PHP\nDESCRIPTION: Example of retrieving a child account's details using the Brevo PHP client. Requires API key authentication and uses the ResellerApi class.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ResellerApi.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ResellerApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$childIdentifier = \"childIdentifier_example\";\n\ntry {\n    $result = $apiInstance->getChildInfo($childIdentifier);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ResellerApi->getChildInfo: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Body4 Model Properties Documentation\nDESCRIPTION: Documents the properties of the Body4 model class including contact and deal relationship management. Properties allow linking and unlinking contacts and deals with companies through arrays of IDs.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/Body4.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**linkContactIds** | **int[]** | Contact ids for contacts to be linked with company | [optional] \n**unlinkContactIds** | **int[]** | Contact ids for contacts to be unlinked from company | [optional] \n**linkDealsIds** | **string[]** | Deals ids for deals to be linked with company | [optional] \n**unlinkDealsIds** | **string[]** | Deals ids for deals to be unlinked from company | [optional]\n```\n\n----------------------------------------\n\nTITLE: AbTestCampaignResult Properties Table\nDESCRIPTION: Markdown table defining the properties, types, and descriptions for the AbTestCampaignResult model class. Contains fields for tracking winning versions, criteria, statistics and click data for A/B test campaigns.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/AbTestCampaignResult.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| winningVersion | string | Winning Campaign Info. pending = Campaign has been picked for sending and winning version is yet to be decided, tie = A tie happened between both the versions, notAvailable = Campaign has not yet been picked for sending. | [optional] |\n| winningCriteria | string | Criteria choosen for winning version (Open/Click) | [optional] |\n| winningSubjectLine | string | Subject Line of current winning version | [optional] |\n| openRate | string | Open rate for current winning version | [optional] |\n| clickRate | string | Click rate for current winning version | [optional] |\n| winningVersionRate | string | Open/Click rate for the winner version | [optional] |\n| statistics | \\Brevo\\Client\\Model\\AbTestCampaignResultStatistics |  | [optional] |\n| clickedLinks | \\Brevo\\Client\\Model\\AbTestCampaignResultClickedLinks |  | [optional] |\n```\n\n----------------------------------------\n\nTITLE: Updating CRM Notes with PHP Brevo Client\nDESCRIPTION: Example code showing how to update an existing CRM note by ID using the Brevo PHP client library.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/NotesApi.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\NotesApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\"; // string | Note ID to update\n$body = new \\Brevo\\Client\\Model\\NoteData(); // \\Brevo\\Client\\Model\\NoteData | Note data to update a note\n\ntry {\n    $apiInstance->crmNotesIdPatch($id, $body);\n} catch (Exception $e) {\n    echo 'Exception when calling NotesApi->crmNotesIdPatch: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Webhooks with Brevo PHP SDK\nDESCRIPTION: Example of how to update an existing webhook using the Brevo PHP client. Requires webhook ID and update parameters. Includes API key configuration and error handling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/WebhooksApi.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\WebhooksApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$webhookId = 789; // int | Id of the webhook\n$updateWebhook = new \\Brevo\\Client\\Model\\UpdateWebhook(); // \\Brevo\\Client\\Model\\UpdateWebhook | Values to update a webhook\n\ntry {\n    $apiInstance->updateWebhook($webhookId, $updateWebhook);\n} catch (Exception $e) {\n    echo 'Exception when calling WebhooksApi->updateWebhook: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Listing Contact Attributes with Brevo API in PHP\nDESCRIPTION: Example code showing how to retrieve a list of all contact attributes using the Brevo PHP client. Requires API key authorization and returns a GetAttributes response object.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/AttributesApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\AttributesApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getAttributes();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling AttributesApi->getAttributes: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: GetFolders Model Properties Table in Markdown\nDESCRIPTION: A markdown table defining the properties of the GetFolders model, including property names, data types, descriptions, and optional notes.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetFolders.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**folders** | **object[]** |  | [optional] \n**count** | **int** | Number of folders available in your account | [optional]\n```\n\n----------------------------------------\n\nTITLE: Deleting a Reseller Child Domain in PHP\nDESCRIPTION: Example of how to delete a sender domain for a reseller child account using the Brevo PHP SDK. It shows setting up API authorization, instantiating the client, and calling the delete domain endpoint.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ResellerApi.md#2025-04-23_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\ResellerApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$childIdentifier = \"childIdentifier_example\"; \n$domainName = \"domainName_example\"; \n\ntry {\n    $apiInstance->deleteChildDomain($childIdentifier, $domainName);\n} catch (Exception $e) {\n    echo 'Exception when calling ResellerApi->deleteChildDomain: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining CreateWebhook Properties Schema\nDESCRIPTION: Schema definition for CreateWebhook model properties including webhook URL, description, event types, webhook type, domain, batching settings, authentication, and custom headers. The schema includes type definitions and optional flags for each property.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateWebhook.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**url** | **string** | URL of the webhook | \n**description** | **string** | Description of the webhook | [optional] \n**events** | **string[]** | - Events triggering the webhook. Possible values for **Transactional** type webhook: #### `sent` OR `request`, `delivered`, `hardBounce`, `softBounce`, `blocked`, `spam`, `invalid`, `deferred`, `click`, `opened`, `uniqueOpened` and `unsubscribed` - Possible values for **Marketing** type webhook: #### `spam`, `opened`, `click`, `hardBounce`, `softBounce`, `unsubscribed`, `listAddition` & `delivered` - Possible values for **Inbound** type webhook: #### `inboundEmailProcessed` | \n**type** | **string** | Type of the webhook | [optional] [default to 'transactional']\n**domain** | **string** | Inbound domain of webhook, required in case of event type `inbound` | [optional] \n**batched** | **bool** | To send batched webhooks | [optional] \n**auth** | [**\\Brevo\\Client\\Model\\GetWebhookAuth**](GetWebhookAuth.md) |  | [optional] \n**headers** | [**\\Brevo\\Client\\Model\\GetWebhookHeaders[]**](GetWebhookHeaders.md) | Custom headers to be send with webhooks | [optional]\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Properties Definition for GetList Model\nDESCRIPTION: Defines the properties of the GetList model including ID, name, and various subscriber count fields. Contains information about data types and descriptions for each property.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetList.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | ID of the list | \n**name** | **string** | Name of the list | \n**totalBlacklisted** | **int** | Number of blacklisted contacts in the list | \n**totalSubscribers** | **int** | Number of contacts in the list | \n**uniqueSubscribers** | **int** | Number of unique contacts in the list |\n```\n\n----------------------------------------\n\nTITLE: Deleting CRM Task with Brevo PHP SDK\nDESCRIPTION: Example of deleting a specific task from Brevo CRM using its ID. Shows API key configuration and error handling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CRMApi.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\CRMApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $apiInstance->crmTasksIdDelete($id);\n} catch (Exception $e) {\n    echo 'Exception when calling CRMApi->crmTasksIdDelete: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: List All Child Accounts in PHP\nDESCRIPTION: Example of retrieving a paginated list of all child accounts using the Brevo PHP client. Supports pagination parameters and requires API key authentication.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ResellerApi.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ResellerApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$limit = 10;\n$offset = 0;\n\ntry {\n    $result = $apiInstance->getResellerChilds($limit, $offset);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ResellerApi->getResellerChilds: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Contact SMS Attribute with Country Code (JSON)\nDESCRIPTION: Shows an example JSON object for updating the 'SMS' attribute of a contact within the 'attributes' field. The mobile number must include the proper country code prefix (e.g., +91 followed by the number).\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/UpdateContact.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\\"SMS\\\":\\\"+91xxxxxxxxxx\\\"}\n```\n\n----------------------------------------\n\nTITLE: WhatsApp Campaign Model Properties Table\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the GetWhatsappCampaignsCampaigns model class. Includes campaign identifiers, scheduling information, status tracking, and performance metrics.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetWhatsappCampaignsCampaigns.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | ID of the WhatsApp Campaign | \n**campaignName** | **string** | Name of the WhatsApp Campaign | \n**templateId** | **string** | Id of the WhatsApp template | \n**campaignStatus** | **string** | Status of the WhatsApp Campaign | \n**scheduledAt** | **string** | UTC date-time on which WhatsApp campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format | \n**errorReason** | **string** | Error reason in the campaign creation | [optional] \n**invalidatedContacts** | **int** | Count of invalidated contacts | [optional] \n**readPercentage** | **float** | Read percentage of the the WhatsApp campaign created | [optional] \n**stats** | [**\\Brevo\\Client\\Model\\WhatsappCampStats**](WhatsappCampStats.md) |  | [optional] \n**createdAt** | **string** | Creation UTC date-time of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ) | \n**modifiedAt** | **string** | UTC date-time of last modification of the whatsapp template (YYYY-MM-DDTHH:mm:ss.SSSZ) |\n```\n\n----------------------------------------\n\nTITLE: Deleting a Task with PHP using Brevo API\nDESCRIPTION: This snippet shows how to delete a specific task using the Brevo API. It sets up the API client and makes a DELETE request to remove the task with the given ID.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TasksApi.md#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\TasksApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n$id = \"id_example\";\n\ntry {\n    $apiInstance->crmTasksIdDelete($id);\n} catch (Exception $e) {\n    echo 'Exception when calling TasksApi->crmTasksIdDelete: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Setting Agent Online Status in Brevo API (PHP)\nDESCRIPTION: Example of pinging the API to set an agent's status as online. Requires API key authentication and should be called every minute to maintain online status.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ConversationsApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\ConversationsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$body = new \\Brevo\\Client\\Model\\Body14(); // Agent fields.\n\ntry {\n    $apiInstance->conversationsAgentOnlinePingPost($body);\n} catch (Exception $e) {\n    echo 'Exception when calling ConversationsApi->conversationsAgentOnlinePingPost: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining Body2 Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the Body2 model using a markdown table. It includes the name, type, description, and optional status of each property.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/Body2.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **name** | **string** | Name of company | |\n| **attributes** | **object** | Attributes for company creation | [optional] |\n| **countryCode** | **int** | Country code if phone_number is passed in attributes. | [optional] |\n```\n\n----------------------------------------\n\nTITLE: CreateEmailCampaignSender Properties Definition\nDESCRIPTION: Defines the properties of the CreateEmailCampaignSender model including name (optional string), email (required string), and id (optional integer). The id property is specifically used for selecting senders with dedicated IP pools.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateEmailCampaignSender.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **string** | Sender Name | [optional] \n**email** | **string** | Sender email | \n**id** | **int** | Select the sender for the campaign on the basis of sender id. In order to select a sender with specific pool of IP's, dedicated ip users shall pass id (instead of email). | [optional]\n```\n\n----------------------------------------\n\nTITLE: Updating Sender Domain for Brevo Reseller Child in PHP\nDESCRIPTION: This PHP code illustrates how to update the sender domain associated with a reseller's child account via the Brevo API using the PHP SDK. The script configures API key authentication, instantiates the `ResellerApi`, specifies the child identifier and the existing domain name to be updated, prepares an `UpdateChildDomain` model object with the new domain information, and calls the `updateChildDomain` method. Errors during the process are caught and displayed.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ResellerApi.md#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ResellerApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$childIdentifier = \"childIdentifier_example\"; // string | Either auth key or id of reseller's child\n$domainName = \"domainName_example\"; // string | Pass the existing domain that needs to be updated\n$updateChildDomain = new \\Brevo\\Client\\Model\\UpdateChildDomain(); // \\Brevo\\Client\\Model\\UpdateChildDomain | value to update for sender domain\n\ntry {\n    $apiInstance->updateChildDomain($childIdentifier, $domainName, $updateChildDomain);\n} catch (Exception $e) {\n    echo 'Exception when calling ResellerApi->updateChildDomain: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Get Contact Campaign Stats Example - PHP\nDESCRIPTION: Example showing how to retrieve email campaign statistics for a specific contact using the Brevo PHP client library. Includes optional date range parameters.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$identifier = \"identifier_example\";\n$startDate = \"startDate_example\";\n$endDate = \"endDate_example\";\n\ntry {\n    $result = $apiInstance->getContactStats($identifier, $startDate, $endDate);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->getContactStats: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: CreateSender Model Properties Definition\nDESCRIPTION: Defines the required and optional properties for creating a new sender in Brevo. Includes name (required from name), email (required sender address that requires verification), and optional IPs for dedicated IP setup.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateSender.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **string** | From Name to use for the sender | \n**email** | **string** | From email to use for the sender. A verification email will be sent to this address. | \n**ips** | [**\\Brevo\\Client\\Model\\CreateSenderIps[]**](CreateSenderIps.md) | Mandatory in case of dedicated IP, IPs to associate to the sender | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining CreateDomainModelDnsRecords Properties - PHP Model\nDESCRIPTION: Model class properties definition for DNS records in domain management. Includes two optional properties: dkimRecord and brevoCode, both referencing the CreateDomainModelDnsRecordsDkimRecord model.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateDomainModelDnsRecords.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ndkimRecord | [\\Brevo\\Client\\Model\\CreateDomainModelDnsRecordsDkimRecord](CreateDomainModelDnsRecordsDkimRecord.md) |  | [optional] \nbrevoCode | [\\Brevo\\Client\\Model\\CreateDomainModelDnsRecordsDkimRecord](CreateDomainModelDnsRecordsDkimRecord.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Deleting Automated Message with Brevo Conversations API in PHP\nDESCRIPTION: Example of deleting an automated message using its ID. Requires API key authentication.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ConversationsApi.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\ConversationsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\";\n\ntry {\n    $apiInstance->conversationsPushedMessagesIdDelete($id);\n} catch (Exception $e) {\n    echo 'Exception when calling ConversationsApi->conversationsPushedMessagesIdDelete: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: CreateUpdateProduct Properties Schema\nDESCRIPTION: Defines the data structure for creating or updating product information including required and optional fields like ID, name, URL, price, categories, and metadata. The schema includes field types and validation rules.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateUpdateproduct.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nid | string | Product ID for which you requested the details | \nname | string | Mandatory in case of creation**. Name of the product for which you requested the details | \nurl | string | URL to the product | [optional] \nimageUrl | string | Absolute URL to the cover image of the product | [optional] \nsku | string | Product identifier from the shop | [optional] \nprice | float | Price of the product | [optional] \ncategories | string[] | Category ID-s of the product | [optional] \nparentId | string | Parent product id of the product | [optional] \nmetaInfo | map[string,string] | Meta data of product such as description, vendor, producer, stock level. The size of cumulative metaInfo shall not exceed **1000 KB**. Maximum length of metaInfo object can be 10. | [optional] \nupdateEnabled | bool | Facilitate to update the existing category in the same request (updateEnabled = true) | [optional] [default to false]\ndeletedAt | string | UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the product deleted from the shop's database | [optional]\n```\n\n----------------------------------------\n\nTITLE: PHP Model Class Properties for Scheduled Email Batch\nDESCRIPTION: Defines the core properties of the GetScheduledEmailByBatchIdBatches model including scheduledAt (DateTime for batch scheduling), createdAt (DateTime of batch creation), and status (current batch status).\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetScheduledEmailByBatchIdBatches.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @var \\DateTime $scheduledAt Datetime for which the batch was scheduled\n */\n\n/**\n * @var \\DateTime $createdAt Datetime on which the batch was scheduled\n */\n\n/**\n * @var string $status Current status of the scheduled batch\n */\n```\n\n----------------------------------------\n\nTITLE: CreateUpdateProducts Model Properties Definition\nDESCRIPTION: Defines the properties schema for the CreateUpdateProducts model class used in PHP SDK. Properties include product ID, name, URL, image URL, SKU, price, categories, parent ID, metadata, and deletion timestamp. Fields are marked as required or optional with appropriate data types.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateUpdateProducts.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nid | string | Product ID for which you requested the details | \nname | string | Mandatory in case of creation**. Name of the product for which you requested the details | \nurl | string | URL to the product | [optional] \nimageUrl | string | Absolute URL to the cover image of the product | [optional] \nsku | string | Product identifier from the shop | [optional] \nprice | float | Price of the product | [optional] \ncategories | string[] | Category ID-s of the product | [optional] \nparentId | string | Parent product id of the product | [optional] \nmetaInfo | map[string,string] | Meta data of product such as description, vendor, producer, stock level. The size of cumulative metaInfo shall not exceed **1000 KB**. Maximum length of metaInfo object can be 10. | [optional] \ndeletedAt | string | UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the product deleted from the shop's database | [optional]\n```\n\n----------------------------------------\n\nTITLE: Deleting Sub-Account in PHP using Brevo API\nDESCRIPTION: PHP implementation for deleting a specific sub-account using its ID. Requires API key authentication.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/MasterAccountApi.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\MasterAccountApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 789;\n\ntry {\n    $apiInstance->corporateSubAccountIdDelete($id);\n} catch (Exception $e) {\n    echo 'Exception when calling MasterAccountApi->corporateSubAccountIdDelete: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: CreateWhatsAppCampaign Properties Table\nDESCRIPTION: Markdown table defining the properties of the CreateWhatsAppCampaign model, including property names, types, and descriptions. The model is used to specify parameters for creating a WhatsApp campaign in the Brevo platform.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateWhatsAppCampaign.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **string** | Name of the WhatsApp campaign creation | \n**templateId** | **int** | Id of the WhatsApp template in **approved** state | \n**scheduledAt** | **string** | Sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.For example: **2017-06-01T12:30:00+02:00** | \n**recipients** | [**\\Brevo\\Client\\Model\\CreateWhatsAppCampaignRecipients**](CreateWhatsAppCampaignRecipients.md) |  |\n```\n\n----------------------------------------\n\nTITLE: Body1 Model Properties Table - Markdown\nDESCRIPTION: Markdown table documenting the properties of the Body1 model class, including groupName (string) for group name and subAccountIds (integer array) for list of sub-account IDs.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/Body1.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**groupName** | **string** | The name of the group of sub-accounts | \n**subAccountIds** | **int[]** | Pass the list of sub-account Ids to be included in the group | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single CRM Task with Brevo PHP SDK\nDESCRIPTION: Example of retrieving a specific task from Brevo CRM using its ID. Demonstrates API key setup and error handling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CRMApi.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\CRMApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->crmTasksIdGet($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CRMApi->crmTasksIdGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting an SMS Campaign with Brevo PHP Client\nDESCRIPTION: This snippet shows how to delete an existing SMS campaign using the Brevo PHP client library. It sets up API key authorization, creates an SMSCampaignsApi instance, and calls the deleteSmsCampaign method with the campaign ID.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/SMSCampaignsApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\SMSCampaignsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$campaignId = 789; // int | id of the SMS campaign\n\ntry {\n    $apiInstance->deleteSmsCampaign($campaignId);\n} catch (Exception $e) {\n    echo 'Exception when calling SMSCampaignsApi->deleteSmsCampaign: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: CreateUpdateBatchCategory Model Properties\nDESCRIPTION: Defines the properties of the CreateUpdateBatchCategory model including an array of category objects and an update configuration flag.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateUpdateBatchCategory.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncategories | \\Brevo\\Client\\Model\\CreateUpdateCategories[] | array of categories objects | \nupdateEnabled | bool | Facilitate to update the existing categories in the same request (updateEnabled = true) | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining CreateApiKeyRequest Properties in PHP\nDESCRIPTION: Defines the properties required for creating an API key request, including the sub-account organization ID and optional API key name.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateApiKeyRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nid | int | Id of the sub-account organization | \nname | string | Name of the API key | [optional]\n```\n\n----------------------------------------\n\nTITLE: Deleting an Email Campaign with Brevo PHP Client\nDESCRIPTION: This snippet shows how to delete an existing email campaign using the Brevo PHP client library. It sets up API authentication, creates an EmailCampaignsApi instance, and sends a DELETE request with the campaign ID.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EmailCampaignsApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\EmailCampaignsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$campaignId = 789; // int | id of the campaign\n\ntry {\n    $apiInstance->deleteEmailCampaign($campaignId);\n} catch (Exception $e) {\n    echo 'Exception when calling EmailCampaignsApi->deleteEmailCampaign: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining GetProductDetails Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetProductDetails model, including their types, descriptions, and optional status. It covers various product attributes such as ID, name, creation date, URL, price, categories, and metadata.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetProductDetails.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetProductDetails\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **string** | Product ID for which you requested the details | \n**name** | **string** | Name of the product for which you requested the details | \n**createdAt** | **string** | Creation UTC date-time of the product (YYYY-MM-DDTHH:mm:ss.SSSZ) | \n**modifiedAt** | **string** | Last modification UTC date-time of the product (YYYY-MM-DDTHH:mm:ss.SSSZ) | \n**url** | **string** | URL to the product | [optional] \n**imageUrl** | **string** | Absolute URL to the cover image of the product | [optional] \n**sku** | **string** | Product identifier from the shop | [optional] \n**price** | **float** | Price of the product | [optional] \n**categories** | **string[]** | Category ID-s of the product | [optional] \n**parentId** | **string** | Parent product id of the product | [optional] \n**s3Original** | **string** | S3 url of original image | [optional] \n**s3ThumbAnalytics** | **string** | S3 thumbnail url of original image in 120x120 dimension for analytics section | \n**metaInfo** | **object** | Meta data of product such as description, vendor, producer, stock level, etc. | [optional] \n**s3ThumbEditor** | **string** | S3 thumbnail url of original image in 600x400 dimension for editor section | \n**isDeleted** | **bool** | product deleted from the shop's database | [optional] \n\n[[Back to Model list]](../../README.md#documentation-for-models) [[Back to API list]](../../README.md#documentation-for-api-endpoints) [[Back to README]](../../README.md)\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticateDomainModel Properties in PHP\nDESCRIPTION: Specifies the properties of the AuthenticateDomainModel class. It includes 'domainName' as a string representing the domain, and 'message' as a string containing a success message.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/AuthenticateDomainModel.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @property string $domainName Domain\n * @property string $message Success message\n */\n```\n\n----------------------------------------\n\nTITLE: Deleting WhatsApp Campaign with PHP Brevo Client\nDESCRIPTION: Example code showing how to delete a WhatsApp campaign using the Brevo PHP client. Requires API key authentication and campaign ID as input parameter.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/WhatsAppCampaignsApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\WhatsAppCampaignsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$campaignId = 789;\n\ntry {\n    $apiInstance->deleteWhatsAppCampaign($campaignId);\n} catch (Exception $e) {\n    echo 'Exception when calling WhatsAppCampaignsApi->deleteWhatsAppCampaign: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Body3 Model Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties, types, and descriptions for the Body3 model class. Includes name (string), attributes (object), and countryCode (integer) fields.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/Body3.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **string** | Name of company | [optional] \n**attributes** | **object** | Attributes for company update | [optional] \n**countryCode** | **int** | Country code if phone_number is passed in attributes. | [optional]\n```\n\n----------------------------------------\n\nTITLE: GetTransacEmailContentEvents Properties Table\nDESCRIPTION: Markdown table defining the properties of the GetTransacEmailContentEvents model, including name and time fields with their types and descriptions.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetTransacEmailContentEvents.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nname | string | Name of the event that occurred on the sent email | \ntime | string | Time at which the event occurred |\n```\n\n----------------------------------------\n\nTITLE: CreateUpdateCategory Model Properties Definition\nDESCRIPTION: Defines the properties and attributes for creating or updating a category in Brevo. Properties include unique ID, name, URL, update control flag, and deletion timestamp.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateUpdateCategory.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass CreateUpdateCategory {\n    /** @var string Unique Category ID as saved in the shop */\n    public $id;\n    \n    /** @var string Name of the Category, as displayed in the shop */\n    public $name;\n    \n    /** @var string URL to the category */\n    public $url;\n    \n    /** @var bool Facilitate to update the existing category in the same request */\n    public $updateEnabled = false;\n    \n    /** @var string UTC date-time of category deletion */\n    public $deletedAt;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dedicated IPs with Brevo SendersApi in PHP\nDESCRIPTION: Example of retrieving all dedicated IPs for a Brevo account using the PHP SDK. This snippet demonstrates how to configure API authorization, instantiate the SendersApi client, and call the getIps method.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/SendersApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\SendersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getIps();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SendersApi->getIps: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: CreateChild Model Properties Table\nDESCRIPTION: Markdown table defining the properties, types, and descriptions for the CreateChild model class. Required properties include email, firstName, lastName, companyName, and password, with language as an optional parameter.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateChild.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **email** | **string** | Email address to create the child account | |\n| **firstName** | **string** | First name to use to create the child account | |\n| **lastName** | **string** | Last name to use to create the child account | |\n| **companyName** | **string** | Company name to use to create the child account | |\n| **password** | **string** | Password for the child account to login | |\n| **language** | **string** | Language of the child account | [optional] |\n```\n\n----------------------------------------\n\nTITLE: Properties Table for GetUserPermissionPrivileges\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the GetUserPermissionPrivileges class. Contains feature (string) and permissions (string array) fields.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetUserPermissionPrivileges.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nfeature | **string** |  | \npermissions | **string[]** |  | \n```\n\n----------------------------------------\n\nTITLE: Delete Deal Example - PHP\nDESCRIPTION: Example code showing how to delete a specific deal by ID using the Brevo API. Requires API key authentication.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/DealsApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\DealsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\";\n\ntry {\n    $apiInstance->crmDealsIdDelete($id);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->crmDealsIdDelete: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting Contact List in Brevo API using PHP\nDESCRIPTION: Example code demonstrating how to delete an existing contact list using the Brevo API. Requires API key authorization and accepts list ID as parameter.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ListsApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\ListsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$listId = 789;\n\ntry {\n    $apiInstance->deleteList($listId);\n} catch (Exception $e) {\n    echo 'Exception when calling ListsApi->deleteList: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: CreateModel Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of CreateModel class, showing the ID property that represents the identifier of created objects.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateModel.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | ID of the object created |\n```\n\n----------------------------------------\n\nTITLE: Updating Contact SMS Attribute with Alternative Country Code (JSON)\nDESCRIPTION: Presents an alternative example JSON object for updating the 'SMS' attribute within the 'attributes' field. This format uses '00' followed by the country code (e.g., 0091) instead of the '+' prefix.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/UpdateContact.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\\"SMS\\\":\\\"0091xxxxxxxxxx\\\"}\n```\n\n----------------------------------------\n\nTITLE: Get Child Account Domains in PHP\nDESCRIPTION: Example of retrieving sender domains for a specific child account using the Brevo PHP client. Requires API key authentication and uses the ResellerApi class.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ResellerApi.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ResellerApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$childIdentifier = \"childIdentifier_example\";\n\ntry {\n    $result = $apiInstance->getChildDomains($childIdentifier);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ResellerApi->getChildDomains: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining Task Properties Schema in Markdown\nDESCRIPTION: Markdown table documenting the properties of the Body9 model used for task management. Includes property names, data types, descriptions and optional status for task-related fields.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/Body9.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **string** | Name of task | [optional] \n**duration** | **int** | Duration of task in milliseconds [1 minute &#x3D; 60000 ms] | [optional] \n**taskTypeId** | **string** | Id for type of task e.g Call / Email / Meeting etc. | [optional] \n**date** | [**\\DateTime**] | Task date/time | [optional] \n**notes** | **string** | Notes added to a task | [optional] \n**done** | **bool** | Task marked as done | [optional] \n**assignToId** | **string** | User id to whom task is assigned | [optional] \n**contactsIds** | **int[]** | Contact ids for contacts linked to this task | [optional] \n**dealsIds** | **string[]** | Deal ids for deals a task is linked to | [optional] \n**companiesIds** | **string[]** | Companies ids for companies a task is linked to | [optional]\n```\n\n----------------------------------------\n\nTITLE: GetWhatsappEventReport Model Properties Definition\nDESCRIPTION: Defines the events property of the GetWhatsappEventReport model which is an optional array of GetWhatsappEventReportEvents objects.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetWhatsappEventReport.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nevents | [**\\Brevo\\Client\\Model\\GetWhatsappEventReportEvents[]**](GetWhatsappEventReportEvents.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetDeviceBrowserStats Properties in PHP Model Documentation\nDESCRIPTION: Documentation of the properties available in the GetDeviceBrowserStats model class. This model captures browser-specific statistics for email campaigns, including total and unique clicks and views.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetDeviceBrowserStats.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetDeviceBrowserStats\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**clickers** | **int** | Number of total clicks for the campaign using the particular browser | \n**uniqueClicks** | **int** | Number of unique clicks for the campaign using the particular browser | \n**viewed** | **int** | Number of openings for the campaign using the particular browser | \n**uniqueViews** | **int** | Number of unique openings for the campaign using the particular browser | \n```\n\n----------------------------------------\n\nTITLE: Structuring Contact Attributes for Update (JSON)\nDESCRIPTION: Provides an example JSON object for the `attributes` parameter when updating a contact via the Brevo API. It demonstrates updating email, first name, and last name. Attribute names (like EMAIL, FNAME, LNAME) must be capitalized, exist in the Brevo account, and values should match the expected attribute type.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/UpdateContact.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"EMAIL\\\":\\\"newemail@domain.com\\\", \\\"FNAME\\\":\\\"Ellie\\\", \\\"LNAME\\\":\\\"Roger\\\"}\n```\n\n----------------------------------------\n\nTITLE: Body11 Model Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the Body11 model class, showing the text property of type string used for edited message text.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/Body11.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**text** | **string** | edited message text |\n```\n\n----------------------------------------\n\nTITLE: Defining ConversationsMessageFile Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the ConversationsMessageFile model, including their names, types, descriptions, and optional status. It covers file attributes like filename, size, image status, URL, and image information.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/ConversationsMessageFile.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**filename** | **string** | Name of the file | [optional] \n**size** | **int** | Size in bytes | [optional] \n**isImage** | **bool** | Whether the file is an image | [optional] \n**url** | **string** | URL of the file | [optional] \n**imageInfo** | [**\\Brevo\\Client\\Model\\ConversationsMessageFileImageInfo**](ConversationsMessageFileImageInfo.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inbound Email Attachment in PHP\nDESCRIPTION: Example of retrieving an inbound email attachment using a download token. Requires API key authentication and returns a file object.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/InboundParsingApi.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\InboundParsingApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$downloadToken = \"downloadToken_example\";\n\ntry {\n    $result = $apiInstance->getInboundEmailAttachment($downloadToken);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling InboundParsingApi->getInboundEmailAttachment: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining GetExternalFeedByUUID Model Properties in PHP\nDESCRIPTION: This code snippet defines the properties of the GetExternalFeedByUUID model. It includes fields for feed identification, authentication, custom headers, and metadata. Some fields are optional and depend on the authentication type.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetExternalFeedByUUID.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass GetExternalFeedByUUID\n{\n    public $id;           // string\n    public $name;         // string\n    public $url;          // string\n    public $authType;     // string\n    public $username;     // string (optional)\n    public $password;     // string (optional)\n    public $token;        // string (optional)\n    public $headers;      // GetExternalFeedByUUIDHeaders[]\n    public $maxRetries;   // int\n    public $cache;        // bool\n    public $createdAt;    // \\DateTime\n    public $modifiedAt;   // \\DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetProcesses Properties in Markdown\nDESCRIPTION: Defines the properties of the GetProcesses model, including 'processes' (an array of GetProcess objects) and 'count' (an integer representing the number of processes).\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetProcesses.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**processes** | [**\\Brevo\\Client\\Model\\GetProcess[]**](GetProcess.md) | List of processes available on your account | [optional] \n**count** | **int** | Number of processes available on your account | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task Types with Brevo PHP SDK\nDESCRIPTION: Example of retrieving all available task types using the Brevo TasksApi. Demonstrates API authentication and fetching task type data.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/TasksApi.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\TasksApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->crmTasktypesGet();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TasksApi->crmTasktypesGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining GetEmailCampaigns Model Properties in Markdown\nDESCRIPTION: Documents the properties of the GetEmailCampaigns model including their types and descriptions. The model has two properties: campaigns (array of objects) and count (integer representing the number of email campaigns retrieved).\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetEmailCampaigns.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetEmailCampaigns\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**campaigns** | **object[]** |  | [optional] \n**count** | **int** | Number of Email campaigns retrieved | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining ConversationsMessage Properties in Markdown\nDESCRIPTION: Markdown table defining the properties of the ConversationsMessage model including message ID, type, text content, visitor and agent information, timestamps, and file attachments. Each property is documented with its type and optional description.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/Conversationsmessage.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **string** | Message ID. It can be used for further manipulations with the message. | [optional] \n**type** | **string** | `\"agent\"` for agents' messages, `\"visitor\"` for visitors' messages. | [optional] \n**text** | **string** | Message text or name of the attached file | [optional] \n**visitorId** | **string** | visitor's ID | [optional] \n**agentId** | **string** | ID of the agent on whose behalf the message was sent (only in messages sent by an agent). | [optional] \n**agentName** | **string** | Agent's name as displayed to the visitor. Only in the messages sent by an agent. | [optional] \n**createdAt** | **int** | Timestamp in milliseconds. | [optional] \n**isPushed** | **bool** | `true` for pushed messages | [optional] \n**receivedFrom** | **string** | In two-way integrations, messages sent via REST API can be marked with receivedFrom property and then filtered out when received in a webhook to avoid infinite loop. | [optional] \n**file** | [**\\Brevo\\Client\\Model\\ConversationsMessageFile**](ConversationsMessageFile.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: ConversationsMessageFileImageInfo Properties Table\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the ConversationsMessageFileImageInfo model. Includes width, height and previewUrl fields with their corresponding types and optional status.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/ConversationsmessageFileImageInfo.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nwidth | int | Width of the image | [optional] \nheight | int | height of the image | [optional] \npreviewUrl | string | URL of the preview | [optional]\n```\n\n----------------------------------------\n\nTITLE: Deleting a Multiple-Choice Attribute Option using Brevo API in PHP\nDESCRIPTION: This snippet illustrates how to delete a specific option from a multiple-choice contact attribute using the Brevo PHP SDK. It requires API key configuration and `ContactsApi` instantiation. The `deleteMultiAttributeOptions` method is then called, passing the attribute type (`$attributeType`), the name of the multiple-choice attribute (`$multipleChoiceAttribute`), and the name of the option to delete (`$multipleChoiceAttributeOption`). Basic error handling is included.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$attributeType = \"attributeType_example\"; // string | Type of the attribute\n$multipleChoiceAttribute = \"multipleChoiceAttribute_example\"; // string | Name of the existing multiple-choice attribute\n$multipleChoiceAttributeOption = \"multipleChoiceAttributeOption_example\"; // string | Name of the existing multiple-choice attribute option that you want to delete\n\ntry {\n    $apiInstance->deleteMultiAttributeOptions($attributeType, $multipleChoiceAttribute, $multipleChoiceAttributeOption);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->deleteMultiAttributeOptions: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Documenting Body14 Properties in Markdown\nDESCRIPTION: Markdown table documenting the properties of the Body14 class including agentId, receivedFrom, agentEmail, and agentName fields. Each property includes type definition and detailed description of its purpose and usage.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/Body14.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nagentId | string | agent ID. It can be found on agent's page or received <a href=\"https://developers.brevo.com/docs/conversations-webhooks\">from a webhook</a>. Alternatively, you can use `agentEmail` + `agentName` + `receivedFrom` instead (all 3 fields required). | [optional] \nreceivedFrom | string | mark your messages to distinguish messages created by you from the others. | [optional] \nagentEmail | string | agent email. When sending online pings from a standalone system, it's hard to maintain a 1-to-1 relationship between the users of both systems. In this case, an agent can be specified by their email address. If there's no agent with the specified email address in your Brevo organization, a dummy agent will be created automatically. | [optional] \nagentName | string | agent name. | [optional]\n```\n\n----------------------------------------\n\nTITLE: GetWebhookHeaders Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the GetWebhookHeaders model, including key and value fields for webhook headers\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetWebhookHeaders.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**key** | **string** | Header key name | [optional] \n**value** | **string** | Header value | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetInboundEmailEventsByUuidAttachments Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetInboundEmailEventsByUuidAttachments model using a markdown table. It specifies the name, type, description, and optional status of each property.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetInboundEmailEventsByUuidAttachments.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nname | **string** | filename specified in the Content-Disposition header of the attachment | [optional] \ncontentType | **string** | value of the Content-Type header of the attachment | [optional] \ncontentId | **string** | value of the Content-ID header of the attachment. | [optional] \ncontentLength | **int** | size of the attachment in bytes | [optional]\n```\n\n----------------------------------------\n\nTITLE: PHP Class Properties for DKIM DNS Records\nDESCRIPTION: Defines the structure of DKIM DNS record properties with type declarations. Properties include string fields for type, value, and hostname, plus a boolean status field. All fields are marked as optional.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateDomainModelDnsRecordsDkimRecord.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ntype = string    [optional]\nvalue = string    [optional]\nhostName = string [optional]\nstatus = bool     [optional]\n```\n\n----------------------------------------\n\nTITLE: Body8 Model Properties Table in Markdown\nDESCRIPTION: Markdown table documenting the properties of the Body8 model class, including property names, types, descriptions and optional status. Used for defining task-related data structures in the Brevo PHP SDK.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/Body8.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **string** | Name of task | \n**duration** | **int** | Duration of task in milliseconds [1 minute &#x3D; 60000 ms] | [optional] \n**taskTypeId** | **string** | Id for type of task e.g Call / Email / Meeting etc. | \n**date** | [**\\DateTime**] | Task due date and time | \n**notes** | **string** | Notes added to a task | [optional] \n**done** | **bool** | Task marked as done | [optional] \n**assignToId** | **string** | User id to whom task is assigned | [optional] \n**contactsIds** | **int[]** | Contact ids for contacts linked to this task | [optional] \n**dealsIds** | **string[]** | Deal ids for deals a task is linked to | [optional] \n**companiesIds** | **string[]** | Companies ids for companies a task is linked to | [optional] \n**reminder** | [**\\Brevo\\Client\\Model\\TaskReminder**](TaskReminder.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: CreateExternalFeed Properties Table\nDESCRIPTION: Markdown table documenting the properties, types, and descriptions for the CreateExternalFeed model. Includes required and optional fields for configuring external feed connections with various authentication methods.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateExternalFeed.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nname | string | Name of the feed | \nurl | string | URL of the feed | \nauthType | string | Auth type of the feed:   * `basic`   * `token`   * `noAuth` | [optional] [default to 'noAuth']\nusername | string | Username for authType `basic` | [optional] \npassword | string | Password for authType `basic` | [optional] \ntoken | string | Token for authType `token` | [optional] \nheaders | \\Brevo\\Client\\Model\\GetExternalFeedByUUIDHeaders[] | Custom headers for the feed | [optional] \nmaxRetries | int | Maximum number of retries on the feed url | [optional] \ncache | bool | Toggle caching of feed url response | [optional] [default to false]\n```\n\n----------------------------------------\n\nTITLE: Deleting a Contact List using Brevo API in PHP\nDESCRIPTION: This example demonstrates deleting a specific contact list using the Brevo PHP SDK. After configuring API keys and initializing the `ContactsApi` client, the `deleteList` method is called with the ID of the list to be deleted (`$listId`). Error handling is shown via a try-catch block.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ContactsApi.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ContactsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$listId = 789; // int | Id of the list\n\ntry {\n    $apiInstance->deleteList($listId);\n} catch (Exception $e) {\n    echo 'Exception when calling ContactsApi->deleteList: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: CompanyAttributesInner Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the CompanyAttributesInner model, including property names, types, and optional status.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CompanyAttributesInner.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ninternalName | string |  | [optional] \nlabel | string |  | [optional] \nattributeTypeName | string |  | [optional] \nattributeOptions | object[] |  | [optional] \nisRequired | bool |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining GetSegmentsSegments Class Properties in PHP\nDESCRIPTION: This code snippet defines the properties of the GetSegmentsSegments class. It includes an ID, segment name, category name, and update timestamp. All properties are optional and have specific data types.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetSegmentsSegments.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @var int $id ID of the list\n */\npublic $id;\n\n/**\n * @var string $segmentName Name of the Segment\n */\npublic $segmentName;\n\n/**\n * @var string $categoryName Name of the Segment Category\n */\npublic $categoryName;\n\n/**\n * @var string $updatedAt Updation UTC date-time of the segment (YYYY-MM-DDTHH:mm:ss.SSSZ)\n */\npublic $updatedAt;\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Coupon Collection by ID using Brevo PHP Client\nDESCRIPTION: This snippet demonstrates how to retrieve a specific coupon collection by its ID using the Brevo PHP client. It configures the API client and makes a GET request to fetch the collection details.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CouponsApi.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\CouponsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\"; // string | Id of the collection to return\n\ntry {\n    $result = $apiInstance->getCouponCollection($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CouponsApi->getCouponCollection: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: CreateUpdateBatchCategoryModel Properties Table\nDESCRIPTION: Markdown table defining the properties of the CreateUpdateBatchCategoryModel class, including property names, types, descriptions and optional status.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateUpdateBatchCategoryModel.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| createdCount | int | Number of the new created categories | [optional] |\n| updatedCount | int | Number of the existing categories updated | [optional] |\n```\n\n----------------------------------------\n\nTITLE: GetTransacBlockedContactsReason Model Properties Table\nDESCRIPTION: Markdown table defining the properties, types, and descriptions for the GetTransacBlockedContactsReason model. Contains code and message fields for tracking contact blocking/unsubscription reasons.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetTransacBlockedContactsReason.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**code** | **string** | Reason code for blocking / unsubscribing (This code is safe for comparison) | [optional] \n**message** | **string** | Reason for blocking / unsubscribing (This string is not safe for comparison) | [optional]\n```\n\n----------------------------------------\n\nTITLE: CreateProductModel Properties Table\nDESCRIPTION: Markdown table defining the properties of the CreateProductModel class, showing the name, type, description and optional status of the id field.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateProductModel.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | ID of the Product when a new product is created | [optional]\n```\n\n----------------------------------------\n\nTITLE: Dissociating an IP from a Reseller Child in PHP\nDESCRIPTION: Example of how to dissociate a dedicated IP address from a reseller child account using the Brevo PHP SDK. It shows configuring API keys, creating the client, and calling the dissociate IP endpoint.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ResellerApi.md#2025-04-23_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\ResellerApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$childIdentifier = \"childIdentifier_example\";\n$ip = new \\Brevo\\Client\\Model\\ManageIp();\n\ntry {\n    $apiInstance->dissociateIpFromChild($childIdentifier, $ip);\n} catch (Exception $e) {\n    echo 'Exception when calling ResellerApi->dissociateIpFromChild: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining GetExtendedCampaignOverviewSender Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetExtendedCampaignOverviewSender model with their types and descriptions. It includes name (string), email (string), and id (integer) fields that represent sender information for a campaign.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetExtendedCampaignOverviewSender.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **string** | Sender name of the campaign | [optional] \n**email** | **string** | Sender email of the campaign | [optional] \n**id** | **int** | Sender id of the campaign | [optional]\n```\n\n----------------------------------------\n\nTITLE: AbTestCampaignResultStatistics Model Properties\nDESCRIPTION: Defines the properties of the AbTestCampaignResultStatistics model class. Each property represents a different campaign metric and uses the AbTestVersionStats type to track statistics across different versions of the A/B test.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/AbTestCampaignResultStatistics.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nopeners | [**\\Brevo\\Client\\Model\\AbTestVersionStats**](AbTestVersionStats.md) |  | \nclicks | [**\\Brevo\\Client\\Model\\AbTestVersionStats**](AbTestVersionStats.md) |  | \nunsubscribed | [**\\Brevo\\Client\\Model\\AbTestVersionStats**](AbTestVersionStats.md) |  | \nhardBounces | [**\\Brevo\\Client\\Model\\AbTestVersionStats**](AbTestVersionStats.md) |  | \nsoftBounces | [**\\Brevo\\Client\\Model\\AbTestVersionStats**](AbTestVersionStats.md) |  | \ncomplaints | [**\\Brevo\\Client\\Model\\AbTestVersionStats**](AbTestVersionStats.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Defining CreateCoupons Model Properties in Markdown\nDESCRIPTION: Documents the properties of the CreateCoupons model including collectionId (string) for specifying the target coupon collection and coupons (string array) for the coupon data.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateCoupons.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncollectionId | string | The id of the coupon collection for which the coupons will be created | \ncoupons | string[] |  | \n```\n\n----------------------------------------\n\nTITLE: CreateUpdateBatchProductsModel Properties Definition\nDESCRIPTION: Defines two integer properties that track counts for batch product operations: createdCount for newly created products and updatedCount for existing products that were updated.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateUpdateBatchProductsModel.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncreatedCount | int | Number of the new created products | [optional] \nupdatedCount | int | Number of the existing products updated | [optional]\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of CreateCouponCollection Properties\nDESCRIPTION: Property table defining the required fields for creating a coupon collection, including name and defaultCoupon attributes.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateCouponCollection.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **object** | Name of the collection with no white spaces between words | \n**defaultCoupon** | **object** | A default coupon to be used in case there are no coupons left |\n```\n\n----------------------------------------\n\nTITLE: Defining GetFolder Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetFolder model using a Markdown table. It includes the property names, types, descriptions, and notes for each field in the model.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetFolder.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | ID of the folder | \n**name** | **string** | Name of the folder | \n**totalBlacklisted** | **int** | Number of blacklisted contacts in the folder | \n**totalSubscribers** | **int** | Number of contacts in the folder | \n**uniqueSubscribers** | **int** | Number of unique contacts in the folder | \n```\n\n----------------------------------------\n\nTITLE: Updating Sender Information using Brevo PHP API\nDESCRIPTION: Example of updating sender information using senderId and sender details through the Brevo PHP API client. Requires API key authentication and includes error handling.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/SendersApi.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\SendersApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$senderId = 789;\n$sender = new \\Brevo\\Client\\Model\\UpdateSender();\n\ntry {\n    $apiInstance->updateSender($senderId, $sender);\n} catch (Exception $e) {\n    echo 'Exception when calling SendersApi->updateSender: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: CreateUpdateCategories Properties Definition in Markdown\nDESCRIPTION: Markdown table defining the properties of the CreateUpdateCategories model including id, name, url, and deletedAt fields with their types and descriptions.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateUpdateCategories.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n------------ | ------------- | ------------- | -------------\n**id** | **string** | Unique Category ID as saved in the shop | \n**name** | **string** | **Mandatory in case of creation**. Name of the Category, as displayed in the shop | [optional] \n**url** | **string** | URL to the category | [optional] \n**deletedAt** | **string** | UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the category deleted from the shop's database | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetInboundEmailEventsByUuidLogs Class Properties in PHP\nDESCRIPTION: Defines two properties for the GetInboundEmailEventsByUuidLogs class: 'date' of type \\DateTime for the event date, and 'type' of type string for the event type. Both properties are optional.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetInboundEmailEventsByUuidLogs.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @var \\DateTime $date Date of the event\n */\nprivate $date;\n\n/**\n * @var string $type Type of the event\n */\nprivate $type;\n```\n\n----------------------------------------\n\nTITLE: Get CRM Task Types Example in PHP\nDESCRIPTION: Example showing how to retrieve all available CRM task types using the Brevo PHP SDK. Requires API key authentication and returns a list of task types.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CRMApi.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\CRMApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->crmTasktypesGet();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CRMApi->crmTasktypesGet: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining GetTransacBlockedContacts Properties in PHP\nDESCRIPTION: Model class properties definition for GetTransacBlockedContacts including count of blocked contacts and array of contact objects. The properties include an integer count and an array of GetTransacBlockedContactsContacts objects.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetTransacBlockedContacts.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass GetTransacBlockedContacts {\n    /** @var int Count of blocked or unsubscribed contact */\n    protected $count;\n    \n    /** @var \\Brevo\\Client\\Model\\GetTransacBlockedContactsContacts[] */\n    protected $contacts;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetIps Model Properties in Markdown\nDESCRIPTION: Describes the properties of the GetIps model, specifically the 'ips' property which is an array of GetIp objects representing dedicated IPs available on the user's account.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetIps.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**ips** | [**\\Brevo\\Client\\Model\\GetIp[]**](GetIp.md) | Dedicated IP(s) available on your account |\n```\n\n----------------------------------------\n\nTITLE: Defining AddChildDomain Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the AddChildDomain model using a markdown table. It specifies the 'domain' property as a string type, which is optional and represents the sender domain to add for a specific child account.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/AddChildDomain.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**domain** | **string** | Sender domain to add for a specific child account | [optional]\n```\n\n----------------------------------------\n\nTITLE: Fetching Inbound Email Events List in PHP\nDESCRIPTION: Example of retrieving a list of all events for received emails with optional filtering by sender and date range. Supports pagination and sorting.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/InboundParsingApi.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n\n$apiInstance = new Brevo\\Client\\Api\\InboundParsingApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$sender = \"sender_example\";\n$startDate = \"startDate_example\";\n$endDate = \"endDate_example\";\n$limit = 100;\n$offset = 0;\n$sort = \"desc\";\n\ntry {\n    $result = $apiInstance->getInboundEmailEvents($sender, $startDate, $endDate, $limit, $offset, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling InboundParsingApi->getInboundEmailEvents: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining GetSmsCampaigns Class Properties in PHP\nDESCRIPTION: This snippet describes the properties of the GetSmsCampaigns class. It includes an array of campaign objects and a count of retrieved SMS campaigns.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetSmsCampaigns.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n$campaigns | object[] |  | [optional] \n$count | int | Number of SMS campaigns retrieved | [optional]\n```\n\n----------------------------------------\n\nTITLE: Documenting Body6 Model Properties in Markdown\nDESCRIPTION: Markdown table defining the properties of the Body6 model, including name and attributes fields. The name field is an optional string for the deal name, while attributes is an optional object containing deal update properties including pipeline and deal_stage IDs.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/Body6.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **string** | Name of deal | [optional] \n**attributes** | **object** | Attributes for deal update  If you wish to update the pipeline of a deal you need to provide the `pipeline` and the `deal_stage`.  Pipeline and deal_stage are ids you can fetch using this endpoint `/crm/pipeline/details/{pipelineID}` | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining CreateCategoryModel Properties in Markdown\nDESCRIPTION: Documents the properties of the CreateCategoryModel class, specifically the optional 'id' property which holds the category ID when a new category is created.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateCategoryModel.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | ID of the category when a new category is created | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetLists Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetLists model using a markdown table. It specifies the name, type, description, and optional notes for each property.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetLists.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**lists** | **object[]** | Listing of all the lists available in your account | [optional] \n**count** | **int** | Number of lists in your account | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining GetFolderLists Properties in Markdown\nDESCRIPTION: Defines the properties of the GetFolderLists model, including their types and descriptions. The properties are 'lists' (an array of objects) and 'count' (an integer representing the number of lists in the folder).\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetFolderLists.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**lists** | **object[]** |  | [optional] \n**count** | **int** | Number of lists in the folder | [optional] \n```\n\n----------------------------------------\n\nTITLE: Updating Reseller Child Account with Brevo PHP Client\nDESCRIPTION: This code demonstrates how to update a child account's profile using the Brevo PHP client library. It configures API key authentication, instantiates the ResellerApi client, and calls the updateResellerChild method with the necessary parameters. The example also includes error handling to catch and display any exceptions that occur during the API call.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/ResellerApi.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\ResellerApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$childIdentifier = \"childIdentifier_example\"; // string | Either auth key or id of reseller's child\n$resellerChild = new \\Brevo\\Client\\Model\\UpdateChild(); // \\Brevo\\Client\\Model\\UpdateChild | values to update in child profile\n\ntry {\n    $apiInstance->updateResellerChild($childIdentifier, $resellerChild);\n} catch (Exception $e) {\n    echo 'Exception when calling ResellerApi->updateResellerChild: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: CreateReseller Model Properties Definition - Markdown\nDESCRIPTION: Defines the properties of the CreateReseller model including authKey (required string) for authentication and id (optional integer) for the created reseller identification.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateReseller.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**authKey** | **string** | AuthKey of Reseller child created | \n**id** | **int** | Id of Reseller child created | [optional]\n```\n\n----------------------------------------\n\nTITLE: WhatsApp Campaign Overview Model Properties\nDESCRIPTION: Definition of properties for the GetWhatsappCampaignOverview PHP class. Contains campaign identifiers, scheduling information, sender details, statistics and template data. All properties are typed and some are optional.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetWhatsappCampaignOverview.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n**id** | **int** | ID of the WhatsApp Campaign\n**campaignName** | **string** | Name of the WhatsApp Campaign\n**campaignStatus** | **string** | Status of the WhatsApp Campaign\n**scheduledAt** | **string** | UTC date-time on which WhatsApp campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format\n**senderNumber** | **string** | Sender of the WhatsApp Campaign\n**stats** | **\\\\Brevo\\\\Client\\\\Model\\\\WhatsappCampStats** | Campaign statistics\n**template** | **\\\\Brevo\\\\Client\\\\Model\\\\WhatsappCampTemplate** | Campaign template\n**createdAt** | **string** | Creation UTC date-time of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)\n**modifiedAt** | **string** | UTC date-time of last modification of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)\n```\n\n----------------------------------------\n\nTITLE: Markdown Property Table for CreateWhatsAppCampaignRecipients\nDESCRIPTION: Defines three main properties for campaign recipient targeting: excludedListIds for exclusion lists, listIds for target lists (required with scheduling), and segments for targeting specific segments (alternative to listIds).\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateWhatsAppCampaignRecipients.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| excludedListIds | int[] | List ids to exclude from the campaign | [optional] |\n| listIds | int[] | **Mandatory if scheduledAt is not empty**. List Ids to send the campaign to | [optional] |\n| segments | int[] | **Mandatory if listIds are not used**. Segment ids to send the campaign to. | [optional] |\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Documentation Structure\nDESCRIPTION: Documentation structure for each API endpoint showing HTTP method, path and description.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n*ApiName* | [**methodName**](path/to/docs) | **HTTP_METHOD** /api/path | Description\n```\n\n----------------------------------------\n\nTITLE: Sending Campaign Report as PDF with Brevo PHP Client\nDESCRIPTION: This snippet illustrates sending a campaign report as a PDF attachment via email using the Brevo PHP client. It requires the Brevo PHP SDK, GuzzleHttp, and a valid campaign ID along with a populated SendReport model (containing report recipient details). The function executes the sendReport API call and handles any resulting exceptions.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/EmailCampaignsApi.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nrequire_once(__DIR__ . '/vendor/autoload.php');\\n\\n// Configure API key authorization: api-key\\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\\n// Configure API key authorization: partner-key\\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\\n\\n$apiInstance = new Brevo\\Client\\Api\\EmailCampaignsApi(\\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\\n    new GuzzleHttp\\Client(),\\n    $config\\n);\\n$campaignId = 789; // int | Id of the campaign\\n$sendReport = new \\Brevo\\Client\\Model\\SendReport(); // \\Brevo\\Client\\Model\\SendReport | Values for send a report\\n\\ntry {\\n    $apiInstance->sendReport($campaignId, $sendReport);\\n} catch (Exception $e) {\\n    echo 'Exception when calling EmailCampaignsApi->sendReport: ', $e->getMessage(), PHP_EOL;\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining Body Class Properties in Markdown\nDESCRIPTION: A markdown table defining the properties of the Body class. It includes two properties: groupName (a required string) and subAccountIds (an optional array of integers).\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/Body.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **groupName** | **string** | The name of the group of sub-accounts | |\n| **subAccountIds** | **int[]** | Pass the list of sub-account Ids to be included in the group | [optional] |\n```\n\n----------------------------------------\n\nTITLE: Defining Body10 Class Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the Body10 class using a markdown table. It includes properties for visitor identification, message content, agent details, and message source information. Each property is described with its name, type, description, and optional notes.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/Body10.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**visitorId** | **string** | visitor's ID received <a href=\"https://developers.brevo.com/docs/conversations-webhooks\">from a webhook</a> or generated by you to <a href=\"https://developers.brevo.com/docs/customize-the-widget#identifying-existing-users\">bind existing user account to Conversations</a> | \n**text** | **string** | message text | \n**agentId** | **string** | agent ID. It can be found on agent's page or received <a href=\"https://developers.brevo.com/docs/conversations-webhooks\">from a webhook</a>. Alternatively, you can use `agentEmail` + `agentName` + `receivedFrom` instead (all 3 fields required). | [optional] \n**receivedFrom** | **string** | mark your messages to distinguish messages created by you from the others. | [optional] \n**agentEmail** | **string** | agent email. When sending messages from a standalone system, it's hard to maintain a 1-to-1 relationship between the users of both systems. In this case, an agent can be specified by their email address. | [optional] \n**agentName** | **string** | agent name | [optional] \n```\n\n----------------------------------------\n\nTITLE: CreateDomain Model Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the CreateDomain model. Specifies that the model has a single required property 'name' of type string that represents the domain name.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateDomain.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **string** | Domain name |\n```\n\n----------------------------------------\n\nTITLE: Updating User Permissions in Brevo API (PHP)\nDESCRIPTION: This snippet demonstrates how to update permissions for a user using the Brevo API. It includes setting up the API client, creating the request body, and handling the API response.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/UserApi.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\UserApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$updatePermissions = new \\Brevo\\Client\\Model\\Inviteuser(); // \\Brevo\\Client\\Model\\Inviteuser | Values to update permissions for an invited user\n\ntry {\n    $result = $apiInstance->editUserPermission($updatePermissions);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UserApi->editUserPermission: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Documenting CreateUpdateContactModel Properties in Markdown\nDESCRIPTION: Markdown table defining the properties of CreateUpdateContactModel class. Contains a single optional property 'id' of type integer that stores the contact ID when a new contact is created.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateUpdateContactModel.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | ID of the contact when a new contact is created | [optional]\n```\n\n----------------------------------------\n\nTITLE: GetExtendedContactDetailsStatistics Class Properties Definition\nDESCRIPTION: Defines the properties and their types for the GetExtendedContactDetailsStatistics class. Each property represents different metrics and statistics related to a contact's interaction with email campaigns including sent messages, bounces, opens, clicks, and other engagement metrics.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetExtendedContactDetailsStatistics.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nmessagesSent | [**\\Brevo\\Client\\Model\\GetExtendedContactDetailsStatisticsMessagesSent[]**](GetExtendedContactDetailsStatisticsMessagesSent.md) | Listing of the sent campaign for the contact | [optional] \nhardBounces | [**\\Brevo\\Client\\Model\\GetExtendedContactDetailsStatisticsMessagesSent[]**](GetExtendedContactDetailsStatisticsMessagesSent.md) | Listing of the hardbounes generated by the contact | [optional] \nsoftBounces | [**\\Brevo\\Client\\Model\\GetExtendedContactDetailsStatisticsMessagesSent[]**](GetExtendedContactDetailsStatisticsMessagesSent.md) | Listing of the softbounes generated by the contact | [optional] \ncomplaints | [**\\Brevo\\Client\\Model\\GetExtendedContactDetailsStatisticsMessagesSent[]**](GetExtendedContactDetailsStatisticsMessagesSent.md) | Listing of the complaints generated by the contact | [optional] \nunsubscriptions | [**\\Brevo\\Client\\Model\\GetExtendedContactDetailsStatisticsUnsubscriptions**](GetExtendedContactDetailsStatisticsUnsubscriptions.md) |  | [optional] \nopened | [**\\Brevo\\Client\\Model\\GetExtendedContactDetailsStatisticsOpened[]**](GetExtendedContactDetailsStatisticsOpened.md) | Listing of the openings generated by the contact | [optional] \nclicked | [**\\Brevo\\Client\\Model\\GetExtendedContactDetailsStatisticsClicked[]**](GetExtendedContactDetailsStatisticsClicked.md) | Listing of the clicks generated by the contact | [optional] \ntransacAttributes | **object[]** | Listing of the transactional attributes for the contact | [optional] \ndelivered | [**\\Brevo\\Client\\Model\\GetExtendedContactDetailsStatisticsMessagesSent[]**](GetExtendedContactDetailsStatisticsMessagesSent.md) | Listing of the delivered campaign for the contact | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining AddContactToList Properties in Markdown\nDESCRIPTION: Specifies the properties of the AddContactToList model, including 'emails' for adding contacts by email addresses and 'ids' for adding contacts by their numeric identifiers. Both properties are optional and mutually exclusive, with a maximum limit of 150 entries per request.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/AddContactToList.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**emails** | **string[]** | Mandatory if IDs are not passed, ignored otherwise. Emails to add to a list. You can pass a maximum of 150 emails for addition in one request. If you need to add the emails in bulk, please prefer /contacts/import api. | [optional] \n**ids** | **int[]** | Mandatory if Emails are not passed, ignored otherwise. Emails to add to a list. You can pass a maximum of 150 emails for addition in one request. If you need to add the emails in bulk, please prefer /contacts/import api. | [optional] \n```\n\n----------------------------------------\n\nTITLE: Link/Unlink Company with Contacts and Deals in Brevo PHP\nDESCRIPTION: Example of linking and unlinking a company with contacts and deals using the Brevo PHP client. Requires API key authentication and accepts company ID and linking details.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Api/CompaniesApi.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('api-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('api-key', 'Bearer');\n// Configure API key authorization: partner-key\n$config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKey('partner-key', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = Brevo\\Client\\Configuration::getDefaultConfiguration()->setApiKeyPrefix('partner-key', 'Bearer');\n\n$apiInstance = new Brevo\\Client\\Api\\CompaniesApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\";\n$body = new \\Brevo\\Client\\Model\\Body4();\n\ntry {\n    $apiInstance->companiesLinkUnlinkIdPatch($id, $body);\n} catch (Exception $e) {\n    echo 'Exception when calling CompaniesApi->companiesLinkUnlinkIdPatch: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: GetWebhookAuth Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties, types, descriptions and optional status for the GetWebhookAuth model class. Includes two properties: type for authentication type and token for webhook authentication.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetWebhookAuth.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **type** | **string** | Type of authentication | [optional] |\n| **token** | **string** | Webhook authentication token | [optional] |\n```\n\n----------------------------------------\n\nTITLE: Defining GetSendersListIps Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetSendersListIps model, including the IP address, domain, and weight. It uses a markdown table to clearly present the property names, types, and descriptions.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetSendersListIps.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nip | **string** | Dedicated IP available in your account | \ndomain | **string** | Domain of the IP | \nweight | **int** | Weight of the IP for this sender | \n```\n\n----------------------------------------\n\nTITLE: Defining CreateUpdateFolder Properties in Brevo PHP SDK\nDESCRIPTION: Defines the name property for the CreateUpdateFolder class, which is an optional string parameter used to specify the folder name.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateUpdateFolder.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CreateUpdateFolder\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **string** | Name of the folder | [optional]\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Documentation Structure\nDESCRIPTION: Table showing the API endpoint structure including class names, methods, HTTP requests and descriptions for various Brevo API endpoints.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nClass | Method | HTTP request | Description\n------------ | ------------- | ------------- | -------------\n*AccountApi* | [**getAccount**](docs/Api/AccountApi.md#getaccount) | **GET** /account | Get your account information, plan and credits details\n*AccountApi* | [**getAccountActivity**](docs/Api/AccountApi.md#getaccountactivity) | **GET** /organization/activities | Get user activity logs\n*CompaniesApi* | [**companiesAttributesGet**](docs/Api/CompaniesApi.md#companiesattributesget) | **GET** /companies/attributes | Get company attributes\n```\n\n----------------------------------------\n\nTITLE: GetWebhooks Model Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the GetWebhooks model, showing that it contains a webhooks property of type object array.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetWebhooks.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**webhooks** | **object[]** |  | \n```\n\n----------------------------------------\n\nTITLE: Defining CreateDomainModel Properties for Brevo PHP API\nDESCRIPTION: Documents the property structure of the CreateDomainModel class used in domain creation responses. Contains properties for domain ID, domain name, success message, and DNS records configuration. All properties are typed and some are optional.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateDomainModel.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | ID of the Domain created | \n**domainName** | **string** | Domain | [optional] \n**message** | **string** | Success message | [optional] \n**dnsRecords** | [**\\Brevo\\Client\\Model\\CreateDomainModelDnsRecords**](CreateDomainModelDnsRecords.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: CreateList Properties Table Documentation\nDESCRIPTION: Markdown table defining the required properties for creating a list, including the list name (string) and folder ID (integer) where the list should be created.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateList.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **string** | Name of the list | \n**folderId** | **int** | Id of the parent folder in which this list is to be created |\n```\n\n----------------------------------------\n\nTITLE: Defining the RequestContactImport Model Properties - Brevo PHP - PHP\nDESCRIPTION: This snippet represents a table listing and describing each property of the RequestContactImport model used in Brevo's PHP SDK for bulk importing contacts. It specifies the property names, types, descriptions, and special notes indicating mandatory and optional usage. Dependencies include the Brevo PHP SDK and referenced models for complex fields. Key parameters such as fileUrl, fileBody, and jsonBody are mutually exclusive, enforcing that at least one file source is provided, while other flags control import behaviors like contact updating, blacklisting, and notification delivery. Expected usage is as a reference guide for populating RequestContactImport instances or validating import request bodies.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/RequestContactImport.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n# RequestContactImport\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**fileUrl** | **string** | Mandatory if fileBody or jsonBody is not defined. URL of the file to be imported (no local file). Possible file formats: .txt, .csv, .json | [optional] \n**fileBody** | **string** | Mandatory if fileUrl and jsonBody is not defined. CSV content to be imported. Use semicolon to separate multiple attributes. Maximum allowed file body size is 10MB . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of file body size while parsing. Please use fileUrl instead to import bigger files. | [optional] \n**jsonBody** | [**\\Brevo\\Client\\Model\\RequestContactImportJsonBody[]**](RequestContactImportJsonBody.md) | **Mandatory if fileUrl and fileBody is not defined.** JSON content to be imported. **Maximum allowed json body size is 10MB** . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of json body size while parsing. Please use fileUrl instead to import bigger files. | [optional] \n**listIds** | **int[]** | Mandatory if newList is not defined. Ids of the lists in which the contacts shall be imported. For example, [2, 4, 7]. | [optional] \n**notifyUrl** | **string** | URL that will be called once the import process is finished. For reference, https://help.brevo.com/hc/en-us/articles/360007666479 | [optional] \n**newList** | [**\\Brevo\\Client\\Model\\RequestContactImportNewList**](RequestContactImportNewList.md) |  | [optional] \n**emailBlacklist** | **bool** | To blacklist all the contacts for email | [optional] [default to false]\n**disableNotification** | **bool** | To disable email notification | [optional] [default to false]\n**smsBlacklist** | **bool** | To blacklist all the contacts for sms | [optional] [default to false]\n**updateExistingContacts** | **bool** | To facilitate the choice to update the existing contacts | [optional] [default to true]\n**emptyContactsAttributes** | **bool** | To facilitate the choice to erase any attribute of the existing contacts with empty value. emptyContactsAttributes &#x3D; true means the empty fields in your import will erase any attribute that currently contain data in Brevo, &amp; emptyContactsAttributes &#x3D; false means the empty fields will not affect your existing data ( only available if &#x60;updateExistingContacts&#x60; set to true ) | [optional] [default to false]\n\n```\n\n----------------------------------------\n\nTITLE: Defining GetIpsFromSender Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetIpsFromSender model using a markdown table. It specifies the 'ips' property, which is an array of GetIpFromSender objects representing dedicated IPs linked to a sender.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetIpsFromSender.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**ips** | [**\\Brevo\\Client\\Model\\GetIpFromSender[]**](GetIpFromSender.md) | Dedicated IP(s) linked to a sender | \n```\n\n----------------------------------------\n\nTITLE: WhatsApp Configuration Properties Table\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the GetWhatsAppConfig model. Documents six main properties related to WhatsApp business account configuration including ID, sending limits, phone quality, account status and business verification status.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetWhatsAppConfig.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nwhatsappBusinessAccountId | string | Id of the WhatsApp business account | [optional] \nsendingLimit | string | Sending limit Information of the WhatsApp API account | [optional] \nphoneNumberQuality | string | Quality status of phone number associated with WhatsApp account. There are three quality ratings. example - **High (GREEN) , Medium (YELLOW) and Low(RED)** | [optional] \nwhatsappBusinessAccountStatus | string | Status information related to WhatsApp Api account | [optional] \nbusinessStatus | string | Verification status information of the Business account | [optional] \nphoneNumberNameStatus | string | Status of the name associated with WhatsApp Phone number | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetProducts Class Properties in Markdown\nDESCRIPTION: Describes the properties of the GetProducts class using a Markdown table. It specifies the name, type, and description of each property.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetProducts.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**products** | **object[]** |  | \n**count** | **int** | Number of products | \n```\n\n----------------------------------------\n\nTITLE: CreateEmailCampaign Properties Table\nDESCRIPTION: Markdown table defining the properties, types, descriptions and optional status for the CreateEmailCampaign model class.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateEmailCampaign.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ntag | string | Tag of the campaign | [optional]\nsender | CreateEmailCampaignSender |  |\nname | string | Name of the campaign |\nhtmlContent | string | Mandatory if htmlUrl and templateId are empty. Body of the message (HTML) | [optional]\nhtmlUrl | string | Mandatory if htmlContent and templateId are empty. Url to the message (HTML) | [optional]\ntemplateId | int | Mandatory if htmlContent and htmlUrl are empty. Id of the transactional email template with status 'active'. Used to copy only its content fetched from htmlContent/htmlUrl to an email campaign for RSS feature. | [optional]\nscheduledAt | string | Sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. If sendAtBestTime is set to true, your campaign will be sent according to the date passed (ignoring the time part). | [optional]\nsubject | string | Subject of the campaign. Mandatory if abTesting is false. Ignored if abTesting is true. | [optional]\npreviewText | string | Preview text or preheader of the email campaign | [optional]\nreplyTo | string | Email on which the campaign recipients will be able to reply to | [optional]\ntoField | string | To personalize the 'To' Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your Brevo account. If input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetOrders Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetOrders model using a markdown table. It specifies two properties: 'orders' as an array of objects, and 'count' as an integer representing the number of orders. Both properties are marked as optional.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetOrders.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**orders** | **object[]** |  | [optional] \n**count** | **int** | Number of orders | [optional] \n```\n\n----------------------------------------\n\nTITLE: Model Properties Definition in Markdown\nDESCRIPTION: Markdown table defining the properties for the Body5 model class. Contains definitions for 'name' (required string for deal name) and 'attributes' (optional object for deal creation parameters including pipeline and deal stage IDs).\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/Body5.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **string** | Name of deal | \n**attributes** | **object** | Attributes for deal creation  If you want to create a deal on a specific pipeline and stage you can use the following attributes `pipeline` and `deal_stage`.  Pipeline and deal_stage are ids you can fetch using this endpoint `/crm/pipeline/details/{pipelineID}` | [optional]\n```\n\n----------------------------------------\n\nTITLE: GetWebhook Model Properties Definition in Markdown\nDESCRIPTION: Markdown table defining the properties of the GetWebhook model, including data types, descriptions, and optional flags. The model contains fields for webhook configuration such as URL, ID, description, events, type, timestamps, batching settings, authentication, and custom headers.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetWebhook.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**url** | **string** | URL of the webhook | \n**id** | **int** | ID of the webhook | \n**description** | **string** | Description of the webhook | \n**events** | **string[]** |  | \n**type** | **string** | Type of webhook (marketing or transactional) | \n**createdAt** | **string** | Creation UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ) | \n**modifiedAt** | **string** | Last modification UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ) | \n**batched** | **bool** | To send batched webhooks | [optional] \n**auth** | [**\\Brevo\\Client\\Model\\GetWebhookAuth**](GetWebhookAuth.md) |  | [optional] \n**headers** | [**\\Brevo\\Client\\Model\\GetWebhookHeaders[]**](GetWebhookHeaders.md) | Custom headers to be send with webhooks | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining AbTestCampaignResultClickedLinks Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the AbTestCampaignResultClickedLinks model using a Markdown table. It specifies two properties: versionA and versionB, both of type AbTestVersionClicks.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/AbTestCampaignResultClickedLinks.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nversionA | [\\Brevo\\Client\\Model\\AbTestVersionClicks](AbTestVersionClicks.md) |  | \nversionB | [\\Brevo\\Client\\Model\\AbTestVersionClicks](AbTestVersionClicks.md) |  | \n```\n\n----------------------------------------\n\nTITLE: CreateApiKeyResponse Properties Table Definition\nDESCRIPTION: Markdown table defining the properties of the CreateApiKeyResponse model, including their types and descriptions.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateApiKeyResponse.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **string** | Status of the API operation. | [optional] \n**key** | **string** | API Key | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining GetTransacEmailContent Properties in Markdown\nDESCRIPTION: Markdown table describing the properties, types, and descriptions for the GetTransacEmailContent model class. Documents seven core properties including email, subject, templateId, date, events, body, and attachmentCount.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetTransacEmailContent.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nemail | **string** | Email address to which transactional email has been sent | \nsubject | **string** | Subject of the sent email | \ntemplateId | **int** | Id of the template | [optional] \ndate | **string** | Date on which transactional email was sent | \nevents | [**\\Brevo\\Client\\Model\\GetTransacEmailContentEvents[]**](GetTransacEmailContentEvents.md) | Series of events which occurred on the transactional email | \nbody | **string** | Actual content of the transactional email that has been sent | \nattachmentCount | **int** | Count of the attachments that were sent in the email |\n```\n\n----------------------------------------\n\nTITLE: GetStatsByDevice Model Properties Definition in Markdown\nDESCRIPTION: Defines the properties of the GetStatsByDevice model including mappings for desktop, mobile, tablet and unknown device statistics. Each property is a map of GetDeviceBrowserStats objects keyed by string identifiers.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetStatsByDevice.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**desktop** | [**map[string,\\Brevo\\Client\\Model\\GetDeviceBrowserStats]**](GetDeviceBrowserStats.md) | Statistics of the campaign on the basis of desktop devices | [optional] \n**mobile** | [**map[string,\\Brevo\\Client\\Model\\GetDeviceBrowserStats]**](GetDeviceBrowserStats.md) | Statistics of the campaign on the basis of mobile devices | [optional] \n**tablet** | [**map[string,\\Brevo\\Client\\Model\\GetDeviceBrowserStats]**](GetDeviceBrowserStats.md) | Statistics of the campaign on the basis of tablet devices | [optional] \n**unknown** | [**map[string,\\Brevo\\Client\\Model\\GetDeviceBrowserStats]**](GetDeviceBrowserStats.md) | Statistics of the campaign on the basis of unknown devices | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetReportsReports Model Properties in PHP\nDESCRIPTION: Property definitions for an email campaign reporting model including timestamps, delivery metrics, engagement statistics, and error counts. Each property is strongly typed and represents a specific metric tracked for email campaigns.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetReportsReports.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndate: \\DateTime      // Date of the statistics\nrequests: int         // Number of requests for the date\ndelivered: int        // Number of delivered emails for the date\nhardBounces: int      // Number of hardbounces for the date\nsoftBounces: int      // Number of softbounces for the date\nclicks: int           // Number of clicks for the date\nuniqueClicks: int     // Number of unique clicks for the date\nopens: int            // Number of openings for the date\nuniqueOpens: int      // Number of unique openings for the date\nspamReports: int      // Number of complaints (spam reports) for the date\nblocked: int          // Number of blocked emails for the date\ninvalid: int          // Number of invalid emails for the date\nunsubscribed: int     // Number of unsubscribed emails for the date\n```\n\n----------------------------------------\n\nTITLE: AddCredits Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the AddCredits model including SMS and email credit fields. Both fields are optional integers but at least one must be provided when adding credits to a child account.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/AddCredits.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**sms** | **int** | Required if email credits are empty. SMS credits to be added to the child account | [optional] \n**email** | **int** | Required if sms credits are empty. Email credits to be added to the child account | [optional]\n```\n\n----------------------------------------\n\nTITLE: Properties Table for GetTransacEmailsListTransactionalEmails Model\nDESCRIPTION: Markdown table defining the properties, types, and descriptions for the GetTransacEmailsListTransactionalEmails model. Includes required and optional fields for tracking transactional email details.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetTransacEmailsListTransactionalEmails.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nemail | **string** | Email address to which transactional email has been sent | \nsubject | **string** | Subject of the sent email | \ntemplateId | **int** | Id of the template | [optional] \nmessageId | **string** | Message Id of the sent email | \nuuid | **string** | Unique id of the email sent to a particular contact | \ndate | **string** | Date on which transactional email was sent | \nfrom | **string** | Email address of the sender from which the email was sent | [optional] \ntags | **string[]** | Tags used for your email | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining Body7 Model Properties - PHP\nDESCRIPTION: Specifies the data structure properties for the Body7 model class that handles contact and company associations with deals. Includes arrays for linking and unlinking both contacts and companies via their IDs.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/Body7.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @var int[] Contact ids for contacts to be linked with deal\n */\nprivate $linkContactIds;\n\n/**\n * @var int[] Contact ids for contacts to be unlinked from deal\n */\nprivate $unlinkContactIds;\n\n/**\n * @var string[] Company ids to be linked with deal\n */\nprivate $linkCompanyIds;\n\n/**\n * @var string[] Company ids to be unlinked from deal\n */\nprivate $unlinkCompanyIds;\n```\n\n----------------------------------------\n\nTITLE: Defining GetSendersListSenders Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetSendersListSenders model, including their types, descriptions, and optional status. It covers sender ID, name, email, active status, and associated IPs.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetSendersListSenders.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | Id of the sender | \n**name** | **string** | From Name associated to the sender | \n**email** | **string** | From Email associated to the sender | \n**active** | **bool** | Status of sender (true&#x3D;activated, false&#x3D;deactivated) | \n**ips** | [**\\Brevo\\Client\\Model\\GetSendersListIps[]**](GetSendersListIps.md) | List of dedicated IP(s) available in the account. This data is displayed only for dedicated IPs | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetExternalFeedByUUIDHeaders Properties in PHP\nDESCRIPTION: Specifies the properties of the GetExternalFeedByUUIDHeaders model. It includes two optional string properties: 'name' for the header name and 'value' for the header value.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetExternalFeedByUUIDHeaders.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **string** | Name of the header | [optional] \n**value** | **string** | Value of the header | [optional]\n```\n\n----------------------------------------\n\nTITLE: CreateUpdateBatchProducts Model Properties Schema\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the CreateUpdateBatchProducts model. Includes products array and updateEnabled flag.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateUpdateBatchProducts.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nproducts | [**\\\\Brevo\\\\Client\\\\Model\\\\CreateUpdateProducts[]**](CreateUpdateProducts.md) | array of products objects | \nupdateEnabled | **bool** | Facilitate to update the existing categories in the same request (updateEnabled &#x3D; true) | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetReports Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetReports model using a Markdown table. It specifies the name, type, description, and notes for the 'reports' property.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetReports.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| **reports** | [**\\Brevo\\Client\\Model\\GetReportsReports[]**](GetReportsReports.md) |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: CompaniesList Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the CompaniesList model. Contains a single property 'items' which is an array of Company objects.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CompaniesList.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**items** | [**\\\\Brevo\\\\Client\\\\Model\\\\Company[]**](Company.md) | List of compaies | [optional]\n```\n\n----------------------------------------\n\nTITLE: Documenting CreateSenderModel Properties in Markdown\nDESCRIPTION: Documents the properties of the CreateSenderModel class including the sender ID and email configuration status flags (SPF and DKIM). Each property includes type information and optional status.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateSenderModel.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | ID of the Sender created | \n**spfError** | **bool** | Status of SPF configuration for the sender (true &#x3D; SPF not well configured, false &#x3D; SPF well configured) | [optional] \n**dkimError** | **bool** | Status of DKIM configuration for the sender (true &#x3D; DKIM not well configured, false &#x3D; DKIM well configured) | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining Body12 Model Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the Body12 model using a markdown table. It includes the property names, types, descriptions, and optional notes for visitorId, text, agentId, and groupId.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/Body12.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**visitorId** | **string** | visitor's ID received <a href=\"https://developers.brevo.com/docs/conversations-webhooks\">from a webhook</a> or generated by you to <a href=\"https://developers.brevo.com/docs/customize-the-widget#identifying-existing-users\">bind existing user account to Conversations</a> | \n**text** | **string** | message text | \n**agentId** | **string** | agent ID. It can be found on agent's page or received <a href=\"https://developers.brevo.com/docs/conversations-webhooks\">from a webhook</a>. Optional if `groupId` is set. | [optional] \n**groupId** | **string** | group ID. It can be found on group's page. Optional if `agentId` is set. | [optional] \n```\n\n----------------------------------------\n\nTITLE: GetTransacEmailsList Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the GetTransacEmailsList model, including count and transactionalEmails fields with their types and descriptions.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetTransacEmailsList.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncount | int | Total number of transactional emails available on your account according to the passed filter | [optional] \ntransactionalEmails | \\Brevo\\Client\\Model\\GetTransacEmailsListTransactionalEmails[] |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetProcess Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetProcess model using a markdown table. It includes the property names, data types, descriptions, and notes on optional fields.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetProcess.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | Id of the process | \n**status** | **string** | Status of the process | \n**name** | **string** | Process name | \n**exportUrl** | **string** | URL on which send export the of contacts once the process is completed | [optional]\n```\n\n----------------------------------------\n\nTITLE: GetScheduledEmailByBatchId Model Properties Definition\nDESCRIPTION: Defines the properties of the GetScheduledEmailByBatchId model including count of batches and batch details array. The count property stores the total number of batches as an integer, while batches property contains an array of GetScheduledEmailByBatchIdBatches objects.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetScheduledEmailByBatchId.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**count** | **int** | Total number of batches | [optional] \n**batches** | [**\\Brevo\\Client\\Model\\GetScheduledEmailByBatchIdBatches[]**](GetScheduledEmailByBatchIdBatches.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining CreateAttributeEnumeration Properties in PHP\nDESCRIPTION: Describes the properties of the CreateAttributeEnumeration model class. Contains two fields: value (integer) representing the ID of the enumeration value, and label (string) representing the display text for the value.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/CreateAttributeEnumeration.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nvalue | int | Id of the value | \nlabel | string | Label of the value | \n```\n\n----------------------------------------\n\nTITLE: Defining GetExtendedContactDetailsStatisticsMessagesSent Properties in PHP\nDESCRIPTION: Specifies the properties of the GetExtendedContactDetailsStatisticsMessagesSent model, including campaignId (integer) and eventTime (string). These properties represent the ID of the campaign that generated the event and the UTC date-time of the event respectively.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetExtendedContactDetailsStatisticsMessagesSent.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @property int $campaignId ID of the campaign which generated the event\n * @property string $eventTime UTC date-time of the event\n */\n```\n\n----------------------------------------\n\nTITLE: BlockDomain Model Properties Definition\nDESCRIPTION: Defines a property schema for the BlockDomain model containing a single domain property representing the domain name to be blocked.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/BlockDomain.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**domain** | **string** | name of the domain to be blocked |\n```\n\n----------------------------------------\n\nTITLE: Defining ComponentItems Model Properties in Markdown\nDESCRIPTION: Specifies the properties of the ComponentItems model, including their names, types, and optional descriptions. The model has two optional string properties: 'type' and 'text'.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/ComponentItems.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**type** | **string** |  | [optional] \n**text** | **string** |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: Documenting Optional Preview Text Parameter for Email Campaigns in Markdown\nDESCRIPTION: This snippet shows the documentation for the optional 'previewText' parameter used in email campaigns.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n- Added **previewText** | **string** | Preview text or preheader of the email campaign | [optional] \n```\n\n----------------------------------------\n\nTITLE: Documenting Optional Parameters for Contact Filtering in Markdown\nDESCRIPTION: This snippet shows the documentation for optional parameters 'segmentId' and 'listIds' used for filtering contacts in the API.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n **segmentId** | **int**| Id of the segment. **Either listIds or segmentId can be passed.** | [optional]\n **listIds** | [**int[]**](../Model/int.md)| Ids of the list. **Either listIds or segmentId can be passed.** | [optional]\n```\n\n----------------------------------------\n\nTITLE: Documenting Optional Source Parameter for WhatsApp Templates in Markdown\nDESCRIPTION: This snippet shows the documentation for the optional 'source' parameter used when returning WhatsApp templates.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n    **source** | **string**| source of the template | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetWhatsappCampaigns Properties in PHP\nDESCRIPTION: Model class properties definition for WhatsApp campaign data with array of campaign objects and total count. The campaigns property contains an array of GetWhatsappCampaignsCampaigns objects, while count stores the total number of retrieved campaigns.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/GetWhatsappCampaigns.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @var \\Brevo\\Client\\Model\\GetWhatsappCampaignsCampaigns[] $campaigns\n */\nprotected $campaigns;\n\n/**\n * @var int $count Number of WhatsApp campaigns retrived\n */\nprotected $count;\n```\n\n----------------------------------------\n\nTITLE: Defining AbTestVersionStats Properties in PHP\nDESCRIPTION: Defines two properties for tracking A/B test version statistics: versionA and versionB. Each property stores the percentage of events occurring for the respective version as a string value.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/AbTestVersionStats.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nversionA | string | percentage of an event for version A | \nversionB | string | percentage of an event for version B |\n```\n\n----------------------------------------\n\nTITLE: Defining AbTestVersionClicksInner Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the AbTestVersionClicksInner model using a Markdown table. It specifies the name, type, and description of each property.\nSOURCE: https://github.com/getbrevo/brevo-php/blob/main/docs/Model/AbTestVersionClicksInner.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nlink | **string** | URL of the link | \nclicksCount | **int** | Number of times a link is clicked | \nclickRate | **string** | Percentage of clicks of link with respect to total clicks | \n```"
  }
]