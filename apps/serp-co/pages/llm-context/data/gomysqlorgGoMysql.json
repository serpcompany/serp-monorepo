[
  {
    "owner": "go-mysql-org",
    "repo": "go-mysql",
    "content": "TITLE: Initializing MySQL Connection using Go MySQL Driver\nDESCRIPTION: Demonstrates how to use the go-mysql driver with the Go database/sql interface. It shows the basic setup for opening a connection to a MySQL database using a Data Source Name (DSN).\nSOURCE: https://github.com/go-mysql-org/go-mysql/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"database/sql\"\n\n\t_ \"github.com/go-mysql-org/go-mysql/driver\"\n)\n\nfunc main() {\n\t// dsn format: \"user:password@addr?dbname\"\n\tdsn := \"root@127.0.0.1:3306?test\"\n\tdb, _ := sql.Open(\"mysql\", dsn)\n\tdb.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up MySQL Replication with go-mysql\nDESCRIPTION: Example of how to implement MySQL replication using go-mysql. It shows how to create a binlog syncer with server configuration and start syncing with a specified binlog file position or GTID, then process events from the stream.\nSOURCE: https://github.com/go-mysql-org/go-mysql/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/go-mysql-org/go-mysql/replication\"\n\t\"os\"\n)\n// Create a binlog syncer with a unique server id, the server id must be different from other MySQL's. \n// flavor is mysql or mariadb\ncfg := replication.BinlogSyncerConfig {\n\tServerID: 100,\n\tFlavor:   \"mysql\",\n\tHost:     \"127.0.0.1\",\n\tPort:     3306,\n\tUser:     \"root\",\n\tPassword: \"\",\n}\nsyncer := replication.NewBinlogSyncer(cfg)\n\n// Start sync with specified binlog file and position\nstreamer, _ := syncer.StartSync(mysql.Position{binlogFile, binlogPos})\n\n// or you can start a gtid replication like\n// gtidSet, _ := mysql.ParseGTIDSet(mysql.MySQLFlavor, \"de278ad0-2106-11e4-9f8e-6edd0ca20947:1-2\")\n// streamer, _ := syncer.StartSyncGTID(gtidSet)\n// the mysql GTID set is like this \"de278ad0-2106-11e4-9f8e-6edd0ca20947:1-2\" and uses mysql.MySQLFlavor\n// the mariadb GTID set is like this \"0-1-100\" and uses mysql.MariaDBFlavor\n\nfor {\n\tev, _ := streamer.GetEvent(context.Background())\n\t// Dump event\n\tev.Dump(os.Stdout)\n}\n\n// or we can use a timeout context\nfor {\n\tctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)\n\tev, err := streamer.GetEvent(ctx)\n\tcancel()\n\n\tif err == context.DeadlineExceeded {\n\t\t// meet timeout\n\t\tcontinue\n\t}\n\n\tev.Dump(os.Stdout)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a MySQL Connection Pool\nDESCRIPTION: Example of how to create and use a connection pool for MySQL connections. It demonstrates creating the pool with specified parameters and getting a connection from the pool for database operations.\nSOURCE: https://github.com/go-mysql-org/go-mysql/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/go-mysql-org/go-mysql/client\"\n)\n\npool := client.NewPool(log.Debugf, 100, 400, 5, \"127.0.0.1:3306\", `root`, ``, `test`)\n// ...\nconn, _ := pool.GetConn(ctx)\ndefer pool.PutConn(conn)\n\nconn.Execute() / conn.Begin() / etc...\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming for Large MySQL SELECT Responses\nDESCRIPTION: Shows how to implement streaming for large SELECT query responses using the MySQL client. This approach avoids storing the entire result set in memory by processing each row through a callback function.\nSOURCE: https://github.com/go-mysql-org/go-mysql/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// ...\nvar result mysql.Result\nerr := conn.ExecuteSelectStreaming(`select id, name from table LIMIT 100500`, &result, func(row []mysql.FieldValue) error {\n    for idx, val := range row {\n    \tfield := result.Fields[idx]\n    \t// You must not save FieldValue.AsString() value after this callback is done.\n    \t// Copy it if you need.\n    \t// ...\n    }\n    return nil\n}, nil)\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing MySQL Data Synchronization with Canal\nDESCRIPTION: Demonstrates how to use the Canal package to synchronize MySQL data to other systems. This example shows how to configure Canal, set up an event handler for processing row events, and start the synchronization process.\nSOURCE: https://github.com/go-mysql-org/go-mysql/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/go-mysql-org/go-mysql/canal\"\n)\n\ntype MyEventHandler struct {\n\tcanal.DummyEventHandler\n}\n\nfunc (h *MyEventHandler) OnRow(e *canal.RowsEvent) error {\n\tlog.Infof(\"%s %v\\n\", e.Action, e.Rows)\n\treturn nil\n}\n\nfunc (h *MyEventHandler) String() string {\n\treturn \"MyEventHandler\"\n}\n\nfunc main() {\n\tcfg := canal.NewDefaultConfig()\n\tcfg.Addr = \"127.0.0.1:3306\"\n\tcfg.User = \"root\"\n\t// We only care table canal_test in test db\n\tcfg.Dump.TableDB = \"test\"\n\tcfg.Dump.Tables = []string{\"canal_test\"}\n\n\tc, err := canal.NewCanal(cfg)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Register a handler to handle RowsEvent\n\tc.SetEventHandler(&MyEventHandler{})\n\n\t// Start canal\n\tc.Run()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal MySQL Server Implementation\nDESCRIPTION: Shows how to implement a basic MySQL server that can accept connections from MySQL clients. This example creates a server that listens on a specified port, accepts a connection, and handles client commands.\nSOURCE: https://github.com/go-mysql-org/go-mysql/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"net\"\n\n\t\"github.com/go-mysql-org/go-mysql/server\"\n)\n\nfunc main() {\n\t// Listen for connections on localhost port 4000\n\tl, err := net.Listen(\"tcp\", \"127.0.0.1:4000\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Accept a new connection once\n\tc, err := l.Accept()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Create a connection with user root and an empty password.\n\t// You can use your own handler to handle command here.\n\tconn, err := server.NewConn(c, \"root\", \"\", server.EmptyHandler{})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// as long as the client keeps sending commands, keep handling them\n\tfor {\n\t\tif err := conn.HandleCommand(); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom NamedValueChecker for Go MySQL Driver\nDESCRIPTION: Demonstrates how to implement a custom NamedValueChecker for handling query arguments before they are passed to the driver. This example shows handling of uint64 values.\nSOURCE: https://github.com/go-mysql-org/go-mysql/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport (\n \"database/sql\"\n\n \"github.com/go-mysql-org/go-mysql/driver\"\n)\n\nfunc main() {\n driver.AddNamedValueChecker(func(nv *sqlDriver.NamedValue) error {\n  rv := reflect.ValueOf(nv.Value)\n  if rv.Kind() != reflect.Uint64 {\n   // fallback to the default value converter when the value is not a uint64\n   return sqlDriver.ErrSkip\n  }\n\n  return nil\n })\n\n conn, err := sql.Open(\"mysql\", \"root@127.0.0.1:3306/test\")\n defer conn.Close()\n\n stmt, err := conn.Prepare(\"select * from table where id = ?\")\n defer stmt.Close()\n var val uint64 = math.MaxUint64\n // without the NamedValueChecker this query would fail\n result, err := stmt.Query(val)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Driver Options for Go MySQL Driver\nDESCRIPTION: Illustrates how to set custom driver options using the SetDSNOptions function. This example adds a 'no_metadata' option to modify the connection capabilities.\nSOURCE: https://github.com/go-mysql-org/go-mysql/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n \"database/sql\"\n\n \"github.com/go-mysql-org/go-mysql/driver\"\n)\n\nfunc main() {\n driver.SetDSNOptions(map[string]DriverOption{\n  \"no_metadata\": func(c *client.Conn, value string) error {\n   c.SetCapability(mysql.CLIENT_OPTIONAL_RESULTSET_METADATA)\n   return nil\n  },\n })\n\n // dsn format: \"user:password@addr/dbname?\"\n dsn := \"root@127.0.0.1:3306/test?no_metadata=true\"\n db, _ := sql.Open(dsn)\n db.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Field Type Hierarchy and Mappings\nDESCRIPTION: Detailed table showing the complete hierarchy of MySQL field types and their corresponding type(), real_type(), and binlog_type() values. Includes all field classes and their inheritance relationships.\nSOURCE: https://github.com/go-mysql-org/go-mysql/blob/master/notes/field_type.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n+------------------------------------------------------------+-------------------------------+-----------------------+------------------------+\n|                           Field                            |            type()             |      real_type()      |      binlog_type()     |\n+------------------------------------------------------------+-------------------------------+-----------------------+------------------------+\n|                                                            |                               |                       |                        |\n| Field (abstract)                                           |                               |                       |                        |\n| |                                                          |                               |                       |                        |\n| +--Field_bit                                               | MYSQL_TYPE_BIT                |                       |                        |\n| |  +--Field_bit_as_char                                    |                               |                       |                        |\n| |                                                          |                               |                       |                        |\n| +--Field_num (abstract)                                    |                               |                       |                        |\n| |  |  +--Field_real (abstract)                             |                               |                       |                        |\n| |  |     +--Field_decimal                                  | MYSQL_TYPE_DECIMAL            |                       |                        |\n| |  |     +--Field_float                                    | MYSQL_TYPE_FLOAT              |                       |                        |\n| |  |     +--Field_double                                   | MYSQL_TYPE_DOUBLE             |                       |                        |\n| |  |                                                       |                               |                       |                        |\n| |  +--Field_new_decimal                                    | MYSQL_TYPE_NEWDECIMAL         |                       |                        |\n| |  +--Field_short                                          | MYSQL_TYPE_SHORT              |                       |                        |\n| |  +--Field_medium                                         | MYSQL_TYPE_INT24              |                       |                        |\n| |  +--Field_long                                           | MYSQL_TYPE_LONG               |                       |                        |\n| |  +--Field_longlong                                       | MYSQL_TYPE_LONGLONG           |                       |                        |\n| |  +--Field_tiny                                           | MYSQL_TYPE_TINY               |                       |                        |\n| |     +--Field_year                                        | MYSQL_TYPE_YEAR               |                       |                        |\n| |                                                          |                               |                       |                        |\n| +--Field_str (abstract)                                    |                               |                       |                        |\n| |  +--Field_longstr                                        |                               |                       |                        |\n| |  |  +--Field_string                                      | MYSQL_TYPE_STRING             | MYSQL_TYPE_STRING     |                        |\n| |  |  +--Field_varstring                                   | MYSQL_TYPE_VARCHAR            | MYSQL_TYPE_VARCHAR    |                        |\n| |  |  +--Field_blob                                        | MYSQL_TYPE_BLOB               |                       |                        |\n| |  |     +--Field_geom                                     | MYSQL_TYPE_GEOMETRY           |                       |                        |\n| |  |     +--Field_vector                                   | MYSQL_TYPE_VECTOR             |                       |                        |\n| |  |     +--Field_json                                     | MYSQL_TYPE_JSON               |                       |                        |\n| |  |        +--Field_typed_array                           | real_type_to_type(m_elt_type) | m_elt_type            | MYSQL_TYPE_TYPED_ARRAY |\n| |  |                                                       |                               |                       |                        |\n| |  +--Field_null                                           | MYSQL_TYPE_NULL               |                       |                        |\n| |  +--Field_enum                                           | MYSQL_TYPE_STRING             | MYSQL_TYPE_ENUM       |                        |\n| |     +--Field_set                                         |                               | MYSQL_TYPE_SET        |                        |\n| |                                                          |                               |                       |                        |\n| +--Field_temporal (abstract)                               |                               |                       |                        |\n|    +--Field_time_common (abstract)                         |                               |                       |                        |\n|    |  +--Field_time                                        | MYSQL_TYPE_TIME               |                       |                        |\n|    |  +--Field_timef                                       | MYSQL_TYPE_TIME               | MYSQL_TYPE_TIME2      | MYSQL_TYPE_TIME2       |\n|    |                                                       |                               |                       |                        |\n|    +--Field_temporal_with_date (abstract)                  |                               |                       |                        |\n|       +--Field_newdate                                     | MYSQL_TYPE_DATE               | MYSQL_TYPE_NEWDATE    |                        |\n|       +--Field_temporal_with_date_and_time (abstract)      |                               |                       |                        |\n|          +--Field_timestamp                                | MYSQL_TYPE_TIMESTAMP          |                       |                        |\n|          +--Field_datetime                                 | MYSQL_TYPE_DATETIME           |                       |                        |\n|          +--Field_temporal_with_date_and_timef (abstract)  |                               |                       |                        |\n|             +--Field_timestampf                            | MYSQL_TYPE_TIMESTAMP          | MYSQL_TYPE_TIMESTAMP2 | MYSQL_TYPE_TIMESTAMP2  |\n|             +--Field_datetimef                             | MYSQL_TYPE_DATETIME           | MYSQL_TYPE_DATETIME2  | MYSQL_TYPE_DATETIME2   |\n+------------------------------------------------------------+-------------------------------+-----------------------+------------------------+\n```\n\n----------------------------------------\n\nTITLE: Using Custom Driver Name with GORM in Go\nDESCRIPTION: Shows how to use a custom driver name with the GORM ORM library. This can be useful when integrating the go-mysql driver with GORM.\nSOURCE: https://github.com/go-mysql-org/go-mysql/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  _ \"github.com/go-mysql-org/go-mysql/driver\"\n  \"gorm.io/driver/mysql\"\n  \"gorm.io/gorm\"\n)\n\ndb, err := gorm.Open(mysql.New(mysql.Config{\n  DriverName: \"gomysql\",\n  DSN: \"gorm:gorm@127.0.0.1:3306/test\",\n}))\n```\n\n----------------------------------------\n\nTITLE: MySQL Field Type Method Implementations\nDESCRIPTION: Shows the default implementation of real_type() and binlog_type() methods from MySQL's field.h. The binlog_type() includes special handling for temporal types with fractional seconds, storing them with their real type codes instead of the default type().\nSOURCE: https://github.com/go-mysql-org/go-mysql/blob/master/notes/field_type.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n  // From mysql-8.0/sql/field.h Field\n\n  // ...\n  virtual enum_field_types real_type() const { return type(); }\n  virtual enum_field_types binlog_type() const {\n    /*\n      Binlog stores field->type() as type code by default.\n      This puts MYSQL_TYPE_STRING in case of CHAR, VARCHAR, SET and ENUM,\n      with extra data type details put into metadata.\n\n      We cannot store field->type() in case of temporal types with\n      fractional seconds: TIME(n), DATETIME(n) and TIMESTAMP(n),\n      because binlog records with MYSQL_TYPE_TIME, MYSQL_TYPE_DATETIME\n      type codes do not have metadata.\n      So for temporal data types with fractional seconds we'll store\n      real_type() type codes instead, i.e.\n      MYSQL_TYPE_TIME2, MYSQL_TYPE_DATETIME2, MYSQL_TYPE_TIMESTAMP2,\n      and put precision into metatada.\n\n      Note: perhaps binlog should eventually be modified to store\n      real_type() instead of type() for all column types.\n    */\n    return type();\n  }\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Docker/Podman MySQL Container Setup\nDESCRIPTION: Command to run a MySQL 8.0 container with GTID mode enabled, using either Docker or Podman, exposing port 3307 and configuring root access.\nSOURCE: https://github.com/go-mysql-org/go-mysql/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npodman run \\\n--rm \\\n--env MYSQL_ALLOW_EMPTY_PASSWORD=1 \\\n--env MYSQL_ROOT_HOST='%' \\\n-p3307:3306 \\\n-it \\\ncontainer-registry.oracle.com/mysql/community-server:8.0 \\\n--gtid-mode=ON \\\n--enforce-gtid-consistency=ON\n```\n\n----------------------------------------\n\nTITLE: Migrating to go-mysql-org/go-mysql Repository\nDESCRIPTION: Provides instructions on how to migrate an existing project to use the go-mysql-org/go-mysql repository instead of the original siddontang/go-mysql repository.\nSOURCE: https://github.com/go-mysql-org/go-mysql/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nreplace github.com/siddontang/go-mysql => github.com/go-mysql-org/go-mysql v1.12.0\n```\n\n----------------------------------------\n\nTITLE: Running Local Go Tests with Database Parameters\nDESCRIPTION: Command line flags for running local go-mysql tests with custom database connection parameters including database name, host, password, port, and user.\nSOURCE: https://github.com/go-mysql-org/go-mysql/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n  -db string\n  -host string\n  -pass string\n  -port string\n  -user string\n```\n\n----------------------------------------\n\nTITLE: Example Go Test Command\nDESCRIPTION: Example command showing how to run tests in the client directory with specific database and port parameters.\nSOURCE: https://github.com/go-mysql-org/go-mysql/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd client\n$ go test -args -db test2 -port 3307\n```"
  }
]