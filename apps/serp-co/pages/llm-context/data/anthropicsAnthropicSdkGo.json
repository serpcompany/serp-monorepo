[
  {
    "owner": "anthropics",
    "repo": "anthropic-sdk-go",
    "content": "TITLE: Error Handling in Anthropic Go SDK\nDESCRIPTION: Demonstrates how to handle API errors by using the errors.As pattern to check for *anthropic.Error types. Shows how to access request and response information for debugging.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n_, err := client.Messages.New(context.TODO(), anthropic.MessageNewParams{\n\tMaxTokens: 1024,\n\tMessages: []anthropic.MessageParam{{\n\t\tRole: anthropic.MessageParamRoleUser,\n\t\tContent: []anthropic.ContentBlockParamUnion{{\n\t\t\tOfRequestTextBlock: &anthropic.TextBlockParam{Text: \"What is a quaternion?\", CacheControl: anthropic.CacheControlEphemeralParam{}, Citations: []anthropic.TextCitationParamUnion{{\n\t\t\t\tOfRequestCharLocationCitation: &anthropic.CitationCharLocationParam{CitedText: \"cited_text\", DocumentIndex: 0, DocumentTitle: anthropic.String(\"x\"), EndCharIndex: 0, StartCharIndex: 0},\n\t\t\t}}},\n\t\t}},\n\t}},\n\tModel: anthropic.ModelClaude3_7SonnetLatest,\n})\nif err != nil {\n\tvar apierr *anthropic.Error\n\tif errors.As(err, &apierr) {\n\t\tprintln(string(apierr.DumpRequest(true)))  // Prints the serialized HTTP request\n\t\tprintln(string(apierr.DumpResponse(true))) // Prints the serialized HTTP response\n\t}\n\tpanic(err.Error()) // GET \"/v1/messages\": 400 Bad Request { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Message Creation with Anthropic API\nDESCRIPTION: Example showing how to initialize the client and send a basic message request to Claude. Demonstrates core message creation functionality with error handling.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/anthropics/anthropic-sdk-go\"\n\t\"github.com/anthropics/anthropic-sdk-go/option\"\n)\n\nfunc main() {\n\tclient := anthropic.NewClient(\n\t\toption.WithAPIKey(\"my-anthropic-api-key\"), // defaults to os.LookupEnv(\"ANTHROPIC_API_KEY\")\n\t)\n\tmessage, err := client.Messages.New(context.TODO(), anthropic.MessageNewParams{\n\t\tMaxTokens: 1024,\n\t\tMessages: []anthropic.MessageParam{{\n\t\t\tRole: anthropic.MessageParamRoleUser,\n\t\t\tContent: []anthropic.ContentBlockParamUnion{{\n\t\t\t\tOfRequestTextBlock: &anthropic.TextBlockParam{Text: \"What is a quaternion?\"},\n\t\t\t}},\n\t\t}},\n\t\tModel: anthropic.ModelClaude3_7SonnetLatest,\n\t})\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tfmt.Printf(\"%+v\\n\", message.Content)\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Conversations with Claude\nDESCRIPTION: Example demonstrating how to maintain conversation context by appending messages and handling responses in a conversational flow.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmessages := []anthropic.MessageParam{\n    anthropic.NewUserMessage(anthropic.NewTextBlock(\"What is my first name?\")),\n}\n\nmessage, err := client.Messages.New(context.TODO(), anthropic.MessageNewParams{\n    Model:     anthropic.ModelClaude3_7SonnetLatest,\n    Messages:  messages,\n    MaxTokens: 1024,\n})\nif err != nil {\n    panic(err)\n}\n\nfmt.Printf(\"%+v\\n\", message.Content)\n\nmessages = append(messages, message.ToParam())\nmessages = append(messages, anthropic.NewUserMessage(\n    anthropic.NewTextBlock(\"My full name is John Doe\"),\n))\n\nmessage, err = client.Messages.New(context.TODO(), anthropic.MessageNewParams{\n    Model:     anthropic.ModelClaude3_7SonnetLatest,\n    Messages:  messages,\n    MaxTokens: 1024,\n})\n\nfmt.Printf(\"%+v\\n\", message.Content)\n```\n\n----------------------------------------\n\nTITLE: Streaming Responses from Claude\nDESCRIPTION: Implementation of streaming API responses, showing how to handle different event types and accumulate messages incrementally.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ncontent := \"What is a quaternion?\"\n\nstream := client.Messages.NewStreaming(context.TODO(), anthropic.MessageNewParams{\n    Model:     anthropic.ModelClaude3_7SonnetLatest,\n    MaxTokens: 1024,\n    Messages: []anthropic.MessageParam{\n        anthropic.NewUserMessage(anthropic.NewTextBlock(content)),\n    },\n})\n\nmessage := anthropic.Message{}\nfor stream.Next() {\n    event := stream.Current()\n    err := message.Accumulate(event)\n    if err != nil {\n        panic(err)\n    }\n\n    switch eventVariant := event.AsAny().(type) {\n        case anthropic.ContentBlockDeltaEvent:\n        switch deltaVariant := eventVariant.Delta.AsAny().(type) {\n        case anthropic.TextDelta:\n            print(deltaVariant.Text)\n        }\n\n    }\n\n    if stream.Err() != nil {\n        panic(stream.Err())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tool Calling Integration\nDESCRIPTION: Comprehensive example of implementing tool calling functionality with Claude, including schema generation and coordinate lookup implementation.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/anthropics/anthropic-sdk-go\"\n\t\"github.com/invopop/jsonschema\"\n)\n\nfunc main() {\n\tclient := anthropic.NewClient()\n\n\tcontent := \"Where is San Francisco?\"\n\n\tprintln(\"[user]: \" + content)\n\n\tmessages := []anthropic.MessageParam{\n\t\tanthropic.NewUserMessage(anthropic.NewTextBlock(content)),\n\t}\n\n\ttoolParams := []anthropic.ToolParam{\n\t\t{\n\t\t\tName:        \"get_coordinates\",\n\t\t\tDescription: anthropic.String(\"Accepts a place as an address, then returns the latitude and longitude coordinates.\"),\n\t\t\tInputSchema: GetCoordinatesInputSchema,\n\t\t},\n\t}\n\ttools := make([]anthropic.ToolUnionParam, len(toolParams))\n\tfor i, toolParam := range toolParams {\n\t\ttools[i] = anthropic.ToolUnionParam{OfTool: &toolParam}\n\t}\n\n\tfor {\n\t\tmessage, err := client.Messages.New(context.TODO(), anthropic.MessageNewParams{\n\t\t\tModel:     anthropic.ModelClaude3_7SonnetLatest,\n\t\t\tMaxTokens: 1024,\n\t\t\tMessages:  messages,\n\t\t\tTools:     tools,\n\t\t})\n\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tprint(color(\"[assistant]: \"))\n\t\tfor _, block := range message.Content {\n\t\t\tswitch block := block.AsAny().(type) {\n\t\t\tcase anthropic.TextBlock:\n\t\t\t\tprintln(block.Text)\n\t\t\t\tprintln()\n\t\t\tcase anthropic.ToolUseBlock:\n\t\t\t\tinputJSON, _ := json.Marshal(block.Input)\n\t\t\t\tprintln(block.Name + \": \" + string(inputJSON))\n\t\t\t\tprintln()\n\t\t\t}\n\t\t}\n\n\t\tmessages = append(messages, message.ToParam())\n\t\ttoolResults := []anthropic.ContentBlockParamUnion{}\n\n\t\tfor _, block := range message.Content {\n\t\t\tswitch variant := block.AsAny().(type) {\n\t\t\tcase anthropic.ToolUseBlock:\n\t\t\t\tprint(color(\"[user (\" + block.Name + \")]: \"))\n\n\t\t\t\tvar response interface{}\n\t\t\t\tswitch block.Name {\n\t\t\t\tcase \"get_coordinates\":\n\t\t\t\t\tvar input struct {\n\t\t\t\t\t\tLocation string `json:\"location\"`\n\t\t\t\t\t}\n\n\t\t\t\t\terr := json.Unmarshal([]byte(variant.JSON.Input.Raw()), &input)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tpanic(err)\n\t\t\t\t\t}\n\n\t\t\t\t\tresponse = GetCoordinates(input.Location)\n\t\t\t\t}\n\n\t\t\t\tb, err := json.Marshal(response)\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\n\t\t\t\tprintln(string(b))\n\n\t\t\t\ttoolResults = append(toolResults, anthropic.NewToolResultBlock(block.ID, string(b), false))\n\t\t\t}\n\n\t\t}\n\t\tif len(toolResults) == 0 {\n\t\t\tbreak\n\t\t}\n\t\tmessages = append(messages, anthropic.NewUserMessage(toolResults...))\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Messages with Anthropic API in Go\nDESCRIPTION: Creates a new message using the Anthropic API. Requires a context object and message parameters to generate a response from Claude models.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/api.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nclient.Messages.New(ctx context.Context, body anthropic.MessageNewParams) (anthropic.Message, error)\n```\n\n----------------------------------------\n\nTITLE: Handling Response Objects in Anthropic Go SDK\nDESCRIPTION: Shows how to work with response objects including handling null, absent, or invalid fields using the special JSON field. Demonstrates accessing extra fields not specified in the struct definition.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nif res.Name == \"\" {\n\t// true if `\"name\"` was unmarshalled successfully\n\tres.JSON.Name.IsPresent()\n\n\tres.JSON.Name.IsExplicitNull() // true if `\"name\"` is explicitly null\n\tres.JSON.Name.Raw() == \"\"          // true if `\"name\"` field does not exist\n\n\t// When the API returns data that cannot be coerced to the expected type:\n\tif !res.JSON.Name.IsPresent() && res.JSON.Name.Raw() != \"\" {\n\t\traw := res.JSON.Name.Raw()\n\n\t\tlegacyName := struct{\n\t\t\tFirst string `json:\"first\"`\n\t\t\tLast  string `json:\"last\"`\n\t\t}{}\n\t\tjson.Unmarshal([]byte(raw), &legacyName)\n\t\tname = legacyName.First + \" \" + legacyName.Last\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Extra Fields in Response Objects\nDESCRIPTION: Shows how to access extra fields in the JSON response that were not specified in the struct definition, which can be useful for handling API features not yet present in the SDK.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nbody := res.JSON.ExtraFields[\"my_unexpected_field\"].Raw()\n```\n\n----------------------------------------\n\nTITLE: Working with Response Unions in Anthropic Go SDK\nDESCRIPTION: Demonstrates how to handle union types in API responses. Shows checking variant fields, handling string variants, and using type switching to handle different union variants.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype AnimalUnion struct {\n\tOfString string `json:\",inline\"`\n\tName     string `json:\"name\"`\n\tOwner    Person `json:\"owner\"`\n\t// ...\n\tJSON struct {\n\t\tOfString resp.Field\n\t\tName     resp.Field\n\t\tOwner    resp.Field\n\t\t// ...\n\t}\n}\n\n// If animal variant\nif animal.Owner.Address.JSON.ZipCode == \"\" {\n\tpanic(\"missing zip code\")\n}\n\n// If string variant\nif !animal.OfString == \"\" {\n\tpanic(\"expected a name\")\n}\n\n// Switch on the variant\nswitch variant := animalOrName.AsAny().(type) {\ncase string:\ncase Dog:\ncase Cat:\ndefault:\n\tpanic(\"unexpected type\")\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Pagination with AutoPaging in Anthropic Go SDK\nDESCRIPTION: Demonstrates how to use the ListAutoPaging method to automatically iterate through all pages of a paginated response, handling the pagination logic automatically.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: go\nCODE:\n```\niter := client.Beta.Messages.Batches.ListAutoPaging(context.TODO(), anthropic.BetaMessageBatchListParams{\n\tLimit: anthropic.Int(20),\n})\n// Automatically fetches more pages as needed.\nfor iter.Next() {\n\tbetaMessageBatch := iter.Current()\n\tfmt.Printf(\"%+v\\n\", betaMessageBatch)\n}\nif err := iter.Err(); err != nil {\n\tpanic(err.Error())\n}\n```\n\n----------------------------------------\n\nTITLE: Using RequestOptions in Anthropic Go SDK\nDESCRIPTION: Shows how to use the functional options pattern to customize client behavior and individual requests. Demonstrates adding headers and undocumented JSON fields to requests.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nclient := anthropic.NewClient(\n\t// Adds a header to every request made by the client\n\toption.WithHeader(\"X-Some-Header\", \"custom_header_info\"),\n)\n\nclient.Messages.New(context.TODO(), ...,\n\t// Override the header\n\toption.WithHeader(\"X-Some-Header\", \"some_other_custom_header_info\"),\n\t// Add an undocumented field to the request body, using sjson syntax\n\toption.WithJSONSet(\"some.json.path\", map[string]string{\"my\": \"object\"}),\n)\n```\n\n----------------------------------------\n\nTITLE: Manual Pagination in Anthropic Go SDK\nDESCRIPTION: Shows how to manually handle pagination by using the List method and GetNextPage helper to fetch and process one page at a time, giving more control over the pagination process.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npage, err := client.Beta.Messages.Batches.List(context.TODO(), anthropic.BetaMessageBatchListParams{\n\tLimit: anthropic.Int(20),\n})\nfor page != nil {\n\tfor _, batch := range page.Data {\n\t\tfmt.Printf(\"%+v\\n\", batch)\n\t}\n\tpage, err = page.GetNextPage()\n}\nif err != nil {\n\tpanic(err.Error())\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timeouts in Anthropic Go SDK\nDESCRIPTION: Shows how to configure request timeouts using context and per-retry timeouts using request options. Demonstrates best practices for handling long-running requests.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// This sets the timeout for the request, including all the retries.\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Minute)\ndefer cancel()\nclient.Messages.New(\n\tctx,\n\tanthropic.MessageNewParams{\n\t\tMaxTokens: 1024,\n\t\tMessages: []anthropic.MessageParam{{\n\t\t\tRole: anthropic.MessageParamRoleUser,\n\t\t\tContent: []anthropic.ContentBlockParamUnion{{\n\t\t\t\tOfRequestTextBlock: &anthropic.TextBlockParam{Text: \"What is a quaternion?\"},\n\t\t\t}},\n\t\t}},\n\t\tModel: anthropic.ModelClaude3_7SonnetLatest,\n\t},\n\t// This sets the per-retry timeout\n\toption.WithRequestTimeout(20*time.Second),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Retries in Anthropic Go SDK\nDESCRIPTION: Demonstrates how to configure the automatic retry behavior for API requests. Shows setting global retry limits and overriding them for specific requests.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// Configure the default for all requests:\nclient := anthropic.NewClient(\n\toption.WithMaxRetries(0), // default is 2\n)\n\n// Override per-request:\nclient.Messages.New(\n\tcontext.TODO(),\n\tanthropic.MessageNewParams{\n\t\tMaxTokens: 1024,\n\t\tMessages: []anthropic.MessageParam{{\n\t\t\tRole: anthropic.MessageParamRoleUser,\n\t\t\tContent: []anthropic.ContentBlockParamUnion{{\n\t\t\t\tOfRequestTextBlock: &anthropic.TextBlockParam{Text: \"What is a quaternion?\"},\n\t\t\t}},\n\t\t}},\n\t\tModel: anthropic.ModelClaude3_7SonnetLatest,\n\t},\n\toption.WithMaxRetries(5),\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Response Data in Anthropic Go SDK\nDESCRIPTION: Demonstrates how to access raw HTTP response data using the WithResponseInto option. This is useful for examining response headers, status codes, and other details.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// Create a variable to store the HTTP response\nvar response *http.Response\nmessage, err := client.Messages.New(\n\tcontext.TODO(),\n\tanthropic.MessageNewParams{\n\t\tMaxTokens: 1024,\n\t\tMessages: []anthropic.MessageParam{{\n\t\t\tRole: anthropic.MessageParamRoleUser,\n\t\t\tContent: []anthropic.ContentBlockParamUnion{{\n\t\t\t\tOfRequestTextBlock: &anthropic.TextBlockParam{Text: \"What is a quaternion?\", CacheControl: anthropic.CacheControlEphemeralParam{}, Citations: []anthropic.TextCitationParamUnion{{\n\t\t\t\t\tOfRequestCharLocationCitation: &anthropic.CitationCharLocationParam{CitedText: \"cited_text\", DocumentIndex: 0, DocumentTitle: anthropic.String(\"x\"), EndCharIndex: 0, StartCharIndex: 0},\n\t\t\t\t}}},\n\t\t\t}},\n\t\t}},\n\t\tModel: anthropic.ModelClaude3_7SonnetLatest,\n\t},\n\toption.WithResponseInto(&response),\n)\nif err != nil {\n\t// handle error\n}\nfmt.Printf(\"%+v\\n\", message)\n\nfmt.Printf(\"Status Code: %d\\n\", response.StatusCode)\nfmt.Printf(\"Headers: %+#v\\n\", response.Header)\n```\n\n----------------------------------------\n\nTITLE: Making Custom Requests to Undocumented Endpoints in Anthropic Go SDK\nDESCRIPTION: Shows how to make requests to undocumented endpoints using HTTP verbs like client.Get and client.Post. This approach respects RequestOptions on the client, such as retries.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nvar (\n    // params can be an io.Reader, a []byte, an encoding/json serializable object,\n    // or a \"…Params\" struct defined in this library.\n    params map[string]interface{}\n\n    // result can be an []byte, *http.Response, a encoding/json deserializable object,\n    // or a model defined in this library.\n    result *http.Response\n)\nerr := client.Post(context.Background(), \"/unspecified\", params, &result)\nif err != nil {\n    …\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Request Unions in Anthropic Go SDK\nDESCRIPTION: Demonstrates how to use union structs in requests where only one field can be non-zero. Shows how to create a union instance and mutate fields using accessor methods.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Only one field can be non-zero, use param.IsOmitted() to check if a field is set\ntype AnimalUnionParam struct {\n\tOfCat \t *Cat              `json:\",omitzero,inline`\n\tOfDog    *Dog              `json:\",omitzero,inline`\n}\n\nanimal := AnimalUnionParam{\n\tOfCat: &Cat{\n\t\tName: \"Whiskers\",\n\t\tOwner: PersonParam{\n\t\t\tAddress: AddressParam{Street: \"3333 Coyote Hill Rd\", Zip: 0},\n\t\t},\n\t},\n}\n\n// Mutating a field\nif address := animal.GetOwner().GetAddress(); address != nil {\n\taddress.ZipCode = 94304\n}\n```\n\n----------------------------------------\n\nTITLE: Using Undocumented Request Parameters in Anthropic Go SDK\nDESCRIPTION: Demonstrates how to make requests using undocumented parameters with the WithQuerySet or WithJSONSet methods.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nparams := FooNewParams{\n    ID:   \"id_xxxx\",\n    Data: FooNewParamsData{\n        FirstName: anthropic.String(\"John\"),\n    },\n}\nclient.Foo.New(context.Background(), params, option.WithJSONSet(\"data.last_name\", \"Doe\"))\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware in Anthropic Go SDK\nDESCRIPTION: Shows how to apply middleware to requests using the WithMiddleware option. This example demonstrates a logger middleware that logs request and response details.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nfunc Logger(req *http.Request, next option.MiddlewareNext) (res *http.Response, err error) {\n\t// Before the request\n\tstart := time.Now()\n\tLogReq(req)\n\n\t// Forward the request to the next handler\n\tres, err = next(req)\n\n\t// Handle stuff after the request\n\tend := time.Now()\n\tLogRes(res, err, start - end)\n\n    return res, err\n}\n\nclient := anthropic.NewClient(\n\toption.WithMiddleware(Logger),\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating Anthropic Go SDK with Amazon Bedrock\nDESCRIPTION: Demonstrates how to use the Anthropic Go SDK with Amazon Bedrock by using the bedrock.WithLoadDefaultConfig option, which reads the default AWS configuration.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_19\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/anthropics/anthropic-sdk-go\"\n\t\"github.com/anthropics/anthropic-sdk-go/bedrock\"\n)\n\nfunc main() {\n\tclient := anthropic.NewClient(\n\t\tbedrock.WithLoadDefaultConfig(context.Background()),\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Anthropic Go SDK with Google Vertex AI\nDESCRIPTION: Shows how to use the Anthropic Go SDK with Google Vertex AI by using the vertex.WithGoogleAuth option, which reads the Application Default Credentials.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_20\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"github.com/anthropics/anthropic-sdk-go\"\n\t\"github.com/anthropics/anthropic-sdk-go/vertex\"\n)\n\nfunc main() {\n\tclient := anthropic.NewClient(\n\t\tvertex.WithGoogleAuth(context.Background(), \"us-central1\", \"id-xxx\"),\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Tokens for Messages in Anthropic API\nDESCRIPTION: Counts the number of tokens in a message before sending it to the API. This allows estimation of request size and usage costs.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/api.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient.Messages.CountTokens(ctx context.Context, body anthropic.MessageCountTokensParams) (anthropic.MessageTokensCount, error)\n```\n\n----------------------------------------\n\nTITLE: Creating Message Batches with Anthropic API\nDESCRIPTION: Creates a new batch of messages to be processed asynchronously. This allows sending multiple message requests in a single API call.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/api.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nclient.Messages.Batches.New(ctx context.Context, body anthropic.MessageBatchNewParams) (anthropic.MessageBatch, error)\n```\n\n----------------------------------------\n\nTITLE: Transitioning from anthropic.F() to Native Go Types\nDESCRIPTION: Illustrates how to update code that previously used anthropic.F() and param.Field[T] to use native Go types and omitzero tags in the new SDK version.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/MIGRATION.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfoo = FooParams{\n-    RequiredString: anthropic.String(\"hello\"),\n+    RequiredString: \"hello\",\n\n-    OptionalString: anthropic.String(\"hi\"),\n+    OptionalString: anthropic.String(\"hi\"),\n\n-    Array: anthropic.F([]BarParam{\n-        BarParam{Prop: ... }\n-    }),\n+    Array: []BarParam{\n+        BarParam{Prop: ... }\n+    },\n\n-    RequiredObject: anthropic.F(BarParam{ ... }),\n+    RequiredObject: BarParam{ ... },\n\n-    OptionalObject: anthropic.F(BarParam{ ... }),\n+    OptionalObject: BarParam{ ... },\n\n-    StringEnum: anthropic.F[BazEnum](\"baz-ok\"),\n+    StringEnum: \"baz-ok\",\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Message Batches with Anthropic API\nDESCRIPTION: Lists all message batches based on provided query parameters. Returns a paginated list of batches for organization and tracking.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/api.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nclient.Messages.Batches.List(ctx context.Context, query anthropic.MessageBatchListParams) (pagination.Page[anthropic.MessageBatch], error)\n```\n\n----------------------------------------\n\nTITLE: Deleting Message Batch in Anthropic API\nDESCRIPTION: Deletes a message batch by its ID. This permanently removes the batch and its associated data from the server.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/api.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nclient.Messages.Batches.Delete(ctx context.Context, messageBatchID string) (anthropic.DeletedMessageBatch, error)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Results from Message Batch\nDESCRIPTION: Fetches the detailed results from a completed message batch. Returns individual responses for each message in the batch.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/api.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nclient.Messages.Batches.Results(ctx context.Context, messageBatchID string) (anthropic.MessageBatchIndividualResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Model Information with Anthropic SDK Go\nDESCRIPTION: Methods for retrieving information about Anthropic models. The Get method retrieves a specific model by ID, while List returns all available models with optional pagination.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/api.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nclient.Models.Get(ctx context.Context, modelID string) (anthropic.ModelInfo, error)\n```\n\nLANGUAGE: go\nCODE:\n```\nclient.Models.List(ctx context.Context, query anthropic.ModelListParams) (pagination.Page[anthropic.ModelInfo], error)\n```\n\n----------------------------------------\n\nTITLE: Beta API Model Operations in Anthropic SDK Go\nDESCRIPTION: Beta endpoints for working with Anthropic models. These methods follow the same pattern as standard endpoints but include beta features and return beta-specific response types.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/api.md#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nclient.Beta.Models.Get(ctx context.Context, modelID string) (anthropic.BetaModelInfo, error)\n```\n\nLANGUAGE: go\nCODE:\n```\nclient.Beta.Models.List(ctx context.Context, query anthropic.BetaModelListParams) (pagination.Page[anthropic.BetaModelInfo], error)\n```\n\n----------------------------------------\n\nTITLE: Creating New Beta Messages in Anthropic Go SDK\nDESCRIPTION: Method for creating new messages using the Beta API endpoint. Takes a context and message parameters, returns a BetaMessage object or error.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/api.md#2025-04-21_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nclient.Beta.Messages.New(ctx context.Context, params anthropic.BetaMessageNewParams) (anthropic.BetaMessage, error)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Message Batch by ID\nDESCRIPTION: Fetches information about a specific message batch using its ID. Provides status and metadata about the batch processing.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/api.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nclient.Messages.Batches.Get(ctx context.Context, messageBatchID string) (anthropic.MessageBatch, error)\n```\n\n----------------------------------------\n\nTITLE: Counting Tokens for Beta Messages in Anthropic Go SDK\nDESCRIPTION: Method for counting tokens in a message using the Beta API endpoint. Takes a context and token counting parameters, returns a token count object or error.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/api.md#2025-04-21_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nclient.Beta.Messages.CountTokens(ctx context.Context, params anthropic.BetaMessageCountTokensParams) (anthropic.BetaMessageTokensCount, error)\n```\n\n----------------------------------------\n\nTITLE: Creating a new message batch with Anthropic Go SDK\nDESCRIPTION: Creates a new message batch using the Beta Messages Batches API. This method sends a POST request to /v1/messages/batches with beta flag enabled.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/api.md#2025-04-21_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nclient.Beta.Messages.Batches.New(ctx context.Context, params anthropic.BetaMessageBatchNewParams) (anthropic.BetaMessageBatch, error)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a message batch with Anthropic Go SDK\nDESCRIPTION: Gets details of a specific message batch by its ID. This method sends a GET request to /v1/messages/batches/{message_batch_id} with beta flag enabled.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/api.md#2025-04-21_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nclient.Beta.Messages.Batches.Get(ctx context.Context, messageBatchID string, query anthropic.BetaMessageBatchGetParams) (anthropic.BetaMessageBatch, error)\n```\n\n----------------------------------------\n\nTITLE: Listing message batches with Anthropic Go SDK\nDESCRIPTION: Lists all message batches with pagination support. This method sends a GET request to /v1/messages/batches with beta flag enabled.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/api.md#2025-04-21_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nclient.Beta.Messages.Batches.List(ctx context.Context, params anthropic.BetaMessageBatchListParams) (pagination.Page[anthropic.BetaMessageBatch], error)\n```\n\n----------------------------------------\n\nTITLE: Deleting a message batch with Anthropic Go SDK\nDESCRIPTION: Deletes a specific message batch by its ID. This method sends a DELETE request to /v1/messages/batches/{message_batch_id} with beta flag enabled.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/api.md#2025-04-21_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nclient.Beta.Messages.Batches.Delete(ctx context.Context, messageBatchID string, body anthropic.BetaMessageBatchDeleteParams) (anthropic.BetaDeletedMessageBatch, error)\n```\n\n----------------------------------------\n\nTITLE: Cancelling Message Batch Processing\nDESCRIPTION: Cancels an in-progress message batch, stopping any pending message processing. Returns the updated batch status information.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/api.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nclient.Messages.Batches.Cancel(ctx context.Context, messageBatchID string) (anthropic.MessageBatch, error)\n```\n\n----------------------------------------\n\nTITLE: Canceling a message batch with Anthropic Go SDK\nDESCRIPTION: Cancels a running message batch by its ID. This method sends a POST request to /v1/messages/batches/{message_batch_id}/cancel with beta flag enabled.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/api.md#2025-04-21_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nclient.Beta.Messages.Batches.Cancel(ctx context.Context, messageBatchID string, body anthropic.BetaMessageBatchCancelParams) (anthropic.BetaMessageBatch, error)\n```\n\n----------------------------------------\n\nTITLE: Retrieving message batch results with Anthropic Go SDK\nDESCRIPTION: Gets the results for a specific message batch by its ID. This method sends a GET request to /v1/messages/batches/{message_batch_id}/results with beta flag enabled.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/api.md#2025-04-21_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nclient.Beta.Messages.Batches.Results(ctx context.Context, messageBatchID string, query anthropic.BetaMessageBatchResultsParams) (anthropic.BetaMessageBatchIndividualResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Setting up the Anthropic Go SDK environment\nDESCRIPTION: Commands to install dependencies and build the SDK. This process sets up the development environment for the Anthropic Go SDK.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ ./scripts/bootstrap\n$ ./scripts/build\n```\n\n----------------------------------------\n\nTITLE: Adding an example to the Anthropic Go SDK\nDESCRIPTION: Structure for adding a new example to the SDK. This snippet shows the basic Go package and main function structure for creating an example.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running an example in the Anthropic Go SDK\nDESCRIPTION: Command to run a specific example in the SDK. This allows developers to execute and test individual examples.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ go run ./examples/<your-example>\n```\n\n----------------------------------------\n\nTITLE: Using local Anthropic Go SDK in another project\nDESCRIPTION: Command to modify go.mod for using a local version of the SDK. This allows developers to use a local copy of the SDK in their projects for testing or development purposes.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ go mod edit -replace github.com/anthropics/anthropic-sdk-go=/path/to/anthropic-sdk-go\n```\n\n----------------------------------------\n\nTITLE: Setting up mock server for Anthropic Go SDK tests\nDESCRIPTION: Command to set up a mock server using Prism for running tests. This is required for most tests in the SDK to simulate API responses.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ npx prism mock path/to/your/openapi.yml\n```\n\n----------------------------------------\n\nTITLE: Running tests for Anthropic Go SDK\nDESCRIPTION: Command to execute the test suite for the SDK. This runs all the tests to ensure the SDK is functioning correctly.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ ./scripts/test\n```\n\n----------------------------------------\n\nTITLE: Formatting Anthropic Go SDK code\nDESCRIPTION: Command to format the SDK code using gofmt. This ensures consistent code style across the project.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ ./scripts/format\n```\n\n----------------------------------------\n\nTITLE: Migrating Required and Optional Parameters in Go\nDESCRIPTION: Demonstrates the changes in defining required and optional parameters in struct definitions, transitioning from param.Field[T] to native types with omitzero tags.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/MIGRATION.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype FooParams struct {\n-        Age  param.Field[int64]  `json:\"age,required\"`\n-        Name param.Field[string] `json:\"name\"`\n+        Age  int64               `json:\"age,required\"` // <== Notice no omitzero\n+        Name param.Opt[string]   `json:\"name,omitzero\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Parameter Serialization in Go\nDESCRIPTION: Shows the difference in JSON serialization between the old and new SDK versions, highlighting the change in handling zero values for required fields.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/MIGRATION.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n_ = FooParams{\n    Name: anthropic.String(\"Jerry\")\n}\n`{\"name\": \"Jerry\"}` // (after serialization)\n```\n\nLANGUAGE: go\nCODE:\n```\n_ = FooParams{\n    Name: anthropic.String(\"Jerry\")\n}\n`{\"name\": \"Jerry\", \"age\": 0}` // <== Notice the age field\n```\n\n----------------------------------------\n\nTITLE: Updating Struct Definitions with omitzero Tags in Go\nDESCRIPTION: Shows how to update struct definitions in the SDK to use omitzero tags and native Go types instead of param.Field[T].\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/MIGRATION.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype FooParams struct {\n-    RequiredString param.Field[string]   `json:\"required_string,required\"`\n+    RequiredString string                `json:\"required_string,required\"`\n\n-    OptionalString param.Field[string]   `json:\"optional_string\"`\n+    OptionalString param.Opt[string]     `json:\"optional_string,omitzero\"`\n\n-    Array param.Field[[]BarParam]        `json\"array\"`\n+    Array []BarParam                     `json\"array,omitzero\"`\n\n-    Map param.Field[map[string]BarParam] `json\"map\"`\n+    Map map[string]BarParam              `json\"map,omitzero\"`\n\n-    RequiredObject param.Field[BarParam] `json:\"required_object,required\"`\n+    RequiredObject BarParam              `json:\"required_object,omitzero,required\"`\n\n-    OptionalObject param.Field[BarParam] `json:\"optional_object\"`\n+    OptionalObject BarParam              `json:\"optional_object,omitzero\"`\n\n-    StringEnum     param.Field[BazEnum]  `json:\"string_enum\"`\n+    StringEnum     BazEnum               `json:\"string_enum,omitzero\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Union Types from Interfaces to Structs in Go\nDESCRIPTION: Demonstrates the transition from using interfaces for union types to using structs with fields for each variant in the new SDK version.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/MIGRATION.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype AnimalParam interface {\n\tImplAnimalParam()\n}\n\nfunc (Dog)         ImplAnimalParam() {}\nfunc (Cat)         ImplAnimalParam() {}\n```\n\nLANGUAGE: go\nCODE:\n```\ntype AnimalUnionParam struct {\n\tOfCat \t *Cat              `json:\",omitzero,inline`\n\tOfDog    *Dog              `json:\",omitzero,inline`\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nvar dog AnimalParam = DogParam{\n\tName: \"spot\", ...\n}\nvar cat AnimalParam = CatParam{\n\tName: \"whiskers\", ...\n}\n```\n\nLANGUAGE: go\nCODE:\n```\ndog := AnimalUnionParam{\n\tOfDog: &DogParam{Name: \"spot\", ... },\n}\ncat := AnimalUnionParam{\n\tOfCat: &CatParam{Name: \"whiskers\", ... },\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nvar name string\nswitch v := animal.(type) {\ncase Dog:\n\tname = v.Name\ncase Cat:\n\tname = v.Name\n}\n```\n\nLANGUAGE: go\nCODE:\n```\n// Accessing fields\nvar name *string = animal.GetName()\n```\n\n----------------------------------------\n\nTITLE: Sending Explicit Null Values in Go\nDESCRIPTION: Shows how to update code to send explicit null values using the new SDK's param.NullOpt[T]() and param.NullObj[T]() functions.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/MIGRATION.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n- var nullObj param.Field[BarParam] = param.Null[BarParam]()\n+ var nullObj BarParam              = param.NullObj[BarParam]()\n\n- var nullPrimitive param.Field[int64] = param.Null[int64]()\n+ var nullPrimitive param.Opt[int64]   = param.NullOpt[int64]()\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Values in Go SDK\nDESCRIPTION: Demonstrates how to send custom values using the new .WithExtraField() method instead of the removed anthropic.Raw[T](any) function.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/MIGRATION.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfoo := FooParams{\n     A: param.String(\"hello\"),\n-    B: param.Raw[string](12) // sending `12` instead of a string\n}\n+ foo.WithExtraFields(map[string]any{\n+    \"B\": 12,\n+ })\n```\n\n----------------------------------------\n\nTITLE: Checking for Presence of Optional Fields in Go\nDESCRIPTION: Shows the change from .IsNull() to .IsPresent() for checking the presence of optional fields in responses.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/MIGRATION.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n- if !resp.Foo.JSON.Bar.IsNull() {\n+ if resp.Foo.JSON.Bar.IsPresent() {\n    println(\"bar is present:\", resp.Foo.Bar)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw JSON of Response in Go\nDESCRIPTION: Demonstrates the change in accessing raw JSON of a response, moving from .JSON.RawJSON() to .RawJSON().\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/MIGRATION.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n- resp.Foo.JSON.RawJSON()\n+ resp.Foo.RawJSON()\n```\n\n----------------------------------------\n\nTITLE: Installing Anthropic Go SDK\nDESCRIPTION: Basic import statement for using the Anthropic Go SDK in your project.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/anthropics/anthropic-sdk-go\" // imported as anthropic\n)\n```\n\n----------------------------------------\n\nTITLE: Documenting Git Changelog Links\nDESCRIPTION: Git commit references and changelog comparison links showing version differences over time, including commit hashes and issue references.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFull Changelog: [v0.2.0-beta.2...v0.2.0-beta.3](https://github.com/anthropics/anthropic-sdk-go/compare/v0.2.0-beta.2...v0.2.0-beta.3)\n```\n\n----------------------------------------\n\nTITLE: Documenting Git Commit References\nDESCRIPTION: Git commit references with associated issue numbers and commit hashes for tracking changes.\nSOURCE: https://github.com/anthropics/anthropic-sdk-go/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* add hash of OpenAPI spec/config inputs to .stats.yml ([#154](https://github.com/anthropics/anthropic-sdk-go/issues/154)) ([76b91b5](https://github.com/anthropics/anthropic-sdk-go/commit/76b91b56fbf42fe8982e7b861885db179b1bdcc5))\n```"
  }
]