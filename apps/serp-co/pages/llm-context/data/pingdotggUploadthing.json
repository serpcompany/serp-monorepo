[
  {
    "owner": "pingdotgg",
    "repo": "uploadthing",
    "content": "TITLE: Creating a File Router with Multiple Upload Routes in TypeScript\nDESCRIPTION: Example of creating a file router with various route configurations in UploadThing. It demonstrates different route types including profile pictures, message attachments, strict image uploads, media posts, and routes with awaited server data.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/file-routes/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUploadthing, type FileRouter } from \"uploadthing/server\";\n\nconst f = createUploadthing();\n\nexport const uploadRouter = {\n  // Example \"profile picture upload\" route - these can be named whatever you want!\n  profilePicture: f([\"image\"])\n    .middleware(({ req }) => auth(req))\n    .onUploadComplete((data) => console.log(\"file\", data)),\n\n  // This route takes an attached image OR video\n  messageAttachment: f([\"image\", \"video\"])\n    .middleware(({ req }) => auth(req))\n    .onUploadComplete((data) => console.log(\"file\", data)),\n\n  // Takes exactly ONE image up to 2MB\n  strictImageAttachment: f({\n    image: { maxFileSize: \"2MB\", maxFileCount: 1, minFileCount: 1 },\n  })\n    .middleware(({ req }) => auth(req))\n    .onUploadComplete((data) => console.log(\"file\", data)),\n\n  // Takes up to 4 2mb images and/or 1 256mb video\n  mediaPost: f({\n    image: { maxFileSize: \"2MB\", maxFileCount: 4 },\n    video: { maxFileSize: \"256MB\", maxFileCount: 1 },\n  })\n    .middleware(({ req }) => auth(req))\n    .onUploadComplete((data) => console.log(\"file\", data)),\n\n  // Takes up to 4 2mb images, and the client will not resolve\n  // the upload until the `onUploadComplete` resolved.\n  withAwaitedServerData: f(\n    { image: { maxFileSize: \"2MB\", maxFileCount: 4 } },\n    { awaitServerData: true },\n  )\n    .middleware(({ req }) => auth(req))\n    .onUploadComplete((data) => {\n      return { foo: \"bar\" as const };\n    }),\n} satisfies FileRouter;\n\nexport type UploadRouter = typeof uploadRouter;\n```\n\n----------------------------------------\n\nTITLE: Using UploadButton Component in a React Application\nDESCRIPTION: This example demonstrates how to implement the UploadButton component in a React application with event handlers for upload completion, errors, and other lifecycle events. It also shows how to preprocess files before uploading.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/react/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UploadButton } from \"@uploadthing/react\";\n\nimport { OurFileRouter } from \"./api/uploadthing/core\";\n\nexport const OurUploadButton = () => (\n  <UploadButton<OurFileRouter>\n    endpoint=\"imageUploader\"\n    onClientUploadComplete={(res) => {\n      // Do something with the response\n      console.log(\"Files: \", res);\n      alert(\"Upload Completed\");\n    }}\n    onUploadError={(error: Error) => {\n      // Do something with the error.\n      alert(`ERROR! ${error.message}`);\n    }}\n    onBeforeUploadBegin={(files) => {\n      // Preprocess files before uploading (e.g. rename them)\n      return files.map(\n        (f) => new File([f], \"renamed-\" + f.name, { type: f.type }),\n      );\n    }}\n    onUploadBegin={(name) => {\n      // Do something once upload begins\n      console.log(\"Uploading: \", name);\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Using Route Builder Methods with Validation in UploadThing\nDESCRIPTION: Example showing how to use the route builder's methods including input validation with Zod, middleware execution, error handling, and upload completion handling in UploadThing.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/file-routes/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\n\nf([\"image\"])\n  .input(z.object({ foo: z.string() }))\n  .middleware(async ({ req, input }) => {\n    input;\n    // ^? { foo: string }\n    return {};\n  })\n  .onUploadError(({ error, fileKey }) => {})\n  .onUploadComplete(async (opts) => {});\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Presigned URL using TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to upload files to a presigned URL using the Fetch API. It creates a FormData object with the file and sends a PUT request to the presigned URL.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/uploading-files/page.mdx#2025-04-13_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nconst formData = new FormData();\nformData.append(\"file\", file);\n\nawait fetch(presigned.url, {\n  method: \"PUT\",\n  body: formData,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding SSR Support for UploadThing in Next.js Root Layout\nDESCRIPTION: Enhancing the user experience by adding server-side rendering support for UploadThing to avoid initial loading states.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/appdir/page.mdx#2025-04-13_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextSSRPlugin } from \"@uploadthing/react/next-ssr-plugin\";\nimport { extractRouterConfig } from \"uploadthing/server\";\n\nimport { ourFileRouter } from \"~/app/api/uploadthing/core\";\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <NextSSRPlugin\n          /**\n           * The `extractRouterConfig` will extract **only** the route configs\n           * from the router to prevent additional information from being\n           * leaked to the client. The data passed to the client is the same\n           * as if you were to fetch `/api/uploadthing` directly.\n           */\n          routerConfig={extractRouterConfig(ourFileRouter)}\n        />\n        {children}\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a FileRouter for UploadThing in Next.js\nDESCRIPTION: Core implementation of the FileRouter that defines upload endpoints, middleware for authentication, and post-upload processing.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/appdir/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUploadthing, type FileRouter } from \"uploadthing/next\";\nimport { UploadThingError } from \"uploadthing/server\";\n\nconst f = createUploadthing();\n\nconst auth = (req: Request) => ({ id: \"fakeId\" }); // Fake auth function\n\n// FileRouter for your app, can contain multiple FileRoutes\nexport const ourFileRouter = {\n  // Define as many FileRoutes as you like, each with a unique routeSlug\n  imageUploader: f({\n    image: {\n      /**\n       * For full list of options and defaults, see the File Route API reference\n       * @see https://docs.uploadthing.com/file-routes#route-config\n       */\n      maxFileSize: \"4MB\",\n      maxFileCount: 1,\n    },\n  })\n    // Set permissions and file types for this FileRoute\n    .middleware(async ({ req }) => {\n      // This code runs on your server before upload\n      const user = await auth(req);\n\n      // If you throw, the user will not be able to upload\n      if (!user) throw new UploadThingError(\"Unauthorized\");\n\n      // Whatever is returned here is accessible in onUploadComplete as `metadata`\n      return { userId: user.id };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      // This code RUNS ON YOUR SERVER after upload\n      console.log(\"Upload complete for userId:\", metadata.userId);\n\n      console.log(\"file url\", file.ufsUrl);\n\n      // !!! Whatever is returned here is sent to the clientside `onClientUploadComplete` callback\n      return { uploadedBy: metadata.userId };\n    }),\n} satisfies FileRouter;\n\nexport type OurFileRouter = typeof ourFileRouter;\n```\n\n----------------------------------------\n\nTITLE: Configuring UploadThing Router with Public and Private Routes in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up an UploadThing router with both public and private file routes. The public route is protected by rate limiting, while the private route requires user authentication. It uses middleware functions to implement these security measures.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/auth-security/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"auth\";\n\nimport { createUploadthing, UploadThingError } from \"uploadthing/server\";\n\nimport { RateLimit } from \"~/lib/ratelimit\";\n\nconst ratelimiter = new RateLimit({\n  /** rules */\n});\n\nexport const uploadRouter = {\n  publicRoute: f({ image: {} })\n    .middleware(async ({ req }) => {\n      const limit = await ratelimiter.verify(req);\n      if (!limit.ok) {\n        throw new UploadThingError(\"Rate limit exceeded\");\n      }\n\n      return {};\n    })\n    .onUploadComplete(() => {\n      /** ... */\n    }),\n\n  privateRoute: f({ image: {} })\n    .middleware(async ({ req }) => {\n      const session = await auth(req);\n      if (!session) {\n        throw new UploadThingError(\"You need to be logged in to upload files\");\n      }\n\n      return { userId: session.user.id };\n    })\n    .onUploadComplete(() => {\n      /** ... */\n    }),\n};\n```\n\n----------------------------------------\n\nTITLE: Using genUploader to Create Typed uploadFiles Function\nDESCRIPTION: This code snippet demonstrates how to use the genUploader factory function to create a type-safe uploadFiles function that matches your backend file router signature. It enables autocompletion and type checking for endpoints and data types.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/client/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genUploader } from \"uploadthing/client\";\n\nimport type { UploadRouter } from \"~/server/uploadthing\";\n\nexport const { uploadFiles } = genUploader<UploadRouter>();\n\nconst response = await uploadFiles(\"routeEndpoint\", {\n  files: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Upload Errors in React Component with UploadButton\nDESCRIPTION: This snippet demonstrates how to catch and handle upload errors on the client side using the UploadButton component from UploadThing. It shows how to access custom error data returned by the server.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/error-handling/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<UploadButton\n  endpoint=\"withInput\"\n  input={{ foo: userInput }}\n  onUploadError={(error) => {\n    console.log(\"Error: \", error);\n    const fieldErrors = error.data?.zodError?.fieldErrors;\n    //                              ^? typeToFlattenedError\n    setError(fieldErrors.foo[0] ?? \"\");\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating UploadButton Component with generateUploadButton\nDESCRIPTION: This snippet shows how to use the generateUploadButton factory function to create a typesafe UploadButton component bound to your file router type. This is the recommended approach since v6.2 for better tree-shaking.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/react/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { generateUploadButton } from \"@uploadthing/react\";\n\nexport const UploadButton = generateUploadButton<OurFileRouter>();\n```\n\n----------------------------------------\n\nTITLE: Custom File Upload Implementation with useUploadThing Composable\nDESCRIPTION: Creating a custom file upload interface using the useUploadThing composable in a Vue component. This demonstrates how to handle file selection and upload initiation with custom UI elements.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/nuxt/page.mdx#2025-04-13_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst alert = (msg: string) => {\n  window.alert(msg);\n};\n\nconst { startUpload } = useUploadThing(\"videoAndImage\", {\n  onClientUploadComplete(res) {\n    console.log(`onClientUploadComplete`, res);\n    alert(\"Upload Completed\");\n  },\n});\n</script>\n\n<template>\n  <label>\n    <input\n      type=\"file\"\n      @change=\"\n        async (e) => {\n          console.log(`e`, e);\n          const file = (e.target as HTMLInputElement).files?.[0];\n          if (!file) return;\n\n          // Do something with files\n\n          // Then start the upload\n          await startUpload([file]);\n        }\n      \"\n    />\n  </label>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing UploadThing in Next App Router\nDESCRIPTION: Example of creating an UploadThing instance in a Next.js app router setup. It shows how to import the createUploadthing function and initialize a file router with middleware that has access to the NextRequest object.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/server/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUploadthing, type FileRouter } from \"uploadthing/next\";\n\nconst f = createUploadthing();\nexport const uploadRouter = {  };\n\n// ...\nf({  })\n  .middleware(({ req }) => {\n    //           ^? req: NextRequest\n    return {}\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing Resumable File Uploads with createUpload\nDESCRIPTION: This code demonstrates how to use the createUpload function to implement resumable file uploads. It shows how to start, pause, resume, and await the completion of file uploads. This is useful for large file uploads that may need to be interrupted and resumed later.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/client/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genUploader } from \"uploadthing/client\";\n\nimport type { UploadRouter } from \"~/server/uploadthing\";\n\nexport const { createUpload } = genUploader<UploadRouter>();\n\n// Create the upload. The files will start uploading immediately.\nconst { pauseUpload, resumeUpload, done } = createUpload(\"routeEndpoint\", {\n  files: [],\n});\n\n// Pause the upload of a file\npauseUpload(file);\n\n// Resume the upload of a file\nresumeUpload(file);\n\n// Await the completion of all files\nconst files = await done();\n```\n\n----------------------------------------\n\nTITLE: Deleting Files Using UTApi in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the deleteFiles method of UTApi to remove files from the server. It shows examples of deleting single files, multiple files, and using custom identifiers.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/ut-api/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utapi } from \"~/server/uploadthing.ts\";\n\nawait utapi.deleteFiles(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\nawait utapi.deleteFiles([\n  \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n  \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\",\n]);\nawait deleteFiles(\"myCustomIdentifier\", { keyType: \"customId\" });\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable UploadThing Components with TypeScript\nDESCRIPTION: Generating type-safe upload button and dropzone components using the FileRouter type for strong typing across the application.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/appdir/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  generateUploadButton,\n  generateUploadDropzone,\n} from \"@uploadthing/react\";\n\nimport type { OurFileRouter } from \"~/app/api/uploadthing/core\";\n\nexport const UploadButton = generateUploadButton<OurFileRouter>();\nexport const UploadDropzone = generateUploadDropzone<OurFileRouter>();\n```\n\n----------------------------------------\n\nTITLE: Using useUploadThing Hook with Callback Function in TypeScript\nDESCRIPTION: Demonstrates how to use the useUploadThing hook with a callback function for the endpoint argument, allowing for better IDE integration and 'Go to Definition' functionality.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/react/page.mdx#2025-04-13_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nuseUploadThing((routeRegistry) => routeRegistry.routeEndpoint, { ... })\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Upload in an Expo React Native Component\nDESCRIPTION: Example React Native component using the useImageUploader hook to handle image selection and upload, with error handling and permission management.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/expo/page.mdx#2025-04-13_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { openSettings } from \"expo-linking\";\nimport { Alert, Pressable, StyleSheet, Text, View } from \"react-native\";\n\nimport { useImageUploader } from \"~/utils/uploadthing\";\n\nexport default function Home() {\n  const { openImagePicker, isUploading } = useImageUploader(\"imageUploader\", {\n    /**\n     * Any props here are forwarded to the underlying `useUploadThing` hook.\n     * Refer to the React API reference for more info.\n     */\n    onClientUploadComplete: () => Alert.alert(\"Upload Completed\"),\n    onUploadError: (error) => Alert.alert(\"Upload Error\", error.message),\n  });\n\n  return (\n    <View>\n      <Pressable\n        style={styles.button}\n        onPress={() => {\n          openImagePicker({\n            input, // Matches the input schema from the FileRouter endpoint\n            source: \"library\", // or \"camera\"\n            onInsufficientPermissions: () => {\n              Alert.alert(\n                \"No Permissions\",\n                \"You need to grant permission to your Photos to use this\",\n                [\n                  { text: \"Dismiss\" },\n                  { text: \"Open Settings\", onPress: openSettings },\n                ],\n              );\n            },\n          })\n        }}\n      >\n        <Text>Select Image</Text>\n      </Pressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: { ... },\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Backend Adapter Implementation\nDESCRIPTION: Full example showing a complete implementation of a custom backend adapter including router configuration, middleware, and error handling.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/custom/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect } from \"effect\";\n\nimport { createBuilder, makeAdapterHandler } from \"uploadthing/server\";\nimport type { FileRouter } from \"uploadthing/server\";\n\ntype AdapterArgs = {\n  req: BunRequest;\n  server: Server;\n};\n\nconst f = createBuilder<AdapterArgs>();\n\nconst router = {\n  imageUploader: f({ image: { maxFileSize: \"16MB\" } })\n    .middleware((opts) => {\n      opts.req;\n      //   ^? BunRequest\n      opts.server;\n      //   ^? Server\n      return { userId: \"user_123\" };\n    })\n    .onUploadError((opts) => {\n      opts.req;\n      //   ^? BunRequest\n      opts.server;\n      //   ^? Server\n    })\n    .onUploadComplete((opts) => {\n      opts.req;\n      //   ^? BunRequest\n      opts.server;\n      //   ^? Server\n    }),\n} satisfies FileRouter;\n\nconst requestHandler = makeAdapterHandler<[BunRequest, Server], AdapterArgs>(\n  (req, server) => Effect.succeed({ req, server }),\n  (req) => Effect.succeed(req),\n  { router },\n);\n\nBun.serve({\n  routes: {\n    \"/api/uploadthing\": requestHandler,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using useImageUploader Hook in React Native\nDESCRIPTION: This example shows how to use the useImageUploader hook in a React Native component. It demonstrates opening an image picker, handling permissions, and managing the upload process. The hook provides options for selecting from the photo library or camera and handling upload events.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/expo/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Alert, Pressable, Text, View } from \"react-native\";\n\nimport { useImageUploader } from \"@uploadthing/expo\";\n\nexport function MultiUploader() {\n  const { openImagePicker, isUploading } = useImageUploader(\"imageUploader\", {\n    /**\n     * Any props here are forwarded to the underlying `useUploadThing` hook.\n     * Refer to the React API reference for more info.\n     */\n    onClientUploadComplete: () => Alert.alert(\"Upload Completed\"),\n    onUploadError: (error) => Alert.alert(\"Upload Error\", error.message),\n  });\n\n  return (\n    <View>\n      <Pressable\n        onPress={() => {\n          openImagePicker({\n            input, // Matches the input schema from the FileRouter endpoint\n            source: \"library\", // or \"camera\"\n            onInsufficientPermissions: () => {\n              Alert.alert(\n                \"No Permissions\",\n                \"You need to grant permission to your Photos to use this\",\n                [\n                  { text: \"Dismiss\" },\n                  { text: \"Open Settings\", onPress: openSettings },\n                ],\n              );\n            },\n          });\n        }}\n      >\n        <Text>Select Image</Text>\n      </Pressable>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating React Native Helpers for UploadThing in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the generateReactNativeHelpers function to create useImageUploader and useDocumentUploader hooks for UploadThing in a React Native app. It includes setting up the server URL and specifying the UploadRouter type.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/expo/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { generateReactNativeHelpers } from \"@uploadthing/expo\";\n\nimport type { UploadRouter } from \"~/app/api/uploadthing+api\";\n\nexport const { useImageUploader, useDocumentUploader } =\n  generateReactNativeHelpers<UploadRouter>({\n    /**\n     * Your server url.\n     * @default process.env.EXPO_PUBLIC_SERVER_URL\n     * @remarks In dev we will also try to use Expo.debuggerHost\n     */\n    url: \"https://my-server.com\",\n  });\n```\n\n----------------------------------------\n\nTITLE: Generating React Helpers with generateReactHelpers\nDESCRIPTION: This snippet shows how to use the generateReactHelpers factory function to create the useUploadThing hook and uploadFiles function for custom component integration. These helpers provide typesafe interaction with your UploadThing file router.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/react/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { generateReactHelpers } from \"@uploadthing/react\";\n\nimport type { OurFileRouter } from \"~/app/api/uploadthing/core\";\n\nexport const { useUploadThing, uploadFiles } =\n  generateReactHelpers<OurFileRouter>();\n```\n\n----------------------------------------\n\nTITLE: Configuring UploadThing FileRouter for Nuxt\nDESCRIPTION: Implementation of a FileRouter for handling file uploads in a Nuxt server directory. This example creates an image uploader with authentication middleware and upload completion callback.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/nuxt/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { H3Event } from \"h3\";\n\nimport { createUploadthing } from \"uploadthing/h3\";\nimport type { FileRouter } from \"uploadthing/h3\";\n\nconst f = createUploadthing();\n\nconst auth = (ev: H3Event) => ({ id: \"fakeId\" }); // Fake auth function\n\n// FileRouter for your app, can contain multiple FileRoutes\nexport const uploadRouter = {\n  // Define as many FileRoutes as you like, each with a unique routeSlug\n  imageUploader: f({\n    image: {\n      /**\n       * For full list of options and defaults, see the File Route API reference\n       * @see https://docs.uploadthing.com/file-routes#route-config\n       */\n      maxFileSize: \"4MB\",\n      maxFileCount: 1,\n    },\n  })\n    // Set permissions and file types for this FileRoute\n    .middleware(async ({ event }) => {\n      // This code runs on your server before upload\n      const user = await auth(event);\n\n      // If you throw, the user will not be able to upload\n      if (!user) throw new Error(\"Unauthorized\");\n\n      // Whatever is returned here is accessible in onUploadComplete as `metadata`\n      return { userId: user.id };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      // This code RUNS ON YOUR SERVER after upload\n      console.log(\"Upload complete for userId:\", metadata.userId);\n\n      console.log(\"file url\", file.ufsUrl);\n    }),\n} satisfies FileRouter;\n\nexport type UploadRouter = typeof uploadRouter;\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication Middleware in UploadThing\nDESCRIPTION: Example of implementing authentication middleware using Clerk in an UploadThing file route. It checks if a user is signed in and throws an error if not, then passes the userId to the onUploadComplete handler.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/file-routes/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { currentUser } from \"@clerk/nextjs\";\n\nimport { UploadThingError } from \"uploadthing/server\";\n\nf([\"image\"])\n  .middleware(async ({ req, res }) => {\n    const user = await currentUser();\n\n    // Throw if user isn't signed in\n    if (!user)\n      throw new UploadThingError(\n        \"You must be logged in to upload a profile picture\",\n      );\n\n    // Return userId to be used in onUploadComplete\n    return { userId: user.id };\n  })\n  .onUploadComplete(async ({ metadata }) => {\n    console.log(\"Uploaded by user\", metadata.userId);\n  });\n```\n\n----------------------------------------\n\nTITLE: Composable File Upload Interface Using UploadProvider in React\nDESCRIPTION: Example demonstrating a more flexible upload interface using UploadProvider, UploadZone, and UploadFileView components. This pattern allows for greater customization of the upload area while maintaining typesafe endpoints.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/react/README.md#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Name is temp\nimport { UploadFileView, UploadProvider, UploadZone } from \"@uploadthing/react\";\n\nimport type { FileRouter } from \"./someUploadRouter\";\n\nexport const SomePage = () => {\n  return (\n    <UploadProvider<FileRouter>\n      endpoint=\"someTypesafeEndpoint\"\n      onUpload={(file) => {\n        console.log(file);\n      }}\n    >\n      <div>Whatever You Want</div>\n      <UploadZone>\n        <div>Drop files here (you can style this yourself)</div>\n      </UploadZone>\n      <UploadFileView />\n    </UploadProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useDocumentUploader Hook in React Native\nDESCRIPTION: This example demonstrates the usage of the useDocumentUploader hook in a React Native component. It shows how to open a document picker, handle permissions, and manage the upload process for documents. The hook provides options for selecting documents and handling upload events.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/expo/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Alert, Pressable, Text, View } from \"react-native\";\n\nimport { useDocumentUploader } from \"@uploadthing/expo\";\n\nexport function MultiUploader() {\n  const { openDocumentPicker, isUploading } = useDocumentUploader(\"document\", {\n    /**\n     * Any props here are forwarded to the underlying `useUploadThing` hook.\n     * Refer to the React API reference for more info.\n     */\n    onClientUploadComplete: () => Alert.alert(\"Upload Completed\"),\n    onUploadError: (error) => Alert.alert(\"Upload Error\", error.message),\n  });\n\n  return (\n    <View>\n      <Pressable\n        onPress={() => {\n          openDocumentPicker({\n            input, // Matches the input schema from the FileRouter endpoint\n            onInsufficientPermissions: () => {\n              Alert.alert(\n                \"No Permissions\",\n                \"You need to grant permission to your Photos to use this\",\n                [\n                  { text: \"Dismiss\" },\n                  { text: \"Open Settings\", onPress: openSettings },\n                ],\n              );\n            },\n          });\n        }}\n      >\n        <Text>Select Document</Text>\n      </Pressable>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing UploadThing File Router with Custom Error Handling in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an UploadThing file router with custom error handling. It includes middleware for user authentication and shows how to throw custom errors using UploadThingError.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/error-handling/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createUploadthing,\n  UploadThingError,\n  type FileRouter,\n} from \"uploadthing/server\";\n\nconst f = createUploadthing();\n\nconst auth = (req: Request) => ({ id: \"fakeId\" });\n\nexport const ourFileRouter = {\n  imageUploader: f({ image: { maxFileSize: \"4MB\" } })\n    .middleware(async ({ req }) => {\n      const user = await auth(req);\n\n      if (!user) throw new Error(`Cant find user from req: ${req.toString()}`);\n      if (!user.id) throw new UploadThingError(\"No user ID\");\n\n      return { userId: user.id };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      console.log(\"Upload complete for userId:\", metadata.userId);\n\n      console.log(\"file url\", file.url);\n\n      return { uploadedBy: metadata.userId };\n    }),\n} satisfies FileRouter;\n\nexport type OurFileRouter = typeof ourFileRouter;\n```\n\n----------------------------------------\n\nTITLE: Creating a FileRouter for UploadThing in Remix\nDESCRIPTION: This code creates a FileRouter to handle image uploads with authentication middleware and upload completion callback.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/remix/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ActionFunctionArgs } from \"@remix-run/node\"; // or cloudflare/deno\n\nimport { createUploadthing, type FileRouter } from \"uploadthing/remix\";\nimport { UploadThingError } from \"uploadthing/server\";\n\nconst f = createUploadthing();\n\nconst auth = (args: ActionFunctionArgs) => ({ id: \"fakeId\" }); // Fake auth function\n\n// FileRouter for your app, can contain multiple FileRoutes\nconst uploadRouter = {\n  // Define as many FileRoutes as you like, each with a unique routeSlug\n  imageUploader: f({\n    image: {\n      /**\n       * For full list of options and defaults, see the File Route API reference\n       * @see https://docs.uploadthing.com/file-routes#route-config\n       */\n      maxFileSize: \"4MB\",\n      maxFileCount: 1,\n    },\n  })\n    // Set permissions and file types for this FileRoute\n    .middleware(async ({ event }) => {\n      // This code runs on your server before upload\n      const user = await auth(event);\n\n      // If you throw, the user will not be able to upload\n      if (!user) throw new UploadThingError(\"Unauthorized\");\n\n      // Whatever is returned here is accessible in onUploadComplete as `metadata`\n      return { userId: user.id };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      // This code RUNS ON YOUR SERVER after upload\n      console.log(\"Upload complete for userId:\", metadata.userId);\n\n      console.log(\"file url\", file.ufsUrl);\n\n      // !!! Whatever is returned here is sent to the clientside `onClientUploadComplete` callback\n      return { uploadedBy: metadata.userId };\n    }),\n} satisfies FileRouter;\n\nexport type UploadRouter = typeof uploadRouter;\n```\n\n----------------------------------------\n\nTITLE: Configuring UploadThing FileRouter\nDESCRIPTION: Implementation of FileRouter with image upload configuration, middleware authentication, and upload completion handling\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/astro/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUploadthing, type FileRouter } from \"uploadthing/server\";\n\nconst f = createUploadthing();\n\nconst auth = (req: Request) => ({ id: \"fakeId\" }); // Fake auth function\n\n// FileRouter for your app, can contain multiple FileRoutes\nexport const ourFileRouter = {\n  // Define as many FileRoutes as you like, each with a unique routeSlug\n  imageUploader: f({\n    image: {\n      /**\n       * For full list of options and defaults, see the File Route API reference\n       * @see https://docs.uploadthing.com/file-routes#route-config\n       */\n      maxFileSize: \"4MB\",\n      maxFileCount: 1,\n    },\n  })\n    // Set permissions and file types for this FileRoute\n    .middleware(async ({ req }) => {\n      // This code runs on your server before upload\n      const user = await auth(req);\n\n      // If you throw, the user will not be able to upload\n      if (!user) throw new Error(\"Unauthorized\");\n\n      // Whatever is returned here is accessible in onUploadComplete as `metadata`\n      return { userId: user.id };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      // This code RUNS ON YOUR SERVER after upload\n      console.log(\"Upload complete for userId:\", metadata.userId);\n\n      console.log(\"file url\", file.ufsUrl);\n\n      // !!! Whatever is returned here is sent to the clientside `onClientUploadComplete` callback\n      return { uploadedBy: metadata.userId };\n    }),\n} satisfies FileRouter;\n\nexport type OurFileRouter = typeof ourFileRouter;\n```\n\n----------------------------------------\n\nTITLE: Generating Presigned URLs for Private Files in UploadThing\nDESCRIPTION: Implementation of generating presigned URLs for accessing private files protected with access controls. Uses Node.js crypto module to create HMAC signatures with expiration timestamps.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/working-with-files/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport crypto from \"node:crypto\";\n\nconst apiKey = \"sk_live_...\";\nconst url = new URL(\"https://<APP_ID>.ufs.sh/f/<FILE_KEY>\");\nconst algorithm = \"hmac-sha256\";\n\n// Set expiration to 30 seconds from now (you choose how long you want the URL to be valid for)\nconst expires = Date.now() + 1000 * 30;\nurl.searchParams.set(\"expires\", String(expires));\n\nconst signature = crypto\n  .createHmac(algorithm, apiKey)\n  .update(url.href)\n  .digest(\"hex\");\nurl.searchParams.set(\"signature\", `${algorithm}=${signature}`);\n\n// The URL is now signed and ready to use\nawait fetch(url); // Status 200 OK\n```\n\n----------------------------------------\n\nTITLE: Creating a FileRouter in SvelteKit\nDESCRIPTION: Implements a server-side FileRouter that defines upload routes, file constraints, authentication middleware, and post-upload processing. This example creates an 'imageUploader' route that accepts image files up to 4MB.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/svelte/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUploadthing } from \"uploadthing/server\";\nimport type { FileRouter } from \"uploadthing/server\";\n\nconst f = createUploadthing();\n\nconst auth = (req: Request) => ({ id: \"fakeId\" }); // Fake auth function\n\n// FileRouter for your app, can contain multiple FileRoutes\nexport const ourFileRouter = {\n  // Define as many FileRoutes as you like, each with a unique routeSlug\n  imageUploader: f({\n    image: {\n      /**\n       * For full list of options and defaults, see the File Route API reference\n       * @see https://docs.uploadthing.com/file-routes#route-config\n       */\n      maxFileSize: \"4MB\",\n      maxFileCount: 1,\n    },\n  })\n    // Set permissions and file types for this FileRoute\n    .middleware(async ({ req }) => {\n      // This code runs on your server before upload\n      const user = await auth(req);\n\n      // If you throw, the user will not be able to upload\n      if (!user) throw new Error(\"Unauthorized\");\n\n      // Whatever is returned here is accessible in onUploadComplete as `metadata`\n      return { userId: user.id };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      // This code RUNS ON YOUR SERVER after upload\n      console.log(\"Upload complete for userId:\", metadata.userId);\n\n      console.log(\"file url\", file.ufsUrl);\n    }),\n} satisfies FileRouter;\n\nexport type OurFileRouter = typeof ourFileRouter;\n```\n\n----------------------------------------\n\nTITLE: Implementing File Uploads with UploadButton Component in React\nDESCRIPTION: Example showing how to use the UploadButton component from @uploadthing/react with event handlers for file upload lifecycle. The component takes a typesafe endpoint and provides callbacks for various stages of the upload process.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/react/README.md#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Name is temp\nimport { UploadButton } from \"@uploadthing/react\";\n\nimport type { FileRouter } from \"./someUploadRouter\";\n\nexport const SomePage = () => {\n  return (\n    <UploadButton<FileRouter>\n      endpoint=\"someTypesafeEndpoint\"\n      onNewFileDropped={(file) => {\n        console.log(\"new file added by user\", file);\n      }}\n      onClientStartedUpload={(file) => {\n        console.log(\"new file added by user\", file);\n      }}\n      onClientFinishedUpload={(file) => {\n        console.log(file);\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing UploadThing Components in Nuxt\nDESCRIPTION: Vue component implementation using UploadThing's pre-built UploadButton and UploadDropzone components. This shows how to configure the components with callbacks for upload completion and error handling.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/nuxt/page.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst alert = (msg: string) => {\n  window.alert(msg);\n};\n</script>\n\n<template>\n  <div>\n    <UploadButton\n      :config=\"{\n        endpoint: 'imageUploader',\n        onClientUploadComplete: (file) => {\n          console.log('uploaded', file);\n          alert('Upload complete');\n        },\n        onUploadError: (error) => {\n          console.error(error, error.cause);\n          alert('Upload failed');\n        },\n      }\"\n    />\n    <UploadDropzone\n      :config=\"{\n        endpoint: 'imageUploader',\n        onClientUploadComplete: (file) => {\n          console.log('uploaded', file);\n          alert('Upload complete');\n        },\n        onUploadError: (error) => {\n          console.error(error, error.cause);\n          alert('Upload failed');\n        },\n      }\"\n    />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Uploading Files Using Server Action in TypeScript\nDESCRIPTION: This code snippet illustrates how to use the uploadFiles method of UTApi within a server action. It demonstrates handling file uploads from a form submission and processing them server-side.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/ut-api/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utapi } from \"~/server/uploadthing.ts\";\n\nasync function uploadFiles(formData: FormData) {\n  \"use server\";\n  const files = formData.getAll(\"files\");\n  const response = await utapi.uploadFiles(files);\n  //    ^? UploadedFileResponse[]\n}\n\nfunction MyForm() {\n  return (\n    <form action={uploadFiles}>\n      <input name=\"files\" type=\"file\" multiple />\n      <button type=\"submit\">Upload</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a FileRouter for UploadThing in Next.js\nDESCRIPTION: Defines a FileRouter with an imageUploader route, including middleware for authentication and an onUploadComplete callback.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/pagedir/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from \"next\";\n\nimport { createUploadthing, type FileRouter } from \"uploadthing/next-legacy\";\nimport { UploadThingError } from \"uploadthing/server\";\n\nconst f = createUploadthing();\n\nconst auth = (req: NextApiRequest, res: NextApiResponse) => ({ id: \"fakeId\" }); // Fake auth function\n\n// FileRouter for your app, can contain multiple FileRoutes\nexport const ourFileRouter = {\n  // Define as many FileRoutes as you like, each with a unique routeSlug\n  imageUploader: f({\n    image: {\n      /**\n       * For full list of options and defaults, see the File Route API reference\n       * @see https://docs.uploadthing.com/file-routes#route-config\n       */\n      maxFileSize: \"4MB\",\n      maxFileCount: 1,\n    },\n  })\n    // Set permissions and file types for this FileRoute\n    .middleware(async ({ req, res }) => {\n      // This code runs on your server before upload\n      const user = await auth(req, res);\n\n      // If you throw, the user will not be able to upload\n      if (!user) throw new UploadThingError(\"Unauthorized\");\n\n      // Whatever is returned here is accessible in onUploadComplete as `metadata`\n      return { userId: user.id };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      // This code RUNS ON YOUR SERVER after upload\n      console.log(\"Upload complete for userId:\", metadata.userId);\n\n      console.log(\"file url\", file.ufsUrl);\n\n      // !!! Whatever is returned here is sent to the clientside `onClientUploadComplete` callback\n      return { uploadedBy: metadata.userId };\n    }),\n} satisfies FileRouter;\n\nexport type OurFileRouter = typeof ourFileRouter;\n```\n\n----------------------------------------\n\nTITLE: Creating an API Route Handler for UploadThing in Expo\nDESCRIPTION: Implementation of the API route handler using the FileRouter, exporting GET and POST handlers for the Expo API routes system.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/expo/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouteHandler } from \"uploadthing/server\";\n\nconst uploadRouter = { ... } satisfies FileRouter;\nexport type UploadRouter = typeof uploadRouter;\n\nconst handlers = createRouteHandler({\n  router: uploadRouter,\n\n  // Apply an (optional) custom config:\n  // config: { ... },\n})\nexport { handlers as GET, handlers as POST }\n```\n\n----------------------------------------\n\nTITLE: Implementing Resumable Uploads with Range Header in TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to implement resumable uploads by first sending a HEAD request to get the range start, then using the Range header in the PUT request to continue the upload from a specific byte offset.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/uploading-files/page.mdx#2025-04-13_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nconst rangeStart = await fetch(presigned.url, { method: \"HEAD\" }).then((res) =>\n  parseInt(res.headers.get(\"x-ut-range-start\") ?? \"0\", 10),\n);\nawait fetch(presigned.url, {\n  method: \"PUT\",\n  headers: {\n    Range: `bytes=${rangeStart}-`,\n  },\n  body: file.slice(rangeStart),\n});\n```\n\n----------------------------------------\n\nTITLE: Client-Side Integration of UploadThing\nDESCRIPTION: Example of how to generate an upload button on the client side using the @uploadthing/react package, specifying the server URL for API communication.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/fetch/page.mdx#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateUploadButton } from \"@uploadthing/react\";\n\nexport const UploadButton = generateUploadButton({\n  url: \"https://your-server.com/api/uploadthing\",\n});\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom File Uploader Component in React with TypeScript\nDESCRIPTION: This example demonstrates how to create a custom file uploader component using the useDropzone and useUploadThing hooks. It includes file selection, upload initiation, and error handling.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/react/page.mdx#2025-04-13_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDropzone } from \"@uploadthing/react\";\nimport {\n  generateClientDropzoneAccept,\n  generatePermittedFileTypes,\n} from \"uploadthing/client\";\n\nimport { useUploadThing } from \"~/utils/uploadthing\";\n\nexport function MultiUploader() {\n  const [files, setFiles] = useState<File[]>([]);\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    setFiles(acceptedFiles);\n  }, []);\n\n  const { startUpload, routeConfig } = useUploadThing(\"myUploadEndpoint\", {\n    onClientUploadComplete: () => {\n      alert(\"uploaded successfully!\");\n    },\n    onUploadError: () => {\n      alert(\"error occurred while uploading\");\n    },\n    onUploadBegin: ({ file }) => {\n      console.log(\"upload has begun for\", file);\n    },\n  });\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop,\n    accept: generateClientDropzoneAccept(\n      generatePermittedFileTypes(routeConfig).fileTypes,\n    ),\n  });\n\n  return (\n    <div {...getRootProps()}>\n      <input {...getInputProps()} />\n      <div>\n        {files.length > 0 && (\n          <button onClick={() => startUpload(files)}>\n            Upload {files.length} files\n          </button>\n        )}\n      </div>\n      Drop files here!\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UploadButton in Next.js Client Component\nDESCRIPTION: Example of using the UploadButton component in a Next.js client component with event handlers for uploads and errors.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/appdir/page.mdx#2025-04-13_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { UploadButton } from \"~/utils/uploadthing\";\n\nexport default function Home() {\n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-between p-24\">\n      <UploadButton\n        endpoint=\"imageUploader\"\n        onClientUploadComplete={(res) => {\n          // Do something with the response\n          console.log(\"Files: \", res);\n          alert(\"Upload Completed\");\n        }}\n        onUploadError={(error: Error) => {\n          // Do something with the error.\n          alert(`ERROR! ${error.message}`);\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UploadThing Components in Vue Template\nDESCRIPTION: Shows the implementation of UploadButton and UploadDropzone components in a Vue template. Includes configuration for different upload endpoints and demonstrates layout structure with Tailwind CSS classes.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/vue/README.md#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { OurFileRouter } from \"server/uploadthing\";\n\nimport { UploadButton, UploadDropzone } from \"~/utils/uploadthing\";\n</script>\n\n<template>\n  <main\n    class=\"flex min-h-screen flex-col items-center justify-center gap-16 p-24\"\n  >\n    <div class=\"flex flex-col items-center justify-center gap-4\">\n      <span class=\"text-center text-4xl font-bold\">\n        Upload a file using a button:\n      </span>\n\n      <UploadButton\n        :config=\"{\n          endpoint: 'videoAndImage',\n        }\"\n      />\n    </div>\n    <div className=\"flex flex-col items-center justify-center gap-4\">\n      <span className=\"text-center text-4xl font-bold\">\n        ...or using a dropzone:\n      </span>\n      <UploadDropzone\n        :config=\"{\n          endpoint: 'withMdwr',\n        }\"\n      />\n    </div>\n  </main>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Overriding File Attributes in UploadThing Middleware\nDESCRIPTION: Example of using the UTFiles symbol to override uploaded file attributes in UploadThing middleware. This allows renaming files or setting custom identifiers that can be accessed in the onUploadComplete handler.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/file-routes/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UTFiles } from \"uploadthing/server\";\n\nf([\"image\"])\n  .middleware(async ({ req, files }) => {\n    const fileOverrides = files.map((file) => {\n      const newName = sluggify(file.name);\n      const myIdentifier = generateId();\n      return { ...file, name: newName, customId: myIdentifier };\n    });\n\n    // Return userId to be used in onUploadComplete\n    return { foo: \"bar\" as const, [UTFiles]: fileOverrides };\n  })\n  .onUploadComplete(async ({ metadata, file }) => {\n    // The UTFIles symbol is stripped from the metadata\n    metadata; // { foo: \"bar\" }\n    file.customId; // myIdentifier\n  });\n```\n\n----------------------------------------\n\nTITLE: Generating Typed Hooks for UploadThing in Expo\nDESCRIPTION: Creation of typed helper hooks for interacting with native file pickers, using the UploadRouter type for type safety.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/expo/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateReactNativeHelpers } from \"@uploadthing/expo\";\n\nimport type { UploadRouter } from \"~/app/api/uploadthing+api\";\n\nexport const { useImageUploader, useDocumentUploader } =\n  generateReactNativeHelpers<UploadRouter>({\n    /**\n     * Your server url.\n     * @default process.env.EXPO_PUBLIC_SERVER_URL\n     * @remarks In dev we will also try to use Expo.debuggerHost\n     */\n    url: \"https://my-server.com\",\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing UploadButton in a Next.js component\nDESCRIPTION: Demonstrates how to use the UploadButton component in a Next.js page, including handling upload completion and errors.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/pagedir/page.mdx#2025-04-13_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UploadButton } from \"~/utils/uploadthing\";\n\nexport default function Home() {\n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-between p-24\">\n      <UploadButton\n        endpoint=\"imageUploader\"\n        onClientUploadComplete={(res) => {\n          // Do something with the response\n          console.log(\"Files: \", res);\n          alert(\"Upload Completed\");\n        }}\n        onUploadError={(error: Error) => {\n          // Do something with the error.\n          alert(`ERROR! ${error.message}`);\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing UploadButton content in React\nDESCRIPTION: This snippet demonstrates how to use the content prop to customize the content of the UploadButton component. It shows how to provide custom content for the button and allowedContent elements, including conditional rendering based on the component's state.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/theming/page.mdx#2025-04-13_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<UploadButton\n  endpoint=\"mockRoute\"\n  content={{\n    button({ ready }) {\n      if (ready) return <div>Upload stuff</div>;\n\n      return \"Getting ready...\";\n    },\n    allowedContent({ ready, fileTypes, isUploading }) {\n      if (!ready) return \"Checking what you allow\";\n      if (isUploading) return \"Seems like stuff is uploading\";\n      return `Stuff you can upload: ${fileTypes.join(\", \")}`;\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing UploadButton with appearance prop in React\nDESCRIPTION: This snippet shows how to use the appearance prop to apply custom classes or provide callbacks for specific elements of the UploadButton component. It demonstrates how to conditionally apply classes based on the component's state.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/theming/page.mdx#2025-04-13_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<UploadButton\n  appearance={{\n    button({ ready, isUploading }) {\n      return `custom-button ${\n        ready ? \"custom-button-ready\" : \"custom-button-not-ready\"\n      } ${isUploading ? \"custom-button-uploading\" : \"\"}`;\n    },\n    container: \"custom-container\",\n    allowedContent: \"custom-allowed-content\",\n  }}\n/>\n```\n\nLANGUAGE: css\nCODE:\n```\n/* applied to container */\n.custom-container {\n  background-color: none;\n  margin-top: 1rem;\n}\n\n/* applied to container when readying */\n.custom-container[data-state=\"readying\"] {\n  background-color: none;\n}\n\n/* applied to button */\n.custom-button {\n  font-size: 1.6rem;\n  color: rgb(0 0 0 / 1);\n  background-color: rgb(239 68 68 / 1);\n}\n\n/* applied to button when uploading */\n.custom-button-uploading {\n  background-color: rgb(239 68 68 / 0.5);\n  color: rgb(0 0 0 / 0.5);\n  cursor: not-allowed;\n}\n\n.custom-button-uploading::after {\n  background-color: rgb(234 88 12 / 1) !important;\n}\n\n/* applied to the button when ready */\n.custom-button-ready {\n  color: #ecfdf5;\n}\n\n/* applied to the button when not ready */\n.custom-button-not-ready {\n  background-color: rgb(239 68 68 / 0.5);\n  color: rgb(0 0 0 / 0.5);\n  cursor: not-allowed;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UploadDropzone Component in React\nDESCRIPTION: Example of how to use the UploadDropzone component in a React application, including endpoint configuration and event handling.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/react/page.mdx#2025-04-13_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UploadDropzone } from \"@uploadthing/react\";\n\nimport { OurFileRouter } from \"./api/uploadthing/core\";\n\nexport const OurUploadDropzone = () => (\n  <UploadDropzone<OurFileRouter>\n    endpoint=\"withoutMdwr\"\n    onClientUploadComplete={(res) => {\n      // Do something with the response\n      console.log(\"Files: \", res);\n      alert(\"Upload Completed\");\n    }}\n    onUploadError={(error: Error) => {\n      alert(`ERROR! ${error.message}`);\n    }}\n    onUploadBegin={(name) => {\n      // Do something once upload begins\n      console.log(\"Uploading: \", name);\n    }}\n    onDrop={(acceptedFiles) => {\n      // Do something with the accepted files\n      console.log(\"Accepted files: \", acceptedFiles);\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a FileRouter for UploadThing in Fastify\nDESCRIPTION: Defines a FileRouter with an image upload route, specifying file types, size limits, and upload completion callback.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/fastify/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUploadthing, type FileRouter } from \"uploadthing/fastify\";\n\nconst f = createUploadthing();\n\nexport const uploadRouter = {\n  // Define as many FileRoutes as you like, each with a unique routeSlug\n  imageUploader: f({\n    image: {\n      /**\n       * For full list of options and defaults, see the File Route API reference\n       * @see https://docs.uploadthing.com/file-routes#route-config\n       */\n      maxFileSize: \"4MB\",\n      maxFileCount: 1,\n    },\n  }).onUploadComplete((data) => {\n    console.log(\"upload completed\", data);\n  }),\n} satisfies FileRouter;\n\nexport type OurFileRouter = typeof uploadRouter;\n```\n\n----------------------------------------\n\nTITLE: Generating Signed URLs with generateSignedURL Method\nDESCRIPTION: Generates a presigned URL for private file access without making API requests. Supports customizable expiration times up to 7 days.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/ut-api/page.mdx#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utapi } from \"~/server/uploadthing.ts\";\n\nconst fileKey = \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\";\nconst url = await utapi.generateSignedURL(fileKey, {\n  expiresIn: 60 * 60, // 1 hour\n  // expiresIn: '1 hour',\n  // expiresIn: '3d',\n  // expiresIn: '7 days',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring File Route with Input Validation in TypeScript\nDESCRIPTION: Demonstrates how to set up a file route with input validation using zod schema and middleware handling. Shows how to access typed input data in the middleware function.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/react/CHANGELOG.md#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nwithInput: f([\"image\"])\n  .input(\n    z.object({\n      foo: z.string(),\n    }),\n  )\n  .middleware((opts) => {\n    console.log(\"input\", opts.input);\n    // input is typed as { foo: string }\n    return {};\n  })\n  .onUploadComplete((data) => {\n    console.log(\"upload completed\", data);\n  })\n```\n\n----------------------------------------\n\nTITLE: Enhanced SSR Support for UploadThing with Next.js 15 Experimental Features\nDESCRIPTION: Special configuration for using UploadThing with Next.js 15 experimental features like PPR and dynamicIO, using Suspense for optimal loading.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/appdir/page.mdx#2025-04-13_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { connection } from \"next/server\"; // [!code ++]\nimport { Suspense } from \"react\"; // [!code ++]\n\nasync function UTSSR() {\n  await connection(); // [!code ++]\n\n  return <NextSSRPlugin routerConfig={extractRouterConfig(ourFileRouter)} />\n}\n\nexport default function RootLayout(props) {\n  return (\n    <html>\n      {...}\n      <Suspense> // [!code ++]\n        <UTSSR />\n      </Suspense> // [!code ++]\n      {...}\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files from URLs in TypeScript\nDESCRIPTION: This snippet shows how to use the uploadFilesFromUrl method of UTApi to upload files from external URLs. It demonstrates both single and multiple file uploads using URL strings.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/ut-api/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utapi } from \"~/server/uploadthing.ts\";\n\nconst fileUrl = \"https://test.com/some.png\";\nconst uploadedFile = await utapi.uploadFilesFromUrl(fileUrl);\n//    ^? UploadedFileResponse\n\nconst fileUrls = [\"https://test.com/some.png\", \"https://test.com/some2.png\"];\nconst uploadedFiles = await utapi.uploadFilesFromUrl(fileUrls);\n//    ^? UploadedFileResponse[]\n```\n\n----------------------------------------\n\nTITLE: Generating UploadThing Components\nDESCRIPTION: Generation of typed upload components for use in Astro\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/astro/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  generateUploadButton,\n  generateUploadDropzone,\n} from \"@uploadthing/react\";\n\nimport type { OurFileRouter } from \"~/server/uploadthing\";\n\nexport const UploadButton = generateUploadButton<OurFileRouter>();\nexport const UploadDropzone = generateUploadDropzone<OurFileRouter>();\n```\n\n----------------------------------------\n\nTITLE: Using UploadButton and UploadDropzone components in SvelteKit\nDESCRIPTION: Demonstrates using individual UploadButton and UploadDropzone components for more targeted upload interfaces. This creates separate button and dropzone areas that use the same uploader configuration.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/svelte/page.mdx#2025-04-13_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { createUploader } from \"$lib/utils/uploadthing\";\n\n  import { UploadButton, UploadDropzone } from \"@uploadthing/svelte\";\n\n  const uploader = createUploader(\"imageUploader\", {\n    onClientUploadComplete: (res) => {\n      console.log(`onClientUploadComplete`, res);\n      alert(\"Upload Completed\");\n    },\n    onUploadError: (error: Error) => {\n      alert(`ERROR! ${error.message}`);\n    },\n  });\n</script>\n\n<div class=\"ut-flex ut-flex-col ut-items-center ut-justify-center ut-gap-4\">\n  <span class=\"ut-text-center ut-text-4xl ut-font-bold\">\n    {`Upload a file using a button:`}\n  </span>\n  <UploadButton {uploader} />\n</div>\n<div class=\"ut-flex ut-flex-col ut-items-center ut-justify-center ut-gap-4\">\n  <span class=\"ut-text-center ut-text-4xl ut-font-bold\">\n    {`...or using a dropzone:`}\n  </span>\n  <UploadDropzone {uploader} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring FileRouter in Express\nDESCRIPTION: Implementation of a FileRouter for handling image uploads with configuration for file size and count limits.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/express/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUploadthing, type FileRouter } from \"uploadthing/express\";\n\nconst f = createUploadthing();\n\nexport const uploadRouter = {\n  // Define as many FileRoutes as you like, each with a unique routeSlug\n  imageUploader: f({\n    image: {\n      /**\n       * For full list of options and defaults, see the File Route API reference\n       * @see https://docs.uploadthing.com/file-routes#route-config\n       */\n      maxFileSize: \"4MB\",\n      maxFileCount: 1,\n    },\n  }).onUploadComplete((data) => {\n    console.log(\"upload completed\", data);\n  }),\n} satisfies FileRouter;\n\nexport type OurFileRouter = typeof uploadRouter;\n```\n\n----------------------------------------\n\nTITLE: Listing Files with listFiles Method\nDESCRIPTION: Retrieves a paginated list of file IDs and keys for all uploaded files. Supports limit and offset parameters for pagination.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/ut-api/page.mdx#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utapi } from \"~/server/uploadthing.ts\";\n\nconst files = await utapi.listFiles();\n```\n\n----------------------------------------\n\nTITLE: Updating Route Handler Return Value Usage\nDESCRIPTION: Demonstrates the change in createRouteHandler return value from separate GET/POST handlers to a single unified handler.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/v7/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouteHandler } from \"uploadthing/server\";\n\nimport { uploadRouter } from \"~/uploadthing/router\";\n\nconst { GET, POST } = createRouteHandler({ router }); // [!code --]\nconst handler = createRouteHandler({ router }); // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Generating UploadThing components in Next.js\nDESCRIPTION: Creates UploadButton and UploadDropzone components using the UploadThing React package and the defined FileRouter.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/pagedir/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  generateUploadButton,\n  generateUploadDropzone,\n} from \"@uploadthing/react\";\n\nimport type { OurFileRouter } from \"~/server/uploadthing\";\n\nexport const UploadButton = generateUploadButton<OurFileRouter>();\nexport const UploadDropzone = generateUploadDropzone<OurFileRouter>();\n```\n\n----------------------------------------\n\nTITLE: Defining onUploadComplete Handler Function Type\nDESCRIPTION: Type definition showing the structure of the onUploadComplete callback function parameters. The function receives metadata from middleware and file data from the upload process, and can return JSON-serializable data for client-side callbacks.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/file-routes/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype OnUploadComplete = {\n  metadata: Generic;\n  file: UploadedFileData;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing UploadThing in SolidJS\nDESCRIPTION: Example of creating an UploadThing instance in a SolidJS application. Shows the server import path and how the middleware function receives a standard Request object.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/server/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUploadthing, type FileRouter } from \"uploadthing/server\";\n\nconst f = createUploadthing();\nexport const uploadRouter = { ... };\n\n// ...\nf({ ... })\n  .middleware(({ req }) => {\n    //           ^? req: Request\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating a FileRouter for UploadThing in Expo\nDESCRIPTION: Example of creating a FileRouter with an image upload route, including middleware for authentication and a callback for when uploads complete.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/expo/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUploadthing, UploadThingError } from \"uploadthing/server\";\nimport type { FileRouter } from \"uploadthing/server\";\n\nconst f = createUploadthing();\n\nconst auth = (req: Request) => ({ id: \"fakeId\" }); // Fake auth function\n\nconst uploadRouter = {\n  // Define as many FileRoutes as you like, each with a unique routeSlug\n  imageUploader: f({\n    image: {\n      /**\n       * For full list of options and defaults, see the File Route API reference\n       * @see https://docs.uploadthing.com/file-routes#route-config\n       */\n      maxFileSize: \"4MB\",\n      maxFileCount: 1,\n    },\n  })\n    .middleware(async ({ req }) => {\n      // This code runs on your server before upload\n      const user = await auth(req);\n\n      // If you throw, the user will not be able to upload\n      if (!user) throw new UploadThingError(\"Unauthorized\");\n\n      // Whatever is returned here is accessible in onUploadComplete as `metadata`\n      return { userId: user.id };\n    })\n    .onUploadComplete(({ file, metadata }) => {\n      // This code RUNS ON YOUR SERVER after upload\n      console.log(\"Upload complete for userId:\", metadata.userId);\n\n      console.log(\"file url\", file.ufsUrl);\n\n      // !!! Whatever is returned here is sent to the clientside `onClientUploadComplete` callback\n      return { uploadedBy: metadata.userId };\n    }),\n} satisfies FileRouter;\nexport type UploadRouter = typeof uploadRouter;\n```\n\n----------------------------------------\n\nTITLE: Using the Uploader component in SvelteKit\nDESCRIPTION: Implements a basic upload interface using the pre-built Uploader component. This example creates an uploader instance for the 'imageUploader' route and handles upload completion and error events.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/svelte/page.mdx#2025-04-13_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { createUploader } from \"$lib/utils/uploadthing\";\n\n  import { Uploader } from \"@uploadthing/svelte\";\n\n  const uploader = createUploader(\"imageUploader\", {\n    onClientUploadComplete: (res) => {\n      console.log(`onClientUploadComplete`, res);\n      alert(\"Upload Completed\");\n    },\n    onUploadError: (error: Error) => {\n      alert(`ERROR! ${error.message}`);\n    },\n  });\n</script>\n\n<main>\n  <Uploader {uploader} />\n</main>\n```\n\n----------------------------------------\n\nTITLE: Creating FileRouter for UploadThing in H3\nDESCRIPTION: TypeScript code to create a FileRouter with an imageUploader route, defining permitted file types, size limits, and upload completion handling.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/h3/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUploadthing, type FileRouter } from \"uploadthing/h3\";\n\nconst f = createUploadthing();\n\nexport const uploadRouter = {\n  // Define as many FileRoutes as you like, each with a unique routeSlug\n  imageUploader: f({\n    image: {\n      /**\n       * For full list of options and defaults, see the File Route API reference\n       * @see https://docs.uploadthing.com/file-routes#route-config\n       */\n      maxFileSize: \"4MB\",\n      maxFileCount: 1,\n    },\n  }).onUploadComplete((data) => {\n    console.log(\"upload completed\", data);\n  }),\n} satisfies FileRouter;\n\nexport type OurFileRouter = typeof uploadRouter;\n```\n\n----------------------------------------\n\nTITLE: Using Custom Identifiers in UploadThing File Router (TypeScript)\nDESCRIPTION: This snippet demonstrates how to provide custom identifiers when uploading files and how to filter based on these custom identifiers using UTApi methods. It also shows how to set a global default key type for the UTApi instance.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nf([\"image\"]).middleware(({ files }) => {\n  const filesWithIds = files.map((f) => ({\n    ...f,\n    customId: uuid(),\n  }));\n  return { my: \"metadata\", [UTFiles]: filesWithIds };\n});\n\nconst utapi = new UTApi();\nutapi.getFileUrl(\"my-uuid\", { keyType: \"customId\" });\n\n// or, set a global keyType default\nconst utapi = new UTApi({ defaultKeyType: \"customId\" });\nutapi.getFileUrl(\"my-uuid\");\n```\n\n----------------------------------------\n\nTITLE: Creating Route Handler in Next App Router\nDESCRIPTION: Example of exposing an UploadThing router using the createRouteHandler function in a Next.js App Router project. Returns GET and POST handlers.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/server/page.mdx#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouteHandler } from \"uploadthing/next\";\nimport { uploadRouter } from \"~/server/uploadthing.ts\";\n\nexport const { GET, POST } = createRouteHandler({\n  router: uploadRouter,\n  // config: { ... },\n});\n```\n\n----------------------------------------\n\nTITLE: Using UTFile with UTApi\nDESCRIPTION: Example of creating and uploading a file using UTFile and UTApi. UTFile is a helper class for constructing File objects in environments without native File support, and allows setting a custom ID for the file.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/server/page.mdx#2025-04-13_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UTApi, UTFile } from \"uploadthing/server\";\n\nconst utapi = new UTApi();\n\nconst file = new UTFile([\"foo\"], \"foo.txt\", { customId: \"foo\" });\nconst response = await utapi.uploadFiles([file]);\n```\n\n----------------------------------------\n\nTITLE: Client-Side Upload Implementation with React\nDESCRIPTION: Shows how to use the upload functionality in a React component. Two approaches are shown: using the vanilla useUploadThing hook method or the component-based UploadButton approach.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { useUploadThing } = generateReactHelpers<typeof OurFileRouter>();\n\nfunction MyComponent() {\n  // Vanilla way\n  const { startUpload } = useUploadthing(\"withInput\");\n  async function onSubmit(files: File[]) {\n    await startUpload(files, { foo: \"bar\" });\n  }\n\n  // Component way\n  return (\n    <UploadButton<OurFileRouter>\n      endpoint=\"withInput\"\n      input={{ foo: \"bar\" }} // or use some state to be dynamic\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js API Route for UploadThing\nDESCRIPTION: Implementing a Next.js API route that uses the FileRouter to handle file uploads via GET and POST requests.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/appdir/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouteHandler } from \"uploadthing/next\";\n\nimport { ourFileRouter } from \"./core\";\n\n// Export routes for Next App Router\nexport const { GET, POST } = createRouteHandler({\n  router: ourFileRouter,\n\n  // Apply an (optional) custom config:\n  // config: { ... },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing UploadButton in Remix Home Page\nDESCRIPTION: This code shows how to implement the UploadButton component in a Remix page with event handlers for upload completion and errors.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/remix/page.mdx#2025-04-13_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UploadButton } from \"~/utils/uploadthing\";\n\nexport default function Home() {\n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-between p-24\">\n      <UploadButton\n        endpoint=\"imageUploader\"\n        onClientUploadComplete={(res) => {\n          // Do something with the response\n          console.log(\"Files: \", res);\n          alert(\"Upload Completed\");\n        }}\n        onUploadError={(error: Error) => {\n          // Do something with the error.\n          alert(`ERROR! ${error.message}`);\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Upload Button\nDESCRIPTION: Example of generating and implementing an upload button component for client-side file uploads.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/express/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { generateUploadButton } from \"@uploadthing/react\";\n\nexport const UploadButton = generateUploadButton({\n  url: \"https://your-server.com/api/uploadthing\",\n});\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating API Routes for UploadThing in SolidStart\nDESCRIPTION: Sets up GET and POST API endpoints to handle UploadThing requests using the defined file router.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/solid/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { APIEvent } from \"@solidjs/start/server\";\n\nimport { createRouteHandler } from \"uploadthing/server\";\n\nimport { uploadRouter } from \"~/server/uploadthing\";\n\nconst handler = createRouteHandler({\n  router: uploadRouter,\n});\n\nexport const GET = (event: APIEvent) => handler(event.request);\nexport const POST = (event: APIEvent) => handler(event.request);\n```\n\n----------------------------------------\n\nTITLE: Generating File Keys in PHP for UploadThing\nDESCRIPTION: This PHP code demonstrates how to generate file keys for UploadThing. It includes functions for hashing, shuffling alphabets, and encoding app IDs using Sqids.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/uploading-files/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Sqids\\Sqids;\n\nfunction djb2(string $string): int {\n  $h = 5381;\n  for ($i = strlen($string) - 1; $i >= 0; $i--) {\n    $char = $string[$i];\n    $h = ($h * 33) ^ ord($char);\n    // 32-bit integer overflow\n    $h &= 0xFFFFFFFF;\n  }\n  $h = ($h & 0xBFFFFFFF) | (($h >> 1) & 0x40000000);\n\n  // Convert to signed 32-bit integer\n  if ($h >= 0x80000000) {\n    $h -= 0x100000000;\n  }\n\n  return $h;\n  }\n\nfunction shuffle_string(string $string, string $seed): string {\n  $chars = str_split($string);\n  $seed_num = djb2($seed);\n\n  for ($i = 0; $i < count($chars); $i++) {\n    $j = (($seed_num % ($i + 1)) + $i) % count($chars);\n    [$chars[$i], $chars[$j]] = [$chars[$j], $chars[$i]];\n  }\n\n  return implode('', $chars);\n}\n\nfunction generate_key(string $file_seed, string $appId): string {\n  $alphabet = shuffle_string(Sqids::DEFAULT_ALPHABET, $appId);\n  $sqids = new Sqids($alphabet, 12);\n\n  $encodedAppId = $sqids->encode(\n    [abs(djb2($appId))]\n  );\n\n  return $encodedAppId . base64_encode($file_seed);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UploadThing with Zod Validation Error Handling in TypeScript\nDESCRIPTION: This code snippet shows how to configure UploadThing with a custom error formatter that handles Zod validation errors. It demonstrates returning structured error information to the client.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/error-handling/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as z from \"zod\";\n\nimport { createUploadthing } from \"uploadthing/next\";\nimport type { FileRouter } from \"uploadthing/next\";\n\nconst f = createUploadthing({\n  errorFormatter: (err) => {\n    return {\n      message: err.message,\n      zodError: err.cause instanceof z.ZodError ? err.cause.flatten() : null,\n    };\n  },\n});\n\nexport const uploadRouter = {\n  withInput: f([\"image\"]).input(z.object({ foo: z.string() })),\n  //  ...\n} satisfies FileRouter;\n```\n\n----------------------------------------\n\nTITLE: Supporting Upload Interruption in React\nDESCRIPTION: This code demonstrates how to pass an AbortSignal to uploadFiles and useUploadThing functions to enable interruption of an upload after it starts.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/react/CHANGELOG.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nuploadFiles(endpoint, { files, signal: abortController.signal })\n\nuseUploadThing(endpoint, { signal: abortController.signal })\n```\n\n----------------------------------------\n\nTITLE: Setting UploadThing Environment Variables\nDESCRIPTION: Environment variable configuration for UploadThing, requiring an API token for authentication.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/appdir/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUPLOADTHING_TOKEN=... # A token for interacting with the SDK\n```\n\n----------------------------------------\n\nTITLE: Generating UploadDropzone Component with generateUploadDropzone\nDESCRIPTION: This snippet demonstrates how to use the generateUploadDropzone factory function to create a typesafe UploadDropzone component bound to your file router type. This is the recommended approach since v6.2 for better tree-shaking.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/react/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { generateUploadDropzone } from \"@uploadthing/react\";\n\nexport const UploadDropzone = generateUploadDropzone<OurFileRouter>();\n```\n\n----------------------------------------\n\nTITLE: Using UploadButton Callback Function for Endpoint\nDESCRIPTION: Example of using a callback function for the endpoint prop in UploadButton, which allows for 'Go to Definition' functionality in IDEs.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/react/page.mdx#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait uploadFiles((routeRegistry) => routeRegistry.routeEndpoint, { ... })\n```\n\n----------------------------------------\n\nTITLE: Generating UploadThing Button for Client-Side Use\nDESCRIPTION: Example of generating an UploadThing button component for client-side use, specifying the server URL.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/fastify/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateUploadButton } from \"@uploadthing/react\";\n\nexport const UploadButton = generateUploadButton({\n  url: \"https://your-server.com/api/uploadthing\",\n});\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing File Routes with Input Validation in TypeScript\nDESCRIPTION: Demonstrates how to create a file route with input validation using zod. This code shows how to define a route that accepts images along with validated client-side metadata.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nwithInput: f([\"image\"])\n  .input(\n    z.object({\n      foo: z.string(),\n    }),\n  )\n  .middleware((opts) => {\n    console.log(\"input\", opts.input);\n    // input is typed as { foo: string }\n    return {};\n  })\n  .onUploadComplete((data) => {\n    console.log(\"upload completed\", data);\n  }),\n```\n\n----------------------------------------\n\nTITLE: Using Route Registry for Type-Safe Endpoints in UploadThing\nDESCRIPTION: This code snippet demonstrates how to use route registry functions with UploadThing to enable \"Go to Definition\" functionality. It shows examples for uploadFiles, useUploadThing, and UploadButton components.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/nuxt/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// uploadthing/client#uploadFiles\nuploadFiles(\n    (routeRegistry) => routeRegistry.videoAndImage,\n    { ... }\n)\n\n// uploadthing/react#useUploadThing\nuseUploadThing(\n    (routeRegistry) => routeRegistry.videoAndImage,\n    { ... }\n)\n\n// uploadthing/react#UploadButton\n<UploadButton\n    endpoint={(routeRegistry) => routeRegistry.videoAndImage}\n    { ... }\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding onChange to UploadButton and UploadDropzone in JavaScript\nDESCRIPTION: New feature adding onChange prop to UploadButton and UploadDropzone components. The onDrop prop for dropzone is now deprecated.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/solid/CHANGELOG.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<UploadButton onChange={handleChange} />\n<UploadDropzone onChange={handleChange} />\n```\n\n----------------------------------------\n\nTITLE: Implementing UploadThing with Cloudflare Workers\nDESCRIPTION: Configuration for using UploadThing with Cloudflare Workers, which requires special handling for environment variables, request caching, and daemon promises due to Cloudflare's runtime limitations.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/fetch/page.mdx#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouteHandler } from \"uploadthing/server\";\n\nimport { uploadRouter } from \"./uploadthing.ts\";\n\nexport default {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext) {\n    const handlers = createRouteHandler({\n      router: uploadRouter,\n      config: {\n        /**\n         * Since workers doesn't have envs on `process`. We need to pass\n         * secret and isDev flag manually.\n         */\n        token: env.UPLOADTHING_TOKEN,\n        isDev: env.ENVIRONMENT === \"development\",\n        /*\n         * Cloudflare Workers doesn't support the cache option\n         * so we need to remove it from the request init.\n         */\n        fetch: (url, init) => {\n          if (init && \"cache\" in init) delete init.cache;\n          return fetch(url, init);\n        },\n        /**\n         * UploadThing dev server leaves some promises hanging around that we\n         * need to wait for to prevent the worker from exiting prematurely.\n         */\n        handleDaemonPromise: (promise) => ctx.waitUntil(promise),\n      },\n    });\n\n    // World's simplest router. Handle GET/POST requests to /api/uploadthing\n    switch (new URL(request.url).pathname) {\n      case \"/api/uploadthing\": {\n        if (request.method !== \"POST\" && request.method !== \"GET\") {\n          return new Response(\"Method not allowed\", { status: 405 });\n        }\n        return await handlers[request.method](request);\n      }\n      default: {\n        return new Response(\"Not found\", { status: 404 });\n      }\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Generating UploadThing Components with generateComponents (Deprecated)\nDESCRIPTION: This snippet demonstrates how to use the deprecated generateComponents factory function to create typesafe UploadButton and UploadDropzone components tied to your file router type. This approach has been deprecated in favor of individual component generation functions.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/react/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { generateComponents } from \"@uploadthing/react\";\n\nimport type { OurFileRouter } from \"~/app/api/uploadthing/core\";\n\nexport const { UploadButton, UploadDropzone } =\n  generateComponents<OurFileRouter>();\n```\n\n----------------------------------------\n\nTITLE: Generating UploadThing helper functions for Svelte\nDESCRIPTION: Creates type-safe helper functions for use in Svelte components. This generates createUploader and createUploadThing functions that are typed according to the FileRouter configuration.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/svelte/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OurFileRouter } from \"$lib/server/uploadthing\";\n\nimport { generateSvelteHelpers } from \"@uploadthing/svelte\";\n\nexport const { createUploader, createUploadThing } =\n  generateSvelteHelpers<OurFileRouter>();\n```\n\n----------------------------------------\n\nTITLE: Creating Route Handler in SolidJS\nDESCRIPTION: Example of exposing an UploadThing router using the createRouteHandler function in a SolidJS project. Creates handlers and exports them as GET and POST handlers.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/server/page.mdx#2025-04-13_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouteHandler } from \"uploadthing/server\";\nimport { uploadRouter } from \"~/server/uploadthing.ts\";\n\nexport const handlers = createRouteHandler({\n  router: uploadRouter,\n  // config: { ... },\n});\nexport { handlers as GET, handlers as POST };\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Registry Endpoint Specification in TypeScript\nDESCRIPTION: Examples of using the new endpoint specification feature that supports 'Go to Definition' in different contexts including uploadFiles, useUploadThing hook, and UploadButton component.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// uploadthing/client#uploadFiles\nuploadFiles(\n    (routeRegistry) => routeRegistry.videoAndImage,\n    { ... }\n)\n\n// uploadthing/react#useUploadThing\nuseUploadThing(\n    (routeRegistry) => routeRegistry.videoAndImage,\n    { ... }\n)\n\n// uploadthing/react#UploadButton\n<UploadButton\n    endpoint={(routeRegistry) => routeRegistry.videoAndImage}\n    { ... }\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing UploadThing with Hono\nDESCRIPTION: Setup for using UploadThing with the Hono framework, creating a route handler that processes both GET and POST requests for file uploads.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/fetch/page.mdx#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\n\nimport { createRouteHandler } from \"uploadthing/server\";\n\nimport { uploadRouter } from \"./uploadthing.ts\";\n\nconst handlers = createRouteHandler({\n  router: uploadRouter,\n  config: { ... },\n});\n\nconst app = new Hono();\n\napp.all(\"/api/uploadthing\", (context) => handlers(context.req.raw));\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Defining content customization types for UploadButton and UploadDropzone\nDESCRIPTION: This snippet defines the TypeScript types for the content prop of UploadButton and UploadDropzone components. It shows the structure of the content object and the types of customizable elements for each component.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/theming/page.mdx#2025-04-13_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\ntype ContentField = ReactNode | ((args: CallbackArguments) => ReactNode);\n\ntype UploadButtonProps = {\n  /* rest of props */\n  content?: {\n    button?: ContentField;\n    allowedContent?: ContentField;\n  };\n};\n\ntype UploadDropzoneProps = {\n  /* rest of props */\n  content?: {\n    uploadIcon?: ContentField;\n    label?: ContentField;\n    allowedContent?: ContentField;\n    button?: ContentField;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Updating GenUploader Function Signature\nDESCRIPTION: Demonstrates the changes to the genUploader function signature which now returns an object with uploadFiles method instead of a single function.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- const uploadFiles = genUploader(opts)\n+ const { uploadFiles } = genUploader(opts)\n```\n\n----------------------------------------\n\nTITLE: Initializing UploadThing in Next Pages Directory\nDESCRIPTION: Example of creating an UploadThing instance in a Next.js pages directory setup. Shows importing from the next-legacy package and demonstrates middleware with access to NextApiRequest and NextApiResponse objects.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/server/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUploadthing, type FileRouter } from \"uploadthing/next-legacy\";\n\nconst f = createUploadthing();\nexport const uploadRouter = { ... };\n\n// ...\nf({ ... })\n  .middleware(({ req, res }) => {\n    //           ^? req: NextApiRequest, res: NextApiResponse\n  })\n```\n\n----------------------------------------\n\nTITLE: Customizing UploadDropzone content in SvelteKit\nDESCRIPTION: Shows how to customize the content of the UploadDropzone component using Svelte slots and slot props. This enables custom rendering of dropzone elements like icons, button text, and status labels.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/svelte/page.mdx#2025-04-13_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<UploadDropzone {uploader}>\n  <i slot=\"upload-icon\" let:state>\n    <!-- some custom icon -->\n  </i>\n  <span slot=\"button-content\" let:state>\n    {state.isUploading ? \"Uploading...\" : \"Pick a file\"}\n  </span>\n  <span slot=\"label\" let:state>\n    {state.ready ? \"Ready to upload\" : \"Loading...\"}\n  </span>\n  <span slot=\"allowed-content\" let:state>\n    You can choose between {state.fileTypes.join(\", \")} files\n  </span>\n</UploadDropzone>\n```\n\n----------------------------------------\n\nTITLE: Creating a custom upload flow with createUploadThing in SvelteKit\nDESCRIPTION: Shows how to implement a custom upload interface using the lower-level createUploadThing API. This example creates a custom file input that handles the upload process manually.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/svelte/page.mdx#2025-04-13_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { createUploadThing } from \"$lib/utils/uploadthing\";\n\n  const { startUpload } = createUploadThing(\"imageUploader\", {\n    onClientUploadComplete: () => {\n      alert(\"Upload Completed\");\n    },\n  });\n</script>\n\n<input\n  type=\"file\"\n  on:change={async (e) => {\n    const file = e.currentTarget.files?.[0];\n    if (!file) return;\n\n    // Do something with files\n\n    // Then start the upload\n    await startUpload([file]);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Client Headers Option in UploadThing Client (TypeScript)\nDESCRIPTION: This snippet demonstrates how to add client headers to authenticate the client when the server is deployed separately from the client. It uses the genUploader function from uploadthing/client to create an uploader with custom headers.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genUploader } from \"uploadthing/client\";\n\nconst uploadFiles = genUploader<OurFileRouter>({\n  url: \"https://my-server.com\",\n});\n\nuploadFiles(\"endpoint\", {\n  headers: async () => {\n    const token = await getToken();\n    return { Authorization: `Bearer ${token}` };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing UploadThing Components in TypeScript\nDESCRIPTION: Sets up the core UploadThing components and helpers for use in a Vue application. Exports UploadButton, UploadDropzone components and useUploadThing helper function with type safety.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/vue/README.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  generateUploadButton,\n  generateUploadDropzone,\n  generateVueHelpers,\n} from \"@uploadthing/vue\";\n\nexport const UploadButton = generateUploadButton<OurFileRouter>();\nexport const UploadDropzone = generateUploadDropzone<OurFileRouter>();\n\nexport const { useUploadThing } = generateVueHelpers<OurFileRouter>();\n```\n\n----------------------------------------\n\nTITLE: Updating Server Route Options\nDESCRIPTION: Shows the migration from client-side skipPolling to server-side awaitServerData configuration for upload completion handling.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n// Client option\nuploadFiles({\n-   skipPolling: true\n})\n// Server option\nconst router = {\n  myRoute: f(\n    { ... },\n+     { awaitServerData: false }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Signed URLs for UploadThing in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to generate signed URLs for UploadThing. It constructs the URL with required parameters and adds a signature using HMAC SHA256.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/uploading-files/page.mdx#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst searchParams = new URLSearchParams({\n  // Required\n  expires: Date.now() + 60 * 60 * 1000, // 1 hour from now (you choose)\n  \"x-ut-identifier\": \"MY_APP_ID\",\n  \"x-ut-file-name\": \"my-file.png\",\n  \"x-ut-file-size\": 131072,\n  \"x-ut-slug\": \"MY_FILE_ROUTE\",\n\n  // Optional\n  \"x-ut-file-type\": \"image/png\",\n  \"x-ut-custom-id\": \"MY_CUSTOM_ID\",\n  \"x-ut-content-disposition\": \"inline\",\n  \"x-ut-acl\": \"public-read\",\n});\n\nconst url = new URL(\n  `https://{{ REGION_ALIAS }}.ingest.uploadthing.com/${fileKey}`,\n);\nurl.search = searchParams.toString();\n\nconst signature = `hmac-sha256=${hmacSha256(url, apiKey)}`;\nurl.searchParams.append(\"signature\", signature);\n```\n\n----------------------------------------\n\nTITLE: Setting Disabled Prop on Upload Components in React\nDESCRIPTION: This code shows how to set the disabled prop on upload components to disable them when needed.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/react/CHANGELOG.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<UploadButton disabled={true} />\n<UploadDropzone disabled={true} />\n```\n\n----------------------------------------\n\nTITLE: Customizing UploadButton content in SvelteKit\nDESCRIPTION: Demonstrates how to customize the content of the UploadButton component using Svelte slots and slot props. This allows for custom rendering of button text, clear button, and allowed content information.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/svelte/page.mdx#2025-04-13_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<UploadButton {uploader}>\n  <span slot=\"button-content\" let:state>\n    {state.isUploading ? \"Uploading...\" : \"Pick a file\"}\n  </span>\n  <span slot=\"clear-btn\" let:state>\n    Clear files\n  </span>\n  <span slot=\"allowed-content\" let:state>\n    You can choose between {state.fileTypes.join(\", \")} files\n  </span>\n</UploadButton>\n```\n\n----------------------------------------\n\nTITLE: Using uploadFiles with Callback Function for Route Selection\nDESCRIPTION: This snippet shows an alternative way to specify the endpoint in uploadFiles by using a callback function instead of a string literal. This approach enables 'Go to Definition' functionality to navigate directly to the backend route definition.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/client/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait uploadFiles((routeRegistry) => routeRegistry.routeEndpoint, { ... })\n```\n\n----------------------------------------\n\nTITLE: Importing UploadThing CSS Styles in React\nDESCRIPTION: This snippet shows how to import the necessary CSS file for UploadThing components in a React application. It should be added to the root layout.tsx or _app.tsx file to ensure proper styling of UploadThing components.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/faq/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@uploadthing/react/styles.css\";\n```\n\n----------------------------------------\n\nTITLE: Generating UploadThing React Components\nDESCRIPTION: Creation of type-safe UploadThing components and hooks for React implementation.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/tanstack-start/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateReactHelpers, generateUploadButton, generateUploadDropzone } from \"@uploadthing/react\";\nimport type { UploadRouter } from \"../server/uploadthing\";\n\nexport const UploadButton = generateUploadButton<UploadRouter>();\nexport const UploadDropzone = generateUploadDropzone<UploadRouter>();\nexport const { useUploadThing } = generateReactHelpers<UploadRouter>();\n```\n\n----------------------------------------\n\nTITLE: Registering UploadThing Plugin in Fastify\nDESCRIPTION: Demonstrates how to register the UploadThing plugin in a Fastify application, including the router and configuration.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/fastify/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Fastify from \"fastify\";\n\nimport { createRouteHandler } from \"uploadthing/fastify\";\n\nimport { uploadRouter } from \"./router\";\n\nconst fastify = Fastify({ logger: true });\n\nfastify\n  /** ... */\n  .register(createRouteHandler, {\n    router: uploadRouter,\n    config: { ... },\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for UploadThing\nDESCRIPTION: Configuration of the necessary environment variable for UploadThing authentication. The NUXT_ prefix is required for Nuxt to properly recognize the environment variable.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/nuxt/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNUXT_UPLOADTHING_TOKEN=... # A token for interacting with the SDK\n# 👆 NUXT_ prefix is **important**\n```\n\n----------------------------------------\n\nTITLE: Initializing UploadThing Module in Nuxt Configuration\nDESCRIPTION: Configuration to add the UploadThing module to your Nuxt project. This snippet shows how to include the module in nuxt.config.ts with basic settings.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/nuxt/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  modules: [\"@uploadthing/nuxt\"],\n  uploadthing: {\n    /**\n     * Path to your router definition file\n     * @default `~/server/uploadthing.ts`\n     */\n    routerPath: \"\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating UploadThing Components for SolidStart\nDESCRIPTION: Generates and exports UploadThing components with proper typing for use in SolidStart applications.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/solid/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  generateSolidHelpers,\n  generateUploadButton,\n  generateUploadDropzone,\n} from \"@uploadthing/solid\";\n\nimport type { UploadRouter } from \"~/server/uploadthing\";\n\n// URL is only needed for server side rendering, or when your router\n// is deployed on a different path than `/api/uploadthing`\nconst url = `http://localhost:${process.env.PORT ?? 3000}`;\n\nexport const UploadButton = generateUploadButton<UploadRouter>({ url });\nexport const UploadDropzone = generateUploadDropzone<UploadRouter>({ url });\nexport const { createUploadThing } = generateSolidHelpers<UploadRouter>({\n  url,\n});\n```\n\n----------------------------------------\n\nTITLE: Using UploadThing React Components with Input Data\nDESCRIPTION: Shows how to use the UploadThing React components and hooks with the new input passing functionality, including both vanilla approach and component-based implementation.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/react/CHANGELOG.md#2025-04-13_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst { useUploadThing } = generateReactHelpers<typeof OurFileRouter>();\n\nfunction MyComponent() {\n  // Vanilla way\n  const { startUpload } = useUploadthing(\"withInput\");\n  async function onSubmit(files: File[]) {\n    await startUpload(files, { foo: \"bar\" });\n  }\n\n  // Component way\n  return (\n    <UploadButton<OurFileRouter>\n      endpoint=\"withInput\"\n      input={{ foo: \"bar\" }} // or use some state to be dynamic\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an UploadThing Router in Nuxt\nDESCRIPTION: Defining an upload router with file type configurations, middleware, and upload completion handler using the UploadThing API.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/nuxt/README.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// server/uploadthing.ts\nimport { createUploadthing, UTFiles } from \"uploadthing/h3\";\nimport type { FileRouter } from \"uploadthing/h3\";\n\nconst f = createUploadthing();\n\n/**\n * This is your Uploadthing file router. For more information:\n * @see https://docs.uploadthing.com/api-reference/server#file-routes\n */\nexport const uploadRouter = {\n  videoAndImage: f({\n    image: {\n      maxFileSize: \"4MB\",\n      maxFileCount: 4,\n      acl: \"public-read\",\n    },\n    video: {\n      maxFileSize: \"16MB\",\n    },\n  })\n    .middleware(({ event, files }) => {\n      //           ^? H3Event\n\n      // Return some metadata to be stored with the file\n      return { foo: \"bar\" as const };\n    })\n    .onUploadComplete(({ file, metadata }) => {\n      //                       ^? { foo: \"bar\" }\n      console.log(\"upload completed\", file);\n    }),\n} satisfies FileRouter;\n\nexport type UploadRouter = typeof uploadRouter;\n```\n\n----------------------------------------\n\nTITLE: Implementing UploadThing Components in Nuxt\nDESCRIPTION: Vue component example showcasing the usage of UploadButton and UploadDropzone components from UploadThing, including configuration and event handling.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/nuxt/README.md#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst alert = (msg: string) => {\n  window.alert(msg);\n};\n</script>\n\n<template>\n  <div>Playground</div>\n  <UploadButton\n    :config=\"{\n      endpoint: 'videoAndImage',\n      onClientUploadComplete: (res) => {\n        console.log(`onClientUploadComplete`, res);\n        alert('Upload Completed');\n      },\n      onUploadBegin: () => {\n        console.log(`onUploadBegin`);\n      },\n    }\"\n  />\n\n  <UploadDropzone\n    :config=\"{\n      endpoint: 'videoAndImage',\n      onClientUploadComplete: (res) => {\n        console.log(`onClientUploadComplete`, res);\n        alert('Upload Completed');\n      },\n      onUploadBegin: () => {\n        console.log(`onUploadBegin`);\n      },\n    }\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Required environment variable configuration for UploadThing authentication\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/astro/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUPLOADTHING_TOKEN=...\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for UploadThing Image Optimization\nDESCRIPTION: Configuration for Next.js to allow image optimization for files served from UploadThing CDN. This setup adds the app-specific UploadThing domain to the remotePatterns in the Next.js configuration.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/working-with-files/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nexport default {\n  images: {\n    remotePatterns: [\n      {\n        protocol: \"https\",\n        hostname: \"<APP_ID>.ufs.sh\",\n        pathname: \"/f/*\",\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables for UploadThing\nDESCRIPTION: Configures the required environment variable for authentication with the UploadThing service. The UPLOADTHING_TOKEN is required for server-side communication with UploadThing's services.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/svelte/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUPLOADTHING_TOKEN=... # A token for interacting with the SDK\n```\n\n----------------------------------------\n\nTITLE: Implementing UploadThing Button in SolidStart Component\nDESCRIPTION: Example of using the UploadButton component in a SolidStart route file.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/solid/page.mdx#2025-04-13_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UploadButton } from \"~/utils/uploadthing\";\n\nexport default function Home() {\n  return <UploadButton endpoint=\"imageUploader\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic FileRouter in UploadThing\nDESCRIPTION: Implementation of a file router that defines upload configurations and handlers. This example creates a single image upload route with file size and count limitations.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/fetch/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUploadthing, type FileRouter } from \"uploadthing/server\";\n\nconst f = createUploadthing();\n\nexport const uploadRouter = {\n  // Define as many FileRoutes as you like, each with a unique routeSlug\n  imageUploader: f({\n    image: {\n      /**\n       * For full list of options and defaults, see the File Route API reference\n       * @see https://docs.uploadthing.com/file-routes#route-config\n       */\n      maxFileSize: \"4MB\",\n      maxFileCount: 1,\n    },\n  }).onUploadComplete((data) => {\n    console.log(\"upload completed\", data);\n  }),\n} satisfies FileRouter;\n\nexport type OurFileRouter = typeof uploadRouter;\n```\n\n----------------------------------------\n\nTITLE: Creating Route Handler in Fastify\nDESCRIPTION: Example of exposing an UploadThing router in a Fastify application. Registers the createRouteHandler function as a plugin.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/server/page.mdx#2025-04-13_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport Fastify from \"fastify\";\nimport { createRouteHandler } from \"uploadthing/fastify\";\nimport { uploadRouter } from \"~/server/uploadthing.ts\";\n\nconst fastify = Fastify();\n\nfastify.register(createRouteHandler({\n  router: uploadRouter,\n  // config: { ... },\n}));\n```\n\n----------------------------------------\n\nTITLE: Customizing UploadButton with inline styles in React\nDESCRIPTION: This snippet demonstrates how to use the appearance prop to apply inline styles to the UploadButton component. It shows how to conditionally apply styles based on the component's state using a callback function.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/theming/page.mdx#2025-04-13_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<UploadButton\n  appearance={{\n    button({ ready, isUploading }) {\n      return {\n        fontSize: \"1.6rem\",\n        color: \"black\",\n        ...(ready && { color: \"#ecfdf5\" }),\n        ...(isUploading && { color: \"#d1d5db\" }),\n      };\n    },\n    container: {\n      marginTop: \"1rem\",\n    },\n    allowedContent: {\n      color: \"#a1a1aa\",\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration Example\nDESCRIPTION: Demonstrates the new configuration provider that allows setting options via environment variables instead of constructor parameters.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst api = new UTApi({\n  logLevel: \"Info\",\n});\n// is the same as\nprocess.env.UPLOADTHING_LOG_LEVEL = \"Info\";\nconst api = new UTApi();\n```\n\n----------------------------------------\n\nTITLE: Styling UploadButton with TailwindCSS className Prop\nDESCRIPTION: Example of styling the UploadButton component using the className prop with Tailwind CSS, leveraging the custom UploadThing variants.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/theming/page.mdx#2025-04-13_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<UploadButton\\n    className=\"mt-4 ut-button:bg-red-500 ut-button:ut-readying:bg-red-500/50\"\\n               |    └─ applied to the button └─ applied to the button when readying\\n               └─ applied to the container\\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment Variables for UploadThing in NextJS\nDESCRIPTION: Instructions for copying the example environment file and configuring it with an UploadThing API key. This is required to authenticate with the UploadThing service.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/examples/with-drizzle-pagesdir/README.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Renaming Files with renameFiles Method\nDESCRIPTION: Allows renaming single or multiple files using either file keys or custom IDs. Supports batch operations for multiple files.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/ut-api/page.mdx#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utapi } from \"~/server/uploadthing.ts\";\n\nawait utapi.renameFiles({\n  key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n  newName: \"myImage.jpg\",\n});\nawait utapi.renameFiles({\n  customId: \"my-identifier\",\n  newName: \"myImage.jpg\",\n});\n\nawait utapi.renameFiles([\n  {\n    key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n    newName: \"myImage.jpg\",\n  },\n  {\n    key: \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\",\n    newName: \"myOtherImage.jpg\",\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a FileRouter for UploadThing in SolidStart\nDESCRIPTION: Defines the server-side file router for handling image uploads with authentication middleware and upload completion callbacks.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/solid/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUploadthing, UploadThingError } from \"uploadthing/server\";\nimport type { FileRouter } from \"uploadthing/server\";\n\nconst f = createUploadthing();\n\nconst auth = (req: Request) => ({ id: \"fakeId\" }); // Fake auth function\n\nexport const uploadRouter = {\n  // Define as many FileRoutes as you like, each with a unique routeSlug\n  imageUploader: f({\n    image: {\n      /**\n       * For full list of options and defaults, see the File Route API reference\n       * @see https://docs.uploadthing.com/file-routes#route-config\n       */\n      maxFileSize: \"4MB\",\n      maxFileCount: 1,\n    },\n  })\n    // Set permissions and file types for this FileRoute\n    .middleware(async ({ req }) => {\n      // This code runs on your server before upload\n      const user = await auth(req);\n\n      // If you throw, the user will not be able to upload\n      if (!user) throw new UploadThingError(\"Unauthorized\");\n\n      // Whatever is returned here is accessible in onUploadComplete as `metadata`\n      return { userId: user.id };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      // This code RUNS ON YOUR SERVER after upload\n      console.log(\"Upload complete for userId:\", metadata.userId);\n\n      console.log(\"file url\", file.ufsUrl);\n\n      // !!! Whatever is returned here is sent to the clientside `onClientUploadComplete` callback\n      return { uploadedBy: metadata.userId };\n    }),\n} satisfies FileRouter;\n\nexport type UploadRouter = typeof uploadRouter;\n```\n\n----------------------------------------\n\nTITLE: Configuring UploadThing File Routes in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure file routes in UploadThing using TypeScript. It shows the usage of middleware to access file information before upload.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nf({ ... })\n  .middleware(({ files }) => {\n    const uploadCount = files.length\n    // ...\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating Route Handler in Express\nDESCRIPTION: Example of exposing an UploadThing router in an Express application. Uses the createRouteHandler function as middleware at a specific route path.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/server/page.mdx#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\";\nimport { createRouteHandler } from \"uploadthing/express\";\nimport { uploadRouter } from \"~/server/uploadthing.ts\";\n\nconst app = express();\n\napp.use(\"/api/uploadthing\", createRouteHandler({\n  router: uploadRouter,\n  // config: { ... },\n}));\n```\n\n----------------------------------------\n\nTITLE: Updating genUploader Usage\nDESCRIPTION: Shows how to update the genUploader function usage to handle the new object return type with uploadFiles and createUpload functions.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/v7/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genUploader } from 'uploadthing/client'\nimport type { UploadRouter } from '~/uploadthing/router'\n\nconst uploadFiles = genUploader<UploadRouter>() // [!code --]\nconst { uploadFiles, createUpload } = genUploader<UploadRouter>() // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Installing UploadThing Packages for Remix\nDESCRIPTION: This command installs the required packages for using UploadThing with a Remix application.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/remix/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install uploadthing @uploadthing/react\n```\n\n----------------------------------------\n\nTITLE: Customizing UploadButton with className prop in React\nDESCRIPTION: This snippet demonstrates how to apply custom CSS classes to the UploadButton component using the className prop. It shows how to target specific elements of the component using data attributes.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/theming/page.mdx#2025-04-13_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<UploadButton className=\"custom-class\" />\n```\n\nLANGUAGE: css\nCODE:\n```\n/* applied to container */\n.custom-class {\n  background-color: none;\n}\n\n/* applied to button */\n.custom-class > *[data-ut-element=\"button\"] {\n  font-size: 1.6rem;\n  color: rgb(0 0 0 / 1);\n  background-color: rgb(239 68 68 / 1);\n}\n\n/* applied to button when uploading */\n.custom-class > *[data-ut-element=\"button\"][data-state=\"readying\"] {\n  background-color: rgb(239 68 68 / 0.5);\n  color: rgb(0 0 0 / 0.5);\n  cursor: not-allowed;\n}\n\n/* applied to the button when uploading */\n.custom-class > *[data-ut-element=\"button\"][data-state=\"uploading\"] {\n  background-color: rgb(239 68 68 / 0.5);\n  color: rgb(0 0 0 / 0.5);\n  cursor: not-allowed;\n}\n\n/* applied to the upload indicator when uploading */\n.custom-class > *[data-ut-element=\"button\"][data-state=\"uploading\"]::after {\n  background-color: rgb(234 88 12 / 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating H3 Event Handlers for UploadThing (Vanilla H3)\nDESCRIPTION: TypeScript code to set up H3 event handlers for UploadThing, including router configuration and app setup for vanilla H3.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/h3/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, createRouter } from \"h3\";\n\nimport { createRouteHandler } from \"uploadthing/h3\";\nimport { uploadRouter } from \"./router\";\n\nconst app = createApp();\nconst router = createRouter();\n\nrouter.use(\n  \"/api/uploadthing\",\n  createRouteHandler({\n    router: uploadRouter,\n    config: { ... },\n  })\n);\n\napp.use(router);\n\nexport { app }; // Run server with e.g. `listhen`\n```\n\n----------------------------------------\n\nTITLE: Creating an API route handler for UploadThing\nDESCRIPTION: Sets up the SvelteKit server endpoint that connects the FileRouter to the UploadThing service. This creates GET and POST handlers at the specified route that handle file upload requests.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/svelte/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from \"$env/dynamic/private\";\nimport { ourFileRouter } from \"$lib/server/uploadthing\";\n\nimport { createRouteHandler } from \"uploadthing/server\";\n\nconst handlers = createRouteHandler({\n  router: ourFileRouter,\n  config: {\n    token: env.UPLOADTHING_TOKEN,\n  },\n});\n\nexport { handlers as GET, handlers as POST };\n```\n\n----------------------------------------\n\nTITLE: Initializing UploadThing in H3\nDESCRIPTION: Example of creating an UploadThing instance in an H3 application. Shows the h3-specific import path and how the middleware function receives an H3Event object instead of request/response.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/server/page.mdx#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUploadthing, type FileRouter } from \"uploadthing/h3\";\n\nconst f = createUploadthing();\nexport const uploadRouter = { ... };\n\n// ...\nf({ ... })\n  .middleware(({ event }) => {\n    //           ^? event: H3Event\n  })\n```\n\n----------------------------------------\n\nTITLE: Using Upload Component with Input in React\nDESCRIPTION: Demonstrates how to use the upload components with input data in React, showing both the vanilla hook approach and component-based approach.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/solid/CHANGELOG.md#2025-04-13_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst { useUploadThing } = generateReactHelpers<typeof OurFileRouter>();\n\nfunction MyComponent() {\n  // Vanilla way\n  const { startUpload } = useUploadthing(\"withInput\");\n  async function onSubmit(files: File[]) {\n    await startUpload(files, { foo: \"bar\" });\n  }\n\n  // Component way\n  return (\n    <UploadButton<OurFileRouter>\n      endpoint=\"withInput\"\n      input={{ foo: \"bar\" }} // or use some state to be dynamic\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Upload with UploadThing API using cURL\nDESCRIPTION: This snippet demonstrates how to register an upload with UploadThing using a cURL command. It includes setting headers, providing file keys, metadata, callback URL, and configuration flags.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/uploading-files/page.mdx#2025-04-13_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST https://{{ REGION_ALIAS }}.ingest.uploadthing.com/route-metadata \\\n    --header 'content-type: application/json' \\\n    --header 'x-uploadthing-api-key: YOUR_API_KEY' \\\n    --data '{\n        \"fileKeys\": [\n          \"KEY_1\",\n        ],\n        \"metadata\": {\n          \"uploadedBy\": \"user_123\"\n        },\n        \"callbackUrl\": \"https://your-domain.com/api/uploadthing\",\n        \"callbackSlug\": \"imageUploader\",\n        \"awaitServerData\": false,\n        \"isDev\": false\n    }'\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Vue/Nuxt Support Addition\nDESCRIPTION: Documents the addition of Vue and Nuxt support along with multiple dependency updates across @uploadthing packages.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/vue/CHANGELOG.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 6.5.0\n\n### Minor Changes\n\n- [#293](https://github.com/pingdotgg/uploadthing/pull/293)\n  [`09870e4`](https://github.com/pingdotgg/uploadthing/commit/09870e43f310c15e48f0089e875c6d9663fd305b)\n  Thanks [@markflorkowski](https://github.com/markflorkowski)! - feat: vue and\n  nuxt support!\n\n### Patch Changes\n\n- Updated dependencies\n  [[`9b93886`](https://github.com/pingdotgg/uploadthing/commit/9b938860d49a1a593e38804f81c759925d713605),\n  [`ea7e41b`](https://github.com/pingdotgg/uploadthing/commit/ea7e41b5d9d85135540d9b51fa5551859fbe7623),\n  [`41de3c5`](https://github.com/pingdotgg/uploadthing/commit/41de3c55c8bd808166449c09e9006650178067d5),\n  [`09870e4`](https://github.com/pingdotgg/uploadthing/commit/09870e43f310c15e48f0089e875c6d9663fd305b)]:\n  - @uploadthing/dropzone@0.4.0\n  - @uploadthing/shared@6.7.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Adapter Handler\nDESCRIPTION: Basic implementation of makeAdapterHandler showing the core handler structure.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/custom/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeAdapterHandler } from \"uploadthing/server\";\n\nmakeAdapterHandler<[BunRequest, Server], AdapterArgs>(\n  (req, server) => Effect.succeed({ req, server }),\n  (req) => Effect.succeed(req),\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Styling UploadDropzone with TailwindCSS className Prop\nDESCRIPTION: Example of styling the UploadDropzone component using the className prop with Tailwind CSS, targeting different elements with custom variants.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/theming/page.mdx#2025-04-13_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<UploadDropzone\\n    className=\"bg-slate-800 ut-label:text-lg ut-allowed-content:ut-uploading:text-red-300\"\\n               |            |                └─ applied to the allowed content when uploading\\n               |            └─ applied to the label\\n               └─ applied to the container\\n\\n/>\n```\n\n----------------------------------------\n\nTITLE: UploadDropzone Component Anatomy in JSX\nDESCRIPTION: Displays the simplified component structure for UploadDropzone, showing the five themeable elements: container, upload icon, label, button, and allowed content.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/theming/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={className} data-state={/* \"ready\" | \"readying\" | \"uploading\" */}>\\n  <svg data-ut-element=\"upload-icon\" data-state={/* \"ready\" | \"readying\" | \"uploading\" */}>\\n    ...\\n  </svg>\\n  <label data-ut-element=\"label\" data-state={/* \"ready\" | \"readying\" | \"uploading\" */}>\\n    {/* label content goes here */}\\n    <input disabled={!ready} />\\n  </label>\\n  <div data-ut-element=\"allowed-content\" data-state={/* \"ready\" | \"readying\" | \"uploading\" */}>\\n    /allowed content goes here/\\n  </div>\\n  <button\\n    data-ut-element=\"button\"\\n    data-state={/* \"ready\" | \"readying\" | \"uploading\" */}\\n    disabled={isUploading}\\n  >\\n    {/* button content goes here */}\\n  </button>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring TailwindCSS with UploadThing - TailwindMerge Usage\nDESCRIPTION: Example of configuring UploadThing components to use tailwind-merge for class merging, which helps resolve conflicts between Tailwind CSS classes.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/theming/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { twMerge } from 'tailwind-merge'\\nimport { UploadButton } from '~/lib/uploadthing'\\n\\nexport function Page() {\\n  return (\\n    <UploadButton \\n      ...\\n      config={{ cn: twMerge }}\\n    />\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing UploadThing in Express\nDESCRIPTION: Example of creating an UploadThing instance in an Express application. Shows the express-specific import path and how the middleware function receives ExpressRequest and ExpressResponse objects.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/server/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUploadthing, type FileRouter } from \"uploadthing/express\";\n\nconst f = createUploadthing();\nexport const uploadRouter = { ... };\n\n// ...\nf({ ... })\n  .middleware(({ req, res }) => {\n    //           ^? req: ExpressRequest, res: ExpressResponse\n  })\n```\n\n----------------------------------------\n\nTITLE: UploadFileResponse Type Definition\nDESCRIPTION: Type definition for the response object returned after a successful file upload, including file metadata and server data.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/react/page.mdx#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UploadFileResponse<TServerOutput> = {\n  name: string\n  size: number\n  key: string\n  url: string\n  customId: string | null\n  // The data returned from the `onUploadComplete` callback on\n  // the file route. Note that if `RouteOptions.awaitServerData`\n  // isn't enabled this will be `null`.\n  serverData: TServerOutput\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TailwindCSS v3 with UploadThing\nDESCRIPTION: Shows how to configure Tailwind v3 with UploadThing using the withUt utility function, which adds necessary classes and variants for styling components.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/theming/page.mdx#2025-04-13_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { withUt } from \"uploadthing/tw\";\\n\\nexport default withUt({\\n  // your config goes here\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TailwindCSS v3 with UploadThing in JavaScript\nDESCRIPTION: Shows how to configure Tailwind v3 with UploadThing in a JavaScript file using the withUt utility function.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/theming/page.mdx#2025-04-13_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// @ts-check\\nconst { withUt } = require(\"uploadthing/tw\");\\n\\nmodule.exports = withUt({\\n  // your config goes here\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating File Route Builder\nDESCRIPTION: Implementation of createBuilder function to create a file route builder for defining file routes.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/custom/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBuilder } from \"uploadthing/server\";\n\nconst f = createBuilder<AdapterArgs>();\n```\n\n----------------------------------------\n\nTITLE: Updating ACL with updateACL Method\nDESCRIPTION: Updates Access Control List (ACL) settings for single or multiple files. Supports changing between public-read and private access levels.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/ut-api/page.mdx#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utapi } from \"~/server/uploadthing.ts\";\n\n// Make a single file public\nawait utapi.updateACL(\n  \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n  \"public-read\",\n);\n\n// Make multiple files private\nawait utapi.updateACL(\n  [\n    \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n    \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\",\n  ],\n  \"private\",\n);\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Frontend-Backend Combinations with pnpm\nDESCRIPTION: Example bash commands for running the vanilla JS frontend and Hono server in separate terminal windows. This demonstrates how to start different components of the application independently.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/examples/backend-adapters/README.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd client-vanilla && pnpm dev\ncd server && pnpm dev:hono\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Uploader Component\nDESCRIPTION: React component implementation for handling file uploads with UploadThing\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/astro/page.mdx#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UploadButton } from \"~/utils/uploadthing\";\n\nexport function ImageUploader() {\n  return (\n    <UploadButton\n      endpoint=\"imageUploader\"\n      onClientUploadComplete={(res) => {\n        // Do something with the response\n        console.log(\"Files: \", res);\n        alert(\"Upload Completed\");\n      }}\n      onUploadError={(error: Error) => {\n        // Do something with the error.\n        alert(`ERROR! ${error.message}`);\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting NextJS Development Server\nDESCRIPTION: Command to install project dependencies with pnpm and start the NextJS development server. Run this after configuring environment variables to launch the application.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/examples/with-drizzle-pagesdir/README.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i && pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes in Middleware and Hook Signatures\nDESCRIPTION: Documents the breaking changes in middleware function signatures and hook usage patterns, showing before and after examples of the new API.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/react/CHANGELOG.md#2025-04-13_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nroute: f([\"image\"])\n  // res only for Next.js pages\n  .middleware((req, res) => {\n    return {};\n  });\n\n// after\nroute: f([\"image\"])\n  // res only for Next.js pages\n  .middleware((opts) => {\n    opts.req; // Request, NextRequest, NextApiRequest depending on runtime\n    opts.res; // NextApiResponse for Next.js pages\n    opts.input; // typesafe, validated input\n    return {};\n  });\n```\n\n----------------------------------------\n\nTITLE: UploadButton Component Anatomy in TSX\nDESCRIPTION: Shows the simplified component structure for UploadButton, highlighting the three themeable elements: container, button, and allowed content.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/theming/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<div className={className} data-state={}>\\n  <label\\n    data-ut-element=\"button\"\\n    data-state={/* \"ready\" | \"readying\" | \"uploading\" */}\\n  >\\n    <input />\\n    /button content goes here/\\n  </label>\\n  <div\\n    data-ut-element=\"allowed-content\"\\n    data-state={/* \"ready\" | \"readying\" | \"uploading\" */}\\n  >\\n    /allowed content text goes here/\\n  </div>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing UploadThing Styles Directly\nDESCRIPTION: Shows how to import UploadThing styles directly when not using the withUt wrapper for Tailwind configuration.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/theming/page.mdx#2025-04-13_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport \"@uploadthing/react/styles.css\";\\n\\n// ...\n```\n\n----------------------------------------\n\nTITLE: Updating Route Handler Configuration in TypeScript\nDESCRIPTION: Shows the changes required to update route handler configuration from using uploadthingSecret to the new token-based authentication system.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- createRouteHandler({ router, config: { uploadthingSecret: 'sk_123' } })\n+ createRouteHandler({ router, config: { token: 'MY_TOKEN' } })\n\n- new UTApi({ apiKey: 'sk_123' })\n+ new UTApi({ token: 'MY_TOKEN' })\n```\n\n----------------------------------------\n\nTITLE: Creating H3 Event Handlers for UploadThing (Nitro)\nDESCRIPTION: TypeScript code to set up H3 event handlers for UploadThing in a Nitro environment.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/h3/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouteHandler } from \"uploadthing/h3\";\n\nimport { uploadRouter } from \"./router\";\n\nexport default createRouteHandler({\n  router: uploadRouter,\n  config: { ... },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for UploadThing\nDESCRIPTION: Environment variable configuration required for UploadThing to function properly with the SDK.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/fetch/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUPLOADTHING_TOKEN=... # A token for interacting with the SDK\n```\n\n----------------------------------------\n\nTITLE: Generating UploadThing Components for Remix\nDESCRIPTION: This utility file creates and exports custom UploadButton and UploadDropzone components for use in the Remix application.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/remix/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  generateUploadButton,\n  generateUploadDropzone,\n} from \"@uploadthing/react\";\n\nimport type { UploadRouter } from \"~/routes/api.uploadthing\";\n\nexport const UploadButton = generateUploadButton<UploadRouter>();\nexport const UploadDropzone = generateUploadDropzone<UploadRouter>();\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind v4 CSS for UploadThing\nDESCRIPTION: CSS configuration for integrating UploadThing with Tailwind v4.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/solid/page.mdx#2025-04-13_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n\n@import \"uploadthing/tw/v4\";\n@source \"../node_modules/@uploadthing/solid/dist\"; /** <-- depends on your project structure */\n```\n\n----------------------------------------\n\nTITLE: Updated REST API Endpoint Usage\nDESCRIPTION: Shows the transition from the old API endpoint format to the new version-based URL structure at api.uploadthing.com. The new API eliminates the need for the x-uploadthing-version header by using explicit path-based versioning.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/v7/page.mdx#2025-04-13_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n// Old API\ncurl -X POST https://uploadthing.com/api/listFiles \\\n  -H 'x-uploadthing-version: 6.12.0' \\\n  ...\n\n// New API\ncurl -X POST https://api.uploadthing.com/v6/listFiles \\\n  ...\n```\n\n----------------------------------------\n\nTITLE: Styling UploadButton with the appearance Prop\nDESCRIPTION: Example of styling the UploadButton component using the appearance prop, which allows targeting specific elements with custom styles.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/theming/page.mdx#2025-04-13_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<UploadButton\\n  appearance={{\\n    button:\\n      \"ut-ready:bg-green-500 ut-uploading:cursor-not-allowed rounded-r-none bg-red-500 bg-none after:bg-orange-400\",\\n    container: \"w-max flex-row rounded-md border-cyan-300 bg-slate-800\",\\n    allowedContent:\\n      \"flex h-8 flex-col items-center justify-center px-2 text-white\",\\n  }}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Upload Endpoints in TypeScript\nDESCRIPTION: Demonstrates how to configure custom upload endpoints using generateComponents. Shows different URL configuration options including custom hosts and paths.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { UploadButton, UploadDropzone } = generateComponents({\n  url: \"/api/my-upload-endpoint\", // if the host is unchanged from default (localhost or VERCEL_URL)\n  // url: \"https://my-custom-host.com\" // if the host is different but path is /api/uploadthing\n  // url: \"https://my-custom-host.com/my-custom-endpoint\" // fully custom url\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking uploadthing dependency updates in markdown changelog\nDESCRIPTION: A changelog documenting the updates to the uploadthing dependency across multiple versions (5.5.3, 5.5.2, 5.5.1) with corresponding commit references.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/examples/with-serveractions/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @example/serveractions\n\n## null\n\n### Patch Changes\n\n- Updated dependencies\n  [[`2e8b410`](https://github.com/pingdotgg/uploadthing/commit/2e8b410bb15c2688e9b6938c4a2cd17cf6110289)]:\n  - uploadthing@5.5.3\n\n## null\n\n### Patch Changes\n\n- Updated dependencies\n  [[`8cfdade`](https://github.com/pingdotgg/uploadthing/commit/8cfdade9fee61a636fa1c88bc9380d4ac77e91d9)]:\n  - uploadthing@5.5.2\n\n## null\n\n### Patch Changes\n\n- Updated dependencies\n  [[`353f6d0`](https://github.com/pingdotgg/uploadthing/commit/353f6d026fbee7480573d735d0406477dcb9e0bc)]:\n  - uploadthing@5.5.1\n```\n\n----------------------------------------\n\nTITLE: Ordering CSS Imports for UploadThing and Global Styles\nDESCRIPTION: This code demonstrates the correct order of importing CSS files when using UploadThing components alongside other styled components. The UploadThing styles should be imported before other global styles to avoid conflicts.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/faq/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@uploadthing/react/styles.css\";\nimport \"../styles/globals.css\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Remix Resource Route for UploadThing\nDESCRIPTION: This code exports the action and loader functions needed for a Remix resource route that handles UploadThing file uploads.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/remix/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { createRouteHandler } from \"uploadthing/remix\";\n\nconst uploadRouter = {\n  // ...\n};\n\nexport const { action, loader } = createRouteHandler({\n  router: uploadRouter,\n\n  // Apply an (optional) custom config:\n  // config: { ... },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Upload Endpoint in TypeScript\nDESCRIPTION: Example showing how to configure custom callback URLs for the UploadThing components by passing a URL parameter to generateComponents. Supports different endpoint paths and custom hosts.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/solid/CHANGELOG.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { UploadButton, UploadDropzone } = generateComponents({\n  url: \"/api/my-upload-endpoint\", // if the host is unchanged from default (localhost or VERCEL_URL)\n  // url: \"https://my-custom-host.com\" // if the host is different but path is /api/uploadthing\n  // url: \"https://my-custom-host.com/my-custom-endpoint\" // fully custom url\n});\n```\n\n----------------------------------------\n\nTITLE: Middleware Pattern Changes in UploadThing\nDESCRIPTION: Illustrates the breaking change in middleware implementation, showing both the old pattern and the new object-based pattern for handling request, response, and input.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n// before\nroute: f([\"image\"])\n  // res only for Next.js pages\n  .middleware((req, res) => {\n    return {};\n  });\n\n// after\nroute: f([\"image\"])\n  // res only for Next.js pages\n  .middleware((opts) => {\n    opts.req; // Request, NextRequest, NextApiRequest depending on runtime\n    opts.res; // NextApiResponse for Next.js pages\n    opts.input; // typesafe, validated input\n    return {};\n  });\n```\n\n----------------------------------------\n\nTITLE: Client Headers Configuration in TypeScript/React\nDESCRIPTION: Example showing how to configure client headers for authentication with the uploadthing components and hooks. This allows authenticating the client when the server is deployed separately.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/react/CHANGELOG.md#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UploadButton, useUploadThing } from \"~/utils/uploadthing\";\n\n// Using hook\nconst { startUpload } = useUploadThing(\"endpoint\", {\n  headers: async () => {\n    const token = await getToken();\n    return { Authorization: `Bearer ${token}` };\n  },\n});\n\n// Using components\n<UploadButton\n  endpoint=\"endpoint\"\n  headers={async () => {\n    const token = await getToken();\n    return {\n      Authorization: `Bearer ${token}`,\n    };\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Installing UploadThing Packages with npm/yarn\nDESCRIPTION: Command to install the required UploadThing packages for integration with Next.js.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/appdir/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install uploadthing @uploadthing/react\n```\n\n----------------------------------------\n\nTITLE: Vue 3 Script Setup Syntax Example\nDESCRIPTION: Example of Vue 3's script setup syntax in Single File Components (SFCs).\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/examples/backend-adapters/client-vue/README.md#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n```\n\n----------------------------------------\n\nTITLE: Implementing UploadThing with Astro\nDESCRIPTION: Route handler configuration for integrating UploadThing with Astro framework. Creates GET and POST handlers for file upload functionality.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/fetch/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouteHandler } from \"uploadthing/server\";\n\nimport { uploadRouter } from \"../../server/uploadthing\";\n\nconst handlers = createRouteHandler({\n  router: uploadRouter,\n  config: { ... },\n});\nexport { handlers as GET, handlers as POST };\n```\n\n----------------------------------------\n\nTITLE: Configuring File Upload Route with Input in TypeScript\nDESCRIPTION: Shows how to configure a file upload route with input validation using zod schema. The middleware can access typed input data and pass it through to the upload complete handler.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/solid/CHANGELOG.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nwithInput: f([\"image\"])\n  .input(\n    z.object({\n      foo: z.string(),\n    }),\n  )\n  .middleware((opts) => {\n    console.log(\"input\", opts.input);\n    // input is typed as { foo: string }\n    return {};\n  })\n  .onUploadComplete((data) => {\n    console.log(\"upload completed\", data);\n  })\n```\n\n----------------------------------------\n\nTITLE: Using UploadButton Component with Manual Type Generics\nDESCRIPTION: This example illustrates how to use the UploadButton component from @uploadthing/react with manual type generics. It's not recommended due to the need for double-passing the endpoint and providing generics, which can be cumbersome.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/faq/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UploadButton } from \"@uploadthing/react\";\n\nimport type { OurFileRouter } from \"~/app/api/uploadthing/core\";\n\nfunction MyComponent() {\n  return (\n    <UploadButton<OurFileRouter, \"myFileRoute\"> // <--\n      endpoint=\"myFileRoute\" // <-- note how you have to double-pass the endpoint\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updated UTApi Upload Methods in TypeScript\nDESCRIPTION: Shows the updated method signatures for UTApi uploadFiles and uploadFilesFromUrl, changing from positional arguments to an options object pattern.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n- uploadFiles(files, metadata, contentDisposition)\n+ uploadFiles(files, { metadata, contentDisposition })\n\n- uploadFilesFromUrl(urls, metadata, contentDisposition)\n+ uploadFilesFromUrl(urls, { metadata, contentDisposition })\n```\n\n----------------------------------------\n\nTITLE: Updated Hook Usage Pattern for useUploadThing\nDESCRIPTION: Shows the breaking change in the useUploadThing hook signature, where the endpoint parameter has been moved to a separate positional argument instead of being part of the options object.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n// before\nuseUploadthing({\n  endpoint: \"withInput\"\n  onUploadComplete: ...\n})\n\n// after\nuseUploadthing(\"withInput\", {\n  onUploadComplete: ...\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for UploadThing API Documentation in JavaScript\nDESCRIPTION: This snippet sets up metadata for the UploadThing API documentation page. It uses a custom 'docsMetadata' function to define the title, description, and category of the API reference.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/openapi-spec/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { docsMetadata } from \"@/lib/utils\";\n\nexport const metadata = docsMetadata({\n  title: \"OpenAPI Specification\",\n  description:\n    \"The UploadThing REST API specification for developers building SDKs\",\n  category: \"API Reference\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving File URLs with getFileUrls Method\nDESCRIPTION: Method to retrieve URLs for accessing files using fileKeys. Can handle both single and multiple file keys. Note: This method is deprecated.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/ut-api/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utapi } from \"~/server/uploadthing.ts\";\n\nconst oneUrl = await utapi.getFileUrls(\n  \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n);\nconst multipleUrls = await utapi.getFileUrls([\n  \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n  \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\",\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing UploadThing with Elysia\nDESCRIPTION: Integration of UploadThing with the Elysia framework, setting up route handlers and creating endpoints for file uploads.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/fetch/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Elysia } from \"elysia\";\n\nimport { createRouteHandler } from \"uploadthing/server\";\n\nimport { uploadRouter } from \"./uploadthing.ts\";\n\nconst handlers = createRouteHandler({\n  router: uploadRouter,\n  config: { ... },\n});\n\nnew Elysia()\n  .get(\"/api\", () => \"Hello from Elysia!\")\n  .get(\"/api/uploadthing\", (ev) => handlers(ev.request))\n  .post(\"/api/uploadthing\", (ev) => handlers(ev.request))\n  .listen(3000, (server) => {\n    console.log(`Server listening on port ${server.port}`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Generating File Keys in Go for UploadThing\nDESCRIPTION: This Go code shows how to generate file keys for UploadThing. It includes functions for hashing, shuffling alphabets, and encoding app IDs using Sqids.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/uploading-files/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"math\"\n\t\"github.com/sqids/sqids-go\"\n)\n\nfunc djb2(s string) int32 {\n\th := int64(5381)\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\th = (h * 33) ^ int64(s[i])\n\t\t// 32-bit integer overflow\n\t\th &= 0xFFFFFFFF\n\t}\n\th = (h & 0xBFFFFFFF) | ((h >> 1) & 0x40000000)\n\n\t// Convert to signed 32-bit integer\n\tif h >= 0x80000000 {\n\t\th -= 0x100000000\n\t}\n\n\treturn int32(h)\n}\n\nfunc shuffle(input string, seed string) string {\n\tchars := []rune(input)\n\tseedNum := djb2(seed)\n\n\tfor i := 0; i < len(chars); i++ {\n\t\tj := (int(seedNum)%(i+1) + i) % len(chars)\n\t\tchars[i], chars[j] = chars[j], chars[i]\n\t}\n\n\treturn string(chars)\n}\n\nfunc generateKey(fileSeed string, appId string) string {\n\talphabet := shuffle(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\", appId)\n\ts, _ := sqids.New(sqids.Options{\n\t\tMinLength: 12,\n\t\tAlphabet:  alphabet,\n\t})\n\n\tencodedAppId, _ := s.Encode(\n\t\t[]uint64{uint64(math.Abs(float64(djb2(appId))))},\n\t)\n\n\treturn encodedAppId + fileSeed\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating UTApi Constructor Usage in TypeScript\nDESCRIPTION: Demonstrates the migration from using the deprecated utapi import to using the UTApi constructor directly with configuration options.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n- import { utapi } from 'uploadthing/server'\n+ import { UTApi } from 'uploadthing/server'\n+\n+ export const utapi = new UTApi(opts)\n```\n\n----------------------------------------\n\nTITLE: Initializing UTApi Instance in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize an instance of UTApi with optional configuration. It shows the basic setup for using the UploadThing API in a server-side TypeScript environment.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/ut-api/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UTApi } from \"uploadthing/server\";\n\nexport const utapi = new UTApi({\n  // ...options,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting uploadProgressGranularity Option in React\nDESCRIPTION: This code snippet demonstrates how to set the uploadProgressGranularity option to control how granular progress events are fired during file uploads. It can be set to 'all', 'fine', or 'coarse'.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/react/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuploadProgressGranularity: \"all\" | \"fine\" | \"coarse\"\n```\n\n----------------------------------------\n\nTITLE: Creating API Route Handler\nDESCRIPTION: API route implementation for handling UploadThing file uploads using Tanstack/Start.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/tanstack-start/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAPIFileRoute } from \"@tanstack/start/api\";\nimport { createRouteHandler } from \"uploadthing/server\";\nimport { uploadRouter } from \"../../server/uploadthing\";\n\nconst handlers = createRouteHandler({ router: uploadRouter });\n\nexport const Route = createAPIFileRoute(\"/api/uploadthing\")({\n  GET: handlers,\n  POST: handlers,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring UploadThing API with Environment Variables\nDESCRIPTION: Demonstrates the new configuration provider in UploadThing v7 that allows setting options via environment variables as an alternative to configuration objects. Environment variables should be prefixed with UPLOADTHING_ and use constant case.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/v7/page.mdx#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst api = new UTApi({\n  logLevel: 'Info',\n})\n\n// is the same as\nprocess.env.UPLOADTHING_LOG_LEVEL = 'Info'\nconst api = new UTApi()\n```\n\n----------------------------------------\n\nTITLE: Updated uploadFiles Function Signature\nDESCRIPTION: Shows the new object-based syntax for the uploadFiles function, including the new input parameter option.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/solid/CHANGELOG.md#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nconst { uploadFiles } = generateReactHelpers<OurFileRouter>();\nuploadFiles(files, endpoint, { url: \"\" });\n\n// after\nconst { uploadFiles } = generateReactHelpers<OurFileRouter>();\nuploadFiles({\n  files,\n  endpoint,\n  input, // <-- new option\n  url,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Express API Route Handler\nDESCRIPTION: Setup of Express route handler for processing file uploads using the configured FileRouter.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/express/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\";\n\nimport { createRouteHandler } from \"uploadthing/express\";\n\nimport { uploadRouter } from \"./uploadthing\";\n\nconst app = express();\n\napp.use(\n  \"/api/uploadthing\",\n  createRouteHandler({\n    router: uploadRouter,\n    config: { ... },\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring UploadThing Module in Nuxt\nDESCRIPTION: Adding the @uploadthing/nuxt module to the Nuxt configuration file (nuxt.config.ts).\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/nuxt/README.md#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: [\"@uploadthing/nuxt\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Handler Methods\nDESCRIPTION: Shows how to re-export the unified handler as separate GET and POST methods for frameworks that expect named exports.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/v7/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouteHandler } from \"uploadthing/server\";\n\nimport { uploadRouter } from \"~/uploadthing/router\";\n\nconst handler = createRouteHandler({ router, config });\nexport { handler as GET, handler as POST };\n```\n\n----------------------------------------\n\nTITLE: Implementing Upload Button Component\nDESCRIPTION: Example implementation of the UploadButton component in a React component.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/tanstack-start/page.mdx#2025-04-13_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFileRoute } from \"@tanstack/react-router\";\nimport { UploadButton } from \"../utils/uploadthing\";\n\nexport const APIRoute = createFileRoute(\"/\")({\n  component: Home,\n});\n\nfunction Home() {\n  return <UploadButton endpoint=\"imageUploader\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Callback Request in Development Mode\nDESCRIPTION: This cURL command shows how to simulate a callback request to your development server when the 'isDev' flag is set to true. It includes headers for signature and hook, along with the payload.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/uploading-files/page.mdx#2025-04-13_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST http://localhost:3000/api/uploadthing \\\n  --header 'content-type: application/json' \\\n  --header 'x-uploadthing-signature: {{ SIGNATURE }}' \\\n  --header 'uploadthing-hook: {{ HOOK }}' \\\n  --data '{{ PAYLOAD }}'\n```\n\n----------------------------------------\n\nTITLE: Initializing UploadThing in Fastify\nDESCRIPTION: Example of creating an UploadThing instance in a Fastify application. Shows the fastify-specific import path and how the middleware function receives FastifyRequest and FastifyReply objects.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/server/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUploadthing, type FileRouter } from \"uploadthing/fastify\";\n\nconst f = createUploadthing();\nexport const uploadRouter = { ... };\n\n// ...\nf({ ... })\n  .middleware(({ req, res }) => {\n    //           ^? req: FastifyRequest, res: FastifyReply\n  })\n```\n\n----------------------------------------\n\nTITLE: Theming Component with TailwindCSS\nDESCRIPTION: Demonstrates how to use tailwind-merge with UploadThing components after its removal as a core dependency.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/v7/page.mdx#2025-04-13_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { twMerge } from 'tailwind-merge'\nimport { UploadButton } from '~/lib/uploadthing'\n\nexport function Page() {\n  return (\n    <UploadButton\n      ...\n      config={{ cn: twMerge }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Minor Version 6.5.0 Dependencies\nDESCRIPTION: Minor version update 6.5.0 with effect rewrite and dependency updates including dropzone and shared packages.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/svelte/CHANGELOG.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[[`9b93886`](https://github.com/pingdotgg/uploadthing/commit/9b938860d49a1a593e38804f81c759925d713605),\n  [`ea7e41b`](https://github.com/pingdotgg/uploadthing/commit/ea7e41b5d9d85135540d9b51fa5551859fbe7623),\n  [`41de3c5`](https://github.com/pingdotgg/uploadthing/commit/41de3c55c8bd808166449c09e9006650178067d5),\n  [`09870e4`](https://github.com/pingdotgg/uploadthing/commit/09870e43f310c15e48f0089e875c6d9663fd305b)]:\n  - @uploadthing/dropzone@0.4.0\n  - @uploadthing/shared@6.7.0\n```\n\n----------------------------------------\n\nTITLE: Configuring UploadThing FileRouter\nDESCRIPTION: Implementation of the FileRouter with image upload configuration, middleware authentication, and upload completion handling.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/tanstack-start/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUploadthing, UploadThingError } from \"uploadthing/server\";\nimport type { FileRouter } from \"uploadthing/server\";\n\nconst f = createUploadthing();\n\nconst auth = (req: Request) => ({ id: \"fakeId\" }); // Fake auth function\n\nexport const uploadRouter = {\n  imageUploader: f({\n    image: {\n      maxFileSize: \"4MB\",\n      maxFileCount: 1,\n    },\n  })\n    .middleware(async ({ req }) => {\n      const user = await auth(req);\n      if (!user) throw new UploadThingError(\"Unauthorized\");\n      return { userId: user.id };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      console.log(\"Upload complete for userId:\", metadata.userId);\n      console.log(\"file url\", file.ufsUrl);\n      return { uploadedBy: metadata.userId };\n    }),\n} satisfies FileRouter;\n\nexport type UploadRouter = typeof uploadRouter;\n```\n\n----------------------------------------\n\nTITLE: Using FileRouter in H3 Client-Side Application\nDESCRIPTION: TypeScript React code demonstrating how to use the FileRouter in a client-side application, specifically generating an upload button component.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/h3/page.mdx#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateUploadButton } from \"@uploadthing/react\";\n\nexport const UploadButton = generateUploadButton({\n  url: \"https://your-server.com/api/uploadthing\",\n});\n// ...\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 6.11.0\nDESCRIPTION: Details the minor and patch changes for version 6.11.0 including new features and bug fixes.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## 6.11.0\n\n### Minor Changes\n\n- [#800](https://github.com/pingdotgg/uploadthing/pull/800)\n  [`43b685a`](https://github.com/pingdotgg/uploadthing/commit/43b685a61a90ab44830a0589785869bd11149bca)\n  Thanks [@juliusmarminge](https://github.com/juliusmarminge)! - feat: add\n  `generateReactHelpers.getRouteConfig`, `isValidFileSize` and `isValidFileType`\n  helpers\n```\n\n----------------------------------------\n\nTITLE: Next.js Route Handler Usage\nDESCRIPTION: Demonstrates the Next.js-specific adapter usage which maintains named exports for GET and POST methods.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/v7/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouteHandler } from \"uploadthing/next\";\n\nimport { uploadRouter } from \"~/uploadthing/router\";\n\nexport const { GET, POST } = createRouteHandler({ router });\n```\n\n----------------------------------------\n\nTITLE: JSON Stringify Implementation for KV URL Storage in TypeScript\nDESCRIPTION: This code shows the proper implementation for storing S3 URLs in Cloudflare KV. It stringifies the URL before storage, which contrasts with the problematic implementation that stored raw strings.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/blog/(posts)/incident-report-2024-09-10/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nctx.waitUntil(env.UTFS_KV.put(cacheKey, JSON.stringify(row.download_url)));\n```\n\n----------------------------------------\n\nTITLE: Importing @uploadthing/shared Package Version 7.1.6\nDESCRIPTION: This snippet shows the import statement for version 7.1.6 of the @uploadthing/shared package. It includes a patch change that fixes an issue with deeply nested objects when using JsonArray.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/shared/CHANGELOG.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 7.1.6\n\n### Patch Changes\n\n- [#1127](https://github.com/pingdotgg/uploadthing/pull/1127)\n  [`f08b20e`](https://github.com/pingdotgg/uploadthing/commit/f08b20e1bc9a790025b42807ce2f502a7863800d)\n  Thanks [@juliusmarminge](https://github.com/juliusmarminge)! - fix: allow\n  deeply nested objects when using JsonArray\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for UploadThing in H3\nDESCRIPTION: Bash command to set the UPLOADTHING_TOKEN environment variable, which is required for interacting with the UploadThing SDK.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/h3/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUPLOADTHING_TOKEN=... # A token for interacting with the SDK\n```\n\n----------------------------------------\n\nTITLE: Creating Astro API Route Handler\nDESCRIPTION: API route setup for handling UploadThing requests in Astro\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/astro/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouteHandler } from \"uploadthing/server\";\n\nimport { ourFileRouter } from \"~/server/uploadthing\";\n\n// Export routes for Next App Router\nconst handlers = createRouteHandler({\n  router: ourFileRouter,\n  config: {\n    token: import.meta.env.UPLOADTHING_TOKEN,\n  },\n});\nexport { handlers as GET, handlers as POST };\n```\n\n----------------------------------------\n\nTITLE: Mounting Upload Component in Astro\nDESCRIPTION: Integration of the upload component into an Astro page with client-side hydration\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/astro/page.mdx#2025-04-13_snippet_6\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport Layout from \"~/layouts/root.astro\"\nimport { ImageUploader } from \"~/components/image-uploader\";\n---\n<Layout>\n    <ImageUploader client:load />\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Upload Progress Granularity Example\nDESCRIPTION: Example showing how to configure upload progress granularity using the uploadProgressGranularity option. Supports 'all' for every XHR event, 'fine' for 1% increments, and 'coarse' for 10% increments.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/vue/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  uploadProgressGranularity: \"all\" | \"fine\" | \"coarse\"\n}\n```\n\n----------------------------------------\n\nTITLE: UploadThing Component Props TypeScript Interface\nDESCRIPTION: Defines the TypeScript interfaces for appearance props in UploadButton and UploadDropzone components. Shows the StyleField type and the structure of the appearance object for both components.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/theming/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype StyleField =\\n  | string\\n  | CSSProperties\\n  | ((args: CallbackArguments) => string | CSSProperties);\\n\\ntype UploadButtonProps = {\\n  /* rest of props */\\n  appearance?: {\\n    container?: StyleField;\\n    button?: StyleField;\\n    allowedContent?: StyleField;\\n  };\\n};\\n\\ntype UploadDropzoneProps = {\\n  /* rest of props */\\n  appearance?: {\\n    container?: StyleField;\\n    uploadIcon?: StyleField;\\n    label?: StyleField;\\n    allowedContent?: StyleField;\\n    button?: StyleField;\\n  };\\n};\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 6.10.4\nDESCRIPTION: Documents patch changes for version 6.10.4 including bundle size optimization and schema fixes.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n## 6.10.4\n\n### Patch Changes\n\n- [`811b4cb`](https://github.com/pingdotgg/uploadthing/commit/811b4cb96938dd498f55e323f34685cbc8cfea9c)\n  Thanks [@juliusmarminge](https://github.com/juliusmarminge)! - chore: remove\n  `@effect/schema` from client bundle resulting in up to 15kB less JS shipped to\n  client (#794)\n```\n\n----------------------------------------\n\nTITLE: Patch Version 6.5.1 Dependencies\nDESCRIPTION: Dependency updates for version 6.5.1 showing commit references and version changes.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/svelte/CHANGELOG.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[[`594ae8a`](https://github.com/pingdotgg/uploadthing/commit/594ae8ae214ff717937c4787a3b8d1bd40b832cc),\n  [`594ae8a`](https://github.com/pingdotgg/uploadthing/commit/594ae8ae214ff717937c4787a3b8d1bd40b832cc),\n  [`0abfa03`](https://github.com/pingdotgg/uploadthing/commit/0abfa031d108edead78d9b71a61d2bfb7ad53a64)]:\n  - @uploadthing/shared@6.7.1\n```\n\n----------------------------------------\n\nTITLE: Creating Route Handler in H3\nDESCRIPTION: Example of exposing an UploadThing router in an H3 application. Creates a router and adds the handler at a specific route path.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/server/page.mdx#2025-04-13_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, createRouter } from \"h3\";\nimport { createRouteHandler } from \"uploadthing/h3\";\nimport { uploadRouter } from \"~/server/uploadthing.ts\";\n\nconst app = createApp();\nconst router = createRouter();\n\nrouter.use(\"/api/uploadthing\", createRouteHandler({\n  router: uploadRouter,\n  // config: { ... },\n}));\napp.use(router.handler);\n```\n\n----------------------------------------\n\nTITLE: Adding onChange Event to UploadButton and UploadDropzone in React\nDESCRIPTION: This code snippet shows the addition of an onChange event to the UploadButton and UploadDropzone components, replacing the deprecated onDrop event for the dropzone.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/react/CHANGELOG.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonChange: (files: File[]) => void\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for UploadThing in Next.js\nDESCRIPTION: Instructions for creating and configuring the .env file with the UploadThing API key. This step is crucial for authenticating and connecting the Next.js application with the UploadThing service.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/examples/minimal-appdir/README.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Callback Arguments TypeScript Interface for UploadThing Components\nDESCRIPTION: Defines the TypeScript interfaces for callback arguments used in the appearance prop functions for UploadButton and UploadDropzone components.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/theming/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ntype ButtonCallbackArguments = {\\n  ready: boolean;\\n  isUploading: boolean;\\n  uploadProgress: number;\\n  fileTypes: string[];\\n  files: File[];\\n};\\n\\ntype DropzoneCallbackArguments = {\\n  ready: boolean;\\n  isUploading: boolean;\\n  uploadProgress: number;\\n  fileTypes: string[];\\n  isDragActive: boolean;\\n  files: File[];\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for Documentation Page in JavaScript\nDESCRIPTION: Sets up the metadata for the documentation page using a utility function. The metadata includes the title, description, and category of the documentation page.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/regions-acl/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { docsMetadata } from \"@/lib/utils\";\n\nexport const metadata = docsMetadata({\n  title: \"Regions & ACL\",\n  description:\n    \"UploadThing has support for multiple regions and access control lists to help you secure your files\",\n  category: \"Concepts\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for UploadThing in SolidStart\nDESCRIPTION: Instructions for copying the example environment file and adding the UploadThing API key. This step is crucial for connecting the SolidStart application to the UploadThing service.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/examples/minimal-solidstart/README.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Grab an API key from the UploadThing dashboard:\n   https://uploadthing.com/dashboard\n2. `cp .env.example .env` and paste in your API key in the newly created `.env`\n   file\n3. `pnpm i && pnpm dev`\n4. Upload files!\n```\n\n----------------------------------------\n\nTITLE: Creating Route Handler in Next Pages Directory\nDESCRIPTION: Example of exposing an UploadThing router using the createRouteHandler function in a Next.js Pages Directory project. Returns a default export handler.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/server/page.mdx#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouteHandler } from \"uploadthing/next-legacy\";\nimport { uploadRouter } from \"~/server/uploadthing.ts\";\n\nexport default createRouteHandler({\n  router: uploadRouter,\n  // config: { ... },\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Route Endpoint with Go to Definition Support in React\nDESCRIPTION: This code shows how to specify a route endpoint that supports 'Go to Definition' functionality. It allows direct navigation to the backend route definition from the component.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/react/CHANGELOG.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// uploadthing/client#uploadFiles\nuploadFiles(\n    (routeRegistry) => routeRegistry.videoAndImage,\n    { ... }\n)\n\n// uploadthing/react#useUploadThing\nuseUploadThing(\n    (routeRegistry) => routeRegistry.videoAndImage,\n    { ... }\n)\n\n// uploadthing/react#UploadButton\n<UploadButton\n    endpoint={(routeRegistry) => routeRegistry.videoAndImage}\n    { ... }\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for UploadThing\nDESCRIPTION: Adding the necessary environment variable for UploadThing token.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/pagedir/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUPLOADTHING_TOKEN=... # A token for interacting with the SDK\n```\n\n----------------------------------------\n\nTITLE: Updating Route Handler Configuration in TypeScript\nDESCRIPTION: Shows how to update the configuration object when creating a route handler to use the new token-based authentication system instead of separate secret and app ID.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/v7/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouteHandler } from \"uploadthing/server\";\n\ncreateRouteHandler({\n  router,\n  config: {\n    uploadthingSecret: \"\", // [!code --]\n    uploadthingAppId: \"\", // [!code --]\n    token: \"\", // [!code ++]\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Route Endpoint Registration\nDESCRIPTION: Example showing how to specify route endpoints with Go to Definition support using a function that takes a route registry as input.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/vue/CHANGELOG.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// uploadthing/client#uploadFiles\nuploadFiles(\n    (routeRegistry) => routeRegistry.videoAndImage,\n    { ... }\n)\n\n// uploadthing/react#useUploadThing\nuseUploadThing(\n    (routeRegistry) => routeRegistry.videoAndImage,\n    { ... }\n)\n\n// uploadthing/react#UploadButton\n<UploadButton\n    endpoint={(routeRegistry) => routeRegistry.videoAndImage}\n    { ... }\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Route Handler in Remix\nDESCRIPTION: Example of exposing an UploadThing router in a Remix application. Returns loader and action exports.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/server/page.mdx#2025-04-13_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouteHandler } from \"uploadthing/remix\";\nimport { uploadRouter } from \"~/server/uploadthing.ts\";\n\nexport const { loader, action } = createRouteHandler({\n  router: uploadRouter,\n  // config: { ... },\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Route Endpoint with TypeScript Support\nDESCRIPTION: New feature allowing specification of route endpoint that supports 'Go to Definition'. This enables direct navigation to the backend route definition from the component.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/solid/CHANGELOG.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// uploadthing/client#uploadFiles\nuploadFiles(\n    (routeRegistry) => routeRegistry.videoAndImage,\n    { ... }\n)\n\n// uploadthing/react#useUploadThing\nuseUploadThing(\n    (routeRegistry) => routeRegistry.videoAndImage,\n    { ... }\n)\n\n// uploadthing/react#UploadButton\n<UploadButton\n    endpoint={(routeRegistry) => routeRegistry.videoAndImage}\n    { ... }\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for UploadThing\nDESCRIPTION: This snippet shows the required environment variable needed for UploadThing authentication.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/remix/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUPLOADTHING_TOKEN=... # A token for interacting with the SDK\n```\n\n----------------------------------------\n\nTITLE: Updated API for uploadFiles Function\nDESCRIPTION: Demonstrates the change in the uploadFiles function signature from positional arguments to an object-based approach, including the new input parameter.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\n// before\nconst { uploadFiles } = generateReactHelpers<OurFileRouter>();\nuploadFiles(files, endpoint, { url: \"\" });\n\n// after\nconst { uploadFiles } = generateReactHelpers<OurFileRouter>();\nuploadFiles({\n  files,\n  endpoint,\n  input, // <-- new option\n  url,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for UploadThing Svelte Documentation in TypeScript\nDESCRIPTION: This code snippet imports a utility function 'docsMetadata' and uses it to define metadata for the @uploadthing/svelte documentation page, including title, description, and category.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/svelte/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { docsMetadata } from \"@/lib/utils\";\n\nexport const metadata = docsMetadata({\n  title: \"@uploadthing/svelte\",\n  description: \"Svelte bindings for UploadThing.\",\n  category: \"API Reference\",\n});\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes in Middleware API\nDESCRIPTION: Shows the before and after syntax for middleware configuration, demonstrating the change to object-based parameters.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/solid/CHANGELOG.md#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nroute: f([\"image\"])\n  // res only for Next.js pages\n  .middleware((req, res) => {\n    return {};\n  });\n\n// after\nroute: f([\"image\"])\n  // res only for Next.js pages\n  .middleware((opts) => {\n    opts.req; // Request, NextRequest, NextApiRequest depending on runtime\n    opts.res; // NextApiResponse for Next.js pages\n    opts.input; // typesafe, validated input\n    return {};\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js API route for UploadThing\nDESCRIPTION: Sets up a Next.js API route handler for UploadThing using the previously defined FileRouter.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/pagedir/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouteHandler } from \"uploadthing/next-legacy\";\n\nimport { ourFileRouter } from \"~/server/uploadthing\";\n\nexport default createRouteHandler({\n  router: ourFileRouter,\n\n  // Apply an (optional) custom config:\n  // config: { ... },\n});\n```\n\n----------------------------------------\n\nTITLE: Uploadthing Route Registry Type Example\nDESCRIPTION: Example showing how to use the new route registry type for endpoint specification that supports 'Go to Definition'\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/svelte/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// uploadthing/client#uploadFiles\nuploadFiles(\n    (routeRegistry) => routeRegistry.videoAndImage,\n    { ... }\n)\n\n// uploadthing/react#useUploadThing\nuseUploadThing(\n    (routeRegistry) => routeRegistry.videoAndImage,\n    { ... }\n)\n\n// uploadthing/react#UploadButton\n<UploadButton\n    endpoint={(routeRegistry) => routeRegistry.videoAndImage}\n    { ... }\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variables for UploadThing in Expo\nDESCRIPTION: Environment variables needed for UploadThing integration in an Expo project, including the authentication token and server URL.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/expo/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUPLOADTHING_TOKEN=... # A token for interacting with the SDK\nEXPO_PUBLIC_SERVER_URL=... # Absolute URL to your server\n```\n\n----------------------------------------\n\nTITLE: Generating File Keys in Rust for UploadThing\nDESCRIPTION: This Rust code demonstrates how to generate file keys for UploadThing. It includes functions for hashing, shuffling alphabets, and encoding app IDs using Sqids.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/uploading-files/page.mdx#2025-04-13_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nfn djb2_hash(s: &str) -> i32 {\n\tlet mut h: i64 = 5381;\n\tfor &byte in s.as_bytes().iter().rev() {\n        \th = (h * 33) ^ (byte as i64);\n            \t// Simulate 32-bit integer overflow\n            \th &= 0xFFFFFFFF;\n        }\n        // Convert to signed 32-bit integer with the same bit manipulation\n        h = (h & 0xBFFFFFFF) | ((h >> 1) & 0x40000000);\n        if h >= 0x80000000 {\n        \th -= 0x100000000;\n        }\n\th as i32\n}\n\nfn shuffle(input: &str, seed: &str) -> String {\n\tlet mut chars: Vec<char> = input.chars().collect();\n        let seed_num = djb2_hash(seed);\n        for i in 0..chars.len() {\n            \tlet j = ((seed_num % (i as i32 + 1)) + i as i32) as usize % chars.len();\n            \tlet temp = chars[i];\n            \tchars[i] = chars[j];\n            \tchars[j] = temp;\n        }\n        chars.iter().collect()\n}\nfn generate_file_key(app_id: String) -> String {\n\tlet app_hash = djb2_hash(&app_id);\n\tlet alphabet: Vec<char> = shuffle(sqids::DEFAULT_ALPHABET, &app_id).chars().collect();\n\n\t// https://sqids.org/rust\n\tlet sqids = sqids::Sqids::builder()\n\t\t.alphabet(alphabet)\n\t\t.min_length(12)\n\t\t.build()\n\t\t.expect(\"Could not create sqid builder\");\n        let encoded_app_id = sqids.encode(&vec![app_hash.abs() as u64]).expect(\"Could not encode sqid\");\n\n\t// https://github.com/uuid-rs/uuid\n\tlet file_seed = uuid::Uuid::new_v4().to_string();\n\n\t// We use a base64 encoding here to ensure the file seed is url safe, but\n  \t// you can do this however you want\n\t// https://github.com/marshallpierce/rust-base64\n\tuse base64::prelude::*;\n        let encoded_file_seed = BASE64_URL_SAFE.encode(file_seed.as_bytes());\n\n\tformat!(\"{}{}\", encoded_app_id, encoded_file_seed)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing and Running UploadThing Nuxt Example\nDESCRIPTION: Commands for setting up and running the UploadThing Nuxt example project. Includes steps for environment configuration, dependency installation, and starting the development server.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/examples/minimal-nuxt/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncp .env.example .env\npnpm i && pnpm generate && pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind for UploadThing (Tailwind v3)\nDESCRIPTION: Wraps the Tailwind configuration with UploadThing's withUt helper for proper styling.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/pagedir/page.mdx#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withUt } from \"uploadthing/tw\";\n\nexport default withUt({\n  // Your existing Tailwind config\n  content: [\"./src/**/*.{ts,tsx,mdx}\"],\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Route Registry for Go to Definition Support in UploadThing\nDESCRIPTION: Examples of using the route registry pattern for better IDE support, allowing \"Go to Definition\" functionality to navigate directly to backend route definitions from components.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/expo/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// uploadthing/client#uploadFiles\nuploadFiles(\n    (routeRegistry) => routeRegistry.videoAndImage,\n    { ... }\n)\n\n// uploadthing/react#useUploadThing\nuseUploadThing(\n    (routeRegistry) => routeRegistry.videoAndImage,\n    { ... }\n)\n\n// uploadthing/react#UploadButton\n<UploadButton\n    endpoint={(routeRegistry) => routeRegistry.videoAndImage}\n    { ... }\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Configuration of required environment variables for UploadThing authentication.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/express/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUPLOADTHING_TOKEN=... # A token for interacting with the SDK\n```\n\n----------------------------------------\n\nTITLE: Configuring TailwindCSS v4 with UploadThing\nDESCRIPTION: Shows how to configure Tailwind v4 with UploadThing using CSS configuration and the UploadThing plugin.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/concepts/theming/page.mdx#2025-04-13_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\\n\\n@import \"uploadthing/tw/v4\";\\n@source \"../node_modules/@uploadthing/react/dist\"; /** <-- depends on your project structure */\n```\n\n----------------------------------------\n\nTITLE: Updating uploadthing to v5.5.1\nDESCRIPTION: Patch update referencing commit 353f6d0 updating the uploadthing dependency to version 5.5.1\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/examples/minimal-pagedir/CHANGELOG.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies\n  [[`353f6d0`](https://github.com/pingdotgg/uploadthing/commit/353f6d026fbee7480573d735d0406477dcb9e0bc)]:\n  - uploadthing@5.5.1\n```\n\n----------------------------------------\n\nTITLE: TypeScript Command Line Usage\nDESCRIPTION: Reference to vue-tsc command line tool for TypeScript checking and d.ts file generation for Vue Single File Components.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/examples/backend-adapters/client-vue/README.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvue-tsc\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind for UploadThing (v3)\nDESCRIPTION: Integration of UploadThing with Tailwind CSS v3 using the withUt helper to ensure proper styling.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/appdir/page.mdx#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withUt } from \"uploadthing/tw\";\n\nexport default withUt({\n  // Your existing Tailwind config\n  content: [\"./src/**/*.{ts,tsx,mdx}\"],\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Sections for UploadThing in JavaScript\nDESCRIPTION: This snippet defines an array of sections for the UploadThing documentation. Each section has a title and an ID, which can be used for navigation and structuring the content.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const sections = [\n  { title: \"Frameworks\", id: \"frameworks\" },\n  { title: \"Backend Adapters\", id: \"backend-adapters\" },\n  { title: \"Frontend Libraries\", id: \"frontend-libraries\" },\n];\n```\n\n----------------------------------------\n\nTITLE: UploadThing Module Options Type Definition\nDESCRIPTION: TypeScript type definition for the UploadThing module configuration options. This shows the available settings that can be applied in the nuxt.config.ts file.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/nuxt/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * See https://docs.uploadthing.com/api-reference/server#createroutehandler\n * for more information about the `RouteHandlerConfig` options.\n */\nexport type ModuleOptions = RouteHandlerConfig & {\n  /**\n   * Path to your router definition file\n   * @default `~/server/uploadthing.ts`\n   */\n  routerPath?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Filename in UploadThing API (TypeScript)\nDESCRIPTION: This snippet shows how to override the filename when using utapi.uploadFilesFromUrl. It's useful when the pathname is too long or when you want to set a custom name. It also demonstrates how to set a custom ID for the file.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nutapi.uploadFilesFromUrl({\n  url: \"https://example.com/super-long-pathname-that-exceeds-the-limit.jpg\",\n  name: \"my-custom-name.jpg\",\n});\n\nutapi.uploadFilesFromUrl({\n  url: \"https://example.com/foo.jpg\",\n  customId: \"my-custom-id\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Blog Article Metadata in JSX/JavaScript\nDESCRIPTION: This code snippet defines metadata for a blog post about UploadThing v7 release, including author information, publication date, title, and description. It also exports configuration for Next.js rendering and sets the page to use static generation.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/blog/(posts)/v7-launch/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArticleLayout } from \"@/app/blog/_components/layouts\";\nimport { blogMetadata } from \"@/lib/utils\";\n\nexport const article = {\n  authors: [\n    {\n      name: \"Theo Browne\",\n      role: \"CEO @ Ping Labs\",\n      src: \"https://github.com/t3dotgg.png\",\n      href: \"https://x.com/t3dotgg\",\n    },\n  ],\n  date: \"2024-09-13\",\n  title: \"UploadThing is 5x Faster\",\n  description:\n    \"UploadThing v7 has finally shipped! We're now the FASTEST way for your users to upload files.\",\n  tags: [\"launch\"],\n  image: \"/images/blog/v7-launch-og.png\",\n};\nexport const metadata = blogMetadata(article);\n\nexport const dynamic = \"force-static\";\n\nexport default (props) => <ArticleLayout article={article} {...props} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind for UploadThing (v4)\nDESCRIPTION: CSS configuration for Tailwind v4 to import UploadThing's styles using the CSS plugin system.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/appdir/page.mdx#2025-04-13_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n\n@import \"uploadthing/tw/v4\";\n@source \"../node_modules/@uploadthing/react/dist\"; /** <-- depends on your project structure */\n```\n\n----------------------------------------\n\nTITLE: Rendering Hero Pattern Component in JSX\nDESCRIPTION: This code renders the HeroPattern component, which is likely a visual element used at the top of the documentation page to enhance its appearance.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<HeroPattern />\n```\n\n----------------------------------------\n\nTITLE: Defining Adapter Arguments Type\nDESCRIPTION: Type definition for the adapter arguments specifying the expected request and server objects.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/custom/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype AdapterArgs = {\n  req: BunRequest;\n  server: Server;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing UploadThing Packages for Nuxt\nDESCRIPTION: Command to install the required npm packages for UploadThing integration with Nuxt. This installs both the core uploadthing package and the Nuxt-specific adapter.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/nuxt/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install uploadthing @uploadthing/nuxt\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scalar Component for API Documentation in JSX\nDESCRIPTION: This snippet imports a 'Scalar' component from a local file and renders it within the JSX. The Scalar component is likely responsible for displaying detailed API specifications or documentation.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/openapi-spec/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Scalar } from \"./scalar-server\";\n\n<Scalar />\n```\n\n----------------------------------------\n\nTITLE: Generating File Keys in JavaScript for UploadThing\nDESCRIPTION: This TypeScript code demonstrates how to generate file keys for UploadThing. It includes functions for hashing, shuffling alphabets, and encoding app IDs and file seeds using Sqids.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/uploading-files/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SQIds, { defaultOptions } from \"sqids\";\n\nfunction djb2(s: string) {\n  const h = 5381;\n  let i = s.length;\n  while (i) {\n    h = (h * 33) ^ s.charCodeAt(--i);\n  }\n  return (h & 0xbfffffff) | ((h >>> 1) & 0x40000000);\n}\n\n// A simple function to shuffle the alphabet for the Sqids\nfunction shuffle(str: string, seed: string) {\n  const chars = str.split(\"\");\n  const seedNum = djb2(seed);\n\n  let temp: string;\n  let j: number;\n  for (let i = 0; i < chars.length; i++) {\n    j = ((seedNum % (i + 1)) + i) % chars.length;\n    temp = chars[i];\n    chars[i] = chars[j];\n    chars[j] = temp;\n  }\n\n  return chars.join(\"\");\n}\n\nfunction generateKey(appId: string, fileSeed: string) {\n  // Hash and Encode the parts and apiKey as sqids\n  const alphabet = shuffle(defaultOptions.alphabet, appId);\n\n  const encodedAppId = new SQIds({ alphabet, minLength: 12 }).encode([\n    Math.abs(djb2(appId)),\n  ]);\n\n  // We use a base64 encoding here to ensure the file seed is url safe, but\n  // you can do this however you want\n  const encodedFileSeed = encodeBase64(fileSeed);\n\n  return `${encodedAppId}${encodedFileSeed}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Framework Components for UploadThing Integration in JSX\nDESCRIPTION: This code renders components for different frameworks, backend adapters, and frontend libraries supported by UploadThing. These components likely provide specific integration instructions for each technology.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/page.mdx#2025-04-13_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<Frameworks />\n<BackendAdapters />\n<FrontendLibraries />\n```\n\n----------------------------------------\n\nTITLE: Installing and Running SvelteKit Example with UploadThing\nDESCRIPTION: Commands to install dependencies and start the development server for a SvelteKit project using UploadThing. This uses pnpm as the package manager to install all required dependencies and then launches the development server.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/examples/minimal-sveltekit/README.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Next.js Development Server\nDESCRIPTION: Command to install project dependencies using pnpm and start the Next.js development server. This prepares the environment for running the UploadThing example.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/examples/minimal-appdir/README.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\npnpm i && pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Generating File Keys in Python for UploadThing\nDESCRIPTION: This Python code shows how to generate file keys for UploadThing. It includes functions for hashing, shuffling alphabets, and encoding app IDs using Sqids.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/uploading-files/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport math\nimport base64\nfrom sqids import Sqids\nfrom sqids.constants import DEFAULT_ALPHABET\n\ndef djb2(s: str) -> int:\n  h = 5381\n  for char in reversed(s):\n      h = (h * 33) ^ ord(char)\n      # 32-bit integer overflow\n      h &= 0xFFFFFFFF\n  h = (h & 0xBFFFFFFF) | ((h >> 1) & 0x40000000)\n\n  # Convert to signed 32-bit integer\n  if h >= 0x80000000:\n      h -= 0x100000000\n\n  return h\n\n\ndef shuffle(string: str, seed: str) -> str:\n  chars = list(string)\n  seed_num = djb2(seed)\n\n  for i in range(len(chars)):\n      j = int(math.fmod(math.fmod(seed_num, i + 1) + i, len(chars)))\n      chars[i], chars[j] = chars[j], chars[i]\n\n  return \"\".join(chars)\n\n\ndef generate_key(file_seed: str, app_id: str) -> str:\n  alphabet = shuffle(DEFAULT_ALPHABET, app_id)\n\n  encoded_app_id = Sqids(alphabet, min_length=12).encode(\n    [abs(djb2(app_id))]\n  )\n\n  return encoded_app_id + file_seed\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for UploadThing Solid Documentation\nDESCRIPTION: Imports and sets metadata for the UploadThing Solid documentation page. The metadata includes the title, description, and category for the documentation.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/solid/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { docsMetadata } from \"@/lib/utils\";\n\nexport const metadata = docsMetadata({\n  title: \"@uploadthing/solid\",\n  description: \"Solid bindings for UploadThing.\",\n  category: \"API Reference\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing UploadThing Package\nDESCRIPTION: Command to install the UploadThing package using npm or yarn.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/express/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install uploadthing\n```\n\n----------------------------------------\n\nTITLE: Updating UploadThing Dependencies in Package.json\nDESCRIPTION: This snippet shows how to update UploadThing dependencies in a package.json file. It includes version updates for @uploadthing/shared and @uploadthing/mime-types packages.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"@uploadthing/shared\": \"6.3.0\",\n\"@uploadthing/mime-types\": \"0.2.3\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind for UploadThing with withUt Helper\nDESCRIPTION: Wraps the Tailwind configuration with the UploadThing helper for v3 compatibility.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/solid/page.mdx#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withUt } from \"uploadthing/tw\";\n\nexport default withUt({\n  // Your existing Tailwind config\n  content: [\"./src/**/*.{ts,tsx,mdx}\"],\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Adding uploadProgressGranularity Option in JavaScript\nDESCRIPTION: New feature added to control how granular progress events are fired during file uploads. Options include 'all', 'fine', and 'coarse' (default).\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/solid/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuploadFiles({\n  uploadProgressGranularity: 'fine' // or 'all' or 'coarse'\n})\n```\n\n----------------------------------------\n\nTITLE: Installing UploadThing Package for Fastify\nDESCRIPTION: Command to install the UploadThing package using npm or yarn.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/fastify/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install uploadthing\n```\n\n----------------------------------------\n\nTITLE: Updating Route Handler Export Pattern\nDESCRIPTION: Shows the new pattern for exporting route handlers which now returns a single function instead of named exports.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst handler = createRouteHandler({ router, config });\nexport { handler as GET, handler as POST };\n```\n\n----------------------------------------\n\nTITLE: Importing UploadThing CSS Styles\nDESCRIPTION: Imports the default CSS styles for UploadThing components in a SolidStart application.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/solid/page.mdx#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@uploadthing/solid/styles.css\";\n```\n\n----------------------------------------\n\nTITLE: Importing @uploadthing/shared Package Version 7.1.7\nDESCRIPTION: This snippet shows the import statement for version 7.1.7 of the @uploadthing/shared package. It includes a patch change that adds helper exports for the new uploadProgressGranularity feature in frontend library adapters.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/shared/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @uploadthing/shared\n\n## 7.1.7\n\n### Patch Changes\n\n- [`a1e13b5`](https://github.com/pingdotgg/uploadthing/commit/a1e13b5de616c7b7ff20660fe2b43eddf3bc4293)\n  Thanks [@juliusmarminge](https://github.com/juliusmarminge)! - This release\n  just contains helper exports for the new `uploadProgressGranularity` feature\n  in the frontend library adapters\n```\n\n----------------------------------------\n\nTITLE: Installing UploadThing Dependencies\nDESCRIPTION: Commands to install required UploadThing packages for Astro integration\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/astro/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install uploadthing @uploadthing/react\n```\n\n----------------------------------------\n\nTITLE: Importing UploadThing styles (non-Tailwind)\nDESCRIPTION: Imports UploadThing's CSS styles for use in non-Tailwind projects.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/pagedir/page.mdx#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@uploadthing/react/styles.css\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Runtime for UploadThing API Route\nDESCRIPTION: This snippet shows how to set the runtime to 'nodejs' for the UploadThing API route. This can be used to work around limitations in Next.js edge functions during development, allowing the dev hook to fetch itself.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/faq/page.mdx#2025-04-13_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// src/app/api/uploadthing/route.ts\nexport const runtime = \"nodejs\";\n```\n\n----------------------------------------\n\nTITLE: Patch Update Dependencies List\nDESCRIPTION: Dependency update details showing commits and version changes for @uploadthing/shared package.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/svelte/CHANGELOG.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[`69165fc`](https://github.com/pingdotgg/uploadthing/commit/69165fc4b4e4b02fe27e02d1991ea2cd3ae45c8a),\n  [`6da018b`](https://github.com/pingdotgg/uploadthing/commit/6da018bfd4f2812ad81f36a7e3c9e3567c435b0b)]:\n  - @uploadthing/shared@6.7.2\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Markdown\nDESCRIPTION: This snippet shows the dependency updates for the profile picture upload example. It lists changes to the uploadthing and @uploadthing/react packages, both updated to version 7.0.0.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/examples/profile-picture/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`d69dd6e`](https://github.com/pingdotgg/uploadthing/commit/d69dd6e434281796cc41a3d70610ecffab7c3f13), [`d69dd6e`](https://github.com/pingdotgg/uploadthing/commit/d69dd6e434281796cc41a3d70610ecffab7c3f13), [`d69dd6e`](https://github.com/pingdotgg/uploadthing/commit/d69dd6e434281796cc41a3d70610ecffab7c3f13), [`d69dd6e`](https://github.com/pingdotgg/uploadthing/commit/d69dd6e434281796cc41a3d70610ecffab7c3f13), [`d69dd6e`](https://github.com/pingdotgg/uploadthing/commit/d69dd6e434281796cc41a3d70610ecffab7c3f13)]:\n  - uploadthing@7.0.0\n  - @uploadthing/react@7.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing UploadThing Dependencies for Nuxt\nDESCRIPTION: Commands for installing the required dependencies (@uploadthing/nuxt and uploadthing) using various package managers.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/nuxt/README.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Using pnpm\npnpm add -D @uploadthing/nuxt\npnpm add uploadthing\n\n# Using yarn\nyarn add --dev @uploadthing/nuxt\nyarn add uploadthing\n\n# Using npm\nnpm install --save-dev @uploadthing/nuxt\nnpm install uploadthing\n\n# Using bun\nbun add -D @uploadthing/nuxt\nbun add uploadthing\n```\n\n----------------------------------------\n\nTITLE: Installing UploadThing Packages for Expo\nDESCRIPTION: Command to install UploadThing and related packages for an Expo project, including the core library, Expo integration, and necessary file pickers.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/expo/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install uploadthing @uploadthing/expo expo-image-picker expo-document-picker\n```\n\n----------------------------------------\n\nTITLE: Installing UploadThing Packages with NPM/Yarn\nDESCRIPTION: Command to install the required UploadThing packages for both server and client-side functionality.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/tanstack-start/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install uploadthing @uploadthing/react\n```\n\n----------------------------------------\n\nTITLE: Updating uploadthing to v5.5.3\nDESCRIPTION: Patch update referencing commit 2e8b410 updating the uploadthing dependency to version 5.5.3\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/examples/minimal-pagedir/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies\n  [[`2e8b410`](https://github.com/pingdotgg/uploadthing/commit/2e8b410bb15c2688e9b6938c4a2cd17cf6110289)]:\n  - uploadthing@5.5.3\n```\n\n----------------------------------------\n\nTITLE: Installing UploadThing Package for H3\nDESCRIPTION: Command to install the UploadThing package using npm or yarn.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/h3/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install uploadthing\n```\n\n----------------------------------------\n\nTITLE: SSR Configuration for UploadThing\nDESCRIPTION: Server-side rendering setup for optimized UploadThing performance\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/astro/page.mdx#2025-04-13_snippet_7\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport { extractRouterConfig } from \"uploadthing/server\"\nimport { uploadRouter } from \"~/server/uploadthing\";\n\n/**\n * This you only need to do once in your app to enable\n * server side rendering of the uploadthing component.\n * No data will be fetched on the client.\n */\nconst routerConfig = extractRouterConfig(uploadRouter);\n(globalThis as any).__UPLOADTHING ??= routerConfig;\n---\n\n<script define:vars={{ routerConfig }} is:inline>\n    /**\n     * Injecting config to the client. This prevents the client from fetching\n     * the configuration from the server, since we already have it.\n     */\n    globalThis.__UPLOADTHING ??= routerConfig;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing UploadThing packages\nDESCRIPTION: Command to install the required UploadThing packages using npm or yarn.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/pagedir/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install uploadthing @uploadthing/react\n```\n\n----------------------------------------\n\nTITLE: Importing @uploadthing/shared Package Version 7.1.5\nDESCRIPTION: This snippet shows the import statement for version 7.1.5 of the @uploadthing/shared package. It includes patch changes related to relaxed peer dependency requirements and updates to the @uploadthing/mime-types dependency.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/shared/CHANGELOG.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 7.1.5\n\n### Patch Changes\n\n- [#1108](https://github.com/pingdotgg/uploadthing/pull/1108)\n  [`b2de189`](https://github.com/pingdotgg/uploadthing/commit/b2de189ba88024eb141945eb034ccd547f946595)\n  Thanks [@juliusmarminge](https://github.com/juliusmarminge)! - chore: more\n  relaxed peer dep requirements between uploadthing packages\n\n- Updated dependencies\n  [[`b2de189`](https://github.com/pingdotgg/uploadthing/commit/b2de189ba88024eb141945eb034ccd547f946595)]:\n  - @uploadthing/mime-types@0.3.4\n```\n\n----------------------------------------\n\nTITLE: Environment Setup for Remix with UploadThing and Clerk\nDESCRIPTION: Commands for setting up the environment, installing dependencies, and starting the development server for a Remix project with UploadThing and Clerk integration.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/examples/with-clerk-remix/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncp .env.example .env\npnpm i && pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing UploadThing packages for SvelteKit\nDESCRIPTION: Command to install the necessary UploadThing packages for a SvelteKit project. This installs both the core uploadthing package and the Svelte integration package.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/svelte/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install uploadthing @uploadthing/svelte\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind for UploadThing (Tailwind v4)\nDESCRIPTION: Imports UploadThing's Tailwind styles for use with Tailwind v4 CSS configuration.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/pagedir/page.mdx#2025-04-13_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n\n@import \"uploadthing/tw/v4\";\n@source \"../node_modules/@uploadthing/react/dist\"; /** <-- depends on your project structure */\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Link for UploadThing\nDESCRIPTION: Simple markdown file containing a heading and link to the official UploadThing documentation.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/README.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# uploadthing\n\nLearn more: [docs.uploadthing.com](https://docs.uploadthing.com)\n```\n\n----------------------------------------\n\nTITLE: Patch Changes Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version changes, including pull request references, commit hashes, and dependency updates\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/react/CHANGELOG.md#2025-04-13_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#88](https://github.com/pingdotgg/uploadthing/pull/88) [`53b6d94`](https://github.com/pingdotgg/uploadthing/commit/53b6d94acdfea59b455fc0694b6feb232ca5830c) Thanks [@t3dotgg](https://github.com/t3dotgg)! - Fix appdir callbacks\n\n- Updated dependencies [[`53b6d94`](https://github.com/pingdotgg/uploadthing/commit/53b6d94acdfea59b455fc0694b6feb232ca5830c)]:\n  - uploadthing@2.0.3\n```\n\n----------------------------------------\n\nTITLE: Installing UploadThing Packages for SolidStart\nDESCRIPTION: Command to install the required UploadThing packages for a SolidStart project.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/solid/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install uploadthing @uploadthing/solid\n```\n\n----------------------------------------\n\nTITLE: Installing and Running UploadThing Example with NextJS App Router\nDESCRIPTION: These commands install the necessary dependencies and start the development server for the UploadThing example using the NextJS App Router.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/examples/with-react-image-crop/README.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Documenting TSConfig Base Templates\nDESCRIPTION: Markdown documentation explaining the purpose of shared tsconfig.json files that act as base configurations for inheritance across the project. These base configurations provide consistent TypeScript settings that can be extended by other configuration files.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/tooling/tsconfig/README.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `tsconfig`\n\nThese are base shared `tsconfig.json`s from which all other `tsconfig.json`'s\ninherit from.\n```\n\n----------------------------------------\n\nTITLE: Full Problematic URL Processing Logic in TypeScript\nDESCRIPTION: This code reveals the complete implementation of the problematic logic. It shows the overly broad conditional check that caused the issue, where 'uploadthing-prod' was used instead of 'uploadthing-prod.s3', causing the code to run on every URL request.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/blog/(posts)/incident-report-2024-09-10/page.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nif (fileUrl?.includes('uploadthing-prod')) {\n  // <-- Pay attention here\n  const newUrl = fileUrl.replace(\n    'uploadthing-prod.s3',\n    'uploadthing-prod-sea1.s3',\n  )\n  // non-blocking update of KV\n  ctx.waitUntil(env.UTFS_KV.put(cacheKey, newUrl))\n  return newUrl\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for UploadThing\nDESCRIPTION: Required environment variable configuration for UploadThing integration.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/solid/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUPLOADTHING_TOKEN=... # A token for interacting with the SDK\n```\n\n----------------------------------------\n\nTITLE: Environment Setup Commands for UploadThing Project\nDESCRIPTION: Terminal commands for setting up the environment, including copying the example environment file and installing dependencies.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/examples/with-drizzle-appdir/README.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\npnpm i && pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Initializing React Blog Component with Metadata in JSX\nDESCRIPTION: This code defines a React component for an article layout along with metadata configuration. It exports article details, dynamic rendering settings, and the default component that renders the ArticleLayout.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/blog/(posts)/incident-report-2024-09-10/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArticleLayout } from \"@/app/blog/_components/layouts\";\nimport { blogMetadata } from \"@/lib/utils\";\n\nexport const article = {\n  authors: [\n    {\n      name: \"Theo Browne\",\n      role: \"CEO @ Ping Labs\",\n      src: \"https://github.com/t3dotgg.png\",\n      href: \"https://x.com/t3dotgg\",\n    },\n  ],\n  date: \"2024-09-11\",\n  title: \"Our First Major Outage\",\n  description:\n    \"We had our first major outage on September 10th, preventing users from accessing files.\",\n  tags: [\"incidents\"],\n  image: \"/images/blog/incident-report-20240910-og.png\",\n};\nexport const metadata = blogMetadata(article);\n\nexport const dynamic = \"force-static\";\n\nexport default (props) => <ArticleLayout article={article} {...props} />;\n```\n\n----------------------------------------\n\nTITLE: Problematic Cloudflare KV URL Update in TypeScript\nDESCRIPTION: This code shows the problematic implementation that caused the outage. It updates file URLs in Cloudflare KV without proper JSON stringification, replacing the S3 bucket name but with an overly broad conditional check.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/blog/(posts)/incident-report-2024-09-10/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst newUrl = fileUrl.replace(\n  \"uploadthing-prod.s3\",\n  \"uploadthing-prod-sea1.s3\",\n);\n// non-blocking update of KV\nctx.waitUntil(env.UTFS_KV.put(cacheKey, newUrl));\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Required environment variable configuration for UploadThing authentication.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/getting-started/tanstack-start/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUPLOADTHING_TOKEN=... # A token for interacting with the SDK\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Post Metadata and Layout in Next.js\nDESCRIPTION: Defines the article metadata, author information, and layout configuration for a Next.js blog post about UploadThing's usage-based pricing announcement. Includes static generation settings and article layout component implementation.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/blog/(posts)/usage-based/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ArticleLayout } from \"@/app/blog/_components/layouts\";\nimport { blogMetadata } from \"@/lib/utils\";\n\nexport const article = {\n  authors: [\n    {\n      name: \"Ping Team\",\n      role: \"Ping Labs\",\n      src: \"https://avatars.githubusercontent.com/u/89191727?s=200&v=4\",\n      href: \"https://x.com/pingdotgg\",\n    },\n  ],\n  date: \"2025-01-30\",\n  title: \"Scale forever (usage based pricing is now live!)\",\n  description:\n    \"UploadThing accounts now have the option to store any amount of files. Usage based pricing is finally here!\",\n  tags: [\"product\"],\n  image:\n    \"https://s40vlb3kca.ufs.sh/f/7v4pu1gTNmoZ3mj9z5JvmfZTGXoNAUYtOau7CLckldDeg6FJ\",\n};\n\nexport const metadata = blogMetadata(article);\n\nexport const dynamic = \"force-static\";\n\nexport default (props) => <ArticleLayout article={article} {...props} />;\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Metadata Configuration\nDESCRIPTION: Setup of metadata configuration for the documentation page about file uploads using Next.js metadata API. Imports Image component and utility functions to configure page metadata.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/uploading-files/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Image from \"next/image\";\nimport { docsMetadata } from \"@/lib/utils\";\n\nexport const metadata = docsMetadata({\n  title: \"Uploading Files\",\n  description:\n    \"Uploading files is the first step in the process of uploading files to UploadThing. This page explains the general process of uploading files and how you can use the UploadThing API to upload files. There are two ways to upload files to UploadThing:\",\n  category: \"Concepts\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing UploadThing via npm/yarn\nDESCRIPTION: Command to install the UploadThing package using npm or yarn.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/fetch/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install uploadthing\n```\n\n----------------------------------------\n\nTITLE: Basic Bun Server Route Example\nDESCRIPTION: Simple example of a Bun server with a basic route handler returning JSON response.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/custom/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nBun.serve({\n  routes: {\n    \"/api/hello\": (req, server) => Response.json({ message: \"Hello, world!\" }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for UploadThing Vue Documentation\nDESCRIPTION: Sets up metadata for the @uploadthing/vue documentation page using the docsMetadata function, specifying the title, description, and category for the documentation.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/vue/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { docsMetadata } from \"@/lib/utils\";\n\nexport const metadata = docsMetadata({\n  title: \"@uploadthing/vue\",\n  description: \"Vue bindings for UploadThing.\",\n  category: \"API Reference\",\n});\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Dependency Updates\nDESCRIPTION: Details updates to @uploadthing/shared package dependencies with corresponding commit references.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/vue/CHANGELOG.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies\n  [[`594ae8a`](https://github.com/pingdotgg/uploadthing/commit/594ae8ae214ff717937c4787a3b8d1bd40b832cc),\n  [`594ae8a`](https://github.com/pingdotgg/uploadthing/commit/594ae8ae214ff717937c4787a3b8d1bd40b832cc),\n  [`0abfa03`](https://github.com/pingdotgg/uploadthing/commit/0abfa031d108edead78d9b71a61d2bfb7ad53a64)]:\n  - @uploadthing/shared@6.7.1\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for UploadThing Documentation Page in JavaScript\nDESCRIPTION: This code sets the metadata for the UploadThing documentation page, including the title, description, and category. It uses the docsMetadata function to generate the metadata object.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const metadata = docsMetadata({\n  title: \"UploadThing Docs\",\n  description: \"Docs for the best file uploader to date\",\n  category: \"Introduction\",\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Get Started Button in JSX for UploadThing Docs\nDESCRIPTION: This JSX code renders a 'Get Started' button that links to the UploadThing dashboard. It's part of the introduction section of the documentation, encouraging users to begin using the service.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/page.mdx#2025-04-13_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"not-prose mb-16 mt-6 flex gap-3\">\n  <Button href=\"https://uploadthing.com/dashboard\" arrow=\"right\">\n    <>Get Started</>\n  </Button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Metadata for UploadThing Docs in JavaScript\nDESCRIPTION: This snippet imports necessary components and metadata for the UploadThing documentation page. It includes imports for the HeroPattern component, various library components, and utility functions for metadata.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/page.mdx#2025-04-13_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { HeroPattern } from \"@/components/HeroPattern\";\nimport {\n  BackendAdapters,\n  Frameworks,\n  FrontendLibraries,\n} from \"@/components/Libraries\";\nimport { docsMetadata } from \"@/lib/utils\";\n```\n\n----------------------------------------\n\nTITLE: Getting Signed URLs with getSignedURL Method\nDESCRIPTION: Legacy method to retrieve signed URLs for private files through API requests. Supports custom expiration times and key types.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/api-reference/ut-api/page.mdx#2025-04-13_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utapi } from \"~/server/uploadthing.ts\";\n\nconst fileKey = \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\";\nconst url = await utapi.getSignedURL(fileKey, {\n  expiresIn: 60 * 60, // 1 hour\n  // expiresIn: '1 hour',\n  // expiresIn: '3d',\n  // expiresIn: '7 days',\n});\n```\n\n----------------------------------------\n\nTITLE: Updated Hook and Upload Function Signatures\nDESCRIPTION: Shows the updated API signatures for useUploadthing hook and uploadFiles function with the new object-based parameter structure.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/react/CHANGELOG.md#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nuseUploadthing({\n  endpoint: \"withInput\"\n  onUploadComplete: ...\n})\n\n// after\nuseUploadthing(\"withInput\", {\n  onUploadComplete: ...\n})\n\n// before\nconst { uploadFiles } = generateReactHelpers<OurFileRouter>();\nuploadFiles(files, endpoint, { url: \"\" });\n\n// after\nconst { uploadFiles } = generateReactHelpers<OurFileRouter>();\nuploadFiles({\n  files,\n  endpoint,\n  input, // <-- new option\n  url,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing UploadThing Tailwind CSS Plugin\nDESCRIPTION: Example showing how to import and configure the UploadThing Tailwind v4 CSS plugin in a project. The import path may need to be adjusted based on project structure.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/packages/uploadthing/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n\n@import \"uploadthing/tw/v4\";\n@source \"../node_modules/@uploadthing/react/dist\";\n```\n\n----------------------------------------\n\nTITLE: Updating uploadthing to v5.5.2\nDESCRIPTION: Patch update referencing commit 8cfdade updating the uploadthing dependency to version 5.5.2\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/examples/minimal-pagedir/CHANGELOG.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies\n  [[`8cfdade`](https://github.com/pingdotgg/uploadthing/commit/8cfdade9fee61a636fa1c88bc9380d4ac77e91d9)]:\n  - uploadthing@5.5.2\n```\n\n----------------------------------------\n\nTITLE: Setting UploadThing Environment Variables\nDESCRIPTION: Example of setting the UPLOADTHING_TOKEN environment variable for authentication.\nSOURCE: https://github.com/pingdotgg/uploadthing/blob/main/docs/src/app/(docs)/backend-adapters/fastify/page.mdx#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUPLOADTHING_TOKEN=... # A token for interacting with the SDK\n```"
  }
]