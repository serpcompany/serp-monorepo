[
  {
    "owner": "jfversluis",
    "repo": "plugin.maui.audio",
    "content": "TITLE: Registering AudioManager with Dependency Injection in .NET MAUI\nDESCRIPTION: Shows how to register the AudioManager with the MauiAppBuilder for dependency injection. This is the first step when using AudioManager with dependency injection.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAudio();\n```\n\n----------------------------------------\n\nTITLE: Using AudioManager with Dependency Injection in .NET MAUI\nDESCRIPTION: Demonstrates how to inject the IAudioManager interface into a view model and use it to create and play audio. This approach follows dependency injection best practices.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AudioPlayerViewModel\n{\n    readonly IAudioManager audioManager;\n\n    public AudioPlayerViewModel(IAudioManager audioManager)\n    {\n        this.audioManager = audioManager;\n    }\n\n    public async Task PlayAudioAsync()\n    {\n        var audioPlayer = audioManager.CreatePlayer(await FileSystem.OpenAppPackageFileAsync(\"ukelele.mp3\"));\n\n        audioPlayer.Play();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AudioPlayer in .NET MAUI\nDESCRIPTION: Demonstrates how to create and use an AudioPlayer instance to play audio files in a .NET MAUI application. The example shows dependency injection of IAudioManager and basic audio playback functionality.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/docs/audio-player.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AudioPlayerViewModel\n{\n    readonly IAudioManager audioManager;\n\n    public AudioPlayerViewModel(IAudioManager audioManager)\n    {\n        this.audioManager = audioManager;\n    }\n\n    public async void PlayAudio()\n    {\n        var audioPlayer = audioManager.CreatePlayer(await FileSystem.OpenAppPackageFileAsync(\"ukelele.mp3\"));\n\n        audioPlayer.Play();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using AudioRecorder in C#\nDESCRIPTION: Demonstrates how to create an AudioRecorder instance, start and stop recording, and handle the recorded audio source. It also shows how to manage the AudioRecorder within a ViewModel class.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/docs/audio-recorder.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AudioRecorderViewModel\n{\n    readonly IAudioManager audioManager;\n    readonly IAudioRecorder audioRecorder;\n\n    public AudioPlayerViewModel(IAudioManager audioManager)\n    {\n        this.audioManager = audioManager;\n        this.audioRecorder = audioManager.CreateRecorder();\n    }\n\n    public async Task StartRecordingAsync()\n    {\n        await audioRecorder.StartAsync();\n    }\n\n    public async Task StopRecordingAsync()\n    {\n        IAudioSource audioSource = await audioRecorder.StopAsync();\n\n        // You can use the audioSource to play the file or save it somewhere in your application.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using AudioStreamer in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to create an AudioStreamer instance, start and stop streaming, and handle captured audio data. It shows the basic setup and usage of the AudioStreamer class within a ViewModel.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/docs/audio-streamer.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AudioStreamerViewModel\n{\n    readonly IAudioManager audioManager;\n    readonly IAudioStreamer audioStreamer;\n\n    public AudioStreamerViewModel(IAudioManager audioManager)\n    {\n        this.audioManager = audioManager;\n        this.audioStreamer = audioManager.CreateStreamer();\n        this.audioStreamer.OnAudioCaptured += OnAudioStreamerCapturedData;\n    }\n\n    public async Task StartStreamingAsync()\n    {\n        await audioStreamer.StartAsync();\n    }\n\n    public async Task StopStreamingAsync()\n    {\n        await audioStreamer.StopAsync();\n    }\n\n    private void OnAudioStreamerCapturedData(object sender, AudioStreamEventArgs args)\n    {\n        // You can use the args.Audio to collect, analyze or manipulate\n        // args.Audio is a byte array with linear PCM audio data (like a WAV file without a header)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Audio Handler and Silence Listener in C#\nDESCRIPTION: Example showing how to set up a PCM audio handler, create a silence listener with custom threshold settings, and connect it to an audio streamer. The code demonstrates the basic setup of the audio processing pipeline.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/docs/audio-listeners.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Create PcmAudioHandler\npcmAudioHandler = new PcmAudioHandler(44100, ChannelType.Mono, BitDepth.Pcm16bit);\n\n// Create listener\nsilenceListener = new SilenceListener\n{\n   MinimalSilenceTimespanInMilliseconds = 200,\n   SilenceThresholdInDb = -40\n};\nsilenceListener.IsSilentChanged += (sender, args) =>\n{\n   dispatcher.Dispatch(() =>\n   {\n      IsSilent = args.IsSilent;\n   });\n};\n\n// Subscribe the SilenceListener to PcmAudioHandler\npcmAudioHandler.Subscribe(silenceListener);\n\n// Connect PcmAudioHandler to AudioStreamer for incoming audio\naudioStreamer.OnAudioCaptured += (sender, args) =>\n{\n   pcmAudioHandler.HandlePcmAudio(args.Audio);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Global AudioStreamer Options in .NET MAUI App Builder\nDESCRIPTION: This snippet demonstrates how to set global streaming options for the entire app using the app builder. It includes platform-specific configurations for iOS and macOS.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/docs/audio-streamer.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.UseMauiApp<App>()\n       .AddAudio(\n         streamerOptions =>\n         {\n#if IOS || MACCATALYST\n             recordingOptions.SampleRate = 44800;             \n             streamerOptions.Category = AVFoundation.AVAudioSessionCategory.Record;\n             streamerOptions.Mode = AVFoundation.AVAudioSessionMode.Default;\n             streamerOptions.CategoryOptions = VFoundation.AVAudioSessionCategoryOptions.MixWithOthers;\n#endif\n         })....\n```\n\n----------------------------------------\n\nTITLE: Configuring AudioRecorder Options in C#\nDESCRIPTION: Shows how to customize the AudioRecorder settings using AudioRecorderOptions, specifically for iOS and macOS platforms to enable both recording and playback of audio.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/docs/audio-recorder.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\naudioManager.CreateRecorder(\n    new AudioRecorderOptions\n    {\n#if IOS || MACCATALYST\n        Category = AVFoundation.AVAudioSessionCategory.PlayAndRecord\n#endif\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS/macOS Audio Playback Options\nDESCRIPTION: Shows how to configure audio playback options specifically for iOS and macOS platforms, enabling audio blending with other playing sounds on the device.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/docs/audio-player.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\naudioManager.CreatePlayer(\n    await FileSystem.OpenAppPackageFileAsync(\"ukelele.mp3\"),\n    new AudioPlayerOptions\n    {\n#if IOS || MACCATALYST\n        CategoryOptions = AVFoundation.AVAudioSessionCategoryOptions.MixWithOthers\n#endif\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring AudioStreamer Options in .NET MAUI\nDESCRIPTION: This snippet shows how to set custom streaming options for the AudioStreamer, including channel type, bit depth, and sample rate. It demonstrates the flexibility in configuring audio streaming parameters.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/docs/audio-streamer.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\naudioManager.CreateStreamer();\naudioStreamer.Options.Channels = ChannelType.Mono;\naudioStreamer.Options.BitDepth = BitDepth.Pcm16bit;\naudioStreamer.Options.SampleRate = 441000;\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Audio Stream Attributes\nDESCRIPTION: Demonstrates how to set up Android-specific audio attributes to control volume settings and audio stream behavior.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/docs/audio-player.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\naudioManager.CreatePlayer(\n    await FileSystem.OpenAppPackageFileAsync(\"ukelele.mp3\"),\n    new AudioPlayerOptions\n    {\n#if ANDROID\n        AudioContentType = Android.Media.AudioContentType.Music,\n        AudioUsageKind = Android.Media.AudioUsageKind.Media,\n#endif\n    });\n```\n\n----------------------------------------\n\nTITLE: Connecting PCM Audio Handler to Audio Streamer in C#\nDESCRIPTION: Shows how to connect the PCM Audio Handler to an Audio Streamer by implementing an event handler that processes captured audio data.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/docs/audio-listeners.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnAudioStreamerDataCaptured(object sender, AudioStreamEventArgs args)\n{\n   pcmAudioHandler.HandlePcmAudio(args.Audio);\n}\n```\n\n----------------------------------------\n\nTITLE: Using AudioManager Directly Without Dependency Injection in .NET MAUI\nDESCRIPTION: Shows how to access the AudioManager singleton instance directly without dependency injection. This approach is simpler but offers less testability and flexibility.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AudioPlayerViewModel\n{\n    public async Task PlayAudioAsync()\n    {\n        var audioPlayer = AudioManager.Current.CreatePlayer(await FileSystem.OpenAppPackageFileAsync(\"ukelele.mp3\"));\n\n        audioPlayer.Play();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Audio Recording Permissions in Android Manifest\nDESCRIPTION: Demonstrates the required permissions that need to be added to the AndroidManifest.xml file for enabling audio recording functionality on Android devices.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/docs/audio-recorder.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\"/>\n<uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\" />\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Android Permissions for Audio Streaming in .NET MAUI\nDESCRIPTION: This XML snippet shows the necessary permissions that need to be added to the AndroidManifest.xml file for audio streaming functionality on Android platforms.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/docs/audio-streamer.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\"/>\n<uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\" />\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Microphone Usage Description for iOS in Info.plist\nDESCRIPTION: Shows the required entry that needs to be added to the Info.plist file for iOS applications to request microphone access for audio recording.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/docs/audio-recorder.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSMicrophoneUsageDescription</key>\n<string>The [app name] wants to use your microphone to record audio.</string>\n```\n\n----------------------------------------\n\nTITLE: Adding iOS Microphone Usage Description for Audio Streaming in .NET MAUI\nDESCRIPTION: This XML snippet shows the necessary entry that needs to be added to the Info.plist file for audio streaming functionality on iOS platforms. It includes the microphone usage description.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/docs/audio-streamer.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSMicrophoneUsageDescription</key>\n<string>The [app name] wants to use your microphone to record audio.</string>\n```\n\n----------------------------------------\n\nTITLE: Adding Microphone Capability for Windows in Package.appxmanifest\nDESCRIPTION: Demonstrates the required capability that needs to be added to the Package.appxmanifest file for enabling microphone access in Windows applications.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/docs/audio-recorder.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<DeviceCapability Name=\"microphone\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Windows Microphone Capability for Audio Streaming in .NET MAUI\nDESCRIPTION: This XML snippet shows the necessary entry that needs to be added to the Package.appxmanifest file for audio streaming functionality on Windows platforms. It includes the microphone device capability.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/docs/audio-streamer.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<DeviceCapability Name=\"microphone\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in Project File\nDESCRIPTION: XML configuration that should be included in the .csproj file to automatically deploy raw assets from the Resources/Raw directory with the application package.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/samples/Plugin.Maui.Audio.Sample/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets at Runtime with FileSystem API\nDESCRIPTION: C# method demonstrating how to open and read the contents of a file from the application package using the MAUI Essentials FileSystem API. This example shows the pattern for accessing any raw assets deployed with the application.\nSOURCE: https://github.com/jfversluis/plugin.maui.audio/blob/main/samples/Plugin.Maui.Audio.Sample/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```"
  }
]