[
  {
    "owner": "facebook",
    "repo": "rocksdb",
    "content": "TITLE: Opening a RocksDB Database in C++\nDESCRIPTION: This snippet demonstrates how to open a RocksDB database, creating it if it doesn't exist. It includes the necessary headers, initializes options, and shows error handling using the Status class.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/_docs/getting-started.md#2025-04-11_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#include <assert>\n#include \"rocksdb/db.h\"\n\nrocksdb::DB* db;\nrocksdb::Options options;\noptions.create_if_missing = true;\nrocksdb::Status status =\n  rocksdb::DB::Open(options, \"/tmp/testdb\", &db);\nassert(status.ok());\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Error If Database Exists Option in RocksDB C++\nDESCRIPTION: This snippet shows how to configure RocksDB to raise an error if the database already exists when trying to open it.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/_docs/getting-started.md#2025-04-11_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\noptions.error_if_exists = true;\n```\n\n----------------------------------------\n\nTITLE: Using DB::DeleteRange for Optimized Key Range Deletion in C++\nDESCRIPTION: Introduced DB::DeleteRange for optimized deletion of large ranges of contiguous keys.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_42\n\nLANGUAGE: C++\nCODE:\n```\ndb->DeleteRange(WriteOptions(), column_family, start_key, end_key);\n```\n\n----------------------------------------\n\nTITLE: Performing Read and Write Operations in RocksDB C++\nDESCRIPTION: This snippet demonstrates basic database operations in RocksDB: Get (read), Put (write), and Delete. It shows how to move a value from one key to another while handling potential errors.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/_docs/getting-started.md#2025-04-11_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nstd::string value;\nrocksdb::Status s = db->Get(rocksdb::ReadOptions(), key1, &value);\nif (s.ok()) s = db->Put(rocksdb::WriteOptions(), key2, value);\nif (s.ok()) s = db->Delete(rocksdb::WriteOptions(), key1);\n```\n\n----------------------------------------\n\nTITLE: Verifying Database Checksums in C++\nDESCRIPTION: New API call to verify checksums in all SST files of a running database.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_34\n\nLANGUAGE: C++\nCODE:\n```\nDB::VerifyChecksum()\n```\n\n----------------------------------------\n\nTITLE: Closing a RocksDB Database in C++\nDESCRIPTION: This snippet shows how to properly close a RocksDB database by deleting the database object when it's no longer needed.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/_docs/getting-started.md#2025-04-11_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\n/* open the db as described above */\n/* do something with db */\ndelete db;\n```\n\n----------------------------------------\n\nTITLE: Using Single Delete Operation in C++\nDESCRIPTION: Shows how to use the new SingleDelete() method, which is a more efficient way to delete keys that have not been overwritten. This can improve performance for certain deletion patterns.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_49\n\nLANGUAGE: C++\nCODE:\n```\ndb->SingleDelete(write_options, \"key_to_delete\");\n```\n\n----------------------------------------\n\nTITLE: Compiling RocksDB Static Library in Release Mode\nDESCRIPTION: Command to compile the RocksDB static library (librocksdb.a) in release mode, which is recommended for production use.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/INSTALL.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake static_lib\n```\n\n----------------------------------------\n\nTITLE: Defining RocksDB Source Files in CMake\nDESCRIPTION: CMake configuration that defines all the source files (.cc) that make up the RocksDB library. The files are organized by subsystem directories including cache management, database operations, environment handling, file operations, logging, memory management, monitoring, and various utilities.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES\n        cache/cache.cc\n        cache/cache_entry_roles.cc\n        cache/cache_key.cc\n        cache/cache_helpers.cc\n        cache/cache_reservation_manager.cc\n        cache/charged_cache.cc\n        cache/clock_cache.cc\n        cache/compressed_secondary_cache.cc\n        cache/lru_cache.cc\n        cache/secondary_cache.cc\n        cache/secondary_cache_adapter.cc\n        cache/sharded_cache.cc\n        cache/tiered_secondary_cache.cc\n        db/arena_wrapped_db_iter.cc\n        [... truncated for brevity ...]\n        utilities/debug.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Creating SstFileManager in C++\nDESCRIPTION: Demonstrates how to create and use an SstFileManager to track the total size of SST files and control their deletion rate. This new feature allows better management of storage resources.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_48\n\nLANGUAGE: C++\nCODE:\n```\nauto sst_file_manager = NewSstFileManager(env);\noptions.sst_file_manager = sst_file_manager;\n```\n\n----------------------------------------\n\nTITLE: Initializing PinnableSlice for DB::Get in C++\nDESCRIPTION: PinnableSlice is introduced to avoid extra memcpy of value to std::string when using DB::Get. It releases pinned resources containing the value upon destruction or Reset() call.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_39\n\nLANGUAGE: C++\nCODE:\n```\nDB::Get(ReadOptions, ColumnFamilyHandle*, const Slice& key, PinnableSlice* value);\n```\n\n----------------------------------------\n\nTITLE: Configuring RocksDB Test Suite in CMake\nDESCRIPTION: Sets up the test suite for RocksDB, including test utilities, individual test executables, and custom targets for running tests. It also configures gtest for test discovery and links necessary libraries.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_51\n\nLANGUAGE: CMake\nCODE:\n```\nset(TESTUTIL_SOURCE\n      db/db_test_util.cc\n      db/db_with_timestamp_test_util.cc\n      monitoring/thread_status_updater_debug.cc\n      table/mock_table.cc\n      utilities/agg_merge/test_agg_merge.cc\n      utilities/cassandra/test_utils.cc\n  )\n  enable_testing()\n  add_custom_target(rocksdb_check COMMAND ${CMAKE_CTEST_COMMAND})\n  set(TESTUTILLIB testutillib${ARTIFACT_SUFFIX})\n  add_library(${TESTUTILLIB} STATIC ${TESTUTIL_SOURCE})\n  target_link_libraries(${TESTUTILLIB} ${ROCKSDB_LIB} ${FOLLY_LIBS})\n  if(MSVC)\n    set_target_properties(${TESTUTILLIB} PROPERTIES COMPILE_FLAGS \"/Fd${CMAKE_CFG_INTDIR}/testutillib${ARTIFACT_SUFFIX}.pdb\")\n  endif()\n  set_target_properties(${TESTUTILLIB}\n        PROPERTIES EXCLUDE_FROM_DEFAULT_BUILD_RELEASE 1\n        EXCLUDE_FROM_DEFAULT_BUILD_MINRELEASE 1\n        EXCLUDE_FROM_DEFAULT_BUILD_RELWITHDEBINFO 1\n  )\n\n  foreach(sourcefile ${TESTS})\n      get_filename_component(exename ${sourcefile} NAME_WE)\n      add_executable(${exename}${ARTIFACT_SUFFIX} ${sourcefile})\n      set_target_properties(${exename}${ARTIFACT_SUFFIX}\n        PROPERTIES EXCLUDE_FROM_DEFAULT_BUILD_RELEASE 1\n        EXCLUDE_FROM_DEFAULT_BUILD_MINRELEASE 1\n        EXCLUDE_FROM_DEFAULT_BUILD_RELWITHDEBINFO 1\n        OUTPUT_NAME ${exename}${ARTIFACT_SUFFIX}\n      )\n      target_link_libraries(${exename}${ARTIFACT_SUFFIX} testutillib${ARTIFACT_SUFFIX} testharness gtest ${THIRDPARTY_LIBS} ${ROCKSDB_LIB})\n      if(NOT \"${exename}\" MATCHES \"db_sanity_test\")\n        gtest_discover_tests(${exename} DISCOVERY_TIMEOUT 120)\n        add_dependencies(rocksdb_check ${exename}${ARTIFACT_SUFFIX})\n      endif()\n  endforeach(sourcefile ${TESTS})\n```\n\n----------------------------------------\n\nTITLE: Querying Iterator Property in C++\nDESCRIPTION: Shows how to use the new Iterator::GetProperty() method to check if a key is pinned, replacing the deprecated IsKeyPinned() method. This allows checking iterator properties in a more flexible way.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_47\n\nLANGUAGE: C++\nCODE:\n```\nbool is_key_pinned = false;\nit->GetProperty(\"rocksdb.iterator.is.key.pinned\", &is_key_pinned);\n```\n\n----------------------------------------\n\nTITLE: Configuring RocksDB Build Options in CMake\nDESCRIPTION: This snippet sets up various build options for RocksDB, including JNI support, tests, benchmark tools, and other utilities.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_36\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_JNI \"build with JNI\" OFF)\n# Tests are excluded from Release builds\nCMAKE_DEPENDENT_OPTION(WITH_TESTS \"build with tests\" ON\n  \"CMAKE_BUILD_TYPE STREQUAL Debug\" OFF)\noption(WITH_BENCHMARK_TOOLS \"build with benchmarks\" ON)\noption(WITH_CORE_TOOLS \"build with ldb and sst_dump\" ON)\noption(WITH_TOOLS \"build with tools\" ON)\n```\n\n----------------------------------------\n\nTITLE: Using FileSystem Buffer for Read Optimization in RocksDB\nDESCRIPTION: Code example showing how to access FSReadRequest::fs_scratch, a data buffer provided by the underlying FileSystem during reads to optimize CPU usage by avoiding buffer copying.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nFSReadRequest::fs_scratch\n```\n\n----------------------------------------\n\nTITLE: Setting BlockBasedTableOptions::data_block_index_type in C++\nDESCRIPTION: Enables hash index support for data blocks to reduce CPU utilization of point-lookup operations.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_27\n\nLANGUAGE: C++\nCODE:\n```\nBlockBasedTableOptions table_options;\ntable_options.data_block_index_type = kDataBlockBinaryAndHash;\n```\n\n----------------------------------------\n\nTITLE: Configuring ReadOptions for Readahead in C++\nDESCRIPTION: Shows how to set the readahead_size in ReadOptions. When non-zero, this causes NewIterator to create a new table reader that performs reads of the specified size, potentially improving performance for certain workloads.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_45\n\nLANGUAGE: C++\nCODE:\n```\nReadOptions read_options;\nread_options.readahead_size = 1024 * 1024; // 1MB readahead\nauto it = db->NewIterator(read_options);\n```\n\n----------------------------------------\n\nTITLE: Using NewLRUCache with Strict Capacity Limit in C++\nDESCRIPTION: Demonstrates how to create an LRU cache with strict capacity limits using the new strict_capacity_limit option. When set to true, inserts to the cache will fail if there is not enough free capacity.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_46\n\nLANGUAGE: C++\nCODE:\n```\nstd::shared_ptr<Cache> cache = NewLRUCache(capacity, num_shard_bits, strict_capacity_limit=true);\n```\n\n----------------------------------------\n\nTITLE: Setting Background Thread Pool for Bottom Level Compactions in C++\nDESCRIPTION: Configures a dedicated thread pool for executing universal compactions that include the bottom level, which can help reduce head-of-line blocking.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_33\n\nLANGUAGE: C++\nCODE:\n```\nEnv::SetBackgroundThreads(N, Env::Priority::BOTTOM)\n```\n\n----------------------------------------\n\nTITLE: Enabling Two-Level Indexing in RocksDB C++\nDESCRIPTION: Experimental feature to create a two-level index by partitioning the index and creating a 2nd level index on partitions. Enabled by setting kTwoLevelIndexSearch as IndexType and configuring index_per_partition.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_41\n\nLANGUAGE: C++\nCODE:\n```\noptions.index_type = kTwoLevelIndexSearch;\noptions.index_per_partition = 100;\n```\n\n----------------------------------------\n\nTITLE: Refreshing Iterator State in C++\nDESCRIPTION: New method to update an iterator's state without full reinitialization, potentially reducing costs when recreating iterators.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_35\n\nLANGUAGE: C++\nCODE:\n```\nIterator::Refresh()\n```\n\n----------------------------------------\n\nTITLE: Optimizing Database Settings\nDESCRIPTION: Examples of using OptimizeForPointLookup and OptimizeForSmallDb optimization methods with new behaviors.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_21\n\nLANGUAGE: C++\nCODE:\n```\noptions.OptimizeForPointLookup();\noptions.OptimizeForSmallDb(cache_obj); // Optional cache parameter\n```\n\n----------------------------------------\n\nTITLE: Configuring Portable Build Options for Cross-platform Compatibility\nDESCRIPTION: Sets up portable build options to control CPU architecture targeting. When PORTABLE=1, the build is optimized for broader compatibility, while PORTABLE=0 optimizes for the current CPU architecture with specialized instructions.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset(PORTABLE 0 CACHE STRING \"Minimum CPU arch to support, or 0 = current CPU, 1 = baseline CPU\")\nif(PORTABLE MATCHES \"1|ON|YES|TRUE|Y\")\n  # Usually nothing to do; compiler default is typically the most general\n  if(NOT MSVC)\n    if(CMAKE_SYSTEM_PROCESSOR MATCHES \"^s390x\")\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -march=z196\")\n    endif()\n    if(CMAKE_SYSTEM_PROCESSOR MATCHES \"^loongarch64\")\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -march=loongarch64\")\n    endif()\n  endif()\nelseif(PORTABLE MATCHES \"0|OFF|NO|FALSE|N\")\n  if(MSVC)\n    # NOTE: No auto-detection of current CPU, but instead assume some useful\n    # level of optimization is supported\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /arch:AVX2\")\n  else()\n    # Require instruction set from current CPU (with some legacy or opt-out\n    # exceptions)\n    if(CMAKE_SYSTEM_PROCESSOR MATCHES \"^s390x\" AND NOT HAS_S390X_MARCH_NATIVE)\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -march=z196\")\n    elseif(NOT CMAKE_SYSTEM_PROCESSOR MATCHES \"^(powerpc|ppc)64\" AND NOT HAS_ARMV8_CRC)\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -march=native\")\n    endif()\n  endif()\nelse()\n  # Name of a CPU arch spec or feature set to require\n  if(MSVC)\n```\n\n----------------------------------------\n\nTITLE: Unified Options Class Implementation\nDESCRIPTION: Displays the comprehensive Options class that implements all four types of options interfaces: database, mutable database, column family, and mutable column family.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/understanding_options.md#2025-04-11_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nclass Options extends RocksObject\n    implements DBOptionsInterface<Options>,\n    MutableDBOptionsInterface<Options>,\n    ColumnFamilyOptionsInterface<Options>,\n    MutableColumnFamilyOptionsInterface<Options>\n```\n\n----------------------------------------\n\nTITLE: Accessing RocksDB Error Handler Ticker Statistics\nDESCRIPTION: Example of tickers used to track background error counts in RocksDB, showing the new correctly spelled tickers that replace misspelled ones.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\n\"rocksdb.error.handler.bg.error.count\", \"rocksdb.error.handler.bg.io.error.count\", \"rocksdb.error.handler.bg.retryable.io.error.count\"\n```\n\n----------------------------------------\n\nTITLE: Setting FlushOptions::allow_write_stall in C++\nDESCRIPTION: Controls whether Flush calls start immediately even if they cause write stalls, or wait until stalling can be avoided.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_25\n\nLANGUAGE: C++\nCODE:\n```\nFlushOptions fopts;\nfopts.allow_write_stall = false;\n```\n\n----------------------------------------\n\nTITLE: Creating Rate Limiter with Auto-Tuning in C++\nDESCRIPTION: Creates a new rate limiter with dynamic adjustment based on I/O demand. The rate_bytes_per_sec parameter sets an upper bound on the rate.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_32\n\nLANGUAGE: C++\nCODE:\n```\nNewGenericRateLimiter(rate_bytes_per_sec, /* auto_tuned */ true)\n```\n\n----------------------------------------\n\nTITLE: Disabling and Enabling Manual Compaction in C++\nDESCRIPTION: New functions added to stop and resume manual compaction operations in RocksDB.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_16\n\nLANGUAGE: C++\nCODE:\n```\nDisableManualCompaction()\nEnableManualCompaction()\n```\n\n----------------------------------------\n\nTITLE: Using CompactOnDeletion Collector Factory in RocksDB C API\nDESCRIPTION: Example of the C API function for adding a compact on deletion collector factory with a deletion ratio parameter.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nrocksdb_options_add_compact_on_deletion_collector_factory_del_ratio\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for RocksDB\nDESCRIPTION: Sets up the include directories for the project, adding both the project source directory and its include subdirectory to the include path.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${PROJECT_SOURCE_DIR})\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\n```\n\n----------------------------------------\n\nTITLE: Configuring Folly Integration for RocksDB\nDESCRIPTION: Sets up integration with the Folly library, configuring paths, dependencies, and compiler definitions. Includes fallback mechanisms for finding Folly when not found through the regular CMake find_package.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nif(USE_FOLLY)\n  if(USE_FOLLY_LITE)\n    message(FATAL_ERROR \"Please specify one of USE_FOLLY or USE_FOLLY_LITE\")\n  endif()\n  if(ROCKSDB_BUILD_SHARED)\n    message(FATAL_ERROR \"Cannot build RocksDB shared library with folly\")\n  endif()\n  set(ROCKSDB_BUILD_SHARED OFF)\n  set(GFLAGS_SHARED FALSE)\n  find_package(folly)\n  # If cmake could not find the folly-config.cmake file, fall back\n  # to looking in third-party/folly for folly and its dependencies\n  if(NOT FOLLY_LIBRARIES)\n    exec_program(python3 ${PROJECT_SOURCE_DIR}/third-party/folly ARGS\n    build/fbcode_builder/getdeps.py show-inst-dir OUTPUT_VARIABLE\n    FOLLY_INST_PATH)\n    exec_program(ls ARGS -d ${FOLLY_INST_PATH}/../boost* OUTPUT_VARIABLE\n    BOOST_INST_PATH)\n    exec_program(ls ARGS -d ${FOLLY_INST_PATH}/../fmt* OUTPUT_VARIABLE\n    FMT_INST_PATH)\n    exec_program(ls ARGS -d ${FOLLY_INST_PATH}/../gflags* OUTPUT_VARIABLE\n    GFLAGS_INST_PATH)\n    set(Boost_DIR ${BOOST_INST_PATH}/lib/cmake/Boost-1.83.0)\n    if(EXISTS ${FMT_INST_PATH}/lib64)\n      set(fmt_DIR ${FMT_INST_PATH}/lib64/cmake/fmt)\n    else()\n      set(fmt_DIR ${FMT_INST_PATH}/lib/cmake/fmt)\n    endif()\n    set(gflags_DIR ${GFLAGS_INST_PATH}/lib/cmake/gflags)\n\n    exec_program(sed ARGS -i 's/gflags_shared//g'\n    ${FOLLY_INST_PATH}/lib/cmake/folly/folly-targets.cmake)\n\n    include(${FOLLY_INST_PATH}/lib/cmake/folly/folly-config.cmake)\n  endif()\n\n  add_compile_definitions(USE_FOLLY FOLLY_NO_CONFIG HAVE_CXX11_ATOMIC)\n  list(APPEND THIRDPARTY_LIBS Folly::folly)\n  set(FOLLY_LIBS Folly::folly)\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,--copy-dt-needed-entries\")\nendif()\nfind_package(Threads REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Accessing RocksDB Obsolete SST Files Size Property\nDESCRIPTION: Example of the property name used to report the size of SST files that have become obsolete but have not yet been deleted.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n\"rocksdb.obsolete-sst-files-size-property\"\n```\n\n----------------------------------------\n\nTITLE: Creating Memory-Based Environment in C++\nDESCRIPTION: Method to create an environment that stores data in memory, now available in the default library build.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_54\n\nLANGUAGE: C++\nCODE:\n```\nNewMemEnv()\n```\n\n----------------------------------------\n\nTITLE: Configuring New RocksDB Options\nDESCRIPTION: Example of new configuration options introduced including snap_refresh_nanos, unordered_write, failed_move_fall_back_to_copy, and strict_bytes_per_sync.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_19\n\nLANGUAGE: C++\nCODE:\n```\noptions.snap_refresh_nanos = 0; // Default value\noptions.unordered_write = true;\noptions.failed_move_fall_back_to_copy = true; // Default value\noptions.strict_bytes_per_sync = true;\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Capacity Dynamically in C++\nDESCRIPTION: New API to dynamically change the maximum configured capacity of the cache. If the new capacity is less than existing usage, elements will be evicted using LRU policy.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_51\n\nLANGUAGE: C++\nCODE:\n```\nCache::SetCapacity(size_t capacity)\n```\n\n----------------------------------------\n\nTITLE: API Function Change - TimeOut Write Option\nDESCRIPTION: New timeout API added to WriteOptions with timeout_hint_us parameter for write operation timeouts.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_59\n\nLANGUAGE: C++\nCODE:\n```\nWriteOptions.timeout_hint_us\n```\n\n----------------------------------------\n\nTITLE: Conditionally Installing RocksDB Shared Library\nDESCRIPTION: Configures installation of the RocksDB shared library if it was built, including proper component grouping and destination paths for different file types.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_43\n\nLANGUAGE: cmake\nCODE:\n```\n  if(ROCKSDB_BUILD_SHARED)\n    install(\n      TARGETS ${ROCKSDB_SHARED_LIB}\n      EXPORT RocksDBTargets\n      COMPONENT runtime\n      ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n      RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n      LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n      INCLUDES DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Java MultiGet Benchmark Results - Before Changes\nDESCRIPTION: Benchmark results showing MultiGet performance before optimization for different configurations of column families, key counts, and value sizes.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBenchmark (columnFamilyTestType) (keyCount) (keySize) (multiGetSize) (valueSize) Mode Cnt Score Error Units\nMultiGetBenchmarks.multiGetList10 no_column_family 10000 16 100 64 thrpt 25 6315.541 ± 8.106 ops/s\nMultiGetBenchmarks.multiGetList10 no_column_family 10000 16 100 1024 thrpt 25 6975.468 ± 68.964 ops/s\n```\n\n----------------------------------------\n\nTITLE: Java API Extensions Examples\nDESCRIPTION: Example showing various Java API extensions made to improve consistency and completeness of RocksDB Java bindings, including get, put, merge operations with ByteBuffer support\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nRocksDB.get(ReadOptions opt, ByteBuffer key, ByteBuffer value);\nRocksDB.put(WriteOptions writeOpts, ByteBuffer key, ByteBuffer value);\nRocksDB.merge(WriteOptions writeOptions, ByteBuffer key, ByteBuffer value);\nRocksIterator.key(byte[] key);\nRocksIterator.value(byte[] value);\nTransaction.get(ReadOptions opt, ByteBuffer key, ByteBuffer value);\nTransaction.getForUpdate(ReadOptions readOptions, ByteBuffer key, ByteBuffer value, boolean exclusive);\nTransaction.put(ByteBuffer key, ByteBuffer value);\nTransaction.merge(ByteBuffer key, ByteBuffer value);\n```\n\n----------------------------------------\n\nTITLE: Installing RocksDB Static Library\nDESCRIPTION: Configures installation of the RocksDB static library with proper destination paths and component grouping.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_42\n\nLANGUAGE: cmake\nCODE:\n```\n  install(\n    TARGETS ${ROCKSDB_STATIC_LIB}\n    EXPORT RocksDBTargets\n    COMPONENT devel\n    ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n    INCLUDES DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Catching Up with Primary in StackableDB (C++)\nDESCRIPTION: New function added to StackableDB in non-LITE mode to synchronize with the primary database.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_17\n\nLANGUAGE: C++\nCODE:\n```\nTryCatchUpWithPrimary()\n```\n\n----------------------------------------\n\nTITLE: API Function Change - LinkFile\nDESCRIPTION: New API added to Env class requiring implementation in custom Env classes.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_56\n\nLANGUAGE: C++\nCODE:\n```\nEnv::LinkFile\n```\n\n----------------------------------------\n\nTITLE: Registering Post-Processor for Proto Fuzzer Input\nDESCRIPTION: This code registers a post-processor for the DBOperations input to ensure keys are unique and in ascending order before passing to the fuzzer.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/fuzz/README.md#2025-04-11_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nprotobuf_mutator::libfuzzer::PostProcessorRegistration<DBOperations>\n```\n\n----------------------------------------\n\nTITLE: Configuring RocksDB Example Executables with CMake\nDESCRIPTION: CMake configuration that defines multiple example executables for RocksDB and links them against the RocksDB library. Each executable demonstrates different features of RocksDB, from basic usage to advanced features like transactions and compaction filters.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/examples/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(simple_example\n  simple_example.cc)\ntarget_link_libraries(simple_example\n  ${ROCKSDB_LIB})\n\nadd_executable(column_families_example\n  column_families_example.cc)\ntarget_link_libraries(column_families_example\n  ${ROCKSDB_LIB})\n\nadd_executable(compact_files_example\n  compact_files_example.cc)\ntarget_link_libraries(compact_files_example\n  ${ROCKSDB_LIB})\n\nadd_executable(c_simple_example\n  c_simple_example.c)\ntarget_link_libraries(c_simple_example\n  ${ROCKSDB_LIB})\n\nadd_executable(optimistic_transaction_example\n  optimistic_transaction_example.cc)\ntarget_link_libraries(optimistic_transaction_example\n  ${ROCKSDB_LIB})\n\nadd_executable(transaction_example\n  transaction_example.cc)\ntarget_link_libraries(transaction_example\n  ${ROCKSDB_LIB})\n\nadd_executable(compaction_filter_example\n  compaction_filter_example.cc)\ntarget_link_libraries(compaction_filter_example\n  ${ROCKSDB_LIB})\n\nadd_executable(options_file_example\n  options_file_example.cc)\ntarget_link_libraries(options_file_example\n  ${ROCKSDB_LIB})\n\nadd_executable(multi_processes_example\n  EXCLUDE_FROM_ALL\n  multi_processes_example.cc)\ntarget_link_libraries(multi_processes_example\n  ${ROCKSDB_LIB})\n```\n\n----------------------------------------\n\nTITLE: Setting memtable_insert_with_hint_prefix_extractor Option in RocksDB C++\nDESCRIPTION: Added option to reduce CPU usage for inserting keys into memtable, if keys can be grouped by prefix and inserts for each prefix are sequential or almost sequential.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_43\n\nLANGUAGE: C++\nCODE:\n```\noptions.memtable_insert_with_hint_prefix_extractor = NewCappedPrefixTransform(8);\n```\n\n----------------------------------------\n\nTITLE: Accessing Histogram Metrics in C++\nDESCRIPTION: New method to get a detailed distribution of a histogram metric as a string.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_50\n\nLANGUAGE: C++\nCODE:\n```\nstatistics::getHistogramString()\n```\n\n----------------------------------------\n\nTITLE: Creating and Dropping Multiple Column Families in C++\nDESCRIPTION: New API calls to bulk create or drop multiple column families in a single operation.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_37\n\nLANGUAGE: C++\nCODE:\n```\nDB::CreateColumnFamilies()\n```\n\nLANGUAGE: C++\nCODE:\n```\nDB::DropColumnFamilies()\n```\n\n----------------------------------------\n\nTITLE: Adding User Key to Table Properties Collector in C++\nDESCRIPTION: New method to replace Add() in TablePropertiesCollector, exposing key type, sequence number, and file size to users.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_53\n\nLANGUAGE: C++\nCODE:\n```\nTablePropertiesCollector::AddUserKey()\n```\n\n----------------------------------------\n\nTITLE: API Function Change - GetThreadList\nDESCRIPTION: New function added to return status of rocksdb-related threads. Will be enhanced in future releases.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_55\n\nLANGUAGE: C++\nCODE:\n```\nrocksdb::GetThreadList()\n```\n\n----------------------------------------\n\nTITLE: Configuring platform-specific RocksDB JNI static library for Windows, Linux and macOS\nDESCRIPTION: Sets up the target properties for the RocksDB JNI static library based on the operating system and architecture. For Windows, it uses the 'librocksdbjni-win[32/64]' naming convention, for Linux 'rocksdbjni-linux[32/64]', and for macOS 'rocksdbjni-osx-[processor]' with a '.jnilib' suffix.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/CMakeLists.txt#2025-04-11_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(bitness 32)\nif(CMAKE_SIZEOF_VOID_P EQUAL 8)\n    set(bitness 64)\nendif()\n\nif(${CMAKE_SYSTEM_NAME} MATCHES \"Windows\")\n    set_target_properties(\n            ${ROCKSDBJNI_STATIC_LIB}\n            PROPERTIES\n            OUTPUT_NAME librocksdbjni-win${bitness}\n    )\n    set(ROCKSDB_JAR rocksdbjni-${CMAKE_PROJECT_VERSION}-win${bitness}.jar)\nelseif(${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n    set_target_properties(\n            ${ROCKSDBJNI_STATIC_LIB}\n            PROPERTIES\n            OUTPUT_NAME \"rocksdbjni-linux${bitness}\"\n    )\n    set(ROCKSDB_JAR rocksdbjni-${CMAKE_PROJECT_VERSION}-linux${bitness}.jar)\nelseif(${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n    set_target_properties(\n            ${ROCKSDBJNI_STATIC_LIB}\n            PROPERTIES\n            OUTPUT_NAME rocksdbjni-osx-${CMAKE_SYSTEM_PROCESSOR}\n    )\n    set_target_properties(\n            ${ROCKSDBJNI_STATIC_LIB}\n            PROPERTIES\n            SUFFIX \".jnilib\"\n    )\n    set(ROCKSDB_JAR rocksdbjni-${CMAKE_PROJECT_VERSION}-osx.jar)\nelse()\n    set(ROCKSDB_JAR rocksdb-${CMAKE_PROJECT_VERSION}.jar)\nendif()\n```\n\n----------------------------------------\n\nTITLE: API Changes - Trace Filter Types\nDESCRIPTION: New trace filter types added to TraceFilterType enum for filtering specific operations like iterator seek, seek for prev, and multi-get operations.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\nkTraceFilterIteratorSeek\nkTraceFilterIteratorSeekForPrev\nkTraceFilterMultiGet\n```\n\n----------------------------------------\n\nTITLE: Java API Removal\nDESCRIPTION: Removal of TableProperties.getPropertiesOffsets() method from Java API as it exposed internal implementation details.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\nTableProperties.getPropertiesOffsets()\n```\n\n----------------------------------------\n\nTITLE: Setting TransactionOptions::skip_concurrency_control in C++\nDESCRIPTION: Allows pessimistic transactions to skip concurrency control overhead. Can be used to optimize certain transactions or during recovery.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_26\n\nLANGUAGE: C++\nCODE:\n```\nTransactionOptions txn_options;\ntxn_options.skip_concurrency_control = true;\n```\n\n----------------------------------------\n\nTITLE: Setting atomic_flush DB option in C++\nDESCRIPTION: Enables atomic flushing of multiple column families and committing the result to MANIFEST. Useful when WAL is disabled.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_23\n\nLANGUAGE: C++\nCODE:\n```\noptions.atomic_flush = true;\n```\n\n----------------------------------------\n\nTITLE: Documenting RocksDB Default Option Changes in Markdown\nDESCRIPTION: This markdown document outlines the changes made to default options in RocksDB across multiple versions. It includes modifications to performance-critical settings like buffer sizes, file limits, and compaction thresholds.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/DEFAULT_OPTIONS_HISTORY.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# RocksDB default options change log (NO LONGER MAINTAINED)\n## Unreleased\n* delayed_write_rate takes the rate given by rate_limiter if not specified.\n\n## 5.2\n* Change the default of delayed slowdown value to 16MB/s and further increase the L0 stop condition to 36 files.\n\n## 5.0 (11/17/2016)\n* Options::allow_concurrent_memtable_write and Options::enable_write_thread_adaptive_yield are now true by default\n* Options.level0_stop_writes_trigger default value changes from 24 to 32.\n\n## 4.8.0 (5/2/2016)\n* options.max_open_files changes from 5000 to -1. It improves performance, but users need to set file descriptor limit to be large enough and watch memory usage for index and bloom filters.\n* options.base_background_compactions changes from max_background_compactions to 1. When users set higher max_background_compactions but the write throughput is not high, the writes are less spiky to disks.\n* options.wal_recovery_mode changes from kTolerateCorruptedTailRecords to kPointInTimeRecovery. Avoid some false positive when file system or hardware reorder the writes for file data and metadata.\n\n## 4.7.0 (4/8/2016)\n* options.write_buffer_size changes from 4MB to 64MB.\n* options.target_file_size_base changes from 2MB to 64MB.\n* options.max_bytes_for_level_base changes from 10MB to 256MB.\n* options.soft_pending_compaction_bytes_limit changes from 0 (disabled) to 64GB.\n* options.hard_pending_compaction_bytes_limit changes from 0 (disabled) to 256GB.\n* table_cache_numshardbits changes from 4 to 6.\n* max_file_opening_threads changes from 1 to 16.\n```\n\n----------------------------------------\n\nTITLE: Building RocksDB Java API on Linux\nDESCRIPTION: Commands to build the RocksDB Java API on Linux, including cleaning, compiling, and installing the JAR file.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/GetPutBenchmarks.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake clean jclean\nDEBUG_LEVEL=0 make -j12 rocksdbjava\n(cd java/target; cp rocksdbjni-7.10.0-linux64.jar rocksdbjni-7.10.0-SNAPSHOT-linux64.jar)\nmvn install:install-file -Dfile=./java/target/rocksdbjni-7.10.0-SNAPSHOT-linux64.jar -DgroupId=org.rocksdb -DartifactId=rocksdbjni -Dversion=7.10.0-SNAPSHOT -Dpackaging=jar\n```\n\n----------------------------------------\n\nTITLE: Using MemoryAllocator for block based table in C++\nDESCRIPTION: Allows specifying a custom memory allocator for block based tables.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_24\n\nLANGUAGE: C++\nCODE:\n```\nstd::shared_ptr<MemoryAllocator> custom_allocator = /* ... */;\noptions.table_factory->SetMemoryAllocator(custom_allocator);\n```\n\n----------------------------------------\n\nTITLE: Column Family Options Concrete Implementation\nDESCRIPTION: Demonstrates the concrete implementation class for Column Family options that implements both regular and mutable interfaces.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/understanding_options.md#2025-04-11_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass ColumnFamilyOptions extends RocksObject\n    implements ColumnFamilyOptionsInterface<ColumnFamilyOptions>,\n    MutableColumnFamilyOptionsInterface<ColumnFamilyOptions>\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-specific Compiler Flags for RocksDB\nDESCRIPTION: Sets up compiler flags specific to different platforms (MSVC, GCC/Clang) to enable optimizations, warnings, and debugging features. Different flags are applied based on compiler type, build type, and target architecture.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /Zi /nologo /EHsc /GS /Gd /GR /GF /fp:precise /Zc:wchar_t /Zc:forScope /errorReport:queue\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /FC /d2Zi+ /W4 /wd4127 /wd4996 /wd4100 /wd4324\")\nelse()\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -W -Wextra -Wall -pthread\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wsign-compare -Wshadow -Wno-unused-parameter -Wno-unused-variable -Woverloaded-virtual -Wnon-virtual-dtor -Wno-missing-field-initializers -Wno-strict-aliasing -Wno-invalid-offsetof\")\n  if(CMAKE_SYSTEM_PROCESSOR MATCHES \"x86_64\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wstrict-prototypes\")\n  endif()\n  if(MINGW)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-format\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wa,-mbig-obj\")\n    add_definitions(-D_POSIX_C_SOURCE=1)\n  endif()\n  if(NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-omit-frame-pointer\")\n    include(CheckCXXCompilerFlag)\n    CHECK_CXX_COMPILER_FLAG(\"-momit-leaf-frame-pointer\" HAVE_OMIT_LEAF_FRAME_POINTER)\n    if(HAVE_OMIT_LEAF_FRAME_POINTER)\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -momit-leaf-frame-pointer\")\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Key Versions for Debugging in C++\nDESCRIPTION: Debugging function to view internal versions of keys within a specified range.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_38\n\nLANGUAGE: C++\nCODE:\n```\nGetAllKeyVersions\n```\n\n----------------------------------------\n\nTITLE: Checking for Linux fallocate Support\nDESCRIPTION: Tests if the system supports the fallocate system call and sets a preprocessor definition accordingly. This allows RocksDB to use efficient file space allocation when available.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_FALLOCATE \"build with fallocate\" ON)\nif(WITH_FALLOCATE)\n  CHECK_CXX_SOURCE_COMPILES(\"\n#include <fcntl.h>\n#include <linux/falloc.h>\nint main() {\n int fd = open(\\\"/dev/null\\\", 0);\n fallocate(fd, FALLOC_FL_KEEP_SIZE, 0, 1024);\n}\n\" HAVE_FALLOCATE)\n  if(HAVE_FALLOCATE)\n    add_definitions(-DROCKSDB_FALLOCATE_PRESENT)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Folly Library Support in CMake\nDESCRIPTION: Configures the build to include Folly library support when USE_FOLLY_LITE is enabled, adding necessary source files, include directories, and dependencies.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nif(USE_FOLLY_LITE)\n  list(APPEND SOURCES\n    third-party/folly/folly/container/detail/F14Table.cpp\n    third-party/folly/folly/detail/Futex.cpp\n    third-party/folly/folly/lang/Exception.cpp\n    third-party/folly/folly/lang/SafeAssert.cpp\n    third-party/folly/folly/lang/ToAscii.cpp\n    third-party/folly/folly/ScopeGuard.cpp\n    third-party/folly/folly/synchronization/AtomicNotification.cpp\n    third-party/folly/folly/synchronization/DistributedMutex.cpp\n    third-party/folly/folly/synchronization/ParkingLot.cpp)\n  include_directories(${PROJECT_SOURCE_DIR}/third-party/folly)\n  exec_program(python3 ${PROJECT_SOURCE_DIR}/third-party/folly ARGS\n  build/fbcode_builder/getdeps.py show-source-dir boost OUTPUT_VARIABLE\n  BOOST_SOURCE_PATH)\n  exec_program(ls ARGS -d ${BOOST_SOURCE_PATH}/boost* OUTPUT_VARIABLE\n  BOOST_INCLUDE_DIR)\n  include_directories(${BOOST_INCLUDE_DIR})\n  add_definitions(-DUSE_FOLLY -DFOLLY_NO_CONFIG)\n  list(APPEND THIRDPARTY_LIBS glog)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting ReadOptions max_skippable_internal_keys in C++\nDESCRIPTION: Added ReadOptions::max_skippable_internal_keys to set a threshold for failing a request as incomplete when too many keys are skipped using iterators.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_40\n\nLANGUAGE: C++\nCODE:\n```\nReadOptions options;\noptions.max_skippable_internal_keys = 1000;\n```\n\n----------------------------------------\n\nTITLE: Setting RocksDB Library Type in CMake\nDESCRIPTION: This snippet determines whether to use the shared or static library based on build configuration and platform.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_35\n\nLANGUAGE: CMake\nCODE:\n```\nif(ROCKSDB_BUILD_SHARED AND NOT WIN32)\n  set(ROCKSDB_LIB ${ROCKSDB_SHARED_LIB})\nelse()\n  set(ROCKSDB_LIB ${ROCKSDB_STATIC_LIB})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Detecting Operating System and Setting Platform-Specific Definitions\nDESCRIPTION: Identifies the operating system and sets appropriate preprocessor definitions for platform-specific code. Handles various Unix variants, Windows, Android, and others.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME MATCHES \"Cygwin\")\n  add_definitions(-fno-builtin-memcmp -DCYGWIN)\nelseif(CMAKE_SYSTEM_NAME MATCHES \"Darwin\")\n  add_definitions(-DOS_MACOSX)\nelseif(CMAKE_SYSTEM_NAME MATCHES \"iOS\")\n  add_definitions(-DOS_MACOSX -DIOS_CROSS_COMPILE)\nelseif(CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n  add_definitions(-DOS_LINUX)\nelseif(CMAKE_SYSTEM_NAME MATCHES \"SunOS\")\n  add_definitions(-DOS_SOLARIS)\nelseif(CMAKE_SYSTEM_NAME MATCHES \"kFreeBSD\")\n  add_definitions(-DOS_GNU_KFREEBSD)\nelseif(CMAKE_SYSTEM_NAME MATCHES \"FreeBSD\")\n  add_definitions(-DOS_FREEBSD)\nelseif(CMAKE_SYSTEM_NAME MATCHES \"NetBSD\")\n  add_definitions(-DOS_NETBSD)\nelseif(CMAKE_SYSTEM_NAME MATCHES \"OpenBSD\")\n  add_definitions(-DOS_OPENBSD)\nelseif(CMAKE_SYSTEM_NAME MATCHES \"DragonFly\")\n  add_definitions(-DOS_DRAGONFLYBSD)\nelseif(CMAKE_SYSTEM_NAME MATCHES \"Android\")\n  add_definitions(-DOS_ANDROID)\nelseif(CMAKE_SYSTEM_NAME MATCHES \"Windows\")\n  add_definitions(-DWIN32 -DOS_WIN -D_MBCS -DWIN64 -DNOMINMAX)\n  if(MINGW)\n    add_definitions(-D_WIN32_WINNT=_WIN32_WINNT_VISTA)\n  endif()\nendif()\n\nif(NOT WIN32)\n  add_definitions(-DROCKSDB_PLATFORM_POSIX -DROCKSDB_LIB_IO_POSIX)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting BlockBasedTableOptions Index Type\nDESCRIPTION: Configuration for new index type BlockBasedTableOptions::IndexType::kBinarySearchWithFirstKey to reduce read amplification.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_20\n\nLANGUAGE: C++\nCODE:\n```\nBlockBasedTableOptions table_options;\ntable_options.index_type = BlockBasedTableOptions::IndexType::kBinarySearchWithFirstKey;\n```\n\n----------------------------------------\n\nTITLE: Configuring RocksDB Benchmark Tools in CMake\nDESCRIPTION: Sets up various benchmark tools for RocksDB, including db_bench, cache_bench, and others. Each tool is configured as an executable and linked with the necessary libraries.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_52\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_BENCHMARK_TOOLS)\n  add_executable(db_bench${ARTIFACT_SUFFIX}\n    tools/simulated_hybrid_file_system.cc\n    tools/db_bench.cc\n    tools/tool_hooks.cc\n    tools/db_bench_tool.cc)\n  target_link_libraries(db_bench${ARTIFACT_SUFFIX}\n    ${ROCKSDB_LIB} ${THIRDPARTY_LIBS})\n\n  add_executable(cache_bench${ARTIFACT_SUFFIX}\n    cache/cache_bench.cc\n    cache/cache_bench_tool.cc)\n  target_link_libraries(cache_bench${ARTIFACT_SUFFIX}\n    ${ROCKSDB_LIB} ${GFLAGS_LIB} ${FOLLY_LIBS})\n\n  add_executable(memtablerep_bench${ARTIFACT_SUFFIX}\n    memtable/memtablerep_bench.cc)\n  target_link_libraries(memtablerep_bench${ARTIFACT_SUFFIX}\n    ${ROCKSDB_LIB} ${GFLAGS_LIB} ${FOLLY_LIBS})\n\n  add_executable(range_del_aggregator_bench${ARTIFACT_SUFFIX}\n    db/range_del_aggregator_bench.cc)\n  target_link_libraries(range_del_aggregator_bench${ARTIFACT_SUFFIX}\n    ${ROCKSDB_LIB} ${GFLAGS_LIB} ${FOLLY_LIBS})\n\n  add_executable(table_reader_bench${ARTIFACT_SUFFIX}\n    table/table_reader_bench.cc)\n  target_link_libraries(table_reader_bench${ARTIFACT_SUFFIX}\n    ${ROCKSDB_LIB} testharness ${GFLAGS_LIB} ${FOLLY_LIBS})\n\n  add_executable(filter_bench${ARTIFACT_SUFFIX}\n    util/filter_bench.cc)\n  target_link_libraries(filter_bench${ARTIFACT_SUFFIX}\n    ${ROCKSDB_LIB} ${GFLAGS_LIB} ${FOLLY_LIBS})\n\n  add_executable(hash_table_bench${ARTIFACT_SUFFIX}\n    utilities/persistent_cache/hash_table_bench.cc)\n  target_link_libraries(hash_table_bench${ARTIFACT_SUFFIX}\n    ${ROCKSDB_LIB} ${GFLAGS_LIB} ${FOLLY_LIBS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring RocksDB Package Configuration Files\nDESCRIPTION: Generates package configuration files for RocksDB including version information and compatibility settings. Creates RocksDBConfig.cmake from a template and a version file for package management.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_40\n\nLANGUAGE: cmake\nCODE:\n```\n  configure_package_config_file(\n    ${CMAKE_CURRENT_LIST_DIR}/cmake/RocksDBConfig.cmake.in RocksDBConfig.cmake\n    INSTALL_DESTINATION ${package_config_destination}\n  )\n\n  write_basic_package_version_file(\n    RocksDBConfigVersion.cmake\n    VERSION ${rocksdb_VERSION}\n    COMPATIBILITY SameMajorVersion\n  )\n\n  configure_file(\n    ${PROJECT_NAME}.pc.in\n    ${PROJECT_NAME}.pc\n    @ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Compiling RocksDB for iOS\nDESCRIPTION: Command to compile the RocksDB static library for iOS. Requires defining the IOS_CROSS_COMPILE macro when using the library in a project.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/INSTALL.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nTARGET_OS=IOS make static_lib\n```\n\n----------------------------------------\n\nTITLE: Setting CompressionOptions for bottommost_compression in C++\nDESCRIPTION: Adds a compatible CompressionOptions for bottommost_compression via bottommost_compression_opts.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_28\n\nLANGUAGE: C++\nCODE:\n```\nCompressionOptions bottommost_compression_opts;\nbottommost_compression_opts.enabled = true;\noptions.bottommost_compression_opts = bottommost_compression_opts;\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended Test Suite for RocksDB\nDESCRIPTION: Adds an extensive list of test files when the WITH_ALL_TESTS option is enabled, covering various components of RocksDB like cache, blob storage, compaction, and utilities.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_50\n\nLANGUAGE: cmake\nCODE:\n```\n  if(WITH_ALL_TESTS)\n    list(APPEND TESTS\n        cache/cache_reservation_manager_test.cc\n        cache/cache_test.cc\n        cache/compressed_secondary_cache_test.cc\n        cache/lru_cache_test.cc\n        cache/tiered_secondary_cache_test.cc\n        db/blob/blob_counting_iterator_test.cc\n        db/blob/blob_file_addition_test.cc\n        db/blob/blob_file_builder_test.cc\n        db/blob/blob_file_cache_test.cc\n        db/blob/blob_file_garbage_test.cc\n        db/blob/blob_file_reader_test.cc\n        db/blob/blob_garbage_meter_test.cc\n        db/blob/blob_source_test.cc\n        db/blob/db_blob_basic_test.cc\n        db/blob/db_blob_compaction_test.cc\n        db/blob/db_blob_corruption_test.cc\n        db/blob/db_blob_index_test.cc\n        db/column_family_test.cc\n        db/compact_files_test.cc\n        db/compaction/clipping_iterator_test.cc\n        db/compaction/compaction_job_stats_test.cc\n        db/compaction/compaction_job_test.cc\n        db/compaction/compaction_iterator_test.cc\n        db/compaction/compaction_picker_test.cc\n        db/compaction/compaction_service_test.cc\n        db/compaction/tiered_compaction_test.cc\n        db/comparator_db_test.cc\n        db/corruption_test.cc\n        db/cuckoo_table_db_test.cc\n        db/db_readonly_with_timestamp_test.cc\n        db/db_with_timestamp_basic_test.cc\n        db/db_block_cache_test.cc\n        db/db_bloom_filter_test.cc\n        db/db_compaction_filter_test.cc\n        db/db_compaction_test.cc\n        db/db_clip_test.cc\n        db/db_dynamic_level_test.cc\n        db/db_encryption_test.cc\n        db/db_flush_test.cc\n        db/db_inplace_update_test.cc\n        db/db_io_failure_test.cc\n        db/db_iter_test.cc\n        db/db_iter_stress_test.cc\n        db/db_iterator_test.cc\n        db/db_kv_checksum_test.cc\n        db/db_log_iter_test.cc\n        db/db_memtable_test.cc\n        db/db_merge_operator_test.cc\n        db/db_merge_operand_test.cc\n        db/db_options_test.cc\n        db/db_properties_test.cc\n        db/db_range_del_test.cc\n        db/db_rate_limiter_test.cc\n        db/db_secondary_test.cc\n        db/db_sst_test.cc\n        db/db_statistics_test.cc\n        db/db_table_properties_test.cc\n        db/db_tailing_iter_test.cc\n        db/db_test.cc\n        db/db_test2.cc\n        db/db_logical_block_size_cache_test.cc\n        db/db_universal_compaction_test.cc\n        db/db_wal_test.cc\n        db/db_with_timestamp_compaction_test.cc\n        db/db_write_buffer_manager_test.cc\n        db/db_write_test.cc\n        db/dbformat_test.cc\n        db/deletefile_test.cc\n        db/error_handler_fs_test.cc\n        db/obsolete_files_test.cc\n        db/external_sst_file_basic_test.cc\n        db/external_sst_file_test.cc\n        db/fault_injection_test.cc\n        db/file_indexer_test.cc\n        db/filename_test.cc\n        db/flush_job_test.cc\n        db/db_follower_test.cc\n        db/import_column_family_test.cc\n        db/listener_test.cc\n        db/log_test.cc\n        db/manual_compaction_test.cc\n        db/memtable_list_test.cc\n        db/merge_helper_test.cc\n        db/merge_test.cc\n        db/multi_cf_iterator_test.cc\n        db/options_file_test.cc\n        db/perf_context_test.cc\n        db/periodic_task_scheduler_test.cc\n        db/plain_table_db_test.cc\n        db/seqno_time_test.cc\n        db/prefix_test.cc\n        db/range_del_aggregator_test.cc\n        db/range_tombstone_fragmenter_test.cc\n        db/repair_test.cc\n        db/table_properties_collector_test.cc\n        db/version_builder_test.cc\n        db/version_edit_test.cc\n        db/version_set_test.cc\n        db/wal_manager_test.cc\n        db/wal_edit_test.cc\n        db/wide/db_wide_basic_test.cc\n        db/wide/wide_column_serialization_test.cc\n        db/wide/wide_columns_helper_test.cc\n        db/write_batch_test.cc\n        db/write_callback_test.cc\n        db/write_controller_test.cc\n        env/env_test.cc\n        env/io_posix_test.cc\n        env/mock_env_test.cc\n        file/delete_scheduler_test.cc\n        file/prefetch_test.cc\n        file/random_access_file_reader_test.cc\n        logging/auto_roll_logger_test.cc\n        logging/env_logger_test.cc\n        logging/event_logger_test.cc\n        memory/arena_test.cc\n        memory/memory_allocator_test.cc\n        memtable/inlineskiplist_test.cc\n        memtable/skiplist_test.cc\n        memtable/write_buffer_manager_test.cc\n        monitoring/histogram_test.cc\n        monitoring/iostats_context_test.cc\n        monitoring/statistics_test.cc\n        monitoring/stats_history_test.cc\n        options/configurable_test.cc\n        options/customizable_test.cc\n        options/options_settable_test.cc\n        options/options_test.cc\n        table/block_based/block_based_table_reader_test.cc\n        table/block_based/block_test.cc\n        table/block_based/data_block_hash_index_test.cc\n        table/block_based/full_filter_block_test.cc\n        table/block_based/partitioned_filter_block_test.cc\n        table/cleanable_test.cc\n        table/cuckoo/cuckoo_table_builder_test.cc\n        table/cuckoo/cuckoo_table_reader_test.cc\n        table/merger_test.cc\n        table/sst_file_reader_test.cc\n        table/table_test.cc\n        table/block_fetcher_test.cc\n        test_util/testutil_test.cc\n        trace_replay/block_cache_tracer_test.cc\n        trace_replay/io_tracer_test.cc\n        tools/block_cache_analyzer/block_cache_trace_analyzer_test.cc\n        tools/io_tracer_parser_test.cc\n        tools/ldb_cmd_test.cc\n        tools/reduce_levels_test.cc\n        tools/sst_dump_test.cc\n        tools/trace_analyzer_test.cc\n        util/autovector_test.cc\n        util/bloom_test.cc\n        util/coding_test.cc\n        util/crc32c_test.cc\n        util/defer_test.cc\n        util/dynamic_bloom_test.cc\n        util/file_reader_writer_test.cc\n        util/filelock_test.cc\n        util/hash_test.cc\n        util/heap_test.cc\n        util/random_test.cc\n        util/rate_limiter_test.cc\n        util/repeatable_thread_test.cc\n        util/ribbon_test.cc\n        util/slice_test.cc\n        util/slice_transform_test.cc\n        util/string_util_test.cc\n        util/timer_queue_test.cc\n        util/timer_test.cc\n        util/thread_list_test.cc\n        util/thread_local_test.cc\n        util/udt_util_test.cc\n        util/work_queue_test.cc\n        utilities/agg_merge/agg_merge_test.cc\n        utilities/backup/backup_engine_test.cc\n        utilities/blob_db/blob_db_test.cc\n        utilities/cassandra/cassandra_functional_test.cc\n        utilities/cassandra/cassandra_format_test.cc\n        utilities/cassandra/cassandra_row_merge_test.cc\n        utilities/cassandra/cassandra_serialize_test.cc\n        utilities/checkpoint/checkpoint_test.cc\n        utilities/env_timed_test.cc\n        utilities/memory/memory_test.cc\n        utilities/merge_operators/string_append/stringappend_test.cc\n        utilities/object_registry_test.cc\n        utilities/option_change_migration/option_change_migration_test.cc\n        utilities/options/options_util_test.cc\n        utilities/persistent_cache/hash_table_test.cc\n\n```\n\n----------------------------------------\n\nTITLE: Setting GCC Compiler Flags for RocksDB\nDESCRIPTION: Configures GCC-specific compiler flags, disabling built-in memcmp function to ensure consistent behavior across platforms.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCXX)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-builtin-memcmp\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting ColumnFamilyOptions::ttl dynamically in C++\nDESCRIPTION: Supports dynamically changing the TTL (time to live) option for a column family via SetOptions().\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_29\n\nLANGUAGE: C++\nCODE:\n```\ndb->SetOptions(handle, {{\"ttl\", \"3600\"}}); // Set TTL to 1 hour\n```\n\n----------------------------------------\n\nTITLE: Processing RocksDB Plugin Makefiles in CMake\nDESCRIPTION: Parses plugin-specific makefiles to extract source files, function names, and libraries required by each plugin, then adds them to the build configuration.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\nset(ROCKSDB_PLUGIN_EXTERNS \"\")\nset(ROCKSDB_PLUGIN_BUILTINS \"\")\nmessage(STATUS \"ROCKSDB PLUGINS TO BUILD ${ROCKSDB_PLUGINS}\")\nforeach(PLUGIN IN LISTS PLUGINS)\n  set(PLUGIN_ROOT \"${CMAKE_CURRENT_SOURCE_DIR}/plugin/${PLUGIN}/\")\n  message(STATUS \"PLUGIN ${PLUGIN} including rocksb plugin ${PLUGIN_ROOT}\")\n  set(PLUGINMKFILE \"${PLUGIN_ROOT}${PLUGIN}.mk\")\n  if (NOT EXISTS ${PLUGINMKFILE})\n    message(FATAL_ERROR \"PLUGIN ${PLUGIN} Missing plugin makefile: ${PLUGINMKFILE}\")\n  endif()\n  file(READ ${PLUGINMKFILE} PLUGINMK)\n\n  string(REGEX MATCH \"SOURCES = ([^\\n]*)\" FOO ${PLUGINMK})\n  set(MK_SOURCES ${CMAKE_MATCH_1})\n  separate_arguments(MK_SOURCES)\n  foreach(MK_FILE IN LISTS MK_SOURCES)\n    list(APPEND SOURCES \"${PLUGIN_ROOT}${MK_FILE}\")\n    message(STATUS \"PLUGIN ${PLUGIN} Appending ${PLUGIN_ROOT}${MK_FILE} to SOURCES\")\n  endforeach()\n\n  string(REGEX MATCH \"_FUNC = ([^\\n]*)\" FOO ${PLUGINMK})\n  if (NOT ${CMAKE_MATCH_1} STREQUAL \"\")\n    string(APPEND ROCKSDB_PLUGIN_BUILTINS \"{\\\"${PLUGIN}\\\", \" ${CMAKE_MATCH_1} \"},\")\n    string(APPEND ROCKSDB_PLUGIN_EXTERNS \"int \" ${CMAKE_MATCH_1} \"(ROCKSDB_NAMESPACE::ObjectLibrary&, const std::string&); \")\n  endif()\n\n  string(REGEX MATCH \"_LIBS = ([^\\n]*)\" FOO ${PLUGINMK})\n  separate_arguments(CMAKE_MATCH_1)\n  foreach(MK_LIB IN LISTS CMAKE_MATCH_1)\n    list(APPEND THIRDPARTY_LIBS \"${MK_LIB}\")\n  endforeach()\n  message(STATUS \"PLUGIN ${PLUGIN} THIRDPARTY_LIBS=${THIRDPARTY_LIBS}\")\n\n  #TODO: We need to set any compile/link-time flags and add any link libraries\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining RocksDB Static Library Target in CMake\nDESCRIPTION: Creates the static library target for RocksDB, including all source files and the generated build_version.cc file, and sets up the public include directories.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_VERSION_CC ${CMAKE_BINARY_DIR}/build_version.cc)\nconfigure_file(util/build_version.cc.in ${BUILD_VERSION_CC} @ONLY)\n\nadd_library(${ROCKSDB_STATIC_LIB} STATIC ${SOURCES} ${BUILD_VERSION_CC})\ntarget_include_directories(${ROCKSDB_STATIC_LIB} PUBLIC\n  $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>)\n```\n\n----------------------------------------\n\nTITLE: Parsing Full Internal Key in C++\nDESCRIPTION: New helper function to parse the full internal key representation, which includes the user key, sequence number, and key type.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_31\n\nLANGUAGE: C++\nCODE:\n```\nParseFullKey(const Slice& internal_key, FullKey* result);\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Installation Options in CMake\nDESCRIPTION: Sets up a Windows-specific option to enable or disable the installation target, defaulting to OFF for Windows platforms.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_38\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  option(ROCKSDB_INSTALL_ON_WINDOWS \"Enable install target on Windows\" OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Test Files for RocksDB\nDESCRIPTION: Sets up a list of basic test files that are always included when tests are enabled.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_49\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TESTS)\n  set(TESTS\n        db/db_basic_test.cc\n        env/env_basic_test.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Building RocksDB Java API JAR with native library\nDESCRIPTION: Creates the final RocksDB Java API JAR by copying the base JAR, adding the JNI native library, and including the HISTORY-JAVA.md file. This creates a complete and ready-to-use JAR with embedded native binaries.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/CMakeLists.txt#2025-04-11_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nget_target_property(ROCKS_JAR_FILE rocksdbjni_classes JAR_FILE)\n\nadd_custom_target(rocksdbjava ALL\n        COMMAND ${CMAKE_COMMAND} -E copy ${ROCKS_JAR_FILE} ${CMAKE_CURRENT_BINARY_DIR}/${ROCKSDB_JAR}\n        COMMAND ${Java_JAR_EXECUTABLE} -uf ${CMAKE_CURRENT_BINARY_DIR}/${ROCKSDB_JAR} -C $<TARGET_FILE_DIR:${ROCKSDBJNI_STATIC_LIB}> $<TARGET_FILE_NAME:${ROCKSDBJNI_STATIC_LIB}>\n        COMMAND ${Java_JAR_EXECUTABLE} -uf ${CMAKE_CURRENT_BINARY_DIR}/${ROCKSDB_JAR} -C ${CMAKE_CURRENT_SOURCE_DIR} HISTORY-JAVA.md\n        DEPENDS ${ROCKSDBJNI_STATIC_LIB} rocksdbjni_classes\n        BYPRODUCTS ${ROCKSDB_JAR}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring CPU-specific Optimizations for Different Architectures\nDESCRIPTION: Sets up architecture-specific compiler flags for optimizing RocksDB on different CPU architectures including PowerPC, ARM64, S390X, and LoongArch64. These flags enable architecture-specific instructions and optimizations.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckCCompilerFlag)\nif(CMAKE_SYSTEM_PROCESSOR MATCHES \"^(powerpc|ppc)64\")\n  CHECK_C_COMPILER_FLAG(\"-mcpu=power9\" HAS_POWER9)\n  if(HAS_POWER9)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -mcpu=power9 -mtune=power9\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mcpu=power9 -mtune=power9\")\n  else()\n    CHECK_C_COMPILER_FLAG(\"-mcpu=power8\" HAS_POWER8)\n    if(HAS_POWER8)\n      set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -mcpu=power8 -mtune=power8\")\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mcpu=power8 -mtune=power8\")\n    endif(HAS_POWER8)\n  endif(HAS_POWER9)\n  CHECK_C_COMPILER_FLAG(\"-maltivec\" HAS_ALTIVEC)\n  if(HAS_ALTIVEC)\n    message(STATUS \" HAS_ALTIVEC yes\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -maltivec\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -maltivec\")\n  endif(HAS_ALTIVEC)\nendif(CMAKE_SYSTEM_PROCESSOR MATCHES \"^(powerpc|ppc)64\")\n\nif(CMAKE_SYSTEM_PROCESSOR MATCHES \"arm64|aarch64|AARCH64\")\n        CHECK_C_COMPILER_FLAG(\"-march=armv8-a+crc+crypto\" HAS_ARMV8_CRC)\n  if(HAS_ARMV8_CRC)\n    message(STATUS \" HAS_ARMV8_CRC yes\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -march=armv8-a+crc+crypto -Wno-unused-function\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -march=armv8-a+crc+crypto -Wno-unused-function\")\n  endif(HAS_ARMV8_CRC)\nendif(CMAKE_SYSTEM_PROCESSOR MATCHES \"arm64|aarch64|AARCH64\")\n\nif(CMAKE_SYSTEM_PROCESSOR MATCHES \"s390x\")\n  CHECK_C_COMPILER_FLAG(\"-march=native\" HAS_S390X_MARCH_NATIVE)\n  if(HAS_S390X_MARCH_NATIVE)\n    message(STATUS \" HAS_S390X_MARCH_NATIVE yes\")\n  endif(HAS_S390X_MARCH_NATIVE)\nendif(CMAKE_SYSTEM_PROCESSOR MATCHES \"s390x\")\n\nif(CMAKE_SYSTEM_PROCESSOR MATCHES \"loongarch64\")\n  CHECK_C_COMPILER_FLAG(\"-march=loongarch64\" HAS_LOONGARCH64)\n  if(HAS_LOONGARCH64)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -march=loongarch64 -mtune=loongarch64\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -march=loongarch64 -mtune=loongarch64\")\n  endif(HAS_LOONGARCH64)\nendif(CMAKE_SYSTEM_PROCESSOR MATCHES \"loongarch64\")\n```\n\n----------------------------------------\n\nTITLE: Checking for Adaptive Mutex Support\nDESCRIPTION: Tests if the system supports adaptive mutex locks (PTHREAD_MUTEX_ADAPTIVE_NP) and defines ROCKSDB_PTHREAD_ADAPTIVE_MUTEX if available. This can improve performance in high-contention scenarios.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nCHECK_CXX_SOURCE_COMPILES(\"\n#include <pthread.h>\nint main() {\n  (void) PTHREAD_MUTEX_ADAPTIVE_NP;\n}\n\" HAVE_PTHREAD_MUTEX_ADAPTIVE_NP)\nif(HAVE_PTHREAD_MUTEX_ADAPTIVE_NP)\n  add_definitions(-DROCKSDB_PTHREAD_ADAPTIVE_MUTEX)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Flashcache-Aware Environment in C++\nDESCRIPTION: Experimental API for handling flashcache devices by blacklisting background threads from caching their reads.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_52\n\nLANGUAGE: C++\nCODE:\n```\nNewFlashcacheAwareEnv\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional RocksDB Components in CMake\nDESCRIPTION: Sets up optional components of RocksDB build, including core tools, stress tools, examples, and microbenchmarks. Each component is conditionally included based on corresponding CMake options.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_54\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CORE_TOOLS OR WITH_TOOLS)\n  add_subdirectory(tools)\n  add_custom_target(core_tools\n    DEPENDS ${core_tool_deps})\nendif()\n\nif(WITH_TOOLS)\n  add_subdirectory(db_stress_tool)\n  add_custom_target(tools\n    DEPENDS ${tool_deps})\nendif()\n\noption(WITH_EXAMPLES \"build with examples\" OFF)\nif(WITH_EXAMPLES)\n  add_subdirectory(examples)\nendif()\n\noption(WITH_BENCHMARK \"build benchmark tests\" OFF)\nif(WITH_BENCHMARK)\n  add_subdirectory(${PROJECT_SOURCE_DIR}/microbench/)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Extracting Git Repository Information in CMake\nDESCRIPTION: Extracts information from the Git repository such as commit hash, modification status, date, and tags when available, for use in version information.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\nstring(TIMESTAMP TS \"%Y-%m-%d %H:%M:%S\" UTC)\nset(BUILD_DATE \"${TS}\" CACHE STRING \"the time we first built rocksdb\")\n\nfind_package(Git)\n\nif(GIT_FOUND AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/.git\")\n  execute_process(WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\" OUTPUT_VARIABLE GIT_SHA COMMAND \"${GIT_EXECUTABLE}\" rev-parse HEAD )\n  execute_process(WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\" RESULT_VARIABLE GIT_MOD COMMAND \"${GIT_EXECUTABLE}\" diff-index HEAD --quiet)\n  execute_process(WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\" OUTPUT_VARIABLE GIT_DATE COMMAND \"${GIT_EXECUTABLE}\" log -1 --date=format:\"%Y-%m-%d %T\" --format=\"%ad\")\n  execute_process(WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\" OUTPUT_VARIABLE GIT_TAG RESULT_VARIABLE rv COMMAND \"${GIT_EXECUTABLE}\" symbolic-ref -q --short HEAD OUTPUT_STRIP_TRAILING_WHITESPACE)\n  if (rv AND NOT rv EQUAL 0)\n    execute_process(WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\" OUTPUT_VARIABLE GIT_TAG COMMAND \"${GIT_EXECUTABLE}\" describe --tags --exact-match OUTPUT_STRIP_TRAILING_WHITESPACE)\n  endif()\nelse()\n  set(GIT_SHA 0)\n  set(GIT_MOD 1)\nendif()\nstring(REGEX REPLACE \"[^0-9a-fA-F]+\" \"\" GIT_SHA \"${GIT_SHA}\")\nstring(REGEX REPLACE \"[^0-9: /-]+\" \"\" GIT_DATE \"${GIT_DATE}\")\n```\n\n----------------------------------------\n\nTITLE: Processing RocksDB Plugins in CMake\nDESCRIPTION: Iterates through the ROCKSDB_PLUGINS list, adding subdirectories for each plugin and incorporating their sources, tests, include paths, libraries, and link flags into the build configuration.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nmessage(STATUS \"ROCKSDB_PLUGINS: ${ROCKSDB_PLUGINS}\")\nif ( ROCKSDB_PLUGINS )\n  string(REPLACE \" \" \";\" PLUGINS ${ROCKSDB_PLUGINS})\n  foreach (plugin ${PLUGINS})\n    add_subdirectory(\"plugin/${plugin}\")\n    foreach (src ${${plugin}_SOURCES})\n      list(APPEND SOURCES plugin/${plugin}/${src})\n      set_source_files_properties(\n        plugin/${plugin}/${src}\n        PROPERTIES COMPILE_FLAGS \"${${plugin}_COMPILE_FLAGS}\")\n    endforeach()\n    foreach (test ${${plugin}_TESTS})\n      list(APPEND PLUGIN_TESTS plugin/${plugin}/${test})\n      set_source_files_properties(\n        plugin/${plugin}/${test}\n        PROPERTIES COMPILE_FLAGS \"${${plugin}_COMPILE_FLAGS}\")\n    endforeach()\n    foreach (path ${${plugin}_INCLUDE_PATHS})\n      include_directories(${path})\n    endforeach()\n    foreach (lib ${${plugin}_LIBS})\n      list(APPEND THIRDPARTY_LIBS ${lib})\n    endforeach()\n    foreach (link_path ${${plugin}_LINK_PATHS})\n      link_directories(AFTER ${link_path})\n    endforeach()\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} ${${plugin}_CMAKE_SHARED_LINKER_FLAGS}\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${${plugin}_CMAKE_EXE_LINKER_FLAGS}\")\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring RocksDB Trace Tools in CMake\nDESCRIPTION: Sets up trace analysis tools for RocksDB, including block_cache_trace_analyzer and trace_analyzer. These tools are built conditionally based on the WITH_TRACE_TOOLS option.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_53\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_TRACE_TOOLS \"build with trace tools\" ON)\nif(WITH_TRACE_TOOLS)\n  add_executable(block_cache_trace_analyzer${ARTIFACT_SUFFIX}\n    tools/block_cache_analyzer/block_cache_trace_analyzer_tool.cc)\n  target_link_libraries(block_cache_trace_analyzer${ARTIFACT_SUFFIX}\n    ${ROCKSDB_LIB} ${GFLAGS_LIB} ${FOLLY_LIBS})\n\n  add_executable(trace_analyzer${ARTIFACT_SUFFIX}\n    tools/trace_analyzer.cc)\n  target_link_libraries(trace_analyzer${ARTIFACT_SUFFIX}\n    ${ROCKSDB_LIB} ${GFLAGS_LIB} ${FOLLY_LIBS})\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Source Files in CMake\nDESCRIPTION: Conditionally adds platform-specific source files to the build based on the target architecture or platform, such as PowerPC, ARM64, or Windows vs. POSIX systems.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_SYSTEM_PROCESSOR MATCHES \"^(powerpc|ppc)64\")\n  list(APPEND SOURCES\n    util/crc32c_ppc.c\n    util/crc32c_ppc_asm.S)\nendif(CMAKE_SYSTEM_PROCESSOR MATCHES \"^(powerpc|ppc)64\")\n\nif(HAS_ARMV8_CRC)\n  list(APPEND SOURCES\n    util/crc32c_arm64.cc)\nendif(HAS_ARMV8_CRC)\n\nif(WIN32)\n  list(APPEND SOURCES\n    port/win/io_win.cc\n    port/win/env_win.cc\n    port/win/env_default.cc\n    port/win/port_win.cc\n    port/win/win_logger.cc\n    port/win/win_thread.cc)\nif(WITH_XPRESS)\n  list(APPEND SOURCES\n    port/win/xpress_win.cc)\nendif()\n\nif(WITH_JEMALLOC)\n  list(APPEND SOURCES\n    port/win/win_jemalloc.cc)\nendif()\n\nelse()\n  list(APPEND SOURCES\n    port/port_posix.cc\n    env/env_posix.cc\n    env/fs_posix.cc\n    env/io_posix.cc)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring RocksDB Dependencies and JNI in CMake\nDESCRIPTION: This snippet sets up include directories for dependencies and configures JNI build if enabled.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_37\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_TESTS OR WITH_BENCHMARK_TOOLS OR WITH_TOOLS OR WITH_JNI OR JNI)\n  include_directories(SYSTEM ${PROJECT_SOURCE_DIR}/third-party/gtest-1.8.1/fused-src)\nendif()\nif(WITH_JNI OR JNI)\n  message(STATUS \"JNI library is enabled\")\n  add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/java)\nelse()\n  message(STATUS \"JNI library is disabled\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing RocksDB pkg-config File\nDESCRIPTION: Installs the pkg-config file for RocksDB to enable non-CMake projects to find and use RocksDB libraries and headers.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_46\n\nLANGUAGE: cmake\nCODE:\n```\n  install(\n    FILES\n    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc\n    COMPONENT devel\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Atomic Support Check in C++\nDESCRIPTION: Checks if built-in atomic operations are supported by attempting to compile a test program using std::atomic. If not available, links against the atomic library.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n#include <atomic>\nstd::atomic<uint64_t> x(0);\nint main() {\n  uint64_t i = x.load(std::memory_order_relaxed);\n  bool b = x.is_lock_free();\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Options for RocksDB\nDESCRIPTION: Defines an option to build all tests rather than a subset, with the default being to build all tests.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_47\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_ALL_TESTS \"Build all test, rather than a small subset\" ON)\n```\n\n----------------------------------------\n\nTITLE: Configuring System Libraries Based on Platform in CMake\nDESCRIPTION: Sets up system libraries differently based on whether the build is for Windows or other platforms, adding the appropriate platform-specific libraries.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  set(SYSTEM_LIBS ${SYSTEM_LIBS} shlwapi.lib rpcrt4.lib)\nelse()\n  set(SYSTEM_LIBS ${CMAKE_THREAD_LIBS_INIT})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Google Test Integration for RocksDB\nDESCRIPTION: Configures test infrastructure by adding the Google Test subdirectory and creating a testharness library when tests or benchmark tools are enabled.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_48\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TESTS OR WITH_BENCHMARK_TOOLS)\n  add_subdirectory(third-party/gtest-1.8.1/fused-src/gtest)\n  add_library(testharness STATIC\n  test_util/mock_time_env.cc\n  test_util/secondary_cache_test_util.cc\n  test_util/testharness.cc)\n  target_link_libraries(testharness gtest)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring RocksDB Static Library in CMake\nDESCRIPTION: This snippet sets up the target link libraries for the RocksDB static library. It links against third-party and system libraries.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_33\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${ROCKSDB_STATIC_LIB} PRIVATE\n  ${THIRDPARTY_LIBS} ${SYSTEM_LIBS})\n```\n\n----------------------------------------\n\nTITLE: Downloading Java Test Dependencies\nDESCRIPTION: Downloads required Java test dependencies from a specified URL if they don't exist locally.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/CMakeLists.txt#2025-04-11_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT EXISTS ${JAVA_JUNIT_JAR})\n  message(\"Downloading ${JAVA_JUNIT_JAR}\")\n  file(DOWNLOAD ${DEPS_URL}/junit-${JAVA_JUNIT_VERSION}.jar ${JAVA_TMP_JAR} STATUS downloadStatus)\n  list(GET downloadStatus 0 error_code)\n  list(GET downloadStatus 1 error_message)\n  if(NOT error_code EQUAL 0)\n    message(FATAL_ERROR \"Failed downloading ${JAVA_JUNIT_JAR}: ${error_message}\")\n  endif()\n  file(RENAME ${JAVA_TMP_JAR} ${JAVA_JUNIT_JAR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking for Memory Allocation Functions and System Features\nDESCRIPTION: Tests for various system features including malloc_usable_size, sched_getcpu, getauxval, and F_FULLFSYNC. Sets appropriate preprocessor definitions based on the availability of these features.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckCXXSymbolExists)\nif(CMAKE_SYSTEM_NAME MATCHES \"^FreeBSD\")\n  check_cxx_symbol_exists(malloc_usable_size malloc_np.h HAVE_MALLOC_USABLE_SIZE)\nelse()\n  check_cxx_symbol_exists(malloc_usable_size malloc.h HAVE_MALLOC_USABLE_SIZE)\nendif()\nif(HAVE_MALLOC_USABLE_SIZE)\n  add_definitions(-DROCKSDB_MALLOC_USABLE_SIZE)\nendif()\n\ncheck_cxx_symbol_exists(sched_getcpu sched.h HAVE_SCHED_GETCPU)\nif(HAVE_SCHED_GETCPU)\n  add_definitions(-DROCKSDB_SCHED_GETCPU_PRESENT)\nendif()\n\ncheck_cxx_symbol_exists(getauxval \"sys/auxv.h\" HAVE_AUXV_GETAUXVAL)\nif(HAVE_AUXV_GETAUXVAL)\n  add_definitions(-DROCKSDB_AUXV_GETAUXVAL_PRESENT)\nendif()\n\ncheck_cxx_symbol_exists(F_FULLFSYNC \"fcntl.h\" HAVE_FULLFSYNC)\nif(HAVE_FULLFSYNC)\n  add_definitions(-DHAVE_FULLFSYNC)\nendif()\n```\n\n----------------------------------------\n\nTITLE: RTTI Configuration Block\nDESCRIPTION: Configures Runtime Type Information (RTTI) settings based on build type and platform. Handles different compiler flags for MSVC and other compilers.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(USE_RTTI AUTO CACHE STRING \"Enable RTTI in builds\")\nset_property(CACHE USE_RTTI PROPERTY STRINGS AUTO ON OFF)\nif(USE_RTTI STREQUAL \"AUTO\")\n  message(STATUS \"Enabling RTTI in Debug builds only (default)\")\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -DROCKSDB_USE_RTTI\")\n  if(MSVC)\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /GR-\")\n  else()\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -fno-rtti\")\n  endif()\nelseif(USE_RTTI)\n  message(STATUS \"Enabling RTTI in all builds\")\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -DROCKSDB_USE_RTTI\")\n  set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -DROCKSDB_USE_RTTI\")\nelse()\n  if(MSVC)\n    message(STATUS \"Disabling RTTI in Release builds. Always on in Debug.\")\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -DROCKSDB_USE_RTTI\")\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /GR-\")\n  else()\n    message(STATUS \"Disabling RTTI in all builds\")\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -fno-rtti\")\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -fno-rtti\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring RocksDB Shared Library in CMake\nDESCRIPTION: This snippet configures the RocksDB shared library build. It sets up the library, includes directories, and links against required libraries. It also handles platform-specific configurations for Windows and non-Windows systems.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_34\n\nLANGUAGE: CMake\nCODE:\n```\nif(ROCKSDB_BUILD_SHARED)\n  add_library(${ROCKSDB_SHARED_LIB} SHARED ${SOURCES} ${BUILD_VERSION_CC})\n  target_include_directories(${ROCKSDB_SHARED_LIB} PUBLIC\n    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>)\n  target_link_libraries(${ROCKSDB_SHARED_LIB} PRIVATE\n    ${THIRDPARTY_LIBS} ${SYSTEM_LIBS})\n\n  if(WIN32)\n    set_target_properties(${ROCKSDB_SHARED_LIB} PROPERTIES\n      COMPILE_DEFINITIONS \"ROCKSDB_DLL;ROCKSDB_LIBRARY_EXPORTS\")\n    if(MSVC)\n      set_target_properties(${ROCKSDB_STATIC_LIB} PROPERTIES\n        COMPILE_FLAGS \"/Fd${CMAKE_CFG_INTDIR}/${ROCKSDB_STATIC_LIB}.pdb\")\n      set_target_properties(${ROCKSDB_SHARED_LIB} PROPERTIES\n        COMPILE_FLAGS \"/Fd${CMAKE_CFG_INTDIR}/${ROCKSDB_SHARED_LIB}.pdb\")\n    endif()\n  else()\n    set_target_properties(${ROCKSDB_SHARED_LIB} PROPERTIES\n                          LINKER_LANGUAGE CXX\n                          VERSION ${rocksdb_VERSION}\n                          SOVERSION ${rocksdb_VERSION_MAJOR}\n                          OUTPUT_NAME \"rocksdb${ARTIFACT_SUFFIX}\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking for sync_file_range Support\nDESCRIPTION: Tests if the system supports the sync_file_range system call and defines ROCKSDB_RANGESYNC_PRESENT if available. This allows for more efficient file synchronization.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nCHECK_CXX_SOURCE_COMPILES(\"\n#include <fcntl.h>\nint main() {\n  int fd = open(\\\"/dev/null\\\", 0);\n  sync_file_range(fd, 0, 1024, SYNC_FILE_RANGE_WRITE);\n}\n\" HAVE_SYNC_FILE_RANGE_WRITE)\nif(HAVE_SYNC_FILE_RANGE_WRITE)\n  add_definitions(-DROCKSDB_RANGESYNC_PRESENT)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing RocksDB Headers and Plugin Files\nDESCRIPTION: Sets up the installation of RocksDB header files and plugin-specific headers into the appropriate include directories.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_41\n\nLANGUAGE: cmake\nCODE:\n```\n  install(DIRECTORY include/rocksdb COMPONENT devel DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\")\n\n  foreach (plugin ${PLUGINS})\n    foreach (header ${${plugin}_HEADERS})\n      install(FILES plugin/${plugin}/${header} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/rocksdb/plugin/${plugin})\n    endforeach()\n  endforeach()\n\n  install(DIRECTORY \"${PROJECT_SOURCE_DIR}/cmake/modules\" COMPONENT devel DESTINATION ${package_config_destination})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Platform-Specific Installation Configurations\nDESCRIPTION: Configures installation prefixes with special handling for Linux systems, defaulting to '/usr' instead of the CMAKE_INSTALL_PREFIX default.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_39\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WIN32 OR ROCKSDB_INSTALL_ON_WINDOWS)\n  if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n    if(${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n      # Change default installation prefix on Linux to /usr\n      set(CMAKE_INSTALL_PREFIX /usr CACHE PATH \"Install path prefix, prepended onto install directories.\" FORCE)\n    endif()\n  endif()\n\n  include(GNUInstallDirs)\n  include(CMakePackageConfigHelpers)\n\n  set(package_config_destination ${CMAKE_INSTALL_LIBDIR}/cmake/rocksdb)\n```\n\n----------------------------------------\n\nTITLE: Configuring MSVC Debug and Release Build Flags in CMake\nDESCRIPTION: Sets up MSVC-specific compiler flags for debug and release builds, including optimizations, runtime library configuration, and linker flags. Controls debug optimization through the OPTDBG option.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\noption(OPTDBG \"Build optimized debug build with MSVC\" OFF)\noption(WITH_RUNTIME_DEBUG \"build with debug version of runtime library\" ON)\nif(MSVC)\n  if(OPTDBG)\n    message(STATUS \"Debug optimization is enabled\")\n    set(CMAKE_CXX_FLAGS_DEBUG \"/Oxt\")\n  else()\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /Od /RTC1\")\n\n    # Minimal Build is deprecated after MSVC 2015\n    if( MSVC_VERSION GREATER 1900 )\n      set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /Gm-\")\n    else()\n      set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /Gm\")\n    endif()\n\n  endif()\n  if(WITH_RUNTIME_DEBUG)\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /${RUNTIME_LIBRARY}d\")\n  else()\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /${RUNTIME_LIBRARY}\")\n  endif()\n  set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /Oxt /Zp8 /Gm- /Gy /${RUNTIME_LIBRARY}\")\n\n  set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} /DEBUG\")\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /DEBUG\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing RocksDB CMake Config Files\nDESCRIPTION: Installs the generated RocksDB CMake configuration files to the appropriate destination directory for use by other projects.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_45\n\nLANGUAGE: cmake\nCODE:\n```\n  install(\n    FILES\n    ${CMAKE_CURRENT_BINARY_DIR}/RocksDBConfig.cmake\n    ${CMAKE_CURRENT_BINARY_DIR}/RocksDBConfigVersion.cmake\n    COMPONENT devel\n    DESTINATION ${package_config_destination}\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-party Library Options for RocksDB\nDESCRIPTION: Defines build options for various third-party libraries that RocksDB can integrate with, including JeMalloc, liburing, and compression libraries like Snappy, LZ4, ZLIB, and ZSTD. Also includes options for UTF-8 filenames on Windows.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_JEMALLOC \"build with JeMalloc\" OFF)\noption(WITH_LIBURING \"build with liburing\" ON)\noption(WITH_SNAPPY \"build with SNAPPY\" OFF)\noption(WITH_LZ4 \"build with lz4\" OFF)\noption(WITH_ZLIB \"build with zlib\" OFF)\noption(WITH_ZSTD \"build with zstd\" OFF)\noption(WITH_WINDOWS_UTF8_FILENAMES \"use UTF8 as characterset for opening files, regardles of the system code page\" OFF)\nif (WITH_WINDOWS_UTF8_FILENAMES)\n  add_definitions(-DROCKSDB_WINDOWS_UTF8_FILENAMES)\nendif()\noption(ROCKSDB_BUILD_SHARED \"Build shared versions of the RocksDB libraries\" ON)\n\nif( NOT DEFINED CMAKE_CXX_STANDARD )\n  set(CMAKE_CXX_STANDARD 17)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling ccache for Faster RocksDB Compilation\nDESCRIPTION: Configures ccache integration when available to speed up compilation by caching compiled objects and reusing them in subsequent builds, significantly improving build times for repeated compilations.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nfind_program(CCACHE_FOUND ccache)\nif(CCACHE_FOUND)\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)\nendif(CCACHE_FOUND)\n```\n\n----------------------------------------\n\nTITLE: Handling macOS Architecture Detection in CMake\nDESCRIPTION: Handles system processor detection on macOS when cross-compiling, ensuring that CMAKE_SYSTEM_PROCESSOR matches CMAKE_OSX_ARCHITECTURES. This corrects an issue where CMAKE_SYSTEM_PROCESSOR might not be updated properly when cross-compiling on macOS.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE)\n  # On macOS Cmake, when cross-compiling, sometimes CMAKE_SYSTEM_PROCESSOR wrongfully stays\n  # the same as CMAKE_HOST_SYSTEM_PROCESSOR regardless the target CPU.\n  # The manual call to  set(CMAKE_SYSTEM_PROCESSOR) has to be set after the project() call.\n  # because project() might reset CMAKE_SYSTEM_PROCESSOR back to the value of CMAKE_HOST_SYSTEM_PROCESSOR.\n  # Check if CMAKE_SYSTEM_PROCESSOR is not equal to CMAKE_OSX_ARCHITECTURES\n  if(NOT CMAKE_OSX_ARCHITECTURES STREQUAL \"\")\n    if(NOT CMAKE_SYSTEM_PROCESSOR STREQUAL CMAKE_OSX_ARCHITECTURES)\n      # Split CMAKE_OSX_ARCHITECTURES into a list\n      string(REPLACE \";\" \" \" ARCH_LIST ${CMAKE_OSX_ARCHITECTURES})\n      separate_arguments(ARCH_LIST UNIX_COMMAND ${ARCH_LIST})\n      # Count the number of architectures\n      list(LENGTH ARCH_LIST ARCH_COUNT)\n      # Ensure that exactly one architecture is specified\n      if(NOT ARCH_COUNT EQUAL 1)\n          message(FATAL_ERROR \"CMAKE_OSX_ARCHITECTURES must have exactly one value. Current value: ${CMAKE_OSX_ARCHITECTURES}\")\n      endif()\n      set(CMAKE_SYSTEM_PROCESSOR ${CMAKE_OSX_ARCHITECTURES})\n      message(STATUS \"CMAKE_SYSTEM_PROCESSOR is manually set to ${CMAKE_SYSTEM_PROCESSOR}\")\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up RocksDB CMake Project with Version Detection\nDESCRIPTION: Initializes the CMake project for RocksDB, sets the minimum required CMake version, and includes modules for version detection. The project is configured with version information and metadata about its purpose.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.12)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/cmake/modules/\")\ninclude(ReadVersion)\ninclude(GoogleTest)\nget_rocksdb_version(rocksdb_VERSION)\nproject(rocksdb\n  VERSION ${rocksdb_VERSION}\n  DESCRIPTION \"An embeddable persistent key-value store for fast storage\"\n  HOMEPAGE_URL https://rocksdb.org/\n  LANGUAGES CXX C ASM)\n```\n\n----------------------------------------\n\nTITLE: Running Get Benchmarks with JMH for RocksDB Java API\nDESCRIPTION: This command runs the JMH benchmarks for get operations in RocksDB Java API. It specifies parameters for key count, key size, value size, and column family test type.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/GetPutBenchmarks.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\njava -jar target/rocksdbjni-jmh-1.0-SNAPSHOT-benchmarks.jar -p keyCount=1000 -p keySize=128 -p valueSize=32768 -p columnFamilyTestType=\"no_column_families\" GetBenchmarks.get GetBenchmarks.preallocatedByteBufferGet GetBenchmarks.preallocatedGet\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Build Types in CMake\nDESCRIPTION: Sets the default build type based on whether the source is from a git repository. Debug is used for git repositories, while RelWithDebInfo is used for release distributions, providing a reasonable default configuration.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE)\n  if(EXISTS \"${CMAKE_SOURCE_DIR}/.git\")\n    set(default_build_type \"Debug\")\n  else()\n    set(default_build_type \"RelWithDebInfo\")\n  endif()\n  set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING\n    \"Default BUILD_TYPE is ${default_build_type}\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining JNI Native Source Files for RocksDB\nDESCRIPTION: Lists all C++ source files required to build the RocksDB JNI native library. These files implement the native methods that connect Java code to the C++ RocksDB implementation.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/CMakeLists.txt#2025-04-11_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(JNI_NATIVE_SOURCES\n        rocksjni/backup_engine_options.cc\n        rocksjni/backupenginejni.cc\n        rocksjni/cache.cc\n        rocksjni/cassandra_compactionfilterjni.cc\n        rocksjni/cassandra_value_operator.cc\n        rocksjni/checkpoint.cc\n        rocksjni/clock_cache.cc\n        rocksjni/columnfamilyhandle.cc\n        rocksjni/compact_range_options.cc\n        rocksjni/compaction_filter.cc\n        rocksjni/compaction_filter_factory.cc\n        rocksjni/compaction_filter_factory_jnicallback.cc\n        rocksjni/compaction_job_info.cc\n        rocksjni/compaction_job_stats.cc\n        rocksjni/compaction_options.cc\n        rocksjni/compaction_options_fifo.cc\n        rocksjni/compaction_options_universal.cc\n        rocksjni/comparator.cc\n        rocksjni/comparatorjnicallback.cc\n        rocksjni/compression_options.cc\n        rocksjni/concurrent_task_limiter.cc\n        rocksjni/config_options.cc\n        rocksjni/env.cc\n        rocksjni/env_options.cc\n        rocksjni/event_listener.cc\n        rocksjni/event_listener_jnicallback.cc\n        rocksjni/export_import_files_metadatajni.cc\n        rocksjni/filter.cc\n        rocksjni/hyper_clock_cache.cc\n        rocksjni/import_column_family_options.cc\n        rocksjni/ingest_external_file_options.cc\n        rocksjni/iterator.cc\n        rocksjni/jni_multiget_helpers.cc\n        rocksjni/jni_perf_context.cc\n        rocksjni/jnicallback.cc\n        rocksjni/loggerjnicallback.cc\n        rocksjni/lru_cache.cc\n        rocksjni/memory_util.cc\n        rocksjni/memtablejni.cc\n        rocksjni/merge_operator.cc\n        rocksjni/native_comparator_wrapper_test.cc\n        rocksjni/optimistic_transaction_db.cc\n        rocksjni/optimistic_transaction_options.cc\n        rocksjni/options.cc\n        rocksjni/options_util.cc\n        rocksjni/persistent_cache.cc\n        rocksjni/ratelimiterjni.cc\n        rocksjni/remove_emptyvalue_compactionfilterjni.cc\n        rocksjni/restorejni.cc\n        rocksjni/rocks_callback_object.cc\n        rocksjni/rocksdb_exception_test.cc\n        rocksjni/rocksjni.cc\n        rocksjni/slice.cc\n        rocksjni/snapshot.cc\n        rocksjni/sst_file_manager.cc\n        rocksjni/sst_file_reader_iterator.cc\n        rocksjni/sst_file_readerjni.cc\n        rocksjni/sst_file_writerjni.cc\n        rocksjni/sst_partitioner.cc\n        rocksjni/statistics.cc\n        rocksjni/statisticsjni.cc\n        rocksjni/stderr_logger.cc\n        rocksjni/table.cc\n        rocksjni/table_filter.cc\n        rocksjni/table_filter_jnicallback.cc\n        rocksjni/table_properties_collector_factory.cc\n        rocksjni/testable_event_listener.cc\n        rocksjni/thread_status.cc\n        rocksjni/trace_writer.cc\n        rocksjni/trace_writer_jnicallback.cc\n        rocksjni/transaction.cc\n        rocksjni/transaction_db.cc\n        rocksjni/transaction_db_options.cc\n        rocksjni/transaction_log.cc\n        rocksjni/transaction_notifier.cc\n        rocksjni/transaction_notifier_jnicallback.cc\n        rocksjni/transaction_options.cc\n        rocksjni/ttl.cc\n        rocksjni/wal_filter.cc\n        rocksjni/wal_filter_jnicallback.cc\n        rocksjni/write_batch.cc\n        rocksjni/write_batch_test.cc\n        rocksjni/write_batch_with_index.cc\n        rocksjni/write_buffer_manager.cc\n        rocksjni/writebatchhandlerjnicallback.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Running Put Benchmarks with JMH for RocksDB Java API\nDESCRIPTION: This command executes JMH benchmarks for put operations in RocksDB Java API. It includes parameters for key count, key size, value size, and column family test type, with multiple values for some parameters.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/GetPutBenchmarks.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njava -jar target/rocksdbjni-jmh-1.0-SNAPSHOT-benchmarks.jar -p keyCount=1000,50000 -p keySize=128 -p valueSize=1024,32768 -p columnFamilyTestType=\"no_column_family\" PutBenchmarks\n```\n\n----------------------------------------\n\nTITLE: Setting up Java unit tests for RocksDB\nDESCRIPTION: Configures CTest to run Java unit tests for RocksDB. Sets up the Java classpath differently based on platform (Windows vs others) to include the RocksDB JAR and test class files. Each test class is run using the RocksJunitRunner.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/CMakeLists.txt#2025-04-11_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nenable_testing()\nget_target_property(ROCKSDBJNI_CLASSES_TEST_JAR_FILE rocksdbjni_test_classes JAR_FILE)\nforeach (CLAZZ ${JAVA_TEST_RUNNING_CLASSES})\n  if(${CMAKE_SYSTEM_NAME} MATCHES \"Windows\")\n    add_test(\n      NAME jtest_${CLAZZ}\n            COMMAND ${Java_JAVA_EXECUTABLE} ${JVMARGS} -ea -Xcheck:jni -Djava.library.path=${PROJECT_BINARY_DIR}/java/${CMAKE_BUILD_TYPE} -classpath ${CMAKE_CURRENT_BINARY_DIR}/${ROCKSDB_JAR}$<SEMICOLON>${JAVA_RUN_TESTCLASSPATH}$<SEMICOLON>${ROCKSDBJNI_CLASSES_TEST_JAR_FILE} org.rocksdb.test.RocksJunitRunner ${CLAZZ}\n    )\n  else()\n    add_test(\n      NAME jtest_${CLAZZ}\n            COMMAND ${Java_JAVA_EXECUTABLE} ${JVMARGS} -ea -Xcheck:jni -Djava.library.path=${PROJECT_BINARY_DIR}/java -classpath ${JAVA_RUN_TESTCLASSPATH}:${ROCKSDBJNI_CLASSES_TEST_JAR_FILE}:${CMAKE_CURRENT_BINARY_DIR}/${ROCKSDB_JAR} org.rocksdb.test.RocksJunitRunner ${CLAZZ}\n    )\n  endif()\nendforeach(CLAZZ)\n```\n\n----------------------------------------\n\nTITLE: Setting Java Compiler Flags for RocksDB\nDESCRIPTION: Configures the Java compiler to use Java 8 as the source compatibility level for compiling RocksDB Java classes.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/CMakeLists.txt#2025-04-11_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_JAVA_COMPILE_FLAGS -source 8)\n```\n\n----------------------------------------\n\nTITLE: Running Full Performance Benchmarks for RocksDB Get Operations\nDESCRIPTION: Command to run comprehensive performance benchmarks for RocksDB get operations with various configurations.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/GetPutBenchmarks.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njava -jar target/rocksdbjni-jmh-1.0-SNAPSHOT-benchmarks.jar -p keyCount=1000,50000 -p keySize=128 -p valueSize=1024,16384 -p columnFamilyTestType=\"1_column_family\",\"20_column_families\" GetBenchmarks.get GetBenchmarks.preallocatedByteBufferGet GetBenchmarks.preallocatedGet\n```\n\n----------------------------------------\n\nTITLE: Setting up Java Test Classes in CMake\nDESCRIPTION: Defines the list of Java test classes that will be built and run as part of the RocksDB test suite.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/CMakeLists.txt#2025-04-11_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(JAVA_TEST_RUNNING_CLASSES\n  org.rocksdb.BackupEngineOptionsTest\n  org.rocksdb.BackupEngineTest\n  org.rocksdb.BlobOptionsTest\n  [... additional test classes ...]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Test Dependencies\nDESCRIPTION: Sets up paths and filenames for Java test dependencies including JUnit, Hamcrest, Mockito, and other testing libraries.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/CMakeLists.txt#2025-04-11_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(JAVA_TEST_LIBDIR ${PROJECT_SOURCE_DIR}/java/test-libs)\nset(JAVA_TMP_JAR ${JAVA_TEST_LIBDIR}/tmp.jar)\nset(JAVA_JUNIT_JAR ${JAVA_TEST_LIBDIR}/junit-${JAVA_JUNIT_VERSION}.jar)\nset(JAVA_HAMCR_JAR ${JAVA_TEST_LIBDIR}/hamcrest-${JAVA_HAMCR_VERSION}.jar)\nset(JAVA_MOCKITO_JAR ${JAVA_TEST_LIBDIR}/mockito-all-${JAVA_MOCKITO_VERSION}.jar)\nset(JAVA_CGLIB_JAR ${JAVA_TEST_LIBDIR}/cglib-${JAVA_CGLIB_VERSION}.jar)\nset(JAVA_ASSERTJ_JAR ${JAVA_TEST_LIBDIR}/assertj-core-${JAVA_ASSERTJ_VERSION}.jar)\n```\n\n----------------------------------------\n\nTITLE: RocksDB Benchmark Setup Configuration\nDESCRIPTION: Details the hardware and software configuration used for running the RocksDB benchmarks. Includes information about the CPU, storage, RAM, operating system, and database parameters.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/WINDOWS_PORT.md#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n* 2 Intel(R) Xeon(R) E5 2450 0 @ 2.10 GHz (total 16 cores)\n* 2 XK0480GDQPH SSD Device, total 894GB free disk\n* Machine has 128 GB of RAM\n* Operating System: Windows Server 2012 R2 Datacenter\n* 100 Million keys; each key is of size 10 bytes, each value is of size 800 bytes\n* total database size is ~76GB\n* The performance result is based on RocksDB 3.11.\n* The parameters used, unless specified, were exactly the same as published in the GitHub Wiki page.\n```\n\n----------------------------------------\n\nTITLE: Creating RocksDB JNI static and shared libraries\nDESCRIPTION: Defines build targets for RocksDB JNI libraries. Creates both static library for all platforms and a shared library (except for MinGW). The libraries depend on rocksdbjni_headers and link against RocksDB.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/CMakeLists.txt#2025-04-11_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT MSVC)\n  set_property(TARGET ${ROCKSDB_STATIC_LIB} PROPERTY POSITION_INDEPENDENT_CODE ON)\nendif()\n\nset(ROCKSDBJNI_STATIC_LIB rocksdbjni${ARTIFACT_SUFFIX})\nif(MINGW)\n  # Build mingw only as staic library.\n  add_library(${ROCKSDBJNI_STATIC_LIB} ${JNI_NATIVE_SOURCES})\nelse()\n  add_library(${ROCKSDBJNI_STATIC_LIB} SHARED ${JNI_NATIVE_SOURCES})\nendif()\nadd_dependencies(${ROCKSDBJNI_STATIC_LIB} rocksdbjni_headers)\ntarget_link_libraries(${ROCKSDBJNI_STATIC_LIB} ${ROCKSDB_STATIC_LIB} ${ROCKSDB_LIB})\n\nif(NOT MINGW)\n  set(ROCKSDBJNI_SHARED_LIB rocksdbjni-shared${ARTIFACT_SUFFIX})\n  add_library(${ROCKSDBJNI_SHARED_LIB} SHARED ${JNI_NATIVE_SOURCES})\n  add_dependencies(${ROCKSDBJNI_SHARED_LIB} rocksdbjni_headers)\n  target_link_libraries(${ROCKSDBJNI_SHARED_LIB} ${ROCKSDB_STATIC_LIB} ${ROCKSDB_LIB})\n\n  set_target_properties(\n    ${ROCKSDBJNI_SHARED_LIB}\n    PROPERTIES\n    COMPILE_PDB_OUTPUT_DIRECTORY ${CMAKE_CFG_INTDIR}\n    COMPILE_PDB_NAME ${ROCKSDBJNI_STATIC_LIB}.pdb\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating RocksDB sources JAR\nDESCRIPTION: Creates a JAR file containing all the Java source files from the RocksDB Java API. The JAR is named according to the project version and includes all sources from the java/src/main/java directory.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/CMakeLists.txt#2025-04-11_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# Sources Jar\nset(ROCKSDB_SOURCES_JAR rocksdbjni-${CMAKE_PROJECT_VERSION}-sources.jar)\nadd_custom_target(rocksdb_sources_jar ALL\n        ${Java_JAR_EXECUTABLE} cvf ${CMAKE_CURRENT_BINARY_DIR}/${ROCKSDB_SOURCES_JAR} -C ${PROJECT_SOURCE_DIR}/java/src/main/java/ .\n        BYPRODUCTS ${CMAKE_CURRENT_BINARY_DIR}/${ROCKSDB_SOURCES_JAR}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: RocksDB Flash Storage Benchmark Results\nDESCRIPTION: Presents benchmark results for RocksDB versions 3.10 and 3.11 on flash storage. Includes tests for bulk loading in random and sequential order, random write and read operations, and multi-threaded read with single-threaded write operations.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/WINDOWS_PORT.md#2025-04-11_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nVersion 3.11 \n\n* Total Run Time: 17.6 min\n* Fillrandom: 5.480 micros/op 182465 ops/sec;  142.0 MB/s\n* Compact: 486056544.000 micros/op 0 ops/sec\n\nVersion 3.10 \n\n* Total Run Time: 16.2 min \n* Fillrandom: 5.018 micros/op 199269 ops/sec;  155.1 MB/s \n* Compact: 441313173.000 micros/op 0 ops/sec; \n\n// ... (similar format for other tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional RocksDB Tools in CMake\nDESCRIPTION: Conditionally builds additional tools when WITH_TOOLS is enabled. These tools include db_sanity_test, write_stress, db_repl_stress, and dump utilities. Each executable is linked with both the RocksDB library and third-party libraries.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/tools/CMakeLists.txt#2025-04-11_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_TOOLS)\n  set(TOOLS\n    db_sanity_test.cc\n    write_stress.cc\n    db_repl_stress.cc\n    dump/rocksdb_dump.cc\n    dump/rocksdb_undump.cc)\n  foreach(src ${TOOLS})\n    get_filename_component(exename ${src} NAME_WE)\n    add_executable(${exename}${ARTIFACT_SUFFIX}\n      ${src})\n    target_link_libraries(${exename}${ARTIFACT_SUFFIX} ${ROCKSDB_LIB} ${THIRDPARTY_LIBS})\n    list(APPEND tool_deps ${exename})\n  endforeach()\n\n  add_custom_target(ldb_tests\n    COMMAND python ${CMAKE_CURRENT_SOURCE_DIR}/ldb_tests.py\n    DEPENDS ldb)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring RocksDB Database Stress Test Executable in CMake\nDESCRIPTION: This CMake snippet defines the db_stress executable, specifying its source files and linking it with the RocksDB library and third-party dependencies. It also adds the executable to the tool dependencies list.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/db_stress_tool/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(db_stress${ARTIFACT_SUFFIX}\n  batched_ops_stress.cc\n  cf_consistency_stress.cc\n  db_stress.cc\n  db_stress_common.cc\n  db_stress_driver.cc\n  db_stress_filters.cc\n  db_stress_gflags.cc\n  db_stress_listener.cc\n  db_stress_shared_state.cc\n  db_stress_stat.cc\n  db_stress_test_base.cc\n  db_stress_wide_merge_operator.cc\n  db_stress_tool.cc\n  expected_state.cc\n  expected_value.cc\n  multi_ops_txns_stress.cc\n  no_batched_ops_stress.cc)\ntarget_link_libraries(db_stress${ARTIFACT_SUFFIX} ${ROCKSDB_LIB} ${THIRDPARTY_LIBS})\nlist(APPEND tool_deps db_stress)\n```\n\n----------------------------------------\n\nTITLE: RocksDB In-Memory Benchmark Results\nDESCRIPTION: Presents benchmark results for RocksDB versions 3.10 and 3.11 in in-memory configuration. Includes tests for point lookup and prefix range query operations at different write rates (80K and 10K writes/sec).\nSOURCE: https://github.com/facebook/rocksdb/blob/main/WINDOWS_PORT.md#2025-04-11_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nVersion 3.11\n\n80K writes/sec\n* Write Rate Achieved: 40.5k write/sec;\n* Readwhilewriting: 0.314 micros/op 3187455 ops/sec;  364.8 MB/s (715454999 of 715454999 found)\n\nVersion 3.10\n\n* Write Rate Achieved:  50.6k write/sec \n* Readwhilewriting: 0.316 micros/op 3162028 ops/sec; (719576999 of 719576999 found) \n\n// ... (similar format for other tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring RocksDB Microbenchmark Build in CMake\nDESCRIPTION: Sets up build configuration for RocksDB microbenchmarks. The script finds required packages, creates executables for each benchmark file, links necessary libraries, and creates custom targets for building and running all benchmarks. Dependencies include Google Benchmark library and threading support.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/microbench/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(benchmark REQUIRED)\nfind_package(Threads REQUIRED)\n\nfile(GLOB_RECURSE ALL_BENCH_CPP *.cc)\nforeach(ONE_BENCH_CPP ${ALL_BENCH_CPP})\n  get_filename_component(TARGET_NAME ${ONE_BENCH_CPP} NAME_WE)\n  add_executable(${TARGET_NAME} ${ONE_BENCH_CPP})\n  target_link_libraries(${TARGET_NAME} ${ROCKSDB_LIB} benchmark::benchmark\n          ${CMAKE_THREAD_LIBS_INIT})\n  # run benchmark like a test, if added, the benchmark tests could be run by `ctest -R Bench_`\n  # add_test(Bench_${TARGET_NAME} ${TARGET_NAME})\n  list(APPEND ALL_BENCH_TARGETS ${TARGET_NAME})\nendforeach()\nadd_custom_target(microbench DEPENDS ${ALL_BENCH_TARGETS})\nadd_custom_target(run_microbench\n        COMMAND for t in ${ALL_BENCH_TARGETS}\\; do \\./$$t \\|\\| exit 1\\; done\n        DEPENDS ${ALL_BENCH_TARGETS})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Solaris Sparc Compilation\nDESCRIPTION: Export commands to set the necessary environment variables for compiling RocksDB on Solaris Sparc with GCC 7 or higher.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/INSTALL.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport CC=gcc\nexport EXTRA_CFLAGS=-m64\nexport EXTRA_CXXFLAGS=-m64\nexport EXTRA_LDFLAGS=-m64\nexport PORTABLE=1\nexport PLATFORM_LDFLAGS=\"-static-libstdc++ -static-libgcc\"\n```\n\n----------------------------------------\n\nTITLE: Creating RocksDB Java API documentation JAR\nDESCRIPTION: Creates JavaDoc documentation for the RocksDB Java API and packages it into a JAR file. The documentation includes packages org.rocksdb and org.rocksdb.util from the source code.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/CMakeLists.txt#2025-04-11_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# Javadoc Jar\nset(ROCKSDB_JAVADOC_JAR rocksdbjni-${CMAKE_PROJECT_VERSION}-javadoc.jar)\ncreate_javadoc(rocksdb\n        PACKAGES org.rocksdb org.rocksdb.util\n        SOURCEPATH \"${PROJECT_SOURCE_DIR}/java/src/main/java\"\n        WINDOWTITLE \"RocksDB Java API JavaDoc\"\n        AUTHOR FALSE\n        USE FALSE\n        VERSION TRUE\n)\nadd_custom_target(rocksdb_javadocs_jar ALL\n  COMMAND ${Java_JAR_EXECUTABLE} cvf ${CMAKE_CURRENT_BINARY_DIR}/${ROCKSDB_JAVADOC_JAR} -C ${CMAKE_CURRENT_BINARY_DIR}/javadoc/rocksdb .\n  BYPRODUCTS ${CMAKE_CURRENT_BINARY_DIR}/${ROCKSDB_JAVADOC_JAR}\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  DEPENDS rocksdb_javadoc\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling RocksDB for Portable Architecture\nDESCRIPTION: Command to build a RocksDB binary compatible with a more general architecture, sacrificing some performance for wider compatibility.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/INSTALL.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPORTABLE=1 make static_lib\n```\n\n----------------------------------------\n\nTITLE: Running RocksDB Unit Tests in Debug Mode\nDESCRIPTION: Command to compile and run all RocksDB unit tests. This compiles RocksDB in debug mode, which is slower than release mode.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/INSTALL.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake check\n```\n\n----------------------------------------\n\nTITLE: Building Java Classes with JNI Support\nDESCRIPTION: Configures the build process for Java classes with JNI support, handling different versions of CMake and Java.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/CMakeLists.txt#2025-04-11_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_jar(\n    rocksdbjni_classes\n    SOURCES ${JAVA_MAIN_CLASSES}\n    INCLUDE_JARS ${ROCKSDBJNI_CLASSES_JAR_FILE} ${JAVA_TESTCLASSPATH}\n    GENERATE_NATIVE_HEADERS rocksdbjni_headers DESTINATION ${JNI_OUTPUT_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling RocksDB Static Library and Tools in Debug Mode\nDESCRIPTION: Command to compile the RocksDB static library, tools, and unit tests in debug mode. Requires gflags 2.2.0 or newer to be installed.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/INSTALL.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake all\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for AIX Compilation\nDESCRIPTION: Export commands to set the necessary environment variables for compiling RocksDB on AIX 6.1 with gcc.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/INSTALL.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport PORTABLE=1\nexport CC=gcc\nexport AR=\"ar -X64\"\nexport EXTRA_ARFLAGS=-X64\nexport EXTRA_CFLAGS=-maix64\nexport EXTRA_CXXFLAGS=-maix64\nexport PLATFORM_LDFLAGS=\"-static-libstdc++ -static-libgcc\"\nexport LIBPATH=/opt/freeware/lib\nexport JAVA_HOME=/usr/java8_64\nexport PATH=/opt/freeware/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Defining Java Source Files for RocksDB API\nDESCRIPTION: Lists the Java source files that make up the RocksDB Java API. These include abstract classes, interfaces, and concrete implementations that provide Java developers with access to RocksDB functionality.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/CMakeLists.txt#2025-04-11_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(JAVA_MAIN_CLASSES\n  src/main/java/org/rocksdb/AbstractCompactionFilter.java\n  src/main/java/org/rocksdb/AbstractCompactionFilterFactory.java\n  src/main/java/org/rocksdb/AbstractComparator.java\n  src/main/java/org/rocksdb/AbstractComparatorJniBridge.java\n  src/main/java/org/rocksdb/AbstractEventListener.java\n  src/main/java/org/rocksdb/AbstractImmutableNativeReference.java\n  src/main/java/org/rocksdb/AbstractMutableOptions.java\n  src/main/java/org/rocksdb/AbstractNativeReference.java\n  src/main/java/org/rocksdb/AbstractRocksIterator.java\n  src/main/java/org/rocksdb/AbstractSlice.java\n  src/main/java/org/rocksdb/AbstractTableFilter.java\n  src/main/java/org/rocksdb/AbstractTraceWriter.java\n  src/main/java/org/rocksdb/AbstractTransactionNotifier.java\n  src/main/java/org/rocksdb/AbstractWalFilter.java\n  src/main/java/org/rocksdb/AbstractWriteBatch.java\n  src/main/java/org/rocksdb/AdvancedColumnFamilyOptionsInterface.java\n  src/main/java/org/rocksdb/AdvancedMutableColumnFamilyOptionsInterface.java\n  src/main/java/org/rocksdb/BackgroundErrorReason.java\n  src/main/java/org/rocksdb/BackupEngine.java\n  src/main/java/org/rocksdb/BackupEngineOptions.java\n  src/main/java/org/rocksdb/BackupInfo.java\n  src/main/java/org/rocksdb/BlockBasedTableConfig.java\n  src/main/java/org/rocksdb/BloomFilter.java\n  src/main/java/org/rocksdb/BuiltinComparator.java\n  src/main/java/org/rocksdb/ByteBufferGetStatus.java\n  src/main/java/org/rocksdb/Cache.java\n  src/main/java/org/rocksdb/CassandraCompactionFilter.java\n  src/main/java/org/rocksdb/CassandraValueMergeOperator.java\n  src/main/java/org/rocksdb/Checkpoint.java\n  src/main/java/org/rocksdb/ChecksumType.java\n  src/main/java/org/rocksdb/ClockCache.java\n  src/main/java/org/rocksdb/ColumnFamilyDescriptor.java\n  src/main/java/org/rocksdb/ColumnFamilyHandle.java\n  src/main/java/org/rocksdb/ColumnFamilyMetaData.java\n  src/main/java/org/rocksdb/ColumnFamilyOptions.java\n  src/main/java/org/rocksdb/ColumnFamilyOptionsInterface.java\n  src/main/java/org/rocksdb/CompactRangeOptions.java\n  src/main/java/org/rocksdb/CompactionJobInfo.java\n  src/main/java/org/rocksdb/CompactionJobStats.java\n  src/main/java/org/rocksdb/CompactionOptions.java\n  src/main/java/org/rocksdb/CompactionOptionsFIFO.java\n  src/main/java/org/rocksdb/CompactionOptionsUniversal.java\n  src/main/java/org/rocksdb/CompactionPriority.java\n  src/main/java/org/rocksdb/CompactionReason.java\n  src/main/java/org/rocksdb/CompactionStopStyle.java\n  src/main/java/org/rocksdb/CompactionStyle.java\n  src/main/java/org/rocksdb/ComparatorOptions.java\n  src/main/java/org/rocksdb/ComparatorType.java\n  src/main/java/org/rocksdb/CompressionOptions.java\n  src/main/java/org/rocksdb/CompressionType.java\n  src/main/java/org/rocksdb/ConcurrentTaskLimiter.java\n  src/main/java/org/rocksdb/ConcurrentTaskLimiterImpl.java\n  src/main/java/org/rocksdb/ConfigOptions.java\n  src/main/java/org/rocksdb/DBOptions.java\n  src/main/java/org/rocksdb/DBOptionsInterface.java\n  src/main/java/org/rocksdb/DataBlockIndexType.java\n  src/main/java/org/rocksdb/DbPath.java\n  src/main/java/org/rocksdb/DirectSlice.java\n  src/main/java/org/rocksdb/EncodingType.java\n  src/main/java/org/rocksdb/Env.java\n  src/main/java/org/rocksdb/EnvOptions.java\n  src/main/java/org/rocksdb/EventListener.java\n  src/main/java/org/rocksdb/Experimental.java\n  src/main/java/org/rocksdb/ExportImportFilesMetaData.java\n  src/main/java/org/rocksdb/ExternalFileIngestionInfo.java\n  src/main/java/org/rocksdb/FileOperationInfo.java\n  src/main/java/org/rocksdb/Filter.java\n  src/main/java/org/rocksdb/FilterPolicyType.java\n  src/main/java/org/rocksdb/FlushJobInfo.java\n  src/main/java/org/rocksdb/FlushOptions.java\n  src/main/java/org/rocksdb/FlushReason.java\n  src/main/java/org/rocksdb/GetStatus.java\n  src/main/java/org/rocksdb/HashLinkedListMemTableConfig.java\n  src/main/java/org/rocksdb/HashSkipListMemTableConfig.java\n  src/main/java/org/rocksdb/HistogramData.java\n  src/main/java/org/rocksdb/HistogramType.java\n  src/main/java/org/rocksdb/Holder.java\n  src/main/java/org/rocksdb/HyperClockCache.java\n  src/main/java/org/rocksdb/ImportColumnFamilyOptions.java\n  src/main/java/org/rocksdb/IndexShorteningMode.java\n  src/main/java/org/rocksdb/IndexType.java\n  src/main/java/org/rocksdb/InfoLogLevel.java\n  src/main/java/org/rocksdb/IngestExternalFileOptions.java\n  src/main/java/org/rocksdb/KeyMayExist.java\n  src/main/java/org/rocksdb/LRUCache.java\n  src/main/java/org/rocksdb/LevelMetaData.java\n  src/main/java/org/rocksdb/LiveFileMetaData.java\n  src/main/java/org/rocksdb/LogFile.java\n  src/main/java/org/rocksdb/Logger.java\n  src/main/java/org/rocksdb/LoggerInterface.java\n  src/main/java/org/rocksdb/LoggerType.java\n  src/main/java/org/rocksdb/MemTableConfig.java\n  src/main/java/org/rocksdb/MemTableInfo.java\n  src/main/java/org/rocksdb/MemoryUsageType.java\n  src/main/java/org/rocksdb/MemoryUtil.java\n  src/main/java/org/rocksdb/MergeOperator.java\n  src/main/java/org/rocksdb/MutableColumnFamilyOptions.java\n  src/main/java/org/rocksdb/MutableColumnFamilyOptionsInterface.java\n  src/main/java/org/rocksdb/MutableDBOptions.java\n  src/main/java/org/rocksdb/MutableDBOptionsInterface.java\n  src/main/java/org/rocksdb/MutableOptionKey.java\n  src/main/java/org/rocksdb/MutableOptionValue.java\n  src/main/java/org/rocksdb/NativeComparatorWrapper.java\n  src/main/java/org/rocksdb/NativeLibraryLoader.java\n  src/main/java/org/rocksdb/OperationStage.java\n  src/main/java/org/rocksdb/OperationType.java\n  src/main/java/org/rocksdb/OptimisticTransactionDB.java\n  src/main/java/org/rocksdb/OptimisticTransactionOptions.java\n  src/main/java/org/rocksdb/OptionString.java\n  src/main/java/org/rocksdb/Options.java\n  src/main/java/org/rocksdb/OptionsUtil.java\n  src/main/java/org/rocksdb/PerfContext.java\n  src/main/java/org/rocksdb/PerfLevel.java\n  src/main/java/org/rocksdb/PersistentCache.java\n  src/main/java/org/rocksdb/PlainTableConfig.java\n  src/main/java/org/rocksdb/PrepopulateBlobCache.java\n  src/main/java/org/rocksdb/Priority.java\n  src/main/java/org/rocksdb/Range.java\n  src/main/java/org/rocksdb/RateLimiter.java\n  src/main/java/org/rocksdb/RateLimiterMode.java\n  src/main/java/org/rocksdb/ReadOptions.java\n  src/main/java/org/rocksdb/ReadTier.java\n  src/main/java/org/rocksdb/RemoveEmptyValueCompactionFilter.java\n  src/main/java/org/rocksdb/RestoreOptions.java\n```\n\n----------------------------------------\n\nTITLE: Linux Build Setup\nDESCRIPTION: Commands to create build directory and run CMake for Linux compilation.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmkdir build; cd build\ncmake ..\n```\n\n----------------------------------------\n\nTITLE: Compiling RocksDB Static Library in Shell\nDESCRIPTION: This command compiles the RocksDB static library. It should be executed in the parent directory of the RocksDB project.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/examples/README.md#2025-04-11_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake static_lib\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Dependencies for RocksDB\nDESCRIPTION: Defines the versions of Java testing and utility libraries required for the RocksDB Java bindings. Includes JUnit, Hamcrest, Mockito, CGLIB, and AssertJ libraries.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/CMakeLists.txt#2025-04-11_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(JAVA_JUNIT_VERSION \"4.13.1\")\nset(JAVA_HAMCR_VERSION \"2.2\")\nset(JAVA_MOCKITO_VERSION \"1.10.19\")\nset(JAVA_CGLIB_VERSION \"3.3.0\")\nset(JAVA_ASSERTJ_VERSION \"2.9.0\")\n```\n\n----------------------------------------\n\nTITLE: Building RocksDB Java API on Mac\nDESCRIPTION: Commands to build the RocksDB Java API on Mac, including cleaning, compiling, and installing the JAR file.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/GetPutBenchmarks.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake clean jclean\nDEBUG_LEVEL=0 make -j12 rocksdbjava\n(cd java/target; cp rocksdbjni-7.10.0-osx.jar rocksdbjni-7.10.0-SNAPSHOT-osx.jar)\nmvn install:install-file -Dfile=./java/target/rocksdbjni-7.10.0-SNAPSHOT-osx.jar -DgroupId=org.rocksdb -DartifactId=rocksdbjni -Dversion=7.10.0-SNAPSHOT -Dpackaging=jar\n```\n\n----------------------------------------\n\nTITLE: Running Quick Sanity Check for RocksDB Get Benchmarks\nDESCRIPTION: Command to run a quick sanity check for RocksDB get benchmarks with a small number of keys.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/GetPutBenchmarks.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njava -jar target/rocksdbjni-jmh-1.0-SNAPSHOT-benchmarks.jar -p keyCount=1000 -p keySize=128 -p valueSize=32768 -p columnFamilyTestType=\"no_column_family\" GetBenchmarks\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version for RocksDB JNI Build\nDESCRIPTION: Sets the minimum required CMake version to 3.11 and includes a compatibility check that recommends using CMake 3.11.4 or newer.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.11)\n\nif(${CMAKE_VERSION} VERSION_LESS \"3.11.4\")\n    message(\"Please consider switching to CMake 3.11.4 or newer\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building RocksDB Micro-benchmark with Make\nDESCRIPTION: Command to build and run micro-benchmarks using Make with debug level set to 0 for release build.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/microbench/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG_LEVEL=0 make run_microbench\n```\n\n----------------------------------------\n\nTITLE: Running Single RocksDB Benchmark Test\nDESCRIPTION: Commands to build and run a specific benchmark test using the benchmark_filter option.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/microbench/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake db_basic_bench\n./db_basic_bench --benchmark_filter=<TEST_NAME>\n```\n\n----------------------------------------\n\nTITLE: Configuring Core RocksDB Tools in CMake\nDESCRIPTION: Sets up the core tools (sst_dump and ldb) that are always built with RocksDB. It defines each executable using the source file and links it with the RocksDB library, adding the executables to a dependency list.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/tools/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CORE_TOOLS\n  sst_dump.cc\n  ldb.cc)\nforeach(src ${CORE_TOOLS})\n  get_filename_component(exename ${src} NAME_WE)\n  add_executable(${exename}${ARTIFACT_SUFFIX}\n    ${src})\n  target_link_libraries(${exename}${ARTIFACT_SUFFIX} ${ROCKSDB_LIB})\n  list(APPEND core_tool_deps ${exename})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Test Directory for RocksDB Benchmark\nDESCRIPTION: Command showing how to override the default test directory location using TEST_TMPDIR environment variable.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/microbench/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTEST_TMPDIR=/mydata/tmp/ ./db_basic_bench --benchmark_filter=<TEST_NAME>\n```\n\n----------------------------------------\n\nTITLE: Building RocksDB Micro-benchmark with CMake\nDESCRIPTION: Commands to build and run micro-benchmarks using CMake in release mode with benchmark support enabled.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/microbench/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release -DWITH_BENCHMARK\nmake run_microbench\n```\n\n----------------------------------------\n\nTITLE: Running CMake with RocksDB Plugins\nDESCRIPTION: Example command showing how to invoke cmake with multiple RocksDB plugins specified in the ROCKSDB_PLUGINS variable. This command enables the inclusion of 'dedupfs', 'hdfs', and 'rados' plugins when building RocksDB.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/plugin/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmake .. -DROCKSDB_PLUGINS=\"dedupfs hdfs rados\"\n```\n\n----------------------------------------\n\nTITLE: Sample RocksDB Advisor Output\nDESCRIPTION: Example output showing a triggered rule for memtable stall detection, including the condition that triggered it and suggested configuration changes.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/tools/advisor/README.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nRule: stall-too-many-memtables\nLogCondition: stall-too-many-memtables regex: Stopping writes because we have \\d+ immutable memtables \\(waiting for flush\\), max_write_buffer_number is set to \\d+\nSuggestion: inc-bg-flush option : DBOptions.max_background_flushes action : increase suggested_values : ['2']\nSuggestion: inc-write-buffer option : CFOptions.max_write_buffer_number action : increase\nscope: col_fam:\n{'default'}\n```\n\n----------------------------------------\n\nTITLE: Display RocksDB Advisor Help - Shell Command\nDESCRIPTION: Command to show the help information for the RocksDB Advisor tool, listing all available command-line arguments and their descriptions.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/tools/advisor/README.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd rocksdb/tools/advisor\npython3 -m advisor.rule_parser_example --help\n```\n\n----------------------------------------\n\nTITLE: Windows Release Build\nDESCRIPTION: MSBuild command to compile RocksDB in release mode with configuration parameter.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\nmsbuild rocksdb.sln /p:Configuration=Release\n```\n\n----------------------------------------\n\nTITLE: Running RocksJava JMH Benchmarks\nDESCRIPTION: Command to execute the compiled JMH benchmarks for RocksJava. The command runs the benchmark JAR file which contains all the micro-benchmarks for testing RocksJava functionality.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/jmh/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ java -jar target/rocksdbjni-jmh-1.0-SNAPSHOT-benchmarks.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Settings for Sonatype Publishing\nDESCRIPTION: XML configuration for Maven settings.xml file to enable publishing to Sonatype repository. Requires Sonatype JIRA credentials for authentication.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/RELEASE.md#2025-04-11_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  <servers>\n    <server>\n      <id>sonatype-nexus-staging</id>\n      <username>your-sonatype-jira-username</username>\n      <password>your-sonatype-jira-password</password>\n    </server>\n  </servers>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Windows Debug Build\nDESCRIPTION: MSBuild command to compile RocksDB in debug mode with optional parallel build support.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\nmsbuild rocksdb.sln\n```\n\n----------------------------------------\n\nTITLE: Updating Bundler Dependencies\nDESCRIPTION: Command to update the installed bundle to the latest packages, which is necessary when the github-pages gem is updated.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/README.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbundle update\n```\n\n----------------------------------------\n\nTITLE: Preview Release Notes Update\nDESCRIPTION: Command to preview the release notes update changes without applying them\nSOURCE: https://github.com/facebook/rocksdb/blob/main/unreleased_history/README.txt#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ DRY_RUN=1 unreleased_history/release.sh | less\n```\n\n----------------------------------------\n\nTITLE: Windows CMake Configuration\nDESCRIPTION: CMake command to generate Visual Studio project files with various build options including GFLAGS, SNAPPY, JEMALLOC, and JNI support.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\ncmake -G \"Visual Studio 16 2019\" -DCMAKE_BUILD_TYPE=Release -DWITH_GFLAGS=1 -DWITH_SNAPPY=1 -DWITH_JEMALLOC=1 -DWITH_JNI=1 ..\n```\n\n----------------------------------------\n\nTITLE: Running Release Notes Addition Script Interactively\nDESCRIPTION: Command to run the release notes addition script in interactive mode\nSOURCE: https://github.com/facebook/rocksdb/blob/main/unreleased_history/README.txt#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ unreleased_history/add.sh\n```\n\n----------------------------------------\n\nTITLE: Execute Release Notes Update\nDESCRIPTION: Command to execute the release notes update script to modify HISTORY.md\nSOURCE: https://github.com/facebook/rocksdb/blob/main/unreleased_history/README.txt#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ unreleased_history/release.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Windows Build Directory\nDESCRIPTION: Commands to create and navigate to the build directory for RocksDB Windows compilation.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nmkdir build\ncd build\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Documentation Header in YAML\nDESCRIPTION: Example YAML front matter header for markdown documentation files showing required fields like docid, title, layout and permalink.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndocid: getting-started\ntitle: Getting started with ProjectName\nlayout: docs\npermalink: /docs/getting-started.html\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Post Directory Location\nDESCRIPTION: Specifies the directory path for storing local blog posts in a Jekyll site structure.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/doc-type-examples/2016-04-07-blog-post-example.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n_posts\n```\n\n----------------------------------------\n\nTITLE: New DB Interface Methods\nDESCRIPTION: Added new methods to DB class: GetOptions() and GetDbIdentity()\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_63\n\nLANGUAGE: cpp\nCODE:\n```\nDB::GetOptions()\nDB::GetDbIdentity()\n```\n\n----------------------------------------\n\nTITLE: File Path Reference - Jekyll Configuration\nDESCRIPTION: Key file paths and folders that need to be configured in a Jekyll template setup, including configuration files, image assets, and content directories.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/TEMPLATE-INFORMATION.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n_config.yml\nstatic/favicon.png\nstatic/logo.svg\nstatic/og_image.png\n_docs\ndocs\n_posts\nblog\n_data/promo.yml\nindex.md\n_data/powered_by.yml\n_data/powered_by_highlight.yml\nnav.yml\n```\n\n----------------------------------------\n\nTITLE: Code of Conduct Email Address Reference\nDESCRIPTION: Email address for reporting code of conduct violations to the project team\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CODE_OF_CONDUCT.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<opensource-conduct@fb.com>\n```\n\n----------------------------------------\n\nTITLE: Class Renames in RocksDB\nDESCRIPTION: Class name changes: TableStats renamed to TableProperties and PrefixHashRepFactory removed in favor of NewHashSkipListRepFactory()\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_62\n\nLANGUAGE: cpp\nCODE:\n```\nclass TableStats -> class TableProperties\nclass PrefixHashRepFactory -> NewHashSkipListRepFactory()\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Reference in Contributing Guide\nDESCRIPTION: A markdown link reference to the project's Code of Conduct document.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`CODE_OF_CONDUCT.md`](CODE_OF_CONDUCT.md)\n```\n\n----------------------------------------\n\nTITLE: Modified WriteBatch Data Method Signature\nDESCRIPTION: Changed WriteBatch::Data() return signature to return const reference\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_61\n\nLANGUAGE: cpp\nCODE:\n```\nWriteBatch::Data() const std::string& Data() const\n```\n\n----------------------------------------\n\nTITLE: Changed RocksDB API Method Name\nDESCRIPTION: API method renamed from StackableDB::GetRawDB() to StackableDB::GetBaseDB()\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_60\n\nLANGUAGE: cpp\nCODE:\n```\nStackableDB::GetRawDB() -> StackableDB::GetBaseDB()\n```\n\n----------------------------------------\n\nTITLE: API Function Change - GetIntProperty\nDESCRIPTION: New function added to return DB properties that are integer as uint64_t.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_58\n\nLANGUAGE: C++\nCODE:\n```\nDB::GetIntProperty()\n```\n\n----------------------------------------\n\nTITLE: API Function Change - SetOptions\nDESCRIPTION: New API introduced for adjusting options dynamically online.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_57\n\nLANGUAGE: C++\nCODE:\n```\nSetOptions()\n```\n\n----------------------------------------\n\nTITLE: Initializing JemallocNodumpAllocator in C++\nDESCRIPTION: Introduces JemallocNodumpAllocator memory allocator to exclude block cache from core dumps when used.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_22\n\nLANGUAGE: C++\nCODE:\n```\nJemallocNodumpAllocator allocator;\n```\n\n----------------------------------------\n\nTITLE: Setting up Jekyll homepage layout for RocksDB website\nDESCRIPTION: Jekyll front matter configuration for the RocksDB homepage. It defines the layout, title, and page ID for the RocksDB website homepage.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/index.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: home\ntitle: RocksDB | A persistent key-value store\nid: home\n---\n```\n\n----------------------------------------\n\nTITLE: Loading Shared Environment in C++\nDESCRIPTION: New overloaded function added to Env class to return a shared_ptr to an Env object.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_18\n\nLANGUAGE: C++\nCODE:\n```\nEnv::LoadEnv()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Creation Time of Oldest SST File in C++\nDESCRIPTION: New API added to get the file_creation_time of the oldest SST file in the database. This function takes a pointer to a uint64_t variable where the creation time will be stored.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\nGetCreationTimeOfOldestFile(uint64_t* creation_time)\n```\n\n----------------------------------------\n\nTITLE: API Changes - Block Size Type Change\nDESCRIPTION: Type change for BlockBasedTableOptions::block_size from size_t to uint64_t for consistency.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\nBlockBasedTableOptions::block_size\n```\n\n----------------------------------------\n\nTITLE: Accessing File Read DB Open Micros Statistic in RocksDB\nDESCRIPTION: Example of the statistics name that measures read time of block-based SST tables or blob files during database open.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\n\"rocksdb.file.read.db.open.micros\"\n```\n\n----------------------------------------\n\nTITLE: Using Block Checksum Mismatch Count Ticker in RocksDB\nDESCRIPTION: Example of the ticker statistic that counts how many times RocksDB detected a corruption while verifying a block checksum.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nBLOCK_CHECKSUM_MISMATCH_COUNT\n```\n\n----------------------------------------\n\nTITLE: Accessing RocksDB SST Read Micros Statistic\nDESCRIPTION: Example of the statistics name used to measure read time for SST operations in RocksDB.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\n\"rocksdb.sst.read.micros\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Trash Files Deleted Ticker in RocksDB\nDESCRIPTION: Example of the ticker name used to track the number of trash files deleted by background thread from the trash queue.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n\"rocksdb.files.marked.trash.deleted\"\n```\n\n----------------------------------------\n\nTITLE: RocksDB Changelog Entries\nDESCRIPTION: Detailed changelog entries organized by version number and category (Bug Fixes, Performance Improvements, New Features, etc.). Documents critical fixes for data loss issues, compaction improvements, and new configuration options.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n* Fix a bug where if there is an error reading from offset 0 of a file from L1+ and that the file is not the first file in the sorted run, data can be lost in compaction and read/scan can return incorrect results.\n* Fix a bug where iterator may return incorrect result for DeleteRange() users if there was an error reading from a file.\n* Fix a bug with atomic_flush=true that can cause DB to stuck after a flush fails (#11872).\n* Fix a bug where RocksDB (with atomic_flush=false) can delete output SST files of pending flushes when a previous concurrent flush fails (#11865).\n* Fix an assertion fault during seek with async_io when readahead trimming is enabled.\n* When the compressed secondary cache capacity is reduced to 0, it should be completely disabled.\n* Updating the tiered cache (cache allocated using NewTieredCache()) by calling SetCapacity() on it was not working properly.\n* Fixed a bug in `MultiGet` for cleaning up SuperVersion acquired with locking db mutex.\n* Fix a bug where row cache can falsely return kNotFound even though row cache entry is hit.\n* Fixed a race condition in `GenericRateLimiter` that could cause it to stop granting requests\n* Fix a bug (Issue #10257) where DB can hang after write stall since no compaction is scheduled (#11764).\n* Add a fix for async_io where during seek, when reading a block for seeking a target key in a file without any readahead, the iterator aligned the read on a page boundary and reading more than necessary.\n* Fix an issue in sst dump tool to handle bounds specified for data with user-defined timestamps.\n* When auto_readahead_size is enabled, update readahead upper bound during readahead trimming when reseek changes iterate_upper_bound dynamically.\n* Fixed a bug where `rocksdb.file.read.verify.file.checksums.micros` is not populated\n\n### Performance Improvements\n* Added additional improvements in tuning readahead_size during Scans when auto_readahead_size is enabled.\n* During async_io, the Seek happens in 2 phases with optimized block cache lookup.\n\n## 8.6.0 (08/18/2023)\n### New Features\n* Added enhanced data integrity checking on SST files with new format_version=6.\n* Add a new feature to trim readahead_size during scans upto upper_bound when iterate_upper_bound is specified.\n* RocksDB will compare the number of input keys to the number of keys processed after each compaction.\n* Add support to allow enabling / disabling user-defined timestamps feature.\n* Implement a new admission policy for the compressed secondary cache.\n* Add `timeout` in microsecond option to `WaitForCompactOptions`.\n\n## 8.5.0 (07/21/2023)\n### Public API Changes\n* Removed recently added APIs `GeneralCache` and `MakeSharedGeneralCache()`.\n\n### Bug Fixes\n* Fix use_after_free bug in async_io MultiReads when underlying FS enabled kFSBuffer.\n\n## 8.4.0 (06/26/2023)\n```\n\n----------------------------------------\n\nTITLE: Java MultiGet Benchmark Results - After Changes\nDESCRIPTION: Benchmark results showing improved MultiGet performance after optimization, demonstrating higher throughput for the same configurations.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nBenchmark (columnFamilyTestType) (keyCount) (keySize) (multiGetSize) (valueSize) Mode Cnt Score Error Units\nMultiGetBenchmarks.multiGetList10 no_column_family 10000 16 100 64 thrpt 25 7046.739 ± 13.299 ops/s\nMultiGetBenchmarks.multiGetList10 no_column_family 10000 16 100 1024 thrpt 25 7654.521 ± 60.121 ops/s\n```\n\n----------------------------------------\n\nTITLE: Running Jekyll Server with Custom Host\nDESCRIPTION: Command to run Jekyll's server using an actual IP address, allowing the site to be accessed from other devices on the network.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec jekyll serve --host=0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Blog Post Truncation Tag\nDESCRIPTION: HTML comment tag used to separate the post preview content from the full post content on the blog index page.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/doc-type-examples/2016-04-07-blog-post-example.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--truncate-->\n```\n\n----------------------------------------\n\nTITLE: Running Jekyll Server with Incremental Build\nDESCRIPTION: Command to run Jekyll's server with incremental build option, which is faster for content changes only.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec jekyll serve --incremental\n```\n\n----------------------------------------\n\nTITLE: Setting Up Coroutines Support for RocksDB\nDESCRIPTION: Configures compiler flags and definitions for using C++20 coroutines. Enables coroutines support and sets compatibility with Folly.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nif(USE_COROUTINES)\n  if(USE_FOLLY OR USE_FOLLY_LITE)\n    message(FATAL_ERROR \"Please specify exactly one of USE_COROUTINES,\"\n    \" USE_FOLLY, and USE_FOLLY_LITE\")\n  endif()\n  set(CMAKE_CXX_STANDARD 20)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fcoroutines -Wno-maybe-uninitialized\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-deprecated\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-redundant-move\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-invalid-memory-model\")\n  add_compile_definitions(USE_COROUTINES)\n  set(USE_FOLLY 1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Jekyll Server for Full Build\nDESCRIPTION: Command to run Jekyll's server for a full build, which is necessary for first runs or structural changes to the documentation.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec jekyll serve\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Bundler\nDESCRIPTION: Command to install all project dependencies using Bundler. Must be run in the 'docs' directory of the RocksDB project.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# run this in the 'docs' directory\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Installing Bundler for Ruby\nDESCRIPTION: Command to install the Bundler gem, which is required for managing Ruby dependencies. May require sudo privileges.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# may require sudo\ngem install bundler\n```\n\n----------------------------------------\n\nTITLE: Including Grid Blocks with Liquid Template\nDESCRIPTION: Liquid template syntax for including grid blocks using data from features.yml file.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/CONTRIBUTING.md#2025-04-11_snippet_2\n\nLANGUAGE: liquid\nCODE:\n```\n{% include content/gridblocks.html data_source=site.data.features imagealign=\"bottom\"%}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Grid Block Layout\nDESCRIPTION: HTML example for creating a grid block layout with two columns containing features and information sections.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"gridBlock\">\n  <div class=\"blockElement twoByGridBlock alignLeft\">\n    <div class=\"blockContent\">\n      <h3>Your Features</h3>\n      <ul>\n        <li>The <a href=\"http://example.org/\">Example</a></li>\n        <li><a href=\"http://example.com\">Another Example</a></li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"blockElement twoByGridBlock alignLeft\">\n    <div class=\"blockContent\">\n      <h3>More information</h3>\n      <p>\n         Stuff here\n      </p>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Markdown CLA Link Reference\nDESCRIPTION: A markdown link reference to Facebook's Contributor License Agreement submission page.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<https://code.facebook.com/cla>\n```\n\n----------------------------------------\n\nTITLE: Running Release Notes Addition Script with File Path\nDESCRIPTION: Command to add a new release note file using the provided shell script with a specific file path\nSOURCE: https://github.com/facebook/rocksdb/blob/main/unreleased_history/README.txt#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ unreleased_history/add.sh unreleased_history/bug_fixes/crash_in_feature.md\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests - Shell Command\nDESCRIPTION: Command to execute unit tests for the db_log_parser module using Python's unittest framework in verbose mode.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/tools/advisor/README.md#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd rocksdb/tools/advisor\npython3 -m unittest -v test.test_db_log_parser\n```\n\n----------------------------------------\n\nTITLE: Querying DB Property for Compression Ratio in C++\nDESCRIPTION: Demonstrates how to query the estimated per-level compression ratio using the new DB property 'rocksdb.compression-ratio-at-levelN'. This allows monitoring compression effectiveness at different levels of the LSM tree.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_44\n\nLANGUAGE: C++\nCODE:\n```\nstd::string property_value;\ndb->GetProperty(\"rocksdb.compression-ratio-at-level0\", &property_value);\n```\n\n----------------------------------------\n\nTITLE: Running RocksDB Advisor Tool - Shell Command\nDESCRIPTION: Command to execute the RocksDB Advisor tool from the command line. It specifies the rules file, RocksDB options, log files path, and statistics dump period.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/tools/advisor/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd rocksdb/tools/advisor\npython3 -m advisor.rule_parser_example --rules_spec=advisor/rules.ini --rocksdb_options=test/input_files/OPTIONS-000005 --log_files_path_prefix=test/input_files/LOG-0 --stats_dump_period_sec=20\n```\n\n----------------------------------------\n\nTITLE: Database Options Concrete Implementation\nDESCRIPTION: Shows the concrete implementation class for Database options that implements both regular and mutable database interfaces.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/understanding_options.md#2025-04-11_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nclass DBOptions extends RocksObject\n    implements DBOptionsInterface<DBOptions>,\n    MutableDBOptionsInterface<DBOptions>\n```\n\n----------------------------------------\n\nTITLE: Setting Preserve Deletes Sequence Number in C++\nDESCRIPTION: New API call to set a sequence number threshold for preserving delete tombstones. Deletes with sequence numbers below this threshold can be dropped by the DB.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_30\n\nLANGUAGE: C++\nCODE:\n```\nDB::SetPreserveDeletesSequenceNumber(SequenceNumber seqnum)\n```\n\n----------------------------------------\n\nTITLE: Java Interface Hierarchy for Column Family Options\nDESCRIPTION: Defines the interface hierarchy for Column Family options in Java, showing the relationship between regular and advanced option interfaces.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/understanding_options.md#2025-04-11_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ninterface ColumnFamilyOptionsInterface<T extends ColumnFamilyOptionsInterface<T>>\n    extends AdvancedColumnFamilyOptionsInterface<T>\ninterface MutableColumnFamilyOptionsInterface<T extends MutableColumnFamilyOptionsInterface<T>>\n    extends AdvancedMutableColumnFamilyOptionsInterface<T>\n```\n\n----------------------------------------\n\nTITLE: Compiling RocksJava JMH Benchmarks\nDESCRIPTION: Maven command to compile and package the JMH benchmarks for RocksJava. This creates a runnable JAR containing the benchmarks.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/jmh/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn package\n```\n\n----------------------------------------\n\nTITLE: Installing RocksDB OSX JAR for Benchmarking\nDESCRIPTION: Command to install a locally built RocksDB JAR file as a Maven dependency. This allows testing local changes with the benchmarks by installing a SNAPSHOT version of rocksdbjni.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/jmh/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn install:install-file -Dfile=./java/target/rocksdbjni-8.11.0-SNAPSHOT-osx.jar -DgroupId=org.rocksdb -DartifactId=rocksdbjni -Dversion=8.11.0-SNAPSHOT -Dpackaging=jar\n```\n\n----------------------------------------\n\nTITLE: Building JMH Test Package for RocksDB\nDESCRIPTION: Command to build the JMH test package for RocksDB performance benchmarking.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/java/GetPutBenchmarks.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npushd java/jmh\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Installing RocksDB CMake Target Exports\nDESCRIPTION: Sets up installation of RocksDB target export files to allow other projects to import RocksDB as a dependency using CMake.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/CMakeLists.txt#2025-04-11_snippet_44\n\nLANGUAGE: cmake\nCODE:\n```\n  install(\n    EXPORT RocksDBTargets\n    COMPONENT devel\n    DESTINATION ${package_config_destination}\n    NAMESPACE RocksDB::\n  )\n```\n\n----------------------------------------\n\nTITLE: Introducing Bug in RocksDB SstFileWriter::Put Method\nDESCRIPTION: This diff introduces a deliberate bug in the SstFileWriter::Put method to demonstrate the fuzzer's ability to catch it. The bug causes corruption when the key starts with '!' and the value ends with '!'.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/fuzz/README.md#2025-04-11_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/table/sst_file_writer.cc b/table/sst_file_writer.cc\nindex ab1ee7c4e..c7da9ffa0 100644\n--- a/table/sst_file_writer.cc\n+++ b/table/sst_file_writer.cc\n@@ -277,6 +277,11 @@ Status SstFileWriter::Add(const Slice& user_key, const Slice& value) {\n }\n \n Status SstFileWriter::Put(const Slice& user_key, const Slice& value) {\n+  if (user_key.starts_with(\"!\")) {\n+    if (value.ends_with(\"!\")) {\n+      return Status::Corruption(\"bomb\");\n+    }\n+  }\n   return rep_->Add(user_key, value, ValueType::kTypeValue);\n }\n```\n\n----------------------------------------\n\nTITLE: Defining Proto Fuzzer for RocksDB SstFileWriter\nDESCRIPTION: This snippet defines a proto fuzzer for testing RocksDB's SstFileWriter. It uses a custom input type 'DBOperations' defined in a protobuf file.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/fuzz/README.md#2025-04-11_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nDEFINE_PROTO_FUZZER(DBOperations& input) {\n  // apply the operations to SstFileWriter and use SstFileReader to verify checksum.\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Including RocksDB feature grid blocks using Jekyll includes\nDESCRIPTION: Jekyll include directive that loads the gridblocks.html template with feature data and center alignment for displaying RocksDB features on the homepage.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/index.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% include content/gridblocks.html data_source=site.data.features align=\"center\" %}\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter for a Top-Level Static Page in RocksDB Documentation\nDESCRIPTION: YAML frontmatter that defines a static page at the top-level of the RocksDB documentation. It specifies the layout, title, id, and category metadata needed for the page to be properly integrated into the site structure.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/doc-type-examples/top-level-example.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: top-level\ntitle: Support Example\nid: top-level-example\ncategory: top-level\n---\n```\n\n----------------------------------------\n\nTITLE: Author Configuration File Path\nDESCRIPTION: Specifies the YAML file path where author information is defined for blog posts.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/doc-type-examples/2016-04-07-blog-post-example.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n_data/authors.yml\n```\n\n----------------------------------------\n\nTITLE: Checking Status in RocksDB C++\nDESCRIPTION: This snippet demonstrates how to check if a RocksDB operation succeeded by examining the Status object and printing error messages when necessary.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/docs/_docs/getting-started.md#2025-04-11_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nrocksdb::Status s = ...;\nif (!s.ok()) cerr << s.ToString() << endl;\n```\n\n----------------------------------------\n\nTITLE: Windows Specific Macro Definition for Size Type Printing\nDESCRIPTION: Platform-specific macro definition for printing size_t values, using 'zu' on POSIX systems and 'Iu' on Windows to handle printf format specifier differences.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/WINDOWS_PORT.md#2025-04-11_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nROCKSDB_PRIszt\n```\n\n----------------------------------------\n\nTITLE: Installing Google Benchmark for Microbenchmarks\nDESCRIPTION: Commands to clone, build, and install Google Benchmark library, which is required for running RocksDB microbenchmarks.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/INSTALL.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth 1 --branch v1.7.0 https://github.com/google/benchmark.git ~/benchmark\ncd ~/benchmark && mkdir build && cd build && cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DBENCHMARK_ENABLE_GTEST_TESTS=0 && ninja && ninja install\n```\n\n----------------------------------------\n\nTITLE: Compiling RocksDB Shared Library in Release Mode\nDESCRIPTION: Command to compile the RocksDB shared library (librocksdb.so) in release mode.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/INSTALL.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake shared_lib\n```\n\n----------------------------------------\n\nTITLE: Compiling RocksDB Examples in Shell\nDESCRIPTION: These commands change to the examples directory and compile all example projects. This should be done after compiling the static library.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/examples/README.md#2025-04-11_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd examples/; make all\n```\n\n----------------------------------------\n\nTITLE: Building gtest library and linking with thread library in CMake\nDESCRIPTION: Creates a library target for Google Test (gtest) from the gtest-all.cc source file and links it with the thread library that CMake has identified for the current platform. This ensures gtest has proper thread support for test execution.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/third-party/gtest-1.8.1/fused-src/gtest/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(gtest gtest-all.cc)\n\n# Add dependency of gtest on thread library\ntarget_link_libraries(gtest ${CMAKE_THREAD_LIBS_INIT})\n```\n\n----------------------------------------\n\nTITLE: Running RocksDB Benchmark with Multiple Repetitions\nDESCRIPTION: Command to run a benchmark test multiple times to check result variation using the benchmark_repetitions flag.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/microbench/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./db_basic_bench --benchmark_filter=<TEST_NAME> --benchmark_repetitions=10\n```\n\n----------------------------------------\n\nTITLE: Resetting Database Statistics in C++\nDESCRIPTION: New methods to reset internal database statistics and user-defined statistics.\nSOURCE: https://github.com/facebook/rocksdb/blob/main/HISTORY.md#2025-04-11_snippet_36\n\nLANGUAGE: C++\nCODE:\n```\nDB::ResetStats()\n```\n\nLANGUAGE: C++\nCODE:\n```\nStatistics::Reset()\n```"
  }
]