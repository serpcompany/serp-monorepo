[
  {
    "owner": "laravel",
    "repo": "wayfinder",
    "content": "TITLE: Using Wayfinder Functions in TypeScript\nDESCRIPTION: Examples of how to use Wayfinder-generated functions to interact with Laravel endpoints, including different parameter passing methods.\nSOURCE: https://github.com/laravel/wayfinder/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { show } from \"@/actions/App/Http/Controllers/PostController\";\n\nshow(1); // { url: \"/posts/1\", method: \"get\" }\n\nshow.url(1); // \"/posts/1\"\nshow.head(1); // { url: \"/posts/1\", method: \"head\" }\n\n// Single parameter action...\nshow(1);\nshow({ id: 1 });\n\n// Multiple parameter action...\nupdate([1, 2]);\nupdate({ post: 1, author: 2 });\nupdate({ post: { id: 1 }, author: { id: 2 } });\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Definitions with Wayfinder\nDESCRIPTION: Commands to generate TypeScript definitions for routes and controller methods using Wayfinder, including options for customization.\nSOURCE: https://github.com/laravel/wayfinder/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan wayfinder:generate\nphp artisan wayfinder:generate --path=resources/js/wayfinder\nphp artisan wayfinder:generate --skip-actions\nphp artisan wayfinder:generate --skip-routes\n```\n\n----------------------------------------\n\nTITLE: Using Wayfinder with Inertia Link Component\nDESCRIPTION: Shows how to use Wayfinder-generated functions with Inertia's Link component for navigation.\nSOURCE: https://github.com/laravel/wayfinder/blob/main/README.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Link } from \"@inertiajs/react\";\nimport { show } from \"@/actions/App/Http/Controllers/PostController\";\n\nconst Nav = () => <Link href={show(1)}>Show me the first post</Link>;\n```\n\n----------------------------------------\n\nTITLE: Using Wayfinder with Inertia Forms\nDESCRIPTION: Demonstrates how to use Wayfinder-generated functions with Inertia's useForm hook for form submissions.\nSOURCE: https://github.com/laravel/wayfinder/blob/main/README.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from \"@inertiajs/react\";\nimport { store } from \"@/actions/App/Http/Controllers/PostController\";\n\nconst form = useForm({\n    name: \"My Big Post\",\n});\n\nform.submit(store()); // Will POST to `/posts`...\n```\n\n----------------------------------------\n\nTITLE: Using Wayfinder Form Variants in React Components\nDESCRIPTION: Examples of using Wayfinder-generated form variants in React components for automatic form attribute generation.\nSOURCE: https://github.com/laravel/wayfinder/blob/main/README.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { store, update } from \"@/actions/App/Http/Controllers/PostController\";\n\nconst Page = () => (\n    <form {...store.form()}>\n        {/* <form action=\"/posts\" method=\"post\"> */}\n        {/* ... */}\n    </form>\n);\n\nconst Page = () => (\n    <form {...update.form(1)}>\n        {/* <form action=\"/posts/1?_method=PATCH\" method=\"post\"> */}\n        {/* ... */}\n    </form>\n);\n\nconst Page = () => (\n    <form {...update.form.put(1)}>\n        {/* <form action=\"/posts/1?_method=PUT\" method=\"post\"> */}\n        {/* ... */}\n    </form>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Query Parameters with Wayfinder Functions\nDESCRIPTION: Demonstrates how to use query parameters with Wayfinder-generated functions, including merging and removing parameters.\nSOURCE: https://github.com/laravel/wayfinder/blob/main/README.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { show } from \"@/actions/App/Http/Controllers/PostController\";\n\nconst options = {\n    query: {\n        page: 1,\n        sort_by: \"name\",\n    },\n};\n\nshow(1, options); // { url: \"/posts/1?page=1&sort_by=name\", method: \"get\" }\nshow.get(1, options); // { url: \"/posts/1?page=1&sort_by=name\", method: \"get\" }\nshow.url(1, options); // \"/posts/1?page=1&sort_by=name\"\nshow.form.head(1, options); // { action: \"/posts/1?page=1&sort_by=name&_method=HEAD\", method: \"get\" }\n\n// window.location.search = \"?page=1&sort_by=category&q=shirt\"\n\nconst options = {\n    mergeQuery: {\n        page: 2,\n        sort_by: \"name\",\n    },\n};\n\nshow.url(1, options); // \"/posts/1?page=2&sort_by=name&q=shirt\"\n\n// window.location.search = \"?page=1&sort_by=category&q=shirt\"\n\nconst options = {\n    mergeQuery: {\n        page: 2,\n        sort_by: null,\n    },\n};\n\nshow.url(1, options); // \"/posts/1?page=2&q=shirt\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Wayfinder Controller Definitions\nDESCRIPTION: Shows how to import and use Wayfinder-generated controller definitions in TypeScript.\nSOURCE: https://github.com/laravel/wayfinder/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport PostController from \"@/actions/App/Http/Controllers/PostController\";\n\nPostController.show(1);\n```\n\n----------------------------------------\n\nTITLE: Using Wayfinder with Named Routes\nDESCRIPTION: Demonstrates how to use Wayfinder-generated functions for named routes in TypeScript.\nSOURCE: https://github.com/laravel/wayfinder/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { show } from \"@/routes/post\";\n\n// Named route is `post.show`...\nshow(1); // { url: \"/posts/1\", method: \"get\" }\n```\n\n----------------------------------------\n\nTITLE: Using Wayfinder with Invokable Controllers\nDESCRIPTION: Demonstrates how to use Wayfinder functions with invokable controllers in TypeScript.\nSOURCE: https://github.com/laravel/wayfinder/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport StorePostController from \"@/actions/App/Http/Controllers/StorePostController\";\n\nStorePostController();\n```\n\n----------------------------------------\n\nTITLE: Generating Wayfinder TypeScript Definitions with Form Support\nDESCRIPTION: Command to generate Wayfinder TypeScript definitions with support for conventional HTML form submissions.\nSOURCE: https://github.com/laravel/wayfinder/blob/main/README.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan wayfinder:generate --with-form\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Wayfinder via Composer\nDESCRIPTION: Command to install Laravel Wayfinder package using Composer package manager.\nSOURCE: https://github.com/laravel/wayfinder/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/wayfinder\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Wayfinder file watching\nDESCRIPTION: Updates the vite.config.js file to watch for changes in routes and controllers, triggering Wayfinder generation.\nSOURCE: https://github.com/laravel/wayfinder/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { run } from \"vite-plugin-run\";\n\nexport default defineConfig({\n    plugins: [\n        // ...\n        run([\n            {\n                name: \"wayfinder\",\n                run: [\"php\", \"artisan\", \"wayfinder:generate\"],\n                pattern: [\"routes/**/*.php\", \"app/**/Http/**/*.php\"],\n            },\n        ]),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing vite-plugin-run for file watching\nDESCRIPTION: Command to install the vite-plugin-run npm package for automatically watching files for changes.\nSOURCE: https://github.com/laravel/wayfinder/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D vite-plugin-run\n```"
  }
]