[
  {
    "owner": "invertase",
    "repo": "melos",
    "content": "TITLE: Configuring Root pubspec.yaml for Melos Workspace\nDESCRIPTION: Example configuration for the root pubspec.yaml file that defines a Dart workspace with multiple packages and specifies the Dart SDK version requirement.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/getting-started.mdx#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: my_project\npublish_to: none\nenvironment:\n  sdk: ^3.6.0\nworkspace:\n  - packages/helper\n  - packages/client_package\n  - packages/server_package\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic melos.yaml Configuration\nDESCRIPTION: Example of a basic melos.yaml configuration file that defines the project name and specifies which package directories to include in the workspace.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/getting-started.mdx#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: my_project\n\npackages:\n  - apps/**\n  - packages/**\n```\n\n----------------------------------------\n\nTITLE: Configuring Root pubspec.yaml for Melos 7.x Workspace\nDESCRIPTION: Example configuration for the root pubspec.yaml file in a Melos workspace, showing workspace package declarations and melos configuration setup. Requires Dart SDK 3.6.0 or newer.\nSOURCE: https://github.com/invertase/melos/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: my_workspace\npublish_to: none\nenvironment:\n  sdk: ^3.6.0\nworkspace:\n  - packages/helper\n  - packages/client_package\n  - packages/server_package\ndev_dependencies:\n  melos: ^7.0.0\n\nmelos:\n  # All of the content of your previous melos.yaml file\n  # (Except for the packages and name)\n```\n\n----------------------------------------\n\nTITLE: Using Melos Programmatically in Dart\nDESCRIPTION: Example of how to use Melos commands programmatically by importing the Melos package in Dart code. Shows initializing Melos and calling bootstrap and publish methods.\nSOURCE: https://github.com/invertase/melos/blob/main/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal melos = Melos(workingDirectory: Directory.current);\n\nawait melos.bootstrap();\nawait melos.publish(dryRun: false);\n```\n\n----------------------------------------\n\nTITLE: Recommended Monorepo Directory Structure with Melos\nDESCRIPTION: Example of the recommended directory structure for a Melos workspace, showing the organization of apps and packages with configuration files at the root.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/getting-started.mdx#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nmy_project\n├── apps\n│   ├── apps_1\n│   └── apps_2\n├── packages\n│   ├── package_1\n│   └── package_2\n├── melos.yaml\n├── pubspec.yaml\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping a Melos Workspace\nDESCRIPTION: Command to bootstrap a Melos workspace, which installs dependencies, syncs shared dependencies between packages, and runs any bootstrap lifecycle scripts.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/getting-started.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmelos bootstrap\n```\n\n----------------------------------------\n\nTITLE: Installing Melos globally using Dart Pub\nDESCRIPTION: Command to install Melos as a global package via pub.dev so it can be used from anywhere on your system.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/getting-started.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate melos\n```\n\n----------------------------------------\n\nTITLE: Using Melos Bootstrap Command in Bash\nDESCRIPTION: Basic usage of the Melos bootstrap command with its shorthand alternative. This command initializes the workspace and installs dependencies across all packages in the monorepo.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/bootstrap.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmelos bootstrap\n# or\nmelos bs\n```\n\n----------------------------------------\n\nTITLE: Adding Post-Bootstrap Lifecycle Script in melos.yaml\nDESCRIPTION: Configuring a post-bootstrap hook that automatically runs after bootstrap completes. This example shows how to run build_runner to generate code after dependencies are installed.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/bootstrap.mdx#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# melos.yaml\n# ...\ncommand:\n  bootstrap:\n    hooks:\n      post: dart pub run build_runner build\n# ...\n```\n\n----------------------------------------\n\nTITLE: Publishing Packages to pub.dev\nDESCRIPTION: Demonstrates how to publish versioned packages to pub.dev by using the melos publish command with the --no-dry-run flag to perform an actual publish.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/guides/automated-releases.mdx#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmelos publish --no-dry-run\n```\n\n----------------------------------------\n\nTITLE: Configuring Melos Exec Script in YAML\nDESCRIPTION: Shows how to configure a script to be executed in multiple packages using the 'exec' option, with a simple command example.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/scripts.mdx#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nscripts:\n  hello:\n    exec: echo 'Hello $(dirname $PWD)'\n```\n\n----------------------------------------\n\nTITLE: Configuring Scripts in melos.yaml\nDESCRIPTION: Example of defining a custom script in melos.yaml that runs build_runner across all packages that depend on it, with concurrency limited to 1.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/getting-started.mdx#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: my_project\n\npackages:\n  - apps/**\n  - packages/**\n\nscripts:\n  generate:\n    run: melos exec -c 1 --depends-on build_runner -- dart run build_runner build\n```\n\n----------------------------------------\n\nTITLE: Melos Workspace Directory Structure\nDESCRIPTION: Example of the standard directory structure for a Melos workspace, showing the root pubspec.yaml and package organization.\nSOURCE: https://github.com/invertase/melos/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmy-melos-repo/\n  pubspec.yaml\n  packages/\n    package-1/\n      pubspec.yaml\n    package-2/\n      pubspec.yaml\n```\n\n----------------------------------------\n\nTITLE: Filtering Packages by Git Diff with Melos\nDESCRIPTION: Filter packages based on changes between Git commits using the --diff flag. This can target packages that changed between a specific commit and HEAD or within a range of commits using Git's shorthand syntax.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/filters.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Run `flutter build ios` on all packages that are different between current\n# branch and the specified commit hash.\nmelos exec --diff=<commit hash> -- flutter build ios\n\n# Run `flutter build ios` on all packages that are different between remote\n# `main` branch and HEAD.\nmelos exec --diff=origin/main...HEAD -- flutter build ios\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Melos Script in YAML\nDESCRIPTION: Demonstrates how to define a basic script named 'hello' in the Melos configuration of pubspec.yaml. The script simply echoes 'Hello World'.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/scripts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmelos:\n  scripts:\n    hello: echo 'Hello World'\n```\n\n----------------------------------------\n\nTITLE: Including Package Dependencies with Melos\nDESCRIPTION: Expand the filtered list of packages to include their transitive dependencies using the --include-dependencies flag. This ensures all required packages are included regardless of other filters.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/filters.mdx#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmelos list --scope=some_package --include-dependencies\n```\n\n----------------------------------------\n\nTITLE: Configuring Package pubspec.yaml for Workspace Resolution\nDESCRIPTION: Example of how to configure a package's pubspec.yaml to use workspace resolution, enabling package dependencies to be resolved within the monorepo.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/getting-started.mdx#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: my_package\nresolution: workspace\n\n...\n```\n\n----------------------------------------\n\nTITLE: Executing Arbitrary Commands with Melos Exec\nDESCRIPTION: Demonstrates how to use the 'melos exec' command to run arbitrary commands in each package. The example shows running a pub global command.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/exec.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmelos exec\n# e.g. melos exec -- pub global run tuneup check\n```\n\n----------------------------------------\n\nTITLE: Filtering Melos Bootstrap Command for Changed Packages\nDESCRIPTION: Example of combining the bootstrap command with filtering options to only bootstrap packages that have changed since a specific branch.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/bootstrap.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Only bootstrap packages that have\n# changed since the main branch.\nmelos bootstrap --diff=\"main\"\n```\n\n----------------------------------------\n\nTITLE: Adding Melos as a Development Dependency\nDESCRIPTION: Command to add Melos as a development dependency to the root project, ensuring all developers use the same version of Melos.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/getting-started.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndart pub add melos --dev\n```\n\n----------------------------------------\n\nTITLE: Filtering Packages by Category with Melos\nDESCRIPTION: Filter packages based on categories declared in the melos.yaml file using the --category flag. This allows grouping packages by purpose or type and targeting specific groups with commands.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/filters.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Run `flutter build ios` on all packages in the \"examples\" category.\nmelos exec --category=\"examples\" -- flutter build ios\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Step Melos Script in YAML\nDESCRIPTION: Illustrates how to define a complex script with multiple steps, combining simple commands and Melos commands with specific arguments.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/scripts.mdx#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nscripts:\n  pre-commit:\n    description: pre-commit git hook script\n    steps:\n      - echo 'hello world'\n      - format --output none --set-exit-if-changed\n      - analyze --fatal-infos\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Command Hooks in YAML\nDESCRIPTION: Example of how to set up a preCommit hook for the version command in the melos.yaml configuration file. This hook allows for custom actions before the version commit is created.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/version.mdx#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  version:\n    hooks:\n      preCommit: |\n        # Make changes to the version commit here.\n        # You need to stage changes that you make yourself.\n```\n\n----------------------------------------\n\nTITLE: Filtering Packages by File Existence with Melos\nDESCRIPTION: Include only packages where a specific file exists in the package using the --file-exists flag. This can target packages containing particular configuration or documentation files.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/filters.mdx#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Only bootstrap packages with an README.md file\nmelos bootstrap --file-exists=\"README.md\"\n```\n\n----------------------------------------\n\nTITLE: Defining Extended Melos Script in YAML\nDESCRIPTION: Shows an extended script configuration named 'hello' with additional properties like name, description, run command, and environment variables.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/scripts.mdx#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nscripts:\n  hello:\n    name: hey\n    description: Greet the world\n    run: echo '$GREETING World'\n    env:\n      GREETING: 'Hey'\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Clean Post-Clean Hook\nDESCRIPTION: Example of configuring a post-clean hook to run 'flutter clean' in all Flutter packages with concurrency control.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/clean.mdx#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# melos.yaml\n# ...\ncommand:\n  clean:\n    hooks:\n      # Runs \"flutter clean\" in all Flutter packages (`--flutter`)\n      # with a concurrency of 3 at a time (`--concurrency=3`).\n      post: melos exec --flutter --concurrency=3 -- \"flutter clean\"\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Dependencies in melos.yaml\nDESCRIPTION: YAML configuration for shared dependencies across packages. This ensures consistent dependency versions throughout the monorepo by defining them centrally in the melos.yaml file.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/bootstrap.mdx#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# melos.yaml\n# ...\ncommand:\n  bootstrap:\n    environment:\n      sdk: \">=3.0.0 <4.0.0\"\n      flutter: \">=3.0.0 <4.0.0\"\n    dependencies:\n      collection: ^1.18.0\n      integral_isolates: any\n      uni_links2:\n      uni_links_macos:\n        git: https://github.com/SamJakob/uni_links_macos.git\n    \n    dev_dependencies:\n      build_runner: ^2.3.3\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Package pubspec.yaml for Melos Workspace\nDESCRIPTION: Example configuration for individual package pubspec.yaml files in a Melos workspace, showing the required workspace resolution setting.\nSOURCE: https://github.com/invertase/melos/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: my_package\nenvironment:\n  sdk: ^3.6.0\nresolution: workspace\n```\n\n----------------------------------------\n\nTITLE: Executing Melos Version Command in Bash\nDESCRIPTION: Basic usage of the 'melos version' command to automatically version and generate changelogs for all packages in a Melos project.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/version.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmelos version\n```\n\n----------------------------------------\n\nTITLE: Melos Publish Hooks Configuration\nDESCRIPTION: YAML configuration example showing how to set up pre and post publish hooks in melos.yaml.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/publish.mdx#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# melos.yaml\n# ...\ncommand:\n  publish:\n    hooks:\n      pre: dart pub run build_runner build\n      post: dart pub run build_runner clean\n# ...\n```\n\n----------------------------------------\n\nTITLE: Melos Publish Dry Run Options\nDESCRIPTION: Examples showing how to use Melos publish with and without dry-run mode.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/publish.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Publish packages with dry run\nmelos publish --dry-run\n\n# Publish packages without dry run\nmelos publish --no-dry-run\n```\n\n----------------------------------------\n\nTITLE: Executing Melos Run Command\nDESCRIPTION: This snippet demonstrates the basic usage of the 'melos run' command to execute a script defined in the workspace 'melos.yaml' configuration file. The <name> parameter should be replaced with the actual script name.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/run.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmelos run <name>\n```\n\n----------------------------------------\n\nTITLE: Filtering Packages by Name Pattern with Melos\nDESCRIPTION: Include only packages with names matching a specific glob pattern using the --scope flag. This option can be used multiple times to include packages matching different patterns.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/filters.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Run `flutter build ios` on all packages with \"example\" in the package name\nmelos exec --scope=\"*example*\" -- flutter build ios\n```\n\n----------------------------------------\n\nTITLE: Melos Publish with Git Tag Version\nDESCRIPTION: Command to publish packages with git tag version creation enabled.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/publish.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmelos publish --no-dry-run --git-tag-version\n```\n\n----------------------------------------\n\nTITLE: Filtering Packages by Dependencies with Melos\nDESCRIPTION: Include only packages that depend on specific dependencies using the --depends-on flag. This option can be repeated to filter packages that depend on multiple dependencies.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/filters.mdx#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmelos exec --depends-on=\"flutter\" --depends-on=\"firebase_core\" -- flutter test\n```\n\n----------------------------------------\n\nTITLE: Using Fail-Fast Option with Melos Exec\nDESCRIPTION: Shows how to use the '--fail-fast' option with 'melos exec'. This option stops execution in further packages if the script fails in any individual package.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/exec.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Fail fast\nmelos exec --fail-fast -- \"dart analyze .\"\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple Commands with Melos Exec\nDESCRIPTION: Shows how to execute multiple commands using 'melos exec'. Commands are connected with '&&' to ensure they run sequentially and stop if one fails.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/exec.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmelos exec -- \"melos bootstrap && melos run build\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Package pubspec.yaml for Melos 7.x.x\nDESCRIPTION: Example of a package's pubspec.yaml file after migrating to Melos 7.x.x. It demonstrates the required 'resolution: workspace' configuration needed to enable pub workspaces integration.\nSOURCE: https://github.com/invertase/melos/blob/main/packages/melos/README.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: my_package\nenvironment:\n  sdk: ^3.6.0\nresolution: workspace\n```\n\n----------------------------------------\n\nTITLE: Fresh Start Cleaning Workflow\nDESCRIPTION: A common pattern to give your workspace a fresh start by cleaning and then bootstrapping again.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/clean.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmelos clean\nmelos bootstrap\n```\n\n----------------------------------------\n\nTITLE: Configuring Root pubspec.yaml for Melos 7.x.x\nDESCRIPTION: Example configuration for the root pubspec.yaml file after migrating to Melos 7.x.x, showing how to define workspace packages and include melos configuration that was previously in melos.yaml.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/guides/migrations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: my_workspace\npublish_to: none\nenvironment:\n  sdk: ^3.6.0\nworkspace:\n  - packages/helper\n  - packages/client_package\n  - packages/server_package\ndev_dependencies:\n  melos: ^7.0.0\n\nmelos:\n  # All of the content of your previous melos.yaml file\n  # (Except for the packages and name)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Melos Workspace with Basic Command\nDESCRIPTION: This snippet demonstrates the basic usage of the 'init' command in Melos. It allows you to initialize a new Melos workspace with an optional workspace name.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/init.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmelos init [workspace_name]\n```\n\n----------------------------------------\n\nTITLE: Running Melos Version Command for Manual Versioning\nDESCRIPTION: Shows how to use the melos version command to manually version a single package by specifying the package name and desired version change.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/guides/automated-releases.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmelos version <package-name> <version-change>\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Filters for Melos Script in YAML\nDESCRIPTION: Shows how to use packageFilters to restrict script execution to specific packages, in this case, only Flutter packages.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/scripts.mdx#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nscripts:\n  hello_flutter:\n    exec: echo 'Hello $(dirname $PWD)'\n    packageFilters:\n      flutter: true\n```\n\n----------------------------------------\n\nTITLE: Running the Melos Clean Command\nDESCRIPTION: Basic usage of the clean command to remove temporary pub and generated Melos IDE files from the workspace and packages.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/clean.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmelos clean\n```\n\n----------------------------------------\n\nTITLE: Defining Melos Command Hooks in YAML\nDESCRIPTION: Demonstrates how to configure pre and post hooks for Melos commands, using the bootstrap command as an example.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/scripts.mdx#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  bootstrap:\n    hooks:\n      pre: echo `bootstrap command is running...`\n      post: echo `bootstrap command is done`\n```\n\n----------------------------------------\n\nTITLE: Basic Melos List Command Usage\nDESCRIPTION: The basic command to list information about the local packages in a Melos workspace.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmelos list\n```\n\n----------------------------------------\n\nTITLE: Controlling Changelog Generation in Melos Version Command\nDESCRIPTION: Examples of using the --changelog/-c flag to enable or disable CHANGELOG.md file updates based on conventional commit messages.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/version.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmelos version --changelog\nmelos version -c\n```\n\n----------------------------------------\n\nTITLE: Melos Run Command with No-Select Option\nDESCRIPTION: This snippet shows how to use the '--no-select' option with the 'melos run' command. This option skips the prompt to select a package, but still applies filters defined in the script's 'packageFilters' options.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/run.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmelos run <name> --no-select\n```\n\n----------------------------------------\n\nTITLE: Configuring Repository URL in Melos\nDESCRIPTION: Defines the URL of the git repository containing the Melos workspace. Supports GitHub, GitLab, Bitbucket, and Azure DevOps.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/overview.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmelos:\n  repository: https://github.com/invertase/melos\n```\n\n----------------------------------------\n\nTITLE: Displaying Melos CLI Help Command Output\nDESCRIPTION: Shows the output of running 'melos --help' which lists all available commands and options for the Melos CLI tool, including bootstrap, clean, exec, format, list, publish, run, and version commands.\nSOURCE: https://github.com/invertase/melos/blob/main/packages/melos/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> melos --help\n\nA CLI tool for managing Dart & Flutter projects with multiple packages.\n\nUsage: melos <command> [arguments]\n\nGlobal options:\n-h, --help        Print this usage information.\n    --verbose     Enable verbose logging.\n    --sdk-path    Path to the Dart/Flutter SDK that should be used. This command line option has\n                  precedence over the `sdkPath` option in the root `pubspec.yaml` configuration\n                  file and the `MELOS_SDK_PATH` environment variable. To use the system-wide SDK,\n                  provide the special value \"auto\".\n\nAvailable commands:\n  bootstrap   Initialize the workspace, link local packages together and install remaining package\n              dependencies. Supports all package filtering options.\n  clean       Clean this workspace and all packages. This deletes the temporary pub & ide files such\n              as \".packages\" & \".flutter-plugins\". Supports all package filtering options.\n  exec        Execute an arbitrary command in each package. Supports all package filtering options.\n  format      Idiomatically format Dart source code.\n  list        List local packages in various output formats. Supports all package filtering options.\n  publish     Publish any unpublished packages or package versions in your repository to pub.dev. Dry\n              run is on by default.\n  run         Run a script by name defined in the workspace pubspec.yaml config file.\n  version     Automatically version and generate changelogs based on the Conventional Commits\n              specification. Supports all package filtering options.\n\nRun \"melos help <command>\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Clean Lifecycle Script\nDESCRIPTION: Example of adding a post-clean hook in melos.yaml to remove specific generated files after the clean command is executed.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/clean.mdx#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# melos.yaml\n# ...\ncommand:\n  clean:\n    hooks:\n      post: rm packages/foo/lib/src/generated_file.g.dart\n# ...\n```\n\n----------------------------------------\n\nTITLE: Finding Dependency Cycles in Workspace\nDESCRIPTION: Detects and reports cycles in package dependencies, which can help identify circular dependencies that could cause problems.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/list.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmelos list --cycles\n```\n\n----------------------------------------\n\nTITLE: Ignoring Packages in Melos\nDESCRIPTION: Specifies paths to local packages that should be excluded from the Melos workspace using glob patterns.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/overview.mdx#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nignore:\n  # e.g. ignore example apps\n  - 'packages/**/example'\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Information as JSON\nDESCRIPTION: Shows package information as a formatted JSON array, which is useful for programmatic processing of package data.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/list.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmelos list --json\n```\n\n----------------------------------------\n\nTITLE: Configuring Aggregate Changelogs in Melos\nDESCRIPTION: Defines aggregate changelog files that document changes across multiple packages, with custom paths, descriptions, and package filters.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/overview.mdx#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nmelos:\n  command:\n    version:\n      changelogs:\n        - path: FOO_CHANGELOG.md\n          description: |\n            All notable changes to foo packages will be documented in this file.\n          packageFilters:\n            scope: foo_*\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-hosted Repository in Melos\nDESCRIPTION: Specifies a self-hosted git repository configuration for Melos, including the repository type, origin URL, owner, and name.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/overview.mdx#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmelos:\n  repository:\n    type: gitlab\n    origin: https://gitlab.example.dev\n    owner: invertase\n    name: melos\n```\n\n----------------------------------------\n\nTITLE: Chaining Commands in Melos Script\nDESCRIPTION: Demonstrates how to chain multiple commands in a single Melos script using '&&' to ensure all commands are executed only if the previous ones succeed.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/scripts.mdx#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nscripts:\n  prepare: melos bootstrap && melos run build\n```\n\n----------------------------------------\n\nTITLE: Filtering Flutter Packages with Melos\nDESCRIPTION: Filter packages based on whether they depend on the Flutter SDK using the --flutter flag. Use --no-flutter to target packages that do not depend on Flutter.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/filters.mdx#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmelos exec --flutter -- flutter test\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Directory for Melos Workspace Initialization\nDESCRIPTION: This command shows how to use the '--directory' option to specify a custom directory for creating the Melos workspace.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/init.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmelos init my_workspace --directory custom_dir\n```\n\n----------------------------------------\n\nTITLE: Parsing Conventional Commits in Dart\nDESCRIPTION: This snippet demonstrates how to use the ConventionalCommit class to parse a git commit message. It extracts various components such as description, body, type, scopes, breaking changes, and footers from the commit message.\nSOURCE: https://github.com/invertase/melos/blob/main/packages/conventional_commit/README.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:conventional_commit/conventional_commit.dart';\n\nconst commitMessageExample = '''\nfeat(cool): An exciting new feature.\n\nA body describing this commit in more detail.\n\nThe body in this example is multi-line.\n\nBREAKING CHANGE: This is a breaking change because of X Y Z.\n\nCo-authored-by: @Salakar\nRefs #123 #456\n''';\n\nvoid main() {\n  final parsedCommit = ConventionalCommit.parse(commitMessageExample);\n\n  print(parsedCommit.description);\n  // : An exciting new feature.\n\n  print(parsedCommit.body);\n  // : A body describing this commit in more detail.\n  // :\n  // : The body in this example is multi-line.\n\n  print(parsedCommit.type);\n  // : feat\n\n  print(parsedCommit.scopes);\n  // : ['cool']\n\n  print(parsedCommit.isBreakingChange);\n  // : true\n\n  print(parsedCommit.breakingChangeDescription);\n  // : This is a breaking change because of X Y Z.\n\n  print(parsedCommit.footers);\n  // : ['Co-authored-by: @Salakar', 'Refs #123 #456']\n\n  print(parsedCommit.isMergeCommit);\n  // : false\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting Formatted Code to Console in Melos\nDESCRIPTION: This command outputs the formatted code to the console without directly overwriting files, allowing for review of changes.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/format.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmelos format --output\n# or\nmelos format --o\n```\n\n----------------------------------------\n\nTITLE: Running Melos Publish Command\nDESCRIPTION: Shows how to use the melos publish command to perform a dry run of the publishing process, which checks if packages are ready to be published without actually publishing them.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/guides/automated-releases.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmelos publish\n```\n\n----------------------------------------\n\nTITLE: Generating Release URLs with Melos Version Command\nDESCRIPTION: Examples of using the --release-url/-r flag to generate and print links to the prefilled release creation page for each package after versioning.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/version.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmelos version --release-url\nmelos version -r\n```\n\n----------------------------------------\n\nTITLE: Configuring Commit Bodies in Changelog\nDESCRIPTION: Defines whether to include commit bodies in the generated changelog and whether to limit inclusion to breaking changes only.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/overview.mdx#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nmelos:\n  command:\n    version:\n      changelogCommitBodies:\n        include: true\n        onlyBreaking: false\n```\n\n----------------------------------------\n\nTITLE: Excluding Packages by Name Pattern with Melos\nDESCRIPTION: Exclude packages with names matching a specific glob pattern using the --ignore flag. This option can be used multiple times to exclude packages matching different patterns.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/filters.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Run `flutter build ios` on all packages but ignore those whose packages names contain \"internal\"\nmelos exec --ignore=\"*internal*\" -- flutter build ios\n```\n\n----------------------------------------\n\nTITLE: Release Notes for Versions 6.1.0 to 3.4.0\nDESCRIPTION: Markdown formatted changelog entries documenting various updates, fixes and features added across multiple versions. Includes breaking changes with migration instructions.\nSOURCE: https://github.com/invertase/melos/blob/main/packages/melos/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 6.1.0\n\n - **FIX**: `updateDependentsVersions` disabled with packages still mentioned in changelogs ([#719](https://github.com/invertase/melos/issues/719)). ([0ad8f585](https://github.com/invertase/melos/commit/0ad8f5851333bc5d197132f9e7ec7c0a8b1ca45a))\n - **FIX**: tryParse line-length to int when it's not already an integer ([#708](https://github.com/invertase/melos/issues/708)). ([35ef462d](https://github.com/invertase/melos/commit/35ef462d7e9621bfd05bd3a7825a20acee91a289))\n - **FEAT**: Filter by category ([#727](https://github.com/invertase/melos/issues/727)). ([71bc6104](https://github.com/invertase/melos/commit/71bc61043b74ccd5e7c529d7e7a055ff9be1b517))\n - **FEAT**: added Alice to readme ([#725](https://github.com/invertase/melos/issues/725)). ([7b7a10e0](https://github.com/invertase/melos/commit/7b7a10e0596dad8f6bce3ddf23e9a57c4751daf3))\n - **FEAT**: `changelogFormat` configuration, add `includeDate` boolean ([#720](https://github.com/invertase/melos/issues/720)). ([fed343b2](https://github.com/invertase/melos/commit/fed343b2dd58e9a30b29244c38f8ba815a104082))\n - **FEAT**: add config for the format command ([#709](https://github.com/invertase/melos/issues/709)). ([5a6ec6f7](https://github.com/invertase/melos/commit/5a6ec6f708fe27e2fa608698340d36adf3e854ac))\n```\n\n----------------------------------------\n\nTITLE: Filtering Clean Command for Flutter Packages\nDESCRIPTION: Using filtering options with the clean command to clean only specific packages, in this case only Flutter packages or apps.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/clean.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Only clean Flutter packages or apps.\nmelos clean --flutter\n```\n\n----------------------------------------\n\nTITLE: Generating Graphviz DOT Representation of Dependencies\nDESCRIPTION: Creates a visualization of package dependencies using the Graphviz DOT language format, which can be used with Graphviz tools to create visual diagrams.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/list.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmelos list --gviz\n```\n\n----------------------------------------\n\nTITLE: Displaying Melos Command Help in Bash\nDESCRIPTION: Example output of running 'melos --help' command, showing the available commands and options for the Melos CLI tool.\nSOURCE: https://github.com/invertase/melos/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> melos --help\n\nA CLI tool for managing Dart & Flutter projects with multiple packages.\n\nUsage: melos <command> [arguments]\n\nGlobal options:\n-h, --help        Print this usage information.\n    --verbose     Enable verbose logging.\n    --sdk-path    Path to the Dart/Flutter SDK that should be used. This command line option has\n                  precedence over the `sdkPath` option in the root `pubspec.yaml` configuration\n                  file and the `MELOS_SDK_PATH` environment variable. To use the system-wide SDK,\n                  provide the special value \"auto\".\n\nAvailable commands:\n  bootstrap   Initialize the workspace, link local packages together and install remaining package\n              dependencies. Supports all package filtering options.\n  clean       Clean this workspace and all packages. This deletes the temporary pub & ide files such\n              as \".packages\" & \".flutter-plugins\". Supports all package filtering options.\n  exec        Execute an arbitrary command in each package. Supports all package filtering options.\n  format      Idiomatically format Dart source code.\n  list        List local packages in various output formats. Supports all package filtering options.\n  publish     Publish any unpublished packages or package versions in your repository to pub.dev. Dry\n              run is on by default.\n  run         Run a script by name defined in the workspace pubspec.yaml config file.\n  version     Automatically version and generate changelogs based on the Conventional Commits\n              specification. Supports all package filtering options.\n\nRun \"melos help <command>\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: Initializing Melos Workspace with Multiple Options\nDESCRIPTION: This example demonstrates how to use multiple options together when initializing a Melos workspace, including specifying a custom directory and additional package patterns.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/init.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmelos init my_workspace \\\n  --directory custom_dir \\\n  --packages \"modules/*\"\n```\n\n----------------------------------------\n\nTITLE: Setting SDK Path in Melos\nDESCRIPTION: Configures the path to the Dart/Flutter SDK that Melos should use. Paths are resolved relative to the root pubspec.yaml file.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/overview.mdx#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmelos:\n  sdkPath: .fvm/flutter_sdk\n```\n\n----------------------------------------\n\nTITLE: Defining Package Categories in Melos\nDESCRIPTION: Creates custom package categories to group packages together using glob patterns that match specific packages.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/overview.mdx#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmelos:\n  categories:\n    examples:\n      - packages/example*\n    alpha:\n      - packages/feature_a/*\n      - packages/feature_b\n```\n\n----------------------------------------\n\nTITLE: Including Package Dependents with Melos\nDESCRIPTION: Expand the filtered list of packages to include their transitive dependents using the --include-dependents flag. This includes all packages that depend on the filtered packages.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/filters.mdx#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmelos list --scope=some_package --include-dependents\n```\n\n----------------------------------------\n\nTITLE: Using Prerelease Flag with Melos Version Command\nDESCRIPTION: Example of using the --prerelease or -p flag to version packages as a prerelease.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/version.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmelos version --prerelease\nmelos version -p\n```\n\n----------------------------------------\n\nTITLE: Listing Files Without Formatting in Melos\nDESCRIPTION: This command lists the files that would be formatted without showing the formatted content or making any changes.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/format.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmelos format -o none\n```\n\n----------------------------------------\n\nTITLE: Filtering Private Packages with Melos\nDESCRIPTION: Exclude private packages (marked with 'publish_to: none') from Melos commands using the --no-private flag. By default, private packages are included in Melos commands.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/filters.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmelos bootstrap --no-private\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Melos Development Environment\nDESCRIPTION: A series of bash commands to set up a local development environment for contributing to Melos. It includes installing Melos globally, bootstrapping the workspace, activating the local development version, and verifying the setup.\nSOURCE: https://github.com/invertase/melos/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install melos if it's not already installed:\ndart pub global activate melos\n# Bootstrap the workspace.\nmelos bootstrap\n# Activate 'melos' from path:\nmelos activate\n# Confirm you now using a local development version:\nmelos --help\n# You should now see a banner printed at the top of the help output similar to:\n# ---------------------------------------------------------\n# | You are running a local development version of melos. |\n# ---------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping a Melos Workspace After Initialization\nDESCRIPTION: This command shows how to bootstrap a Melos workspace after initializing it. It changes to the workspace directory and runs the 'melos bootstrap' command.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/init.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd <directory>\nmelos bootstrap\n```\n\n----------------------------------------\n\nTITLE: Customizing Version Command Messages in Melos\nDESCRIPTION: Defines a template for the commit message generated by the 'melos version' command, using mustache syntax with variables for versioned packages.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/overview.mdx#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  version:\n    message: |\n      chore: cut package releases 🎉\n\n      {new_package_versions}\n```\n\n----------------------------------------\n\nTITLE: Using the Long Option for Verbose Output\nDESCRIPTION: Shows extended/verbose information about packages using either the long form (--long) or short form (-l) flag.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/list.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmelos list --long\nmelos list -l\n```\n\n----------------------------------------\n\nTITLE: Setting Concurrency for Melos Format Command\nDESCRIPTION: This command sets the maximum concurrency value for package formatting. It defines how many packages will execute the command simultaneously, defaulting to 1.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/format.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Set a 5 concurrency\nmelos format -c 5\n```\n\n----------------------------------------\n\nTITLE: Restricting Version Command to Specific Branch in Melos\nDESCRIPTION: Prevents the 'melos version' command from being used in branches other than the specified one.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/overview.mdx#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nmelos:\n  command:\n    version:\n      branch: main\n```\n\n----------------------------------------\n\nTITLE: Generating Release URL for Versioned Packages\nDESCRIPTION: Shows how to generate a link to the prefilled release creation page using the --release-url option when running melos version.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/guides/automated-releases.mdx#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmelos version --release-url\nmelos version -r\n```\n\n----------------------------------------\n\nTITLE: Adding Melos README Badge in Markdown\nDESCRIPTION: Shows how to add a Melos README badge to your project's README file using Markdown syntax, displaying a badge that indicates the project is maintained with Melos.\nSOURCE: https://github.com/invertase/melos/blob/main/packages/melos/README.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[![melos](https://img.shields.io/badge/maintained%20with-melos-f700ff.svg?style=flat-square)](https://github.com/invertase/melos)\n```\n\n----------------------------------------\n\nTITLE: Manually Specifying Version Changes in Melos\nDESCRIPTION: Examples of using the --manual-version/-V flag to manually specify version changes for specific packages. This can be used multiple times for different packages.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/version.mdx#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmelos version --manual-version=foo:patch\nmelos version --manual-version=foo:1.0.0\nmelos version -V foo:1.0.0\n\n# To manually version multiple packages\nmelos version --manual-version=foo:patch --manual-version=bar:major\nmelos version --manual-version=foo:1.0.0 --manual-version=bar:1.0.0\nmelos version -V foo:1.0.0 -V bar:2.0.0\n```\n\n----------------------------------------\n\nTITLE: Setting Dependent Prerelease Identifier in Melos Version\nDESCRIPTION: Example of using the --prerelease and --dependent-preid flags to specify a custom prerelease identifier for dependent packages.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/version.mdx#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmelos version --prerelease --dependent-preid=beta\n```\n\n----------------------------------------\n\nTITLE: Using Relative Paths in Output\nDESCRIPTION: Displays package paths relative to the workspace root instead of full paths using either the long form (--relative) or short form (-r) flag.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/list.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmelos list --relative\nmelos list -r\n```\n\n----------------------------------------\n\nTITLE: Managing Git Tag Creation in Melos Version Command\nDESCRIPTION: Examples of using the --git-tag-version/-t flag to control the creation of git tags during versioning.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/version.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmelos version --git-tag-version\nmelos version -t\n```\n\n----------------------------------------\n\nTITLE: Disabling Conventional Commit Scopes in Changelog\nDESCRIPTION: Configures whether to include conventional commit scopes in the generated CHANGELOG.md when running 'melos version'.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/overview.mdx#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nmelos:\n  command:\n    version:\n      includeScopes: false\n```\n\n----------------------------------------\n\nTITLE: Including Commit IDs in Changelog\nDESCRIPTION: Enables adding short commit IDs to entries in the CHANGELOG.md generated by 'melos version'.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/overview.mdx#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nmelos:\n  command:\n    version:\n      includeCommitId: true\n```\n\n----------------------------------------\n\nTITLE: Customizing Commit Message in Melos Version\nDESCRIPTION: Example of using the --message/-m flag to override the default commit message for the version release.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/version.mdx#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmelos version --message=\"chore(release): publish new versions\"\n```\n\n----------------------------------------\n\nTITLE: Git Dependency Example with Version Tag\nDESCRIPTION: Shows an example of a git dependency in a pubspec.yaml file, using a package version tag as the git reference.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/guides/automated-releases.mdx#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  internal_dep:\n    git:\n      url: git@github.com:org/repo.git\n      path: packages/internal_dep\n      ref: internal_dep-v0.0.1\n```\n\n----------------------------------------\n\nTITLE: Including Dates in Changelog Format\nDESCRIPTION: Configures whether to include dates in the generated CHANGELOG.md entries in yyyy-MM-dd format.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/overview.mdx#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nmelos:\n  command:\n    version:\n      changelogFormat:\n        includeDate: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Override Paths in Melos\nDESCRIPTION: Specifies paths to local packages that should be added to each workspace package's dependency overrides during bootstrap.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/overview.mdx#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nmelos:\n  dependencyOverridePaths:\n    - '../external_project/packages/**'\n```\n\n----------------------------------------\n\nTITLE: Creating Root pubspec.yaml for Melos 3.x.x\nDESCRIPTION: Example of a minimal pubspec.yaml file to be created at the workspace root when migrating to Melos 3.0.0, which is required for versioning Melos in workspaces.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/guides/migrations.mdx#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: my_project_workspace\n\nenvironment:\n  sdk: '>=3.0.0 <4.0.0'\n```\n\n----------------------------------------\n\nTITLE: Disabling Dependent Constraints Update in Melos Version\nDESCRIPTION: Example of using the --no-dependent-constraints flag to disable updating dependency version constraints of dependent packages.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/version.mdx#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmelos version --no-dependent-constraints\n```\n\n----------------------------------------\n\nTITLE: Configuring IntelliJ Integration in Melos\nDESCRIPTION: Disables the generation of IntelliJ IDEA config files that improve developer experience in Melos workspaces.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/overview.mdx#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmelos:\n  ide:\n    intellij:\n      enabled: false\n```\n\n----------------------------------------\n\nTITLE: Disabling Dependent Versions Update in Melos Version\nDESCRIPTION: Example of using the --no-dependent-versions flag to disable creating new patch versions for packages updated due to dependent constraint changes.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/version.mdx#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmelos version --no-dependent-versions\n```\n\n----------------------------------------\n\nTITLE: Disabling Tag Fetching in Melos Version Command\nDESCRIPTION: Configures whether to fetch tags from the 'origin' remote before running the 'melos version' command.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/overview.mdx#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nmelos:\n  command:\n    version:\n      fetchTags: false\n```\n\n----------------------------------------\n\nTITLE: Disabling Terminal Execution in IntelliJ for Melos\nDESCRIPTION: Configures whether Melos scripts should be executed in a terminal when running in IntelliJ IDE.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/overview.mdx#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmelos:\n  ide:\n    intellij:\n      executeInTerminal: false\n```\n\n----------------------------------------\n\nTITLE: Updated Git Dependency After Versioning\nDESCRIPTION: Shows how the git dependency reference is automatically updated by Melos when versioning a package, with the ref pointing to the new version tag.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/guides/automated-releases.mdx#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  internal_dep:\n    git:\n      url: git@github.com:org/repo.git\n      path: packages/internal_dep\n      ref: internal_dep-v0.0.2\n```\n\n----------------------------------------\n\nTITLE: Setting Concurrency for Melos Exec\nDESCRIPTION: Demonstrates how to set the concurrency value for 'melos exec' using the '-c' flag. This determines how many packages will execute the command simultaneously.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/exec.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Set a 1 concurrency\nmelos exec -c 1  -- \"dart analyze .\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Packages by Directory Existence with Melos\nDESCRIPTION: Include only packages where a specific directory exists inside the package using the --dir-exists flag. This can be useful for targeting packages with a particular structure.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/filters.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Only bootstrap packages with an example directory\nmelos bootstrap --dir-exists=\"example\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Published Packages with Melos\nDESCRIPTION: Filter packages based on their publication status on pub.dev using the --published flag. This includes only packages where the current local version exists on pub.dev.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/filters.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmelos bootstrap --published\n```\n\n----------------------------------------\n\nTITLE: Versioning Private Packages with Melos\nDESCRIPTION: Examples of using the --all/-a flag to include private packages in the versioning process that are skipped by default.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/version.mdx#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmelos version --all\nmelos version -a\n```\n\n----------------------------------------\n\nTITLE: Graduating Prerelease Versions with Melos\nDESCRIPTION: Example of using the --graduate or -g flag to graduate current prerelease versions to stable versions.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/version.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmelos version --graduate\nmelos version -g\n```\n\n----------------------------------------\n\nTITLE: Setting Prerelease Identifier in Melos Version\nDESCRIPTION: Example of using the --prerelease and --preid flags together to specify a custom prerelease identifier for version increments.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/version.mdx#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmelos version --prerelease --preid=beta\n```\n\n----------------------------------------\n\nTITLE: Disabling Commit Links in Changelog\nDESCRIPTION: Configures whether to add links to commits in the CHANGELOG.md generated by 'melos version'.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/overview.mdx#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nmelos:\n  command:\n    version:\n      linkToCommits: false\n```\n\n----------------------------------------\n\nTITLE: Disabling Workspace Changelog Generation in Melos\nDESCRIPTION: Configures whether to generate a CHANGELOG.md at the root of the workspace when running 'melos version'.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/overview.mdx#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nmelos:\n  command:\n    version:\n      workspaceChangelog: false\n```\n\n----------------------------------------\n\nTITLE: Enabling Git Tag Reference Updates in Melos\nDESCRIPTION: Configures whether to update package version tags in git dependencies of dependents when versioning packages.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/overview.mdx#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nmelos:\n  command:\n    version:\n      updateGitTagRefs: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Release URL Generation in melos.yaml\nDESCRIPTION: Shows how to permanently enable release URL generation by adding the releaseUrl configuration to the melos.yaml file.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/guides/automated-releases.mdx#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  version:\n    releaseUrl: true\n```\n\n----------------------------------------\n\nTITLE: Using Manual Version Option for Multiple Packages\nDESCRIPTION: Demonstrates how to manually version multiple packages using the --manual-version option, which allows specifying different version changes for different packages.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/guides/automated-releases.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmelos version --manual-version <package-1-name>:<version-change> --manual-version <package-2-name>:<version-change>\n# Same but with short version\nmelos version -V <package-1-name>:<version-change> -V <package-2-name>:<version-change>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Package Directories in Melos Workspace Initialization\nDESCRIPTION: This snippet illustrates how to use the '--packages' option to define additional glob patterns for package directories to include in the workspace.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/init.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmelos init --packages \"modules/*\" --packages \"libs/*\"\n```\n\n----------------------------------------\n\nTITLE: Executing Melos Format Command\nDESCRIPTION: This command formats the code in your Melos workspace according to Dart's formatting standards.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/format.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmelos format\n```\n\n----------------------------------------\n\nTITLE: Using Set-Exit-If-Changed Flag in Melos Format\nDESCRIPTION: This command returns exit code 1 if there are any formatting changes, useful for CI/CD pipelines to enforce formatting standards.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/format.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmelos format --set-exit-if-changed\n```\n\n----------------------------------------\n\nTITLE: Displaying Formatted Code as JSON in Melos\nDESCRIPTION: This command outputs the formatted code as a JSON object, providing a structured view of the formatting changes.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/format.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmelos format -o show\n```\n\n----------------------------------------\n\nTITLE: Listing Formattable Files in Melos\nDESCRIPTION: This command lists the files that would be formatted without showing the content or making changes, useful for a quick overview.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/format.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmelos format -o json\n```\n\n----------------------------------------\n\nTITLE: Generating Parsable Output Format\nDESCRIPTION: Produces parsable output instead of a columnified view using either the long form (--parsable) or short form (-p) flag, useful for programmatic consumption.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/list.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmelos list --parsable\nmelos list -p\n```\n\n----------------------------------------\n\nTITLE: Basic Melos Publish Command\nDESCRIPTION: Basic command to publish packages using Melos with default dry-run enabled.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/commands/publish.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmelos publish\n```\n\n----------------------------------------\n\nTITLE: Advanced Melos Exec Script Configuration in YAML\nDESCRIPTION: Demonstrates a more advanced 'exec' script configuration with custom options like concurrency, while specifying the command in the 'run' option.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/configuration/scripts.mdx#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nscripts:\n  hello:\n    run: echo 'Hello $(dirname $PWD)'\n    exec:\n      concurrency: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Melos Tasks in VS Code\nDESCRIPTION: Example of configuring VS Code tasks to run Melos scripts. This JSON configuration defines a task that runs the 'test' Melos script via the task type 'melos'.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/ide-support.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// .vscode/tasks.json\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"melos\",\n      \"script\": \"test\",\n      \"label\": \"melos: test\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Melos README Badge with Markdown\nDESCRIPTION: Markdown code to add a Melos README badge to a project's README file. This badge indicates that a project is maintained using the Melos tool.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![melos](https://img.shields.io/badge/maintained%20with-melos-f700ff.svg?style=flat-square)](https://github.com/invertase/melos)\n```\n\n----------------------------------------\n\nTITLE: Configuring Root pubspec.yaml for Melos 7.x.x Workspace\nDESCRIPTION: Example of a root pubspec.yaml file after migrating to Melos 7.x.x. It shows how to define a workspace with multiple packages and configure Melos settings that were previously in melos.yaml.\nSOURCE: https://github.com/invertase/melos/blob/main/packages/melos/README.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: my_workspace\npublish_to: none\nenvironment:\n  sdk: ^3.6.0\nworkspace:\n  - packages/helper\n  - packages/client_package\n  - packages/server_package\ndev_dependencies:\n  melos: ^7.0.0\n\nmelos:\n  # All of the content of your previous melos.yaml file\n  # (Except for the packages and name)\n```\n\n----------------------------------------\n\nTITLE: Version History in Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version releases from 2.6.0 to 1.4.0, including fixes, features, refactoring and documentation changes\nSOURCE: https://github.com/invertase/melos/blob/main/packages/melos/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.6.0\n\n - **REFACTOR**: use `homepage` and `repository` keys in `pubspec.yaml` ([#354](https://github.com/invertase/melos/issues/354)). ([c7a78e3a](https://github.com/invertase/melos/commit/c7a78e3af1ebc3d3a0d2973fdbe154813b8eb2e3))\n - **REFACTOR**: enable more lint rules ([#346](https://github.com/invertase/melos/issues/346)). ([70448bec](https://github.com/invertase/melos/commit/70448bec7d8cf5f8d0a8dc8c2660e70033936329))\n - **REFACTOR**: remove local fork of `yamlicious` ([#345](https://github.com/invertase/melos/issues/345)). ([64a15b83](https://github.com/invertase/melos/commit/64a15b83f87d9c21c0bcad10f4e6d4941f935091))\n - **REFACTOR**: remove local fork of `prompts` package ([#344](https://github.com/invertase/melos/issues/344)). ([200450c3](https://github.com/invertase/melos/commit/200450c3064ae461dafc1eebee285c762a28eba1))\n - **FIX**: don't override Intellij module config files ([#351](https://github.com/invertase/melos/issues/351)). ([850e9f82](https://github.com/invertase/melos/commit/850e9f8227ff3233b3f348260ec16ff05b13991d))\n - **FIX**: false positive for non-unique packages ([#348](https://github.com/invertase/melos/issues/348)). ([9c136194](https://github.com/invertase/melos/commit/9c136194ac888be5f6b6ccc0543ea369507ba129))\n - **FEAT**: write conventional commit scopes in changelog ([#341](https://github.com/invertase/melos/issues/341)). ([0c64d61e](https://github.com/invertase/melos/commit/0c64d61eb9fa0f65b85a21e0843e112d0b717733))\n - **DOCS**: update link to the FlutterFire repository ([#338](https://github.com/invertase/melos/issues/338)). ([344df53c](https://github.com/invertase/melos/commit/344df53c2bd8bd8e331708013e336fed9e820b81))\n```\n\n----------------------------------------\n\nTITLE: Using Melos Programmatically with Dart\nDESCRIPTION: Example code showing how to programmatically use Melos commands by importing the package:melos/melos.dart library. Demonstrates initializing Melos with a working directory and calling bootstrap and publish methods.\nSOURCE: https://github.com/invertase/melos/blob/main/packages/melos/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal melos = Melos(workingDirectory: Directory.current);\n\nawait melos.bootstrap();\nawait melos.publish(dryRun: false);\n```\n\n----------------------------------------\n\nTITLE: Configuring Package pubspec.yaml for Melos 7.x.x\nDESCRIPTION: Example configuration for a package's pubspec.yaml file after migrating to Melos 7.x.x, showing how to add the workspace resolution setting.\nSOURCE: https://github.com/invertase/melos/blob/main/docs/guides/migrations.mdx#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: my_package\nenvironment:\n  sdk: ^3.6.0\nresolution: workspace\n```"
  }
]