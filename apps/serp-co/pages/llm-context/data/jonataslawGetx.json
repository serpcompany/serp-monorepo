[
  {
    "owner": "jonataslaw",
    "repo": "getx",
    "content": "TITLE: Initializing Controller with Get.put() in Dart\nDESCRIPTION: Demonstrates how to instantiate a controller using Get.put() instead of traditional instantiation. This makes the controller available throughout the app.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/dependency_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nController controller = Get.put(Controller()); // Rather Controller controller = Controller();\n```\n\n----------------------------------------\n\nTITLE: Using Obx for Reactive Widget Updates in Flutter with GetX\nDESCRIPTION: Shows how to use the Obx widget to create a reactive Text widget that automatically updates when the controller's name property changes. This eliminates the need for manual state management or complex StreamBuilder setups.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nObx (() => Text (controller.name));\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive Variables with Rx<Type> in Dart\nDESCRIPTION: This snippet shows how to use the Rx<Type> syntax for declaring reactive variables in GetX, including support for custom classes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/state_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = Rx<String>('');\nfinal isLogged = Rx<Bool>(false);\nfinal count = Rx<Int>(0);\nfinal balance = Rx<Double>(0.0);\nfinal number = Rx<Num>(0);\nfinal items = Rx<List<String>>([]);\nfinal myMap = Rx<Map<String, int>>({});\n\n// Custom classes - can be any class, literally\nfinal user = Rx<User>();\n```\n\n----------------------------------------\n\nTITLE: Initializing GetMaterialApp in Flutter\nDESCRIPTION: This snippet shows how to set up GetMaterialApp as the root widget of a Flutter application. It's the first step in using GetX for route management and other high-level APIs.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(GetMaterialApp(home: Home()));\n```\n\n----------------------------------------\n\nTITLE: Configuring Get.put() with All Options in Dart\nDESCRIPTION: Demonstrates all available options when using Get.put() for dependency injection, including type, tag, permanence, and builder callback.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/dependency_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nGet.put<S>(\n  // mandatory: the class that you want to get to save, like a controller or anything\n  // note: \"S\" means that it can be a class of any type\n  S dependency\n\n  // optional: this is for when you want multiple classess that are of the same type\n  // since you normally get a class by using Get.find<Controller>(),\n  // you need to use tag to tell which instance you need\n  // must be unique string\n  String tag,\n\n  // optional: by default, get will dispose instances after they are not used anymore (example,\n  // the controller of a view that is closed), but you might need that the instance\n  // to be kept there throughout the entire app, like an instance of sharedPreferences or something\n  // so you use this\n  // defaults to false\n  bool permanent = false,\n\n  // optional: allows you after using an abstract class in a test, replace it with another one and follow the test.\n  // defaults to false\n  bool overrideAbstract = false,\n\n  // optional: allows you to create the dependency using function instead of the dependency itself.\n  // this one is not commonly used\n  InstanceBuilderCallback<S> builder,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing GetX Dependencies in pubspec.yaml\nDESCRIPTION: YAML configuration to add GetX as a dependency in a Flutter project's pubspec.yaml file.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  get:\n```\n\n----------------------------------------\n\nTITLE: Building UI with GetX for Counter App\nDESCRIPTION: Creates a StatelessWidget UI that uses GetX for state management, including dependency injection with Get.put() and Get.find(), and reactive state updates with Obx. Also demonstrates simple navigation with Get.to().\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ur-PK.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n\n  @override\n  Widget build(context) {\n    // آپ کی کلاس کا آغاز\n    // Instantiate your class using Get.put() to make it available for all \"child\" routes there.\n    final Controller c = Get.put(Controller());\n\n    return Scaffold(\n      // Use Obx(()=> to update Text() whenever count is changed.\n      appBar: AppBar(title: Obx(() => Text(\"Clicks: ${c.count}\"))),\n\n      // Replace the 8 lines Navigator.push by a simple Get.to(). You don't need context\n      body: Center(child: ElevatedButton(\n              child: Text(\"Go to Other\"), onPressed: () => Get.to(Other()))),\n      floatingActionButton:\n          FloatingActionButton(child: Icon(Icons.add), onPressed: c.increment));\n  }\n}\n\nclass Other extends StatelessWidget {\n  // You can ask Get to find a Controller that is being used by another page and redirect you to it.\n  final Controller c = Get.find();\n\n  @override\n  Widget build(context){\n     // Access the updated count variable\n     return Scaffold(body: Center(child: Text(\"${c.count}\")));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing GetX Package in Dart\nDESCRIPTION: Import statement to include GetX functionality in a Dart file. This enables access to all GetX features in the file.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:get/get.dart';\n```\n\n----------------------------------------\n\nTITLE: Simplified Reactive Variable Declaration with .obs in GetX\nDESCRIPTION: Shows the preferred and most concise way to create reactive variables in GetX by adding '.obs' as a property to values. This method works with primitive types, collections, and custom classes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = ''.obs;\nfinal isLogged = false.obs;\nfinal count = 0.obs;\nfinal balance = 0.0.obs;\nfinal number = 0.obs;\nfinal items = <String>[].obs;\nfinal myMap = <String, int>{}.obs;\n\n// Custom classes - it can be any class, literally\nfinal user = User().obs;\n```\n\n----------------------------------------\n\nTITLE: Defining Named Routes with GetPage in GetMaterialApp\nDESCRIPTION: This example shows how to define named routes using GetPage in GetMaterialApp, demonstrating the flexible approach that allows conditional page loading based on authentication or other conditions.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_40\n\nLANGUAGE: dart\nCODE:\n```\nGetStorage box = GetStorage();\n\nGetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page:(){\n      return box.hasData('token') ? Home() : Login();\n    })\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring a Reactive Variable in Dart with GetX\nDESCRIPTION: Demonstrates how to create a reactive variable using GetX by adding '.obs' to the end of a variable declaration. This makes the variable observable and automatically updates widgets that depend on it when its value changes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar name = 'Jonatas Borges'.obs;\n```\n\n----------------------------------------\n\nTITLE: Configuring Get.lazyPut() with All Options in Dart\nDESCRIPTION: Shows all available options when using Get.lazyPut() for lazy loading of dependencies, including builder function, tag, and fenix option.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/dependency_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nGet.lazyPut<S>(\n  // mandatory: a method that will be executed when your class is called for the first time\n  InstanceBuilderCallback builder,\n  \n  // optional: same as Get.put(), it is used for when you want multiple different instance of a same class\n  // must be unique\n  String tag,\n\n  // optional: It is similar to \"permanent\", the difference is that the instance is discarded when\n  // is not being used, but when it's use is needed again, Get will recreate the instance\n  // just the same as \"SmartManagement.keepFactory\" in the bindings api\n  // defaults to false\n  bool fenix = false\n  \n)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency for Get Package - YAML\nDESCRIPTION: This snippet shows how to add the Get package to your Flutter project's dependencies in the pubspec.yaml file. Make sure to include it under the dependencies key to access Get's functionalities in your application.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pt-br.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  get:\n\n```\n\n----------------------------------------\n\nTITLE: GetX Dependency Injection: Get.lazyPut() examples\nDESCRIPTION: This code demonstrates the use of Get.lazyPut() for deferred dependency injection.  Dependencies created with Get.lazyPut() are only instantiated when they are first accessed, which is useful for expensive or infrequently used objects. The snippet also shows how to use tags and the `fenix` parameter.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/dependency_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n\"/// ApiMock will only be called when someone uses Get.find<ApiMock> for the first time\\nGet.lazyPut<ApiMock>(() => ApiMock());\\n\\nGet.lazyPut<FirebaseAuth>(\\n  () {\\n    // ... some logic if needed\\n    return FirebaseAuth();\\n  },\\n  tag: Math.random().toString(),\\n  fenix: true\\n)\\n\\nGet.lazyPut<Controller>( () => Controller() )\"\n```\n\n----------------------------------------\n\nTITLE: Building a Stateless Widget with GetX in Flutter\nDESCRIPTION: This snippet shows how to create a stateless widget using GetX for state management. It demonstrates how to instantiate a controller, use Obx for reactive updates, and navigate to other screens.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n\n  @override\n  Widget build(context) {\n\n    // Instantiate your class using Get.put() to make it available for all \"child\" routes there.\n    final Controller c = Get.put(Controller());\n\n    return Scaffold(\n      // Use Obx(()=> to update Text() whenever count is changed.\n      appBar: AppBar(title: Obx(() => Text(\"Clicks: ${c.count}\"))),\n\n      // Replace the 8 lines Navigator.push by a simple Get.to(). You don't need context\n      body: Center(child: ElevatedButton(\n              child: Text(\"Go to Other\"), onPressed: () => Get.to(Other()))),\n      floatingActionButton:\n          FloatingActionButton(child: Icon(Icons.add), onPressed: c.increment));\n  }\n}\n\nclass Other extends StatelessWidget {\n  // You can ask Get to find a Controller that is being used by another page and redirect you to it.\n  final Controller c = Get.find();\n\n  @override\n  Widget build(context){\n     // Access the updated count variable\n     return Scaffold(body: Center(child: Text(\"${c.count}\")));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Counter Controller with GetX in Dart\nDESCRIPTION: This snippet demonstrates a simple counter controller implementation using GetX in Dart. It shows how to create an observable count variable and increment it.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/state_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass CountController extends GetxController {\n  final count = 0.obs;\n}\n\n// To increment the counter\ncontroller.count.value++\n```\n\n----------------------------------------\n\nTITLE: GetX Workers - State Change Event Handling in Dart\nDESCRIPTION: Demonstrates various worker methods for handling reactive state changes, including event throttling and conditional execution strategies\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/state_management.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n/// Appelée à chaque fois que `count1` change.\never(count1, (_) => print(\"$_ a été modifié\"));\n\n/// Appelée uniquement la première fois que la variable est modifiée\nonce(count1, (_) => print(\"$_ a été changé une fois\"));\n\n/// Anti DDos - Appelée chaque fois que l'utilisateur arrête de taper pendant 1 seconde, par exemple.\ndebounce(count1, (_) => print(\"debouce$_\"), time: Duration(seconds: 1));\n\n/// Ignore toutes les modifications pendant 1 seconde.\ninterval(count1, (_) => print(\"interval $_\"), time: Duration(seconds: 1));\n```\n\n----------------------------------------\n\nTITLE: Middleware in GetPage for Route Management\nDESCRIPTION: This snippet introduces the use of custom middleware in GetPage to manage authentication and route access dynamically within a Flutter application using GetX.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nfinal middlewares = [\n  GetMiddleware(priority: 2),\n  GetMiddleware(priority: 5),\n  GetMiddleware(priority: 4),\n  GetMiddleware(priority: -8),\n];\n\nces middlewares seront exécutés dans cet ordre **-8 => 2 => 4 => 5**\n```\n\n----------------------------------------\n\nTITLE: Navigating with GetX in Flutter\nDESCRIPTION: This snippet demonstrates various navigation methods provided by GetX, including navigating to a new screen, named routes, going back, and closing all previous routes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nGet.to(NextScreen());\n\nGet.toNamed('/details');\n\nGet.back();\n\nGet.off(NextScreen());\n\nGet.offAll(NextScreen());\n```\n\n----------------------------------------\n\nTITLE: Defining a GetX Controller\nDESCRIPTION: This snippet demonstrates how to create a simple GetX controller with a counter variable and an increment function. The `update()` method is called to notify the UI about the state change.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n\"// Create controller class and extends GetxController\nclass Controller extends GetxController {\\n  int counter = 0;\\n  void increment() {\\n    counter++;\\n    update(); // use update() to update counter variable on UI when increment be called\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection with GetX in Dart\nDESCRIPTION: This snippet shows how to use GetX for dependency injection. It demonstrates how to instantiate and retrieve a controller using Get.put() and Get.find().\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nController controller = Get.put(Controller());\n\nController controller = Get.find();\n```\n\n----------------------------------------\n\nTITLE: Configuring MaterialApp with GetX Navigator Observers\nDESCRIPTION: Demonstrates how to manually configure MaterialApp with GetX navigation keys and observers for custom routing and middleware integration\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  navigatorKey: Get.key,\n  navigatorObservers: [GetObserver()],\n);\n```\n\n----------------------------------------\n\nTITLE: Using Get.putAsync() for Asynchronous Instances in Dart\nDESCRIPTION: Demonstrates how to register asynchronous instances using Get.putAsync(). Useful for dependencies that require asynchronous initialization.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/dependency_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nGet.putAsync<SharedPreferences>(() async {\n  final prefs = await SharedPreferences.getInstance();\n  await prefs.setInt('counter', 12345);\n  return prefs;\n});\n\nGet.putAsync<YourAsyncClass>( () async => await YourAsyncClass() )\n```\n\n----------------------------------------\n\nTITLE: GetView for Simple Controller Access\nDESCRIPTION: Demonstrates the usage of GetView for easy access to registered controllers in stateless widgets\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nclass AwesomeController extends GetController {\n  final String title = 'My Awesome View';\n}\n\nclass AwesomeView extends GetView<AwesomeController> {\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      padding: EdgeInsets.all(20),\n      child: Text(controller.title),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Services with GetxService in Dart\nDESCRIPTION: Demonstrates how to use GetxService to create persistent services that are initialized before the app starts. Useful for setting up databases, caches, or other long-lived dependencies.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_35\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  await initServices(); /// Attend l'initialisation des services.\n  runApp(SomeApp());\n}\n\nvoid initServices() async {\n  print('starting services ...');\n  await Get.putAsync(() => DbService().init());\n  await Get.putAsync(SettingsService()).init();\n  print('Tous les services ont démarré...');\n}\n\nclass DbService extends GetxService {\n  Future<DbService> init() async {\n    print('$runtimeType retarde de 2 sec');\n    await 2.delay();\n    print('$runtimeType prêts!');\n    return this;\n  }\n}\n\nclass SettingsService extends GetxService {\n  void init() async {\n    print(\"$runtimeType retarde d'1 sec\");\n    await 1.delay();\n    print('$runtimeType prêts!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Injected Dependency with GetX\nDESCRIPTION: This snippet demonstrates how to access an injected dependency using GetX's `Get.find()` method.  This allows you to retrieve the instance of the controller that was previously injected.  It ensures you get the same instance across the application.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n\"Controller controller = Get.find();\n//마법처럼 Get이 controller를 찾아서 가져올 것 입니다. 백만개의 인스턴스화 contrller를 가질수 있고 Get은 올바른 controller를 항상 가져다 줄 것입니다.\"\n```\n\n----------------------------------------\n\nTITLE: Find instantiated controller with Get.find() in Dart\nDESCRIPTION: This snippet demonstrates how to find an instantiated controller using Get.find(). It allows accessing the controller from anywhere in the application without extra dependencies.  Get will always return the correct controller instance.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/dependency_management.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n\"final controller = Get.find<Controller>();\\n// ATAU\\nController controller = Get.find();\\n\\n// Ya, terlihat seperti Sulap, Get akan menemukan controller anda, dan akan mengantarkannya ke lokasi anda.\\n// Anda bisa memiliki 1 juta controller terinisialisasi, Get akan selalu memberimu controller yang tepat.\"\n```\n\n----------------------------------------\n\nTITLE: Reactive List Management in GetX\nDESCRIPTION: Shows how to create and work with observable lists that automatically rebuild widgets on changes\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/state_management.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nfinal list = List<Usuario>().obs;\n\nListView.builder(\n  itemCount: list.length\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional State Updates with GetX\nDESCRIPTION: This snippet demonstrates how to conditionally update a list in GetX using `addIf`.  The `addIf` method adds an item to the list only if the condition `item < limit` is true.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// First parameter: condition, must return true or false.\n// Second parameter: the new value to apply if the condition is true.\nlist.addIf(item < limit, item);\n```\n\n----------------------------------------\n\nTITLE: Simple Counter Controller with GetX\nDESCRIPTION: This snippet demonstrates a simple counter controller in GetX.  It defines a `CountController` with an observable integer `count`. This showcases how easily state can be managed.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass CountController extends GetxController {\n  final count = 0.obs;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StateMixin in a GetX Controller\nDESCRIPTION: Shows how to add StateMixin to a controller class to enable state management for a User model.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetController with StateMixin<User>{}\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive Variables with .obs in Dart\nDESCRIPTION: This snippet illustrates the simplest way to declare reactive variables in GetX by adding .obs to the end of a value. This approach is preferred for its simplicity and ease of use.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/state_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = ''.obs;\nfinal isLogged = false.obs;\nfinal count = 0.obs;\nfinal balance = 0.0.obs;\nfinal number = 0.obs;\nfinal items = <String>[].obs;\nfinal myMap = <String, int>{}.obs;\n\n// Custom classes - can be any class, literally\nfinal user = User().obs;\n```\n\n----------------------------------------\n\nTITLE: Installing GetX in pubspec.yaml\nDESCRIPTION: Configuration snippet showing how to add GetX as a dependency in a Flutter project's pubspec.yaml file.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pl.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  get:\n```\n\n----------------------------------------\n\nTITLE: Using Get.Create() for Dynamic Instance Creation in Dart\nDESCRIPTION: Demonstrates how to use Get.Create() to create new instances of a class every time it's requested. Useful for scenarios requiring fresh instances.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/dependency_management.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nGet.Create<SomeClass>(() => SomeClass());\nGet.Create<LoginController>(() => LoginController());\n```\n\n----------------------------------------\n\nTITLE: Going back using GetX\nDESCRIPTION: This snippet demonstrates how to go back to the previous screen using GetX's `Get.back()` method. It is equivalent to `Navigator.pop(context)` but without the need for a `BuildContext`.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.back();\n```\n```\n\n----------------------------------------\n\nTITLE: Using Get.put() with Various Options in Dart\nDESCRIPTION: Shows different ways to use Get.put() for dependency injection, including setting permanence and using tags for unique instances.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/dependency_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nGet.put<SomeClass>(SomeClass());\nGet.put<LoginController>(LoginController(), permanent: true);\nGet.put<ListItemController>(ListItemController, tag: \"some unique string\");\n```\n\n----------------------------------------\n\nTITLE: Simple Counter Controller with Reactive State\nDESCRIPTION: Creates a basic counter controller using reactive state management with minimal code\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/state_management.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nclass CountController extends RxController {\n  final count = 0.obs;\n}\n```\n\n----------------------------------------\n\nTITLE: Using GetX for UI Updates\nDESCRIPTION: This snippet shows how to use the `GetX` widget to rebuild parts of the UI when the observable values change. Each `GetX` widget is responsible for rebuilding a specific part of the UI based on changes to `controller.count1.value`, `controller.count2.value`, and `controller.sum` respectively.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// view file\nGetX<Controller>(\n  builder: (controller) {\n    print(\"count 1 rebuild\");\n    return Text('${controller.count1.value}');\n  },\n),\nGetX<Controller>(\n  builder: (controller) {\n    print(\"count 2 rebuild\");\n    return Text('${controller.count2.value}');\n  },\n),\nGetX<Controller>(\n  builder: (controller) {\n    print(\"count 3 rebuild\");\n    return Text('${controller.sum}');\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Simple State Management with GetXController\nDESCRIPTION: This snippet demonstrates a simple state management using GetXController by updating a string variable. It also uses the update() method to rebuild the UI.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pt-br.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n//Gerenciador de estado simples\nclass Controller extends GetXController {\n  String nome = '';\n\n  void atualizarNome(String novoNome) {\n    nome = novoNome;\n    update()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Menggunakan Obx untuk Reactive UI di Flutter dengan GetX\nDESCRIPTION: Contoh penggunaan Obx untuk membuat UI yang reaktif terhadap perubahan state.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.id-ID.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nObx(() => Text(\"${controller.name}\"));\n```\n\n----------------------------------------\n\nTITLE: Using Custom Middleware with GetX in Flutter\nDESCRIPTION: Adding custom middleware to the GetObserver for route observation. This allows you to insert your own logic into the routing system without affecting GetX's functionality.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  navigatorKey: Get.key,\n  navigatorObservers: [\n    GetObserver(MiddleWare.observer) // Ici\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller Class with GetX in Dart\nDESCRIPTION: Defines a controller class that extends GetxController to manage application state. It contains an observable count variable and an increment method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ru.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController{\n  var count = 0.obs;\n  increment() => count++;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GetxService with Async Services in Dart\nDESCRIPTION: Demonstrates how to initialize services before running a Flutter app using GetxService. This pattern allows controlling execution flow by initializing dependencies like database connections and settings before the app starts, ensuring services are always available via Get.find().\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  await initServices(); /// AWAIT SERVICES INITIALIZATION.\n  runApp(SomeApp());\n}\n\n/// Is a smart move to make your Services intiialize before you run the Flutter app.\n/// as you can control the execution flow (maybe you need to load some Theme configuration,\n/// apiKey, language defined by the User... so load SettingService before running ApiService.\n/// so GetMaterialApp() doesnt have to rebuild, and takes the values directly.\nvoid initServices() async {\n  print('starting services ...');\n  /// Here is where you put get_storage, hive, shared_pref initialization.\n  /// or moor connection, or whatever that's async.\n  await Get.putAsync(() => DbService().init());\n  await Get.putAsync(SettingsService()).init();\n  print('All services started...');\n}\n\nclass DbService extends GetxService {\n  Future<DbService> init() async {\n    print('$runtimeType delays 2 sec');\n    await 2.delay();\n    print('$runtimeType ready!');\n    return this;\n  }\n}\n\nclass SettingsService extends GetxService {\n  void init() async {\n    print('$runtimeType delays 1 sec');\n    await 1.delay();\n    print('$runtimeType ready!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: State Management Using Obx in Flutter\nDESCRIPTION: This snippet demonstrates how to use the Obx widget for state management. It shows integrating the controller's state directly into the UI, which is updated responsively without requiring manual calls to update the UI.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n  final controller = Get.put(Controller());\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(\"counter\")),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Obx(() => Text(\n                      'clicks: ${controller.count}',\n                    )),\n            ElevatedButton(\n              child: Text('Next Route'),\n              onPressed: () {\n                Get.to(Second());\n              },\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n          child: Icon(Icons.add),\n          onPressed: controller.increment(),  \n          ),\n    );\n  }\n}\nclass Second extends StatelessWidget {\n  final Controller ctrl = Get.find();\n  @override\n  Widget build(context){\n     return Scaffold(body: Center(child: Text(\"${ctrl.count}\")));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive Variables using Rx{Type} in Dart with GetX\nDESCRIPTION: Illustrates various ways to declare reactive variables using the Rx{Type} syntax. This approach allows for type-specific reactive variables with optional initial values.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = RxString('');\nfinal isLogged = RxBool(false);\nfinal count = RxInt(0);\nfinal balance = RxDouble(0.0);\nfinal items = RxList<String>([]);\nfinal myMap = RxMap<String, int>({});\n```\n\n----------------------------------------\n\nTITLE: Importing GetX Package in Dart\nDESCRIPTION: Import the GetX package in your Dart files to use its features.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-ar.md#2025-04-21_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:get/get.dart';\n```\n\n----------------------------------------\n\nTITLE: Using Get.find() to Retrieve Instances in Dart\nDESCRIPTION: Shows how to use Get.find() to retrieve previously instantiated dependencies without needing additional context or providers.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/dependency_management.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal controller = Get.find<Controller>();\n// OR\nController controller = Get.find();\n\n// Yes, it looks like Magic, Get will find your controller, and will deliver it to you.\n// You can have 1 million controllers instantiated, Get will always give you the right controller.\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter App with GetX\nDESCRIPTION: A basic implementation of the Flutter counter app using GetX for state management, showing main entry point configuration with GetMaterialApp.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pl.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(GetMaterialApp(home: Home()));\n```\n\n----------------------------------------\n\nTITLE: Using ObxValue for Reactive Local State in Flutter\nDESCRIPTION: ObxValue widget for reactive local state management with GetX. This widget takes an Rx object and automatically updates when the value changes, providing a simple way to create reactive UI elements.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_32\n\nLANGUAGE: dart\nCODE:\n```\nObxValue((data) => Switch(\n        value: data.value,\n        onChanged: data, // Rx a une fonction _callable_! Vous pouvez utiliser (flag) => data.value = flag,\n    ),\n    false.obs,\n),\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Definition with GetX in Dart\nDESCRIPTION: Demonstrates how to use GetX for dynamic route definition based on conditions. This example shows how to decide which page to display based on the presence of a token in GetStorage.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-ar.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nGetStorage box = GetStorage();\n\nGetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page:(){\n      return box.hasData('token') ? Home() : Login();\n    })\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller Class with GetX in Dart\nDESCRIPTION: This snippet demonstrates how to create a controller class using GetX. It shows how to make variables observable using '.obs' and create methods for state updates.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController{\n  var count = 0.obs;\n  increment() => count++;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Observable Custom Classes with GetX in Dart\nDESCRIPTION: This snippet shows two ways to create observable custom classes using GetX in Dart. It demonstrates how to make individual properties observable or make the entire class observable.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/state_management.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass RxUser {\n  final name = \"Camila\".obs;\n  final age = 18.obs;\n}\n\n// Or\n\nclass User {\n  User({String name, int age});\n  var name;\n  var age;\n}\n\n// When instantiating:\nfinal user = User(name: \"Camila\", age: 18).obs;\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a GetX Controller in Dart\nDESCRIPTION: This snippet shows how to create a controller class extending GetxController and use it with GetBuilder to update the UI. It demonstrates incrementing a counter and updating the UI accordingly.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/state_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Create controller class and extends GetxController\nclass Controller extends GetxController {\n  int counter = 0;\n  void increment() {\n    counter++;\n    update(); // use update() to update counter variable on UI when increment be called\n  }\n}\n// On your Stateless/Stateful class, use GetBuilder to update Text when increment be called\nGetBuilder<Controller>(\n  init: Controller(), // INIT IT ONLY THE FIRST TIME\n  builder: (_) => Text(\n    '${_.counter}',\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Snackbar and Navigation in GetX\nDESCRIPTION: This snippet shows how to utilize GetX for showing snackbar notifications and navigating between pages, demonstrating user interaction and feedback mechanisms within the app.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass First extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        leading: IconButton(\n          icon: Icon(Icons.add),\n          onPressed: () {\n            Get.snackbar(\"Hi\", \"I'm modern snackbar\");\n          },\n        ),\n        title: Text(\"title\".trArgs(['John'])),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            GetBuilder<Controller>(\n                init: Controller(),\n                builder: (_) => Text(\n                      'clicks: ${_.count}',\n                    )),\n            ElevatedButton(\n              child: Text('Next Route'),\n              onPressed: () {\n                Get.toNamed('/second');\n              },\n            ),\n            ElevatedButton(\n              child: Text('Change locale to English'),\n              onPressed: () {\n                Get.updateLocale(Locale('en', 'UK'));\n              },\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n          child: Icon(Icons.add),\n          onPressed: () {\n            Get.find<Controller>().increment();\n          }),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Counter App UI with GetX\nDESCRIPTION: Complete counter app implementation using GetX showing navigation and state management in Flutter.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ja-JP.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n\n  @override\n  Widget build(context) {\n    final Controller c = Get.put(Controller());\n\n    return Scaffold(\n      appBar: AppBar(title: Obx(() => Text(\"Clicks: ${c.count}\"))),\n      body: Center(child: ElevatedButton(\n              child: Text(\"Go to Other\"), onPressed: () => Get.to(Other()))),\n      floatingActionButton:\n          FloatingActionButton(child: Icon(Icons.add), onPressed: c.increment));\n  }\n}\n\nclass Other extends StatelessWidget {\n  final Controller c = Get.find();\n\n  @override\n  Widget build(context){\n     return Scaffold(body: Center(child: Text(\"${c.count}\")));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using GetX Widget with Controller for Reactive UI Updates in Dart\nDESCRIPTION: This snippet demonstrates how to use the `GetX` widget in conjunction with a controller to update UI elements reactively. The `GetX` widget automatically rebuilds the builder function when the specified controller's observable variables change. The example shows how changes to `count1` or `count2` trigger specific UI updates.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n\"final count1 = 0.obs;\\nfinal count2 = 0.obs;\\nint get sum => count1.value + count2.value;\"\n```\n\nLANGUAGE: dart\nCODE:\n```\n\"GetX<Controller>(\\n  builder: (value) {\\n    print(\\\"count 1 rebuild\\\");\\n    return Text('${value.count1.value}');\\n  },\\n),\\nGetX<Controller>(\\n  builder: (_) {\\n    print(\\\"count 2 rebuild\\\");\\n    return Text('${_.count2.value}');\\n  },\\n),\\nGetX<Controller>(\\n  builder: (_) {\\n    print(\\\"count 3 rebuild\\\");\\n    return Text('${_.sum}');\\n  },\\n),\"\n```\n\n----------------------------------------\n\nTITLE: Navigating with Named Routes in GetX\nDESCRIPTION: Shows how to use named routes for navigation in GetX, including defining routes and handling unknown routes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/route_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nGet.toNamed(\"/NextScreen\");\n\nGet.offNamed(\"/NextScreen\");\n\nGet.offAllNamed(\"/NextScreen\");\n\nvoid main() {\n  runApp(\n    GetMaterialApp(\n      initialRoute: '/',\n      getPages: [\n        GetPage(name: '/', page: () => MyHomePage()),\n        GetPage(name: '/second', page: () => Second()),\n        GetPage(\n          name: '/third',\n          page: () => Third(),\n          transition: Transition.zoom  \n        ),\n      ],\n    )\n  );\n}\n\nvoid main() {\n  runApp(\n    GetMaterialApp(\n      unknownRoute: GetPage(name: '/notfound', page: () => UnknownRoutePage()),\n      initialRoute: '/',\n      getPages: [\n        GetPage(name: '/', page: () => MyHomePage()),\n        GetPage(name: '/second', page: () => Second()),\n      ],\n    )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Translations with GetX in Flutter\nDESCRIPTION: This snippet shows how to use translations in a Flutter app with GetX. It demonstrates using .tr for basic translations, trPlural for pluralization, and trParams for parameterized translations.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nText('title'.tr);\n\nvar products = [];\nText('singularKey'.trPlural('pluralKey', products.length, Args));\n\nText('logged_in'.trParams({\n  'name': 'Jhon',\n  'email': 'jhon@example.com'\n  }));\n```\n\n----------------------------------------\n\nTITLE: Adding GetX Dependency to pubspec.yaml\nDESCRIPTION: Demonstrates how to add the GetX package as a dependency in the pubspec.yaml file for a Flutter project.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/route_management.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  get:\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive Variables with GetX\nDESCRIPTION: This snippet demonstrates how to declare reactive variables in GetX using `.obs`.  It creates two observable integer variables, `count1` and `count2`, and a getter `sum` that calculates their sum reactively. Any changes to `count1` or `count2` will automatically update the `sum`.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// controller file\nfinal count1 = 0.obs;\nfinal count2 = 0.obs;\nint get sum => count1.value + count2.value;\n```\n\n----------------------------------------\n\nTITLE: Making Variables Observable with GetX in Dart\nDESCRIPTION: Demonstrates how to create observable variables in GetX by adding '.obs' to any variable, making it reactive to changes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ru.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar name = 'Джонатас Борхес'.obs;\n```\n\n----------------------------------------\n\nTITLE: Using Get.put() with Various Options in Dart\nDESCRIPTION: Shows different ways to use Get.put() for dependency injection, including setting permanence and using tags for unique instances. Explains all available parameters for the Get.put() method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/dependency_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nGet.put<SomeClass>(SomeClass());\nGet.put<LoginController>(LoginController(), permanent: true);\nGet.put<ListItemController>(ListItemController, tag: \"some unique string\");\n```\n\nLANGUAGE: dart\nCODE:\n```\nGet.put<S>(\n  // mandatory: the class that you want to get to save, like a controller or anything\n  // note: \"S\" means that it can be a class of any type\n  S dependency\n\n  // optional: this is for when you want multiple classess that are of the same type\n  // since you normally get a class by using Get.find<Controller>(),\n  // you need to use tag to tell which instance you need\n  // must be unique string\n  String tag,\n\n  // optional: by default, get will dispose instances after they are not used anymore (example,\n  // the controller of a view that is closed), but you might need that the instance\n  // to be kept there throughout the entire app, like an instance of sharedPreferences or something\n  // so you use this\n  // defaults to false\n  bool permanent = false,\n\n  // optional: allows you after using an abstract class in a test, replace it with another one and follow the test.\n  // defaults to false\n  bool overrideAbstract = false,\n\n  // optional: allows you to create the dependency using function instead of the dependency itself.\n  // this one is not commonly used\n  InstanceBuilderCallback<S> builder,\n)\n```\n\n----------------------------------------\n\nTITLE: Navigating and Receiving Data with GetX in Dart\nDESCRIPTION: Shows how to navigate to a new screen and receive data back using GetX's to() method with await.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar data = await Get.to(Payment());\n```\n\n----------------------------------------\n\nTITLE: Implementing GetX Navigation in Flutter Widgets\nDESCRIPTION: Shows practical examples of using GetX navigation within Flutter widgets, including snackbar display and route navigation.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/route_management.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass First extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        leading: IconButton(\n          icon: Icon(Icons.add),\n          onPressed: () {\n            Get.snackbar(\"hi\", \"i am a modern snackbar\");\n          },\n        ),\n        title: Text('First Route'),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          child: Text('Open route'),\n          onPressed: () {\n            Get.toNamed(\"/second\");\n          },\n        ),\n      ),\n    );\n  }\n}\n\nclass Second extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        leading: IconButton(\n          icon: Icon(Icons.add),\n          onPressed: () {\n            Get.snackbar(\"hi\", \"i am a modern snackbar\");\n          },\n        ),\n        title: Text('second Route'),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          child: Text('Open route'),\n          onPressed: () {\n            Get.toNamed(\"/third\");\n          },\n        ),\n      ),\n    );\n  }\n}\n\nclass Third extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(\"Third Route\"),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          onPressed: () {\n            Get.back();\n          },\n          child: Text('Go back!'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inisialisasi GetMaterialApp di Flutter\nDESCRIPTION: Mengatur entry point aplikasi menggunakan GetMaterialApp untuk mengaktifkan fitur GetX.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.id-ID.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(GetMaterialApp(home: Home()));\n```\n\n----------------------------------------\n\nTITLE: Stream Controller Cleanup in GetX Controller\nDESCRIPTION: Shows proper way to close streams in a controller using onClose method instead of dispose.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n  StreamController<User> user = StreamController<User>();\n  StreamController<String> name = StreamController<String>();\n\n  /// close stream = onClose method, not dispose.\n  @override\n  void onClose() {\n    user.close();\n    name.close();\n    super.onClose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing GetX Controllers with Lifecycle Methods\nDESCRIPTION: Shows how to test GetX controllers including their lifecycle methods (onInit, onClose). Demonstrates how to verify reactive variable states throughout the controller lifecycle and test controller functions.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-bn.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n  @override\n  void onInit() {\n    super.onInit();\n    //Change value to name2\n    name.value = 'name2';\n  }\n\n  @override\n  void onClose() {\n    name.value = '';\n    super.onClose();\n  }\n\n  final name = 'name1'.obs;\n\n  void changeName() => name.value = 'name3';\n}\n\nvoid main() {\n  test('''\nTest the state of the reactive variable \"name\" across all of its lifecycles''',\n      () {\n    /// You can test the controller without the lifecycle,\n    /// but it's not recommended unless you're not using\n    ///  GetX dependency injection\n    final controller = Controller();\n    expect(controller.name.value, 'name1');\n\n    /// If you are using it, you can test everything,\n    /// including the state of the application after each lifecycle.\n    Get.put(controller); // onInit was called\n    expect(controller.name.value, 'name2');\n\n    /// Test your functions\n    controller.changeName();\n    expect(controller.name.value, 'name3');\n\n    /// onClose was called\n    Get.delete<Controller>();\n\n    expect(controller.name.value, '');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive Variables using .obs in Dart with GetX\nDESCRIPTION: Shows the preferred and simplest method of creating reactive variables by adding .obs as a property to any value. This approach works with primitives, collections, and custom classes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = ''.obs;\nfinal isLogged = false.obs;\nfinal count = 0.obs;\nfinal balance = 0.0.obs;\nfinal number = 0.obs;\nfinal items = <String>[].obs;\nfinal myMap = <String, int>{}.obs;\n\n// Custom classes - it can be any class, literally\nfinal user = User().obs;\n```\n\n----------------------------------------\n\nTITLE: Gestion des dépendances avec GetX en Dart\nDESCRIPTION: Ces snippets montrent comment utiliser Get.put() pour instancier un contrôleur et le rendre disponible dans toute l'application, ainsi que comment utiliser Get.find() pour récupérer une instance existante.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nController controller = Get.put(Controller());\n```\n\nLANGUAGE: dart\nCODE:\n```\nController controller = Get.find();\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Routes with GetX in Dart\nDESCRIPTION: Demonstrates the new approach for defining named routes in GetX after version 2.0. Routes are now defined as functions within GetPage objects, allowing for dynamic routing decisions based on conditions like authentication status.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nGetStorage box = GetStorage();\n\nGetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page:(){\n      return box.hasData('token') ? Home() : Login();\n    })\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Home Controller with Reactive Variables\nDESCRIPTION: This code defines the HomeController extending GetxController. It uses reactive variables to manage state, specifically the count variable, and an increment method for updating the count.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeController extends GetxController {\n  var count = 0.obs;\n  void increment() => count++;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter App with GetMaterialApp in Dart\nDESCRIPTION: Sets up the main entry point for a Flutter app using GetMaterialApp, which is required for using GetX navigation features.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ru.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(GetMaterialApp(home: Home()));\n```\n\n----------------------------------------\n\nTITLE: Handling Boolean Variables with GetX\nDESCRIPTION: This snippet illustrates how GetX handles boolean variables and the `ever` method.  It initializes `isLogged` as an observable boolean and uses `ever` to trigger `fireRoute` when `isLogged` changes. The first event will always trigger a rebuild even with the same value.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar isLogged = false.obs;\n\n@override\nonInit() async {\n  ever(isLogged, fireRoute);\n  isLogged.value = await Preferences.hasToken();\n}\n\nfireRoute(logged) {\n  if (logged) {\n   Get.off(Home());\n  } else {\n   Get.off(Login());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Observable Variables with GetX\nDESCRIPTION: Demonstrates how to create reactive observable variables by adding .obs suffix to any variable. This makes the variable automatically update any UI that depends on it.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ur-PK.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar name = 'Jonatas Borges'.obs;\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter App UI with GetX in Dart\nDESCRIPTION: Creates the UI for a counter app using GetX. It demonstrates dependency injection with Get.put(), reactive UI updates with Obx(), and navigation between screens.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ru.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n\n  @override\n  Widget build(context) {\n    \n    // Создайте экземпляр вашего класса с помощью Get.put(), чтобы сделать его доступным для всех \"дочерних\" маршрутов.\n    final Controller c = Get.put(Controller());\n\n    return Scaffold(\n      // Используйте Obx(()=> чтобы обновить Text() как только count изменится.\n      appBar: AppBar(title: Obx(() => Text(\"Кликов: ${c.count}\"))),\n\n      // Замените 8 строк Navigator.push простым Get.to(). Вам не нужен context!\n      body: Center(child: ElevatedButton(\n              child: Text(\"Перейти к Other\"), onPressed: () => Get.to(Other()))),\n      floatingActionButton:\n          FloatingActionButton(child: Icon(Icons.add), onPressed: c.increment));\n  }\n}\n\nclass Other extends StatelessWidget {\n  // \"Попросите\" Get найти и предоставить вам ваш Controller, используемый на другой странице.\n  final Controller c = Get.find();\n\n  @override\n  Widget build(context){\n     // Получите доступ к обновленной переменной count\n     return Scaffold(body: Center(child: Text(\"${c.count}\")));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Screen Dimensions and Context with Get in Dart\nDESCRIPTION: This snippet shows how to access screen height and width using `Get.height` and `Get.width`, retrieve the current `BuildContext` using `Get.context`, and access the context of the foreground snackbar/dialog/bottomsheet using `Get.contextOverlay` in Dart.  `Get.height` and `Get.width` provide immutable dimensions.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n// Aşağıdakine eşittir : MediaQuery.of(context).size.height,\n// fakat immutable'dır (sabittir).\nGet.height\nGet.width\n\n// Navigator'e şimdiki context'i verir.\nGet.context\n\n// Önde olan snackbar/dialog/bottomsheet'a nerede olursanız olun context'i verir. \nGet.contextOverlay\n```\n\n----------------------------------------\n\nTITLE: Defining GetX Workers\nDESCRIPTION: This snippet demonstrates how to use different GetX workers (`ever`, `once`, `debounce`, `interval`) to react to changes in a reactive variable. Each worker triggers a callback function based on specific conditions or timing intervals.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n\"/// Called every time `count1` changes.\never(count1, (_) => print(\"$_ has been changed\"));\\n\\n/// Called only first time the variable $_ is changed\nonce(count1, (_) => print(\"$_ was changed once\"));\\n\\n/// Anti DDos - Called every time the user stops typing for 1 second, for example.\ndebounce(count1, (_) => print(\"debouce$_ \"), time: Duration(seconds: 1));\\n\\n/// Ignore all changes within 1 second.\ninterval(count1, (_) => print(\"interval $_\"), time: Duration(seconds: 1));\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to a new screen with GetX (no named routes)\nDESCRIPTION: This snippet shows how to navigate to a new screen using GetX's `Get.to()` method, which is similar to `Navigator.push()` but without requiring a `BuildContext`. It simply takes the widget of the next screen as an argument.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.to(ProximaTela());\n```\n```\n\n----------------------------------------\n\nTITLE: Reusing a GetX Controller in another class\nDESCRIPTION: Demonstrates using a GetX controller in another class with GetBuilder. This example shows how to access and display the counter value from the controller.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/state_management.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nclass OtherClass extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: GetBuilder<Controller>(\n          builder: (s) => Text('${s.counter}'),\n        ),\n      ),\n    );\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Reactive State Management with GetXController\nDESCRIPTION: This snippet demonstrates a reactive state management using GetXController with obs. It shows the direct use of the obs variables without needing a specific method for updating them.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pt-br.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetXController {\n  final nome = ''.obs;\n\n  // não precisa de um método direto pra atualizar o nome\n  // só usar o nome.value\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Observable Type in GetX\nDESCRIPTION: This snippet demonstrates how to print the runtime type of an observable variable in Dart using GetX. It highlights that even though an observable variable might display the string value, its actual type is RxString.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pt-br.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar message = 'Hello world'.obs;\nprint( 'Message \"$message\" é do tipo ${message.runtimeType}');\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive Variables with Rx Types in Dart using GetX\nDESCRIPTION: Illustrates different ways to declare reactive variables using GetX's Rx types. This approach provides type-safety and allows for more specific reactive variable declarations.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = RxString('');\nfinal isLogged = RxBool(false);\nfinal count = RxInt(0);\nfinal balance = RxDouble(0.0);\nfinal items = RxList<String>([]);\nfinal myMap = RxMap<String, int>({});\n```\n\n----------------------------------------\n\nTITLE: Using GetBuilder to Update UI\nDESCRIPTION: This snippet shows how to use GetBuilder to wrap a Text widget and update it whenever the controller's state changes. The `init` property initializes the controller only the first time the widget is built.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n// On your Stateless/Stateful class, use GetBuilder to update Text when increment be called\nGetBuilder<Controller>(\n  init: Controller(), // INIT IT ONLY THE FIRST TIME\n  builder: (_) => Text(\n    '${_.counter}',\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive Variables with Rx{Type} in Dart\nDESCRIPTION: This snippet demonstrates how to declare reactive variables using the Rx{Type} syntax in GetX. It covers various data types including String, Bool, Int, Double, List, and Map.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/state_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = RxString('');\nfinal isLogged = RxBool(false);\nfinal count = RxInt(0);\nfinal balance = RxDouble(0.0);\nfinal items = RxList<String>([]);\nfinal myMap = RxMap<String, int>({});\n```\n\n----------------------------------------\n\nTITLE: Creating Translations Class with GetX in Dart\nDESCRIPTION: This snippet demonstrates how to create a Translations class for internationalization using GetX. It shows how to define translations for different locales.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:get/get.dart';\n\nclass Messages extends Translations {\n  @override\n  Map<String, Map<String, String>> get keys => {\n        'en_US': {\n          'hello': 'Hello World',\n        },\n        'de_DE': {\n          'hello': 'Hallo Welt',\n        }\n      };\n}\n```\n\n----------------------------------------\n\nTITLE: Global Configuration for GetMaterialApp\nDESCRIPTION: This snippet demonstrates how to set global configuration options for GetMaterialApp, such as logging, transition effects, and gesture settings.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pl.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  enableLog: true,\n  defaultTransition: Transition.fade,\n  opaqueRoute: Get.isOpaqueRouteDefault,\n  popGesture: Get.isPopGestureEnable,\n  transitionDuration: Get.defaultDurationTransition,\n  defaultGlobalState: Get.defaultGlobalState,\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nGet.config(\n  enableLog = true,\n  defaultPopGesture = true,\n  defaultTransition = Transitions.cupertino\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Observable Classes in GetX\nDESCRIPTION: This snippet demonstrates how to update an entire observable class instance in GetX using `user.update` or `user(...)`.  It highlights two ways to update the values of the `User` class reactively.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n// on the model file\n// we are going to make the entire class observable instead of each attribute\nclass User() {\n  User({this.name = '', this.age = 0});\n  String name;\n  int age;\n}\n\n// on the controller file\nfinal user = User().obs;\n// when you need to update the user variable:\nuser.update( (user) { // this parameter is the class itself that you want to update\nuser.name = 'Jonny';\nuser.age = 18;\n});\n// an alternative way of update the user variable:\nuser(User(name: 'João', age: 35));\n\n// on view:\nObx(()=> Text(\"Name ${user.value.name}: Age: ${user.value.age}\"))\n// you can also access the model values without the .value:\nuser().name; // notice that is the user variable, not the class (variable has lowercase u)\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Controller Access Pattern in GetX\nDESCRIPTION: Demonstrates how to implement a static getter in a controller to provide easy access throughout the app, reducing the need for Get.find() calls repeatedly. This pattern simplifies controller access in widgets.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ja_JP/state_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n\n  /// 記述量を省くためにstaticメソッドにすることをおすすめします。\n  /// staticメソッド使う場合 → Controller.to.increment();\n  /// 使わない場合 → Get.find<Controller>().increment();\n  /// どちらを使ってもパフォーマンスに影響があったり副作用が出たりはしません。前者は型の指定が不要という違いがあるだけです\n  static Controller get to => Get.find(); // これを追加\n\n  int counter = 0;\n  void increment() {\n    counter++;\n    update();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Class Attributes to Observables in GetX\nDESCRIPTION: This snippet illustrates two methods to transform class attributes into observables in GetX: converting individual class attributes and making the entire class an observable.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass RxUser {\n  final name = \"Camila\".obs;\n  final age = 18.obs;\n}\n\nclass User {\n  User({String name, int age});\n  var name;\n  var age;\n}\n\n// when instantianting:\nfinal user = User(name: \"Camila\", age: 18).obs;\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive Variables Using .obs in Dart\nDESCRIPTION: This snippet demonstrates the simplest way to declare reactive variables in Dart using the .obs property. It shows examples for various data types and a custom class.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/state_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = ''.obs;\nfinal isLogged = false.obs;\nfinal count = 0.obs;\nfinal balance = 0.0.obs;\nfinal number = 0.obs;\nfinal items = <String>[].obs;\nfinal myMap = <String, int>{}.obs;\n\n// Custom Class\nfinal user = User().obs;\n```\n\n----------------------------------------\n\nTITLE: Using ObxValue for Reactive State Management in Dart\nDESCRIPTION: This code snippet demonstrates the usage of `ObxValue` for reactive state management in GetX. It's a reactive version of `ValueBuilder` that automatically updates when an Rx instance (created with `.obs`) changes. The example showcases a switch controlled by an RxBool.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_32\n\nLANGUAGE: dart\nCODE:\n```\nObxValue((data) => Switch(\n        value: data.value,\n        onChanged: data, // Rx에는 호출가능한 함수가 있습니다! (flag) => data.value = flag, 가 사용가능 합니다.\n    ),\n    false.obs,\n),\n```\n\n----------------------------------------\n\nTITLE: Creating Observable Variables with GetX in Dart\nDESCRIPTION: This snippet demonstrates how to create observable variables using GetX. It shows the simplicity of adding '.obs' to make a variable reactive.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar name = 'Jonatas Borges'.obs;\n```\n\n----------------------------------------\n\nTITLE: Navigating to a screen without the option to go back\nDESCRIPTION: This snippet demonstrates navigating to a new screen using `Get.off()`, which removes the current screen from the navigation stack, preventing the user from going back. This is useful for scenarios like SplashScreens or login screens.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.off(ProximaTela());\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating a GetX Controller\nDESCRIPTION: This code snippet demonstrates creating a GetX controller with a counter variable and an increment function. The `update()` method is used to notify the UI of changes to the counter.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/state_management.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n// Créez la classe controller qui 'extends' GetxController\nclass Controller extends GetxController {\n  int counter = 0;\n  void increment() {\n    counter++;\n    update(); // utilisez update() pour mettre à jour la variable de compteur sur l'interface utilisateur lorsque incrément() est appelé\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to New Screen with GetX in Dart\nDESCRIPTION: Shows how to navigate to a new screen using GetX's to() method without named routes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nGet.to(NextScreen());\n```\n\n----------------------------------------\n\nTITLE: Creating a Binding Class in Dart for GetX\nDESCRIPTION: This snippet shows how to create a binding class that implements the Bindings interface for use with GetX. It defines the dependencies required for the Home and Details routes, ensuring they are available when the respective screens are accessed.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/dependency_management.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeBinding implements Bindings {}\n\nclass HomeBinding implements Bindings {\n  @override\n  void dependencies() {\n    Get.lazyPut<HomeController>(() => HomeController());\n    Get.put<Service>(()=> Api());\n  }\n}\n\nclass DetailsBinding implements Bindings {\n  @override\n  void dependencies() {\n    Get.lazyPut<DetailsController>(() => DetailsController());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using GetBuilder with initState and dispose methods in Dart\nDESCRIPTION: Example of using GetBuilder with initState and dispose callbacks to replace StatefulWidget functionality. This approach allows calling controller methods directly from the widget.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/state_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  initState: (_) => Controller.to.fetchApi(),\n  dispose: (_) => Controller.to.closeStreams(),\n  builder: (s) => Text('${s.username}'),\n),\n```\n\n----------------------------------------\n\nTITLE: Using Obx Widget for Reactive Updates in Flutter with GetX\nDESCRIPTION: Shows how to use the Obx widget to wrap a Text widget that displays a reactive variable. The Obx widget will automatically rebuild the Text widget when the value of controller.name changes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nObx (() => Text (controller.name));\n```\n\n----------------------------------------\n\nTITLE: Declaring an Observable Variable with .obs in Dart\nDESCRIPTION: This snippet demonstrates how to declare an observable variable in Dart using GetX by appending `.obs` to a variable's initial value. This makes the variable reactive, allowing widgets that depend on it to automatically update when its value changes. No StreamControllers or StreamBuilders are required.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n\"var name = 'Jonatas Borges'.obs;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Settings in GetMaterialApp and Get.config in Dart\nDESCRIPTION: This snippet illustrates how to configure global settings for GetX either within the `GetMaterialApp` widget or using `Get.config`. Settings like enabling logging, default transitions, opacity of routes, pop gesture enablement, transition duration, and default global state can be configured globally to affect the entire application.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  enableLog: true,\n  defaultTransition: Transition.fade,\n  opaqueRoute: Get.isOpaqueRouteDefault,\n  popGesture: Get.isPopGestureEnable,\n  transitionDuration: Get.defaultDurationTransition,\n  defaultGlobalState: Get.defaultGlobalState,\n);\n\nGet.config(\n  enableLog = true,\n  defaultPopGesture = true,\n  defaultTransition = Transitions.cupertino\n)\n```\n\n----------------------------------------\n\nTITLE: Using Obx for Reactive Updates in Flutter\nDESCRIPTION: This snippet shows how to use Obx widget to create a reactive Text widget that updates automatically when the observed variable changes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nObx(() => Text(\"${controller.name}\"));\n```\n\n----------------------------------------\n\nTITLE: Screen Navigation with GetX in Dart\nDESCRIPTION: Shows different methods for navigating between screens using GetX, including standard navigation, named routes, and special navigation cases.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ru.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nGet.to(NextScreen());\n\nGet.toNamed('/details');\n\nGet.back();\n\nGet.off(NextScreen());\n\nGet.offAll(NextScreen());\n```\n\n----------------------------------------\n\nTITLE: Using GetConnect to Handle HTTP Requests - Dart\nDESCRIPTION: This code snippet demonstrates how to extend GetConnect to create a simple API client. It shows methods for making GET and POST requests, as well as uploading files using multipart requests.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass UserProvider extends GetConnect {\n  // Get request\n  Future<Response> getUser(int id) => get('http://youapi/users/$id');\n  // Post request\n  Future<Response> postUser(Map data) => post('http://youapi/users', body: data);\n  // File  ile Post request\n  Future<Response<CasesModel>> postCases(List<int> image) {\n    final form = FormData({\n      'file': MultipartFile(image, filename: 'avatar.png'),\n      'otherFile': MultipartFile(image, filename: 'cover.png'),\n    });\n    return post('http://youapi/users/upload', form);\n  }\n\n  GetSocket userMessages() {\n    return socket('https://yourapi/users/socket');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Instances with Get.Create() in Dart\nDESCRIPTION: Demonstrates the use of Get.Create() for creating new instances. This method is different from others as it creates a new instance every time Get.find() is called, useful for certain scenarios.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/dependency_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nGet.Create<SomeClass>(() => SomeClass());\nGet.Create<LoginController>(() => LoginController());\n```\n\nLANGUAGE: dart\nCODE:\n```\nGet.create<S>(\n  // required: a function that returns a class that will be \"fabricated\" every\n  // time `Get.find()` is called\n  // Example: Get.create<YourClass>(() => YourClass())\n  FcBuilderFunc<S> builder,\n\n  // optional: just like Get.put(), but it is used when you need multiple instances\n  // of a of a same class\n  // Useful in case you have a list that each item need it's own controller\n  // needs to be a unique string. Just change from tag to name\n  String name,\n\n  // optional: just like int`Get.put()`, it is for when you need to keep the\n  // instance alive thoughout the entire app. The difference is in Get.create\n  // permanent is true by default\n  bool permanent = true\n```\n\n----------------------------------------\n\nTITLE: Initializing GetMaterialApp in Dart\nDESCRIPTION: Shows how to set up GetMaterialApp, which is required to use GetX's advanced features like routes and dialogs without context.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/route_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp( // Before: MaterialApp(\n  home: MyHome(),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller Lifecycle Methods in GetX\nDESCRIPTION: Shows how to use onInit method in a GetXController to initialize API calls or other setup tasks when the controller is first created.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid onInit() {\n  fetchApi();\n  super.onInit();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating UI with GetBuilder\nDESCRIPTION: This snippet shows how to use `GetBuilder` to update the UI when the controller's state changes. The `init` parameter is used to initialize the controller, and the `builder` parameter defines the widget to be updated.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/state_management.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  init: Controller(), // INITIER CA UNIQUEMENT LA PREMIÈRE FOIS\n  builder: (_) => Text(\n    '${_.counter}',\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Using RxStatus for State Management\nDESCRIPTION: This snippet shows the different states that can be achieved using RxStatus\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/tr_TR/state_management.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n``` dart\nRxStatus.loading();\nRxStatus.success();\nRxStatus.empty();\nRxStatus.error('message');\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Controller with Get.find\nDESCRIPTION: This snippet demonstrates how to create a static getter in the controller class to easily access the controller instance using `Controller.to`. Alternatively, `Get.find<Controller>()` can be used. The example shows how this can be used in a FloatingActionButton.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n\n  /// You do not need that. I recommend using it just for ease of syntax.\n  /// with static method: Controller.to.increment();\n  /// with no static method: Get.find<Controller>().increment();\n  /// There is no difference in performance, nor any side effect of using either syntax. Only one does not need the type, and the other the IDE will autocomplete it.\n  static Controller get to => Get.find(); // add this line\n\n  int counter = 0;\n  void increment() {\n    counter++;\n    update();\n  }\n}\n\n```\n\nLANGUAGE: dart\nCODE:\n```\nFloatingActionButton(\n  onPressed: () {\n    Controller.to.increment(),\n  } // This is incredibly simple!\n  child: Text(\"${Controller.to.counter}\"),\n),\n```\n\n----------------------------------------\n\nTITLE: Implementing a GetX Controller\nDESCRIPTION: Example of a controller class that extends GetxController to manage state in a GetX application. This example shows a counter implementation with observable variables.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pl.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController{\n  var count = 0.obs;\n  increment() => count.value++;\n}\n```\n\n----------------------------------------\n\nTITLE: Global State Management using GetxController\nDESCRIPTION: This snippet illustrates how to define a controller by extending GetxController to manage global state. The increment method is demonstrated to update state, which is reflected in the UI via the GetBuilder widget.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n  var count = 0;\n  void increment() {\n    count++;\n    update();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Locales with GetMaterialApp in Flutter\nDESCRIPTION: This snippet demonstrates how to configure locales and translations in a Flutter app using GetMaterialApp. It shows how to set translations, default locale, and fallback locale.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nreturn GetMaterialApp(\n    translations: Messages(), // your translations\n    locale: Locale('en', 'US'), // translations will be displayed in that locale\n    fallbackLocale: Locale('en', 'UK'), // specify the fallback locale in case an invalid locale is selected.\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Middleware with GetMaterialApp in Dart\nDESCRIPTION: Shows how to implement route middleware using the routingCallback property in GetMaterialApp.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  routingCallback: (routing) {\n    if(routing.current == '/second'){\n      openAds();\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalization with GetX in Dart\nDESCRIPTION: Shows how to set up translations for internationalization by extending the Translations class and providing key-value pairs for different languages.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ru.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:get/get.dart';\n\nclass Messages extends Translations {\n  @override\n  Map<String, Map<String, String>> get keys => {\n        'en_US': {\n          'hello': 'Hello World',\n        },\n        'de_DE': {\n          'hello': 'Hallo Welt',\n        }\n      };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Get.find for Controller Access in GetBuilder\nDESCRIPTION: Shows how to access a controller using Get.find() directly within the builder method of GetBuilder without a static accessor.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetXController {\n // static Controller get to => Get.find(); // with no static get\n[...]\n}\n// on stateful/stateless class\nGetBuilder<Controller>(  \n  init: Controller(), // use it only first time on each controller\n  builder: (_) => Text(\n    '${Get.find<Controller>().counter}', //here\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Replacing Instances with Get.replace() and Get.lazyReplace() in Dart\nDESCRIPTION: Shows how to replace existing instances with similar or extended class instances using Get.replace() or Get.lazyReplace(). This allows for flexibility in changing implementations while maintaining the original class type for retrieval.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/dependency_management.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nabstract class BaseClass {}\nclass ParentClass extends BaseClass {}\n\nclass ChildClass extends ParentClass {\n  bool isChild = true;\n}\n\n\nGet.put<BaseClass>(ParentClass());\n\nGet.replace<BaseClass>(ChildClass());\n\nfinal instance = Get.find<BaseClass>();\nprint(instance is ChildClass); //true\n\n\nclass OtherClass extends BaseClass {}\nGet.lazyReplace<BaseClass>(() => OtherClass());\n\nfinal instance = Get.find<BaseClass>();\nprint(instance is ChildClass); // false\nprint(instance is OtherClass); //true\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Navigators with GetX\nDESCRIPTION: Shows how to implement nested navigation in Flutter using GetX by creating a `Navigator` with a specific key and navigating using `Get.toNamed()` with an ID. The example demonstrates navigating between two routes within a nested navigator.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_34\n\nLANGUAGE: dart\nCODE:\n```\nNavigator(\n  key: nestedKey(1), // crie uma key com um index\n  initialRoute: '/',\n  onGenerateRoute: (settings) {\n    if (settings.name == '/') {\n      return GetPageRoute(\n        page: () => Scaffold(\n          appBar: AppBar(\n            title: Text(\"Principal\"),\n          ),\n          body: Center(\n            child: TextButton(\n              color: Colors.blue,\n              child: Text(\"Ir para a segunda\"),\n              onPressed: () {\n                Get.toNamed('/segunda', id:1); // navega pela sua navegação aninhada usando o index\n              },\n            )\n          ),\n        ),\n      );\n    } else if (settings.name == '/segunda') {\n      return GetPageRoute(\n        page: () => Center(\n          child: Scaffold(\n            appBar: AppBar(\n              title: Text(\"Principal\"),\n            ),\n            body: Center(\n              child:  Text(\"Segunda\")\n            ),\n          ),\n        ),\n      );\n    }\n  }\n),\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Controller with GetX\nDESCRIPTION: Dart code showing how to create a basic counter controller class using GetX for state management.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ja-JP.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController{\n  var count = 0.obs;\n  increment() => count++;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending multiple parameters in the route\nDESCRIPTION: This snippet shows how to send multiple parameters through a route, including a named segment and a query parameter.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.toNamed(\"/profile/34954?flag=true\");\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Observable Custom Classes in GetX\nDESCRIPTION: Shows how to make an entire custom class observable rather than individual properties. Demonstrates different ways to update values and access properties of observable objects in GetX.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ja_JP/state_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// モデルクラス\n// 属性をobsにするやり方ではなく、クラス全体をobsにする方法を採ります\nclass User() {\n  User({this.name = '', this.age = 0});\n  String name;\n  int age;\n}\n\n// Controllerクラス\nfinal user = User().obs;\n// user変数を更新するときはこのようなメソッドを作ります\nuser.update( (user) { // このパラメーターは更新するオブジェクトそのもの\nuser.name = 'Jonny';\nuser.age = 18;\n});\n// あるいは、この方法でも。変数名は呼び出し可能です。\nuser(User(name: 'João', age: 35));\n\n// ビュークラス\nObx(()=> Text(\"Name ${user.value.name}: Age: ${user.value.age}\"))\n// .value を使わずにモデルのプロパティにアクセスすることも可能です\nuser().name; // userがUserではないことに注目。user()でUserを受け取れます。\n```\n\n----------------------------------------\n\nTITLE: Comparing Navigation Syntax in Dart\nDESCRIPTION: Compares the default Flutter navigation syntax with GetX navigation syntax, highlighting the simplicity of GetX.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/route_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Default Flutter navigator\nNavigator.of(context).push(\n  context,\n  MaterialPageRoute(\n    builder: (BuildContext context) {\n      return HomePage();\n    },\n  ),\n);\n\n// Get using Flutter syntax without needing context\nnavigator.push(\n  MaterialPageRoute(\n    builder: (_) {\n      return HomePage();\n    },\n  ),\n);\n\n// Get syntax (It is much better, but you have the right to disagree)\nGet.to(HomePage());\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Logic with GetX Reactive State in Dart\nDESCRIPTION: This snippet demonstrates how to implement login logic using GetX reactive state, including checking for a token and navigating based on the login status.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/tr_TR/state_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar isLogged = false.obs;\n\n@override\nonInit() async {\n  ever(isLogged, fireRoute);\n  isLogged.value = await Preferences.hasToken();\n}\n\nfireRoute(logged) {\n  if (logged) {\n   Get.off(Home());\n  } else {\n   Get.off(Login());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Translations with Parameters in GetX\nDESCRIPTION: This snippet demonstrates how to use parameterized translations with the `trParams` extension method.  This allows you to insert dynamic values into your translated strings. The keys 'name' and 'email' will be replaced with the given values in the translation.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:get/get.dart';\n\n\nMap<String, Map<String, String>> get keys => {\n    'en_US': {\n        'logged_in': 'logged in as @name with email @email',\n    },\n    'es_ES': {\n       'logged_in': 'iniciado sesión como @name con e-mail @email',\n    }\n};\n\nText('logged_in'.trParams({\n  'name': 'Jhon',\n  'email': 'jhon@example.com'\n  }));\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Routes with Bindings in GetX\nDESCRIPTION: Example of setting up named routes in GetX with associated bindings, connecting route management with dependency injection by attaching HomeBinding and DetailsBinding to their respective routes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/dependency_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ngetPages: [\n  GetPage(\n    name: '/',\n    page: () => HomeView(),\n    binding: HomeBinding(),\n  ),\n  GetPage(\n    name: '/details',\n    page: () => DetailsView(),\n    binding: DetailsBinding(),\n  ),\n];\n```\n\n----------------------------------------\n\nTITLE: Using GetResponsiveView for Responsive Layouts in Dart\nDESCRIPTION: This snippet describes how to use `GetResponsiveView` to build responsive layouts in Flutter with GetX. It offers two options for defining the layout based on the screen size and type: using a builder method or separate methods for desktop, tablet, phone, and watch screen types. It also mentions setting screen type width limits using the `settings` property.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_36\n\nLANGUAGE: dart\nCODE:\n```\n// No code snippet provided in the text\n```\n\n----------------------------------------\n\nTITLE: Navigating to a new page using GetX in Flutter\nDESCRIPTION: This snippet demonstrates how to navigate to a new page in Flutter using GetX. Instead of using the standard Flutter Navigator, GetX simplifies the process with the `Get.to()` method. This reduces boilerplate code and makes navigation more concise.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ru.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.to(Home())\"\n```\n\n----------------------------------------\n\nTITLE: Declaring a Reactive Variable in Dart using GetX\nDESCRIPTION: Demonstrates how to create a reactive variable by adding .obs to the end of a regular variable declaration. This makes the variable observable and automatically updates widgets that depend on it when its value changes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar name = 'Jonatas Borges'.obs;\n```\n\n----------------------------------------\n\nTITLE: Finding Injected Dependencies with GetX in Dart\nDESCRIPTION: Shows how to retrieve previously injected dependencies using Get.find() without passing instances through constructors.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ru.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nController controller = Get.find();\n// Да, это выглядит как Магия! Get найдет ваш controller и доставит его вам. У вас может быть миллион созданных контроллеров, и Get всегда найдет нужный.\n```\n\n----------------------------------------\n\nTITLE: Using GetBuilder Lifecycle Methods in Dart\nDESCRIPTION: This snippet shows how to use lifecycle methods like initState and dispose with GetBuilder. It demonstrates fetching API data and closing streams.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/state_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  initState: (_) => Controller.to.fetchApi(),\n  dispose: (_) => Controller.to.closeStreams(),\n  builder: (s) => Text('${s.username}'),\n),\n```\n\n----------------------------------------\n\nTITLE: Using BindingsBuilder for Dependency Initialization in Dart\nDESCRIPTION: This snippet showcases the use of BindingsBuilder in GetX to simplify dependency initialization directly within route definitions. It allows for easy instantiation of controllers and services without the need for separate binding classes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/dependency_management.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\ngetPages: [\n  GetPage(\n    name: '/',\n    page: () => HomeView(),\n    binding: BindingsBuilder(() {\n      Get.lazyPut<ControllerX>(() => ControllerX());\n      Get.put<Service>(()=> Api());\n    }),\n  ),\n  GetPage(\n    name: '/details',\n    page: () => DetailsView(),\n    binding: BindingsBuilder(() {\n      Get.lazyPut<DetailsController>(() => DetailsController());\n    }),\n  ),\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Third Page with GetView\nDESCRIPTION: This snippet demonstrates creating a Third page utilizing GetView and reactive programming principles. It shows how to respond to user actions and dynamically update the UI based on the controller's state.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nclass Third extends GetView<ControllerX> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      floatingActionButton: FloatingActionButton(onPressed: () {\n        controller.incrementList();\n      }),\n      appBar: AppBar(\n        title: Text(\"Third ${Get.arguments}\"),\n      ),\n      body: Center(\n          child: Obx(() => ListView.builder(\n              itemCount: controller.list.length,\n              itemBuilder: (context, index) {\n                return Text(\"${controller.list[index]}\");\n              }))),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Get.lazyPut() for Lazy Loading Dependencies in Dart\nDESCRIPTION: Demonstrates how to use Get.lazyPut() to lazily load dependencies, which are instantiated only when used. Useful for computationally expensive classes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/dependency_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n/// ApiMock will only be called when someone uses Get.find<ApiMock> for the first time\nGet.lazyPut<ApiMock>(() => ApiMock());\n\nGet.lazyPut<FirebaseAuth>(\n  () {\n    // ... some logic if needed\n    return FirebaseAuth();\n  },\n  tag: Math.random().toString(),\n  fenix: true\n)\n\nGet.lazyPut<Controller>( () => Controller() )\n```\n\n----------------------------------------\n\nTITLE: Changing Theme with GetX\nDESCRIPTION: Demonstrates how to change the application theme using `Get.changeTheme()` with a custom theme. It shows how to switch between light and dark themes based on the current theme mode.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_31\n\nLANGUAGE: dart\nCODE:\n```\nGet.changeTheme(ThemeData.light());\n```\n\n----------------------------------------\n\nTITLE: Creating Observable Classes in Dart with GetX\nDESCRIPTION: This snippet shows two approaches to creating observable classes: making individual properties observable, or making the entire class observable.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/state_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass RxUser {\n  final name = \"Camila\".obs;\n  final age = 18.obs;\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass User {\n  User({String name, int age});\n  var name;\n  var age;\n}\n\n// when instantiating:\nfinal user = User(name: \"Camila\", age: 18).obs;\n```\n\n----------------------------------------\n\nTITLE: Uso de una instancia asíncrona con GetX en Dart\nDESCRIPTION: Muestra cómo acceder y usar una instancia asíncrona previamente registrada con Get.putAsync().\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/dependency_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nint count = Get.find<SharedPreferences>().getInt('counter');\nprint(count);\n// out: 12345\n```\n\n----------------------------------------\n\nTITLE: Using ObxValue for Reactive State Management in Dart\nDESCRIPTION: This snippet demonstrates the use of `ObxValue` for reactive state management in Dart.  `ObxValue` is similar to `ValueBuilder` but automatically updates the UI when the observed Rx object's value changes. It takes a builder function that depends on an Rx object, and the UI is rebuilt whenever the Rx object's value is updated.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\nObxValue((data) => Switch(\n        value: data.value,\n        onChanged: data, // Rx, çağrılabilen fonsyon içerir. (flag) => data.value = flag şeklinde kullanılablir.\n    ),\n    false.obs,\n),\n```\n\n----------------------------------------\n\nTITLE: Extending GetConnect for API Requests\nDESCRIPTION: This snippet demonstrates how to extend `GetConnect` to create a provider for making API requests. It shows examples of GET and POST requests, including sending data in the body and uploading files. `http://youapi/users/$id` should be replaced with your API endpoint.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nclass UserProvider extends GetConnect {\n  // Get request\n  Future<Response> getUser(int id) => get('http://youapi/users/$id');\n  // Post request\n  Future<Response> postUser(Map data) => post('http://youapi/users', body: data);\n  // Post request with File\n  Future<Response<CasesModel>> postCases(List<int> image) {\n    final form = FormData({\n      'file': MultipartFile(image, filename: 'avatar.png'),\n      'otherFile': MultipartFile(image, filename: 'cover.png'),\n    });\n    return post('http://youapi/users/upload', form);\n  }\n\n  GetSocket userMessages() {\n    return socket('https://yourapi/users/socket');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Reactive State in GetX Controller and View in Dart\nDESCRIPTION: This snippet shows how to use reactive state in a GetX controller and view. It demonstrates the use of observable variables and a computed property in the controller, and how to use them in the view with GetX widgets.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/state_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// file controller\nfinal count1 = 0.obs;\nfinal count2 = 0.obs;\nint get sum => count1.value + count2.value;\n```\n\nLANGUAGE: dart\nCODE:\n```\n// file view\nGetX<Controller>(\n  builder: (controller) {\n    print(\"count 1 rebuild\");\n    return Text('${controller.count1.value}');\n  },\n),\nGetX<Controller>(\n  builder: (controller) {\n    print(\"count 2 rebuild\");\n    return Text('${controller.count2.value}');\n  },\n),\nGetX<Controller>(\n  builder: (controller) {\n    print(\"count 3 rebuild\");\n    return Text('${controller.sum}');\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive Variables Using Rx{Type} in Dart\nDESCRIPTION: This snippet demonstrates how to declare reactive variables using the Rx{Type} syntax in Dart. It shows examples for various data types including String, Bool, Int, Double, List, and Map.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/state_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = RxString('');\nfinal isLogged = RxBool(false);\nfinal count = RxInt(0);\nfinal balance = RxDouble(0.0);\nfinal items = RxList<String>([]);\nfinal myMap = RxMap<String, int>({});\n```\n\n----------------------------------------\n\nTITLE: Navigation Methods with GetX in Dart\nDESCRIPTION: Examples of various navigation methods provided by GetX that don't require context, including navigating to screens and handling back navigation.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ru.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp( // Ранее: MaterialApp(\n  home: MyHome(),\n)\n```\n\n----------------------------------------\n\nTITLE: Controller Lifecycle Initialization\nDESCRIPTION: Using onInit() method for initializing data and performing setup tasks instead of traditional constructor\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/kr_KO/state_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid onInit() {\n  fetchApi();\n  super.onInit();\n}\n```\n\n----------------------------------------\n\nTITLE: GetX Reactive State Example\nDESCRIPTION: Example showing reactive state management using GetX with observable variables.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ja-JP.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar name = 'Jonatas Borges'.obs;\n\nObx(() => Text(\"${controller.name}\"));\n```\n\n----------------------------------------\n\nTITLE: Updated GetX Named Routes Configuration in Flutter\nDESCRIPTION: This snippet illustrates the new way of configuring named routes in GetX, which allows for more flexibility in deciding which page to display based on parameters or login tokens.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-es.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page: () => Home()),\n  ]\n)\n```\n\nLANGUAGE: dart\nCODE:\n```\nGetStorage box = GetStorage();\n\nGetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page:(){\n      return box.hasData('token') ? Home() : Login();\n    })\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Stateless Widget UI with GetX\nDESCRIPTION: Complete example of a Flutter UI using GetX for state management and navigation, demonstrating dependency injection and reactive state updates without StatefulWidget.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pl.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n\n  @override\n  Widget build(context) {\n\n    // Instantiate your class using Get.put() to make it available for all \"child\" routes there.\n    final Controller c = Get.put(Controller());\n\n    return Scaffold(\n      // Use Obx(()=> to update Text() whenever count is changed.\n      appBar: AppBar(title: Obx(() => Text(\"Clicks: \" + c.count.string))),\n\n      // Replace the 8 lines Navigator.push by a simple Get.to(). You don't need context\n      body: Center(child: ElevatedButton(\n              child: Text(\"Go to Other\"), onPressed: () => Get.to(Other()))),\n      floatingActionButton:\n          FloatingActionButton(child: Icon(Icons.add), onPressed: c.increment));\n  }\n}\n\nclass Other extends StatelessWidget {\n  // You can ask Get to find a Controller that is being used by another page and redirect you to it.\n  final Controller c = Get.find();\n\n  @override\n  Widget build(context){\n     // Access the updated count variable\n     return Scaffold(body: Center(child: Text(c.count.string)));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Page Built Event - Dart\nDESCRIPTION: This function is executed immediately after the GetPage.page function is called. It can modify the result before the widget is displayed.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n### OnPageBuilt\n\n// Implementation for handling the event when a page is built can be added here.\n```\n\n----------------------------------------\n\nTITLE: Using Controller Access from Widgets in GetX\nDESCRIPTION: Shows how to directly access a controller using the static getter pattern in widget interactions, such as button click handlers. Demonstrates simplified controller access without repeatedly using Get.find().\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ja_JP/state_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFloatingActionButton(\n  onPressed: () {\n    Controller.to.increment(),\n  } // とっても簡単ですね！\n  child: Text(\"${Controller.to.counter}\"),\n),\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logging with GetMaterialApp in Dart\nDESCRIPTION: This snippet demonstrates how to implement custom logging using `GetMaterialApp` in Dart. By providing a `logWriterCallback`, you can redirect all logging messages from GetX to your preferred logging package. This allows for centralized and customized logging within your application.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  enableLog: true,\n  logWriterCallback: localLogWriter,\n);\n\nvoid localLogWriter(String text, {bool isError = false}) {\n  // istediğiniz logging paketine mesajı aktarır\n  // eğer, enableLog: false ise log mesajları bu callback içine gönderilir\n  // GetConfig.isLogEnable aracılığıyla isterseniz kontrol edebilirsiniz\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Controller in Another Class with GetBuilder\nDESCRIPTION: Example of how to access an existing controller in another widget class without re-initializing it. GetBuilder automatically finds the appropriate controller instance when used without an init parameter.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ja_JP/state_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass OtherClass extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: GetBuilder<Controller>(\n          builder: (s) => Text('${s.counter}'),\n        ),\n      ),\n    );\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Defining a route with a named parameter\nDESCRIPTION: This snippet shows how to define a route with a named parameter using GetX's `GetPage` and the `:parameterName` syntax.  This allows for cleaner and more structured URL parameter handling.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nvoid main() => runApp(\n  GetMaterialApp(\n    initialRoute: '/',\n    getPages: [\n      GetPage(name: '/', page: () => Home()),\n      /// Importante! ':user' não é uma nova rota, é somente uma\n      /// especificação do parâmentro. Não use '/segunda/:user/' e '/segunda'\n      /// se você precisa de uma nova rota para o user, então\n      /// use '/segunda/user/:user' se '/segunda' for uma rota\n      GetPage(name: '/segunda/:user', page: () => Segunda()), // recebe a ID\n      GetPage(name: '/terceira', page: () => Terceira(), transition: Transition.cupertino),\n    ]\n  ),\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying State with obx Widget in GetX\nDESCRIPTION: This snippet demonstrates how to display different states on the UI using the `obx` widget. The widget reacts to state changes in the controller, displaying different widgets based on the current status (loading, success, empty, error).\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/vi_VI/state_management.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass OtherClass extends GetView<Controller> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n\n      body: controller.obx(\n        (state)=>Text(state.name),\n        \n        // here you can put your custom loading indicator, but\n        // by default would be Center(child:CircularProgressIndicator())\n        onLoading: CustomLoadingIndicator(),\n        onEmpty: Text('No data found'),\n\n        // here also you can set your own error widget, but by\n        // default will be an Center(child:Text(error))\n        onError: (error)=>Text(error),\n      ),\n    );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive Variables using Rx<Type> in Dart with GetX\nDESCRIPTION: Demonstrates how to use Dart's generics with Rx to create reactive variables. This method provides more flexibility in terms of types, including custom classes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = Rx<String>('');\nfinal isLogged = Rx<Bool>(false);\nfinal count = Rx<Int>(0);\nfinal balance = Rx<Double>(0.0);\nfinal number = Rx<Num>(0);\nfinal items = Rx<List<String>>([]);\nfinal myMap = Rx<Map<String, int>>({});\n\n// Custom classes - it can be any class, literally\nfinal user = Rx<User>();\n```\n\n----------------------------------------\n\nTITLE: GetX Dependency Injection: Get.put() examples\nDESCRIPTION: This snippet provides examples of using the Get.put() method with various options, including specifying the class type and using tags for multiple instances of the same class. It also shows how to make an instance permanent.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/dependency_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.put<SomeClass>(SomeClass());\\nGet.put<LoginController>(LoginController(), permanent: true);\\nGet.put<ListItemController>(ListItemController, tag: \\\"some unique string\\\");\"\n```\n\n----------------------------------------\n\nTITLE: Updating UI with Controller.to\nDESCRIPTION: This example demonstrates how to update the UI using the static getter `Controller.to` to access the controller. This simplifies the syntax for calling controller methods and accessing its properties.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/state_management.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nFloatingActionButton(\n  onPressed:() {\n    Controller.to.increment(),\n  } // This is incredibly simple!\n  child: Text(\"${Controller.to.counter}\"),\n),\n```\n\n----------------------------------------\n\nTITLE: Using Observable Variables with Obx Widget\nDESCRIPTION: This code demonstrates how to use the Obx widget to automatically rebuild UI elements when an observable variable changes. The Obx widget only rebuilds when the observed value actually changes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/vi_VI/state_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nObx(() => Text(controller.name));\n```\n\n----------------------------------------\n\nTITLE: Importing Get Package - Dart\nDESCRIPTION: This snippet demonstrates how to import the Get package in your Dart files to utilize its features. Once imported, you can use Get for state management, navigation, and dependency injection within your Flutter app.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pt-br.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:get/get.dart';\n\n```\n\n----------------------------------------\n\nTITLE: Using GetMaterialApp\nDESCRIPTION: Replace MaterialApp with GetMaterialApp to enable GetX features\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(GetMaterialApp(home: Home()));\n```\n\n----------------------------------------\n\nTITLE: Sending data back to the previous route\nDESCRIPTION: This snippet shows how to send data back to the previous screen when using `Get.back()`. The `result` parameter is used to pass the data.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.back(result: 'sucesso');\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Routes with GetPage in Dart\nDESCRIPTION: This snippet demonstrates how to define nested routes in a declarative structure, mimicking a Flutter widget tree using GetPage. It outlines how child pages inherit the name of their ancestral pages, allowing effortless updates to child links. Dependencies include the GetX package and lightweight bindings between views and page definitions. Each GetPage includes a name, a page function returning a widget, bindings, and potentially other child GetPages.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nGetPage(\n  name: '/home',\n  page: () => HomeView(),\n  binding: HomeBinding(),\n),\nGetPage(\n  name: '/home/products',\n  page: () => ProductsView(),\n  binding: ProductsBinding(),\n),\nGetPage(\n  name: '/home/products/electronics',\n  page: () => ElectronicsView(),\n  binding: ElectronicsBinding(),\n),\n```\n\nLANGUAGE: dart\nCODE:\n```\nGetPage(\n      name: '/home',\n      page: () => HomeView(),\n      binding: HomeBinding(),\n      children: [\n        GetPage(\n            name: '/products',\n            page: () => ProductsView(),\n            binding: ProductsBinding(),\n            children: [\n              GetPage(\n                 name: '/electronics',\n                 page: () => ElectronicsView(),\n                 binding: ElectronicsBinding(),\n              ),\n            ],\n          ),\n      ],\n  );\n```\n\n----------------------------------------\n\nTITLE: Initializing GetBuilder with Controller Lifecycle Methods\nDESCRIPTION: Demonstrates how to use initState and dispose methods directly within GetBuilder, with an alternative approach using onInit and onClose controller methods\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/vi_VI/state_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  initState: (_) => Controller.to.fetchApi(),\n  dispose: (_) => Controller.to.closeStreams(),\n  builder: (s) => Text('${s.username}'),\n)\n```\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid onInit() {\n  fetchApi();\n  super.onInit();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Controller with Get.put() in Dart\nDESCRIPTION: Demonstrates how to instantiate a controller using Get.put() instead of direct instantiation. This makes the controller available throughout the app via GetX's dependency injection system.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/dependency_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nController controller = Get.put(Controller()); // Rather Controller controller = Controller();\n```\n\n----------------------------------------\n\nTITLE: Using Workers in GetX for Responsive State Management in Dart\nDESCRIPTION: This snippet demonstrates the use of GetX workers, which trigger callbacks in response to changes in observables. Various workers like 'ever', 'once', 'debounce', and 'interval' are defined to illustrate their functionality and importance in managing state efficiently.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\n/// Called every time the variable $_ is changed\never(count1, (_) => print(\"$_ has been changed\"));\n\n/// Called only first time the variable $_ is changed\nonce(count1, (_) => print(\"$_ was changed once\"));\n\n/// Anti DDos - Called every time the user stops typing for 1 second, for example.\ndebounce(count1, (_) => print(\"debouce$_\"), time: Duration(seconds: 1));\n\n/// Ignore all changes within 1 second.\ninterval(count1, (_) => print(\"interval $_\"), time: Duration(seconds: 1));\n```\n\n----------------------------------------\n\nTITLE: Sending data to named routes with arguments\nDESCRIPTION: This snippet shows how to send data to a named route using the `arguments` parameter in `Get.toNamed()`. The data can be of any type, such as String, Map, List, or a class instance.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.toNamed(\"/ProximaTela\", arguments: 'Get é o melhor');\n```\n```\n\n----------------------------------------\n\nTITLE: Get.putAsync() options explanation in Dart\nDESCRIPTION: This snippet explains all available options when using Get.putAsync(), including builder, tag and permanent. The builder must be an async function that returns the instance.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/dependency_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.putAsync<S>(\\n\\n  // wajib: sebuah async method yang akan di eksekusi untuk menginstansiasi kelas anda\\n  AsyncInstanceBuilderCallback<S> builder,\\n\\n  // opsional: sama seperti Get.put(), ini digunakan ketika anda menginginkan banyak instance berbeda dengan kelas yang sama\\n  // harus unik dan harus String.\\n  String tag,\\n\\n  // opsional: sama seperti Get.put(), digunakan ketika anda ingin mempertahankan\\n  // instance tersebut (keep-alive) untuk digunakan diseluruh aplikasi anda.\\n  // nilai defaultnya adalah false\\n  bool permanent = false\\n)\"\n```\n\n----------------------------------------\n\nTITLE: Using Workers for Event Callbacks in GetX\nDESCRIPTION: Demonstrates different types of workers (ever, once, debounce, interval) in GetX that can trigger callbacks when reactive variables change. Each worker handles events differently based on timing requirements.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ja_JP/state_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n/// `count1` が更新されるたびに第2引数のコールバックが実行される\never(count1, (_) => print(\"$_ has been changed\"));\n\n/// `count1` の最初の更新時のみ実行される\nonce(count1, (_) => print(\"$_ was changed once\"));\n\n/// DDoS攻撃対策に最適。たとえば、ユーザーが打鍵やクリックを止めて1秒後に実行など\ndebounce(count1, (_) => print(\"debouce$_\"), time: Duration(seconds: 1));\n\n/// 1秒以内の連続更新はすべて無視して実行しない\ninterval(count1, (_) => print(\"interval $_\"), time: Duration(seconds: 1));\n```\n\n----------------------------------------\n\nTITLE: Initializing Reactive Variables with GetX in Dart\nDESCRIPTION: This snippet showcases how to initialize reactive variables using GetX in Dart. It demonstrates creating observables by appending `.obs` to variables and accessing their values using `.value`.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// controller file\nfinal count1 = 0.obs;\nfinal count2 = 0.obs;\nint get sum => count1.value + count2.value;\n```\n\n----------------------------------------\n\nTITLE: GetX Dependency Injection: Get.create() examples\nDESCRIPTION: This snippet showcases examples of using Get.create() to manage dependencies.  Get.create() ensures that a new instance of the dependency is created every time Get.find() is called, making it suitable for controllers used in lists where each item requires its own controller instance.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/dependency_management.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.Create<SomeClass>(() => SomeClass());\\nGet.Create<LoginController>(() => LoginController());\"\n```\n\n----------------------------------------\n\nTITLE: Updating widgets with specific ID in GetBuilder\nDESCRIPTION: Method to update only widgets with a specific ID in GetBuilder, allowing for more granular control over widget rebuilds.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/state_management.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nupdate(['text']);\n```\n\n----------------------------------------\n\nTITLE: Creating a GetX Service\nDESCRIPTION: This snippet shows how to define a GetX service by extending `GetxService`.  The `DbService` and `SettingsService` classes demonstrate how to create services with asynchronous initialization logic using `Future` and `delay`. Services initialized in this way remain active and accessible throughout the application lifecycle via `Get.find()`. A `GetxService` is only removed by `Get.reset()\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-vi.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass DbService extends GetxService {\n  Future<DbService> init() async {\n    print('$runtimeType delays 2 sec');\n    await 2.delay();\n    print('$runtimeType ready!');\n    return this;\n  }\n}\n\nclass SettingsService extends GetxService {\n  void init() async {\n    print('$runtimeType delays 1 sec');\n    await 1.delay();\n    print('$runtimeType ready!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Mock Service for GetX Testing\nDESCRIPTION: Example of how to create a mock service for testing by extending GetxService and mixing in the Mock class to implement a NotificationService interface.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_41\n\nLANGUAGE: dart\nCODE:\n```\nclass NotificationServiceMock extends GetxService with Mock implements NotificationService {}\n```\n\n----------------------------------------\n\nTITLE: Global Settings Configuration in GetMaterialApp\nDESCRIPTION: Shows how to set global configurations for GetX including logging, transitions, route behavior, and default states\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  enableLog: true,\n  defaultTransition: Transition.fade,\n  opaqueRoute: Get.isOpaqueRouteDefault,\n  popGesture: Get.isPopGestureEnable,\n  transitionDuration: Get.defaultDurationTransition,\n  defaultGlobalState: Get.defaultGlobalState,\n);\n```\n\n----------------------------------------\n\nTITLE: Manual GetX Configuration in Flutter's MaterialApp\nDESCRIPTION: This code shows how to manually configure GetX within a MaterialApp, including setting up the navigator key and observer. It also demonstrates how to add custom middleware to the GetObserver.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-es.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  navigatorKey: Get.key,\n  navigatorObservers: [GetObserver()],\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  navigatorKey: Get.key,\n  navigatorObservers: [GetObserver(MiddleWare.observer)], // Here\n);\n```\n\n----------------------------------------\n\nTITLE: GetBuilder with Controller Lifecycle Methods\nDESCRIPTION: Demonstrates initializing and disposing controller methods using GetBuilder without traditional StatefulWidget lifecycle methods\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/kr_KO/state_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  initState: (_) => Controller.to.fetchApi(),\n  dispose: (_) => Controller.to.closeStreams(),\n  builder: (s) => Text('${s.username}'),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing GetView in Dart for Simplified Controller Access\nDESCRIPTION: Shows how to use GetView to create a stateless widget with easy access to a registered controller.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.zh-cn.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass AwesomeController extends GetxController {\n   final String title = 'My Awesome View';\n }\n\n class AwesomeView extends GetView<AwesomeController> {\n   @override\n   Widget build(BuildContext context) {\n     return Container(\n       padding: EdgeInsets.all(20),\n       child: Text( controller.title ),\n     );\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Using External Controller Instance with GetBuilder\nDESCRIPTION: Shows how to use an externally created controller instance with GetBuilder, which is useful when integrating with other dependency injection systems.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nController controller = Controller();\n[...]\nGetBuilder<Controller>(\n  init: controller, //here\n  builder: (_) => Text(\n    '${controller.counter}', // here\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Replacing Instances with Get.replace() and Get.lazyReplace() in Dart\nDESCRIPTION: Shows how to replace existing instances with similar or extended class instances using Get.replace() and Get.lazyReplace(). This allows for dynamic instance swapping.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/dependency_management.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nabstract class BaseClass {}\nclass ParentClass extends BaseClass {}\n\nclass ChildClass extends ParentClass {\n  bool isChild = true;\n}\n\n\nGet.put<BaseClass>(ParentClass());\n\nGet.replace<BaseClass>(ChildClass());\n\nfinal instance = Get.find<BaseClass>();\nprint(instance is ChildClass); //true\n\n\nclass OtherClass extends BaseClass {}\nGet.lazyReplace<BaseClass>(() => OtherClass());\n\nfinal instance = Get.find<BaseClass>();\nprint(instance is ChildClass); // false\nprint(instance is OtherClass); //true\n```\n\n----------------------------------------\n\nTITLE: Creating Observable Classes with GetX in Dart\nDESCRIPTION: This snippet shows two ways to create observable classes using GetX: making individual properties observable or making the entire class observable.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/tr_TR/state_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass RxUser {\n  final name = \"Camila\".obs;\n  final age = 18.obs;\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass User {\n  User({String name, int age});\n  var name;\n  var age;\n}\n\n// example:\nfinal user = User(name: \"Camila\", age: 18).obs;\n```\n\n----------------------------------------\n\nTITLE: Setting Locale and Translations in GetMaterialApp\nDESCRIPTION: This snippet demonstrates how to configure the locale and translations for your application using `GetMaterialApp`.  `Messages` should be your custom `Translations` class.  `locale` specifies the current language and region, while `fallbackLocale` provides a default if the specified locale is not supported.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nreturn GetMaterialApp(\n    translations: Messages(), // 번역들\n    locale: Locale('en', 'US'), // 해당 지역의 번역이 표시\n    fallbackLocale: Locale('en', 'UK'), // 잘못된 지역이 선택된 경우 복구될 지역을 지정\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing StateMixin with GetX Controller in Dart\nDESCRIPTION: This snippet demonstrates how to implement StateMixin with a GetX controller. The `with StateMixin<User>` allows the controller to manage different states of a `User` model, such as loading, success, empty, and error.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/vi_VI/state_management.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetController with StateMixin<User>{}\n```\n\n----------------------------------------\n\nTITLE: Using Reactive Values in Views with GetX in Dart\nDESCRIPTION: This snippet shows how to use reactive values in views using GetX, demonstrating the rebuilding behavior of different widgets based on value changes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/tr_TR/state_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// controller file\nfinal count1 = 0.obs;\nfinal count2 = 0.obs;\nint get sum => count1.value + count2.value;\n```\n\nLANGUAGE: dart\nCODE:\n```\n// view file\nGetX<Controller>(\n  builder: (controller) {\n    print(\"count 1 rebuild\");\n    return Text('${controller.count1.value}');\n  },\n),\nGetX<Controller>(\n  builder: (controller) {\n    print(\"count 2 rebuild\");\n    return Text('${controller.count2.value}');\n  },\n),\nGetX<Controller>(\n  builder: (controller) {\n    print(\"count 3 rebuild\");\n    return Text('${controller.sum}');\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Implementing Bindings Interface in Dart/Flutter with GetX\nDESCRIPTION: Creates a HomeBinding class that implements the Bindings interface, overriding the dependencies method to register a HomeController and Service using different injection methods.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/dependency_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeBinding implements Bindings {\n  @override\n  void dependencies() {\n    Get.lazyPut<HomeController>(() => HomeController());\n    Get.put<Service>(()=> Api());\n  }\n}\n\nclass DetailsBinding implements Bindings {\n  @override\n  void dependencies() {\n    Get.lazyPut<DetailsController>(() => DetailsController());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional updating of widgets with GetBuilder\nDESCRIPTION: Technique for conditionally updating widgets with GetBuilder by providing both an ID and a condition for when the update should occur.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/state_management.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nupdate(['text'], counter < 10);\n```\n\n----------------------------------------\n\nTITLE: Sending Data to Named Routes with GetX in Dart\nDESCRIPTION: Shows how to send data to a named route using the arguments parameter in GetX's toNamed() method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nGet.toNamed(\"/NextScreen\", arguments: 'Get is the best');\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection with GetX in Dart\nDESCRIPTION: Demonstrates how to use GetX's dependency injection to create and find controller instances throughout the application without using Provider or context.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ru.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nController controller = Get.put(Controller()); // Вместо Controller controller = Controller();\n```\n\n----------------------------------------\n\nTITLE: Displaying a SnackBar with GetX\nDESCRIPTION: This snippet demonstrates how to display a simple SnackBar using GetX's `Get.snackbar()` method.  This method does not require a `BuildContext`, making it easier to use from anywhere in your code.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.snackbar('Olá', 'eu sou uma SnackBar moderna e linda!');\n```\n```\n\n----------------------------------------\n\nTITLE: GetX Workers: ever, once, debounce, interval\nDESCRIPTION: This snippet showcases the implementation of various GetX workers. It includes ever, once, debounce and interval. It allows one to trigger specific callbacks when a variable changes its value.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/state_management.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n\"/// Chamada toda vez que a variável for alterada\never(count1, (value) => print(\\\"novo valor: $value\\\"));\n\n/// Chamada apenas na primeira vez que a variável for alterada\nonce(count1, (value) => print(\\\"novo valor: $value (não vai mudar mais)\\\"));\n\n/// Anti DDos - Chamada toda vez que o usuário parar de digitar por 1 segundo, por exemplo.\ndebounce(count1, (value) => print(\\\"debouce $value\\\"), time: Duration(seconds: 1));\n\n/// Ignore todas as mudanças num período de 1 segundo.\ninterval(count1, (value) => print(\\\"interval $value\\\"), time: Duration(seconds: 1));\"\n```\n\n----------------------------------------\n\nTITLE: Using controller instance directly in GetBuilder value\nDESCRIPTION: Example showing how to use a controller instance directly within GetBuilder's value parameter for accessing controller properties in the widget tree.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/state_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(  \n  init: Controller(),\n  builder: (value) => Text(\n    '${value.counter}', //aqui\n  )\n),\n```\n\n----------------------------------------\n\nTITLE: StateMixin for Advanced State Handling\nDESCRIPTION: Shows how to implement StateMixin for managing complex UI states with loading, success, empty, and error states\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetController with StateMixin<User>{}\n\nchange(data, status: RxStatus.success());\n\nclass OtherClass extends GetView<Controller> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: controller.obx(\n        (state)=>Text(state.name),\n        onLoading: CustomLoadingIndicator(),\n        onEmpty: Text('No data found'),\n        onError: (error)=>Text(error),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Controller Data with Get.find() in Dart\nDESCRIPTION: Demonstrates how to access data from a controller that was instantiated earlier using Get.find().\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/dependency_management.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nText(controller.textFromApi);\n```\n\n----------------------------------------\n\nTITLE: Reactive User Model with Observable Properties\nDESCRIPTION: Demonstrates creating a user model with observable properties and getter/setter mechanisms\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/state_management.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass RxUsuario {\n  final nome = \"Camila\".obs;\n  final idade = 18.obs;\n}\n\nclass Usuario {\n  final rx = RxUsuario();\n  String get nome => rx.nome.value;\n  set nome(String value) => rx.nome.value = value;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Routes with Bindings in GetX\nDESCRIPTION: Demonstrates how to set up named routes with associated Bindings in GetX navigation system.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/dependency_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ngetPages: [\n  GetPage(\n    name: '/',\n    page: () => HomeView(),\n    binding: HomeBinding(),\n  ),\n  GetPage(\n    name: '/detalhes',\n    page: () => DetalhesView(),\n    binding: DetalhesBinding(),\n  ),\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing GetxService in GetX\nDESCRIPTION: This snippet demonstrates how to initialize `GetxService` instances before running the Flutter app using `Get.putAsync`. It showcases how to manage the initialization order of services and ensure they are available before the app starts.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pt-br.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  await initServices(); /// Aguarda a inicialização dos Services.\n  runApp(SomeApp());\n}\n\n/// É uma jogada inteligente para inicializar seus services antes de executar o aplicativo Flutter, \n/// já que você pode controlar o fluxo de execução (talvez você precise carregar alguma configuração de tema, \n/// apiKey, linguagem definida pelo usuário ... então carregue SettingService antes de executar ApiService. \n/// então GetMaterialApp() não precisa reconstruir e obtém os valores diretamente.\nvoid initServices() async {\n  print('iniciando serviços...');\n  /// Aqui é onde você coloca a inicialização de get_storage, hive, shared_pref. \n  /// ou checa a conexão, ou o que quer que seja assíncrono.\n  await Get.putAsync(() => DbService().init());\n  await Get.putAsync(SettingsService()).init();\n  print('Todos os serviços iniciados.');\n}\n\nclass DbService extends GetxService {\n  Future<DbService> init() async {\n    print('$runtimeType delays 2 sec');\n    await 2.delay();\n    print('$runtimeType ready!');\n    return this;\n  }\n}\n\nclass SettingsService extends GetxService {\n  void init() async {\n    print('$runtimeType delays 1 sec');\n    await 1.delay();\n    print('$runtimeType ready!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Obx for Reactive UI Updates in GetX Dart\nDESCRIPTION: Shows how to use the Obx widget to reactively update UI components when observable variables change.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ru.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nObx(() => Text(\"${controller.name}\"));\n```\n\n----------------------------------------\n\nTITLE: Defining named routes in GetMaterialApp\nDESCRIPTION: This snippet demonstrates how to define named routes within the `GetMaterialApp` widget using the `getPages` property.  Each route is associated with a widget that will be displayed when navigating to that route.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nvoid main() {\n  runApp(\n    GetMaterialApp(\n      initialRoute: '/',\n      getPages: [\n        GetPage(name: '/', page: () => Home()),\n        GetPage(name: '/login', page: () => Login()),\n        GetPage(name: '/cadastro', page: () => Cadastro(), transition: Transition.cupertino),\n      ]\n    )\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Advanced GetX APIs and Utility Functions in Dart\nDESCRIPTION: This snippet showcases various advanced GetX APIs and utility functions, including route management, platform checking, screen dimensions, and context-related helpers for responsive design.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-es.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// dar los argumentos actuales de currentScreen\nGet.arguments\n\n// dar el nombre de la ruta anterior\nGet.previousRoute\n\n// dar la ruta sin procesar para acceder, por ejemplo, rawRoute.isFirst()\nGet.rawRoute\n\n// dar acceso a Routing API desde GetObserver\nGet.routing\n\n// comprobar si la cafetería está abierta\nGet.isSnackbarOpen\n\n// comprobar si el diálogo está abierto\nGet.isDialogOpen\n\n// comprobar si  bottomsheet está abierto\nGet.isBottomSheetOpen\n\n// eliminar una ruta.\nGet.removeRoute()\n\n// volver repetidamente hasta que predicate devuelva verdadero.\nGet.until()\n\n//ir a la siguiente ruta y eliminar todas las rutas anteriores hasta que predicate devuelva verdadero.\nGet.offUntil()\n\n// ir a la siguiente ruta con nombre y eliminar todas las rutas anteriores hasta que predicate devuelve verdadero.\nGet.offNamedUntil()\n\n//Verifique en qué plataforma se ejecuta la aplicación\nGetPlatform.isAndroid\nGetPlatform.isIOS\nGetPlatform.isWeb\n\n// Equivalente al método: MediaQuery.of(context).size.height, pero son inmutables.\nGet.height\nGet.width\n\n// Da el contexto de la pantalla en primer plano en cualquier parte de su código.\nGet.context\n\n// Da el contexto de la barra de bocadillos / diálogo / hoja inferior en primer plano en cualquier parte de su código.\nGet.contextOverlay\n\n// Note: los siguientes métodos son extensiones de context. Desde que tu\n// tiene acceso al contexto en cualquier lugar de su interfaz de usuario, puede usarlo en cualquier lugar del código de la interfaz de usuario\n\n// Si necesita un cambiable height/width (como las ventanas del navegador que se pueden escalar) necesitará usar context.\ncontext.width\ncontext.height\n\n\n\n// le da el poder de definir la mitad de la pantalla ahora, un tercio y así sucesivamente.\n// Útil para aplicaciones receptivas.\n// param dividedBy (double) optional - default: 1\n// param reducedBy (double) optional - default: 0\ncontext.heightTransformer()\ncontext.widthTransformer()\n\n/// Similar a MediaQuery.of(context).size\ncontext.mediaQuerySize()\n\n/// similar a MediaQuery.of(context).padding\ncontext.mediaQueryPadding()\n\n/// similar a MediaQuery.of(context).viewPadding\ncontext.mediaQueryViewPadding()\n\n/// similar a MediaQuery.of(context).viewInsets;\ncontext.mediaQueryViewInsets()\n\n/// similar a MediaQuery.of(context).orientation;\ncontext.orientation()\n\n/// comprobar si el dispositivo esta en landscape mode\ncontext.isLandscape()\n\n/// comprobar si el dispositivo esta en portrait mode\ncontext.isPortrait()\n\n/// similar a MediaQuery.of(context).devicePixelRatio;\ncontext.devicePixelRatio()\n\n/// similar a MediaQuery.of(context).textScaleFactor;\ncontext.textScaleFactor()\n\n/// obtener el lado más corto de la pantalla\ncontext.mediaQueryShortestSide()\n\n/// Verdadero si el ancho es mayor que 800\ncontext.showNavbar()\n\n/// Verdadero si el lado más corto es menor que 600p\ncontext.isPhone()\n\n/// Verdadero si el lado más corto es más grande que 600p\ncontext.isSmallTablet()\n\n/// Verdadero si el lado más corto es mayor que 720p\ncontext.isLargeTablet()\n\n/// Verdadero si el dispositivo actual es una tableta\ncontext.isTablet()\n```\n\n----------------------------------------\n\nTITLE: Defining Named Routes with Parameters in GetMaterialApp\nDESCRIPTION: Shows how to define named routes with parameters using GetMaterialApp and GetPage in the main function of a Flutter application.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(\n    GetMaterialApp(\n      initialRoute: '/',\n      getPages: [\n      GetPage(\n        name: '/',\n        page: () => MyHomePage(),\n      ),\n      GetPage(\n        name: '/profile/',\n        page: () => MyProfile(),\n      ),\n       GetPage(\n        name: '/profile/:user',\n        page: () => UserProfile(),\n      ),\n      GetPage(\n        name: '/third',\n        page: () => Third(),\n        transition: Transition.cupertino  \n      ),\n     ],\n    )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware with GetPage - Dart\nDESCRIPTION: This snippet shows how to create a list of middlewares using GetMiddleware in GetPage, allowing the application to define execution order via priority and redirecting rules.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal middlewares = [\n  GetMiddleware(priority: 2),\n  GetMiddleware(priority: 5),\n  GetMiddleware(priority: 4),\n  GetMiddleware(priority: -8),\n];\n```\n\n----------------------------------------\n\nTITLE: Using ValueBuilder for Local State Management in Flutter\nDESCRIPTION: ValueBuilder widget for simple local state management. It's a simplified StatefulWidget that works with a callback to update state values and provides lifecycle hooks.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_31\n\nLANGUAGE: dart\nCODE:\n```\nValueBuilder<bool>(\n  initialValue: false,\n  builder: (value, updateFn) => Switch(\n    value: value,\n    onChanged: updateFn, // même signature! vous pouvez utiliser (newValue) => updateFn (newValue)\n  ),\n  // si vous devez appeler quelque chose en dehors de la méthode du builder.\n  onUpdate: (value) => print(\"Valeur mise à jour: $value\"),\n  onDispose: () => print(\"Widget détruit\"),\n),\n```\n\n----------------------------------------\n\nTITLE: Initializing GetxServices in Dart for Persistent Dependencies\nDESCRIPTION: Demonstrates how to create and initialize GetxServices for managing persistent dependencies throughout the app lifecycle.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.zh-cn.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  await initServices();\n  runApp(SomeApp());\n}\n\nvoid initServices() async {\n  print('starting services ...');\n  await Get.putAsync(() => DbService().init());\n  await Get.putAsync(SettingsService()).init();\n  print('All services started...');\n}\n\nclass DbService extends GetxService {\n  Future<DbService> init() async {\n    print('$runtimeType delays 2 sec');\n    await 2.delay();\n    print('$runtimeType ready!');\n    return this;\n  }\n}\n\nclass SettingsService extends GetxService {\n  void init() async {\n    print('$runtimeType delays 1 sec');\n    await 1.delay();\n    print('$runtimeType ready!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a BottomSheet with GetX\nDESCRIPTION: This code snippet shows how to display a bottom sheet using GetX. It simplifies the process by removing the need for context.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_34\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.bottomSheet(\n  Container(\n    child: Wrap(\n      children: <Widget>[\n        ListTile(\n          leading: Icon(Icons.music_note),\n          title: Text('Music'),\n          onTap: () {}\n        ),\n        ListTile(\n          leading: Icon(Icons.videocam),\n          title: Text('Video'),\n          onTap: () {},\n        ),\n      ],\n    ),\n  )\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Main Function to Demonstrate Observable User Usage in Dart\nDESCRIPTION: This main function creates an instance of the 'User' class and manipulates the observable 'age'. It prints the value of 'name' and listens for changes in 'age', printing each new value as it updates. This showcases the reactive nature of observables in GetX.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  final user = User();\n  print(user.name);\n  user.age = 23;\n  user.rx.age.listen((int age) => print(age));\n  user.age = 24;\n  user.age = 25;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Reactive Variable in GetX\nDESCRIPTION: This snippet shows how to create a reactive variable in GetX by adding '.obs' to the end of a variable declaration, making it observable for automatic UI updates.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/vi_VI/state_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar name = 'Khang Huỳnh'.obs;\n```\n\n----------------------------------------\n\nTITLE: Customizing a SnackBar with Get\nDESCRIPTION: Explains how to implement a highly customizable SnackBar using Getx, with multiple options for customization such as icons, duration, position, and more.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/route_management.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nGet.snackbar(\n  \"Hey i'm a Get SnackBar!\", // title\n  \"It's unbelievable! I'm using SnackBar without context, without boilerplate, without Scaffold, it is something truly amazing!\", // message\n  icon: Icon(Icons.alarm),\n  shouldIconPulse: true,\n  onTap:(){},\n  barBlur: 20,\n  isDismissible: true,\n  duration: Duration(seconds: 3),\n);\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection with GetX\nDESCRIPTION: Demonstrates how to inject a controller into the GetX dependency management system, making it available throughout the application with a single line of code.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ur-PK.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nController controller = Get.put(Controller()); // Rather Controller controller = Controller();\n```\n\n----------------------------------------\n\nTITLE: Working with Custom Rx Models in GetX\nDESCRIPTION: Demonstrates how to use custom class objects with .obs and explains the proper way to update them. Shows the use of refresh() and update() methods to notify GetX of changes to properties inside objects.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-bn.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n/// Custom Rx Models:\n\n// toJson(), toString() are deferred to the child, so you can implement override on them, and print() the observable directly.\n\nclass User {\n    String name, last;\n    int age;\n    User({this.name, this.last, this.age});\n\n    @override\n    String toString() => '$name $last, $age years old';\n}\n\nfinal user = User(name: 'John', last: 'Doe', age: 33).obs;\n\n// `user` is \"reactive\", but the properties inside ARE NOT!\n// So, if we change some variable inside of it...\nuser.value.name = 'Roi';\n// The widget will not rebuild!,\n// `Rx` don't have any clue when you change something inside user.\n// So, for custom classes, we need to manually \"notify\" the change.\nuser.refresh();\n\n// or we can use the `update()` method!\nuser.update((value){\n  value.name='Roi';\n});\n\nprint( user );\n```\n\n----------------------------------------\n\nTITLE: Setting Up Nested Navigation with Get\nDESCRIPTION: Explains how to set up nested navigation stacks using Getx. Highlights the process of defining routes by index, simplifying Flutter's navigation.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/route_management.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nNavigator(\n  key: Get.nestedKey(1), // create a key by index\n  initialRoute: '/',\n  onGenerateRoute: (settings) {\n    if (settings.name == '/') {\n      return GetPageRoute(\n        page: () => Scaffold(\n          appBar: AppBar(\n            title: Text(\"Main\"),\n          ),\n          body: Center(\n            child: TextButton(\n              color: Colors.blue,\n              onPressed: () {\n                Get.toNamed('/second', id:1); // navigate by your nested route by index\n              },\n              child: Text(\"Go to second\"),\n            ),\n          ),\n        ),\n      );\n    } else if (settings.name == '/second') {\n      return GetPageRoute(\n        page: () => Center(\n          child: Scaffold(\n            appBar: AppBar(\n              title: Text(\"Main\"),\n            ),\n            body: Center(\n              child:  Text(\"second\")\n            ),\n          ),\n        ),\n      );\n    }\n  }\n),\n```\n\n----------------------------------------\n\nTITLE: Converting Class Values to Observable in GetX\nDESCRIPTION: This snippet illustrates how to convert class values to observable properties using GetX. Each property in the `RxUser` class is declared as an observable with `.obs`.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass RxUser {\n  final name = \"Camila\".obs;\n  final age = 18.obs;\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to a new screen with GetX (named routes)\nDESCRIPTION: This snippet shows how to navigate to a new screen using GetX with named routes using the `Get.toNamed()` method.  It takes the name of the route as an argument, which is defined in the `GetMaterialApp` configuration.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.toNamed(\"/ProximaTela\");\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Logging Callback in GetMaterialApp\nDESCRIPTION: Demonstrates how to redirect logging messages and implement a custom log writer callback for external logging packages\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  enableLog: true,\n  logWriterCallback: localLogWriter,\n);\n\nvoid localLogWriter(String text, {bool isError = false}) {\n  // pass the message to your favourite logging package here\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Routes with GetX in Dart\nDESCRIPTION: This snippet demonstrates how to define named routes in a GetX application, integrating route management with the binding classes created earlier. It provides an efficient way to manage dependencies as routes are accessed.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/dependency_management.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\ngetPages: [\n  GetPage(\n    name: '/',\n    page: () => HomeView(),\n    binding: HomeBinding(),\n  ),\n  GetPage(\n    name: '/details',\n    page: () => DetailsView(),\n    binding: DetailsBinding(),\n  ),\n];\n```\n\n----------------------------------------\n\nTITLE: Using BindingsBuilder in Dart\nDESCRIPTION: This example demonstrates how to use `BindingsBuilder` as an alternative to creating separate Binding classes.  It uses a callback function to define the dependencies directly within the route configuration.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/dependency_management.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n\"getPages: [\\n  GetPage(\\n    name: '/',\\n    page: () => HomeView(),\\n    binding: BindingsBuilder(() {\\n      Get.lazyPut<ControllerX>(() => ControllerX());\\n      Get.put<Service>(()=> Api());\\n    }),\\n  ),\\n  GetPage(\\n    name: '/details',\\n    page: () => DetailsView(),\\n    binding: BindingsBuilder(() {\\n      Get.lazyPut<DetailsController>(() => DetailsController());\\n    }),\\n  ),\\n];\"\n```\n\n----------------------------------------\n\nTITLE: Direct Controller Instance Usage in GetBuilder\nDESCRIPTION: Demonstrates how to use controller instance directly within GetBuilder widget.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  init: Controller(),\n  builder: (value) => Text(\n    '${value.counter}', //here\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Configuring SmartManagement in GetMaterialApp in Dart\nDESCRIPTION: This code snippet shows how to configure the `SmartManagement` setting within the `GetMaterialApp`.  The `smartManagement` property controls how GetX manages the disposal of unused dependencies. The provided example sets it to `SmartManagement.onlyBuilders`.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/dependency_management.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n\"void main () {\\n  runApp(\\n    GetMaterialApp(\\n      smartManagement: SmartManagement.onlyBuilders //here\\n      home: Home(),\\n    )\\n  )\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using Reactive Variables in Views with GetX in Dart\nDESCRIPTION: This snippet demonstrates how to use reactive variables in a Flutter view with the GetX package. It shows the rebuilding of widgets based on changes to observable variables and how the sum getter updates accordingly.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// view file\nGetX<Controller>(\n  builder: (controller) {\n    print(\"count 1 rebuild\");\n    return Text('${controller.count1.value}');\n  },\n),\nGetX<Controller>(\n  builder: (controller) {\n    print(\"count 2 rebuild\");\n    return Text('${controller.count2.value}');\n  },\n),\nGetX<Controller>(\n  builder: (controller) {\n    print(\"count 3 rebuild\");\n    return Text('${controller.sum}');\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Observables (Rx) Usage Examples in Dart\nDESCRIPTION: This section explains how to use observables (`.obs`) in GetX for reactive programming. It covers various methods and operators available for Rx types, including updating values, toggling booleans, setting values to null, and working with custom Rx models. It emphasizes that `.obs` creates a wrapper around the value, and you need to access the actual value using `.value` or by calling the Rx object as a function.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\nvar message = 'Hello world'.obs;\nprint( 'Message \"$message\" has Type ${message.runtimeType}');\n\nfinal name = 'GetX'.obs;\n// eğer değer şimdikinden farklı ise, sadece stream'i \"günceller\"\nname.value = 'Hey';\n\n// Tüm Rx özellikleri \"çağrılabilir\" ve geriye yeni bir değer döndürür.\n// Fakat bu yaklaşım `null` değerleri kabul etmez, sonucunda UI rebuild (tekrardan oluşturulmaz) edilmez.\nname('Hello');\n\n// getter yapmak gibi, 'Hello'yazdırır.\n\nname() ;\n\n/// numbers:\n\nfinal count = 0.obs;\n\n// Tüm non mutable (değişken olmayan) işlemleri num primitives üzerinden yapabilirsiniz.\ncount + 1;\n\n// Dikkat edin! Bu sadece `count` değerinin 'final' olmayıp 'var' olduğu değerlerde mümkündür.\ncount += 1;\n\n// Ayrıca değerleri kıyaslayabilirsiniz:\ncount > 2;\n\n/// booleans:\n\nfinal flag = false.obs;\n\n// değer true/false arasında değişir.\nflag.toggle();\n\n\n/// tüm tipler için:\n\n// \"value\"'ları null'a çevirir.\nflag.nil();\n\n// Tüm toString(), toJson() işlemleri `value`'ya aktarılır.\nprint( count ); // RxInt içinden `toString()` çağrılır.\n\nfinal abc = [0,1,2].obs;\n// Değeri bir json Array (dizi) yapısına çevirir ve RxList şeklinde yazdırır.\n// Json tüm Rx tipleri tarafından desteklenir.\nprint('json: ${jsonEncode(abc)}, type: ${abc.runtimeType}');\n\n// RxMap, RxList ve RxSet kendi native tiplerinden extend edilen özel Rx tipleridir.\n// Fakat List ile çalışmak normal listelerle çalışmak gibidir. Reaktiv olmasına rağmen.\nabc.add(12); // '12' listeye eklenir ve stream GÜNCELLENİR.\nabc[3]; // List'deki gibi 3. index okunur.\n\n\n// Rx ve value ile çalışmak aynıdır fakat hashCode her zaman value'dan alınır.\nfinal number = 12.obs;\nprint( number == 12 ); // çıktı: true\n\n/// Özel Rx Modelleri:\n\n\n// toJson(), toString() child'a gönderilir. Böylelikle override'ları onlara implement edebilirsiniz ve doğrudan gözlemlenebiliri print() edebilirsiniz.\n\nclass User {\n    String name, last;\n    int age;\n    User({this.name, this.last, this.age});\n\n    @override\n    String toString() => '$name $last, $age years old';\n}\n\nfinal user = User(name: 'John', last: 'Doe', age: 33).obs;\n\n// `user`,\"reactive\" yapıdadır. Fakat içinde özellikleri DEĞİLDİR.\n// Yani eğer içindeki bazı değerleri değiştirirsek\nuser.value.name = 'Roi';\n//widget, rebuild olmayacaktır!,\n//`Rx`, user içindeki bir şeyi değiştirdiğinizde, bundan haberi olmayacaktır.\n// Özel sınıflar oluşturmak için, manuel olarak değişiklikleri \"notify\" etmeliyiz.\nuser.refresh();\n\n// Ya da `update()` metodunu kullanabiliriz\nuser.update((value){\n  value.name='Roi';\n});\n\nprint( user );\n```\n\n----------------------------------------\n\nTITLE: Instantiate Controller with Get.put() in Dart\nDESCRIPTION: This snippet demonstrates how to instantiate a controller class using Get.put(). It allows making the controller available throughout the application without the need for Provider context or inherited widgets.  Dependencies can be declared as permanent or tagged for unique identification.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/dependency_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n\"Controller controller = Get.put(Controller());\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Observable with .obs and Type Inference in Dart\nDESCRIPTION: This snippet showcases the most practical way to make a variable observable in GetX by simply appending `.obs` to the initial value. Dart infers the type of the variable, simplifying the code. UI updates are automatically triggered when the value changes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n\"var count = 0.obs;\\n\\n// or Rxint count = 0.obs;\\n// or Rx<int> count = 0.obs;\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware in GetX\nDESCRIPTION: Demonstrates how to use middleware for route observation and event triggering in GetX.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/route_management.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  routingCallback: (routing) {\n    if(routing.current == '/second'){\n      openAds();\n    }\n  }\n)\n\nvoid main() {\n  runApp(\n    MaterialApp(\n      onGenerateRoute: Router.generateRoute,\n      initialRoute: \"/\",\n      navigatorKey: Get.key,\n      navigatorObservers: [\n        GetObserver(MiddleWare.observer), // HERE !!!\n      ],\n    ),\n  );\n}\n\nclass MiddleWare {\n  static observer(Routing routing) {\n    if (routing.current == '/second' && !routing.isSnackbar) {\n      Get.snackbar(\"Hi\", \"You are on second route\");\n    } else if (routing.current =='/third'){\n      print('last route called');\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StateMixin in GetX Controller\nDESCRIPTION: Shows how to add StateMixin to a GetX controller to handle typed state management for a User model.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetController with StateMixin<User>{}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Dependency Registration with Get.putAsync() in Dart\nDESCRIPTION: Shows how to register asynchronous instances using Get.putAsync(). This is useful for dependencies that require asynchronous initialization, such as SharedPreferences.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/dependency_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nGet.putAsync<SharedPreferences>(() async {\n  final prefs = await SharedPreferences.getInstance();\n  await prefs.setInt('counter', 12345);\n  return prefs;\n});\n\nGet.putAsync<YourAsyncClass>( () async => await YourAsyncClass() )\n```\n\nLANGUAGE: dart\nCODE:\n```\nGet.putAsync<S>(\n\n  // mandatory: an async method that will be executed to instantiate your class\n  AsyncInstanceBuilderCallback<S> builder,\n\n  // optional: same as Get.put(), it is used for when you want multiple different instance of a same class\n  // must be unique\n  String tag,\n\n  // optional: same as in Get.put(), used when you need to maintain that instance alive in the entire app\n  // defaults to false\n  bool permanent = false\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Observable User Properties in Dart using GetX\nDESCRIPTION: This snippet defines a class 'RxUser' that contains observable properties 'name' and 'age'. The 'User' class then wraps this RxUser instance, allowing the manipulation of user data through reactive getters and setters. Required dependencies include the GetX package for managing state with observables.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nclass RxUser {\n  final name = \"Camila\".obs;\n  final age = 18.obs;\n}\n\nclass User {\n  User({String name, int age});\n  final rx = RxUser();\n\n  String get name => rx.name.value;\n  set name(String value) => rx.name.value = value;\n\n  int get age => rx.age.value;\n  set age(int value) => rx.age.value = value;\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Middleware with GetObserver\nDESCRIPTION: Shows how to manually attach a middleware observer using `GetObserver` when not using `GetMaterialApp`. It involves adding `GetObserver` to the `navigatorObservers` list within a `MaterialApp` widget.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(\n    MaterialApp(\n      onGenerateRoute: Router.generateRoute,\n      initialRoute: \"/\",\n      navigatorKey: Get.key,\n      navigatorObservers: [\n        GetObserver(MiddleWare.observer), // AQUI !!!\n      ],\n    )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Theme with GetX in Dart\nDESCRIPTION: This snippet demonstrates how to change the app theme using GetX. It shows a simple way to switch between light and dark themes without needing a separate ThemeProvider.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-es.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nGet.changeTheme(ThemeData.light());\n```\n\nLANGUAGE: dart\nCODE:\n```\nGet.changeTheme(Get.isDarkMode? ThemeData.light(): ThemeData.dark());\n```\n\n----------------------------------------\n\nTITLE: Building a GetX UI\nDESCRIPTION: Create a stateless widget that uses GetX for state management and navigation\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n\n  @override\n  Widget build(context) {\n\n    final Controller c = Get.put(Controller());\n    \n    return Scaffold(\n      appBar: AppBar(title: Obx(() => Text(\"Clicks: ${c.count}\"))),\n\n      body: Center(child: ElevatedButton(\n              child: Text(\"Go to Other\"), onPressed: () => Get.to(Other()))),\n      floatingActionButton:\n          FloatingActionButton(child: Icon(Icons.add), onPressed: c.increment));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GetX Reactive Widgets with Selective Rebuilding\nDESCRIPTION: Shows how GetX rebuilds only specific widgets when observable values change, ensuring optimal performance\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/state_management.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nGetX<Controller>(\n  builder: (_) {\n    print(\"count 1 foi reconstruído\");\n    return Text('${_.count1.value}');\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Get.putAsync() with All Options in Dart\nDESCRIPTION: Shows all available options when using Get.putAsync() for asynchronous dependency injection, including builder function, tag, and permanence.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/dependency_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nGet.putAsync<S>(\n\n  // mandatory: an async method that will be executed to instantiate your class\n  AsyncInstanceBuilderCallback<S> builder,\n\n  // optional: same as Get.put(), it is used for when you want multiple different instance of a same class\n  // must be unique\n  String tag,\n\n  // optional: same as in Get.put(), used when you need to maintain that instance alive in the entire app\n  // defaults to false\n  bool permanent = false\n)\n```\n\n----------------------------------------\n\nTITLE: Utilisation d'Obx pour observer les changements d'état avec GetX en Dart\nDESCRIPTION: Ce snippet montre comment utiliser Obx pour créer un widget qui se met à jour automatiquement lorsque la valeur observée change.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nObx(() => Text(\"${controller.name}\"));\n```\n\n----------------------------------------\n\nTITLE: Using GetX Controller in FloatingActionButton in Dart\nDESCRIPTION: This snippet demonstrates how to use a GetX controller directly in a FloatingActionButton. It shows incrementing the counter and displaying its value.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/state_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFloatingActionButton(\n  onPressed: () {\n    Controller.to.increment(),\n  } // This is incredibly simple!\n  child: Text(\"${Controller.to.counter}\"),\n),\n```\n\n----------------------------------------\n\nTITLE: Closing the Current Screen/Dialog with GetX\nDESCRIPTION: This snippet demonstrates how to close the current screen, dialog, or bottom sheet using GetX's `Get.back()` method.  This is equivalent to `Navigator.pop(context)` but without needing context.  It simplifies the process of closing UI elements.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.back();\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Routes with GetX in Dart\nDESCRIPTION: Shows the updated approach for configuring named routes using GetX. This snippet demonstrates how to define routes using GetPage, which allows for more flexible and dynamic route definitions.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-ar.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page: () => Home()),\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Using Bindings with Direct Navigation in GetX\nDESCRIPTION: Demonstrates how to use bindings with direct navigation methods in GetX, attaching HomeBinding and DetailsBinding to their respective views during navigation.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/dependency_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nGet.to(Home(), binding: HomeBinding());\nGet.to(DetailsView(), binding: DetailsBinding())\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic URL Parameters in GetX\nDESCRIPTION: Shows how to work with dynamic URL parameters in GetX, including defining routes with parameters and retrieving them.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/route_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nGet.offAllNamed(\"/NextScreen?device=phone&id=354&name=Enzo\");\n\nprint(Get.parameters['id']);\n// out: 354\nprint(Get.parameters['name']);\n// out: Enzo\n\nvoid main() {\n  runApp(\n    GetMaterialApp(\n      initialRoute: '/',\n      getPages: [\n      GetPage(\n        name: '/',\n        page: () => MyHomePage(),\n      ),\n      GetPage(\n        name: '/profile/',\n        page: () => MyProfile(),\n      ),\n       GetPage(\n        name: '/profile/:user',\n        page: () => UserProfile(),\n      ),\n      GetPage(\n        name: '/third',\n        page: () => Third(),\n        transition: Transition.cupertino  \n      ),\n     ],\n    )\n  );\n}\n\nGet.toNamed(\"/profile/34954\");\n\nprint(Get.parameters['user']);\n// out: 34954\n\nGet.toNamed(\"/profile/34954?flag=true&country=italy\");\n\nvar parameters = <String, String>{\"flag\": \"true\",\"country\": \"italy\",};\nGet.toNamed(\"/profile/34954\", parameters: parameters);\n\nprint(Get.parameters['user']);\nprint(Get.parameters['flag']);\nprint(Get.parameters['country']);\n// out: 34954 true italy\n```\n\n----------------------------------------\n\nTITLE: Initializing Services with GetX\nDESCRIPTION: This snippet demonstrates how to initialize GetX services before running the Flutter app. It uses `Get.putAsync` to asynchronously initialize services like `DbService` and `SettingsService`, ensuring they are available before the app starts. This allows for loading configurations or data before the UI is built.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-vi.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  await initServices(); /// AWAIT SERVICES INITIALIZATION.\n  runApp(SomeApp());\n}\n\n/// Is a smart move to make your Services intiialize before you run the Flutter app.\n/// as you can control the execution flow (maybe you need to load some Theme configuration,\n/// apiKey, language defined by the User... so load SettingService before running ApiService.\n/// so GetMaterialApp() doesnt have to rebuild, and takes the values directly.\nvoid initServices() async {\n  print('starting services ...');\n  /// Here is where you put get_storage, hive, shared_pref initialization.\n  /// or moor connection, or whatever that's async.\n  await Get.putAsync(() => DbService().init());\n  await Get.putAsync(SettingsService()).init();\n  print('All services started...');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Counter with GetX in Dart\nDESCRIPTION: This snippet demonstrates how to implement a simple counter using GetX, showing the concise nature of GetX state management.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/tr_TR/state_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass CountController extends GetxController {\n  final count = 0.obs;\n}\n\n// To increment the counter\ncontroller.count.value++\n```\n\n----------------------------------------\n\nTITLE: Creating Observable Lists in Dart using GetX\nDESCRIPTION: This snippet demonstrates how to create an observable list of 'User' instances in Dart using GetX. It highlights the ease of making lists reactive, which allows widgets to update automatically when items are added or modified.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nfinal list = List<User>().obs;\n```\n\n----------------------------------------\n\nTITLE: Creating a Middleware Class with GetX\nDESCRIPTION: Illustrates how to create a middleware class to listen to routes, snackbars, dialogs, and bottom sheets using GetX. The example shows how to check the current route and display a snackbar if it matches a specific route.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\nclass MiddleWare {\n  static observer(Routing routing) {\n    /// Você pode escutar junto com as rotas, snackbars, dialogs\n    /// e bottomsheets em cada tela.\n    /// Se você precisar entrar em algum um desses 3 eventos aqui diretamente,\n    /// você precisa especificar que o evento é != do que você está tentando fazer\n    if (routing.current == '/segunda' && !routing.isSnackbar) {\n      Get.snackbar(\"Olá\", \"Você está na segunda rota\");\n    } else if (routing.current =='/terceira'){\n      print('última rota chamada');\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GetX Manually in Flutter\nDESCRIPTION: Manual configuration options for GetX when not using GetMaterialApp. This shows how to set up the navigator key and observers for basic GetX functionality in a standard MaterialApp.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  navigatorKey: Get.key,\n  navigatorObservers: [GetObserver()],\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing a SnackBar with GetX\nDESCRIPTION: This code snippet demonstrates how to customize a SnackBar using GetX, including setting the title, message, icon, and other properties. GetX allows for extensive customization without the need for context or boilerplate code.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_31\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.snackbar(\n  \"Hey i'm a Get SnackBar!\", // title\n  \"It's unbelievable! I'm using SnackBar without context, without boilerplate, without Scaffold, it is something truly amazing!\", // message\n  icon: Icon(Icons.alarm),\n  shouldIconPulse: true,\n  onTap:(){},\n  barBlur: 20,\n  isDismissible: true,\n  duration: Duration(seconds: 3),\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring GetX with MaterialApp in Dart\nDESCRIPTION: This code snippet demonstrates how to configure GetX using MaterialApp by providing the navigator key and navigator observers. It includes how to add middleware using GetObserver and how to set global settings for GetX using GetMaterialApp or Get.config before any routes are included.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  navigatorKey: Get.key,\n  navigatorObservers: [GetObserver()],\n);\n```\n\n----------------------------------------\n\nTITLE: GetX Dependency Injection: Get.putAsync() examples\nDESCRIPTION: This snippet provides examples of using Get.putAsync() to register asynchronous dependencies.  It's used when the dependency requires an asynchronous initialization process. The snippet demonstrates retrieving a SharedPreferences instance asynchronously.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/dependency_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.putAsync<SharedPreferences>(() async {\\n  final prefs = await SharedPreferences.getInstance();\\n  await prefs.setInt('counter', 12345);\\n  return prefs;\\n});\\n\\nGet.putAsync<YourAsyncClass>( () async => await YourAsyncClass() )\"\n```\n\n----------------------------------------\n\nTITLE: Using Translations in GetX\nDESCRIPTION: Demonstrates how to use the translation feature by appending .tr to a string key, which will be translated based on the current locale.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ur-PK.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nText('title'.tr);\n```\n\n----------------------------------------\n\nTITLE: Using ValueBuilder for Local State Management in Dart\nDESCRIPTION: This snippet showcases the use of `ValueBuilder` for simplified state management within a widget in Dart.  `ValueBuilder` provides a straightforward way to manage a single value and trigger UI updates, similar to `setState` in `StatefulWidget`. It takes an `initialValue`, a `builder` function that returns a widget based on the value, and optional `onUpdate` and `onDispose` callbacks.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\nValueBuilder<bool>(\n  initialValue: false,\n  builder: (value, updateFn) => Switch(\n    value: value,\n    onChanged: updateFn, // tamamen aynısı! ( newValue ) => updateFn( newValue ) yapısını da kullanabilirsiniz\n  ),\n  // eğer builder metodu dışından bir çağırma işlemi yapılacak ise\n  onUpdate: (value) => print(\"Value updated: $value\"),\n  onDispose: () => print(\"Widget unmounted\"),\n),\n```\n\n----------------------------------------\n\nTITLE: Closing Streams in GetX Controller\nDESCRIPTION: Shows how to properly close streams using the onClose method in a GetX controller\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/vi_VI/state_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n  StreamController<User> user = StreamController<User>();\n  StreamController<String> name = StreamController<String>();\n\n  @override\n  void onClose() {\n    user.close();\n    name.close();\n    super.onClose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GetX Dependency Injection: Get.put()\nDESCRIPTION: This snippet demonstrates how to use Get.put() to inject a dependency into the GetX dependency injection system. Get.put() is a common way to inject dependencies, especially for controllers associated with views, making the controller available throughout the application.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/dependency_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n\"Controller controller = Get.put(Controller()); // Rather Controller controller = Controller();\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic URL Parameters with GetX in Dart\nDESCRIPTION: Demonstrates how to access parameters from dynamic URL-like links in the target screen or controller using Get.parameters.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nprint(Get.parameters['id']);\n// out: 354\nprint(Get.parameters['name']);\n// out: Enzo\n```\n\n----------------------------------------\n\nTITLE: Navigation avec GetX en Dart\nDESCRIPTION: Ces snippets montrent différentes méthodes de navigation avec GetX, y compris la navigation vers un nouvel écran, la navigation avec des routes nommées, et la fermeture d'écrans.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nGet.to(ÉcranSuivant());\n```\n\nLANGUAGE: dart\nCODE:\n```\nGet.toNamed('/details');\n```\n\nLANGUAGE: dart\nCODE:\n```\nGet.back();\n```\n\nLANGUAGE: dart\nCODE:\n```\nGet.off(NextScreen());\n```\n\nLANGUAGE: dart\nCODE:\n```\nGet.offAll(NextScreen());\n```\n\n----------------------------------------\n\nTITLE: Implementing BindingsBuilder in GetX Route Definitions\nDESCRIPTION: Shows how to use BindingsBuilder in GetPage definitions to initialize controllers and services for different routes. This approach simplifies dependency management by avoiding the need to create separate binding classes for each route.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/kr_KO/dependency_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\ngetPages: [\n  GetPage(\n    name: '/',\n    page: () => HomeView(),\n    binding: BindingsBuilder(() {\n      Get.lazyPut<ControllerX>(() => ControllerX());\n      Get.put<Service>(()=> Api());\n    }),\n  ),\n  GetPage(\n    name: '/details',\n    page: () => DetailsView(),\n    binding: BindingsBuilder(() {\n      Get.lazyPut<DetailsController>(() => DetailsController());\n    }),\n  ),\n];\n```\n\n----------------------------------------\n\nTITLE: Building List View with Observable List in Dart using GetX\nDESCRIPTION: This code snippet illustrates how to build a ListView with an observable list in Dart. The 'ListView.builder' dynamically constructs a list view that reflects changes to the observable list property, ensuring a reactive UI.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nListView.builder (\n  itemCount: list.length\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing GetX controller with Get.find()\nDESCRIPTION: Example of accessing a controller instance directly using Get.find() within a GetBuilder widget without using static getters.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/state_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetController {\n // sem nenhum método estático\n[...]\n}\n// Numa classe stateful/stateless\nGetBuilder<Controller>(\n  init: Controller(), // use somente uma vez por controller, não se esqueça\n  builder: (_) => Text(\n    '${Get.find<Controller>().counter}', //aqui\n  )\n),\n```\n\n----------------------------------------\n\nTITLE: Initializing MaterialApp with GetX\nDESCRIPTION: This snippet initializes a MaterialApp using GetX with a navigator key and observer. It enables navigation features provided by the GetX framework.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pl.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  navigatorKey: Get.key,\n  navigatorObservers: [GetObserver()],\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying a Custom Dialog with GetX\nDESCRIPTION: This code snippet demonstrates how to display a custom dialog using GetX. It simplifies the process by removing the need for context.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_32\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.dialog(YourDialogWidget());\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a GetX Controller\nDESCRIPTION: Define a controller class that extends GetxController to manage your app's state and logic.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-bn.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController{\n  var count = 0.obs;\n  increment() => count++;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Routes in GetMaterialApp\nDESCRIPTION: Shows how to set up named routes in a GetMaterialApp. This new approach allows for more flexibility in deciding which page to display based on parameters or conditions.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_36\n\nLANGUAGE: dart\nCODE:\n```\nGetStorage box = GetStorage();\n\nGetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page:(){\n      return box.hasData('token') ? Home() : Login();\n    })\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Mendefinisikan Controller dengan GetX di Flutter\nDESCRIPTION: Membuat kelas Controller yang meng-extend GetxController untuk mengelola state aplikasi secara reaktif.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.id-ID.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController{\n  var count = 0.obs;\n  increment() => count++;\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating and Removing All Previous Screens with GetX in Dart\nDESCRIPTION: Demonstrates how to navigate to a new screen and remove all previous screens from the navigation stack using GetX's offAll() method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nGet.offAll(NextScreen());\n```\n\n----------------------------------------\n\nTITLE: Retrieving Instances with Get.find() in Dart\nDESCRIPTION: Shows how to retrieve previously instantiated dependencies using Get.find(). This method allows easy access to controllers or other dependencies throughout the app without needing context.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/dependency_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal controller = Get.find<Controller>();\n// OR\nController controller = Get.find();\n\n// Yes, it looks like Magic, Get will find your controller, and will deliver it to you.\n// You can have 1 million controllers instantiated, Get will always give you the right controller.\n```\n\nLANGUAGE: dart\nCODE:\n```\nText(controller.textFromApi);\n```\n\nLANGUAGE: dart\nCODE:\n```\nint count = Get.find<SharedPreferences>().getInt('counter');\nprint(count); // out: 12345\n```\n\n----------------------------------------\n\nTITLE: Configuring SmartManagement in GetMaterialApp\nDESCRIPTION: Shows how to configure SmartManagement mode to control dependency lifecycle and memory management\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/vi_VI/dependency_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(\n    GetMaterialApp(\n      smartManagement: SmartManagement.onlyBuilders,\n      home: Home(),\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Global GetX Configuration in Flutter\nDESCRIPTION: This snippet shows how to set up global configurations for GetX, including enabling logs, setting default transitions, and configuring route behaviors. It also demonstrates how to customize log writing.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-es.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  enableLog: true,\n  defaultTransition: Transition.fade,\n  opaqueRoute: Get.isOpaqueRouteDefault,\n  popGesture: Get.isPopGestureEnable,\n  transitionDuration: Get.defaultDurationTransition,\n  defaultGlobalState: Get.defaultGlobalState,\n);\n\nGet.config(\n  enableLog = true,\n  defaultPopGesture = true,\n  defaultTransition = Transitions.cupertino\n)\n```\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  enableLog: true,\n  logWriterCallback: localLogWriter,\n);\n\nvoid localLogWriter(String text, {bool isError = false}) {\n // pase el mensaje a su paquete de registro favorito aquí\n  //Nota: incluso si los mensajes de registro están desactivados\n  // con el comando \"enableLog: false\", los mensajes seguirán pasando por aquí\n  // Debe verificar esta configuración manualmente aquí si desea respetarla\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'ever' to trigger function on observable value change in Dart\nDESCRIPTION: This snippet shows the usage of the `ever` function which allows to trigger a function every time the value of an observable changes. In this case, it monitors `isLogged` and triggers the `fireRoute` function.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n\"onInit(){\\n  ever(isLogged, fireRoute);\\n  isLogged.value = await Preferences.hasToken();\\n}\\n\\nfireRoute(logged) {\\n  if (logged) {\\n   Get.off(Home());\\n  } else {\\n   Get.off(Login());\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Navigating with Route Parameters using GetX in Dart\nDESCRIPTION: Demonstrates how to navigate to a named route with parameters using GetX's toNamed() method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nGet.toNamed(\"/profile/34954\");\n```\n\n----------------------------------------\n\nTITLE: Updating Observable Custom Classes with GetX in Dart\nDESCRIPTION: This snippet demonstrates how to update observable custom classes using GetX in Dart. It shows different methods to update the properties of an observable class instance.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/state_management.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// In the model file\nclass User() {\n  User({this.name = '', this.age = 0});\n  String name;\n  int age;\n}\n\n// In the controller file\nfinal user = User().obs;\n// When you need to update the user variable:\nuser.update( (user) {\n  user.name = 'Jonny';\n  user.age = 18;\n});\n// Alternative way:\nuser(User(name: 'João', age: 35));\n\n// In the view:\nObx(()=> Text(\"Name ${user.value.name}: Age: ${user.value.age}\"))\n// You can also access the model values without .value:\nuser().name; // note that it's the variable user, not the class\n```\n\n----------------------------------------\n\nTITLE: Working with Observable Lists in GetX\nDESCRIPTION: This snippet demonstrates how to work with observable lists in GetX, showing that .value is not needed for list operations and how to use them in the view.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/state_management.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n// In the controller\nfinal String title = 'User Info:'.obs;\nfinal list = List<User>().obs;\n\n// In the view\nText(controller.title.value), // String must have .value in front of it\nListView.builder (\n  itemCount: controller.list.length // no need for List\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing controller lifecycle methods in GetX\nDESCRIPTION: Example of implementing onInit method in a GetX controller to replace the initState functionality of StatefulWidget. This is the recommended approach for initializing API calls or other setup.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/state_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid onInit() {\n  fetchApi();\n  super.onInit();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Bindings Class in Dart\nDESCRIPTION: Shows how to create basic Bindings classes for Home and Details pages to manage dependencies using GetX.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/dependency_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeBinding implements Bindings{\n  @override\n  void dependencies() {\n    Get.lazyPut<HomeController>(() => HomeController());\n    Get.lazyPut<Service>(()=> Api());\n  }\n}\n\nclass DetalhesBinding implements Bindings {\n  @override\n  void dependencies() {\n    Get.lazyPut<DetalhesController>(() => DetalhesController());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get.create() options explanation in Dart\nDESCRIPTION: This snippet explains the available options when using Get.create(), including builder, name and permanent. The builder function is used to create a new instance each time Get.find() is called. `name` is used instead of `tag` when working with `Get.create`.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/dependency_management.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.create<S>(\\n  // diperlukan: sebuah fungsi yang mereturn sebuah kelas yang akan \\\"terfabrikasi\\\" setiap\\n  // kali `Get.find()` dipanggil\\n  // Contoh: Get.create<YourClass>(() => YourClass())\\n  FcBuilderFunc<S> builder,\\n\\n  // opsional: sama seperti Get.put(), ini digunakan ketika anda menginginkan\\n  // banyak instance berbeda dengan kelas yang sama.\\n  // Berguna dalam kasus ketika anda memiliki sebuah list yang setiap isinya membutuhkan\\n  // controllernya masing-masing.\\n  // Harus unik dan harus String. Cukup ganti `tag` menjadi `name`.\\n  String name,\\n\\n  // opsional: sama seperti Get.put(), digunakan ketika anda ingin mempertahankan\\n  // instance tersebut (keep-alive) untuk digunakan diseluruh aplikasi anda.\\n  // Untuk Get.create, `permanent` nilainya `true` secara default.\\n  bool permanent = true\"\n```\n\n----------------------------------------\n\nTITLE: Creating a GetX Controller\nDESCRIPTION: Define a controller class that extends GetxController to manage state\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController{\n  var count = 0.obs;\n  increment() => count++;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Reactive Observable Counter in Dart\nDESCRIPTION: Demonstrates creating a simple reactive counter using GetX's observable feature with minimal boilerplate code\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/state_management.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfinal count1 = 0.obs;\nfinal count2 = 0.obs;\nint get sum => count1.value + count2.value;\n```\n\n----------------------------------------\n\nTITLE: Updating Rx Variable Values in GetX\nDESCRIPTION: This snippet illustrates different ways to update the value of an Rx variable (observable) in GetX, including using .value, calling the observable as a function, and using non-mutable operations. It also covers how to define a nullable Rx variable.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pt-br.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = 'GetX'.obs;\n// apenas \"atualiza\" o stream, se o valor for diferente do atual.\nname.value = 'Hey';\n\n// Todas as propriedades Rx são \"chamáveis\" e retorna o novo valor.\n// mas esta abordagem não aceita `null`, a UI não será reconstruída\nname('Hello');\n\n// é como um getter, imprime 'Hello'\nname() ;\n\n/// números:\n\nfinal count = 0.obs;\n\n// Você pode usar todas as operações não mutáveis ​​de um num! \ncount + 1;\n\n// Cuidado! isso só é válido se `count` não for final, mas var\ncount += 1;\n\n// Você também pode comparar com os valores:\ncount > 2;\n\n/// booleans:\n\nfinal flag = false.obs;\n\n// mude o valor entre true/false\nflag.toggle();\n\n\n/// todos os tipos:\n\n// Defina `value` como null.\nflag.nil();\n\n// Todas as operações toString() e toJson() são passada para `value`\nprint( count ); // chama `toString()` de RxInt\n\nfinal abc = [0,1,2].obs;\n// Converte o valor em um Array json, imprime RxList\n// Json é suportado por todos os Rx types!\nprint('json: ${jsonEncode(abc)}, type: ${abc.runtimeType}');\n\n// RxMap, RxList e RxSet são Rx types especiais, que estendem seus tipos nativos.\n// mas você pode trabalhar com uma lista como uma lista normal, embora seja reativa!\nabc.add(12); // Coloca 12 na lista, e ATUALIZA o stream.\nabc[3]; // como uma lista lê o índice 3.\n\n// a igualdade funciona com o Rx e o value do observável, mas o hashCode é sempre obtido do value \nfinal number = 12.obs;\nprint( number == 12 ); // prints > true\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Named Route with GetX\nDESCRIPTION: This snippet shows how to navigate to a named route using GetX's `Get.toNamed()` method.  This provides a cleaner and more maintainable way to handle navigation, especially in larger applications.  The route '/details' must be defined in your GetX configuration.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.toNamed('/details');\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Basic GetX State Management in Flutter\nDESCRIPTION: This Dart code snippet sets up a basic Flutter app using GetX for state management. It demonstrates using an observable integer variable to manage state and wraps the UI components in an Obx widget to reactively update the UI. No complex dependencies are needed, and it simplifies state management compared to default methods.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(MaterialApp(home: Home()));\n\nclass Home extends StatelessWidget {\n  var count = 0.obs;\n  @override\n  Widget build(context) => Scaffold(\n      appBar: AppBar(title: Text(\"counter\")),\n      body: Center(\n        child: Obx(() => Text(\"$count\")),\n      ),\n      floatingActionButton: FloatingActionButton(\n        child: Icon(Icons.add),\n        onPressed: () => count ++,\n      ));\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Dialog with Get\nDESCRIPTION: Shows how to open a custom dialog widget using Getx, eliminating the dependency on the BuildContext.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/route_management.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nGet.dialog(YourDialogWidget());\n```\n\n----------------------------------------\n\nTITLE: Toggling Between Dark and Light Themes with GetX\nDESCRIPTION: This snippet demonstrates how to toggle between dark and light themes based on the current theme using `Get.isDarkMode` and `Get.changeTheme()`.  This allows you to easily implement a theme switch in your application. When dark mode is enabled it will change to light mode and vice versa.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nGet.changeTheme(Get.isDarkMode? ThemeData.light(): ThemeData.dark());\n```\n\n----------------------------------------\n\nTITLE: Access data from found controller in Dart\nDESCRIPTION: This snippet showcases how to access data from a controller found using Get.find(). The returned value is a normal class, allowing you to interact with it as usual.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/dependency_management.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n\"Text(controller.textFromApi);\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Navigation with GetX in Flutter\nDESCRIPTION: This code snippet demonstrates how to set up nested navigation using GetX in Flutter. It creates a Navigator widget with a unique key and defines routes for the main and second screens. The example shows how to navigate between nested routes using Get.toNamed() with an id parameter.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/zh_CN/route_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nNavigator(\n  key: Get.nestedKey(1), // create a key by index\n  initialRoute: '/',\n  onGenerateRoute: (settings) {\n    if (settings.name == '/') {\n      return GetPageRoute(\n        page: () => Scaffold(\n          appBar: AppBar(\n            title: Text(\"Main\"),\n          ),\n          body: Center(\n            child: TextButton(\n              color: Colors.blue,\n              onPressed: () {\n                Get.toNamed('/second', id:1); // navigate by your nested route by index\n              },\n              child: Text(\"Go to second\"),\n            ),\n          ),\n        ),\n      );\n    } else if (settings.name == '/second') {\n      return GetPageRoute(\n        page: () => Center(\n          child: Scaffold(\n            appBar: AppBar(\n              title: Text(\"Main\"),\n            ),\n            body: Center(\n              child:  Text(\"second\")\n            ),\n          ),\n        ),\n      );\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Observable Classes in GetX\nDESCRIPTION: This snippet shows how to update custom observable classes in GetX using the update method or by assigning a new instance.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/state_management.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// in the model file\n// we'll make the entire class observable instead of each attribute\nclass User() {\n  User({this.name = '', this.age = 0});\n  String name;\n  int age;\n}\n\n\n// In the controller\nfinal user = User().obs;\n// when you need to update the user variable:\nuser.update( (user) { // this parameter is the class itself that you want to update\nuser.name = 'Jonny';\nuser.age = 18;\n});\n// another way of updating the user variable:\nuser(User(name: 'João', age: 35));\n\n// In the view:\nObx(()=> Text(\"Name ${user.value.name}: Age: ${user.value.age}\"))\n// you can also access the model values without the .value:\nuser().name; // note that it's the user variable, not the class (User)\n```\n\n----------------------------------------\n\nTITLE: Named Routes with GetMaterialApp\nDESCRIPTION: This snippet demonstrates how to configure named routes in GetMaterialApp using getPages. It now takes a function that returns the page.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pt-br.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page: () => Home()),\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring SmartManagement in GetMaterialApp\nDESCRIPTION: Shows how to configure SmartManagement settings in GetMaterialApp for controlling dependency lifecycle.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/dependency_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid main () {\n  runApp(\n    GetMaterialApp(\n      smartManagement: SmartManagement.onlyBuilders\n      home: Home(),\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using GetView Widget in GetX\nDESCRIPTION: Demonstrates how to use the GetView widget, a stateless widget with access to a registered controller. Shows how to connect a controller to a view for easy access to controller properties and methods.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-bn.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n class AwesomeController extends GetController {\n   final String title = 'My Awesome View';\n }\n\n  // ALWAYS remember to pass the `Type` you used to register your controller!\n class AwesomeView extends GetView<AwesomeController> {\n   @override\n   Widget build(BuildContext context) {\n     return Container(\n       padding: EdgeInsets.all(20),\n       child: Text(controller.title), // just call `controller.something`\n     );\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Updating the Locale with GetX\nDESCRIPTION: This snippet shows how to update the application's locale dynamically using GetX. By calling `Get.updateLocale(locale)`, the app will automatically adjust its language settings.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvar locale = Locale('en', 'US');\nGet.updateLocale(locale);\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Routes with Bindings\nDESCRIPTION: Shows how to set up named routes with associated bindings in GetX routing configuration\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/vi_VI/dependency_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ngetPages: [\n  GetPage(\n    name: '/',\n    page: () => HomeView(),\n    binding: HomeBinding(),\n  ),\n  GetPage(\n    name: '/details',\n    page: () => DetailsView(),\n    binding: DetailsBinding(),\n  ),\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Services with GetxService in Flutter\nDESCRIPTION: This snippet demonstrates how to initialize services before the Flutter app starts, showing how to use GetxService for persistent service instances and GetX dependency injection with Get.putAsync().\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_38\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  await initServices(); /// 서비스들 초기화를 기다림.\n  runApp(SomeApp());\n}\n\n/// 플러터 앱이 실행되기 전에 서비스들을 초기화하는 현명한 방법입니다.\n/// 실행 흐름을 제어 할수 있으므로(테마 구성, apiKey, 사용자가 정의한 언어등을 로드해야 할 필요가 있으므로 \n/// ApiService의 구동전에 SettingService를 로드해야 합니다.\n/// 그래서 GetMaterialApp()은 재구성하지 않고 직접적으로 값을 가져옵니다.\nFuture<void> initServices() async {\n  print('starting services ...');\n  /// 여기에서 get_storage, hive, shared_pref 초기화를 하세요.\n  /// 또는 연결 고정 또는 비동기적인 무엇이든 하세요.\n  await Get.putAsync(() => DbService().init());\n  await Get.putAsync(SettingsService()).init();\n  print('All services started...');\n}\n\nclass DbService extends GetxService {\n  Future<DbService> init() async {\n    print('$runtimeType delays 2 sec');\n    await 2.delay();\n    print('$runtimeType ready!');\n    return this;\n  }\n}\n\nclass SettingsService extends GetxService {\n  void init() async {\n    print('$runtimeType delays 1 sec');\n    await 1.delay();\n    print('$runtimeType ready!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using GetBuilder with Lifecycle Methods in Flutter\nDESCRIPTION: Demonstrates how to directly use initState and dispose methods within a GetBuilder widget, allowing lifecycle management without using StatefulWidget.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  initState: (_) => Controller.to.fetchApi(),\n  dispose: (_) => Controller.to.closeStreams(),\n  builder: (s) => Text('${s.username}'),\n),\n```\n\n----------------------------------------\n\nTITLE: Navigating to a screen without the option to go back (named route)\nDESCRIPTION: This snippet shows how to navigate to a new screen using GetX's named routes and the `Get.offNamed()` method. It removes the current route from the stack and navigates to the specified route.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.offNamed(\"/ProximaTela\");\n```\n```\n\n----------------------------------------\n\nTITLE: Using ID for targeted updates with GetBuilder\nDESCRIPTION: Example of using unique IDs with GetBuilder to target specific widgets for updates rather than rebuilding the entire widget tree.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/state_management.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  id: 'text'\n  init: Controller(), // use somente uma vez por controller, não se esqueça\n  builder: (_) => Text(\n    '${Get.find<Controller>().counter}', //aqui\n  )\n),\n```\n\n----------------------------------------\n\nTITLE: Navigating and Replacing the Current Screen with GetX\nDESCRIPTION: This snippet shows how to navigate to a new screen and replace the current screen in the navigation stack using GetX's `Get.off()` method.  This is useful for scenarios like splash screens or login screens where the user shouldn't be able to navigate back.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.off(NextScreen());\"\n```\n\n----------------------------------------\n\nTITLE: Setting an Initial Binding in GetMaterialApp in Dart\nDESCRIPTION: This code shows how to set an initial binding for the entire application using the `initialBinding` property of `GetMaterialApp`. This allows dependencies to be available throughout the application's lifecycle.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/dependency_management.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n\"GetMaterialApp(\\n  initialBinding: SampleBind(),\\n  home: Home(),\\n);\"\n```\n\n----------------------------------------\n\nTITLE: Accessing GetX Controller in Other Classes in Dart\nDESCRIPTION: This snippet demonstrates how to access a GetX controller in other classes without initialization. It shows the use of GetBuilder to display the counter value from the controller.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/state_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass OtherClass extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: GetBuilder<Controller>(\n          builder: (s) => Text('${s.counter}'),\n        ),\n      ),\n    );\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Observable Lists in GetX\nDESCRIPTION: This snippet demonstrates how to use observable lists in GetX and how to access their values in the view.  It shows that you don't need to use `.value` for lists but you still need to for primitive types like String.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n// On the controller\nfinal String title = 'User Info:'.obs\nfinal list = List<User>().obs;\n\n// on the view\nText(controller.title.value), // String need to have .value in front of it\nListView.builder (\n  itemCount: controller.list.length // lists don't need it\n)\n```\n\n----------------------------------------\n\nTITLE: Changing State with RxStatus in GetX\nDESCRIPTION: This snippet shows how to change the state using the `change()` method and `RxStatus` enum.  The `change()` method updates the data and status, triggering UI updates based on the provided RxStatus.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/vi_VI/state_management.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nchange(data, status: RxStatus.success());\n```\n\n----------------------------------------\n\nTITLE: Using GetView in GetX\nDESCRIPTION: This snippet demonstrates the usage of `GetView` in GetX, a `const Stateless` widget that provides a `controller` getter for accessing a registered controller. It shows how to create a simple view that displays data from a GetX controller.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pt-br.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass AwesomeController extends GetxController {\n  final String title = 'My Awesome View';\n}\n\n// SEMPRE lembre de passar o `Type` que você usou para registrar seu controlador!\nclass AwesomeView extends GetView<AwesomeController> {\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      padding: EdgeInsets.all(20),\n      child: Text(controller.title ), // apenas chame `controller.something`\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UI with StateMixin Controller\nDESCRIPTION: Shows how to create a UI that responds to state changes using controller.obx, with handling for different states including loading, empty, and error conditions.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\nclass OtherClass extends GetView<Controller> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n\n      body: controller.obx(\n        (state)=>Text(state.name),\n        \n        // here you can put your custom loading indicator, but\n        // by default would be Center(child:CircularProgressIndicator())\n        onLoading: CustomLoadingIndicator(),\n        onEmpty: Text('No data found'),\n\n        // here also you can set your own error widget, but by\n        // default will be an Center(child:Text(error))\n        onError: (error)=>Text(error),\n      ),\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using GetWidget for Caching Controllers in Dart\nDESCRIPTION: This code explains the purpose of the `GetWidget` in GetX, which is used to cache controllers. It is used in specific scenarios with `Get.create()` for maintaining the same controller instance across widget rebuilds.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_37\n\nLANGUAGE: dart\nCODE:\n```\n// No code snippet provided in the text\n```\n\n----------------------------------------\n\nTITLE: Targeted Widget Updates with ID in GetX\nDESCRIPTION: Shows how to update specific widgets by their ID in GetX, allowing for more granular control over widget rebuilds.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nupdate(['text']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream Management in GetXController\nDESCRIPTION: Example of proper stream handling in a GetXController by closing streams in the onClose method rather than using dispose.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetXController {\n  StreamController<User> user = StreamController<User>();\n  StreamController<String> name = StreamController<String>();\n\n  /// close stream = onClose method, not dispose.\n  @override\n  void onClose() {\n    user.close();\n    name.close();\n    super.onClose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reactive Controller Class in GetX\nDESCRIPTION: This snippet defines a simple reactive controller class using GetxController. It demonstrates initializing a reactive variable `count` and updating its value.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass CountController extends GetxController {\n  final count = 0.obs;\n}\n\ncontroller.count.value++\n```\n\n----------------------------------------\n\nTITLE: Configuring Locales in GetMaterialApp - Dart\nDESCRIPTION: This snippet shows how to configure locales and translations in a GetMaterialApp. It uses the `translations`, `locale`, and `fallbackLocale` parameters to define the localization settings of the application.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nreturn GetMaterialApp(\n    translations: Messages(), //Çevirileriniz\n    locale: Locale('en', 'US'), //Çeviriler bu locale dilinde gösterilecek\n    fallbackLocale: Locale('en', 'UK'), // Eğer yanlış bir locale olması durumunda gösterilecek fallback locale\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing arguments passed to a named route\nDESCRIPTION: This snippet demonstrates how to access the arguments passed to a named route using `Get.arguments`. This is typically done in the destination screen or its controller.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nprint(Get.arguments); //valor: Get é o melhor\n```\n```\n\n----------------------------------------\n\nTITLE: Instanciando un controlador con GetX en Dart\nDESCRIPTION: Muestra cómo crear una instancia de un controlador usando Get.put() en lugar de la instanciación directa. Esto hace que el controlador esté disponible en toda la aplicación.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/dependency_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nController controller = Get.put(Controller()); // Rather Controller controller = Controller();\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Binding with GetX\nDESCRIPTION: This snippet defines a class 'SampleBind' that extends Binding to provide dependencies using lazy initialization for multiple controllers. It is crucial for setting up the controller dependencies required by your application.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass SampleBind extends Binding {\n  @override\n  List<Bind> dependencies() {\n    return [\n      Bind.lazyPut<Controller>(() => Controller()),\n      Bind.lazyPut<Controller2>(() => Controller2()),\n      Bind.lazyPut<Controller3>(() => Controller3()),\n    ];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Translations in a Text Widget with GetX\nDESCRIPTION: This snippet demonstrates how to use a translated string in a `Text` widget using the `.tr` extension provided by GetX.  The 'title' key must exist in the loaded translation files for the current locale.  The `Get.locale` and `Get.fallbackLocale` will be used if no translation is found.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n\"Text('title'.tr);\"\n```\n\n----------------------------------------\n\nTITLE: Toggling Theme with GetX\nDESCRIPTION: Illustrates how to create a button that toggles between dark and light themes using `Get.changeTheme()` and `Get.isDarkMode`. It combines the API for checking the dark theme status with the theme change API.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_32\n\nLANGUAGE: dart\nCODE:\n```\nGet.changeTheme(Get.isDarkMode? ThemeData.light(): ThemeData.dark());\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Binding in GetMaterialApp\nDESCRIPTION: Shows how to set an initial binding for the entire application using GetMaterialApp's initialBinding parameter, which will inject dependencies when the app starts.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/dependency_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  initialBinding: SampleBind(),\n  home: Home(),\n);\n```\n\n----------------------------------------\n\nTITLE: Changing State Using change() Method\nDESCRIPTION: This snippet shows how to change the state using the `change()` method provided by StateMixin. It takes data and a status as parameters to update the state.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/tr_TR/state_management.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nchange(data, status: RxStatus.success());\n```\n```\n\n----------------------------------------\n\nTITLE: Implémentation d'un écran secondaire avec GetX en Dart\nDESCRIPTION: Ce snippet montre comment créer un écran secondaire qui utilise le même contrôleur que l'écran principal. Il utilise Get.find() pour récupérer l'instance du contrôleur.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Other extends StatelessWidget {\n  // Vous pouvez demander à Get de trouver un contrôleur utilisé par une autre page et de vous y rediriger.\n  final Controller c = Get.find();\n\n  @override\n  Widget build(context){\n     // Accéder à la variable 'count' qui est mise à jour\n     return Scaffold(body: Center(child: Text(\"${c.count}\")));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a BottomSheet with GetX\nDESCRIPTION: This snippet shows how to display a bottom sheet using GetX's `Get.bottomSheet()` method. This method is similar to `showModalBottomSheet()`, but it does not require a `BuildContext`.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.bottomSheet(\n  Container(\n    child: Wrap(\n      children: <Widget>[\n        ListTile(\n          leading: Icon(Icons.music_note),\n          title: Text('Música'),\n          onTap: () {}\n        ),\n        ListTile(\n          leading: Icon(Icons.videocam),\n          title: Text('Vídeo'),\n          onTap: () {},\n        ),\n      ],\n    ),\n  ),\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Testing GetX Controllers in Dart\nDESCRIPTION: Illustrates how to test GetX controllers, including their lifecycle methods. The example tests a Controller class with reactive variables and demonstrates assertions at different stages of the controller's lifecycle.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-ar.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n  @override\n  void onInit() {\n    super.onInit();\n    //Change value to name2\n    name.value = 'name2';\n  }\n\n  @override\n  void onClose() {\n    name.value = '';\n    super.onClose();\n  }\n\n  final name = 'name1'.obs;\n\n  void changeName() => name.value = 'name3';\n}\n\nvoid main() {\n  test('''\nTest the state of the reactive variable \"name\" across all of its lifecycles''',\n      () {\n    /// You can test the controller without the lifecycle,\n    /// but it's not recommended unless you're not using\n    ///  GetX dependency injection\n    final controller = Controller();\n    expect(controller.name.value, 'name1');\n\n    /// If you are using it, you can test everything,\n    /// including the state of the application after each lifecycle.\n    Get.put(controller); // onInit was called\n    expect(controller.name.value, 'name2');\n\n    /// Test your functions\n    controller.changeName();\n    expect(controller.name.value, 'name3');\n\n    /// onClose was called\n    Get.delete<Controller>();\n\n    expect(controller.name.value, '');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GetX in Flutter Project through pubspec.yaml\nDESCRIPTION: Instructions for adding the GetX package as a dependency in a Flutter project's pubspec.yaml file.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-hi.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  get:\n```\n\n----------------------------------------\n\nTITLE: Installing GetX Package in pubspec.yaml\nDESCRIPTION: Shows how to add the GetX package as a dependency in the pubspec.yaml file of a Flutter project.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  get:\n```\n\n----------------------------------------\n\nTITLE: Conditional Updates for Observable Lists in Dart\nDESCRIPTION: This snippet shows how to conditionally update an observable list in GetX using the addIf method, which only adds an item if a specified condition is met.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/state_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// First parameter: condition, must return true or false.\n// Second parameter: the new value to apply if the condition is true.\nlist.addIf(item < limit, item);\n```\n\n----------------------------------------\n\nTITLE: Navigating to a route with a named parameter\nDESCRIPTION: This snippet shows how to navigate to a route with a named parameter using GetX's `Get.toNamed()`. The parameter value is included in the route string.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.toNamed(\"/segunda/34954\");\n```\n```\n\n----------------------------------------\n\nTITLE: Using ValueBuilder for Local State Management in Dart\nDESCRIPTION: This code snippet demonstrates the usage of `ValueBuilder` for local state management in GetX. `ValueBuilder` simplifies `StatefulWidget` by managing a single value and providing a `.setState`-like update function. It includes an example of a switch controlled by a boolean value managed by `ValueBuilder`.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_31\n\nLANGUAGE: dart\nCODE:\n```\nValueBuilder<bool>(\n  initialValue: false,\n  builder: (value, updateFn) => Switch(\n    value: value,\n    onChanged: updateFn, // same signature! you could use ( newValue ) => updateFn( newValue )\n  ),\n  // if you need to call something outside the builder method.\n  onUpdate: (value) => print(\"Value updated: $value\"),\n  onDispose: () => print(\"Widget unmounted\"),\n),\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Arguments with GetX in Dart\nDESCRIPTION: This code snippet demonstrates how to access current arguments, previous route name, raw route information, routing API access, and checking snackbar, dialog, and bottom sheet states using GetX. It also shows how to remove a route, go back until a condition is met, and navigate to the next route while removing previous routes until a condition is met.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\n// currentScreen에서 현재 인수들을 제공\nGet.arguments\n\n// 이전 경로의 이름을 제공\nGet.previousRoute\n\n// rawRoute.isFirst()와 같은 접근에 필요한 원시 경로를 제공\nGet.rawRoute\n\n// GetObserver로 부터 Rounting API의 접근을 제공\nGet.routing\n\n// snackbar가 열려 있는지 확인\nGet.isSnackbarOpen\n\n// dialog가 열려 있는지 확인\nGet.isDialogOpen\n\n// bottomsheet가 열려 있는지 확인\nGet.isBottomSheetOpen\n\n// 1개의 경로 제거\nGet.removeRoute()\n\n// 값이 true가 될때까지 반복적으로 되돌림\nGet.until()\n\n// 다음 경로로 이동하고 값이 true가 될때까지 이전 모든 경로를 제거\nGet.offUntil()\n\n// 명명된 다음 경로로 이동하고 값이 true가 될때까지 이전 모든 경로를 제거\nGet.offNamedUntil()\n```\n\n----------------------------------------\n\nTITLE: Changing Theme with GetX\nDESCRIPTION: This snippet illustrates how to change the application's theme using GetX. The `Get.changeTheme` method allows for easy modification of themes without the need for complex state management.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nGet.changeTheme(ThemeData.light());\n```\n\n----------------------------------------\n\nTITLE: Using Middleware with GetObserver\nDESCRIPTION: This snippet shows how to configure GetObserver with middleware to enhance navigation handling in a Flutter app using GetX.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pl.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  navigatorKey: Get.key,\n  navigatorObservers: [\n    GetObserver(MiddleWare.observer) // Here\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Finding Injected Dependencies with GetX\nDESCRIPTION: Shows how to retrieve a previously injected controller or class from anywhere in the application without additional dependencies.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ur-PK.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nController controller = Get.find();\n```\n\n----------------------------------------\n\nTITLE: Conditional Object Addition with GetX in Dart\nDESCRIPTION: This snippet demonstrates conditionally adding an object to a list using GetX's `addIf` method. It requires a condition that returns a boolean and a new value to apply if the condition returns true.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// First parameter: condition, must return true or false.\n// Second parameter: the new value to apply if the condition is true.\nlist.addIf(item < limit, item);\n```\n\n----------------------------------------\n\nTITLE: Available RxStatus Options in GetX StateMixin\nDESCRIPTION: Lists the predefined status options available in RxStatus which can be used with StateMixin's change() method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nRxStatus.loading();\nRxStatus.success();\nRxStatus.empty();\nRxStatus.error('message');\n```\n\n----------------------------------------\n\nTITLE: Déclaration d'une variable observable avec GetX en Dart\nDESCRIPTION: Ce snippet montre comment déclarer une variable observable en utilisant .obs à la fin de la déclaration.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar name = 'Jonatas Borges'.obs;\n```\n\n----------------------------------------\n\nTITLE: GetBuilder with Unique ID\nDESCRIPTION: Implementing fine-grained widget updates using unique identifiers\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/kr_KO/state_management.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  id: 'text'\n  init: Controller(),\n  builder: (_) => Text('${Get.find<Controller>().counter}'),\n)\n\n// Updating with condition\nupdate(['text'], counter < 10);\n```\n\n----------------------------------------\n\nTITLE: Creating a GetView Widget in Dart\nDESCRIPTION: Shows how to create a GetView widget, which is a stateless widget that provides easy access to a registered controller. Useful for separating UI and business logic.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_34\n\nLANGUAGE: dart\nCODE:\n```\nclass AwesomeController extends GetxController {\n   final String title = 'My Awesome View';\n }\n\n  // N'oubliez PAS de passer le `Type` que vous avez utilisé pour enregistrer votre contrôleur!\n class AwesomeView extends GetView<AwesomeController> {\n   @override\n   Widget build(BuildContext context) {\n     return Container(\n       padding: EdgeInsets.all(20),\n       child: Text(controller.title), // appelez `controller.quelqueChose`\n     );\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Navigating with Named Routes using GetX in Dart\nDESCRIPTION: Demonstrates how to navigate to a named route using GetX's toNamed() method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nGet.toNamed(\"/NextScreen\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters in Target Screen with GetX in Dart\nDESCRIPTION: Shows how to access route parameters in the target screen using Get.parameters.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nprint(Get.parameters['user']);\n// out: 34954\n```\n\n----------------------------------------\n\nTITLE: Implementing a Second Page with GetView\nDESCRIPTION: This snippet demonstrates creating a Second page using GetView in GetX. It uses reactive variables and provides interactivity with buttons for navigation and updating the state dynamically.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nclass Second extends GetView<ControllerX> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('second Route'),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Obx(\n              () {\n                return Text('${controller.count1}');\n              },\n            ),\n            ElevatedButton(\n              child: Text(\"Go to last page\"),\n              onPressed: () {\n                Get.toNamed('/third', arguments: 'arguments of second');\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GetMaterialApp with Navigator Key and Observer in Dart\nDESCRIPTION: This snippet demonstrates how to configure the `GetMaterialApp` widget with a `navigatorKey` and a `GetObserver`.  The `navigatorKey` is essential for GetX's route management, while the `GetObserver` allows you to observe route changes and implement middleware logic. This example demonstrates the basic setup required for GetX to manage navigation.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  navigatorKey: Get.key,\n  navigatorObservers: [GetObserver()],\n);\n```\n\n----------------------------------------\n\nTITLE: Using GetView for Simplified Controller Access in Dart\nDESCRIPTION: This code snippet introduces the GetView widget in GetX, which provides a simple way to access a registered controller in a stateless widget. By extending GetView and specifying the controller type, you can easily access the controller's properties within the widget's build method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_35\n\nLANGUAGE: dart\nCODE:\n```\n class AwesomeController extends GetxController {\n   final String title = 'My Awesome View';\n }\n\n  // controller를 등록할때 사용한 `타입`을 전달하는 것을 항상 기억하세요!\n class AwesomeView extends GetView<AwesomeController> {\n   @override\n   Widget build(BuildContext context) {\n     return Container(\n       padding: EdgeInsets.all(20),\n       child: Text(controller.title), // 단지 `controller.something`을 호출합니다.\n     );\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing StateMixin with a Controller\nDESCRIPTION: This snippet demonstrates how to implement StateMixin with a controller in GetX. It involves extending GetController and using `with` to include StateMixin<T>, where T is the model type.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/tr_TR/state_management.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n``` dart\nclass Controller extends GetController with StateMixin<User>{}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware Priority in GetX\nDESCRIPTION: This code demonstrates the use of middleware in GetX to control route behavior through the GetMiddleware class. Middlewares are ordered by priority, allowing developers to modify requests according to custom logic before proceeding further. It uses Dart and requires the GetX library for execution.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal middlewares = [\n  GetMiddleware(priority: 2),\n  GetMiddleware(priority: 5),\n  GetMiddleware(priority: 4),\n  GetMiddleware(priority: -8),\n];\n```\n\n----------------------------------------\n\nTITLE: Opening a Default Dialog with Get\nDESCRIPTION: Demonstrates how to open a default dialog with confirmation action using Getx. Simplifies the process to just a few lines of code.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/route_management.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nGet.defaultDialog(\n  onConfirm: () => print(\"Ok\"),\n  middleText: \"Dialog made in 3 lines of code\"\n);\n```\n\n----------------------------------------\n\nTITLE: Using Middleware with GetObserver in Dart\nDESCRIPTION: This snippet shows how to integrate custom middleware with `GetObserver` within `GetMaterialApp`. By passing a custom observer (e.g., `MiddleWare.observer`) to `GetObserver`, you can intercept and process route changes before they are applied. This enables tasks like authentication checks, logging, and other pre-navigation logic.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  navigatorKey: Get.key,\n  navigatorObservers: [\n    GetObserver(MiddleWare.observer) // Burası\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Using StateMixin for UI State Management in Dart\nDESCRIPTION: This code shows how to use `StateMixin<T>` for managing UI states in GetX.  It involves extending a controller with `StateMixin<T>`, using the `change()` method to update the state and data, and utilizing `RxStatus` for different states like loading, success, empty, and error.  The code also demonstrates how to use these states in the UI with the `obx` method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_34\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetController with StateMixin<User>{}\n\nchange(data, status: RxStatus.success());\n\nRxStatus.loading();\nRxStatus.success();\nRxStatus.empty();\nRxStatus.error('message');\n\nclass OtherClass extends GetView<Controller> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n\n      body: controller.obx(\n        (state)=>Text(state.name),\n        \n        // 여기에 사용자 정의 로딩 표시기를 넣을 수 있지만\n        // 기본값은 Center(child:CircularProgressIndicator()) 입니다\n        onLoading: CustomLoadingIndicator(),\n        onEmpty: Text('No data found'),\n\n        // 여기에서도 자신의 오류 위젯을 설정할 수 있지만\n        // 기본값은 Center(child:Text(error)) 입니다\n        onError: (error)=>Text(error),\n      ),\n    );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Bindings with Named Routes in Dart GetX\nDESCRIPTION: This code snippet shows how to associate a Binding with a named route using GetPage. It demonstrates the integration of route management with dependency injection.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/dependency_management.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\ngetPages: [\n  GetPage(name: '/', page: () => Home(), binding: HomeBinding()),\n]\n```\n\n----------------------------------------\n\nTITLE: Navigating to a screen and removing all previous routes\nDESCRIPTION: This snippet shows how to navigate to a new screen using `Get.offAll()`, which clears the entire navigation stack and replaces it with the new screen.  This is useful for scenarios like shopping carts or survey results.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.offAll(ProximaTela());\n```\n```\n\n----------------------------------------\n\nTITLE: Navigating and Removing Previous Screen with GetX in Dart\nDESCRIPTION: Shows how to navigate to a new screen and remove the previous one from the navigation stack using GetX's off() method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nGet.off(NextScreen());\n```\n\n----------------------------------------\n\nTITLE: Using GetxService for Persistent Services in GetX\nDESCRIPTION: Demonstrates how to implement persistent services using GetxService that remain in memory throughout the app lifecycle. Shows the initialization pattern for services and how to access them with dependency injection.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-bn.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  await initServices(); /// AWAIT SERVICES INITIALIZATION.\n  runApp(SomeApp());\n}\n\n/// Is a smart move to make your Services intiialize before you run the Flutter app.\n/// as you can control the execution flow (maybe you need to load some Theme configuration,\n/// apiKey, language defined by the User... so load SettingService before running ApiService.\n/// so GetMaterialApp() doesnt have to rebuild, and takes the values directly.\nvoid initServices() async {\n  print('starting services ...');\n  /// Here is where you put get_storage, hive, shared_pref initialization.\n  /// or moor connection, or whatever that's async.\n  await Get.putAsync(() => DbService().init());\n  await Get.putAsync(SettingsService()).init();\n  print('All services started...');\n}\n\nclass DbService extends GetxService {\n  Future<DbService> init() async {\n    print('$runtimeType delays 2 sec');\n    await 2.delay();\n    print('$runtimeType ready!');\n    return this;\n  }\n}\n\nclass SettingsService extends GetxService {\n  void init() async {\n    print('$runtimeType delays 1 sec');\n    await 1.delay();\n    print('$runtimeType ready!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Toggle Theme with GetX on Button Press\nDESCRIPTION: This snippet shows how to toggle between light and dark themes in a Flutter application utilizing GetX, enabling a responsive UI based on the current theme state.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nGet.changeTheme(Get.isDarkMode ? ThemeData.light() : ThemeData.dark());\n```\n\n----------------------------------------\n\nTITLE: Create factory instances with Get.create() in Dart\nDESCRIPTION: This snippet shows how to use Get.create() to create factory instances.  Each time `Get.find()` is called, a new instance is created using the provided builder function, allowing you to obtain distinct instances each time.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/dependency_management.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.create<SomeClass>(() => SomeClass());\\nGet.create<LoginController>(() => LoginController());\"\n```\n\n----------------------------------------\n\nTITLE: Customizing a SnackBar with GetX\nDESCRIPTION: This snippet demonstrates how to create a customized SnackBar using GetX's `Get.snackbar()` method. You can customize the title, message, icon, behavior, and appearance of the SnackBar.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.snackbar(\n  \"Ei, eu sou uma SnackBar Get!\", // título\n  \"É inacreditável! Eu estou usando uma SnackBar sem context, sem boilerplate, sem Scaffold!\", // mensagem\n  icon: Icon(Icons.alarm),\n  shouldIconPulse: true,\n  onTap:(){},\n  barBlur: 20,\n  isDismissible: true,\n  duration: Duration(seconds: 3),\n);\n\n\n  ////////// TODOS OS RECURSOS //////////\n  //     Color colorText,\n  //     Duration duration,\n  //     SnackPosition snackPosition,\n  //     Widget titleText,\n  //     Widget messageText,\n  //     bool instantInit,\n  //     Widget icon,\n  //     bool shouldIconPulse,\n  //     double maxWidth,\n  //     EdgeInsets margin,\n  //     EdgeInsets padding,\n  //     double borderRadius,\n  //     Color borderColor,\n  //     double borderWidth,\n  //     Color backgroundColor,\n  //     Color leftBarIndicatorColor,\n  //     List<BoxShadow> boxShadows,\n  //     Gradient backgroundGradient,\n  //     TextButton mainButton,\n  //     OnTap onTap,\n  //     bool isDismissible,\n  //     bool showProgressIndicator,\n  //     AnimationController progressIndicatorController,\n  //     Color progressIndicatorBackgroundColor,\n  //     Animation<Color> progressIndicatorValueColor,\n  //     SnackStyle snackStyle,\n  //     Curve forwardAnimationCurve,\n  //     Curve reverseAnimationCurve,\n  //     Duration animationDuration,\n  //     double barBlur,\n  //     double overlayBlur,\n  //     Color overlayColor,\n  //     Form userInputForm\n  ///////////////////////////////////\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Named Routes with GetX\nDESCRIPTION: This snippet illustrates the transition from earlier named routes to using GetPage for better flexibility in route management with GetX.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pl.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page: () => Home()),\n  ]\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nGetStorage box = GetStorage();\n\nGetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page:(){  \n      return box.hasData('token') ? Home() : Login();\n    })\n  ]\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Accessor for GetX Controller\nDESCRIPTION: Demonstrates creating a static getter in the controller class to easily access the controller instance from anywhere in the application.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetXController {\n  static Controller get to => Get.find();\n[...]\n}\n// on you view:\nGetBuilder<Controller>(  \n  init: Controller(), // use it only first time on each controller\n  builder: (_) => Text(\n    '${Controller.to.counter}', //here\n  )\n),\n```\n\n----------------------------------------\n\nTITLE: Changing State with StateMixin\nDESCRIPTION: Demonstrates how to use the change() method to update state with data and a status.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\nchange(data, status: RxStatus.success());\n```\n\n----------------------------------------\n\nTITLE: Implementing onClose to manage streams in GetX controller\nDESCRIPTION: Example of a GetX controller implementing the onClose method to properly close streams when the controller is being removed from memory. This replaces the dispose method from StatefulWidget.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/state_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetController {\n  var user = StreamController<User>();\n  var name = StreamController<String>();\n\n  /// fechar stream = método onClose(), não dispose().\n  @override\n  void onClose() {\n    user.close();\n    name.close();\n    super.onClose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multi-Language Support with Translations\nDESCRIPTION: This snippet demonstrates how to implement internationalization in a Flutter app using GetX, providing translations for different languages and managing locale changes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nclass MyTranslations extends Translations {\n  @override\n  Map<String, Map<String, String>> get keys => {\n        'en': {\n          'title': 'Hello World %s',\n        },\n        'pt': {\n          'title': 'Olá de Portugal',\n        },\n      };\n}\n```\n\n----------------------------------------\n\nTITLE: Using StateMixin with obx in UI in GetX\nDESCRIPTION: Shows how to use StateMixin in a widget by implementing the obx method to handle different states in the UI. Demonstrates handling success, loading, empty, and error states with appropriate widgets.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-bn.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nclass OtherClass extends GetView<Controller> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n\n      body: controller.obx(\n        (state)=>Text(state.name),\n        \n        // here you can put your custom loading indicator, but\n        // by default would be Center(child:CircularProgressIndicator())\n        onLoading: CustomLoadingIndicator(),\n        onEmpty: Text('No data found'),\n\n        // here also you can set your own error widget, but by\n        // default will be an Center(child:Text(error))\n        onError: (error)=>Text(error),\n      ),\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Binding in GetMaterialApp for Dart\nDESCRIPTION: This snippet demonstrates how to set an initial Binding for the entire application using GetMaterialApp. It allows for global dependency injection setup.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/dependency_management.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  initialBinding: SampleBind(),\n  home: Home(),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Settings with GetX\nDESCRIPTION: Demonstrates how to change global settings for GetX, such as enabling logs, setting the default transition, and enabling pop gesture. It shows two ways to configure global settings, either within `GetMaterialApp` or using `Get.config`.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_33\n\nLANGUAGE: dart\nCODE:\n```\n// essa forma\nGetMaterialApp(\n  enableLog: true,\n  defaultTransition: Transition.fade,\n  opaqueRoute: Get.isOpaqueRouteDefault,\n  popGesture: Get.isPopGestureEnable,\n  transitionDuration: Get.defaultDurationTransition,\n  defaultGlobalState: Get.defaultGlobalState,\n);\n\n// ou essa\nGet.config(\n  enableLog = true,\n  defaultPopGesture = true,\n  defaultTransition = Transitions.cupertino\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Controller in GetBuilder\nDESCRIPTION: Multiple strategies for accessing controller objects within and outside GetBuilder\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/kr_KO/state_management.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  init: Controller(),\n  builder: (value) => Text('${value.counter}'),\n)\n```\n\n----------------------------------------\n\nTITLE: Implémentation de la vue principale avec GetX en Dart\nDESCRIPTION: Ce snippet montre comment créer la vue principale de l'application en utilisant un StatelessWidget. Il utilise Get.put() pour instancier le contrôleur et Obx pour observer les changements d'état.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n\n  @override\n  Widget build(context) {\n\n    // Instanciez votre classe en utilisant Get.put() pour le rendre disponible pour tous les routes \"descendantes\".\n    final Controller c = Get.put(Controller());\n\n    return Scaffold(\n      // Utilisez Obx(()=> pour mettre à jour Text() chaque fois que count est changé.\n      appBar: AppBar(title: Obx(() => Text(\"Clicks: ${c.count}\"))),\n\n      // Remplacez les 8 lignes Navigator.push par un simple Get.to(). Vous n'avez pas besoin de 'context'\n      body: Center(child: ElevatedButton(\n              child: Text(\"Go to Other\"), onPressed: () => Get.to(Other()))),\n      floatingActionButton:\n          FloatingActionButton(child: Icon(Icons.add), onPressed: c.increment));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Streams in GetX Controller onClose Method in Dart\nDESCRIPTION: This snippet shows how to properly close streams in a GetX controller using the onClose method. It demonstrates closing StreamControllers for user and name streams.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/state_management.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n  StreamController<User> user = StreamController<User>();\n  StreamController<String> name = StreamController<String>();\n\n  /// close stream = onClose method, not dispose.\n  @override\n  void onClose() {\n    user.close();\n    name.close();\n    super.onClose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Login State with Reactive Variables in GetX\nDESCRIPTION: This snippet illustrates managing a login state using an observable boolean variable with GetX. It uses the `ever` method to trigger routing events based on changes to the `isLogged` variable and describes how to prevent default behavior of triggering events on identical initial values.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar isLogged = false.obs;\n\n@override\nonInit() async {\n  ever(isLogged, fireRoute);\n  isLogged.value = await Preferences.hasToken();\n}\n\nfireRoute(logged) {\n  if (logged) {\n   Get.off(Home());\n  } else {\n   Get.off(Login());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to New Screen Using GetX in Dart\nDESCRIPTION: Demonstrates various navigation methods provided by GetX, including simple navigation, navigation with no return option, and navigation with data passing.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/route_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nGet.to(NextScreen());\n\nGet.back();\n\nGet.off(NextScreen());\n\nGet.offAll(NextScreen());\n\nvar data = await Get.to(Payment());\n\nGet.back(result: 'success');\n\nif(data == 'success') madeAnything();\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Navigation using GetX in Flutter\nDESCRIPTION: This snippet shows how to implement nested navigation using GetX, demonstrating the creation of a nested navigator with custom routes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/tr_TR/route_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nNavigator(\n  key: Get.nestedKey(1), // index göre anahtar oluşturma\n  initialRoute: '/',\n  onGenerateRoute: (settings) {\n    if (settings.name == '/') {\n      return GetPageRoute(\n        page: () => Scaffold(\n          appBar: AppBar(\n            title: Text(\"Main\"),\n          ),\n          body: Center(\n            child: TextButton(\n              color: Colors.blue,\n              onPressed: () {\n                Get.toNamed('/second', id:1); // indexe göre iç içe geçmiş rotanıza göre gezinin\n              },\n              child: Text(\"Go to second\"),\n            ),\n          ),\n        ),\n      );\n    } else if (settings.name == '/second') {\n      return GetPageRoute(\n        page: () => Center(\n          child: Scaffold(\n            appBar: AppBar(\n              title: Text(\"Main\"),\n            ),\n            body: Center(\n              child:  Text(\"second\")\n            ),\n          ),\n        ),\n      );\n    }\n  }\n),\n```\n\n----------------------------------------\n\nTITLE: Implementing FadeIn Animation Extension with GetX 5\nDESCRIPTION: Adds a fadeIn animation effect to any widget by using the .fadeIn() extension method provided by GetX 5. This approach simplifies animation implementation without requiring StatefulWidget or animation controllers.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nContainer(\n              color: Colors.blue,\n              height: 100,\n              width: 100,\n       ).fadeIn()\n```\n\n----------------------------------------\n\nTITLE: Navigasi Menggunakan GetX di Flutter\nDESCRIPTION: Contoh-contoh penggunaan GetX untuk navigasi antar halaman tanpa context.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.id-ID.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nGet.to(NextScreen());\n\nGet.toNamed('/details');\n\nGet.back();\n\nGet.off(NextScreen());\n\nGet.offAll(NextScreen());\n```\n\n----------------------------------------\n\nTITLE: Navigating and Replacing All Screens with GetX\nDESCRIPTION: This snippet demonstrates how to navigate to a new screen and remove all previous screens from the navigation stack using GetX's `Get.offAll()` method.  This is helpful for scenarios like shopping carts or surveys where you want to reset the navigation history.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.offAll(NextScreen());\"\n```\n\n----------------------------------------\n\nTITLE: Adding an item to a list conditionally with addIf in Dart\nDESCRIPTION: This snippet shows how to use `addIf` to add items to a list based on a certain condition. In this case, an item is added to a list only if it's value is less than limit.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n\"list.addIf(item < limit, item);\"\n```\n\n----------------------------------------\n\nTITLE: Navigating with Parameters Object using GetX in Dart\nDESCRIPTION: Shows how to navigate to a named route with a parameters object using GetX's toNamed() method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nvar parameters = <String, String>{\"flag\": \"true\",\"country\": \"italy\",};\nGet.toNamed(\"/profile/34954\", parameters: parameters);\n```\n\n----------------------------------------\n\nTITLE: GetBuilder with Unique IDs\nDESCRIPTION: Shows how to use unique identifiers in GetBuilder for granular widget updates and conditional state management\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  id: 'text',\n  init: Controller(),\n  builder: (_) => Text('${Get.find<Controller>().counter}'),\n)\n\n// Updating with ID and optional condition\nupdate(['text'], counter < 10);\n```\n\n----------------------------------------\n\nTITLE: Conditional Widget Updates in GetX\nDESCRIPTION: Demonstrates how to conditionally update widgets based on a boolean expression, providing even more control over when widgets are rebuilt.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nupdate(['text'], counter < 10);\n```\n\n----------------------------------------\n\nTITLE: Overriding onInit and onClose in GetxController\nDESCRIPTION: This example demonstrates overriding the `onInit` and `onClose` methods in the `GetxController` to perform initialization and cleanup tasks. This is the recommended approach for managing the controller's lifecycle.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/state_management.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid onInit() {\n  fetchApi();\n  super.onInit();\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Reactive Variables with Obx\nDESCRIPTION: Shows how to use the Obx widget to display reactive variables in the UI. The Text widget will automatically update whenever the observed variable changes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ur-PK.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nObx(() => Text(\"${controller.name}\"));\n```\n\n----------------------------------------\n\nTITLE: Importing GetX in Dart\nDESCRIPTION: Import the GetX package in your Dart file to use its features.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-bn.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:get/get.dart';\n```\n\n----------------------------------------\n\nTITLE: Creating a Middleware Class for Route Observation with GetX\nDESCRIPTION: Shows how to create a Middleware class to observe route changes and perform actions based on the current route.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\nclass MiddleWare {\n  static observer(Routing routing) {\n    if (routing.current == '/second' && !routing.isSnackbar) {\n      Get.snackbar(\"Hi\", \"You are on second route\");\n    } else if (routing.current =='/third'){\n      print('last route called');\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Page Attributes with GetMiddleware in Dart\nDESCRIPTION: Demonstrates the 'onPageCalled' function in middleware to alter page properties dynamically upon invocation. Useful for customized greetings or personalization in an application's UI, using user-specific data fetched via services. This requires GetX for page management.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nGetPage onPageCalled(GetPage page) {\n  final authService = Get.find<AuthService>();\n  return page.copyWith(title: 'Welcome ${authService.UserName}');\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Page Routing with GetX 2.0\nDESCRIPTION: This example demonstrates how to use named routes in GetX 2.0 to conditionally display different pages based on the presence of data in `GetStorage`. It checks for a 'token' and renders the `Home` page if it exists, otherwise it renders the `Login` page. This provides a flexible way to handle authentication and routing within the app.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-vi.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nGetStorage box = GetStorage();\n\nGetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page:(){\n      return box.hasData('token') ? Home() : Login();\n    })\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Observable 클래스 업데이트 방법 (Dart)\nDESCRIPTION: Observable 클래스를 만들고 업데이트하는 방법을 보여줍니다. update() 메소드를 사용하거나 새 인스턴스를 할당하여 업데이트할 수 있습니다.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/kr_KO/state_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// model 파일에서\nclass User() {\n  User({this.name = '', this.age = 0});\n  String name;\n  int age;\n}\n\n// controller 파일에서\nfinal user = User().obs;\n// when you need to update the user variable:\nuser.update( (user) {\nuser.name = 'Jonny';\nuser.age = 18;\n});\n// user 인스턴스를 업데이트하는 또다른 방법\nuser(User(name: 'João', age: 35));\n\n// on view:\nObx(()=> Text(\"Name ${user.value.name}: Age: ${user.value.age}\"))\n// .value 없이 model의 value에 접근할 수 있습니다.\nuser().name;\n```\n\n----------------------------------------\n\nTITLE: GetX Dependency Injection: Get.lazyPut() parameters\nDESCRIPTION: This code snippet details the parameters for Get.lazyPut(), including a builder function, tag for multiple instances, and fenix for re-creating the instance when needed. `fenix` allows the instance to be discarded when not in use, but it is recreated when used again, similar to SmartManagement.keepFactory.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/dependency_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.lazyPut<S>(\\n  // mandatory: a method that will be executed when your class is called for the first time\\n  InstanceBuilderCallback builder,\\n  \\n  // optional: same as Get.put(), it is used for when you want multiple different instance of a same class\\n  // must be unique\\n  String tag,\\n\\n  // optional: It is similar to \\\"permanent\\\", the difference is that the instance is discarded when\\n  // is not being used, but when it's use is needed again, Get will recreate the instance\\n  // just the same as \\\"SmartManagement.keepFactory\\\" in the bindings api\\n  // defaults to false\\n  bool fenix = false\\n  \\n)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up GetMaterialApp for Translations in Flutter\nDESCRIPTION: This snippet illustrates how to configure the GetMaterialApp for using translations in Flutter. It specifies the app's locale and fallback locale, ensuring correct language usage depending on user settings.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nreturn GetMaterialApp(\n    translations: Messages(), // Vos traductions\n    locale: Locale('en', 'US'), // Les traductions seront faites dans cette 'locale' (langue)\n    fallbackLocale: Locale('en', 'UK'), // definit le 'language de secours' au cas oú un language invalide est sélectionné.\n);\n```\n\n----------------------------------------\n\nTITLE: Navigating to a New Screen with GetX\nDESCRIPTION: This snippet demonstrates how to navigate to a new screen using GetX's `Get.to()` method, replacing `Navigator.push()` without needing context.  `NextScreen()` must be a valid widget.  This simplifies navigation and reduces boilerplate code.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.to(NextScreen());\"\n```\n\n----------------------------------------\n\nTITLE: GetBuilder를 사용한 상태 관리 예시 (Dart)\nDESCRIPTION: GetBuilder를 사용하여 간단한 상태 관리를 구현하는 방법을 보여줍니다. Controller 클래스를 정의하고 GetBuilder 위젯을 사용하여 UI를 업데이트합니다.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/kr_KO/state_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n  int counter = 0;\n  void increment() {\n    counter++;\n    update();\n  }\n}\n\nGetBuilder<Controller>(\n  init: Controller(),\n  builder: (_) => Text(\n    '${_.counter}',\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Controller Lifecycle Method in Dart\nDESCRIPTION: Shows how to use onInit() and onClose() methods for initializing and cleaning up resources in a GetX controller\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid onInit() {\n  fetchApi();\n  super.onInit();\n}\n```\n\n----------------------------------------\n\nTITLE: Using initState and dispose with GetBuilder\nDESCRIPTION: This snippet shows how to use the `initState` and `dispose` properties of `GetBuilder` to call methods when the widget is initialized and disposed. However, the document recommends using `onInit` and `onClose` in the controller instead.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/state_management.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  initState: (_) => Controller.to.fetchApi(),\n  dispose: (_) => Controller.to.closeStreams(),\n  builder: (s) => Text('${s.username}'),\n),\n```\n\n----------------------------------------\n\nTITLE: Incrementing observable variable value in Dart\nDESCRIPTION: This snippet demonstrates how to increment the value of an observable variable (`count`) within a GetX controller. The `value++` syntax triggers automatic UI updates in any widgets observing the `count` variable.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\n\"ctl.count.value++\"\n```\n\n----------------------------------------\n\nTITLE: Using Reactive Values in GetX Controller and View\nDESCRIPTION: This snippet demonstrates how to use reactive values in a GetX controller and how to access them in the view. It also shows how GetX intelligently rebuilds only the necessary widgets.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/state_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// in the controller\nfinal count1 = 0.obs;\nfinal count2 = 0.obs;\nint get sum => count1.value + count2.value;\n```\n\nLANGUAGE: dart\nCODE:\n```\n// in the view\nGetX<Controller>(\n  builder: (controller) {\n    print(\"count 1 reconstruction\");\n    return Text('${controller.count1.value}');\n  },\n),\nGetX<Controller>(\n  builder: (controller) {\n    print(\"count 2 reconstruction\");\n    return Text('${controller.count2.value}');\n  },\n),\nGetX<Controller>(\n  builder: (controller) {\n    print(\"count 3 reconstruction\");\n    return Text('${controller.sum}');\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Dependencies with Get.lazyPut() in Dart\nDESCRIPTION: Demonstrates how to use Get.lazyPut() for lazy loading of dependencies. This is useful for computationally expensive classes or when instantiating multiple classes at once that may not be immediately used.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/dependency_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n/// ApiMock will only be called when someone uses Get.find<ApiMock> for the first time\nGet.lazyPut<ApiMock>(() => ApiMock());\n\nGet.lazyPut<FirebaseAuth>(\n  () {\n    // ... some logic if needed\n    return FirebaseAuth();\n  },\n  tag: Math.random().toString(),\n  fenix: true\n)\n\nGet.lazyPut<Controller>( () => Controller() )\n```\n\nLANGUAGE: dart\nCODE:\n```\nGet.lazyPut<S>(\n  // mandatory: a method that will be executed when your class is called for the first time\n  InstanceBuilderCallback builder,\n  \n  // optional: same as Get.put(), it is used for when you want multiple different instance of a same class\n  // must be unique\n  String tag,\n\n  // optional: It is similar to \"permanent\", the difference is that the instance is discarded when\n  // is not being used, but when it's use is needed again, Get will recreate the instance\n  // just the same as \"SmartManagement.keepFactory\" in the bindings api\n  // defaults to false\n  bool fenix = false\n  \n)\n```\n\n----------------------------------------\n\nTITLE: Usando un controlador instanciado con GetX en Dart\nDESCRIPTION: Ejemplo de cómo usar un controlador que ha sido instanciado con GetX, llamando a uno de sus métodos.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/dependency_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ncontroller.fetchApi();\n```\n\n----------------------------------------\n\nTITLE: Implementing GetX Controller Lifecycle Methods in Dart\nDESCRIPTION: This snippet demonstrates how to implement lifecycle methods directly in a GetX controller. It shows the use of onInit for fetching API data.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/state_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid onInit() {\n  fetchApi();\n  super.onInit();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling GetPage Middleware in Dart\nDESCRIPTION: This code demonstrates the use of GetPage middleware in Dart with GetX to manage page transitions and override defaults. It includes examples of setting middleware priority, redirecting routes, and modifying page settings before rendering. Familiarity with GetX and routing in Flutter is necessary.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-ar.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal middlewares = [\n  GetMiddleware(priority: 2),\n  GetMiddleware(priority: 5),\n  GetMiddleware(priority: 4),\n  GetMiddleware(priority: -8),\n];\n```\n\nLANGUAGE: dart\nCODE:\n```\nRouteSettings redirect(String route) {\n  final authService = Get.find<AuthService>();\n  return authService.authed.value ? null : RouteSettings(name: '/login')\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nGetPage onPageCalled(GetPage page) {\n  final authService = Get.find<AuthService>();\n  return page.copyWith(title: 'Welcome ${authService.UserName}');\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nList<Bindings> onBindingsStart(List<Bindings> bindings) {\n  final authService = Get.find<AuthService>();\n  if (authService.isAdmin) {\n    bindings.add(AdminBinding());\n  }\n  return bindings;\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nGetPageBuilder onPageBuildStart(GetPageBuilder page) {\n  print('bindings are ready');\n  return page;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Simple SnackBar with GetX\nDESCRIPTION: This code snippet shows how to display a SnackBar using GetX. It simplifies the process by removing the need for context and boilerplate code, making it more concise and easier to use.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.snackbar('Hi', 'i am a modern snackbar');\n```\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Named Routes in GetX\nDESCRIPTION: Demonstrates how to pass and retrieve data when navigating with named routes in GetX.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/route_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nGet.toNamed(\"/NextScreen\", arguments: 'Get is the best');\n\nprint(Get.arguments);\n//print out: Get is the best\n```\n\n----------------------------------------\n\nTITLE: Utilizing StateMixin in UI with obx()\nDESCRIPTION: This snippet demonstrates how to utilize StateMixin in the UI using `obx()`. It shows how to display different widgets based on the state: success, loading, empty, or error.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/tr_TR/state_management.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nclass OtherClass extends GetView<Controller> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n\n      body: controller.obx(\n        (state)=>Text(state.name),\n        \n        // burada özel yükleme göstergenizi koyabilirsiniz, ancak\n       // varsayılan olarak Center(child:CircularProgressIndicator()) olacaktır.\n        onLoading: CustomLoadingIndicator(),\n        onEmpty: Text('No data found'),\n\n        // burada ayrıca kendi hata widget'ınızı ayarlayabilirsiniz, ancak\n        // default birCenter(child:Text(error)) olacaktır.\n        onError: (error)=>Text(error),\n      ),\n    );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Changing State with StateMixin in GetX\nDESCRIPTION: Demonstrates how to update the state using the change() method provided by StateMixin, passing both data and status.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nchange(data, status: RxStatus.success());\n```\n\n----------------------------------------\n\nTITLE: RxStatus Options in GetX\nDESCRIPTION: Lists the available status options in RxStatus for use with StateMixin to represent loading, success, empty, and error states in the UI.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-bn.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nRxStatus.loading();\nRxStatus.success();\nRxStatus.empty();\nRxStatus.error('message');\n```\n\n----------------------------------------\n\nTITLE: Initializing GetMaterialApp in Dart\nDESCRIPTION: Demonstrates how to use GetMaterialApp instead of MaterialApp to enable GetX features in a Flutter application.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp( // Before: MaterialApp(\n  home: MyHome(),\n)\n```\n\n----------------------------------------\n\nTITLE: Closing Streams in GetxController\nDESCRIPTION: This code snippet demonstrates how to properly close streams within the `onClose` method of a `GetxController`.  It's important to close streams to prevent memory leaks.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/state_management.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n  StreamController<User> user = StreamController<User>();\n  StreamController<String> name = StreamController<String>();\n\n  /// pour fermer stream = méthode onClose(), pas dispose().\n  @override\n  void onClose() {\n    user.close();\n    name.close();\n    super.onClose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Controller Instance in GetBuilder\nDESCRIPTION: Shows multiple approaches to initializing and accessing controller instances within GetBuilder\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  init: Controller(),\n  builder: (value) => Text('${value.counter}'),\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional State Management in GetX\nDESCRIPTION: Demonstrates adding items to a list with a conditional check using GetX's refined state control\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/state_management.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nlist.addIf(item < limit, item);\n```\n\n----------------------------------------\n\nTITLE: Implementing GetX Navigation in Flutter Widgets\nDESCRIPTION: Demonstrates how to use GetX navigation methods within Flutter widgets, including snackbar display and route navigation.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\nclass First extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        leading: IconButton(\n          icon: Icon(Icons.add),\n          onPressed: () {\n            Get.snackbar(\"hi\", \"i am a modern snackbar\");\n          },\n        ),\n        title: Text('First Route'),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          child: Text('Open route'),\n          onPressed: () {\n            Get.toNamed(\"/second\");\n          },\n        ),\n      ),\n    );\n  }\n}\n\nclass Second extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        leading: IconButton(\n          icon: Icon(Icons.add),\n          onPressed: () {\n            Get.snackbar(\"hi\", \"i am a modern snackbar\");\n          },\n        ),\n        title: Text('second Route'),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          child: Text('Open route'),\n          onPressed: () {\n            Get.toNamed(\"/third\");\n          },\n        ),\n      ),\n    );\n  }\n}\n\nclass Third extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(\"Third Route\"),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          onPressed: () {\n            Get.back();\n          },\n          child: Text('Go back!'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finalizing Page Operations in GetPage\nDESCRIPTION: This snippet exemplifies how to handle cleanup operations after the page has been disposed of, which helps manage resources effectively in a Flutter application using GetX.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\n// OnPageDispose event\n// action to be taken after page disposal\n\n```\n\n----------------------------------------\n\nTITLE: Customizing GetConnect Settings - Dart\nDESCRIPTION: This snippet shows how to customize settings for the GetConnect class, including setting a base URL, modifying requests and responses, and implementing authentication logic.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeProvider extends GetConnect {\n  @override\n  void onInit() {\n    httpClient.defaultDecoder = CasesModel.fromJson;\n    httpClient.baseUrl = 'https://api.covid19api.com';\n\n    httpClient.addRequestModifier((request) {\n      request.headers['apikey'] = '12345678';\n      return request;\n    });\n\n    httpClient.addResponseModifier<CasesModel>((request, response) {\n      CasesModel model = response.body;\n      if (model.countries.contains('Brazil')) {\n        model.countries.remove('Brazilll');\n      }\n    });\n\n    httpClient.addAuthenticator((request) async {\n      final response = await get(\"http://yourapi/token\");\n      final token = response.body['token'];\n      request.headers['Authorization'] = \"$token\";\n      return request;\n    });\n\n    httpClient.maxAuthRetries = 3;\n  }\n\n  @override\n  Future<Response<CasesModel>> getCases(String path) => get(path);\n}\n```\n\n----------------------------------------\n\nTITLE: GetX Context Extensions for Responsive Design in Dart\nDESCRIPTION: Extensions on BuildContext providing convenient access to MediaQuery properties and responsive design helpers. These methods make it easier to build responsive UIs without repeatedly using MediaQuery.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\n// Remarque: les méthodes suivantes sont des extensions sur le 'context'. Puisque vous\n// avez accès au contexte à n'importe quel endroit de votre interface utilisateur, vous pouvez l'utiliser n'importe où dans le code de l'interface utilisateur\n\n// Si vous avez besoin d'une hauteur / largeur variable (comme les fenêtres de bureau ou de navigateur qui peuvent être mises à l'échelle), vous devrez utiliser le contexte.\ncontext.width\ncontext.height\n\n// Vous donne le pouvoir de définir la moitié de l'écran, un tiers de celui-ci et ainsi de suite.\n// Utile pour les applications responsives.\n// paramètre dividedBy (double) optionnel - par défaut: 1\n// paramètre reducedBy (double) facultatif - par défaut: 0\ncontext.heightTransformer ()\ncontext.widthTransformer ()\n\n/// Similaire à MediaQuery.of(context).size\ncontext.mediaQuerySize()\n\n/// Similaire à MediaQuery.of(context).padding\ncontext.mediaQueryPadding()\n\n/// Similaire à MediaQuery.of(context).viewPadding\ncontext.mediaQueryViewPadding()\n\n/// Similaire à MediaQuery.of(context).viewInsets;\ncontext.mediaQueryViewInsets()\n\n/// Similaire à MediaQuery.of(context).orientation;\ncontext.orientation()\n\n/// Vérifie si l'appareil est en mode paysage\ncontext.isLandscape()\n\n/// Vérifie si l'appareil est en mode portrait\ncontext.isPortrait()\n\n/// Similaire à MediaQuery.of(context).devicePixelRatio;\ncontext.devicePixelRatio()\n\n/// Similaire à MediaQuery.of(context).textScaleFactor;\ncontext.textScaleFactor()\n\n/// Obtenir le côté le plus court de l'écran\ncontext.mediaQueryShortestSide()\n\n/// Vrai si la largeur est supérieure à 800p\ncontext.showNavbar()\n\n/// Vrai si le côté le plus court est inférieur à 600p\ncontext.isPhone()\n\n/// Vrai si le côté le plus court est plus grand que 600p\ncontext.isSmallTablet()\n\n/// Vrai si le côté le plus court est plus grand que 720p\ncontext.isLargeTablet()\n\n/// Vrai si l'appareil actuel est une tablette\ncontext.isTablet()\n\n/// Renvoie une valeur <T> en fonction de la taille de l'écran\n/// peut donner une valeur pour:\n/// watch: si le côté le plus court est inférieur à 300\n/// mobile: si le côté le plus court est inférieur à 600\n/// tablette: si le côté le plus court est inférieur à 1200\n/// bureautique: si la largeur est supérieure à 1200\ncontext.responsiveValue<T>()\n```\n\n----------------------------------------\n\nTITLE: Displaying a Dialog with GetX\nDESCRIPTION: This snippet demonstrates how to display a simple dialog using GetX's `Get.dialog()` method.  It takes a widget as an argument to be displayed as the dialog content.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.dialog(SeuWidgetDialog());\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing SharedPreferences with GetX\nDESCRIPTION: This snippet shows how to retrieve a SharedPreferences instance using Get.find() and access its data. It retrieves an integer value associated with the key 'counter'.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/dependency_management.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n\"int count = Get.find<SharedPreferences>().getInt('counter');\\nprint(count); // out: 12345\"\n```\n\n----------------------------------------\n\nTITLE: Initializing GetMaterialApp with Named Routes\nDESCRIPTION: This code snippet sets up the main application using GetMaterialApp with an initial route and a named route with binding. It demonstrates how to initiate the GetX routing system effectively.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(GetMaterialApp(\n    initialRoute: '/home',\n    getPages: [\n      GetPage(name: '/home', page: () => First(), binding: SampleBind()),\n    ],\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an RxString Observable in Dart\nDESCRIPTION: This snippet illustrates creating an observable variable of type String using the `RxString` class provided by GetX. This method is one of the ways to declare reactive variables, enabling automatic UI updates when the value changes. It is a more verbose alternative to using `.obs`.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n\"var count = RxString();\"\n```\n\n----------------------------------------\n\nTITLE: GetX Dependency Injection: Get.create() parameters\nDESCRIPTION: This snippet explains the parameters for Get.create(), including the builder function, name for distinguishing multiple instances, and the permanent flag.  The permanent flag is true by default, ensuring the instance remains alive throughout the application lifecycle.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/dependency_management.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.create<S>(\\n  // required: a function that returns a class that will be \\\"fabricated\\\" every\\n  // time `Get.find()` is called\\n  // Example: Get.create<YourClass>(() => YourClass())\\n  FcBuilderFunc<S> builder,\\n\\n  // optional: just like Get.put(), but it is used when you need multiple instances\\n  // of a of a same class\\n  // Useful in case you have a list that each item need it's own controller\\n  // needs to be a unique string. Just change from tag to name\\n  String name,\\n\\n  // optional: just like int`Get.put()`, it is for when you need to keep the\\n  // instance alive thoughout the entire app. The difference is in Get.create\\n  // permanent is true by default\\n  bool permanent = true\"\n```\n\n----------------------------------------\n\nTITLE: Custom Configuration of GetConnect for Advanced Use\nDESCRIPTION: This snippet highlights the customization features of GetConnect, such as setting base URLs, modifying responses, and adding authentication headers for API requests in Flutter applications.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeProvider extends GetConnect {\n  @override\n  void onInit() {\n    // Toute 'Request' passera à jsonEncode donc CasesModel.fromJson()\n    httpClient.defaultDecoder = CasesModel.fromJson;\n    httpClient.baseUrl = 'https://api.covid19api.com';\n    // baseUrl = 'https://api.covid19api.com';\n    // Il définit baseUrl pour Http et websockets si utilisé sans instance [httpClient]\n\n    // Cela attachera la propriété 'apikey' sur l'en-tête ('header') de toutes les 'request's\n    httpClient.addRequestModifier((request) {\n      request.headers['apikey'] = '12345678';\n      return request;\n    });\n\n    // Même si le serveur envoie des données avec le pays \"Brésil\",\n    // cela ne sera jamais affiché aux utilisateurs, car vous supprimez\n    // ces données de la réponse, même avant que la réponse ne soit délivrée\n    httpClient.addResponseModifier<CasesModel>((request, response) {\n      CasesModel model = response.body;\n      if (model.countries.contains('Brazil')) {\n        model.countries.remove('Brazil');\n      }\n    });\n\n    httpClient.addAuthenticator((request) async {\n      final response = await get(\"http://yourapi/token\");\n      final token = response.body['token'];\n      // Définit l'en-tête\n      request.headers['Authorization'] = \"$token\";\n      return request;\n    });\n\n    // L'Autenticator sera appelé 3 fois si HttpStatus est HttpStatus.unauthorized\n    httpClient.maxAuthRetries = 3;\n  }\n\n\n  @override\n  Future<Response<CasesModel>> getCases(String path) => get(path);\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Closing in GetX Controller\nDESCRIPTION: Demonstrates proper stream closure within the onClose() method of a GetX controller, ensuring clean resource management\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n  StreamController<User> user = StreamController<User>();\n  StreamController<String> name = StreamController<String>();\n\n  @override\n  void onClose() {\n    user.close();\n    name.close();\n    super.onClose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Controller Data in UI\nDESCRIPTION: This snippet demonstrates how to access data from a controller within a Flutter widget. `controller.textFromApi` is assumed to be a property of the `Controller` class that holds the data. The `Controller` instance must be injected previously using `Get.put()`.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n\"Text(controller.textFromApi);\"\n```\n\n----------------------------------------\n\nTITLE: Using StateMixin with obx in GetX UI\nDESCRIPTION: Shows how to implement the UI part for a controller using StateMixin, with the obx method to handle different states including loading, empty, success, and error states.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nclass OtherClass extends GetView<Controller> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n\n      body: controller.obx(\n        (state)=>Text(state.name),\n        \n        // here you can put your custom loading indicator, but\n        // by default would be Center(child:CircularProgressIndicator())\n        onLoading: CustomLoadingIndicator(),\n        onEmpty: Text('No data found'),\n\n        // here also you can set your own error widget, but by\n        // default will be an Center(child:Text(error))\n        onError: (error)=>Text(error),\n      ),\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Obx Widget for Reactive UI Updates in Dart\nDESCRIPTION: This snippet shows how to use the `Obx` widget in GetX to reactively update a `Text` widget when the value of `controller.name` changes. The `Obx` widget automatically rebuilds only when the observed variable changes, optimizing performance. It eliminates the need for StreamBuilders and manual subscriptions.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n\"Obx(() => Text (controller.name));\"\n```\n\n----------------------------------------\n\nTITLE: Changing Locale Dynamically with GetX in Dart\nDESCRIPTION: This snippet shows how to dynamically change the app's locale using GetX. It demonstrates the use of Get.updateLocale() to update the locale at runtime.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar locale = Locale('en', 'US');\nGet.updateLocale(locale);\n```\n\n----------------------------------------\n\nTITLE: Using Rx with Dart Generics for Reactive Variables in GetX\nDESCRIPTION: Demonstrates how to use the Rx class with Dart generics to create reactive variables. This method allows for more flexibility in defining custom reactive types.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = Rx<String>('');\nfinal isLogged = Rx<Bool>(false);\nfinal count = Rx<Int>(0);\nfinal balance = Rx<Double>(0.0);\nfinal number = Rx<Num>(0);\nfinal items = Rx<List<String>>([]);\nfinal myMap = Rx<Map<String, int>>({});\n\n// Custom classes - it can be any class, literally\nfinal user = Rx<User>();\n```\n\n----------------------------------------\n\nTITLE: Building a Stateless Widget with GetX\nDESCRIPTION: Create a stateless widget that uses GetX for state management and navigation.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-bn.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n\n  @override\n  Widget build(context) {\n\n    // Instantiate your class using Get.put() to make it available for all \"child\" routes there.\n    final Controller c = Get.put(Controller());\n\n    return Scaffold(\n      // Use Obx(()=> to update Text() whenever count is changed.\n      appBar: AppBar(title: Obx(() => Text(\"Clicks: ${c.count}\"))),\n\n      // Replace the 8 lines Navigator.push by a simple Get.to(). You don't need context\n      body: Center(child: ElevatedButton(\n              child: Text(\"Go to Other\"), onPressed: () => Get.to(Other()))),\n      floatingActionButton:\n          FloatingActionButton(child: Icon(Icons.add), onPressed: c.increment));\n  }\n}\n\nclass Other extends StatelessWidget {\n  // You can ask Get to find a Controller that is being used by another page and redirect you to it.\n  final Controller c = Get.find();\n\n  @override\n  Widget build(context){\n     // Access the updated count variable\n     return Scaffold(body: Center(child: Text(\"${c.count}\")));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using GetX to Manage State with Reactive Controllers\nDESCRIPTION: This snippet outlines the Controller class with reactive variables, showing how to implement an increment method that updates the state and calls the update method to notify listeners.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n  int count = 0;\n  void increment() {\n    count++;\n    // use update method to update all count variables\n    update();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying SnackBar using GetX in Flutter\nDESCRIPTION: This snippet demonstrates how to display a SnackBar using GetX, which simplifies the process by eliminating the need for context.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/tr_TR/route_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nGet.snackbar('Hi', 'i am a modern snackbar');\n```\n\n----------------------------------------\n\nTITLE: Conditional Event Triggering with GetX in Dart\nDESCRIPTION: This snippet demonstrates how to use conditional event triggering with GetX in Dart. It shows an example of checking user login status and triggering a route change based on the result.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/state_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar isLogged = false.obs;\n\n@override\nonInit(){\n  ever(isLogged, fireRoute);\n  isLogged.value = await Preferences.hasToken();\n}\n\nfireRoute(logged) {\n  if (logged) {\n   Get.off(Home());\n  } else {\n   Get.off(Login());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional List Modification with GetX in Dart\nDESCRIPTION: This snippet shows how to conditionally add items to a list using GetX, demonstrating advanced state control capabilities.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/tr_TR/state_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nlist.addIf(item < limit, item);\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Routes in GetMaterialApp for Flutter Navigation\nDESCRIPTION: Shows how to set up named routes in a GetMaterialApp for simplified navigation in Flutter applications using GetX.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.zh-cn.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page: () => Home()),\n  ]\n)\n```\n\nLANGUAGE: dart\nCODE:\n```\nGetStorage box = GetStorage();\n\nGetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page:(){\n      return box.hasData('token') ? Home() : Login();\n    })\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring SmartManagement Mode in GetX Application\nDESCRIPTION: Demonstrates how to configure the SmartManagement behavior in a GetX application by setting the smartManagement property in GetMaterialApp. This allows customizing how GetX handles the disposal of unused controllers and dependencies.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/kr_KO/dependency_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid main () {\n  runApp(\n    GetMaterialApp(\n      smartManagement: SmartManagement.onlyBuilders // 이곳\n      home: Home(),\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Lifecycle Method Implementation\nDESCRIPTION: Demonstrates implementation of onInit method in a controller to handle initialization logic.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid onInit() {\n  fetchApi();\n  super.onInit();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple State Management with GetBuilder in Flutter\nDESCRIPTION: This Dart snippet sets up a Flutter home page that uses GetBuilder for simple state management with the help of a controller. It illustrates how to update UI components when state changes occur. The example navigates between pages using the Get.to method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n  final controller = Get.put(Controller());\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(\"counter\")),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            GetBuilder<Controller>(\n                builder: (_) => Text(\n                      'clicks: ${controller.count}',\n                    )),\n            ElevatedButton(\n              child: Text('Next Route'),\n              onPressed: () {\n                Get.to(Second());\n              },\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n          child: Icon(Icons.add),\n          onPressed: controller.increment(),  \n          ),\n    );\n  }\n}\nclass Second extends StatelessWidget {\n  final Controller ctrl = Get.find();\n  @override\n  Widget build(context){\n     return Scaffold(body: Center(child: Text(\"${ctrl.count}\")));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Observable Lists and Custom Classes in GetX\nDESCRIPTION: This snippet shows how to utilize observable lists and custom class instances in GetX, including updating observable class instances and displaying them in the UI.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n// On the controller\nfinal String title = 'User Info:'.obs\nfinal list = List<User>().obs;\n\n// on the view\nText(controller.title.value), // String need to have .value in front of it\nListView.builder (\n  itemCount: controller.list.length // lists don't need it\n)\n\n// on the model file\n// we are going to make the entire class observable instead of each attribute\nclass User() {\n  User({this.name = '', this.age = 0});\n  String name;\n  int age;\n}\n\n// on the controller file\nfinal user = User().obs;\n// when you need to update the user variable:\nuser.update( (user) { // this parameter is the class itself that you want to update\nuser.name = 'Jonny';\nuser.age = 18;\n});\n// an alternative way of update the user variable:\nuser(User(name: 'João', age: 35));\n\n// on view:\nObx(()=> Text(\"Name ${user.value.name}: Age: ${user.value.age}\"))\n// you can also access the model values without the .value:\nuser().name; // notice that is the user variable, not the class (variable has lowercase u)\n```\n\n----------------------------------------\n\nTITLE: Register asynchronous instances with Get.putAsync() in Dart\nDESCRIPTION: This snippet demonstrates how to register asynchronous instances using Get.putAsync(). It's useful when you need to initialize a dependency asynchronously, such as retrieving data from SharedPreferences.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/dependency_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.putAsync<SharedPreferences>(() async {\\n  final prefs = await SharedPreferences.getInstance();\\n  await prefs.setInt('counter', 12345);\\n  return prefs;\\n});\\n\\nGet.putAsync<YourAsyncClass>( () async => await YourAsyncClass() )\"\n```\n\n----------------------------------------\n\nTITLE: Displaying a SnackBar with Get\nDESCRIPTION: Illustrates the simplified approach to showing a SnackBar using Getx. No Scaffold context is required, making it easier to call from anywhere in the code.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/route_management.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nGet.snackbar('Hi', 'i am a modern snackbar');\n```\n\n----------------------------------------\n\nTITLE: Defining RxStatus States in GetX\nDESCRIPTION: This snippet presents the different states available in `RxStatus`. These states include loading, success, empty and error, each representing a different UI state.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/vi_VI/state_management.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nRxStatus.loading();\nRxStatus.success();\nRxStatus.empty();\nRxStatus.error('message');\n```\n\n----------------------------------------\n\nTITLE: Initializing GetBuilder with Controller Lifecycle Methods\nDESCRIPTION: Shows how to use initState and dispose methods directly within GetBuilder widget instead of StatefulWidget.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  initState: (_) => Controller.to.fetchApi(),\n  dispose: (_) => Controller.to.closeStreams(),\n  builder: (s) => Text('${s.username}'),\n),\n```\n\n----------------------------------------\n\nTITLE: Initializing Bindings Before Page Load in GetX\nDESCRIPTION: Illustrates using the 'onBindingsStart' lifecycle event in a GetX middleware to inject additional Bindings when initializing pages. Specifically useful in scenarios where certain roles require additional services or components. Assumes a typical GetX setup with service dependency injection.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nList<Bindings> onBindingsStart(List<Bindings> bindings) {\n  final authService = Get.find<AuthService>();\n  if (authService.isAdmin) {\n    bindings.add(AdminBinding());\n  }\n  return bindings;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Configurations with GetX in Dart\nDESCRIPTION: This code demonstrates how to set global configurations for GetX using both `GetMaterialApp` and `Get.config`. These configurations include enabling logging, setting the default transition, controlling route opacity, enabling pop gesture, setting transition duration, and setting default global state.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  enableLog: true,\n  defaultTransition: Transition.fade,\n  opaqueRoute: Get.isOpaqueRouteDefault,\n  popGesture: Get.isPopGestureEnable,\n  transitionDuration: Get.defaultDurationTransition,\n  defaultGlobalState: Get.defaultGlobalState,\n);\n\nGet.config(\n  enableLog = true,\n  defaultPopGesture = true,\n  defaultTransition = Transitions.cupertino\n)\n```\n\n----------------------------------------\n\nTITLE: Simple Counter Example with GetX in Dart\nDESCRIPTION: This snippet demonstrates a simple counter implementation using GetX, showing how to create a reactive controller and update the UI with minimal code.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/state_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass CountController extends GetxController {\n  final count = 0.obs;\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\ncontroller.count.value++\n```\n\n----------------------------------------\n\nTITLE: Internationalisation avec GetX en Dart\nDESCRIPTION: Ce snippet montre comment définir des traductions pour différentes langues en étendant la classe Translations de GetX.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:get/get.dart';\n\nclass Messages extends Translations {\n  @override\n  Map<String, Map<String, String>> get keys => {\n        'en_US': {\n          'hello': 'Hello World',\n        },\n        'de_DE': {\n          'hello': 'Hallo Welt',\n        }\n      };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Unique IDs with GetBuilder for Targeted Updates\nDESCRIPTION: Demonstrates how to use unique IDs with GetBuilder to selectively update specific widgets rather than rebuilding the entire widget tree.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  id: 'text'\n  init: Controller(), // use it only first time on each controller\n  builder: (_) => Text(\n    '${Get.find<Controller>().counter}', //here\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Navigating and Removing Previous Screen with Named Routes in GetX\nDESCRIPTION: Shows how to navigate to a named route and remove the previous screen from the navigation stack using GetX's offNamed() method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nGet.offNamed(\"/NextScreen\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Get.create() with All Options in Dart\nDESCRIPTION: Shows all available options when using Get.create() for dynamic instance creation, including builder function, name, and permanence.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/dependency_management.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nGet.create<S>(\n  // required: a function that returns a class that will be \"fabricated\" every\n  // time `Get.find()` is called\n  // Example: Get.create<YourClass>(() => YourClass())\n  FcBuilderFunc<S> builder,\n\n  // optional: just like Get.put(), but it is used when you need multiple instances\n  // of a of a same class\n  // Useful in case you have a list that each item need it's own controller\n  // needs to be a unique string. Just change from tag to name\n  String name,\n\n  // optional: just like int`Get.put()`, it is for when you need to keep the\n  // instance alive thoughout the entire app. The difference is in Get.create\n  // permanent is true by default\n  bool permanent = true\n```\n\n----------------------------------------\n\nTITLE: Using BindingsBuilder for Inline Dependency Injection\nDESCRIPTION: Demonstrates an alternative method to create bindings using BindingsBuilder callback for more flexible dependency injection\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/vi_VI/dependency_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ngetPages: [\n  GetPage(\n    name: '/',\n    page: () => HomeView(),\n    binding: BindingsBuilder(() {\n      Get.lazyPut<ControllerX>(() => ControllerX());\n      Get.put<Service>(() => Api());\n    }),\n  )\n]\n```\n\n----------------------------------------\n\nTITLE: Comparing Standard Flutter Navigation with GetX in Dart\nDESCRIPTION: Compares the standard Flutter navigation syntax with GetX's simplified syntax for push navigation.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// Default Flutter navigator\nNavigator.of(context).push(\n  context,\n  MaterialPageRoute(\n    builder: (BuildContext context) {\n      return HomePage();\n    },\n  ),\n);\n\n// Get using Flutter syntax without needing context\nnavigator.push(\n  MaterialPageRoute(\n    builder: (_) {\n      return HomePage();\n    },\n  ),\n);\n\n// Get syntax (It is much better, but you have the right to disagree)\nGet.to(HomePage());\n```\n\n----------------------------------------\n\nTITLE: Lazy load dependencies with Get.lazyPut() in Dart\nDESCRIPTION: This snippet illustrates how to use Get.lazyPut() to lazily load dependencies, meaning the dependency is only instantiated when it's first used. This is beneficial for computationally expensive classes or when instantiating multiple classes in one location, like Bindings.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/dependency_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n\"/// ApiMock hanya akan dipanggil ketika seseorang menggunakan Get.find<ApiMock> pertama kali.\\nGet.lazyPut<ApiMock>(() => ApiMock());\\n\\nGet.lazyPut<FirebaseAuth>(\\n  () {\\n    // ... beberapa logic jika diperlukan..\\n    return FirebaseAuth();\\n  },\\n  tag: Math.random().toString(),\\n  fenix: true\\n)\\n\\nGet.lazyPut<Controller>( () => Controller() )\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Home View with GetView\nDESCRIPTION: This snippet presents the Home view extending GetView, demonstrating how to build a UI using reactive variables. It takes advantage of GetX's state management features for a cleaner implementation.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends GetView<Controller> {\n  @override\n  Widget build(context) => Scaffold(\n      appBar: AppBar(title: Text(\"counter\")),\n      body: Center(\n        child: Obx(() => Text(\"${controller.counter}\")),\n      ),\n      floatingActionButton: FloatingActionButton(\n        child: Icon(Icons.add),\n        onPressed: controller.increment,\n      ));\n}\n```\n\n----------------------------------------\n\nTITLE: Using GetBuilder without init\nDESCRIPTION: This snippet illustrates how to use GetBuilder in another class without initializing the controller again. The controller is already initialized in a previous widget.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nclass OtherClass extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: GetBuilder<Controller>(\n          builder: (s) => Text('${s.counter}'),\n        ),\n      ),\n    );\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shared Preferences Instance with Get.find() in Dart\nDESCRIPTION: Shows how to retrieve and use a previously instantiated SharedPreferences instance using Get.find().\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/dependency_management.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nint count = Get.find<SharedPreferences>().getInt('counter');\nprint(count); // out: 12345\n```\n\n----------------------------------------\n\nTITLE: Handling undefined routes using unknownRoute in GetMaterialApp\nDESCRIPTION: This snippet demonstrates how to handle navigation to undefined routes (404 errors) using the `unknownRoute` property in `GetMaterialApp`.  It allows you to specify a fallback page to display when a requested route is not found.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nvoid main() {\n  runApp(\n    GetMaterialApp(\n      unknownRoute: GetPage(name: '/notfound', page: () => UnknownRoutePage()),\n      initialRoute: '/',\n      getPages: [\n        GetPage(name: '/', page: () => MyHomePage()),\n        GetPage(name: '/second', page: () => Second()),\n      ],\n    )\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Navigating with Multiple Route Parameters using GetX in Dart\nDESCRIPTION: Demonstrates how to navigate to a named route with multiple parameters using GetX's toNamed() method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nGet.toNamed(\"/profile/34954?flag=true&country=italy\");\n```\n\n----------------------------------------\n\nTITLE: Modifying Bindings in GetPage Middleware\nDESCRIPTION: This snippet illustrates how to modify bindings just before they are initialized in GetPage, enabling dynamic control over dependency injections in a Flutter application.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nList<Bindings> onBindingsStart(List<Bindings> bindings) {\n  final authService = Get.find<AuthService>();\n  if (authService.isAdmin) {\n    bindings.add(AdminBinding());\n  }\n  return bindings;\n}\n```\n\n----------------------------------------\n\nTITLE: Using System Locale with GetX in Flutter\nDESCRIPTION: This snippet demonstrates how to use the system's locale in a Flutter app with GetX. It shows how to access the device locale using Get.deviceLocale.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nreturn GetMaterialApp(\n    locale: Get.deviceLocale,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Rx<String> Observable in Dart\nDESCRIPTION: This snippet demonstrates creating an observable variable using the generic `Rx<Type>` class in GetX. This is another way to declare a reactive String variable. It offers type safety and enables UI elements to react to changes in the variable's value without manual intervention.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n\"var count = Rx<String>();\"\n```\n\n----------------------------------------\n\nTITLE: Using Unique IDs for Granular Widget Updates\nDESCRIPTION: Illustrates how to use unique IDs with GetBuilder to control specific widget updates\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/vi_VI/state_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  id: 'text',\n  init: Controller(),\n  builder: (_) => Text('${Get.find<Controller>().counter}'),\n)\n\n// Updating with condition\nupdate(['text'], counter < 10);\n```\n\n----------------------------------------\n\nTITLE: Creating Translations with GetX\nDESCRIPTION: Shows how to create a translation class by extending the Translations class and providing key-value mappings for different languages.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ur-PK.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:get/get.dart';\n\nclass Messages extends Translations {\n  @override\n  Map<String, Map<String, String>> get keys => {\n        'en_US': {\n          'hello': 'Hello World',\n        },\n        'de_DE': {\n          'hello': 'Hallo Welt',\n        }\n      };\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating and Removing All Previous Screens with Named Routes in GetX\nDESCRIPTION: Demonstrates how to navigate to a named route and remove all previous screens from the navigation stack using GetX's offAllNamed() method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nGet.offAllNamed(\"/NextScreen\");\n```\n\n----------------------------------------\n\nTITLE: Using BindingsBuilder for Inline Dependency Registration\nDESCRIPTION: Demonstrates a more concise way to register dependencies using BindingsBuilder callback, allowing for inline dependency registration without creating separate binding classes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/dependency_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\ngetPages: [\n  GetPage(\n    name: '/',\n    page: () => HomeView(),\n    binding: BindingsBuilder(() {\n      Get.lazyPut<ControllerX>(() => ControllerX());\n      Get.put<Service>(()=> Api());\n    }),\n  ),\n  GetPage(\n    name: '/details',\n    page: () => DetailsView(),\n    binding: BindingsBuilder(() {\n      Get.lazyPut<DetailsController>(() => DetailsController());\n    }),\n  ),\n];\n```\n\n----------------------------------------\n\nTITLE: Working with Rx Types in GetX (Dart)\nDESCRIPTION: This snippet provides examples of working with Rx (observable) types in GetX, specifically `.obs`. It demonstrates how to update values, toggle booleans, set values to null, and use built-in functions like `toString()` and `toJson()` with Rx types. It also covers how RxMap, RxList, and RxSet extend their native types, and how to work with custom Rx models using `refresh()` or `update()` to trigger UI updates.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_33\n\nLANGUAGE: dart\nCODE:\n```\nvar message = 'Hello world'.obs;\nprint( 'Message \"$message\" has Type ${message.runtimeType}');\n\nfinal name = 'GetX'.obs;\n// 현재 값과 다른 값이면 stream을 업데이트만 합니다.\nname.value = 'Hey';\n\n// 모든 Rx 프로퍼티가 \"호출 가능\"하고 새로운 값을 반환합니다.\n// 하지만 이 접근방식은 `null`를 허용하지 않고 UI가 재구축하지 않습니다.\nname('Hello');\n\n// getter와 과 같이 'Hello'를 출력합니다.\nname() ;\n\n/// 숫자 타입들:\n\nfinal count = 0.obs;\n\n// 기존 숫자 타입으로 모든 변형 불가 작업을 사용할수 있습니다.\ncount + 1;\n\n// 주의하세요! 아래는 `count`가 final이 아닌 경우에만 유효합니다.\ncount += 1;\n\n// 값들을 비교할 수도 있습니다:\ncount > 2;\n\n/// booleans:\n\nfinal flag = false.obs;\n\n// true/false 사이의 전환이 됩니다.\nflag.toggle();\n\n\n/// 모든 타입들:\n\n// `값`을 null로 셋합니다.\nflag.nil();\n\n//  모든 toString(), toJson() 함수들은 `값`으로 전달됩니다.\nprint( count ); // RxInt 내부에서 `toString()`이 호출됩니다.\n\nfinal abc = [0,1,2].obs;\n// 값을 json 배열로 바꾸고 RxList를 출력합니다.\n// Json은 모든 Rx 타입들을 지원합니다!\nprint('json: ${jsonEncode(abc)}, type: ${abc.runtimeType}');\n\n// RxMap, RxList 그리고 RxSet은 그들의 native 타입들을 확장한 특별한 Rx 타입들입니다.\n// 반응형이긴 하지만 일반 list로서 RxList가 동작합니다!\nabc.add(12); // list에 12가 들어가고 stream을 업데이트합니다.\nabc[3]; // List와 같이 인덱스 3을 읽습니다.\n\n\n// 동등비교는 Rx와 값에서 동작하지만 해시코드는 항상 값으로부터 받습니다.\nfinal number = 12.obs;\nprint( number == 12 ); // prints > true\n\n/// 커스텀 Rx 모델들:\n\n// toJson(), toString()은 child에게 지연됩니다. 그래서 이것들을 재정의 하고 직접 관찰하여 print() 할수 있습니다.\n\nclass User {\n    String name, last;\n    int age;\n    User({this.name, this.last, this.age});\n\n    @override\n    String toString() => '$name $last, $age years old';\n}\n\nfinal user = User(name: 'John', last: 'Doe', age: 33).obs;\n\n// `user`는 \"반응형\"이지만 내부 프로퍼티들은 아닙니다!\n// 그래서 만약 내부의 변수를 바꾸면...\nuser.value.name = 'Roi';\n// 위젯은 재구성 되지 않을것 입니다!\n// user의 내부의 무언가가 바뀌어도 `Rx`는 알 수가 없습니다.\n// 그래서 커스텀 클래스들은 수동으로 바뀌었다고 \"알릴\" 필요가 있습니다.\nuser.refresh();\n\n// 또는 `update()` 함수를 사용할 수 있습니다!\nuser.update((value){\n  value.name='Roi';\n});\n\nprint( user );\n```\n\n----------------------------------------\n\nTITLE: Implementasi UI Menggunakan GetX di Flutter\nDESCRIPTION: Membuat tampilan UI menggunakan StatelessWidget dengan GetX untuk manajemen state dan navigasi.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.id-ID.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n\n  @override\n  Widget build(context) {\n\n    // Instansiasi kelas anda menggunakan Get.put() untuk membuatnya tersedia untuk seluruh \"child\" route dibawahnya.    \n    final Controller c = Get.put(Controller());\n\n    return Scaffold(\n      // Gunakan Obx(() => ...) untuk mengupdate Text() ketika `count` berubah.\n      appBar: AppBar(title: Obx(() => Text(\"Clicks: ${c.count}\"))),\n\n      // Ganti 8 baris Navigator.push menggunan Get.to() agar lebih sederhana. Anda tidak perlu `context`.\n      body: Center(child: ElevatedButton(\n              child: Text(\"Go to Other\"), onPressed: () => Get.to(Other()))),\n      floatingActionButton:\n          FloatingActionButton(child: Icon(Icons.add), onPressed: c.increment));\n  }\n}\n\nclass Other extends StatelessWidget {\n  // Anda bisa meminta Get untuk menemukan kontroler yang digunakan di halaman lain dan redirect ke halaman itu.\n  final Controller c = Get.find();\n\n  @override\n  Widget build(context){\n     // Akses variabel `count` yang telah di update.\n     return Scaffold(body: Center(child: Text(\"${c.count}\")));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Unnamed Routes with Bindings in GetX\nDESCRIPTION: This snippet illustrates using unnamed routes in GetX to navigate to a new page with a binding attached. It simplifies navigation while ensuring the required dependencies are injected.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nGet.to(Second(), binding: SampleBind());\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Getter for GetX Controller in Dart\nDESCRIPTION: This snippet shows how to create a static getter for a GetX controller to easily access it throughout the app. It includes a method to increment the counter.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/state_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n\n  /// You do not need that. I recommend using it just for ease of syntax.\n  /// with static method: Controller.to.increment();\n  /// with no static method: Get.find<Controller>().increment();\n  /// There is no difference in performance, nor any side effect of using either syntax. Only one does not need the type, and the other the IDE will autocomplete it.\n  static Controller get to => Get.find(); // add this line\n\n  int counter = 0;\n  void increment() {\n    counter++;\n    update();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using standard Flutter Navigator with GetX\nDESCRIPTION: This snippet demonstrates how to use the standard Flutter `Navigator` with GetX, replacing `Navigator` with `navigator` (lowercase) to avoid needing the `context`. This leverages GetX's context management to avoid passing `context` around.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n```dart\n// Navigator padrão do Flutter\nNavigator.of(context).push(\n  context,\n  MaterialPageRoute(\n    builder: (BuildContext context) {\n      return HomePage();\n    },\n  ),\n);\n\n// Get usando a sintaxe Flutter sem precisar do context\nnavigator.push(\n  MaterialPageRoute(\n      builder: (_) {\n      return HomePage();\n    },\n  ),\n);\n\n// Sintaxe do Get (é bem melhor, mas você tem o direito de discordar)\nGet.to(HomePage());\n```\n```\n\n----------------------------------------\n\nTITLE: Returning Data from Current Screen with GetX in Dart\nDESCRIPTION: Demonstrates how to return data from the current screen to the previous one using GetX's back() method with a result parameter.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nGet.back(result: 'success');\n```\n\n----------------------------------------\n\nTITLE: Redirect Logic in GetPage Middleware\nDESCRIPTION: This snippet shows how to implement redirect logic in GetPage middleware to control navigation based on user authentication status in a Flutter application.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nRouteSettings redirect(String route) {\n  final authService = Get.find<AuthService>();\n  return authService.authed.value ? null : RouteSettings(name: '/login');\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection dengan GetX di Flutter\nDESCRIPTION: Contoh penggunaan Get.put() dan Get.find() untuk dependency injection.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.id-ID.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nController controller = Get.put(Controller());\n\nController controller = Get.find();\n```\n\n----------------------------------------\n\nTITLE: Using Rx Observables in Dart with GetX\nDESCRIPTION: Demonstrates how to use reactive (.obs) variables in GetX, including strings, numbers, booleans, lists and custom classes. Shows various ways to access and modify observable values.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_33\n\nLANGUAGE: dart\nCODE:\n```\nvar message = 'Hello world'.obs;\nprint( 'Message \"$message\" est de Type ${message.runtimeType}');\n\nfinal name = 'GetX'.obs;\nname.value = 'Hey';\nname('Hello');\nname() ;\n\nfinal count = 0.obs;\ncount + 1;\ncount += 1;\ncount > 2;\n\nfinal flag = false.obs;\nflag.toggle();\n\nflag.nil();\n\nprint( count );\n\nfinal abc = [0,1,2].obs;\nprint('json: ${jsonEncode(abc)}, type: ${abc.runtimeType}');\nabc.add(12); \nabc[3];\n\nfinal number = 12.obs;\nprint( number == 12 );\n\nclass User {\n    String name, last;\n    int age;\n    User({this.name, this.last, this.age});\n\n    @override\n    String toString() => '$name $last, $age ans';\n}\n\nfinal user = User(name: 'John', last: 'Doe', age: 33).obs;\nuser.value.name = 'Roi';\nuser.refresh();\n\nuser.update((value){\n  value.name='Roi';\n});\n\nprint( user );\n```\n\n----------------------------------------\n\nTITLE: Handling Page Build Events in GetPage\nDESCRIPTION: This snippet demonstrates how to execute code after the bindings are ready but before the page widget is built in GetPage, facilitating more control over the page lifecycle in Flutter applications.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nGetPageBuilder onPageBuildStart(GetPageBuilder page) {\n  print('les liaisons sont prêtes');\n  return page;\n}\n```\n\n----------------------------------------\n\nTITLE: Page Build Start Event - Dart\nDESCRIPTION: This function triggers right after the bindings are initialized but before the widget is built, allowing for any necessary setup or logging.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nGetPageBuilder onPageBuildStart(GetPageBuilder page) {\n  print('bindings are ready');\n  return page;\n}\n```\n\n----------------------------------------\n\nTITLE: Accediendo a datos del controlador con GetX en Dart\nDESCRIPTION: Muestra cómo acceder a los datos de un controlador recuperado con Get.find() en un widget Text.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/dependency_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nText(controller.textFromApi);\n```\n\n----------------------------------------\n\nTITLE: Controller Singleton and Static Access\nDESCRIPTION: Demonstrates techniques for creating singleton-like access to controllers using static getters or Get.find()\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n  static Controller get to => Get.find();\n  // Alternative approach without static\n  // Get.find<Controller>().counter\n}\n```\n\n----------------------------------------\n\nTITLE: Page Event Handling in GetPage\nDESCRIPTION: This snippet demonstrates how to handle events when a page is called or built in the GetPage configuration, allowing for customization of page behavior in a Flutter application.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nGetPage onPageCalled(GetPage page) {\n  final authService = Get.find<AuthService>();\n  return page.copyWith(title: 'Welcome ${authService.UserName}');\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Platform Information Using GetPlatform in Dart\nDESCRIPTION: This code snippet illustrates how to determine the current platform and device type using the GetPlatform class in GetX. It provides methods to check if the app is running on Android, iOS, macOS, Windows, Linux, Fuchsia, mobile, desktop, or web.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\n// 앱이 구동중인 플랫폼을 확인\nGetPlatform.isAndroid\nGetPlatform.isIOS\nGetPlatform.isMacOS\nGetPlatform.isWindows\nGetPlatform.isLinux\nGetPlatform.isFuchsia\n\n// 장치 타입을 확인\nGetPlatform.isMobile\nGetPlatform.isDesktop\n// 모든 플랫폼은 독립적으로 웹을 제공합니다!\n// Windows, iOS, OSX, Android 등의\n// 브러우저에서 구동중이면 알 수 있습니다.\nGetPlatform.isWeb\n```\n\n----------------------------------------\n\nTITLE: Using Device Locale with GetX\nDESCRIPTION: Shows how to use the device's system locale for the application using GetX's deviceLocale property.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ur-PK.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nreturn GetMaterialApp(\n    locale: Get.deviceLocale,\n);\n```\n\n----------------------------------------\n\nTITLE: Navigating Back with GetX\nDESCRIPTION: Shows how to go back to previous screen using GetX, replacing the Navigator.pop(context) approach with a simpler context-free method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ur-PK.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nGet.back();\n```\n\n----------------------------------------\n\nTITLE: Changing the Application Theme with GetX\nDESCRIPTION: This snippet shows how to change the application's theme using `Get.changeTheme()`.  You can pass any `ThemeData` object to this method to apply a new theme. This example uses a light theme.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.changeTheme(ThemeData.light());\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Dialog using GetX in Flutter\nDESCRIPTION: This snippet shows how to display a default dialog using GetX with customizable options.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/tr_TR/route_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nGet.defaultDialog(\n  onConfirm: () => print(\"Ok\"),\n  middleText: \"Dialog made in 3 lines of code\"\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing GetX SnackBar in Flutter\nDESCRIPTION: This snippet shows how to customize a GetX SnackBar with various options such as icon, duration, and appearance.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/tr_TR/route_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nGet.snackbar(\n  \"Hey i'm a Get SnackBar!\", // title\n  \"It's unbelievable! I'm using SnackBar without context, without boilerplate, without Scaffold, it is something truly amazing!\", // message\n  icon: Icon(Icons.alarm),\n  shouldIconPulse: true,\n  onTap:(){},\n  barBlur: 20,\n  isDismissible: true,\n  duration: Duration(seconds: 3),\n);\n```\n\n----------------------------------------\n\nTITLE: Extending Translations for Internationalization in GetX\nDESCRIPTION: This snippet shows how to create a custom translation class by extending `Translations` in GetX. This allows you to define key-value pairs for different languages.  The `keys` map should contain language codes as keys (e.g., 'en_US', 'de_DE') and their corresponding translations.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:get/get.dart';\n\nclass Messages extends Translations {\n  @override\n  Map<String, Map<String, String>> get keys => {\n        'en_US': {\n          'hello': 'Hello World',\n        },\n        'de_DE': {\n          'hello': 'Hallo Welt',\n        }\n      };\n}\n```\n\n----------------------------------------\n\nTITLE: Initialisation de l'application GetX en Dart\nDESCRIPTION: Ce snippet montre comment initialiser une application Flutter avec GetX en utilisant GetMaterialApp au lieu de MaterialApp.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(GetMaterialApp(home: Home()));\n```\n\n----------------------------------------\n\nTITLE: Displaying a default Dialog with GetX\nDESCRIPTION: This snippet demonstrates how to display a default dialog with pre-configured actions and content using GetX's `Get.defaultDialog()` method.  You can customize the actions and message of the dialog.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.defaultDialog(\n  onConfirm: () => print(\"Ok\"),\n  middleText: \"Dialog made in 3 lines of code\",\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Modifying Bindings Before Initialization - Dart\nDESCRIPTION: This function runs just before bindings are initialized, allowing modifications to the bindings based on certain conditions like user roles.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nList<Bindings> onBindingsStart(List<Bindings> bindings) {\n  final authService = Get.find<AuthService>();\n  if (authService.isAdmin) {\n    bindings.add(AdminBinding());\n  }\n  return bindings;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Parameterized Translations with GetX\nDESCRIPTION: This snippet shows how to create a map of translations with parameters in GetX. It allows the inclusion of dynamic values in the translations, such as user name and email, improving the user experience in Flutter applications.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:get/get.dart';\n\n\nMap<String, Map<String, String>> get keys => {\n    'en_US': {\n        'logged_in': 'logged in as @name with email @email',\n    },\n    'es_ES': {\n       'logged_in': 'iniciado sesión como @name con e-mail @email',\n    }\n};\n\nText('logged_in'.trParams({\n  'name': 'Jhon',\n  'email': 'jhon@example.com'\n  }));\n```\n\n----------------------------------------\n\nTITLE: Defining Named Routes with GetMaterialApp in Dart\nDESCRIPTION: Shows how to define named routes using GetMaterialApp and GetPage in the main function of a Flutter application.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(\n    GetMaterialApp(\n      initialRoute: '/',\n      getPages: [\n        GetPage(name: '/', page: () => MyHomePage()),\n        GetPage(name: '/second', page: () => Second()),\n        GetPage(\n          name: '/third',\n          page: () => Third(),\n          transition: Transition.zoom  \n        ),\n      ],\n    )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Routes with GetMiddleware in Dart\nDESCRIPTION: This snippet uses GetX's middleware feature to redirect users based on authentication status. The 'redirect' function utilizes RouteSettings for navigation decisions, allowing developers to handle authentication workflows easily. Assumes the presence of an AuthService instance that's managed through the GetX dependency injection system.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nGetPage redirect( ) {\n  final authService = Get.find<AuthService>();\n  return authService.authed.value ? null : RouteSettings(name: '/login')\n}\n```\n\n----------------------------------------\n\nTITLE: Observable 리스트와 String 사용 예시 (Dart)\nDESCRIPTION: GetX에서 Observable 리스트와 String을 사용하는 방법을 보여줍니다. 리스트는 .value 없이 사용할 수 있지만, String은 .value가 필요합니다.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/kr_KO/state_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// On the controller\nfinal String title = 'User Info:'.obs\nfinal list = List<User>().obs;\n\n// on the view\nText(controller.title.value), // String은 .value가 필요합니다\nListView.builder (\n  itemCount: controller.list.length // 리스트는 .value가 필요없습니다.\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Locale Dynamically with GetX\nDESCRIPTION: Demonstrates how to dynamically change the application's locale at runtime using GetX, which automatically updates all translations.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ur-PK.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nvar locale = Locale('en', 'US');\nGet.updateLocale(locale);\n```\n\n----------------------------------------\n\nTITLE: Changing Theme with GetX Dart\nDESCRIPTION: This code snippet demonstrates how to switch application themes using GetX's changeTheme method in Dart. No additional dependencies are needed beyond GetX. The method is called to toggle between light and dark themes based on the current theme status when an onTap event occurs.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-ar.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nGet.changeTheme(ThemeData.light());\n```\n\nLANGUAGE: dart\nCODE:\n```\nGet.changeTheme(Get.isDarkMode? ThemeData.light(): ThemeData.dark());\n```\n\n----------------------------------------\n\nTITLE: Customizing GetConnect Configuration in Dart\nDESCRIPTION: This snippet illustrates customizing the GetConnect class for API communication in Dart, including specifying a base URL, adding request and response modifiers, authenticating requests, and setting a standard request decoder. It requires the GetX package and Set up models to match API responses.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-ar.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeProvider extends GetConnect {\n  @override\n  void onInit() {\n    // All request will pass to jsonEncode so CasesModel.fromJson()\n    httpClient.defaultDecoder = CasesModel.fromJson;\n    httpClient.baseUrl = 'https://api.covid19api.com';\n    \n    httpClient.addRequestModifier((request) {\n      request.headers['apikey'] = '12345678';\n      return request;\n    });\n\n    httpClient.addResponseModifier<CasesModel>((request, response) {\n      CasesModel model = response.body;\n      if (model.countries.contains('Brazil')) {\n        model.countries.remove('Brazilll');\n      }\n    });\n\n    httpClient.addAuthenticator((request) async {\n      final response = await get(\"http://yourapi/token\");\n      final token = response.body['token'];\n      // Set the header\n      request.headers['Authorization'] = \"$token\";\n      return request;\n    });\n\n    httpClient.maxAuthRetries = 3;\n  }\n\n  @override\n  Future<Response<CasesModel>> getCases(String path) => get(path);\n}\n```\n\n----------------------------------------\n\nTITLE: GetBuilder with Lifecycle Methods in Dart\nDESCRIPTION: Demonstrates how to initialize and dispose methods directly within a GetBuilder widget, showing lifecycle handling without traditional StatefulWidget approach\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/state_management.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  initState: (_) => Controller.to.fetchApi(),\n  dispose: (_) => Controller.to.closeStreams(),\n  builder: (s) => Text('${s.username}'),\n)\n```\n\n----------------------------------------\n\nTITLE: ObxValue for Reactive State Management\nDESCRIPTION: Demonstrates the reactive version of state management using ObxValue with Rx instances\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nObxValue((data) => Switch(\n        value: data.value,\n        onChanged: data,\n    ),\n    false.obs,\n),\n```\n\n----------------------------------------\n\nTITLE: Using Plural Translations with GetX\nDESCRIPTION: This snippet demonstrates how to use plural translations in GetX for Flutter applications. It utilizes the 'trPlural' method to provide different keys for plural and singular forms of a translated text based on the count of products.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar products = [];\nText('cléAuSingulier'.trPlural('cléAuPluriel', products.length, Args));\n```\n\n----------------------------------------\n\nTITLE: Defining a simple controller using GetxController in Dart\nDESCRIPTION: This snippet showcases the basic structure of a controller class in GetX, extending `GetxController`. It defines an observable `count` variable, making it easy to manage state and trigger UI updates.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n\"class CountCtl extends GetxController {\\n  final count = 0.obs;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing GetX Workers for Reactive State Handling in Dart\nDESCRIPTION: Code demonstrates various GetX Workers that respond to state changes. These include 'ever' (triggers on every change), 'once' (triggers only on first change), 'debounce' (waits for inactivity before triggering), and 'interval' (triggers at fixed time intervals, ignoring intermediate changes).\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/state_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n/// Called every time `count1` changes.\never(count1, (_) => print(\"$_ has been changed\"));\n\n/// Called only first time the variable $_ is changed\nonce(count1, (_) => print(\"$_ was changed once\"));\n\n/// Anti DDos - Called every time the user stops typing for 1 second, for example.\ndebounce(count1, (_) => print(\"debouce$_\"), time: Duration(seconds: 1));\n\n/// Ignore all changes within 1 second.\ninterval(count1, (_) => print(\"interval $_\"), time: Duration(seconds: 1));\n```\n\n----------------------------------------\n\nTITLE: Utilisation des traductions avec GetX en Dart\nDESCRIPTION: Ce snippet montre comment utiliser les traductions définies en ajoutant .tr à la clé de traduction.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nText('title'.tr);\n```\n\n----------------------------------------\n\nTITLE: Initializing GetxServices in Dart\nDESCRIPTION: Demonstrates how to initialize GetxServices before running a Flutter app. It shows the setup of DbService and SettingsService as examples of services that need to be initialized asynchronously.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-ar.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  await initServices(); /// AWAIT SERVICES INITIALIZATION.\n  runApp(SomeApp());\n}\n\n/// Is a smart move to make your Services intiialize before you run the Flutter app.\n/// as you can control the execution flow (maybe you need to load some Theme configuration,\n/// apiKey, language defined by the User... so load SettingService before running ApiService.\n/// so GetMaterialApp() doesnt have to rebuild, and takes the values directly.\nvoid initServices() async {\n  print('starting services ...');\n  /// Here is where you put get_storage, hive, shared_pref initialization.\n  /// or moor connection, or whatever that's async.\n  await Get.putAsync(() => DbService().init());\n  await Get.putAsync(SettingsService()).init();\n  print('All services started...');\n}\n\nclass DbService extends GetxService {\n  Future<DbService> init() async {\n    print('$runtimeType delays 2 sec');\n    await 2.delay();\n    print('$runtimeType ready!');\n    return this;\n  }\n}\n\nclass SettingsService extends GetxService {\n  void init() async {\n    print('$runtimeType delays 1 sec');\n    await 1.delay();\n    print('$runtimeType ready!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the named parameter\nDESCRIPTION: This snippet demonstrates accessing the value of a named parameter from the route using `Get.parameters['parameterName']`.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nprint(Get.parameters['user']);\n// valor: 34954\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Streams with GetStream in Dart\nDESCRIPTION: This example depicts the use of GetStream, an alternative to StreamControllers, ensuring correct event order and multiple listeners without exceptions. Requires GetStream and standard Dart libraries; aims to demonstrate improved handling of asynchronous operations.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  var controller = GetStream();\n  var stream = controller.stream;\n  stream.listen((data) {\n    print('$data');\n    if (data == 'test4') controller.add('test5');\n  });\n\n  print('test1');\n  controller.add('test2');\n  // stream.listen((event) {}); // second listen throws a exception\n  print('test3');\n  controller.add('test4');\n  print('test6');\n  controller.add('test7');\n  print(\"test8\");\n}\n///////////////////// log:\ntest1\ntest2\ntest3\ntest4\ntest5\ntest6\ntest7\ntest8\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Navigation with GetX\nDESCRIPTION: This code snippet demonstrates how to implement nested navigation using GetX. It simplifies the process by using a unique ID to manage the navigation stack, eliminating the need for context. Get.nestedKey creates a unique key for the Navigator, Get.toNamed navigates to a named route within the nested Navigator identified by its ID.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_35\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nNavigator(\n  key: Get.nestedKey(1), // create a key by index\n  initialRoute: '/',\n  onGenerateRoute: (settings) {\n    if (settings.name == '/') {\n      return GetPageRoute(\n        page: () => Scaffold(\n          appBar: AppBar(\n            title: Text(\"Main\"),\n          ),\n          body: Center(\n            child: TextButton(\n              color: Colors.blue,\n              onPressed: () {\n                Get.toNamed('/second', id:1); // navigate by your nested route by index\n              },\n              child: Text(\"Go to second\"),\n            ),\n          ),\n        ),\n      );\n    } else if (settings.name == '/second') {\n      return GetPageRoute(\n        page: () => Center(\n          child: Scaffold(\n            appBar: AppBar(\n              title: Text(\"Main\"),\n            ),\n            body: Center(\n              child:  Text(\"second\")\n            ),\n          ),\n        ),\n      );\n    }\n  }\n),\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Navigation with GetX in Flutter\nDESCRIPTION: This code snippet shows how to implement nested navigation using GetX in Flutter. It creates a Navigator with a nested key, defines routes, and demonstrates navigation between screens using Get.toNamed with an id parameter.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/kr_KO/route_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nNavigator(\n  key: Get.nestedKey(1), // index로 key를 생성\n  initialRoute: '/',\n  onGenerateRoute: (settings) {\n    if (settings.name == '/') {\n      return GetPageRoute(\n        page: () => Scaffold(\n          appBar: AppBar(\n            title: Text(\"Main\"),\n          ),\n          body: Center(\n            child: TextButton(\n              color: Colors.blue,\n              onPressed: () {\n                Get.toNamed('/second', id:1); // index로 중첩된 경로를 탐색\n              },\n              child: Text(\"Go to second\"),\n            ),\n          ),\n        ),\n      );\n    } else if (settings.name == '/second') {\n      return GetPageRoute(\n        page: () => Center(\n          child: Scaffold(\n            appBar: AppBar(\n              title: Text(\"Main\"),\n            ),\n            body: Center(\n              child:  Text(\"second\")\n            ),\n          ),\n        ),\n      );\n    }\n  }\n),\n```\n\n----------------------------------------\n\nTITLE: Using Singular and Plural Translations with GetX\nDESCRIPTION: This snippet shows how to use the `trPlural` extension method to display different translations based on a count (e.g., for singular and plural forms).  `singularKey` and `pluralKey` must be defined in the translation files.  `products.length` determines which translation is used.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nvar products = [];\nText('singularKey'.trPlural('pluralKey', products.length, Args));\n```\n\n----------------------------------------\n\nTITLE: Changing Theme with GetX - Dart\nDESCRIPTION: This snippet illustrates how to change the application's theme using GetX. The theme can be changed by calling `Get.changeTheme(ThemeData.light())`, allowing for a light theme to be applied quickly.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nGet.changeTheme(ThemeData.light());\n```\n\n----------------------------------------\n\nTITLE: Implementing GetX State Management with Reactive Values\nDESCRIPTION: Controller class showcasing reactive state management with GetX including counters, intervals, and list operations. Contains methods for incrementing values, handling intervals, and disposing workers.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\ninterval(count1, (_) => print(\"interval $_ (interval)\"),\n    time: Duration(seconds: 1));\n}\n\nint get sum => count1.value + count2.value;\n\nincrement() => count1.value++;\n\nincrement2() => count2.value++;\n\ndisposeWorker() {\n  _ever.dispose();\n  // or _ever();\n}\n\nincrementList() => list.add(75);\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection with GetX\nDESCRIPTION: This snippet shows how to inject a dependency (e.g., a controller) using GetX's `Get.put()` method. This makes the controller available throughout the application without needing to pass it down through the widget tree. The `Controller` class should be defined elsewhere in the code.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n\"Controller controller = Get.put(Controller()); // Rather Controller controller = Controller();\"\n```\n\n----------------------------------------\n\nTITLE: Initializing GetX App\nDESCRIPTION: Shows how to initialize a Flutter app with GetX by using GetMaterialApp.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ja-JP.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(GetMaterialApp(home: Home()));\n```\n\n----------------------------------------\n\nTITLE: Using Named Routes with Bindings in Dart\nDESCRIPTION: This snippet shows how to associate routes with Binding classes using named routes in GetX.  Each `GetPage` is configured with a `name`, `page`, and `binding`. This configuration allows GetX to automatically inject and manage dependencies when navigating to these routes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/dependency_management.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n\"getPages: [\\n  GetPage(\\n    name: '/',\\n    page: () => HomeView(),\\n    binding: HomeBinding(),\\n  ),\\n  GetPage(\\n    name: '/details',\\n    page: () => DetailsView(),\\n    binding: DetailsBinding(),\\n  ),\\n];\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive Variables in Dart using GetX\nDESCRIPTION: This snippet demonstrates three ways to declare reactive variables in GetX: using Rx{Type}, using Rx<Type>, and using .obs extension.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/tr_TR/state_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = RxString('');\nfinal isLogged = RxBool(false);\nfinal count = RxInt(0);\nfinal balance = RxDouble(0.0);\nfinal items = RxList<String>([]);\nfinal myMap = RxMap<String, int>({});\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = Rx<String>('');\nfinal isLogged = Rx<Bool>(false);\nfinal count = Rx<Int>(0);\nfinal balance = Rx<Double>(0.0);\nfinal number = Rx<Num>(0);\nfinal items = Rx<List<String>>([]);\nfinal myMap = Rx<Map<String, int>>({});\n\n// Custom classes - can be any class\nfinal user = Rx<User>();\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = ''.obs;\nfinal isLogged = false.obs;\nfinal count = 0.obs;\nfinal balance = 0.0.obs;\nfinal number = 0.obs;\nfinal items = <String>[].obs;\nfinal myMap = <String, int>{}.obs;\n\n// Custom classes - can be any class\nfinal user = User().obs;\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Device Locale with GetX\nDESCRIPTION: This snippet demonstrates how to retrieve the device's current locale using `Get.deviceLocale` and set it as the application's locale. This allows the app to automatically adapt to the user's language preferences. The application will use the device's locale for translations.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nreturn GetMaterialApp(\n    locale: Get.deviceLocale,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a static getter to access GetX controller\nDESCRIPTION: Pattern for creating a static getter in a controller class to easily access the controller instance from anywhere in the app using Get.find().\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/state_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetController {\n  static Controller get to => Get.find(); // criando um getter estático\n  [...]\n}\n// Na sua view/tela\nGetBuilder<Controller>(\n  init: Controller(), // use somente uma vez por controller, não se esqueça\n  builder: (_) => Text(\n    '${Controller.to.counter}', //aqui\n  )\n),\n```\n\n----------------------------------------\n\nTITLE: GetX Dependency Injection: Get.put() parameters\nDESCRIPTION: This snippet illustrates all configurable parameters within Get.put(). These parameters enable fine-grained control over dependency injection, covering aspects like tagging for multiple instances, making instances permanent, overriding abstract classes during testing, and using a builder function for dependency creation.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/dependency_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.put<S>(\\n  // mandatory: the class that you want to get to save, like a controller or anything\\n  // note: \\\"S\\\" means that it can be a class of any type\\n  S dependency\\n\\n  // optional: this is for when you want multiple classess that are of the same type\\n  // since you normally get a class by using Get.find<Controller>(),\\n  // you need to use tag to tell which instance you need\\n  // must be unique string\\n  String tag,\\n\\n  // optional: by default, get will dispose instances after they are not used anymore (example,\\n  // the controller of a view that is closed), but you might need that the instance\\n  // to be kept there throughout the entire app, like an instance of sharedPreferences or something\\n  // so you use this\\n  // defaults to false\\n  bool permanent = false,\\n\\n  // optional: allows you after using an abstract class in a test, replace it with another one and follow the test.\\n  // defaults to false\\n  bool overrideAbstract = false,\\n\\n  // optional: allows you to create the dependency using function instead of the dependency itself.\\n  // this one is not commonly used\\n  InstanceBuilderCallback<S> builder,\\n)\"\n```\n\n----------------------------------------\n\nTITLE: Using BindingsBuilder for Inline Dependency Configuration\nDESCRIPTION: Demonstrates how to use BindingsBuilder for inline dependency injection without creating separate Binding classes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/dependency_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\ngetPages: [\n  GetPage(\n    name: '/',\n    page: () => HomeView(),\n    binding: BindingsBuilder(() {\n      Get.lazyPut<ControllerX>(() => ControllerX());\n      Get.put<Service>(()=> Api());\n    }),\n  ),\n  GetPage(\n    name: '/detalhes',\n    page: () => DetalhesView(),\n    binding: BindingsBuilder(() {\n      Get.lazyPut<DetalhesController>(() => DetalhesController());\n    }),\n  ),\n];\n```\n\n----------------------------------------\n\nTITLE: Named Routes Before GetX 2.0\nDESCRIPTION: This snippet illustrates how named routes were defined before GetX version 2.0. It uses the `namedRoutes` property in `GetMaterialApp` with `GetRoute` to associate routes with pages. This approach has limitations in flexibility, especially when determining the page based on parameters or login tokens.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-vi.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  namedRoutes: {\n    '/': GetRoute(page: Home()),\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Arguments and Routing Information with GetX in Dart\nDESCRIPTION: This snippet shows how to access arguments passed to the current screen, retrieve the name of the previous route, access the raw route object, access the routing API from GetObserver, and check for open snackbar, dialog, and bottomsheet using GetX in Dart.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n// currentScreen'deki arg'ı verir\nGet.arguments\n\n// Önceki route'un name'ini verir.\nGet.previousRoute\n\n// Erişmek için raw route'u verir. Örnek olarak: rawRoute.isFirst()\nGet.rawRoute\n\n// GetObserver'dan Routing API'ye erişim verir.\nGet.routing\n\n// Snackbar açık mı kontrolü yaplır.\nGet.isSnackbarOpen\n\n// Dialog açık mı kontrolü yaplır.\nGet.isDialogOpen\n\n// Bottomsheet açık mı kontrolü yaplır.\nGet.isBottomSheetOpen\n\n// Tek route kaldırılır.\nGet.removeRoute()\n\n// predicate, true döndürene kadar terarlanarak geri gelir.\nGet.until()\n\n// Yeni route a gider ve eski tüm route'ları, predicate, true döndürene kadar kaldırır.\nGet.offUntil()\n\n// named route'a gider ve eski tüm route'ları, predicate, true döndürene kadar kaldırır.\nGet.offNamedUntil()\n```\n\n----------------------------------------\n\nTITLE: Updating the Locale Programmatically with GetX\nDESCRIPTION: This snippet shows how to update the application's locale programmatically using `Get.updateLocale()`.  This will trigger a re-translation of all text using the new locale.  The `locale` variable should be a `Locale` object representing the desired language and region.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nvar locale = Locale('en', 'US');\nGet.updateLocale(locale);\n```\n\n----------------------------------------\n\nTITLE: Closing Current Screen with GetX in Dart\nDESCRIPTION: Demonstrates how to close the current screen using GetX's back() method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nGet.back();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Binding Class in Dart\nDESCRIPTION: This code snippet demonstrates how to implement a Binding class in Dart using GetX. It overrides the `dependencies` method to declare dependencies using `Get.lazyPut` and `Get.put`.  This allows GetX to manage the lifecycle of controllers and services associated with a specific route.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/dependency_management.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n\"class HomeBinding implements Bindings {\\n  @override\\n  void dependencies() {\\n    Get.lazyPut<HomeController>(() => HomeController());\\n    Get.put<Service>(()=> Api());\\n  }\\n}\\n\\nclass DetailsBinding implements Bindings {\\n  @override\\n  void dependencies() {\\n    Get.lazyPut<DetailsController>(() => DetailsController());\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Localization in GetMaterialApp\nDESCRIPTION: Shows how to configure the GetMaterialApp with translations, locale, and fallback locale for internationalization support.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ur-PK.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nreturn GetMaterialApp(\n    translations: Messages(), // your translations\n    locale: Locale('en', 'US'), // translations will be displayed in that locale\n    fallbackLocale: Locale('en', 'UK'), // specify the fallback locale in case an invalid locale is selected.\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Bottom Sheet using GetX in Flutter\nDESCRIPTION: This snippet demonstrates how to display a bottom sheet using GetX, which simplifies the process by eliminating the need for context.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/tr_TR/route_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nGet.bottomSheet(\n  Container(\n    child: Wrap(\n      children: <Widget>[\n        ListTile(\n          leading: Icon(Icons.music_note),\n          title: Text('Music'),\n          onTap: () {}\n        ),\n        ListTile(\n          leading: Icon(Icons.videocam),\n          title: Text('Video'),\n          onTap: () {},\n        ),\n      ],\n    ),\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Using Bindings with Normal Routes in Dart GetX\nDESCRIPTION: This example illustrates how to use a Binding with a normal route navigation using Get.to(). It shows how to associate dependencies with a specific route transition.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/dependency_management.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nGet.to(Home(), binding: HomeBinding());\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware with GetObserver in Dart\nDESCRIPTION: This snippet shows how to integrate middleware with GetObserver in your GetX application, allowing you to execute specific logic before and after route transitions.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  navigatorKey: Get.key,\n  navigatorObservers: [\n    GetObserver(MiddleWare.observer) // Here\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Navigation with Clear History using GetX\nDESCRIPTION: Shows how to navigate to a new screen while removing all previous routes from the stack, useful for shopping carts or test flows.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ur-PK.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nGet.offAll(NextScreen());\n```\n\n----------------------------------------\n\nTITLE: External Controller Instance Usage\nDESCRIPTION: Demonstrates how to use externally created controller instance with GetBuilder.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\nController controller = Controller();\n[...]\nGetBuilder<Controller>(\n  init: controller, //here\n  builder: (_) => Text(\n    '${controller.counter}', // here\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Settings for GetX in Flutter\nDESCRIPTION: Setting up global configuration options for GetX, either directly in GetMaterialApp or via Get.config. These settings control transitions, gestures, logging, and default behaviors.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  enableLog: true,\n  defaultTransition: Transition.fade,\n  opaqueRoute: Get.isOpaqueRouteDefault,\n  popGesture: Get.isPopGestureEnable,\n  transitionDuration: Get.defaultDurationTransition,\n  defaultGlobalState: Get.defaultGlobalState,\n);\n\nGet.config(\n  enableLog = true,\n  defaultPopGesture = true,\n  defaultTransition = Transitions.cupertino\n)\n```\n\n----------------------------------------\n\nTITLE: Encontrando un controlador instanciado con GetX en Dart\nDESCRIPTION: Demuestra cómo recuperar un controlador previamente instanciado en cualquier parte de la aplicación usando Get.find().\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/dependency_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nController controller = Get.find();\n```\n\n----------------------------------------\n\nTITLE: Accessing URL parameters\nDESCRIPTION: This snippet shows how to access parameters passed in the URL using `Get.parameters`. It provides a way to extract data from the URL string.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nprint(Get.parameters['id']); // valor: 354\nprint(Get.parameters['name']); // valor: Enzo\n```\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up After Page Dispose - Dart\nDESCRIPTION: This function runs right after all related objects (Controllers, views, etc.) are disposed from the page, allowing for any cleanup routines necessary.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n### OnPageDispose\n\n// Implementation for cleanup after page disposal can be added here.\n```\n\n----------------------------------------\n\nTITLE: Reading System Locale using GetX - Dart\nDESCRIPTION: This snippet demonstrates how to set the locale of a GetMaterialApp to the device's current locale using `Get.deviceLocale`.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nreturn GetMaterialApp(\n    locale: Get.deviceLocale,\n);\n```\n\n----------------------------------------\n\nTITLE: Access SharedPreferences using Get.find() in Dart\nDESCRIPTION: This snippet demonstrates using Get.find() to retrieve a SharedPreferences instance and access stored data. It shows how to use `Get.find` to retrieve values, similar to retrieving the controllers.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/dependency_management.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n\"int count = Get.find<SharedPreferences>().getInt('counter');\\nprint(count); // keluaran: 12345\"\n```\n\n----------------------------------------\n\nTITLE: Création d'un contrôleur GetX en Dart\nDESCRIPTION: Ce snippet définit une classe Controller qui étend GetxController. Il contient une variable observable count et une méthode pour l'incrémenter.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController{\n  var count = 0.obs;\n  increment() => count++;\n}\n```\n\n----------------------------------------\n\nTITLE: Instanciación asíncrona con GetX en Dart\nDESCRIPTION: Demuestra cómo usar Get.putAsync() para registrar una instancia asíncrona, en este caso SharedPreferences.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/dependency_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nGet.putAsync<SharedPreferences>(() async {\n    final prefs = await SharedPreferences.getInstance();\n    await prefs.setInt('counter', 12345);\n    return prefs;\n});\n```\n\n----------------------------------------\n\nTITLE: Membuat Variabel Observable dengan GetX di Flutter\nDESCRIPTION: Contoh membuat variabel observable sederhana menggunakan GetX.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.id-ID.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar name = 'Jonatas Borges'.obs;\n```\n\n----------------------------------------\n\nTITLE: Using Direct Navigation with Bindings in GetX\nDESCRIPTION: Shows how to use Bindings with direct navigation methods in GetX.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/dependency_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nGet.to(Home(), binding: HomeBinding());\nGet.to(DetalhesView(), binding: DetalhesBinding())\n```\n\n----------------------------------------\n\nTITLE: Using GetX routingCallback\nDESCRIPTION: Demonstrates how to use `routingCallback` within `GetMaterialApp` to listen for route changes and trigger actions based on the current route. The example checks if the current route is '/segunda' and calls `openAds()` when it is.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  routingCallback: (route){\n    if(routing.current == '/segunda'){\n      openAds();\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Reactive Object with Update Method in Dart\nDESCRIPTION: Demonstrates the new update method for reactive objects, allowing easier modification of nested properties\nSOURCE: https://github.com/jonataslaw/getx/blob/master/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass User{\n  User(this.name = '', this.age = 0);\n  String name;\n  int age;\n}\n\nfinal user = User().obs;\n\nObx(()=> Text(\"Name ${user.value.name}: Age: ${user.value.age}\"))\n\n// To update:\nuser.update((user){\n  user.name = 'Jonny';\n  user.age = 18;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up GetMaterialApp in Flutter\nDESCRIPTION: Initializes the Flutter application with GetMaterialApp instead of MaterialApp to enable GetX functionality including route management and dependency injection.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ur-PK.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(GetMaterialApp(home: Home()));\n```\n\n----------------------------------------\n\nTITLE: Reading System Locale with GetX\nDESCRIPTION: This snippet demonstrates how to read the device's system locale using GetX. This allows the application to adjust its language settings automatically based on the user's device settings.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nreturn GetMaterialApp(\n    locale: Get.deviceLocale,\n);\n```\n\n----------------------------------------\n\nTITLE: Eliminando una instancia con GetX en Dart\nDESCRIPTION: Ejemplo de cómo eliminar una instancia previamente registrada usando Get.delete().\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/dependency_management.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nGet.delete<Controller>();\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Route Parameters in Target Screen with GetX\nDESCRIPTION: Demonstrates how to access multiple route parameters in the target screen using Get.parameters.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\nprint(Get.parameters['user']);\nprint(Get.parameters['flag']);\nprint(Get.parameters['country']);\n// out: 34954 true italy\n```\n\n----------------------------------------\n\nTITLE: Handling Page Call Events - Dart\nDESCRIPTION: This function executes when a page is called, allowing for modifications or providing different page content before rendering.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nGetPage onPageCalled(GetPage page) {\n  final authService = Get.find<AuthService>();\n  return page.copyWith(title: 'Welcome ${authService.UserName}');\n}\n```\n\n----------------------------------------\n\nTITLE: Extending GetConnect for API Communication in Dart\nDESCRIPTION: The code provides examples on how to extend the GetConnect class to handle HTTP requests and websocket communications easily in Dart applications using GetX. It showcases setting up GET, POST requests, including file uploads, and opening a websocket connection. Depends on GetConnect and internal Dart libraries.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-ar.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass UserProvider extends GetConnect {\n  // Get request\n  Future<Response> getUser(int id) => get('http://youapi/users/$id');\n  // Post request\n  Future<Response> postUser(Map data) => post('http://youapi/users', body: data);\n  // Post request with File\n  Future<Response<CasesModel>> postCases(List<int> image) {\n    final form = FormData({\n      'file': MultipartFile(image, filename: 'avatar.png'),\n      'otherFile': MultipartFile(image, filename: 'cover.png'),\n    });\n    return post('http://youapi/users/upload', form);\n  }\n\n  GetSocket userMessages() {\n    return socket('https://yourapi/users/socket');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SmartManagement in GetMaterialApp\nDESCRIPTION: Shows how to configure the SmartManagement behavior in GetMaterialApp to control how GetX manages dependency disposal, setting it to onlyBuilders mode in this example.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/dependency_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid main () {\n  runApp(\n    GetMaterialApp(\n      smartManagement: SmartManagement.onlyBuilders //Ici\n      home: Home(),\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Counter App with GetX\nDESCRIPTION: This section outlines creating a Flutter counter app using GetX with improved code organization through the use of bindings and controllers, promoting maintainability and reusability.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(GetMaterialApp(\n    initialRoute: '/home',\n    getPages: [\n      GetPage(name: '/home', page: () => HomeView(), binding: HomeBinding()),\n    ],\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Controller with static getter\nDESCRIPTION: This snippet illustrates how to create a static getter within the controller to simplify access to the controller instance using `Controller.to`. This is an alternative to `Get.find<Controller>()`.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/fr_FR/state_management.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n\n  /// Vous n'en avez pas besoin. Je recommande de l'utiliser uniquement pour faciliter la syntaxe.\n  /// avec la méthode statique: Controller.to.counter();\n  /// sans méthode statique: Get.find<Controller>() .counter();\n  /// Il n'y a aucune différence de performances, ni aucun effet secondaire de l'utilisation de l'une ou l'autre syntaxe. Un seul n'a pas besoin du type, et l'autre l'EDI le complétera automatiquement.\n   static Controller get to => Get.find(); // Ajouter cette ligne\n\n  int counter = 0;\n  void increment() {\n    counter++;\n    update();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Sent Data in Named Routes with GetX in Dart\nDESCRIPTION: Demonstrates how to access data sent to a named route using Get.arguments in the target screen or controller.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nprint(Get.arguments);\n//print out: Get is the best\n```\n\n----------------------------------------\n\nTITLE: GetX Dependency Lookup: Get.find()\nDESCRIPTION: This snippet demonstrates how to retrieve dependencies injected via Get.put() using Get.find(). Get.find() allows access to the controller instances throughout the application without the need for additional dependencies like Provider or Get_it.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/dependency_management.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n\"final controller = Get.find<Controller>();\\n// OR\\nController controller = Get.find();\\n\\n// Yes, it looks like Magic, Get will find your controller, and will deliver it to you.\\n// You can have 1 million controllers instantiated, Get will always give you the right controller.\"\n```\n\n----------------------------------------\n\nTITLE: Using Returned Data in Previous Screen with GetX in Dart\nDESCRIPTION: Shows how to use the data returned from a screen in the previous screen.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nif(data == 'success') madeAnything();\n```\n\n----------------------------------------\n\nTITLE: Named Route Navigation with GetX\nDESCRIPTION: Demonstrates how to navigate to a named route using GetX navigation system without requiring BuildContext.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ur-PK.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nGet.toNamed('/details');\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Binding Class in Dart\nDESCRIPTION: Demonstrates how to create a Binding class that implements the Bindings interface for dependency injection in GetX\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/vi_VI/dependency_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeBinding implements Bindings {\n  @override\n  void dependencies() {\n    Get.lazyPut<HomeController>(() => HomeController());\n    Get.put<Service>(() => Api());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Workers 사용 예시 (Dart)\nDESCRIPTION: GetX의 Workers를 사용하여 특정 이벤트에 반응하는 방법을 보여줍니다. ever, once, debounce, interval 등의 Worker를 사용할 수 있습니다.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/kr_KO/state_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n/// 'count1'이 변경될 때마다 호출\never(count1, (_) => print(\"$_ has been changed\"));\n\n/// 'count1'이 처음으로 변경될 때 호출\nonce(count1, (_) => print(\"$_ was changed once\"));\n\n/// Anti DDos - 'count1'이 변경되고 1초간 변화가 없을 때 호출\ndebounce(count1, (_) => print(\"debouce$_\"), time: Duration(seconds: 1));\n\n/// 'count1'이 변경되고 있는 동안 1초 간격으로 호출\ninterval(count1, (_) => print(\"interval $_\"), time: Duration(seconds: 1));\n```\n\n----------------------------------------\n\nTITLE: Custom Size Transition Animation in Flutter\nDESCRIPTION: Custom transition class that extends CustomTransition to implement a size-based animation effect. Uses SizeTransition with curved animation for smooth scaling effects.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nclass SizeTransitions extends CustomTransition {\n  @override\n  Widget buildTransition(\n      BuildContext context,\n      Curve? curve,\n      Alignment? alignment,\n      Animation<double> animation,\n      Animation<double> secondaryAnimation,\n      Widget child) {\n    return Align(\n      alignment: Alignment.center,\n      child: SizeTransition(\n        sizeFactor: CurvedAnimation(\n          parent: animation,\n          curve: curve!,\n        ),\n        child: child,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing multiple parameters passed through a route\nDESCRIPTION: This snippet shows how to access multiple parameters passed through a route, including a named segment and a query parameter, using `Get.parameters`.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nprint(Get.parameters['user']);\nprint(Get.parameters['flag']);\n// valor: 34954 true\n```\n```\n\n----------------------------------------\n\nTITLE: Named Routes After GetX 2.0\nDESCRIPTION: This snippet shows the new way of defining named routes in GetX version 2.0 using the `getPages` property in `GetMaterialApp` with `GetPage`. The `page` parameter now accepts a function that returns the widget, enabling conditional page rendering based on runtime data. This approach is more flexible and reduces RAM consumption.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-vi.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page: () => Home()),\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing GetX Additional APIs in Dart\nDESCRIPTION: Various GetX utility methods for accessing route arguments, checking UI states, detecting platforms, and accessing dimensions. These APIs provide shortcuts for common operations without requiring context.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\n// donne les arguments actuels de currentScreen\nGet.arguments\n\n// donne le nom de l'itinéraire précédent\nGet.previousRoute\n\n// donne la route brute d'accès par exemple, rawRoute.isFirst()\nGet.rawRoute\n\n// donne accès à l'API de routing de GetObserver\nGet.routing\n\n// vérifier si le snackbar est ouvert\nGet.isSnackbarOpen\n\n// vérifier si la boîte de dialogue est ouverte\nGet.isDialogOpen\n\n// vérifie si la bottomSheet est ouverte\nGet.isBottomSheetOpen\n\n// supprime une route.\nGet.removeRoute()\n\n// retourne à plusieurs reprises jusqu'à ce que le prédicat retourne 'true'.\nGet.until()\n\n// passe à la route suivante et supprime toutes les routes précédentes jusqu'à ce que le prédicat retourne 'true'.\nGet.offUntil()\n\n// passe à la route nommée suivante et supprime toutes les routes précédentes jusqu'à ce que le prédicat retourne 'true'.\nGet.offNamedUntil()\n\n// Vérifie sur quelle plate-forme l'application s'exécute\nGetPlatform.isAndroid\nGetPlatform.isIOS\nGetPlatform.isMacOS\nGetPlatform.isWindows\nGetPlatform.isLinux\nGetPlatform.isFuchsia\n\n// Vérifie le type d'appareil\nGetPlatform.isMobile\nGetPlatform.isDesktop\n// Toutes les plates-formes sont prises en charge indépendamment, dans le Web!\n// Vous pouvez dire si vous utilisez un navigateur\n// sur Windows, iOS, OSX, Android, etc.\nGetPlatform.isWeb\n\n\n// Équivaut à: MediaQuery.of(context).size.height,\n// mais immuable.\nGet.height\nGet.width\n\n// Donne le 'context' actuel de 'Navigator'.\nGet.context\n\n// Donne le contexte du snackbar / dialogue / bottomsheet au premier plan, n'importe où dans votre code.\nGet.contextOverlay\n```\n\n----------------------------------------\n\nTITLE: Removing Instances with Get.delete() in Dart\nDESCRIPTION: Demonstrates how to remove an instance from GetX's dependency management system using Get.delete(). This is usually not necessary as GetX automatically manages the lifecycle of dependencies.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/dependency_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nGet.delete<Controller>(); //usually you don't need to do this because GetX already delete unused controllers\n```\n\n----------------------------------------\n\nTITLE: Testing GetxController Lifecycle and State in Dart\nDESCRIPTION: This snippet shows how to test a GetxController class, including its lifecycle methods (onInit and onClose) and reactive state management with .obs variables.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_39\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n  @override\n  void onInit() {\n    super.onInit();\n    //name2로 값 변경\n    name.value = 'name2';\n  }\n\n  @override\n  void onClose() {\n    name.value = '';\n    super.onClose();\n  }\n\n  final name = 'name1'.obs;\n\n  void changeName() => name.value = 'name3';\n}\n\nvoid main() {\n  test('''\nTest the state of the reactive variable \"name\" across all of its lifecycles''',\n      () {\n    /// 당신은 생성주기를 제외하고 컨트롤러를 테스트할 수 있습니다,\n    /// 그러나 당신이 사용하지 않는다면 추천되지 않습니다\n    ///  GetX 종속성 주입 \n    final controller = Controller();\n    expect(controller.name.value, 'name1');\n\n    /// 당신이 그것을 사용한다면, 당신은 모든 것을 테스트할 수 있습니다,\n    /// 각각의 생성주기 이후 어플리케이션의 상태를 포함하여.\n    Get.put(controller); // onInit was called\n    expect(controller.name.value, 'name2');\n\n    /// 당신의 함수를 테스트하세요\n    controller.changeName();\n    expect(controller.name.value, 'name3');\n\n    /// onClose 호출됨\n    Get.delete<Controller>();\n\n    expect(controller.name.value, '');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Home Binding Implementation in GetX\nDESCRIPTION: This snippet demonstrates the HomeBinding class implementing the Bindings interface to define its dependencies, specifically initializing the HomeController.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeBinding implements Bindings {\n  @override\n  void dependencies() {\n    Get.lazyPut(() => HomeController());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SnackBar with Flutter\nDESCRIPTION: Demonstrates how to create a basic SnackBar in Flutter using a Scaffold context. Requires a Scaffold instance to display the SnackBar.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/route_management.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal snackBar = SnackBar(\n  content: Text('Hi!'),\n  action: SnackBarAction(\n    label: 'I am a old and ugly snackbar :(',\n    onPressed: (){}\n  ),\n);\n// Find the Scaffold in the widget tree and use\n// it to show a SnackBar.\nScaffold.of(context).showSnackBar(snackBar);\n```\n\n----------------------------------------\n\nTITLE: Accessing Controller Data with GetX\nDESCRIPTION: This snippet demonstrates how to access data from a controller retrieved using Get.find(). Because the return value is a standard class instance, you have direct access to it's properties and methods.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/dependency_management.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n\"Text(controller.textFromApi);\"\n```\n\n----------------------------------------\n\nTITLE: Using Normal Routes with Bindings in Dart\nDESCRIPTION: This snippet demonstrates how to use normal routes (without named routes) with Binding classes in GetX. `Get.to` is used to navigate to the routes, and the `binding` parameter specifies the Binding class to be used for dependency injection and management.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/dependency_management.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.to(Home(), binding: HomeBinding());\\nGet.to(DetailsView(), binding: DetailsBinding())\"\n```\n\n----------------------------------------\n\nTITLE: Custom Log Writer for Get\nDESCRIPTION: This snippet provides a method to redirect logs from Get to a preferred logging package, ensuring logs are captured even when logging is disabled.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pl.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  enableLog: true,\n  logWriterCallback: localLogWriter,\n);\n\n\tvoid localLogWriter(String text, {bool isError = false}) {\n\t  // tutaj przekaż wiadomosci do ulubionej paczki\n\t  // pamiętaj że nawet jeśli \"enableLog: false\" logi i tak będą wysłane w tym callbacku\n\t  // Musisz sprawdzić konfiguracje flag  jeśli chcesz przez GetConfig.isLogEnable\n\t}\n```\n\n----------------------------------------\n\nTITLE: Importing GetX in Dart File\nDESCRIPTION: Demonstrates how to import the GetX package in a Dart file to use its features.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:get/get.dart';\n```\n\n----------------------------------------\n\nTITLE: Delete instance from GetX with Get.delete() in Dart\nDESCRIPTION: This snippet illustrates how to remove an instance from GetX using Get.delete(). Usually, GetX handles this automatically, so manual deletion is typically unnecessary.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/dependency_management.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.delete<Controller>(); // biasanya anda tidak perlu melakukan ini karena GetX sudah melakukannya untuk anda\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to a screen and removing all previous routes (named route)\nDESCRIPTION: This snippet shows how to navigate to a new screen using GetX's named routes and the `Get.offAllNamed()` method. It removes all previous routes from the stack and navigates to the specified route.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.offAllNamed(\"/ProximaTela\");\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Observables in Dart with GetX\nDESCRIPTION: Demonstrates how to create and manipulate observable variables using GetX, including examples for strings, numbers, booleans, and custom objects.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.zh-cn.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar message = 'Hello world'.obs;\nprint( 'Message \"$message\" has Type ${message.runtimeType}');\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = 'GetX'.obs;\nname.value = 'Hey';\nname('Hello');\nname() ;\n\nfinal count = 0.obs;\ncount + 1;\ncount += 1;\ncount > 2;\n\nfinal flag = false.obs;\nflag.toggle();\n\nflag.nil();\n\nprint( count );\n\nfinal abc = [0,1,2].obs;\nprint('json: ${jsonEncode(abc)}, type: ${abc.runtimeType}');\nabc.add(12);\nabc[3];\n\nfinal number = 12.obs;\nprint( number == 12 );\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass User {\n    String name, last;\n    int age;\n    User({this.name, this.last, this.age});\n\n    @override\n    String toString() => '$name $last, $age years old';\n}\n\nfinal user = User(name: 'John', last: 'Doe', age: 33).obs;\n\nuser.value.name = 'Roi';\nuser.refresh();\n\nuser.update((value){\n  value.name='Roi';\n});\n\nprint( user );\n```\n\n----------------------------------------\n\nTITLE: Checking Platform and Device Type with GetPlatform in Dart\nDESCRIPTION: This snippet demonstrates how to check the current platform (Android, iOS, macOS, Windows, Linux, Fuchsia) and device type (mobile, desktop, web) using the `GetPlatform` class in Dart.  It provides boolean properties for each platform and device type.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n//Hangi platformda çalıştığı kontrol edilir.\nGetPlatform.isAndroid\nGetPlatform.isIOS\nGetPlatform.isMacOS\nGetPlatform.isWindows\nGetPlatform.isLinux\nGetPlatform.isFuchsia\n\n//Cihaz türü kontrol edilir.\nGetPlatform.isMobile\nGetPlatform.isDesktop\n//Web'de tüm platformlar bağımsız olarak desteklenir!\n//Bir tarayıcının içinde çalışıp çalışmadığınızı anlayabilirsiniz\n//Windows, iOS, OSX, Android, vs. gibi\nGetPlatform.isWeb\n```\n\n----------------------------------------\n\nTITLE: GetX State Management Pattern\nDESCRIPTION: Example showing the recommended order of widget usage for optimal RAM consumption in GetX state management.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nObx => GetX => GetBuilder => MixinBuilder\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Routes with GetMaterialApp in Dart\nDESCRIPTION: Demonstrates how to handle navigation to undefined routes (404 error) using the unknownRoute property in GetMaterialApp.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(\n    GetMaterialApp(\n      unknownRoute: GetPage(name: '/notfound', page: () => UnknownRoutePage()),\n      initialRoute: '/',\n      getPages: [\n        GetPage(name: '/', page: () => MyHomePage()),\n        GetPage(name: '/second', page: () => Second()),\n      ],\n    )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Context Extensions for Responsive UI in Dart\nDESCRIPTION: These context extensions provide convenient methods for accessing and manipulating screen dimensions, padding, orientation, device pixel ratio, text scale factor, and device type information directly from the `BuildContext`. These extensions simplify responsive UI development by allowing you to easily adapt your UI based on screen size and device characteristics.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\n// Not: aşağıdaki metodlar context üzerine olan extension'lardır.\n// UI'ın herhangi bir yerinde context'e erişebilirsiniz ve istediğiniz yerde kullanabilirsiniz.\n\n// Eğer değişken bir height/width verileri varsa (örnek olarak Masaüstü ya da tarayıcı gibi ölçeği değişebilen pencereler) context'i kullanmaya ihtiyacınız vardır.\ncontext.width\ncontext.height\n\n// Size ekranın yarısını, üçte birini vb. tanımlamayı sağlar.\n// Responsive uygulamalar için kullanışlıdır.\n// param dividedBy (double) optional - default: 1\n// param reducedBy (double) optional - default: 0\ncontext.heightTransformer()\ncontext.widthTransformer()\n\n/// MediaQuery.of(context).size'a benzer\ncontext.mediaQuerySize()\n\n/// MediaQuery.of(context).padding'e benzer\ncontext.mediaQueryPadding()\n\n/// MediaQuery.of(context).viewPadding'e benzer\ncontext.mediaQueryViewPadding()\n\n/// MediaQuery.of(context).viewInsets;'e benzer\ncontext.mediaQueryViewInsets()\n\n/// MediaQuery.of(context).orientation;'a benzer\ncontext.orientation()\n\n/// Cihazın yatay modda olup olmadığını kontrol eder.\ncontext.isLandscape()\n\n/// Cihazın dikey modda olup olmadığını kontrol eder.\ncontext.isPortrait()\n\n/// MediaQuery.of(context).devicePixelRatio;'ya benzer\ncontext.devicePixelRatio()\n\n/// MediaQuery.of(context).textScaleFactor;'e benzer\ncontext.textScaleFactor()\n\n/// Ekranın en kısa kenarını getirir\ncontext.mediaQueryShortestSide()\n\n/// width 800'den büyük ise true döndürür.\ncontext.showNavbar()\n\n/// Kısa kenar 600p'den küçük ise true döndürür.\ncontext.isPhone()\n\n/// Kısa kenar 600p'den büyük ise true döndürür.\ncontext.isSmallTablet()\n\n/// Kısa kenar 720p'den büyük ise true döndürür.\ncontext.isLargeTablet()\n\n/// Cihaz tablet ise true döndürür.\ncontext.isTablet()\n\n/// Ekran boyutuna göre <T> değerini döndürür\n/// için değer verebilir:\n/// watch: Kısa kenar 300'den küçük ise\n/// mobile: Kısa kenar 600'den küçük ise\n/// tablet: Kısa kenar 1200'den küçük ise\n/// desktop: width 1200'den büyük ise\n\ncontext.responsiveValue<T>()\n```\n\n----------------------------------------\n\nTITLE: Konfigurasi Lokalisasi dengan GetX di Flutter\nDESCRIPTION: Contoh konfigurasi GetMaterialApp untuk mendukung lokalisasi dan terjemahan.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.id-ID.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nreturn GetMaterialApp(\n    translations: Messages(), // gunakan translasi yang anda buat\n    locale: Locale('id', 'ID'), // translasi akan ditampilkan di lokal ini\n    fallbackLocale: Locale('en', 'US'), // berikan lokal penumpu untuk berjaga-jaga jika lokal yang tidak valid dipilih\n);\n```\n\n----------------------------------------\n\nTITLE: GetX Dependency Injection: Get.putAsync() parameters\nDESCRIPTION: This code snippet shows the available parameters for Get.putAsync(), which include the asynchronous builder function, tag for identifying multiple instances, and the permanent flag for keeping the instance alive throughout the app's lifecycle.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/dependency_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.putAsync<S>(\\n\\n  // mandatory: an async method that will be executed to instantiate your class\\n  AsyncInstanceBuilderCallback<S> builder,\\n\\n  // optional: same as Get.put(), it is used for when you want multiple different instance of a same class\\n  // must be unique\\n  String tag,\\n\\n  // optional: same as in Get.put(), used when you need to maintain that instance alive in the entire app\\n  // defaults to false\\n  bool permanent = false\\n)\"\n```\n\n----------------------------------------\n\nTITLE: Mocking GetX Controllers for Testing\nDESCRIPTION: Shows how to mock a GetxController or GetxService for testing by mixing in the Mock class. Also provides tips for testing with Get.reset() and setting test mode.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-bn.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass NotificationServiceMock extends GetxService with Mock implements NotificationService {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Rx List Usage in GetX for Dart\nDESCRIPTION: This example shows how observable List(Rx) can be used directly without .value compared to primitive types which require it. The snippet demonstrates how a controller's reactive variables are consumed in view classes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ja_JP/state_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Controllerクラス\nfinal String title = 'User Info:'.obs\nfinal list = List<User>().obs;\n\n// ビュークラス\nText(controller.title.value), // Stringの場合は .value が必要\nListView.builder (\n  itemCount: controller.list.length // Listの場合は不要\n)\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Animations with GetX 5\nDESCRIPTION: Demonstrates how to combine multiple animations by concatenating animation methods. This example applies both fadeIn and bounce animations to a Container widget.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nContainer(\n              color: Colors.blue,\n              height: 100,\n              width: 100,\n      ).fadeIn().bounce(begin: -0.8, end: 0.3)\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic URL Links with GetX in Dart\nDESCRIPTION: Shows how to use dynamic URL-like links for navigation with query parameters using GetX's offAllNamed() method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nGet.offAllNamed(\"/NextScreen?device=phone&id=354&name=Enzo\");\n```\n\n----------------------------------------\n\nTITLE: Basic GetBuilder Implementation with Direct Controller Access\nDESCRIPTION: Shows how to use the controller instance directly in the GetBuilder's value parameter for simpler widget building.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/state_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  init: Controller(),\n  builder: (value) => Text(\n    '${value.counter}', //here\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Navigating to a route and receiving data back\nDESCRIPTION: This snippet shows how to navigate to a new screen using `Get.to()` and await a result when returning. This allows for passing data back from the navigated screen.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nvar dados = await Get.to(Pagamento());\n```\n```\n\n----------------------------------------\n\nTITLE: Setting up GetMaterialApp\nDESCRIPTION: Replace MaterialApp with GetMaterialApp to enable GetX features in your Flutter app.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-bn.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(GetMaterialApp(home: Home()));\n```\n\n----------------------------------------\n\nTITLE: Lazy loading de dependencias con GetX en Dart\nDESCRIPTION: Ejemplo de cómo usar Get.lazyPut() para declarar un controlador que será instanciado solo cuando sea necesario.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/dependency_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nGet.lazyPut<Service>(()=> ApiMock());\n```\n\n----------------------------------------\n\nTITLE: GetX Bottom Sheet with SafeArea\nDESCRIPTION: Implementation showing keyboard handling with MediaQuery viewInsets in GetX bottom sheets.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nMediaQuery.of(context).viewInsets.bottom\n```\n\n----------------------------------------\n\nTITLE: Creating a Bottom Sheet with GetX in Dart\nDESCRIPTION: This snippet demonstrates how to create a bottom sheet using Get.bottomSheet in Flutter. It shows a container with a wrap of list tiles, each containing an icon and text. The method doesn't require a context, simplifying the implementation.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ja_JP/route_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nGet.bottomSheet(\n  Container(\n    child: Wrap(\n      children: <Widget>[\n        ListTile(\n          leading: Icon(Icons.music_note),\n          title: Text('Music'),\n          onTap: () {}\n        ),\n        ListTile(\n          leading: Icon(Icons.videocam),\n          title: Text('Video'),\n          onTap: () {},\n        ),\n      ],\n    ),\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Sequential Animations with GetX 5\nDESCRIPTION: Shows how to create complex sequential animations using the isSequential parameter. This approach eliminates the need for multiple AnimationControllers, simplifying animation sequences in Flutter.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nconst FlutterLogo(size: 110)\n                        .bounce(begin: -0.8, end: 0.4)\n                        .fadeIn()\n                        .spin(isSequential: true)\n                        .wobble(isSequential: true, begin: 0, end: 8)\n                        .flip(isSequential: true)\n                        .fadeOut(isSequential: true)\n```\n\n----------------------------------------\n\nTITLE: Setting Linker and Compiler Flags for Profile Builds\nDESCRIPTION: This code defines the linker and compiler flags specifically for the Profile build configuration. It ensures that the profile build uses the same flags as the release build, which are optimized for performance profiling.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"set(CMAKE_EXE_LINKER_FLAGS_PROFILE \\\"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\\\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \\\"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\\\")\nset(CMAKE_C_FLAGS_PROFILE \\\"${CMAKE_C_FLAGS_RELEASE}\\\")\nset(CMAKE_CXX_FLAGS_PROFILE \\\"${CMAKE_CXX_FLAGS_RELEASE}\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Get.put() options explanation in Dart\nDESCRIPTION: This snippet explains all the available options when using Get.put() to inject dependencies. These include the dependency itself, tag, permanent, overrideAbstract, and builder.  These parameters allow fine-grained control over how dependencies are managed.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/dependency_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.put<S>(\\n  // wajib: kelas yang ingin anda simpan, seperti controller, atau apapun\\n  // catatan: \\\"S\\\" menandakan bahwa tipenya bisa jadi sebuah kelas dari tipe apapun.\\n  S dependency\\n\\n  // opsional: ini digunakan ketika anda ingin memasukkan banyak kelas yang memiliki tipe yang sama.\\n  // berhubung normalnya anda memanggil kelas menggunakan Get.find<Controller>(),\\n  // anda perlu menggunakan tag untuk menandai instance mana yang anda butuhkan\\n  // tag harus unik, dan bertipe String.\\n  String tag,\\n\\n  // opsional: secara default, get akan men-dispose instance setelah tidak digunakan lagi (contoh,\\n  // sebuah controller dari view yang ditutup), tapi mungkin anda membutuhkannya untuk digunakan\\n  // ditempat lain di aplikasi anda, contohnya seperti sebuah instance dari SharedPreference, atau yang lain.\\n  // Maka anda perlu ini\\n  // nilai defaultnya adalah false\\n  bool permanent = false,\\n\\n  // opsional: memungkinkan anda setelah menggunakan kelas abstrak didalam test, menggantinya dengan yang lain dan mengikuti testnya.\\n  // nilai defaultnya adalah false\\n  bool overrideAbstract = false,\\n\\n  // opsional: memungkinkan anda untuk memasukkan dependensi menggunakan fungsi daripada dependensi itu sendiri.\\n  // ini jarang dipakai.\\n  InstanceBuilderCallback<S> builder,\\n)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Navigation with GetX in Dart\nDESCRIPTION: This code snippet illustrates how to set up nested navigation using GetX in Flutter. It creates a Navigator widget with a nested key, defines initial and secondary routes, and demonstrates navigation between them. The approach uses Get.nestedKey and Get.toNamed with an ID to manage nested navigation stacks.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ja_JP/route_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nNavigator(\n  key: Get.nestedKey(1), // インデックス指定でkey作成\n  initialRoute: '/',\n  onGenerateRoute: (settings) {\n    if (settings.name == '/') {\n      return GetPageRoute(\n        page: () => Scaffold(\n          appBar: AppBar(\n            title: Text(\"Main\"),\n          ),\n          body: Center(\n            child: TextButton(\n              color: Colors.blue,\n              onPressed: () {\n                Get.toNamed('/second', id:1); // インデックス指定でネスト型Routeに遷移\n              },\n              child: Text(\"Go to second\"),\n            ),\n          ),\n        ),\n      );\n    } else if (settings.name == '/second') {\n      return GetPageRoute(\n        page: () => Center(\n          child: Scaffold(\n            appBar: AppBar(\n              title: Text(\"Main\"),\n            ),\n            body: Center(\n              child:  Text(\"second\")\n            ),\n          ),\n        ),\n      );\n    }\n  }\n),\n```\n\n----------------------------------------\n\nTITLE: Working with Observable Lists in GetX and Dart\nDESCRIPTION: This snippet demonstrates how to work with observable lists in GetX, showing that .value is not needed for lists and how to update custom class observables.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/tr_TR/state_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// On the controller\nfinal String title = 'User Info:'.obs\nfinal list = List<User>().obs;\n\n// on the view\nText(controller.title.value), // .value is required\nListView.builder (\n  itemCount: controller.list.length // .value is not needed for lists\n)\n```\n\nLANGUAGE: dart\nCODE:\n```\n// model file\nclass User() {\n  User({this.name = '', this.age = 0});\n  String name;\n  int age;\n}\n\n// Controller file\nfinal user = User().obs;\n// When you need to update the user variable:\nuser.update( (user) { // this parameter is the class itself that you want to update\nuser.name = 'Jonny';\nuser.age = 18;\n});\n// alternative way of updating the user variable:\nuser(User(name: 'João', age: 35));\n\n// on view:\nObx(()=> Text(\"Name ${user.value.name}: Age: ${user.value.age}\"))\n// you can also access the model values without .value:\nuser().name;\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Binding in GetMaterialApp\nDESCRIPTION: Example of configuring initial Binding in GetMaterialApp for application-wide dependency injection.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/dependency_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  initialBinding: SampleBind(),\n  home: Home(),\n)\n```\n\n----------------------------------------\n\nTITLE: GetX Controller Initialization with Permanent Flag\nDESCRIPTION: Example showing how to initialize a GetX controller with the permanent flag to prevent deletion by SmartManagement.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nGet.put(Controller(), permanent: true);\n```\n\n----------------------------------------\n\nTITLE: Get.lazyPut() options explanation in Dart\nDESCRIPTION: This snippet explains all available options when using Get.lazyPut(), including builder, tag and fenix. `fenix` allows re-creation of the instance if it has been disposed.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/dependency_management.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.lazyPut<S>(\\n  // wajib: sebuah method yang akan di eksekusi ketika kelas anda dipanggil untuk pertama kali\\n  InstanceBuilderCallback builder,\\n  \\n  // opsional: sama seperti Get.put(), ini digunakan ketika anda menginginkan banyak instance berbeda dengan kelas yang sama\\n  // harus unik dan harus String.\\n  String tag,\\n\\n  // opsional: Mirip seperti \\\"permanent\\\", bedanya adalah instance akan dihapus ketika tidak\\n  // digunakan, tetapi ketika diperlukan lagi, Get akan membuat ulang instance yang sama,\\n  // seperti \\\"SmartManagement.keepFactory\\\" pada bindings api.\\n  bool fenix = false\\n  \\n)\"\n```\n\n----------------------------------------\n\nTITLE: Using the data received from the previous route\nDESCRIPTION: This snippet demonstrates how to use the data returned from the previous route after navigating back.  The awaited result from `Get.to()` is used to check the returned data.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nif (dados == 'sucesso') fazerQualquerCoisa();\n```\n```\n\n----------------------------------------\n\nTITLE: Setting up GetMaterialApp for Navigation\nDESCRIPTION: Configures the Flutter application with GetMaterialApp to enable GetX navigation features without context.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ur-PK.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp( // Before: MaterialApp(\n  home: MyHome(),\n)\n```\n\n----------------------------------------\n\nTITLE: Navigation with Replacement using GetX\nDESCRIPTION: Demonstrates how to navigate to a new screen while preventing navigation back to the previous screen, useful for splash screens or login screens.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ur-PK.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nGet.off(NextScreen());\n```\n\n----------------------------------------\n\nTITLE: Installing GetX in pubspec.yaml\nDESCRIPTION: Add the GetX dependency to your pubspec.yaml file to install it in your Flutter project.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-bn.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  get:\n```\n\n----------------------------------------\n\nTITLE: Route Redirect Functionality - Dart\nDESCRIPTION: This snippet provides an example of how to implement a redirect functionality using RouteSettings in GetX, based on whether a user is authenticated.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nRouteSettings redirect(String route) {\n  final authService = Get.find<AuthService>();\n  return authService.authed.value ? null : RouteSettings(name: '/login')\n}\n```\n\n----------------------------------------\n\nTITLE: Using external controller instance with GetBuilder\nDESCRIPTION: Alternative approach using an externally created controller instance with GetBuilder. This is not recommended as it bypasses GetX's automatic memory management.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/state_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nController controller = Controller();\n[...]\nGetBuilder<Controller>(\n  init: controller, //aqui\n  builder: (_) => Text(\n    '${controller.counter}', // aqui\n  )\n),\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Application Build with CMake\nDESCRIPTION: This snippet sets up the basic build configuration for a Flutter application using CMake. It defines the required CMake version, specifies the project type, and includes essential source files while linking the necessary libraries. Additionally, it sets target definitions and dependencies to manage the build process effectively.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/runner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: SmartManagement Configuration in GetX for Dart\nDESCRIPTION: This code snippet illustrates how to configure SmartManagement within a GetMaterialApp. It shows the different modes available to control how unused controllers are disposed of, helping to optimize resource management within the application.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/dependency_management.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nvoid main () {\n  runApp(\n    GetMaterialApp(\n      smartManagement: SmartManagement.onlyBuilder //here\n      home: Home(),\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Reactive State Management with GetBuilder in Dart\nDESCRIPTION: Example of implementing non-reactive state management using GetBuilder. Shows how to create a controller class that extends GetxController and update UI with the update() method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ja_JP/state_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Controllerクラスを作成してGetxControllerを継承しましょう\nclass Controller extends GetxController {\n  int counter = 0;\n  void increment() {\n    counter++;\n    update();\n    // increment 実行時にcounter変数に依存するUIを更新。\n    // GetBuilderを使うWidgetの場合はupdate()が必要。\n  }\n}\n// ビュー側のクラスでGetBuilderを使ってcounter変数を組み込む\nGetBuilder<Controller>(\n  init: Controller(), // 最初に使用するときのみ初期化\n  builder: (_) => Text(\n    '${_.counter}',\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Snackbar Status Callback in Dart\nDESCRIPTION: Demonstrates how to use the snackbar status callback to handle different states of a Snackbar\nSOURCE: https://github.com/jonataslaw/getx/blob/master/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nGet.snackbar('title', 'message', snackbarStatus: (status) {\n                  if (status == SnackbarStatus.CLOSED) {\n                    // made anything\n                  }\n                });\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic SnackBar with Flutter\nDESCRIPTION: This code snippet demonstrates the standard Flutter approach for creating and displaying a SnackBar. It requires accessing the Scaffold's context to show the SnackBar.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nfinal snackBar = SnackBar(  content: Text('Hi!'),  action: SnackBarAction(\n    label: 'I am a old and ugly snackbar :(',\n    onPressed: (){}  ),);\n// Find the Scaffold in the widget tree and use\n// it to show a SnackBar.\nScaffold.of(context).showSnackBar(snackBar);\n```\n```\n\n----------------------------------------\n\nTITLE: Deleting a GetX Instance: Get.delete()\nDESCRIPTION: This snippet demonstrates how to delete an instance of a controller that was created with GetX. Normally, GetX automatically deletes unused controllers.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ru_RU/dependency_management.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.delete<Controller>(); //usually you don't need to do this because GetX already delete unused controllers\"\n```\n\n----------------------------------------\n\nTITLE: ValueBuilder for Local State Management\nDESCRIPTION: Shows how to use ValueBuilder for managing local widget state with a simple setState-like callback mechanism\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nValueBuilder<bool>(\n  initialValue: false,\n  builder: (value, updateFn) => Switch(\n    value: value,\n    onChanged: updateFn,\n  ),\n  onUpdate: (value) => print(\"Value updated: $value\"),\n  onDispose: () => print(\"Widget unmounted\"),\n),\n```\n\n----------------------------------------\n\nTITLE: Displaying Dialog using GetX in Flutter\nDESCRIPTION: This snippet demonstrates how to display a dialog using GetX, which simplifies the process by eliminating the need for context.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/tr_TR/route_management.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nGet.dialog(YourDialogWidget());\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive Variables Using Rx<Type> in Dart\nDESCRIPTION: This snippet shows how to declare reactive variables using the Rx<Type> syntax in Dart. It includes examples for various data types and a custom class.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/state_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = Rx<String>('');\nfinal isLogged = Rx<Bool>(false);\nfinal count = Rx<Int>(0);\nfinal balance = Rx<Double>(0.0);\nfinal number = Rx<Num>(0)\nfinal items = Rx<List<String>>([]);\nfinal myMap = Rx<Map<String, int>>({});\n\n// Custom Class\nfinal user = Rx<User>();\n```\n\n----------------------------------------\n\nTITLE: Navigating with dynamic URL links\nDESCRIPTION: This snippet shows how to navigate with dynamic URL links using `Get.offAllNamed()`. It passes parameters within the URL string.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.offAllNamed(\"/ProximaTela?device=phone&id=354&name=Enzo\");\n```\n```\n\n----------------------------------------\n\nTITLE: Installing GetX Package in pubspec.yaml\nDESCRIPTION: Add the GetX package as a dependency in your Flutter project's pubspec.yaml file.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-ar.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ndependencies:\n  get:\n```\n\n----------------------------------------\n\nTITLE: Converting Entire Class to Observable with GetX\nDESCRIPTION: This snippet demonstrates how to make an entire class observable using GetX. The `User` class is instantiated and then converted to an observable using `.obs`. This enables reactive updates to the entire object.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nclass User {\n  User({String name, int age});\n  var name;\n  var age;\n}\n\n// when instantianting:\nfinal user = User(name: \"Camila\", age: 18).obs;\n```\n\n----------------------------------------\n\nTITLE: Displaying Traditional SnackBar in Flutter\nDESCRIPTION: This snippet shows how to display a traditional SnackBar in Flutter using the Scaffold context.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/tr_TR/route_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal snackBar = SnackBar(\n  content: Text('Hi!'),\n  action: SnackBarAction(\n    label: 'I am a old and ugly snackbar :(',\n    onPressed: (){}\n  ),\n);\n// Widget ağacında Scaffold'u bulun ve kullanın\n// bir SnackBar göstermek için.\nScaffold.of(context).showSnackBar(snackBar);\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version\nDESCRIPTION: This snippet specifies the minimum required CMake version for the project to ensure compatibility with the CMake features used in the build process. It is crucial for ensuring that the build scripts function correctly across different CMake installations.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Customizing GetConnect Configuration\nDESCRIPTION: This snippet demonstrates how to customize the `GetConnect` configuration, including setting the base URL, adding request and response modifiers, defining an authenticator, and setting the maximum number of authentication retries. `CasesModel` should be a defined data model.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeProvider extends GetConnect {\n  @override\n  void onInit() {\n    // 모든 요청은 jsonEncode로 CasesModel.fromJson()를 거칩니다.\n    httpClient.defaultDecoder = CasesModel.fromJson;\n    httpClient.baseUrl = 'https://api.covid19api.com';\n    // baseUrl = 'https://api.covid19api.com';\n    // [httpClient] 인스턴트 없이 사용하는경우 Http와 websockets의 baseUrl 정의\n    \n    // 모든 요청의 헤더에 'apikey' 속성을 첨부합니다.\n    httpClient.addRequestModifier((request) {\n      request.headers['apikey'] = '12345678';\n      return request;\n    });\n\n    // 서버가 \"Brazil\"이란 데이터를 보내더라도\n    // 응답이 전달되기 전에 응답의 데이터를 지우기 때문에 \n    // 사용자에게 표시되지 않을 것입니다.\n    httpClient.addResponseModifier<CasesModel>((request, response) {\n      CasesModel model = response.body;\n      if (model.countries.contains('Brazil')) {\n        model.countries.remove('Brazilll');\n      }\n    });\n\n    httpClient.addAuthenticator((request) async {\n      final response = await get(\"http://yourapi/token\");\n      final token = response.body['token'];\n      // 헤더 설정\n      request.headers['Authorization'] = \"$token\";\n      return request;\n    });\n\n    // 인증자가 HttpStatus가 HttpStatus.unauthorized이면\n    // 3번 호출됩니다.\n    httpClient.maxAuthRetries = 3;\n  }\n  }\n\n  @override\n  Future<Response<CasesModel>> getCases(String path) => get(path);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Screen Dimensions and Context with GetX in Dart\nDESCRIPTION: This code snippet shows how to access screen dimensions (height and width) and the current context using GetX. It also demonstrates how to access the context for snackbar, dialog, and bottom sheet overlays. Additionally, it illustrates the usage of context extensions for responsive UI design, including height and width transformers and media query-like functionalities.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\n// MediaQuery.of(context).size.height 과 동일\n// 하지만 불변함.\nGet.height\nGet.width\n\n// Navigator의 현재 context를 제공\nGet.context\n\n// 코드 어디에서든지 foreground에서 snackbar/dialog/bottomsheet의 context를 제공\nGet.contextOverlay\n\n// 주석: 다음 메서드는 context의 확장입니다.\n// UI의 모든 위치에서 컨텍스트에 액세스 할 수 있으므로 UI 코드의 어느 곳에서나 사용할 수 있습니다.\n\n// 변경되는 height/width(데스크탑이나 브라우저와 같이 늘어날 수 있는 것)가 필요하면 context를 사용해야함\ncontext.width\ncontext.height\n\n// 화면의 절반, 1/3 등을 정의할 수 있는 기능을 제공합니다.\n// 반응성이 높은 앱에 유용합니다.\n// param dividedBy (double) optional - default: 1\n// param reducedBy (double) optional - default: 0\ncontext.heightTransformer()\ncontext.widthTransformer()\n\n/// MediaQuery.of(context).size 와 유사함\ncontext.mediaQuerySize()\n\n/// MediaQuery.of(context).padding 와 유사함\ncontext.mediaQueryPadding()\n\n/// MediaQuery.of(context).viewPadding 와 유사함\ncontext.mediaQueryViewPadding()\n\n/// MediaQuery.of(context).viewInsets; 와 유사함\ncontext.mediaQueryViewInsets()\n\n/// MediaQuery.of(context).orientation; 와 유사함\ncontext.orientation()\n\n/// 장치의 가로 모드 확인\ncontext.isLandscape()\n\n/// 장치의 세로 모드 확인\ncontext.isPortrait()\n\n/// MediaQuery.of(context).devicePixelRatio; 와 유사함\ncontext.devicePixelRatio()\n\n/// MediaQuery.of(context).textScaleFactor; 와 유사함\ncontext.textScaleFactor()\n\n/// 화면에서 shortestSide를 제공\ncontext.mediaQueryShortestSide()\n\n/// True if width be larger than 800\ncontext.showNavbar()\n\n/// shortestSide가 600p 미만이면 True\ncontext.isPhone()\n\n/// shortestSide가 600p 이상이면 True\ncontext.isSmallTablet()\n\n/// shortestSide가 720p 이상이면 True\ncontext.isLargeTablet()\n\n/// 현재 장치가 Tablet이면 True\ncontext.isTablet()\n\n/// 화면 사이즈에 따라 value<T>를 반환\n/// 반환될 수 있는 값들:\n/// watch: shortestSide가 300 미만일 때\n/// mobile: shortestSide가 600 미만일 때\n/// tablet: shortestSide가 1200 미만일 때\n/// desktop: shortestSide가 1200 이상일 때\ncontext.responsiveValue<T>()\n```\n\n----------------------------------------\n\nTITLE: Installing GetX Package Dependencies\nDESCRIPTION: YAML configuration showing how to add GetX package dependency to a Flutter project's pubspec.yaml file.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ja-JP.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  get:\n```\n\n----------------------------------------\n\nTITLE: Closing a Dialog and Returning a Result with Get\nDESCRIPTION: Illustrates how to close a dialog and return a result in Getx. The example shows awaiting a dialog result to perform further actions based on user choice.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/route_management.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nWidget buttonWithResult({\n  required final String text,\n  required final bool result,\n}) => TextButton(\n          onPressed: () {\n            Get.closeDialog(result: result);\n          },\n          child: Text(text),\n        );\n\nbool? delete = await Get.dialog(\n    AlertDialog(\n      content: const Text('Are you sure you would like to delete?'),\n      actions: [\n        buttonWithResult(text: 'No', result: false),\n        buttonWithResult(text: 'Yes', result: true),\n      ],\n    ),\n  );\n\nif (delete != null && delete) {\n  // Perform the deletion\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Middleware Observer with GetX in Dart\nDESCRIPTION: Demonstrates how to implement a manual middleware observer using GetObserver when not using GetMaterialApp.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(\n    MaterialApp(\n      onGenerateRoute: Router.generateRoute,\n      initialRoute: \"/\",\n      navigatorKey: Get.key,\n      navigatorObservers: [\n        GetObserver(MiddleWare.observer), // HERE !!!\n      ],\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Default Dialog with GetX\nDESCRIPTION: This code snippet shows how to display a default dialog with customizable confirm action and middle text using GetX.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_33\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nGet.defaultDialog(\n  onConfirm: () => print(\"Ok\"),\n  middleText: \"Dialog made in 3 lines of code\"\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Conditional List Modification with GetX in Dart\nDESCRIPTION: This snippet shows how to conditionally modify a list using GetX in Dart. It demonstrates the use of the addIf method to add an item to the list only if a certain condition is met.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/state_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nlist.addIf(item < limit, item);\n```\n\n----------------------------------------\n\nTITLE: Reactive Variables without .value in Dart\nDESCRIPTION: Shows how to use reactive variables with simplified syntax, removing explicit .value property access\nSOURCE: https://github.com/jonataslaw/getx/blob/master/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvar name = \"Jonny\".obs;\n// usage:\nText(\"$name\");\n\nvar count = 0.obs;\n// usage:\nincrement() => count ++;\nText(\"$count\");\n```\n\n----------------------------------------\n\nTITLE: Adding GetX Dependency in pubspec.yaml\nDESCRIPTION: Adds the GetX package as a dependency in the pubspec.yaml file for a Flutter project.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/ar_EG/route_management.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  get:\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Directories and Behavior\nDESCRIPTION: This code block configures the installation directories and behavior for the application. It sets the build bundle directory, makes the install step the default, and initializes the install prefix. These settings prepare the application for installation and deployment.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n\"set(BUILD_BUNDLE_DIR \\\"$<TARGET_FILE_DIR:${BINARY_NAME}>\\\")\n# Make the \\\"install\\\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \\\"${BUILD_BUNDLE_DIR}\\\" CACHE PATH \\\"...\\\" FORCE)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Updating Locale at Runtime - Dart\nDESCRIPTION: This code snippet demonstrates how to update the application's locale using the GetX API. By calling `Get.updateLocale(locale)`, the application's localization will change according to the new specified locale.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar locale = Locale('en', 'US');\nGet.updateLocale(locale);\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings\nDESCRIPTION: This function, APPLY_STANDARD_SETTINGS, applies common compilation features and options to a target. It sets the C++ standard to C++17, configures warning levels, disables exceptions, and adds debug-specific definitions. The purpose is to standardize compilation settings across different targets in the project.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"function(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\\\"4100\\\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \\\"_HAS_EXCEPTIONS=0\\\")\n  target_compile_definitions(${TARGET} PRIVATE \\\"$<$<CONFIG:Debug>:_DEBUG>\\\")\nendfunction()\"\n```\n\n----------------------------------------\n\nTITLE: Using GetX Widget for Updating UI in Flutter\nDESCRIPTION: This code snippet highlights the conversion from GetBuilder to GetX for state management. It demonstrates how to use the GetX widget to automatically update the UI with the reactive state of the controller.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n  final controller = Get.put(Controller());\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(\"counter\")),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            GetX<Controller>(\n                builder: (_) => Text(\n                      'clicks: ${controller.count}',\n                    )),\n            ElevatedButton(\n              child: Text('Next Route'),\n              onPressed: () {\n                Get.to(Second());\n              },\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n          child: Icon(Icons.add),\n          onPressed: controller.increment(),  \n          ),\n    );\n  }\n}\nclass Second extends StatelessWidget {\n  final Controller ctrl = Get.find();\n  @override\n  Widget build(context){\n     return Scaffold(body: Center(child: Text(\"${ctrl.count}\")));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: This snippet defines a variable pointing to the 'ephemeral' directory, which likely contains generated files and configurations. This allows for easy referencing of this directory throughout the CMake script.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Bindings in Dart with GetX\nDESCRIPTION: This snippet demonstrates how to create a Binding class that implements the Bindings interface. It shows how to override the dependencies method to lazily initialize controllers and services.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/es_ES/dependency_management.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeBinding implements Bindings{\n  @override\n  void dependencies() {\n    Get.lazyPut<ControllerX>(() => ControllerX());\n    Get.lazyPut<Service>(()=> Api());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Order and Listener Behavior with Synchronous Streams\nDESCRIPTION: The code shows expected output logs when synchronous streams are used with single listeners, demonstrating incorrect event order. Only the dart core libraries are needed, and no additional parameters are used; the snippet records sequence discrepancies.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  var controller = StreamController(sync: true);\n  var stream = controller.stream;\n  stream.listen((data) {\n    print('$data');\n    if (data == 'test4') controller.add('test5');\n  });\n\n  print('test1');\n  controller.add('test2');\n  // stream.listen((event) {}); // second listen throws a exception\n  print('test3');\n  controller.add('test4');\n  print('test6');\n  controller.add('test7');\n  print(\"test8\");\n}\n///////////////////// log:\ntest1\ntest2\ntest3\ntest4\ntest6\ntest8\ntest5\n\n```\n\n----------------------------------------\n\nTITLE: Custom Logging with GetX in Flutter\nDESCRIPTION: Redirecting GetX log messages to a custom logging package. This allows integration with existing logging infrastructure while still leveraging GetX's logging capabilities.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  enableLog: true,\n  logWriterCallback: localLogWriter,\n);\n\nvoid localLogWriter(String text, {bool isError = false}) {\n  // transmettez le message à votre package de journalisation préféré ici\n  // veuillez noter que même si enableLog: false, les messages du journal seront poussés dans ce 'callback'\n  // vérifiez le 'flag' si vous le souhaitez via GetConfig.isLogEnable\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Controller Instance in GetBuilder\nDESCRIPTION: Demonstrates multiple ways to initialize and access a controller instance within GetBuilder\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/vi_VI/state_management.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  init: Controller(),\n  builder: (value) => Text('${value.counter}'),\n)\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n  static Controller get to => Get.find();\n  // Controller logic\n}\n\n// Usage\nGetBuilder<Controller>(\n  init: Controller(),\n  builder: (_) => Text('${Controller.to.counter}'),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating BottomSheet with GetX in Flutter\nDESCRIPTION: This snippet demonstrates how to create a bottom sheet using Get.bottomSheet in Flutter. It shows a container with a list of options (Music and Video) without requiring a context.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/kr_KO/route_management.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nGet.bottomSheet(\n  Container(\n    child: Wrap(\n      children: <Widget>[\n        ListTile(\n          leading: Icon(Icons.music_note),\n          title: Text('Music'),\n          onTap: () {}\n        ),\n        ListTile(\n          leading: Icon(Icons.videocam),\n          title: Text('Video'),\n          onTap: () {},\n        ),\n      ],\n    ),\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Removing an Instance with Get.delete() in Dart\nDESCRIPTION: Demonstrates how to remove a previously instantiated dependency using Get.delete(). Note that this is usually not necessary as GetX manages instance lifecycle automatically.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/dependency_management.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nGet.delete<Controller>(); //usually you don't need to do this because GetX already delete unused controllers\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Build Rules\nDESCRIPTION: This includes the generated plugin build rules, managed by Flutter, into the CMake project. It allows building and incorporating plugins into the application.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"include(flutter/generated_plugins.cmake)\"\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: This conditional install command copies bundled plugin libraries to the installation directory. This ensures that the plugins required by the application are included during installation.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \\\"${PLUGIN_BUNDLED_LIBRARIES}\\\"\n    DESTINATION \\\"${INSTALL_BUNDLE_LIB_DIR}\\\"\n    COMPONENT Runtime)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a BottomSheet with Get\nDESCRIPTION: Details how to display a bottom sheet using Getx, providing a context-free approach similar to the traditional showModalBottomSheet.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/route_management.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nGet.bottomSheet(\n  Container(\n    child: Wrap(\n      children: <Widget>[\n        ListTile(\n          leading: Icon(Icons.music_note),\n          title: Text('Music'),\n          onTap: () {}\n        ),\n        ListTile(\n          leading: Icon(Icons.videocam),\n          title: Text('Video'),\n          onTap: () {},\n        ),\n      ],\n    ),\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Observable Values in GetX\nDESCRIPTION: Shows different ways to access and modify observable values in GetX including using .value property, callable syntax, and operations for different data types. Demonstrates special operations for numbers, booleans, and collection types.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-bn.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = 'GetX'.obs;\n// only \"updates\" the stream, if the value is different from the current one.\nname.value = 'Hey';\n\n// All Rx properties are \"callable\" and returns the new value.\n// but this approach does not accepts `null`, the UI will not rebuild.\nname('Hello');\n\n// is like a getter, prints 'Hello'.\nname() ;\n\n/// numbers:\n\nfinal count = 0.obs;\n\n// You can use all non mutable operations from num primitives!\ncount + 1;\n\n// Watch out! this is only valid if `count` is not final, but var\ncount += 1;\n\n// You can also compare against values:\ncount > 2;\n\n/// booleans:\n\nfinal flag = false.obs;\n\n// switches the value between true/false\nflag.toggle();\n\n\n/// all types:\n\n// Sets the `value` to null.\nflag.nil();\n\n// All toString(), toJson() operations are passed down to the `value`\nprint( count ); // calls `toString()` inside  for RxInt\n\nfinal abc = [0,1,2].obs;\n// Converts the value to a json Array, prints RxList\n// Json is supported by all Rx types!\nprint('json: ${jsonEncode(abc)}, type: ${abc.runtimeType}');\n\n// RxMap, RxList and RxSet are special Rx types, that extends their native types.\n// but you can work with a List as a regular list, although is reactive!\nabc.add(12); // pushes 12 to the list, and UPDATES the stream.\nabc[3]; // like Lists, reads the index 3.\n\n\n// equality works with the Rx and the value, but hashCode is always taken from the value\nfinal number = 12.obs;\nprint( number == 12 ); // prints > true\n```\n\n----------------------------------------\n\nTITLE: Example of State with no Change\nDESCRIPTION: This snippet shows how GetX avoids unnecessary rebuilds by checking if the value has actually changed. If setting a value to the same value it already has, no rebuild will occur.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/vi_VI/state_management.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal isOpen = false.obs;\n\n// NOTHING will happen... same value.\nvoid onButtonTap() => isOpen.value=false;\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Minimum Version\nDESCRIPTION: Sets the minimum required version for CMake to ensure compatibility with the project.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Executing Actions Before Widget Creation in GetX\nDESCRIPTION: Uses the 'onPageBuildStart' callback in GetX middleware to perform actions after bindings are initialized but before the page widget is created. This allows developers to manipulate the page flow or trigger events during early build stages.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nGetPageBuilder onPageBuildStart(GetPageBuilder page) {\n  print('bindings are ready');\n  return page;\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Header Files\nDESCRIPTION: Adds header files required for Flutter library to a list and prepends a directory path for compilation.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/linux/flutter/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This snippet includes a CMake configuration file generated by the Flutter tool. This file likely contains project-specific settings and dependencies required to build the Flutter application. It's essential for configuring the build process based on Flutter's requirements.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing GetX in pubspec.yaml\nDESCRIPTION: Add the Get package dependency to your pubspec.yaml file\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  get:\n```\n\n----------------------------------------\n\nTITLE: GetBuilder with Unique ID\nDESCRIPTION: Shows how to use GetBuilder with unique IDs for refined update control.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\nGetBuilder<Controller>(\n  id: 'text'\n  init: Controller(), // use it only first time on each controller\n  builder: (_) => Text(\n    '${Get.find<Controller>().counter}', //here\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Redirecting Log Messages with GetX in Dart\nDESCRIPTION: This code snippet shows how to redirect all log messages from GetX using the `logWriterCallback`. It demonstrates how to integrate with a logging package to handle log messages, even when logging is disabled through `enableLog: false`.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\nGetMaterialApp(\n  enableLog: true,\n  logWriterCallback: localLogWriter,\n);\n\nvoid localLogWriter(String text, {bool isError = false}) {\n  // pass the message to your favourite logging package here\n  // please note that even if enableLog: false log messages will be pushed in this callback\n  // you get check the flag if you want through GetConfig.isLogEnable\n}\n```\n\n----------------------------------------\n\nTITLE: Static Controller Access Pattern\nDESCRIPTION: Shows how to access controller instance using static getter pattern with Get.find().\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n  static Controller get to => Get.find();\n[...]\n}\n// on you view:\nGetBuilder<Controller>(  \n  init: Controller(), // use it only first time on each controller\n  builder: (_) => Text(\n    '${Controller.to.counter}', //here\n  )\n),\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers\nDESCRIPTION: This snippet configures the header files required for using the Flutter library. It appends the header files to a list and then prepends the path to the ephemeral directory. This makes the header files available to the C++ code.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/flutter/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Build Process\nDESCRIPTION: Sets up a custom command in CMake that triggers every time the build runs, ensuring Flutter tools are executed.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/linux/flutter/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Using Get.put() with type, permanent and tag in Dart\nDESCRIPTION: This snippet showcases the different options available when using Get.put(), including specifying the type of dependency, making it permanent, and assigning a unique tag.  Tags are useful when multiple instances of the same type are needed.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/id_ID/dependency_management.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n\"Get.put<SomeClass>(SomeClass());\\nGet.put<LoginController>(LoginController(), permanent: true);\\nGet.put<ListItemController>(ListItemController, tag: \\\"some unique string\\\");\"\n```\n\n----------------------------------------\n\nTITLE: Testing GetX Controller Lifecycle in Dart\nDESCRIPTION: Shows how to test GetX controllers including their lifecycle hooks (onInit, onClose) and reactive state changes. This example demonstrates testing a controller's state throughout its lifecycle using Get.put() and Get.delete() to trigger the lifecycle events.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.md#2025-04-21_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n  @override\n  void onInit() {\n    super.onInit();\n    //Change value to name2\n    name.value = 'name2';\n  }\n\n  @override\n  void onClose() {\n    name.value = '';\n    super.onClose();\n  }\n\n  final name = 'name1'.obs;\n\n  void changeName() => name.value = 'name3';\n}\n\nvoid main() {\n  test('''\nTest the state of the reactive variable \"name\" across all of its lifecycles''',\n      () {\n    /// You can test the controller without the lifecycle,\n    /// but it's not recommended unless you're not using\n    ///  GetX dependency injection\n    final controller = Controller();\n    expect(controller.name.value, 'name1');\n\n    /// If you are using it, you can test everything,\n    /// including the state of the application after each lifecycle.\n    Get.put(controller); // onInit was called\n    expect(controller.name.value, 'name2');\n\n    /// Test your functions\n    controller.changeName();\n    expect(controller.name.value, 'name3');\n\n    /// onClose was called\n    Get.delete<Controller>();\n\n    expect(controller.name.value, '');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: Defines variables for the Flutter library paths and data files, which are essential for linking and building.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/linux/flutter/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Plugin Wrapper Library\nDESCRIPTION: This snippet creates a static library for the Flutter plugin wrapper. It includes the core and plugin wrapper sources and links it against the Flutter library. It also sets the position independent code and CXX visibility preset properties and defines the include directories.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/flutter/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Custom Function for List Prepending\nDESCRIPTION: Defines a function to prepend a prefix to all elements in a given list, useful for creating paths.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: This snippet sets the path to the C++ client wrapper directory, which contains the C++ code that interfaces with the Flutter engine. This enables easy access to files within the wrapper directory throughout the CMake script.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a configuration file generated by the Flutter tool, necessary for project setup.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Wrapper Sources\nDESCRIPTION: These snippets configure the C++ wrapper sources for both core implementations, plugins and the application, which interface with the Flutter engine. It appends the source files to lists and then prepends the path to the wrapper root directory. These source files will be compiled into static libraries.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/flutter/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Directories for Data and Libraries\nDESCRIPTION: This snippet defines the specific installation directories for data files and libraries within the bundle. This ensures that the application can locate its required assets and shared libraries after installation.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n\"set(INSTALL_BUNDLE_DATA_DIR \\\"${CMAKE_INSTALL_PREFIX}/data\\\")\nset(INSTALL_BUNDLE_LIB_DIR \\\"${CMAKE_INSTALL_PREFIX}\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project\nDESCRIPTION: This snippet initializes the CMake project, setting the minimum required CMake version and defining the project name with CXX language support.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/linux/runner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Changing State with StateMixin in GetX\nDESCRIPTION: Demonstrates how to change the state of a component using the change() method with StateMixin. Shows the available status options in RxStatus for different UI states.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-bn.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nchange(data, status: RxStatus.success());\n```\n\n----------------------------------------\n\nTITLE: Importing GetX in Dart Files\nDESCRIPTION: Code snippet showing the import statement needed to use GetX in Dart files within a Flutter project.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pl.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:get/get.dart';\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: These install commands manage the installation of Flutter assets. It first removes any existing assets directory and then copies the new assets directory to the installation location, ensuring that the application has the latest assets.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n\"set(FLUTTER_ASSET_DIR_NAME \\\"flutter_assets\\\")\ninstall(CODE \\\"\n  file(REMOVE_RECURSE \\\\\\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\\\\\")\n  \\\" COMPONENT Runtime)\ninstall(DIRECTORY \\\"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\"\n  DESTINATION \\\"${INSTALL_BUNDLE_DATA_DIR}\\\" COMPONENT Runtime)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Flutter and Application Build\nDESCRIPTION: These commands add subdirectories for the Flutter managed directory and the application's runner directory to the build process. This allows CMake to recursively process the CMakeLists.txt files in those directories, incorporating their targets and configurations into the main build.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"set(FLUTTER_MANAGED_DIR \\\"${CMAKE_CURRENT_SOURCE_DIR}/flutter\\\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build\nadd_subdirectory(\\\"runner\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assembly\nDESCRIPTION: Defines a custom target in the CMake build system that depends on the Flutter library and its headers to ensure correct build order.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/linux/flutter/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Importing GetX in Dart\nDESCRIPTION: Import the Get package in your Dart files\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:get/get.dart';\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: This snippet defines the path to the Flutter Windows DLL, which is the core Flutter engine library. It also publishes the path to parent scope for use in the install step. This is essential for linking the application with the Flutter engine.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/flutter/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Linking libraries to target in CMake\nDESCRIPTION: This snippet links the `flutter` and `PkgConfig::GTK` libraries to the target executable. These are private dependencies, meaning they are only needed for building the executable and not exposed to other projects that link against it.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/linux/runner/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Stream Closing in Controller\nDESCRIPTION: Properly closing streams in onClose() method instead of using dispose\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/kr_KO/state_management.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n  StreamController<User> user = StreamController<User>();\n  StreamController<String> name = StreamController<String>();\n\n  @override\n  void onClose() {\n    user.close();\n    name.close();\n    super.onClose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reactive State Management with GetX in Flutter\nDESCRIPTION: The snippet demonstrates leveraging GetX for reactive state management in Flutter. It shows how state is automatically updated in the UI when the observable variable changes, removing the need for the update method.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example/example.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n  var count = 0.obs;\n  void increment() {\n    count++;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing GetX Package in Dart Files\nDESCRIPTION: Code snippet showing how to import the GetX package in Dart files to utilize its functionality.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-hi.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:get/get.dart';\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for Flutter Assembly\nDESCRIPTION: This snippet defines a custom command to run the Flutter tool backend. This command is responsible for assembling the Flutter application, including compiling the Dart code and generating the necessary assets. It also defines a phony output file to force the command to run every time.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/flutter/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Working with Rx Custom Models in GetX\nDESCRIPTION: This snippet demonstrates how to use Rx with custom models in GetX, highlighting the need to manually refresh or update the observable when properties within the model change. It showcases the usage of `refresh()` and `update()` methods to trigger UI updates.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pt-br.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass User {\n    String name, last;\n    int age;\n    User({this.name, this.last, this.age});\n\n    @override\n    String toString() => '$name $last, $age years old';\n}\n\nfinal user = User(name: 'John', last: 'Doe', age: 33).obs;\n\n// `user` é \"reativo\", mas as propriedades dentro NÃO SÃO!\n// Então, se mudarmos alguma variável dentro dele:\nuser.value.name = 'Roi';\n// O widget não vai reconstruir!,\n// `Rx` não tem nenhuma notificação quando você muda algo dentro do usuário.\n// Portanto, para classes personalizadas, precisamos \"notificar\" manualmente a mudança.\nuser.refresh();\n\n// ou podemos usar o método `update()`!\nuser.update((value){\n  value.name='Roi';\n});\n\nprint( user ); // Resultado (toString): Roi Doe, 33 years old\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Library Target\nDESCRIPTION: Defines a library target that links the Flutter library and includes the necessary directories for compilation.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/linux/flutter/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of GetConnect for API Communication\nDESCRIPTION: This snippet demonstrates how to use GetConnect to communicate with APIs. It provides methods for GET and POST requests to manage user data.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-fr.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nclass UserProvider extends GetConnect {\n  // Get request\n  Future<Response> getUser(int id) => get('http://youapi/users/$id');\n  // Post request\n  Future<Response> postUser(Map data) => post('http://youapi/users', body: data);\n  // Post request with File\n  Future<Response<CasesModel>> postCases(List<int> image) {\n    final form = FormData({\n      'file': MultipartFile(image, filename: 'avatar.png'),\n      'otherFile': MultipartFile(image, filename: 'cover.png'),\n    });\n    return post('http://youapi/users/upload', form);\n  }\n\n  GetSocket userMessages() {\n    return socket('https://yourapi/users/socket');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing StreamController with Synchronous Streams in Dart\nDESCRIPTION: This snippet demonstrates the use of a synchronous StreamController in Dart, showing the limitations of only allowing a single listener and issues with event order delivery. It requires Dart's core libraries, focusing on stream creation, listening, and event emission.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  var controller = StreamController(sync: true);\n  var stream = controller.stream;\n  stream.listen((data) {\n    print('$data');\n    if (data == 'test4') controller.add('test5');\n  });\n\n  print('test1');\n  controller.add('test2');\n  stream.listen((event) {}); // second listen throws a exception\n  print('test3');\n  controller.add('test4');\n  print('test6');\n  controller.add('test7');\n  print(\"test8\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding preprocessor definitions in CMake\nDESCRIPTION: Adds a preprocessor definition for the application ID. This allows the application to access the ID at compile time.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/linux/runner/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Displaying a SnackBar in Flutter (Traditional)\nDESCRIPTION: This code illustrates how to display a simple SnackBar in Flutter, which requires accessing the `context` of the Scaffold. It demonstrates the traditional way of showing a SnackBar, highlighting the need for a Scaffold context.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/pt_BR/route_management.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nfinal snackBar = SnackBar(\n  content: Text('Olá!'),\n  action: SnackBarAction(\n    label: 'Eu sou uma SnackBar velha e feia :(',\n    onPressed: (){}\n  ),\n);\n// Encontra o Scaffold na árvore de Widgets e\n// o usa para mostrar o SnackBar\nScaffold.of(context).showSnackBar(snackBar);\n```\n```\n\n----------------------------------------\n\nTITLE: Dynamic Theme Switching Button - Dart\nDESCRIPTION: This code snippet shows how to create a button that toggles between light and dark themes based on the current theme. The button uses the `Get.isDarkMode` API to decide which theme to apply when pressed.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.tr-TR.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nGet.changeTheme(Get.isDarkMode? ThemeData.light(): ThemeData.dark());\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter App Wrapper Library\nDESCRIPTION: This snippet creates a static library for the Flutter app wrapper. It includes the core and app wrapper sources and links it against the Flutter library. It also defines the include directories.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/flutter/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Using StateMixin for UI State Management in GetX\nDESCRIPTION: Shows how to use the StateMixin to handle UI states like loading, success, empty, and error conditions. Demonstrates how to implement it in a controller and use the obx method to display different widgets based on state.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-bn.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetController with StateMixin<User>{}\n```\n\n----------------------------------------\n\nTITLE: Using Observable (.obs) Types with GetX in Dart\nDESCRIPTION: Demonstrates how to use reactive (.obs) types in GetX including string, number, boolean, and list operations. Shows various ways to access and modify observable values through different syntaxes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README-bn.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar message = 'Hello world'.obs;\nprint( 'Message \"$message\" has Type ${message.runtimeType}');\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Routing with GetStorage\nDESCRIPTION: This snippet demonstrates the implementation of Dynamic Page Routing using GetStorage to determine the page based on whether a token exists. It uses GetMaterialApp and getPages to implement the logic.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.pt-br.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nGetStorage box = GetStorage();\n\nGetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page:(){  \n      return box.hasData('token') ? Home() : Login();\n    })\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting include directories in CMake\nDESCRIPTION: This snippet sets the include directories for the target executable. It adds the source directory to the include path, allowing the application to find header files.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/linux/runner/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller with GetX\nDESCRIPTION: Defines a Controller class that extends GetxController to manage state. It contains an observable count variable and an increment method that updates the state.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ur-PK.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController{\n  var count = 0.obs;\n  increment() => count++;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Definitions\nDESCRIPTION: This snippet adds preprocessor definitions to enable Unicode support for all projects. It defines UNICODE and _UNICODE, ensuring wide character support.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_definitions(-DUNICODE -D_UNICODE)\"\n```\n\n----------------------------------------\n\nTITLE: Direct Get.find() Controller Access\nDESCRIPTION: Shows how to access controller instance using Get.find() directly in the widget.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\nclass Controller extends GetxController {\n // static Controller get to => Get.find(); // with no static get\n[...]\n}\n// on stateful/stateless class\nGetBuilder<Controller>(  \n  init: Controller(), // use it only first time on each controller\n  builder: (_) => Text(\n    '${Get.find<Controller>().counter}', //here\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Implementasi Internasionalisasi dengan GetX di Flutter\nDESCRIPTION: Contoh kelas untuk menambahkan terjemahan kustom menggunakan GetX.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.id-ID.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:get/get.dart';\n\nclass Messages extends Translations {\n  @override\n  Map<String, Map<String, String>> get keys => {\n        'en_US': {\n          'hello': 'Hello World',\n        },\n        'id_ID': {\n          'hello': 'Halo Dunia',\n        }\n      };\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation with GetX\nDESCRIPTION: Shows various navigation methods available in GetX, including navigating to new screens, named routes, and closing screens without requiring context.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ur-PK.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nGet.to(NextScreen());\n```\n\n----------------------------------------\n\nTITLE: Available RxStatus Options\nDESCRIPTION: Lists the different status options available with RxStatus for managing loading, success, empty, and error states.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/documentation/en_US/state_management.md#2025-04-21_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\nRxStatus.loading();\nRxStatus.success();\nRxStatus.empty();\nRxStatus.error('message');\n```\n\n----------------------------------------\n\nTITLE: Using Retrieved Controller Data with GetX\nDESCRIPTION: Demonstrates accessing data from a retrieved controller that was previously injected into the GetX dependency system.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/README.ur-PK.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nText(controller.textFromApi);\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for Multi-Configuration Generators\nDESCRIPTION: This code block configures the build options based on whether the CMake generator is multi-configuration (e.g., Visual Studio). It sets the available configuration types (Debug, Profile, Release) and defines the default build type if not already specified. This section ensures appropriate build settings for different build modes.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"get_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \\\"Debug;Profile;Release\\\"\n    CACHE STRING \\\"\\\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \\\"Debug\\\" CACHE\n      STRING \\\"Flutter build mode\\\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \\\"Debug\\\" \\\"Profile\\\" \\\"Release\\\")\n  endif()\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This conditional install command copies the Ahead-of-Time (AOT) compiled library to the installation directory for Profile and Release builds. This optimizes performance on non-Debug builds.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n\"install(FILES \\\"${AOT_LIBRARY}\\\" DESTINATION \\\"${INSTALL_BUNDLE_DATA_DIR}\\\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Project Name\nDESCRIPTION: This snippet sets the minimum required CMake version and defines the project name and supported languages. It ensures that the build system uses a compatible version of CMake and establishes the foundational project settings.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.15)\nproject(example_nav2 LANGUAGES CXX)\n\nset(BINARY_NAME \\\"example_nav2\\\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \\\"$ORIGIN/lib\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Finding System-Level Dependencies\nDESCRIPTION: Finds and checks for required system libraries needed by the Flutter application using PkgConfig.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Installing Target Executable and Data Files\nDESCRIPTION: These install commands copy the target executable, the Flutter ICU data file, and the Flutter library to their respective installation directories. This ensures that all necessary components for running the application are correctly placed during the installation process.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/windows/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n\"install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \\\"${CMAKE_INSTALL_PREFIX}\\\"\n  COMPONENT Runtime)\n\ninstall(FILES \\\"${FLUTTER_ICU_DATA_FILE}\\\" DESTINATION \\\"${INSTALL_BUNDLE_DATA_DIR}\\\"\n  COMPONENT Runtime)\n\ninstall(FILES \\\"${FLUTTER_LIBRARY}\\\" DESTINATION \\\"${INSTALL_BUNDLE_LIB_DIR}\\\"\n  COMPONENT Runtime)\"\n```\n\n----------------------------------------\n\nTITLE: Applying standard settings in CMake\nDESCRIPTION: Applies a set of standard build settings to the specified target. This includes compiler flags and other common configurations.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/linux/runner/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Adding executable target in CMake\nDESCRIPTION: This code adds an executable target to the CMake project, specifying the source files to be compiled into the executable. BINARY_NAME is defined in the top-level CMakeLists.txt.\nSOURCE: https://github.com/jonataslaw/getx/blob/master/example_nav2/linux/runner/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```"
  }
]