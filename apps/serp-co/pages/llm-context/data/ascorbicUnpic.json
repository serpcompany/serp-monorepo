[
  {
    "owner": "ascorbic",
    "repo": "unpic",
    "content": "TITLE: Transforming an Image URL with Unpic\nDESCRIPTION: Demonstrates how to use the transformUrl function to modify a Shopify image URL with new dimensions.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/README.md#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = transformUrl(\n\t\"https://cdn.shopify.com/static/sample-images/bath_grande_crop_center.jpeg\",\n\t{\n\t\twidth: 800,\n\t\theight: 600,\n\t},\n);\n\nconsole.log(url);\n// https://cdn.shopify.com/static/sample-images/bath.jpeg?width=800&height=600&crop=center\n```\n\n----------------------------------------\n\nTITLE: Parsing an Image URL with Unpic\nDESCRIPTION: Shows how to use the parseUrl function to extract information from a Shopify image URL.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/README.md#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst parsed = parseUrl(\n\t\"https://cdn.shopify.com/static/sample-images/bath_800x600_crop_center.jpeg\",\n);\n\nconsole.log(parsed);\n// {\n//   provider: \"shopify\",\n//   src: \"https://cdn.shopify.com/static/sample-images/bath.jpeg\",\n//   operations: {\n//     width: 800,\n//     height: 600,\n//     crop: \"center\"\n//   }\n// }\n```\n\n----------------------------------------\n\nTITLE: Transforming URL with Custom Operations\nDESCRIPTION: Shows how to use provider-specific operations when transforming an image URL.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/README.md#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = transformUrl(\n\t\"https://cdn.shopify.com/static/sample-images/bath.jpeg\",\n\t{\n\t\twidth: 800,\n\t\theight: 600,\n\t},\n\t{\n\t\tshopify: {\n\t\t\tcrop: \"center\",\n\t\t},\n\t},\n);\n```\n\n----------------------------------------\n\nTITLE: Transforming URL with Multiple Provider Options\nDESCRIPTION: Demonstrates passing options for multiple providers when transforming an image URL.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/README.md#2025-04-12_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = transformUrl(\n\tsrc,\n\t{\n\t\twidth: 800,\n\t\theight: 600,\n\t},\n\t{\n\t\tshopify: {\n\t\t\tcrop: \"left\",\n\t\t},\n\t\timgix: {\n\t\t\tposition: \"left\",\n\t\t},\n\t},\n);\n```\n\n----------------------------------------\n\nTITLE: Using Provider-Specific Imports in Unpic\nDESCRIPTION: Demonstrates how to import and use a specific provider's transform function for reduced bundle size.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/README.md#2025-04-12_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { transform } from \"unpic/providers/shopify\";\n\nconst url = transform(\n\t\"https://cdn.shopify.com/static/sample-images/bath.jpeg\",\n\t{\n\t\twidth: 800,\n\t\theight: 600,\n\t\tcrop: \"center\",\n\t},\n);\n```\n\n----------------------------------------\n\nTITLE: Comparing transformUrl Function Usage Between Unpic V3 and V4\nDESCRIPTION: Shows how the transformUrl function syntax has changed from version 3 to version 4. In version 4, provider operations and options are passed separately rather than in a single object.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/UPGRADING.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Version 3\ntransformUrl({\n\turl: \"https://example.com/image.jpg\",\n\twidth: 800,\n\theight: 600,\n\tcdn: \"shopify\",\n\tcdnOptions: {\n\t\tshopify: {\n\t\t\tcrop: \"center\",\n\t\t},\n\t},\n});\n\n// Version 4\ntransformUrl({\n\turl: \"https://example.com/image.jpg\",\n\twidth: 800,\n\theight: 600,\n\tprovider: \"shopify\", // or use 'cdn' (deprecated)\n}, {\n\tshopify: {\n\t\tcrop: \"center\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Provider-Specific Operations in Unpic V3 vs V4\nDESCRIPTION: Demonstrates how provider-specific operations are now passed as a separate argument in version 4, rather than being nested within cdnOptions as in version 3.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/UPGRADING.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Version 3\ntransformUrl({\n\turl: \"https://example.com/image.jpg\",\n\twidth: 800,\n\tcdnOptions: {\n\t\tcloudinary: {\n\t\t\tcrop: \"fill\",\n\t\t\tgravity: \"center\",\n\t\t},\n\t},\n});\n\n// Version 4\ntransformUrl({\n\turl: \"https://example.com/image.jpg\",\n\twidth: 800,\n}, {\n\tcloudinary: {\n\t\tcrop: \"fill\",\n\t\tgravity: \"center\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming URL with Provider-Specific Options\nDESCRIPTION: Example of using provider-specific options, including fallback provider and custom options.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/README.md#2025-04-12_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = transformUrl(\n\tsrc,\n\t{\n\t\twidth: 800,\n\t\theight: 600,\n\t\tfallback: \"cloudinary\",\n\t},\n\t{\n\t\tshopify: {\n\t\t\tcrop: \"left\",\n\t\t},\n\t},\n\t{\n\t\tcloudinary: {\n\t\t\tcloudName: \"demo\",\n\t\t},\n\t},\n);\n```\n\n----------------------------------------\n\nTITLE: Transforming URL with Fallback Provider\nDESCRIPTION: Demonstrates using a fallback provider when transforming a URL that isn't recognized as a known CDN.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/README.md#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = transformUrl(\n\t\"https://example.com/image.jpg\",\n\t{\n\t\twidth: 800,\n\t\theight: 600,\n\t\tfallback: \"netlify\",\n\t},\n);\n```\n\n----------------------------------------\n\nTITLE: Transforming URL with Specified Provider\nDESCRIPTION: Example of using transformUrl with a manually specified provider to bypass auto-detection.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/README.md#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = transformUrl(\n\t\"https://cdn.shopify.com/static/sample-images/bath_grande_crop_center.jpeg\",\n\t{\n\t\twidth: 800,\n\t\theight: 600,\n\t\tprovider: \"shopify\",\n\t},\n);\n```\n\n----------------------------------------\n\nTITLE: Direct Provider Imports in Unpic V4\nDESCRIPTION: Shows how to use direct provider imports for better tree-shaking in version 4, allowing you to import specific provider modules directly rather than the entire library.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/UPGRADING.md#2025-04-12_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { transform } from \"unpic/providers/shopify\";\n\nconst url = transform(\n\t\"https://cdn.shopify.com/image.jpg\",\n\t{\n\t\twidth: 800,\n\t\tcrop: \"center\", // Provider-specific options available directly\n\t},\n);\n```\n\n----------------------------------------\n\nTITLE: Provider Configuration Changes in Unpic V4\nDESCRIPTION: Demonstrates how provider-specific configuration options like base URLs or project keys are now passed as the third argument to transformUrl instead of being nested in cdnOptions.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/UPGRADING.md#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Version 3\ntransformUrl({\n\turl: \"image.jpg\",\n\twidth: 800,\n\tcdn: \"cloudinary\",\n\tcdnOptions: {\n\t\tcloudinary: {\n\t\t\tcloudName: \"demo\",\n\t\t},\n\t},\n});\n\n// Version 4\ntransformUrl(\n\t{\n\t\turl: \"image.jpg\",\n\t\twidth: 800,\n\t\tprovider: \"cloudinary\",\n\t},\n\t{}, // operations (empty in this case)\n\t{\n\t\tcloudinary: {\n\t\t\tcloudName: \"demo\",\n\t\t},\n\t},\n);\n```\n\n----------------------------------------\n\nTITLE: Using the New Fallback Provider System in Unpic V4\nDESCRIPTION: Demonstrates the new fallback system which provides an explicit way to handle unrecognized URLs by specifying a fallback provider to use when an image URL isn't recognized.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/UPGRADING.md#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntransformUrl({\n\turl: \"https://example.com/image.jpg\",\n\twidth: 800,\n\tfallback: \"netlify\", // Use Netlify if URL isn't recognized\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing URL Delegation with Fallback in Unpic V4\nDESCRIPTION: Shows how to migrate from the recursive URL delegation system in version 3 to the explicit fallback system in version 4. This allows specifying a fallback provider for unrecognized URLs.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/UPGRADING.md#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Version 3 (with delegation)\ntransformUrl({\n\turl: \"/_next/image?url=https://example.com/image.jpg&w=800\",\n\twidth: 1200,\n\trecursive: true, // would try to use the source image's CDN\n});\n\n// Version 4 (with fallback)\ntransformUrl({\n\turl: \"https://example.com/image.jpg\",\n\twidth: 1200,\n\tfallback: \"nextjs\", // will use Next.js image optimization if URL isn't recognized\n});\n\n// Or use a different fallback provider\ntransformUrl(\n\t{\n\t\turl: \"https://example.com/image.jpg\",\n\t\twidth: 1200,\n\t\tfallback: \"cloudinary\", // use Cloudinary for unrecognized URLs\n\t},\n\t{},\n\t{\n\t\tcloudinary: {\n\t\t\tcloudName: \"demo\",\n\t\t},\n\t},\n);\n```\n\n----------------------------------------\n\nTITLE: Improved Type System in Unpic V4\nDESCRIPTION: Shows how version 4 enhances type safety with improved TypeScript typing, allowing for provider-specific operation type checking and better autocompletion.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/UPGRADING.md#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Version 4 adds type safety for provider operations\ntransformUrl<\"shopify\">({\n\turl: url,\n\twidth: 800,\n\tprovider: \"shopify\",\n}, {\n\tshopify: {\n\t\tcrop: \"center\", // Type-safe: only valid Shopify options allowed\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: URL Manipulation Utilities in TypeScript\nDESCRIPTION: Core utility functions for handling URL operations including conversion between string and URL objects, and path manipulation.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Convert strings or URLs to URL objects (handles relative URLs)\nconst url = toUrl(\"https://example.com/image.jpg\");\n\n// Convert back to string, preserving relativeness\nconst urlString = toCanonicalUrlString(url);\n\n// Path manipulation\nconst cleanPath = stripLeadingSlash(\"/path/to/image.jpg\");\nconst formattedPath = addTrailingSlash(\"path/to/image\");\n```\n\n----------------------------------------\n\nTITLE: Core Provider Functions Implementation in TypeScript\nDESCRIPTION: Implementation of core provider functions including extract, generate, and transform for handling URL operations.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/CONTRIBUTING.md#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Extract operations from existing URL\nexport const extract: URLExtractor<\"example-cdn\"> = (url) => {\n\tconst parsedUrl = toUrl(url);\n\tconst operations = operationsParser(parsedUrl);\n\tparsedUrl.search = \"\";\n\n\treturn {\n\t\tsrc: toCanonicalUrlString(parsedUrl),\n\t\toperations,\n\t\toptions: {\n\t\t\tbaseUrl: parsedUrl.origin,\n\t\t},\n\t};\n};\n\n// Generate new URL with operations\nexport const generate: URLGenerator<\"example-cdn\"> = (\n\tsrc,\n\toperations,\n\toptions = {},\n) => {\n\tconst url = toUrl(src, options.baseUrl);\n\turl.search = operationsGenerator(operations);\n\treturn toCanonicalUrlString(url);\n};\n\n// Transform existing URL with new operations\nexport const transform: URLTransformer<\"example-cdn\"> =\n\tcreateExtractAndGenerate(extract, generate);\n```\n\n----------------------------------------\n\nTITLE: Operations Handler Configuration in TypeScript\nDESCRIPTION: Implementation of createOperationsHandlers utility for standardizing parser and generator functions with custom parameter mapping and defaults.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/CONTRIBUTING.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { operationsGenerator, operationsParser } = createOperationsHandlers<\n\tExampleCdnOperations\n>({\n\t// Map standard operation names to provider-specific names\n\tkeyMap: {\n\t\twidth: \"w\",\n\t\theight: \"h\",\n\t\tquality: \"q\",\n\t\tformat: \"fmt\",\n\t},\n\t// Set default values\n\tdefaults: {\n\t\tquality: 80,\n\t\tformat: \"auto\",\n\t},\n\t// Normalize format names\n\tformatMap: {\n\t\tjpg: \"jpeg\",\n\t},\n\t// Define parameter formatting\n\tkvSeparator: \"=\", // key=value\n\tparamSeparator: \"&\", // param1&param2\n});\n```\n\n----------------------------------------\n\nTITLE: Provider Interface Definition in TypeScript\nDESCRIPTION: TypeScript interfaces defining operations and options for an example CDN provider implementation.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/CONTRIBUTING.md#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// example-cdn.ts\nimport type {\n\tOperations,\n\tURLExtractor,\n\tURLGenerator,\n\tURLTransformer,\n} from \"../types.ts\";\nimport {\n\tcreateExtractAndGenerate,\n\tcreateOperationsHandlers,\n\ttoCanonicalUrlString,\n\ttoUrl,\n} from \"../utils.ts\";\n\n// Only add NEW operations specific to your provider\nexport interface ExampleCdnOperations extends Operations {\n\t// Provider-specific operations\n\tspecialCrop?: \"smart\" | \"center\";\n\tblur?: number;\n\n\t// DON'T include these - they're in base Operations\n\t// width?: number;      ❌\n\t// height?: number;     ❌\n\t// quality?: number;    ❌\n\t// format?: string;     ❌\n}\n\n// Optional provider-specific options\nexport interface ExampleCdnOptions {\n\tbaseUrl?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Provider Test Implementation in TypeScript\nDESCRIPTION: Comprehensive test suite for an example CDN provider covering URL extraction, generation, transformation, and error handling.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/CONTRIBUTING.md#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// example-cdn.test.ts\nimport { assertEquals } from \"jsr:@std/assert\";\nimport { extract, generate, transform } from \"./example-cdn.ts\";\nimport { assertEqualIgnoringQueryOrder } from \"../test-utils.ts\";\n\nconst img = \"https://example-cdn.com/image.jpg\";\n\nDeno.test(\"Example CDN\", async (t) => {\n\t// Test extraction\n\tawait t.step(\"should extract operations from URL\", () => {\n\t\tconst url = `${img}?w=300&h=200&q=80&fmt=webp&specialCrop=smart`;\n\t\tconst result = extract(url);\n\t\tassertEquals(result, {\n\t\t\tsrc: img,\n\t\t\toperations: {\n\t\t\t\twidth: 300,\n\t\t\t\theight: 200,\n\t\t\t\tquality: 80,\n\t\t\t\tformat: \"webp\",\n\t\t\t\tspecialCrop: \"smart\",\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tbaseUrl: \"https://example-cdn.com\",\n\t\t\t},\n\t\t});\n\t});\n\n\t// Test URL generation\n\tawait t.step(\"should generate URL with operations\", () => {\n\t\tconst result = generate(img, {\n\t\t\twidth: 400,\n\t\t\theight: 300,\n\t\t\tquality: 90,\n\t\t\tspecialCrop: \"center\",\n\t\t});\n\t\tassertEqualIgnoringQueryOrder(\n\t\t\tresult,\n\t\t\t`${img}?w=400&h=300&q=90&specialCrop=center`,\n\t\t);\n\t});\n\n\t// Test transformation\n\tawait t.step(\"should transform existing URL\", () => {\n\t\tconst url = `${img}?w=300&h=200`;\n\t\tconst result = transform(url, {\n\t\t\twidth: 500,\n\t\t\tblur: 5,\n\t\t});\n\t\tassertEqualIgnoringQueryOrder(\n\t\t\tresult,\n\t\t\t`${img}?w=500&h=200&blur=5`,\n\t\t);\n\t});\n\n\t// Test error cases\n\tawait t.step(\"should handle invalid URLs\", () => {\n\t\tconst result = extract(\"invalid-url\");\n\t\tassertEquals(result, null);\n\t});\n\n\t// Test relative URLs\n\tawait t.step(\"should handle relative URLs\", () => {\n\t\tconst result = generate(\"/image.jpg\", { width: 300 });\n\t\tassertEqualIgnoringQueryOrder(\n\t\t\tresult,\n\t\t\t\"/image.jpg?w=300\",\n\t\t);\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: ParseURL Structure Changes in Unpic V4\nDESCRIPTION: Shows how the parseUrl function return structure has changed in version 4, with more consistent naming and support for generic types, plus the introduction of URL extractors.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/UPGRADING.md#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Version 3\nconst result = parseUrl(url);\n// {\n//   cdn: \"shopify\",\n//   width: 800,\n//   height: 600,\n//   base: \"https://cdn.shopify.com/image.jpg\",\n//   params: {\n//     crop: \"center\"\n//   }\n// }\n\n// Version 4\nconst result = parseUrl(url);\n// {\n//   provider: \"shopify\", // or cdn\n//   src: \"https://cdn.shopify.com/image.jpg\",\n//   operations: {\n//     width: 800,\n//     height: 600,\n//     crop: \"center\"\n//   }\n// }\n\n// New in Version 4: URL extractors\nconst extractor = getExtractorForUrl(url);\nconst result = extractor?.(url);\n```\n\n----------------------------------------\n\nTITLE: Function Renames in Unpic V4\nDESCRIPTION: Illustrates the function renames in version 4 for improved clarity. The old function names are still available but deprecated, while the new names better reflect their purpose.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/UPGRADING.md#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Version 3\nimport {\n\tgetImageCdnForUrl,\n\tgetImageCdnForUrlByDomain,\n\tgetImageCdnForUrlByPath,\n} from \"unpic\";\n\n// Version 4\nimport {\n\tgetProviderForUrl, // new name\n\tgetProviderForUrlByDomain, // new name\n\tgetProviderForUrlByPath, // new name\n} from \"unpic\";\n```\n\n----------------------------------------\n\nTITLE: Operations Handler Styles in TypeScript\nDESCRIPTION: Examples of different parameter formatting styles using createOperationsHandlers for query parameters, path segments, and disabled parameters.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/CONTRIBUTING.md#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Different parameter formatting styles:\n\n// Query parameters: ?width=100&height=200\nconst queryStyle = createOperationsHandlers<ExampleCdnOperations>({\n\tkeyMap: {\n\t\twidth: \"w\",\n\t\theight: \"h\",\n\t\tquality: \"q\",\n\t\tformat: \"fmt\",\n\t},\n\tdefaults: {\n\t\tquality: 80,\n\t},\n\tkvSeparator: \"=\",\n\tparamSeparator: \"&\",\n});\n\n// Path segments: /w_100/h_200/q_80\nconst pathStyle = createOperationsHandlers<ExampleCdnOperations>({\n\tkeyMap: {\n\t\twidth: \"w\",\n\t\theight: \"h\",\n\t\tquality: \"q\",\n\t\tformat: \"fmt\",\n\t},\n\tdefaults: {\n\t\tquality: 80,\n\t},\n\tkvSeparator: \"_\",\n\tparamSeparator: \"/\",\n});\n\n// You can also disable parameters:\nconst noHeightStyle = createOperationsHandlers<ExampleCdnOperations>({\n\tkeyMap: {\n\t\twidth: \"w\",\n\t\theight: false, // Height parameter will be removed\n\t\tquality: \"q\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Unpic in Deno\nDESCRIPTION: Example of importing the transformUrl function from the Unpic library in a Deno environment using JSR.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/README.md#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { transformUrl } from \"jsr:@unpic/lib\";\n```\n\n----------------------------------------\n\nTITLE: Importing Unpic in Node.js\nDESCRIPTION: Example of importing the transformUrl function from the Unpic library in a Node.js environment.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/README.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { transformUrl } from \"unpic\";\n```\n\n----------------------------------------\n\nTITLE: Installing Unpic via NPM\nDESCRIPTION: Command to install the Unpic library using NPM package manager.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install unpic\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Markdown formatted changelog entries tracking version releases, features and bug fixes for the Unpic project from version 3.19.0 down to 2.2.2.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/CHANGELOG-old.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- deno-fmt-ignore-file -->\n# Changelog\n\n## [3.19.0](https://github.com/ascorbic/unpic/compare/v3.18.1...v3.19.0) (2024-10-26)\n\n\n### Features\n\n* add support for cloudflare images without custom domain ([#131](https://github.com/ascorbic/unpic/issues/131)) ([320784b](https://github.com/ascorbic/unpic/commit/320784bcbe8ce91c0c58723cb4446d6f8e535d99))\n\n\n### Bug Fixes\n\n* fix publishing ([#138](https://github.com/ascorbic/unpic/issues/138)) ([ae9de25](https://github.com/ascorbic/unpic/commit/ae9de2532b0f3c3fc7e47b69b260c16b106d6f3c))\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests for Unpic with Deno\nDESCRIPTION: Command to run end-to-end tests that verify providers work with real CDN endpoints. The tests use sample images from examples.json to validate actual operations on CDN services.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/CONTRIBUTING.md#2025-04-12_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndeno test --allow-net e2e.test.ts\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server for Unpic Playground in Bash\nDESCRIPTION: Commands to navigate to the demo directory, install dependencies, and start the development server for the Unpic playground application. This allows for visual testing of image providers with actual CDN endpoints.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/CONTRIBUTING.md#2025-04-12_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd demo\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Test Execution Commands in Bash\nDESCRIPTION: Commands for running different types of tests including all tests, provider-specific tests, and E2E tests with network access.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/CONTRIBUTING.md#2025-04-12_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Run all tests\ndeno test\n\n# Run tests for a specific provider\ndeno test src/providers/example-cdn.test.ts\n\n# Run E2E tests. These need network access.\ndeno test --allow-net e2e.test.ts\n```\n\n----------------------------------------\n\nTITLE: Development Environment Commands in Bash\nDESCRIPTION: Basic Deno commands for running tests, type checking, and formatting code in the development environment.\nSOURCE: https://github.com/ascorbic/unpic/blob/main/CONTRIBUTING.md#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Run tests\ndeno test\n\n# Run tests with watch mode\ndeno test --watch\n\n# Type checking\ndeno check\n\n# Format code\ndeno fmt\n```"
  }
]