[
  {
    "owner": "stripe",
    "repo": "stripe-python",
    "content": "TITLE: Installing Stripe Python Library using pip\nDESCRIPTION: Command to install the official Stripe Python library using pip package manager.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/LONG_DESCRIPTION.rst#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install stripe\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Support in Stripe Python SDK\nDESCRIPTION: Shows how to use the new async support feature in stripe-python by adding an '_async' suffix to request-making methods and using await. This example demonstrates updating a synchronous Customer.create() call to its asynchronous version.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n- cus = stripe.Customer.create(...)\n+ cus = await stripe.Customer.create_async(...)\n```\n\n----------------------------------------\n\nTITLE: Modifying a Customer in Python (New Method)\nDESCRIPTION: Example of how to modify a customer using the new recommended method after the deprecation of the 'save' method in version 5.0.0.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nstripe.Customer.modify(\"cus_123\", email=\"example@test.com\")\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Creation with Keyword Arguments in Python\nDESCRIPTION: This snippet demonstrates the change in how request options are passed to the Customer.create method in Stripe Python v8. Instead of positional arguments, keyword arguments are now required for options like api_key, idempotency_key, stripe_version, and stripe_account.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nstripe.Customer.create(\n  api_key=\"sk_test_123\",\n  idempotency_key=\"KG5LxwFBepaKHyUD\",\n  stripe_version=\"2022-11-15\",\n  stripe_account=\"acct_123\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using Auto-Paging Iterator in Python\nDESCRIPTION: Shows how to use the auto-paging iterator introduced in version 1.28.0 for efficiently iterating through list results.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nfor item in some_list_object.auto_paging_iter():\n    print(item)\n```\n\n----------------------------------------\n\nTITLE: Setting Stripe API Version in Python\nDESCRIPTION: Shows how to set a Stripe API version override in Python code. This functionality was added in version 1.7.8.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nstripe.api_version = \"2020-08-27\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stripe Objects with Expanded Properties\nDESCRIPTION: Demonstrates how to retrieve a Stripe object (in this case a Charge) with expanded properties. This feature was added in version 1.7.9.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nstripe.Charge.retrieve(\"foo\", params={\"expand\":[\"customer\"]})\n```\n\n----------------------------------------\n\nTITLE: Searching Stripe Resources in Python\nDESCRIPTION: Examples of using the new search method to search various Stripe resources like charges, customers, invoices, etc.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nCharge.search()\nCustomer.search()\nInvoice.search()\nPaymentIntent.search()\nPrice.search()\nProduct.search()\nSubscription.search()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Method for Customer in Python\nDESCRIPTION: Example of using the new retrieve_payment_method method on the Customer resource to get a specific payment method.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nCustomer.retrieve_payment_method(\"cus_123\", \"pm_123\")\n```\n\n----------------------------------------\n\nTITLE: Setting Stripe App Info in Python\nDESCRIPTION: Demonstrates how to set app info for use by plugin creators, a feature added in version 1.54.0.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nstripe.set_app_info(\"MyPlugin\", version=\"1.2.34\", url=\"https://myplugin.com\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Pay By Bank Payment Method in Stripe Python SDK\nDESCRIPTION: Adds support for 'pay_by_bank' payment method across various Stripe resources and parameter classes. This allows for integration of pay-by-bank payments in different Stripe operations.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nstripe.PaymentMethod.pay_by_bank\nstripe.PaymentIntent.PaymentMethodOptions.pay_by_bank\nstripe.PaymentIntent.ConfirmParamsPaymentMethodData.pay_by_bank\n```\n\n----------------------------------------\n\nTITLE: Updated Stripe Python SDK Classes and Parameters\nDESCRIPTION: Changes include new support for balances and payouts_list in AccountSession components, capture_method in RevolutPay payment options, and addition of Swish payment method. Also includes type changes and removal of unused config field in forwarding requests.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nstripe.AccountSession.Components.balances\nstripe.AccountSession.CreateParamsComponents.balances\nstripe.AccountSession.Components.payouts_list\nstripe.AccountSession.CreateParamsComponents.payouts_list\n\nstripe.PaymentIntent.ConfirmParamsPaymentMethodOptionsRevolutPay.capture_method\nstripe.PaymentIntent.CreateParamsPaymentMethodOptionsRevolutPay.capture_method\nstripe.PaymentIntent.ModifyParamsPaymentMethodOptionsRevolutPay.capture_method\nstripe.PaymentIntent.PaymentMethodOptions.RevolutPay.capture_method\n\nstripe.PaymentMethodConfiguration.CreateParams.swish\nstripe.PaymentMethodConfiguration.ModifyParams.swish\nstripe.PaymentMethodConfiguration.swish\n```\n\n----------------------------------------\n\nTITLE: Stripe Payment Method Configuration Example\nDESCRIPTION: Code example showing the supported payment method parameters including new twint support.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nstripe.PaymentMethodConfiguration.create(\n    twint={\n        # twint configuration parameters\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Stripe Billing Alert Creation\nDESCRIPTION: Example of creating and managing billing alerts with the new billing.Alert resource.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nstripe.billing.Alert.create()\nstripe.billing.Alert.activate()\nstripe.billing.Alert.deactivate()\nstripe.billing.Alert.archive()\n```\n\n----------------------------------------\n\nTITLE: Adding Financial Account Support in Stripe Treasury Python SDK\nDESCRIPTION: Introduces support for financial accounts in Stripe Treasury, including new parameters and methods for creating, modifying, and closing financial accounts.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nstripe.treasury.FinancialAccount.CreateParams.nickname\nstripe.treasury.FinancialAccount.ModifyParams.forwarding_settings\nstripe.treasury.FinancialAccount.close()\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Pay By Bank Payments in Stripe Python SDK\nDESCRIPTION: Adds support for 'pay_by_bank_payments' capability on Stripe Account and related parameter classes. This enables integration with pay-by-bank payment methods.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nstripe.Account.Capabilities.pay_by_bank_payments\nstripe.Account.CreateParamsCapabilities.pay_by_bank_payments\n```\n\n----------------------------------------\n\nTITLE: Stripe Account Session Components Configuration\nDESCRIPTION: Configuration example for AccountSession components including tax registrations and settings.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nstripe.AccountSession.create(\n    components={\n        \"tax_registrations\": {},\n        \"tax_settings\": {}\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Stripe Python Library to Version 7.7.0\nDESCRIPTION: This code snippet shows the changes made in version 7.7.0 of the Stripe Python library, including support for new resources, methods, and enum values.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\n# New resources added\nClimate.Order\nClimate.Product\nClimate.Supplier\n\n# New methods added to Order resource\nOrder.cancel()\nOrder.create()\nOrder.list()\nOrder.modify()\nOrder.retrieve()\n\n# New methods added to Product and Supplier resources\nProduct.list()\nProduct.retrieve()\nSupplier.list()\nSupplier.retrieve()\n\n# New enum values added\nInvoice.LastFinalizationError.code.financial_connections_account_inactive\nPaymentIntent.LastPaymentError.code.financial_connections_account_inactive\nSetupAttempt.SetupError.code.financial_connections_account_inactive\nSetupIntent.LastSetupError.code.financial_connections_account_inactive\nBalanceTransaction.type.climate_order_purchase\nBalanceTransaction.type.climate_order_refund\n\n# New parameters added\nCheckout.Session.ListParams(created=...)\nCustomer.CreateParamsTax(validate_location=...)\nCustomer.ModifyParamsTax(validate_location=...)\n\n# New enum values for Event.type\nEvent.type.climate.order.canceled\nEvent.type.climate.order.created\nEvent.type.climate.order.delayed\nEvent.type.climate.order.delivered\nEvent.type.climate.order.product_substituted\nEvent.type.climate.product.created\nEvent.type.climate.product.pricing_updated\n\n# New enum value for PaymentIntent and SetupIntent\nPaymentIntent.PaymentMethodOptions.Card.request_three_d_secure.challenge\nSetupIntent.PaymentMethodOptions.Card.request_three_d_secure.challenge\n\n# New enum values for Reporting.ReportRun.CreateParamsParameters.reporting_category\nReporting.ReportRun.CreateParamsParameters.reporting_category.climate_order_purchase\nReporting.ReportRun.CreateParamsParameters.reporting_category.climate_order_refund\n\n# New enum values for WebhookEndpoint\nWebhookEndpoint.CreateParams.enabled_events[].climate.order.canceled\nWebhookEndpoint.CreateParams.enabled_events[].climate.order.created\nWebhookEndpoint.CreateParams.enabled_events[].climate.order.delayed\nWebhookEndpoint.CreateParams.enabled_events[].climate.order.delivered\nWebhookEndpoint.CreateParams.enabled_events[].climate.order.product_substituted\nWebhookEndpoint.CreateParams.enabled_events[].climate.product.created\nWebhookEndpoint.CreateParams.enabled_events[].climate.product.pricing_updated\nWebhookEndpoint.ModifyParams.enabled_events[].climate.order.canceled\nWebhookEndpoint.ModifyParams.enabled_events[].climate.order.created\nWebhookEndpoint.ModifyParams.enabled_events[].climate.order.delayed\nWebhookEndpoint.ModifyParams.enabled_events[].climate.order.delivered\nWebhookEndpoint.ModifyParams.enabled_events[].climate.order.product_substituted\nWebhookEndpoint.ModifyParams.enabled_events[].climate.product.created\nWebhookEndpoint.ModifyParams.enabled_events[].climate.product.pricing_updated\n```\n\n----------------------------------------\n\nTITLE: Adding Support for New Fields in Stripe Python Library 7.6.0\nDESCRIPTION: This code snippet demonstrates the addition of new fields to various resource classes in the Stripe Python library version 7.6.0.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n# New fields added to Charge.PaymentMethodDetails.Card.ThreeDSecure\nCharge.PaymentMethodDetails.Card.ThreeDSecure.electronic_commerce_indicator\nCharge.PaymentMethodDetails.Card.ThreeDSecure.exemption_indicator\nCharge.PaymentMethodDetails.Card.ThreeDSecure.transaction_id\n\n# New field added to SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure\nSetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.electronic_commerce_indicator\nSetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.transaction_id\n\n# New field added to Charge.PaymentMethodDetails.CardPresent\nCharge.PaymentMethodDetails.CardPresent.offline\n\n# New field added to CustomerCashBalanceTransaction\nCustomerCashBalanceTransaction.transferred_to_balance\n\n# New field added to various PaymentIntent and SetupIntent classes\nPaymentIntent.ConfirmParamsPaymentMethodOptionsCard.three_d_secure\nPaymentIntent.CreateParamsPaymentMethodOptionsCard.three_d_secure\nPaymentIntent.ModifyParamsPaymentMethodOptionsCard.three_d_secure\nSetupIntent.ConfirmParamsPaymentMethodOptionsCard.three_d_secure\nSetupIntent.CreateParamsPaymentMethodOptionsCard.three_d_secure\nSetupIntent.ModifyParamsPaymentMethodOptionsCard.three_d_secure\n\n# New fields added to issuing.Authorization.NetworkData\nissuing.Authorization.NetworkData.system_trace_audit_number\nissuing.Authorization.NetworkData.transaction_id\n\n# New fields added to issuing.Authorization classes\nissuing.Authorization.PendingRequest.network_risk_score\nissuing.Authorization.RequestHistory.network_risk_score\nissuing.Authorization.RequestHistory.requested_at\n\n# New field added to issuing.Transaction.NetworkData\nissuing.Transaction.NetworkData.authorization_code\nissuing.Transaction.NetworkData.transaction_id\n```\n\n----------------------------------------\n\nTITLE: Adding New Resource and Methods in Stripe Python Library 7.4.0\nDESCRIPTION: This code snippet demonstrates the addition of a new resource and methods in the Stripe Python library version 7.4.0.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\n# New resource added\nTax.Registration\n\n# New methods added to Registration resource\nRegistration.create()\nRegistration.list()\nRegistration.modify()\n\n# New enum value added to various error code enums\nInvoice.last_finalization_error.code.terminal_reader_hardware_fault\nPaymentIntent.last_payment_error.code.terminal_reader_hardware_fault\nSetupAttempt.setup_error.code.terminal_reader_hardware_fault\nSetupIntent.last_setup_error.code.terminal_reader_hardware_fault\nStripeError.code.terminal_reader_hardware_fault\n\n# New field added to various Quote classes\nQuote.subscription_data.metadata\nQuoteCreateParams.subscription_data.metadata\nQuoteUpdateParams.subscription_data.metadata\n```\n\n----------------------------------------\n\nTITLE: Adding New Fields and Enum Values in Stripe Python Library 7.5.0\nDESCRIPTION: This code snippet shows the addition of new fields and enum values to various classes in the Stripe Python library version 7.5.0.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\n# New field added to Account.CreateParamsSettings\nAccount.CreateParamsSettings.bacs_debit_payments\n\n# New field added to Account.Settings.BacsDebitPayments\nAccount.Settings.BacsDebitPayments.service_user_number\n\n# New field added to Charge.PaymentMethodDetails.Card\nCharge.PaymentMethodDetails.Card.capture_before\n\n# New enum value added to Checkout.Session.PaymentMethodOptions\nCheckout.Session.PaymentMethodOptions.Paypal\n\n# New field added to various CreditNote classes\nCreditNote.CreateParamsLine.tax_amounts\nCreditNote.PreviewParamsLine.tax_amounts\nCreditNote.PreviewLinesParamsLine.tax_amounts\n\n# New field added to Issuing.Transaction\nIssuing.Transaction.network_data\n\n# New field added to Checkout.Session.ListParams\nCheckout.Session.ListParams.status\n```\n\n----------------------------------------\n\nTITLE: Adding New Tax ID Types to Stripe Python Enums\nDESCRIPTION: This update adds support for 15 new tax ID types to multiple Stripe API classes and methods. The new tax ID types are added to enums in classes such as stripe.checkout.Session, stripe.Customer, stripe.Invoice, stripe.tax.Calculation, stripe.tax.Transaction, and stripe.TaxId. This allows for more comprehensive tax ID handling across various Stripe operations.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# New tax ID types added to various Stripe API classes and methods:\n# am_tin, ao_tin, ba_tin, bb_tin, bs_tin, cd_nif, gn_nif, kh_tin, me_pib,\n# mk_vat, mr_nif, np_pan, sn_ninea, sr_fin, tj_tin\n\n# Example of affected classes and methods:\nstripe.checkout.Session.CustomerDetails.TaxId.type\nstripe.Customer.CreateParamsTaxIdDatum.type\nstripe.Customer.CreateTaxIdParams.type\nstripe.Invoice.CustomerTaxId.type\nstripe.Invoice.CreatePreviewParamsCustomerDetailsTaxId.type\nstripe.Invoice.UpcomingParamsCustomerDetailsTaxId.type\nstripe.Invoice.UpcomingLinesParamsCustomerDetailsTaxId.type\nstripe.tax.Calculation.CustomerDetails.TaxId.type\nstripe.tax.Calculation.CreateParamsCustomerDetailsTaxId.type\nstripe.tax.Transaction.CustomerDetails.TaxId.type\nstripe.TaxId.type\nstripe.TaxId.CreateParams.type\n```\n\n----------------------------------------\n\nTITLE: Adding Support for New Payment Methods in Python\nDESCRIPTION: Updates to various Stripe classes to add support for 'jp_credit_transfer' as a payment method type.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nstripe.Invoice.PaymentSettings.payment_method_types\nstripe.Invoice.CreateParamsPaymentSettings.payment_method_types\nstripe.Invoice.ModifyParamsPaymentSettings.payment_method_types\nstripe.Subscription.PaymentSettings.payment_method_types\nstripe.Subscription.CreateParamsPaymentSettings.payment_method_types\nstripe.Subscription.ModifyParamsPaymentSettings.payment_method_types\n```\n\n----------------------------------------\n\nTITLE: Adding Tax Types in Stripe Python SDK\nDESCRIPTION: Updates to various Stripe classes to add support for 'retail_delivery_fee' as a tax type.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nstripe.Invoice.AddLinesParamsLineTaxAmountTaxRateData.tax_type\nstripe.Invoice.UpdateLinesParamsLineTaxAmountTaxRateData.tax_type\nstripe.InvoiceLineItem.ModifyParamsTaxAmountTaxRateData.tax_type\nstripe.tax.Calculation.ShippingCost.TaxBreakdown.TaxRateDetails.tax_type\nstripe.tax.Calculation.TaxBreakdown.TaxRateDetails.tax_type\nstripe.tax.CalculationLineItem.TaxBreakdown.TaxRateDetails.tax_type\nstripe.tax.Transaction.ShippingCost.TaxBreakdown.TaxRateDetails.tax_type\nstripe.TaxRate.tax_type\nstripe.TaxRate.CreateParams.tax_type\nstripe.TaxRate.ModifyParams.tax_type\n```\n\n----------------------------------------\n\nTITLE: Adding State Retail Delivery Fee Support in Python\nDESCRIPTION: Updates to Stripe tax registration classes to add support for 'state_retail_delivery_fee' as a type.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nstripe.tax.Registration.CountryOptions.Us.type\nstripe.tax.Registration.CreateParamsCountryOptionsUs.type\n```\n\n----------------------------------------\n\nTITLE: Adding New API Version Support in Python\nDESCRIPTION: Update to Stripe WebhookEndpoint class to add support for API version '2024-10-28.acacia'.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nstripe.WebhookEndpoint.CreateParams.api_version\n```\n\n----------------------------------------\n\nTITLE: Initializing Stripe with API Version in Python\nDESCRIPTION: Example of how to initialize the Stripe library with a specific API version after upgrading to v6. This is necessary if not upgrading to the latest API version.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nimport stripe\nstripe.api_key = \"sk_test_...\"\nstripe.api_version = '2020-08-27'\n```\n\n----------------------------------------\n\nTITLE: Updating V2 ListObject.data Type Hint in Python\nDESCRIPTION: Changes the type hint for stripe.v2.ListObject.data from List[StripeObject] to List[T], where T is the specific Stripe object contained within the list. This improves type checking accuracy for list objects.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nstripe.v2.ListObject.data: List[T]  # Where T is the specific Stripe object type\n```\n\n----------------------------------------\n\nTITLE: Correcting ThinEvent.related_object.type Property Name in Python\nDESCRIPTION: Breaking change that fixes a typo in the property name of ThinEvent.related_object.type. The underscore is removed to match the API's actual response.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Old usage:\n# event_type = thin_event.related_object.type_\n\n# New usage:\nevent_type = thin_event.related_object.type\n```\n\n----------------------------------------\n\nTITLE: Renaming StripeStreamResponseAsync.read() Method in Python\nDESCRIPTION: Breaking change that renames the 'read()' method of StripeStreamResponseAsync to 'read_async()' for consistency with other async methods in the package. This affects usage of the Quote.pdf_async().read() method.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Old usage:\n# response = Quote.pdf_async().read()\n\n# New usage:\nresponse = Quote.pdf_async().read_async()\n```\n\n----------------------------------------\n\nTITLE: Installing Stripe Python Library\nDESCRIPTION: Example of how to install the Stripe Python library using pip. This is implied from the context, as this is a changelog for a Python library.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\npip install stripe\n```\n\n----------------------------------------\n\nTITLE: Running an Example Script in stripe-python\nDESCRIPTION: Command to execute an example script from the examples folder, setting the Python path to include the parent directory.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/examples/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPYTHONPATH=../ python your_example.py\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Example in stripe-python\nDESCRIPTION: Example command to run a specific script (thinevent_webhook_handler.py) from the examples folder.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/examples/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPYTHONPATH=../ python thinevent_webhook_handler.py\n```\n\n----------------------------------------\n\nTITLE: Installing Stripe Python Library using easy_install\nDESCRIPTION: Alternative command to install the official Stripe Python library using easy_install.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/LONG_DESCRIPTION.rst#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ easy_install stripe\n```\n\n----------------------------------------\n\nTITLE: Required File Names for Stripe Mock Testing\nDESCRIPTION: Specification of the required JSON file names for custom OpenAPI specs and fixtures. The files must be named spec3.json and fixtures3.json and placed in the project directory to be recognized by the test suite.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/tests/openapi/README.md#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nspec3.json\nfixtures3.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Dependencies for Stripe Python SDK\nDESCRIPTION: A requirements specification listing all packages needed to run unit tests for the Stripe Python SDK. It includes HTTP libraries (httpx, aiohttp) with version constraints based on Python version compatibility, as well as testing frameworks like pytest and mock.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/deps/test-requirements.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# packages needed to run unit tests (including extra supported http libraries)\n# version requirements: all supported versions (currently 3.6-3.12)\n\n# This is the last version of httpx compatible with Python 3.6\nhttpx == 0.22.0; python_version == \"3.6\"\nhttpx >= 0.24.1; python_version == \"3.7\"\nhttpx >= 0.27.0; python_version >= \"3.8\"\naiohttp == 3.8.6; python_version <= \"3.7\"\naiohttp == 3.9.4; python_version > \"3.7\"\nanyio[trio] == 3.6.2\n\npytest-mock >= 2.0.0\nmock >= 4.0; python_version < \"3.8\"\npytest-xdist >= 1.31.0\npytest >= 6.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Development Dependencies\nDESCRIPTION: Specifies exact versions of development dependencies for Python static analysis tools. Includes pyright and mypy for type checking, ruff for formatting, and flake8 for linting. Version constraints are carefully chosen to maintain compatibility and avoid specific issues.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/deps/dev-requirements.txt#2025-04-19_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n# packages needed to run static analysis (lints, types, etc)\n# version requirements: any modern python version (currently 3.10)\n\n# typechecking for all versions\n# can't use `>=1.1.339` since it flags override issues, e.g.:\n# > Method \"_cls_delete\" overrides class \"DeletableAPIResource\" in an incompatible manner Parameter \"**params\" has no corresponding parameter Pylance(reportIncompatibleMethodOverride)\n# can probably fix/ignore these issues and move forward, but we're stuck until then\npyright == 1.1.336\n# general typechecking\nmypy == 1.7.0\n# formatting\nruff == 0.9.6\n# linting\n# flake8 7.2.0 bumped to pyflakes 3.3.0, which adds a new lint error around global usage which will need to be manually fixed\nflake8==7.1.2\n```\n\n----------------------------------------\n\nTITLE: Specifying Packaging Dependencies for Stripe Python Library\nDESCRIPTION: This snippet defines the exact versions of twine and build packages required for packaging and releasing the Stripe Python library. The versions are pinned to the latest as of April 8, 2025, with no specific reason given for these particular versions.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/deps/build-requirements.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# packages needed to package & release\n\n# pinned to latest as of 2025-04-08; nothing special about these versions\ntwine == 6.1.0\nbuild == 1.2.2\n```\n\n----------------------------------------\n\nTITLE: Modifying a Customer in Python (Deprecated Method)\nDESCRIPTION: Example of the deprecated method for modifying a customer, which was used prior to version 5.0.0.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\ncustomer = stripe.Customer.retrieve(\"cus_123\")\ncustomer.email = \"example@test.com\"\ncustomer.save()\n```\n\n----------------------------------------\n\nTITLE: Resetting Customer Discount in Python\nDESCRIPTION: Example of how to manually reset a customer's discount property to None after deleting the discount, since the delete_discount method no longer does this automatically.\nSOURCE: https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md#2025-04-19_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\ncustomer.delete_discount()\ncustomer.discount = None\n```"
  }
]