[
  {
    "owner": "rstudio",
    "repo": "shiny",
    "content": "TITLE: Initializing renderCachedPlot for plot caching in Shiny (R)\nDESCRIPTION: This snippet introduces `renderCachedPlot()`, a new function in Shiny 1.2.0 that enables plot caching. This function stores plots in a cache, allowing them to be served almost instantly, significantly improving the performance and responsiveness of Shiny applications that display the same plots multiple times. It's a replacement for `renderPlot` and requires careful consideration of cache storage and invalidation strategies.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_39\n\nLANGUAGE: R\nCODE:\n```\nrenderCachedPlot()\n```\n\n----------------------------------------\n\nTITLE: Dynamic UI Insertion with insertUI in Shiny (R)\nDESCRIPTION: This snippet introduces the `insertUI` function in Shiny, which allows developers to dynamically add arbitrary HTML UI elements on-the-fly in response to user input.  It's used in the server code and allows for imperative logic to add and remove HTML chunks independent of each other.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_61\n\nLANGUAGE: R\nCODE:\n```\nThe `insertUI` and `removeUI` functions, which are used in the server code, allow you to use imperative logic to add and remove arbitrary chunks of HTML (all independent from one another), as many times as you want, whenever you want, wherever you want.\n```\n\n----------------------------------------\n\nTITLE: Debouncing and Throttling Reactives in R\nDESCRIPTION: Introduces the `debounce` and `throttle` functions in R, providing a mechanism to control the rate at which reactive values and expressions invalidate. These functions help to prevent excessive computations and improve performance by limiting the frequency of reactive updates.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_51\n\nLANGUAGE: R\nCODE:\n```\ndebounce\nthrottle\n```\n\n----------------------------------------\n\nTITLE: Adding Busy Indicators to Shiny UI\nDESCRIPTION: This snippet demonstrates how to add busy indicators to the Shiny UI using the `useBusyIndicators()` function. This will show spinners when outputs are recalculating and a pulsing banner when the app is busy.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_3\n\nLANGUAGE: R\nCODE:\n```\nuseBusyIndicators()\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling with shiny.error option in R\nDESCRIPTION: This code shows how to set the `shiny.error` option to a function that acts as an error handler. When an error occurs in the Shiny app (in user-provided code), this function is called.  Setting it to `recover` allows interactive debugging of the app.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_90\n\nLANGUAGE: R\nCODE:\n```\noptions(shiny.error = recover)\n```\n\n----------------------------------------\n\nTITLE: Testing Shiny Applications with shinytest in R\nDESCRIPTION: Introduces support for automated testing of Shiny applications with the `shinytest` package in R. This feature enables developers to write and run automated tests to verify the behavior and functionality of their Shiny applications, ensuring robustness and reliability. Shinytest has not yet been released on CRAN, but will be soon.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_50\n\nLANGUAGE: R\nCODE:\n```\nshinytest\n```\n\n----------------------------------------\n\nTITLE: Using Hidden Tabs in Tabset Panels\nDESCRIPTION: The `tabsetPanel()` now supports a `type = \"hidden\"` option. This lets the active tab be controlled by other input elements (like `radioButtons()`).  `updateTabsetPanel()` sets the tab and `tabsetPanelBody()` provides the tab content.  Refer to `help(tabsetPanel)` for examples.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_34\n\nLANGUAGE: R\nCODE:\n```\ntabsetPanel(type = \"hidden\")\nupdateTabsetPanel()\ntabsetPanelBody()\n```\n\n----------------------------------------\n\nTITLE: Running Shiny Example App in R\nDESCRIPTION: This code snippet demonstrates how to load the Shiny library and run a pre-packaged example application.  It first loads the `shiny` library, making its functions available.  Then, it uses `runExample()` to launch an example Shiny app, demonstrating basic functionality. The first example includes the source code, the second lists available examples.\nSOURCE: https://github.com/rstudio/shiny/blob/main/README.md#_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nlibrary(shiny)\n# Launches an app, with the app's source code included\nrunExample(\"06_tabsets\")\n# Lists more prepackaged examples\nrunExample()\n```\n\n----------------------------------------\n\nTITLE: Creating Shiny App Objects Shiny R\nDESCRIPTION: This snippet introduces Shiny app objects created using `shinyApp()`. These objects essentially replace the older method of using a `list(ui=..., server=...)` for `runApp`, providing a more structured way to define and run Shiny applications. Shiny app objects are tagged with class `shiny.appobj` and can be run simply by printing them.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_75\n\nLANGUAGE: R\nCODE:\n```\nIntroduced Shiny app objects (see `?shinyApp`). These essentially replace the little-advertised ability for `runApp` to take a `list(ui=..., server=...)` as the first argument instead of a directory (though that ability remains for backward compatibility). Unlike those lists, Shiny app objects are tagged with class `shiny.appobj` so they can be run simply by printing them.\n```\n\n----------------------------------------\n\nTITLE: Using Showcase Mode with runApp in R\nDESCRIPTION: This code demonstrates how to run a Shiny application in Showcase mode by passing the `display.mode=\"showcase\"` argument to the `runApp()` function. Showcase mode displays the R code for the application directly within the application itself, making it useful for demonstrations and tutorials.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_85\n\nLANGUAGE: R\nCODE:\n```\nrunApp(display.mode=\"showcase\")\n```\n\n----------------------------------------\n\nTITLE: Introducing Shiny.setInputValue for direct input value setting (JavaScript)\nDESCRIPTION: This snippet introduces `Shiny.setInputValue(name, value, {priority: \"event\"})` in Shiny 1.1.0, replacing `Shiny.onInputChange(name, value)` but maintaining backward compatibility.  The key change is the introduction of the `priority` option. When set to `\"event\"`, it forces Shiny to send the value and trigger reactivity even if the value is a duplicate of the current input, providing more control over input updates.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\nShiny.setInputValue(\"name\", value, {priority: \"event\"})\n```\n\n----------------------------------------\n\nTITLE: Ignoring Initial Execution in observeEvent and eventReactive in R\nDESCRIPTION: Adds the `ignoreInit` argument to `observeEvent` and `eventReactive` in R, allowing the action to not be triggered during initial creation or initialization. Setting `ignoreInit = TRUE` ensures that the `observeEvent` (or `eventReactive`) is *never* run right away, offering finer-grained control over when reactive expressions are executed.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_52\n\nLANGUAGE: R\nCODE:\n```\nobserveEvent\neventReactive\nignoreInit = TRUE\n```\n\n----------------------------------------\n\nTITLE: Creating Modules in Shiny (R)\nDESCRIPTION: Shows how to use the `moduleServer` function, which provides a simpler interface for creating and using modules.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_29\n\nLANGUAGE: R\nCODE:\n```\nmoduleServer\n```\n\n----------------------------------------\n\nTITLE: Displaying Data Tables Using renderDataTable in R\nDESCRIPTION: This code shows how to use the `renderDataTable()` function to display tables using the DataTables JavaScript library.  It allows features such as pagination, searching, and sorting. Options for the DataTable can be passed using the options argument.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_86\n\nLANGUAGE: R\nCODE:\n```\nrenderDataTable()\n```\n\n----------------------------------------\n\nTITLE: Using inline outputs in Shiny R\nDESCRIPTION: This snippet introduces the `inline` argument in `textOutput()`, `imageOutput()`, `plotOutput()`, and `htmlOutput()` functions. When `inline = TRUE`, the outputs are placed in `span()` instead of `div()`, allowing inline display of outputs within text, especially useful in R Markdown documents.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_73\n\nLANGUAGE: R\nCODE:\n```\nAdded an `inline` argument to `textOutput()`, `imageOutput()`, `plotOutput()`, and `htmlOutput()`. When `inline = TRUE`, these outputs will be put in `span()` instead of the default `div()`.\n```\n\n----------------------------------------\n\nTITLE: Implementing server-side variable selection for tidy evaluation (R)\nDESCRIPTION: This snippet mentions the addition of functions for selecting variables of a data frame, with the output values to be used within tidy evaluation in Shiny 1.2.0.  The functions are `varSelectInput`, `varSelectizeInput`, `updateVarSelectInput`, and `updateVarSelectizeInput`. These functions facilitate dynamic selection of variables from a data frame within a Shiny application.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_41\n\nLANGUAGE: R\nCODE:\n```\nvarSelectInput()\nvarSelectizeInput()\nupdateVarSelectInput()\nupdateVarSelectizeInput()\n```\n\n----------------------------------------\n\nTITLE: Passing JavaScript Code to renderDataTable Options in R\nDESCRIPTION: This code demonstrates how to pass literal JavaScript code to the DataTables library through the `options` argument in `renderDataTable()` using `I()`. This allows the use of JavaScript objects and functions within the DataTables configuration, enabling custom functionalities.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_87\n\nLANGUAGE: R\nCODE:\n```\nrenderDataTable(options = list(pageLength = 5, callback = I('function(table) { ... }')))\n```\n\n----------------------------------------\n\nTITLE: Modifying UI Elements in radioButtons and checkboxGroupInput in R\nDESCRIPTION: Enhances `radioButtons()` and `checkboxGroupInput()` in R by adding `choiceNames` and `choiceValues` arguments, allowing for more complex UI elements like icons and images to be used as choices.  `choiceNames` accepts arbitrary UI created with `HTML()` or `tags()`, providing flexibility in customizing the visual representation of choices.  The values behind those names are passed in through `choiceValues`, which must still be simple text.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_45\n\nLANGUAGE: R\nCODE:\n```\nradioButtons()\ncheckboxGroupInput()\nchoiceNames\nchoiceValues\nHTML()\ntags()\n```\n\n----------------------------------------\n\nTITLE: Storing Reactive Values with reactiveVal in R\nDESCRIPTION: Introduces the `reactiveVal` function in R for storing a single reactive value that can be read and written reactively. It simplifies managing individual reactive values compared to `reactiveValues`, which manages multiple values by name. `reactiveVal` allows you to store reactive data and trigger updates in Shiny applications. \nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_44\n\nLANGUAGE: R\nCODE:\n```\nreactiveVal\n```\n\n----------------------------------------\n\nTITLE: Using a Function for renderDataTable Options in R\nDESCRIPTION: The `options` argument in `renderDataTable()` can now accept a function that returns a list of options. This allows for the use of reactive values within the options, enabling dynamic configuration of the DataTable based on user input or other reactive changes.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_88\n\nLANGUAGE: R\nCODE:\n```\nrenderDataTable(options = function() { \n  list(pageLength = input$pageLength)\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Shiny Developer Mode in R\nDESCRIPTION: This snippet shows how to enable Shiny's developer mode using the `devmode()` function. This enables features like auto-reload and the Shiny Client Console, which are useful for debugging and development.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ndevmode(TRUE)\n```\n\n----------------------------------------\n\nTITLE: Reactive Logging Configuration in Shiny\nDESCRIPTION: This code snippet demonstrates how to enable reactive logging in a Shiny application for debugging and visualization purposes. The `options(shiny.reactlog=TRUE)` command sets the global option to enable logging of reactive program execution states. Once enabled, pressing Ctrl+F3 (Cmd+F3 on Mac) in the browser while interacting with the app will launch an interactive visualization of the logged reactivity.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_91\n\nLANGUAGE: R\nCODE:\n```\noptions(shiny.reactlog=TRUE)\n```\n\n----------------------------------------\n\nTITLE: Running observers only once\nDESCRIPTION: Adds the `once` argument to `observeEvent` in R.  When set to `TRUE`, it results in the observer being destroyed (stop observing) after the first time that `handlerExpr` is run (i.e. `once = TRUE` guarantees that the observer only runs, at most, once).\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_53\n\nLANGUAGE: R\nCODE:\n```\nobserveEvent\nonce = TRUE\n```\n\n----------------------------------------\n\nTITLE: Sourcing R Files Automatically\nDESCRIPTION: If the `shiny.autoload.r` option is set to `TRUE`, all files ending in `.r` or `.R` located in a directory named `R/` adjacent to the Shiny application are sourced upon application startup. This simplifies the organization and management of R code within a Shiny project, automatically loading helper functions or utility scripts.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_36\n\nLANGUAGE: R\nCODE:\n```\noptions(shiny.autoload.r = TRUE)\n```\n\n----------------------------------------\n\nTITLE: Updating Selectize Input in Shiny R\nDESCRIPTION: This snippet introduces the `updateSelectizeInput()` function, which enables server-side processing of searching within `selectizeInput` controls. This allows for faster search results, especially when dealing with large datasets, by leveraging R's processing capabilities.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_80\n\nLANGUAGE: R\nCODE:\n```\nAdded the `updateSelectizeInput()` function to make it possible to process searching on the server side (i.e. using R), which can be much faster than the client side processing (i.e. using HTML and JavaScript).\n```\n\n----------------------------------------\n\nTITLE: Allowing Reconnection in Shiny\nDESCRIPTION: This code snippet enables the client browser to reconnect to a new session on the server. This requires a Shiny Server version that supports reconnections and can be enabled by setting `session$allowReconnect(TRUE)`.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_63\n\nLANGUAGE: R\nCODE:\n```\nsession$allowReconnect(TRUE)\n```\n\n----------------------------------------\n\nTITLE: Using selectizeInput Function in R\nDESCRIPTION: This snippet shows the usage of the `selectizeInput()` function, which uses the selectize.js JavaScript library to enhance the basic select input. This provides advanced functionalities such as improved search, tagging, and other UI enhancements for selection input fields.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_84\n\nLANGUAGE: R\nCODE:\n```\nselectizeInput()\n```\n\n----------------------------------------\n\nTITLE: Testing Server Functions in Shiny (R)\nDESCRIPTION: Shows how to use `testServer()` for testing reactive behavior inside server functions and modules.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_28\n\nLANGUAGE: R\nCODE:\n```\ntestServer()\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Input Bindings in Shiny (JavaScript)\nDESCRIPTION: This snippet refers to the `Shiny.inputBindings.register` JavaScript API and the `InputBinding` class.  These features enable developers to create custom input controls for Shiny applications. This would likely involve defining how the custom input interacts with Shiny's reactive system.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_95\n\n\n\n----------------------------------------\n\nTITLE: Session User Data in Shiny R\nDESCRIPTION: Implements a `userData` environment to `session`, for storing arbitrary session-related variables in R. While session-scoped variables can be created locally in the Shiny server function, `session$userData` may be more convenient for some advanced scenarios.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_54\n\nLANGUAGE: R\nCODE:\n```\nsession$userData\n```\n\n----------------------------------------\n\nTITLE: Adding Resource Paths in Shiny (R)\nDESCRIPTION: This snippet refers to the `addResourcePath` function in Shiny.  It's intended for reusable component authors to access resources like CSS, JavaScript, and images from package directories.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_100\n\n\n\n----------------------------------------\n\nTITLE: Adding datesdisabled and daysofweekdisabled parameters to dateInput (R)\nDESCRIPTION: This snippet introduces `datesdisabled` and `daysofweekdisabled` as new parameters to the `dateInput()` function in Shiny 1.2.0.  These parameters allow developers to disable specific dates or days of the week in the date picker, enhancing control over user input and enabling specific date selection restrictions. `datesdisabled` expects a character vector with values in `yyyy/mm/dd` format and `daysofweekdisabled` expects an integer vector with day integer ids (Sunday=0, Saturday=6).\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_40\n\nLANGUAGE: R\nCODE:\n```\ndateInput(datesdisabled = c(\"yyyy/mm/dd\"), daysofweekdisabled = c(0:6))\n```\n\n----------------------------------------\n\nTITLE: BSLib Theme Setup in R\nDESCRIPTION: This snippet shows how to enable Bootstrap 5 support in a Shiny application by providing a `bslib::bs_theme()` object with `version = 5` to a page layout function like `fluidPage()`, `navbarPage()`, etc. This configures the app to use Bootstrap 5 for its styling.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_16\n\nLANGUAGE: R\nCODE:\n```\nbslib::bs_theme(version = 5)\n```\n\n----------------------------------------\n\nTITLE: Adding a Function Class to Reactive Objects\nDESCRIPTION: The `'function'` class is added to `reactive()` and `reactiveVal()` objects. This allows for easier identification and handling of reactive expressions and reactive values.  It facilitates the use of `is.function()` or similar checks to determine if an object is reactive.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_33\n\nLANGUAGE: R\nCODE:\n```\nreactive()\nreactiveVal()\n```\n\n----------------------------------------\n\nTITLE: Accessing Uploaded Files in Shiny Server (R)\nDESCRIPTION: This snippet describes how to access the uploaded files in the server function of a Shiny application using `input$foo`. The uploaded files are accessed through the input object using the ID assigned to the file input in the UI.\nSOURCE: https://github.com/rstudio/shiny/blob/main/inst/examples-shiny/09_upload/Readme.md#_snippet_1\n\nLANGUAGE: R\nCODE:\n```\ninput$foo\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML5 pushState for pseudo-navigation in R\nDESCRIPTION: Adds support for HTML5's `pushState` for implementing pseudo-navigation in Shiny apps, allowing the application to update the URL in the browser without causing a full page reload. This feature is enabled through the functions `updateQueryString` and `getQueryString`, which enable manipulating the query string and integrating with the browser's history.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_47\n\nLANGUAGE: R\nCODE:\n```\nupdateQueryString\ngetQueryString\n```\n\n----------------------------------------\n\nTITLE: Add Modal Dialog with XL Size in R\nDESCRIPTION: This snippet shows how to create a modal dialog with the `size = \"xl\"` option, allowing for extra-large modal dialogs in Shiny applications.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_19\n\nLANGUAGE: R\nCODE:\n```\nmodalDialog(size = \"xl\")\n```\n\n----------------------------------------\n\nTITLE: Using Layout Functions in Shiny R\nDESCRIPTION: This snippet describes the use of `flowLayout`, `splitLayout`, and `inputPanel` functions for arranging UI elements side by side in Shiny applications. `flowLayout` arranges elements left-to-right and top-to-bottom, `splitLayout` divides horizontal space evenly, and `inputPanel` provides a flow layout with a grey background, suitable for input controls.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_77\n\nLANGUAGE: R\nCODE:\n```\nAdded `flowLayout`, `splitLayout`, and `inputPanel` functions for putting UI elements side by side. `flowLayout` lays out its children in a left-to-right, top-to-bottom arrangement. `splitLayout` evenly divides its horizontal space among its children (or unevenly divides if `cellWidths` argument is provided). `inputPanel` is like `flowPanel`, but with a light grey background, and is intended to be used to encapsulate small input controls wherever vertical space is at a premium.\n```\n\n----------------------------------------\n\nTITLE: Clearing Brushes in Shiny\nDESCRIPTION: This code demonstrates how to programmatically clear brushes from `imageOutput` or `plotOutput` using either R or JavaScript. In R, `session$resetBrush(brushId)` is used, and in JavaScript, `Shiny.resetBrush(brushId)` is used.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_65\n\nLANGUAGE: R\nCODE:\n```\nsession$resetBrush(brushId)\n```\n\n----------------------------------------\n\nTITLE: Clearing Brushes in Shiny (JavaScript)\nDESCRIPTION: This code demonstrates how to programmatically clear brushes from `imageOutput` or `plotOutput` using either R or JavaScript. In R, `session$resetBrush(brushId)` is used, and in JavaScript, `Shiny.resetBrush(brushId)` is used.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_66\n\nLANGUAGE: JavaScript\nCODE:\n```\nShiny.resetBrush(brushId)\n```\n\n----------------------------------------\n\nTITLE: Configuring DataTables search options in Shiny R\nDESCRIPTION: This snippet demonstrates how to configure DataTables search options in Shiny to enable case-sensitive searching or regular expressions. It involves setting the `search$caseInsensitive` and `search$regex` options within the `renderDataTable` function. These options allow customization of the search behavior in DataTables.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_71\n\nLANGUAGE: R\nCODE:\n```\nrenderDataTable(..., options = list(search = list(caseInsensitve = FALSE, regex = TRUE)))\n```\n\n----------------------------------------\n\nTITLE: Adding File Upload Input in Shiny UI (R)\nDESCRIPTION: This snippet demonstrates how to add a file upload input in the UI of a Shiny application using the `fileInput()` function. The `fileInput('foo')` call creates a file upload input with the ID 'foo'.\nSOURCE: https://github.com/rstudio/shiny/blob/main/inst/examples-shiny/09_upload/Readme.md#_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nfileInput('foo')\n```\n\n----------------------------------------\n\nTITLE: Installing Shiny TypeScript Definitions\nDESCRIPTION: This command installs the Shiny TypeScript definitions from GitHub, matching the tag to your current Shiny CRAN release.  It adds a global type definition of `Shiny` and makes it available within your project.\nSOURCE: https://github.com/rstudio/shiny/blob/main/srcts/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add https://github.com/rstudio/shiny#v1.7.0\n```\n\n----------------------------------------\n\nTITLE: Updating Radio Buttons and Checkbox Groups in Shiny (R)\nDESCRIPTION: This snippet addresses a bug fix related to `updateRadioButtons()` and `updateCheckboxGroupInput()` in Shiny. It corrects an issue where these functions were not working correctly when the choices were given as a numeric vector, resolving a bug introduced by a previous fix.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_59\n\nLANGUAGE: R\nCODE:\n```\nFixed #1093 better: `updateRadioButtons()` and `updateCheckboxGroupInput()` were not working correctly if the choices were given as a numeric vector. This had been solved in #1291, but that introduced a different bug #1396 that this better fix avoids. (#1370)\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Information\nDESCRIPTION: `getDefaultReactiveDomain()` can now be called inside a `session$onSessionEnded` callback. It will now return the calling session's information, providing access to session-specific data and functionalities during the session end event. This extends the utility of `getDefaultReactiveDomain()` within session management.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_32\n\nLANGUAGE: R\nCODE:\n```\ngetDefaultReactiveDomain()\n```\n\n----------------------------------------\n\nTITLE: Using reactiveConsole() in Shiny (R)\nDESCRIPTION: Explains the use of the `reactiveConsole()` function, which facilitates interactive experimentation with reactivity at the console.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_24\n\nLANGUAGE: R\nCODE:\n```\nreactiveConsole()\n```\n\n----------------------------------------\n\nTITLE: Binding/Unbinding HTML Elements Dynamically in Shiny (JavaScript)\nDESCRIPTION: This snippet refers to the JavaScript API calls `Shiny.bindInputs(scope)`, `.unbindInputs(scope)`, `.bindOutputs(scope)`, and `.unbindOutputs(scope)`. These calls enable dynamic binding and unbinding of HTML elements, facilitating the creation of more flexible and interactive Shiny applications.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_99\n\n\n\n----------------------------------------\n\nTITLE: Installing a specific version of Shiny using devtools\nDESCRIPTION: This R code demonstrates how to install a specific version of the Shiny package using the `install_version()` function from the `devtools` package. This is useful for maintaining compatibility with older applications or reproducing specific environments. First checks for presence of `devtools` and installs it if needed.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_70\n\nLANGUAGE: r\nCODE:\n```\n# Install devtools if you don't already have it:\ninstall.package(\"devtools\")\n\n# Install the last version of Shiny prior to 0.11\ndevtools::install_version(\"shiny\", \"0.10.2.2\")\n```\n\n----------------------------------------\n\nTITLE: Updating Action Link Labels\nDESCRIPTION: The `updateActionLink()` function updates the label and/or icon value of an `actionLink()` input. This provides a way to dynamically change the appearance of action links based on user interaction or application state.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_35\n\nLANGUAGE: R\nCODE:\n```\nupdateActionLink()\n```\n\n----------------------------------------\n\nTITLE: Icon Usage with FontAwesome in R\nDESCRIPTION: This snippet illustrates how to use icons from FontAwesome in a Shiny application. It relies on the `{fontawesome}` package for managing FontAwesome icons, simplifying the process of using the latest icons.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_18\n\nLANGUAGE: R\nCODE:\n```\nicon(lib=\"fontawesome\")\n```\n\n----------------------------------------\n\nTITLE: Reading Names of Input in Shiny (R)\nDESCRIPTION: This snippet refers to reading the names of the input using `names(input)` in Shiny. This allows developers to access the names of the input values in their Shiny applications.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_97\n\nLANGUAGE: R\nCODE:\n```\nnames(input)\n```\n\n----------------------------------------\n\nTITLE: Slider Input Binding: Setting Value Immediately in Shiny (R)\nDESCRIPTION: This snippet describes a bug fix in Shiny where `sliderInputBinding.setValue()` was modified to send a slider's value immediately, instead of waiting for the default 250ms debounce delay. This enhances the responsiveness of slider inputs in Shiny applications.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_58\n\nLANGUAGE: R\nCODE:\n```\n`sliderInputBinding.setValue()` now sends a slider's value immediately, instead of waiting for the usual 250ms debounce delay. (#1429)\n```\n\n----------------------------------------\n\nTITLE: Using inline argument for checkboxGroupInput/radioButtons Shiny R\nDESCRIPTION: This snippet describes the addition of an `inline` argument to `checkboxGroupInput()` and `radioButtons()` functions. Setting `inline = TRUE` allows for the horizontal layout of checkboxes or radio buttons, providing more compact UI designs.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_79\n\nLANGUAGE: R\nCODE:\n```\nAdded an `inline` argument (TRUE/FALSE) in `checkboxGroupInput()` and `radioButtons()` to allow the horizontal layout (inline = TRUE) of checkboxes or radio buttons.\n```\n\n----------------------------------------\n\nTITLE: Accessing Shiny Version from JavaScript (JavaScript)\nDESCRIPTION: This snippet shows how to access the Shiny version from JavaScript using `Shiny.version`. It also introduces `Shiny.compareVersion()`, a new function for comparing version strings. This allows JavaScript code within a Shiny application to adapt its behavior based on the Shiny version being used.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\nShiny.version\nShiny.compareVersion()\n```\n\n----------------------------------------\n\nTITLE: JavaScript Event for Input Changes\nDESCRIPTION: Enhances the `shiny:inputchanged` JavaScript event by including two new fields: `binding` and `el`, which contain the input binding and DOM element, respectively. Additionally, `Shiny.onInputChange()` now accepts an optional argument, `opts`, which can contain the same fields. These improvements provide more context and control when handling input changes in Shiny applications.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\n`shiny:inputchanged`\nbinding\nel\nShiny.onInputChange()\nopts\n```\n\n----------------------------------------\n\nTITLE: Watching for File Changes with esbuild\nDESCRIPTION: This command uses esbuild to watch for changes in the `srcts/src` directory and automatically rebuild the JavaScript files, facilitating rapid development.\nSOURCE: https://github.com/rstudio/shiny/blob/main/srcts/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn watch\n```\n\n----------------------------------------\n\nTITLE: Adding a Checkbox Group Input in Shiny (R)\nDESCRIPTION: This snippet refers to the introduction of the `checkboxGroupInput` control in Shiny. It allows developers to present a list of checkboxes to the user and retrieve a vector of the selected values as input.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_94\n\n\n\n----------------------------------------\n\nTITLE: JavaScript Injecting for Testing\nDESCRIPTION: Added support for injecting JavaScript code when the `shiny.testmode` option is set to `TRUE`. This makes it possible to record test events interactively.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_56\n\nLANGUAGE: JavaScript\nCODE:\n```\nshiny.testmode\n```\n\n----------------------------------------\n\nTITLE: Error Sanitization in Shiny\nDESCRIPTION: This code snippet shows how to globally sanitize error messages in a Shiny application. By setting the `shiny.sanitize.errors` option to `TRUE`, the original error messages are suppressed, preventing the leakage of sensitive information.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_62\n\nLANGUAGE: R\nCODE:\n```\noptions(shiny.sanitize.errors = TRUE)\n```\n\n----------------------------------------\n\nTITLE: Auto Build and Browser Refresh (Linux)\nDESCRIPTION: This bash command uses `find` and `entr` to monitor changes in the `srcts` directory. When a change is detected, it executes the Grunt build process and then uses `xdotool` to simulate a Ctrl+R keypress, effectively reloading the active Chrome window.  Requires `entr` and `xdotool` to be installed.\nSOURCE: https://github.com/rstudio/shiny/blob/main/srcts/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfind ../srcts/ | entr bash -c './node_modules/grunt/bin/grunt && xdotool search --onlyvisible --class Chrome windowfocus key ctrl+r'\n```\n\n----------------------------------------\n\nTITLE: Utilizing Custom JavaScript Function with DataTables in R\nDESCRIPTION: This example demonstrates using the `callback` argument in `renderDataTable()` to apply a custom JavaScript function to the DataTable object. This provides an easier way to integrate DataTables plugins or perform custom actions after the DataTable has been initialized.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_89\n\nLANGUAGE: R\nCODE:\n```\nrenderDataTable(callback = I('function(table) { alert(\"Table created!\"); }'))\n```\n\n----------------------------------------\n\nTITLE: Customizing Progress Bar Styles in Shiny (R)\nDESCRIPTION: This snippet describes how to customize progress bars in Shiny applications. Users who had previously customized progress bars with their own CSS can add the `style = \"old\"` argument to their `withProgress()` call (or `Progress$new()`) to maintain the original appearance. Alternatively, `shinyOptions(progress.style = \"old\")` can be called in the app's server function to apply the old styling to all progress indicators.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_60\n\nLANGUAGE: R\nCODE:\n```\nIf you were already using progress bars and had customized them with your own CSS, you can add the `style = \\\"old\\\"` argument to your `withProgress()` call (or `Progress$new()`). This will result in the same appearance as before. You can also call `shinyOptions(progress.style = \\\"old\\\")` in your app's server function to make all progress indicators use the old styling.\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Responsive Images in Shiny\nDESCRIPTION: This HTML snippet shows the resulting HTML code generated by the R code using `img()`. The `img-responsive` class ensures that the image scales properly within its container, adapting to different screen sizes.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_69\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"picture.png\" class=\"img-responsive\">\n```\n\n----------------------------------------\n\nTITLE: Rendering tabsetPanel with Pills HTML\nDESCRIPTION: This snippet shows the HTML structure when using 'pills' instead of the default tabs in a Shiny tabsetPanel. The primary difference is the use of the `nav-pills` class.  The `active` class is used to indicate the currently selected pill. It also showcases an icon within a tab.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/_snaps/tabPanel.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"tabbable\">\n  <ul class=\"nav nav-pills\" data-tabsetid=\"4785\">\n    <li>\n      <a href=\"#tab-4785-1\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"A\">A</a>\n    </li>\n    <li class=\"active\">\n      <a href=\"#tab-4785-2\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"B\">\n        <i aria-label=\"github icon\" class=\"fab fa-github fa-fw\" role=\"presentation\"></i>\n        B\n      </a>\n    </li>\n    <li class=\"dropdown\">\n      <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" data-bs-toggle=\"dropdown\" data-value=\"Menu\">\n        Menu\n        <b class=\"caret\"></b>\n      </a>\n      <ul class=\"dropdown-menu\" data-tabsetid=\"1502\">\n        <li>\n          <a href=\"#tab-1502-1\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"C\">C</a>\n        </li>\n      </ul>\n    </li>\n  </ul>\n  <div class=\"content-header\"></div>\n  <div class=\"tab-content\" data-tabsetid=\"4785\">\n    <div class=\"tab-pane\" data-value=\"A\" id=\"tab-4785-1\">a</div>\n    <div class=\"tab-pane active\" data-icon-class=\"fab fa-github fa-fw\" data-value=\"B\" id=\"tab-4785-2\">b</div>\n    <div class=\"tab-pane\" data-value=\"C\" id=\"tab-1502-1\">c</div>\n  </div>\n  <div class=\"content-footer\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Step Parameter to Numeric Input in Shiny (R)\nDESCRIPTION: This snippet refers to the addition of the `step` parameter to the `numericInput` function in Shiny. This parameter allows developers to control the increment/decrement value when the user interacts with the numeric input control.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_96\n\n\n\n----------------------------------------\n\nTITLE: Creating Shiny App Template (R)\nDESCRIPTION: Illustrates how to create a new template Shiny application using the `shinyAppTemplate()` function, where components are optional, such as helper files in an R/ subdirectory, a module, and various kinds of tests.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_26\n\nLANGUAGE: R\nCODE:\n```\nshinyAppTemplate()\n```\n\n----------------------------------------\n\nTITLE: Setting width in renderPrint function Shiny R\nDESCRIPTION: This snippet demonstrates the addition of the 'width' argument to `renderPrint`, which controls the width of the text output. This allows adjusting the text output width, improving the readability of printed content, especially for wide datasets.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_81\n\nLANGUAGE: R\nCODE:\n```\n`renderPrint` gained a new argument 'width' to control the width of the text output, e.g. renderPrint({mtcars}, width = 40).\n```\n\n----------------------------------------\n\nTITLE: Rendering tabsetPanel with Active Dropdown HTML\nDESCRIPTION: This snippet demonstrates the HTML structure for a Shiny tabsetPanel where the dropdown menu is active. It shows how the `active` class is applied to the dropdown `li` and the corresponding `li` within the dropdown menu, along with the active tab pane.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/_snaps/tabPanel.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"tabbable\">\n  <ul class=\"nav nav-tabs\" data-tabsetid=\"4785\">\n    <li>\n      <a href=\"#tab-4785-1\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"A\">A</a>\n    </li>\n    <li>\n      <a href=\"#tab-4785-2\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"B\">\n        <i aria-label=\"github icon\" class=\"fab fa-github fa-fw\" role=\"presentation\"></i>\n        B\n      </a>\n    </li>\n    <li class=\"dropdown active\">\n      <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" data-bs-toggle=\"dropdown\" data-value=\"Menu\">\n        Menu\n        <b class=\"caret\"></b>\n      </a>\n      <ul class=\"dropdown-menu\" data-tabsetid=\"1502\">\n        <li class=\"active\">\n          <a href=\"#tab-1502-1\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"C\">C</a>\n        </li>\n      </ul>\n    </li>\n  </ul>\n  <div class=\"tab-content\" data-tabsetid=\"4785\">\n    <div class=\"tab-pane\" data-value=\"A\" id=\"tab-4785-1\">a</div>\n    <div class=\"tab-pane\" data-value=\"B\" data-icon-class=\"fab fa-github fa-fw\" id=\"tab-4785-2\">b</div>\n    <div class=\"tab-pane active\" data-value=\"C\" id=\"tab-1502-1\">c</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating option groups in selectize input Shiny R\nDESCRIPTION: This snippet demonstrates how to create option groups in `selectInput()`/`selectizeInput()` using a list of sub-lists for the `choices` argument. When a sub-list has a length greater than 1, the HTML tag `<optgroup>` is used, allowing for structured grouping of options in the select input.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_74\n\nLANGUAGE: R\nCODE:\n```\nWhen the `choices` argument for `selectInput()`/`selectizeInput()` is a list of sub-lists and any sub-list is of length greater than 1, the HTML tag `<optgroup>` will be used.\n```\n\n----------------------------------------\n\nTITLE: JavaScript Promise Usage with Shiny.bindAll()\nDESCRIPTION: This JavaScript code snippet illustrates how to use `.then()` callback with the `Shiny.bindAll()` function, which is now asynchronous in Shiny v1.8.0. If downstream code relies on `Shiny.bindAll()` being synchronous, placing that code in a `.then()` callback (or using `await` in an `async` function) ensures that it executes after the binding is complete, preventing potential breaking changes.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nShiny.bindAll(...).then(() => {\n  // Downstream code that depends on bindAll completion\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function example() {\n  await Shiny.bindAll(...);\n  // Downstream code that depends on bindAll completion\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering NavlistPanel with String Input\nDESCRIPTION: This snippet renders a navlistPanel component. It takes a `nav_list` variable, which likely defines the structure and content of the navlistPanel, as input. The output is the HTML markup generated by Shiny for the navlistPanel, including the navigation list and associated tab content.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/_snaps/tabPanel.md#_snippet_7\n\nLANGUAGE: R\nCODE:\n```\nnav_list\n```\n\n----------------------------------------\n\nTITLE: Rendering Tabset with Shiny.tag Input\nDESCRIPTION: This snippet renders a tabset using `Shiny.tag` input (assigned to the variable `tab_tags`). `Shiny.tag` probably provides a lower-level interface for creating Shiny UI elements. The output is the HTML markup for the tabset, including the tab headers and content areas. The description notes that using this kind of input may generate a warning.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/_snaps/tabPanel.md#_snippet_9\n\nLANGUAGE: R\nCODE:\n```\ntab_tags\n```\n\n----------------------------------------\n\nTITLE: Running Shiny App with Custom Host Configuration in R\nDESCRIPTION: This code snippet demonstrates how to specify the `host` parameter when running a Shiny application using the `runApp()` function. The `host` parameter allows you to control the network interface that the Shiny application listens on. Using \"0.0.0.0\" makes the app accessible from other machines.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_83\n\nLANGUAGE: R\nCODE:\n```\nrunApp(host = \"0.0.0.0\")\n```\n\n----------------------------------------\n\nTITLE: JavaScript Event for File Downloads\nDESCRIPTION: Introduces the `shiny:filedownload` JavaScript event, which is triggered when a `downloadButton` or `downloadLink` is clicked. This event enables developers to execute custom JavaScript code when a file download is initiated in a Shiny application, potentially for tracking downloads or performing other client-side actions. Additionally, the values of `downloadHandler`s are not recorded in test snapshots because the values change every time the application is run.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\n`shiny:filedownload`\n```\n\n----------------------------------------\n\nTITLE: Rendering tabsetPanel with bslib_tags and Pills HTML\nDESCRIPTION: This snippet shows the HTML structure when using `bslib_tags(x)` for a Shiny tabsetPanel, but with the 'pills' styling.  It combines Bootstrap 5 classes and pill-specific styling.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/_snaps/tabPanel.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"tabbable\">\n  <ul class=\"nav nav-pills\" data-tabsetid=\"4785\">\n    <li class=\"nav-item\">\n      <a href=\"#tab-4785-1\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"A\" class=\"nav-link\">A</a>\n    </li>\n    <li class=\"nav-item\">\n      <a href=\"#tab-4785-2\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"B\" class=\"nav-link active\">\n        <i aria-label=\"github icon\" class=\"fab fa-github fa-fw\" role=\"presentation\"></i>\n        B\n      </a>\n    </li>\n    <li class=\"dropdown nav-item\">\n      <a href=\"#\" class=\"dropdown-toggle nav-link\" data-toggle=\"dropdown\" data-bs-toggle=\"dropdown\" data-value=\"Menu\">\n        Menu\n        <b class=\"caret\"></b>\n      </a>\n      <ul class=\"dropdown-menu\" data-tabsetid=\"1502\">\n        <li>\n          <a href=\"#tab-1502-1\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"C\" class=\"dropdown-item\">C</a>\n        </li>\n      </ul>\n    </li>\n  </ul>\n  <div class=\"content-header\"></div>\n  <div class=\"tab-content\" data-tabsetid=\"4785\">\n    <div class=\"tab-pane\" data-value=\"A\" id=\"tab-4785-1\">a</div>\n    <div class=\"tab-pane active\" data-icon-class=\"fab fa-github fa-fw\" data-value=\"B\" id=\"tab-4785-2\">b</div>\n    <div class=\"tab-pane\" data-value=\"C\" id=\"tab-1502-1\">c</div>\n  </div>\n  <div class=\"content-footer\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Applying bslib_tags to NavbarPage\nDESCRIPTION: This snippet applies the `bslib_tags` function to an input variable `x`. The function likely converts the input into bslib compatible HTML tags. The output is the resulting HTML markup for a navbarPage, using Bootstrap 5 styling.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/_snaps/tabPanel.md#_snippet_6\n\nLANGUAGE: R\nCODE:\n```\nbslib_tags(x)\n```\n\n----------------------------------------\n\nTITLE: Accessing User Session Data in JavaScript\nDESCRIPTION: Exposes the `session$user` (if it exists) to the client-side, making it accessible in the Shiny object as `Shiny.user`. This feature enables client-side JavaScript code to access user-specific data stored on the server-side session, which can be useful for personalization and other client-side logic based on server-side information. \nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nShiny.user\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Resource Paths\nDESCRIPTION: The `resourcePaths()` and `removeResourcePaths()` functions add and remove resource paths within a Shiny application. Resource paths map URLs to local file directories, allowing access to static assets like CSS, JavaScript, and images.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_37\n\nLANGUAGE: R\nCODE:\n```\nresourcePaths()\nremoveResourcePaths()\n```\n\n----------------------------------------\n\nTITLE: Applying bslib_tags to NavlistPanel\nDESCRIPTION: This snippet applies the `bslib_tags` function to an input variable `x` representing a navlistPanel.  This function converts standard HTML elements into Bootstrap 5-compatible components. The output is the resulting HTML markup for a navlistPanel rendered in Bootstrap 5 style.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/_snaps/tabPanel.md#_snippet_8\n\nLANGUAGE: R\nCODE:\n```\nbslib_tags(x)\n```\n\n----------------------------------------\n\nTITLE: Adding Development Packages using Yarn\nDESCRIPTION: This command adds a specified package as a development dependency to the project. It updates `package.json` and `yarn.lock`.\nSOURCE: https://github.com/rstudio/shiny/blob/main/srcts/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev [packagename]\n```\n\n----------------------------------------\n\nTITLE: Adding Marks to Reactlog in Shiny\nDESCRIPTION: This snippet shows how to programmatically add marks to the reactlog log using the `reactlogAddMark()` function. This allows you to mark specific locations in the reactive graph without needing keyboard bindings.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_6\n\nLANGUAGE: R\nCODE:\n```\nreactlogAddMark()\n```\n\n----------------------------------------\n\nTITLE: Canceling Reactive Output in Shiny\nDESCRIPTION: This code demonstrates how to cancel the execution of a reactive and leave its previous state alone using the `cancelOutput` argument in `req()`.  This prevents the output from being cleared and preserves the last known state.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_64\n\nLANGUAGE: R\nCODE:\n```\nreq(..., cancelOutput = TRUE)\n```\n\n----------------------------------------\n\nTITLE: Creating a git diff patch\nDESCRIPTION: This command creates a patch file using `git diff` to capture changes made to files. The patch file can then be applied to other versions of the code to propagate the changes. The naming convention of the patch files ensures they are applied in the correct order.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tools/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit diff > tools/ion.rangeSlider-patches/0004-a-description.patch\n```\n\n----------------------------------------\n\nTITLE: Checking Installed Package Size\nDESCRIPTION: This R code snippet shows the output of a package size check, indicating the total installed size and listing subdirectories that are 1MB or larger. It is used to identify potential areas for package size optimization.\nSOURCE: https://github.com/rstudio/shiny/blob/main/revdep/problems.md#_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ninstalled size is  5.1Mb\nsub-directories of 1Mb or more:\n  R      1.5Mb\n  help   1.5Mb\n```\n\n----------------------------------------\n\nTITLE: Using markdown() function in Shiny (R)\nDESCRIPTION: Shows how to use `markdown()` for writing Markdown with Github extensions directly in Shiny UIs. Markdown rendering is performed by the `commonmark` package.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_25\n\nLANGUAGE: R\nCODE:\n```\nmarkdown()\n```\n\n----------------------------------------\n\nTITLE: Setting window title in navbarPage Shiny R\nDESCRIPTION: This snippet shows how to set the web browser page title in a Shiny application using the `windowTitle` parameter within the `navbarPage()` function. This allows customizing the browser tab title independently from the main title displayed in the navbar, improving user experience and SEO.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_72\n\nLANGUAGE: R\nCODE:\n```\nnavbarPage() now accepts a `windowTitle` parameter to set the web browser page title to something other than the title displayed in the navbar.\n```\n\n----------------------------------------\n\nTITLE: Updating Node.js Version\nDESCRIPTION: This command updates Node.js to the latest stable version using the `npx n stable` command. `npx n ls` lists the installed Node.js versions.\nSOURCE: https://github.com/rstudio/shiny/blob/main/srcts/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Update to the latest stable node version\nnpx n stable\n\n# View installed versions\nnpx n ls\n```\n\n----------------------------------------\n\nTITLE: Formatting Error Stacktrace in R\nDESCRIPTION: This code snippet formats an error stack trace into a readable string using the `formatError` function. The `cat` function then prints this formatted string to the console, separated by newlines. This is useful for debugging deep call stacks within a Shiny application.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/_snaps/stacks-deep.md#_snippet_2\n\nLANGUAGE: R\nCODE:\n```\ncat(sep = \"\\n\", stacktrace <- formatError(dserr))\n```\n\n----------------------------------------\n\nTITLE: Using Devmode in Shiny (R)\nDESCRIPTION: Shows how to enable Shiny Developer Mode.  Developer Mode makes development easier by enabling non-minified JS and printing messages about deprecated functions and options. Use `?devmode()` for more details.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_22\n\nLANGUAGE: R\nCODE:\n```\n?devmode()\n```\n\n----------------------------------------\n\nTITLE: Adding Responsive Images in Shiny UI with img() function\nDESCRIPTION: This R code snippet demonstrates how to add responsive images to a Shiny UI by using the `img()` function and adding the `img-responsive` class. This ensures that images scale appropriately to the width of their container in Bootstrap 3.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_68\n\nLANGUAGE: r\nCODE:\n```\nimg(src = \"picture.png\", class = \"img-responsive\")\n```\n\n----------------------------------------\n\nTITLE: Adding resources in Shiny R\nDESCRIPTION: Relaxed naming requirements for `addResourcePath()` (the first character no longer needs to be a letter).\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_55\n\nLANGUAGE: R\nCODE:\n```\naddResourcePath()\n```\n\n----------------------------------------\n\nTITLE: Specifying UI as a Function in Shiny (R)\nDESCRIPTION: Demonstrates that when UI is specified as a function (e.g. `ui <- function(req) { ... }`), the response can now be an HTTP response as returned from the (newly exported) `httpResponse()` function.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_23\n\nLANGUAGE: R\nCODE:\n```\nui <- function(req) { ... }\n```\n\n----------------------------------------\n\nTITLE: Customizing Shiny Auto-Reload Pattern in R\nDESCRIPTION: This snippet shows how to customize the files watched for changes using the `shiny.autoreload.pattern` option. This option allows you to specify which files trigger an auto-reload when they are modified.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_2\n\nLANGUAGE: R\nCODE:\n```\noptions(shiny.autoreload.pattern = ...)\n```\n\n----------------------------------------\n\nTITLE: Export Test Values in R\nDESCRIPTION: Added `exportTestValues()` function, which allows a test driver to query the session for values internal to an application's server function. This only has an effect if the `shiny.testmode` option is set to `TRUE`.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_57\n\nLANGUAGE: R\nCODE:\n```\nexportTestValues()\nshiny.testmode\n```\n\n----------------------------------------\n\nTITLE: Setting Shiny Auto-Reload Option in R\nDESCRIPTION: This snippet demonstrates how to specifically enable the auto-reload feature in Shiny by setting the `shiny.autoreload` option. This allows the app to automatically reload when support files change.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_1\n\nLANGUAGE: R\nCODE:\n```\noptions(shiny.autoreload = TRUE)\n```\n\n----------------------------------------\n\nTITLE: Running Github app using runGitHub Shiny R\nDESCRIPTION: This snippet describes that `runGitHub()` function can also take a value of the form \"username/repo\" in its first argument, e.g. both runGitHub(\"shiny_example\", \"rstudio\") and runGitHub(\"rstudio/shiny_example\") are valid ways to run the GitHub repo.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_82\n\nLANGUAGE: R\nCODE:\n```\n`runGitHub()` can also take a value of the form \"username/repo\" in its first argument, e.g. both runGitHub(\"shiny_example\", \"rstudio\") and runGitHub(\"rstudio/shiny_example\") are valid ways to run the GitHub repo.\n```\n\n----------------------------------------\n\nTITLE: Enabling Client-Side Devmode in Shiny\nDESCRIPTION: This snippet demonstrates how to enable client-side devmode features, such as the JavaScript error console, using the `shiny.client_devmode` option. This is primarily intended for use in Shinylive.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_5\n\nLANGUAGE: R\nCODE:\n```\noptions(shiny.client_devmode = TRUE)\n```\n\n----------------------------------------\n\nTITLE: Running Shiny App Examples\nDESCRIPTION: This snippet demonstrates how to run Shiny app examples using the `runExample()` function. The `package` argument allows other packages to leverage this function to run their own examples.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_7\n\nLANGUAGE: R\nCODE:\n```\nrunExample(package = ...)\n```\n\n----------------------------------------\n\nTITLE: Customizing Busy Indicator Options in Shiny\nDESCRIPTION: This snippet shows how to customize the appearance and behavior of busy indicators using the `busyIndicatorOptions()` function. This allows you to modify properties like the spinner size and pulse color.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_4\n\nLANGUAGE: R\nCODE:\n```\nbusyIndicatorOptions(...)\n```\n\n----------------------------------------\n\nTITLE: Setting Legacy Datatable Option in R\nDESCRIPTION: This code snippet demonstrates how to set the `shiny.legacy.datatable` option to `TRUE` in R. This is useful for restoring the old (non-`{DT}`) implementation of `renderDataTable()` and `dataTableOutput()` if migrating to `{DT}` degrades an existing Shiny app. It ensures compatibility with older versions of the Shiny package.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_9\n\nLANGUAGE: R\nCODE:\n```\noptions(shiny.legacy.datatable = TRUE)\n```\n\n----------------------------------------\n\nTITLE: register_devmode_option() usage\nDESCRIPTION: The snippet illustrates how to use `register_devmode_option()` to register Shiny Developer options. This function, described in the `devmode()` documentation, allows registration of such options, giving developers greater control over the application in development mode.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_20\n\nLANGUAGE: R\nCODE:\n```\nregister_devmode_option()\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Shiny App (R)\nDESCRIPTION: Shows how to use `runTests()` function which behaves much like R CMD check. `runTests()` invokes all of the top-level R files in the tests/ directory inside an application, in that application's environment.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_27\n\nLANGUAGE: R\nCODE:\n```\nrunTests()\n```\n\n----------------------------------------\n\nTITLE: Preventing Input Binding with data-shiny-no-bind-input\nDESCRIPTION: This snippet describes how to prevent Shiny from creating an input binding on specific HTML elements by adding the `data-shiny-no-bind-input` attribute. This is helpful for component authors who want to use standard HTML input elements without triggering Shiny's default input binding behavior. The attribute can have any value or no value.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"text\" data-shiny-no-bind-input>\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn Packages\nDESCRIPTION: This command installs the necessary packages for the Shiny TypeScript project.  It is run from the root repo directory.\nSOURCE: https://github.com/rstudio/shiny/blob/main/srcts/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Sitting in `rstudio/shiny` repo\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Freezing Reactive Values in Shiny (R)\nDESCRIPTION: Illustrates subtle changes and soft-deprecations related to `freezeReactiveValue` and `freezeReactiveVal`.  It describes how `freezeReactiveValue(input, \"x\")` invalidates `input$x` by setting it to `NULL` upon freezing. It also details a mechanism to squelch deprecation messages for these functions using `options(shiny.deprecation.messages.freeze = FALSE)`.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_21\n\nLANGUAGE: R\nCODE:\n```\noptions(shiny.deprecation.messages.freeze = FALSE)\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Output Info\nDESCRIPTION: `getCurrentOutputInfo()` is used to retrieve information about the current output context. Previously, it threw an error when called outside of an output context, but now it returns `NULL` in such cases. This change allows for more robust error handling and prevents unexpected crashes.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_31\n\nLANGUAGE: R\nCODE:\n```\ngetCurrentOutputInfo()\n```\n\n----------------------------------------\n\nTITLE: Creating a git diff patch\nDESCRIPTION: This command creates a patch file using `git diff` to capture changes made to files. The patch file can then be applied to other versions of the code to propagate the changes. The naming convention of the patch files ensures they are applied in the correct order.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tools/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit diff > tools/datepicker-patches/012-a-description.patch\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for ConditionalPanel and uiOutput\nDESCRIPTION: This CSS code snippet demonstrates how to set the `display` property to `block` for the `.shiny-panel-conditional` or `.shiny-html-output` classes. This is necessary when using Bootstrap 5 and styles applied directly to container elements of `conditionalPanel()` or `uiOutput()` are broken by the default `display: contents` styling. It helps maintain the desired layout and styling of Shiny applications.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_10\n\nLANGUAGE: CSS\nCODE:\n```\n.shiny-panel-conditional {\n  display: block;\n}\n.shiny-html-output {\n  display: block;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling ragg::agg_png() in renderPlot()\nDESCRIPTION: This snippet shows how to disable the use of `ragg::agg_png()` in `renderPlot()` and `plotPNG()` to restore the previous graphics rendering behavior. Setting `options(shiny.useragg = FALSE)` reverts Shiny to using the original rendering method when the `{ragg}` package is installed.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_14\n\nLANGUAGE: R\nCODE:\n```\noptions(shiny.useragg = FALSE)\n```\n\n----------------------------------------\n\nTITLE: Building Shiny JavaScript Files\nDESCRIPTION: This command builds `shiny.js` and `shiny.min.js` with sourcemaps, which are placed in `inst/www/shared`. This is done via the build tools.\nSOURCE: https://github.com/rstudio/shiny/blob/main/srcts/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Downgrading jQuery Version in Shiny\nDESCRIPTION: Allows users to revert to the older jQuery version (v1.12.4) if upgrading to v3.4.1 introduces breaking changes.  This is achieved by setting the `shiny.jquery.version` option to 1, which affects how jquery scripts are located. It requires manually changing the filepath if `shared/jquery[.min].js` is hard-coded in the HTML.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_30\n\nLANGUAGE: R\nCODE:\n```\noptions(shiny.jquery.version = 1)\n```\n\n----------------------------------------\n\nTITLE: Setting shiny.snapshotsortc Option in R\nDESCRIPTION: This snippet demonstrates how to set a global option in R to ensure consistent sorting of snapshot fields when taking test snapshots with the `{shinytest}` package. This is useful to avoid inconsistent test results due to locale-specific sorting.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_15\n\nLANGUAGE: R\nCODE:\n```\noptions(shiny.snapshotsortc = TRUE)\n```\n\n----------------------------------------\n\nTITLE: Installing Shiny Package in R\nDESCRIPTION: This code snippet demonstrates how to install the Shiny package from CRAN using the `install.packages()` function. This allows users to access Shiny's functionality for building interactive web applications in R. No prior setup is needed other than having R installed.\nSOURCE: https://github.com/rstudio/shiny/blob/main/README.md#_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ninstall.packages(\"shiny\")\n```\n\n----------------------------------------\n\nTITLE: Sending Binary Message in Shiny\nDESCRIPTION: This snippet showcases how to send custom binary data to the client using `session$sendBinaryMessage(type, message)`. The `type` argument specifies the message type, and `message` is the binary data to be sent.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_67\n\nLANGUAGE: R\nCODE:\n```\nsession$sendBinaryMessage(type, message)\n```\n\n----------------------------------------\n\nTITLE: Shiny renderTable with Reactive Dependency\nDESCRIPTION: This snippet shows the use of `renderTable` with a reactive dependency `C()` in a Shiny application. It renders the table on the server-side (`server = FALSE`). This code demonstrates how to display reactive data as a table in a Shiny UI.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/_snaps/stacks.md#_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nrenderTable({     C() }, server = FALSE)\n```\n\n----------------------------------------\n\nTITLE: Disable Cairo for PNG Output in Shiny\nDESCRIPTION: This code shows how to disable the usage of Cairo for PNG output in Shiny, even when it is installed. This can be achieved by setting the `shiny.usecairo` option to `FALSE`. The default value of this option is `TRUE`.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_93\n\nLANGUAGE: R\nCODE:\n```\noptions(shiny.usecairo = FALSE)\n```\n\n----------------------------------------\n\nTITLE: Registering an Unhandled Error Handler in Shiny\nDESCRIPTION: This snippet shows how to register a function that will be called when an unhandled error occurs in a Shiny app using `onUnhandledError()`. This can be used for logging errors or cleaning up resources.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_8\n\nLANGUAGE: R\nCODE:\n```\nonUnhandledError(...)\n```\n\n----------------------------------------\n\nTITLE: Masking Reactive Context Shiny R\nDESCRIPTION: This snippet introduces the `maskReactiveContext` function, which blocks the current reactive context, allowing the evaluation of expressions that shouldn't use reactive sources directly. This function is useful in advanced scenarios where direct reactive dependencies need to be avoided.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_76\n\nLANGUAGE: R\nCODE:\n```\nAdded `maskReactiveContext` function. It blocks the current reactive context, to evaluate expressions that shouldn't use reactive sources directly.\n```\n\n----------------------------------------\n\nTITLE: Configuring spinner options using busyIndicatorOptions() in Shiny\nDESCRIPTION: This snippet shows how to configure the appearance of busy indicators using the `busyIndicatorOptions()` function in a Shiny application. It demonstrates setting the spinner type, color, size, delay, pulse background, pulse height, and pulse speed.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/_snaps/busy-indication.md#_snippet_1\n\nLANGUAGE: R\nCODE:\n```\ntagList(busyIndicatorOptions(), busyIndicatorOptions(spinner_type = \"bars\"),\nbusyIndicatorOptions(spinner_type = \"pulse\"), busyIndicatorOptions(\nspinner_type = \"dots\"), busyIndicatorOptions(spinner_color = \"red\"),\nbusyIndicatorOptions(spinner_size = \"10px\"), busyIndicatorOptions(\nspinner_delay = \"1s\"), busyIndicatorOptions(pulse_background = \"blue\"),\nbusyIndicatorOptions(pulse_height = \"10px\"), busyIndicatorOptions(pulse_speed = \"1s\"),\nbusyIndicatorOptions(spinner_color = \"red\", spinner_size = \"10px\",\nspinner_delay = \"1s\", pulse_background = \"blue\", pulse_height = \"10px\",\npulse_speed = \"1s\"))\n```\n\n----------------------------------------\n\nTITLE: Obtaining Shiny Server Info Shiny R\nDESCRIPTION: This snippet describes the addition of `serverInfo` to obtain information about the Shiny Server if the app is served through it. This functionality provides details about the server environment in which the Shiny application is running.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_78\n\nLANGUAGE: R\nCODE:\n```\nAdded `serverInfo` to obtain info about the Shiny Server if the app is served through it.\n```\n\n----------------------------------------\n\nTITLE: Creating a git diff patch\nDESCRIPTION: This command creates a patch file using `git diff` to capture changes made to files. The patch file can then be applied to other versions of the code to propagate the changes. The naming convention of the patch files ensures they are applied in the correct order.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tools/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit diff > tools/selectize-patches/000-assign-unique-id-per-option.patch\n```\n\n----------------------------------------\n\nTITLE: Formatting Error with Full Stack Trace in R\nDESCRIPTION: This code snippet demonstrates how to format an error message using the `formatError` function in R to display a complete stack trace. Setting `full = TRUE` in `formatError` provides more detailed debugging information. The `cat` function prints the formatted error with newline separators to the console. The `err` variable is assumed to contain the error object.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/_snaps/stacks-deep.md#_snippet_1\n\nLANGUAGE: R\nCODE:\n```\ncat(sep = \"\\n\", formatError(err, full = TRUE))\n```\n\n----------------------------------------\n\nTITLE: Splice List of TabPanels in NavbarPage using Rlang\nDESCRIPTION: This snippet shows how to use `rlang::list2(...)` and the `!!!` operator to splice a list of `tabPanel()` objects into a `navbarPage()` function call.  This simplifies passing a dynamic list of tabs to the navigation bar.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_17\n\nLANGUAGE: R\nCODE:\n```\ntabs <- list(tabPanel(\"A\", \"a\"), tabPanel(\"B\", \"b\")); navbarPage(!!!tabs)\n```\n\n----------------------------------------\n\nTITLE: Formatting Error with Concise Stack Trace in R\nDESCRIPTION: This code snippet demonstrates how to format an error message using the `formatError` function in R, displaying a concise stack trace. The `cat` function is used to print the formatted error to the console with newline separators. The `err` variable is assumed to hold the error object.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/_snaps/stacks-deep.md#_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ncat(sep = \"\\n\", formatError(err))\n```\n\n----------------------------------------\n\nTITLE: Initializing busy indicators with useBusyIndicators() in Shiny\nDESCRIPTION: This snippet demonstrates how to initialize busy indicators in a Shiny application using the `useBusyIndicators()` function. It showcases enabling and disabling spinners and pulse effects.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/_snaps/busy-indication.md#_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ntagList(useBusyIndicators(), useBusyIndicators(spinners = FALSE), \nuseBusyIndicators(pulse = FALSE), useBusyIndicators(spinners = FALSE, pulse = FALSE),\n)\n```\n\n----------------------------------------\n\nTITLE: Auto Build and Browser Refresh (macOS)\nDESCRIPTION: This bash command uses `find` and `entr` to monitor changes in the `srcts` directory. When a change is detected, it executes the Grunt build process and then reloads the active tab in Google Chrome using AppleScript. Requires `entr` to be installed.\nSOURCE: https://github.com/rstudio/shiny/blob/main/srcts/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfind ../srcts/ | entr bash -c './node_modules/grunt/bin/grunt && osascript -e \"tell application \\\"Google Chrome\\\" to reload active tab of window 1\"'\n```\n\n----------------------------------------\n\nTITLE: Custom Shiny Shared Secret Configuration\nDESCRIPTION: This code shows how to configure a shared secret for a Shiny application. Setting the `shiny.sharedSecret` option requires the HTTP header `Shiny-Shared-Secret` to be set to the specified value for requests to be processed. This adds an extra layer of security to the application.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_92\n\nLANGUAGE: R\nCODE:\n```\noptions(shiny.sharedSecret = \"your_secret_value\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Reactive Values in Shiny (R)\nDESCRIPTION: This snippet demonstrates how to create a `reactiveValues` object in Shiny. The `reactiveValues` function initializes a container for reactive data. In this case, the container is initialized with three values: `x`, `y`, and `z` with initial values of 1, 2, and 3 respectively. These values can be dynamically updated and accessed within a Shiny application to trigger reactive updates.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/print-reactiveValues.txt#_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nx <- reactiveValues(x = 1, y = 2, z = 3)\n```\n\n----------------------------------------\n\nTITLE: Update core-js version\nDESCRIPTION: These commands update the core-js dependency version. First check if there's a newer version, then use yarn to add the updated package.\nSOURCE: https://github.com/rstudio/shiny/blob/main/srcts/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn outdated core-js\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev core-js --exact\n```\n\n----------------------------------------\n\nTITLE: Inspecting Data Frame for Error Stack Trace in Shiny\nDESCRIPTION: This snippet displays the contents of the `df` data frame within a Shiny integration test, specifically focusing on capturing the error stack trace.  It shows columns `num`, `call`, and `loc`, indicating the call stack during an error condition. This allows tracing the execution flow leading to the error and verifying the correct error handling within the reactive context.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/_snaps/stacks.md#_snippet_1\n\nLANGUAGE: R\nCODE:\n```\ndf\n```\n\n----------------------------------------\n\nTITLE: Inspecting Data Frame in Shiny Test\nDESCRIPTION: This snippet displays the contents of the `df` data frame within a Shiny integration test. It shows columns `num`, `call`, and `loc`, representing the call stack, function names, and their respective locations within the test file (test-stacks.R). This allows verification of the expected call sequence and reactive dependencies.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/_snaps/stacks.md#_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ndf\n```\n\n----------------------------------------\n\nTITLE: Using SVG file for spinner_type in busyIndicatorOptions()\nDESCRIPTION: This snippet demonstrates how to use a custom SVG file for the spinner type in `busyIndicatorOptions()`.  The variable `tmpsvg` presumably holds the file path to an SVG image.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/_snaps/busy-indication.md#_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nbusyIndicatorOptions(spinner_type = tmpsvg)\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js and Yarn versions\nDESCRIPTION: These commands verify that Node.js and Yarn are installed correctly by displaying their versions. This is a crucial step to ensure the development environment is properly configured.\nSOURCE: https://github.com/rstudio/shiny/blob/main/srcts/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\nyarn --version\n```\n\n----------------------------------------\n\nTITLE: Setting shiny.json.digits Option in R\nDESCRIPTION: This R code snippet shows how to set the `shiny.json.digits` option, which controls the number of digits used when serializing numbers to JSON.  In Shiny 1.7.5, this option is now interpreted as the number of digits after the decimal point.  To treat the value as significant digits, wrap it in `I()`. This is useful for controlling the precision of numbers in Shiny applications and reducing noise in testing snapshots.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_12\n\nLANGUAGE: R\nCODE:\n```\noptions(shiny.json.digits = I(4))\n```\n\n----------------------------------------\n\nTITLE: Building Shiny's SCSS with Yarn\nDESCRIPTION: This command uses Yarn to build the Shiny SCSS files, generating a minified CSS file. This is part of the process for updating Shiny's styling.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tools/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Inspecting Reactive Values Object in Shiny (R)\nDESCRIPTION: This snippet shows how to inspect the contents of the `reactiveValues` object `x`. This provides information about the values stored within the reactive values object as well as if it is readonly. When you print a `reactiveValues` object, it displays the names of the values it contains and whether it's read-only.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/print-reactiveValues.txt#_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nx\n```\n\n----------------------------------------\n\nTITLE: Checking Installed Package Size\nDESCRIPTION: This R code snippet shows the output of a package size check, indicating the total installed size and listing subdirectories that are 1MB or larger. It is used to identify potential areas for package size optimization.\nSOURCE: https://github.com/rstudio/shiny/blob/main/revdep/problems.md#_snippet_1\n\nLANGUAGE: R\nCODE:\n```\ninstalled size is  5.5Mb\nsub-directories of 1Mb or more:\n  R      1.5Mb\n  doc    1.4Mb\n  test   1.1Mb\n```\n\n----------------------------------------\n\nTITLE: Accessing Snapshot of Input as a List in Shiny (R)\nDESCRIPTION: This snippet refers to accessing a snapshot of the input as a list using `as.list(input)` in Shiny. This allows developers to obtain a static copy of the input values as a list at a particular point in time.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_98\n\nLANGUAGE: R\nCODE:\n```\nas.list(input)\n```\n\n----------------------------------------\n\nTITLE: Rendering tabsetPanel with bslib_tags and Tabs HTML\nDESCRIPTION: This snippet illustrates the HTML output when using `bslib_tags(x)` for a Shiny tabsetPanel with the default tab styling. It utilizes Bootstrap 5 classes such as `nav-item`, `nav-link`, and `dropdown-item`.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/_snaps/tabPanel.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"tabbable\">\n  <ul class=\"nav nav-tabs\" data-tabsetid=\"4785\">\n    <li class=\"nav-item\">\n      <a href=\"#tab-4785-1\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"A\" class=\"nav-link active\">A</a>\n    </li>\n    <li class=\"nav-item\">\n      <a href=\"#tab-4785-2\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"B\" class=\"nav-link\">\n        <i aria-label=\"github icon\" class=\"fab fa-github fa-fw\" role=\"presentation\"></i>\n        B\n      </a>\n    </li>\n    <li class=\"dropdown nav-item\">\n      <a href=\"#\" class=\"dropdown-toggle nav-link\" data-toggle=\"dropdown\" data-bs-toggle=\"dropdown\" data-value=\"Menu\">\n        Menu\n        <b class=\"caret\"></b>\n      </a>\n      <ul class=\"dropdown-menu\" data-tabsetid=\"1502\">\n        <li>\n          <a href=\"#tab-1502-1\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"C\" class=\"dropdown-item\">C</a>\n        </li>\n      </ul>\n    </li>\n  </ul>\n  <div class=\"tab-content\" data-tabsetid=\"4785\">\n    <div class=\"tab-pane active\" data-value=\"A\" id=\"tab-4785-1\">a</div>\n    <div class=\"tab-pane\" data-value=\"B\" data-icon-class=\"fab fa-github fa-fw\" id=\"tab-4785-2\">b</div>\n    <div class=\"tab-pane\" data-value=\"C\" id=\"tab-1502-1\">c</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Default tabsetPanel HTML\nDESCRIPTION: This snippet demonstrates the basic HTML structure for a Shiny tabsetPanel with default styling. It showcases the use of `nav-tabs` and the structure for including tab headers and content panes. The `data-tabsetid` attribute is used for identifying the tabset, and `data-value` is used to map tabs to their content.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/_snaps/tabPanel.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"tabbable\">\n  <ul class=\"nav nav-tabs\" data-tabsetid=\"4785\">\n    <li class=\"active\">\n      <a href=\"#tab-4785-1\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"A\">A</a>\n    </li>\n    <li>\n      <a href=\"#tab-4785-2\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"B\">\n        <i aria-label=\"github icon\" class=\"fab fa-github fa-fw\" role=\"presentation\"></i>\n        B\n      </a>\n    </li>\n    <li class=\"dropdown\">\n      <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" data-bs-toggle=\"dropdown\" data-value=\"Menu\">\n        Menu\n        <b class=\"caret\"></b>\n      </a>\n      <ul class=\"dropdown-menu\" data-tabsetid=\"1502\">\n        <li>\n          <a href=\"#tab-1502-1\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"C\">C</a>\n        </li>\n      </ul>\n    </li>\n  </ul>\n  <div class=\"tab-content\" data-tabsetid=\"4785\">\n    <div class=\"tab-pane active\" data-value=\"A\" id=\"tab-4785-1\">a</div>\n    <div class=\"tab-pane\" data-value=\"B\" data-icon-class=\"fab fa-github fa-fw\" id=\"tab-4785-2\">b</div>\n    <div class=\"tab-pane\" data-value=\"C\" id=\"tab-1502-1\">c</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Reactlog Keybindings\nDESCRIPTION: The keybindings `cmd + shift + f3` and `ctrl + shift + f3` add a reactlog mark. An error page displays if reactlog keybindings are used when reactlog is not enabled, detailing how to enable recordings. This feature allows developers to easily mark points in the reactive graph for debugging.\nSOURCE: https://github.com/rstudio/shiny/blob/main/NEWS.md#_snippet_38\n\nLANGUAGE: R\nCODE:\n```\ncmd + shift + f3\nctrl + shift + f3\n```\n\n----------------------------------------\n\nTITLE: Rendering NavbarPage Markup in Shiny\nDESCRIPTION: This snippet renders a navbarPage component. It takes a `nav_page` variable as input, which likely defines the structure and content of the navbarPage. The output is the HTML markup generated by Shiny for the navbarPage, including the navbar and tab content areas.\nSOURCE: https://github.com/rstudio/shiny/blob/main/tests/testthat/_snaps/tabPanel.md#_snippet_5\n\nLANGUAGE: R\nCODE:\n```\nnav_page\n```"
  }
]