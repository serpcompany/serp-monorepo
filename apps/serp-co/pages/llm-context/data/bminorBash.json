[
  {
    "owner": "bminor",
    "repo": "bash",
    "content": "TITLE: Basic Decimal Arithmetic Operations with Shellmath in Bash\nDESCRIPTION: This snippet demonstrates the primary interface of the shellmath library, which includes functions for addition, subtraction, multiplication, and division of numbers represented as integers or decimals (including scientific notation). Addition and multiplication accept multiple operands (arbitrary arity), while subtraction and division operate on exactly two operands. The input operands should be decimal or integer strings, and the output is stored in shell variables. Dependencies include sourcing the shellmath.sh file in the Bash environment. The snippet also shows example usage of each function and how to retrieve computed results with _shellmath_getReturnValue.\nSOURCE: https://github.com/bminor/bash/blob/master/examples/shellmath/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n    _shellmath_add        arg1   arg2  [...]  argN\n    _shellmath_subtract   arg1   arg2               # means arg1 - arg2\n    _shellmath_multiply   arg1   arg2  [...]  argN\n    _shellmath_divide     arg1   arg2               # means arg1 / arg2\n```\n\n----------------------------------------\n\nTITLE: Using Shellmath for Floating-Point Calculations in Bash with Example Usage\nDESCRIPTION: This snippet illustrates shellmath usage with decimal and scientific notation inputs, showing how to perform addition and multiplication of multiple values. It also demonstrates using _shellmath_getReturnValue to assign results to shell variables for later use. The example includes calculating the sum of a decimal and a scientific notation number, as well as computing the factorial of 6 by chaining multiple multiplications. This highlights shellmath's ability to handle both simple and more complex arithmetic expressions directly within Bash scripts.\nSOURCE: https://github.com/bminor/bash/blob/master/examples/shellmath/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n    _shellmath_add   1.009   4.223e-2\n    _shellmath_getReturnValue   sum\n    echo \"The sum is $sum\"\n\n    _shellmath_multiply  1  2  3  4  5  6\n    _shellmath_getReturnValue   sixFactorial\n    echo \"6 factorial is $sixFactorial\"\n```\n\n----------------------------------------\n\nTITLE: Optimized Result Retrieval Using Shellmath Extended API in Bash\nDESCRIPTION: This snippet introduces an extended function _shellmath_getReturnValue that allows users to avoid the overhead of subshell execution when capturing output from shellmath's arithmetic operations. To enable this optimization, the script must set the global variable __shellmath_isOptimized=1 before using the shellmath functions. After performing an operation, calling _shellmath_getReturnValue with the name of the variable stores the result directly into that variable. This provides more efficient interaction with shell variables in complex scripts that require multiple calculations.\nSOURCE: https://github.com/bminor/bash/blob/master/examples/shellmath/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n    _shellmath_getReturnValue   arg\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bash Arithmetic Evaluation\nDESCRIPTION: This snippet shows how to use Bash's arithmetic evaluation capabilities with the $((...)) syntax. The example demonstrates expression evaluation with addition, multiplication, and operator precedence.\nSOURCE: https://github.com/bminor/bash/blob/master/doc/article.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ echo $((3 + 5 * 32))\n163\n```\n\n----------------------------------------\n\nTITLE: Performing Multiplication with Custom Bash Function\nDESCRIPTION: This code performs multiplication of two floating-point numbers using '_shellmath_multiply' and retrieves the result with '_shellmath_getReturnValue prod'. It includes timing performance comparisons with bc over several iterations.\nSOURCE: https://github.com/bminor/bash/blob/master/examples/shellmath/timingData.txt#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ time { for ((i=0; i<100; i++)); do _shellmath_multiply  3.1415926 2.7182818; _shellmath_getReturnValue prod; done; }\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ time { for ((i=0; i<100; i++)); do prod=$(bc <<< \"3.1415926*2.7182818\"); done; }\n```\n\n----------------------------------------\n\nTITLE: Performing Division with Custom Bash Function\nDESCRIPTION: This snippet performs division using '_shellmath_divide' and retrieves the quotient with '_shellmath_getReturnValue quot'. It compares performance against bc's scale-based division over 100 iterations.\nSOURCE: https://github.com/bminor/bash/blob/master/examples/shellmath/timingData.txt#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ time { for ((i=0; i<100; i++)); do _shellmath_divide  3.1415926/2.7182818; _shellmath_getReturnValue quot; done; }\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ time { for ((i=0; i<100; i++)); do quot=$(bc <<< \"scale=8; 3.1415926/2.7182818\"); done; }\n```\n\n----------------------------------------\n\nTITLE: Performing Addition with Custom Bash Function\nDESCRIPTION: This code snippet performs addition of two floating-point numbers using a custom function '_shellmath_add' followed by retrieving the result with '_shellmath_getReturnValue sum'. It includes timing benchmarks comparing the custom function to the bc utility for 100 iterations.\nSOURCE: https://github.com/bminor/bash/blob/master/examples/shellmath/timingData.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ time { for ((i=0; i<100; i++)); do _shellmath_add  3.1415926  2.7182818; _shellmath_getReturnValue sum; done; }\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ time { for ((i=0; i<100; i++)); do sum=$(bc <<< \"3.1415926+2.7182818\"); done; }\n```\n\n----------------------------------------\n\nTITLE: Performing Subtraction with Custom Bash Function\nDESCRIPTION: This snippet executes subtraction of two floating-point numbers via '_shellmath_subtract' and retrieves the result with '_shellmath_getReturnValue diff'. It also compares performance with the bc utility over 100 iterations.\nSOURCE: https://github.com/bminor/bash/blob/master/examples/shellmath/timingData.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ time { for ((i=0; i<100; i++)); do _shellmath_subtract  3.1415926  2.7182818; _shellmath_getReturnValue diff; done; }\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ time { for ((i=0; i<100; i++)); do diff=$(bc <<< \"3.1415926-2.7182818\"); done; }\n```\n\n----------------------------------------\n\nTITLE: Navigating Logical File System View with cd/pwd in Bash\nDESCRIPTION: This code snippet demonstrates the logical file system view in Bash, where the shell tracks the directory path used to reach a location, rather than its physical location. The examples uses `cd` and `pwd` to move through a file system and print the current directory, showing how Bash resolves symbolic links.\nSOURCE: https://github.com/bminor/bash/blob/master/doc/article.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd /usr/local/bin\necho $PWD\n/usr/local/bin\npwd\n/usr/local/bin\n/bin/pwd\n/net/share/sun4/local/bin\ncd ..\npwd\n/usr/local\n/bin/pwd\n/net/share/sun4/local\ncd ..\npwd\n/usr\n/bin/pwd\n/usr\n```\n\n----------------------------------------\n\nTITLE: Enabling POSIX Mode in Bash\nDESCRIPTION: This code snippet demonstrates how to enable POSIX mode in Bash using the `set -o posix` command. When POSIX mode is active, Bash modifies its default behavior to be strictly compliant with the POSIX.2 standard. This can also be achieved by starting Bash with the `-posix` option or setting the `$_POSIXLY_CORRECT` variable.\nSOURCE: https://github.com/bminor/bash/blob/master/doc/article.txt#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nset -o posix\n```\n\n----------------------------------------\n\nTITLE: Switching to Physical File System View in Bash\nDESCRIPTION: This code snippet shows how to switch from the default logical file system view to a physical view using `set -o physical`. In the physical view, commands like `pwd` return the actual physical path, not the logical path derived from following symbolic links.\nSOURCE: https://github.com/bminor/bash/blob/master/doc/article.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd /usr/local/bin\npwd\n/usr/local/bin\nset -o physical\npwd\n/net/share/sun4/local/bin\n```\n\n----------------------------------------\n\nTITLE: Activating Optimized Mode in Bash Script\nDESCRIPTION: This snippet sets a shell variable to enable optimized mode as described in the README documentation. It prepares the environment for subsequent arithmetic operations by toggling an internal flag.\nSOURCE: https://github.com/bminor/bash/blob/master/examples/shellmath/timingData.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ __shellmath_isOptimized=1\n```"
  }
]