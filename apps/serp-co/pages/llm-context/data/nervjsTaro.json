[
  {
    "owner": "nervjs",
    "repo": "taro",
    "content": "TITLE: Configuring App Loader for Mini-Programs in JavaScript\nDESCRIPTION: This loader is used in the mini-program entry file to create an object accepted by the mini-program App constructor. It calls createReactApp or createVueApp from @tarojs/runtime.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-loader/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Options:\n// framework: 'react' | 'nerv' | 'vue' | 'vue3'\n// prerender: Prerender configuration\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Loader for Mini-Programs in JavaScript\nDESCRIPTION: This loader is used in mini-program page files to create an object accepted by the mini-program Page constructor. It calls createPageConfig from @tarojs/runtime.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-loader/README.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Options:\n// framework: 'react' | 'vue3'\n// name: Page path\n```\n\n----------------------------------------\n\nTITLE: Exporting Components in Entry File\nDESCRIPTION: Example of how to export a new component in the entry file of taro-components-react.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components-react/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// taro-components/react/index\nexport { xxxx } from './dist/xxx'\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Properties\nDESCRIPTION: Example showing how to modify default values and add new properties to existing components, as well as adding new components.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-plugin-inject/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  plugins: [\n    ['@tarojs/plugin-inject', {\n      components: {\n        // 为 Text 组件新增了 'x-props' 属性和 'bindYEvent' 事件\n        Text: {\n          'x-props': \"'hello'\",\n          bindYEvent: ''\n        },\n        // 新增一个组件\n        ShareElement: {\n          key: \"\",\n          transform: \"true\",\n          duration: \"300\",\n          \"easing-function\": \"\"\n        }\n      },\n      // 新增的组件需要写映射\n      componentsMap: {\n        ShareElement: 'share-element'\n      }\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Component Transformation\nDESCRIPTION: Example of how a basic React component with className is transformed to use StyleSheet\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from 'react';\nimport './app.css';\nclass App extends Component {\n  render() {\n    return <div className=\"header\" />\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from 'react';\nimport appCssStyleSheet from './app.css';\n\nvar _styleSheet = appCssStyleSheet;\n\nclass App extends Component {\n  render() {\n    return <div style={_styleSheet.header} />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining React Component with TypeScript and JSX in Taro\nDESCRIPTION: This snippet defines a React component class 'A' that extends the base Component. It includes a TypeScript type annotation for a string variable and uses JSX in the render method to return a div element with a dynamic className.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-loader/__tests__/fixtures/syntax-tsx.txt#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst a: string = ''\n\nclass A extends Component {\n  render () {\n    return <div className={a} />\n  }\n}\n\nexport default A\n```\n\n----------------------------------------\n\nTITLE: Configuring Taro Project for HTML Components\nDESCRIPTION: JavaScript configuration to enable HTML components in a Taro project's H5 build.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components-react/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// config/index.js\nmodule.exports = {\n  h5: {\n    useHtmlComponents: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Transform Function in JavaScript\nDESCRIPTION: Shows how to import and use the transform function to convert a CSS string into a React Native Stylesheet object. It includes both import syntax options.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/css-to-react-native/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport transform from \"taro-css-to-react-native\";\n// or const transform = require(\"taro-css-to-react-native\").default;\n\ntransform(`\n  .foo {\n    color: #f00;\n  }\n`);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  foo: {\n    color: \"#f00\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Solid.js in Taro (JavaScript)\nDESCRIPTION: This snippet shows the Babel configuration required to use Solid.js with Taro. It sets up the Taro preset and the Solid.js preset, specifying the custom reconciler module and universal generation mode.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-platform-harmony/src/runtime-framework/solid/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [\n    ['taro', {\n      framework: 'react',\n      ts: true,\n    }],\n    ['babel-preset-solid', {\n      // 指向 SolidJS 的 reconciler\n      moduleName: '@tarojs/plugin-framework-react/dist/runtime/reconciler',\n      generate: 'universal',\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming CSS Media Queries (Experimental)\nDESCRIPTION: Shows how to use the transform function with the parseMediaQueries option to handle CSS media queries. The result includes a special __mediaQueries object and platform-specific queries.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/css-to-react-native/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntransform(\n  `\n  .container {\n    background-color: #f00;\n  }\n\n  @media (orientation: landscape) {\n    .container {\n      background-color: #00f;\n    }\n  }\n`,\n  { parseMediaQueries: true },\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  __mediaQueries: {\n    \"@media (orientation: landscape)\": [{\n      expressions: [\n        {\n          feature: \"orientation\",\n          modifier: undefined,\n          value: \"landscape\",\n        },\n      ],\n      inverse: false,\n      type: \"all\",\n    }],\n  },\n  container: {\n    backgroundColor: \"#f00\",\n  },\n  \"@media (orientation: landscape)\": {\n    container: {\n      backgroundColor: \"#00f\",\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CI Plugin with Async Function\nDESCRIPTION: Example showing how to configure the CI plugin using an async function that can dynamically fetch configuration values\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-plugin-mini-ci/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst CIPluginFn = async () => {\n  return {\n      weapp: {\n          appid: \"微信小程序appid\",\n          privateKeyPath: \"密钥文件相对项目根目录的相对路径，例如 key/private.appid.key\"\n      },\n      tt: {\n          email: \"字节小程序邮箱\",\n          password: \"字节小程序密码\"\n      },\n      alipay: {\n        appid: \"支付宝小程序appid\",\n        toolId: \"工具id\",\n        privateKeyPath: \"密钥文件相对项目根目录的相对路径，例如 key/pkcs8-private-pem\"\n      },\n      dd: {\n        appid: \"钉钉小程序appid,即钉钉开放平台后台应用管理的 MiniAppId 选项\",\n        token: \"令牌，从钉钉后台获取\"\n      },\n      swan: {\n        token: \"鉴权需要的token令牌\"\n      },\n      jd: {\n        privateKey: '京东小程序秘钥'\n      },\n      version: \"1.0.0\",\n      desc: \"版本描述\"\n  }\n}\n\nconst config = {\n  plugins: [\n    [ \"@tarojs/plugin-mini-ci\", CIPluginFn ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring stylelint-taro in .stylelintrc.js\nDESCRIPTION: Example configuration for stylelint-taro in a .stylelintrc.js file. It demonstrates how to merge configurations for multiple platforms and add custom rules.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// .stylelintrc.js\nconst mergeConfig = require('stylelint-taro/lib/config')\n\n// 合并配置，填写需要适配的端：\"h5\", \"miniprogram\", \"harmony\", \"rn\"\nmodule.exports = mergeConfig(['h5', 'miniprogram', 'harmony'], {\n  // 自定义样式规范: 支持sass的语言规范\n  // customSyntax: \"postcss-scss\"\n  // 自定义Stylelint配置\n  rules: {},\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Less for React Native in Taro\nDESCRIPTION: Configuration options for Less preprocessing in React Native, including compiler options and additional data injection functionality.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-rn-style-transformer/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  rn: {\n    // ...\n    less: {\n      options: {\n        /* ... */\n      },\n      additionalData: '', // {String|Function}\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Camera Component API Properties Table - Markdown\nDESCRIPTION: API reference table showing the properties, types and descriptions for the taro-camera component, including device position settings and event handlers.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/camera/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 是否支持 | 属性           | 类型        | 默认值 | 说明                                                         |\n| -------- | -------------- | ----------- | ------ | ------------------------------------------------------------ |\n| √        | device-position | String      | back       | 前置或后置，值为front, back                                     |\n| √        | bindstop       | EventHandle     |    | 摄像头在非正常终止时触发，如退出后台等情况        |\n| √         | binderror       | EventHandle     |   | 用户不允许使用摄像头时触发                                             |\n| √         | binderror       | EventHandle     |   | 用户不允许使用摄像头时触发                                             |\n```\n\n----------------------------------------\n\nTITLE: Configuring Sass for React Native in Taro\nDESCRIPTION: Configuration options for Sass preprocessing in React Native, including compiler options and additional data injection functionality.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-rn-style-transformer/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  rn: {\n    // ...\n    sass: {\n      options: {\n        /* ... */\n      },\n      // 加入到脚本注入的每个 sass 文件头部，在 config.sass 之前\n      additionalData: '', // {String|Function}\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Input JSX Component Example with Taro Components\nDESCRIPTION: Example showing the input JSX code using Taro components like View, Text, and Button to create a simple component structure.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/babel-plugin-transform-solid-jsx/README.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Text, Button } from '@tarojs/components';\n\nconst Component = () => {\n  return (\n    <View class=\"index\">\n      <View>\n        <Text>Hello world! </Text>\n      </View>\n      <Button>set class</Button>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Augmentation\nDESCRIPTION: TypeScript configuration for adding type definitions for new component properties.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-plugin-inject/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@tarojs/components' {\n  export * from '@tarojs/components/types/index';\n  \n  // 下面示例是react的定义，vue下可能有所不同,原理是一样的\n  import { ComponentType } from 'react';\n  import { TextProps as OldTextProps } from '@tarojs/components/types/Text';\n\n  // 修改的Props\n  interface TextProps extends OldTextProps {\n    xProps?: string;\n  }\n\n  export const Text: ComponentType<TextProps>;\n}\n```\n\n----------------------------------------\n\nTITLE: Taro ScrollView Properties Table in Markdown\nDESCRIPTION: Markdown table showing the ScrollView component properties including scroll direction controls, thresholds, scroll position settings, and animation options.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/scroll-view/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|             | 属性                  | 类型        | 默认值 | 说明                                                                                 |\n| ----------- | --------------------- | ----------- | ------ | ------------------------------------------------------------------------------------ |\n| √           | scroll-x              | Boolean     | false  | 允许横向滚动                                                                         |\n| √           | scroll-y              | Boolean     | false  | 允许纵向滚动                                                                         |\n| √           | upper-threshold       | Number      | 50     | 距顶部/左边多远时（单位 px），触发 scrolltoupper 事件                                |\n| √           | lower-threshold       | Number      | 50     | 距底部/右边多远时（单位 px），触发 scrolltolower 事件                                |\n| √           | scroll-top            | Number      |        | 设置竖向滚动条位置                                                                   |\n| √           | scroll-left           | Number      |        | 设置横向滚动条位置                                                                   |\n|             | scroll-into-view      | String      |        | 值应为某子元素 id（id 不能以数字开头）。设置哪个方向可滚动，则在哪个方向滚动到该元素 |\n| √           | scroll-with-animation | Boolean     | false  | 在设置滚动条位置时使用动画过渡                                                       |\n|             | enable-back-to-top    | Boolean     | false  | iOS 点击顶部状态栏、安卓双击标题栏时，滚动条返回顶部，只支持竖向                     |\n| √           | bindscrolltoupper     | EventHandle |        | 滚动到顶部/左边，会触发 scrolltoupper 事件                                           |\n| √           | bindscrolltolower     | EventHandle |        | 滚动到底部/右边，会触发 scrolltolower 事件                                           |\n| √(onScroll) | bindscroll            | EventHandle |        | 是否解码                                                                             |\n```\n\n----------------------------------------\n\nTITLE: Text Styling View Container Example in Taro JSX\nDESCRIPTION: Example showing the correct way to apply text styles to content within a View component in Taro.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro/README.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<View className=\"txt\">hello</View>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic React Component with createElement\nDESCRIPTION: Defines a React component class 'A' that renders a simple div element using React.createElement(). The component is exported as the default export.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-loader/__tests__/fixtures/react2.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react'\n\nclass A extends Component {\n  render () {\n    return React.createElement('div')\n  }\n}\n\nexport default A\n```\n\n----------------------------------------\n\nTITLE: Creating a Taro Application with Package Manager Options\nDESCRIPTION: This snippet demonstrates how to create a new Taro application using different package managers. It shows commands for pnpm, yarn, npm, and cnpm.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/create-app/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create @tarojs/app\n# or\nyarn create @tarojs/app\n# or\nnpm create @tarojs/app\n# or\ncnpm create @tarojs/app\n```\n\n----------------------------------------\n\nTITLE: Configuring Stylelint React Native\nDESCRIPTION: Example .stylelintrc configuration file showing how to enable the plugin and configure rules. Demonstrates setting up the css-property-no-unknown rule.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"stylelint-taro-rn\"],\n  \"rules\": {\n    \"taro-rn/css-property-no-unknown\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Router API Declaration\nDESCRIPTION: Function signature and parameters for createRouter API that initializes H5 routing in Taro applications. Takes app component, configuration, framework type, framework object and optional ReactDOM as parameters.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-router/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateRouter(app, config, type, framework, reactdom)\n```\n\n----------------------------------------\n\nTITLE: Exporting Taro App Component in JavaScript\nDESCRIPTION: This snippet imports React and the main app component, then exports the app as the default export. It serves as the entry point for a Taro-based React application, making the app available for use in other parts of the project.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-loader/__tests__/fixtures/react-imported.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react'\nimport { app } from './app'\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Transforming CSS to React Native Stylesheet in JavaScript\nDESCRIPTION: Demonstrates how to use the transform function to convert CSS class selectors into a React Native Stylesheet object. It shows the input CSS and the resulting JavaScript object.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/css-to-react-native/README.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.myClass {\n  font-size: 18px;\n  line-height: 24px;\n  color: red;\n}\n\n.other {\n  padding: 1rem;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  myClass: {\n    fontSize: 18,\n    lineHeight: 24,\n    color: \"red\"\n  },\n  other: {\n    paddingBottom: 16,\n    paddingLeft: 16,\n    paddingRight: 16,\n    paddingTop: 16\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Taro Application with Specified Name and TypeScript\nDESCRIPTION: This snippet shows how to create a new Taro application with a specified project name and TypeScript enabled. It provides examples for pnpm, yarn, npm, and cnpm.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/create-app/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm create @tarojs/app my-app --typescript\n# or\nyarn create @tarojs/app my-app --typescript\n# or\nnpm create @tarojs/app my-app --typescript\n# or\ncnpm create @tarojs/app my-app --typescript\n```\n\n----------------------------------------\n\nTITLE: Exporting React Application Component\nDESCRIPTION: Imports React, ReactDOM, and the main app component, then exports the app as the default export. This pattern is commonly used as an entry point for React applications.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-loader/__tests__/fixtures/react-imported-2.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { app } from './app'\nexport default app\n```\n\n----------------------------------------\n\nTITLE: PostCSS Implementation Example\nDESCRIPTION: Complete example showing how to use postcss-pxtransform with Node.js file system\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/postcss-pxtransform/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar fs = require('fs');\nvar postcss = require('postcss');\nvar pxtorem = require('postcss-pxtransform');\nvar css = fs.readFileSync('main.css', 'utf8');\nvar options = {\n    replace: false\n};\nvar processedCss = postcss(pxtorem(options)).process(css).css;\n\nfs.writeFile('main-rem.css', processedCss, function (err) {\n  if (err) {\n    throw err;\n  }\n  console.log('Rem file written.');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin\nDESCRIPTION: Basic .babelrc configuration to enable the plugin\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"transform-react-jsx-to-rn-stylesheet\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Loader for Mini-Programs in JavaScript\nDESCRIPTION: This loader is used in mini-program component files to create an object accepted by the mini-program Component constructor. It calls createComponentConfig from @tarojs/runtime.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-loader/README.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Options:\n// framework: 'react' | 'vue3'\n// name: Page path\n```\n\n----------------------------------------\n\nTITLE: Exporting Vue Application Instance\nDESCRIPTION: Imports Vue framework and a predefined app instance, then exports the app as the default module export. This is a common pattern in Vue.js applications for the main application entry point.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-loader/__tests__/fixtures/vue-imported.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'vue'\nimport { app } from './app'\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Configuring for WeApp Platform\nDESCRIPTION: Configuration options for WeApp (小程序) platform with design width specification\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/postcss-pxtransform/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\noptions = {\n    platform: 'weapp',\n    designWidth: 750,\n}\n```\n\n----------------------------------------\n\nTITLE: Importing @tarojs/shared Package in Taro Projects\nDESCRIPTION: Describes the usage and import requirements for the @tarojs/shared package in Taro projects. It emphasizes the use of ES6 module import syntax and the need to exclude this package from external configurations.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/shared/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@tarojs/shared`\n\nTaro 内部使用的 utils。包含了常用的类型判断、错误断言、组件类型/声明/参数等。`@tarojs/shared` 会跨 node/浏览器/小程序/React Native 使用，不得使用平台特有特性。\n\n引入此包的必须采用 ES6 引用单个模块语法，且打包配置 external 不得包括此包。\n```\n\n----------------------------------------\n\nTITLE: Component Property Type Definitions\nDESCRIPTION: TypeScript interface definitions for the component's properties including mode, range, height, and event handlers\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/picker/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nProperty: {\n  columnId: string;\n  height: number;\n  mode: \"date\" | \"time\";\n  range: any[];\n  rangeKey: string;\n  updateDay: (value: number, fields: number) => void;\n  updateHeight: (height: number, columnId: string, needRevise?: boolean) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Taro Project with TypeScript, React, and Sass\nDESCRIPTION: This shell script executes the 'taro init' command to create a new Taro project. It specifies options for using TypeScript as the programming language, React as the framework, and Sass for styling. The script also sets the project name to 'myApp'.\nSOURCE: https://github.com/nervjs/taro/blob/main/crates/taro_init/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ntaro init myApp --typescript --template taro-project-template --css sass\n```\n\n----------------------------------------\n\nTITLE: CSS examples for multi-platform configuration\nDESCRIPTION: Examples of valid and invalid CSS according to the configuration for both Harmony and React Native platforms.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro/README.md#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* 通过检查 */\n✅ .hello {\n  text-align: left;\n}\n/* 警告提示 */\n❌ .hello2 {\n  /* rn平台的text-align属性暂不支持right */\n  text-align: right;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Unit Conversion Examples\nDESCRIPTION: Examples showing input CSS and corresponding output for different platforms (WeApp, H5, and RN)\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/postcss-pxtransform/README.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* input */\nh1 {\n    margin: 0 0 20px;\n    font-size: 32px;\n    line-height: 1.2;\n    letter-spacing: 1px;\n}\n\n/* weapp output */\nh1 {\n    margin: 0 0 20rpx;\n    font-size: 32rpx;\n    line-height: 1.2;\n    letter-spacing: 1rpx;\n}\n\n/* h5 output */\nh1 {\n    margin: 0 0 0.5rem;\n    font-size: 1rem;\n    line-height: 1.2;\n    letter-spacing: 0.025rem;\n}\n\n/* rn output */\nh1 {\n    margin: 0 0 10px;\n    font-size: 16px;\n    line-height: 1.2;\n    letter-spacing: 0.5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for taro-movable-view-core Component\nDESCRIPTION: This snippet lists the properties of the taro-movable-view-core component, including their types, default values, and descriptions. It covers various aspects such as animation, direction, scaling, and positioning.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/movable-area/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\n\n| Property      | Attribute       | Description                                            | Type                                            | Default  |\n| ------------- | --------------- | ------------------------------------------------------ | ----------------------------------------------- | -------- |\n| `animation`   | `animation`     | 是否使用动画                                                 | `boolean`                                       | `true`   |\n| `damping`     | `damping`       | 阻尼系数，用于控制x或y改变时的动画和过界回弹的动画，值越大移动越快                     | `number`                                        | `20`     |\n| `direction`   | `direction`     | 移动方向，属性值有all、vertical、horizontal、none                  | `\"all\" \\| \"horizontal\" \\| \"none\" \\| \"vertical\"` | `\"none\"` |\n| `disabled`    | `disabled`      | 是否禁用                                                   | `boolean`                                       | `false`  |\n| `friction`    | `friction`      | 摩擦系数，用于控制惯性滑动的动画，值越大摩擦力越大，滑动越快停止；必须大于0，否则会被设置成默认值      | `number`                                        | `2`      |\n| `inertia`     | `inertia`       | 是否带有惯性                                                 | `boolean`                                       | `false`  |\n| `outOfBounds` | `out-of-bounds` | 超过可移动区域后，是否还可以移动                                       | `boolean`                                       | `false`  |\n| `scale`       | `scale`         | 是否支持双指缩放，默认缩放手势生效区域是在movable-view内                     | `boolean`                                       | `false`  |\n| `scaleMax`    | `scale-max`     | 定义缩放倍数最大值                                              | `number`                                        | `10`     |\n| `scaleMin`    | `scale-min`     | 定义缩放倍数最小值                                              | `number`                                        | `.5`     |\n| `scaleValue`  | `scale-value`   | 定义缩放倍数，取值范围为 0.5 - 10                                  | `number`                                        | `1`      |\n| `x`           | `x`             | 定义x轴方向的偏移，如果x的值不在可移动范围内，会自动移动到可移动范围；改变x的值会触发动画；单位支持px； | `number \\| string`                              | `0`      |\n| `y`           | `y`             | 定义y轴方向的偏移，如果y的值不在可移动范围内，会自动移动到可移动范围；改变y的值会触发动画；单位支持px； | `number \\| string`                              | `0`      |\n```\n\n----------------------------------------\n\nTITLE: Configuring H5 Loader for Taro Applications in JavaScript\nDESCRIPTION: This loader is specific to H5 applications. It calls createRouter from @tarojs/router in the entry file to create an application compatible with mini-program lifecycle and routing system.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-loader/README.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Options:\n// framework: 'react' | 'vue3'\n// config: Application configuration, corresponding to app.config.js\n// pages: Page configuration, corresponding to page.config.js\n// filename: File name\n```\n\n----------------------------------------\n\nTITLE: Text Styling Direct Example in Taro JSX\nDESCRIPTION: Example showing the correct way to apply text styles directly to a Text component in Taro.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro/README.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Text className=\"txt\">hello</Text>\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Options\nDESCRIPTION: Default configuration options for the postcss-pxtransform plugin\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/postcss-pxtransform/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    unitPrecision: 5,\n    propList: ['*'],\n    selectorBlackList: [],\n    replace: true,\n    mediaQuery: false,\n    minPixelValue: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Progress Component Properties Table - Markdown\nDESCRIPTION: Markdown table defining the core properties of the progress component, including percent, show-info, stroke-width, colors, and animation settings.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/progress/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|     | 属性            | 类型    | 默认值    | 说明                                                    |\n| --- | --------------- | ------- | --------- | ------------------------------------------------------- |\n| √   | percent         | Float   |           | 百分比 0~100                                            |\n| √   | show-info       | Boolean | false     | 在进度条右侧显示百分比                                  |\n| √   | stroke-width    | Number  | 6         | 进度条线的宽度，单位 px                                 |\n|     | color           | Color   | #09BB07   | 进度条颜色 （请使用 activeColor）                       |\n| √   | activeColor     | Color   | 6         | 已选择的进度条的颜色                                    |\n| √   | backgroundColor | Color   | 6         | 未选择的进度条的颜色                                    |\n| √   | active          | Boolean | false     | 进度条从左往右的动画                                    |\n|     | active-mode     | String  | backwards | backwards: 动画从头播；forwards：动画从上次结束点接着播 |\n|     | borderRadius    | Number  | 0         | 圆角大小, 单位 px                                      |\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for React Native in Taro\nDESCRIPTION: Configuration options for PostCSS processing in React Native, including px transformation, CSS Modules support, and CSS variables compilation. Includes scalable options and plugin configurations.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-rn-style-transformer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  rn: {\n    // ...\n    postcss: {\n      // postcss 配置，参考 https://github.com/postcss/postcss#options\n      options: {\n        /* ... */\n      },\n      // 默认true，控制是否对 css value 进行 scalePx2dp 转换，pxtransform配置 enable 才生效\n      scalable: boolean,\n      pxtransform: {\n        enable: boolean, // 默认true\n        config: {\n          /* ... */\n        }, // 插件 pxtransform 配置项，参考尺寸章节\n      },\n      // 跟其他端 css module 配置保持统一\n      cssModules: {\n        enable: true, // 默认为 false，如需使用 css modules 功能，则设为 true\n      },\n      // postcss-css-variables 配置，样式变量编译相关\n      'postcss-css-variables': {\n        enable: boolean, // 默认 true\n        config: {\n          /* ... */\n        }, // 插件 postcss-css-variables 配置项，参考 https://github.com/MadLittleMods/postcss-css-variables?tab=readme-ov-file#options\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Text Style Inheritance Example in Taro JSX\nDESCRIPTION: Example demonstrating incorrect text style inheritance where text properties cannot be inherited from parent View to child Text component.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro/README.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<View className=\"txt\">\n  <Text>hello</Text>\n</View>\n```\n\n----------------------------------------\n\nTITLE: Plugin configuration JSON for WeChat Mini Program plugin\nDESCRIPTION: JSON configuration that defines the plugin structure, including publicly available components, plugin pages, and the main entry file. This is required for setting up a WeChat Mini Program plugin.\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/build-weapp-plugin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"publicComponents\": {\n    \"avatar\": \"components/avatar/avatar\"\n  },\n  \"pages\": {\n    \"list\": \"pages/list/list\"\n  },\n  \"main\": \"index.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Taro Plugin for H5 Platform\nDESCRIPTION: This code snippet shows the npm package name for the Taro plugin that enables compilation to Web applications. It's typically used in the project's package.json or installed via npm/yarn.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-platform-h5/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`@tarojs/plugin-platform-h5`\n```\n\n----------------------------------------\n\nTITLE: Running React App in Development Mode\nDESCRIPTION: Starts the React application in development mode. The app will be accessible at http://localhost:3000 and will automatically reload when changes are made. Lint errors will be displayed in the console.\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/external-prebundle/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Strict React Native Style Error Configuration\nDESCRIPTION: Configuration to convert React Native style warnings into errors with custom error messages for each rule.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-config-taro-rn/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"stylelint-config-taro-rn\",\n  \"rules\": {\n    \"at-rule-blacklist\": [\n      [\"keyframes\", \"font-face\", \"supports\", \"charset\"],\n      {\n        \"severity\": \"error\",\n        \"message\": \"the @-rule is ignored by React Native .\"\n      }\n    ],\n    \"unit-whitelist\": [\n      [\"px\", \"rem\", \"deg\", \"%\", \"vh\", \"vw\", \"vmin\", \"vmax\"],\n      {\n        \"severity\": \"error\",\n        \"message\": \"the unit is ignored by React Native .\"\n      }\n    ],\n    \"selector-pseudo-class-whitelist\": [\n      [\"export\", \"root\"],\n      {\n        \"severity\": \"error\",\n        \"message\": \"pseudo class selectors are ignored by React Native .\"\n      }\n    ],\n    \"selector-max-universal\": [\n      0,\n      {\n        \"severity\": \"error\",\n        \"message\": \"universal selectors are ignored by React Native .\"\n      }\n    ],\n    \"selector-max-attribute\": [\n      0,\n      {\n        \"severity\": \"error\",\n        \"message\": \"attribute selectors are ignored by React Native .\"\n      }\n    ],\n    \"selector-max-type\": [\n      0,\n      {\n        \"severity\": \"error\",\n        \"message\": \"type selectors are ignored by React Native .\"\n      }\n    ],\n    \"selector-max-combinators\": [\n      0,\n      {\n        \"severity\": \"error\",\n        \"message\": \"combinator selectors are ignored by React Native .\"\n      }\n    ],\n    \"selector-max-id\": [\n      0,\n      {\n        \"severity\": \"error\",\n        \"message\": \"id selectors are ignored by React Native .\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiled Output Using Taro Framework React Reconciler\nDESCRIPTION: The transformed output code showing how JSX gets compiled into native DOM operations using Taro's framework-specific reconciler functions for createElement, createTextNode, insertNode, and setProp.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/babel-plugin-transform-solid-jsx/README.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createTextNode as _$createTextNode } from \"@tarojs/plugin-framework-react/dist/reconciler\";\nimport { insertNode as _$insertNode } from \"@tarojs/plugin-framework-react/dist/reconciler\";\nimport { setProp as _$setProp } from \"@tarojs/plugin-framework-react/dist/reconciler\";\nimport { createElement as _$createElement } from \"@tarojs/plugin-framework-react/dist/reconciler\";\nimport { View, Text, Button } from \"@tarojs/components\";\nexport default function Index() {\n  return function () {\n    var _el$ = _$createElement(\"view\"),\n      _el$2 = _$createElement(\"view\"),\n      _el$3 = _$createElement(\"text\"),\n      _el$5 = _$createElement(\"button\");\n    _$insertNode(_el$, _el$2);\n    _$insertNode(_el$, _el$5);\n    _$setProp(_el$, \"class\", \"index\");\n    _$insertNode(_el$2, _el$3);\n    _$insertNode(_el$3, _$createTextNode(\"Hello world! \"));\n    _$insertNode(_el$5, _$createTextNode(\"set class\"));\n    return _el$;\n  }();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for Taro Slider Core Component in StencilJS\nDESCRIPTION: This snippet provides a detailed breakdown of the taro-slider-core component's properties using StencilJS documentation format. It includes property names, attributes, types, and default values for the component.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/slider/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\n\n| Property          | Attribute          | Description | Type      | Default     |\n| ----------------- | ------------------ | ----------- | --------- | ----------- |\n| `activeColor`     | `active-color`     |             | `string`  | `'#1aad19'` |\n| `backgroundColor` | `background-color` |             | `string`  | `'#e9e9e9'` |\n| `blockColor`      | `block-color`      |             | `string`  | `'#ffffff'` |\n| `blockSize`       | `block-size`       |             | `number`  | `28`        |\n| `disabled`        | `disabled`         |             | `boolean` | `false`     |\n| `max`             | `max`              |             | `number`  | `100`       |\n| `min`             | `min`              |             | `number`  | `0`         |\n| `name`            | `name`             |             | `string`  | `''`        |\n| `showValue`       | `show-value`       |             | `boolean` | `false`     |\n| `step`            | `step`             |             | `number`  | `1`         |\n| `value`           | `value`            |             | `number`  | `0`         |\n```\n\n----------------------------------------\n\nTITLE: Building React App for Production\nDESCRIPTION: Builds the React app for production to the 'build' folder. It bundles React in production mode and optimizes the build for the best performance. The output is minified and filenames include hashes.\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/external-prebundle/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Dynamic Design Width Calculation\nDESCRIPTION: Configuration for dynamically calculating design width based on file path, useful for handling different UI design systems\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/postcss-pxtransform/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\noptions = {\n    platform: 'h5',\n    designWidth (input) {\n      if (input.file.replace(/\\\\+/g, '/').indexOf('@nutui/nutui-taro') > -1) {\n        return 375\n      }\n      return 750\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Complex ClassNames Transformation\nDESCRIPTION: Example demonstrating transformation of complex className expressions including arrays, objects, and conditional statements\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from 'react';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className={'header'}>\n        <div className={{ active: this.props.isActive }} />\n        <div className={['header1 header2', 'header3', { active: this.props.isActive }]} />\n        <div className={this.props.visible ? 'show' : 'hide'} />\n        <div className={getClassName()} />\n      </div>\n    );\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from 'react';\nimport appCssStyleSheet from './app.css';\nvar _styleSheet = appCssStyleSheet;\n\nclass App extends Component {\n  render() {\n    return (\n      <div style={_styleSheet.header}>\n        <div style={_getStyle({ active: this.props.isActive })} />\n        <div style={_getStyle(['header1 header2', 'header3', { active: this.props.isActive }])} />\n        <div style={_getStyle(this.props.visible ? 'show' : 'hide')} />\n        <div style={_getStyle(getClassName())} />\n      </div>\n    );\n  }\n}\n\nfunction _getClassName() { /* codes */ }\nfunction _getStyle(className) {\n  return _styleSheet[_getClassName(className)]; // not real code\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for Taro Map Core Component in Markdown\nDESCRIPTION: This snippet defines the properties of the taro-map-core component using a markdown table. It includes various map configuration options such as enabling 3D buildings, satellite view, traffic, zoom controls, and setting map coordinates.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/map/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property                   | Attribute                     | Description      | Type         | Default     |\n| -------------------------- | ----------------------------- | ---------------- | ------------ | ----------- |\n| `circles`                  | --                            | 圆(问题)            | `circle[]`   | `undefined` |\n| `enable3D`                 | `enable-3-d`                  | 3D楼块             | `boolean`    | `undefined` |\n| `enableAutoMaxOverlooking` | `enable-auto-max-overlooking` | 是否开启最大俯视角        | `boolean`    | `undefined` |\n| `enableBuilding`           | `enable-building`             | 是否展示建筑           | `boolean`    | `undefined` |\n| `enableOverlooking`        | `enable-overlooking`          | 是否开启俯视           | `boolean`    | `undefined` |\n| `enableRotate`             | `enable-rotate`               | 是否支持旋转           | `boolean`    | `undefined` |\n| `enableSatellite`          | `enable-satellite`            | 是否开启卫星图          | `boolean`    | `undefined` |\n| `enableScroll`             | `enable-scroll`               | 是否支持拖动           | `boolean`    | `undefined` |\n| `enableTraffic`            | `enable-traffic`              | 是否开启实时路况         | `boolean`    | `undefined` |\n| `enableZoom`               | `enable-zoom`                 | 是否支持缩放           | `boolean`    | `undefined` |\n| `height`                   | `height`                      | 添加高度属性           | `string`     | `'100%'`    |\n| `latitude`                 | `latitude`                    | 纬度               | `number`     | `undefined` |\n| `layerStyle`               | `layer-style`                 | 【个性化地图】配置的 style | `number`     | `undefined` |\n| `longitude`                | `longitude`                   | 经度               | `number`     | `undefined` |\n| `markers`                  | --                            | 标记点              | `marker[]`   | `undefined` |\n| `maxScale`                 | `max-scale`                   | 最大缩放级别           | `number`     | `undefined` |\n| `minScale`                 | `min-scale`                   | 最小缩放级别           | `number`     | `undefined` |\n| `polygons`                 | --                            | 多边形（参数问题）        | `polygon[]`  | `undefined` |\n| `polyline`                 | --                            | 路线(问题)           | `polyline[]` | `undefined` |\n| `rotate`                   | `rotate`                      | 旋转               | `number`     | `undefined` |\n| `scale`                    | `scale`                       | 缩放级别             | `number`     | `undefined` |\n| `showCompass`              | `show-compass`                | 指南针              | `boolean`    | `undefined` |\n| `showScale`                | `show-scale`                  | 比例尺              | `boolean`    | `undefined` |\n| `skew`                     | `skew`                        | 倾斜               | `number`     | `undefined` |\n| `subkey`                   | `subkey`                      | 个性化地图】使用的key     | `string`     | `undefined` |\n| `width`                    | `width`                       | 添加宽度属性           | `string`     | `'100%'`    |\n```\n\n----------------------------------------\n\nTITLE: Multiple ClassNames Transformation\nDESCRIPTION: Example showing how multiple classNames are transformed into an array of styles\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from 'react';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header1 header2\" />;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {  Component } from 'react';\nimport appCssStyleSheet from './app.css';\n\nvar _styleSheet = appCssStyleSheet;\n\nclass App extends Component {\n  render() {\n    return <div style={[_styleSheet.header1, _styleSheet.header2]} />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Valid CSS Properties in React Native\nDESCRIPTION: These code snippets demonstrate CSS properties that are considered valid and would not trigger violations in the css-property-no-unknown rule for React Native styling.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/style-property-no-unknown/README.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  color: green;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  align-self: center;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  elevation: 6;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Taro Application with TypeScript Alias\nDESCRIPTION: This snippet demonstrates how to create a new Taro application using the TypeScript alias '--ts' instead of '--typescript'. It includes examples for pnpm, yarn, npm, and cnpm.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/create-app/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create @tarojs/app my-app --ts\n# or\nyarn create @tarojs/app my-app --ts\n# or\nnpm create @tarojs/app my-app --ts\n# or\ncnpm create @tarojs/app my-app --ts\n```\n\n----------------------------------------\n\nTITLE: StencilJS Events Documentation\nDESCRIPTION: Documentation table for ScrollView component events using StencilJS format.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/scroll-view/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Event           | Description | Type               |\n| --------------- | ----------- | ------------------ |\n| `scroll`        |             | `CustomEvent<any>` |\n| `scrolltolower` |             | `CustomEvent<any>` |\n| `scrolltoupper` |             | `CustomEvent<any>` |\n```\n\n----------------------------------------\n\nTITLE: Transforming CSS Modules :export Block\nDESCRIPTION: Demonstrates how the transform function handles CSS Modules :export blocks, which are used to share variables from CSS to JavaScript.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/css-to-react-native/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntransform(`\n  .foo {\n    color: #f00;\n  }\n\n  :export {\n    myProp: #fff;\n  }\n`);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  foo: {\n    color: \"#f00\";\n  },\n  myProp: \"#fff\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring for RN Platform\nDESCRIPTION: Configuration options for React Native platform with design width specification\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/postcss-pxtransform/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\noptions = {\n    platform: 'rn',\n    designWidth: 750,\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Scripts Configuration\nDESCRIPTION: Example of package.json scripts configuration showing various build commands with CI options\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-plugin-mini-ci/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build:weapp\": \"taro build --type weapp --open\",\n    \"build:weapp:preview\": \"taro build --type weapp --preview\",\n    \"build:weapp:upload\": \"taro build --type weapp --upload\",\n    \"build:weapp:upload\": \"taro build --type weapp --upload --projectPath dist/xxx\"\n  },\n  \"taroConfig\": {\n    \"version\": \"1.0.0\",\n    \"desc\": \"上传描述\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Properties Table in Markdown\nDESCRIPTION: Table documenting the component's properties including damping, distance to refresh, indicator object, and CSS class prefix configurations.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/pull-to-refresh/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property            | Attribute             | Description | Type                                                                         | Default                 |\n| ------------------- | --------------------- | ----------- | ---------------------------------------------------------------------------- | ----------------------- |\n| `damping`           | `damping`             |             | `number`                                                                     | `100`                   |\n| `distanceToRefresh` | `distance-to-refresh` |             | `number`                                                                     | `50`                    |\n| `indicator`         | --                    |             | `{ activate: string; deactivate: string; release: string; finish: string; }` | `INDICATOR`             |\n| `prefixCls`         | `prefix-cls`          |             | `string`                                                                     | `'rmc-pull-to-refresh'` |\n```\n\n----------------------------------------\n\nTITLE: Configuring for H5 Platform\nDESCRIPTION: Configuration options for H5 platform with design width specification\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/postcss-pxtransform/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\noptions = {\n    platform: 'h5',\n    designWidth: 750,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Events for taro-movable-view-core Component\nDESCRIPTION: This snippet outlines the events that can be triggered by the taro-movable-view-core component. It includes events for dragging, scaling, and touch movements in different directions.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/movable-area/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Events\n\n| Event        | Description                                             | Type               |\n| ------------ | ------------------------------------------------------- | ------------------ |\n| `change`     | 拖动过程中触发的事件，event.detail = {x, y, source}                | `CustomEvent<any>` |\n| `htouchmove` | 初次手指触摸后移动为横向的移动时触发，如果catch此事件，则意味着touchmove事件也被catch    | `CustomEvent<any>` |\n| `scale`      | 缩放过程中触发的事件，event.detail = {x, y, scale}，x和y字段在2.1.0之后支持 | `CustomEvent<any>` |\n| `vtouchmove` | 初次手指触摸后移动为纵向的移动时触发，如果catch此事件，则意味着touchmove事件也被catch    | `CustomEvent<any>` |\n```\n\n----------------------------------------\n\nTITLE: Defining Methods for taro-movable-view-core Component\nDESCRIPTION: This snippet describes the methods available in the taro-movable-view-core component. It includes methods for ending scaling, setting the parent element, and updating the scale value.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/movable-area/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Methods\n\n### `endScale() => Promise<void>`\n\n结束缩放\n\n#### Returns\n\nType: `Promise<void>`\n\n\n\n### `setParent({ element, area }: { element: HTMLElement; area: { width: number; height: number; }; }) => Promise<void>`\n\n设置父节点\n\n#### Returns\n\nType: `Promise<void>`\n\n\n\n### `setScale(scale: number) => Promise<void>`\n\n更新缩放\n\n#### Returns\n\nType: `Promise<void>`\n```\n\n----------------------------------------\n\nTITLE: WebView Properties Table Definition\nDESCRIPTION: Markdown table defining the properties of the WebView component. Shows the src property which accepts a string value.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/web-view/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Attribute | Description | Type     | Default     |\n| -------- | --------- | ----------- | -------- | ----------- |\n| `src`    | `src`     |             | `string` | `undefined` |\n```\n\n----------------------------------------\n\nTITLE: Configuring taro/no-nested-selectors rule for Harmony platform\nDESCRIPTION: Example of configuring the taro/no-nested-selectors rule for the Harmony platform, which only allows class selectors.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// .stylelintrc.js\nmodule.exports = mergeConfig(['harmony'], {})\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for Taro Canvas Core Component in Markdown\nDESCRIPTION: This snippet defines the properties of the taro-canvas-core component, including canvasId, height, width, and nativeProps. It specifies the attribute names, types, and default values for each property.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/canvas/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property      | Attribute | Description | Type     | Default     |\n| ------------- | --------- | ----------- | -------- | ----------- |\n| `canvasId`    | `id`      |             | `string` | `undefined` |\n| `height`      | `height`  |             | `string` | `undefined` |\n| `nativeProps` | --        |             | `{}`     | `{}`        |\n| `width`       | `width`   |             | `string` | `undefined` |\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for Taro Text Component in Markdown\nDESCRIPTION: This code snippet defines the properties of the taro-text-core component using a markdown table. It includes information about selectable text, space handling, and decoding options.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/text/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|     | 属性       | 类型    | 默认值 | 说明         |\n| --- | ---------- | ------- | ------ | ------------ |\n| √   | selectable | Boolean | false  | 文本是否可选 |\n|     | space      | Boolean | false  | 显示连续空格 |\n|     | decode     | Boolean | false  | 是否解码     |\n```\n\n----------------------------------------\n\nTITLE: Radio Component Props Table\nDESCRIPTION: Markdown table documenting the properties and configurations available for the radio component, including value, checked state, disabled state, color and change event handler.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/radio/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|     | 属性       | 类型        | 默认值 | 说明                                                                                    |\n| --- | ---------- | ----------- | ------ | --------------------------------------------------------------------------------------- |\n|     | value      | String      | false  | <radio/> 标识。当该<radio/> 选中时，<radio-group/> 的 change 事件会携带<radio/>的 value |\n| √   | checked    | Boolean     | false  | 当前是否选中                                                                            |\n| √   | disabled   | Boolean     | false  | 是否禁用                                                                                |\n|     | color      | Color       | false  | radio 的颜色，同 css 的 color                                                           |\n| √   | bindchange | EventHandle |        | 选中项发生变化时触发 change 事件                                                        |\n```\n\n----------------------------------------\n\nTITLE: CSS examples for taro/no-nested-selectors rule\nDESCRIPTION: Examples of valid and invalid CSS selectors according to the taro/no-nested-selectors rule for the Harmony platform.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro/README.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* 通过检查 */\n✅ .hello {\n  /* ... */\n}\n/* 警告提示：harmony平台仅能使用单类选择器 */\n❌ #a {\n}\n❌ .a .b {\n}\n❌ #a .b {\n}\n❌ .a > .b {\n}\n❌ .a + .b {\n}\n❌ .a ~ .b {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for Taro Slider Core Component in Markdown\nDESCRIPTION: This snippet outlines the properties of the taro-slider-core component, including their types, default values, and descriptions. It covers essential attributes like min, max, step, disabled, value, colors, and event handlers.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/slider/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|     | 属性            | 类型        | 默认值  | 说明                                          |\n| --- | --------------- | ----------- | ------- | --------------------------------------------- |\n| √   | min             | Number      | 0       | 最小值                                        |\n| √   | max             | Number      | 100     | 最大值                                        |\n| √   | step            | Number      | 1       | 步长，取值必须大于 0，并且可被(max - min)整除 |\n| √   | disabled        | Boolean     | false   | 是否禁用                                      |\n| √   | value           | Number      | 0       | 当前取值                                      |\n|     | color           | Color       | #e9e9e9 | 背景条的颜色（请使用 backgroundColor）        |\n|     | selected-color  | Color       | #1aad19 | 已选择的颜色（请使用 activeColor）            |\n| √   | activeColor     | Color       | #1aad19 | 已选择的颜色                                  |\n| √   | backgroundColor | Color       | #e9e9e9 | 背景条的颜色                                  |\n| √   | block-size      | Number      | 28      | 滑块的大小，取值范围为 12 - 28                |\n| √   | block-color     | Color       | #ffffff | 滑块的颜色                                    |\n| √   | show-value      | Boolean     | false   | 是否显示当前 value                            |\n| √   | bindchange      | EventHandle |         | 完成一次拖动后触发的事件                      |\n| √   | bindchanging    | EventHandle |         | 拖动过程中触发的事件                          |\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for Taro Rich Text Core Component in Markdown\nDESCRIPTION: This code snippet defines the properties of the taro-rich-text-core component using a markdown table. It includes the property names, attributes, descriptions, types, and default values.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/rich-text/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property     | Attribute     | Description | Type                                      | Default     |\n| ------------ | ------------- | ----------- | ----------------------------------------- | ----------- |\n| `nodes`      | `nodes`       |             | `ElementType[] \\| string`                 | `undefined` |\n| `selectable` | `selectable`  |             | `boolean`                                 | `false`     |\n| `space`      | `space`       |             | `\"emsp\" \\| \"ensp\" \\| \"nbsp\" \\| undefined` | `undefined` |\n| `userSelect` | `user-select` |             | `boolean`                                 | `false`     |\n```\n\n----------------------------------------\n\nTITLE: Standalone CI Commands Configuration\nDESCRIPTION: Configuration example for using CI commands independently without build process\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-plugin-mini-ci/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build:weapp\": \"taro open --type weapp  --projectPath dist/xxx\",\n    \"build:weapp:preview\": \"taro preview --type weapp\",\n    \"build:weapp:upload\": \"taro upload --type weapp\",\n    \"build:weapp:upload2\": \"taro upload --type weapp --projectPath dist/xxx\"\n  },\n  \"taroConfig\": {\n    \"version\": \"1.0.0\",\n    \"desc\": \"上传描述\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ignored CSS Properties in React Native\nDESCRIPTION: These CSS snippets illustrate properties that would not be considered violations when using the ignoreProperties configuration option in the css-property-no-unknown rule.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/style-property-no-unknown/README.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  my-property: 10px;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  my-other-property: 10px;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  custom: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for Taro Audio Component in Markdown\nDESCRIPTION: This snippet defines the properties of the taro-audio component in a markdown table format. It includes information about support status, property names, types, default values, and descriptions.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/audio/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 是否支持 | 属性           | 类型        | 默认值 | 说明                                                         |\n| -------- | -------------- | ----------- | ------ | ------------------------------------------------------------ |\n| √        | src            | String      |        | 要播放视频的资源地址                                         |\n| √        | controls       | Boolean     | true   | 是否显示默认播放控件（播放/暂停按钮、播放进度、时间）        |\n| √        | autoplay       | Boolean     | false  | 是否自动播放                                                 |\n|          | poster         | String      |        | 视频封面的图片网络资源地址，如果 controls 属性值为 false 则设置 poster 无效 |\n|          | initial-time   | Number      |        | 指定视频初始播放位置                                         |\n| √        | loop           | Boolean     | false  | 是否循环播放                                                 |\n| √        | muted          | Boolean     | false  | 是否静音播放                                                 |\n| √        | bindplay       | EventHandle |        | 当开始/继续播放时触发play事件                                |\n| √        | bindpause      | EventHandle |        | 当暂停播放时触发 pause 事件                                  |\n| √        | bindended      | EventHandle |        | 当播放到末尾时触发 ended 事件                                |\n| √        | bindtimeupdate | EventHandle |        | 播放进度变化时触发，触发频率 250ms 一次 |\n| √        | binderror      | EventHandle |        | 视频播放出错时触发                                           |\n```\n\n----------------------------------------\n\nTITLE: Installing Mini CI Plugin with npm\nDESCRIPTION: Command to install the @tarojs/plugin-mini-ci plugin as a dev dependency\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-plugin-mini-ci/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @tarojs/plugin-mini-ci -D\n```\n\n----------------------------------------\n\nTITLE: Defining Video Component API Table in Markdown\nDESCRIPTION: This markdown table defines the API for a video component, including property names, types, default values, and descriptions. It covers various aspects of video playback and control in a Taro application.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components-rn/src/components/Video/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 是否支持 | 属性           | 类型        | 默认值 | 说明                                                         |\n| -------- | -------------- | ----------- | ------ | ------------------------------------------------------------ |\n|    | autoPauseIfNavigate | boolean | true |当跳转到其它小程序页面时，是否自动暂停本页面的视频\n|    | autoPauseIfOpenNative | boolean | true |当跳转到其它微信原生页面时，是否自动暂停本页面的视频\n|    | direction | number |  |设置全屏时视频的方向，不指定则根据宽高比自动判断\n|    | title | string |  |视频的标题，全屏时在顶部展示\n| √ | autoplay | boolean | false |是否自动播放\n| √ | controls | boolean | true |是否显示默认播放控件（播放/暂停按钮、播放进度、时间）\n| √ | danmuBtn | boolean | false |是否显示弹幕按钮，只在初始化时有效，不能动态变更\n| √ | danmuList | Array.<Danmu> | [] |弹幕列表\n| √ | duration | number |  |指定视频时长\n| √ | enableDanmu | boolean | false |是否展示弹幕，只在初始化时有效，不能动态变更\n| √ | enablePlayGesture | boolean | false |是否开启播放手势，即双击切换播放/暂停\n| √ | enableProgressGesture | boolean | true |是否开启控制进度的手势\n| √ | initialTime | number | 0 |指定视频初始播放位置\n| √ | loop | boolean | false |是否循环播放\n| √ | muted | boolean | false |是否静音播放\n| √ | objectFit | string | contain |当视频大小与 video 容器大小不一致时，视频的表现形式\n| √ | onEnded | Function |  |当播放到末尾时触发 ended 事件\n| √ | onError | Function |  |视频播放出错时触发\n| √ | onFullscreenChange | Function |  |视频进入和退出全屏时触发，event.detail = {fullScreen, direction}，direction 有效值为 vertical 或 horizontal\n| √ | onPause | Function |  |当暂停播放时触发 pause 事件\n| √ | onPlay | Function |  |当开始/继续播放时触发play事件\n| √ | onProgress | Function |  |加载进度变化时触发，只支持一段加载。event.detail = {buffered}，百分比\n| √ | onTimeUpdate | Function |  |播放进度变化时触发，event.detail = {currentTime, duration}。触发频率 250ms 一次\n| √ | onWaiting | Function |  |视频出现缓冲时触发\n| √ | playBtnPosition | string | bottom |播放按钮的位置\n| √ | poster  | string |  |视频封面的图片网络资源地址。若 controls 属性值为 false 则设置 poster 无效\n| √ | showCenterPlayBtn | boolean | true |是否显示视频中间的播放按钮\n| √ | showFullscreenBtn | boolean | true |是否显示全屏按钮\n| √ | showMuteBtn | boolean | false |是否显示静音按钮\n| √ | showPlayBtn | boolean | true |是否显示视频底部控制栏的播放按钮\n| √ | showProgress | boolean | true |若不设置，宽度大于240时才会显示\n| √ | src | string |  |要播放视频的资源地址\n| √ | vslideGesture | boolean | false |在非全屏模式下，是否开启亮度与音量调节手势（同 pageGesture）\n| √ | vslideGestureInFullscreen | boolean | true |在全屏模式下，是否开启亮度与音量调节手势\n```\n\n----------------------------------------\n\nTITLE: Invalid CSS Property Example\nDESCRIPTION: Demonstrates an invalid CSS property usage with a misspelled 'height' property.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/css-property-no-unknown/README.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  heigth: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin in Taro Project\nDESCRIPTION: Basic configuration setup for the plugin in the project's config/index.js file.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-plugin-inject/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  ...\n  plugins: [\n    ['@tarojs/plugin-inject', {\n      // 配置项\n    }]\n  ]\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Properties Table for Taro Text Component in Markdown\nDESCRIPTION: This code snippet provides a more detailed properties table for the taro-text-core component. It includes additional properties such as numberOfLines, userSelect, and specific options for the space attribute.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/text/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Property        | Attribute         | Description | Type                                      | Default     |\n| --------------- | ----------------- | ----------- | ----------------------------------------- | ----------- |\n| `numberOfLines` | `number-of-lines` |             | `number \\| undefined`                     | `undefined` |\n| `selectable`    | `selectable`      |             | `boolean`                                 | `false`     |\n| `space`         | `space`           |             | `\"emsp\" \\| \"ensp\" \\| \"nbsp\" \\| undefined` | `undefined` |\n| `userSelect`    | `user-select`     |             | `boolean`                                 | `false`     |\n```\n\n----------------------------------------\n\nTITLE: Adding Asynchronous APIs\nDESCRIPTION: Configuration example for adding new asynchronous APIs to the mini-program with promise support.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-plugin-inject/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  plugins: [\n    ['@tarojs/plugin-inject', {\n      // 配置需要新增的 API\n      asyncApis: ['b']\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Font Weight in CSS for React Native\nDESCRIPTION: This snippet shows an example of a font-weight value that is considered a violation. The value '500' is problematic as it may not be consistently applied across iOS and Android platforms in React Native.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/font-weight-no-ignored-values/README.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.a {\n  font-weight: 500;\n}\n/**            ↑\n *             This value */\n```\n\n----------------------------------------\n\nTITLE: Taro PickerView Properties Table\nDESCRIPTION: Markdown table defining the component properties including indicator and mask styling options, and value array.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/picker-view/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property         | Attribute         | Description | Type       | Default     |\n| ---------------- | ----------------- | ----------- | ---------- | ----------- |\n| `indicatorClass` | `indicator-class` |             | `string`   | `undefined` |\n| `indicatorStyle` | `indicator-style` |             | `string`   | `undefined` |\n| `maskClass`      | `mask-class`      |             | `string`   | `undefined` |\n| `maskStyle`      | `mask-style`      |             | `string`   | `undefined` |\n| `value`          | --                |             | `number[]` | `undefined` |\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for Taro Swiper Item Core in Markdown\nDESCRIPTION: This snippet defines the API properties for the taro-swiper-item-core component, including support status, property names, types, default values, and descriptions.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/swiper/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 是否支持 | 属性                    | 类型        | 默认值            | 说明                                                         |\n| -------- | ----------------------- | ----------- | ----------------- | ------------------------------------------------------------ |\n| √        | indicatorDots           | Boolean     | false             | 是否显示面板指示点                                           |\n| √        | indicatorColor          | String      | rgba(0, 0, 0, .3) | 指示点颜色                                                   |\n| √        | indicatorActiveColor    | String      | 000               | 当前选中的指示点颜色                                         |\n| √        | autoplay                | Boolean     | false             | 是否自动切换                                                 |\n| √        | interval                | Number      | 5000              | 自动切换时间间隔                                             |\n| √        | duration                | Number      | 500               | 滑动动画时长                                                 |\n| √        | current                 | Number      | 0                 | 当前所在滑块的 index                                         |\n| √        | bindchange              | EventHandle |                   | current 改变时会触发 change 事件                             |\n| √        | circular                | Boolean     | false             | 是否采用衔接滑动                                             |\n| ×        | skip-hidden-item-layout | Boolean     | false             | 是否跳过未显示的滑块布局，设为 true 可优化复杂情况下的滑动性能，但会丢失隐藏状态滑块的布局信息 |\n| ×        | display-multiple-items  | Number      | 1                 | 同时显示的滑块数量                                           |\n| ×        | vertical                | Boolean     | false             | 滑动方向是否为纵向                                           |\n| ×        | bindanimationfinish     | EventHandle |                   | 动画结束时会触发 animationfinish 事件                        |\n```\n\n----------------------------------------\n\nTITLE: Taro PickerView Events Table\nDESCRIPTION: Markdown table defining the component events including change, pickend, and pickstart events.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/picker-view/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Event       | Description | Type               |\n| ----------- | ----------- | ------------------ |\n| `change`    |             | `CustomEvent<any>` |\n| `pickend`   |             | `CustomEvent<any>` |\n| `pickstart` |             | `CustomEvent<any>` |\n```\n\n----------------------------------------\n\nTITLE: Illustrating Ignored Line Height Values in CSS for React Native\nDESCRIPTION: These snippets demonstrate various line-height values that will be ignored or considered invalid by the rule when the option is set to true. This includes unitless values, percentages, and certain units like 'pt'.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/line-height-no-value-without-unit/README.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.a {\n  line-height: 2;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.a {\n  line-height: 100%;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.a {\n  line-height: 100pt;\n}\n```\n\n----------------------------------------\n\nTITLE: StencilJS Generated Properties Table - Markdown\nDESCRIPTION: Auto-generated markdown table showing the component properties with their attributes, types, and default values using StencilJS documentation format.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/progress/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Property          | Attribute          | Description | Type               | Default     |\n| ----------------- | ------------------ | ----------- | ------------------ | ----------- |\n| `active`          | `active`           |             | `boolean`          | `false`     |\n| `activeColor`     | `active-color`     |             | `string`           | `'#09BB07'` |\n| `backgroundColor` | `background-color` |             | `string`           | `'#EBEBEB'` |\n| `borderRadius`    | `border-radius`    |             | `number \\| string` | `0`         |\n| `fontSize`        | `font-size`        |             | `number \\| string` | `16`        |\n| `percent`         | `percent`          |             | `number`           | `0`         |\n| `showInfo`        | `show-info`        |             | `boolean`          | `false`     |\n| `strokeWidth`     | `stroke-width`     |             | `number \\| string` | `6`         |\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for Taro Cover Image Component in Markdown\nDESCRIPTION: This snippet defines the properties of the taro-cover-image-core component. It includes 'nativeProps' and 'src' properties with their respective types and default values.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/cover-image/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\n\n| Property      | Attribute | Description | Type     | Default     |\n| ------------- | --------- | ----------- | -------- | ----------- |\n| `nativeProps` | --        |             | `{}`     | `{}`        |\n| `src`         | `src`     |             | `string` | `undefined` |\n```\n\n----------------------------------------\n\nTITLE: Configuring Stylus for React Native in Taro\nDESCRIPTION: Detailed configuration options for Stylus preprocessing in React Native, including plugins, import paths, variables, and various compiler settings.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-rn-style-transformer/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  rn: {\n    // ...\n    stylus: {\n      options: {\n        use: ['nib'],\n        include: [path.join(__dirname, 'src/styl/config')],\n        import: ['nib', path.join(__dirname, 'src/styl/mixins')],\n        define: [\n          ['$development', process.env.NODE_ENV === 'development'],\n          ['rawVar', 42, true],\n        ],\n        includeCSS: false,\n        lineNumbers: true,\n        hoistAtrules: true,\n      },\n      additionalData: '', // {String|Function}\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Violation Patterns for Font Weight in CSS\nDESCRIPTION: These snippets demonstrate font-weight values (100 and 300) that are considered violations according to the linting rule. These values may not be consistently rendered across iOS and Android in React Native applications.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/font-weight-no-ignored-values/README.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.a {\n  font-weight: 100;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.a {\n  font-weight: 300;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for Taro Audio Component in Markdown (Auto-generated)\nDESCRIPTION: This auto-generated snippet defines the properties of the taro-audio component in a markdown table format. It includes property names, descriptions, types, and default values.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/audio/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\n\n| Property      | Attribute  | Description | Type      | Default     |\n| ------------- | ---------- | ----------- | --------- | ----------- |\n| `autoplay`    | `autoplay` |             | `boolean` | `false`     |\n| `controls`    | `controls` |             | `boolean` | `true`      |\n| `loop`        | `loop`     |             | `boolean` | `false`     |\n| `muted`       | `muted`    |             | `boolean` | `false`     |\n| `nativeProps` | --         |             | `{}`      | `{}`        |\n| `src`         | `src`      |             | `string`  | `undefined` |\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for Taro TabBar Component in Markdown\nDESCRIPTION: This snippet defines the properties of the taro-tabbar component. It specifies a single property 'conf' of type ITabBarConf.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/tabbar/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Attribute | Description | Type          | Default     |\n| -------- | --------- | ----------- | ------------- | ----------- |\n| `conf`   | --        |             | `ITabBarConf` | `undefined` |\n```\n\n----------------------------------------\n\nTITLE: Building Taro Project for Production\nDESCRIPTION: Command to build the Taro project for production environment. This step prepares the project for integration into the native mini program project.\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/blended-basic/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Valid Color Property\nDESCRIPTION: Shows correct usage of the color property in React Native.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/css-property-no-unknown/README.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  color: green;\n}\n```\n\n----------------------------------------\n\nTITLE: StencilJS Methods Documentation\nDESCRIPTION: Documentation for ScrollView component methods including scroll control functions.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/scroll-view/readme.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### `mpScrollIntoViewMethod(selector: string) => Promise<void>`\n\n#### Returns\n\nType: `Promise<void>`\n\n### `mpScrollToMethod(object: ScrollViewContext.scrollTo.Option) => Promise<void>`\n\n#### Returns\n\nType: `Promise<void>`\n```\n\n----------------------------------------\n\nTITLE: Radio Group Props Table\nDESCRIPTION: Markdown table documenting the properties and configurations available for the radio-group component, specifically the change event handler.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/radio/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|     | 属性       | 类型        | 默认值 | 说明                                                                                            |\n| --- | ---------- | ----------- | ------ | ----------------------------------------------------------------------------------------------- |\n| √   | bindchange | EventHandle |        | <radio-group/>中选中项发生改变是触发 change 事件，detail = value:[选中的 radio 的 value 的数组] |\n```\n\n----------------------------------------\n\nTITLE: Defining Events for Taro Slider Core Component in StencilJS\nDESCRIPTION: This snippet outlines the events emitted by the taro-slider-core component using StencilJS documentation format. It includes event names, descriptions, and types.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/slider/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Events\n\n| Event      | Description | Type               |\n| ---------- | ----------- | ------------------ |\n| `change`   |             | `CustomEvent<any>` |\n| `changing` |             | `CustomEvent<any>` |\n```\n\n----------------------------------------\n\nTITLE: Valid Elevation Property\nDESCRIPTION: Shows correct usage of the elevation property in React Native.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/css-property-no-unknown/README.md#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  elevation: 6;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and running the project in Taro WeChat Mini Program plugin\nDESCRIPTION: Commands for setting up and running the Taro WeChat Mini Program plugin in both development and production modes. It includes installing dependencies, starting development mode, and building for production.\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/build-weapp-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 安装依赖\n$ yarn\n# 开发模式\n$ npm run dev\n# 生产模式\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Events Documentation Table\nDESCRIPTION: Markdown table documenting the available events, specifically the change event.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/radio/readme.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Event    | Description | Type               |\n| -------- | ----------- | ------------------ |\n| `change` |             | `CustomEvent<any>` |\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App\nDESCRIPTION: Removes the single build dependency from the project and copies all configuration files and transitive dependencies into the project. This gives full control over the project setup but is a one-way operation.\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/external-prebundle/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Illustrating CSS Property Violations in React Native\nDESCRIPTION: These code blocks demonstrate various CSS properties that would be flagged as violations by the css-property-no-unknown rule, including misspelled properties and those not supported in React Native.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/style-property-no-unknown/README.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  word-wrap: break-word;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  colr: blue;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  my-property: 1;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  box-shadow: 1px 2px 3px red;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring taro/declaration-property-value-allowed-list rule\nDESCRIPTION: Example of configuring the taro/declaration-property-value-allowed-list rule for Harmony and React Native platforms, specifying allowed properties and their corresponding values.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  plugins: ['stylelint-taro']\n  rules: {\n    'taro/declaration-property-value-allowed-list': {\n      harmony: {\n        'color': true,  // 支持color属性及所有合法值\n        'text-align': ['left', 'right'], // 仅支持left、right 2个值\n        'height': [/^-?\\d+(\\.\\d+)?(px|vw|vh|%)?$/i] // 支持匹配height为length\n      },\n      rn: {\n        'text-align': ['left', 'center'], // 仅支持left、center 2个值\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for Taro Label Core Component in Markdown\nDESCRIPTION: This code snippet defines the properties of the taro-label-core component using a markdown table. It specifies a single property 'for' of type string with no default value.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/label/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Attribute | Description | Type     | Default     |\n| -------- | --------- | ----------- | -------- | ----------- |\n| `for`    | `for`     |             | `string` | `undefined` |\n```\n\n----------------------------------------\n\nTITLE: Configuring CI Plugin with Static Options\nDESCRIPTION: Configuration example showing how to set up the CI plugin with static options for various mini program platforms including WeChat, ByteDance, Alipay, DingDing, Baidu, and JD\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-plugin-mini-ci/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst CIPluginOpt = {\n  weapp: {\n    appid: '微信小程序appid',\n    privateKeyPath: '密钥文件相对项目根目录的相对路径，例如 key/private.appid.key',\n  },\n  tt: {\n    email: '字节小程序邮箱',\n    password: '字节小程序密码',\n  },\n  alipay: {\n    appid: '支付宝小程序appid',\n    toolId: '工具id',\n    privateKeyPath: '密钥文件相对项目根目录的相对路径，例如 key/pkcs8-private-pem',\n  },\n  dd: {\n    appid: '钉钉小程序appid,即钉钉开放平台后台应用管理的 MiniAppId 选项',\n    token: '令牌，从钉钉后台获取',\n  },\n  swan: {\n    token: '鉴权需要的token令牌',\n  },\n  jd: {\n    privateKey: '京东小程序秘钥'\n  },\n  version: '1.0.0',\n  desc: '版本描述',\n}\nconst config = {\n  plugins: [['@tarojs/plugin-mini-ci', CIPluginOpt]],\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Word Wrap Property\nDESCRIPTION: Shows violation pattern where word-wrap property is not supported in React Native.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/css-property-no-unknown/README.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  word-wrap: break-word;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring stylelint-taro for Harmony and React Native platforms\nDESCRIPTION: Example of configuring stylelint-taro for both Harmony and React Native platforms in .stylelintrc.js file.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// .stylelintrc.js\nmodule.exports = mergeConfig(['harmony', 'rn'], {})\n```\n\n----------------------------------------\n\nTITLE: Compiling Component Library\nDESCRIPTION: Commands to compile the taro-components-react library for development.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components-react/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncd taro/packages/taro-components-react\nnpm run dev\n# 完成后重新刷新浏览器即可\n```\n\n----------------------------------------\n\nTITLE: Transforming CSS Viewport Units (Experimental)\nDESCRIPTION: Demonstrates how the transform function handles CSS viewport units, adding a special __viewportUnits flag to the result for optimization purposes.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/css-to-react-native/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntransform(`.foo { font-size: 1vh; }`);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   __viewportUnits: true,\n  foo: {\n    fontSize: \"1vh\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Color Property Spelling\nDESCRIPTION: Demonstrates a violation with misspelled 'color' property.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/css-property-no-unknown/README.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  colr: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Ignore Properties Configuration\nDESCRIPTION: Shows configuration for ignoring specific properties using regex and string patterns.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/css-property-no-unknown/README.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n[\"/^my-/\", \"custom\"];\n```\n\n----------------------------------------\n\nTITLE: Building Taro Project for H5\nDESCRIPTION: Command to build and watch the Taro project for H5 platform.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components-react/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntaro build --type h5 --watch\n```\n\n----------------------------------------\n\nTITLE: WebView Events Table Definition\nDESCRIPTION: Markdown table defining the available events (error and load) for the WebView component, both emitting CustomEvent<any> type.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/web-view/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Event   | Description | Type               |\n| ------- | ----------- | ------------------ |\n| `error` |             | `CustomEvent<any>` |\n| `load`  |             | `CustomEvent<any>` |\n```\n\n----------------------------------------\n\nTITLE: Invalid Custom Property\nDESCRIPTION: Shows violation with an unsupported custom property.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/css-property-no-unknown/README.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  my-property: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignored Properties in CSS Linting Rule\nDESCRIPTION: This JavaScript snippet shows how to configure the css-property-no-unknown rule to ignore specific properties using regex patterns and exact string matches.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/style-property-no-unknown/README.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n[\"/^my-/\", \"custom\"];\n```\n\n----------------------------------------\n\nTITLE: Documenting Events for Taro Form Core Component in Markdown\nDESCRIPTION: This code snippet defines the events table for the taro-form-core component. It specifies a single 'submit' event of type CustomEvent<any>.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/form/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Event    | Description | Type               |\n| -------- | ----------- | ------------------ |\n| `submit` |             | `CustomEvent<any>` |\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS Property Violations in React Native\nDESCRIPTION: This snippet shows examples of CSS properties that would be considered violations by the css-property-no-unknown rule. It includes unknown properties and properties not supported in React Native.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/style-property-no-unknown/README.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  heigth: 100%;\n}\n/** ↑\n * These properties */\n```\n\n----------------------------------------\n\nTITLE: Showcasing Acceptable Font Weight Values in CSS for React Native\nDESCRIPTION: These snippets illustrate font-weight values that are not considered violations. They include numeric values (400, 700) and keyword values (normal, bold) that are consistently rendered across iOS and Android platforms in React Native.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/font-weight-no-ignored-values/README.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.a {\n  font-weight: 400;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.a {\n  font-weight: 700;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.a {\n  font-weight: normal;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.a {\n  font-weight: bold;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Events for Taro Map Core Component in Markdown\nDESCRIPTION: This snippet defines the events of the taro-map-core component using a markdown table. It currently only includes a 'tap' event.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/map/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Event | Description | Type               |\n| ----- | ----------- | ------------------ |\n| `tap` |             | `CustomEvent<any>` |\n```\n\n----------------------------------------\n\nTITLE: Basic Stylelint Configuration\nDESCRIPTION: Basic .stylelintrc configuration file that extends stylelint-config-taro-rn with a custom selector class pattern rule.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-config-taro-rn/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"stylelint-config-taro-rn\",\n  \"rules\": {\n    \"selector-class-pattern\": \"^[a-z][a-zA-Z0-9]*$\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Line Height in CSS for React Native\nDESCRIPTION: This snippet shows an example of an invalid line-height value that the rule aims to prevent. It uses a unitless value, which is not supported in React Native.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/line-height-no-value-without-unit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.a {\n  line-height: 1;\n}\n/**            ↑\n *             This value */\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for Taro React Native Components\nDESCRIPTION: Markdown header declaring the repository purpose and scope for Taro React Native components\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components-rn/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Taro Components for React Native\n```\n\n----------------------------------------\n\nTITLE: Defining Events for Taro Cover Image Component in Markdown\nDESCRIPTION: This snippet defines the events that can be emitted by the taro-cover-image-core component. It includes 'error' and 'load' events, both of type CustomEvent<any>.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/cover-image/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Events\n\n| Event   | Description | Type               |\n| ------- | ----------- | ------------------ |\n| `error` |             | `CustomEvent<any>` |\n| `load`  |             | `CustomEvent<any>` |\n```\n\n----------------------------------------\n\nTITLE: Disabling React Native Style Warnings\nDESCRIPTION: Configuration to disable all React Native specific style warnings in stylelint.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-config-taro-rn/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"stylelint-config-taro-rn\",\n  \"rules\": {\n    \"taro-rn/font-weight-no-ignored-values\": null,\n    \"at-rule-blacklist\": null,\n    \"unit-whitelist\": null,\n    \"selector-pseudo-class-whitelist\": null,\n    \"selector-max-universal\": null,\n    \"selector-max-attribute\": null,\n    \"selector-max-type\": null,\n    \"selector-max-combinators\": null,\n    \"selector-max-id\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Taro Repository\nDESCRIPTION: Instructions for cloning the Taro repository, switching to the correct branch, and building the project.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components-react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/NervJS/taro.git\ncd taro\ngit checkout components-compat\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn run bootstrap\nyarn run build\n```\n\n----------------------------------------\n\nTITLE: Exporting Taro App Instance\nDESCRIPTION: Imports an app instance from a local module and re-exports it as the default export. This is a common pattern in Taro applications for exposing the main app instance.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-loader/__tests__/fixtures/basic_1.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { app } from './app'\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Hooks Interface Definition\nDESCRIPTION: TypeScript interface definition for the hooks data structure used in onPreviewComplete and onUploadComplete events\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-plugin-mini-ci/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HooksData {\n  success: boolean\n  data: {\n    platform: string\n    qrCodeLocalPath: string\n    qrCodeContent: string\n    version: string\n    desc: string\n    projectPath: string\n  }\n  error?: Error\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin via NPM\nDESCRIPTION: Command to install the babel plugin as a development dependency\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev babel-plugin-transform-react-jsx-to-rn-stylesheet\n```\n\n----------------------------------------\n\nTITLE: Creating Connected React Component in Taro\nDESCRIPTION: Defines a React component class 'A' that renders a div element and connects it to Redux store. The component uses React.createElement() for rendering instead of JSX syntax.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-loader/__tests__/fixtures/react.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react'\n\nclass A extends Component {\n  render () {\n    return React.createElement('div')\n  }\n}\n\nexport default connect({})(A)\n```\n\n----------------------------------------\n\nTITLE: Custom Plugin for CI Hooks\nDESCRIPTION: Example of a custom plugin implementation that handles CI preview and upload completion events\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-plugin-mini-ci/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (ctx) {\n  ctx.register({\n    name: 'onPreviewComplete',\n    fn: ({ success, data, error }) => {\n      console.log('接收预览后数据', success, data, error)\n    },\n  })\n  ctx.register({\n    name: 'onUploadComplete',\n    fn: ({ success, data, error }) => {\n      console.log('接收上传后数据', success, data, error)\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Stylelint Dependencies with NPM\nDESCRIPTION: Command to install stylelint, stylelint-taro-rn, and stylelint-config-taro-rn packages using NPM package manager.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-config-taro-rn/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install stylelint stylelint-taro-rn stylelint-config-taro-rn --save-dev\n```\n\n----------------------------------------\n\nTITLE: Running Development Build Command\nDESCRIPTION: Command to compile and run the project in development environment\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/blended-taro-component/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Properties Documentation Table\nDESCRIPTION: Markdown table showing the properties documentation including the name property.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/radio/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Attribute | Description | Type  | Default     |\n| -------- | --------- | ----------- | ----- | ----------- |\n| `name`   | `name`    |             | `any` | `undefined` |\n```\n\n----------------------------------------\n\nTITLE: Events Table in Markdown\nDESCRIPTION: Table documenting the component's events, specifically the refresh event that emits a CustomEvent.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/pull-to-refresh/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Event     | Description | Type               |\n| --------- | ----------- | ------------------ |\n| `refresh` |             | `CustomEvent<any>` |\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code for stylelint-taro validation\nDESCRIPTION: JSON configuration for enabling stylelint in VS Code and specifying file types to validate.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro/README.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n// .vscode/settings.json\n{\n  \"stylelint.enable\": true,\n  \"stylelint.validate\": [\"css\", \"sass\", \"scss\", \"less\", \"postcss\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Building H5 Components\nDESCRIPTION: Commands to compile native components for H5 environment by navigating to taro-project directory and running the H5 build command\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/blended-taro-component/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd taro-project\n$ npm run build:h5\n```\n\n----------------------------------------\n\nTITLE: StencilJS Properties Documentation\nDESCRIPTION: Generated documentation table for ScrollView component properties using StencilJS format, including type definitions and default values.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/scroll-view/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Property                    | Attribute                    | Description | Type                                        | Default     |\n| --------------------------- | ---------------------------- | ----------- | ------------------------------------------- | ----------- |\n| `animated`                  | `scroll-with-animation`      |             | `boolean`                                   | `false`     |\n| `lowerThreshold`            | `lower-threshold`            |             | `number \\| string`                          | `50`        |\n| `mpScrollIntoView`          | `scroll-into-view`           |             | `string`                                    | `undefined` |\n| `mpScrollIntoViewAlignment` | `scroll-into-view-alignment` |             | `\"center\" \\| \"end\" \\| \"nearest\" \\| \"start\"` | `undefined` |\n| `mpScrollLeft`              | `scroll-left`                |             | `number \\| string`                          | `undefined` |\n| `mpScrollTop`               | `scroll-top`                 |             | `number \\| string`                          | `undefined` |\n| `scrollX`                   | `scroll-x`                   |             | `boolean`                                   | `false`     |\n| `scrollY`                   | `scroll-y`                   |             | `boolean`                                   | `false`     |\n| `upperThreshold`            | `upper-threshold`            |             | `number \\| string`                          | `50`        |\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Compiling Taro WeChat Mini Program Project\nDESCRIPTION: This snippet shows the commands to install project dependencies using Yarn and compile the Taro project for WeChat Mini Program with watch mode enabled. It's part of the quick start guide for the demo project.\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/weapp-independent-subpackages/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 安装依赖\n$ yarn\n# 编译预览\n$ taro build --type weapp --watch\n```\n\n----------------------------------------\n\nTITLE: Building Taro Production Release\nDESCRIPTION: Command to create a production build of the Taro project.\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/blended-taro-component-vue3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Initializing Base Taro App Component in JavaScript\nDESCRIPTION: Creates a minimal Taro application component class that extends Component and implements a required render method returning null. This serves as the root component for a Taro application.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-loader/__tests__/fixtures/rename-app.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass App extends Component {\n  render () {\n    return null\n  }\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Compiling Taro Project for Development\nDESCRIPTION: Command to compile and run the Taro project in development environment. This step is recommended for development and debugging before previewing in the native mini program environment.\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/blended-basic/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Compiling Taro Components for H5\nDESCRIPTION: Commands to navigate to the Taro project directory and build components for H5 platform.\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/blended-taro-component-vue3/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd taro-project\n$ npm run build:h5\n```\n\n----------------------------------------\n\nTITLE: Building Taro H5 Project\nDESCRIPTION: Commands to navigate to the H5 directory and start the H5 development environment.\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/blended-taro-component-vue3/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd h5\n$ yarn dev:h5\n```\n\n----------------------------------------\n\nTITLE: Compiling Taro Project for Development Environment\nDESCRIPTION: Command to compile and run the Taro project in the development environment. This allows for development and debugging within the Taro project.\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/new-blended/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Building Taro Project for Production Environment\nDESCRIPTION: Command to build the Taro project for the production environment. This prepares the project for integration into the native mini-program.\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/new-blended/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Basic markdown structure showing the component name and build information footer.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/live-pusher/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# taro-live-pusher-core\n\n<!-- Auto Generated Below -->\n\n----------------------------------------------\n\n*Built with [StencilJS](https://stenciljs.com/)*\n```\n\n----------------------------------------\n\nTITLE: Running Taro Development Build\nDESCRIPTION: Command to start the development environment build process for the Taro project.\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/blended-taro-component-vue3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting up H5-HTML Project Server\nDESCRIPTION: Commands to install http-server globally, navigate to the h5-html directory, and start a local server without caching.\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/blended-taro-component-vue3/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn global add http-server\n$ cd h5-html\n$ http-server -c-1\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Template\nDESCRIPTION: Basic markdown template structure for documenting the Taro long press gesture handler core component. Contains a header and footer with StencilJS reference.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/long-press-gesture-handler/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# taro-long-press-gesture-handler-core\n\n<!-- Auto Generated Below -->\n\n----------------------------------------------\n\n*Built with [StencilJS](https://stenciljs.com/)*\n```\n\n----------------------------------------\n\nTITLE: Adding Synchronous APIs\nDESCRIPTION: Configuration example for adding new synchronous APIs to the mini-program. Note: Deprecated in v1.0.0+.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-plugin-inject/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  plugins: [\n    ['@tarojs/plugin-inject', {\n      // 配置需要新增的 API\n      syncApis: ['a']\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running H5 Project Development\nDESCRIPTION: Commands to compile and run the H5 project in development mode\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/blended-taro-component/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd h5\n$ yarn dev:h5\n```\n\n----------------------------------------\n\nTITLE: Installing PostCSS Pxtransform with NPM\nDESCRIPTION: Command to install the postcss-pxtransform package as a dev dependency\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/postcss-pxtransform/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install postcss-pxtransform --save-dev\n```\n\n----------------------------------------\n\nTITLE: Defining itemId Property for Taro Swiper Item Core in Markdown\nDESCRIPTION: This snippet defines the 'itemId' property for the taro-swiper-item-core component, including its type and default value.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/swiper/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Attribute | Description | Type     | Default     |\n| -------- | --------- | ----------- | -------- | ----------- |\n| `itemId` | `item-id` |             | `string` | `undefined` |\n```\n\n----------------------------------------\n\nTITLE: Running Production Build Command\nDESCRIPTION: Command to compile and build the project for production environment\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/blended-taro-component/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Stylelint Dependencies with Yarn\nDESCRIPTION: Command to install stylelint, stylelint-taro-rn, and stylelint-config-taro-rn packages using Yarn package manager.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-config-taro-rn/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add stylelint stylelint-taro-rn stylelint-config-taro-rn --dev\n```\n\n----------------------------------------\n\nTITLE: Defining Events for Taro TabBar Component in Markdown\nDESCRIPTION: This snippet defines the events of the taro-tabbar component. It specifies a single event 'longpress' of type CustomEvent<any>.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/tabbar/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Event       | Description | Type               |\n| ----------- | ----------- | ------------------ |\n| `longpress` |             | `CustomEvent<any>` |\n```\n\n----------------------------------------\n\nTITLE: Setting Up H5-HTML Project Server\nDESCRIPTION: Commands to install http-server globally, navigate to h5-html directory, and start a server without caching\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/blended-taro-component/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn global add http-server\n$ cd h5-html\n$ http-server -c-1\n```\n\n----------------------------------------\n\nTITLE: Installing Stylelint React Native with Yarn\nDESCRIPTION: Command to install stylelint and stylelint-react-native plugin using Yarn package manager.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add stylelint stylelint-react-native --dev\n```\n\n----------------------------------------\n\nTITLE: Linking Taro Dependencies Globally\nDESCRIPTION: Commands to link the necessary Taro packages globally for local development.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components-react/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/taro-webpack-runner\nnpm link\ncd ../packages/taro-loader\nnpm link\ncd ../packages/taro-components-react\nnpm link\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies in Project\nDESCRIPTION: Commands to link the previously globally linked Taro packages to the local project.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components-react/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm link @tarojs/webpack-runner\nnpm link @tarojs/taro-loader\nnpm link @tarojs/components-react\n```\n\n----------------------------------------\n\nTITLE: Installing Stylelint React Native with NPM\nDESCRIPTION: Command to install stylelint and stylelint-react-native plugin using NPM package manager.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install stylelint stylelint-react-native --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for New Component\nDESCRIPTION: Example of how to modify the Rollup configuration to include a new component.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components-react/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// taro-components/rollup.config.js\nexport default {\n  input: {\n    'xxx/index': 'src/components/xxx/index.[jsx|tsx]'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: 安装Taro插件 (npm)\nDESCRIPTION: 使用npm安装Taro插件的命令。这里的{{ projectName }}将被替换为实际的项目名称。\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-cli/templates/plugin-compile/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nnpm i {{ projectName }} -D\n```\n```\n\n----------------------------------------\n\nTITLE: Installing stylelint-taro with Yarn\nDESCRIPTION: Command to install stylelint-taro as a dev dependency using Yarn package manager.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D stylelint-taro\n```\n\n----------------------------------------\n\nTITLE: Package Name Definition for Taro WeChat Platform Plugin\nDESCRIPTION: Package name declaration for the Taro plugin that enables WeChat Mini Program platform support.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-platform-weapp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@tarojs/plugin-platform-weapp`\n```\n\n----------------------------------------\n\nTITLE: Running React App Tests\nDESCRIPTION: Launches the test runner in interactive watch mode. This command is used for running tests on the React application.\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/external-prebundle/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing Taro Plugin Inject\nDESCRIPTION: Command to install the @tarojs/plugin-inject package in a Taro project root directory.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-plugin-inject/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @tarojs/plugin-inject --save\n```\n\n----------------------------------------\n\nTITLE: Package Name for Taro H5 API\nDESCRIPTION: The npm package name for Taro's H5 API implementation. This package exposes H5-specific APIs to be used with the @tarojs/taro core package.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-h5/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @tarojs/taro-h5\n```\n\n----------------------------------------\n\nTITLE: Configuring robots.txt for Taro Project\nDESCRIPTION: This snippet configures the robots.txt file for the Taro project. It allows all user agents to access the entire site by not specifying any disallowed paths.\nSOURCE: https://github.com/nervjs/taro/blob/main/examples/external-prebundle/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: 配置Taro插件 (JavaScript)\nDESCRIPTION: 在Taro项目的配置文件中使用插件。这个示例展示了如何在/config/index.js文件中添加插件配置。对于plugin-template类型的插件，还包括了可选参数的说明。\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-cli/templates/plugin-compile/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{{#if (eq pluginType \"plugin-template\") }}\n/**插件参数为 IPluginOpts {\n *  installPath: string 安装的路径\n *  css?: 'none' | 'sass' | 'stylus' | 'less'\n *  typescript?: boolean\n *  compiler?: 'webpack5' | 'vite'\n * }\n * 这些参数后续会被模版文件解析所用\n * 如果不传，会从 package.json 的 templateInfo\n */\n{{/if}}\nconst config = {\n  plugins: [\n    [\"{{ projectName }}\"{{#if (eq pluginType \"plugin-template\") }}, { installPath:'/xxx/xx/x' }{{/if}}]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Package Name Definition in Markdown\nDESCRIPTION: Title definition for the @tarojs/webpack5-prebundle package that provides dependency preloading functionality for Taro using Webpack 5.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-webpack5-prebundle/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@tarojs/webpack5-prebundle`\n```\n\n----------------------------------------\n\nTITLE: Displaying Taro Package Name for Apple Silicon Macs in Markdown\nDESCRIPTION: This snippet shows the package name for the Taro binary built for Apple Silicon Macs using Markdown syntax. It emphasizes the package name using backticks and bold formatting.\nSOURCE: https://github.com/nervjs/taro/blob/main/npm/darwin-arm64/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@tarojs/taro-darwin-arm64`\n```\n\n----------------------------------------\n\nTITLE: Rendering Dependency Graph in Mermaid\nDESCRIPTION: A Mermaid graph showing the dependency relationship between taro-video-core and taro-video-danmu components.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/video/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n  taro-video-core --> taro-video-danmu\n  style taro-video-danmu fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------\n\nTITLE: Installing Taro Plugin for Baidu Swan\nDESCRIPTION: Package name reference for the Taro plugin that supports compilation to Baidu Smart Mini Program platform.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-platform-swan/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@tarojs/plugin-platform-swan\n```\n\n----------------------------------------\n\nTITLE: Displaying Taro Linux Package Name\nDESCRIPTION: Package name specification for the x86_64 Linux GNU binary distribution of Taro framework.\nSOURCE: https://github.com/nervjs/taro/blob/main/npm/linux-x64-gnu/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@tarojs/taro-linux-x64-gnu\n```\n\n----------------------------------------\n\nTITLE: Importing and Using taro-extend in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the taro-extend package in a JavaScript file. The actual API usage is not shown and is marked as a TODO.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-extend/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst taroExtend = require('taro-extend');\n\n// TODO: DEMONSTRATE API\n```\n\n----------------------------------------\n\nTITLE: Referencing Taro Plugin for React Platform in Markdown\nDESCRIPTION: This code snippet shows the package name of the Taro plugin used for supporting React, PReact, and Nerv compilation in Taro projects. It's written as an inline code block in Markdown.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-framework-react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`@tarojs/plugin-platform-react`\n```\n\n----------------------------------------\n\nTITLE: Package Name Definition in Markdown\nDESCRIPTION: Package name specification for the Taro plugin that enables ByteDance Mini Program support\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-platform-tt/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@tarojs/plugin-platform-tt`\n```\n\n----------------------------------------\n\nTITLE: Dependency Graph Visualization using Mermaid\nDESCRIPTION: Mermaid graph showing the dependency relationship between taro-picker-core and taro-picker-group components\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/picker/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n  taro-picker-core --> taro-picker-group\n  style taro-picker-group fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------\n\nTITLE: Referencing Taro Test Package Paths\nDESCRIPTION: Shows the package names and paths involved in the test suite migration within the Taro project ecosystem.\nSOURCE: https://github.com/nervjs/taro/blob/main/tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@tarojs/tests`\\n`@tarojs/webpack5-runner`\n```\n\n----------------------------------------\n\nTITLE: Assigning String Value to Constant in JavaScript\nDESCRIPTION: This snippet demonstrates the assignment of a string value 'b' to a constant variable 'a' using the const keyword in JavaScript. This creates an immutable binding, meaning the value of 'a' cannot be reassigned.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-loader/__tests__/fixtures/not-export-default.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = 'b'\n```\n\n----------------------------------------\n\nTITLE: Package Name Declaration for JD Platform Plugin\nDESCRIPTION: Package name declaration in markdown showing the NPM package name for the JD platform plugin for Taro framework\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-platform-jd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@tarojs/plugin-platform-jd\n```\n\n----------------------------------------\n\nTITLE: Valid Align Self Property\nDESCRIPTION: Demonstrates correct usage of align-self property in React Native.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/css-property-no-unknown/README.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  align-self: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Taro QQ Platform Plugin Package Name\nDESCRIPTION: Package name heading for the Taro plugin that enables QQ Mini Program compilation support.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-platform-qq/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@tarojs/plugin-platform-qq`\n```\n\n----------------------------------------\n\nTITLE: Valid Box Shadow Property\nDESCRIPTION: Demonstrates correct usage of box-shadow property in React Native.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/css-property-no-unknown/README.md#2025-04-22_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  box-shadow: 1px 2px 3px red;\n}\n```\n\n----------------------------------------\n\nTITLE: Repository Path Header in Markdown\nDESCRIPTION: Simple markdown header indicating the repository path and component name for Taro Router React Native implementation.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-router-rn/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# taro router rn\n```\n\n----------------------------------------\n\nTITLE: Valid Custom Properties with Ignore Rules\nDESCRIPTION: Demonstrates CSS properties that are valid when using the ignoreProperties configuration.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/stylelint-taro-rn/src/rules/css-property-no-unknown/README.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  my-property: 10px;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  my-other-property: 10px;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  custom: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Version History Entry\nDESCRIPTION: Changelog entry documenting changes across multiple beta versions including style object support and transformer bug fixes.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-transformer-wx/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n<a name=\"0.0.69-beta.1\"></a>\n## [0.0.69-beta.1](https://github.com/NervJS/taro/compare/v0.0.69-beta.0...v0.0.69-beta.1) (2018-07-09)\n\n\n### Features\n\n* **transformer:** 支持 style 传入对象 ([d0be191](https://github.com/NervJS/taro/commit/d0be191))\n\n\n\n\n<a name=\"0.0.67-beta.3\"></a>\n## [0.0.67-beta.3](https://github.com/NervJS/taro/compare/v0.0.67-beta.2...v0.0.67-beta.3) (2018-07-04)\n\n\n### Bug Fixes\n\n* **transformer:** 单独使用的自定义也加入 key ([a231a90](https://github.com/NervJS/taro/commit/a231a90))\n* **transformer:** 所有设置 if 条件都加入 block ([a32661e](https://github.com/NervJS/taro/commit/a32661e))\n\n\n\n\n<a name=\"0.0.67-beta.1\"></a>\n## [0.0.67-beta.1](https://github.com/NervJS/taro/compare/v0.0.67-beta.0...v0.0.67-beta.1) (2018-07-04)\n\n\n\n\n**Note:** Version bump only for package @tarojs/transformer-wx\n\n<a name=\"0.0.67-beta.0\"></a>\n## [0.0.67-beta.0](https://github.com/NervJS/taro/compare/v0.0.66...v0.0.67-beta.0) (2018-07-04)\n\n\n### Bug Fixes\n\n* **transformer:** 循环自定义组件的 iterator 重命名 ([a9cf461](https://github.com/NervJS/taro/commit/a9cf461))\n```\n\n----------------------------------------\n\nTITLE: License Comment\nDESCRIPTION: Comment indicating the source of backend code from Vue devtools repository\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-plugin-vue-devtools/src/backend/backend.LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** backend are codes build from https://github.com/vuejs/devtools */\n```\n\n----------------------------------------\n\nTITLE: Defining Events for Taro Audio Component in Markdown (Auto-generated)\nDESCRIPTION: This auto-generated snippet defines the events of the taro-audio component in a markdown table format. It includes event names, descriptions, and types.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/audio/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Events\n\n| Event        | Description | Type               |\n| ------------ | ----------- | ------------------ |\n| `ended`      |             | `CustomEvent<any>` |\n| `error`      |             | `CustomEvent<any>` |\n| `pause`      |             | `CustomEvent<any>` |\n| `play`       |             | `CustomEvent<any>` |\n| `timeupdate` |             | `CustomEvent<any>` |\n```\n\n----------------------------------------\n\nTITLE: Defining Events for Taro Canvas Core Component in Markdown\nDESCRIPTION: This snippet defines the events of the taro-canvas-core component. It specifies the event name, description, and type. In this case, it defines a 'longtap' event of type CustomEvent<any>.\nSOURCE: https://github.com/nervjs/taro/blob/main/packages/taro-components/src/components/canvas/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Event     | Description | Type               |\n| --------- | ----------- | ------------------ |\n| `longtap` |             | `CustomEvent<any>` |\n```"
  }
]