[
  {
    "owner": "react-hook-form",
    "repo": "react-hook-form",
    "content": "TITLE: Quickstart with React Hook Form\nDESCRIPTION: This code snippet demonstrates a basic implementation of React Hook Form for form validation. It imports the useForm hook, registers input fields, handles form submission, and displays validation errors.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useForm } from 'react-hook-form';\n\nfunction App() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  return (\n    <form onSubmit={handleSubmit((data) => console.log(data))}>\n      <input {...register('firstName')} />\n      <input {...register('lastName', { required: true })} />\n      {errors.lastName && <p>Last name is required.</p>}\n      <input {...register('age', { pattern: /\\d+/ })} />\n      {errors.age && <p>Please enter number for age.</p>}\n      <input type=\"submit\" />\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Form with React Hook Form\nDESCRIPTION: This snippet demonstrates how to create a simple form using React Hook Form. It includes input validation, error handling, and form submission. The example showcases the usage of the useForm hook and register function.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/docs/README.V7.ja-JP.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\nfunction App() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n  const onSubmit = (data) => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register('firstName')} /> {/* register an input */}\n      <input {...register('lastName', { required: true })} />\n      {errors.lastName && <p>Last name is required.</p>}\n      <input {...register('age', { pattern: /\\d+/ })} />\n      {errors.age && <p>Please enter number for age.</p>}\n      <input type=\"submit\" />\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Form Component in React Hook Form\nDESCRIPTION: Examples of using the new Form component for different scenarios: sending post requests with formData, handling JSON data, and working with custom fetch implementations.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// Send post request with formData\n<Form\n  action=\"/api\"\n  control={control}\n  onSuccess={() => {\n    alert(\"Great\");\n  }}\n/>\n\n// Send post request with json form data\n<Form action=\"/api\" encType=\"application/json\" headers={{ accessToken: 'test' }}>\n  {errors.root?.server.type === 500 && 'Error message'}\n  {errors.root?.server.type === 400 && 'Error message'}\n</Form>\n\n// Send post request with formData with fetch\n<Form\n  onSubmit={async ({ formData, data, formDataJson, event }) => {\n    await fetch(\"api\", {\n      method: \"post\",\n      body: formData,\n    });\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing React Hook Form\nDESCRIPTION: This command installs the react-hook-form package using npm. It is a necessary first step to use the library in your React project.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n    npm install react-hook-form\n```\n\n----------------------------------------\n\nTITLE: React Form Validation with Hook Form\nDESCRIPTION: Demonstrates basic form setup using react-hook-form with input registration, validation, and error handling for firstName, lastName, and age fields\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/docs/README.ar-AR.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\nfunction App() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n  const onSubmit = (data) => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register('firstName')} />\n      <input {...register('lastName', { required: true })} />\n      {errors.lastName && <p>اسم العائلة مطلوب.</p>}\n      <input {...register('age', { pattern: /\\d+/ })} />\n      {errors.age && <p>الرجاء إدخال عدد للعمر.</p>}\n      <input type=\"submit\" />\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for React Hook Form\nDESCRIPTION: Contains core type definitions and interfaces for React Hook Form library, including imports from React and various type definitions for form controls, field arrays, validation rules, and form state management.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSXElementConstructor } from 'react';\nimport { default as React_2 } from 'react';\nimport { ReactElement } from 'react';\n\n// @public (undocumented)\nexport const appendErrors: (name: InternalFieldName, validateAllFieldCriteria: boolean, errors: InternalFieldErrors, type: string, message: ValidateResult) => {};\n\n// @public\nexport type ArrayPath<T> = T extends any ? ArrayPathInternal<T> : never;\n\n// @public (undocumented)\nexport type BatchFieldArrayUpdate = <T extends Function, TFieldValues extends FieldValues, TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>>(name: InternalFieldName, updatedFieldArrayValues?: Partial<FieldArray<TFieldValues, TFieldArrayName>>[], method?: T, args?: Partial<{\n    argA: unknown;\n    argB: unknown;\n}>, shouldSetValue?: boolean, shouldUpdateFieldsAndErrors?: boolean) => void;\n\n// @public (undocumented)\nexport type BrowserNativeObject = Date | FileList_2 | File_2;\n\n// @public (undocumented)\nexport type ChangeHandler = (event: {\n    target: any;\n    type?: any;\n}) => Promise<void | boolean>;\n\n// @public (undocumented)\nexport type Control<TFieldValues extends FieldValues = FieldValues, TContext = any, TTransformedValues = TFieldValues> = {\n    _subjects: Subjects<TFieldValues>;\n    _removeUnmounted: Noop;\n    _names: Names;\n    _state: {\n        mount: boolean;\n        action: boolean;\n        watch: boolean;\n    };\n    _reset: UseFormReset<TFieldValues>;\n    _options: UseFormProps<TFieldValues, TContext, TTransformedValues>;\n    _getDirty: GetIsDirty;\n    _resetDefaultValues: Noop;\n    _formState: FormState<TFieldValues>;\n    _setValid: (shouldUpdateValid?: boolean) => void;\n    _fields: FieldRefs;\n    _formValues: FieldValues;\n    _proxyFormState: ReadFormState;\n    _defaultValues: Partial<DefaultValues<TFieldValues>>;\n    _getWatch: WatchInternal<TFieldValues>;\n    _setFieldArray: BatchFieldArrayUpdate;\n    _getFieldArray: <TFieldArrayValues>(name: InternalFieldName) => Partial<TFieldArrayValues>[];\n    _setErrors: (errors: FieldErrors<TFieldValues>) => void;\n    _setDisabledField: (props: {\n        disabled?: boolean;\n        name: FieldName<any>;\n    }) => void;\n    _runSchema: (names: InternalFieldName[]) => Promise<{\n        errors: FieldErrors;\n    }>;\n    _disableForm: (disabled?: boolean) => void;\n    _subscribe: FromSubscribe<TFieldValues>;\n    register: UseFormRegister<TFieldValues>;\n    handleSubmit: UseFormHandleSubmit<TFieldValues, TTransformedValues>;\n    unregister: UseFormUnregister<TFieldValues>;\n    getFieldState: UseFormGetFieldState<TFieldValues>;\n    setError: UseFormSetError<TFieldValues>;\n};\n```\n\n----------------------------------------\n\nTITLE: Quickstart React Form with React Hook Form\nDESCRIPTION: This code demonstrates a basic form implementation using React Hook Form. It initializes the `useForm` hook, registers input fields, handles form submission, and displays validation errors.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/docs/README.V6.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n\"import React from 'react';\nimport { useForm } from 'react-hook-form';\n\nfunction App() {\n  const { register, handleSubmit, errors } = useForm(); // initialize the hook\n  const onSubmit = (data) => {\n    console.log(data);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input name=\"firstname\" ref={register} /> {/* register an input */}\n      <input name=\"lastname\" ref={register({ required: true })} />\n      {errors.lastname && 'Last name is required.'}\n      <input name=\"age\" ref={register({ pattern: /\\d+/ })} />\n      {errors.age && 'Please enter number for age.'}\n      <input type=\"submit\" />\n    </form>\n  );\n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Quick Start Example with React Hook Form - JavaScript\nDESCRIPTION: This code snippet demonstrates how to set up a simple form using React Hook Form, including input registration and validation error handling. It requires the 'react-hook-form' library to be installed.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/docs/README.V7.zh-CN.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\nfunction App() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n  const onSubmit = (data) => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register('firstName')} /> {/* register an input */}\n      <input {...register('lastName', { required: true })} />\n      {errors.lastName && <p>Last name is required.</p>}\n      <input {...register('age', { pattern: /\\d+/ })} />\n      {errors.age && <p>Please enter number for age.</p>}\n      <input type=\"submit\" />\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Quickstart Example with React Hook Form\nDESCRIPTION: This React component demonstrates a basic form using React Hook Form. It utilizes the useForm hook to handle form state, validation, and submission. The component includes input fields for first name, last name (required), and age (numeric pattern validation).\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/docs/Template.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\nfunction App() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n  const onSubmit = (data) => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register('firstName')} />\n      <input {...register('lastName', { required: true })} />\n      {errors.lastName && <p>Last name is required.</p>}\n      <input {...register('age', { pattern: /\\d+/ })} />\n      {errors.age && <p>Please enter number for age.</p>}\n      <input type=\"submit\" />\n    </form>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Async DefaultValues with useForm and isLoading State\nDESCRIPTION: Shows how to use async defaultValues with useForm and access the isLoading state to handle loading states in the UI.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst {\n  formState: { isLoading },\n} = useForm({\n  defaultValues: fetch('API'),\n  // resetOptions: {\n  //   keepDirtyValues: true\n  // }\n});\n```\n\n----------------------------------------\n\nTITLE: useController Hook Definition in TypeScript\nDESCRIPTION: Defines a React hook called useController that accepts props for managing form control and returns an object containing field properties, form state, and field state. It integrates a form field with React Hook Form's control.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useController<TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>, TTransformedValues = TFieldValues>(props: UseControllerProps<TFieldValues, TName, TTransformedValues>): UseControllerReturn<TFieldValues, TName>;\n\n```\n\n----------------------------------------\n\nTITLE: React Hook Form Quick Start\nDESCRIPTION: This snippet demonstrates a basic implementation of React Hook Form.  It initializes the `useForm` hook, registers input fields, handles form submission, and displays validation errors.  The hook provides `register`, `handleSubmit`, and `errors` for form management and validation.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/docs/README.fr-FR.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n```jsx\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\nfunction App() {\n  const { register, handleSubmit, errors } = useForm(); // initialise the hook\n  const onSubmit = (data) => {\n    console.log(data);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input name=\"firstname\" ref={register} /> {/* register an input */}\n      <input name=\"lastname\" ref={register({ required: true })} />\n      {errors.lastname && 'Last name is required.'}\n      <input name=\"age\" ref={register({ pattern: /\\d+/ })} />\n      {errors.age && 'Please enter number for age.'}\n      <input type=\"submit\" />\n    </form>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: useForm Hook Definition in TypeScript\nDESCRIPTION: Defines a React hook called useForm that provides form management functionality, including state management, validation, and submission handling. It is the core hook for building forms with React Hook Form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useForm<TFieldValues extends FieldValues = FieldValues, TContext = any, TTransformedValues = TFieldValues>(props?: UseFormProps<TFieldValues, TContext, TTransformedValues>): UseFormReturn<TFieldValues, TContext, TTransformedValues>;\n\n```\n\n----------------------------------------\n\nTITLE: React Component: Form\nDESCRIPTION: Defines a React component `Form` that takes `FormProps` as props and returns a JSX element.  This component is likely the main form wrapper in the `react-hook-form` library. It is a generic component accepting `TFieldValues` and `TTransformedValues`.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport function Form<TFieldValues extends FieldValues, TTransformedValues = TFieldValues>(props: FormProps<TFieldValues, TTransformedValues>): React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining Controller Component in TypeScript\nDESCRIPTION: This snippet defines the Controller component, which is used to integrate external controlled components with react-hook-form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Controller: <TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>>(props: ControllerProps<TFieldValues, TName>) => ReactElement<any, string | JSXElementConstructor<any>>;\n```\n\n----------------------------------------\n\nTITLE: Managing Dynamic Form Arrays with useFieldArray - TypeScript\nDESCRIPTION: Illustrates the use of the `useFieldArray` hook to handle dynamic arrays in forms with unique keys retained. It starts by configuring default values with an ID field and uses `useFieldArray` to manage fields, append new items, and render the array of inputs. React Hook Form and its utility hooks are required dependencies.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst App = () => {\n  const { control, register, handleSubmit } = useForm<FormValues>({\n    defaultValues: {\n      test: [{ id: 'UUID5678', test: 'data' }], // id value will be retained\n    },\n  });\n  const { fields, append } = useFieldArray({\n    control,\n    name: 'test',\n  });\n\n  return (\n    <form>\n      {fields.map((field, index) => {\n        return <input key={field.id} {...register(`test.${index}.test`)} />;\n      })}\n\n      <button\n        type={'button'}\n        onClick={() => {\n          append({\n            id: 'UUID1234', // id value will be retained\n            test: '1234',\n          });\n        }}\n      >\n        append\n      </button>\n    </form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Entire Form in React Hook Form\nDESCRIPTION: Shows how to use the disabled prop with useForm to disable the entire form. This example includes state management for the disabled property during form submission.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  const [disabled, setDisabled] = useState(false);\n  const { handleSubmit } = useForm({ disabled });\n\n  return (\n    <form\n      onSubmit={handleSubmit(async () => {\n        setDisabled(true);\n        await sleep(100);\n        setDisabled(false);\n      })}\n    / >\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: UseFormReturn Interface Definition in TypeScript\nDESCRIPTION: Comprehensive interface defining all the methods and properties returned by useForm hook, including form state management and field operations.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormReturn<TFieldValues extends FieldValues = FieldValues, TContext = any, TTransformedValues = TFieldValues> = {\n    watch: UseFormWatch<TFieldValues>;\n    getValues: UseFormGetValues<TFieldValues>;\n    getFieldState: UseFormGetFieldState<TFieldValues>;\n    setError: UseFormSetError<TFieldValues>;\n    clearErrors: UseFormClearErrors<TFieldValues>;\n    setValue: UseFormSetValue<TFieldValues>;\n    trigger: UseFormTrigger<TFieldValues>;\n    formState: FormState<TFieldValues>;\n    resetField: UseFormResetField<TFieldValues>;\n    reset: UseFormReset<TFieldValues>;\n    handleSubmit: UseFormHandleSubmit<TFieldValues, TTransformedValues>;\n    unregister: UseFormUnregister<TFieldValues>;\n    control: Control<TFieldValues, TContext, TTransformedValues>;\n    register: UseFormRegister<TFieldValues>;\n    setFocus: UseFormSetFocus<TFieldValues>;\n    subscribe: UseFromSubscribe<TFieldValues>;\n};\n```\n\n----------------------------------------\n\nTITLE: UseFormRegister Type Definition in TypeScript\nDESCRIPTION: Defines a type for the register function returned by useForm, which registers a field with the form and returns the necessary props for the input element. It links the input element to the form's state management.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormRegister<TFieldValues extends FieldValues> = <TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>>(name: TFieldName, options?: RegisterOptions<TFieldValues, TFieldName>) => UseFormRegisterReturn<TFieldName>;\n\n```\n\n----------------------------------------\n\nTITLE: Using the New useController Hook in React Hook Form\nDESCRIPTION: Demonstrates how to use the new useController hook to create a reusable controlled input component in React Hook Form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_34\n\nLANGUAGE: TSX\nCODE:\n```\nimport React from 'react';\nimport { TextField } from '@material-ui/core';\nimport { useController } from 'react-hook-form';\n\nfunction Input({ control, name }) {\n  const {\n    field: { ref, ...inputProps },\n    meta: { invalid, isTouched, isDirty },\n  } = useController({\n    name,\n    control,\n    rules: { required: true },\n    defaultValue: '',\n  });\n\n  return <TextField {...inputProps} inputRef={ref} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Server Errors to React Hook Form\nDESCRIPTION: Demonstrates how to use the errors prop with useForm to handle server-side validation errors. This feature was added in version 7.49.0.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseForm({\n  errors, // Server errors\n});\n```\n\n----------------------------------------\n\nTITLE: Updated Input Registration in React Hook Form\nDESCRIPTION: Demonstrates the change in how inputs are registered in React Hook Form v7, moving from a ref-based approach to a function that returns props to be spread on the input.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_31\n\nLANGUAGE: TSX\nCODE:\n```\n- <input ref={register, { required: true }} name=\"test\" />\n+ <input {...register('name', { required: true })} />\n+ <TextInput {...register('name', { required: true })} />\n```\n\n----------------------------------------\n\nTITLE: Form Hook Types\nDESCRIPTION: Type definitions for useForm hook including form state, validation, and submission handling.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useForm<TFieldValues extends FieldValues = FieldValues, TContext = any, TTransformedValues = TFieldValues>(props?: UseFormProps<TFieldValues, TContext, TTransformedValues>): UseFormReturn<TFieldValues, TContext, TTransformedValues>;\n\nexport type UseFormProps<TFieldValues extends FieldValues = FieldValues, TContext = any, TTransformedValues = TFieldValues> = Partial<{\n    mode: Mode;\n    disabled: boolean;\n    reValidateMode: Exclude<Mode, 'onTouched' | 'all'>;\n    defaultValues: DefaultValues<TFieldValues> | AsyncDefaultValues<TFieldValues>;\n    values: TFieldValues;\n    errors: FieldErrors<TFieldValues>;\n    resetOptions: Parameters<UseFormReset<TFieldValues>>[1];\n    resolver: Resolver<TFieldValues, TContext, TTransformedValues>;\n    context: TContext;\n    shouldFocusError: boolean;\n    shouldUnregister: boolean;\n    shouldUseNativeValidation: boolean;\n    progressive: boolean;\n    criteriaMode: CriteriaMode;\n    delayError: number;\n    control?: Omit<UseFormReturn<TFieldValues, TContext>, 'formState'>;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Validation with Week and Time Inputs\nDESCRIPTION: Examples of using built-in validation rules with week and time input types in React Hook Form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<input {...register(\"week\", { min: \"2022-W40\" })} type=\"week\" />\n<input {...register(\"time\", { min: \"11:00\" })} type=\"time\" />\n```\n\n----------------------------------------\n\nTITLE: UseFormProps Type Definition in TypeScript\nDESCRIPTION: Defines the props interface for the useForm hook, including mode, disabled, reValidateMode, defaultValues, values, errors, resetOptions, resolver, context, shouldFocusError, shouldUnregister, shouldUseNativeValidation, progressive, criteriaMode, delayError, and formControl. It configures the behavior and validation of the form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormProps<TFieldValues extends FieldValues = FieldValues, TContext = any, TTransformedValues = TFieldValues> = Partial<{{\n    mode: Mode;\n    disabled: boolean;\n    reValidateMode: Exclude<Mode, 'onTouched' | 'all'>;\n    defaultValues: DefaultValues<TFieldValues> | AsyncDefaultValues<TFieldValues>;\n    values: TFieldValues;\n    errors: FieldErrors<TFieldValues>;\n    resetOptions: Parameters<UseFormReset<TFieldValues>>[1];\n    resolver: Resolver<TFieldValues, TContext, TTransformedValues>;\n    context: TContext;\n    shouldFocusError: boolean;\n    shouldUnregister: boolean;\n    shouldUseNativeValidation: boolean;\n    progressive: boolean;\n    criteriaMode: CriteriaMode;\n    delayError: number;\n    formControl?: Omit<UseFormReturn<TFieldValues, TContext, TTransformedValues>, 'formState'>;\n}}>;\n\n```\n\n----------------------------------------\n\nTITLE: UseFieldArrayReturn Type Definition in TypeScript\nDESCRIPTION: Defines the return type for the useFieldArray hook, which includes functions for manipulating the field array (swap, move, prepend, append, remove, insert, update, replace) and the current fields. It provides the necessary tools for managing dynamic field arrays.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFieldArrayReturn<TFieldValues extends FieldValues = FieldValues, TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>, TKeyName extends string = 'id'> = {\n    swap: UseFieldArraySwap;\n    move: UseFieldArrayMove;\n    prepend: UseFieldArrayPrepend<TFieldValues, TFieldArrayName>;\n    append: UseFieldArrayAppend<TFieldValues, TFieldArrayName>;\n    remove: UseFieldArrayRemove;\n    insert: UseFieldArrayInsert<TFieldValues, TFieldArrayName>;\n    update: UseFieldArrayUpdate<TFieldValues, TFieldArrayName>;\n    replace: UseFieldArrayReplace<TFieldValues, TFieldArrayName>;\n    fields: FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>[];\n};\n\n```\n\n----------------------------------------\n\nTITLE: Using Values Prop with useForm in React Hook Form\nDESCRIPTION: Demonstrates how to use the values prop with useForm to set form values, with optional resetOptions to control behavior during updates.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst values = await fetch('API');\n\nuseForm({\n  values, // will reset the form when values updates\n  // resetOptions: {\n  //   keepDirtyValues: true\n  // }\n});\n```\n\n----------------------------------------\n\nTITLE: UseControllerProps Type Definition in TypeScript\nDESCRIPTION: Defines the props interface for the useController hook, including name, rules, shouldUnregister, defaultValue, control, and disabled. It configures the behavior and validation of a controlled form field.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseControllerProps<TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>, TTransformedValues = TFieldValues> = {\n    name: TName;\n    rules?: Omit<RegisterOptions<TFieldValues, TName>, 'valueAsNumber' | 'valueAsDate' | 'setValueAs' | 'disabled'>;\n    shouldUnregister?: boolean;\n    defaultValue?: FieldPathValue<TFieldValues, TName>;\n    control?: Control<TFieldValues, any, TTransformedValues>;\n    disabled?: boolean;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring useWatch Hook in TypeScript\nDESCRIPTION: Example showing how to use the useWatch hook to retrieve form values, with notes about defaultValue behavior during initial render.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\nuseWatch({\n  name: 'test',\n  defaultValue: 'data', // this value will only show on the initial render\n});\n```\n\n----------------------------------------\n\nTITLE: SubmitHandler Type Definition in TypeScript\nDESCRIPTION: Defines a type for a submit handler, which is a function that takes form data and an optional React synthetic event as arguments. It handles the successful submission of a form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SubmitHandler<T> = (data: T, event?: React_2.BaseSyntheticEvent) => unknown | Promise<unknown>;\n\n```\n\n----------------------------------------\n\nTITLE: useFormState Hook Implementation in TypeScript\nDESCRIPTION: Implementation of useFormState hook that provides access to form state with optional control and field filtering options.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useFormState<TFieldValues extends FieldValues = FieldValues, TTransformedValues = TFieldValues>(props?: UseFormStateProps<TFieldValues, TTransformedValues>): UseFormStateReturn<TFieldValues>;\n```\n\n----------------------------------------\n\nTITLE: Using disabled prop with useController in React Hook Form\nDESCRIPTION: Demonstrates how to use the disabled prop with useController to disable specific controlled components in the form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst [disabled, setDisabled] = useState(false);\nuseController({\n  disabled,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining UseFormReturn Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for the return object of the useForm hook, containing all form control functions and state. This includes methods for watching field values, getting/setting values, handling validation, submission, and managing form state.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormReturn<TFieldValues extends FieldValues = FieldValues, TContext = any, TTransformedValues = TFieldValues> = {\n    watch: UseFormWatch<TFieldValues>;\n    getValues: UseFormGetValues<TFieldValues>;\n    getFieldState: UseFormGetFieldState<TFieldValues>;\n    setError: UseFormSetError<TFieldValues>;\n    clearErrors: UseFormClearErrors<TFieldValues>;\n    setValue: UseFormSetValue<TFieldValues>;\n    trigger: UseFormTrigger<TFieldValues>;\n    formState: FormState<TFieldValues>;\n    resetField: UseFormResetField<TFieldValues>;\n    reset: UseFormReset<TFieldValues>;\n    handleSubmit: UseFormHandleSubmit<TFieldValues, TTransformedValues>;\n    unregister: UseFormUnregister<TFieldValues>;\n    control: Control<TFieldValues, TContext, TTransformedValues>;\n    register: UseFormRegister<TFieldValues>;\n    setFocus: UseFormSetFocus<TFieldValues>;\n    subscribe: UseFromSubscribe<TFieldValues>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining UseFormStateReturn Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for the return value of the useFormState hook, which is the form state object containing validation status, errors, submission status, and other form state information.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormStateReturn<TFieldValues extends FieldValues> = FormState<TFieldValues>;\n```\n\n----------------------------------------\n\nTITLE: Register Function Value Transformation Options\nDESCRIPTION: Examples of using the register function with value transformation options including valueAsDate, valueAsNumber and setValueAs.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\nregister({\n  valueAsNumber: true,\n});\n\nregister({\n  valueAsNumber: true,\n});\n\nregister({\n  setValueAs: (value) => value,\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting Form with keepIsSubmitSuccessful Option\nDESCRIPTION: Example of using the reset API with the keepIsSubmitSuccessful option to maintain the successfully submitted form state while resetting values.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Form\n  onSubmit={() => {\n    reset(formValues, {\n      keepIsSubmitSuccessful: true,\n    });\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using the New useFormState Hook in React Hook Form\nDESCRIPTION: Introduces the new useFormState custom hook which allows subscribing to specific form state updates like isDirty and errors.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { isDirty, errors } = useFormState();\n```\n\n----------------------------------------\n\nTITLE: Form Submit Handler Type\nDESCRIPTION: Type definition for form submission handler with comprehensive payload information\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FormSubmitHandler<TTransformedValues> = (payload: {\n    data: TTransformedValues;\n    event?: React_2.BaseSyntheticEvent;\n    formData: FormData;\n    formDataJson: string;\n    method?: 'post' | 'put' | 'delete';\n}) => unknown | Promise<unknown>;\n```\n\n----------------------------------------\n\nTITLE: Using Form Values in Validate Function\nDESCRIPTION: Shows how to access the entire form values as a second parameter in custom validation functions, allowing validation based on multiple field values.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// Making exported validate function isolated for validation\nexport function validateNumber(_: number, formValus: FormValues) {\n  return formValus.number1 + formValus.number2 === 3;\n}\n\n<input\n  type=\"number\"\n  {...register('number1', {\n    validate: validateNumber,\n    valueAsNumber: true,\n  })}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Using Register as a Ref in React Hook Form\nDESCRIPTION: Demonstrates the new support for using register directly as a ref attribute in React Hook Form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_48\n\nLANGUAGE: tsx\nCODE:\n```\nref={register}\n```\n\n----------------------------------------\n\nTITLE: Accessing Form State in React Hook Form\nDESCRIPTION: Shows how to access the new formState object in React Hook Form, which provides information about form dirty state, touched fields, and submission status.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_47\n\nLANGUAGE: tsx\nCODE:\n```\nconst {\n  formState: { dirty, touched, isSubmitted },\n} = useForm();\n```\n\n----------------------------------------\n\nTITLE: Form State Type Definition\nDESCRIPTION: Comprehensive type definition for tracking form state with various metadata and validation flags\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FormState<TFieldValues extends FieldValues> = {\n    isDirty: boolean;\n    isLoading: boolean;\n    isSubmitted: boolean;\n    isSubmitSuccessful: boolean;\n    isSubmitting: boolean;\n    isValidating: boolean;\n    isValid: boolean;\n    disabled: boolean;\n    submitCount: number;\n    // ... additional state properties\n};\n```\n\n----------------------------------------\n\nTITLE: Updated Controller Render Prop in React Hook Form\nDESCRIPTION: Shows the change in the Controller component's render prop, which now provides a more consistent API by passing a field object instead of individual props.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_32\n\nLANGUAGE: TSX\nCODE:\n```\n- <Controller render={props => <input {...props} />} />\n+ <Controller render={({ field }) => <input {...field} />} />\n```\n\n----------------------------------------\n\nTITLE: Using FieldPathByValue Type for Type-Safe Field Access\nDESCRIPTION: Example of using the FieldPathByValue type to create components that only accept fields of a specific value type, providing type safety.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nfunction CustomFormComponent<\n  TFieldValues extends FieldValues,\n  Path extends FieldPathByValue<TFieldValues, Date>,\n>({ control, name }: { control: Control<FieldValues>; name: Path }) {\n  const { field } = useController({\n    control,\n    name,\n  });\n}\n\nfunction App() {\n  const { control } = useForm<{\n    foo: Date;\n    baz: string;\n  }>();\n\n  return (\n    <form>\n      <CustomFormComponent control={control} name=\"foo\" /> {/* no error */}\n      <CustomFormComponent control={control} name=\"baz\" />{' '}\n      {/*  throw an error since baz is string */}\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Component: FormProvider\nDESCRIPTION: Defines a React component `FormProvider` that takes `FormProviderProps` as props and returns a JSX element. This component likely provides form context to its children. It uses generics to define the types of field values, context, and transformed values.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport const FormProvider: <TFieldValues extends FieldValues, TContext = any, TTransformedValues = TFieldValues>(props: FormProviderProps<TFieldValues, TContext, TTransformedValues>) => React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining UseFormTrigger Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for the trigger function that manually triggers form validation. It can validate specific fields or the entire form and returns a promise resolving to a boolean indicating validation success.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormTrigger<TFieldValues extends FieldValues> = (name?: FieldPath<TFieldValues> | FieldPath<TFieldValues>[] | readonly FieldPath<TFieldValues>[], options?: TriggerConfig) => Promise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Supporting Global Error Types in React Hook Form\nDESCRIPTION: Demonstrates how to use global error types with setError to handle server errors and other global form errors.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst onSubmit = async () => {\n  setError('root.serverError', {\n    type: response.statusCode,\n  });\n};\nconst onClick = () => {\n  setError('root.random', {\n    type: 'random',\n  });\n};\n\nreturn (\n  <>\n    {errors.root.serverError.type === 400 && <p>server response message</p>}\n    <p>{errors.root?.random?.message}</p>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: UseFormResetField Type Definition in TypeScript\nDESCRIPTION: Type definition for resetting individual form fields with options to keep certain field states like dirty, touched, and error states.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormResetField<TFieldValues extends FieldValues> = <TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>>(name: TFieldName, options?: Partial<{\n    keepDirty: boolean;\n    keepTouched: boolean;\n    keepError: boolean;\n    defaultValue: FieldPathValue<TFieldValues, TFieldName>;\n}>) => void;\n```\n\n----------------------------------------\n\nTITLE: Using the Enhanced watch Function in React Hook Form\nDESCRIPTION: Shows how to use the enhanced watch function to subscribe to the entire form state with a callback, providing access to updated data, changed field name, and change type.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nwatch((data, { name, type }) => {\n  console.log('formValue', data);\n  console.log('name', name);\n  console.log('type', type);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining WatchObserver Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for an observer callback function that receives updated form values. It gets notified of value changes, including which field changed, the type of event, and form values.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nexport type WatchObserver<TFieldValues extends FieldValues> = (value: DeepPartial<TFieldValues>, info: {\n    name?: FieldPath<TFieldValues>;\n    type?: EventType;\n    values?: unknown;\n}) => void;\n```\n\n----------------------------------------\n\nTITLE: useFieldArray Hook Definition in TypeScript\nDESCRIPTION: Defines a React hook called useFieldArray that manages dynamic arrays of fields in a form. It allows adding, removing, and reordering fields in a field array.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useFieldArray<TFieldValues extends FieldValues = FieldValues, TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>, TKeyName extends string = 'id', TTransformedValues = TFieldValues>(props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName, TTransformedValues>): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName>;\n\n```\n\n----------------------------------------\n\nTITLE: UseFormReset Type Definition in TypeScript\nDESCRIPTION: Type definition for form reset functionality that allows resetting form values with optional state preservation options.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormReset<TFieldValues extends FieldValues> = (values?: DefaultValues<TFieldValues> | TFieldValues | ResetAction<TFieldValues>, keepStateOptions?: KeepStateOptions) => void;\n```\n\n----------------------------------------\n\nTITLE: useWatch Hook Implementation in TypeScript\nDESCRIPTION: Implementation of useWatch hook with multiple overloads for watching form values with different configuration options.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useWatch<TFieldValues extends FieldValues = FieldValues, TTransformedValues = TFieldValues>(props: {\n    defaultValue?: DeepPartialSkipArrayKey<TFieldValues>;\n    control?: Control<TFieldValues, any, TTransformedValues>;\n    disabled?: boolean;\n    exact?: boolean;\n}): DeepPartialSkipArrayKey<TFieldValues>;\n```\n\n----------------------------------------\n\nTITLE: UseControllerReturn Type Definition in TypeScript\nDESCRIPTION: Defines the return type for the useController hook, which includes the field properties, form state, and field state. It provides the necessary information for rendering and managing a controlled form field.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseControllerReturn<TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>> = {\n    field: ControllerRenderProps<TFieldValues, TName>;\n    formState: UseFormStateReturn<TFieldValues>;\n    fieldState: ControllerFieldState;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller Component with Ref Props\nDESCRIPTION: Example of using the Controller component with ref prop for improved focus management in form inputs.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_37\n\nLANGUAGE: tsx\nCODE:\n```\n<Controller\n  name=\"test\"\n  render={(props) => {\n    return (\n      <input\n        value={props.value}\n        onChange={props.onChange}\n        ref={props.ref} // you can assign ref now without the use of `onFocus`\n      />\n    );\n  }}\n/>\n\n// focus will work correct without the `onFocus` prop\n<Controller name=\"test\" as={<input />} />\n```\n\n----------------------------------------\n\nTITLE: Defining UseFormSetValue Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for the setValue function that allows updating a form field's value. It provides typesafe value updates for specific fields and accepts additional configuration options for the update behavior.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormSetValue<TFieldValues extends FieldValues> = <TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>>(name: TFieldName, value: FieldPathValue<TFieldValues, TFieldName>, options?: SetValueConfig) => void;\n```\n\n----------------------------------------\n\nTITLE: Using Reset with Callback Syntax in React Hook Form\nDESCRIPTION: Demonstrates how to use the reset function with callback syntax to update only specific parts of the form data.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nreset((formValues) => {\n  return {\n    ...formValues,\n    partialData: 'onlyChangeThis',\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Defining UseFormResetField Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for the resetField function that allows resetting specific form fields with options to preserve various field states. It can reset a single field while optionally keeping dirty state, touch state, error state, or setting a new default value.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormResetField<TFieldValues extends FieldValues> = <TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>>(name: TFieldName, options?: Partial<{\n    keepDirty: boolean;\n    keepTouched: boolean;\n    keepError: boolean;\n    defaultValue: FieldPathValue<TFieldValues, TFieldName>;\n}>) => void;\n```\n\n----------------------------------------\n\nTITLE: Improved Custom Register in React Hook Form\nDESCRIPTION: Shows the simplified usage of the custom register function in React Hook Form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_44\n\nLANGUAGE: tsx\nCODE:\n```\nregister('test', { required: true });\n```\n\n----------------------------------------\n\nTITLE: Defining useFormState Hook in TypeScript for React Hook Form\nDESCRIPTION: Function declaration for the useFormState hook that allows subscribing to specific form state updates. It returns the form state and can be configured to listen to all form updates or just specific fields.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useFormState<TFieldValues extends FieldValues = FieldValues, TTransformedValues = TFieldValues>(props?: UseFormStateProps<TFieldValues, TTransformedValues>): UseFormStateReturn<TFieldValues>;\n```\n\n----------------------------------------\n\nTITLE: Using Reset with keepDirtyValues Option\nDESCRIPTION: Shows how to use the reset function with the keepDirtyValues option to preserve user-modified fields during form reset.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nreset(\n  {\n    firstName: 'bill', // if firstName is dirty then the value will be retained\n    lastName: 'luo',\n  },\n  { keepDirtyValues: true }, // keep any changed field\n);\n```\n\n----------------------------------------\n\nTITLE: UseFormGetFieldState Type Definition in TypeScript\nDESCRIPTION: Defines a type for the getFieldState function returned by useForm, which retrieves the state of a specific field, including invalid, isDirty, isTouched, isValidating, and error. It provides detailed information about the state of a form field.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormGetFieldState<TFieldValues extends FieldValues> = <TFieldName extends FieldPath<TFieldValues>>(name: TFieldName, formState?: FormState<TFieldValues>) => {\n    invalid: boolean;\n    isDirty: boolean;\n    isTouched: boolean;\n    isValidating: boolean;\n    error?: FieldError;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Using setFocus with shouldSelect Option\nDESCRIPTION: Demonstrates how to use the setFocus function with the shouldSelect option to automatically select the entire field value when focusing.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nsetFocus('fieldName', { shouldSelect: true });\n```\n\n----------------------------------------\n\nTITLE: useFormContext Hook Definition in TypeScript\nDESCRIPTION: Defines a React hook called useFormContext that provides access to the form context, allowing components to access form state and methods. It is used to share form functionality across components.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useFormContext: <TFieldValues extends FieldValues, TContext = any, TTransformedValues = TFieldValues>() => UseFormReturn<TFieldValues, TContext, TTransformedValues>;\n\n```\n\n----------------------------------------\n\nTITLE: Using Rules with useFieldArray for Validation\nDESCRIPTION: Example of applying validation rules directly to field arrays, including built-in and custom validation functions.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nuseFieldArray({\n  name: 'test',\n  rules: {\n    required: true,\n    minLength: 2,\n    maxLength: 10,\n    validate: (fieldArrayValues) => {\n      if (fieldArrayValues[2].title === 'test') {\n        return 'validate Error';\n      }\n    },\n  },\n});\n\nerrors?.test?.root?.message; // access root level errors\n```\n\n----------------------------------------\n\nTITLE: Enhanced useFieldArray Actions in React Hook Form\nDESCRIPTION: Shows the new configuration options for useFieldArray actions (append, insert, prepend) that allow focusing on specific inputs by name and index.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\nappend(object, config: { shouldDirty: boolean, focusIndex: number, focusName: string })\ninsert(object, config: { shouldDirty: boolean, focusIndex: number, focusName: string })\nprepend(object, config: { shouldDirty: boolean, focusIndex: number, focusName: string })\n```\n\n----------------------------------------\n\nTITLE: Using Watch with Nested Option in React Hook Form\nDESCRIPTION: Demonstrates the new nested option for the watch function in React Hook Form, allowing for flattened or nested object returns.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_43\n\nLANGUAGE: tsx\nCODE:\n```\nwatch(); // { 'test.firstName': 'bill' }\nwatch({ nest: true }); // { test: { firstName: 'bill' } }\n```\n\n----------------------------------------\n\nTITLE: Field Array Hook Types\nDESCRIPTION: Type definitions for useFieldArray hook including array manipulation methods and configuration options.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useFieldArray<TFieldValues extends FieldValues = FieldValues, TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>, TKeyName extends string = 'id'>(props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName>;\n\nexport type UseFieldArrayProps<TFieldValues extends FieldValues = FieldValues, TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>, TKeyName extends string = 'id'> = {\n    name: TFieldArrayName;\n    keyName?: TKeyName;\n    control?: Control<TFieldValues>;\n    rules?: {\n        validate?: Validate<FieldArray<TFieldValues, TFieldArrayName>[], TFieldValues> | Record<string, Validate<FieldArray<TFieldValues, TFieldArrayName>[], TFieldValues>>;\n    } & Pick<RegisterOptions<TFieldValues>, 'maxLength' | 'minLength' | 'required'>;\n    shouldUnregister?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining useWatch Hook in TypeScript for React Hook Form (Single Field)\nDESCRIPTION: Function declaration for the useWatch hook that watches a single form field. This overload accepts a field name and returns the value of that specific field with proper typing.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useWatch<TFieldValues extends FieldValues = FieldValues, TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>, TTransformedValues = TFieldValues>(props: {\n    name: TFieldName;\n    defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n    control?: Control<TFieldValues, any, TTransformedValues>;\n    disabled?: boolean;\n    exact?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\n```\n\n----------------------------------------\n\nTITLE: Defining useWatch Hook in TypeScript for React Hook Form (Object Props)\nDESCRIPTION: Function declaration for the useWatch hook with object props that allows watching form values with a configuration object. This overload returns the entire form values when no specific field is specified.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useWatch<TFieldValues extends FieldValues = FieldValues, TTransformedValues = TFieldValues>(props: {\n    defaultValue?: DeepPartialSkipArrayKey<TFieldValues>;\n    control?: Control<TFieldValues, any, TTransformedValues>;\n    disabled?: boolean;\n    exact?: boolean;\n}): DeepPartialSkipArrayKey<TFieldValues>;\n```\n\n----------------------------------------\n\nTITLE: Using validateFields in formState with React Hook Form\nDESCRIPTION: Example showing how to access the validateFields property from formState in useForm. This was added in version 7.51.0.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst {\n  formState: { validateFields },\n} = useForm();\n```\n\n----------------------------------------\n\nTITLE: Configuring shouldUnregister in React Hook Form\nDESCRIPTION: Demonstrates how to set the shouldUnregister config globally and at the component/hook level in React Hook Form. This config determines whether input values should be removed after unmount.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_22\n\nLANGUAGE: TSX\nCODE:\n```\n// Global config (can't be overwrite)\nuseForm({\n  shouldUnregister: true // default to false\n})\n\n// Component/Hook level config (can not overwrites global config)\nregister('test', {\n  shouldUnregister: true // default to false\n})\n\n<Controller  shouldUnregister={true} />\n\nuseController({ shouldUnregister: true })\n\nuseFieldArray({ shouldUnregister: true })\n```\n\n----------------------------------------\n\nTITLE: Defining useWatch Hook in TypeScript for React Hook Form (Multiple Fields)\nDESCRIPTION: Function declaration for the useWatch hook that watches multiple form fields. This overload accepts an array of field names and returns an object with values for those specific fields.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useWatch<TFieldValues extends FieldValues = FieldValues, TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[], TTransformedValues = TFieldValues>(props: {\n    name: readonly [...TFieldNames];\n    defaultValue?: DeepPartialSkipArrayKey<TFieldValues>;\n    control?: Control<TFieldValues, any, TTransformedValues>;\n    disabled?: boolean;\n    exact?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\n```\n\n----------------------------------------\n\nTITLE: UseFieldArrayAppend Type Definition in TypeScript\nDESCRIPTION: Defines a type for the append function returned by useFieldArray, which adds one or more items to the end of the field array. It enables dynamically expanding a form with additional fields.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFieldArrayAppend<TFieldValues extends FieldValues, TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>> = (value: FieldArray<TFieldValues, TFieldArrayName> | FieldArray<TFieldValues, TFieldArrayName>[], options?: FieldArrayMethodProps) => void;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Submission with shouldUnregister\nDESCRIPTION: Example showing form submission behavior with shouldUnregister option and useFieldArray implementation.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\nconst { handleSubmit } = useForm({\n  shouldUnregister: false,\n});\n\nuseFieldArray({\n  name: 'test',\n});\n\nhandleSubmit((data) => {\n  // shouldUnregister: false\n  // result:  { data: {test: []} }\n  // shouldUnregister: true\n  // result: {}\n});\n```\n\n----------------------------------------\n\nTITLE: UseFormRegisterReturn Type Definition in TypeScript\nDESCRIPTION: Defines the return type for the register function, which includes onChange, onBlur, ref, name, and validation constraints. It provides the props that should be applied to the input element.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormRegisterReturn<TFieldName extends InternalFieldName = InternalFieldName> = {\n    onChange: ChangeHandler;\n    onBlur: ChangeHandler;\n    ref: RefCallBack;\n    name: TFieldName;\n    min?: string | number;\n    max?: string | number;\n    maxLength?: number;\n    minLength?: number;\n    pattern?: string;\n    required?: boolean;\n    disabled?: boolean;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining useWatch Hook in TypeScript for React Hook Form (No Arguments)\nDESCRIPTION: Function declaration for the useWatch hook with no arguments. This overload watches the entire form and returns all form values when called without parameters.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useWatch<TFieldValues extends FieldValues = FieldValues>(): DeepPartialSkipArrayKey<TFieldValues>;\n```\n\n----------------------------------------\n\nTITLE: Type Definition: FormState\nDESCRIPTION: Defines a type `FormState` that represents the state of a form. It includes properties such as `isDirty`, `isLoading`, `isSubmitted`, `isSubmitSuccessful`, `isSubmitting`, `isValidating`, `isValid`, `disabled`, `submitCount`, `defaultValues`, `dirtyFields`, `touchedFields`, `validatingFields`, and `errors`. These properties capture the different aspects of the form's state during its lifecycle.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FormState<TFieldValues extends FieldValues> = {{\n    isDirty: boolean;\n    isLoading: boolean;\n    isSubmitted: boolean;\n    isSubmitSuccessful: boolean;\n    isSubmitting: boolean;\n    isValidating: boolean;\n    isValid: boolean;\n    disabled: boolean;\n    submitCount: number;\n    defaultValues?: undefined | Readonly<DeepPartial<TFieldValues>>;\n    dirtyFields: Partial<Readonly<FieldNamesMarkedBoolean<TFieldValues>>>;\n    touchedFields: Partial<Readonly<FieldNamesMarkedBoolean<TFieldValues>>>;\n    validatingFields: Partial<Readonly<FieldNamesMarkedBoolean<TFieldValues>>>;\n    errors: FieldErrors<TFieldValues>;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating setError API in React Hook Form\nDESCRIPTION: Demonstrates the change in the setError API where the shouldFocus option was moved to a third argument for better organization.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\n- setError('test', { type: 'type', message: 'issue', shouldFocus: true })\n+ setError('test', { type: 'type', message: 'issue' }, { shouldFocus: true })\n```\n\n----------------------------------------\n\nTITLE: Form Controller Hook Types\nDESCRIPTION: Type definitions for useController hook including props and return types for controlled form fields.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useController<TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>, TTransformedValues = TFieldValues>(props: UseControllerProps<TFieldValues, TName, TTransformedValues>): UseControllerReturn<TFieldValues, TName>;\n\nexport type UseControllerProps<TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>, TTransformedValues = TFieldValues> = {\n    name: TName;\n    rules?: Omit<RegisterOptions<TFieldValues, TName>, 'valueAsNumber' | 'valueAsDate' | 'setValueAs' | 'disabled'>;\n    shouldUnregister?: boolean;\n    defaultValue?: FieldPathValue<TFieldValues, TName>;\n    control?: Control<TFieldValues, any, TTransformedValues>;\n    disabled?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining UseWatchProps Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for the props object of the useWatch hook. It allows specifying which fields to watch, default values, whether watching is disabled, and form control reference.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseWatchProps<TFieldValues extends FieldValues = FieldValues> = {\n    defaultValue?: unknown;\n    disabled?: boolean;\n    name?: FieldPath<TFieldValues> | FieldPath<TFieldValues>[] | readonly FieldPath<TFieldValues>[];\n    control?: Control<TFieldValues>;\n    exact?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: UseFieldArrayUpdate Type Definition in TypeScript\nDESCRIPTION: Defines a type for the update function returned by useFieldArray, which updates an item at a specified index in the field array with a new value. It enables modifying specific fields within the array.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFieldArrayUpdate<TFieldValues extends FieldValues, TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>> = (index: number, value: FieldArray<TFieldValues, TFieldArrayName>) => void;\n\n```\n\n----------------------------------------\n\nTITLE: UseFormHandleSubmit Type Definition in TypeScript\nDESCRIPTION: Defines a type for the handleSubmit function returned by useForm, which handles form submission by calling the provided onValid and onInvalid handlers. It manages the submission process and validation.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormHandleSubmit<TFieldValues extends FieldValues, TTransformedValues = TFieldValues> = (onValid: SubmitHandler<TTransformedValues>, onInvalid?: SubmitErrorHandler<TFieldValues>) => (e?: React_2.BaseSyntheticEvent) => Promise<void>;\n\n```\n\n----------------------------------------\n\nTITLE: Type Definition: RegisterOptions\nDESCRIPTION: Defines a type `RegisterOptions` representing the options that can be passed when registering a field with `react-hook-form`.  It includes properties for `required`, `min`, `max`, `maxLength`, `minLength`, `validate`, `value`, `setValueAs`, `shouldUnregister`, `onChange`, `onBlur`, `disabled`, and `deps`. It also includes mutually exclusive properties for `pattern`, `valueAsNumber`, and `valueAsDate`.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RegisterOptions<TFieldValues extends FieldValues = FieldValues, TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>> = Partial<{{\n    required: Message | ValidationRule<boolean>;\n    min: ValidationRule<number | string>;\n    max: ValidationRule<number | string>;\n    maxLength: ValidationRule<number>;\n    minLength: ValidationRule<number>;\n    validate: Validate<FieldPathValue<TFieldValues, TFieldName>, TFieldValues> | Record<string, Validate<FieldPathValue<TFieldValues, TFieldName>, TFieldValues>>;\n    value: FieldPathValue<TFieldValues, TFieldName>;\n    setValueAs: (value: any) => any;\n    shouldUnregister?: boolean;\n    onChange?: (event: any) => void;\n    onBlur?: (event: any) => void;\n    disabled: boolean;\n    deps: FieldPath<TFieldValues> | FieldPath<TFieldValues>[];\n}> & ({{\n    pattern?: ValidationRule<RegExp>;\n    valueAsNumber?: false;\n    valueAsDate?: false;\n} | {{\n    pattern?: undefined;\n    valueAsNumber?: false;\n    valueAsDate?: true;\n} | {{\n    pattern?: undefined;\n    valueAsNumber?: true;\n    valueAsDate?: false;\n}});\n```\n\n----------------------------------------\n\nTITLE: Using Controller Component in React Hook Form\nDESCRIPTION: Demonstrates the usage of the new Controller component, which replaces RHFInput in React Hook Form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_46\n\nLANGUAGE: tsx\nCODE:\n```\n<Controller control={control} name=\"test\" />\n```\n\n----------------------------------------\n\nTITLE: UseFieldArrayReplace Type Definition in TypeScript\nDESCRIPTION: Defines a type for the replace function returned by useFieldArray, which replaces the entire field array with a new array of values. It enables updating the entire field array at once.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFieldArrayReplace<TFieldValues extends FieldValues, TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>> = (value: FieldArray<TFieldValues, TFieldArrayName> | FieldArray<TFieldValues, TFieldArrayName>[]) => void;\n\n```\n\n----------------------------------------\n\nTITLE: Defining createFormControl Function in TypeScript\nDESCRIPTION: This snippet defines the createFormControl function, which is used to create a form control object with various methods and properties for form handling.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function createFormControl<TFieldValues extends FieldValues = FieldValues, TContext = any>(props?: UseFormProps<TFieldValues, TContext>): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'>;\n```\n\n----------------------------------------\n\nTITLE: Utility Function: get\nDESCRIPTION: Defines a utility function `get` for safely accessing nested properties within an object using a string path.  It takes an object, an optional path string, and an optional default value, and returns the value at the specified path or the default value if the path is not found.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport const get: <T>(object: T, path?: string, defaultValue?: unknown) => any;\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission and Reset with useEffect - TypeScript\nDESCRIPTION: Describes how to handle form submission and state reset using `useEffect`. The original approach highlights using `reset` with `useEffect` based on formState changes, whereas the updated snippet showcases a simplified approach directly using `reset` in the submit callback. This snippet requires React and React Hook Form for managing form states.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst onSubmit = (data) => {};\n\nReact.useEffect(() => {\n  if (formState.isSubmitSuccessful) {\n    reset({ something: '' });\n  }\n}, [formState, reset]);\n\nhandleSubmit(onSubmit);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst onSubmit = (data) => {\n  setSubmittedData(data);\n  reset(data); // no longer need to have useEffect\n};\n\nhandleSubmit(onSubmit);\n```\n\n----------------------------------------\n\nTITLE: UseFieldArrayMove Type Definition in TypeScript\nDESCRIPTION: Defines a type for the move function returned by useFieldArray, which moves an item from one index to another within the field array. It facilitates reordering fields by index.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFieldArrayMove = (indexA: number, indexB: number) => void;\n\n```\n\n----------------------------------------\n\nTITLE: UseFormGetValues Type Definition in TypeScript\nDESCRIPTION: Defines a type for the getValues function returned by useForm, which retrieves form values. It can retrieve all values, a single value by name, or multiple values by an array of names.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormGetValues<TFieldValues extends FieldValues> = {\n    (): TFieldValues;\n    <TFieldName extends FieldPath<TFieldValues>>(name: TFieldName): FieldPathValue<TFieldValues, TFieldName>;\n    <TFieldNames extends FieldPath<TFieldValues>[]>(names: readonly [...TFieldNames]): [...FieldPathValues<TFieldValues, TFieldNames>];\n};\n\n```\n\n----------------------------------------\n\nTITLE: Type Definition: FieldPathValue\nDESCRIPTION: Defines a type `FieldPathValue` that extracts the type of a field value based on a field path within a given field values type. It utilizes the `PathValue` type to recursively navigate the field path and determine the corresponding value type.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldPathValue<TFieldValues extends FieldValues, TFieldPath extends FieldPath<TFieldValues>> = PathValue<TFieldValues, TFieldPath>;\n```\n\n----------------------------------------\n\nTITLE: Managing Form Field State with useForm - TypeScript\nDESCRIPTION: Demonstrates how to use the `useForm` hook to manage the state of individual form fields using the `getFieldState` function. It initializes a form with `onChange` mode and an empty default value for `firstName`. The snippet shows how to register a field, retrieve its state, and display its state changes. Dependencies include React and React Hook Form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function App() {\n  const {\n    register,\n    getFieldState,\n    formState: { isDirty, isValid },\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: {\n      firstName: '',\n    },\n  });\n\n  // you can invoke before render or within the render function\n  const fieldState = getFieldState('firstName');\n\n  return (\n    <form>\n      <input {...register('firstName', { required: true })} />\n      <p>{getFieldState('firstName').isDirty && 'dirty'}</p>\n      <p>{getFieldState('firstName').isTouched && 'touched'}</p>\n      <button\n        type=\"button\"\n        onClick={() => console.log(getFieldState('firstName'))}\n      >\n        field state\n      </button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: UseFieldArrayInsert Type Definition in TypeScript\nDESCRIPTION: Defines a type for the insert function returned by useFieldArray, which inserts one or more items at a specified index in the field array. It allows adding fields at specific positions within the array.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFieldArrayInsert<TFieldValues extends FieldValues, TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>> = (index: number, value: FieldArray<TFieldValues, TFieldArrayName> | FieldArray<TFieldValues, TFieldArrayName>[], options?: FieldArrayMethodProps) => void;\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Values in Form State\nDESCRIPTION: Shows how to access the defaultValues from formState to compare with current values in the form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst { formState, watch } = useForm({\n  defaultValues: { name: 'test' },\n});\nconst { defaultValues } = useFormState();\n\nconst name = watch('name');\n\nreturn (\n  <div>\n    <p>Your name was {defaultValues.name}</p>\n    <p>Updated name is {name}</p>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: UseFieldArrayPrepend Type Definition in TypeScript\nDESCRIPTION: Defines a type for the prepend function returned by useFieldArray, which adds one or more items to the beginning of the field array. It allows adding fields to the start of the array.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFieldArrayPrepend<TFieldValues extends FieldValues, TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>> = (value: FieldArray<TFieldValues, TFieldArrayName> | FieldArray<TFieldValues, TFieldArrayName>[], options?: FieldArrayMethodProps) => void;\n\n```\n\n----------------------------------------\n\nTITLE: UseFieldArrayProps Type Definition in TypeScript\nDESCRIPTION: Defines the props interface for the useFieldArray hook, including name, keyName, control, rules, and shouldUnregister. It configures the behavior and validation of a dynamic field array.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFieldArrayProps<TFieldValues extends FieldValues = FieldValues, TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>, TKeyName extends string = 'id', TTransformedValues = TFieldValues> = {\n    name: TFieldArrayName;\n    keyName?: TKeyName;\n    control?: Control<TFieldValues, any, TTransformedValues>;\n    rules?: {{\n        validate?: Validate<FieldArray<TFieldValues, TFieldArrayName>[], TFieldValues> | Record<string, Validate<FieldArray<TFieldValues, TFieldArrayName>[], TFieldValues>>;\n    }} & Pick<RegisterOptions<TFieldValues>, 'maxLength' | 'minLength' | 'required'>;\n    shouldUnregister?: boolean;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Type Definition: FormProviderProps\nDESCRIPTION: Defines a type `FormProviderProps` representing the props for the `FormProvider` component. It includes `children` which are React nodes, and extends `UseFormReturn`, indicating that it accepts the return value of a `useForm` hook to provide context to its children.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FormProviderProps<TFieldValues extends FieldValues = FieldValues, TContext = any, TTransformedValues = TFieldValues> = {{\n    children: React_2.ReactNode | React_2.ReactNode[];\n} & UseFormReturn<TFieldValues, TContext, TTransformedValues>;\n```\n\n----------------------------------------\n\nTITLE: Defining UseFormSetError Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for the setError function that allows manually setting error messages for form fields. It can set errors for specific fields, root-level errors, or nested root errors, with an option to auto-focus the field with the error.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormSetError<TFieldValues extends FieldValues> = (name: FieldPath<TFieldValues> | `root.${string}` | 'root', error: ErrorOption, options?: {\n    shouldFocus: boolean;\n}) => void;\n```\n\n----------------------------------------\n\nTITLE: Type Definition: FromSubscribe\nDESCRIPTION: Defines a type `FromSubscribe` which represents a function used to subscribe to form state changes. It takes a payload with optional `name`, `formState`, a `callback` function that receives updated form state and current values, and `exact` and `reRenderRoot` flags. The return value of the subscribe function is a cleanup function to unsubscribe.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FromSubscribe<TFieldValues extends FieldValues> = (payload: {{\n    name?: string;\n    formState?: Partial<ReadFormState>;\n    callback: (data: Partial<FormState<TFieldValues>> & {{\n        values: TFieldValues;\n    }) => void;\n    exact?: boolean;\n    reRenderRoot?: boolean;\n}}) => () => void;\n```\n\n----------------------------------------\n\nTITLE: Defining UseFormWatch Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for the watch function that observes form field values. It can watch the entire form, specific fields, or set up a callback subscription to receive updates when values change.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormWatch<TFieldValues extends FieldValues> = {\n    (): TFieldValues;\n    <TFieldNames extends readonly FieldPath<TFieldValues>[]>(names: readonly [...TFieldNames], defaultValue?: DeepPartial<TFieldValues>): FieldPathValues<TFieldValues, TFieldNames>;\n    <TFieldName extends FieldPath<TFieldValues>>(name: TFieldName, defaultValue?: FieldPathValue<TFieldValues, TFieldName>): FieldPathValue<TFieldValues, TFieldName>;\n    (callback: WatchObserver<TFieldValues>, defaultValues?: DeepPartial<TFieldValues>): Subscription;\n};\n```\n\n----------------------------------------\n\nTITLE: Register Options Type Definition\nDESCRIPTION: Complex type definition for field registration with multiple validation and configuration options\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RegisterOptions<TFieldValues extends FieldValues = FieldValues, TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>> = Partial<{\n    required: Message | ValidationRule<boolean>;\n    min: ValidationRule<number | string>;\n    max: ValidationRule<number | string>;\n    // ... additional validation and configuration options\n}>;\n```\n\n----------------------------------------\n\nTITLE: Importing useForm in React Hook Form\nDESCRIPTION: Demonstrates the improved module exports in React Hook Form, allowing direct import of the useForm hook.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_40\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useForm } from 'react-hook-form';\n```\n\n----------------------------------------\n\nTITLE: Installing React Hook Form with npm\nDESCRIPTION: This command installs the react-hook-form package using npm. It's the first step to use the library in a React project.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/docs/Template.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install react-hook-form\n```\n\n----------------------------------------\n\nTITLE: Defining UseFormUnregister Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for the unregister function that removes fields from the form. It provides options for keeping various aspects of the field state such as values and errors when unregistering fields.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormUnregister<TFieldValues extends FieldValues> = (name?: FieldPath<TFieldValues> | FieldPath<TFieldValues>[] | readonly FieldPath<TFieldValues>[], options?: Omit<KeepStateOptions, 'keepIsSubmitted' | 'keepSubmitCount' | 'keepValues' | 'keepDefaultValues' | 'keepErrors'> & {\n    keepValue?: boolean;\n    keepDefaultValue?: boolean;\n    keepError?: boolean;\n}) => void;\n```\n\n----------------------------------------\n\nTITLE: Form Types and Interfaces\nDESCRIPTION: Core type definitions for form handling including resolver types, field values, error states and configuration options.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ResolverError<TFieldValues extends FieldValues = FieldValues> = {\n    values: {};\n    errors: FieldErrors<TFieldValues>;\n};\n\nexport interface ResolverOptions<TFieldValues extends FieldValues> {\n    criteriaMode?: CriteriaMode;\n    fields: Record<InternalFieldName, Field['_f']>;\n    names?: FieldName<TFieldValues>[];\n    shouldUseNativeValidation: boolean | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: UseFormClearErrors Type Definition in TypeScript\nDESCRIPTION: Defines a type for the clearErrors function returned by useForm, which clears errors for specified fields or the entire form. It is used to reset the error state of the form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormClearErrors<TFieldValues extends FieldValues> = (name?: FieldPath<TFieldValues> | FieldPath<TFieldValues>[] | readonly FieldPath<TFieldValues>[] | `root.${string}` | 'root') => void;\n\n```\n\n----------------------------------------\n\nTITLE: Installing React Hook Form\nDESCRIPTION: This command installs the react-hook-form package using npm. It's a necessary first step to use the library in a React project.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/docs/README.V6.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"npm install react-hook-form\"\n```\n\n----------------------------------------\n\nTITLE: Using Enhanced unregister Function in React Hook Form\nDESCRIPTION: Shows the usage of the unregister function with a new second argument that allows keeping the dirty state of the unregistered field.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nunregister('test', { keepDirty: true });\n```\n\n----------------------------------------\n\nTITLE: SetValueConfig Type Definition in TypeScript\nDESCRIPTION: Defines a type for configuration options when setting a value, using the Partial utility type to make the properties optional. It configures validation, dirty state, and touch state when updating form values.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SetValueConfig = Partial<{{\n    shouldValidate: boolean;\n    shouldDirty: boolean;\n    shouldTouch: boolean;\n}}>;\n\n```\n\n----------------------------------------\n\nTITLE: Type Definition: FieldValues\nDESCRIPTION: Defines a type `FieldValues` as a record of strings to any, effectively representing an object where the keys are strings and the values can be of any type.  This serves as a base type for representing the shape of form data.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldValues = Record<string, any>;\n```\n\n----------------------------------------\n\nTITLE: Resolver Success Type Definition in TypeScript\nDESCRIPTION: Defines the structure of a successful resolver result, including transformed values and an empty errors object. It specifies the format of a successfully validated form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ResolverSuccess<TTransformedValues> = {\n    values: TTransformedValues;\n    errors: {};\n};\n\n```\n\n----------------------------------------\n\nTITLE: Updated Resolver Signature in React Hook Form\nDESCRIPTION: Illustrates the changes to the resolver function signature, which now includes additional options like criteriaMode, names, and fields object for more granular validation control.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n- resolver: (values: any, context?: object) => Promise<ResolverResult> | ResolverResult\n+ resolver: (\n+    values: any,\n+    context?: object,\n+    options: {\n+       criteriaMode?: 'firstError' | 'all',\n+       names?: string[],\n+       fields: { [name]: field } // Support nested field\n+    }\n+  ) => Promise<ResolverResult> | ResolverResult\n```\n\n----------------------------------------\n\nTITLE: Resolver Error Type Definition in TypeScript\nDESCRIPTION: Defines the structure of a resolver error, including values (which are empty in the error case) and field errors associated with specific field values. It leverages generic types for field values to provide type safety.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ResolverError<TFieldValues extends FieldValues = FieldValues> = {\n    values: {};\n    errors: FieldErrors<TFieldValues>;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining ValidationMode Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for the validation mode constant that defines when validation should occur in the form (e.g., on submit, on blur, on change).\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ValidationMode = typeof VALIDATION_MODE;\n```\n\n----------------------------------------\n\nTITLE: Defining Field Path Value Types\nDESCRIPTION: Type definition for extracting field path values from field values with type safety and generic support\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldPathValue<TFieldValues extends FieldValues, TFieldPath extends FieldPath<TFieldValues>> = PathValue<TFieldValues, TFieldPath>;\n```\n\n----------------------------------------\n\nTITLE: Type Definition: FormProps\nDESCRIPTION: Defines a type `FormProps` representing the props for the `Form` component.  It extends the standard `React_2.FormHTMLAttributes` and adds properties such as `control`, `headers`, `validateStatus`, `onError`, `onSuccess`, `onSubmit`, `method`, `children`, `render` and `encType` to customize the form behavior. The `Omit` utility type is used to exclude the 'onError' and 'onSubmit' properties from the inherited `React_2.FormHTMLAttributes`.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FormProps<TFieldValues extends FieldValues, TTransformedValues = TFieldValues> = Omit<React_2.FormHTMLAttributes<HTMLFormElement>, 'onError' | 'onSubmit'> & Partial<{{\n    control: Control<TFieldValues, any, TTransformedValues>;\n    headers: Record<string, string>;\n    validateStatus: (status: number) => boolean;\n    onError: ({{ response, error, }: {{{\n        response: Response;\n        error?: undefined;\n    } | {{\n        response?: undefined;\n        error: unknown;\n    }) => void;\n    onSuccess: ({{ response }: {{\n        response: Response;\n    }) => void;\n    onSubmit: FormSubmitHandler<TTransformedValues>;\n    method: 'post' | 'put' | 'delete';\n    children: React_2.ReactNode | React_2.ReactNode[];\n    render: (props: {{\n        submit: (e?: React_2.FormEvent) => void;\n    }) => React_2.ReactNode | React_2.ReactNode[];\n    encType: 'application/x-www-form-urlencoded' | 'multipart/form-data' | 'text/plain' | 'application/json';\n}>};\n```\n\n----------------------------------------\n\nTITLE: Defining ValidateResult Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for the result of a validation function. It can be a string message, array of messages, boolean, or undefined indicating validation status.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ValidateResult = Message | Message[] | boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining ValidationValue Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for values that can be used in validation rules. This includes boolean, number, string, or RegExp patterns for validation.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ValidationValue = boolean | number | string | RegExp;\n```\n\n----------------------------------------\n\nTITLE: Controller Type Changes in React Hook Form\nDESCRIPTION: Diff showing the type change for onChange in Controller, updating from a generic any type to more specific ChangeEvent or FieldPathValue types.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- onChange: (...event: any[]) => void;\n+ onChange: (event: ChangeEvent | FieldPathValue<TFieldValues, TName>) => void;\n```\n\n----------------------------------------\n\nTITLE: UseFieldArraySwap Type Definition in TypeScript\nDESCRIPTION: Defines a type for the swap function returned by useFieldArray, which swaps the positions of two items in the field array by their indices. It facilitates reordering fields by swapping their positions.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFieldArraySwap = (indexA: number, indexB: number) => void;\n\n```\n\n----------------------------------------\n\nTITLE: Defining UseFormSetFocus Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for the setFocus function that allows programmatically setting focus to a specific form field. It accepts the field name and optional focus options.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormSetFocus<TFieldValues extends FieldValues> = <TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>>(name: TFieldName, options?: SetFocusOptions) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining Validate Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for a validation function that validates a field value against the entire form values. It returns a validation result that can be a boolean, string, array of strings, or undefined.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Validate<TFieldValue, TFormValues> = (value: TFieldValue, formValues: TFormValues) => ValidateResult | Promise<ValidateResult>;\n```\n\n----------------------------------------\n\nTITLE: Including Missing Generic for useFormContext\nDESCRIPTION: Diff showing the addition of the TContext generic parameter to useFormContext function type definition.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- export const useFormContext: <TFieldValues extends FieldValues, TransformedValues extends FieldValues | undefined = undefined>() => UseFormReturn<TFieldValues>;\n+ export const useFormContext: <TFieldValues extends FieldValues, TContext = any, TransformedValues extends FieldValues | undefined = undefined>() => UseFormReturn<TFieldValues, TContext, TransformedValues>;\n```\n\n----------------------------------------\n\nTITLE: UseFieldArrayRemove Type Definition in TypeScript\nDESCRIPTION: Defines a type for the remove function returned by useFieldArray, which removes one or more items from the field array by index. It enables dynamically removing fields from the form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFieldArrayRemove = (index?: number | number[]) => void;\n\n```\n\n----------------------------------------\n\nTITLE: Type Definition: Mode\nDESCRIPTION: Defines a type `Mode` as the key of ValidationMode. This likely refers to the mode of form validation such as 'onSubmit', 'onChange', etc.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Mode = keyof ValidationMode;\n```\n\n----------------------------------------\n\nTITLE: Defining UseFormStateProps Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for the props object of the useFormState hook. It allows configuring which form control to listen to, whether the subscription is disabled, which field names to watch, and if exact field name matching is required.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormStateProps<TFieldValues extends FieldValues, TTransformedValues = TFieldValues> = Partial<{\n    control?: Control<TFieldValues, any, TTransformedValues>;\n    disabled?: boolean;\n    name?: FieldPath<TFieldValues> | FieldPath<TFieldValues>[] | readonly FieldPath<TFieldValues>[];\n    exact?: boolean;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Type Definition: GlobalError\nDESCRIPTION: Defines a type `GlobalError` for representing form-level errors, containing optional `type` (string or number) and `message` (string) properties. This type allows for representing general errors not associated with specific fields.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport type GlobalError = Partial<{{\n    type: string | number;\n    message: Message;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Type Definition: FormStateProxy\nDESCRIPTION: Defines a type `FormStateProxy` which provides a proxy-like representation of the `FormState`. Instead of containing the actual values, it uses booleans to indicate whether a specific part of the form state is dirty, validating, etc.  The `errors` and `isValid` properties are also represented as booleans.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FormStateProxy<TFieldValues extends FieldValues = FieldValues> = {{\n    isDirty: boolean;\n    isValidating: boolean;\n    dirtyFields: FieldNamesMarkedBoolean<TFieldValues>;\n    touchedFields: FieldNamesMarkedBoolean<TFieldValues>;\n    validatingFields: FieldNamesMarkedBoolean<TFieldValues>;\n    errors: boolean;\n    isValid: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: SetFocusOptions Type Definition in TypeScript\nDESCRIPTION: Defines a type for setting focus options using the Partial utility type, making shouldSelect optional. It allows customization of the focus behavior.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SetFocusOptions = Partial<{{\n    shouldSelect: boolean;\n}}>;\n\n```\n\n----------------------------------------\n\nTITLE: Defining ValidationModeFlags Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for flags that indicate which validation modes are active in the form. These boolean flags determine when validation occurs during form interaction.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ValidationModeFlags = {\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnAll: boolean;\n    isOnTouch: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ValidationRule Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for a validation rule that can be either a direct validation value or an object containing both a value and an error message.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ValidationRule<TValidationValue extends ValidationValue = ValidationValue> = TValidationValue | ValidationValueMessage<TValidationValue>;\n```\n\n----------------------------------------\n\nTITLE: Type Definition: GetIsDirty\nDESCRIPTION: Defines a type `GetIsDirty` for a function that determines if a field is dirty. It takes an optional field name and data, and returns a boolean indicating whether the field is dirty.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport type GetIsDirty = <TName extends InternalFieldName, TData>(name?: TName, data?: TData) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Type Definition: KeepStateOptions\nDESCRIPTION: Defines a type `KeepStateOptions` that is a partial object containing boolean flags for keeping various aspects of the form state during updates. These options include `keepDirtyValues`, `keepErrors`, `keepDirty`, `keepValues`, `keepDefaultValues`, `keepIsSubmitted`, `keepIsSubmitSuccessful`, `keepTouched`, `keepIsValidating`, `keepIsValid`, and `keepSubmitCount`.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport type KeepStateOptions = Partial<{{\n    keepDirtyValues: boolean;\n    keepErrors: boolean;\n    keepDirty: boolean;\n    keepValues: boolean;\n    keepDefaultValues: boolean;\n    keepIsSubmitted: boolean;\n    keepIsSubmitSuccessful: boolean;\n    keepTouched: boolean;\n    keepIsValidating: boolean;\n    keepIsValid: boolean;\n    keepSubmitCount: boolean;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Type Definition: Resolver\nDESCRIPTION: Defines a type `Resolver` which represents a function responsible for resolving form values and performing validation. It accepts form values, a context, and resolver options, and returns either a `ResolverResult` or a promise that resolves to a `ResolverResult`.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Resolver<TFieldValues extends FieldValues = FieldValues, TContext = any, TTransformedValues = TFieldValues> = (values: TFieldValues, context: TContext | undefined, options: ResolverOptions<TFieldValues>) => Promise<ResolverResult<TFieldValues, TTransformedValues>> | ResolverResult<TFieldValues, TTransformedValues>;\n```\n\n----------------------------------------\n\nTITLE: Defining ValidationValueMessage Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for a validation rule with an associated error message. This allows specifying both the validation value and the error message to display when validation fails.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ValidationValueMessage<TValidationValue extends ValidationValue = ValidationValue> = {\n    value: TValidationValue;\n    message: Message;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining WatchInternal Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for the internal watch function used by React Hook Form. It watches field values and returns either a single field value or an object with multiple field values.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nexport type WatchInternal<TFieldValues> = (fieldNames?: InternalFieldName | InternalFieldName[], defaultValue?: DeepPartial<TFieldValues>, isMounted?: boolean, isGlobal?: boolean) => FieldPathValue<FieldValues, InternalFieldName> | FieldPathValues<FieldValues, InternalFieldName[]>;\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Errors in React Hook Form\nDESCRIPTION: Shows how to access nested error objects with improved TypeScript support in React Hook Form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_41\n\nLANGUAGE: tsx\nCODE:\n```\ntype form = {\n  yourDetail: {\n    firstName: string;\n  };\n};\n\nerrors?.yourDetail?.firstName;\n```\n\n----------------------------------------\n\nTITLE: Defining UseFromSubscribe Type in TypeScript for React Hook Form\nDESCRIPTION: Type definition for the subscribe function that allows subscribing to form updates. It accepts a payload with configuration options and returns an unsubscribe function to clean up the subscription.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFromSubscribe<TFieldValues extends FieldValues> = (payload: {\n    name?: string;\n    formState?: Partial<ReadFormState>;\n    callback: (data: Partial<FormState<TFieldValues>> & {\n        values: TFieldValues;\n    }) => void;\n    exact?: boolean;\n}) => () => void;\n```\n\n----------------------------------------\n\nTITLE: TriggerConfig Type Definition in TypeScript\nDESCRIPTION: Defines a type for trigger configuration options, using the Partial utility type to make properties optional. It configures whether to focus on the first error when triggering validation.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TriggerConfig = Partial<{{\n    shouldFocus: boolean;\n}}>;\n\n```\n\n----------------------------------------\n\nTITLE: Type Definition: Names\nDESCRIPTION: Defines a type `Names` which includes sets for mount, unMount, array, and watch, all of which are InternalNameSet (Set<InternalFieldName>). It also optionally includes a focus field of type InternalFieldName and a watchAll boolean.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Names = {{\n    mount: InternalNameSet;\n    unMount: InternalNameSet;\n    array: InternalNameSet;\n    watch: InternalNameSet;\n    focus?: InternalFieldName;\n    watchAll?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Nested Errors in React Hook Form\nDESCRIPTION: Illustrates how to set and access nested errors using setError in React Hook Form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_45\n\nLANGUAGE: tsx\nCODE:\n```\nsetError('yourDetail.firstName', 'test');\nerrors.yourDetails.firstName;\n```\n\n----------------------------------------\n\nTITLE: SubmitErrorHandler Type Definition in TypeScript\nDESCRIPTION: Defines a type for a submit error handler, which is a function that takes field errors and an optional React synthetic event as arguments. It handles errors that occur during form submission.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SubmitErrorHandler<TFieldValues extends FieldValues> = (errors: FieldErrors<TFieldValues>, event?: React_2.BaseSyntheticEvent) => unknown | Promise<unknown>;\n\n```\n\n----------------------------------------\n\nTITLE: Type Definition: FormStateSubjectRef\nDESCRIPTION: Defines a type `FormStateSubjectRef` which is a Subject from RxJS that emits partial `FormState` updates. It includes optional `name`, `values`, and `type` properties, enabling targeted updates to the form state. The Subject allows for reactive updates to the form state.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FormStateSubjectRef<TFieldValues extends FieldValues> = Subject<Partial<FormState<TFieldValues>> & {{\n    name?: InternalFieldName;\n    values?: TFieldValues;\n    type?: EventType;\n}>; \n```\n\n----------------------------------------\n\nTITLE: Type Definition: Path\nDESCRIPTION: Defines a type `Path<T>` that represents a path to a property within a type `T`. It uses `PathInternal` to generate the possible paths. It handles `any` types by returning `never`.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Path<T> = T extends any ? PathInternal<T> : never;\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Errors in React Hook Form\nDESCRIPTION: Demonstrates the change in how form errors are accessed in React Hook Form v7, moving from a top-level errors object to accessing it through formState.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\n- const { errors } = useForm();\n+ const { formState: { errors } } = useForm();\n```\n\n----------------------------------------\n\nTITLE: Type Definition: ReadFormState\nDESCRIPTION: Defines a type `ReadFormState` as an object with keys from `FormStateProxy` and boolean or 'all' values, plus an optional 'values' boolean. It's used for selective form state re-renders.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ReadFormState = {{\n    [K in keyof FormStateProxy]: boolean | 'all';\n} & {{\n    values?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definition: PathString\nDESCRIPTION: Defines a type alias `PathString` as a string.  This likely represents a string representation of a path to a field within a form's data structure.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PathString = string;\n```\n\n----------------------------------------\n\nTITLE: Accessing New States in useController Hook\nDESCRIPTION: Demonstrates how to access the new isValidating and error states provided by the useController hook in React Hook Form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst {\n  meta: { error, isValidating },\n} = useController({ name: 'test' });\n```\n\n----------------------------------------\n\nTITLE: Type Definition: NativeFieldValue\nDESCRIPTION: Defines a type `NativeFieldValue` representing the possible types for a form field value.  It includes common primitive types like string, number, boolean, null, and undefined, as well as arrays of unknown types.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NativeFieldValue = string | number | boolean | null | undefined | unknown[];\n```\n\n----------------------------------------\n\nTITLE: Type Definition: FieldValue\nDESCRIPTION: Defines a type `FieldValue` that extracts the value type associated with an internal field name in the given field values type. This is effectively an indexed access type, obtaining the type of the property associated with the `InternalFieldName` key.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldValue<TFieldValues extends FieldValues> = TFieldValues[InternalFieldName];\n```\n\n----------------------------------------\n\nTITLE: Triggering Validation in React Hook Form\nDESCRIPTION: Illustrates the change in triggerValidation argument from Object/Object[] to String/String[] in React Hook Form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_42\n\nLANGUAGE: tsx\nCODE:\n```\ntriggerValidation('firstName');\ntriggerValidation(['firstName', 'lastName']);\n```\n\n----------------------------------------\n\nTITLE: Type Definition: InputValidationRules\nDESCRIPTION: Defines a type `InputValidationRules` which is based on the type of the `INPUT_VALIDATION_RULES` constant (which is not provided in the snippet). This type likely specifies the available validation rules for input fields.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InputValidationRules = typeof INPUT_VALIDATION_RULES;\n```\n\n----------------------------------------\n\nTITLE: Defining appendErrors Function in TypeScript\nDESCRIPTION: This snippet defines the appendErrors function, which is used to append validation errors to the form state.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appendErrors: (name: InternalFieldName, validateAllFieldCriteria: boolean, errors: InternalFieldErrors, type: string, message: ValidateResult) => {};\n```\n\n----------------------------------------\n\nTITLE: Resolver Options Interface Definition in TypeScript\nDESCRIPTION: Defines the structure for options passed to a resolver, including criteria mode, fields, names, and a flag to indicate whether to use native validation. It defines properties that affect how the resolver validates form input.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ResolverOptions<TFieldValues extends FieldValues> {\n    // (undocumented)\n    criteriaMode?: CriteriaMode;\n    // (undocumented)\n    fields: Record<InternalFieldName, Field['_f']>;\n    // (undocumented)\n    names?: FieldName<TFieldValues>[];\n    // (undocumented)\n    shouldUseNativeValidation: boolean | undefined;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Type Definition: PathValue\nDESCRIPTION: Defines a type `PathValue<T, P>` that retrieves the type of a nested property within an object `T` based on a path `P`. It handles array access and nested paths using recursion and conditional types.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PathValue<T, P extends Path<T> | ArrayPath<T>> = T extends any ? P extends `${infer K}.${infer R}` ? K extends keyof T ? R extends Path<T[K]> ? PathValue<T[K], R> : never : K extends `${ArrayKey}` ? T extends ReadonlyArray<infer V> ? PathValue<V, R & Path<V>> : never : never : P extends keyof T ? T[P] : P extends `${ArrayKey}` ? T extends ReadonlyArray<infer V> ? V : never : never : never;\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Types in React Hook Form\nDESCRIPTION: Shows changes to TypeScript type names in React Hook Form v7. Several type names were updated for consistency and clarity.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\n- UseFormMethods\n+ UseFormReturn\n- UseFormOptions\n+ UseFormProps\n- UseFieldArrayMethods\n+ UseFieldArrayReturn\n- UseFieldArrayOptions\n+ UseFieldArrayProps\n- UseControllerMethods\n+ UseControllerReturn\n- UseControllerOptions\n+ UseControllerProps\n- ArrayField\n+ FieldArray\n```\n\n----------------------------------------\n\nTITLE: Resolver Result Type Definition in TypeScript\nDESCRIPTION: Defines the result of a resolver, which can be either a success or an error. It uses a discriminated union to represent the two possible outcomes of the resolver function.  It leverages generic types for field values and transformed values to provide type safety.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ResolverResult<TFieldValues extends FieldValues = FieldValues, TTransformedValues = TFieldValues> = ResolverSuccess<TTransformedValues> | ResolverError<TFieldValues>;\n\n```\n\n----------------------------------------\n\nTITLE: Type Definition: MultipleFieldErrors\nDESCRIPTION: Defines a type `MultipleFieldErrors` as a record of `RegisterOptions` keys and other string keys to ValidateResult. It allows multiple errors for a single field based on different validation rules.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MultipleFieldErrors = {{\n    [K in keyof RegisterOptions]?: ValidateResult;\n} & {{\n    [key: string]: ValidateResult;\n}};\n```\n\n----------------------------------------\n\nTITLE: Subjects Type Definition in TypeScript\nDESCRIPTION: Defines a type for subjects, which are observables used for tracking changes in array fields and form state. The array subject tracks changes to field arrays, while the state subject tracks changes to the overall form state.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Subjects<TFieldValues extends FieldValues = FieldValues> = {\n    array: Subject<{{\n        name?: InternalFieldName;\n        values?: FieldValues;\n    }}>;\n    state: FormStateSubjectRef<TFieldValues>;\n};\n\n```\n\n----------------------------------------\n\nTITLE: SetFieldValue Type Definition in TypeScript\nDESCRIPTION: Defines a type for setting a field value, based on the FieldValue type, and parameterized by the field values type. Its use is undocumented in the provided context.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SetFieldValue<TFieldValues extends FieldValues> = FieldValue<TFieldValues>;\n\n```\n\n----------------------------------------\n\nTITLE: Type Definition: MaxType\nDESCRIPTION: Defines a type alias `MaxType` that represents the type of the `max` and `maxLength` properties within the `InputValidationRules`. This indicates the data type expected for maximum value or length validation rules.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MaxType = InputValidationRules['max'] | InputValidationRules['maxLength'];\n```\n\n----------------------------------------\n\nTITLE: Type Definition: IsEqual\nDESCRIPTION: Defines a type `IsEqual<T1, T2>` that checks if two types, `T1` and `T2`, are equal. It uses a conditional type and function type inference to determine if the types are equivalent.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport type IsEqual<T1, T2> = T1 extends T2 ? (<G>() => G extends T1 ? 1 : 2) extends <G>() => G extends T2 ? 1 : 2 ? true : false : false;\n```\n\n----------------------------------------\n\nTITLE: Type Definition: Merge\nDESCRIPTION: Defines a type `Merge<A, B>` that recursively merges two object types `A` and `B`. It merges properties with the same key and handles nested object merging.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Merge<A, B> = {{\n    [K in keyof A | keyof B]?: K extends keyof A & keyof B ? [A[K], B[K]] extends [object, object] ? Merge<A[K], B[K]> : A[K] | B[K] : K extends keyof A ? A[K] : K extends keyof B ? B[K] : never;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Form Errors with Focus Management\nDESCRIPTION: Example demonstrating how to set form errors with the ability to focus on the errored input field.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/CHANGELOG.md#2025-04-22_snippet_39\n\nLANGUAGE: typescript jsx\nCODE:\n```\nsetError('test', { message: 'This is required', shouldFocus: true });\n```\n\n----------------------------------------\n\nTITLE: Type Definition: InternalFieldName\nDESCRIPTION: Defines a type `InternalFieldName` as a string. This type represents the internal name used to identify fields within the form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InternalFieldName = string;\n```\n\n----------------------------------------\n\nTITLE: Type Definition: IsFlatObject\nDESCRIPTION: Defines a type `IsFlatObject` that checks if an object `T` is a flat object, meaning that none of its properties are arrays or objects (excluding `Date` and `FileList`).\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport type IsFlatObject<T extends object> = Extract<Exclude<T[keyof T], Date | FileList_2>, any[] | object> extends never ? true : false;\n```\n\n----------------------------------------\n\nTITLE: Type Definition: FieldRefs\nDESCRIPTION: Defines a type `FieldRefs` that is a partial record of internal field names to `Field` objects. This type is used to store references to form fields within the internal state of the form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldRefs = Partial<Record<InternalFieldName, Field>>;\n```\n\n----------------------------------------\n\nTITLE: Form Props Type Definition\nDESCRIPTION: Complex type definition for form component props with multiple configuration options and event handlers\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FormProps<TFieldValues extends FieldValues, TTransformedValues = TFieldValues> = Omit<React_2.FormHTMLAttributes<HTMLFormElement>, 'onError' | 'onSubmit'> & Partial<{...}>;\n```\n\n----------------------------------------\n\nTITLE: Type Definition: FormSubmitHandler\nDESCRIPTION: Defines a type `FormSubmitHandler` which represents the function to be called when the form is submitted. It takes a payload containing the transformed form data (`data`), the React event (`event`), a `FormData` object, the JSON string representation of `FormData`, and the HTTP method, and returns either a value or a Promise.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FormSubmitHandler<TTransformedValues> = (payload: {{\n    data: TTransformedValues;\n    event?: React_2.BaseSyntheticEvent;\n    formData: FormData;\n    formDataJson: string;\n    method?: 'post' | 'put' | 'delete';\n}}) => unknown | Promise<unknown>;\n```\n\n----------------------------------------\n\nTITLE: Type Definition: InternalNameSet\nDESCRIPTION: Defines a type `InternalNameSet` as a `Set` of `InternalFieldName`. This type is likely used to keep track of the names of fields that are mounted, unmounted, part of arrays, or being watched.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InternalNameSet = Set<InternalFieldName>;\n```\n\n----------------------------------------\n\nTITLE: Set Function Definition in TypeScript\nDESCRIPTION: Defines a function named 'set' which takes an object (FieldValues), a path (FieldPath), and a value (unknown) as arguments, and returns void. Its purpose is undocumented in the provided context.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md.api.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport const set: (object: FieldValues, path: FieldPath<FieldValues>, value?: unknown) => void;\n\n```\n\n----------------------------------------\n\nTITLE: Type Definition: FieldPathValues\nDESCRIPTION: Defines a type `FieldPathValues` that maps an array of field paths to an object where each key corresponds to a field path and each value is the type of the field at that path. It uses a mapped type and the `FieldPathValue` type to achieve this.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldPathValues<TFieldValues extends FieldValues, TPath extends FieldPath<TFieldValues>[] | readonly FieldPath<TFieldValues>[]> = {} & {\n    [K in keyof TPath]: FieldPathValue<TFieldValues, TPath[K] & FieldPath<TFieldValues>>;\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definition: LiteralUnion\nDESCRIPTION: Defines a type `LiteralUnion` which allows a union of a literal type `T` and a primitive type `U`, ensuring that only values of type `T` or `U` are allowed, but allowing `T` to extend `U`. The `_?: never` trick prevents accidental usage of other types that might be assignable to `U`.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport type LiteralUnion<T extends U, U extends Primitive> = T | (U & {{\n    _?: never;\n}});\n```\n\n----------------------------------------\n\nTITLE: Type Definition: IsNever\nDESCRIPTION: Defines a type `IsNever<T>` that checks if a type `T` is `never`. It returns `true` if `T` is `never`, and `false` otherwise.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport type IsNever<T> = [T] extends [never] ? true : false;\n```\n\n----------------------------------------\n\nTITLE: Type Definition: RefCallBack\nDESCRIPTION: Defines a type alias `RefCallBack` as a function that takes an instance of `any` type and returns void.  This is a callback function used to access the reference to a DOM element.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RefCallBack = (instance: any) => void;\n```\n\n----------------------------------------\n\nTITLE: Type Definition: MinType\nDESCRIPTION: Defines a type `MinType` which is a union of the types for `min` and `minLength` from `InputValidationRules`. It likely represents the acceptable types for minimum value or length validation rules.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MinType = InputValidationRules['min'] | InputValidationRules['minLength'];\n```\n\n----------------------------------------\n\nTITLE: Type Definition: IsAny\nDESCRIPTION: Defines a type `IsAny<T>` that checks if a type `T` is `any`. If `T` is `any`, it evaluates to `true`; otherwise, it evaluates to `false`.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport type IsAny<T> = 0 extends 1 & T ? true : false;\n```\n\n----------------------------------------\n\nTITLE: Type Definition: Ref\nDESCRIPTION: Defines a type alias `Ref` as `FieldElement`.  This likely represents a reference to a DOM element associated with a form field.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Ref = FieldElement;\n```\n\n----------------------------------------\n\nTITLE: Type Definition: Primitive\nDESCRIPTION: Defines a type `Primitive` which is a union of JavaScript primitive types: null, undefined, string, number, boolean, symbol, and bigint.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Primitive = null | undefined | string | number | boolean | symbol | bigint;\n```\n\n----------------------------------------\n\nTITLE: Type Definition: InternalFieldErrors\nDESCRIPTION: Defines a type `InternalFieldErrors` as a partial record of internal field names to `FieldError` objects.  This represents the internal structure for storing errors associated with specific fields within the form.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InternalFieldErrors = Partial<Record<InternalFieldName, FieldError>>;\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Types in TypeScript\nDESCRIPTION: This snippet shows the import statements for React components and types used in the react-hook-form library.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSXElementConstructor } from 'react';\nimport { default as React_2 } from 'react';\nimport { ReactElement } from 'react';\n```\n\n----------------------------------------\n\nTITLE: Type Definition: NonUndefined\nDESCRIPTION: Defines a type `NonUndefined<T>` that removes `undefined` from a type `T`. If `T` is `undefined`, it becomes `never`; otherwise, it remains `T`.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NonUndefined<T> = T extends undefined ? never : T;\n```\n\n----------------------------------------\n\nTITLE: Type Definition: Message\nDESCRIPTION: Defines a type alias `Message` as a string. This type represents the error message for form validation.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Message = string;\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the React Hook Form Test App\nDESCRIPTION: Command to install dependencies and start the development server for the React Hook Form testing application. This allows Cypress to access specific routes for automated testing or manual testing via localhost:3000.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/app/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  1. npm i && npm run dev\n```\n\n----------------------------------------\n\nTITLE: Running README Updater Script with Deno\nDESCRIPTION: Shell command to execute the README updater script using Deno. It specifies necessary permissions and imports for reading and writing files.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/scripts/README/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndeno run                                    \\\n    --allow-read                            \\\n    --allow-write                           \\\n    --importmap=scripts/README/Imports.json \\\n    scripts/README/Updater.js\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Versions in Markdown Table\nDESCRIPTION: A markdown table showing the supported versions of React Hook Form for security updates. Versions greater than 7.0 are currently supported.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| > 7.0   | :white_check_mark: |\n```\n\n----------------------------------------\n\nTITLE: Type Definition: Noop\nDESCRIPTION: Defines a type alias `Noop` as a function that takes no arguments and returns nothing (void). This represents a function that performs no operation.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/reports/api-extractor.md#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Noop = () => void;\n```\n\n----------------------------------------\n\nTITLE: Defining Marker Syntax in Markdown\nDESCRIPTION: Demonstrates the syntax for defining markers in the README template. Markers are placed at the start of a line and are used to indicate where dynamic content should be inserted.\nSOURCE: https://github.com/react-hook-form/react-hook-form/blob/master/scripts/README/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n~Marker_Id\n```"
  }
]