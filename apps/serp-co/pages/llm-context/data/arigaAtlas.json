[
  {
    "owner": "ariga",
    "repo": "atlas",
    "content": "TITLE: Start Docker Containers for Integration Tests\nDESCRIPTION: This command starts the Docker containers defined in the `docker-compose.yaml` file. These containers are used as the database environments for the integration tests. The `-d` flag runs the containers in detached mode.\nSOURCE: https://github.com/ariga/atlas/blob/master/internal/integration/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose --project-name atlas-integration up -d\n```\n\n----------------------------------------\n\nTITLE: Generating SQLite Parser with ANTLR4 in Go\nDESCRIPTION: This bash command uses ANTLR4 to generate a SQLite parser and lexer in Go. It specifies the target language as Go, sets the package name to `sqliteparse`, and generates visitor interfaces. The generated files are then renamed and moved, and intermediate files are removed.\nSOURCE: https://github.com/ariga/atlas/blob/master/cmd/atlas/internal/sqlparse/sqliteparse/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nantlr4 -Dlanguage=Go -package sqliteparse -visitor Lexer.g4 Parser.g4 \\\n  && mv _lexer.go lexer.go \\\n  && mv _parser.go parser.go \\\n  && rm *.interp *.tokens\n```\n\n----------------------------------------\n\nTITLE: Querying Collations to Charsets - SQL\nDESCRIPTION: This SQL query retrieves a JSON object mapping collation names to character set names from the `information_schema.collations` table.  It aggregates the collation and character set names into a single JSON object. Requires access to the `information_schema` database.\nSOURCE: https://github.com/ariga/atlas/blob/master/sql/mysql/internal/mysqlversion/is/.README.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect json_objectagg(collation_name, character_set_name) from information_schema.collations\\G;\n```\n\n----------------------------------------\n\nTITLE: Querying Charsets to Default Collations - SQL\nDESCRIPTION: This SQL query retrieves a JSON object mapping character set names to their default collation names from the `information_schema.character_sets` table. It aggregates character set and default collation names into a single JSON object. Requires access to the `information_schema` database.\nSOURCE: https://github.com/ariga/atlas/blob/master/sql/mysql/internal/mysqlversion/is/.README.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nselect json_objectagg(character_set_name, default_collate_name) from information_schema.character_sets\\G;\n```\n\n----------------------------------------\n\nTITLE: Run Entire Integration Test Suite\nDESCRIPTION: This command executes all Go tests within the current directory and its subdirectories. It's used to run the complete integration test suite for the Atlas project. It requires the necessary database Docker containers to be running.\nSOURCE: https://github.com/ariga/atlas/blob/master/internal/integration/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Run Specific Test for All MySQL Versions\nDESCRIPTION: This command runs the `TestMySQL_Executor` test function for all available MySQL versions. The `-run` flag specifies the test name to execute, and `./...` indicates that the test should be searched within the current directory and subdirectories.\nSOURCE: https://github.com/ariga/atlas/blob/master/internal/integration/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo test -run='MySQL_Executor' ./...\n```\n\n----------------------------------------\n\nTITLE: Run Specific Test for All Postgres Versions\nDESCRIPTION: This command runs the `TestPostgres_Executor` test function for all available Postgres versions.  The `-run` flag specifies the test name to execute, and `./...` indicates that the test should be searched within the current directory and subdirectories.\nSOURCE: https://github.com/ariga/atlas/blob/master/internal/integration/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo test -run='Postgres_Executor' ./...\n```\n\n----------------------------------------\n\nTITLE: Run Specific Test for MySQL 5.6\nDESCRIPTION: This command runs the `TestMySQL_Executor` test function specifically for MySQL version 5.6.  The `-run` flag includes the dialect name ('mysql56') to target a specific version. The `docker-compose` should have mysql 5.6 running.\nSOURCE: https://github.com/ariga/atlas/blob/master/internal/integration/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo test -run='MySQL_Executor/mysql56' ./...\n```\n\n----------------------------------------\n\nTITLE: Run Specific Test for Postgres 10\nDESCRIPTION: This command runs the `TestPostgres_Executor` test function specifically for Postgres version 10.  The `-run` flag includes the dialect name ('postgres10') to target a specific version. The `docker-compose` should have postgres 10 running.\nSOURCE: https://github.com/ariga/atlas/blob/master/internal/integration/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo test -run='Postgres_Executor/postgres10' ./...\n```\n\n----------------------------------------\n\nTITLE: Run All Tests for TiDB 5\nDESCRIPTION: This command executes all tests related to TiDB 5. The `-run='TiDB'` flag filters tests by name, and the `-dialect='tidb5'` flag specifies the TiDB version to use for the tests. This assumes there are tests prefixed with 'TiDB'.\nSOURCE: https://github.com/ariga/atlas/blob/master/internal/integration/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngo test -run='TiDB' -dialect='tidb5' ./...\n```\n\n----------------------------------------\n\nTITLE: Example Go Test Function\nDESCRIPTION: This is an example of a Go test function for MySQL. It uses the `myRun` helper function to execute the `testExecutor` function within a specific test context. This snippet shows the structure of the integration tests.\nSOURCE: https://github.com/ariga/atlas/blob/master/internal/integration/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc TestMySQL_Executor(t *testing.T) {\n\tmyRun(t, func(t *myTest) {\n\t\ttestExecutor(t)\n\t})\n}\n```"
  }
]