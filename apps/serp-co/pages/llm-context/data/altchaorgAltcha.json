[
  {
    "owner": "altcha-org",
    "repo": "altcha",
    "content": "TITLE: Implementing ALTCHA Widget in HTML Form\nDESCRIPTION: HTML code demonstrating how to use the ALTCHA widget tag within a form.\nSOURCE: https://github.com/altcha-org/altcha/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <altcha-widget\n    challengeurl=\"https://...\"\n  ></altcha-widget>  \n</form>\n```\n\n----------------------------------------\n\nTITLE: Installing ALTCHA via npm\nDESCRIPTION: Command to install ALTCHA package using npm package manager.\nSOURCE: https://github.com/altcha-org/altcha/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install altcha\n```\n\n----------------------------------------\n\nTITLE: Including ALTCHA via Script Tag\nDESCRIPTION: HTML code to include the ALTCHA script using a script tag in a web page.\nSOURCE: https://github.com/altcha-org/altcha/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script async defer src=\"/altcha.js\" type=\"module\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring ALTCHA Widget Programmatically\nDESCRIPTION: TypeScript code showing how to configure the ALTCHA widget programmatically using the configure() method.\nSOURCE: https://github.com/altcha-org/altcha/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\ndocument.querySelector('#altcha').configure({\n  challenge: {\n    algorithm: 'SHA-256',\n    challenge: '...',\n    salt: '...',\n    signature: '...',\n  },\n  strings: {\n    label: 'Verify',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing ALTCHA in JavaScript\nDESCRIPTION: JavaScript code to import the ALTCHA module in the main file of a project.\nSOURCE: https://github.com/altcha-org/altcha/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport 'altcha';\n```\n\n----------------------------------------\n\nTITLE: Implementing ALTCHA Widget with Custom Fetch in HTML\nDESCRIPTION: HTML implementation of the ALTCHA widget that uses a custom fetch function named 'altchaCustomFetch' to handle challenge requests.\nSOURCE: https://github.com/altcha-org/altcha/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<altcha-widget\n  challengeurl=\"https://example.com/challenge\"\n  customfetch=\"altchaCustomFetch\"\n></altcha-widget>\n```\n\n----------------------------------------\n\nTITLE: Event Handling for ALTCHA Widget in JavaScript\nDESCRIPTION: Example of how to attach an event listener to the ALTCHA widget to monitor state changes.\nSOURCE: https://github.com/altcha-org/altcha/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\ndocument.querySelector('#altcha').addEventListener('statechange', (ev) => {\n  // See enum State above\n  console.log('state:', ev.detail.state);\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Fetch Function with Credentials in TypeScript\nDESCRIPTION: A custom fetch function implementation that includes cookies in requests to the ALTCHA challenge server by setting the credentials option to 'include'.\nSOURCE: https://github.com/altcha-org/altcha/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nfunction altchaCustomFetch(url: string, init: RequestInit) {\n  return fetch(url, {\n    ...init,\n    credentials: 'include', // Include cookies with the request\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: ALTCHA Configuration Interface Definition\nDESCRIPTION: TypeScript interface defining the available configuration options for the ALTCHA widget.\nSOURCE: https://github.com/altcha-org/altcha/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nexport interface Configure {\n  auto?: 'off' | 'onfocus' | 'onload' | 'onsubmit';\n  challenge?: {\n    algorithm: string;\n    challenge: string;\n    maxnumber?: number;\n    salt: string;\n    signature: string;\n  };\n  challengeurl?: string;\n  customfetch?: string | ((url: string, init?: RequestInit) => Promise<Response>);\n  debug?: boolean;\n  delay?: number;\n  expire?: number;\n  floating?: 'auto' | 'top' | 'bottom';\n  floatinganchor?: string;\n  floatingoffset?: number;\n  floatingpersist?: boolean | 'focus';\n  hidefooter?: boolean;\n  hidelogo?: boolean;\n  maxnumber?: number;\n  mockerror?: boolean;\n  name?: string;\n  obfuscated?: string;\n  refetchonexpire?: boolean;\n  spamfilter?: boolean | 'ipAddress' | SpamFilter;\n  strings?: {\n    error: string;\n    expired: string;\n    footer: string;\n    label: string;\n    verified: string;\n    verifying: string;\n    waitAlert: string;\n  }\n  test?: boolean | number | 'delay';\n  verifyurl?: string;\n  workers?: number;\n  workerurl?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Spam Filter Configuration Interface for ALTCHA\nDESCRIPTION: TypeScript interface defining the configuration options for the ALTCHA Spam Filter, including country blocking, language settings, and field validation.\nSOURCE: https://github.com/altcha-org/altcha/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\ninterface SpamFilter {\n  blockedCountries?: string[];\n  classifier?: string;\n  disableRules?: string[];\n  email?: string | false;\n  expectedCountries?: string[];\n  expectedLanguages?: string[];\n  fields?: string[] | false;\n  ipAddress?: string | false;\n  text?: string | string[];\n  timeZone?: string | false;\n}\n```\n\n----------------------------------------\n\nTITLE: ALTCHA Widget State Enumeration\nDESCRIPTION: TypeScript enumeration of possible states for the ALTCHA widget, used in the statechange event.\nSOURCE: https://github.com/altcha-org/altcha/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nenum State {\n  ERROR = 'error',\n  VERIFIED = 'verified',\n  VERIFYING = 'verifying',\n  UNVERIFIED = 'unverified',\n  EXPIRED = 'expired',\n};\n```\n\n----------------------------------------\n\nTITLE: PGP Public Key for Secure Communication with ALTCHA Security Team\nDESCRIPTION: This PGP public key should be used to encrypt sensitive security-related communications sent to the ALTCHA security team. It ensures that vulnerability reports and other security information are transmitted securely.\nSOURCE: https://github.com/altcha-org/altcha/blob/main/SECURITY.md#2025-04-23_snippet_0\n\nLANGUAGE: pgp\nCODE:\n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nxjMEZtI2nxYJKwYBBAHaRw8BAQdA/RsvtqhwBMzb2lVbYgJ8jfbtOSW6X1Ju\neJGrTnc/w7rNKXNlY3VyaXR5QGFsdGNoYS5vcmcgPHNlY3VyaXR5QGFsdGNo\nYS5vcmc+wowEEBYKAD4FgmbSNp8ECwkHCAmQQ77nSDCYPoIDFQgKBBYAAgEC\nGQECmwMCHgEWIQTjdfm4rd39SCeb0WpDvudIMJg+ggAAQBYA/AhHznOMm5zg\nL5NVtbEaVzjlGQgq935Ieg7i0ts/ulvSAQCifZduBr9W2Rlev2x4MIaN8PBY\neq/UQjyDIoi3s+bBAM44BGbSNp8SCisGAQQBl1UBBQEBB0DMbZpWAHLF9W2y\nsFoTHPv0/9wBmd5HQHDFo30pYv6GGAMBCAfCeAQYFgoAKgWCZtI2nwmQQ77n\nSDCYPoICmwwWIQTjdfm4rd39SCeb0WpDvudIMJg+ggAAB2gA/RCLvMElWMP3\nXb/GVjlYMKM+lP/+Vp6pEPp+oCfb5gg+AP9sTajrdA2GBv6Sc28/GZcbGEX2\nOlJjTSxs11Oj8es+Bg==\n=kb//\n-----END PGP PUBLIC KEY BLOCK-----\n```"
  }
]