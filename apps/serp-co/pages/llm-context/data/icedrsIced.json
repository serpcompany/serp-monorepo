[
  {
    "owner": "iced-rs",
    "repo": "iced",
    "content": "TITLE: Running Iced GUI Application in Rust\nDESCRIPTION: Demonstrates how to run an Iced GUI application. It uses the iced::run function, passing the application title, update function, and view function.\nSOURCE: https://github.com/iced-rs/iced/blob/master/README.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nfn main() -> iced::Result {\n    iced::run(\"A cool counter\", Counter::update, Counter::view)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Logic for Iced Counter Application\nDESCRIPTION: This code implements the update logic for the counter application. It handles the Increment and Decrement messages by updating the counter value accordingly. This demonstrates how to react to user interactions in Iced.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/markdown/overview.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nimpl Counter {\n    // ...\n\n    pub fn update(&mut self, message: Message) {\n        match message {\n            Message::Increment => {\n                self.value += 1;\n            }\n            Message::Decrement => {\n                self.value -= 1;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Logic in Rust for Iced GUI Counter\nDESCRIPTION: Implements the update logic for a counter application using Iced. It handles increment and decrement messages to modify the counter value.\nSOURCE: https://github.com/iced-rs/iced/blob/master/README.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nimpl Counter {\n    // ...\n\n    pub fn update(&mut self, message: Message) {\n        match message {\n            Message::Increment => {\n                self.value += 1;\n            }\n            Message::Increment => {\n                self.value -= 1;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing View Logic in Rust for Iced GUI Counter\nDESCRIPTION: Implements the view logic for a counter application using Iced. It creates a column layout with increment/decrement buttons and displays the counter value.\nSOURCE: https://github.com/iced-rs/iced/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse iced::widget::{button, column, text, Column};\n\nimpl Counter {\n    pub fn view(&self) -> Column<Message> {\n        // We use a column: a simple vertical layout\n        column![\n            // The increment button. We tell it to produce an\n            // `Increment` message when pressed\n            button(\"+\").on_press(Message::Increment),\n\n            // We show the value of the counter here\n            text(self.value).size(50),\n\n            // The decrement button. We tell it to produce a\n            // `Decrement` message when pressed\n            button(\"-\").on_press(Message::Decrement),\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Enum for User Interactions in Iced\nDESCRIPTION: This code defines an enum for possible user interactions (increment and decrement) in the counter application. It shows how to model messages in Iced for handling user input.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/markdown/overview.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Clone, Copy)]\npub enum Message {\n    Increment,\n    Decrement,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Enum in Rust for Iced GUI Counter\nDESCRIPTION: Defines a Message enum to represent possible user interactions (increment and decrement) for a counter application in Iced.\nSOURCE: https://github.com/iced-rs/iced/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Clone, Copy)]\npub enum Message {\n    Increment,\n    Decrement,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing View Logic for Iced Counter Application\nDESCRIPTION: This snippet implements the view logic for the counter application. It creates a column layout with increment and decrement buttons, and displays the current counter value. It demonstrates how to construct the UI using Iced widgets.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/markdown/overview.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse iced::widget::{button, column, text, Column};\n\nimpl Counter {\n    pub fn view(&self) -> Column<Message> {\n        // We use a column: a simple vertical layout\n        column![\n            // The increment button. We tell it to produce an\n            // `Increment` message when pressed\n            button(\"+\").on_press(Message::Increment),\n\n            // We show the value of the counter here\n            text(self.value).size(50),\n\n            // The decrement button. We tell it to produce a\n            // `Decrement` message when pressed\n            button(\"-\").on_press(Message::Decrement),\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Application State in Rust for Iced Counter\nDESCRIPTION: This snippet defines the state of a counter application using a struct with a single integer value. It demonstrates how to model the application state in Iced.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/markdown/overview.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Default)]\nstruct Counter {\n    value: i32,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining State Structure in Rust for Iced GUI Counter\nDESCRIPTION: Defines a Counter struct to represent the state of a simple counter application in Iced. The struct has a single field 'value' of type i32.\nSOURCE: https://github.com/iced-rs/iced/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Default)]\nstruct Counter {\n    value: i32,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Iced Application with Main Function\nDESCRIPTION: This snippet shows the main function to run the Iced application. It uses the iced::run function, passing the application title, update function, and view function. This demonstrates how to start an Iced application.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/markdown/overview.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nfn main() -> iced::Result {\n    iced::run(\"A cool counter\", Counter::update, Counter::view)\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Tour Example with Cargo in Iced\nDESCRIPTION: Command to run the 'tour' example application which demonstrates various widgets available in the Iced UI framework. This example can run on both native platforms and the web.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package tour\n```\n\n----------------------------------------\n\nTITLE: Running Any Example Package with Cargo in Iced\nDESCRIPTION: Generic command to run any of the additional example applications that are packaged in their own crates, such as bezier_tool, clock, counter, etc.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/README.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package <example>\n```\n\n----------------------------------------\n\nTITLE: Running the Tour Example on Native Platforms with Cargo\nDESCRIPTION: Command to run the native version of the Tour example using Cargo. This will build and execute the example as a desktop application.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/tour/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package tour\n```\n\n----------------------------------------\n\nTITLE: Running the Native Todos Application with Cargo\nDESCRIPTION: Command to run the native version of the todos application using Cargo, Rust's package manager and build system.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/todos/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --package todos\n```\n\n----------------------------------------\n\nTITLE: Running the Todos Example with Cargo in Iced\nDESCRIPTION: Command to run the 'todos' example application which is a TodoMVC-inspired task tracker that demonstrates dynamic layout, text input, checkboxes, and async capabilities.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package todos\n```\n\n----------------------------------------\n\nTITLE: Running Game of Life Application with Cargo\nDESCRIPTION: Command to build and run the Game of Life implementation using Cargo package manager.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/game_of_life/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package game_of_life\n```\n\n----------------------------------------\n\nTITLE: Running the Game of Life Example with Cargo in Iced\nDESCRIPTION: Command to run the 'game_of_life' example which implements Conway's Game of Life with simulation in a background thread and an interactive canvas with zooming and panning.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package game_of_life\n```\n\n----------------------------------------\n\nTITLE: Running the Tour Example as a Web Application with Trunk\nDESCRIPTION: Commands to run the web version of the Tour example using Trunk, a WASM web application bundler for Rust. This builds and serves the example as a web application.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/tour/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/tour\ntrunk serve\n```\n\n----------------------------------------\n\nTITLE: Running the Web Version of Todos Application with Trunk\nDESCRIPTION: Commands to navigate to the todos example directory and serve the web version using Trunk, a WASM web application bundler for Rust.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/todos/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/todos\ntrunk serve\n```\n\n----------------------------------------\n\nTITLE: Running the Styling Example with Cargo\nDESCRIPTION: Command to run the styling example application using Cargo. This will build and execute the styling package which demonstrates custom theme implementation in Iced.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/styling/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --package styling\n```\n\n----------------------------------------\n\nTITLE: Running the Styling Example with Cargo in Iced\nDESCRIPTION: Command to run the 'styling' example which showcases custom styling capabilities in Iced with implementations of light and dark themes.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/README.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package styling\n```\n\n----------------------------------------\n\nTITLE: Running Custom Widget Example with Cargo\nDESCRIPTION: Command to run the custom widget example using Cargo package manager. This executes the custom_widget package which contains the circle drawing implementation.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/custom_widget/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package custom_widget\n```\n\n----------------------------------------\n\nTITLE: Running the Scrollable Example with Cargo\nDESCRIPTION: Command to execute the scrollable component example using Cargo. This command will build and run the scrollable package which demonstrates various size and style options of the Scrollable component.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/scrollable/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --package scrollable\n```\n\n----------------------------------------\n\nTITLE: Running the Bézier Tool Example with Cargo\nDESCRIPTION: Command to run the Bézier curve drawing tool example using Cargo. This will build and execute the example application that demonstrates Canvas widget usage for drawing Bézier curves.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/bezier_tool/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package bezier_tool\n```\n\n----------------------------------------\n\nTITLE: Running the WGPU Integration Example with Cargo\nDESCRIPTION: Command to run the integration example that demonstrates how to integrate Iced with an existing WGPU application.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/integration/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package integration\n```\n\n----------------------------------------\n\nTITLE: Running the Clock Application with Cargo\nDESCRIPTION: Command to run the clock application example using Cargo, the Rust package manager and build system.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/clock/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package clock\n```\n\n----------------------------------------\n\nTITLE: Running Color Palette Generator with Cargo\nDESCRIPTION: Command to build and run the color palette generator example application using Cargo package manager\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/color_palette/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package color_palette\n```\n\n----------------------------------------\n\nTITLE: Running Pane Grid Example with Cargo in Rust\nDESCRIPTION: Command to run the pane grid example using Cargo, the Rust package manager. This command executes the example project demonstrating the PaneGrid widget functionality.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/pane_grid/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package pane_grid\n```\n\n----------------------------------------\n\nTITLE: Running the Download Progress Example with Cargo in Rust\nDESCRIPTION: Command to execute the download progress example application using Cargo, Rust's package manager and build system.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/download_progress/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package download_progress\n```\n\n----------------------------------------\n\nTITLE: Running the Solar System Example with Cargo\nDESCRIPTION: Command to run the solar system animation example using Cargo. This executes the project contained in the solar_system package.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/solar_system/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --package solar_system\n```\n\n----------------------------------------\n\nTITLE: Running the SVG Example with Cargo\nDESCRIPTION: Command to run the SVG rendering example application using Cargo, Rust's package manager and build system.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/svg/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --package svg\n```\n\n----------------------------------------\n\nTITLE: Running Pick-list Example with Cargo\nDESCRIPTION: Command to execute the pick-list example using Cargo package manager\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/pick_list/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package pick_list\n```\n\n----------------------------------------\n\nTITLE: Running Counter Example with Cargo\nDESCRIPTION: Command to run the native version of the Counter example using Cargo.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/counter/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --package counter\n```\n\n----------------------------------------\n\nTITLE: Running the Combo-Box Example with Cargo\nDESCRIPTION: Command to run the combo-box example from the Iced framework using Cargo. This will execute the code located in the main.rs file of the combo_box package.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/combo_box/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --package combo_box\n```\n\n----------------------------------------\n\nTITLE: Running the WebSocket Example with Cargo\nDESCRIPTION: Command to execute the WebSocket example application using Cargo. This will start both the WebSocket client and server implementations.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/websocket/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package websocket\n```\n\n----------------------------------------\n\nTITLE: Running Iced Events Example with Cargo\nDESCRIPTION: Command to run the events example package using Cargo build system. The example demonstrates event logging functionality.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/events/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package events\n```\n\n----------------------------------------\n\nTITLE: Running Checkbox Example with Cargo in Rust\nDESCRIPTION: This command runs the checkbox example using Cargo, Rust's package manager and build system. It specifies the package name 'checkbox' to run the correct example.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/checkbox/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package checkbox\n```\n\n----------------------------------------\n\nTITLE: Running the Progress Bar Example with Cargo\nDESCRIPTION: This command runs the progress bar example using Cargo, Rust's package manager and build system. It specifically targets the 'progress_bar' package.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/progress_bar/README.md#2025-04-20_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncargo run --package progress_bar\n```\n\n----------------------------------------\n\nTITLE: Running the Tooltip Example with Cargo\nDESCRIPTION: Command for running the tooltip example using Cargo. This allows users to execute the example and see the tooltip functionality in action.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/tooltip/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package tooltip\n```\n\n----------------------------------------\n\nTITLE: Running the QR Code Generator Example with Cargo\nDESCRIPTION: Command to run the QR code generator example using cargo. This launches the example application which demonstrates the `QRCode` widget in Iced.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/qr_code/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package qr_code\n```\n\n----------------------------------------\n\nTITLE: Running the Stopwatch Example with Cargo\nDESCRIPTION: Command to run the stopwatch example application using cargo. This will build and execute the stopwatch example package.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/stopwatch/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package stopwatch\n```\n\n----------------------------------------\n\nTITLE: Running the Pokédex Application with Cargo\nDESCRIPTION: This command uses Cargo to run the Pokédex application on native platforms. It specifies the package name to ensure the correct application is executed.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/pokedex/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package pokedex\n```\n\n----------------------------------------\n\nTITLE: Running the Slider Example in Iced UI Framework\nDESCRIPTION: Command to run the slider example from the Iced UI framework using Cargo. This will launch the slider demonstration application.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/slider/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package slider\n```\n\n----------------------------------------\n\nTITLE: Running Counter Example on Web with Trunk\nDESCRIPTION: Commands to navigate to the Counter example directory and serve the web version using Trunk.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/counter/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/counter\ntrunk serve\n```\n\n----------------------------------------\n\nTITLE: Running Geometry Example in Iced\nDESCRIPTION: Command to run the geometry drawing example using Cargo package manager. This executes the example that demonstrates Mesh2D usage for geometric shape rendering.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/geometry/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package geometry\n```\n\n----------------------------------------\n\nTITLE: Running the Arc Example with Cargo\nDESCRIPTION: Command to run the arc example application from the Iced library. This builds and executes the example that demonstrates a rotating arc drawn using the Canvas widget.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/arc/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package arc\n```\n\n----------------------------------------\n\nTITLE: Running the Iced Exit Example with Cargo\nDESCRIPTION: Command to run the exit example application with Cargo. This executes the specified package which demonstrates exiting an Iced application based on user input.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/exit/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package exit\n```\n\n----------------------------------------\n\nTITLE: Running the Loading Spinners Example with Cargo\nDESCRIPTION: Command to run the loading spinners example from the Iced repository. This will execute the example showing animated indeterminate loading spinners implemented in the Iced Rust GUI library.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/loading_spinners/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package loading_spinners\n```\n\n----------------------------------------\n\nTITLE: Running Sierpinski Triangle Emulator using Cargo\nDESCRIPTION: This command runs the Sierpinski Triangle Emulator project using Cargo, the Rust package manager and build system. It specifically targets the 'sierpinski_triangle' package within the project.\nSOURCE: https://github.com/iced-rs/iced/blob/master/examples/sierpinski_triangle/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package sierpinski_triangle\n```\n\n----------------------------------------\n\nTITLE: Configuring Iced Dependencies with shell.nix for NixOS\nDESCRIPTION: This Nix configuration sets up a development environment with necessary system dependencies for Iced. It includes libraries for graphics, font rendering, and windowing systems. The LD_LIBRARY_PATH is configured to include all required library paths.\nSOURCE: https://github.com/iced-rs/iced/blob/master/DEPENDENCIES.md#2025-04-20_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs ? import <nixpkgs> {} }:\n\npkgs.mkShell rec {\n  buildInputs = with pkgs; [\n    expat\n    fontconfig\n    freetype\n    freetype.dev\n    libGL\n    pkg-config\n    xorg.libX11\n    xorg.libXcursor\n    xorg.libXi\n    xorg.libXrandr\n    wayland\n    libxkbcommon\n  ];\n\n  LD_LIBRARY_PATH =\n    builtins.foldl' (a: b: \"${a}:${b}/lib\") \"${pkgs.vulkan-loader}/lib\" buildInputs;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Iced Dependencies with flake.nix for NixOS\nDESCRIPTION: This Nix flake configuration creates a development shell with the necessary system dependencies for Iced. It uses flake-utils for multi-system support and includes libraries for graphics, font rendering, and windowing systems. The LD_LIBRARY_PATH is set up to include all required library paths.\nSOURCE: https://github.com/iced-rs/iced/blob/master/DEPENDENCIES.md#2025-04-20_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{\n  inputs = {\n    nixpkgs.url = \"nixpkgs/nixos-unstable\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n  };\n\n  outputs = {\n    nixpkgs,\n    flake-utils,\n    ...\n  }:\n    flake-utils.lib.eachDefaultSystem (\n      system: let\n        pkgs = import nixpkgs {\n          inherit system;\n        };\n\n        buildInputs = with pkgs; [\n          expat\n          fontconfig\n          freetype\n          freetype.dev\n          libGL\n          pkg-config\n          xorg.libX11\n          xorg.libXcursor\n          xorg.libXi\n          xorg.libXrandr\n          wayland\n          libxkbcommon\n        ];\n      in {\n        devShells.default = pkgs.mkShell {\n          inherit buildInputs;\n\n          LD_LIBRARY_PATH =\n            builtins.foldl' (a: b: \"${a}:${b}/lib\") \"${pkgs.vulkan-loader}/lib\" buildInputs;\n        };\n      }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Version 0.13.0 Release Notes in Markdown\nDESCRIPTION: Extensive release notes for version 0.13.0 listing major feature additions and improvements to the framework.\nSOURCE: https://github.com/iced-rs/iced/blob/master/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.13.0] - 2024-09-18\n### Added\n- Introductory chapters to the [official guide book](https://book.iced.rs/).\n- [Pocket guide](https://docs.rs/iced/0.13.0/iced/#the-pocket-guide) in API reference.\n[... extensive list of additions ...]\n```\n\n----------------------------------------\n\nTITLE: Version 0.13.1 Release Notes in Markdown\nDESCRIPTION: Release notes for version 0.13.1 documenting added features and bug fixes, including contributor acknowledgments.\nSOURCE: https://github.com/iced-rs/iced/blob/master/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.13.1] - 2024-09-19\n### Added\n- Some `From` trait implementations for `text_input::Id`. [#2582](https://github.com/iced-rs/iced/pull/2582)\n- Custom `Executor` support for `Application` and `Daemon`. [#2580](https://github.com/iced-rs/iced/pull/2580)\n- `rust-version` metadata to `Cargo.toml`. [#2579](https://github.com/iced-rs/iced/pull/2579)\n- Widget examples to API reference. [#2587](https://github.com/iced-rs/iced/pull/2587)\n\n### Fixed\n- Inverted scrolling direction with trackpad in `scrollable`. [#2583](https://github.com/iced-rs/iced/pull/2583)\n- `scrollable` transactions when `on_scroll` is not set. [#2584](https://github.com/iced-rs/iced/pull/2584)\n- Incorrect text color styling in `text_editor` widget. [#2586](https://github.com/iced-rs/iced/pull/2586)\n\nMany thanks to...\n- @dcampbell24\n- @lufte\n- @mtkennerly\n```\n\n----------------------------------------\n\nTITLE: Linking to Iced Roadmap in Markdown\nDESCRIPTION: This snippet provides a Markdown link to the detailed graphical roadmap for the Iced Rust framework. It uses a standard Markdown link format to direct users to an external Whimsical board containing the roadmap information.\nSOURCE: https://github.com/iced-rs/iced/blob/master/ROADMAP.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Roadmap\nWe have [a detailed graphical roadmap now](https://whimsical.com/roadmap-iced-7vhq6R35Lp3TmYH4WeYwLM)!\n```\n\n----------------------------------------\n\nTITLE: Changelog Header Section in Markdown\nDESCRIPTION: Standard changelog header section following Keep a Changelog format and Semantic Versioning guidelines.\nSOURCE: https://github.com/iced-rs/iced/blob/master/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n```"
  }
]