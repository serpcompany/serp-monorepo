[
  {
    "owner": "honojs",
    "repo": "honox",
    "content": "TITLE: Creating a New HonoX Project\nDESCRIPTION: Command to create a new HonoX project using the hono-create CLI tool, with instructions to select the x-basic template.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nnpm create hono@latest\n```\n\n----------------------------------------\n\nTITLE: Typical HonoX Project Structure\nDESCRIPTION: Directory structure for a HonoX application showing file organization, routing conventions, and naming patterns.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── app\n│   ├── global.d.ts // global type definitions\n│   ├── routes\n│   │   ├── _404.tsx // not found page\n│   │   ├── _error.tsx // error page\n│   │   ├── _renderer.tsx // renderer definition\n│   │   ├── merch\n│   │   │   └── [...slug].tsx // matches `/merch/:category`, `/merch/:category/:item`, `/merch/:category/:item/:variant`\n│   │   ├── about\n│   │   │   └── [name].tsx // matches `/about/:name`\n│   │   ├── blog\n│   │   │   ├── index.tsx // matches /blog\n│   │   │   └── (content)\n│   │   │       ├── _renderer.tsx // renderer definition for routes inside this directory\n│   │   │       └── [name].tsx    // matches `/blog/:name`\n│   │   └── index.tsx // matches `/`\n│   └── server.ts // server entry file\n├── package.json\n├── tsconfig.json\n└── vite.config.ts\n```\n\n----------------------------------------\n\nTITLE: Installing HonoX via NPM\nDESCRIPTION: Command to install the HonoX framework and its core dependency Hono via NPM.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nnpm install hono honox\n```\n\n----------------------------------------\n\nTITLE: Creating a HonoX Server Entry File\nDESCRIPTION: Server entry file that initializes a HonoX application using createApp() and displays available routes using Hono's showRoutes() utility.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// app/server.ts\nimport { createApp } from 'honox/server'\nimport { showRoutes } from 'hono/dev'\n\nconst app = createApp()\n\nshowRoutes(app)\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for HonoX\nDESCRIPTION: Minimal Vite configuration setup for HonoX development, importing and using the HonoX plugin.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport honox from 'honox/vite'\n\nexport default defineConfig({\n  plugins: [honox()],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with createRoute() in HonoX\nDESCRIPTION: Example of creating a route handler using createRoute() helper function to respond to GET requests with JSX content.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/index.tsx\n// `createRoute()` helps you create handlers\nimport { createRoute } from 'honox/factory'\n\nexport default createRoute((c) => {\n  return c.render(\n    <div>\n      <h1>Hello!</h1>\n    </div>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Simplified JSX Route Definition in HonoX\nDESCRIPTION: The simplest way to define a route by just returning JSX without using createRoute() or Hono instance.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/index.tsx\nexport default function Home(_c: Context) {\n  return <h1>Welcome!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Endpoints with Hono Instance in HonoX\nDESCRIPTION: Defining API endpoints by exporting a Hono instance for dynamic parameter handling and JSON responses.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// app/routes/about/index.ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\n// matches `/about/:name`\napp.get('/:name', (c) => {\n  const name = c.req.param('name')\n  return c.json({\n    'your name is': name,\n  })\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple HTTP Methods in HonoX Routes\nDESCRIPTION: Route definition showing how to handle different HTTP methods (GET and POST) in the same file using exports and cookie handling.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/index.tsx\nimport { createRoute } from 'honox/factory'\nimport { getCookie, setCookie } from 'hono/cookie'\n\nexport const POST = createRoute(async (c) => {\n  const { name } = await c.req.parseBody<{ name: string }>()\n  setCookie(c, 'name', name)\n  return c.redirect('/')\n})\n\nexport default createRoute((c) => {\n  const name = getCookie(c, 'name') ?? 'no name'\n  return c.render(\n    <div>\n      <h1>Hello, {name}!</h1>\n      <form method='POST'>\n        <input type='text' name='name' placeholder='name' />\n        <input type='submit' />\n      </form>\n    </div>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Counter Component in HonoX\nDESCRIPTION: Example of an Island component implementing a basic counter with state management using useState hook\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n// app/islands/counter.tsx\nimport { useState } from 'hono/jsx'\n\nexport default function Counter() {\n  const [count, setCount] = useState(0)\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Route with Island Component\nDESCRIPTION: Example of how to integrate an Island component into a route file with server-side rendering\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/index.tsx\nimport { createRoute } from 'honox/factory'\nimport Counter from '../islands/counter'\n\nexport default createRoute((c) => {\n  return c.render(\n    <div>\n      <h1>Hello</h1>\n      <Counter />\n    </div>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Client-Side Project Structure in HonoX\nDESCRIPTION: Directory structure for a HonoX application with client-side functionality, including islands architecture.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── app\n│   ├── client.ts // client entry file\n│   ├── global.d.ts\n│   ├── islands\n│   │   └── counter.tsx // island component\n│   ├── routes\n│   │   ├── _renderer.tsx\n│   │   └── index.tsx\n│   └── server.ts\n├── package.json\n├── tsconfig.json\n└── vite.config.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a JSX Renderer in HonoX\nDESCRIPTION: Defining a JSX renderer using Hono's jsxRenderer middleware to create an HTML structure for rendering content.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/_renderer.tsx\nimport { jsxRenderer } from 'hono/jsx-renderer'\n\nexport default jsxRenderer(({ children, title }) => {\n  return (\n    <html lang='en'>\n      <head>\n        <meta charset='UTF-8' />\n        <meta name='viewport' content='width=device-width, initial-scale=1.0' />\n        {title ? <title>{title}</title> : <></>}\n      </head>\n      <body>{children}</body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Client Entry File for HonoX\nDESCRIPTION: Minimal client-side entry point for HonoX that initializes client functionality for interactive components.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// app/client.ts\nimport { createClient } from 'honox/client'\n\ncreateClient()\n```\n\n----------------------------------------\n\nTITLE: Client-side Hydration Setup\nDESCRIPTION: Configuration for client-side hydration with React in HonoX\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\n// app/client.ts\nimport { createClient } from 'honox/client'\n\ncreateClient({\n  hydrate: async (elem, root) => {\n    const { hydrateRoot } = await import('react-dom/client')\n    hydrateRoot(root, elem)\n  },\n  createElement: async (type: any, props: any) => {\n    const { createElement } = await import('react')\n    return createElement(type, props)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Custom 404 Not Found Page in HonoX\nDESCRIPTION: Creating a custom 404 Not Found page handler that renders JSX when a route is not found.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/_404.tsx\nimport { NotFoundHandler } from 'hono'\n\nconst handler: NotFoundHandler = (c) => {\n  return c.render(<h1>Sorry, Not Found...</h1>)\n}\n\nexport default handler\n```\n\n----------------------------------------\n\nTITLE: Custom Error Page Handler in HonoX\nDESCRIPTION: Defining a custom error handler that renders JSX with error information when exceptions occur.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/_error.tsx\nimport { ErrorHandler } from 'hono'\n\nconst handler: ErrorHandler = (e, c) => {\n  return c.render(<h1>Error! {e.message}</h1>)\n}\n\nexport default handler\n```\n\n----------------------------------------\n\nTITLE: Renderer with Client-Side Script Support in HonoX\nDESCRIPTION: JSX renderer that conditionally includes client-side JavaScript based on the environment and island components presence.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/_renderer.tsx\nimport { jsxRenderer } from 'hono/jsx-renderer'\nimport { HasIslands } from 'honox/server'\n\nexport default jsxRenderer(({ children }) => {\n  return (\n    <html lang='en'>\n      <head>\n        <meta charset='UTF-8' />\n        <meta name='viewport' content='width=device-width, initial-scale=1.0' />\n        {import.meta.env.PROD ? (\n          <HasIslands>\n            <script type='module' src='/static/client.js'></script>\n          </HasIslands>\n        ) : (\n          <script type='module' src='/app/client.ts'></script>\n        )}\n      </head>\n      <body>{children}</body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Custom React Renderer Implementation\nDESCRIPTION: Setup for using React as a custom renderer in HonoX applications\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/_renderer.tsx\nimport { reactRenderer } from '@hono/react-renderer'\n\nexport default reactRenderer(({ children, title }) => {\n  return (\n    <html lang='en'>\n      <head>\n        <meta charSet='UTF-8' />\n        <meta name='viewport' content='width=device-width, initial-scale=1.0' />\n        {import.meta.env.PROD ? (\n          <script type='module' src='/static/client.js'></script>\n        ) : (\n          <script type='module' src='/app/client.ts'></script>\n        )}\n        {title ? <title>{title}</title> : ''}\n      </head>\n      <body>{children}</body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Using Script Component in HonoX Renderer\nDESCRIPTION: Renderer implementation using the Script component for simplified client-side script inclusion with manifest file support.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/_renderer.tsx\nimport { jsxRenderer } from 'hono/jsx-renderer'\nimport { Script } from 'honox/server'\n\nexport default jsxRenderer(({ children }) => {\n  return (\n    <html lang='en'>\n      <head>\n        <meta charset='UTF-8' />\n        <meta name='viewport' content='width=device-width, initial-scale=1.0' />\n        <Script src='/app/client.ts' />\n      </head>\n      <body>{children}</body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Renderer Type in HonoX\nDESCRIPTION: Global type definition for renderer functionality in HonoX, extending Hono's ContextRenderer interface.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// app/global.d.ts\nimport type {} from 'hono'\n\ntype Head = {\n  title?: string\n}\n\ndeclare module 'hono' {\n  interface ContextRenderer {\n    (content: string | Promise<string>, head?: Head): Response | Promise<Response>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration for React Integration\nDESCRIPTION: Vite build configuration for React integration in HonoX\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\n// vite.config.ts\nimport build from '@hono/vite-build/cloudflare-pages'\nimport honox from 'honox/vite'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig(({ mode }) => {\n  if (mode === 'client') {\n    return {\n      build: {\n        rollupOptions: {\n          input: ['./app/client.ts'],\n          output: {\n            entryFileNames: 'static/client.js',\n            chunkFileNames: 'static/assets/[name]-[hash].js',\n            assetFileNames: 'static/assets/[name].[ext]',\n          },\n        },\n        emptyOutDir: false,\n      },\n    }\n  } else {\n    return {\n      ssr: {\n        external: ['react', 'react-dom'],\n      },\n      plugins: [honox(), build()],\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring vite.config.ts with Cloudflare Adapter\nDESCRIPTION: This snippet demonstrates how to use the Cloudflare adapter in vite.config.ts for development environments. It imports the necessary modules and configures the HonoX plugin with the Cloudflare adapter.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport honox from 'honox/vite'\nimport adapter from '@hono/vite-dev-server/cloudflare'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    honox({\n      devServer: {\n        adapter,\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring vite.config.ts for Static Site Generation (SSG)\nDESCRIPTION: This snippet shows how to set up Static Site Generation for a HonoX application. It defines the server entry point and configures the SSG plugin.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport honox from 'honox/vite'\nimport ssg from '@hono/vite-ssg'\n\nconst entry = './app/server.ts'\n\nexport default defineConfig(() => {\n  return {\n    plugins: [honox(), ssg({ entry })],\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring vite.config.ts for SSG with Client Assets\nDESCRIPTION: This code shows a more advanced configuration for Static Site Generation that includes client-side scripts and assets. It uses conditional configuration based on the build mode.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport ssg from '@hono/vite-ssg'\nimport honox from 'honox/vite'\nimport client from 'honox/vite/client'\nimport { defineConfig } from 'vite'\n\nconst entry = './app/server.ts'\n\nexport default defineConfig(({ mode }) => {\n  if (mode === 'client') {\n    return {\n      plugins: [client()],\n    }\n  } else {\n    return {\n      build: {\n        emptyOutDir: false,\n      },\n      plugins: [honox(), ssg({ entry })],\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up vite.config.ts for Cloudflare Pages Deployment\nDESCRIPTION: This code snippet configures vite.config.ts for deploying a HonoX application to Cloudflare Pages. It imports the necessary modules and sets up the HonoX plugin with Cloudflare Pages build configuration.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport { defineConfig } from 'vite'\nimport honox from 'honox/vite'\nimport build from '@hono/vite-build/cloudflare-pages'\n\nexport default defineConfig({\n  plugins: [honox(), build()],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring vite.config.ts for Bun Platform\nDESCRIPTION: This snippet demonstrates how to configure vite.config.ts for building a HonoX application for the Bun runtime platform using @hono/vite-build.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport { defineConfig } from 'vite'\nimport honox from 'honox/vite'\nimport build from '@hono/vite-build/bun'\n\nexport default defineConfig({\n  plugins: [honox(), build()],\n})\n```\n\n----------------------------------------\n\nTITLE: Security Headers Middleware for Script Nonce in HonoX\nDESCRIPTION: Route middleware that sets up Content Security Policy with nonce support for script elements using Hono's secure headers middleware.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// app/routes/_middleware.ts\nimport { createRoute } from 'honox/factory'\nimport { secureHeaders, NONCE } from 'hono/secure-headers'\n\nexport default createRoute(\n  secureHeaders({\n    contentSecurityPolicy: {\n      scriptSrc: [NONCE],\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Renderer with Nonce Support for Scripts in HonoX\nDESCRIPTION: JSX renderer that includes nonce attribute for script elements to work with Content Security Policy.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/_renderer.tsx\nimport { jsxRenderer } from 'hono/jsx-renderer'\nimport { Script } from 'honox/server'\n\nexport default jsxRenderer(({ children }, c) => {\n  return (\n    <html lang='en'>\n      <head>\n        <Script src='/app/client.ts' async nonce={c.get('secureHeadersNonce')} />\n      </head>\n      <body>{children}</body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Bindings with wrangler.toml\nDESCRIPTION: This snippet shows how to set up a wrangler.toml configuration file for Cloudflare bindings in a development environment. It includes basic project configuration and commented examples for variables and KV namespaces.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_24\n\nLANGUAGE: toml\nCODE:\n```\nname = \"my-project-name\"\ncompatibility_date = \"2024-04-01\"\ncompatibility_flags = [ \"nodejs_compat\" ]\npages_build_output_dir = \"./dist\"\n\n# [vars]\n# MY_VARIABLE = \"production_value\"\n\n# [[kv_namespaces]]\n# binding = \"MY_KV_NAMESPACE\"\n# id = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Configuring wrangler.toml for Cloudflare Pages Deployment\nDESCRIPTION: This snippet shows a basic wrangler.toml configuration for deploying to Cloudflare Pages. It sets up project name, compatibility settings, and the build output directory.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_26\n\nLANGUAGE: toml\nCODE:\n```\n# wrangler.toml\nname = \"my-project-name\"\ncompatibility_date = \"2024-04-01\"\ncompatibility_flags = [ \"nodejs_compat\" ]\npages_build_output_dir = \"./dist\"\n```\n\n----------------------------------------\n\nTITLE: SSG Build Command with Client Assets\nDESCRIPTION: This command builds both client-side and server-side components for a Static Site Generated HonoX application.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_32\n\nLANGUAGE: plaintext\nCODE:\n```\nvite build --mode client && vite build\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Pages Build Command\nDESCRIPTION: This command builds the client-side and server-side components of a HonoX application for Cloudflare Pages deployment.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\nvite build --mode client && vite build\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Pages Deploy Command\nDESCRIPTION: This command deploys the built HonoX application to Cloudflare Pages using Wrangler.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\nwrangler pages deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying SSG to Cloudflare Pages\nDESCRIPTION: This command deploys a static site generated with HonoX to Cloudflare Pages using Wrangler.\nSOURCE: https://github.com/honojs/honox/blob/main/README.md#2025-04-21_snippet_33\n\nLANGUAGE: plaintext\nCODE:\n```\nwrangler pages deploy ./dist\n```\n\n----------------------------------------\n\nTITLE: Hello MDX Heading in Markdown\nDESCRIPTION: A simple MDX file with a top-level heading. MDX allows combining Markdown syntax with JSX components.\nSOURCE: https://github.com/honojs/honox/blob/main/mocks/app/routes/post.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Hello MDX\n```\n\n----------------------------------------\n\nTITLE: Basic MDX Header Usage in HonoX\nDESCRIPTION: A simple MDX header example showing the basic syntax for MDX files in HonoX. MDX allows combining Markdown with JSX components.\nSOURCE: https://github.com/honojs/honox/blob/main/mocks/app-islands-in-preserved/routes/nested/post.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n# Hello MDX\n```"
  }
]