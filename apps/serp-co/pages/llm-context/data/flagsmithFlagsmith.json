[
  {
    "owner": "flagsmith",
    "repo": "flagsmith",
    "content": "TITLE: Implementing Flag-based UI Control\nDESCRIPTION: This JavaScript snippet shows how to use a Flagsmith feature flag to control the visibility of a UI element. It checks the 'show_demo_button' flag and shows/hides a button accordingly.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n flagsmith.init({\n  environmentID: '<add your API key here!>',\n  onChange: (oldFlags, params) => {\n   if (flagsmith.hasFeature('show_demo_button')) {\n    var submit_button = document.getElementById('submit_button');\n    submit_button.style.display = 'block';\n   }\n  },\n });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Flagsmith SDK in Python\nDESCRIPTION: This snippet demonstrates how to configure and initialize the Flagsmith SDK in Python. It includes options for setting the environment key, enabling local evaluation, customizing API URLs, setting timeouts, and configuring other advanced features.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nflagsmith = Flagsmith(\n    # Your API Token.\n    # Note that this is either the `Environment API` key or the `Server Side SDK Token`\n    # depending on if you are using Local or Remote Evaluation\n    # Required.\n    environment_key = \"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\",\n\n    # Controls which mode to run in; local or remote evaluation.\n    # See the `SDKs Overview Page` for more info\n    # Optional.\n    # Defaults to False.\n    enable_local_evaluation = False,\n\n    # Override the default Flagsmith API URL if you are self-hosting.\n    # Optional.\n    # Defaults to https://edge.api.flagsmith.com/api/v1/\n    api_url = \"https://api.yourselfhostedflagsmith.com/api/v1/\",\n\n    # The network timeout in seconds.\n    # Optional.\n    # Defaults to 10 seconds\n    request_timeout_seconds = 10,\n\n    # When running in local evaluation mode, defines\n    # how often to request an updated Environment document in seconds\n    # Optional\n    # Defaults to 60 seconds\n    environment_refresh_interval_seconds: int = 60,\n\n    # A `urllib3` Retries object to control network retry policy\n    # See https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html#urllib3.util.Retry\n    # Optional\n    # Defaults to None\n    retries: Retry = None,\n\n    # Controls whether Flag Analytics data is sent to the Flagsmith API\n    # See https://docs.flagsmith.com/advanced-use/flag-analytics\n    # Optional\n    # Defaults to False\n    enable_analytics: bool = False,\n\n    # You can pass custom headers to the Flagsmith API with this Dictionary.\n    # This can be helpful, for example, when sending request IDs to help trace requests.\n    # Optional\n    # Defaults to None\n    custom_headers: typing.Dict[str, typing.Any] = None,\n\n    # You can specify a function to handle returning defaults in the case that\n    # the request to flagsmith fails or the flag requested is not included in the\n    # response\n    # Optional\n    default_flag_handler = lambda feature_name: return DefaultFlag(enabled=False, value=None),\n\n    # (Available in 3.2.0+) Pass a mapping of protocol to proxy URL as per\n    # https://requests.readthedocs.io/en/latest/api/#requests.Session.proxies\n    # Optional\n    proxies: typing.Dict[str, str] = None,\n\n    # (Available in 3.4.0+) Set the SDK into offline mode.\n    # Optional\n    # Defaults to False\n    offline_mode: bool = False,\n\n    # (Available in 3.4.0+) Provide an offline handler to use with offline mode, or\n    # as a means of returning default flags.\n    # Optional\n    # Defaults to None\n    offline_handler: BaseOfflineHander = None,\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Identity Flags in Node.js\nDESCRIPTION: This code demonstrates how to fetch flags for an identity using the Flagsmith Node.js SDK. It sets an identifier and traits, makes an asynchronous request for flags, and then checks feature enablement and retrieves a feature value.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst identifier = 'delboy@trotterstraders.co.uk';\nconst traitList = { car_type: 'robin_reliant' };\n\nconst flags = await flagsmith.getIdentityFlags(identifier, traitList);\nvar showButton = flags.isFeatureEnabled('secret_button');\nvar buttonData = flags.getFeatureValue('secret_button');\n```\n\n----------------------------------------\n\nTITLE: Implementing Flagsmith in Next.js Pages Router\nDESCRIPTION: Integration of Flagsmith in a Next.js application using the pages router. It initializes Flagsmith on the server and passes the state to the client-side components.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/nextjs-and-ssr.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FlagsmithProvider } from 'flagsmith/react';\nimport { createFlagsmithInstance } from 'flagsmith/isomorphic';\nfunction MyApp({ Component, pageProps, flagsmithState }) {\n const flagsmithRef = useRef(createFlagsmithInstance());\n return (\n  <FlagsmithProvider flagsmith={flagsmithRef.current} serverState={flagsmithState}>\n   <Component {...pageProps} />\n  </FlagsmithProvider>\n );\n}\n\nMyApp.getInitialProps = async () => {\n const flagsmithSSR = createFlagsmithInstance();\n await flagsmithSSR.init({\n  // fetches flags on the server\n  environmentID: '<YOUR_SERVERSIDE_ENVIRONMENT_KEY>',\n  identity: 'my_user_id', // optionaly specify the identity of the user to get their specific flags\n });\n return { flagsmithState: flagsmithSSR.getState() };\n};\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Identity Flags in Python\nDESCRIPTION: This snippet demonstrates how to fetch flags for a specific identity using the Flagsmith Python SDK. It sets an identifier and traits, makes a network request to get flags, and then checks if a feature is enabled and retrieves its value.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nidentifier = \"delboy@trotterstraders.co.uk\"\ntraits = {\"car_type\": \"robin_reliant\"}\n\n# The method below triggers a network request\nidentity_flags = flagsmith.get_identity_flags(identifier=identifier, traits=traits)\nshow_button = identity_flags.is_feature_enabled(\"secret_button\")\nbutton_data = json.loads(identity_flags.get_feature_value(\"secret_button\"))\n```\n\n----------------------------------------\n\nTITLE: Initializing Flagsmith SDK\nDESCRIPTION: This JavaScript code initializes the Flagsmith SDK with an environment ID and sets up an onChange callback. It's used to connect to the Flagsmith API and retrieve flag values.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n flagsmith.init({\n  environmentID: '<add your API key here!>',\n  onChange: (oldFlags, params) => {},\n });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Flagsmith Client in Dart\nDESCRIPTION: Initialize the Flagsmith client with your API key and optional configuration. This snippet also demonstrates seeding default flag values and fetching updates from the API.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flagsmith/flagsmith.dart';\n\nfinal flagsmithClient = FlagsmithClient(\n        apiKey: 'YOUR_ENV_API_KEY'\n        config: config,\n        seeds: <Flag>[\n            Flag.seed('feature', enabled: true),\n        ],\n    );\nawait flagsmithClient.initialize();\nawait flagsmithClient.getFeatureFlags(reload: true) // fetch updates from api\n```\n\n----------------------------------------\n\nTITLE: Java Flagsmith Client with Custom Cache Configuration\nDESCRIPTION: Configures Flagsmith client with custom caching parameters including larger cache size, longer expiration time, and environment level caching enabled.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_57\n\nLANGUAGE: java\nCODE:\n```\nfinal FlagsmithClient flagsmithClient = FlagsmithClient.newBuilder()\n                .setApiKey(\"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\")\n                .withConfiguration(FlagsmithConfig\n                        .newBuilder()\n                        .baseURI(\"https://flagsmith.example.com/api/v1/\")\n                        .build())\n                .withCache(FlagsmithCacheConfig\n                        .newBuilder()\n                        .maxSize(100)\n                        .expireAfterWrite(10, TimeUnit.MINUTES)\n                        .recordStats()\n                        .enableEnvLevelCaching(\"some-key-to-avoid-clashing-with-user-identifiers\")\n                        .build())\n                .build();\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Flagsmith Client\nDESCRIPTION: Code to initialize the Flagsmith client in Python with an environment key.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flagsmith import Flagsmith\n\nflagsmith = Flagsmith(\n    environment_key = \"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\"\n)\n```\n\n----------------------------------------\n\nTITLE: User Identification After SDK Initialization\nDESCRIPTION: Example showing how to identify users and set traits after Flagsmith initialization.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/javascript.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport flagsmith from 'flagsmith';\n\nflagsmith.init({\n environmentID: '<YOUR_CLIENT_SIDE_ENVIRONMENT_KEY>',\n onChange: (oldFlags, params) => {\n  //Occurs whenever flags are changed\n\n  const { isFromServer } = params; //determines if the update came from the server or local cached storage\n\n  //Set a trait against the Identity\n  flagsmith.setTrait('favourite_colour', 'blue'); //This save the trait against the user, it can be queried with flagsmith.getTrait\n\n  //Check for a feature\n  if (flagsmith.hasFeature('my_power_user_feature')) {\n   myPowerUserFeature();\n  }\n\n  //Check for a trait\n  if (!flagsmith.getTrait('accepted_cookie_policy')) {\n   showCookiePolicy();\n  }\n\n  //Or, use the value of a feature\n  const myPowerUserFeature = flagsmith.getValue('my_power_user_feature');\n\n  //Check whether value has changed\n  const myPowerUserFeatureOld = oldFlags['my_power_user_feature'] && oldFlags['my_power_user_feature'].value;\n  if (myPowerUserFeature !== myPowerUserFeatureOld) {\n   // Do something!\n  }\n },\n});\n\n/*\nCan be called either after you're done initialising the project or in flagsmith.init with its identity and trait properties \nto prevent flags being fetched twice.\n*/\nflagsmith.identify('flagsmith_sample_user'); //This will create a user in the dashboard if they don't already exist\n```\n\n----------------------------------------\n\nTITLE: Implementing Flagsmith Provider in Next.js App Router\nDESCRIPTION: React component that provides Flagsmith context to the application using the app router in Next.js. It initializes Flagsmith with server-side state.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/nextjs-and-ssr.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\";\n\nimport { ReactNode, useRef } from \"react\";\n\nimport { FlagsmithProvider } from \"flagsmith/react\";\nimport { IState } from \"flagsmith/types\";\nimport { createFlagsmithInstance } from \"flagsmith/isomorphic\";\n\nexport const FeatureFlagProvider = ({\n  serverState,\n  children,\n}: {\n  serverState: IState;\n  children: ReactNode;\n}) => {\n  const flagsmithInstance = useRef(createFlagsmithInstance());\n  return (\n    <FlagsmithProvider flagsmith={flagsmithInstance.current} serverState={serverState}>\n      <>{children}</>\n    </FlagsmithProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Flag Status in iOS\nDESCRIPTION: Shows how to check if a specific feature flag is enabled for a given identity (or nil for default).\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/ios.mdx#2025-04-21_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nFlagsmith.shared.hasFeatureFlag(withID: \"test_feature1\", forIdentity: nil) { (result) in\n    print(result)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Flagsmith SDK\nDESCRIPTION: Basic setup for initializing the Flagsmith SDK with environment configuration, caching, analytics, and change handlers.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/javascript.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport flagsmith from 'flagsmith or react-native-flagsmith';\n\nflagsmith.init({\n environmentID: '<YOUR_CLIENT_SIDE_ENVIRONMENT_KEY>',\n // api:\"http://localhost:8000/api/v1/\" set this if you are self hosting, and point it to your API\n cacheFlags: true, // stores flags in localStorage cache\n enableAnalytics: true, // See https://docs.flagsmith.com/flag-analytics/ for more info.\n onChange: (oldFlags, params) => {\n  //Occurs whenever flags are changed\n  const { isFromServer } = params; //determines if the update came from the server or local cached storage\n\n  //Check for a feature\n  if (flagsmith.hasFeature('my_cool_feature')) {\n   myCoolFeature();\n  }\n\n  //Or, use the value of a feature\n  const bannerSize = flagsmith.getValue('banner_size');\n\n  //Check whether value has changed\n  const bannerSizeOld = oldFlags['banner_size'] && oldFlags['banner_size'].value;\n  if (bannerSize !== bannerSizeOld) {\n   // Do something!\n  }\n },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagsmith SDK for Dynatrace Integration\nDESCRIPTION: Shows how to initialize the Flagsmith SDK with Dynatrace integration enabled.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/javascript.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize the Flagsmith SDK\nflagsmith.init({\n //...Initialisation properties,\n enableDynatrace: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Flagsmith in Gradle dependencies for Android\nDESCRIPTION: Shows how to add the necessary repositories and dependencies to your Gradle configuration to use the Flagsmith Android SDK in your project.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/android.md#2025-04-21_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n    google()\n    mavenCentral()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flagsmith with Docker Compose\nDESCRIPTION: Quick start command to download and run Flagsmith using Docker Compose. Downloads the compose file and starts the services.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o docker-compose.yml https://raw.githubusercontent.com/Flagsmith/flagsmith/main/docker-compose.yml\ndocker-compose -f docker-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Flags for Specific Identity in iOS\nDESCRIPTION: Demonstrates how to fetch all feature flags for a specific identity and print their details.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/ios.mdx#2025-04-21_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nFlagsmith.shared.getFeatureFlags(forIdentity: \"test_user@test.com\") {(result) in\n    switch result {\n    case .success(let flags):\n        for flag in flags {\n            let name = flag.feature.name\n            let value = flag.value?.stringValue\n            let enabled = flag.enabled\n            print(name, \"= enabled:\", enabled, \"value:\", value ?? \"nil\")\n        }\n    case .failure(let error):\n        print(error)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Flagsmith Client in .NET\nDESCRIPTION: This snippet demonstrates how to create and configure a Flagsmith client in .NET. It includes options for setting the environment key, API URL, evaluation mode, analytics, refresh intervals, and other configuration parameters.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_46\n\nLANGUAGE: csharp\nCODE:\n```\nvar flagsmithClient = new FlagsmithClient(\n    new FlagsmithConfiguration {\n        # Your environment's SDK key. This should be a client-side key if you are using remote evaluation or a\n        # server-side key if you are using local evaluation.\n        # Required.\n        EnvironmentKey = \"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\",\n\n        # An optional flag handler used as a fallback if the client is unable to evaluate flags for any reason.\n        DefaultFlagHandler = defaultFlagHandler,\n\n        # If you are not using Flagsmith SaaS, set this to your Flagsmith API URL.\n        # Defaults to https://edge.api.flagsmith.com/api/v1/\n        ApiUri: new Uri(\"https://flagsmith.example.com/api/v1/\"),\n\n        # Controls which mode to run in; local or remote evaluation. Defaults to false (remote evaluation).\n        # See the `SDKs Overview Page` for more info.\n        EnableLocalEvaluation = false,\n\n        # Controls whether flag analytics data is sent to the Flagsmith API. Defaults to false.\n        # See https://docs.flagsmith.com/advanced-use/flag-analytics\n        EnableAnalytics = false,\n\n        # When running in local evaluation mode, defines how often to update the environment document.\n        # Defaults to 60 seconds.\n        EnvironmentRefreshInterval = TimeSpan.FromSeconds(60),\n\n        # All HTTP requests made by this client will include these additional headers.\n        # This can be helpful, for example, if you are self-hosting Flagsmith and want to add trace IDs to all requests.\n        CustomHeaders = new Dictionary<string, string>(),\n\n        # How many times to retry failed HTTP requests. Defaults to 1.\n        Retries = 1,\n\n        # The network timeout in seconds. If not specified, the HTTP client's default timeout is used.\n        RequestTimeout = 10,\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagsmith Client in Java\nDESCRIPTION: This snippet shows how to configure and build the Flagsmith client in Java. It includes options for setting the API key, enabling local evaluation, customizing HTTP headers, configuring caching, and setting various network-related parameters.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_45\n\nLANGUAGE: java\nCODE:\n```\nprivate static FlagsmithClient flagsmith = FlagsmithClient\n    .newBuilder()\n    // Your API Token.\n    // Note that this is either the `Environment API` key or the `Server Side SDK Token`\n    // depending on if you are using Local or Remote Evaluation\n    // Required.\n    .setApiKey(System.getenv(\"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\"))\n\n    // You can specify default Flag values on initialisation.\n    // Optional\n    .setDefaultFlagValueFunction(HelloController::defaultFlagHandler)\n\n    // Controls which mode to run in; local or remote evaluation.\n    // See the `SDKs Overview Page` for more info\n    // Optional.\n    // Defaults to False.\n    .withLocalEvaluation(True)\n\n    // Add custom headers which will be sent with each network request\n    // to the Flagsmith API.\n    // Optional.\n    // Defaults to no custom headers.\n    .withCustomHttpHeaders(new HashMap<string, string>() {{\n        put(\"header\", \"value\");\n    }})\n\n    // Enable in-memory caching for the Flagsmith API.\n    // Optional.\n    // Defaults to not cache anything.\n    .withCache(FlagsmithCacheConfig.builder().enableEnvLevelCaching(\"cache-key\").build())\n\n    .withConfiguration(FlagsmithConfig.builder()\n        // Override the default Flagsmith API URL if you are self-hosting.\n        // Optional.\n        // Defaults to https://edge.api.flagsmith.com/api/v1/\n        .baseUri(\"https://api.yourselfhostedflagsmith.com/api/v1/\")\n\n        // The network timeout in milliseconds.\n        // See https://square.github.io/okhttp/4.x/okhttp/okhttp3/ for details\n        // Defaults are:\n        //   connect: 2000\n        //   write: 5000\n        //   read: 5000\n        // Optional.\n        .connectTimeout(<millisecond int>)\n        .writeTimeout(<millisecond int>)\n        .readTimeout(<millisecond int>)\n\n        // Override the sslSocketFactory\n        // See https://square.github.io/okhttp/4.x/okhttp/okhttp3/ for details\n        // Optional.\n        .sslSocketFactory(SSLSocketFactory sslSocketFactory, X509TrustManager trustManager)\n\n        // Add a custom HTTP interceptor in the form of an okhttp3.Interceptor\n        // object\n        // Optional\n        .addHttpInterceptor(interceptor)\n\n        // Add a custom java.net.Proxy to the OkHttp client\n        // Optional\n        .withProxy(proxy)\n\n        // Add a custom com.flagsmith.config.Retry object to configure the\n        // backoff / retry configuration\n        // Optional\n        // Defaults to Retry(3)\n        .retries(retries)\n\n        // Enable local evaluation mode\n        // ()\n        // Optional\n        // Defaults to false\n        .withLocalEvaluation(true)\n\n        // Set environment refresh rate with polling manager.\n        // Only needed when local evaluation is true.\n        // Optional.\n        // Defaults to 60 seconds\n        .withEnvironmentRefreshIntervalSeconds(Integer seconds)\n\n        // Controls whether Flag Analytics data is sent to the Flagsmith API\n        // See https://docs.flagsmith.com/advanced-use/flag-analytics\n        // Optional\n        // Defaults to False\n        .withEnableAnalytics(Boolean enable)\n\n        // (Available in v7.2.0+) Set the SDK into offline mode.\n        // Optional\n        // Defaults to False\n        .withOfflineMode(Boolean enable)\n\n        // (Available in v7.2.0+) Provide an offline handler to use with offline mode, or as a means of returning default flags.\n        // Optional\n        .withOfflineHandler(IOfflineHandler offlineHandler)\n\n        .build())\n\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Initializing Java Flagsmith Client\nDESCRIPTION: Code to create a new Flagsmith client instance in Java using the builder pattern.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate static FlagsmithClient flagsmith = FlagsmithClient\n    .newBuilder()\n    .setApiKey(System.getenv(\"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\"))\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagsmith Client in Ruby\nDESCRIPTION: This snippet shows how to initialize and configure the Flagsmith client in Ruby. It includes options for setting the environment key, enabling local evaluation, customizing the API URL, setting timeouts, and configuring other features like analytics and custom headers.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\n$flagsmith = Flagsmith::Client.new(\n    # Your API Token.\n    # Note that this is either the `Environment API` key or the `Server Side SDK Token`\n    # depending on if you are using Local or Remote Evaluation\n    # Required.\n    environment_key = \"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\",\n\n    # Controls which mode to run in; local or remote evaluation.\n    # See the `SDKs Overview Page` for more info\n    # Optional.\n    # Defaults to false.\n    enable_local_evaluation = false,\n\n    # Override the default Flagsmith API URL if you are self-hosting.\n    # Optional.\n    # Defaults to https://edge.api.flagsmith.com/api/v1/\n    api_url = \"https://api.yourselfhostedflagsmith.com/api/v1/\",\n\n    # The network timeout in seconds.\n    # Optional.\n    # Defaults to 10 seconds\n    request_timeout_seconds = 10,\n\n    # When running in local evaluation mode, defines\n    # how often to request an updated Environment document in seconds\n    # Optional\n    # Defaults to 60 seconds\n    environment_refresh_interval_seconds = 60,\n\n    # A faraday retry object to control network retry policy\n    # See https://www.rubydoc.info/gems/faraday/0.15.3/Faraday/Request/Retry\n    # Optional\n    # Defaults to nil\n    retries = nil,\n\n    # Controls whether Flag Analytics data is sent to the Flagsmith API\n    # See https://docs.flagsmith.com/advanced-use/flag-analytics\n    # Optional\n    # Defaults to False\n    enable_analytics = false,\n\n    # You can pass custom headers to the Flagsmith API with this Dictionary.\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Flags with Async/Await in iOS\nDESCRIPTION: Shows how to fetch feature flags for a specific identity using Swift's async/await syntax.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/ios.mdx#2025-04-21_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nlet flags = try await Flagsmith.shared.getFeatureFlags(forIdentity: \"test_user@test.com\")\nfor flag in flags {\n    let name = flag.feature.name\n    let value = flag.value?.stringValue\n    let enabled = flag.enabled\n    print(name, \"= enabled:\", enabled, \"value:\", value ?? \"nil\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Transient Traits in JavaScript\nDESCRIPTION: This snippet shows how to set a transient trait and mark an entire identity as transient using the Flagsmith JavaScript SDK. It requires version 5.0.0 or higher of the SDK.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/transient-traits.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nflagsmith.setTrait('my_trait_key', { value: 123.5, transient: true });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nflagsmith.setContext({\n identity: {\n  identifier: 'my-user',\n  transient: true,\n  traits: { my_trait_key: 123.5, my_other_key: true },\n },\n});\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Initialization of Flagsmith Client in Dart\nDESCRIPTION: An alternative method to initialize the Flagsmith client asynchronously, including seeding default flag values.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flagsmith/flagsmith.dart';\n\nfinal flagsmithClient = await FlagsmithClient.init(\n        apiKey: 'YOUR_ENV_API_KEY',\n        config: config,\n        seeds: <Flag>[\n            Flag.seed('feature', enabled: true),\n        ],\n    );\nawait flagsmithClient.getFeatureFlags(reload: true) // fetch updates from api\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment Flags in Java\nDESCRIPTION: Code to get feature flags and check their values in Java.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nFlags flags = flagsmith.getEnvironmentFlags();\nBoolean showButton = flags.isFeatureEnabled(featureName);\nObject value = flags.getFeatureValue(featureName);\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagsmith in Go\nDESCRIPTION: Sets up the Flagsmith client in Go with options for base URL, local evaluation, request timeout, environment refresh interval, analytics, retries, custom headers, and default flag handling.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_51\n\nLANGUAGE: go\nCODE:\n```\nclient := flagsmith.NewClient(os.Getenv(\"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\"),\n        // Override the default Flagsmith API URL if you are self-hosting.\n        // Defaults to https://edge.api.flagsmith.com/api/v1/\n        flagsmith.WithBaseURL(\"http://localhost:8080/api/v1/\"),\n\n        // Controls which mode to run in; local or remote evaluation.\n        // See the `SDKs Overview Page` for more info\n        // Defaults to False\n        func WithLocalEvaluation(ctx context.Context),\n\n        // The network timeout in seconds.\n        flagsmith.WithRequestTimeout(10*time.Second),\n\n        // When running in local evaluation mode, defines\n        // how often to request an updated Environment document\n        // Defaults to 60 seconds\n        flagsmith.WithEnvironmentRefreshInterval(60*time.Second),\n\n        // Controls whether Flag Analytics data is sent to the Flagsmith API\n        // See https://docs.flagsmith.com/advanced-use/flag-analytics\n        flagsmith.WithAnalytics(ctx),\n\n        // Sets `resty.Client` options.  `SetRetryCount` and `SetRetryWaitTime`\n        // Ref: https://pkg.go.dev/github.com/go-resty/resty/v2#Client.SetRetryCount\n        // https://pkg.go.dev/github.com/go-resty/resty/v2#Client.SetRetryWaitTime\n        flagsmith.WithRetries(3, 5*time.Second),\n\n        // You can pass custom headers to the Flagsmith API with this Dictionary.\n        // This can be helpful, for example, when sending request IDs to help trace requests.\n        flagsmith.WithCustomHeaders(map[string]string{\n          \"Content-Type\": \"application/json\",\n          \"Accept\":       \"application/json\",\n        }),\n\n        // You can specify a function to handle returning defaults in the case that\n        // the request to flagsmith fails or the flag requested is not included in the\n        // response\n        flagsmith.WithDefaultHandler(defaultFlagHandler),\n\n        // WithOfflineMode returns an Option function that enables the offline mode.\n        flagsmith.WithOfflineHandler(offlineHandler)\n\n        // WithOfflineMode returns an Option function that enables the offline mode.\n        // (before using this option, you should set the offline handler)\n        flagsmith.WithOfflineMode()\n\n        // Allows the client to use any logger that implements the `Logger` interface.\n        flagsmith.WithLogger(ctx),\n\n        // WithProxy returns an Option function that sets the proxy(to be used by internal resty client).\n        // The proxyURL argument is a string representing the URL of the proxy server to use, e.g. \"http://proxy.example.com:8080\".\n        func WithProxy(proxyURL string) Option {\n            return func(c *Client) {\n                c.client.SetProxy(proxyURL)\n            }\n        }\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Flags in Flagsmith\nDESCRIPTION: Example of initializing Flagsmith with default flag values for defensive coding when API is unavailable.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/javascript.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport flagsmith from 'flagsmith or react-native-flagsmith';\n\ntry {\n    flagsmith.init({\n        environmentID: '<YOUR_CLIENT_SIDE_ENVIRONMENT_KEY>',\n        defaultFlags: {\n            feature_a: { enabled: false},\n            font_size: { enabled: true, value: 12 },\n        }\n        onChange: (oldFlags, params) => {\n            ...\n        },\n    });\n} catch (e) {\n    // if an exception is thrown the default values will be used\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing .NET Flagsmith Client\nDESCRIPTION: Code to initialize the Flagsmith client in C# with configuration options.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Flagsmith;\n\nvar flagsmithClient = new FlagsmithClient(\n  new FlagsmithConfiguration {\n    EnvironmentKey = \"YOUR_FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\",\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using the Flagsmith CLI to Retrieve Feature Flags\nDESCRIPTION: Example usage of the Flagsmith CLI showing the command structure, available arguments, flags, and example commands for retrieving feature flags from the Flagsmith API.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/CLI.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ flagsmith get [ENVIRONMENT] [-o <value>] [-a <value>] [-i <value>]\n\nARGUMENTS\n  ENVIRONMENT  The flagsmith environment key to use,\n  defaults to the environment variable FLAGSMITH_ENVIRONMENT\n\nFLAGS\n  -a, --api=<value>       The API URL to fetch the feature flags from\n  -i, --identity=<value>  The identity for which to fetch feature flags\n  -o, --output=<value>    [default: ./flagsmith.json] The file path output\n\nDESCRIPTION\n  Retrieve flagsmith features from the Flagsmith API and output them to a file.\n\nEXAMPLES\n  $ FLAGSMITH_ENVIRONMENT=x flagsmith get\n\n  $ flagsmith get <ENVIRONMENT_ID>\n\n  $ flagsmith get --o ./my-file.json\n\n  $ flagsmith get --a https://flagsmith.example.com/api/v1/\n\n  $ flagsmith get --i flagsmith_identity\n```\n\n----------------------------------------\n\nTITLE: Setting Transient Traits and Identities in Flutter\nDESCRIPTION: This code shows how to set transient traits and mark an identity as transient using the Flagsmith Flutter SDK. It requires version 6.0.0 or higher of the SDK.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/transient-traits.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar user = Identity(identifier: 'my-user');\nvar traits = [\n    Trait(key: 'my_trait_key', value: 123.5, transient: true),\n    Trait(key: 'my_other_key', value: true),\n];\nfinal flags = await fs.getFeatureFlags(user: user, traits: traits);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar user = Identity(identifier: 'my-user', transient: true);\nvar traits = [\n    Trait(key: 'my_trait_key', value: 123.5),\n    Trait(key: 'my_other_key', value: true),\n];\nfinal flags = await fs.getFeatureFlags(user: user, traits: traits);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment Flags in Go\nDESCRIPTION: Code to get and check feature flags in Go with error handling.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// The method below triggers a network request\nflags, _ := client.GetEnvironmentFlags(ctx)\nshowButton, _ := flags.IsFeatureEnabled(\"secret_button\")\nbuttonData, _ := flags.GetFeatureValue(\"secret_button\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flagsmith SDK via CocoaPods in iOS\nDESCRIPTION: Adds the Flagsmith SDK as a dependency to the project's Podfile, specifying the version to use.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/ios.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npod 'FlagsmithClient', '~> <CocoapodsVersion />'\n```\n\n----------------------------------------\n\nTITLE: Initializing Flagsmith in Next.js App Router Layout\nDESCRIPTION: Server-side initialization of Flagsmith in the root layout of a Next.js app using the app router. It fetches flags and passes the state to the FeatureFlagProvider.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/nextjs-and-ssr.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ReactNode } from \"react\";\nimport { FeatureFlagProvider } from './components/FeatureFlagProvider';\nimport flagsmith from \"flagsmith/isomorphic\";\n\nexport default async function RootLayout({\n  children,\n}: Readonly<{\n  children: ReactNode;\n}>) {\n   await flagsmith.init({\n      environmentID: \"<YOUR_SERVERSIDE_ENVIRONMENT_KEY>\",\n      // Add optional identity, etc.\n   });\n   const serverState = flagsmith.getState();\n\n   return (\n   <html lang=\"en\">\n      <head>\n         <meta name=\"viewport\" content=\"initial-scale=1, width=device-width\" />\n      </head>\n      <body>\n         <FeatureFlagProvider serverState={serverState}>\n            {children}\n         </FeatureFlagProvider>\n      </body>\n   </html>\n   );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete HTML with Flagsmith Integration\nDESCRIPTION: This is the full HTML document that integrates Flagsmith. It includes the SDK import, initialization, and flag-based UI control. The button's visibility is controlled by the 'show_demo_button' flag.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n\n<html lang=\"en\">\n <head>\n  <meta charset=\"utf-8\" />\n  <title>Flagsmith Quickstart Guide</title>\n  <script src=\"https://cdn.jsdelivr.net/npm/flagsmith@[VERSION]/index.js\"></script>\n  <script>\n   flagsmith.init({\n    environmentID: 'ZfmJTbLQZrhZVHkVhXbsNi',\n    onChange: (oldFlags, params) => {\n     if (flagsmith.hasFeature('show_demo_button')) {\n      var submit_button = document.getElementById('submit_button');\n      submit_button.style.display = 'block';\n     }\n    },\n   });\n  </script>\n </head>\n <body>\n  <h1>Here's our button!</h1>\n  <div id=\"submit_button\" style=\"display:none\">\n   <input type=\"submit\" value=\"Flagsmith Quickstart Button!\" />\n  </div>\n </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing Flagsmith with User Identity\nDESCRIPTION: Example demonstrating SDK initialization with user identity and traits for personalized feature flags.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/javascript.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport flagsmith from 'flagsmith';\n\nflagsmith.init({\n environmentID: '<YOUR_CLIENT_SIDE_ENVIRONMENT_KEY>',\n identity: 'flagsmith_sample_user',\n traits: { age: 21, country: 'England' }, // these will add to the user's existing traits\n onChange: (oldFlags, params) => {\n  //Occurs whenever flags are changed\n\n  const { isFromServer } = params; //determines if the update came from the server or local cached storage\n\n  //Set a trait against the Identity\n  flagsmith.setTrait('favourite_colour', 'blue'); //This save the trait against the user, it can be queried with flagsmith.getTrait\n\n  //Check for a feature\n  if (flagsmith.hasFeature('my_power_user_feature')) {\n   myPowerUserFeature();\n  }\n\n  //Check for a trait\n  if (!flagsmith.getTrait('accepted_cookie_policy')) {\n   showCookiePolicy();\n  }\n\n  //Or, use the value of a feature\n  const myPowerUserFeature = flagsmith.getValue('my_power_user_feature');\n\n  //Check whether value has changed\n  const myPowerUserFeatureOld = oldFlags['my_power_user_feature'] && oldFlags['my_power_user_feature'].value;\n  if (myPowerUserFeature !== myPowerUserFeatureOld) {\n  }\n },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Real-Time Updates in Flagsmith Swift SDK\nDESCRIPTION: This snippet shows how to enable real-time updates for the Flagsmith SDK. By default, real-time updates are disabled, but can be enabled by setting the 'enableRealTimeUpdates' property to true.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/ios.mdx#2025-04-21_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nFlagsmith.shared.enableRealTimeUpdates = false\n```\n\n----------------------------------------\n\nTITLE: Initializing Flagsmith in Node.js\nDESCRIPTION: Configures the Flagsmith SDK in Node.js with options for API URL, caching, custom headers, analytics, local evaluation, timeout settings, and default flag handling.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Flagsmith } from 'flagsmith-nodejs';\nimport type { EnvironmentModel } from 'flagsmith-nodejs';\n\nconst flagsmith = new Flagsmith({\n    /*\n   Your API Token.\n   Note that this is either the `Environment API` key or the `Server Side SDK Token`\n   depending on if you are using Local or Remote Evaluation\n   Required.\n   */\n    environmentKey: 'FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY',\n\n    /*\n   Override the default Flagsmith API URL if you are self-hosting.\n   Optional.\n   Defaults to https://edge.api.flagsmith.com/api/v1/\n   */\n    apiUrl: 'https://api.yourselfhostedflagsmith.com/api/v1/',\n\n    /*\n   Adds caching support\n   Optional\n   See https://docs.flagsmith.com/clients/server-side#caching\n   */\n    cache: {\n        get: (key: string) => Promise.resolve(),\n        set: (k: string, v: Flags) => Promise.resolve(),\n    },\n\n    /*\n   Custom http headers can be added to the http client\n   Optional\n   */\n    customHeaders: { aHeader: 'aValue' },\n\n    /*\n   Controls whether Flag Analytics data is sent to the Flagsmith API\n   See https://docs.flagsmith.com/advanced-use/flag-analytics\n   Optional\n   Defaults to false\n   */\n    enableAnalytics: true,\n\n    /*\n   Controls which mode to run in; local or remote evaluation.\n   See the `SDKs Overview Page` for more info\n   Optional.\n   Defaults to false.\n   */\n    enableLocalEvaluation: true,\n\n    /*\n   Set environment refresh rate with polling manager.\n   Only needed when local evaluation is true.\n   Optional.\n   Defaults to 60 seconds\n   */\n    environmentRefreshIntervalSeconds: 60,\n\n    /*\n   The network timeout in seconds.\n   Optional.\n   Defaults to 10 seconds\n   */\n    requestTimeoutSeconds: 30,\n\n    /*\n   You can specify default Flag values on initialisation.\n   Optional\n   */\n    defaultFlagHandler: (featureName: string) => {\n        return { enabled: false, isDefault: true, value: null };\n    },\n\n    /*\n    A callback for whenever the environment model is updated or there is an error retrieving it.\n    This is only used in local evaluation mode.\n    Optional\n    */\n    onEnvironmentChange: (error: Error | null, result: EnvironmentModel) => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Setting User Identity Traits in Java\nDESCRIPTION: Example showing how to set user traits in Flagsmith using Java. The code demonstrates setting an app_version trait for a specific user identifier that can be used for feature flag segmentation.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/basic-features/managing-identities.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nString identifier = \"user_512356\"\nMap<String, Object> traits = new HashMap<String, Object>();\ntraits.put(\"app_version\", YourApplication.getVersion());\n\nFlags flags = flagsmith.getIdentityFlags(identifier, traits);\n```\n\n----------------------------------------\n\nTITLE: Setting String Trait with JavaScript SDK\nDESCRIPTION: This code shows how to set a string trait 'accepted_cookies' with a value of 'partial' using the Flagsmith JavaScript SDK. It demonstrates flexibility in changing trait data types.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/basic-features/segments.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nflagsmith.setTrait('accepted_cookies', 'partial');\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagsmith in Ruby\nDESCRIPTION: Initializes the Flagsmith client in Ruby with available configuration options including API URL customization, caching, custom headers, and default flag handling.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\n# This can be helpful, for example, when sending request IDs to help trace requests.\n    # Optional\n    # Defaults to nill\n    custom_headers = nil,\n\n    # You can specify a function to handle returning defaults in the case that\n    # the request to flagsmith fails or the flag requested is not included in the\n    # response\n    # Optional\n    default_flag_handler = lambda { |feature_name| Flagsmith::DefaultFlag.new(enabled=false, value=nil) }\n```\n\n----------------------------------------\n\nTITLE: Initializing Flagsmith in Android Activity\nDESCRIPTION: Demonstrates how to initialize the Flagsmith SDK within an Android Activity's onCreate method, establishing the connection to your Flagsmith environment.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/android.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nlateinit var flagsmith : Flagsmith\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n    initFlagsmith();\n}\n\nprivate fun initFlagsmith() {\n    flagsmith = Flagsmith(environmentKey = FlagsmithConfigHelper.environmentDevelopmentKey, context = context)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Default Flag Handler in .NET\nDESCRIPTION: This C# code demonstrates the configuration of a default flag handler in a .NET application using the Flagsmith library. It defines a handler method and initializes the Flagsmith client with this custom handler.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nusing Flagsmith;\n\nvar config = new FlagsmithConfiguration\n{\n    EnvironmentKey = \"YOUR_SERVER_SIDE_ENVIRONMENT_KEY\",\n    DefaultFlagHandler = defaultFlagHandler\n}\nvar flagsmithClient = new FlagsmithClient(config);\n\nstatic Flag defaultFlagHandler(string featureName)\n{\n    if (featureName == \"secret_button\")\n        return new Flag(new Feature(\"secret_button\"), enabled: false, value: JsonConvert.SerializeObject(new { colour = \"#b8b8b8\" }).ToString());\n    else return new Flag() { };\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Flags from Flagsmith\nDESCRIPTION: Shows how to fetch all feature flags from Flagsmith and handle the response using success and failure callbacks, logging the flag names, enabled status, and values.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/android.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nflagsmith.getFeatureFlags { result ->\n    result.fold(\n        onSuccess = { flagList ->\n            Log.i(\"Flagsmith\", \"Current flags:\")\n            flagList.forEach { Log.i(\"Flagsmith\", \"- ${it.feature.name} - enabled: ${it.enabled} value: ${it.featureStateValue ?: \"not set\"}\") }\n        },\n        onFailure = { err ->\n            Log.e(\"Flagsmith\", \"Error getting feature flags\", err)\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Flag Updates in Flagsmith Swift SDK\nDESCRIPTION: This code demonstrates how to listen for real-time flag updates using the 'flagStream' property. It uses Swift's async/await pattern to handle updates and dispatches UI updates to the main queue.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/ios.mdx#2025-04-21_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nfunc subscribeToFlagUpdates() {\n    Task {\n        for await updatedFlags in flagsmith.flagStream {\n            DispatchQueue.main.async {\n                flags = updatedFlags\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Flagsmith in Rust\nDESCRIPTION: Configures the Flagsmith client in Rust with options for API URL, custom headers, request timeout, local evaluation, environment refresh interval, analytics, and default flag handling.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_52\n\nLANGUAGE: rust\nCODE:\n```\nuse reqwest::header::{self, HeaderMap};\n// Optional Arguments\nlet options = FlagsmithOptions {\n    // Override the default Flagsmith API URL if you are self-hosting.\n    // Defaults to https://edge.api.flagsmith.com/api/v1/\n    api_url: \"https://edge.flagsmith.com/api/v1/\".to_string(),\n\n    // You can pass custom headers to the Flagsmith API with this HashMap\n    // This can be helpful, for example, when sending request IDs to help trace requests.\n    // Defaults to an empty header::HeaderMap.\n    custom_headers: header::HeaderMap::new(),\n\n    // The network timeout in seconds.\n    // Defaults to 10 seconds\n    request_timeout_seconds: 10,\n\n    // Controls which mode to run in; local or remote evaluation.\n    // See the `SDKs Overview Page` for more info\n    // Defaults to False.\n    enable_local_evaluation: false,\n\n    // When running in local evaluation mode, defines\n    // how often to request an updated Environment document in milliseconds.\n    // Defaults to 60 seconds\n    environment_refresh_interval_mills: 60* 1000,\n\n    // Controls whether Flag Analytics data is sent to the Flagsmith API\n    // See https://docs.flagsmith.com/advanced-use/flag-analytics\n    // Defaults to False\n    enable_analytics: false,\n\n    //Function that will be used if the API doesn't respond, or an unknown\n    // feature is Requested\n    // Defaults to None\n    default_flag_handler: None\n\n    // Provide an offline handler to use with offline mode, or as a means of returning default flags\n    offline_handler: None\n\n    // Set the SDK into offline mode(offline_handler must be set)\n    offline_mode: false\n};\n\n// Required Arguments\n// Your API Token.\n// Note that this is either the `Environment API` key or the `Server Side SDK Token`\n// depending on if you are using Local or Remote Evaluation\nlet FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY = \"some_key\".to_string();\n\nlet flagsmith = Flagsmith::new(\n        FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY,\n        options,\n    );\n\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Offline Handler in Node.js\nDESCRIPTION: This TypeScript/JavaScript snippet demonstrates how to set up an offline handler in a Node.js application using the Flagsmith library. It shows using a built-in LocalFileHandler and creating a custom offline handler by implementing the BaseOfflineHandler interface.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Flagsmith, LocalFileHandler } from 'flagsmith-nodejs';\n\nconst flagsmith = new Flagsmith({\n    offlineMode: true,\n    offlineHandler: new LocalFileHandler('./flagsmith.json'),\n});\n\nimport type { BaseOfflineHandler, EnvironmentModel } from 'flagsmith-nodejs';\n\nclass CustomOfflineHandler implements BaseOfflineHandler {\n    getEnvironment(): EnvironmentModel {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Boolean Trait as String with JavaScript SDK\nDESCRIPTION: This snippet illustrates setting a boolean trait 'accepted_cookies' as a string value 'true' using the Flagsmith JavaScript SDK. It shows compatibility with different data type representations.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/basic-features/segments.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nflagsmith.setTrait('accepted_cookies', 'true');\n```\n\n----------------------------------------\n\nTITLE: Initializing Flagsmith Client with Edge API URL in Java\nDESCRIPTION: This code snippet demonstrates how to initialize the Flagsmith client in Java, specifically setting the API URL to use the Edge API endpoint. It shows how to override the default API URL to point to the Edge API.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/edge-api.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nFlagsmithClient flagsmithClient = FlagsmithClient.newBuilder()\n        .setApiKey(\"aaa\"))\n        .withApiUrl(\"https://edge.api.flagsmith.com/api/v1/\")\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Installing Flagsmith with Docker Compose\nDESCRIPTION: This snippet shows how to download the Flagsmith docker-compose.yml file and start the entire Flagsmith environment with a single command. After running these commands, the Flagsmith dashboard will be available at http://localhost:8000/.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o docker-compose.yml https://raw.githubusercontent.com/Flagsmith/flagsmith/main/docker-compose.yml\ndocker-compose -f docker-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Installing Flagsmith SDK via Swift Package Manager in iOS\nDESCRIPTION: Adds the Flagsmith SDK as a dependency to the project's Package.swift file, specifying the GitHub repository and version.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/ios.mdx#2025-04-21_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n    .package(url: \"https://github.com/Flagsmith/flagsmith-ios-client.git\", from: \"<SwiftPMVersion />\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Flagsmith API URLs\nDESCRIPTION: Demonstrates how to configure custom API and event source URLs for self-hosted Flagsmith instances or custom deployments, including realtime flag update support.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/android.md#2025-04-21_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n        flagsmith = Flagsmith(\n            environmentKey = Helper.environmentDevelopmentKey,\n            context = context,\n            baseUrl = \"https://flagsmith.example.com/api/v1/\"),\n            eventSourceUrl = \"https://realtime.flagsmith.example.com/\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Flagsmith SDK in iOS AppDelegate\nDESCRIPTION: Sets up the Flagsmith SDK in the application delegate, importing the necessary module and setting the API key.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/ios.mdx#2025-04-21_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport FlagsmithClient\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n\nFlagsmith.shared.apiKey = \"<YOUR_ENVIRONMENT_KEY>\"\n// The rest of your launch method code\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Flagsmith Client\nDESCRIPTION: Code to create a new Flagsmith client instance in Node.js with environment configuration.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Flagsmith } from 'flagsmith-nodejs';\n\nconst flagsmith = new Flagsmith({\n    environmentKey: 'FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY',\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Python Flagsmith SDK\nDESCRIPTION: Command to install the Flagsmith SDK via pip for Python applications.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flagsmith\n```\n\n----------------------------------------\n\nTITLE: Flag Evaluation Example - JavaScript\nDESCRIPTION: Example showing how a feature flag is evaluated in the Flagsmith SDK. The SDK tracks these evaluations for analytics purposes with calls aggregated and reported every 10 seconds.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/flag-analytics.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nflagsmith.hasFeature(\"myCoolFeature\")\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Flag Status in Dart\nDESCRIPTION: Check if a specific feature flag exists and is enabled, then execute conditional code based on the flag's status.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nbool featureEnabled = await flagsmithClient.isFeatureFlagEnabled(\"my_test_feature\");\nif (featureEnabled) {\n    // run the code to execute enabled feature\n} else {\n    // run the code if feature switched off\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Flagsmith API (Bash)\nDESCRIPTION: Commands to install dependencies, migrate the database, and serve the Flagsmith API. This snippet also includes instructions for creating an initial superuser and running tests.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-api.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd api\nmake install\nmake django-migrate\nmake serve\n```\n\n----------------------------------------\n\nTITLE: Creating Segment Override in Flagsmith API (Python)\nDESCRIPTION: This script creates a segment override for a feature in Flagsmith. It sets up the necessary data and sends a POST request to create a feature state for a specific segment.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/rest.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncreate_segment_override_url = f\"{API_URL}/features/featurestates/\"\nfeature_state_data = {\n    \"feature\": FEATURE_ID,\n    \"feature_segment\": feature_segment_id,\n    \"environment\": ENVIRONMENT_ID,\n    \"enabled\": ENABLE_FOR_SEGMENT,\n    \"feature_state_value\": {\n        \"type\": \"unicode\",\n        \"string_value\": VALUE_FOR_SEGMENT\n    }\n}\ncreate_feature_state_response = session.post(create_segment_override_url, json=feature_state_data)\nassert create_feature_state_response.status_code == 201\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Configuration in Flagsmith Swift SDK\nDESCRIPTION: This snippet shows how to override the default configuration of the Flagsmith SDK. It sets the API key, custom base URL for the API, and a custom event source base URL for real-time updates.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/ios.mdx#2025-04-21_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n\n    Flagsmith.shared.apiKey = \"<YOUR_API_KEY>\"\n    Flagsmith.shared.baseURL = \"https://flagsmith.example.com/api/v1/\"\n    Flagsmith.eventSourceBaseURL = \"https://realtime.flagsmith.example.com/\"\n    // The rest of your launch method code\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Flags in Flagsmith\nDESCRIPTION: Shows how to provide default flag values during SDK initialization, ensuring the application has fallback values when the API is unavailable.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/android.md#2025-04-21_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval defaultFlags = listOf(\n    Flag(\n        feature = Feature(\n            id = 345345L,\n            name = \"Flag 1\",\n            createdDate = \"2023‐07‐07T09:07:16Z\",\n            description = \"Flag 1 description\",\n            type = \"CONFIG\",\n            defaultEnabled = true,\n            initialValue = \"true\"\n        ), enabled = true, featureStateValue = \"value1\"\n    ),\n    Flag(\n        feature = Feature(\n            id = 34345L,\n            name = \"Flag 2\",\n            createdDate = \"2023‐07‐07T09:07:16Z\",\n            description = \"Flag 2 description\",\n            type = \"CONFIG\",\n            defaultEnabled = true,\n            initialValue = \"true\"\n        ), enabled = true, featureStateValue = \"value2\"\n    ),\n)\n\n// Then pass these during initialisation:\nflagsmith = Flagsmith(\n    environmentKey = FlagsmithConfigHelper  environmentDevelopmentKey,\n    defaultFlags = defaultFlags,\n    context = context)\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment Flags in .NET\nDESCRIPTION: Code to get and check feature flags in C# with both sync and async options.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n# Sync\n# The method below triggers a network request\nvar flags = _flagsmithClient.GetEnvironmentFlags().Result;  # This method triggers a network request\nvar showButton = flags.IsFeatureEnabled(\"secret_button\").Result;\nvar buttonData = flags.GetFeatureValue(\"secret_button\").Result;\n\n# Async\n# The method below triggers a network request\nvar flags = await _flagsmithClient.GetEnvironmentFlags();  # This method triggers a network request\nvar showButton = await flags.IsFeatureEnabled(\"secret_button\");\nvar buttonData = await flags.GetFeatureValue(\"secret_button\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Flagsmith on the Client in SSR\nDESCRIPTION: Example of initializing Flagsmith on the client-side with the state passed from the server in a non-Next.js SSR environment.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/nextjs-and-ssr.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nflagsmith.setState(state);\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagsmith SDK Initialization Options in Markdown\nDESCRIPTION: A markdown table detailing various initialization options for the Flagsmith SDK. It includes property names, descriptions, whether they are required, and default values. The table covers options for environment setup, callbacks, caching, analytics, and API configuration.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/javascript.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Property                                                                                    |                                                                                                                    Description                                                                                                                    | Required |                                         Default Value |\n| ------------------------------------------------------------------------------------------- | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | -------: | ----------------------------------------------------: |\n| `environmentID: string`                                                                     |                                                                          Defines which project environment you wish to get flags for. _example ACME Project - Staging._                                                                           |  **YES** |                                                  null |\n| `onChange?: (previousFlags:IFlags, params:IRetrieveInfo, loadingState:LoadingState)=> void` |                                           Your callback function for when the flags are retrieved `(previousFlags,{isFromServer:true/false,flagsChanged: true/false, traitsChanged:true/false})=>{...}`                                           |  **YES** |                                                  null |\n| `onError?: (res:{message:string}) => void`                                                  |                                                                                         Callback function on failure to retrieve flags. `(error)=>{...}`                                                                                          |          |                                                  null |\n| `realtime?:boolean`                                                                         |                                                                                   Whether to listen for [Real Time Flag events](/advanced-use/real-time-flags)                                                                                    |          |                                                 false |\n| `AsyncStorage?:any`                                                                         | Needed in certain frameworks cacheFlags and enableAnalytics options, used to tell the library what implementation of AsyncStorage your app uses, e.g. @react-native-community/async-storage, for web this defaults to an internal implementation. |          | built in implementation for web, otherwise undefined. |\n| `cacheFlags?: boolean`                                                                      |                       Any time flags are retrieved they will be cached, flags and identities will then be retrieved from local storage before hitting the API (see cache options). Requires AsyncStorage to be accessible.                        |          |                                                  null |\n| `cacheOptions?: \\{ttl?:number, skipAPI?:boolean, loadStale?:boolean\\}`                      |              A ttl in ms (default to 0 which means infinite) and option to skip hitting the API in flagsmith.init if there's cache available. Setting `loadStale: true` will still use cached values regardless of skipping the API.              |          |            \\{ttl:0, skipAPI:false, loadStale: false\\} |\n| `enableAnalytics?: boolean`                                                                 |                                                                     [Enable sending flag analytics](/advanced-use/flag-analytics.md) for getValue and hasFeature evaluations.                                                                     |          |                                                 false |\n| `enableLogs?: boolean`                                                                      |                                                                                                     Enables logging for key Flagsmith events                                                                                                      |          |                                                  null |\n| `defaultFlags?: {flag_name: {enabled: boolean, value: string,number,boolean}}`              |                                                                         Allows you define default features, these will all be overridden on first retrieval of features.                                                                          |          |                                                  null |\n| `preventFetch?: boolean`                                                                    |                                                                                          If you want to disable fetching flags and call getFlags later.                                                                                           |          |                                                 false |\n| `state?: IState`                                                                            |                                                                                         Set a predefined state, useful for SSR / isomorphic applications.                                                                                         |          |                                                 false |\n| `api?: string`                                                                              |                                                                         Use this property to define where you're getting feature flags from, e.g. if you're self hosting.                                                                         |          |                https://edge.api.flagsmith.com/api/v1/ |\n| `eventSourceUrl?: string`                                                                   |                                                       Use this property to define where you're getting real-time flag update events (server sent events) from, e.g. if you're self hosting.                                                       |          |                https://edge.api.flagsmith.com/api/v1/ |\n| `identity?: string`                                                                         |                                                                                Specifying an identity will fetch flags for that identity in the initial API call.                                                                                 |  **YES** |                                                  null |\n| `traits?:Record<string, string or number or boolean>`                                       |                                                                                 Specifying traits will send the traits for that identity in the initial API call.                                                                                 |  **YES** |                                                  null |\n```\n\n----------------------------------------\n\nTITLE: Querying Flagsmith Edge API for Environment Document\nDESCRIPTION: A curl command to retrieve the Environment Document from the Flagsmith Edge API, including pagination support for large datasets with more than 1MB of override data.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://edge.api.flagsmith.com/api/v1/environment-document \\\n  -H 'X-Environment-Key: <Your server-side environment key>' \\\n  --verbose\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Flag Configuration in Dart\nDESCRIPTION: Get the configuration value for a specific feature flag and execute conditional code based on its presence.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal myRemoteConfig = await flagsmithClient.getFeatureFlagValue(\"my_test_feature\");\nif (myRemoteConfig != null) {\n    // run the code to use remote config value\n} else {\n    // run the code without remote config\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Identity with Traits\nDESCRIPTION: Example of creating an identity with traits and receiving flags in a single API call.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/rest.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST 'https://edge.api.flagsmith.com/api/v1/identities/' \\\n--header 'X-Environment-Key: <Your client-side SDK key>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"identifier\":\"identifier_5\",\n    \"traits\": [\n        {\n            \"trait_key\": \"my_trait_key\",\n            \"trait_value\": 123.5\n        },\n        {\n            \"trait_key\": \"my_other_key\",\n            \"trait_value\": true\n        }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Offline Handler in Ruby\nDESCRIPTION: This Ruby code snippet illustrates how to configure an offline handler using the Flagsmith library. It demonstrates using a built-in local file handler and defining a custom offline handler class.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\n# Using the built-in local file handler\n\noffline_handler = \\\nFlagsmith::OfflineHandlers::LocalFileHandler.new(\"environment.json\")\n\n# Instantiate the client with offline mode set to true\n\nflagsmith = Flagsmith::Client.new(\n  offline_mode: true,\n  offline_handler: offline_handler,\n)\n\n# Defining a custom offline handler\n\nclass MyCustomOfflineHandler\n  def environment\n    # Some code providing the environment for the handler\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Offline Handler in Python\nDESCRIPTION: This Python snippet demonstrates how to set up an offline handler using the Flagsmith library. It shows both using a built-in local file handler and defining a custom offline handler by extending the base class.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n# Using the built-in local file handler\n\nlocal_file_handler = LocalFileHandler(environment_document_path=\"/app/environment.json\")\nflagsmith = Flagsmith(..., offline_handler=local_file_handler)\n\n# Defining a custom offline handler\n\nclass MyCustomOfflineHandler(BaseOfflineHandler):\n    def get_environment(self) -> EnvironmentModel:\n        return some_function_to_get_the_environment()\n```\n\n----------------------------------------\n\nTITLE: Creating Flagsmith Client and Making Requests in Elixir\nDESCRIPTION: This snippet demonstrates how to create a Flagsmith client with custom configuration options and how to make requests using the client or directly with configuration options. It shows two methods: creating a client configuration and using it, or passing configuration options directly to the get_environment_flags function.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_55\n\nLANGUAGE: elixir\nCODE:\n```\nclient_configuration = Flagsmith.Client.new(\n        environment_key: \"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\",\n        api_url: \"https://api.yourselfhostedflagsmith.com/api/v1\",\n        default_flag_handler: function_defaults_to_not_found,\n        custom_headers: [{\"to add to\", \"the requests\"}],\n        request_timeout_milliseconds: 5000,\n        enable_local_evaluation: false,\n        environment_refresh_interval_milliseconds: 60_000,\n        retries: 0,\n        enable_analytics: false\n)\n\n{:ok, flags} = Flagsmith.Client.get_environment_flags(client_configuration)\n\n# or\n\n{:ok, flags} = Flagsmith.Client.get_environment_flags(\n        environment_key: \"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\",\n        api_url: \"https://api.yourselfhostedflagsmith.com/api/v1\",\n        default_flag_handler: function_defaults_to_not_found,\n        custom_headers: [{\"to add to\", \"the requests\"}],\n        request_timeout_milliseconds: 5000,\n        enable_local_evaluation: false,\n        environment_refresh_interval_milliseconds: 60_000,\n        retries: 0,\n        enable_analytics: false\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Types for Flagsmith JavaScript Client\nDESCRIPTION: Demonstrates how to use TypeScript to enforce type safety for feature and trait names in the Flagsmith JavaScript client.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/javascript.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype FlagOptions = 'font_size' | 'hero';\ntype TraitOptions = 'example_trait';\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// enforces you passing the correct key to flagsmith.getValue(flag:FlagOptions), flagsmith.getTrait(trait:TraitOptions)\nimport flagsmith from 'flagsmith';\nconst typedFlagsmith = flagsmith as IFlagsmith<FlagOptions, TraitOptions>;\n\n// Similarly for the useFlagsmith hook is typed with useFlagsmith(flags:FlagOptions[],traits:TraitOptions[])\nconst flagsmith = useFlagsmith<FlagOptions, TraitOptions>(); // enforces flagsmith.getValue()\n\n// for useFlags this will ensure you only can pass correct keys also\nconst flags = useFlags<FlagOptions, TraitOptions>(['font_size'], ['example_trait']);\n\n// for getting JSON values this will type the return\nconst json = flagsmith.getValue<{ foo: string | null; bar: string | null }>('json_value', {\n json: true,\n fallback: { foo: null, bar: null },\n});\nconsole.log(json.foo); // typed as {foo: string|null, bar: string|null}\n\n// If a type is not specified for getValue it will asume it from the type of fallback. In this case, a number.\nconst font_size = flagsmith.getValue('font_size', { fallback: 12 });\n```\n\n----------------------------------------\n\nTITLE: Node.js Redis Cache Implementation\nDESCRIPTION: Example of implementing a custom Redis-based cache for Flagsmith in Node.js, implementing the FlagsmithCache interface.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Flagsmith, Flags } from 'flagsmith-nodejs';\nimport type { BaseOfflineHandler, EnvironmentModel, FlagsmithCache } from 'flagsmith-nodejs';\nimport * as redis from 'redis';\n\nconst redisClient = redis.createClient({\n    url: 'localhost:6379',\n});\n\nconst redisFlagsmithCache = {\n    async get(key: string): Promise<Flags | undefined> {\n        const cachedValue = await redisClient.get(key);\n        if (cachedValue) {\n            return new Flags(JSON.parse(cachedValue));\n        }\n    },\n    async set(key: string, value: Flags): Promise<void> {\n        await redisClient.set(key, JSON.stringify(value), { EX: 60 });\n    },\n} satisfies FlagsmithCache;\n\nconst flagsmith = new Flagsmith({\n    environmentKey: 'ser...',\n    cache: redisFlagsmithCache,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Offline Handler in Rust\nDESCRIPTION: This Rust code demonstrates how to configure an offline handler using the Flagsmith library. It shows using a built-in local file handler and defining a custom offline handler by implementing the OfflineHandler trait.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_40\n\nLANGUAGE: rust\nCODE:\n```\n# Using the built-in local file handler\n\nlet handler = offline_handler::LocalFileHandler::new(\"environment.json\").unwrap();\n\n# Instantiate the client with offline handler\n\n  let flagsmith_options = FlagsmithOptions {\n    offline_handler: Some(Box::new(handler)),\n    ..Default::default()\n};\n\nlet flagsmith = Flagsmith::new(ENVIRONMENT_KEY.to_string(), flagsmith_options);\n\n\n# Defining a custom offline handler\nimpl OfflineHandler for MyCustomOfflineHandler {\n    fn get_environment(&self) -> Environment {\n      ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Printing Feature Flags in iOS\nDESCRIPTION: Demonstrates how to fetch all feature flags from Flagsmith and print their details, including name, value, and enabled status.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/ios.mdx#2025-04-21_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nFlagsmith.shared.getFeatureFlags() { (result) in\n    switch result {\n    case .success(let flags):\n        for flag in flags {\n            let name = flag.feature.name\n            let value = flag.value?.stringValue\n            let enabled = flag.enabled\n            print(name, \"= enabled:\", enabled, \"value:\", value ?? \"nil\")\n        }\n    case .failure(let error):\n        print(error)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Flagsmith in PHP\nDESCRIPTION: Initializes the Flagsmith client in PHP with configuration for API key, host URL, custom headers, environment TTL, retries, analytics, and default flag handling.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$flagsmith = new Flagsmith(\n    /*\n    Your API Token.\n    Note that this is either the `Environment API` key or the `Server Side SDK Token`\n    depending on if you are using Local or Remote Evaluation\n    Required.\n    */\n    string $apiKey,\n\n    /*\n    Override the default Flagsmith API URL if you are self-hosting.\n    Optional.\n    Defaults to https://edge.api.flagsmith.com/api/v1/\n    */\n    string $host = self::DEFAULT_API_URL,\n\n    /*\n    Custom http headers can be added to the http client\n    Optional\n    */\n    object $customHeaders = null,\n\n    /*\n    Set environment refresh rate with polling manager.\n    This also enables local evaluation.\n    Optional.\n    Defaults to null\n    */\n    int $environmentTtl = null,\n\n    /*\n    Retry Object, instance of Flagsmith\\Utils\\Retry\n    Retry configuration for api calls.\n    Defaults to 3 retries for every api call.\n    */\n    Retry $retries = null,\n\n    /*\n    Controls whether Flag Analytics data is sent to the Flagsmith API\n    See https://docs.flagsmith.com/advanced-use/flag-analytics\n    Optional\n    Defaults to false\n    */\n    bool $enableAnalytics = false,\n\n    /*\n    You can specify default Flag values on initialisation.\n    Optional\n    */\n    Closure $defaultFlagHandler = null\n\n    /*\n    (Available in 4.4.0+) Set the SDK into offline mode\n    Optional\n    */\n    bool $offlineMode = false,\n\n    # (Available in 4.4.0+) Provide an offline handler to use with offline mode, or\n    # as a means of returning default flags.\n    # Optional\n    IOfflineHandler $offlineHandler = null,\n);\n```\n\n----------------------------------------\n\nTITLE: Authenticating Public SDK API Request with Environment Key\nDESCRIPTION: Example showing how to include the environment key as a header for public SDK API authentication.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/rest.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAuthorization: Api-Key <API TOKEN FROM ORGANISATION PAGE>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Identity Flags in .NET\nDESCRIPTION: This snippet demonstrates fetching flags for an identity using the Flagsmith .NET SDK. It shows both synchronous and asynchronous methods to get identity flags, set traits, and check feature enablement.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nvar identifier = \"delboy@trotterstraders.co.uk\";\nvar traitKey = \"car_type\";\nvar traitValue = \"robin_reliant\";\nvar traitList = new List<Trait> { new Trait(traitKey, traitValue) };\n\n# Sync\nvar flags = _flagsmithClient.GetIdentityFlags(identifier, traitList).Result;\nvar showButton = flags.IsFeatureEnabled(\"secret_button\").Result;\n\n# Async\nvar flags = await _flagsmithClient.GetIdentityFlags(identifier, traitList);\nvar showButton = await flags.IsFeatureEnabled(\"secret_button\");\n```\n\n----------------------------------------\n\nTITLE: Java Flagsmith Client with Default Caching Configuration\nDESCRIPTION: Initializes a Flagsmith client with default in-memory caching settings using Caffeine. Default configuration includes max size of 10 and 5-minute expiration time.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_56\n\nLANGUAGE: java\nCODE:\n```\nfinal FlagsmithClient flagsmithClient = FlagsmithClient.newBuilder()\n                .setApiKey(\"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\")\n                .withConfiguration(FlagsmithConfig\n                        .newBuilder()\n                        .baseURI(\"https://flagsmith.example.com/api/v1/\")\n                        .build())\n                .withCache(FlagsmithCacheConfig\n                        .newBuilder()\n                        .build())\n                .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Flag Handler in Java\nDESCRIPTION: This Java code snippet shows how to create a default flag handler and integrate it with the Flagsmith client. It defines a method to handle default flag values and builds the Flagsmith client with this handler.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nprivate static FlagsmithClient flagsmith = FlagsmithClient\n    .newBuilder()\n    .setDefaultFlagValueFunction(HelloController::defaultFlagHandler)\n    .setApiKey(System.getenv(\"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\"))\n    .build();\n\nprivate static DefaultFlag defaultFlagHandler(String featureName) {\n    DefaultFlag flag = new DefaultFlag();\n    flag.setEnabled(Boolean.FALSE);\n\n    if (featureName.equals(\"secret_button\")) {\n        flag.setValue(\"{\\\"colour\\\": \\\"#ababab\\\"}\");\n    } else {\n        flag.setValue(null);\n    }\n\n    return flag;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Identity Flags in Java\nDESCRIPTION: This code shows how to get flags for an identity using the Flagsmith Java SDK. It sets an identifier and traits, makes a network request for flags, and then checks feature enablement and retrieves a feature value.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nString identifier = \"delboy@trotterstraders.co.uk\"\nMap<String, Object> traits = new HashMap<String, Object>();\ntraits.put(\"car_type\", \"robin_reliant\");\n\n// The method below triggers a network request\nFlags flags = flagsmith.getIdentityFlags(identifier, traits);\nBoolean showButton = flags.isFeatureEnabled(featureName);\nObject value = flags.getFeatureValue(featureName);\n```\n\n----------------------------------------\n\nTITLE: Getting Flagsmith Flags with User Traits\nDESCRIPTION: Shows how to fetch feature flags for a user identity while simultaneously setting user traits, enabling flag targeting based on user attributes.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/android.md#2025-04-21_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nflagsmith.getFeatureFlags(identity = \"test-user@gmail.com\", traits = listOf(Trait(key = \"set-from-client\", value = \"12345\"))) { result ->\n    result.fold(\n        onSuccess = { flagList ->\n            Log.i(\"Flagsmith\", \"Current flags:\")\n            flagList.forEach { Log.i(\"Flagsmith\", \"- ${it.feature.name} - enabled: ${it.enabled} value: ${it.featureStateValue ?: \"not set\"}\") }\n        },\n        onFailure = { err ->\n            Log.e(\"Flagsmith\", \"Error getting feature flags\", err)\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagsmith Helm Chart Values\nDESCRIPTION: This YAML snippet defines the configurable parameters for the Flagsmith Helm chart. It includes settings for both the API and frontend components, covering aspects such as image configuration, deployment options, resource allocation, and health probes.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/kubernetes.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  image:\n    repository: flagsmith/flagsmith-api\n    tag: appVersion\n    imagePullPolicy: IfNotPresent\n    imagePullSecrets: []\n  separateApiAndFrontend: true\n  replicacount: 1\n  deploymentStrategy: {}\n  resources: {}\n  podLabels: {}\n  extraEnv: {}\n  secretKey: null\n  secretKeyFromExistingSecret:\n    enabled: false\n    name: null\n    key: null\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n  podSecurityContext: {}\n  defaultPodSecurityContext:\n    enabled: true\n  livenessProbe:\n    failureThreshold: 5\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 2\n  logging:\n    format: generic\n  readinessProbe:\n    failureThreshold: 10\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 2\n  dbWaiter:\n    image:\n      repository: willwill/wait-for-it\n      tag: latest\n      imagePullPolicy: IfNotPresent\n    timeoutSeconds: 30\n\nfrontend:\n  enabled: true\n  image:\n    repository: flagsmith/flagsmith-frontend\n    tag: appVersion\n    imagePullPolicy: IfNotPresent\n    imagePullSecrets: []\n  replicacount: 1\n  deploymentStrategy: {}\n  resources: {}\n  apiProxy:\n    enabled: true\n  extraEnv: {}\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n  podSecurityContext: {}\n  defaultPodSecurityContext:\n    enabled: true\n  livenessProbe:\n    failureThreshold: 20\n    initialDelaySeconds: 20\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 10\n  readinessProbe:\n    failureThreshold: 20\n    initialDelaySeconds: 20\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 10\n```\n\n----------------------------------------\n\nTITLE: Fetching Custom Field Definitions via Flagsmith Admin API\nDESCRIPTION: This shell command demonstrates how to fetch the definitions of custom fields for an organization using the Flagsmith Admin API. It requires the organization ID and an API key.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/custom-fields.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl \"https://api.flagsmith.com/api/v1/organisations/YOUR_ORGANISATION_ID/metadata-model-fields/ \\\n  -H \"Authorization: Api-Key YOUR_API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Identity Flags in Go\nDESCRIPTION: This snippet demonstrates how to fetch flags for an identity using the Flagsmith Go SDK. It creates a trait, makes a network request to get flags, and then checks feature enablement and retrieves a feature value.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_23\n\nLANGUAGE: go\nCODE:\n```\ntrait := flagsmith.Trait{TraitKey: \"trait\", TraitValue: \"trait_value\"}\ntraits = []*flagsmith.Trait{&trait}\n\n// The method below triggers a network request\nflags, _ := client.GetIdentityFlags(ctx, identifier, traits)\n\nshowButton, _ := flags.IsFeatureEnabled(\"secret_button\")\nbuttonData, _ := flags.GetFeatureValue(\"secret_button\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Offline Handler in Java\nDESCRIPTION: This Java code snippet shows how to configure an offline handler using the Flagsmith library. It demonstrates using a built-in local file handler and defining a custom offline handler by implementing the IOfflineHandler interface.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_36\n\nLANGUAGE: java\nCODE:\n```\n// Using the built-in local file handler\n\nFlagsmithConfig flagsmithConfig = FlagsmithConfig.newBuilder()\n    .withOfflineHandler(new LocalFileHandler(\"/app/environment.json\"))\n    ...\n    .build()\n\n// Defining a custom offline handler\n\npublic class MyCustomOfflineHandler implements IOfflineHandler:\n    public EnvironmentModel getEnvironment() {\n        return someMethodToGetTheEnvironment()\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Identity Flags in Ruby\nDESCRIPTION: This snippet shows how to get flags for an identity using the Flagsmith Ruby SDK. It sets an identifier and traits, retrieves flags, and then checks feature enablement and gets a feature value.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\n$identifier = 'delboy@trotterstraders.co.uk'\n$traits = {'car_type': 'robin_reliant'}\n\n$flags = $flagsmith.get_identity_flags($identifier, **$traits)\n$show_button = $flags.is_feature_enabled('secret_button')\n$button_data = $flags.get_feature_value('secret_button')\n```\n\n----------------------------------------\n\nTITLE: Getting Flagsmith Flags for a Specific User Identity\nDESCRIPTION: Demonstrates retrieving feature flags for a specific user identity, allowing for personalized feature flag values based on the user identifier.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/android.md#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nflagsmith.getFeatureFlags(identity = \"test-user@gmail.com\") { result ->\n    result.fold(\n        onSuccess = { flagList ->\n            Log.i(\"Flagsmith\", \"Current flags:\")\n            flagList.forEach { Log.i(\"Flagsmith\", \"- ${it.feature.name} - enabled: ${it.enabled} value: ${it.featureStateValue ?: \"not set\"}\") }\n        },\n        onFailure = { err ->\n            Log.e(\"Flagsmith\", \"Error getting feature flags\", err)\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Flag Value for Specific User in Dart\nDESCRIPTION: Get the configuration value of a feature flag for a specific user identity.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal myRemoteConfig = await flagsmithClient.getFeatureFlagValue('my_test_feature', user: user);\nif (myRemoteConfig != null) {\n    // run the code to use remote config value\n} else {\n    // run the code without remote config\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Flagsmith in Next.js Middleware\nDESCRIPTION: Example of using Flagsmith in Next.js middleware to control routing based on feature flags and remote configuration.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/nextjs-and-ssr.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport flagsmith from 'flagsmith/next-middleware';\n\nexport async function middleware(request: NextRequest) {\n const identity = request.cookies.get('user');\n\n if (!identity) {\n  // redirect to homepage\n  return NextResponse.redirect(new URL('/', request.url));\n }\n\n await flagsmith.init({\n  environmentID: '<YOUR_SERVERSIDE_ENVIRONMENT_KEY>',\n  identity,\n });\n\n // Return a different URL based on a feature flag\n if (flagsmith.hasFeature('beta')) {\n  return NextResponse.redirect(new URL(`/account-v2/`, request.url));\n }\n\n // Return a different URL based on a remote config\n const theme = flagsmith.getValue('colour');\n return NextResponse.redirect(new URL(`/account/${theme}`, request.url));\n}\n\nexport const config = {\n matcher: '/login',\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting an Identity in Flagsmith API (Python)\nDESCRIPTION: This script shows how to delete a regular identity in Flagsmith using the API. It sends a DELETE request to remove the specified identity based on its ID.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/rest.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nimport requests\n\nTOKEN = os.environ.get(\"API_TOKEN\")  # obtained from Account section in dashboard\nENV_KEY = os.environ.get(\"ENV_KEY\")  # obtained from Environment settings in dashboard\nIDENTITY_ID = os.environ[\"IDENTITY_ID\"] # obtain this from the URL on your dashboard when viewing an identity\nBASE_URL = \"https://api.flagsmith.com/api/v1\"  # update this if self hosting\n\nsession = requests.Session()\nsession.headers.update(\n    {\"Authorization\": f\"Token {TOKEN}\", \"Content-Type\": \"application/json\"}\n)\n\n# delete the existing identity based on the identity id\ndelete_identity_url = f\"{BASE_URL}/environments/{ENV_KEY}/identities/{IDENTITY_ID}/\"\ndelete_identity_response = session.delete(delete_identity_url)\nassert delete_identity_response.status_code == 204\n```\n\n----------------------------------------\n\nTITLE: Retrieving Identity Flags in PHP\nDESCRIPTION: This code demonstrates fetching flags for an identity using the Flagsmith PHP SDK. It sets an identifier and traits as an object, retrieves flags, and then checks feature enablement and gets a feature value.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$identifier = 'delboy@trotterstraders.co.uk';\n$traits = (object) [ 'car_type' => 'robin_reliant' ];\n\n$flags = $flagsmith->getIdentityFlags($identifier, $traits);\n$showButton = $flags->isFeatureEnabled('secret_button');\n$buttonData = $flags->getFeatureValue('secret_button');\n```\n\n----------------------------------------\n\nTITLE: Retrieving JSON Feature Values in JavaScript\nDESCRIPTION: Shows how to use the getValue function to retrieve and parse JSON feature values, with fallback option.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/javascript.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst json = flagsmith.getValue('json_value', {\n json: true,\n fallback: { foo: null, bar: null },\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Flag Existence in Dart\nDESCRIPTION: Check if a specific feature flag exists in your Flagsmith configuration.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nbool featureExists = await flagsmithClient.hasFeatureFlag(\"my_test_feature\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Flag Value in iOS\nDESCRIPTION: Demonstrates how to fetch the value of a specific feature flag for a given identity (or nil for default).\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/ios.mdx#2025-04-21_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nFlagsmith.shared.getFeatureValue(withID: \"test_feature2\", forIdentity: nil) { (result) in\n    switch result {\n    case .success(let value):\n        print(value ?? \"nil\")\n    case .failure(let error):\n        print(error)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing RBAC Relationships with Mermaid Diagram\nDESCRIPTION: This Mermaid diagram illustrates the relationships between custom roles, built-in roles, groups, users, and Admin API keys in Flagsmith's RBAC system. It shows how roles are assigned to different entities and how groups contain multiple users.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/rbac.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR;\n    R[Custom roles] -->|Assigned to| G[Groups];\n    B[Built-in role] -->|Assigned to| U[Users];\n    R -->|Assigned to| U;\n    R -->|Assigned to| A[Admin API keys];\n    G -->|Contains many| U;\n```\n\n----------------------------------------\n\nTITLE: Setting User Traits in Flagsmith\nDESCRIPTION: Shows how to set trait values for a specific user identity, enabling personalized targeting of feature flags based on user attributes.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/android.md#2025-04-21_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nflagsmith.setTrait(Trait(key = \"set-from-client\", value = \"12345\"), identity = \"test@test.com\") { result ->\n    result.fold(\n        onSuccess = { _ ->\n            Log.i(\"Flagsmith\", \"Successfully set trait\")\n\n        },\n        onFailure = { err ->\n            Log.e(\"Flagsmith\", \"Error setting trait\", err)\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagsmith SDK in iOS AppDelegate\nDESCRIPTION: Shows how to override default configuration settings for the Flagsmith SDK, including cache settings, analytics, and default flags.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/ios.mdx#2025-04-21_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    // Override point for customization after application launch.\n    Flagsmith.shared.apiKey = \"<add your API key from the Flagsmith settings page>\"\n\n    // set cache on / off (defaults to off)\n    Flagsmith.shared.cacheConfig.useCache = true\n\n    // set custom cache to use (defaults to shared URLCache)\n    //Flagsmith.shared.cacheConfig.cache = <CUSTOM_CACHE>\n\n    // set skip API on / off (defaults to off)\n    Flagsmith.shared.cacheConfig.skipAPI = false\n\n    // set cache TTL in seconds (defaults to 0, i.e. infinite)\n    Flagsmith.shared.cacheConfig.cacheTTL = 90\n\n    // set analytics on or off\n    Flagsmith.shared.enableAnalytics = true\n\n    // set the analytics flush period in seconds\n    Flagsmith.shared.analyticsFlushPeriod = 10\n\n    Flagsmith.shared.getFeatureFlags() { (result) in\n        print(result)\n    }\n    Flagsmith.shared.hasFeatureFlag(withID: \"freeze_delinquent_accounts\") { (result) in\n        print(result)\n    }\n    //Flagsmith.shared.setTrait(Trait(key: \"<my_key>\", value: \"<my_value>\"), forIdentity: \"<my_identity>\") { (result) in print(result) }\n    //Flagsmith.shared.getIdentity(\"<my_key>\") { (result) in print(result) }\n    return true\n}\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure for Flagsmith Demo\nDESCRIPTION: This HTML snippet shows the initial structure of the web page used in the Flagsmith quick start guide. It includes a simple heading and a button element.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n <head>\n  <meta charset=\"utf-8\" />\n  <title>Flagsmith Quickstart Guide</title>\n </head>\n <body>\n  <h1>Here's our button!</h1>\n  <div id=\"submit_button\">\n   <input type=\"submit\" value=\"Flagsmith Quickstart Button!\" />\n  </div>\n </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Flagsmith with Task Processor\nDESCRIPTION: This YAML snippet demonstrates a basic Docker Compose setup for running Flagsmith with an asynchronous task processor. It includes configurations for PostgreSQL, the Flagsmith API, and the task processor service.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/configuration/task-processor.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npostgres:\n image: postgres:15.5-alpine\n environment:\n  POSTGRES_PASSWORD: password\n  POSTGRES_DB: flagsmith\n container_name: flagsmith_postgres\n\nflagsmith:\n image: flagsmith/flagsmith-api:latest\n environment:\n  DJANGO_ALLOWED_HOSTS: '*'\n  DATABASE_URL: postgresql://postgres:password@postgres:5432/flagsmith\n  ENV: prod\n  TASK_RUN_METHOD: TASK_PROCESSOR\n ports:\n  - '8000:8000'\n depends_on:\n  - postgres\n links:\n  - postgres\n\nflagsmith_processor:\n image: flagsmith/flagsmith-api:latest\n environment:\n  DATABASE_URL: postgresql://postgres:password@postgres:5432/flagsmith\n command:\n  - run-task-processor\n depends_on:\n  - flagsmith\n  - postgres\n```\n\n----------------------------------------\n\nTITLE: Initializing Flagsmith in SSR without Next.js\nDESCRIPTION: Example of initializing Flagsmith on the server-side and passing the state to the client in a non-Next.js SSR environment.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/nextjs-and-ssr.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait flagsmith.init({\n // fetches flags on the server\n environmentID: '<YOUR_SERVERSIDE_ENVIRONMENT_KEY>',\n identity: 'my_user_id', // optionaly specify the identity of the user to get their specific flags\n});\nconst state = flagsmith.getState(); // Pass this data to your client\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment Flags in Ruby\nDESCRIPTION: Code to get and check feature flags in Ruby.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n$flags = $flagsmith.get_environment_flags()\n$show_button = $flags.is_feature_enabled('secret_button')\n$button_data = $flags.get_feature_value('secret_button')\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Flag for Specific User in Dart\nDESCRIPTION: Check if a feature flag is enabled for a specific user identity.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfinal user = Identity(identifier: 'flagsmith_sample_user');\nbool featureEnabled = await flagsmithClient.hasFeatureFlag('my_test_feature', user: user);\nif (featureEnabled) {\n    // run the code to execute enabled feature for given user\n} else {\n    // run the code when feature switched off\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Identity Flags in Rust\nDESCRIPTION: This code shows how to get flags for an identity using the Flagsmith Rust SDK. It sets an identifier, creates a trait, makes a network request for flags, and then checks feature enablement and retrieves a feature value as a string.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\nuse flagsmith::models::SDKTrait;\nuse flagsmith_flag_engine::types::{FlagsmithValue, FlagsmithValueType};\n\nlet identifier = \"delboy@trotterstraders.co.uk\";\n\nlet traits = vec![SDKTrait::new(\n            \"car_type\".to_string(),\n            FlagsmithValue {\n                value: \"robin_reliant\".to_string(),\n                value_type: FlagsmithValueType::String,\n            },\n        )];\n\n// The method below triggers a network request\nlet identity_flags = flagsmith.get_identity_flags(identifier, Some(traits), None).unwrap();\n\nlet show_button = identity_flags.is_feature_enabled(\"secret_button\").unwrap();\nlet button_data = identity_flags.get_feature_value_as_string(\"secret_button\").unwrap();\n```\n\n----------------------------------------\n\nTITLE: Python SDK Transient Traits Implementation\nDESCRIPTION: Implementation of transient traits and identities using Python SDK version 3.8.0 or higher. Shows how to mark individual traits or the entire identity as transient.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/transient-traits.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nidentity_flags = flagsmith.get_identity_flags(\n    identifier=\"my-user\",\n    traits={\n        \"my_trait_key\": {\"value\":123.5, \"transient\": true},\n        \"my_other_key\": True\n    }\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nidentity_flags = flagsmith.get_identity_flags(\n    identifier=\"my-user\",\n    transient=True,\n    traits={\n        \"my_trait_key\": 123.5,\n        \"my_other_key\": True\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Flagsmith via NPM\nDESCRIPTION: Command to install the Flagsmith SDK package via NPM for JavaScript projects.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/javascript.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i flagsmith --save\n```\n\n----------------------------------------\n\nTITLE: Configuring External PostgreSQL Database\nDESCRIPTION: YAML configuration options for connecting Flagsmith to an external PostgreSQL database using various connection methods.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/kubernetes.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\npostgresql:\n enabled: false # turn off the chart-managed postgres\n\ndatabaseExternal:\n enabled: true\n # Can specify the full URL\n url: 'postgres://myuser:mypass@myhost:5432/mydbname'\n # Or can specify each part (url takes precedence if set)\n type: postgres\n host: myhost\n port: 5432\n database: mydbname\n username: myuser\n password: mypass\n # Or can specify a pre-existing k8s secret containing the database URL\n urlFromExistingSecret:\n  enabled: true\n  name: my-precreated-db-config\n  key: DB_URL\n```\n\n----------------------------------------\n\nTITLE: Using Flagsmith in a Next.js Client Component\nDESCRIPTION: Example of using Flagsmith hooks in a client-side component to access feature flags and traits.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/nextjs-and-ssr.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'; // Only required by the app router version.\n\nimport { useFlags } from 'flagsmith/react';\n\nexport function MyComponent() {\n const flags = useFlags(['font_size'], ['example_trait']); // only causes re-render if specified flag values / traits change\n return (\n  <div className=\"App\">\n   font_size: {flags.font_size.value}\n   example_trait: {flags.example_trait}\n  </div>\n );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Flagsmith Instances in JavaScript\nDESCRIPTION: Demonstrates how to create multiple instances of the Flagsmith SDK for identifying multiple users simultaneously within an app.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/javascript.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createFlagsmithInstance } from 'flagsmith';\nconst flagsmith = createFlagsmithInstance();\nconst flagsmithB = createFlagsmithInstance();\n\n// now you can use flagsmith as before but in its own instance\n```\n\n----------------------------------------\n\nTITLE: Updating Context with Transient Email Trait in JavaScript\nDESCRIPTION: Sets up a user identity with a transient email trait. The email will be used for flag evaluation against segments but won't be stored in the Flagsmith database.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/transient-traits.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nflagsmith.updateContext({\n identity: {\n  identifier: 'test-user-with-transient-email',\n  traits: {\n   email: { value: 'alice@example.com', transient: true },\n  },\n },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Flagsmith with Docker Compose (Bash)\nDESCRIPTION: Commands to download the docker-compose.yml file and run the Flagsmith application using Docker Compose. This method runs the entire Flagsmith platform, including the front-end dashboard.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-api.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o docker-compose.yml https://raw.githubusercontent.com/Flagsmith/flagsmith/main/docker-compose.yml\ndocker-compose -f docker-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment Flags in Node.js\nDESCRIPTION: Code to get and check feature flags asynchronously in Node.js.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst flags = await flagsmith.getEnvironmentFlags();\nconst showButton = flags.isFeatureEnabled('secret_button');\nconst buttonData = flags.getFeatureValue('secret_button');\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Configuration for Feature Creation\nDESCRIPTION: This bash snippet demonstrates the output of running 'terraform apply' to create a new feature flag based on the provided configuration. It shows the execution plan and confirmation prompt.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/integrations/terraform.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  # flagsmith_feature.new_standard_feature will be created\n  + resource \"flagsmith_feature\" \"new_standard_feature\" {\n      + default_enabled = (known after apply)\n      + description     = \"This is a new standard feature\"\n      + feature_name    = \"new_standard_feature\"\n      + id              = (known after apply)\n      + initial_value   = (known after apply)\n      + is_archived     = (known after apply)\n      + project_id      = (known after apply)\n      + project_uuid    = \"10421b1f-5f29-4da9-abe2-30f88c07c9e8\"\n      + type            = \"STANDARD\"\n      + uuid            = (known after apply)\n    }\n\nPlan: 1 to add, 0 to change, 0 to destroy.\n\nDo you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n\n  Enter a value: yes\n\nflagsmith_feature.new_standard_feature: Creating...\nflagsmith_feature.new_standard_feature: Creation complete after 2s\n\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Redis Cache in Flagsmith\nDESCRIPTION: Example environment variables for specifying a cache stored in Redis that is automatically updated whenever a flag is changed. This configuration uses a persistent caching mode with Redis as the backend.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-api.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nCACHE_ENVIRONMENT_DOCUMENT_MODE: \"PERSISTENT\"\nCACHE_ENVIRONMENT_DOCUMENT_BACKEND: \"django_redis.cache.RedisCache\"\nCACHE_ENVIRONMENT_DOCUMENT_LOCATION: \"redis://127.0.0.1:6379/1\"\nCACHE_ENVIRONMENT_DOCUMENT_OPTIONS: \"{\\\"PASSWORD\\\": \\\"myredispassword\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cached Flags in Dart\nDESCRIPTION: Set up and use cached flags for more efficient feature flag retrieval.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal config = FlagsmithConfig(\n    baseURI: 'https://flagsmith.example.com/api/v1/',\n    connectTimeout: 200,\n    receiveTimeout: 500,\n    sendTimeout: 500,\n    storeType = StoreType.inMemory,\n    caches: true, // mandatory if you want to use caches\n);\nawait flagsmithClient.initialize();\n\nfinal flagsmithClient = await FlagsmithClient.init(\n        apiKey: 'YOUR_ENV_API_KEY',\n        config: config,\n        seeds: <Flag>[\n            Flag.seed('feature', enabled: true),\n        ],\n    );\n\nawait flagsmithClient.getFeatureFlags(reload: true); // fetch updates from api\nbool isFeatureEnabled = flagsmithClient.hasCachedFeatureFlag('feature');\n```\n\n----------------------------------------\n\nTITLE: Installing Flagsmith SDK via NPM\nDESCRIPTION: Command to install the Flagsmith SDK using NPM package manager.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/nextjs-and-ssr.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i flagsmith --save\n```\n\n----------------------------------------\n\nTITLE: Updating User Trait in Dart\nDESCRIPTION: Update a specific user trait for a given user identity.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nfinal userTrait = await flagsmithClient.getTrait(user, 'cookies_key');\nif (userTrait != null) {\n    // update value for user trait\n    var updatedTrait = userTrait.copyWith(value: 'new value');\n    Trait updated = await flagsmithClient.updateTrait(user, updatedTrait);\n} else {\n    // run the code without user trait\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Cache Settings in Flagsmith\nDESCRIPTION: Shows how to configure advanced cache settings including TTL (time-to-live) and cache size for fine-grained control over the caching behavior.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/android.md#2025-04-21_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nFlagsmithCacheConfig (\n    enableCache = true,\n    cacheTTLSeconds = 3600L, // 1 hour\n    val cacheSize = 1024L * 1024L, // 1 MB\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment Flags in Python\nDESCRIPTION: Code to get feature flags and their values for an environment in Python.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# The method below triggers a network request\nflags = flagsmith.get_environment_flags()\nshow_button = flags.is_feature_enabled(\"secret_button\")\nbutton_data = json.loads(flags.get_feature_value(\"secret_button\"))\n```\n\n----------------------------------------\n\nTITLE: API Response for /api/v1/flags Before Hiding Sensitive Data in JSON\nDESCRIPTION: Example JSON response from the /api/v1/flags endpoint before enabling the 'Hide Sensitive Data' feature. It shows the full structure of the response including sensitive fields.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/security.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n {\n  \"id\": 27595,\n  \"feature\": {\n   \"id\": 9422,\n   \"name\": \"first_feature\",\n   \"created_date\": \"2023-05-14T06:11:08.178802Z\",\n   \"description\": null,\n   \"initial_value\": null,\n   \"default_enabled\": false,\n   \"type\": \"STANDARD\"\n  },\n  \"feature_state_value\": null,\n  \"environment\": 5242,\n  \"identity\": null,\n  \"feature_segment\": null,\n  \"enabled\": false\n },\n {\n  \"id\": 27597,\n  \"feature\": {\n   \"id\": 9423,\n   \"name\": \"second_feature\",\n   \"created_date\": \"2023-05-14T06:29:29.542708Z\",\n   \"description\": null,\n   \"initial_value\": null,\n   \"default_enabled\": false,\n   \"type\": \"STANDARD\"\n  },\n  \"feature_state_value\": null,\n  \"environment\": 5242,\n  \"identity\": null,\n  \"feature_segment\": null,\n  \"enabled\": false\n }\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Caching in Flagsmith\nDESCRIPTION: Demonstrates how to enable caching in the Flagsmith SDK, allowing the application to use cached flag values when the API is unreachable.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/android.md#2025-04-21_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nflagsmith = Flagsmith(\n    environmentKey = FlagsmithConfigHelper  environmentDevelopmentKey,\n    cacheConfig = FlagsmithCacheConfig(enableCache = true)\n    context = context)\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Flagsmith Configuration in Dart\nDESCRIPTION: Override the default Flagsmith client configuration with custom settings.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nfinal flagsmithClient = FlagsmithClient(\n      config: FlagsmithConfig(\n          baseURI: 'https://flagsmith.example.com/api/v1/',\n          connectTimeout: 200,\n          receiveTimeout: 500,\n          sendTimeout: 500,\n          storeType = StoreType.inMemory,\n          caches: true,\n      ), apiKey: 'YOUR_ENV_API_KEY');\n```\n\n----------------------------------------\n\nTITLE: Installing Flagsmith for React Native\nDESCRIPTION: Command to install the React Native specific version of Flagsmith SDK via NPM.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/javascript.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i react-native-flagsmith --save\n```\n\n----------------------------------------\n\nTITLE: Creating Segment and Override in Python\nDESCRIPTION: Python code example for creating a segment and setting up segment overrides.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/rest.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom requests import Session\n\nAPI_URL = os.environ.get(\"API_URL\", \"https://api.flagsmith.com/api/v1\")  # update this if self-hosting\nSEGMENT_NAME = os.environ[\"SEGMENT_NAME\"]  # define the name of the segment here\nPROJECT_ID = os.environ[\"PROJECT_ID\"]  # obtain this from the URL on your dashboard\nTOKEN = os.environ[\"API_TOKEN\"]  # obtain this from the account page in your dashboard\nFEATURE_ID = os.environ.get(\"FEATURE_ID\")  # obtain this from the URL on your dashboard when viewing a feature\nIS_FEATURE_SPECIFIC = os.environ.get(\"IS_FEATURE_SPECIFIC\", default=False) == \"True\"  # set this to True to create a feature specific segment\nENVIRONMENT_ID = os.environ[\"ENVIRONMENT_ID\"]  # must (currently) be obtained by inspecting the request to /api/v1/environments in the network console\n\n# set these values to create a segment override for the segment, feature, environment combination\nENABLE_FOR_SEGMENT = os.environ.get(\"ENABLE_FOR_SEGMENT\", default=False) == \"True\"\nVALUE_FOR_SEGMENT = os.environ.get(\"VALUE_FOR_SEGMENT\")\n\nSEGMENT_DEFINITION = {\n    \"name\": SEGMENT_NAME,\n    \"feature\": FEATURE_ID if IS_FEATURE_SPECIFIC else None,\n    \"project\": PROJECT_ID,\n    \"rules\": [\n        {\n            \"type\": \"ALL\",\n            \"rules\": [  # add extra rules here to build up 'AND' logic\n                {\n                    \"type\": \"ANY\",\n                    \"conditions\": [  # add extra conditions here to build up 'OR' logic\n                        {\n                            \"property\": \"my_trait\",  # specify a trait key that you want to match on, e.g. organisationId\n                            \"operator\": \"EQUAL\",  # specify the operator you want to use (one of EQUAL, NOT_EQUAL, GREATER_THAN, LESS_THAN, GREATER_THAN_INCLUSIVE, LESS_THAN_INCLUSIVE, CONTAINS, NOT_CONTAINS, REGEX, PERCENTAGE_SPLIT, IS_SET, IS_NOT_SET)\n                            \"value\": \"my-value\"  # the value to match against, e.g. 103\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n\nsession = Session()\nsession.headers.update({\"Authorization\": f\"Token {TOKEN}\"})\n\n# first let's create the segment\ncreate_segment_url = f\"{API_URL}/projects/{PROJECT_ID}/segments/\"\ncreate_segment_response = session.post(create_segment_url, json=SEGMENT_DEFINITION)\nassert create_segment_response.status_code == 201\nsegment_id = create_segment_response.json()[\"id\"]\n\nif not any(key in os.environ for key in (\"ENABLE_FOR_SEGMENT\", \"VALUE_FOR_SEGMENT\")):\n    print(\"Segment created! Not creating an override as no state / value defined.\")\n    exit(0)\n\n# next we need to create a feature segment (a flagsmith internal entity)\ncreate_feature_segment_url = f\"{API_URL}/features/feature-segments/\"\nfeature_segment_data = {\n    \"feature\": FEATURE_ID,\n    \"segment\": segment_id,\n    \"environment\": ENVIRONMENT_ID\n}\ncreate_feature_segment_response = session.post(create_feature_segment_url, json=feature_segment_data)\nassert create_feature_segment_response.status_code == 201\nfeature_segment_id = create_feature_segment_response.json()[\"id\"]\n```\n\n----------------------------------------\n\nTITLE: Listening for Feature Flag Changes in Dart\nDESCRIPTION: Set up a listener to track changes to a specific feature flag.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nflagsmithClient.stream(\"my_test_feature\").listen((value){\n    // call to action\n});\n```\n\n----------------------------------------\n\nTITLE: Checking if a Feature Flag is Enabled in Flagsmith\nDESCRIPTION: Demonstrates how to check if a specific feature flag is enabled by its feature ID, providing a boolean result with default fallback.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/android.md#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nflagsmith.hasFeatureFlag(forFeatureId = \"test_feature1\") { result ->\n    val isEnabled = result.getOrDefault(true)\n    Log.i(\"Flagsmith\", \"test_feature1 is enabled? $isEnabled\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting LDAP Login Group in Flagsmith\nDESCRIPTION: Defines the DN of the LDAP group allowed to login. This restricts login access to members of a specific LDAP group.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/04-LDAP.md#2025-04-21_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| **LDAP_LOGIN_GROUP** | CN=Readers,CN=Roles,CN=webapp01,<br/>dc=admin,dc=com | DN of the user allowed login user group. Note: Please make sure to set `LDAP_AUTH_FORMAT_SEARCH_FILTERS` to `flagsmith_ldap.ldap.login_group_search_filter` in order for this to work. | None |\n```\n\n----------------------------------------\n\nTITLE: Updating Segment Rules in Flagsmith API (Python)\nDESCRIPTION: This script updates the rules for a segment in Flagsmith. It defines the segment rules and sends a PATCH request to update the segment with the new rules.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/rest.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom requests import Session\n\nAPI_URL = os.environ.get(\"API_URL\", \"https://api.flagsmith.com/api/v1\")  # update this if self-hosting\nPROJECT_ID = os.environ[\"PROJECT_ID\"]  # obtain this from the URL on your dashboard\nTOKEN = os.environ[\"API_TOKEN\"]  # obtain this from the account page in your dashboard\nSEGMENT_ID = os.environ.get(\"SEGMENT_ID\")  # obtain this from the URL on your dashboard when viewing a segment\n\nSEGMENT_RULES_DEFINITION = {\n    \"rules\": [\n        {\n            \"type\": \"ALL\",\n            \"rules\": [\n                {\n                    \"type\": \"ANY\",\n                    \"conditions\": [  # add as many conditions here to build up a segment\n                        {\n                            \"property\": \"my_trait\",  # specify a trait key that you want to match on, e.g. organisationId\n                            \"operator\": \"EQUAL\",  # specify the operator you want to use (one of EQUAL, NOT_EQUAL, GREATER_THAN, LESS_THAN, GREATER_THAN_INCLUSIVE, LESS_THAN_INCLUSIVE, CONTAINS, NOT_CONTAINS, REGEX, PERCENTAGE_SPLIT, IS_SET, IS_NOT_SET)\n                            \"value\": \"my-value\"  # the value to match against, e.g. 103\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n\nsession = Session()\nsession.headers.update({\"Authorization\": f\"Token {TOKEN}\"})\n\nupdate_segment_url = f\"{API_URL}/projects/{PROJECT_ID}/segments/{SEGMENT_ID}/\"\nsession.patch(update_segment_url, json=SEGMENT_RULES_DEFINITION)\n```\n\n----------------------------------------\n\nTITLE: Initializing with Anonymous Transient Identity in JavaScript\nDESCRIPTION: Creates an anonymous user with a payment preference trait. Flagsmith generates a consistent identifier based on the traits provided, which can be retrieved for later use.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/transient-traits.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nflagsmith.init({\n evaluationContext: {\n  identity: {\n   identifier: null,\n   traits: { paymentPreference: 'cash' },\n  },\n },\n});\nlet identifierToUseLater = flagsmith.getContext().identity.identifier;\n```\n\n----------------------------------------\n\nTITLE: Installing Flagsmith Flutter SDK via pubspec.yaml\nDESCRIPTION: Add the Flagsmith Flutter SDK to your project's dependencies in the pubspec.yaml file.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n    flagsmith: ^<FlutterVersion />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment Flags in Rust\nDESCRIPTION: Code to get and check feature flags in Rust with error handling.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\n// The method below triggers a network request\nlet flags = flagsmith.get_environment_flags().unwrap();\n\nlet show_button = flags.is_feature_enabled(\"secret_button\").unwrap();\n\nlet button_data = flags.get_feature_value_as_string(\"secret_button\").unwrap();\n```\n\n----------------------------------------\n\nTITLE: Enabling Real-time Flag Updates in Dart\nDESCRIPTION: Enable real-time flag updates with default settings in the Flagsmith client configuration.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nfinal flagsmithClient = FlagsmithClient(\n      config: FlagsmithConfig(\n          enableRealtimeUpdates: true,\n      ), apiKey: 'YOUR_ENV_API_KEY');\n```\n\n----------------------------------------\n\nTITLE: Configuring Caching in Flagsmith iOS SDK\nDESCRIPTION: Demonstrates how to configure caching options in the Flagsmith SDK, including enabling/disabling cache, setting TTL, and customizing cache implementation.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/ios.mdx#2025-04-21_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// set cache on / off (defaults to off)\nFlagsmith.shared.cacheConfig.useCache = true\n\n// set skip API on / off (defaults to off)\nFlagsmith.shared.cacheConfig.skipAPI = false\n\n// set cache TTL in seconds (defaults to 0, i.e. infinite)\nFlagsmith.shared.cacheConfig.cacheTTL = 0\n\n// set custom cache to use (defaults to shared URLCache)\nFlagsmith.shared.cacheConfig.cache = <CUSTOM_CACHE_IMPLEMENTATION>\n```\n\n----------------------------------------\n\nTITLE: Setting LDAP Receive Timeout in Flagsmith\nDESCRIPTION: Configures the receive timeout in seconds for LDAP operations. This helps manage response times from the LDAP server.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/04-LDAP.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| **LDAP_AUTH_RECEIVE_TIMEOUT** | 60 | Set receive timeouts (in seconds) on the underlying `ldap3` library. | None |\n```\n\n----------------------------------------\n\nTITLE: Implementing Transient Traits and Identities in Android\nDESCRIPTION: This example demonstrates setting transient traits and marking an identity as transient in the Flagsmith Android SDK. It requires version 2.2.0 or higher of the SDK.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/transient-traits.md#2025-04-21_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nflagsmith.getFeatureFlags(identity = \"my-user\", traits = listOf(Trait(key = \"my_trait_key\", value = 123.5, transient: true), Trait(key = \"my_other_key\", value = true))) { result ->\n    result.fold(\n        onSuccess = { onFlagsSuccess },\n        onFailure = { onFlagsFailure }\n    )\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nflagsmith.getFeatureFlags(identity = \"my-user\", traits = listOf(Trait(key = \"my_trait_key\", value = 123.5), Trait(key = \"my_other_key\", value = true)), transient = true) { result ->\n    result.fold(\n        onSuccess = { onFlagsSuccess },\n        onFailure = { onFlagsFailure }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing User with Persistent Screen Orientation Trait\nDESCRIPTION: Sets up a user identity with a persistent screen orientation trait. This trait will be stored in the Flagsmith database for future flag evaluations.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/transient-traits.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nflagsmith.init({\n evaluationContext: {\n  identity: {\n   identifier: 'my-user',\n   traits: { screenOrientation: 'landscape' },\n  },\n },\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flags and Setting Traits Simultaneously in iOS\nDESCRIPTION: Demonstrates how to fetch feature flags for a specific identity while also setting a trait in the same API call.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/ios.mdx#2025-04-21_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nFlagsmith.shared.getFeatureFlags(forIdentity: \"test_user@test.com\", traits: [Trait(key: \"selected_tint_color\", value: \"orange\")]) {(result) in\n    switch result {\n    case .success(let flags):\n        for flag in flags {\n            let name = flag.feature.name\n            let value = flag.value?.stringValue\n            let enabled = flag.enabled\n            print(name, \"= enabled:\", enabled, \"value:\", value ?? \"nil\")\n        }\n    case .failure(let error):\n        print(error)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Flag Handler in Python\nDESCRIPTION: This snippet demonstrates how to set up a default flag handler in Python using the Flagsmith library. It defines a function to handle unknown features or API failures, and initializes the Flagsmith client with this handler.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom flagsmith import Flagsmith\nfrom flagsmith.models import DefaultFlag\n\ndef default_flag_handler(feature_name: str) -> DefaultFlag:\n    \"\"\"\n    Function that will be used if the API doesn't respond, or an unknown\n    feature is requested\n    \"\"\"\n    if feature_name == \"secret_button\":\n        return DefaultFlag(\n            enabled=False,\n            value=json.dumps({\"colour\": \"#b8b8b8\"}),\n            feature_name=\"secret_button\",\n        )\n    ],\n    return DefaultFlag(False, None)\n\nflagsmith = Flagsmith(\n    environment_key=\"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\",\n    default_flag_handler=default_flag_handler,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Flag Handler in Node.js\nDESCRIPTION: This JavaScript snippet shows how to set up a default flag handler in a Node.js application using the Flagsmith library. It initializes the Flagsmith client with a custom handler function for default flag values.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst flagsmith = new Flagsmith({\n    environmentKey,\n    enableLocalEvaluation: true,\n    defaultFlagHandler: (str) => {\n        return { enabled: false, isDefault: true, value: { colour: '#ababab' } };\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting User Traits with JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to identify a user and set a trait using the Flagsmith JavaScript SDK. It shows setting a boolean trait 'accepted_cookies' for a specific user.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/basic-features/segments.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nflagsmith.identify('example_user_1234');\nflagsmith.setTrait('accepted_cookies', true);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task Processor Statistics in JSON Format\nDESCRIPTION: This JSON snippet shows an example response from the task processor statistics endpoint. It provides information about the number of tasks waiting in the queue.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/configuration/task-processor.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"waiting\": 1  // The number of tasks waiting in the queue.\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment Flags in PHP\nDESCRIPTION: Code to get and check feature flags in PHP.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$flags = $flagsmith->getEnvironmentFlags();\n$flags->isFeatureEnabled('secret_button');\n$flags->getFeatureValue('secret_button');\n```\n\n----------------------------------------\n\nTITLE: Installing Flagsmith with Helm Charts\nDESCRIPTION: Quick-start commands to add the Flagsmith Helm repository, install Flagsmith in a new namespace, and access it via port forwarding.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/kubernetes.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flagsmith https://flagsmith.github.io/flagsmith-charts/\nhelm install -n flagsmith --create-namespace flagsmith flagsmith/flagsmith\nkubectl -n flagsmith port-forward svc/flagsmith-frontend 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagsmith SDK for Datadog RUM Integration\nDESCRIPTION: Demonstrates how to initialize the Flagsmith SDK with Datadog RUM integration, including optional trait tracking.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/javascript.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { datadogRum } from '@datadog/browser-rum';\n...\n// Initialize the Flagsmith SDK\nflagsmith.init({\n    datadogRum: {\n        client: datadogRum,\n        trackTraits: true,\n    },\n    ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Flag Handler in Rust\nDESCRIPTION: This Rust code demonstrates how to set up a default flag handler using the Flagsmith library. It defines a function to handle default flag values and initializes the Flagsmith client with this custom handler and options.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_33\n\nLANGUAGE: rust\nCODE:\n```\nuse flagsmith::{Flag, Flagsmith, FlagsmithOptions};\n\nfn default_flag_handler(feature_name: &str) -> Flag {\n    let mut flag: Flag = Default::default();\n    if feature_name == \"secret_button\" {\n        flag.value.value_type = FlagsmithValueType::String;\n        flag.value.value = serde_json::json!({\"colour\": \"#b8b8b8\"}).to_string();\n    }\n    return flag;\n}\n\nlet options = FlagsmithOptions {\n    default_flag_handler: Some(default_flag_handler),\n    ..Default::default()\n};\n\nlet flagsmith = Flagsmith::new(\n        env::var(\"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\")\n            .expect(\"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY not found in environment\"),\n        options,\n    );\n```\n\n----------------------------------------\n\nTITLE: Setting Up Default Flag Handler in PHP\nDESCRIPTION: This PHP snippet illustrates how to configure a default flag handler using the Flagsmith library. It defines a closure function to handle default flag values and initializes the Flagsmith client with this custom handler.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$flagsmith = (new Flagsmith('FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY'))\n    ->withDefaultFlagHandler(function ($featureName) {\n        $defaultFlag = (new DefaultFlag())\n            ->withEnabled(false)->withValue(null);\n        if ($featureName === 'secret_button') {\n            return $defaultFlag->withValue('{\"colour\": \"#ababab\"}');\n        }\n\n        return $defaultFlag;\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting Default Flags in Flagsmith iOS SDK\nDESCRIPTION: Shows how to define default flag values when initializing the SDK to ensure the application works as intended if it cannot receive a response from the API.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/ios.mdx#2025-04-21_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// set default flags\nFlagsmith.shared.defaultFlags = [Flag(featureName: \"feature_a\", enabled: false),\n                                    Flag(featureName: \"font_size\", intValue:12, enabled: true),\n                                    Flag(featureName: \"my_name\", stringValue:\"Testing\", enabled: true)]\n```\n\n----------------------------------------\n\nTITLE: Deploying Flagsmith to Fly.io using CLI Commands\nDESCRIPTION: Series of commands to deploy Flagsmith to Fly.io platform, including database setup and application deployment.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:Flagsmith/flagsmith.git\ncd flagsmith\nflyctl postgres create --name flagsmith-flyio-db\nflyctl apps create flagsmith-flyio\nflyctl postgres attach --postgres-app flagsmith-flyio-db\nflyctl deploy\n```\n\n----------------------------------------\n\nTITLE: Resetting Flagsmith Client Storage in Dart\nDESCRIPTION: Reset the storage and re-seed default values for the Flagsmith client.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nawait flagsmithClient.reset();\n```\n\n----------------------------------------\n\nTITLE: Installing Flagsmith Helm Chart (Bash)\nDESCRIPTION: This command installs the Flagsmith Helm chart without building a package. It uses the local chart directory and enables debug output for detailed information during the installation process.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/kubernetes.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nhelm install flagsmith --debug ./flagsmith\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagsmith Engine in Elixir Application\nDESCRIPTION: This snippet shows how to configure the Flagsmith Engine in an Elixir application's configuration file. It includes options for setting the environment key, API URL, default flag handler, custom headers, request timeout, evaluation mode, refresh interval, retries, and analytics.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_54\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :flagsmith_engine, :configuration,\n       environment_key: \"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\",\n       api_url: \"https://api.yourselfhostedflagsmith.com/api/v1\",\n       default_flag_handler: function_defaults_to_not_found,\n       custom_headers: [{\"to add to\", \"the requests\"}],\n       request_timeout_milliseconds: 5000,\n       enable_local_evaluation: false,\n       environment_refresh_interval_milliseconds: 60_000,\n       retries: 0,\n       enable_analytics: false\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Flag Handler in Elixir\nDESCRIPTION: This Elixir code snippet illustrates how to set up a default flag handler using the Flagsmith library. It defines an anonymous function to handle default flag values and initializes the Flagsmith client with this custom handler.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_34\n\nLANGUAGE: elixir\nCODE:\n```\nflag_handler =\n    fn name ->\n        case name == \"special_feature\" do\n            true ->\n            %Flagsmith.Schemas.Flag{feature_name: name, value: \"special\", enabled: true}\n            _ -> :not_found\n        end\n    end\n\nclient_configuration = Flagsmith.Client.new(environment_key: \"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\", default_flag_handler: flag_handler)\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Flag Handler in Go\nDESCRIPTION: This Go code snippet shows how to set up a default flag handler using the Flagsmith library. It defines a function to handle default flag values and initializes the Flagsmith client with this custom handler.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_32\n\nLANGUAGE: go\nCODE:\n```\nfunc DefaultFlagHandler(featureName string) (flagsmith.Flag, error) {\n\treturn flagsmith.Flag{\n\t\tFeatureName: featureName,\n\t\tIsDefault:   true,\n\t\tValue:       `{\"colour\": \"#FFFF00\"}`,\n\t\tEnabled:     true,\n\t}, nil\n}\n\nclient := flagsmith.NewClient(os.Getenv(\"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\"),\n\t\tflagsmith.WithDefaultHandler(DefaultFlagHandler),\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Identity Flags in Elixir\nDESCRIPTION: This snippet demonstrates how to fetch flags for an identity using the Flagsmith Elixir SDK. It makes a network request to get flags with an identifier and a trait, then checks feature enablement and retrieves a feature value.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_25\n\nLANGUAGE: elixir\nCODE:\n```\n# The method below triggers a network request\n{:ok, flags} = Flagsmith.Client.get_identity_flags(\n      client_configuration,\n      \"user-a\",\n      [%{trait_key: \"is_subscribed\", trait_value: false}]\n)\n\nsecret_button_enabled? = Flagsmith.Client.is_feature_enabled(flags, \"secret_button\")\nsecret_button_feature_value = Flagsmith.Client.get_feature_value(flags, \"secret_butteon\")\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth in JSON\nDESCRIPTION: This JSON object configures the GitHub OAuth integration for Flagsmith. It includes the OAuth authorization URL with placeholders for the client_id and redirect_uri. The example provided shows a redacted version of the SaaS configuration.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/index.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n \"url\": \"https://github.com/login/oauth/authorize?scope=user&client_id=999999999999&redirect_uri=https%3A%2F%2Fapp.flagsmith.com%2Foauth%2Fgithub\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Traits in Dart\nDESCRIPTION: Get all user traits for a specific user identity.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nfinal userTraits = await flagsmithClient.getTraits(user)\nif (userTraits != null && userTraits) {\n    // run the code to use user traits\n} else {\n    // run the code without user traits\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing LDAP Users and Groups in Flagsmith\nDESCRIPTION: Command to synchronize Flagsmith users and groups with LDAP (Directory) users and groups. This command updates user and group associations based on the LDAP directory.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/04-LDAP.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py sync_ldap_users_and_groups\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom SSE for Real-time Updates in Dart\nDESCRIPTION: Configure a custom Server-Sent Events (SSE) connection for real-time flag updates in the Flagsmith client.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nfinal flagsmithClient = FlagsmithClient(\n      config: FlagsmithConfig(\n          enableRealtimeUpdates: true,\n          realtimeUpdatesBaseURI: 'https://your_sse_endpoint.com/sse/',\n          reconnctToSSEInterval: 15000,\n      ), apiKey: 'YOUR_ENV_API_KEY');\n```\n\n----------------------------------------\n\nTITLE: Implementing Offline Handler in Go\nDESCRIPTION: This Go code snippet demonstrates how to set up an offline handler using the Flagsmith library. It shows using a built-in local file handler and initializing the Flagsmith client with this handler.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_41\n\nLANGUAGE: go\nCODE:\n```\n# Using the built-in local file handler\n\nenvJsonPath := \"./fixtures/environment.json\"\nofflineHandler, err := flagsmith.NewLocalFileHandler(envJsonPath)\n\n# Instantiate the client with offline handler\n\nflagsmith := flagsmith.NewClient(EnvironmentAPIKey, flagsmith.WithOfflineHandler(offlineHandler),\n    flagsmith.WithBaseURL(server.URL+\"/api/v1/\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing Transient Traits and Identities in iOS\nDESCRIPTION: This snippet demonstrates how to set transient traits and mark an identity as transient using the Flagsmith iOS SDK. It requires version 3.8.0 or higher of the SDK.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/transient-traits.md#2025-04-21_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nFlagsmith.shared.getFeatureFlags(forIdentity: \"my-user\", traits: [Trait(key: \"my_trait_key\", value: 123.5, transient: true), Trait(\"my_other_key\", value: true)]) {(result) in\n    switch result {\n    case .success(let flags):\n        for flag in flags {\n            let name = flag.feature.name\n            let value = flag.value?.stringValue\n            let enabled = flag.enabled\n            print(name, \"= enabled:\", enabled, \"value:\", value ?? \"nil\")\n        }\n    case .failure(let error):\n        print(error)\n    }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nFlagsmith.shared.getFeatureFlags(forIdentity: \"my-user\", transient: true, traits: [Trait(key: \"my_trait_key\", value: 123.5), Trait(\"my_other_key\", value: true)]) {(result) in\n    switch result {\n    case .success(let flags):\n        for flag in flags {\n            let name = flag.feature.name\n            let value = flag.value?.stringValue\n            let enabled = flag.enabled\n            print(name, \"= enabled:\", enabled, \"value:\", value ?? \"nil\")\n        }\n    case .failure(let error):\n        print(error)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Transient Trait Override for Current Session\nDESCRIPTION: Temporarily overrides the screen orientation trait for the current session without changing the stored value. This is useful for device-specific or session-specific behavior.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/transient-traits.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nflagsmith.setTrait('screenOrientation', { value: 'portrait', transient: true });\n```\n\n----------------------------------------\n\nTITLE: Configuring Google OAuth in JSON\nDESCRIPTION: This JSON object configures the Google OAuth integration for Flagsmith. It requires the Google OAuth Client ID to be provided. Additional configuration is needed for the deployment environment, including setting a specific Cross-Origin-Opener-Policy header.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/index.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n \"clientId\": \"<Your Google oAuth Client ID>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Traits from Flagsmith\nDESCRIPTION: Demonstrates how to fetch all traits for a specific user identity, allowing access to user attribute data stored in Flagsmith.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/android.md#2025-04-21_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nflagsmith.getTraits(identity = \"test@test.com\") { result ->\n    result.fold(\n        onSuccess = { traits ->\n            traits.forEach {\n                Log.i(\"Flagsmith\", \"Trait - ${it.key} : ${it.traitValue}\")\n            }\n        },\n        onFailure = { err ->\n            Log.e(\"Flagsmith\", \"Error getting traits\", err)\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Authentication URL in Flagsmith\nDESCRIPTION: Sets the URL of the LDAP server for authentication. This is a crucial setting for establishing the connection to the LDAP server.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/04-LDAP.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| **LDAP_AUTH_URL** | ldap://localhost:389 | The URL of the LDAP server | None |\n```\n\n----------------------------------------\n\nTITLE: Uploading Multiple Identities and Traits via Flagsmith API in Bash\nDESCRIPTION: This curl command demonstrates how to make a POST request to Flagsmith's bulk-identities endpoint to create or update multiple identities and their traits in a single API call. The example shows creating/updating two identities with different traits and deleting a trait by setting its value to null.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/rest.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i -X POST \"https://edge.api.flagsmith.com/api/v1/bulk-identities\" \\\n     -H \"X-Environment-Key: ${FLAGSMITH_ENVIRONMENT_KEY}\" \\\n     -H 'Content-Type: application/json' \\\n     -d $'{\n      \"data\": [\n        {\n          \"identifier\": \"my_identifier_1\",\n          \"traits\": [\n            {\n              \"trait_key\": \"my_key_name\",\n              \"trait_value\": \"set from POST /bulk-identities\"\n            }\n          ]\n        },\n        {\n            \"identifier\": \"my_identifier_2\",\n            \"traits\": [\n                {\n                    \"trait_key\": \"some_other_key_name\",\n                    \"trait_value\": \"if this identity does not exist, it will be created by this request\"\n                }\n            ]\n        },\n        {\n            \"identifier\": \"my_identifier_3\",\n            \"traits\": [\n                {\n                    \"trait_key\": \"this_trait_will_be_deleted\",\n                    \"trait_value\": null\n                }\n            ]\n        }\n      ]\n    }'\n```\n\n----------------------------------------\n\nTITLE: Using Offline Mode in PHP\nDESCRIPTION: Examples of how to implement offline mode in PHP using both the built-in local file handler and a custom offline handler implementation.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n// Using the built-in local file handler\n\n$offline_handler = new LocalFileHandler(\"/path/to/environment.json\")\n\n// Instantiate the client with offline mode set to true\n\n$flagsmith = new Flagsmith(\n    offline_mode: true,\n    offline_handler: offline_handler,\n)\n\n// Defining a custom offline handler\n\nclass LocalFileHandler implements IOfflineHandler\n{\n    public function getEnvironment()\n    {\n        // Some code providing the environment for the handler\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific User Trait in Dart\nDESCRIPTION: Get a specific user trait for a given user identity and trait key.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nfinal userTrait = await flagsmithClient.getTrait(user, 'cookies_key');\nif (userTrait != null) {\n    // run the code to use user trait\n} else {\n    // run the code without user trait\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Environment via Admin API\nDESCRIPTION: Example of creating a new environment using the admin API with authentication token.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/rest.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.flagsmith.com/api/v1/environments/' \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Api-Key <API TOKEN FROM ORGANISATION PAGE>' \\\n    --data-binary '{\"name\":\"New Environment\",\"project\":\"<Project ID>\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring All-in-One Docker Image\nDESCRIPTION: YAML configuration to use the combined Docker image containing both API and frontend components, which simplifies deployment.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/kubernetes.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n image:\n  repository: flagsmith/flagsmith # or some other repository hosting the combined image\n  tag: 2.14 # or some other tag that exists in that repository\n separateApiAndFrontend: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress for Minikube\nDESCRIPTION: YAML configuration for setting up ingress on Minikube, requiring the ingress addon to be enabled first.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/kubernetes.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n frontend:\n  enabled: true\n  hosts:\n   - flagsmith.local\n```\n\n----------------------------------------\n\nTITLE: Mapping LDAP User Fields to Flagsmith User Model\nDESCRIPTION: Maps Flagsmith user model fields to corresponding LDAP attributes. This ensures proper synchronization of user data between LDAP and Flagsmith.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/04-LDAP.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| **LDAP_AUTH_USER_FIELDS** | username=uid,email=email | User model fields mapped to the LDAP attributes that represent them. | username=uid,email=email,first_name=givenName,last_name=sn |\n```\n\n----------------------------------------\n\nTITLE: Testing Real-time Flag Updates with cURL\nDESCRIPTION: This cURL command demonstrates how to test real-time flag updates by connecting to the Flagsmith event source URL. It uses the SSE (Server-Sent Events) protocol to establish a connection and receive updates.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/real-time-flags.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H 'Accept: text/event-stream' -N -i https://realtime.flagsmith.com/sse/environments/ENVIRONMENT_ID/stream\n```\n\n----------------------------------------\n\nTITLE: Initializing PHP Flagsmith Client\nDESCRIPTION: Code to create a new Flagsmith client instance in PHP.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flagsmith\\Flagsmith;\n\n$flagsmith = new Flagsmith('FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple User Traits in Dart\nDESCRIPTION: Get multiple user traits for a given user identity and specific trait keys.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nfinal userTraits = await flagsmithClient.getTraits(user, keys: ['cookies_key', 'other_trait']);\nif (userTraits != null) {\n    // run the code to use user traits\n} else {\n    // run the code without user traits\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Identity Traits in iOS\nDESCRIPTION: Shows how to fetch and print all traits associated with a specific identity.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/ios.mdx#2025-04-21_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nFlagsmith.shared.getTraits(forIdentity: \"test_user@test.com\") {(result) in\n    switch result {\n    case .success(let traits):\n        for trait in traits {\n            let name = trait.key\n            let value = trait.value\n            print(name, \"=\", value)\n        }\n    case .failure(let error):\n        print(error)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for Flagsmith Project\nDESCRIPTION: This snippet shows how to install pre-commit hooks for the Flagsmith project. It uses make to install dependencies and pre-commit to set up the hooks.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/platform/contributing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# From the repository root\nmake install\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Creating a Superuser for Flagsmith Admin Access\nDESCRIPTION: This command creates a superuser account that provides access to the Django Admin console. This allows administrators to have direct CRUD access to core database tables in the Flagsmith API.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/docker.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Make sure you are in the root directory of this repository\ndocker-compose run --rm --entrypoint \"python manage.py createsuperuser\" api\n```\n\n----------------------------------------\n\nTITLE: Setting Default Flagsmith Organization for LDAP Users\nDESCRIPTION: Defines the default organization ID for newly created LDAP users in Flagsmith. This ensures all LDAP users are associated with a specific organization.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/04-LDAP.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| **LDAP_DEFAULT_FLAGSMITH_ORGANISATION_ID** | 1 | All newly created users will be added to this originisation | None |\n```\n\n----------------------------------------\n\nTITLE: Sample Flagsmith Environment Document JSON Structure\nDESCRIPTION: A comprehensive example of a Flagsmith Environment Document in JSON format, showcasing various configuration settings including feature states, project details, and integration configs.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/index.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n \"id\": 30156,\n \"api_key\": \"npfo95nMwUw8cjHXdHi2hG\",\n \"project\": {\n  \"id\": 11590,\n  \"name\": \"Edge API E2E\",\n  \"organisation\": {\n   \"id\": 13,\n   \"name\": \"Flagsmith\",\n   \"feature_analytics\": false,\n   \"stop_serving_flags\": false,\n   \"persist_trait_data\": true\n  },\n  \"hide_disabled_flags\": false,\n  \"segments\": [],\n  \"enable_realtime_updates\": false,\n  \"server_key_only_feature_ids\": []\n },\n \"feature_states\": [\n  {\n   \"feature\": {\n    \"id\": 48865,\n    \"name\": \"example_feature\",\n    \"type\": \"STANDARD\"\n   },\n   \"enabled\": false,\n   \"django_id\": 266961,\n   \"feature_segment\": null,\n   \"featurestate_uuid\": \"d7303252-33a7-4991-b20f-8564959e42c8\",\n   \"feature_state_value\": \"test2\",\n   \"multivariate_feature_state_values\": []\n  },\n  {\n   \"feature\": {\n    \"id\": 48866,\n    \"name\": \"example_mv_feature\",\n    \"type\": \"MULTIVARIATE\"\n   },\n   \"enabled\": false,\n   \"django_id\": 266962,\n   \"feature_segment\": null,\n   \"featurestate_uuid\": \"5d688e14-4e5e-47e5-9c53-b452ac9e5f16\",\n   \"feature_state_value\": \"control\",\n   \"multivariate_feature_state_values\": [\n    {\n     \"multivariate_feature_option\": {\n      \"value\": \"variant1\",\n      \"id\": 6596\n     },\n     \"percentage_allocation\": 10.0,\n     \"id\": 20957,\n     \"mv_fs_value_uuid\": \"6d96689d-9b1b-4507-9894-b6a0903084f8\"\n    },\n    {\n     \"multivariate_feature_option\": {\n      \"value\": \"variant2\",\n      \"id\": 6595\n     },\n     \"percentage_allocation\": 10.0,\n     \"id\": 20956,\n     \"mv_fs_value_uuid\": \"6227b016-4221-42a9-89e6-7c31a6987a8c\"\n    }\n   ]\n  }\n ],\n \"identity_overrides\": [],\n \"name\": \"E2E\",\n \"allow_client_traits\": true,\n \"updated_at\": \"2024-04-18T08:16:20.678868+00:00\",\n \"hide_sensitive_data\": false,\n \"hide_disabled_flags\": null,\n \"use_identity_composite_key_for_hashing\": true,\n \"amplitude_config\": null,\n \"dynatrace_config\": null,\n \"heap_config\": null,\n \"mixpanel_config\": null,\n \"rudderstack_config\": null,\n \"segment_config\": null,\n \"webhook_config\": null\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Flagsmith Basic Cache Configuration\nDESCRIPTION: Basic initialization of Flagsmith client with environment caching in PHP.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_59\n\nLANGUAGE: php\nCODE:\n```\n$flagsmith = (new Flagsmith(\"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\"));\n// This will load the environment from cache (or API, if cache does not exist.)\n$flagsmith->updateEnvironment();\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Flagsmith Client\nDESCRIPTION: Code to initialize the Flagsmith client in Go using environment variables.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"os\"\n  flagsmith \"github.com/Flagsmith/flagsmith-go-client/v3\"\n)\n// Initialise the Flagsmith client\nclient := flagsmith.NewClient(os.Getenv(\"FLAGSMITH_ENVIRONMENT_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Flagsmith with StatsD and Datadog\nDESCRIPTION: This YAML configuration sets up a Docker Compose environment for Flagsmith, including a PostgreSQL database, the Flagsmith API, and a Datadog agent for StatsD metrics collection. It demonstrates how to configure environment variables for database connection, StatsD integration, and Datadog setup.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-api.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n postgres:\n  image: postgres:15.5-alpine\n  environment:\n   POSTGRES_PASSWORD: password\n   POSTGRES_DB: flagsmith\n  container_name: flagsmith_postgres\n api:\n  build:\n   dockerfile: Dockerfile\n   context: ../../api\n  environment:\n   DATABASE_URL: postgres://postgres:password@postgres:5432/flagsmith\n   DJANGO_SETTINGS_MODULE: app.settings.local\n   STATSD_HOST: datadog\n  ports:\n   - '8000:8000'\n  depends_on:\n   - postgres\n  links:\n   - postgres\n   - datadog\n datadog:\n  image: gcr.io/datadoghq/agent:7\n  environment:\n   - DD_API_KEY=<API KEY>\n   - DD_SITE=datadoghq.eu\n   - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true\n  volumes:\n   - /var/run/docker.sock:/var/run/docker.sock\n   - /proc/:/host/proc/:ro\n   - /sys/fs/cgroup:/host/sys/fs/cgroup:ro\n   - /var/lib/docker/containers:/var/lib/docker/containers:ro\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for GitHub OAuth in Flagsmith\nDESCRIPTION: Configures the necessary environment variables for GitHub OAuth integration in Flagsmith. These variables are essential for establishing the connection between Flagsmith and GitHub's OAuth service.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/03-OAuth.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `GITHUB_CLIENT_ID`\n- `GITHUB_CLIENT_SECRET`\n```\n\n----------------------------------------\n\nTITLE: Validating Flagsmith Webhook Signature in Python\nDESCRIPTION: Python code snippet demonstrating how to validate the Flagsmith webhook signature. It computes an HMAC with the SHA256 hash function using the request body and secret, then compares it with the received signature.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/integrations/webhook.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport hmac\n\nsecret = \"my shared secret\"\n\nexpected_signature = hmac.new(\n    key=secret.encode(),\n    msg=request_body,\n    digestmod=hashlib.sha256,\n).hexdigest()\n\nreceived_signature = request[\"headers\"][\"x-flagsmith-signature\"]\nhmac.compare_digest(expected_signature, received_signature) is True\n```\n\n----------------------------------------\n\nTITLE: PHP Flagsmith PSR Cache Implementation\nDESCRIPTION: Implementation of PSR-16 cache using Symfony's filesystem adapter for Flagsmith PHP client.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n$flagsmith = (new Flagsmith(\"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\"))\n  ->withCache(new Psr16Cache(new FilesystemAdapter()));\n// Cache the environment call to reduce network calls for each and every evaluation.\n// This will load the environment from cache (or API, if cache does not exist.)\n$flagsmith->updateEnvironment();\n```\n\n----------------------------------------\n\nTITLE: Using StreamBuilder for Feature Flag UI Updates in Dart\nDESCRIPTION: Implement a StreamBuilder to update UI components based on feature flag changes.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nStreamBuilder(\n    stream: flagsmithClient.stream(\"my_test_feature\"),\n    builder: (context, AsyncSnapshot<String> snapshot) {\n        if (snapshot.connectionState == ConnectionState.waiting) {\n            return CircularProgressIndicator();\n        }\n        return TextButton(\n            onPressed: snapshot.data.enabled ? (){} : null,\n            child: Text('Call to Action'),);\n    },\n),\n```\n\n----------------------------------------\n\nTITLE: Setting Up Offline Handler in .NET\nDESCRIPTION: This C# code demonstrates how to configure an offline handler in a .NET application using the Flagsmith library. It shows both using a built-in local file handler and defining a custom offline handler by inheriting from BaseOfflineHandler.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\n// Using the built-in local file handler\nvar localFileHandler = new LocalFileHandler(\"path_to_environment_file/environment_file.json\");\nvar flagsmithClient = new FlagsmithClient(\n    new FlagsmithConfiguration {\n      OfflineMode = true,\n      OfflineHandler = localFileHandler\n    }\n);\n\n// Defining a custom offline handler\npublic class MyCustomOfflineHandler: BaseOfflineHandler\n{\n    public override EnvironmentModel GetEnvironment()\n    {\n        return someMethodToGetTheEnvironment();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Rust Flagsmith Client\nDESCRIPTION: Code to create a new Flagsmith client instance in Rust with default options.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse std::env;\nuse flagsmith::{Flag, Flagsmith, FlagsmithOptions};\n\nlet options = FlagsmithOptions {..Default::default()};\nlet flagsmith = Flagsmith::new(\n        env::var(\"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY\")\n            .expect(\"FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY not found in environment\"),\n        options,\n    );\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Flagsmith to a Previous Version\nDESCRIPTION: Command to rollback migrations in Flagsmith to a specific datetime. This is part of the process to revert Flagsmith to a previous version.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-api.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py rollbackmigrationsafter \"<datetime from step 1>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Authentication for Microsoft Active Directory in Flagsmith\nDESCRIPTION: Environment variable settings for configuring LDAP authentication with Microsoft Active Directory in Flagsmith. Includes options for simple usernames, down-level login names, and user-principal-name formats.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/04-LDAP.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nLDAP_AUTH_FORMAT_USERNAME=\"django_python3_ldap.utils.format_username_active_directory\"\n```\n\nLANGUAGE: txt\nCODE:\n```\nLDAP_AUTH_FORMAT_USERNAME=\"django_python3_ldap.utils.format_username_active_directory\"\nLDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN=\"DOMAIN\"\n```\n\nLANGUAGE: txt\nCODE:\n```\nLDAP_AUTH_FORMAT_USERNAME=\"django_python3_ldap.utils.format_username_active_directory_principal\"\nLDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN=\"domain.com\"\n```\n\nLANGUAGE: txt\nCODE:\n```\nLDAP_AUTH_USER_FIELDS=username=sAMAccountName,email=mail,first_name=givenName,last_name=sn\nLDAP_AUTH_OBJECT_CLASS=\"user\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Analytics Environment Variables\nDESCRIPTION: Environment variable configuration for setting up Postgres-based analytics in Flagsmith API service.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Set Postgres to store the data\nUSE_POSTGRES_FOR_ANALYTICS=True\n\n# Configure the postgres datastore:\n# Either\nANALYTICS_DATABASE_URL (e.g. postgresql://postgres:password@postgres:5432/flagsmith)\n# Or\nDJANGO_DB_HOST_ANALYTICS (e.g. postgres.db)\nDJANGO_DB_NAME_ANALYTICS (e.g. flagsmith)\nDJANGO_DB_USER_ANALYTICS (e.g. postgres_user)\nDJANGO_DB_PASSWORD_ANALYTICS (e.g. postgres_password)\nDJANGO_DB_PORT_ANALYTICS (e.g. 5432)\n```\n\n----------------------------------------\n\nTITLE: Defining Flagsmith Loading State Types in TypeScript\nDESCRIPTION: Defines the TypeScript types for Flagsmith loading state, including FlagSource enum and LoadingState type.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/javascript.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum FlagSource {\n 'NONE' = 'NONE',\n 'DEFAULT_FLAGS' = 'DEFAULT_FLAGS',\n 'CACHE' = 'CACHE',\n 'SERVER' = 'SERVER',\n}\n\nexport declare type LoadingState = {\n error: Error | null; // Current error, resets on next attempt to fetch flags\n isFetching: bool; // Whether there is a current request to fetch server flags\n isLoading: bool; // Whether any flag data exists\n source: FlagSource; //Indicates freshness of flags\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Response Schema for Get Flags API in JSON\nDESCRIPTION: This code snippet defines the JSON schema for the response of the Get Flags API. It includes two possible response structures: an array of feature states or a single feature state object.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/edge-api/get-flags.api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"200\": {\n    \"description\": \"OK\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"oneOf\": [\n            {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"enabled\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"feature_state_value\": {\n                    \"oneOf\": [\n                      {\n                        \"type\": \"string\",\n                        \"example\": \"a-remote-config-value\"\n                      },\n                      {\n                        \"type\": \"number\",\n                        \"example\": 42\n                      },\n                      {\n                        \"type\": \"boolean\",\n                        \"example\": true\n                      }\n                    ],\n                    \"nullable\": true\n                  },\n                  \"feature\": {\n                    \"title\": \"feature\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"id\": {\n                        \"type\": \"integer\",\n                        \"readOnly\": true,\n                        \"example\": 42\n                      },\n                      \"name\": {\n                        \"type\": \"string\",\n                        \"example\": \"show_hero_banner\"\n                      },\n                      \"type\": {\n                        \"type\": \"string\",\n                        \"example\": \"STANDARD\"\n                      }\n                    }\n                  }\n                },\n                \"title\": \"FeatureState\"\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"properties\": {\n                \"enabled\": {\n                  \"type\": \"boolean\"\n                },\n                \"feature_state_value\": {\n                  \"oneOf\": [\n                    {\n                      \"type\": \"string\",\n                      \"example\": \"a-remote-config-value\"\n                    },\n                    {\n                      \"type\": \"number\",\n                      \"example\": 42\n                    },\n                    {\n                      \"type\": \"boolean\",\n                      \"example\": true\n                    }\n                  ],\n                  \"nullable\": true\n                },\n                \"feature\": {\n                  \"title\": \"feature\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"integer\",\n                      \"readOnly\": true,\n                      \"example\": 42\n                    },\n                    \"name\": {\n                      \"type\": \"string\",\n                      \"example\": \"show_hero_banner\"\n                    },\n                    \"type\": {\n                      \"type\": \"string\",\n                      \"example\": \"STANDARD\"\n                    }\n                  }\n                }\n              },\n              \"title\": \"FeatureState\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Fetch Request State in Dart\nDESCRIPTION: Set up a listener to track the state of fetch requests for feature flags.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/flutter.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nflagsmithClient.loading.listen((state){\n    // FlagsmithLoading.loading\n    // FlagsmithLoading.loaded\n});\n```\n\n----------------------------------------\n\nTITLE: Example Real-time Flag Update Event JSON Structure\nDESCRIPTION: This JSON object represents the structure of a real-time flag update event message in Flagsmith. It contains a Unix epoch timestamp indicating when the environment was last updated.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/real-time-flags.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"updated_at\": 3133690620000\n}\n```\n\n----------------------------------------\n\nTITLE: Example /etc/hosts Entry for Minikube\nDESCRIPTION: Example entry for /etc/hosts file to map the Minikube IP to the flagsmith.local domain.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/kubernetes.md#2025-04-21_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\n192.168.99.99 flagsmith.local\n```\n\n----------------------------------------\n\nTITLE: Defining Bulk Identity Insert/Update Request Body Schema in JSON\nDESCRIPTION: This JSON schema defines the structure for the request body when bulk inserting or updating identities. It includes an array of identity objects, each containing an identifier and an array of traits.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/edge-api/bulk-insert-identities-update.api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"example\": {},\n  \"properties\": {\n    \"data\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"traits\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"trait_key\": {\n                  \"type\": \"string\",\n                  \"example\": \"Name\"\n                },\n                \"trait_value\": {\n                  \"oneOf\": [\n                    {\n                      \"type\": \"string\",\n                      \"example\": \"B.A. Baracus\"\n                    },\n                    {\n                      \"type\": \"number\",\n                      \"example\": 42\n                    },\n                    {\n                      \"type\": \"boolean\",\n                      \"example\": true\n                    }\n                  ],\n                  \"nullable\": true\n                }\n              },\n              \"title\": \"Trait\"\n            }\n          },\n          \"identifier\": {\n            \"type\": \"string\"\n          }\n        },\n        \"title\": \"IdentitiesRequestData\"\n      }\n    }\n  },\n  \"title\": \"BulkIdentitiesData\"\n}\n```\n\n----------------------------------------\n\nTITLE: InfluxDB Hourly API Downsampling Task\nDESCRIPTION: InfluxDB task configuration for hourly downsampling of API request data. Aggregates data into 1-hour blocks for long-term analytics and reporting.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/index.md#2025-04-21_snippet_10\n\nLANGUAGE: text\nCODE:\n```\noption task = {name: \"Downsample API 1h\", every: 1h}\n\ndata = from(bucket: \"default\")\n |> range(start: -duration(v: int(v: task.every) * 2))\n |> filter(fn: (r) =>\n  (r._measurement == \"api_call\"))\n\ndata\n |> aggregateWindow(fn: sum, every: 1h)\n    |> filter(fn: (r) =>\n      (exists r._value))\n |> to(bucket: \"default_downsampled_1h\")\n```\n\n----------------------------------------\n\nTITLE: Validating Web Hook Signature in Python\nDESCRIPTION: Python code snippet demonstrating how to validate the Web Hook signature using HMAC with SHA256 hash function. It compares the computed signature with the received signature from the X-Flagsmith-Signature header.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/webhooks.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport hmac\n\nsecret = \"my shared secret\"\n\nexpected_signature = hmac.new(\n    key=secret.encode(),\n    msg=request_body,\n    digestmod=hashlib.sha256,\n).hexdigest()\n\nreceived_signature = request[\"headers\"][\"x-flagsmith-signature\"]\nhmac.compare_digest(expected_signature, received_signature) is True\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body Schema for User Identification in JSON\nDESCRIPTION: JSON schema defining the structure of the request body for the identify user endpoint. It includes properties for traits and identifier.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/edge-api/identify-user.api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"example\": {},\n  \"type\": \"object\",\n  \"properties\": {\n    \"traits\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"trait_key\": {\n            \"type\": \"string\",\n            \"example\": \"Name\"\n          },\n          \"trait_value\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"example\": \"B.A. Baracus\"\n              },\n              {\n                \"type\": \"number\",\n                \"example\": 42\n              },\n              {\n                \"type\": \"boolean\",\n                \"example\": true\n              }\n            ],\n            \"nullable\": true\n          }\n        },\n        \"title\": \"Trait\"\n      }\n    },\n    \"identifier\": {\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"IdentitiesRequestData\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagsmith Terraform Provider\nDESCRIPTION: This snippet shows how to configure the Flagsmith Terraform provider and create a new feature flag. It requires an Organisation API Key and specifies the provider version, project UUID, and feature details.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/integrations/terraform.md#2025-04-21_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    flagsmith = {\n      source = \"Flagsmith/flagsmith\"\n      version = \"0.3.0\" # or whatever the latest version is\n    }\n  }\n}\n\nprovider \"flagsmith\" {\n  # or omit this for master_api_key to be read from environment variable\n  master_api_key = \"<Your Terraform API Key>\"\n}\n\n# the feature that you want to manage\nresource \"flagsmith_feature\" \"new_standard_feature\" {\n  feature_name = \"new_standard_feature\"\n  project_uuid = \"10421b1f-5f29-4da9-abe2-30f88c07c9e8\"\n  description  = \"This is a new standard feature\"\n  type         = \"STANDARD\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature in Python\nDESCRIPTION: Python code example for creating a new feature using the admin API.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/rest.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom requests import Session\n\nAPI_URL = os.environ.get(\"API_URL\", \"https://api.flagsmith.com/api/v1\")  # update this if self-hosting\nPROJECT_ID = os.environ[\"PROJECT_ID\"]  # obtain this from the URL on your dashboard\nTOKEN = os.environ[\"API_TOKEN\"]  # obtain this from the account page in your dashboard\nFEATURE_NAME = os.environ[\"FEATURE_NAME\"]  # name of the feature to create\n\nsession = Session()\nsession.headers.update({\"Authorization\": f\"Token {TOKEN}\"})\n\ncreate_feature_url = f\"{API_URL}/projects/{PROJECT_ID}/features/\"\ndata = {\"name\": FEATURE_NAME}\nresponse = session.post(create_feature_url, json=data)\n```\n\n----------------------------------------\n\nTITLE: Running Health Check in Flagsmith Environment\nDESCRIPTION: Command to run a health check in a Flagsmith environment, useful for verifying shell access and proper configuration.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/importing-and-exporting/organisations.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython /app/manage.py health_check\n```\n\n----------------------------------------\n\nTITLE: Identity Upload Request Schema in JSON\nDESCRIPTION: JSON schema defining the structure for bulk identity upload requests. Each identity can have an identifier and array of traits. Trait values support string, number, and boolean types.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/edge-api/bulk-insert-identities-overwrite.api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"traits\": [\n        {\n          \"trait_key\": \"Name\",\n          \"trait_value\": \"B.A. Baracus\"\n        }\n      ],\n      \"identifier\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: InfluxDB Hourly Flag Analytics Downsampling Task\nDESCRIPTION: InfluxDB task configuration for hourly downsampling of flag evaluation analytics. Groups data by feature and environment IDs for detailed analytical insights.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/index.md#2025-04-21_snippet_11\n\nLANGUAGE: text\nCODE:\n```\noption task = {name: \"Downsample API 1h - Flag Analytics\", every: 1h}\n\ndata = from(bucket: \"default\")\n |> range(start: -duration(v: int(v: task.every) * 2))\n |> filter(fn: (r) =>\n  (r._measurement == \"feature_evaluation\"))\n |> filter(fn: (r) =>\n  (r._field == \"request_count\"))\n |> group(columns: [\"feature_id\", \"environment_id\"])\n\ndata\n |> aggregateWindow(fn: sum, every: 1h)\n    |> filter(fn: (r) =>\n      (exists r._value))\n |> set(key: \"_measurement\", value: \"feature_evaluation\")\n |> set(key: \"_field\", value: \"request_count\")\n |> to(bucket: \"default_downsampled_1h\")\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Identities in Flagsmith API (Python)\nDESCRIPTION: This script retrieves a page of identities from Flagsmith and iterates over them, fetching additional data for each identity. It demonstrates how to paginate through identities and access their feature states.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/rest.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nimport requests\n\nTOKEN = os.environ.get(\"API_TOKEN\")  # obtained from Account section in dashboard\nENV_KEY = os.environ.get(\"ENV_KEY\")  # obtained from Environment settings in dashboard\nBASE_URL = \"https://api.flagsmith.com/api/v1\"  # update this if self hosting\nIDENTITIES_PAGE_URL = f\"{BASE_URL}/environments/{ENV_KEY}/edge-identities/?page_size=20\"\n\nsession = requests.Session()\nsession.headers.update(\n    {\"Authorization\": f\"Token {TOKEN}\", \"Content-Type\": \"application/json\"}\n)\n\n# get the existing feature state id based on the feature name\npage_of_identities = session.get(f\"{IDENTITIES_PAGE_URL}\")\nprint(page_of_identities.json())\n\nfor identity in page_of_identities.json()['results']:\n    print(str(identity))\n    IDENTITY_UUID = identity['identity_uuid']\n    IDENTITY_URL = f\"{BASE_URL}/environments/{ENV_KEY}/edge-identities/{IDENTITY_UUID}/edge-featurestates/all/\"\n    identity_data = session.get(f\"{IDENTITY_URL}\")\n    print(identity_data.json())\n```\n\n----------------------------------------\n\nTITLE: Fetching Feature Custom Fields via Flagsmith Admin API\nDESCRIPTION: This snippet demonstrates how to use the Flagsmith Admin API to fetch custom field values for a specific feature. It requires the project ID, feature ID, and an API key.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/custom-fields.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \"https://api.flagsmith.com/api/v1/projects/YOUR_PROJECT_ID/features/YOUR_FEATURE_ID/\" \\\n  -H \"Authorization: Api-Key YOUR_API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Getting Environment Flags\nDESCRIPTION: Example of retrieving environment flags using the SDK API.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/rest.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://edge.api.flagsmith.com/api/v1/flags/' -H 'X-Environment-Key: <Your client-side SDK key>'\n```\n\n----------------------------------------\n\nTITLE: Updating Feature State in Python\nDESCRIPTION: Python code example for updating a feature's value and state in an environment.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/rest.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport os\n\nimport requests\n\nTOKEN = os.environ.get(\"API_TOKEN\")  # obtained from Account section in dashboard\nENV_KEY = os.environ.get(\"ENV_KEY\")  # obtained from environment settings in dashboard\nBASE_URL = \"https://api.flagsmith.com/api/v1\"  # update this if self hosting\nFEATURE_STATES_URL = f\"{BASE_URL}/environments/{ENV_KEY}/featurestates\"\nFEATURE_NAME = os.environ.get(\"FEATURE_NAME\")\n\nsession = requests.Session()\nsession.headers.update(\n    {\"Authorization\": f\"Token {TOKEN}\", \"Content-Type\": \"application/json\"}\n)\n\n# get the existing feature state id based on the feature name\nget_feature_states_response = session.get(\n    f\"{FEATURE_STATES_URL}/?feature_name={FEATURE_NAME}\"\n)\nfeature_state_id = get_feature_states_response.json()[\"results\"][0][\"id\"]\n\n# update the feature state\ndata = {\"enabled\": True, \"feature_state_value\": \"new value\"}  # `feature_state_value` can be str, int or bool\nupdate_feature_state_response = session.patch(\n    f\"{FEATURE_STATES_URL}/{feature_state_id}/\", data=json.dumps(data)\n)\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials for S3 Operations\nDESCRIPTION: Commands to set AWS access key ID and secret access key as environment variables for S3 operations in Flagsmith import/export processes.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/importing-and-exporting/organisations.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_ACCESS_KEY_ID='abc123'\nexport AWS_SECRET_ACCESS_KEY='xyz456'\n```\n\n----------------------------------------\n\nTITLE: Defining Response Schema for User Identification in JSON\nDESCRIPTION: JSON schema defining the structure of the response for the identify user endpoint. It includes properties for identifier, flags, and traits.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/edge-api/identify-user.api.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"identifier\": {\n        \"type\": \"string\",\n        \"example\": \"27a483b1-ab92-4c26-9800-d5fad201ca6a\"\n      },\n      \"flags\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"enabled\": {\n              \"type\": \"boolean\"\n            },\n            \"feature_state_value\": {\n              \"oneOf\": [\n                {\n                  \"type\": \"string\",\n                  \"example\": \"a-remote-config-value\"\n                },\n                {\n                  \"type\": \"number\",\n                  \"example\": 42\n                },\n                {\n                  \"type\": \"boolean\",\n                  \"example\": true\n                }\n              ],\n              \"nullable\": true\n            },\n            \"feature\": {\n              \"title\": \"feature\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"integer\",\n                  \"readOnly\": true,\n                  \"example\": 42\n                },\n                \"name\": {\n                  \"type\": \"string\",\n                  \"example\": \"show_hero_banner\"\n                },\n                \"type\": {\n                  \"type\": \"string\",\n                  \"example\": \"STANDARD\"\n                }\n              }\n            }\n          },\n          \"title\": \"FeatureState\"\n        }\n      },\n      \"traits\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"trait_key\": {\n              \"type\": \"string\",\n              \"example\": \"Name\"\n            },\n            \"trait_value\": {\n              \"oneOf\": [\n                {\n                  \"type\": \"string\",\n                  \"example\": \"B.A. Baracus\"\n                },\n                {\n                  \"type\": \"number\",\n                  \"example\": 42\n                },\n                {\n                  \"type\": \"boolean\",\n                  \"example\": true\n                }\n              ],\n              \"nullable\": true\n            }\n          },\n          \"title\": \"Trait\"\n        }\n      }\n    },\n    \"title\": \"IdentitiesResponsePost\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Flagsmith Aptible Deployment\nDESCRIPTION: Defines the Docker image configuration for deploying Flagsmith on Aptible. It sets environment variables, adds Aptible-specific files, and configures the user for runtime execution.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/aptible.md#2025-04-21_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use flagsmith/flagsmith-private-cloud for the Enterprise image\nFROM --platform=linux/amd64 flagsmith/flagsmith\n\n# Don't wait for the database to be available during startup for health checks to succeed\nENV SKIP_WAIT_FOR_DB=1\n\n# Use root user to add Aptible files to the container\nUSER root\nRUN mkdir /.aptible/\nADD Procfile /.aptible/Procfile\nADD .aptible.yml /.aptible/.aptible.yml\n\n# Use non-root user at runtime\nUSER nobody\n```\n\n----------------------------------------\n\nTITLE: Modulo Operation Example\nDESCRIPTION: Example showing how the modulo operator can be used to match even-numbered user IDs in segment rules\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/basic-features/segments.md#2025-04-21_snippet_3\n\nLANGUAGE: pseudocode\nCODE:\n```\nuser_id % 2 == 0\n```\n\n----------------------------------------\n\nTITLE: Feature Custom Fields API Response in JSON\nDESCRIPTION: This JSON snippet shows the structure of the API response when fetching feature custom fields. The 'metadata' array contains the custom field values with their IDs and values.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/custom-fields.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"metadata\": [\n    {\n      \"id\": 123,\n      \"model_field\": 128,\n      \"field_value\": \"https://example.com/FOO-123\"\n    },\n    {\n      \"id\": 124,\n      \"model_field\": 129,\n      \"field_value\": \"Example Team\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Java SDK Transient Traits Implementation\nDESCRIPTION: Implementation of transient traits using Java SDK version 7.4.0 or higher. Demonstrates usage of TraitConfig for marking traits as transient.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/transient-traits.md#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport com.flagsmith.models.TraitConfig;\n\nMap<String, Object> traits = new HashMap<String, Object>();\ntraits.put(\"my_trait_key\", new TraitConfig(123.5, true));\ntraits.put(\"my_other_key\", true);\n\nFlags flags = flagsmith.getIdentityFlags(\"my-user\", traits);\n```\n\nLANGUAGE: java\nCODE:\n```\nimport com.flagsmith.models.TraitConfig;\n\nMap<String, Object> traits = new HashMap<String, Object>();\ntraits.put(\"my_trait_key\", 123.5);\ntraits.put(\"my_other_key\", true);\n\nFlags flags = flagsmith.getIdentityFlags(\"my-user\", traits, true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate Ingresses for Frontend and API\nDESCRIPTION: YAML configuration for setting up separate ingress resources for the frontend and API components, with specific path routing.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/kubernetes.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n frontend:\n  enabled: true\n  hosts:\n   - flagsmith.[MYDOMAIN]\n\n api:\n  enabled: true\n  hosts:\n   - host: flagsmith.[MYDOMAIN]\n     paths:\n      - /api/\n      - /health/\n      - /admin/\n      - /static/admin/\n\nfrontend:\n extraEnv:\n  FLAGSMITH_API_URL: 'https://flagsmith.[MYDOMAIN]/api/v1/'\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Run Command\nDESCRIPTION: Command to run the Docker container with AppDynamics configuration.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/configuration/enterprise-edition.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose -f docker-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Edge Proxy JSON Configuration\nDESCRIPTION: Example JSON configuration file showing environment key pairs, polling frequency, and logging settings\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-edge-proxy.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n \"environment_key_pairs\": [\n  {\n   \"server_side_key\": \"ser.your_server_side_key_1\",\n   \"client_side_key\": \"your_client_side_key_1\"\n  }\n ],\n \"api_poll_frequency_seconds\": 5,\n \"logging\": {\n  \"log_level\": \"DEBUG\",\n  \"log_format\": \"json\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Flagsmith API for Identity Flags\nDESCRIPTION: Example cURL request to get flag values for a specific user identity from the Flagsmith API using an environment key.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/integrations/analytics/mixpanel.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://edge.api.flagsmith.com/api/v1/identities/?identifier=development_user_123456' \\\n  -H 'X-Environment-Key: 8KzETdDeMY7xkqkSkY3Gsg'\n```\n\n----------------------------------------\n\nTITLE: Visualizing Real-time Flag Update Process with Mermaid Diagram\nDESCRIPTION: This sequence diagram illustrates the typical flow of an application using real-time flag updates in Flagsmith. It shows the interaction between the application, Flagsmith, and the administrator, highlighting billable API requests.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/real-time-flags.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    rect rgb(255,245,173)\n        Application->>Flagsmith: Fetch initial flags\n        Flagsmith->>Application: #nbsp\n    end\n    Application->>Flagsmith: Connect to update stream\n    Flagsmith->>Application: #nbsp\n    Flagsmith Administrator->>Flagsmith: Update flag state\n    Flagsmith->>Flagsmith Administrator: #nbsp\n    Flagsmith-->>Application: Flag update event\n    rect rgb(255,245,173)\n        Application->>Flagsmith: Fetch latest flags\n        Flagsmith->>Application: #nbsp\n    end\n    Application-->Application: Store latest update timestamp\n```\n\n----------------------------------------\n\nTITLE: Webhook Payload JSON Schema for Flagsmith Integration\nDESCRIPTION: Example JSON payload sent by Flagsmith to the specified webhook URL. It includes flag states, user identity, segments, and traits for a particular user.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/integrations/webhook.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n \"flags\": [\n  {\n   \"enabled\": false,\n   \"environment\": 2,\n   \"feature\": {\n    \"created_date\": \"2022-02-04T14:57:39.200798Z\",\n    \"default_enabled\": false,\n    \"description\": null,\n    \"id\": 1,\n    \"initial_value\": null,\n    \"name\": \"12e12e\",\n    \"type\": \"STANDARD\"\n   },\n   \"feature_segment\": null,\n   \"feature_state_value\": null,\n   \"id\": 2,\n   \"identity\": null\n  },\n  {\n   \"enabled\": true,\n   \"environment\": 2,\n   \"feature\": {\n    \"created_date\": \"2022-02-04T14:57:44.244575Z\",\n    \"default_enabled\": true,\n    \"description\": null,\n    \"id\": 2,\n    \"initial_value\": null,\n    \"name\": \"gggg\",\n    \"type\": \"STANDARD\"\n   },\n   \"feature_segment\": null,\n   \"feature_state_value\": null,\n   \"id\": 4,\n   \"identity\": null\n  }\n ],\n \"identity\": \"user_test\",\n \"segments\": [\n  {\n   \"id\": 1,\n   \"member\": true,\n   \"name\": \"test_segment\"\n  }\n ],\n \"traits\": [\n  {\n   \"id\": 4,\n   \"trait_key\": \"222\",\n   \"trait_value\": 333\n  },\n  {\n   \"id\": 5,\n   \"trait_key\": \"aaa\",\n   \"trait_value\": \"bbb\"\n  }\n ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagsmith in Elixir\nDESCRIPTION: Demonstrates application-level configuration for the Flagsmith SDK in Elixir.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_53\n\nLANGUAGE: elixir\nCODE:\n```\nApplication level Configuration\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress with Frontend Proxy in Kubernetes\nDESCRIPTION: YAML configuration for setting up ingress with a frontend proxy, which is simpler but introduces some latency.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/kubernetes.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n frontend:\n  enabled: true\n  hosts:\n   - flagsmith.[MYDOMAIN]\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Build Command\nDESCRIPTION: Command to build Docker image with AppDynamics configuration.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/configuration/enterprise-edition.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose -f docker-compose.yml build\n```\n\n----------------------------------------\n\nTITLE: Edge Proxy Environment Variables Configuration\nDESCRIPTION: Environment variable configuration example for setting up environment key pairs and logging\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-edge-proxy.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nENVIRONMENT_KEY_PAIRS='[{\"server_side_key\":\"ser.your_server_side_key_1\",\"client_side_key\":\"your_client_side_key_1\"}]'\nAPI_POLL_FREQUENCY_SECONDS=5\nLOGGING='{\"log_level\":\"DEBUG\",\"log_format\":\"json\"}'\n```\n\n----------------------------------------\n\nTITLE: Mixpanel Profile Update Payload Structure\nDESCRIPTION: JSON structure showing how Flagsmith sends flag states to Mixpanel's profile-set endpoint for user tracking and analytics.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/integrations/analytics/mixpanel.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"$token\": \"<YOUR_MIXPANEL_PROJECT_TOKEN>\",\n \"$distinct_id\": \"<FLAGSMITH_IDENTITY_ID>\",\n \"$set\": {\n  \"<FLAG_1_ID>\": \"<FLAG_1_STATE>\",\n  \"<FLAG_2_ID>\": \"<FLAG_2_STATE>\",\n  \"...\": \"...\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flagsmith CLI Globally with npm\nDESCRIPTION: Command to install the Flagsmith CLI tool globally using npm package manager, making it available throughout your system.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/CLI.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g flagsmith-cli\n```\n\n----------------------------------------\n\nTITLE: Java Flagsmith Logging Configuration\nDESCRIPTION: Enables SLF4J-based logging in the Flagsmith Java client.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_61\n\nLANGUAGE: java\nCODE:\n```\nFlagsmithClient flagsmithClient = FlagsmithClient.newBuilder()\n                // other configuration as shown above\n                .enableLogging()\n                .build();\n```\n\n----------------------------------------\n\nTITLE: Setting Flagsmith Environment Variables on Aptible\nDESCRIPTION: Demonstrates how to set necessary environment variables for Flagsmith using the Aptible CLI. It includes setting the database URL and allowed hosts.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/aptible.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\naptible config:set --app flagsmith \\\n    DATABASE_URL=postgresql://aptible:...@...:23532/db \\\n    DJANGO_ALLOWED_HOSTS='containers,YOUR_APTIBLE_HOSTNAME'\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployment Strategy for Rolling Updates\nDESCRIPTION: YAML configuration to set a custom deployment strategy for Flagsmith components, such as specifying rolling update parameters.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/kubernetes.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n deploymentStrategy:\n  type: RollingUpdate\n  rollingUpdate:\n   maxUnavailable: 1\n   maxSurge: '50%'\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Player in Markdown\nDESCRIPTION: This code snippet embeds a video player using the ReactPlayer component, demonstrating the integration process between Flagsmith and Grafana.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/integrations/apm/grafana.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<ReactPlayer\n    controls\n    width=\"100%\"\n    height=\"460px\"\n    url='https://flagsmith.wistia.com/medias/z9vkon54qh' />\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Flagsmith API\nDESCRIPTION: YAML configuration for setting additional environment variables for the Flagsmith API component.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/kubernetes.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n extraEnv:\n  LOG_LEVEL: DEBUG\n```\n\n----------------------------------------\n\nTITLE: Sample Provider Webhook JSON Schema for Feature Health Integration\nDESCRIPTION: This JSON schema defines the payload structure for the Sample Feature Health webhook. It specifies required fields like feature and status, and optional fields like environment and reason. The reason field can contain text blocks and URL blocks for providing detailed information about health events.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/feature-health.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"SampleEvent\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"environment\": {\n      \"type\": \"string\"\n    },\n    \"feature\": {\n      \"type\": \"string\"\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"enum\": [\"healthy\", \"unhealthy\"]\n    },\n    \"reason\": {\n      \"$ref\": \"#/definitions/FeatureHealthEventReason\"\n    }\n  },\n  \"required\": [\"feature\", \"status\"],\n  \"definitions\": {\n    \"FeatureHealthEventReason\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"text_blocks\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/FeatureHealthEventReasonTextBlock\"\n          }\n        },\n        \"url_blocks\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/FeatureHealthEventReasonUrlBlock\"\n          }\n        }\n      }\n    },\n    \"FeatureHealthEventReasonTextBlock\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"text\": {\n          \"type\": \"string\"\n        },\n        \"title\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\"text\"]\n    },\n    \"FeatureHealthEventReasonUrlBlock\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"url\": {\n          \"type\": \"string\"\n        },\n        \"title\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\"url\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Response for /api/v1/flags After Hiding Sensitive Data in JSON\nDESCRIPTION: Example JSON response from the /api/v1/flags endpoint after enabling the 'Hide Sensitive Data' feature. It demonstrates how sensitive fields are nullified or removed from the response.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/security.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n {\n  \"id\": null,\n  \"feature\": {\n   \"id\": 9422,\n   \"name\": \"first_feature\",\n   \"created_date\": null,\n   \"description\": null,\n   \"initial_value\": null,\n   \"default_enabled\": null,\n   \"type\": \"STANDARD\"\n  },\n  \"feature_state_value\": null,\n  \"environment\": null,\n  \"identity\": null,\n  \"feature_segment\": null,\n  \"enabled\": false\n },\n {\n  \"id\": null,\n  \"feature\": {\n   \"id\": 9423,\n   \"name\": \"second_feature\",\n   \"created_date\": null,\n   \"description\": null,\n   \"initial_value\": null,\n   \"default_enabled\": null,\n   \"type\": \"STANDARD\"\n  },\n  \"feature_state_value\": null,\n  \"environment\": null,\n  \"identity\": null,\n  \"feature_segment\": null,\n  \"enabled\": false\n }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Replica URLs for Flagsmith\nDESCRIPTION: This snippet shows how to set up multiple read replicas for Flagsmith using environment variables. It demonstrates the format for specifying replica database URLs and mentions the option to use a custom delimiter for passwords containing commas.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/configuration/sizing-and-scaling.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nREPLICA_DATABASE_URLS: postgres://user:password@replica1.database.host:5432/flagsmith,postgres://user:password@replica2.database.host:5432/flagsmith\n```\n\n----------------------------------------\n\nTITLE: Deploying Flagsmith Docker Image on Aptible\nDESCRIPTION: Shows the command to deploy the Flagsmith Docker image to Aptible using the Aptible CLI. It specifies the application name and the Docker image to be deployed.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/aptible.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\naptible deploy --app flagsmith --docker-image example/my-flagsmith-aptible-image\n```\n\n----------------------------------------\n\nTITLE: Defining Flagsmith Integration Data in JSON\nDESCRIPTION: This JSON object defines configuration details for various integrations supported by Flagsmith, including Datadog, Dynatrace, Jira, GitHub, Slack, Amplitude, New Relic, Segment, RudderStack, Webhook, Heap Analytics, Mixpanel, and Grafana. Each integration includes properties such as environment settings, image URLs, documentation links, required fields, tags, and descriptions.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/index.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n \"datadog\": {\n  \"perEnvironment\": false,\n  \"image\": \"/static/images/integrations/datadog.svg\",\n  \"docs\": \"https://docs.flagsmith.com/integrations/apm/datadog\",\n  \"fields\": [\n   {\n    \"key\": \"base_url\",\n    \"label\": \"Base URL\"\n   },\n   {\n    \"key\": \"api_key\",\n    \"label\": \"API Key\",\n    \"hidden\": true\n   },\n   {\n    \"key\": \"use_custom_source\",\n    \"label\": \"Use Custom Source\",\n    \"inputType\": \"checkbox\",\n    \"default\": true\n   }\n  ],\n  \"tags\": [\"logging\"],\n  \"title\": \"Datadog\",\n  \"description\": \"Sends events to Datadog for when flags are created, updated and removed. Logs are tagged with the environment they came from e.g. production.\",\n  \"project\": true\n },\n \"dynatrace\": {\n  \"perEnvironment\": true,\n  \"image\": \"/static/images/integrations/dynatrace.svg\",\n  \"docs\": \"https://docs.flagsmith.com/integrations/apm/dynatrace\",\n  \"fields\": [\n   {\n    \"key\": \"base_url\",\n    \"label\": \"Base URL\"\n   },\n   {\n    \"key\": \"api_key\",\n    \"label\": \"API Key\",\n    \"hidden\": true\n   },\n   {\n    \"key\": \"entity_selector\",\n    \"label\": \"Entity Selector\"\n   }\n  ],\n  \"tags\": [\"logging\"],\n  \"title\": \"Dynatrace\",\n  \"description\": \"Sends events to Dynatrace for when flags are created, updated and removed. Logs are tagged with the environment they came from e.g. production.\",\n  \"project\": true\n },\n \"jira\": {\n  \"perEnvironment\": false,\n  \"image\": \"https://docs.flagsmith.com/img/integrations/jira/jira-logo.svg\",\n  \"docs\": \"https://docs.flagsmith.com/integrations/project-management/jira\",\n  \"external\": true,\n  \"title\": \"Jira\",\n  \"description\": \"View your Flagsmith Flags inside Jira.\",\n  \"project\": true,\n  \"organisation\": true\n },\n \"github\": {\n  \"perEnvironment\": false,\n  \"image\": \"https://docs.flagsmith.com/img/integrations/github/github-logo.svg\",\n  \"docs\": \"https://docs.flagsmith.com/integrations/project-management/github\",\n  \"external\": true,\n  \"title\": \"GitHub\",\n  \"isExternalInstallation\": true,\n  \"description\": \"View your Flagsmith Flags inside your GitHub Issues and Pull Request.\",\n  \"project\": true\n },\n \"slack\": {\n  \"perEnvironment\": true,\n  \"isOauth\": true,\n  \"image\": \"/static/images/integrations/slack.svg\",\n  \"docs\": \"https://docs.flagsmith.com/integrations/slack\",\n  \"tags\": [\"messaging\"],\n  \"title\": \"Slack\",\n  \"description\": \"Sends messages to Slack when flags are created, updated and removed. Logs are tagged with the environment they came from e.g. production.\",\n  \"project\": true\n },\n \"amplitude\": {\n  \"perEnvironment\": true,\n  \"image\": \"/static/images/integrations/amplitude.svg\",\n  \"docs\": \"https://docs.flagsmith.com/integrations/analytics/amplitude\",\n  \"fields\": [\n   {\n    \"key\": \"api_key\",\n    \"label\": \"API Key\",\n    \"hidden\": true\n   },\n   {\n    \"key\": \"base_url\",\n    \"label\": \"Base URL\"\n   }\n  ],\n  \"tags\": [\"analytics\"],\n  \"title\": \"Amplitude\",\n  \"description\": \"Sends data on what flags served to each identity.\",\n  \"project\": true\n },\n \"new-relic\": {\n  \"perEnvironment\": false,\n  \"image\": \"/static/images/integrations/new_relic.svg\",\n  \"docs\": \"https://docs.flagsmith.com/integrations/apm/newrelic\",\n  \"fields\": [\n   {\n    \"key\": \"base_url\",\n    \"label\": \"New Relic Base URL\"\n   },\n   {\n    \"key\": \"api_key\",\n    \"label\": \"New Relic API Key\",\n    \"hidden\": true\n   },\n   {\n    \"key\": \"app_id\",\n    \"label\": \"New Relic Application ID\"\n   }\n  ],\n  \"tags\": [\"analytics\"],\n  \"title\": \"New Relic\",\n  \"description\": \"Sends events to New Relic for when flags are created, updated and removed.\",\n  \"project\": true\n },\n \"segment\": {\n  \"perEnvironment\": true,\n  \"image\": \"/static/images/integrations/segment.svg\",\n  \"docs\": \"https://docs.flagsmith.com/integrations/analytics/segment\",\n  \"fields\": [\n   {\n    \"key\": \"api_key\",\n    \"label\": \"API Key\",\n    \"hidden\": true\n   }\n  ],\n  \"tags\": [\"analytics\"],\n  \"title\": \"Segment\",\n  \"description\": \"Sends data on what flags served to each identity.\",\n  \"project\": true\n },\n \"rudderstack\": {\n  \"perEnvironment\": true,\n  \"image\": \"/static/images/integrations/rudderstack.svg\",\n  \"docs\": \"https://docs.flagsmith.com/integrations/analytics/rudderstack\",\n  \"fields\": [\n   {\n    \"key\": \"base_url\",\n    \"label\": \"Rudderstack Data Plane URL\"\n   },\n   {\n    \"key\": \"api_key\",\n    \"label\": \"API Key\",\n    \"hidden\": true\n   }\n  ],\n  \"tags\": [\"analytics\"],\n  \"title\": \"Rudderstack\",\n  \"description\": \"Sends data on what flags served to each identity.\",\n  \"project\": true\n },\n \"webhook\": {\n  \"perEnvironment\": true,\n  \"image\": \"/static/images/integrations/webhooks.svg\",\n  \"docs\": \"https://docs.flagsmith.com/integrations/webhook\",\n  \"fields\": [\n   {\n    \"key\": \"url\",\n    \"label\": \"Your Webhook URL Endpoint\"\n   },\n   {\n    \"key\": \"secret\",\n    \"label\": \"Your Webhook Secret\",\n    \"hidden\": true\n   }\n  ],\n  \"tags\": [\"analytics\"],\n  \"title\": \"Webhook\",\n  \"description\": \"Sends data on what flags served to each identity to a Webhook Endpoint you provide.\",\n  \"project\": true\n },\n \"heap\": {\n  \"perEnvironment\": true,\n  \"image\": \"/static/images/integrations/heap.svg\",\n  \"docs\": \"https://docs.flagsmith.com/integrations/analytics/heap\",\n  \"fields\": [\n   {\n    \"key\": \"api_key\",\n    \"label\": \"API Key\",\n    \"hidden\": true\n   }\n  ],\n  \"tags\": [\"analytics\"],\n  \"title\": \"Heap Analytics\",\n  \"description\": \"Sends data on what flags served to each identity.\",\n  \"project\": true\n },\n \"mixpanel\": {\n  \"perEnvironment\": true,\n  \"image\": \"/static/images/integrations/mp.svg\",\n  \"docs\": \"https://docs.flagsmith.com/integrations/analytics/mixpanel\",\n  \"fields\": [\n   {\n    \"key\": \"api_key\",\n    \"label\": \"Project Token\",\n    \"hidden\": true\n   }\n  ],\n  \"tags\": [\"analytics\"],\n  \"title\": \"Mixpanel\",\n  \"description\": \"Sends data on what flags served to each identity.\",\n  \"project\": true\n },\n \"grafana\": {\n  \"perEnvironment\": false,\n  \"image\": \"/static/images/integrations/grafana.svg\",\n  \"docs\": \"https://docs.flagsmith.com/integrations/apm/grafana\",\n  \"fields\": [\n   {\n    \"key\": \"base_url\",\n    \"label\": \"Base URL\",\n    \"default\": \"https://grafana.com\"\n   },\n   {\n    \"key\": \"api_key\",\n    \"label\": \"Service account token\",\n    \"hidden\": true\n   }\n  ],\n  \"tags\": [\"logging\"],\n  \"title\": \"Grafana\",\n  \"description\": \"Receive Flagsmith annotations to your Grafana instance on feature flag and segment changes.\",\n  \"project\": true,\n  \"organisation\": true\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Version Badge Component\nDESCRIPTION: JSX component that displays the API version badge with styling.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/edge-api/edge-api.info.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<span\n  className={\"theme-doc-version-badge badge badge--secondary\"}\n  children={\"Version: 1\"}\n>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Environment Web Hook Payload Structure in JSON\nDESCRIPTION: Example JSON structure of an Environment Web Hook payload in Flagsmith. It includes details about the event type, changed data, previous state, and timestamp.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/webhooks.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"data\": {\n  \"changed_by\": \"user@domain.com\"(or the name of the Organisation API Key),\n  \"new_state\": {\n   \"enabled\": true,\n   \"environment\": {\n    \"id\": 23,\n    \"name\": \"Development\"\n   },\n   \"feature\": {\n    \"created_date\": \"2021-02-10T20:03:43.348556Z\",\n    \"default_enabled\": false,\n    \"description\": \"Show html in a butter bar for certain users\",\n    \"id\": 7168,\n    \"initial_value\": null,\n    \"name\": \"butter_bar\",\n    \"project\": {\n     \"id\": 12,\n     \"name\": \"Flagsmith Website\"\n    },\n    \"type\": \"CONFIG\"\n   },\n   \"feature_segment\": null,\n   \"feature_state_value\": \"<strong>\\nYou are using the develop environment.\\n</strong>\",\n   \"identity\": null,\n   \"identity_identifier\": null\n  },\n  \"previous_state\": {\n   \"enabled\": false,\n   \"environment\": {\n    \"id\": 23,\n    \"name\": \"Development\"\n   },\n   \"feature\": {\n    \"created_date\": \"2021-02-10T20:03:43.348556Z\",\n    \"default_enabled\": false,\n    \"description\": \"Show html in a butter bar for certain users\",\n    \"id\": 7168,\n    \"initial_value\": null,\n    \"name\": \"butter_bar\",\n    \"project\": {\n     \"id\": 12,\n     \"name\": \"Flagsmith Website\"\n    },\n    \"type\": \"CONFIG\"\n   },\n   \"feature_segment\": null,\n   \"feature_state_value\": \"<strong>\\nYou are using the develop environment.\\n</strong>\",\n   \"identity\": null,\n   \"identity_identifier\": null\n  },\n  \"timestamp\": \"2021-06-18T07:50:26.595298Z\"\n },\n \"event_type\": \"FLAG_UPDATED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Configuration for Feature Update\nDESCRIPTION: This bash snippet demonstrates the output of running 'terraform apply' to update the description of an existing feature flag. It shows the execution plan, changes to be made, and confirmation prompt.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/integrations/terraform.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  ~ update in-place\n\nTerraform will perform the following actions:\n\n  # flagsmith_feature.new_standard_feature will be updated in-place\n  ~ resource \"flagsmith_feature\" \"new_standard_feature\" {\n      ~ description     = \"This is a new standard feature\" -> \"New description\"\n        id              = 574\n        # (7 unchanged attributes hidden)\n    }\n\nPlan: 0 to add, 1 to change, 0 to destroy.\n\nDo you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n\n  Enter a value: yes\n\nflagsmith_feature.new_standard_feature: Modifying...\nflagsmith_feature.new_standard_feature: Modifications complete after 1s\n\nApply complete! Resources: 0 added, 1 changed, 0 destroyed.\n```\n\n----------------------------------------\n\nTITLE: API Response for /api/v1/identities After Hiding Sensitive Data in JSON\nDESCRIPTION: Example JSON response from the /api/v1/identities endpoint after enabling the 'Hide Sensitive Data' feature. It demonstrates how sensitive fields are nullified or removed from the response, including the emptying of the traits array.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/security.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n \"traits\": [],\n \"flags\": [\n  {\n   \"id\": null,\n   \"feature\": {\n    \"id\": 9422,\n    \"name\": \"first_feature\",\n    \"created_date\": null,\n    \"description\": null,\n    \"initial_value\": null,\n    \"default_enabled\": null,\n    \"type\": \"STANDARD\"\n   },\n   \"feature_state_value\": null,\n   \"environment\": null,\n   \"identity\": null,\n   \"feature_segment\": null,\n   \"enabled\": false\n  },\n  {\n   \"id\": null,\n   \"feature\": {\n    \"id\": 9423,\n    \"name\": \"second_feature\",\n    \"created_date\": null,\n    \"description\": null,\n    \"initial_value\": null,\n    \"default_enabled\": false,\n    \"type\": \"STANDARD\"\n   },\n   \"feature_state_value\": null,\n   \"environment\": null,\n   \"identity\": null,\n   \"feature_segment\": null,\n   \"enabled\": false\n  }\n ]\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Assertion Consumer Service (ACS) URL for Flagsmith SAML\nDESCRIPTION: This snippet shows the format for the ACS URL that identity providers should use to post SAML messages during authentication. The URL is constructed using the Flagsmith API domain and the SAML configuration name.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/01-SAML/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://flagsmith.example.com/api/v1/auth/saml/YOUR_SAML_CONFIGURATION_NAME/response/\n```\n\n----------------------------------------\n\nTITLE: Deploying Edge Proxy with Docker CLI\nDESCRIPTION: Command to run the Edge Proxy Docker container with a mounted configuration file and exposed port 8000\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-edge-proxy.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n    -v ./config.json:/app/config.json \\\n    -p 8000:8000 \\\n    flagsmith/edge-proxy:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack App Manifest for Flagsmith Integration\nDESCRIPTION: JSON configuration for setting up a Slack app that integrates with Flagsmith. Includes display information, bot user settings, OAuth configuration, and required scopes for channel reading and message writing.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/index.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n \"display_information\": {\n  \"name\": \"Flagsmith Bot\",\n  \"description\": \"Get notified in Slack whenever changes are made to your Flagsmith Environments\",\n  \"background_color\": \"#000000\",\n  \"long_description\": \"Use our application for Slack to receive Flagsmith state changes directly in your Slack channels. Whenever you create, update or delete a Flag within Flagsmith, our application for Slack will send a message into a Slack channel of your choosing.\\r\\n\\r\\nFlagsmith is an open source, fully featured, Feature Flag and Remote Config service. Use our hosted API, deploy to your own private cloud, or run on-premise.\"\n },\n \"features\": {\n  \"bot_user\": {\n   \"display_name\": \"Flagsmith Bot\",\n   \"always_online\": false\n  }\n },\n \"oauth_config\": {\n  \"redirect_urls\": [\n   \"https://api.flagsmith.com/api/v1/environments\",\n   \"https://api-staging.flagsmith.com/api/v1/environments\"\n  ],\n  \"scopes\": {\n   \"bot\": [\"channels:read\", \"chat:write\", \"chat:write.public\"]\n  }\n },\n \"settings\": {\n  \"org_deploy_enabled\": false,\n  \"socket_mode_enabled\": false,\n  \"token_rotation_enabled\": false\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Title Heading\nDESCRIPTION: JSX component that renders the main API heading.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/edge-api/edge-api.info.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Heading\n  as={\"h1\"}\n  className={\"openapi__heading\"}\n  children={\"Edge API\"}\n>\n</Heading>\n```\n\n----------------------------------------\n\nTITLE: Custom Field Definitions API Response in JSON\nDESCRIPTION: This JSON snippet illustrates the structure of the API response when fetching custom field definitions. It includes details such as field name, type, description, and associated organization ID.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/custom-fields.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n \"count\": 2,\n \"next\": null,\n \"previous\": null,\n \"results\": [\n  {\n   \"id\": 178,\n   \"name\": \"Ticket URL\",\n   \"type\": \"url\",\n   \"description\": \"URL to ticket in our issue tracker\",\n   \"organisation\": 15467\n  },\n  {\n   \"id\": 179,\n   \"name\": \"Product code\",\n   \"type\": \"int\",\n   \"description\": \"Product code associated with this feature\",\n   \"organisation\": 15467\n  }\n ]\n}\n```\n\n----------------------------------------\n\nTITLE: One-liner for Interactive Flagsmith API Shell in Kubernetes\nDESCRIPTION: Combined command to get an interactive shell in a Flagsmith API container in Kubernetes without manually specifying the service name.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/importing-and-exporting/organisations.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -it  $(kubectl get service --selector app.kubernetes.io/component=api --output name) --container flagsmith-api -- sh\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP User Relations Sync in Flagsmith\nDESCRIPTION: Specifies a callable used to sync user relations, particularly for group synchronization. This is crucial for maintaining user-group associations.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/04-LDAP.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| **LDAP_AUTH_SYNC_USER_RELATIONS** | flagsmith_ldap.ldap.sync_user_groups | Path to a callable used to sync user relations. Note: if you are setting this value to `flagsmith_ldap.ldap.sync_user_groups` please make sure `LDAP_DEFAULT_FLAGSMITH_ORGANISATION_ID` is set. | django_python3_ldap.utils.sync_user_relations |\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS for LDAP Connection in Flagsmith\nDESCRIPTION: Configures whether to initiate TLS on the LDAP connection. This enhances security by encrypting the communication with the LDAP server.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/04-LDAP.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| **LDAP_AUTH_USE_TLS** | False | Setting this to true will initiate TLS on connection | False |\n```\n\n----------------------------------------\n\nTITLE: Building Unified Front End and Back End in Flagsmith\nDESCRIPTION: Steps to run Flagsmith as a single application/docker container using unified builds. This process involves updating packages, building Django, copying assets, and booting the server.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-api.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Update packages and build django.\ncd frontend\nnpm install\nnpm run bundledjango\n\n# Copy additional assets with Django\ncd ../api\npython manage.py collectstatic\n\n# Boot the server\npython manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: This snippet defines the rules for web crawlers accessing the Flagsmith project. It specifies that all user agents (*) are disallowed from accessing any part of the site (/).\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/frontend/web/static/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Fetching Fresh Flags on the Client in SSR\nDESCRIPTION: Optional step to force the client to fetch a fresh set of flags after initializing with server state in a non-Next.js SSR environment.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/nextjs-and-ssr.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nflagsmith.getFlags();\n```\n\n----------------------------------------\n\nTITLE: Executing Interactive Shell in Docker Compose Flagsmith Container\nDESCRIPTION: Command to get an interactive shell inside a Flagsmith API container using Docker Compose. Requires replacing 'flagsmith' with the actual service name from the Compose definition.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/importing-and-exporting/organisations.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec -it flagsmith sh\n```\n\n----------------------------------------\n\nTITLE: Example SAML Assertion for Group Assignment in XML\nDESCRIPTION: This XML snippet demonstrates the structure of a SAML assertion containing group assignments. It shows how to specify multiple groups for a user, which Flagsmith will use to assign the user to corresponding groups based on their external IDs.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/01-SAML/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<saml2:Attribute Name=\"groups\">\n  <saml2:AttributeValue xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:anyType\">\n        my_group\n    </saml2:AttributeValue>\n  <saml2:AttributeValue xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:anyType\">\n        my_other_group\n    </saml2:AttributeValue>\n</saml2:Attribute>\n```\n\n----------------------------------------\n\nTITLE: Customizing LDAP Search Filters for Login in Flagsmith\nDESCRIPTION: Defines a callable used to add search filters to restrict login to certain groups. This allows for fine-grained control over user authentication.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/04-LDAP.md#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| **LDAP_AUTH_FORMAT_SEARCH_FILTERS** | flagsmith_ldap.ldap.login_group_search_filter | Path to a callable used to add search filters to login to restrict login to a certain group | django_python3_ldap.utils.format_search_filters |\n```\n\n----------------------------------------\n\nTITLE: Running Flagsmith Frontend in Development Mode\nDESCRIPTION: Commands to start the Flagsmith frontend in development mode with hot reloading for client and server.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-frontend.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd frontend\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Superuser for Local Flagsmith Installation (Bash)\nDESCRIPTION: Command to create a superuser account for local Flagsmith installations, which is necessary for accessing the Django admin interface and initializing the application.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-api.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd api\npython manage.py createsuperuser\n```\n\n----------------------------------------\n\nTITLE: Personalizing Email Notification with Liquid Templating in HTML\nDESCRIPTION: This email template personalizes a notification message using Liquid templating syntax to address the recipient by name (with fallback), conditionally mentions the approver if available, and provides a link to the approved change request. The template is designed for the Flagsmith team's change request workflow.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/api/features/workflows/core/templates/workflows_core/change_request_approved_author_notification.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML/Liquid\nCODE:\n```\nHi {{ author.full_name | default:\"there\" }},\n\nYour change request has been approved{% if approver.full_name %} by {{ approver.full_name }}{% endif %}. Please click on the link below to see it.\n\n{{ url }}\n\nThe Flagsmith Team\n```\n\n----------------------------------------\n\nTITLE: Querying Flagsmith Identity Flags API with Curl\nDESCRIPTION: Example curl command demonstrating how to retrieve flag values for a specific identity from the Flagsmith API endpoint. This shows the format used to query identity flags that will be synchronized with Amplitude.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/integrations/analytics/amplitude.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://edge.api.flagsmith.com/api/v1/identities/?identifier=development_user_123456' \\\n  -H 'X-Environment-Key: 8KzETdDeMY7xkqkSkY3Gsg'\n```\n\n----------------------------------------\n\nTITLE: Exporting Flagsmith Organisation to S3-compatible Storage\nDESCRIPTION: Command to export a Flagsmith organisation with ID 1234 to an S3-compatible storage bucket named 'my-bucket' with the key '1234.json'.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/importing-and-exporting/organisations.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py dumporganisationtos3 1234 my-bucket 1234.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Segment Operators in JSON\nDESCRIPTION: This JSON array defines the available segment operators in Flagsmith. Each operator includes a value, label, and optional properties such as type and value placeholder. These operators are used for creating segment rules and conditions in the Flagsmith platform.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/index.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n {\n  \"value\": \"EQUAL\",\n  \"label\": \"Exactly Matches (=)\"\n },\n {\n  \"value\": \"NOT_EQUAL\",\n  \"label\": \"Does not match (!=)\"\n },\n {\n  \"value\": \"PERCENTAGE_SPLIT\",\n  \"label\": \"% Split\"\n },\n {\n  \"value\": \"GREATER_THAN\",\n  \"label\": \">\",\n  \"type\": \"number\"\n },\n {\n  \"value\": \"GREATER_THAN_INCLUSIVE\",\n  \"label\": \">=\",\n  \"type\": \"number\"\n },\n {\n  \"value\": \"LESS_THAN\",\n  \"label\": \"<\",\n  \"type\": \"number\"\n },\n {\n  \"value\": \"LESS_THAN_INCLUSIVE\",\n  \"label\": \"<=\",\n  \"type\": \"number\"\n },\n {\n  \"value\": \"GREATER_THAN:semver\",\n  \"label\": \"SemVer >\",\n  \"append\": \":semver\"\n },\n {\n  \"value\": \"GREATER_THAN_INCLUSIVE:semver\",\n  \"label\": \"SemVer >=\",\n  \"append\": \":semver\"\n },\n {\n  \"value\": \"LESS_THAN:semver\",\n  \"label\": \"SemVer <\",\n  \"append\": \":semver\"\n },\n {\n  \"value\": \"LESS_THAN_INCLUSIVE:semver\",\n  \"label\": \"SemVer <=\",\n  \"append\": \":semver\"\n },\n {\n  \"value\": \"MODULO\",\n  \"label\": \"Modulo\",\n  \"valuePlaceholder\": \"Divisor|Remainder\"\n },\n {\n  \"value\": \"CONTAINS\",\n  \"label\": \"Contains\"\n },\n {\n  \"value\": \"NOT_CONTAINS\",\n  \"label\": \"Does not contain\"\n },\n {\n  \"value\": \"IN\",\n  \"label\": \"In\",\n  \"valuePlaceholder\": \"Value1,Value2\"\n },\n {\n  \"value\": \"REGEX\",\n  \"label\": \"Matches regex\"\n },\n {\n  \"value\": \"IS_SET\",\n  \"label\": \"Is set\",\n  \"hideValue\": true\n },\n {\n  \"value\": \"IS_NOT_SET\",\n  \"label\": \"Is not set\",\n  \"hideValue\": true\n }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining LDAP Sync Credentials in Markdown Table\nDESCRIPTION: This snippet defines two environment variables, LDAP_SYNC_USER_USERNAME and LDAP_SYNC_USER_PASSWORD, used for LDAP synchronization in Flagsmith. It specifies example values and describes their purpose in connecting to the LDAP server.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/04-LDAP.md#2025-04-21_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| **LDAP_SYNC_USER_USERNAME**                | john                                                                                                     | Username used by [sync_ldap_users_and_groups](#sync-ldap-groups) in order to connect to the server.                                                                                                                                                                                                                                                | None                                                       |\n| **LDAP_SYNC_USER_PASSWORD**                | password                                                                                                 | Password used by [sync_ldap_users_and_groups](#sync-ldap-groups) in order to connect to the server.                                                                                                                                                                                                                                                | None                                                       |\n```\n\n----------------------------------------\n\nTITLE: Defining integration_data JSON structure for Flagsmith integrations\nDESCRIPTION: This JSON snippet defines the structure for integration data used in Flagsmith's integration page. It specifies fields, image URL, tags, and description for integrations like Data Dog.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/platform/releases.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"perEnvironment\": false,\n    \"image\": \"https://xyz\",\n    \"fields\": [\n      {\n        \"key\": \"base_url\",\n        \"label\": \"Base URL\"\n      },\n      {\n        \"key\": \"api_key\",\n        \"label\": \"API Key\"\n      }\n    ],\n    \"tags\": [\n      \"logging\"\n    ],\n    \"title\": \"Data dog\",\n    \"description\": \"Sends events to Data dog for when flags are created, updated and removed. Logs are tagged with the environment they came from e.g. production.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flagsmith with Custom Values File\nDESCRIPTION: Commands to download the default values.yaml file and use it for custom Flagsmith installation.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/kubernetes.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/Flagsmith/flagsmith-charts/main/charts/flagsmith/values.yaml\nhelm install -n flagsmith --create-namespace flagsmith flagsmith/flagsmith -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Querying Flagsmith API for Identity Flags\nDESCRIPTION: Example of how to make an API call to Flagsmith to retrieve flag values for a specific identity using the environment key. This endpoint triggers the data transfer to RudderStack.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/integrations/analytics/rudderstack.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://edge.api.flagsmith.com/api/v1/identities/?identifier=development_user_123456' \\\n  -H 'X-Environment-Key: 8KzETdDeMY7xkqkSkY3Gsg'\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Canonicalization Methods for SAML in Shell\nDESCRIPTION: This shell command demonstrates how to set the EXTRA_ALLOWED_CANONICALIZATIONS environment variable to enable additional canonicalization methods for SAML processing in Flagsmith.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/01-SAML/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nEXTRA_ALLOWED_CANONICALIZATIONS=http://www.w3.org/TR/2001/REC-xml-c14n-20010315#,http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\n```\n\n----------------------------------------\n\nTITLE: Setting LDAP Search Base for User Lookup in Flagsmith\nDESCRIPTION: Defines the LDAP search base for looking up users. This determines the starting point in the directory tree for user searches.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/04-LDAP.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| **LDAP_AUTH_SEARCH_BASE** | ou=people,dc=example,dc=com | The LDAP search base for looking up users | ou=people,dc=example,dc=com |\n```\n\n----------------------------------------\n\nTITLE: Configuring Expiring Local Memory Cache in Flagsmith\nDESCRIPTION: Example environment variables for specifying a cache local to each API instance that expires after 60 seconds. This configuration is useful for deployments with few environments and flexible flag change propagation times.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-api.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nCACHE_ENVIRONMENT_DOCUMENT_SECONDS: \"60\"\nCACHE_ENVIRONMENT_DOCUMENT_BACKEND:  \"django.core.cache.backends.locmem.LocMemCache\"\n```\n\n----------------------------------------\n\nTITLE: Querying Identity Flags from Flagsmith API\nDESCRIPTION: Example cURL request to retrieve flag values for a specific identity from the Flagsmith API. This request demonstrates how to fetch flags that will be sent to Segment's Identify endpoint.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/integrations/analytics/segment.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://edge.api.flagsmith.com/api/v1/identities/?identifier=development_user_123456' \\\n  -H 'X-Environment-Key: 8KzETdDeMY7xkqkSkY3Gsg'\n```\n\n----------------------------------------\n\nTITLE: Audit Log Web Hook Payload Structure in JSON\nDESCRIPTION: Example JSON structure of an Audit Log Web Hook payload in Flagsmith. It includes details about the action, author, environment, project, and related object.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/webhooks.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n \"created_date\": \"2020-02-23T17:30:57.006318Z\",\n \"log\": \"New Flag / Remote Config created: my_feature\",\n \"author\": {\n  \"id\": 3,\n  \"email\": \"user@domain.com\",\n  \"first_name\": \"Kyle\",\n  \"last_name\": \"Johnson\"\n },\n \"environment\": null,\n \"project\": {\n  \"id\": 6,\n  \"name\": \"Project name\",\n  \"organisation\": 1\n },\n \"related_object_id\": 6,\n \"related_object_type\": \"FEATURE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Rollback Commands for Flagsmith (Pre v2.151.0)\nDESCRIPTION: SQL query to generate Python commands for rolling back migrations in Flagsmith versions earlier than v2.151.0. The query uses the django_migrations table to determine the appropriate rollback commands.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-api.md#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    concat('python manage.py migrate ',\n    app,\n    ' ',\n    case\n        when substring(name, 1, 4)::integer = 1 then 'zero'\n        else lpad((substring(name, 1, 4)::integer - 1)::text, 4, '0')\n        end\n    ) as \"python_commands\"\nfrom django_migrations\nwhere id in (\n    select min(id)\n    from django_migrations\n    where applied >= 'yyyy-MM-dd HH:mm:ss'\n    group by app\n);\n```\n\n----------------------------------------\n\nTITLE: API Response for /api/v1/identities Before Hiding Sensitive Data in JSON\nDESCRIPTION: Example JSON response from the /api/v1/identities endpoint before enabling the 'Hide Sensitive Data' feature. It shows the full structure of the response including traits and flag details.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/security.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n \"traits\": [{ \"id\": 1, \"trait_key\": \"key\", \"trait_value\": \"value\" }],\n \"flags\": [\n  {\n   \"id\": 27595,\n   \"feature\": {\n    \"id\": 9422,\n    \"name\": \"first_feature\",\n    \"created_date\": \"2023-05-14T06:11:08.178802Z\",\n    \"description\": null,\n    \"initial_value\": null,\n    \"default_enabled\": false,\n    \"type\": \"STANDARD\"\n   },\n   \"feature_state_value\": null,\n   \"environment\": 5242,\n   \"identity\": null,\n   \"feature_segment\": null,\n   \"enabled\": false\n  },\n  {\n   \"id\": 27597,\n   \"feature\": {\n    \"id\": 9423,\n    \"name\": \"second_feature\",\n    \"created_date\": \"2023-05-14T06:29:29.542708Z\",\n    \"description\": null,\n    \"initial_value\": null,\n    \"default_enabled\": false,\n    \"type\": \"STANDARD\"\n   },\n   \"feature_state_value\": null,\n   \"environment\": 5242,\n   \"identity\": null,\n   \"feature_segment\": null,\n   \"enabled\": false\n  }\n ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Active Directory Domain for LDAP in Flagsmith\nDESCRIPTION: Configures the login domain for Active Directory users. This is specific to Active Directory LDAP implementations.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/04-LDAP.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| **LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN** | DOMAIN | Sets the login domain for Active Directory users. | None |\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal PostgreSQL Database\nDESCRIPTION: YAML configuration to customize the internal PostgreSQL database used by Flagsmith, such as increasing max_connections.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/kubernetes.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\npostgresql:\n enabled: true\n\n postgresqlConfiguration:\n  max_connections: '200' # override the default max_connections of 100\n```\n\n----------------------------------------\n\nTITLE: Querying Flagsmith API for Identity Flags in Bash\nDESCRIPTION: This curl command demonstrates how to make an API call to Flagsmith to retrieve flags for a specific identity. It uses the environment key for authentication and includes the identifier for the user.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/integrations/analytics/heap.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://edge.api.flagsmith.com/api/v1/identities/?identifier=development_user_123456' \\\n  -H 'X-Environment-Key: 8KzETdDeMY7xkqkSkY3Gsg'\n```\n\n----------------------------------------\n\nTITLE: Marking Transient Traits with curl API\nDESCRIPTION: Examples of using curl to mark individual traits or entire identities as transient via the Flagsmith API. Requires environment key for authentication.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/transient-traits.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST 'https://edge.api.flagsmith.com/api/v1/identities/' \\\n--header 'X-Environment-Key: <Your Env Key>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"identifier\":\"identifier_5\",\n    \"traits\": [\n        {\n            \"trait_key\": \"my_trait_key\",\n            \"trait_value\": 123.5,\n            \"transient\": true\n        },\n        {\n            \"trait_key\": \"my_other_key\",\n            \"trait_value\": true\n        }\n    ]\n}'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST 'https://edge.api.flagsmith.com/api/v1/identities/' \\\n--header 'X-Environment-Key: <Your Env Key>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"identifier\":\"identifier_5\",\n    \"traits\": [\n        {\n            \"trait_key\": \"my_trait_key\",\n            \"trait_value\": 123.5\n        },\n        {\n            \"trait_key\": \"my_other_key\",\n            \"trait_value\": true\n        }\n    ],\n    \"transient\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: Building and Running Flagsmith Frontend in Production Mode\nDESCRIPTION: Commands to bundle, minify, and run the Flagsmith frontend in production mode. This can be used as part of a deployment script.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-frontend.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd frontend\nnpm run bundle\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running Pre-commit Checks Manually for Flagsmith Project\nDESCRIPTION: This command allows you to manually run all pre-commit checks across the entire codebase of the Flagsmith project.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/platform/contributing.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npre-commit run --all-files\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Connection Timeout in Flagsmith\nDESCRIPTION: Sets the connection timeout in seconds for the LDAP connection. This helps manage network issues and prevent indefinite waiting.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/04-LDAP.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| **LDAP_AUTH_CONNECT_TIMEOUT** | 60 | Set connection timeouts (in seconds) on the underlying `ldap3` library. | None |\n```\n\n----------------------------------------\n\nTITLE: Setting up Minikube for Local Flagsmith Development (Bash)\nDESCRIPTION: This snippet demonstrates how to set up a local development environment for Flagsmith using Minikube on OSX. It includes steps to install Minikube, start a cluster, install the Flagsmith chart, and open the Minikube dashboard.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/kubernetes.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Install Docker for Desktop and then:\n\nbrew install minikube\nminikube start --memory 8192 --cpus 4\nhelm install flagsmith --debug ./flagsmith\nminikube dashboard\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP User Object Class in Flagsmith\nDESCRIPTION: Specifies the LDAP class that represents a user. This is used to identify user objects in the LDAP directory.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/04-LDAP.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| **LDAP_AUTH_OBJECT_CLASS** | inetOrgPerson | The LDAP class that represents a user | inetOrgPerson |\n```\n\n----------------------------------------\n\nTITLE: Deploying Edge Proxy with Docker Compose\nDESCRIPTION: Docker Compose configuration for running the Edge Proxy service with volume mounting and port mapping\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-edge-proxy.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n edge_proxy:\n  image: flagsmith/edge-proxy:latest\n  volumes:\n   - type: bind\n     source: ./config.json\n     target: /app/config.json\n  ports:\n   - '8000:8000'\n```\n\n----------------------------------------\n\nTITLE: Updating Feature Description with Terraform\nDESCRIPTION: This HCL snippet shows how to update an existing feature flag's description using Terraform. It modifies the 'description' field of the previously created feature.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/integrations/terraform.md#2025-04-21_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# the feature that you want to manage\nresource \"flagsmith_feature\" \"new_standard_feature\" {\n  feature_name = \"new_standard_feature\"\n  project_uuid = \"10421b1f-5f29-4da9-abe2-30f88c07c9e8\"\n  description  = \"New description\"\n  type         = \"STANDARD\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Flagsmith Project using pytest\nDESCRIPTION: This command demonstrates how to run tests for the Flagsmith project using pytest. It sets the DJANGO_SETTINGS_MODULE environment variable to the test settings before running the tests.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/platform/contributing.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDJANGO_SETTINGS_MODULE=app.settings.test pytest\n```\n\n----------------------------------------\n\nTITLE: Flagsmith Version 2.124.0 Release Notes\nDESCRIPTION: Release notes documenting new features and bug fixes including confirmations for removing features, API usage notifications, SAML attribute mapping, and Grafana integration.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [2.124.0](https://github.com/Flagsmith/flagsmith/compare/v2.123.1...v2.124.0) (2024-06-24)\n\n### Features\n\n* Add confirmations when removing features, segments and environments ([#4210](https://github.com/Flagsmith/flagsmith/issues/4210))\n* Add logic to API usage notification templates ([#4206](https://github.com/Flagsmith/flagsmith/issues/4206))\n* Add UI for SAML attribute mapping ([#4184](https://github.com/Flagsmith/flagsmith/issues/4184))\n* Grafana integration ([#4144](https://github.com/Flagsmith/flagsmith/issues/4144))\n* **versioning:** add logic to create version in single endpoint ([#3991](https://github.com/Flagsmith/flagsmith/issues/3991))\n```\n\n----------------------------------------\n\nTITLE: Configuring Procfile for Flagsmith on Aptible\nDESCRIPTION: Defines the command to be run when starting the Flagsmith application on Aptible. It specifies to use the 'serve' command, which starts only the API without running database migrations.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/aptible.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncmd: serve\n```\n\n----------------------------------------\n\nTITLE: Customizing LDAP Username Format in Flagsmith\nDESCRIPTION: Specifies a callable used to format the username for binding to the LDAP server. This allows for custom username formatting logic.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/04-LDAP.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| **LDAP_AUTH_FORMAT_USERNAME** | django_python3_ldap.<br/>utils.format_username_openldap | Path to a callable used to format the username to bind to the LDAP server | django_python3_ldap.utils.format_username_openldap |\n```\n\n----------------------------------------\n\nTITLE: Sending Identity Traits to Edge Proxy using cURL in Bash\nDESCRIPTION: This example demonstrates how to send identity traits to the Flagsmith Edge Proxy using cURL. Since the Edge Proxy is stateless and cannot persist trait data, you must provide the full set of traits when requesting flags for a particular identity.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/advanced-use/edge-proxy.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X \"POST\" \"http://localhost:8000/api/v1/identities/?identifier=do_it_all_in_one_go_identity\" \\\n     -H 'X-Environment-Key: n9fbf9h3v4fFgH3U3ngWhb' \\\n     -H 'Content-Type: application/json; charset=utf-8' \\\n     -d $'{\n  \"traits\": [\n      {\n          \"trait_value\": 123.5,\n          \"trait_key\": \"my_trait_key\"\n      },\n      {\n          \"trait_value\": true,\n          \"trait_key\": \"my_other_key\"\n      }\n  ],\n  \"identifier\": \"do_it_all_in_one_go_identity\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Subscribing to FCM Marketing Topic using Flagsmith in React Native\nDESCRIPTION: This code snippet checks if the 'fcm_marketing_beta' feature flag is enabled for a user in Flagsmith. If enabled, it subscribes the user to the 'marketing' FCM topic, allowing them to receive test marketing push notifications.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/guides-and-examples/testing-push-notifications.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst isInMarketingBeta = flagsmith.hasFeature('fcm_marketing_beta');\n\nif (isInMarketingBeta) {\n messaging().subscribeToTopic('marketing');\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flagsmith Frontend Dependencies\nDESCRIPTION: Commands to navigate to the frontend directory and install the required npm packages.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-frontend.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd frontend\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Building Flagsmith Helm Chart Package (Bash)\nDESCRIPTION: This command packages the Flagsmith Helm chart into a distributable archive. It creates a .tgz file containing all the necessary chart files and dependencies.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/kubernetes.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nhelm package ./flagsmith\n```\n\n----------------------------------------\n\nTITLE: Specifying Health Check Endpoint for Cloud Run (Bash)\nDESCRIPTION: When configuring health checks for the Flagsmith service on Cloud Run, use the '/health' endpoint for both the API and Front End. This ensures proper monitoring of the service health.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/google-cloud.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/health\n```\n\n----------------------------------------\n\nTITLE: Deleting an Edge Identity in Flagsmith API (Python)\nDESCRIPTION: This script demonstrates how to delete an edge identity in Flagsmith using the API. It sends a DELETE request to remove the specified edge identity based on its UUID.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/rest.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nimport requests\n\nTOKEN = os.environ.get(\"API_TOKEN\")  # obtained from Account section in dashboard\nENV_KEY = os.environ.get(\"ENV_KEY\")  # obtained from Environment settings in dashboard\nIDENTITY_UUDI = os.environ[\"IDENTITY_UUDI\"] # must (currently) be obtained by inspecting the request to /api/v1/environments/{ENV_KEY}/edge-identities/{IDENTITY_UUDI} in the network console\nBASE_URL = \"https://edge.api.flagsmith.com/api/v1\"  # update this if self hosting\n\nsession = requests.Session()\nsession.headers.update(\n    {\"Authorization\": f\"Token {TOKEN}\", \"Content-Type\": \"application/json\"}\n)\n\n# delete the existing edge identity based on the uuid\ndelete_edge_identity_url = f\"{BASE_URL}/environments/{ENV_KEY}/edge-identities/{IDENTITY_UUDI}/\"\ndelete_edge_identity_response = session.delete(delete_edge_identity_url)\nassert delete_edge_identity_response.status_code == 204\n```\n\n----------------------------------------\n\nTITLE: Oracle Database Setup Commands\nDESCRIPTION: SQL commands for setting up Oracle database user and permissions for Flagsmith.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/configuration/enterprise-edition.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nconn sys as sysdba;\n# password is blank when asked\nalter session set \"_ORACLE_SCRIPT\"=true;\ncreate user oracle_user identified by oracle_password;\ngrant dba to oracle_user;\nGRANT EXECUTE ON SYS.DBMS_LOB TO oracle_user;\nGRANT EXECUTE ON SYS.DBMS_RANDOM TO oracle_user;\n```\n\n----------------------------------------\n\nTITLE: Importing Flagsmith JavaScript SDK\nDESCRIPTION: This code snippet demonstrates how to import the Flagsmith JavaScript SDK into a web page using a CDN link. The version number is dynamically inserted.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/flagsmith@[VERSION]/index.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with AppDynamics\nDESCRIPTION: Command to build the Docker image with AppDynamics configuration included.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/integrations/apm/appdynamics.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose.yml build\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Flagsmith Access\nDESCRIPTION: Command to set up port forwarding to access Flagsmith locally via a browser after installation.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/kubernetes.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n [flagsmith-namespace] port-forward svc/[flagsmith-release-name]-frontend 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Health Check Grace Period Calculation\nDESCRIPTION: Python pseudo-code demonstrating how the Edge Proxy calculates health check grace periods\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-edge-proxy.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntotal_grace_period_seconds = api_poll_frequency + (environment_update_grace_period_seconds * len(environment_key_pairs))\nif last_updated_all_environments_at < datetime.now() - timedelta(seconds=total_grace_period_seconds):\n    # Data is stale\n    return 500\n# Data is not stale\nreturn 200\n```\n\n----------------------------------------\n\nTITLE: Templating Flagsmith Helm Chart (Bash)\nDESCRIPTION: This command generates a template of the Kubernetes resources that would be created by the Flagsmith Helm chart. It uses the local values.yaml file and enables debug output for detailed information about the templating process.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/kubernetes.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nhelm template flagsmith flagsmith --debug -f flagsmith/values.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Flagsmith Feature Flags Table in Markdown\nDESCRIPTION: This snippet shows a markdown table listing various Flagsmith feature flags, their descriptions, and associated text values. It includes flags for announcements, UI modes, environment configurations, authentication methods, and more.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Flag Name                                   | Description                                                                                                                                    | Text Value                                        |\n| ------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------- |\n| `announcement`                              | Shows an announcement at the top of the app                                                                                                    | None                                              |\n| `butter_bar`                                | Show html in a butter bar for certain users                                                                                                    | None                                              |\n| `dark_mode`                                 | Enables Dark Mode in UI See Below                                                                                                              | None                                              |\n| `default_environment_names_for_new_project` | Names of default environments to create when creating a new project (e.g. `[\"Development\", \"Production\"]`)                                     | None                                              |\n| `disable_create_org`                        | Turning this on will prevent users from creating any additional organisations                                                                  | None                                              |\n| `disable_users_as_reviewers`                | If enabled, this flag will hide the Assigned users section in the Change Requests and in the Create Change Request modal in the Features page. | None                                              |\n| `feature_versioning`                        | Opt into feature versioning for your environment                                                                                               | None                                              |\n| `integration_data`                          | Integration config for different providers                                                                                                     | [See Below](#integration_data)                    |\n| `mailing_list`                              | Determines if mailing list consent is shown on signup                                                                                          | None                                              |\n| `max_api_calls_alert`                       | If enabled, shows an alert message in the top banner when the organization is over a 70% of its API calls limit                                | None                                              |\n| `oauth_github`                              | GitHub login key                                                                                                                               | [See Below](#oauth_github)                        |\n| `oauth_google`                              | Google login key                                                                                                                               | [See Below](#oauth_google)                        |\n| `payments_enabled`                          | Determines whether to show payment UI / seats                                                                                                  | None                                              |\n| `plan_based_access`                         | Controls rbac and 2f based on plans                                                                                                            | None                                              |\n| `saml`                                      | Enables SAML authentication                                                                                                                    | [See](/system-administration/authentication/SAML) |\n| `segment_operators`                         | Determines what rules are shown when creating a segment                                                                                        | [See Below](#segment_operators)                   |\n| `sso_idp`                                   | For self hosted, this will automatically redirect to the pre configured IdP                                                                    | None                                              |\n| `verify_seats_limit_for_invite_links`       | Determines whether to show los invite links                                                                                                    | None                                              |\n```\n\n----------------------------------------\n\nTITLE: Importing ReactPlayer Component in Markdown\nDESCRIPTION: This code snippet imports the ReactPlayer component, which is used to embed a video player in the documentation.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/integrations/apm/datadog.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport ReactPlayer from 'react-player'\n```\n\n----------------------------------------\n\nTITLE: Configuring .aptible.yml for Flagsmith Deployment\nDESCRIPTION: Specifies the tasks to be run before releasing the Flagsmith application on Aptible. It includes running database migrations and bootstrapping the application.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/aptible.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbefore_release:\n - migrate\n - bootstrap\n```\n\n----------------------------------------\n\nTITLE: Executing Interactive Shell in Kubernetes Flagsmith API Container\nDESCRIPTION: Command to run an interactive shell inside an existing Flagsmith API container in a Kubernetes environment. Requires replacing 'YOUR_API_SERVICE' with the actual Kubernetes service name.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/importing-and-exporting/organisations.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -it service/YOUR_API_SERVICE --container flagsmith-api -- sh\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with AppDynamics\nDESCRIPTION: YAML configuration for running Flagsmith API with AppDynamics integration using docker-compose.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/configuration/enterprise-edition.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n build:\n context: .\n dockerfile: docker/Dockerfile\n env:\n  APP_DYNAMICS: 'on'\n volumes:\n  - \\{config_file_path\\}:/etc/appdynamics.cfg\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL with Docker Compose (Bash)\nDESCRIPTION: Command to start a local PostgreSQL instance using Docker Compose, which is useful for local development and testing of the Flagsmith API.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-api.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker/db.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Conditional API Usage Alert Template in Django/Jinja2\nDESCRIPTION: Template code for generating API usage notification emails with different messages for paid and free tier organizations. Includes conditional logic for grace periods and usage thresholds.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/api/organisations/templates/organisations/api_usage_notification_limit.txt#2025-04-21_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\nHi there,\n\nThis is a system generated notification related to your Flagsmith API Usage. Your organisation, {{ organisation.name }} (ID: {{ organisation.id }}),\nhas reached {{ matched_threshold }}% of your API usage within the current subscription period.\n\n{% if organisation.is_paid %}\nWe will charge for overages at the end of the pay period. Please see the pricing page for more information or check the Terms of Service at https://www.flagsmith.com/terms-of-service.\nYou can reach out to support@flagsmith.com if you'd like to take advantage of better contracted rates.\n{% else %}\nPlease note that the serving of feature flags and admin access will be disabled{% if grace_period %} after a 7 day\ngrace period{% endif %} until the next subscription period. If you'd like to continue service you can upgrade your\norganisation's account (see pricing page).\n{% endif %}\n\nYou can view the details of your organisation's API usage at {{ usage_url }}.\n\nThank you!\n\nThe Flagsmith Team\n```\n\n----------------------------------------\n\nTITLE: Embedding ReactPlayer Video in Markdown\nDESCRIPTION: This code snippet embeds a ReactPlayer video component with specific props to display a tutorial video for adding the Flagsmith integration to Datadog.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/integrations/apm/datadog.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<ReactPlayer\n    controls\n    width=\"100%\"\n    height=\"460px\"\n    url='https://flagsmith.wistia.com/medias/76558s9yj7' />\n```\n\n----------------------------------------\n\nTITLE: InfluxDB API Request Downsampling Task\nDESCRIPTION: InfluxDB task configuration to downsample API request data to 15-minute blocks for improved query performance. Aggregates data from the default bucket into downsampled measurements.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/index.md#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\noption task = {name: \"Downsample (API Requests)\", every: 15m}\n\ndata = from(bucket: \"default\")\n |> range(start: -duration(v: int(v: task.every) * 2))\n |> filter(fn: (r) =>\n  (r._measurement == \"api_call\"))\n\ndata\n |> aggregateWindow(fn: sum, every: 15m)\n |> filter(fn: (r) =>\n  (exists r._value))\n |> to(bucket: \"default_downsampled_15m\")\n```\n\n----------------------------------------\n\nTITLE: Importing Flagsmith Organisation from S3-compatible Storage\nDESCRIPTION: Command to import a Flagsmith organisation from an S3-compatible storage bucket named 'my-bucket' with the key 'org-1234.json'.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/importing-and-exporting/organisations.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py importorganisationfroms3 my-bucket org-1234.json\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on MacOS (Bash)\nDESCRIPTION: Commands to install required dependencies (cmake and re2) on MacOS using Homebrew, which may be necessary if encountering issues with pyre2 installation.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-api.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install cmake re2\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for AppDynamics Integration\nDESCRIPTION: Docker compose configuration showing how to enable AppDynamics monitoring in the API service build arguments.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/integrations/apm/appdynamics.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n build:\n context: .\n dockerfile: docker/Dockerfile\n args:\n  APP_DYNAMICS: 'on'\n```\n\n----------------------------------------\n\nTITLE: Checking Documentation Changes with Prettier\nDESCRIPTION: Uses Prettier to check for formatting issues in the documentation files located in the 'docs' directory.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/README.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpx prettier --check docs\n```\n\n----------------------------------------\n\nTITLE: Load Testing Commands with wrk\nDESCRIPTION: Example wrk commands for load testing Flagsmith API endpoints.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/configuration/enterprise-edition.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n#  Get flags endpoint\nwrk -t6 -c200 -d20s -H 'X-Environment-Key: iyiS5EDNDxMDuiFpHoiwzG' http://127.0.0.1:8000/api/v1/flags/\n\n# Get flags for an identity\nwrk -t6 -c200 -d20s -H 'X-Environment-Key: iyiS5EDNDxMDuiFpHoiwzG' \"http://127.0.0.1:8000/api/v1/identities/?identifier=mrflags@flagsmith.com\"\n```\n\n----------------------------------------\n\nTITLE: Configuring S3-compatible Storage Endpoint\nDESCRIPTION: Command to set the endpoint URL for S3-compatible storage services like Google Cloud Storage, used in Flagsmith import/export operations.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/importing-and-exporting/organisations.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_ENDPOINT_URL_S3='https://storage.googleapis.com'\n```\n\n----------------------------------------\n\nTITLE: InfluxDB Flag Evaluations Downsampling Task\nDESCRIPTION: InfluxDB task configuration to downsample flag evaluation data to 15-minute blocks. Processes feature evaluation metrics for analytics dashboard visualization.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/index.md#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\noption task = {name: \"Downsample (Flag Evaluations)\", every: 15m}\n\ndata = from(bucket: \"default\")\n |> range(start: -duration(v: int(v: task.every) * 2))\n |> filter(fn: (r) =>\n  (r._measurement == \"feature_evaluation\"))\n\ndata\n |> aggregateWindow(fn: sum, every: 15m)\n |> filter(fn: (r) =>\n  (exists r._value))\n |> to(bucket: \"default_downsampled_15m\")\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with AppDynamics\nDESCRIPTION: Command to run the Docker container with AppDynamics monitoring enabled.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/integrations/apm/appdynamics.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Running AppDynamics with Docker\nDESCRIPTION: Command to run Docker container with AppDynamics configuration mounted as a volume.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/configuration/enterprise-edition.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -t \\{image_name\\} -v \\{config_file_path\\}:/etc/appdynamics.cfg -e APP_DYNAMICS=on\n```\n\n----------------------------------------\n\nTITLE: Initializing Ruby Flagsmith Client\nDESCRIPTION: Code to initialize the Flagsmith client in Ruby with an environment key.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"flagsmith\"\n\n$flagsmith = Flagsmith::Client.new(\n  environment_key: 'FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY'\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Conditional API Usage Alert Template in Django/Jinja2\nDESCRIPTION: Template code for generating API usage notification emails. Includes conditional logic for paid vs free organizations, usage threshold information, and dynamic URLs for usage monitoring. Uses Django/Jinja2 template syntax for variable interpolation and control flow.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/api/organisations/templates/organisations/api_usage_notification.txt#2025-04-21_snippet_0\n\nLANGUAGE: django\nCODE:\n```\nHi there,\n\nThis is a system generated notification related to your Flagsmith API usage. Your organisation, {{ organisation.name }} (ID: {{ organisation.id }}),\nhas reached {{ matched_threshold }}% of its API usage within the current subscription period.\n\n{% if organisation.is_paid %}\nIf this is expected, no action is required. If you are expecting to go over, you can upgrade your organisation's account\nlimits by reaching out to support@flagsmith.com. We will automatically charge for overages at the end of the pay period. For more information, check the Terms of Service at https://www.flagsmith.com/terms-of-service.\n{% else %}\nPlease note that once 100% use has been breached, the serving of feature flags and admin access may be disabled{% if grace_period %}\nafter a 7-day grace period{% endif %}. Please reach out to support@flagsmith.com in order to upgrade your account.\n{% endif %}\n\n{% with usage_url=\"{{ url }}/organisation/{{ organisation.id | urlencode }}/usage\" %}\nYou can view the details of your organisation's API usage at {{ url }}/organisation/{{ organisation.id }}/usage.\n{% endwith %}\n\nThank you!\n\nThe Flagsmith team\n```\n\n----------------------------------------\n\nTITLE: Rendering Personalized Change Request Email Template with Django/Jinja\nDESCRIPTION: An email template that personalizes the greeting with the approver's name, includes optional author information, and provides a link to view the change request. Uses Django/Jinja template syntax for dynamic content insertion.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/api/features/workflows/core/templates/workflows_core/change_request_assignee_notification.txt#2025-04-21_snippet_0\n\nLANGUAGE: django\nCODE:\n```\nHi {{ approver.full_name | default:\"there\" }},\n\nYou have been assigned to a change request on Flagsmith{% if author.full_name %} created by {{ author.full_name }}{% endif %}. Click on the link below to see it.\n\n{{ url }}\n\nThe Flagsmith Team\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Group Synchronization in Flagsmith\nDESCRIPTION: Specifies LDAP groups to be synchronized with Flagsmith. This setting allows for lazy group creation and user association on login.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/authentication/04-LDAP.md#2025-04-21_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| **LDAP_SYNCED_GROUPS** | CN=Readers,CN=Roles,CN=webapp01,<br/>dc=admin,dc=com:CN=Marvel,CN=Roles,<br/>CN=webapp01,dc=admin,dc=com | colon(:) seperated list of DN's of ldap group that will be copied over to Flagsmith (lazily, i.e: On user login we will create the group(s) and add the current user to the group(s) if the user is a part of them). Note: please make sure to set `LDAP_AUTH_SYNC_USER_RELATIONS` to `flagsmith.ldap.sync_user_groups` in order for this to work. | [] |\n```\n\n----------------------------------------\n\nTITLE: Importing ReactPlayer Component in Markdown\nDESCRIPTION: This code snippet imports the ReactPlayer component, which is used to embed a video player in the documentation.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/integrations/apm/grafana.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport ReactPlayer from 'react-player'\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Flag Handler in Ruby\nDESCRIPTION: This Ruby code demonstrates how to configure a default flag handler using the Flagsmith client. It defines a lambda function to handle default flag values and initializes the Flagsmith client with this handler.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\n$flagsmith = Flagsmith::Client.new(\n    environment_key: '<FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY'>,\n    default_flag_handler: lambda { |feature_name|\n        Flagsmith::Flags::DefaultFlag.new(\n            enabled: false, value: {'colour': '#ababab'}.to_json\n        )\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Initial Admin User Creation Output\nDESCRIPTION: Sample console output showing the creation of the default admin user and password reset link during first-time setup.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nSuperuser \"admin@example.com\" created successfully.\nPlease go to the following page and choose a password: http://localhost:8000/password-reset/confirm/.../...\n```\n\n----------------------------------------\n\nTITLE: Rendering Authentication Section\nDESCRIPTION: JSX components that render the authentication section including security scheme details and environment key information.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/edge-api/edge-api.info.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  style={{\"marginBottom\":\"2rem\"}}\n>\n  <Heading\n    id={\"authentication\"}\n    as={\"h2\"}\n    className={\"openapi-tabs__heading\"}\n    children={\"Authentication\"}\n  >\n  </Heading><SchemaTabs\n    className={\"openapi-tabs__security-schemes\"}\n  >\n    <TabItem\n      label={\"API Key: EnvironmentKey\"}\n      value={\"EnvironmentKey\"}\n    >\n      <div>\n        <table>\n          <tbody>\n            <tr>\n              <th>\n                Security Scheme Type:\n              </th><td>\n                apiKey\n              </td>\n            </tr><tr>\n              <th>\n                Header parameter name:\n              </th><td>\n                X-Environment-Key\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </TabItem>\n  </SchemaTabs>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Querying Django Migrations for Rollback in Flagsmith\nDESCRIPTION: SQL query to retrieve applied migrations from the django_migrations table, ordered by application date in descending order. This helps in identifying the correct point for rollback.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-api.md#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM django_migrations\nORDER BY applied DESC\n```\n\n----------------------------------------\n\nTITLE: Starting Docusaurus Local Development Server\nDESCRIPTION: Launches a local development server for the Docusaurus website, opening a browser window and enabling live updates.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Edge API Documentation\nDESCRIPTION: JSX imports for rendering the API documentation components including logos, headings, schema tabs, and tab items.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/edge-api/edge-api.info.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiLogo from \"@theme/ApiLogo\";\nimport Heading from \"@theme/Heading\";\nimport SchemaTabs from \"@theme/SchemaTabs\";\nimport TabItem from \"@theme/TabItem\";\nimport Export from \"@theme/ApiExplorer/Export\";\n```\n\n----------------------------------------\n\nTITLE: Using Swift Concurrency with Flagsmith SDK in iOS\nDESCRIPTION: Demonstrates how to use Swift's async/await syntax with the Flagsmith SDK for cleaner, more streamlined code.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/ios.mdx#2025-04-21_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n/// (Example) Setup the app based on the available feature flags.\nfunc determineAppConfiguration() async throws {\n    let flagsmith = Flagsmith.shared\n\n    if try await flagsmith.hasFeatureFlag(withID: \"ab_test_enabled\") {\n        if let theme = try await flagsmith.getFeatureValue(withID: \"app_theme\") {\n            setTheme(theme)\n        } else {\n            let flags = try await flagsmith.getFeatureFlags()\n                processFlags(flags)\n        }\n    } else {\n        let trait = Trait(key: \"selected_tint_color\", value: \"orange\")\n        let identity = \"4DDBFBCA-3B6E-4C59-B107-954F84FD7F6D\"\n        try await flagsmith.setTrait(trait, forIdentity: identity)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docusaurus Server on Local IP\nDESCRIPTION: Starts the Docusaurus development server on 0.0.0.0, allowing access from the local IP when port forwarding from a remote server or VM.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm run start -- --host 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for Flagsmith Frontend\nDESCRIPTION: Command to run automated end-to-end tests using Test Cafe with Chromedriver.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/deployment/hosting/locally-frontend.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing Docusaurus Website Dependencies\nDESCRIPTION: Installs the necessary npm packages for the Docusaurus website project.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Offline Handler in Go\nDESCRIPTION: Skeleton structure for implementing a custom offline handler in Go that can be used with the Flagsmith SDK in offline mode.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/server-side.mdx#2025-04-21_snippet_42\n\nLANGUAGE: go\nCODE:\n```\ntype CustomOfflineHandler struct {\n    ...\n}\n\nfunc (handler *CustomOfflineHandler) GetEnvironment() *environments.EnvironmentModel {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Version Control Markdown - Changelog\nDESCRIPTION: Markdown formatted changelog documenting version releases, features, bug fixes and dependency updates for the Flagsmith project. Includes version numbers, commit links, issue references and categorized changes.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## [2.173.1](https://github.com/Flagsmith/flagsmith/compare/v2.173.0...v2.173.1) (2025-04-21)\n\n\n### Bug Fixes\n\n* Task processor overload when handling high volume SDK traffic ([#5358](https://github.com/Flagsmith/flagsmith/issues/5358)) ([4b0ae75](https://github.com/Flagsmith/flagsmith/commit/4b0ae75a4b60952e87a6e0a7b28e6826f9b71aaf))\n\n## [2.173.0](https://github.com/Flagsmith/flagsmith/compare/v2.172.1...v2.173.0) (2025-04-18)\n\n\n### Features\n\n* **billing:** Remove `AUTO_SEAT_UPGRADE_PLANS` setting ([#5343](https://github.com/Flagsmith/flagsmith/issues/5343)) ([de92415](https://github.com/Flagsmith/flagsmith/commit/de92415af5b853cf4550c57afd7a297c98372691))\n* MetadataModelRequirement can accept organization as content-type ([#5325](https://github.com/Flagsmith/flagsmith/issues/5325)) ([9974494](https://github.com/Flagsmith/flagsmith/commit/99744945e879189288023f8a9dd60ac6c2e5d45a))\n\n\n### Bug Fixes\n\n* compare-sha-tags-in-lowercase ([#5350](https://github.com/Flagsmith/flagsmith/issues/5350)) ([e97bd90](https://github.com/Flagsmith/flagsmith/commit/e97bd90e89cf064f885ad03ce1e4e1aef21ee6d6))\n* enable usage cache by default ([#5356](https://github.com/Flagsmith/flagsmith/issues/5356)) ([fdebe4f](https://github.com/Flagsmith/flagsmith/commit/fdebe4fcc6e76bdd8ffd9d2117f098f0e586598a))\n* Selecting build version data from RTK ([#5352](https://github.com/Flagsmith/flagsmith/issues/5352)) ([0dcca20](https://github.com/Flagsmith/flagsmith/commit/0dcca206d150103b57163f86213fca0f0cc80614))\n\n\n### Dependency Updates\n\n* bump @babel/runtime from 7.25.6 to 7.27.0 in /frontend ([#5335](https://github.com/Flagsmith/flagsmith/issues/5335)) ([9777dd1](https://github.com/Flagsmith/flagsmith/commit/9777dd1fc4263ae65cb114733d251748b3f73fc2))\n* bump http-proxy-middleware from 2.0.7 to 2.0.9 in /frontend ([#5348](https://github.com/Flagsmith/flagsmith/issues/5348)) ([9f30775](https://github.com/Flagsmith/flagsmith/commit/9f30775cd177bcecf4ec553f086e6584411eb7d3))\n```\n\n----------------------------------------\n\nTITLE: Markdown Redirect Notice\nDESCRIPTION: Markdown content providing link to new documentation location at docs.flagsmith.com\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/api/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# We've moved\n\nAPI deployment and development instructions have\n[moved to our Docs site](https://docs.flagsmith.com/deployment/locally-api)\n```\n\n----------------------------------------\n\nTITLE: Flagsmith Bug Fixes Documentation\nDESCRIPTION: Documentation of various bug fixes including CI improvements, API usage notifications, login redirects, and UI issues.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* **ci:** Docker build CodeQL permission ([#4217](https://github.com/Flagsmith/flagsmith/issues/4217))\n* **ci:** Secrets unavailable for deploy jobs ([#4215](https://github.com/Flagsmith/flagsmith/issues/4215))\n* Include free plans for api use notifications ([#4204](https://github.com/Flagsmith/flagsmith/issues/4204))\n* login redirect ([#4192](https://github.com/Flagsmith/flagsmith/issues/4192))\n* Metadata UI issues ([#4069](https://github.com/Flagsmith/flagsmith/issues/4069))\n* oauth user case sensitivity ([#4207](https://github.com/Flagsmith/flagsmith/issues/4207))\n* Preserve selected environment ([#4190](https://github.com/Flagsmith/flagsmith/issues/4190))\n```\n\n----------------------------------------\n\nTITLE: Listing Flagsmith API Services in Kubernetes\nDESCRIPTION: Command to list Flagsmith API services in a Kubernetes environment using a selector.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/importing-and-exporting/organisations.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get services --selector app.kubernetes.io/component=api\n```\n\n----------------------------------------\n\nTITLE: Regenerating OpenAPI Documentation\nDESCRIPTION: Cleans and regenerates the OpenAPI documentation using the docusaurus-openapi-docs plugin. This should be done when the edge-api.yaml file changes.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docusaurus clean-api-docs all\nnpm run docusaurus gen-api-docs all\n```\n\n----------------------------------------\n\nTITLE: Version Header\nDESCRIPTION: Version header showing semantically versioned release 2.84.1\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## [2.84.1](https://github.com/Flagsmith/flagsmith/compare/v2.84.0...v2.84.1) (2023-11-27)\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Header\nDESCRIPTION: Version header for release 2.84.0 showing comparison to previous version\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [2.84.0](https://github.com/Flagsmith/flagsmith/compare/v2.83.0...v2.84.0) (2023-11-27)\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Control in robots.txt\nDESCRIPTION: This robots.txt configuration instructs all web crawlers and search engine bots not to access any part of the website. The 'User-agent: *' directive applies to all crawlers, and the 'Disallow: /' prevents access to the entire site.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/api/app/templates/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Building Docusaurus Static Website\nDESCRIPTION: Generates static content for the Docusaurus website into the 'build' directory, ready for deployment to a static hosting service.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/README.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Querying Identity Flags and Traits in JSON\nDESCRIPTION: JSON schema for the response of the GET /identities endpoint. It defines the structure of flags and traits returned for an identity.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/edge-api/get-identity-flags-and-traits.api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"flags\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"enabled\": {\n              \"type\": \"boolean\"\n            },\n            \"feature_state_value\": {\n              \"oneOf\": [\n                {\n                  \"type\": \"string\",\n                  \"example\": \"a-remote-config-value\"\n                },\n                {\n                  \"type\": \"number\",\n                  \"example\": 42\n                },\n                {\n                  \"type\": \"boolean\",\n                  \"example\": true\n                }\n              ],\n              \"nullable\": true\n            },\n            \"feature\": {\n              \"title\": \"feature\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"integer\",\n                  \"readOnly\": true,\n                  \"example\": 42\n                },\n                \"name\": {\n                  \"type\": \"string\",\n                  \"example\": \"show_hero_banner\"\n                },\n                \"type\": {\n                  \"type\": \"string\",\n                  \"example\": \"STANDARD\"\n                }\n              }\n            }\n          },\n          \"title\": \"FeatureState\"\n        }\n      },\n      \"traits\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"trait_key\": {\n              \"type\": \"string\",\n              \"example\": \"Name\"\n            },\n            \"trait_value\": {\n              \"oneOf\": [\n                {\n                  \"type\": \"string\",\n                  \"example\": \"B.A. Baracus\"\n                },\n                {\n                  \"type\": \"number\",\n                  \"example\": 42\n                },\n                {\n                  \"type\": \"boolean\",\n                  \"example\": true\n                }\n              ],\n              \"nullable\": true\n            }\n          },\n          \"title\": \"Trait\"\n        }\n      }\n    },\n    \"title\": \"IdentitiesResponse\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Prettier Fixes to Documentation\nDESCRIPTION: Applies Prettier formatting fixes to a specific documentation file, where <YOUR_DOC> should be replaced with the actual file path.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/README.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpx prettier <YOUR_DOC> --write\n```\n\n----------------------------------------\n\nTITLE: Exporting Flagsmith Organisation to Local File System\nDESCRIPTION: Command to export a Flagsmith organisation with ID 1234 to a JSON file in the local file system. The file is saved in the /tmp directory of the container.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/importing-and-exporting/organisations.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py dumporganisationtolocalfs 1234 /tmp/organisation-1234.json\n```\n\n----------------------------------------\n\nTITLE: Rendering Flagsmith Invitation Email Template in HTML\nDESCRIPTION: This HTML template is used to generate invitation emails for Flagsmith. It includes placeholders for the organization name and invitation URL, which are likely filled in by a templating engine before sending.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/api/users/templates/users/invite_to_org.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\nHi there,\n\nYou have been invited to join {{ org_name|safe }} on Flagsmith. Please click on the link below to accept.\n\n{{ invite_url }}\n\nThe Flagsmith Team\n```\n\n----------------------------------------\n\nTITLE: Initializing Datadog RUM SDK for Flagsmith Integration\nDESCRIPTION: Shows how to initialize the Datadog RUM SDK with feature flag support for integration with Flagsmith.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/clients/client-side/javascript.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { datadogRum } from '@datadog/browser-rum';\n\n// Initialize Datadog Browser SDK\ndatadogRum.init({\n    enableExperimentalFeatures: [\"feature_flags\"],\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Flagsmith Organisation from Local File System\nDESCRIPTION: Command to import a Flagsmith organisation from a JSON file located in the /tmp directory of the container.\nSOURCE: https://github.com/flagsmith/flagsmith/blob/main/docs/docs/system-administration/importing-and-exporting/organisations.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py loaddata /tmp/org-1234.json\n```"
  }
]