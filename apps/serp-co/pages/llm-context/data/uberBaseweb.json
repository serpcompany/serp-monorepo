[
  {
    "owner": "uber",
    "repo": "baseweb",
    "content": "TITLE: Integrating Base Web with StyletronProvider and BaseProvider\nDESCRIPTION: This snippet demonstrates how to wrap your application with StyletronProvider and BaseProvider components, which are necessary for using Base Web. It initializes a Styletron engine and provides it to the StyletronProvider, and then wraps the content with BaseProvider, setting the theme to LightTheme.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/getting-started/setup.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client as Styletron } from \"styletron-engine-monolithic\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\nimport { LightTheme, BaseProvider, styled } from \"baseui\";\nimport { StatefulInput } from \"baseui/input\";\n\nconst engine = new Styletron();\n\nconst Centered = styled(\"div\", {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  height: \"100%\",\n});\n\nexport default function Hello() {\n  return (\n    <StyletronProvider value={engine}>\n      <BaseProvider theme={LightTheme}>\n        <Centered>\n          <StatefulInput />\n        </Centered>\n      </BaseProvider>\n    </StyletronProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Base Web and Dependencies with Package Managers\nDESCRIPTION: Commands for installing Base Web and its peer dependencies (styletron-react and styletron-engine-monolithic) using either pnpm or npm package managers.\nSOURCE: https://github.com/uber/baseweb/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# using pnpm\npnpm add baseui@next styletron-react styletron-engine-monolithic\n\n# using npm\nnpm install baseui@next styletron-react styletron-engine-monolithic\n```\n\n----------------------------------------\n\nTITLE: Installing Base Web Packages\nDESCRIPTION: This snippet demonstrates how to install Base Web and its dependencies (styletron-engine-monolithic and styletron-react) using either pnpm or npm. It ensures that all necessary packages are available for using Base Web components.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/getting-started/setup.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\n# using pnpm\npnpm add baseui@next styletron-engine-monolithic styletron-react\n\n# using npm\nnpm install baseui@next styletron-engine-monolithic styletron-react\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reusable Widget with useStyletron (Correct Approach)\nDESCRIPTION: This example shows the correct way to create an extensible component with useStyletron by merging style objects before passing them to the css function. This approach ensures proper style deduplication and correct application order.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\";\nimport { useStyletron } from \"baseui\";\nimport { deepMerge } from \"./util\"; // Choose your own way to merge\n\nexport default function Widget({ style, ...props }) {\n  const [css] = useStyletron();\n  const finalStyles = deepMerge(\n    {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    style,\n  );\n  return <div {...props} className={css(finalStyles)} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Component Customization with Overrides\nDESCRIPTION: Shows advanced usage of overrides pattern with custom component creation and styled component extension.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\";\nimport { styled, withStyle } from \"baseui\";\nimport { FormControl, StyledLabel } from \"baseui/form-control\";\nimport { Input } from \"baseui/input\";\n\nconst CustomStyledLabel = withStyle(\n  StyledLabel,\n  ({ $theme }) => $theme.typography.LabelLarge,\n);\n\nconst LabelContainer = styled(\"div\", ({ $theme }) => ({\n  border: `solid 2px ${$theme.colors.borderOpaque}`,\n}));\n\nconst CustomLabel = (props) => (\n  <LabelContainer>\n    <CustomStyledLabel {...props} />\n  </LabelContainer>\n);\n\nexport default function Form() {\n  return (\n    <form>\n      <FormControl\n        label=\"Email\"\n        caption=\"We won't sell your data. Promise.\"\n        overrides={{\n          Label: CustomLabel,\n        }}\n      >\n        <Input />\n      </FormControl>\n    </form>\n  );\n```\n\n----------------------------------------\n\nTITLE: BaseProvider Nesting with StyletronProvider\nDESCRIPTION: This snippet illustrates the correct order for nesting StyletronProvider and BaseProvider components. It ensures that BaseProvider is nested within StyletronProvider to prevent console warnings.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/getting-started/setup.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<StyletronProvider>\n  <BaseProvider />\n</StyletronProvider>\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Component Playground with Yard\nDESCRIPTION: This snippet renders a configurable playground for the Button component using the Yard component and buttonYardConfig.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/button.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Yard placeholderHeight={52} {...buttonYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Setting up Base Web with Styletron\nDESCRIPTION: React code for configuring the app with Styletron Provider and Base Provider, which are required to use Base Web components properly.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/getting-started-with-base-web/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Provider as StyletronProvider } from \"styletron-react\";\nimport { Client as Styletron } from \"styletron-engine-monolithic\";\nimport { LightTheme, BaseProvider } from \"baseui\";\n\nconst engine = new Styletron();\n\nReactDOM.render(\n  <StyletronProvider value={engine}>\n    <BaseProvider theme={LightTheme}>\n      <App />\n    </BaseProvider>\n  </StyletronProvider>,\n  document.getElementById(\"root\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Using Block with Proper Overrides (Correct Approach)\nDESCRIPTION: This example demonstrates the correct way to extend Block with additional CSS properties by using the overrides prop. This approach properly applies custom styles that aren't part of the Block API.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\";\nimport { Block } from \"baseui/block\";\n\nexport default function Widget({ children }) {\n  return (\n    <Block\n      backgroundColor=\"backgroundPrimary\"\n      color=\"contentPrimary\"\n      overrides={{\n        Block: {\n          style: { pointerEvents: \"none\" },\n        },\n      }}\n    >\n      {children}\n    </Block>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Simple Style and Props Overrides to a StatefulList Component\nDESCRIPTION: This example shows how to override the Label subcomponent's style and add a custom data attribute. It changes the color and adds a data-testid attribute for testing purposes.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/understanding-overrides.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<StatefulList\n  initialState={{\n    items: [\"Item 1\", \"Item 2\", \"Item 3\"],\n  }}\n  overrides={{\n    Label: {\n      style: {\n        color: \"#892C21\",\n      },\n      props: {\n        \"data-testid\": \"dnd-list-label\",\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Select Creatable Example\nDESCRIPTION: This example demonstrates the creatable Select component, allowing users to create new options in addition to selecting existing ones. The creatable select enhances user flexibility by allowing to add missing options on the fly.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/select.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example title=\\\"Select creatable\\\" path=\\\"select/creatable.tsx\\\">\\n  <SelectCreatable />\\n</Example>\\n\\nThe creatable select enables users to create new options along with choosing\\nexisting options.\\n\"\n```\n\n----------------------------------------\n\nTITLE: Syncing Base Web and ESLint Plugin Versions\nDESCRIPTION: This snippet shows how to maintain consistent versions between the baseui package and the eslint-plugin-baseui package in the package.json file. This ensures compatibility and avoids potential issues.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/getting-started/setup.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"baseui\": \"10.0.0\"\n  },\n  \"devDependencies\": {\n    \"eslint-plugin-baseui\": \"10.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Select Controlled Example\nDESCRIPTION: This example demonstrates the basic usage of the controlled Select component. It highlights how to manage the selected value and update it using the `setState` method. The value prop is always an array, regardless of whether it is a single or multi select.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/select.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example title=\\\"Select basic usage\\\" path=\\\"select/controlled.tsx\\\">\\n  <SelectControlled />\\n</Example>\\n\\nThings to note in the example source code:\\n\\n- the `value` is always an `Array` to provide a consistent interface - no matter if you use multi or single selects,\\n- you have to call `setState` with the entire object, not just the `id` value.\\n\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Themes with createTheme\nDESCRIPTION: Example demonstrating how to use the createTheme factory function to create a custom theme by overriding specific theme properties including colors, icons, and typography.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/theming.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTheme } from \"baseui\";\n\nconst colorOverrides = {\n  accent: theme.colors.magenta300,\n  linkText: theme.colors.accent,\n  linkVisited: theme.colors.accent,\n};\n\nconst iconsOverrides = {\n  Alert: Alarm,\n  Menu: ThreeLinesFilled,\n  TriangleDown: ChevronDown,\n  TriangleUp: ChevronUp,\n};\n\nconst typographyOverrides = {\n  DisplayLarge: {\n    fontFamily: \"Georgia\",\n  },\n};\n\nconst overrides = {\n  colors: colorOverrides,\n  icons: iconsOverrides,\n  typography: typographyOverrides,\n};\n\nconst theme = createTheme(overrides);\n```\n\n----------------------------------------\n\nTITLE: Customizing Base Web Components with withStyle\nDESCRIPTION: Shows how to extend Base Web components using withStyle for custom styling.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withStyle } from \"baseui\";\nimport { StyledLink } from \"baseui/link\";\n\nexport const MyStyledLink = withStyle(StyledLink, ({ $theme }) => ({\n  borderBottom: `solid 2px ${theme.colors.contentPrimary}`,\n}));\n```\n\n----------------------------------------\n\nTITLE: Using Overrides for Component Customization\nDESCRIPTION: Demonstrates the use of overrides prop for customizing Base Web components with simple style modifications.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\";\nimport { FormControl } from \"baseui/form-control\";\nimport { Input } from \"baseui/input\";\n\nexport default function Form() {\n  return (\n    <form>\n      <FormControl\n        label=\"Email\"\n        caption=\"We won't sell your data. Promise.\"\n        overrides={{\n          Label: {\n            style: ({ $theme }) => $theme.typography.LabelLarge,\n          },\n        }}\n      >\n        <Input />\n      </FormControl>\n    </form>\n  );\n```\n\n----------------------------------------\n\nTITLE: Testing Drag and Drop with Playwright in JavaScript\nDESCRIPTION: Shows how to write end-to-end tests for drag and drop functionality using Playwright. Includes examples for both mouse-based and keyboard-based interactions.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/drag-and-drop-list/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntest(\"dnd the first item to second position\", async () => {\n  await page.mouse.move(190, 111);\n  await page.mouse.down();\n  await page.mouse.move(190, 190);\n  await page.mouse.up();\n  expect(await getListItems(page)).toEqual([\n    \"Item 2\",\n    \"Item 1\",\n    \"Item 3\",\n    \"Item 4\",\n    \"Item 5\",\n    \"Item 6\",\n  ]);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest(\"move the first item to second position\", async () => {\n  await page.keyboard.press(\"Tab\");\n  await page.keyboard.press(\"Space\");\n  await page.keyboard.press(\"ArrowDown\");\n  await page.keyboard.press(\"Space\");\n  expect(await getListItems(page)).toEqual([\n    \"Item 2\",\n    \"Item 1\",\n    \"Item 3\",\n    \"Item 4\",\n    \"Item 5\",\n    \"Item 6\",\n  ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Component Overrides Pattern\nDESCRIPTION: An abstract example showing the nested overrides pattern structure. This demonstrates how to access and customize components that are nested several layers deep in the component hierarchy.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/understanding-overrides.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Foo\n  overrides={{\n    Boo: {\n      props: {\n        overrides: {\n          // pass \"nested\" overrides to the inner \"Boo\" component\n        },\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseProvider at Application Root in React\nDESCRIPTION: This snippet demonstrates how to properly set up BaseProvider at the root of a React application. It shows the correct wrapping order with StyletronProvider and how to pass a theme to BaseProvider for application-wide styling.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/base-provider.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BaseProvider, LightTheme } from \"baseui\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\n\nexport default function App() {\n  return (\n    <StyletronProvider value={engine}>\n      <BaseProvider theme={LightTheme}>\n        <YourApp />\n      </BaseProvider>\n    </StyletronProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Theme Variables in Style Overrides with StatefulList\nDESCRIPTION: An example of using the $theme object in a style function override instead of hard-coded values. This approach provides access to the design system's color tokens and other theme properties.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/understanding-overrides.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<StatefulList\n  initialState={{\n    items: [\"Item 1\", \"Item 2\", \"Item 3\"],\n  }}\n  overrides={{\n    Label: {\n      style: ({ $theme }) => ({\n        color: $theme.colors.negative600,\n      }),\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Component with Styletron in Base Web\nDESCRIPTION: This code snippet demonstrates how to style a custom component using Styletron within a Base Web application. It imports the `useStyletron` hook from `baseui`, which provides access to the CSS and theme objects. The CSS object is used to define styles for the component, and the theme object is used to access theme-specific values such as colors.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/getting-started/learn.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useStyletron } from \"baseui\";\n\nexport default () => {\n  const [css, theme] = useStyletron();\n  return (\n    <a\n      href=\"/my-link\"\n      className={css({\n        fontSize: \"20px\",\n        color: theme.colors.contentPrimary,\n      })}\n    >\n      Custom Link\n    </a>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing File Uploader Examples and Components in React\nDESCRIPTION: This code snippet imports various components and examples related to the File Uploader, as well as layout and configuration components for the documentation page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/file-uploader.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport FileUploaderBasic from \"examples/file-uploader/basic.tsx\";\nimport FileUploaderItemPreview from \"examples/file-uploader/item-preview.tsx\";\nimport FileUploaderLabelHint from \"examples/file-uploader/label-hint.tsx\";\nimport FileUploaderUploadRestrictions from \"examples/file-uploader/upload-restrictions.tsx\";\nimport FileUploaderDynamicLoading from \"examples/file-uploader/dynamic-loading.tsx\";\nimport FileUploaderOverrides from \"examples/file-uploader/overrides.tsx\";\n\nimport * as FileUploaderExports from \"baseui/file-uploader\";\n\nimport Yard from \"../../components/yard/index\";\nimport fileUploaderYardConfig from \"../../components/yard/config/file-uploader\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Using ReactDOM.createPortal for Reliable Positioning in React\nDESCRIPTION: Demonstrates how to use React Portals to render dragged items outside their normal DOM hierarchy, ensuring reliable positioning without interference from parent elements.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/drag-and-drop-list/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender() {\n  return ReactDOM.createPortal(\n    <li>Dragged</li>,\n    document.body\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshots and Comparing with Jest Image Snapshot\nDESCRIPTION: This JavaScript code snippet demonstrates how to take a screenshot of a webpage using Playwright and then compare it to a baseline image using Jest Image Snapshot. It involves using the `page.screenshot()` method from Playwright to capture the current state of the page and the `toMatchImageSnapshot()` matcher from Jest Image Snapshot to verify if the captured image matches the baseline.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/visual-regression-testing/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst image = await page.screenshot(); // generate a new image with playwright\nexpect(image).toMatchImageSnapshot(); // compare to baseline image\n```\n\n----------------------------------------\n\nTITLE: Customizing Input with a Button using Overrides\nDESCRIPTION: Adding a button inside an Input component using Base Web's Overrides pattern, which allows adding components to predefined positions in the Input.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/getting-started-with-base-web/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n<Input\n  overrides={{\n    After: () => (\n      <Button kind={KIND.tertiary}>\n        <Icon />\n      </Button>\n    ),\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting up Base Web with BaseProvider\nDESCRIPTION: Example showing how to use BaseProvider, which combines ThemeProvider and LayersManager, as the recommended approach for implementing Base Web at the application root.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/theming.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { BaseProvider, LightTheme } from \"baseui\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\nimport { Client as Styletron } from \"styletron-engine-monolithic\";\n\nconst engine = new Styletron();\n\nexport default function App() {\n  return (\n    <StyletronProvider value={engine}>\n      <BaseProvider theme={LightTheme}>\n        I can use themed Base Web stuff here!\n      </BaseProvider>\n    </StyletronProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mobile-Only and Desktop-Only Components with Block\nDESCRIPTION: This code demonstrates how to create components that are only visible on mobile or desktop using the Block component's display prop with responsive arrays.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/responsive-web/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// TabLink appears only on mobile\nconst TabLink = (props) => <Block display={[\"block\", \"none\"]} {...props} />;\n\n// NavLink appears only on desktop\nconst NavLink = (props) => <Block display={[\"none\", \"block\"]} {...props} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Datepicker Example in React\nDESCRIPTION: This code snippet shows how to render a basic Datepicker example using the Example component. It includes the title and path for the example.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/datepicker.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Example title=\"Datepicker basic usage\" path=\"datepicker/basic.tsx\">\n  <DatepickerBasic />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Aligning Cells in Grid - React\nDESCRIPTION: This snippet illustrates how to use the align prop to control the horizontal alignment of grid cells, which can be applied to both the entire grid and individual cells.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/layout-grid.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Align\" path=\"layout-grid/align.tsx\">\n  <AlignExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Building Custom Playground with useView Hook\nDESCRIPTION: Advanced example of using the useView hook directly to create a customized playground UI. This approach provides more control by allowing developers to structure and style the individual components of the playground.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/introducing-react-view/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport { Button } from \"baseui/button\";\n\nimport {\n  useView,\n  Compiler,\n  Knobs,\n  Editor,\n  Error,\n  ActionButtons,\n  Placeholder,\n  PropTypes,\n} from \"react-view\";\n\nexport default () => {\n  const params = useView({\n    componentName: \"Button\",\n    props: {\n      children: {\n        value: \"Hello\",\n        type: PropTypes.ReactNode,\n        description: \"Visible label.\",\n      },\n      onClick: {\n        value: '() => alert(\"click\")',\n        type: PropTypes.Function,\n        description: \"Function called when button is clicked.\",\n      },\n      disabled: {\n        value: false,\n        type: PropTypes.Boolean,\n        description: \"Indicates that the button is disabled\",\n      },\n    },\n    scope: {\n      Button,\n    },\n    imports: {\n      \"baseui/button\": {\n        named: [\"Button\"],\n      },\n    },\n  });\n\n  return (\n    <React.Fragment>\n      <Compiler\n        {...params.compilerProps}\n        minHeight={62}\n        placeholder={Placeholder}\n      />\n      <Error msg={params.errorProps.msg} isPopup />\n      <Knobs {...params.knobProps} />\n      <Editor {...params.editorProps} />\n      <Error {...params.errorProps} />\n      <ActionButtons {...params.actions} />\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Subcomponents with Styletron\nDESCRIPTION: This example illustrates how to override subcomponent styles based on different states of a component, such as '$disabled' and '$error', using the 'StyledOverrides' component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/use-styletron.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<StyledOverrides />\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme with useStyletron Hook in React\nDESCRIPTION: This example shows how to access the theme object through the useStyletron hook. The hook returns both the css function and the current theme, allowing styles to reference theme values.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useStyletron } from \"baseui\";\n\nexport default function AccentText({ children }) {\n  const [css, theme] = useStyletron();\n  return (\n    <span\n      className={css({\n        color: theme.colors.accent,\n      })}\n    >\n      {children}\n    </span>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Toggle Functionality\nDESCRIPTION: Example demonstrating how to toggle between light and dark themes in a Base Web application by managing theme state.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/theming.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { LightTheme, DarkTheme, ThemeProvider } from \"baseui\";\nimport { Button } from \"baseui/button\";\n\nconst THEME = {\n  light: \"light\",\n  dark: \"dark\",\n};\n\nexport default function App() {\n  const [theme, setTheme] = React.useState(THEME.light);\n  return (\n    <ThemeProvider theme={theme === THEME.light ? LightTheme : DarkTheme}>\n      <Button\n        onClick={() =>\n          setTheme(theme === THEME.light ? THEME.dark : THEME.light)\n        }\n      >\n        Toggle light/dark theme!\n      </Button>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Base Web with LightTheme\nDESCRIPTION: Basic example showing how to setup a Base Web application with the default LightTheme using ThemeProvider.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/theming.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { LightTheme, ThemeProvider } from \"baseui\";\n\nexport default function App() {\n  return (\n    <ThemeProvider theme={LightTheme}>\n      I can use themed Base Web components here!\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Complex Styled Components from v7 to v8 in Base Web\nDESCRIPTION: This snippet demonstrates migrating a more complex scenario from Base Web v7 to v8, specifically when styling an existing component. It outlines the changes necessary to switch from the v7 `styled` API to using `createThemedStyled` for type-safe custom theme integration.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v8/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n-import {styled} from 'baseui';\n+import {createThemedStyled} from 'baseui';\n\ntype CustomTheme = {customColor: string};\ntype PropsT = {};\n\n+const themedStyled = createThemedStyled<CustomTheme>();\n\nfunction ComponentA(props: {className: string}) {\n  return <div className={props.className}>test</div>;\n}\n\n-const StyledB = styled<typeof ComponentA, PropsT, CustomTheme>(ComponentA, props => {\n+const StyledB = themedStyled<typeof ComponentA, PropsT>(ComponentA, props => {\n  return {color: props.$theme.customColor};\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Table-Grid Usage Example\nDESCRIPTION: This example illustrates the basic usage of the Table-Grid component by rendering the Basic example. It serves as an introductory demonstration of how to implement the component in a React application.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-grid.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Basic usage\" path=\"table-grid/basic.tsx\">\n  <Basic />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Displaying Responsive Grid Defaults Using Base Web Table in JavaScript\nDESCRIPTION: This snippet defines a table structure using Base Web's Table component to show the default responsive values for grid breakpoints, columns, gutter, and margin. It demonstrates how these values can be customized according to the user's theme.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/layout-grid.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Table\n  columns={[\"Breakpoint\", \"Range\", \"Columns\", \"Gutter\", \"Margin\"]}\n  data={[\n    [\"Default\", \"0 to 319px\", \"1\", \"-\", \"16px\"],\n    [\"Small\", \"320px to 599px\", \"4\", \"16px\", \"16px\"],\n    [\"Medium\", \"600px to 1135px\", \"8\", \"36px\", \"36px\"],\n    [\"Large\", \"1136px and up\", \"12\", \"36px\", \"64px\"],\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing All-in-one Playground with React View\nDESCRIPTION: Example of using the View component from react-view to create a complete interactive playground for a Button component with various props defined including children, onClick, and disabled.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/introducing-react-view/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, PropTypes } from \"react-view\";\nimport { Button } from \"baseui/button\";\n\nexport default () => (\n  <View\n    componentName=\"Button\"\n    props={{\n      children: {\n        value: \"Hello\",\n        type: PropTypes.ReactNode,\n        description: \"Visible label.\",\n      },\n      onClick: {\n        value: '() => alert(\"click\")',\n        type: PropTypes.Function,\n        description: \"Function called when button is clicked.\",\n      },\n      disabled: {\n        value: false,\n        type: PropTypes.Boolean,\n        description: \"Indicates that the button is disabled\",\n      },\n    }}\n    scope={{\n      Button,\n    }}\n    imports={{\n      \"baseui/button\": {\n        named: [\"Button\"],\n      },\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Themed Styled Components\nDESCRIPTION: This snippet demonstrates how to create themed styled components using 'createThemedStyled', 'createThemedWithStyle', and 'createThemedUseStyletron' functions, enabling type support for custom themes.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/use-styletron.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\\n-  styled,\\n-  withStyle,\\n-  useStyletron,\\n+  createThemedStyled,\\n+  createThemedWithStyle,\\n+  createThemedUseStyletron,\\n} from 'baseui';\\n\\n type CustomTheme = {myBlue: string, myRed: string};\\n\\n// you'll likely want to import these functions from a relative path in your application\\n+const themedStyled = createThemedStyled<CustomTheme>();\\n+const themedWithStyle = createThemedWithStyle<CustomTheme>();\\n+const themedUseStyletron = createThemedUseStyletron<CustomTheme>();\\n\\n type Props = {\\n   $active: boolean\\n-  $theme: CustomTheme\\n };\\n\\n-const First = styled<Props>('div', props => {\\n+const First = themedStyled<Props>('div', props => {\\n   return {\\n     backgroundColor: props.$active ? props.$theme.colors.myBlue : props.$theme.colors.myRed,\\n   };\\n });\\n\\n-const Second = withStyle<Props>('div', props => {\\n+const Second = themedWithStyle<Props>(First, props => {\\n   return {\\n     color: props.$active ? props.$theme.colors.myBlue : props.$theme.colors.myRed,\\n   };\\n });\\n\\nconst Third = () => {\\n- const [css, theme] = useStyletron();\\n+ const [css, theme] = themedUseStyletron();\\n\\nreturn (\\n- <div className={css({color: theme.colors.contentPrimary})}>\\n+ <div className={css({color: theme.myBlue})}>\\n    test\\n  </div>\\n);\\n}\n```\n\n----------------------------------------\n\nTITLE: Password generation logic implementation\nDESCRIPTION: Function to generate a new password based on user preferences and validate its strength using the zxcvbn library.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/getting-started-with-base-web/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst setNewPassword = (p) => {\n  const newPassword = p\n    ? p\n    : generatePassword({ length, numbers, uppercase, symbols });\n  const { score } = zxcvbn(newPassword);\n  setStrength(score);\n  setCopied(false);\n  setPassword(newPassword);\n};\n```\n\n----------------------------------------\n\nTITLE: Using Theme Values with UseStyletron\nDESCRIPTION: This snippet demonstrates how to use the 'useStyletron' hook to access theme variables for styling a component directly, allowing for dynamic styling based on theme properties.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/use-styletron.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<UseStyletronBasic />\n```\n\n----------------------------------------\n\nTITLE: Utilizing State Props in Style Overrides for Dynamic Styling\nDESCRIPTION: This example demonstrates using component state props ($isDragged) with theme variables to create dynamic styling. The label color changes based on the dragged state of the list item.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/understanding-overrides.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<StatefulList\n  initialState={{\n    items: [\"Item 1\", \"Item 2\", \"Item 3\"],\n  }}\n  overrides={{\n    Label: {\n      style: ({ $theme, $isDragged }) => ({\n        color: $isDragged\n          ? $theme.colors.backgroundPrimary\n          : $theme.colors.backgroundAccent,\n      }),\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using useStyletron Hook for Basic Styling in React\nDESCRIPTION: This example demonstrates how to use the useStyletron hook to generate class names from style objects. The hook returns a css function that accepts a style object and returns a className string.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useStyletron } from \"baseui\";\n\nexport default function PinkText({ children }) {\n  const [css] = useStyletron();\n  return (\n    <span\n      className={css({\n        color: \"pink\",\n      })}\n    >\n      {children}\n    </span>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Components in TypeScript\nDESCRIPTION: This snippet imports several popover examples from various TypeScript files, demonstrating various functionalities like stateful clicks, link triggers, and hover events. Dependencies include local components and Base UI popover modules.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/popover.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport Stateless from \"examples/popover/stateless.tsx\";\nimport StatefulClick from \"examples/popover/stateful-click.tsx\";\nimport Link from \"examples/popover/link.tsx\";\nimport StatefulHover from \"examples/popover/stateful-hover.tsx\";\nimport Placements from \"examples/popover/placements.tsx\";\nimport WithArrow from \"examples/popover/with-arrow.tsx\";\nimport Dismiss from \"examples/popover/dismiss.tsx\";\nimport Clipping from \"examples/popover/clipping.tsx\";\nimport Customization from \"examples/popover/overrides.tsx\";\nimport AnchorRefHandling from \"examples/popover/ref-handling.tsx\";\nimport SSRRenderAll from \"examples/popover/ssr-render-all.tsx\";\n\nimport { Popover, PLACEMENT } from \"baseui/popover\";\nimport * as PopoverExports from \"baseui/popover\";\nimport { Block } from \"baseui/block\";\nimport { ParagraphSmall, LabelSmall } from \"baseui/typography\";\n\nimport Yard from \"../../components/yard/index\";\nimport popoverYardConfig from \"../../components/yard/config/popover\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Using a Styled Component in a Navigation Component in React\nDESCRIPTION: This example shows how to use a previously created styled component (StyledLink) within a navigation component. It demonstrates passing props to the styled component for configuration.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { StyledLink } from \"./link\";\n\nexport default function Navigation() {\n  return (\n    <ul>\n      <li>\n        <StyledLink href=\"https://www.uber.com\">Move</StyledLink>\n      </li>\n      <li>\n        <StyledLink href=\"https://www.ubereats.com\" $isExternal>\n          Eats\n        </StyledLink>\n      </li>\n      <li>\n        <StyledLink href=\"https://www.uber.com/us/en/atg/\">ATG</StyledLink>\n      </li>\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Default and Explicit Style Override in StatefulList\nDESCRIPTION: Demonstrates equivalent ways of using default styling and explicit style overrides in Base Web StatefulList component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/understanding-overrides.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<StatefulList\n initialState={{items: ['A', 'B', 'C']}}\n overrides={{Label: StyledLabel}}\n/>\n\n<StatefulList\n initialState={{items: ['A', 'B', 'C']}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Reusing CSS Definitions\nDESCRIPTION: This example shows how to reuse CSS definitions across multiple components using the 'ReuseDefinitions' component, illustrating efficient styling practices in a React application.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/use-styletron.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<ReuseDefinitions />\n```\n\n----------------------------------------\n\nTITLE: Basic Base Web Implementation with Styletron\nDESCRIPTION: Example React component showing how to set up Base Web with Styletron styling engine. It demonstrates the provider setup pattern, theme configuration, and a simple styled component implementation with a StatefulInput component.\nSOURCE: https://github.com/uber/baseweb/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client as Styletron } from \"styletron-engine-monolithic\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\nimport { LightTheme, BaseProvider, styled } from \"baseui\";\nimport { StatefulInput } from \"baseui/input\";\n\nconst engine = new Styletron();\n\nconst Centered = styled(\"div\", {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  height: \"100%\",\n});\n\nexport default function Hello() {\n  return (\n    <StyletronProvider value={engine}>\n      <BaseProvider theme={LightTheme}>\n        <Centered>\n          <StatefulInput />\n        </Centered>\n      </BaseProvider>\n    </StyletronProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Component with styled Function in Base Web\nDESCRIPTION: This example demonstrates how to use the styled function to create a styled component with built-in patterns for reuse, extensibility, and configuration. It uses a style function to access theme and props.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from \"baseui\";\n\nexport const StyledLink = styled(\"a\", ({ $theme, $isExternal }) => ({\n  textDecoration: \"none\",\n  color: $theme.colors.accent,\n  \":after\": {\n    content: $isExternal ? \"🔗\" : \"\",\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating a Responsive NavBar Component with Block\nDESCRIPTION: This snippet shows how to create a responsive NavBar component using the Block component from Base Web. It uses arrays for responsive props to adjust height and padding based on screen size.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/responsive-web/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst NavBar = (props) => (\n  <Block\n    height={[\"scale1400\", \"scale1600\"]}\n    paddingLeft={[\"scale800\", \"scale1200\"]}\n    paddingRight={[\"scale800\", \"scale1200\"]}\n    {...props}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Validation Example with Email\nDESCRIPTION: This code snippet imports and renders the ValidationExample component, showcasing form validation, specifically for email addresses. It highlights how to use the `email-validator` package along with `FormControl` and input components to implement client-side validation.  The default form behavior is prevented to avoid network requests on submit.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/form-control.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport ValidationExample from \"examples/form-control/validation.tsx\";\n\n<Example\n  title=\"Validation example (with email)\"\n  path=\"form-control/validation.tsx\"\n  additionalPackages={{ \"email-validator\": \"2.0.4\" }}\n>\n  <ValidationExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Label with Clone Functionality in Base Web DND List\nDESCRIPTION: Demonstrates how to completely replace a subcomponent in Base Web by implementing a custom Label component with added clone functionality in a drag-and-drop list.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/understanding-overrides.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { List, arrayMove } from \"baseui/dnd-list\";\n\nexport default class Example extends React.Component {\n  state = {\n    items: [\"Car\", \"Truck\", \"Bike\", \"Skateboard\"],\n  };\n  render() {\n    return (\n      <List\n        items={this.state.items}\n        onChange={({ oldIndex, newIndex }) =>\n          this.setState((prevState) => ({\n            items: arrayMove(prevState.items, oldIndex, newIndex),\n          }))\n        }\n        overrides={{\n          Label: {\n            component: ({ $value }) => (\n              <div style={{ flexGrow: 1 }}>\n                {$value}{\" \"}\n                <button\n                  onClick={() =>\n                    this.setState((prevState) => ({\n                      items: prevState.items.concat([`${$value} clone`]),\n                    }))\n                  }\n                >\n                  Clone\n                </button>\n              </div>\n            ),\n          },\n        }}\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Drawer Components with Base Web in JavaScript\nDESCRIPTION: This snippet imports and initializes essential components and configurations for demonstrating Drawer components using Base Web. It sets up an example layout with various examples focusing on drawer anchors, sizes, and SSR. The code depends on components and configurations imported from the Base Web library and local paths. It outputs examples wrapped within a Layout component, following ARIA guidelines for accessibility.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/drawer.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport * as DrawerExports from \"baseui/drawer\";\nimport Anchors from \"examples/drawer/anchors.tsx\";\nimport Sizes from \"examples/drawer/sizes.tsx\";\nimport SSRRenderAll from \"examples/drawer/ssr-render-all.tsx\";\n\nimport Yard from \"../../components/yard/index\";\nimport drawerYardConfig from \"../../components/yard/config/drawer\";\n\nexport default Layout;\n\n# Drawer\n\n<Yard placeholderHeight={0} {...drawerYardConfig} />\n\n<Example title=\"Drawer with anchor\" path=\"drawer/anchors.tsx\">\n  <Anchors />\n</Example>\n\n<Example title=\"Drawer with different size\" path=\"drawer/sizes.tsx\">\n  <Sizes />\n</Example>\n\n<Example\n  title=\"Drawer with renderAll for SSR / SEO\"\n  path=\"drawer/ssr-render-all.tsx\"\n>\n  <SSRRenderAll />\n</Example>\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Link Component with useStyletron in React\nDESCRIPTION: This example shows how to extract repeated styling into a reusable component using useStyletron. It introduces props for configuration and extensibility through style composition.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useStyletron } from \"baseui\";\n\nexport default function Link({ children, style, isExternal, ...rest }) {\n  const [css, theme] = useStyletron();\n  return (\n    <a\n      {...rest}\n      className={css({\n        textDecoration: \"none\",\n        color: theme.colors.accent,\n        \":after\": {\n          content: isExternal ? \"🔗\" : \"\",\n        },\n        ...style,\n      })}\n    >\n      {children}\n    </a>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Overrides for Select Component in Base Web\nDESCRIPTION: Example of using nested overrides to customize a Tag component that is nested inside a Select component. This demonstrates the recursive structure of overrides when working with complex components that compose other Base Web components.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/nested-overrides-playground/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Select\n  overrides={{\n    Tag: {\n      props: {\n        overrides: {\n          // pass \"nested\" overrides to the inner \"Tag\" component\n        },\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Comparing Styled Function Usage in Base Web v11 and v12\nDESCRIPTION: This code snippet illustrates the difference in using the styled function between Base Web v11 and v12. The main change is in the order of generic parameters to align closer with styletron.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v12/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// v11\nconst X = styled<{}, 'div'>('div', {})\n// v12\nconst X = styled<'div', {}>('div', {})\n```\n\n----------------------------------------\n\nTITLE: Styling with Default and Custom Themes in Base Web\nDESCRIPTION: This snippet demonstrates how to use the `styled` function with the default Base Web theme and how to use `createThemedStyled` to style components with a custom theme.  It defines a `StyledA` component that uses the default theme's primary color and a `StyledB` component that uses a custom theme's color. The custom theme is defined as `CustomTheme`.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v8/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {styled, createThemedStyled} from 'baseui';\n\ntype PropsT = {};\n\n// Uses baseui's default theme.\nfunction StyledA = styled<PropsT>('div', props => {\n  return {\n    backgroundColor: props.$theme.colors.primary400,\n  };\n});\n\n// Supplying a custom theme.\ntype CustomTheme = {customColor: string};\nconst themedStyled = createThemedStyled<CustomTheme>();\nfunction StyledB = themedStyled<PropsT>('div', props => {\n  return {\n    backgroundColor: props.$theme.customColor,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Styled Components with $style Prop in React\nDESCRIPTION: This example demonstrates how to extend a styled component using the $style prop. The prop accepts a function that has access to the theme object, allowing for dynamic and contextual styling extensions.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { StyledLink } from \"./link\";\n\nexport default function StyledFancyLink(props) {\n  return (\n    <StyledLink\n      $style={({ $theme }) => ({\n        color: $theme.colors.contentPrimary,\n      })}\n      {...props}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Breakpoints and Media Queries in JavaScript\nDESCRIPTION: This code defines custom breakpoints and generates corresponding media query strings for responsive styling. It overrides Base Web's default breakpoints and creates a new theme object with the custom values.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/responsive-web/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst breakpoints = {\n  small: 769,\n  medium: 1024,\n  large: 1216,\n};\n\nconst ResponsiveTheme = Object.keys(breakpoints).reduce(\n  (acc, key) => {\n    acc.mediaQuery[key] =\n      `@media screen and (min-width: ${breakpoints[key]}px)`;\n    return acc;\n  },\n  {\n    breakpoints,\n    mediaQuery: {},\n  },\n);\n\nexport const MyTheme = {\n  ...LightTheme,\n  ...ResponsiveTheme,\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Password Input Toggle in JSX\nDESCRIPTION: This snippet demonstrates how to override default password masking behavior in the BaseWeb Input component by providing custom overrides for the Mask Toggle. Users can either hide the toggle button or customize the toggle icons.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/input.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Input\ntype=\"password\"\noverrides={{\n  MaskToggleButton: () => null,\n}}/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Input\ntype=\"password\"\noverrides={{\n  MaskToggleHideIcon: () => \"🙈\",\n  MaskToggleShowIcon: () => \"🐵\",\n}}/>\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component and Related Utilities from Base Web\nDESCRIPTION: Shows how to import the Dialog component and its related constants (SIZE, PLACEMENT, CLOSE_KIND) from the Base Web library.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/dialog.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Dialog, SIZE, PLACEMENT, CLOSE_KIND } from \"baseui/dialog\";\n```\n\n----------------------------------------\n\nTITLE: Using Theme Overrides in JavaScript\nDESCRIPTION: This example illustrates how to use theme overrides to fine-tune specific color assignments in the Base Web v9 theme system.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v9/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTheme } from \"baseui/themes\";\n\nconst myTokens = {\n  // define various brand colors here...\n};\n\nconst myThemePrimitives = {\n  // define all the various primitives for my theme...\n};\n\nconst myThemeOverrides = {\n  // override baseui default theme assignments...\n  colors: {\n    borderSelected: myThemePrimitives.accent,\n  },\n};\n\nconst myTheme = createTheme(myThemePrimitives, myThemeOverrides);\n\nexport default myTheme;\n```\n\n----------------------------------------\n\nTITLE: Measuring Element Dimensions with getBoundingClientRect in JavaScript\nDESCRIPTION: Demonstrates how to use the Element.getBoundingClientRect() method to obtain an element's dimensions and position on the page. This is crucial for calculating drag and drop positions.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/drag-and-drop-list/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"width\": 500,\n  \"height\": 100,\n  \"top\": 674,\n  \"right\": 800,\n  \"bottom\": 774,\n  \"left\": 1300\n}\n```\n\n----------------------------------------\n\nTITLE: High-Density Layout with Compact Grid - React\nDESCRIPTION: This snippet showcases a compact version of the grid layout designed for high-density data presentation, allowing for tighter spacing without affecting the core structure.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/layout-grid.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Compact\" path=\"layout-grid/compact.tsx\">\n  <CompactExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Deep Nested Component Overrides with Multiple Levels\nDESCRIPTION: A complex example showing multiple levels of nested overrides, demonstrating how to replace a deeply nested component (Goo) without affecting the parent components in the hierarchy.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/understanding-overrides.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Foo\n  overrides={{\n    Boo: {\n      props: {\n        overrides: {\n          Moo: {\n            props: {\n              overrides: {\n                Zoo: {\n                  props: {\n                    overrides: {\n                      Goo: () => \"hey mom!\",\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Layout with Fixed Header and Sidebar in Base Web\nDESCRIPTION: This example demonstrates a basic layout with a fixed header and sidebar navigation. The Layout component is used to structure the page with a Header component at the top and a nested Layout containing both Sidebar and Content components.\nSOURCE: https://github.com/uber/baseweb/blob/main/src/layout/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport {Layout, Header, Sidebar, Content} from 'baseui/layout';\n\nexport default () => {\n  return (\n    <Layout>\n      <Header fixed>Header content</Header>\n      <Layout>\n        <Sidebar>Menu placeholder</Sidebar>\n        <Content>Main content placeholder</Content>\n      </Layout>\n    </Layout>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Select Custom Labels Example\nDESCRIPTION: This example demonstrates how to use custom labels with the Select component.  The `labelKey` and `valueKey` props can be used to override the default `id` and `label` properties that the Select components look for in the options array objects.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/select.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example title=\\\"Select with custom labels\\\" path=\\\"select/label.tsx\\\">\\n  <SelectLabel />\\n</Example>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Creating Wrapper Component for Base Web Icons with TypeScript and React\nDESCRIPTION: This template defines a React functional component that wraps SVG icons with Base Web styling. It uses placeholders that will be replaced during generation with actual icon data. The component supports customization via theme, size, color and overrides props, and uses React.forwardRef to allow refs to be passed to the underlying SVG element.\nSOURCE: https://github.com/uber/baseweb/blob/main/src/icon/icon-template.txt#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction %%ICON_NAME%%(props: IconPropsT, ref) {\n  const [, theme] = useStyletron();\n  const {title = '%%SVG_TITLE%%', size, color, overrides = {},...restProps} = props;\n  const SvgOverride = mergeOverride(\n    // Icons from the theme target the SVG override in the underlying Icon component\n    {\n      component:\n        theme.icons && theme.icons.%%ICON_NAME%% ? theme.icons.%%ICON_NAME%% : null,\n    },\n    overrides && overrides.Svg ? toObjectOverride(overrides.Svg) : {},\n  );\n  return (\n    <Icon\n      %%SVG_VIEWBOX%%\n      ref={ref}\n      title={title}\n      size={size}\n      color={color}\n      overrides={{Svg: SvgOverride}}\n      {...restProps}\n    >\n      %%ICON_PATH%%\n    </Icon>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Checkbox Indeterminate State Example in React\nDESCRIPTION: Code snippet that renders an Example component containing the Indeterminate checkbox component. This demonstrates how to properly implement an accessible indeterminate checkbox state.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/screen-reader-improvements/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"Checkbox\" path=\"checkbox/indeterminate.js\">\n  <Indeterminate />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Button Component with Styletron in JavaScript\nDESCRIPTION: Demonstrates how to create a simple button component using Styletron's styled function. This example shows the basic syntax for defining styles inline with JavaScript.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/getting-started-with-styletron/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Button = styled(\"button\", {\n  background: \"#276EF1\",\n  color: \"#FFFFFF\",\n  cursor: \"pointer\",\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Bar Usage Example - TSX\nDESCRIPTION: This snippet shows a basic example of using the Progress Bar component within an Example wrapper, displaying its typical usage scenario.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/progress-bar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Progress bar Basic Usage\" path=\"progress-bar/basic.tsx\">\n  <Basic />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Extending Styled Components with Themed Styling in Base Web\nDESCRIPTION: This snippet shows how to extend a Base Web styled component using `withStyle` and apply themed styles. It defines `StyledA` using the `styled` function with the default theme and extends it with `StyledB` using `withStyle` to modify its color. This demonstrates how to maintain type safety when extending styled components.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v8/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {styled, withStyle} from 'baseui';\n\ntype PropsT = {};\n\nfunction StyledA = styled<PropsT>('div', props => {\n  return {\n    backgroundColor: props.$theme.colors.primary400,\n  };\n});\n\nfunction StyledB = withStyle<typeof StyledA, PropsT>(StyledA, props => {\n  return {\n    color: props.$theme.colors.mono400,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: ColorPreview Component to Display Color Swatches\nDESCRIPTION: The ColorPreview component renders a visual representation of a color, showing a swatch alongside the name and value of the color. This is useful for displaying the various colors from the design tokens clearly.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tokens.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function ColorPreview({ name, value, displayValue }) {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        borderBottomStyle: \"solid\",\n        borderBottomWidth: \"1px\",\n        borderBottomColor: `${value}`,\n      }}\n    >\n      <div\n        style={{\n          backgroundColor: value,\n          width: \"100px\",\n          minWidth: \"100px\",\n          height: \"50px\",\n          marginRight: \"20px\",\n        }}\n      ></div>\n      <div style={{ flexGrow: 1 }}>{name}</div>\n      <div>{displayValue}</div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Positioning Dragged Elements with CSS\nDESCRIPTION: Shows two methods for positioning dragged elements: using fixed positioning with top and left properties, and using CSS transforms. The transform method is preferred for better performance.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/drag-and-drop-list/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nposition: fixed;\ntop: 100px;\nleft: 200px;\n```\n\nLANGUAGE: css\nCODE:\n```\ntransform: translate(10px, 20px);\ntransition-duration: 1s;\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive Layouts with FlexGrid Component\nDESCRIPTION: This example shows how to use the FlexGrid component to create responsive grid layouts. It demonstrates changing column counts and gaps based on screen size for two different components.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/responsive-web/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Example usage\nconst Filters = () => (\n  <FlexGrid columnCount={[2, 1]} columnGap=\"scale300\" rowGap=\"scale800\">\n    <FlexGridItem>All Shipments</FlexGridItem>\n    <FlexGridItem>In Progress</FlexGridItem>\n    <FlexGridItem>Upcoming</FlexGridItem>\n    <FlexGridItem>Past</FlexGridItem>\n  </FlexGrid>\n);\n\nconst Locations = ({ Pickup, Dropoff }) => (\n  <FlexGrid columnCount={[1, 2]} columnGap=\"scale300\" rowGap=\"scale300\">\n    <FlexGridItem>\n      <Pickup />\n    </FlexGridItem>\n    <FlexGridItem>\n      <Dropoff />\n    </FlexGridItem>\n  </FlexGrid>\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating Side Navigation with React Router\nDESCRIPTION: Demonstrates how to use side navigation with client-side routing, preventing default page reload and handling navigation through React Router's history object\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/side-nav.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withRouter } from \"react-router\";\n\nconst App = ({ history, location }) => {\n  return (\n    <Navigation\n      items={[\n        {\n          title: \"Home\",\n          itemId: \"/home\",\n        },\n      ]}\n      activeItemId={location.pathname}\n      onChange={({ event, item }) => {\n        // prevent page reload\n        event.preventDefault();\n        history.push(item.itemId);\n      }}\n    />\n  );\n};\n\nexport default withRouter(App);\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessibility for Draggable Items in HTML\nDESCRIPTION: Shows how to add ARIA attributes to draggable items and create live regions for screen reader announcements, improving accessibility for keyboard and screen reader users.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/drag-and-drop-list/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<li aria-roledescription=\"This is a draggable item. Press space to lift.\">\n  Item 1\n</li>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div aria-live=\"assertive\" role=\"log\" aria-atomic=\"true\">\n  You have lifted item at position 5. Press j to move it down...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing LocaleProvider in Base Web - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the LocaleProvider component to provide translated strings for Base Web components like pagination. It requires importing the component and using it to wrap your application, with a dictionary containing translations (e.g., Hungarian). Limitations include not addressing pluralization, currency, and list formatting.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/internationalization.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport JSON from \"../../components/json\";\nimport { Notification } from \"baseui/notification\";\n\nimport LocaleProviderExample from \"../../examples/internationalization/example.tsx\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Styling Components with useStyletron Hook in Base Web\nDESCRIPTION: This snippet demonstrates how to use the `useStyletron` hook from Base Web to style components.  It shows how to import `useStyletron` and access the theme within a functional component, applying styles directly to the element. The use of the hook removes the necessity of importing and using `ThemeContext`.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v8/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useStyletron } from \"baseui\";\n\nfunction ComponentA() {\n  const [css, theme] = useStyletron();\n  return <div className={css({ color: theme.colors.primary400 })}>test</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component and Related Modules in React\nDESCRIPTION: This snippet demonstrates how to import the Button component, its related exports, and icon components from Base Web. It also imports various example components and configuration utilities.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/button.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Exports from \"../../components/exports\";\nimport Layout from \"../../components/layout\";\nimport SEO from \"../../components/meta-seo\";\n\nimport BasicButton from \"examples/button/basic.tsx\";\nimport Kinds from \"examples/button/kinds.tsx\";\nimport Sizes from \"examples/button/sizes.tsx\";\nimport WithEnhancer from \"examples/button/with-enhancers.tsx\";\nimport States from \"examples/button/states.tsx\";\nimport Shapes from \"examples/button/shapes.tsx\";\nimport Dropdown from \"examples/button/dropdown.tsx\";\nimport ButtonAsAnAnchor from \"examples/button/as-an-anchor.tsx\";\n\nimport { Button, KIND } from \"baseui/button\";\nimport * as ButtonExports from \"baseui/button\";\nimport Upload from \"baseui/icon/upload\";\nimport ArrowRight from \"baseui/icon/arrow-right\";\n\nimport Yard from \"../../components/yard/index\";\nimport buttonYardConfig from \"../../components/yard/config/button\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Responsive Styled Component with themedStyled\nDESCRIPTION: This example demonstrates how to create a responsive styled component using themedStyled. It applies different styles based on the screen size using media queries defined in the theme.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/responsive-web/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst LoadStatus = themedStyled(\"span\", ({ $theme }) => ({\n  ...$theme.typography.font250,\n  color: $theme.colors.mono800,\n  [$theme.mediaQuery.small]: {\n    ...$theme.typography.font550,\n    color: $theme.colors.mono900,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Deferred Initialization Example for ButtonTimed Component in React\nDESCRIPTION: This example demonstrates how to use the ButtonTimed component with deferred initialization using the `pause` prop to control when the countdown timer starts and stops.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/button-timed.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Exports from \"../../components/exports\";\nimport Layout from \"../../components/layout\";\nimport SEO from \"../../components/meta-seo\";\n\nimport Paused from \"examples/button-timed/paused.tsx\";\n\nimport { ButtonTimed } from \"baseui/button\";\nimport * as ButtonTimedExports from \"baseui/button-timed\";\nimport ArrowRight from \"baseui/icon/arrow-right\";\n\nimport Yard from \"../../components/yard/index\";\nimport buttonTimedYardConfig from \"../../components/yard/config/button-timed\";\n```\n\n----------------------------------------\n\nTITLE: Updating Styletron Styled API with Type Generics in Base Web v7\nDESCRIPTION: Demonstrates migrating from passing types through the callback function to using Flow generics with the styled function. Type definitions now go between 'styled' and arguments rather than inside the style function.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v7/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport {styled} from 'baseui';\n\n- type PropsT = {$active: boolean, $theme: ThemeT};\n- const MyStyledComponent = styled('div', (props: PropsT) => {\n-  return {\n-    backgroundColor: props.$active ? props.$theme.colors.primary400 : props.$theme.colors.negative400,\n-  };\n- });\n\n+ type PropsT = {$active: boolean};\n+ const MyStyledComponent = styled<PropsT>('div', props => {\n+  return {\n+    backgroundColor: props.$active ? props.$theme.colors.primary400 : props.$theme.colors.negative400,\n+  };\n+ });\n```\n\n----------------------------------------\n\nTITLE: Displaying Color Tokens\nDESCRIPTION: This snippet shows how to create a component that maps through the color tokens from 'baseui/tokens' and renders them using the ColorPreview component. It ensures all available colors are displayed systematically.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tokens.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<ColorPreviewContainer>\n  {Object.entries(TokensExports.colors).map(([name, value]) => {\n    return <ColorPreview name={name} value={value} displayValue={value} />;\n  })}\n</ColorPreviewContainer>\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Builder with Alternating Rows Example\nDESCRIPTION: This snippet renders the Table Builder with alternating rows example.  The title of the Example component is \"Table Builder with alternating rows\" and the path is \"table-semantic/alternating.tsx\". The Alternating component probably implements the alternating row styles for the table builder.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-semantic.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n<Example\n  title=\"Table Builder with alternating rows\"\n  path=\"table-semantic/alternating.tsx\"\n>\n  <Alternating />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Headers Layout in Base Web\nDESCRIPTION: This example shows a layout with multiple header levels. It uses nested Layout components with two fixed Header components (main and sub-header) and a Content component for the main page content.\nSOURCE: https://github.com/uber/baseweb/blob/main/src/layout/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport {Layout, Header, Sidebar, Content} from 'baseui/layout';\n\nexport default () => {\n  return (\n    <Layout>\n      <Header fixed>Header content</Header>\n      <Layout>\n        <Header fixed>Sub-Header content</Header>\n        <Content>Main content placeholder</Content>\n      </Layout>\n    </Layout>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Animating Drop Interaction with CSS\nDESCRIPTION: Demonstrates how to add a smooth animation when dropping an item, providing visual feedback to the user. This enhances the overall drag and drop experience.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/drag-and-drop-list/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\ntransition: 0.3s cubic-bezier(0.2, 1, 0.1, 1);\n```\n\n----------------------------------------\n\nTITLE: Using useStyletron hook for styling\nDESCRIPTION: Alternative approach to styling using the useStyletron hook, which provides access to theme values and generates CSS classes.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/getting-started-with-base-web/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst [css, theme] = useStyletron();\n\n<div className={css({ marginBottom: theme.sizing.scale800 })}>\n  <FormControl label=\"Length\">\n    <Slider {...sliderProps} />\n  </FormControl>\n</div>;\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseWeb Heading Component\nDESCRIPTION: Utilizes BaseWeb's Heading component that uses React Context to manage document outline. The component prevents skipping of heading levels, maintaining semantic correctness in document structure. Prerequisites include prior setup of a React project with BaseWeb installed. The expected output is a set of properly styled and contextually appropriate headings.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/heading.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\n# Heading\n\n**Headings are absolutely critical for screen reader users and it's important to correctly set their levels**. For example, you should never skip a level (having `h2` and not `h1` on the same page).\n\nThe problem is that levels are a question of context. When you move components with headings around, you need to check if levels still make sense and adjust them if not. That's a lot of mundane work and developers often rather take shortcuts such as using `h1` element only.\n\nThere is proposal for a native `<h>` element and [document outline algorithm](http://adrianroselli.com/2016/08/there-is-no-document-outline-algorithm.html) to solve this problem once for all but there is no browser support yet. In meantime, our `Heading` component uses [React Context](https://medium.com/@Heydon/managing-heading-levels-in-design-systems-18be9a746fa3) and implements its own document outline algorithm so developers don't have to think about it.\n\nIt is also possible to **decouple styles from the underlying `h1`-`h6` DOM elements**.\n\n## Examples\n\n<Example title=\"Heading basic usage\" path=\"heading/basic.tsx\">\n  <Basic />\n</Example>\n\nIdeally, the user will use the default styles but sometimes it might make sense to set a fixed style no matter in what context the component was placed. You can decouple styles from levels through the `styleLevel` prop. However, **the proper `h1, h2 ... h6` hierarchy always stays in place**.\n\n<Example\n  title=\"Decouple and fix heading styles\"\n  path=\"heading/decouple-styles.tsx\"\n>\n  <DecoupleStyles />\n</Example>\n\n<Exports\n  component={HeadingExports}\n  title=\"Heading exports\"\n  path=\"baseui/heading\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Card component with Overrides\nDESCRIPTION: Using Base Web's Overrides pattern to customize the Card component's positioning and sizing for the password generator app.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/getting-started-with-base-web/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n<Card\n  overrides={{\n    Root: {\n      style: {\n        left: \"50%\",\n        maxWidth: \"420px\",\n        position: \"absolute\",\n        top: \"20px\",\n        transform: \"translate(-50%, 0)\",\n        width: \"95vw\",\n      },\n    },\n  }}\n>\n  ...\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Improved Styling Using Theme Tokens in React\nDESCRIPTION: Enhanced version of the previous example using theme tokens for consistent styling and better maintainability.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\";\nimport { useStyletron } from \"baseui\";\nimport { Card } from \"baseui/card\";\n\nexport default function Media({ left, right }) {\n  const [css, theme] = useStyletron();\n  return (\n    <Card>\n      <div\n        className={css({\n          display: \"flex\",\n          ...theme.typography.ParagraphMedium,\n        })}\n      >\n        <div\n          className={css({\n            padding: theme.sizing.scale400,\n          })}\n        >\n          {left}\n        </div>\n        <div\n          className={css({\n            padding: theme.sizing.scale400,\n            borderLeft: `solid 2px ${theme.colors.border}`,\n          })}\n        >\n          {right}\n        </div>\n      </div>\n    </Card>\n  );\n```\n\n----------------------------------------\n\nTITLE: Password Input with strength indicator\nDESCRIPTION: Enhanced Input component that displays password strength through colored borders and includes the refresh button, combining multiple override techniques.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/getting-started-with-base-web/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n<Input\n  inputRef={passwordRef}\n  value={password}\n  onChange={event => setNewPassword(event.target.value)}\n  overrides={{\n    InputContainer: {\n      style: ({ $theme }) => ({\n        borderLeftColor: $theme.colors[getStrengthColor(strength)],\n        borderRightColor: $theme.colors[getStrengthColor(strength)],\n        borderTopColor: $theme.colors[getStrengthColor(strength)],\n        borderBottomColor: $theme.colors[getStrengthColor(strength)],\n        borderLeftWidth: $theme.sizing.scale200,\n        borderRightWidth: $theme.sizing.scale200,\n        borderTopWidth: $theme.sizing.scale200,\n        borderBottomWidth: $theme.sizing.scale200,\n      })\n    },\n    After: () => (...)\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Select Sizes Example\nDESCRIPTION: This example demonstrates the different sizes available for the Select component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/select.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example title=\\\"Select sizes\\\" path=\\\"select/sizes.tsx\\\">\\n  <SelectSizes />\\n</Example>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Accessible Cell Navigation Example\nDESCRIPTION: This snippet demonstrates how to make table cells navigable via keyboard input. It implements a React hook to handle arrow key events, ensuring accessibility for users who may rely on keyboard navigation.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-grid.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Example\ntitle=\"Accessible cell navigation\"\npath=\"table-grid/cell-navigation.tsx\"\n>\n  <CellNavigation />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Initialize Timepicker with Min/Max Restrictions\nDESCRIPTION: This snippet sets up an example of a Timepicker with minimum and maximum time constraints. It demonstrates how additional settings can be applied to the component to customize its behavior. Requires the respective component file and the Timepicker component from BaseWeb.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/time-picker.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport TimepickerMinMax from \"examples/timepicker/timepicker-minmax.tsx\";\nimport Example from \"../../components/example\";\nimport React from \"react\";\n\n<Example\n  title=\"Timepicker Min/Max Times\"\n  path=\"timepicker/timepicker-minmax.tsx\"\n>\n  <TimepickerMinMax />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Theme Types to Styled Components in Base Web v7\nDESCRIPTION: Shows how to properly type-check styled components that use a custom theme by passing the custom theme type as a second generic parameter to the styled function.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v7/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nimport {styled} from 'baseui';\n\ntype PropsT = {$active: boolean};\n- const MyStyledComponent = styled<PropsT>('div', props => {\n+ const MyStyledComponent = styled<PropsT, MyCustomThemeT>('div', props => {\n   return {\n     backgroundColor: props.$active ? props.$theme.colors.myBlue : props.$theme.colors.myRed,\n   };\n  });\n```\n\n----------------------------------------\n\nTITLE: Jest Describe Block for Visual Regression Tests (JavaScript)\nDESCRIPTION: This code snippet shows the basic structure of the Jest `describe` block used for running visual regression tests in Baseweb. It iterates through all Storybook scenarios and creates tests for desktop, mobile, dark mode, and interactions, utilizing functions like `getAllScenarios`, `setupDesktop`, `setupMobile`, `setupDark`, `snapshot`, and `getAllInteractionsForScenario`. It showcases the automated nature of the test setup.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/visual-regression-testing/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Visual Regression Tests\", () => {\n  getAllScenarios().forEach((scenario) => {\n    describe(scenario, () => {\n      it(\"desktop\", async () => {\n        await setupDesktop();\n        await snapshot();\n      });\n      it(\"mobile\", async () => {\n        await setupMobile();\n        await snapshot();\n      });\n      it(\"dark\", async () => {\n        await setupDark();\n        await snapshot();\n      });\n      getAllInteractionsForScenario(scenario).forEach((interaction) => {\n        it(interaction.name, async () => {\n          await interaction.behavior();\n          await snapshot();\n        });\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Cell Spanning Example\nDESCRIPTION: This example demonstrates how to use cell spanning within the Table-Grid component. It allows for cells to span multiple rows or columns, showcasing how to adapt the layout for more complex datasets.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-grid.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Cell spanning\" path=\"table-grid/cell-span.tsx\">\n  <CellSpan />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Select Async Options Example\nDESCRIPTION: This example shows how to use the Select component with asynchronous options.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/select.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example title=\\\"Select with async options\\\" path=\\\"select/async-options.tsx\\\">\\n  <SelectAsyncOptions />\\n</Example>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Components with Overrides in Base Web\nDESCRIPTION: Example demonstrating how to use the overrides prop to style Base Web components. The style function receives the theme object, allowing access to theme values for consistent styling.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/theming.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from \"baseui/button\";\n\nfunction App() {\n  return (\n    <Button\n      overrides={{\n        BaseButton: {\n          style: ({ $theme }) => {\n            return {\n              marginTop: $theme.sizing.scale500,\n            };\n          },\n        },\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Base Web Theme Direction Configuration\nDESCRIPTION: This JavaScript code snippet shows how to configure the Base Web theme to support right-to-left (RTL) direction. It imports necessary components from `styletron-engine-monolithic`, `styletron-react`, `baseui`, and sets the `direction` property of the theme to `rtl`.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/bidirectionality.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client as Styletron } from \"styletron-engine-monolithic\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\nimport { LightTheme, BaseProvider } from \"baseui\";\nimport { StatefulInput } from \"baseui/input\";\n\nconst engine = new Styletron();\n\nexport default function Hello() {\n  return (\n    <StyletronProvider value={engine}>\n      <BaseProvider theme={{ ...LightTheme, direction: \"rtl\" }}>\n        <StatefulInput />\n      </BaseProvider>\n    </StyletronProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Component Styling with useStyletron in React\nDESCRIPTION: This example illustrates a more complex use case of useStyletron for styling multiple elements in a navigation component. It demonstrates pseudo-selectors and repeated styling patterns across elements.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useStyletron } from \"baseui\";\n\nexport default function Navigation() {\n  const [css, theme] = useStyletron();\n  return (\n    <ul>\n      <li>\n        <a\n          href=\"https://www.uber.com\"\n          className={css({\n            textDecoration: \"none\",\n            color: theme.colors.accent,\n          })}\n        >\n          Move\n        </a>\n      </li>\n      <li>\n        <a\n          href=\"https://www.ubereats.com\"\n          className={css({\n            textDecoration: \"none\",\n            color: theme.colors.accent,\n            // External link\n            \"&:after\": {\n              content: \"🔗\",\n            },\n          })}\n        >\n          Eat\n        </a>\n      </li>\n      <li>\n        <a\n          href=\"https://www.uber.com/us/en/atg/\"\n          className={css({\n            textDecoration: \"none\",\n            color: theme.colors.accent,\n          })}\n        >\n          ATG\n        </a>\n      </li>\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: PinCode Component Example: States\nDESCRIPTION: This snippet demonstrates how to utilize various boolean props such as `disabled`, `error`, and `positive` to reflect the input's state in the PinCode component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/pin-code.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<Example title=\"States\" path=\"pin-code/states.tsx\">\n  <PinCodeStates />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: PinCode Component Example: Basic Usage\nDESCRIPTION: This code snippet shows the basic usage example of the PinCode component where individual pin code inputs are rendered for digit entry. Focus transfers automatically as each digit is entered.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/pin-code.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<Example title=\"Basic usage\" path=\"pin-code/basic.tsx\">\n  <PinCodeBasic />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Select Creatable Multi-Pick Example\nDESCRIPTION: This example showcases the creatable multi-pick Select component, allowing users to create and select multiple options.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/select.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example title=\\\"Select creatable multi-pick\\\" path=\\\"select/creatable-multi.tsx\\\">\\n  <SelectCreatableMulti />\\n</Example>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic File Uploader Example in React\nDESCRIPTION: Displays a basic usage example of the FileUploaderBasic component with title and path attributes for the documentation.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/file-uploader-basic.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Example title=\"File uploader basic usage\" path=\"file-uploader-basic/basic.tsx\">\n  <FileUploaderBasic />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Migrating from styled to withStyle for Component Extension\nDESCRIPTION: Shows how to update code that uses styled to extend components, now requiring the use of withStyle from styletron-react when extending a styletron component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v7/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\nimport {styled} from 'baseui';\n+import {withStyle} from 'styletron-react';\n\nconst InitialComponent = styled('div', props => {\n  return {\n    backgroundColor: props.$theme.colors.positive400,\n    color: 'pink',\n  };\n});\n\n-const ExtendedComponent = styled(InitialComponent, {\n+const ExtendedComponent = withStyle(InitialComponent, {\n  backgroundColor: 'blue',\n});\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Custom Label Example - TSX\nDESCRIPTION: This snippet exemplifies the use of a customizable label within the Progress Bar, enabling adjustments to suit specific design requirements.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/progress-bar.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Example\n  title=\"Progress bar with Custom Label\"\n  path=\"progress-bar/custom-label.tsx\"\n>\n  <CustomLabel />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Select Input Value Control Example\nDESCRIPTION: This example shows how to imperatively control the input value of the Select component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/select.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example\\n  title=\\\"Imperatively control input value\\\"\\n  path=\\\"select/control-ref-input-value.tsx\\\"\\n>\\n  <SelectInputValue />\\n</Example>\\n\\nThe `controlRef` prop gives developers imperative control over internal behavior via the\\nfollowing methods: `setInputFocus`, `setInputBlur`, `setDropdownOpen`, and `setInputValue`.\\n\"\n```\n\n----------------------------------------\n\nTITLE: Select Focus Control Example\nDESCRIPTION: This example shows how to imperatively control input focus for the Select component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/select.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example title=\\\"Imperatively control input focus\\\" path=\\\"select/focus.tsx\\\">\\n  <SelectFocus />\\n</Example>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Semantic Token Usage for Theme-Aware Styling\nDESCRIPTION: Demonstrates the use of semantic color tokens for creating theme-aware components that work in both light and dark modes.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\";\nimport { useStyletron } from \"baseui\";\n\nexport default function Widget({ children }) {\n  const [css, theme] = useStyletron();\n  return (\n    <div\n      className={css({\n        border: `solid 2px ${theme.colors.borderOpaque}`,\n        background: theme.colors.backgroundPrimary,\n        color: theme.colors.contentPrimary,\n      })}\n    >\n      {children}\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Importing Color Tokens in Base Web\nDESCRIPTION: Example of importing and using color tokens from the baseui/tokens module. This demonstrates how to access Base Web's color palette in your theme configuration.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v9/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { colors } from \"baseui/tokens\";\n\nconst theme = {\n  primary: colors.blue400,\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Grid Properties - React\nDESCRIPTION: This snippet illustrates how to customize the grid layout properties like columns, gaps, and maximum width to suit specific layout requirements while maintaining a structured design.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/layout-grid.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Custom\" path=\"layout-grid/custom.tsx\">\n  <CustomExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing Base Web Accordion Component Modules\nDESCRIPTION: This snippet shows how to import various accordion-related components from Base Web for use in a React application. It imports the Accordion and Panel components directly and also imports all exports from the accordion module.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/accordion.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as AccordionExports from \"baseui/accordion\";\nimport * as PanelExports from \"baseui/accordion/panel\";\nimport { Accordion, Panel } from \"baseui/accordion\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Theme with Base Web Tokens\nDESCRIPTION: This snippet illustrates how to create a custom theme using Base Web's design tokens. It overrides the default light theme primitives with defined color tokens to achieve a custom look for the application.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tokens.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// myTheme.tsx\n\nimport { createTheme, lightThemePrimitives } from \"baseui\";\nimport { colors } from \"baseui/tokens\";\n\nconst myThemePrimitives = {\n  ...lightThemePrimitives,\n  primary: colors.blue400,\n  primary50: colors.blue50,\n  primary100: colors.blue100,\n  primary200: colors.blue200,\n  primary300: colors.blue300,\n  primary400: colors.blue400,\n  primary500: colors.blue500,\n  primary600: colors.blue600,\n  primary700: colors.blue700,\n};\n\nconst myTheme = createTheme(myThemePrimitives, {});\n\nexport default myTheme;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// myTheme.tsx\n\nimport { createTheme, lightThemePrimitives } from \"baseui\";\nimport { colors } from \"baseui/tokens\";\n\nconst myThemeOverrides = {\n  colors: {\n    borderSelected: colors.yellow200,\n  },\n};\n\nconst myTheme = createTheme(lightThemePrimitives, myThemeOverrides);\n\nexport default myTheme;\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Grid Example - React\nDESCRIPTION: This snippet demonstrates how to implement a basic grid layout using the BasicExample component which showcases the default alignment and spacing of cells within a grid container.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/layout-grid.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Basic\" path=\"layout-grid/basic.tsx\">\n  <BasicExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing Modal Components\nDESCRIPTION: This snippet imports various modal components and their configurations from local files and the baseui/modal library, enabling the usage of different modal types in the application.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/modal.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport ModalBasic from \"examples/modal/basic.tsx\";\nimport ModalAutoFocus from \"examples/modal/autofocus.tsx\";\nimport ModalBuriedInteractiveElement from \"examples/modal/buried-interactive-element.tsx\";\nimport ModalNested from \"examples/modal/nested.tsx\";\nimport ModalSized from \"examples/modal/sized.tsx\";\nimport * as ModalExports from \"baseui/modal\";\n\nimport Yard from \"../../components/yard/index\";\nimport modalYardConfig from \"../../components/yard/config/modal\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Rendering Checkbox Examples\nDESCRIPTION: JSX code for rendering various Checkbox examples using the imported components.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/checkbox.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Example title=\"Basic usage\" path=\"checkbox/basic-controlled.tsx\">\n  <Basic />\n</Example>\n\n<Example title=\"Multiple lines\" path=\"checkbox/multiline.tsx\">\n  <Multiline />\n</Example>\n\n<Example title=\"Error state\" path=\"checkbox/error.tsx\">\n  <Error />\n</Example>\n\n<Example title=\"Indeterminate state\" path=\"checkbox/indeterminate.tsx\">\n  <Indeterminate />\n</Example>\n\n<Example title=\"Disabled state\" path=\"checkbox/disabled.tsx\">\n  <Disabled />\n</Example>\n\n<Example title=\"Alignments\" path=\"checkbox/alignment.tsx\">\n  <Alignment />\n</Example>\n\n<Example title=\"Overriding styles\" path=\"checkbox/overrides.tsx\">\n  <Customization />\n</Example>\n\n<Example\n  title=\"Overriding sub-components\"\n  path=\"checkbox/component-overrides.tsx\"\n>\n  <ComponentOverrides />\n</Example>\n\n<Example title=\"Focus and ref\" path=\"checkbox/focus.tsx\">\n  <Focus />\n</Example>\n\n<Example title=\"As a toggle\" path=\"checkbox/toggle.tsx\">\n  <Toggle />\n</Example>\n\n<Example\n  title=\"Stateful (uncontrolled) usage\"\n  path=\"checkbox/basic-uncontrolled.tsx\"\n>\n  <Uncontrolled />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Customizing System Banner Styles\nDESCRIPTION: Illustrates how to apply custom styles to a System Banner using the overrides feature. This example customizes the root element and title style, demonstrating how to change border radius and apply theme-based typography. This snippet shows the extensibility of the component through straightforward style adjustments.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/system-banner.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<SystemBanner\n  kind={KIND.info}\n  overrides={{\n    Root: {\n      style: {\n        borderRadius: \"8px\",\n        boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.1)\",\n      },\n    },\n    Title: {\n      style: ({ $theme }) => ({\n        ...$theme.typography.HeadingSmall,\n      }),\n    },\n  }}\n>\n  Custom styled banner\n</SystemBanner>\n```\n\n----------------------------------------\n\nTITLE: RadioGroup Example\nDESCRIPTION: This code snippet imports and renders the RadioGroupExample component.  The example focuses on how to use FormControl with a radio group, emphasizing the relationship between the label and the radio element's accompanying text.  The RadioGroupExample renders a RadioGroup inside the form control component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/form-control.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport RadioGroupExample from \"examples/form-control/radio-group.tsx\";\n\n<Example title=\"RadioGroup\" path=\"form-control/radio-group.tsx\">\n  <RadioGroupExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Rendering Combobox Yard Configuration in JSX\nDESCRIPTION: This snippet renders the Yard component with the Combobox configuration. Yard is likely a component used for displaying and interacting with component props and settings.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/combobox.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Yard placeholderHeight={48} {...comboboxYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Creating Extended Styled Components with withStyle in Base Web\nDESCRIPTION: This example shows how to use the withStyle utility to create a new styled component that extends an existing one. This approach is preferred for creating maintainable styling extensions that will be reused.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withStyle } from \"baseui\";\nimport { StyledLink } from \"./link\";\n\nexport const StyledFancyLink = withStyle(StyledLink, ({ $theme }) => ({\n  color: $theme.colors.contentPrimary,\n}));\n```\n\n----------------------------------------\n\nTITLE: Initializing File Row State in React for File Uploader\nDESCRIPTION: Example of setting up React state for file rows in the File Uploader component. This snippet demonstrates how to create and maintain an array of FileRow objects to track uploaded files.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/file-uploader/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { FileRow } from 'baseui/file-uploader';\n\nconst [fileRows, setFileRows] = React.useState<Array<FileRow>>([]);\n```\n\n----------------------------------------\n\nTITLE: Select Single-Pick Search Example\nDESCRIPTION: This example demonstrates the Select component configured for single-pick search functionality. When the type is set to 'search', a magnifying glass icon is displayed on the left side of the input, and the dropdown arrow is hidden.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/select.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example\\n  title=\\\"Select as single-pick search\\\"\\n  path=\\\"select/search-single-pick.tsx\\\"\\n>\\n  <SelectSinglePickSearch />\\n</Example>\\n\\nWhen type is 'search' a magnifying glass icon will be rendered to the input's left and a dropdown\\narrow will not be rendered to the right.\\n\"\n```\n\n----------------------------------------\n\nTITLE: Hiding Grid Cells on Breakpoints - React\nDESCRIPTION: This snippet demonstrates how to hide a specific grid cell on larger viewports by using the span prop with a value of 0, facilitating responsive design.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/layout-grid.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Hide\" path=\"layout-grid/hide.tsx\">\n  <HideExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Skipping Columns in Grid Layout - React\nDESCRIPTION: This snippet showcases the skip prop, used to offset a cell within a grid layout by a specified number of columns, optimizing layout space across different breakpoints.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/layout-grid.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Skip\" path=\"layout-grid/skip.tsx\">\n  <SkipExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Using Themed Styled and withStyle functions in Base Web\nDESCRIPTION: This snippet demonstrates the use of `createThemedStyled` and `createThemedWithStyle` for creating themed styled components and extending them with themed styles, respectively. It defines a custom theme type `CustomTheme` and uses it to create `StyledA` and `StyledB`, showcasing how to style components with a custom theme and extend existing styled components while maintaining type safety.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v8/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createThemedStyled, createThemedWithStyle} from 'baseui';\n\ntype CustomTheme = {customColor: string};\nconst themedStyled = createThemedStyled<CustomTheme>();\nconst themedWithStyle = createThemedWithStyle<CustomTheme>();\n\ntype PropsT = {};\n\nfunction StyledA = themedStyled<PropsT>('div', props => {\n  return {\n    backgroundColor: props.$theme.customColor,\n  };\n});\n\nfunction StyledB = themedWithStyle<typeof StyledA, PropsT>(StyledA, props => {\n  return {\n    color: props.$theme.customColor,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering the Yard Component for Modals\nDESCRIPTION: This code renders the Yard component, passing modal configuration as props. It sets up the visual placeholder for the modal UI in the framework.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/modal.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Yard placeholderHeight={0} {...modalYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Button Styling with Clip-path in Styletron\nDESCRIPTION: Demonstrates how to create a button with a fancy hover effect using clip-path and transitions in Styletron.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/getting-started-with-styletron/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Button = styled(\"button\", (props) => ({\n  ...buttonStyles,\n  \":after\": {\n    ...buttonStyles,\n    // Other omitted styles here\n    clipPath: \"polygon(-25% -5%, -25% -5%, -5% 105%, -25% 105%)\",\n    transition: \"clip-path .25s ease\",\n  },\n  \":hover:after\": {\n    clipPath: \"polygon(-25% -5%, 105% -5%, 125% 105%, -25% 105%)\",\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Rendering Input Props Example in JSX\nDESCRIPTION: This snippet renders an example of the Combobox component with input prop overrides. It demonstrates how to provide custom props to the underlying Input component using the InputOverrides component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/combobox.mdx#2025-04-21_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<Example title=\"Input props\" path=\"combobox/input-overrides.tsx\">\n  <InputOverrides />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Generating Responsive CSS Rules for Block Component\nDESCRIPTION: This snippet demonstrates how the Block component generates CSS rules for responsive layouts based on provided values.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/block.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nmargin-top: 10px;\n@media screen and (min-width: 320px) {\n  margin-top: 20px;\n}\n@media screen and (min-width: 600px) {\n  margin-top: 30px;\n}\n@media screen and (min-width: 1280px) {\n  margin-top: 40px;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Stateful Slider Example - Typescript\nDESCRIPTION: This snippet imports the `Stateful` component from `examples/slider/stateful.tsx`. This component shows how to use a stateful or uncontrolled slider, where the component manages its own state. This simplifies usage in certain scenarios.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/slider.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"import Stateful from \\\"examples/slider/stateful.tsx\\\";\"\n```\n\n----------------------------------------\n\nTITLE: PinCode Component Example: Once Things are Filled In\nDESCRIPTION: This snippet details a common pattern of submitting the user's input once the full pin code has been entered, shifting focus to the submit button afterward.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/pin-code.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n<Example title=\"Once things are filled in\" path=\"pin-code/completion.tsx\">\n  <PinCodeCompletion />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Applying Overrides in Grid and Cell - React\nDESCRIPTION: This snippet demonstrates how to use the overrides prop to apply custom styling or additional properties to Grid and Cell components, enhancing flexibility in design.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/layout-grid.mdx#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Overrides\" path=\"layout-grid/overrides.tsx\">\n  <OverridesExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing Pagination Table Example\nDESCRIPTION: This snippet imports the Pagination component from the \"examples/table/pagination.tsx\" file.  This component is a React component demonstrating how to implement pagination within a BaseWeb table to handle large datasets.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Pagination from \"examples/table/pagination.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Option Node Example in JSX\nDESCRIPTION: This snippet renders an example of the Combobox component with custom option nodes. It shows how to use the mapOptionToNode prop to translate options to React nodes using the ReplacementNode component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/combobox.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Example title=\"Custom option node\" path=\"combobox/replacement-node.tsx\">\n  <ReplacementNode />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Measurement Units - React\nDESCRIPTION: This snippet demonstrates how to adjust the default CSS unit for the grid layout, affecting all grid measurements, and how to override it locally for specific grid instances.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/layout-grid.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Unit\" path=\"layout-grid/unit.tsx\">\n  <UnitExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Accordion Component for SEO Optimization - React\nDESCRIPTION: This code snippet illustrates the implementation of the Accordion and Panel components from the baseui library. The renderAll property is used to ensure all content within the panels is available to search engines, enhancing crawlability.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/seo.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from \"react\";\nimport { Accordion, Panel } from \"baseui/accordion\";\nconst content =\n  \"Praesent condimentum ante ac ipsum aliquam, ac scelerisque velit sagittis. Ut sit amet libero scelerisque, accumsan ante vitae, hendrerit tellus. Nullam metus est, vehicula a aliquet id, lobortis in mauris.\";\nexport default () => (\n  <Accordion renderAll>\n    <Panel title=\"Accordion panel 1\">\n      <p>{content}</p>\n    </Panel>\n    <Panel title=\"Accordion panel 2\">\n      <p>{content}</p>\n    </Panel>\n    <Panel title=\"Accordion panel 3\">\n      <p>{content}</p>\n    </Panel>\n  </Accordion>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Stateful File Uploader Component in React\nDESCRIPTION: Demonstrates how to use the stateful File Uploader component in a React application. This example shows the pattern for maintaining file state by binding the component to React state hooks.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/file-uploader/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { type FileRow, FileUploader } from 'baseui/file-uploader';\n\nconst myApplicationComponent = () => {\n  const [fileRows, setFileRows] = React.useState<Array<FileRow>>([]);\n\n  return <FileUploader fileRows={fileRows} setFileRows={setFileRows} />\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Components and Examples for Data-Table Documentation\nDESCRIPTION: Imports various components used for documentation layout and examples of Data-Table usage. These imports establish the structure of the documentation page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/data-table.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\nimport UnstableWarning from \"../../components/unstable-warning\";\nimport TableGuideNotification from \"../../components/table-guide-notification\";\n\nimport Overrides from \"../../components/overrides\";\nimport * as DataTableExports from \"baseui/data-table\";\n\nimport Basic from \"examples/data-table/basic.tsx\";\nimport BatchAction from \"examples/data-table/batch-action.tsx\";\nimport RowHeightLineClamp from \"examples/data-table/row-height-line-clamp.tsx\";\nimport CustomizedEmptyState from \"examples/data-table/customized-empty-state.tsx\";\nimport CustomizedColumnSort from \"examples/data-table/customized-column-sort.tsx\";\nimport AccessTableData from \"examples/data-table/access-table-data.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Vertical Scroll Table Example\nDESCRIPTION: This snippet imports the VerticalScroll component from the \"examples/table/vertical-scroll.tsx\" file. This component is a React component that demonstrates how to implement vertical scrolling within a BaseWeb table, useful for tables with many rows.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport VerticalScroll from \"examples/table/vertical-scroll.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Tile Alignment Example\nDESCRIPTION: This example shows how to control the alignment of content within the Tile component. The Alignment component is rendered, demonstrating different alignment configurations through the headerAlignment and bodyAlignment props.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tile.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Example title=\\\"Mixed alignment\\\" path=\\\"tile/alignment.tsx\\\">\\n  <Alignment />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Sortable Table Example\nDESCRIPTION: This example illustrates how to implement sorting functionality in the Table-Grid by allowing the user to sort table columns. It enhances data interaction and organization capabilities in a React application.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-grid.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Table with sorting by a column\" path=\"table-grid/sortable.tsx\">\n  <Sortable />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Select Overridden Menu Example\nDESCRIPTION: This example shows how to override the default menu of the Select component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/select.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example title=\\\"Select with overridden menu\\\" path=\\\"select/overridden.tsx\\\">\\n  <SelectOverridden />\\n</Example>\\n\"\n```\n\n----------------------------------------\n\nTITLE: PinCode Component Example: The Main Event\nDESCRIPTION: This snippet explains the structure of the object passed to the `onChange` event handler for the PinCode component, including the new values array and original event.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/pin-code.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n<Example title=\"The main Event\" path=\"pin-code/event.tsx\">\n  <PinCodeEvent />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Menu with Stateful Menu Example\nDESCRIPTION: This code snippet demonstrates the usage of the StatefulMenu component from baseui/menu. It creates a menu with several items, including dividers and disabled options, and logs the selected item to the console. It also demonstrates how to use the OptionProfile component for rendering profile-style menu items.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/menu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n\"<StatefulMenu\n          items={[\n            { label: \\\"Item One\\\" },\n            { label: \\\"Item Two\\\" },\n            { divider: true },\n            { label: \\\"Item Three\\\", disabled: true },\n            { label: \\\"Item Four\\\", disabled: true },\n            { divider: true },\n            { label: \\\"Item Five\\\" },\n            { label: \\\"Item Six\\\" },\n          ]}\n          onItemSelect={console.log}\n          overrides={props.overrides}\n        />\"\n```\n\nLANGUAGE: jsx\nCODE:\n```\n\"<StatefulMenu\n        items={[...new Array(4)].map(() => ({\n          title: \\\"David Smith\\\",\n          subtitle: \\\"Senior Engineering Manager\\\",\n          body: \\\"Uber Everything\\\",\n          imgUrl: \\\"https://via.placeholder.com/60x60\\\",\n        }))}\n        overrides={{\n          ...props.overrides,\n          Option: {\n            component: OptionProfile,\n            props: {\n              getProfileItemLabels: ({ title, subtitle, body }) => ({\n                title,\n                subtitle,\n                body,\n              }),\n              getProfileItemImg: (item) => item.imgUrl,\n              getProfileItemImgText: (item) => item.title,\n              overrides: props.overrides,\n            },\n          },\n        }}\n      />\"\n```\n\n----------------------------------------\n\nTITLE: Activating and Registering a VS Code Extension Command in TypeScript\nDESCRIPTION: This snippet shows the basic structure of a VS Code extension's main file. It exports an 'activate' function that registers a command, which is called when the extension is first activated.\nSOURCE: https://github.com/uber/baseweb/blob/main/packages/baseweb-vscode-extension/vsc-extension-quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function activate(context: vscode.ExtensionContext) {\n  context.subscriptions.push(\n    vscode.commands.registerCommand('extension.helloWorld', () => {\n      // Command implementation goes here\n    })\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Textarea Ref Example\nDESCRIPTION: This snippet imports and renders the TextareaRef component to demonstrate how to access the underlying DOM node of the Base Web Textarea component using a ref. This is useful for programmatically focusing or manipulating the textarea.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/textarea.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Example title=\\\"Focus and ref\\\" path=\\\"textarea/ref.tsx\\\">\\n  <TextareaRef />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Rendering TreeView Component Example with Keyboard Navigation\nDESCRIPTION: Code snippet showing how to render a TreeView example component that demonstrates keyboard navigation accessibility features implemented in Base Web.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/screen-reader-improvements/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"TreeView\" path=\"tree-view/basic.js\">\n  <TreeViewBasic />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint Plugin for Base Web\nDESCRIPTION: This snippet shows how to install the eslint-plugin-baseui package using npm or pnpm. The plugin helps in identifying deprecated components or APIs and common mistakes when using Base Web.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/getting-started/setup.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install eslint-plugin-baseui --save-dev\n\n# pnpm\npnpm add eslint-plugin-baseui --dev\n```\n\n----------------------------------------\n\nTITLE: Floating Marker Usage with react-map-gl in TypeScript\nDESCRIPTION: Renders a floating map marker within a react-map-gl view. Involves using a Marker component to wrap the FloatingMarker, allowing for precise placement on maps.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/floating-marker.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<ReactMapGL />\n```\n\n----------------------------------------\n\nTITLE: States Example\nDESCRIPTION: This code snippet imports and renders the Kinds component. This example demonstrates how to use the `positive` and `error` props of the FormControl component to display different states, such as success or error. The example showcases how string values passed to these props override the `caption` prop.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/form-control.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport Kinds from \"examples/form-control/kinds.tsx\";\n\n<Example title=\"States\" path=\"form-control/kinds.tsx\">\n  <Kinds />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Divider Component Example Usage\nDESCRIPTION: Shows the JSX structure for rendering a basic divider example with documentation components.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/divider.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Example title=\"Basic\" path=\"divider/basic.tsx\">\n  <DividerBasic />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Select with Many Options Example\nDESCRIPTION: This example shows how to use the Select component with a large number of options. It uses the `react-window` package for improved performance.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/select.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example\\n  title=\\\"Select with many options\\\"\\n  path=\\\"select/with-many-options.tsx\\\"\\n  additionalPackages={{ \\\"react-window\\\": \\\"^1.8.5\\\" }}\\n>\\n  <SelectWithManyOptions />\\n</Example>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Select In Modal Example\nDESCRIPTION: This example shows how to use the Select component inside a modal dialog.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/select.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example title=\\\"Select in a modal dialog\\\" path=\\\"select/in-modal.tsx\\\">\\n  <SelectInModal />\\n</Example>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Clickable Banner in Base Web\nDESCRIPTION: Demonstrates how to implement a System Banner with a single primary action, making the entire banner clickable. Ideal for situations where only one prominent action is needed. The snippet includes setting a kind attribute and defining a primary action with label and onClick handler.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/system-banner.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<SystemBanner\n  kind={KIND.info}\n  primaryAction={{\n    label: \"View details\",\n    onClick: () => navigate(\"/details\"),\n  }}\n>\n  New system update available\n</SystemBanner>\n```\n\n----------------------------------------\n\nTITLE: Consumer Location Puck with Confidence Level Example - React\nDESCRIPTION: This example illustrates how to include a confidence level with the consumer location puck. It uses the ConsumerLocationPuckConfidence component to indicate a manually-set confidence level.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/location-puck.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Example\n  title=\"Consumer location puck with confidence level\"\n  path=\"location-puck/consumer-confidence.tsx\"\n>\n  <FloatingMarkerContainer>\n    <ConsumerLocationPuckConfidence />\n  </FloatingMarkerContainer>\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Themed Styling with createThemedUseStyletron Hook in Base Web\nDESCRIPTION: This snippet shows how to use `createThemedUseStyletron` to create a themed version of the `useStyletron` hook. It defines a custom theme type `CustomTheme` and uses it to create a themed `useStyletron` hook that provides access to the custom theme's properties. This approach simplifies styling components with custom themes using the `useStyletron` hook.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v8/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createThemedUseStyletron } from \"baseui\";\n\ntype CustomTheme = { customColor: string };\n\nconst themedUseStyletron =\n  createThemedUseStyletron<CustomTheme>();\n\nfunction ComponentA() {\n  const [css, theme] = themedUseStyletron();\n  return (\n    <div className={css({ color: theme.customColor })}>\n      test\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Input Example\nDESCRIPTION: This code snippet imports the InputExample component. This example likely demonstrates the usage of FormControl with a basic input field, showcasing how to integrate the two components. It displays an Input field within a Form Control.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/form-control.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport InputExample from \"examples/form-control/input.tsx\";\n\n<Example title=\"Input\" path=\"form-control/input.tsx\">\n  <InputExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing Range Slider Example - Typescript\nDESCRIPTION: This snippet imports the `Range` component from `examples/slider/range.tsx`. This shows how to implement a slider that allows the user to select a range of values. This provides a selection of a minimum and maximum value on the slider.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/slider.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"import Range from \\\"examples/slider/range.tsx\\\";\"\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip Components - JavaScript\nDESCRIPTION: This snippet demonstrates the import of necessary components and configurations for tooltips from various paths. This is essential for building tooltip functionalities in the Base UI environment.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tooltip.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport Stateful from \"examples/tooltip/stateful.tsx\";\nimport StatefulComplexContent from \"examples/tooltip/stateful-complex-content.tsx\";\n\nimport { StatefulTooltip } from \"baseui/tooltip\";\nimport * as TooltipExports from \"baseui/tooltip\";\nimport { styled } from \"baseui\";\n\nimport Yard from \"../../components/yard/index\";\nimport tooltipYardConfig from \"../../components/yard/config/tooltip\";\n```\n\n----------------------------------------\n\nTITLE: Using Floating Route Marker with Helper Function\nDESCRIPTION: This snippet demonstrates how to render a Floating Route Marker with a label and custom anchor position on a map. It utilizes a helper function `calculateFloatingRouteMarkerOffsets` to position the marker accurately. The example showcases how to apply styling overrides, specifically on the `Root`, to adjust the transform using the helper function for proper placement.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/floating-route-marker.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FloatingRouteMarker\n  label=\"Fastest route\"\n  anchorPosition={FLOATING_ROUTE_MARKER_ANCHOR_POSITIONS.bottomLeft}\n  overrides={{\n    Root: {\n      style: {\n        transform: calculateFloatingRouteMarkerOffsets(\n          FLOATING_ROUTE_MARKER_ANCHOR_POSITIONS.bottomLeft,\n          4,\n        ),\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Stepped Progress Bar Example - TSX\nDESCRIPTION: This snippet provides a stepped version of the Progress Bar, useful for processes requiring multiple stages or actions to complete, facilitating user navigation.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/progress-bar.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Steps\" path=\"progress-bar/steps.tsx\">\n  <Steps />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Using Base Web Table Component\nDESCRIPTION: This snippet demonstrates the usage of the Table component from the Base Web library, illustrating how to create a table with defined columns and data. It requires the 'baseui' library as a dependency and is structured to accept columns and data as props.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/discover-more/comparison.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Table\n  columns={\"[\\\"Name\\\", \\\"CSS Engine\\\", \\\"Customization\\\"]\"}\n  data={[\n    [\n      \"Base Web\",\n      \"CSS-in-JS, using Styletron\",\n      \"Through an extensive overrides interface\",\n    ],\n    [\"Material-UI\", \"CSS-in-JS, using JSS\", \"Through CSS overrides\"],\n    [\"Ant Design\", \"Less\", \"Through Less variables\"],\n    [\n      \"React Bootstrap\",\n      \"SCSS, inherited from Bootstrap\",\n      \"Through Bootstrap themes\",\n    ],\n    [\"Semantic UI\", \"Less\", \"Through Less variables\"],\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Yard Component for Breadcrumbs Configuration in TSX\nDESCRIPTION: This snippet renders the Yard component with the Breadcrumbs configuration. It provides an interactive playground for the Breadcrumbs component with a placeholder height of 24 pixels.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/breadcrumbs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n<Yard placeholderHeight={24} {...breadcrumbsYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Select Multi-Pick Search Example\nDESCRIPTION: This example demonstrates the Select component configured for multi-pick search functionality.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/select.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example\\n  title=\\\"Select as multi-pick search\\\"\\n  path=\\\"select/search-multi-pick.tsx\\\"\\n>\\n  <SelectMultiPickSearch />\\n</Example>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Select Grouped Options Example\nDESCRIPTION: This example shows how to group options within the Select component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/select.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example title=\\\"Select with grouped options\\\" path=\\\"select/grouped.tsx\\\">\\n  <SelectGrouped />\\n</Example>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Large Square Anchor with Start Enhancer in TypeScript\nDESCRIPTION: Demonstrates a large floating marker with a square anchor and a start enhancer. Suitable for scenarios where a stable and prominent marker is required.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/floating-marker.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<FloatingMarkerContainer>\\n  <LargeSquareAnchorStartEnhancer />\\n</FloatingMarkerContainer>\n```\n\n----------------------------------------\n\nTITLE: Earner Location Puck Example - React\nDESCRIPTION: This example demonstrates the usage of the EarnerLocationPuck component within a FloatingMarkerContainer, designed for navigation-based applications.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/location-puck.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Earner location puck\" path=\"location-puck/earner.tsx\">\n  <FloatingMarkerContainer>\n    <EarnerLocationPuck />\n  </FloatingMarkerContainer>\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Components with the styled Utility in Base Web\nDESCRIPTION: Example showing how to create new styled components with access to the theme object. The styled utility is a wrapper around Styletron's styled function that provides theme access.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/theming.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { styled } from \"baseui\";\n\nconst Title = styled(\"div\", ({ $theme }) => {\n  return {\n    color: $theme.colors.accent,\n  };\n});\n\nfunction App() {\n  return <Title>Hello</Title>;\n}\n```\n\n----------------------------------------\n\nTITLE: BaseProvider Layer Management Setup\nDESCRIPTION: Shows how to wrap an application with BaseProvider to enable LayersManager for proper layer rendering and management\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/layer.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Wrap application root with BaseProvider\n<BaseProvider>\n  {/* Application content */}\n</BaseProvider>\n```\n\n----------------------------------------\n\nTITLE: Using Block Component for Theme-Based Styling in Base Web\nDESCRIPTION: Example demonstrating the Block component, which allows you to assign common styling attributes using theme tokens without manual theme property lookups.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/theming.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Block } from \"baseui/block\";\n\nfunction App() {\n  return <Block color=\"accent\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Typography Components from BaseUI\nDESCRIPTION: This snippet imports necessary components and types from the BaseUI library for use in typography. It establishes dependencies on the baseui/notification and baseui/typography modules, which are essential for rendering notifications and typography components effectively.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/typography.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Notification, KIND } from \"baseui/notification\";\n\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport * as TypographyExports from \"baseui/typography\";\nimport Display from \"examples/typography/display.tsx\";\nimport Heading from \"examples/typography/heading.tsx\";\nimport Text from \"examples/typography/text.tsx\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Message Card in Base Web - JavaScript\nDESCRIPTION: This JavaScript snippet illustrates imports and exports for the implementation of the Message Card component in Base Web. The Message Card component is used for creating visually appealing message previews with configurable text, image, and button elements. The snippet demonstrates necessary imports for components like Example, Exports, Layout, and various configurations related to Message Card. Yard component is used for setting up a Message Card playground with a specific configuration. Dependencies include imported components and configurations from the Base Web library.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/message-card.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Exports from \"../../components/exports\";\nimport Layout from \"../../components/layout\";\n\nimport ColorMessageCard from \"examples/message-card/color.tsx\";\nimport CustomColorMessageCard from \"examples/message-card/custom-color.tsx\";\nimport LayoutMessageCard from \"examples/message-card/layout.tsx\";\nimport PositioningMessageCard from \"examples/message-card/positioning.tsx\";\n\nimport {\n  MessageCard,\n  IMAGE_LAYOUT,\n  BACKGROUND_COLOR_TYPE,\n  BUTTON_KIND,\n} from \"baseui/message-card\";\nimport * as MessageCardExports from \"baseui/message-card\";\n\nimport Yard from \"../../components/yard/index\";\nimport messageCardYardConfig from \"../../components/yard/config/message-card\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Using Yard Component with Stepper Configuration in JSX\nDESCRIPTION: This JSX snippet utilizes the Yard component with Stepper configurations to render a placeholder. It indicates a preliminary setup for integrating the Stepper component, likely for testing or layout purposes.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/stepper.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Yard placeholderHeight={52} {...stepperYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Builder Example\nDESCRIPTION: This snippet renders the Table Builder example. The Example component's title is set to \"Table Builder\", and the file path is \"table-semantic/builder.tsx\". The actual rendering of the table builder is handled by the Builder component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-semantic.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<Example title=\"Table Builder\" path=\"table-semantic/builder.tsx\">\n  <Builder />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Using the Yard Component for Interactive Accordion Demo\nDESCRIPTION: This JSX snippet renders the Yard component which provides an interactive playground for the Accordion component. It allows users to experiment with different configuration options.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/accordion.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Yard placeholderHeight={180} {...accordionYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Rendering React Map GL Example in Base Web Documentation\nDESCRIPTION: Shows how to include a ReactMapGL example component within an Example wrapper, demonstrating the usage of map markers with react-map-gl library.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/introducing-base-map-markers/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Example title=\"Usage with react-map-gl\" path=\"floating-marker/react-map-gl.js\">\n  <ReactMapGL />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Two Labels with Custom Color in TypeScript\nDESCRIPTION: A floating marker with two labels, where the top label's color is customized. Useful for differentiating markers visually on a map.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/floating-marker.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<FloatingMarkerContainer>\\n  <SecondaryLabelColor />\\n</FloatingMarkerContainer>\n```\n\n----------------------------------------\n\nTITLE: Utilizing Icons with System Banner\nDESCRIPTION: Shows how to incorporate icons for both the artwork and actions in a System Banner. The icons are provided via functions that accept a size parameter, ensuring they are properly scaled. The implementation details include the kind attribute and embedding icons in artwork and actions.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/system-banner.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<SystemBanner\n  kind={KIND.positive}\n  artworkIcon={({ size }) => <Check size={size} />}\n  primaryAction={{\n    label: \"View changes\",\n    icon: ({ size }) => <ChevronRight size={size} />, \n    onClick: viewChanges,\n  }}\n>\n  System successfully updated\n</SystemBanner>\n```\n\n----------------------------------------\n\nTITLE: Using Block component for layout\nDESCRIPTION: Using Base Web's Block component to handle layout and spacing concerns, specifically adding margin to a form control element.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/getting-started-with-base-web/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n<Block marginBottom=\"scale800\">\n  <FormControl label=\"Length\">\n    <Slider {...sliderProps} />\n  </FormControl>\n</Block>\n```\n\n----------------------------------------\n\nTITLE: Rendering Async Options Example in JSX\nDESCRIPTION: This snippet renders an example of the Combobox component with asynchronous options. It demonstrates how to fetch suggestions from a remote API using the AsyncOptions component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/combobox.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Example title=\"Async options\" path=\"combobox/async-options.tsx\">\n  <AsyncOptions />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: PinCode Component Example: Adding Mask\nDESCRIPTION: This code snippet demonstrates how to add a default mask style to the PinCode inputs using the `mask` prop, which can also accept custom string inputs.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/pin-code.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<Example title=\"Adding mask\" path=\"pin-code/mask.tsx\">\n  <PinCodeMask />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Datepicker Localization using date-fns - JavaScript\nDESCRIPTION: This example illustrates how to apply internationalization to datepickers in Base Web using date-fns. The code uses date-fns helpers to format dates according to locale-specific formats and customize date display, requiring date-fns as a dependency. It does not cover more complex localization scenarios like time zone handling.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/internationalization.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\nimport DatepickerLocalizationExample from \"../../examples/datepicker/i18n.tsx\";\n\n<Example title=\"Datepicker localization example\" path=\"datepicker/i18n.js\">\n <DatepickerLocalizationExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Import Radio Components and Exports\nDESCRIPTION: This snippet imports the necessary Radio components (Radio, StatefulRadioGroup) from the baseui/radio library, along with all of its exports as RadioExports. These imports are essential for using the Radio component and accessing its related functionalities within the application.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/radio.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Radio, StatefulRadioGroup } from \"baseui/radio\";\nimport * as RadioExports from \"baseui/radio\";\n```\n\n----------------------------------------\n\nTITLE: Tooltip Example with Stateful Component - JSX\nDESCRIPTION: This snippet showcases a tooltip example using a stateful component. It demonstrates dynamic behavior where the tooltip state can change based on user interactions.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tooltip.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"Tooltip stateful example\" path=\"tooltip/stateful.tsx\">\n  <Stateful />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Configurations in JavaScript\nDESCRIPTION: This snippet imports various components and configurations needed for setting up and displaying Button Dock elements. It is essential to include dependencies from both local examples and the Base Web library to function correctly.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/button-dock.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Exports from \"../../components/exports\";\nimport Layout from \"../../components/layout\";\nimport SEO from \"../../components/meta-seo\";\n\nimport Basic from \"examples/button-dock/basic\";\n\nimport { ButtonDock } from \"baseui/button\";\nimport * as ButtonDockExports from \"baseui/button-dock\";\n\nimport Yard from \"../../components/yard/index\";\nimport buttonDockYardConfig from \"../../components/yard/config/button-dock\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Builder with Sorting Example\nDESCRIPTION: This snippet renders the Table Builder with sorting example. The title of the Example component is \"Table Builder with sorting\", and it points to \"table-semantic/sortable.tsx\".  The Sortable component implements the table builder with sorting functionality.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-semantic.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<Example title=\"Table Builder with sorting\" path=\"table-semantic/sortable.tsx\">\n  <Sortable />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Displaying Tree View Yard with Configurations\nDESCRIPTION: This example leverages the Yard component to present a customizable Tree View with specific configurations. The treeviewYardConfig is applied to demonstrate the adaptable nature of this component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tree-view.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Yard placeholderHeight={134} {...treeviewYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Anchor Position Example for Floating Markers in React\nDESCRIPTION: Demonstrates the usage of an AnchorPositionExample component to show how the position of a floating marker's label can be animated.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/introducing-base-map-markers/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<AnchorPositionExample />\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Overflow in PageControl\nDESCRIPTION: This snippet showcases an example of handling overflow in page controls using an Example component. The Overflow component represents a scenario where the control handles more pages than can be displayed simultaneously. Ensure Overflow is properly configured for optimal results.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/page-control.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<Example title=\"Overflow\" path=\"page-control/overflow.tsx\">\\n  <Overflow />\\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing Virtual Horizontal Table Example\nDESCRIPTION: This snippet imports the VirtualHorizontal component from the \"examples/table/virtual-horizontal-scroll.tsx\" file. This React component shows how to use react-virtualized to create a table with horizontal scrolling and virtualization for large datasets.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport VirtualHorizontal from \"examples/table/virtual-horizontal-scroll.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Migrating from $ref to ref in Base Web v7\nDESCRIPTION: Updates the usage of $ref prop to the standard ref prop now that Styletron supports React's ref forwarding functionality.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v7/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nimport {styled} from 'baseui';\nconst MyStyledComponent = styled('div', {color: 'red'});\n\n- <MyStyledComponent $ref={myRef} />\n+ <MyStyledComponent ref={myRef} />\n```\n\n----------------------------------------\n\nTITLE: Extending Styled Components with withStyle in Base Web\nDESCRIPTION: Example showing how to extend a Base Web styled component using the withStyle utility. This approach allows you to access the theme object to apply consistent styling across components.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/theming.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withStyle } from \"baseui\";\nimport { StyledBaseButton } from \"baseui/button\";\n\nconst MyButton = withStyle(StyledBaseButton, ({ $theme }) => {\n  return {\n    color: $theme.colors.accent,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Virtual Table Example\nDESCRIPTION: This snippet imports the Virtual component from the \"examples/table/virtual.tsx\" file. This React component demonstrates the implementation of a virtualized table using react-virtualized with the BaseWeb table for improved performance with large datasets.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport Virtual from \"examples/table/virtual.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Display Timepicker Example using BaseWeb\nDESCRIPTION: This snippet imports the necessary components and instances a Timepicker example within a layout, demonstrating its basic functionality. It requires the BaseWeb library and a layout component from the project's structure. The Timepicker component is instantiated to show its primary usage.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/time-picker.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport Timepicker from \"examples/timepicker/timepicker.tsx\";\nimport Example from \"../../components/example\";\nimport React from \"react\";\n\n<Example title=\"Timepicker\" path=\"timepicker/timepicker.tsx\">\n  <Timepicker />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: PinCode Component Example: Sizes\nDESCRIPTION: This code snippet showcases how to control the size of the PinCode inputs by passing the `size` prop, which affects the rendered components.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/pin-code.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<Example title=\"Sizes\" path=\"pin-code/size.tsx\">\n  <PinCodeSizes />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Bottom Navigation Yard Config\nDESCRIPTION: This snippet integrates the Bottom Navigation component into a Yard component, likely for interactive demonstration or testing. It imports `bottomNavigationYardConfig` from a configuration file and passes it as props to the `Yard` component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/bottom-navigation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"import Yard from \\\"../../components/yard/index\\\";\nimport bottomNavigationYardConfig from \\\"../../components/yard/config/bottom-navigation\\\";\n\n<Yard placeholderHeight={24} {...bottomNavigationYardConfig} />\"\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Negative Color Example - TSX\nDESCRIPTION: This snippet demonstrates the use of the Progress Bar with a negative color, showing how to indicate an adverse condition or loading failure.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/progress-bar.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Example\n  title=\"Progress bar with Negative Color\"\n  path=\"progress-bar/negative.tsx\"\n>\n  <Negative />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Other Shapes Skeleton Example - TypeScript\nDESCRIPTION: This snippet shows how to render a circular Skeleton component. It allows customization of the shape and position of the Skeleton using overrides.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/skeleton.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<Example title=\"Other Shapes\" path=\"skeleton/circle.tsx\">\n  <SkeletonCircle />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessibility Features in Tree View\nDESCRIPTION: Aria recommendations for implementing accessible Tree Views are discussed, detailing how accessibility attributes like 'aria-expanded' can be used. Guidance on keyboard navigation accessibility according to WAI-ARIA practices is provided.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tree-view.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Exports\n  component={TreeViewExports}\n  title=\"Tree View exports\"\n  path=\"baseui/tree-view\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Floating Marker with Start Enhancer in TypeScript\nDESCRIPTION: A floating marker with a start enhancer and a label, positioned with the anchor at the bottom right. Enhancers add additional visual elements to the marker.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/floating-marker.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<FloatingMarkerContainer>\\n  <StartEnhancer />\\n</FloatingMarkerContainer>\n```\n\n----------------------------------------\n\nTITLE: Textarea Example\nDESCRIPTION: This code snippet imports and renders the TextareaExample component within an Example component. This example demonstrates how to use the FormControl component with a textarea, which is useful for multi-line text input fields. The TextareaExample renders a Textarea inside a Form Control.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/form-control.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport TextareaExample from \"examples/form-control/textarea.tsx\";\n\n<Example title=\"Textarea\" path=\"form-control/textarea.tsx\">\n  <TextareaExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Large Marker with Top Right Anchor in TypeScript\nDESCRIPTION: Example of a large floating map marker positioned with the anchor at the top right. Ideal for emphasizing a location with larger markers, implemented in TypeScript.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/floating-marker.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<FloatingMarkerContainer>\\n  <LargeTopRight />\\n</FloatingMarkerContainer>\n```\n\n----------------------------------------\n\nTITLE: PinCode Component Example: Disable Focus Management\nDESCRIPTION: This snippet shows how to disable the built-in focus management behavior of the PinCode component by setting the `manageFocus` prop to false, allowing custom focus management.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/pin-code.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<Example title=\"Disable focus management\" path=\"pin-code/no-tab.tsx\">\n  <PinCodeNoTab />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Tap Target List Example\nDESCRIPTION: This code snippet demonstrates how to make the entire surface of a list item a tap target when the `onClick` prop is supplied. The `TapTarget` example component is used and wrapped within the `Example` component to show its functionality. This enhances usability in smaller viewports.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/list.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Example title=\\\"Full surface tap target\\\" path=\\\"list/tap-target.tsx\\\">\\n  <TapTarget />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Actions in System Banner\nDESCRIPTION: Illustrates the use of System Banner when both primary and secondary actions are provided. These actions are displayed as separate buttons, allowing the user to choose between two distinct actions. The setup includes defining both action objects with labels and onClick handlers.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/system-banner.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<SystemBanner\n  kind={KIND.warning}\n  primaryAction={{\n    label: \"Update now\",\n    onClick: handleUpdate,\n  }}\n  secondaryAction={{\n    label: \"Remind me later\",\n    onClick: handleDismiss,\n  }}\n>\n  Critical security update required\n</SystemBanner>\n```\n\n----------------------------------------\n\nTITLE: Rendering Filtered Options Example in JSX\nDESCRIPTION: This snippet renders an example of the Combobox component with filtered options. It uses the Example component to display the title, file path, and the FilteredOptions component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/combobox.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Example title=\"Filtered options\" path=\"combobox/filtered-options.tsx\">\n  <FilteredOptions />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Rendering FlexGrid Examples in JSX\nDESCRIPTION: This snippet demonstrates how to render various FlexGrid examples using the Example component. It includes basic usage, unequal widths, and responsive layouts.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/flex-grid.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"FlexGrid basic usage\" path=\"flex-grid/basic.tsx\">\n  <Basic />\n</Example>\n\n<Example\n  title=\"FlexGrid unequal (narrow) widths\"\n  path=\"flex-grid/unequal-narrow.tsx\"\n>\n  <UnequalNarrow />\n</Example>\n\n<Example\n  title=\"FlexGrid unequal (wide) widths\"\n  path=\"flex-grid/unequal-wide.tsx\"\n>\n  <UnequalWide />\n</Example>\n\n<Example title=\"FlexGrid missing items\" path=\"flex-grid/missing.tsx\">\n  <Missing />\n</Example>\n\n<Example title=\"FlexGrid responsive usage\" path=\"flex-grid/responsive.tsx\">\n  <Responsive />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing Slider and Exports - Typescript\nDESCRIPTION: This snippet imports the `StatefulSlider` as `Slider` and all exports from `baseui/slider` as `SliderExports`. This allows for direct usage of the slider component and access to related utilities. This is essential for implementing the slider component in an application.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/slider.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n\"import { StatefulSlider as Slider } from \\\"baseui/slider\\\";\nimport * as SliderExports from \\\"baseui/slider\\\";\"\n```\n\n----------------------------------------\n\nTITLE: Rendering the Progress Bar Component - TSX\nDESCRIPTION: This snippet demonstrates how to render the Yard component along with progress bar configuration, serving as a container for the examples displayed in the layout.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/progress-bar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Yard placeholderHeight={28} {...progressBarYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Location Puck in React-Map-GL - React\nDESCRIPTION: This snippet shows how to render the ConsumerLocationPuck within a react-map-gl view, integrating the location puck functionality in a mapping library.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/location-puck.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Usage with react-map-gl\" path=\"location-puck/react-map-gl.tsx\">\n  <ReactMapGL />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Examples in JavaScript\nDESCRIPTION: This snippet imports several components and example configurations necessary for demonstrating header navigation in a BaseWeb project. It includes both custom components such as Layout and Yard, and specific examples like BasicHeader and WithSearch for rendering.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/header-navigation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport BasicHeader from \"examples/header-navigation/basic.tsx\";\nimport WithSearch from \"examples/header-navigation/with-search.tsx\";\n\nimport {\n  HeaderNavigation,\n  ALIGN,\n  StyledNavigationItem as NavigationItem,\n  StyledNavigationList as NavigationList,\n} from \"baseui/header-navigation\";\nimport * as HeaderNavigationExports from \"baseui/header-navigation\";\n\nimport Yard from \"../../components/yard/index\";\nimport headerNavigationYardConfig from \"../../components/yard/config/header-navigation\";\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a Basic StatefulList Component in React\nDESCRIPTION: A basic example of importing and rendering the StatefulList component from Base Web with initial state configuration. This demonstrates the simplest usage pattern before applying any overrides.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/understanding-overrides.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StatefulList } from \"baseui/dnd-list\";\n\nexport default () => (\n  <StatefulList\n    initialState={{\n      items: [\"Item 1\", \"Item 2\", \"Item 3\"],\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Overrides Example - TSX\nDESCRIPTION: This snippet showcases how to apply custom overrides to the Progress Bar component, allowing for style modifications to meet design needs.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/progress-bar.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Progress bar with Overrides\" path=\"progress-bar/overrides.tsx\">\n  <Customization />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Using Yard Component for Numbered Progress Steps - JSX\nDESCRIPTION: This snippet demonstrates the use of the Yard component to render a configuration for numbered progress steps. It includes a query string name for state management, enhancing the user's ability to track progress. The input prop consists of placeholder height and configuration settings.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/progress-steps.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Yard\n  placeholderHeight={20}\n  queryStringName=\"numbered-steps-state\"\n  {...progressStepsNumberedYardConfig}\n/>\n```\n\n----------------------------------------\n\nTITLE: Skeleton Sub Elements Example - TypeScript\nDESCRIPTION: This snippet showcases the ability to generate multiple sub elements within the Skeleton component by setting the rows prop. It illustrates how to customize the appearance and behavior of these elements.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/skeleton.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<Example title=\"Sub elements\" path=\"skeleton/subElements.tsx\">\n  <SkeletonSubElements />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Numbered Progress Steps - JSX\nDESCRIPTION: This snippet creates an example for the numbered progress steps component, using the Example wrapper. The path prop enables navigation to the implementation file for more details. It is designed to demonstrate the usage of numbered style progress steps visually.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/progress-steps.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Example\n  title=\"Progress Steps Numbered Usage\"\n  path=\"progress-steps/numbered.tsx\"\n>\n  <ProgressStepsNumbered />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Initializing Tree View Imports in JavaScript\nDESCRIPTION: This snippet imports multiple components and examples to be used within the file, including core Tree View components and configurations. It sets up dependencies necessary for demonstrating different Tree View examples.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tree-view.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport TreeViewBasic from \"examples/tree-view/basic.tsx\";\nimport TreeViewUncontrolled from \"examples/tree-view/uncontrolled.tsx\";\nimport CustomLabelledTreeView from \"examples/tree-view/custom-label.tsx\";\nimport TreeViewOverrides from \"examples/tree-view/overrides.tsx\";\nimport TreeViewLabelOverrides from \"examples/tree-view/label-overrides.tsx\";\nimport SingleExpanded from \"examples/tree-view/single-expanded.tsx\";\nimport LabelInteractable from \"examples/tree-view/interactable.tsx\";\n\nimport Yard from \"../../components/yard/index\";\nimport treeviewYardConfig from \"../../components/yard/config/tree-view\";\n\nimport * as TreeViewExports from \"baseui/tree-view\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Dotted Progress Steps - JSX\nDESCRIPTION: This snippet creates an example showcasing the dotted progress steps component within the Example wrapper. The path prop indicates the location of the source code for further reference. It is intended for visual demonstration of dotted style progress steps.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/progress-steps.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"Progress Steps Dotted Usage\" path=\"progress-steps/dotted.tsx\">\n  <ProgressStepsDotted />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Rendering File Uploader with Error State in React\nDESCRIPTION: Displays an example of the FileUploaderBasic component in an error state to demonstrate error handling capabilities.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/file-uploader-basic.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Example\n  title=\"File upload basic with error\"\n  path=\"file-uploader-basic/error.tsx\"\n>\n  <FileUploaderBasicError />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Consumer Location Puck Example - React\nDESCRIPTION: This example snippet demonstrates how to render a consumer location puck within a FloatingMarkerContainer. It showcases the standard usage of the ConsumerLocationPuck component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/location-puck.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Consumer location puck\" path=\"location-puck/consumer.tsx\">\n  <FloatingMarkerContainer>\n    <ConsumerLocationPuck />\n  </FloatingMarkerContainer>\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Using Snackbar Example for Infinite Duration in React\nDESCRIPTION: This snippet shows how to utilize the Snackbar with the `infinite` duration, allowing the Snackbar to remain visible until manually dismissed. It includes the use of a progress indicator.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/snackbar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"Infinite duration\" path=\"snackbar/infinite-duration.tsx\">\n  <InfiniteDuration />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Exporting Layout Component in JavaScript\nDESCRIPTION: This snippet exports the default Layout component, which serves as a template for rendering the header navigation examples.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/header-navigation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default Layout;\n\n```\n\n----------------------------------------\n\nTITLE: Rendering AppNavBar Configuration with Yard Component\nDESCRIPTION: This JSX snippet renders the Yard component with AppNavBar configuration, allowing interactive exploration of the component's props.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/app-nav-bar.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Yard placeholderHeight={134} {...appNavBarYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Select Native Example\nDESCRIPTION: This example demonstrates a Select component styled similarly to a native HTML select element.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/select.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example title=\\\"Select similar to native select\\\" path=\\\"select/native.tsx\\\">\\n  <SelectNative />\\n</Example>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Single-Select Tile Example\nDESCRIPTION: This example demonstrates the use of the Tile component for single-selection scenarios. The SingleSelect component is rendered, representing a tile group allowing only one selection.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tile.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Example title=\\\"Single select\\\" path=\\\"tile/single-select.tsx\\\">\\n  <SingleSelect />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Select Dropdown Overrides Example\nDESCRIPTION: This example shows how to override the Dropdown subcomponent of the Select component.  To override the `Popover` that's being used by the Dropdown subcomponent, you have to use a [nested override](/guides/understanding-overrides/#override-nested-components).\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/select.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example\\n  title=\\\"Select dropdown overrides\\\"\\n  path=\\\"select/overridden-dropdown.tsx\\\"\\n>\\n  <SelectOverriddenDropdown />\\n</Example>\\n\\nTo override the `Popover` that's being used by the Dropdown subcomponent, you have to use a [nested override](/guides/understanding-overrides/#override-nested-components).\\n\"\n```\n\n----------------------------------------\n\nTITLE: Menu with Source Code Example\nDESCRIPTION: This code snippet provides the source code for a StatefulMenu component with OptionProfile. It shows how to create a menu with profile-style items, including title, subtitle, body, and image. It also demonstrates how to override various components within the OptionProfile.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/menu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n\"import {StatefulMenu, OptionProfile} from 'baseui/menu';\n          export default () => (\n            <StatefulMenu\n              items={[...new Array(4)].map(() => ({\n                title: 'David Smith',\n                subtitle: 'Senior Engineering Manager',\n                body: 'Uber Everything',\n                imgUrl: 'https://via.placeholder.com/60x60',\n              }))}\n              overrides={{\n                List: {},\n                ListItem: {},\n                Option: {\n                  component: OptionProfile,\n                  props: {\n                    getProfileItemLabels: ({title, subtitle, body}) => ({\n                      title,\n                      subtitle,\n                      body,\n                    }),\n                    getProfileItemImg: item => item.imgUrl,\n                    getProfileItemImgText: item => item.title,\n                    overrides: {\n                      ListItemProfile: {},\n                      ProfileImgContainer: {},\n                      ProfileImg: {},\n                      ProfileLabelsContainer: {},\n                      ProfileTitle: {},\n                      ProfileSubtitle: {},\n                      ProfileBody: {}\n                    },\n                  },\n                },\n              }}\n            />\n          );\"\n```\n\n----------------------------------------\n\nTITLE: ColorPreviewContainer Component for Styling Colors\nDESCRIPTION: The ColorPreviewContainer component utilizes the useStyletron hook from baseui to apply styles based on the theme. It renders a div with typography styles applied, and can accept additional props to extend its functionality.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tokens.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport function ColorPreviewContainer(props) {\n  const [css, theme] = useStyletron();\n  return (\n    <div\n      className={css({\n        ...theme.typography.MonoParagraphSmall,\n      })}\n      {...props}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from v7 Styled Components to v8 in Base Web\nDESCRIPTION: This snippet illustrates how to migrate from the v7 `styled` API to the v8 API using `createThemedStyled`. It demonstrates a simple scenario by showing the changes required to use `createThemedStyled` and assign it to a variable before using it to style the component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v8/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n-import {styled} from 'baseui';\n+import {createThemedStyled} from 'baseui';\n\ntype CustomTheme = {customColor: string};\ntype PropsT = {};\n\n+const themedStyled = createThemedStyled<CustomTheme>();\n\n-const StyledA = styled<PropsT, CustomTheme>('div', props => {\n+const StyledA = themedStyled<PropsT>('div', props => {\n  return {color: props.$theme.customColor};\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying AppNavBar Examples\nDESCRIPTION: These JSX snippets render example components for the AppNavBar, including a basic example, custom menu item, and unique identifier usage.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/app-nav-bar.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Example title=\"Basic example\" path=\"app-nav-bar/basic.tsx\">\n  <Basic />\n</Example>\n\n<Example title=\"Custom menu item\" path=\"app-nav-bar/map-item-to-node.tsx\">\n  <MapItemToNode />\n</Example>\n\n<Example title=\"Non unique labels\" path=\"app-nav-bar/unique-identifier.tsx\">\n  <UniqueIdentifier />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Exporting Tokens for Usage\nDESCRIPTION: This snippet is used to export the tokens from the baseui library as a component. It allows for easier access to the color tokens within other components and documentation.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tokens.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<Exports\n  component={TokensExports}\n  title=\"Tokens exports\"\n  path=\"baseui/tokens\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Disabled File Uploader in React\nDESCRIPTION: Displays an example of the FileUploaderBasic component in a disabled state to show how interaction is prevented.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/file-uploader-basic.mdx#2025-04-21_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<Example\n  title=\"File uploader basic in disabled state\"\n  path=\"file-uploader-basic/disabled.tsx\"\n>\n  <FileUploaderBasicDisabled />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Fixed Marker Example in React\nDESCRIPTION: Demonstrates how to render a basic fixed marker example component in React. This snippet is part of the documentation for the fixed marker type.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/introducing-base-map-markers/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<BasicFixed />\n```\n\n----------------------------------------\n\nTITLE: Rendering ButtonGroup in Radio Mode for Accessible Navigation\nDESCRIPTION: Code to render a ButtonGroup component in radio mode, demonstrating how keyboard controls were implemented to make it behave similarly to a native radio group.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/screen-reader-improvements/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"ButtonGroup\" path=\"button-group/radio-mode.js\">\n  <RadioMode />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Example of Floating Mobile Header Component - JSX\nDESCRIPTION: This snippet defines an Example component wrapping the FloatingMobileHeader to present how the floating header will look in the application. It highlights the implementation of the floating header as a part of the mobile header showcase.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/mobile-header.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"Floating header\" path=\"mobile-header/floating.tsx\">\n  <FloatingMobileHeader />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Span Prop Usage in Grid - React\nDESCRIPTION: This snippet shows how to use the span prop to define the number of grid columns a cell should span in a responsive manner, accommodating different viewport sizes.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/layout-grid.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Span\" path=\"layout-grid/span.tsx\">\n  <SpanExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Horizontal Progress Steps - JSX\nDESCRIPTION: This snippet renders an example for the horizontal style progress steps, encapsulated in the Example component for better organization. The provided path prop allows easy access to the corresponding source code for reference. It aims to illustrate horizontal progress representation.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/progress-steps.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Example\n  title=\"Progress Steps Horizontal Usage\"\n  path=\"progress-steps/horizontal.tsx\"\n>\n  <ProgressStepsHorizontal />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Rendering Empty State and Loading Examples - JSX\nDESCRIPTION: This snippet provides examples for rendering the 'EmptyState' and 'Loading' components within an 'Example' wrapper. It demonstrates how these components can be used contextually in a React application.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/empty-state.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Example title=\"Empty state\" path=\"empty-state/empty-state.tsx\">\n  <EmptyState />\n</Example>\n\n<Example title=\"Loading\" path=\"empty-state/loading.tsx\">\n  <Loading />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing Marks Slider Example - Typescript\nDESCRIPTION: This snippet imports the `Marks` component from `examples/slider/marks.tsx`.  This example shows how to add marks or ticks along the slider to indicate specific values.  It demonstrates a more visually informative use of the slider.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/slider.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"import Marks from \\\"examples/slider/marks.tsx\\\";\"\n```\n\n----------------------------------------\n\nTITLE: Example of Text Content Mobile Header - JSX\nDESCRIPTION: This snippet showcases how to implement the TextContentMobileHeader within an Example component, providing a practical depiction of a mobile header with text content. It serves as an accessible illustration for users looking to utilize text within headers.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/mobile-header.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Example\n  title=\"Buttons with text content\"\n  path=\"mobile-header/text-content.tsx\"\n>\n  <TextContentMobileHeader />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing Card Components in BaseWeb\nDESCRIPTION: Import core card components and related UI elements from BaseWeb library for creating flexible card interfaces\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/card.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Card, StyledBody, StyledAction, StyledThumbnail } from \"baseui/card\";\nimport { Button } from \"baseui/button\";\n```\n\n----------------------------------------\n\nTITLE: Basic Floating Marker Usage in TypeScript\nDESCRIPTION: This example demonstrates the basic usage of a floating map marker with a label, using TypeScript. The default size is medium, and it is suited for scenarios where a simple marker is needed.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/floating-marker.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<FloatingMarkerContainer>\\n  <Basic />\\n</FloatingMarkerContainer>\n```\n\n----------------------------------------\n\nTITLE: Rendering File Uploader with Indeterminate Progress in React\nDESCRIPTION: Displays an example of the FileUploaderBasic component with unknown progress state to demonstrate loading indicators.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/file-uploader-basic.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Example\n  title=\"File upload basic with unknown progress\"\n  path=\"file-uploader-basic/indeterminate-progress.tsx\"\n>\n  <FileUploaderBasicIndeterminate />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Using Snackbar Example for Placement in React\nDESCRIPTION: This snippet exhibits how to position the Snackbar within the application. The `Placement` component controls where the Snackbar will render on the screen, defaulting to the top-center position.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/snackbar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"Placement\" path=\"snackbar/placement.tsx\">\n  <Placement />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Basic Textarea Example\nDESCRIPTION: This snippet imports and renders the TextareaBasic component to demonstrate basic usage of the Base Web Textarea component. It showcases the simplest implementation with default settings.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/textarea.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Example title=\\\"Basic usage\\\" path=\\\"textarea/basic.tsx\\\">\\n  <TextareaBasic />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Icon Component Usage\nDESCRIPTION: The markdown documentation provides guidelines and examples for using icons, what scenarios they are best suited for, and how to access them. The content aims to guide developers in making efficient use of icons to enhance UI without cluttering the screen space.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/icon.mdx#2025-04-21_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n# Icon\n\nVisually indicate an action or option.\n\n_If you are an Uber employee, you can access the full list of icons [here](http://t.uber.com/icons)._\n```\n\n----------------------------------------\n\nTITLE: Responsive Span Prop Handling - React\nDESCRIPTION: This snippet illustrates the usage of a responsive span prop that allows for array input corresponding to various breakpoints, effectively adapting cell spans based on viewport size.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/layout-grid.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Responsive\" path=\"layout-grid/responsive.tsx\">\n  <ResponsiveExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Rendering File Uploader with Custom Overrides in React\nDESCRIPTION: Displays an example of the FileUploaderBasic component with custom styling overrides to demonstrate theming capabilities.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/file-uploader-basic.mdx#2025-04-21_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<Example\n  title=\"File uploader basic with overrides\"\n  path=\"file-uploader-basic/overrides.tsx\"\n>\n  <FileUploaderBasicOverrides />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing Toast Example Components\nDESCRIPTION: Import specific toast notification example components for documentation\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/toast.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport ToastNotification from \"examples/toast/toast-notification.tsx\";\nimport ToastSameKeyNotification from \"examples/toast/toast-same-key-notification.tsx\";\nimport ToastCloseFromOutside from \"examples/toast/toast-close-from-outside.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Stateful Textarea Example\nDESCRIPTION: This snippet imports and renders the TextareaStateful component to demonstrate the stateful (uncontrolled) usage of the Base Web Textarea component. The `StatefulTextarea` manages its own state, simplifying usage in some cases.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/textarea.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Example title=\\\"Stateful (uncontrolled) usage\\\" path=\\\"textarea/stateful.tsx\\\">\\n  <TextareaStateful />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Tag Components in Base Web React\nDESCRIPTION: This code snippet imports several components and modules necessary for demonstrating the different configurations of the Base Web Tag component in a React application. It sets up a layout and examples for various tag styles, sizes, and states by importing configurations and components needed to render the tags in a UI.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tag.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport Basic from \"examples/tag/basic.tsx\";\nimport Hierarchy from \"examples/tag/variants.tsx\";\nimport Primitive from \"examples/tag/primitive.tsx\";\nimport Kinds from \"examples/tag/kinds.tsx\";\nimport Size from \"examples/tag/size.tsx\";\nimport NonClickable from \"examples/tag/non-clickable.tsx\";\nimport Clickable from \"examples/tag/clickable.tsx\";\nimport Disabled from \"examples/tag/disabled.tsx\";\nimport NonCloseable from \"examples/tag/non-closeable.tsx\";\nimport ClickableNonCloseable from \"examples/tag/clickable-non-closeable.tsx\";\nimport CustomColor from \"examples/tag/custom-color.tsx\";\n\nimport { Tag } from \"baseui/tag\";\nimport * as TagExports from \"baseui/tag\";\n\nimport Yard from \"../../components/yard/index\";\nimport tagYardConfig from \"../../components/yard/config/tag\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Select Example\nDESCRIPTION: This code snippet imports and renders the SelectExample component. This example showcases the integration of the FormControl component with a select dropdown, which allows users to choose from a list of options. The SelectExample component displays a Select component inside the FormControl.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/form-control.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport SelectExample from \"examples/form-control/select.tsx\";\n\n<Example title=\"Select\" path=\"form-control/select.tsx\">\n  <SelectExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Rendering NotificationCircle with Yard\nDESCRIPTION: This snippet demonstrates how to render the NotificationCircle badge using the Yard component, applying a placeholder height and passing appropriate configuration.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/notification-circle.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Yard placeholderHeight={34} {...notificationCircleYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Exporting Header Navigation Components in JavaScript\nDESCRIPTION: This code provides an export mechanism using the Exports component to display available HeaderNavigation components from BaseWeb, enhancing modularity and reusability.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/header-navigation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Exports\ncomponent={HeaderNavigationExports}\ntitle=\"Header Navigation exports\"\npath=\"baseui/header-navigation\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Breadcrumbs Component and Examples in JavaScript\nDESCRIPTION: This snippet imports necessary components, examples, and configurations for the Breadcrumbs documentation page. It includes imports from local components, examples, and the Base Web UI library.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/breadcrumbs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Exports from \"../../components/exports\";\nimport Layout from \"../../components/layout\";\nimport SEO from \"../../components/meta-seo\";\n\nimport BasicBreadcrumbs from \"examples/breadcrumbs/basic.tsx\";\nimport PseudoBreadcrumbs from \"examples/breadcrumbs/pseudo.tsx\";\n\nimport { Breadcrumbs } from \"baseui/breadcrumbs\";\nimport * as BreadcrumbsExports from \"baseui/breadcrumbs\";\nimport { StyledLink as Link } from \"baseui/link\";\n\nimport Yard from \"../../components/yard/index\";\nimport breadcrumbsYardConfig from \"../../components/yard/config/breadcrumbs\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Spinner Yard\nDESCRIPTION: Renders a Yard component with spinner configuration and placeholder height to illustrate spinner functionality.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/spinner.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Yard placeholderHeight={44} {...spinnerYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of StatefulNavigation Component in React\nDESCRIPTION: Basic implementation example of the StatefulNavigation component from Base Web's side-navigation package. This shows how to import and implement the component with an empty items array.\nSOURCE: https://github.com/uber/baseweb/blob/main/src/side-navigation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport {StatefulNavigation} from 'baseui/side-navigation';\n\n<StatefulNavigation items={[]} />\n```\n\n----------------------------------------\n\nTITLE: Importing Notification Example Variations\nDESCRIPTION: Imports different notification example implementations to showcase various features and use cases\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/notification.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Basic from \"examples/notification/basic.tsx\";\nimport Kinds from \"examples/notification/kinds.tsx\";\nimport Closeable from \"examples/notification/closeable.tsx\";\nimport Customization from \"examples/notification/overrides.tsx\";\nimport CustomDismiss from \"examples/notification/custom-dismiss.tsx\";\nimport FullWidth from \"examples/notification/full-width.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Customizing Tag Color with Overrides in Base Web\nDESCRIPTION: Example of how to customize a Base Web Tag component by changing its text color using the overrides prop. The code demonstrates accessing theme colors through the $theme parameter in the style function.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/nested-overrides-playground/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport { Tag } from \"baseui/tag\";\n\nexport default () => (\n  <Tag\n    overrides={{\n      Text: {\n        style: ({ $theme }) => ({\n          color: $theme.colors.accent,\n        }),\n      },\n    }}\n  >\n    this is a tag\n  </Tag>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Table with Scrolling Example\nDESCRIPTION: This snippet renders an Example component that demonstrates the use of a Table with scrolling contents. The title is \"Table with scrolling contents\", and the path is \"table-semantic/scroll.tsx\".  The Scroll component likely implements the table with scrollable content.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-semantic.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<Example title=\"Table with scrolling contents\" path=\"table-semantic/scroll.tsx\">\n  <Scroll />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Group Yard Component\nDESCRIPTION: Configuration for the Yard component which provides an interactive playground for the Button Group component with a specified placeholder height.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/button-group.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Yard placeholderHeight={52} {...buttonGroupYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Menu Adapter List Example\nDESCRIPTION: This code snippet shows how to integrate the `List` component with a `Menu` component using the example component `MenuAdapter`.  The `Example` component is used to wrap and display this functionality, providing a title and source code path. This demonstrates how to use a list as the basis for creating a menu.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/list.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Example title=\\\"Usage with Menu\\\" path=\\\"list/menu-adapter.tsx\\\">\\n  <MenuAdapter />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Action Tile Example\nDESCRIPTION: This code snippet showcases how the Tile component can be used as an action prompt, similar to a button. The Action component, likely a pre-configured Tile, is rendered within an Example component, demonstrating the action-based use case.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tile.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Example title=\\\"Action prompt\\\" path=\\\"tile/action.tsx\\\">\\n  <Action />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Example of Offset Usage - JSX\nDESCRIPTION: This snippet presents an Example component showcasing the Offset implementation of the HintDot badge, illustrating how to customize its position on the UI.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/hint-dot.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"Offset\" path=\"hint-dot/offset.tsx\">\n  <Offset />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Example Components\nDESCRIPTION: This snippet imports various accordion example components that demonstrate different usage patterns of the Base Web Accordion component. These examples show basic usage, stateful panels, custom rendering, and more.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/accordion.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BasicAccordion from \"examples/accordion/basic.tsx\";\nimport StatefulPanelExample from \"examples/accordion/stateful-panel.tsx\";\nimport AccordionSEO from \"examples/accordion/renderpanelcontent.tsx\";\nimport CustomPanel from \"examples/accordion/custom.tsx\";\nimport StatelessAccordion from \"examples/accordion/stateless.tsx\";\nimport CustomTitle from \"examples/accordion/title.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Card Example Component Imports\nDESCRIPTION: Import specific card example components for demonstrating different card layouts and configurations\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/card.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport CardBasic from \"examples/card/basic.tsx\";\nimport CardWithImageCta from \"examples/card/image-cta.tsx\";\nimport CardWithThumbnailCta from \"examples/card/thumbnail-cta.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Displaying Popover Example in JSX\nDESCRIPTION: This snippet renders a Yard component configured for popover display. It is dependent on the popover yard configuration and serves as a placeholder for popover examples.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/popover.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Yard placeholderHeight={20} {...popoverYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Configuring SEO Component for Button Documentation\nDESCRIPTION: This snippet shows how to set up the SEO component with a description and keywords specific to the Button component documentation.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/button.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SEO\n  description=\"Buttons provide cues for actions and events. These fundamental components allow users to process actions or navigate an experience.\"\n  keywords=\"button, react button, react cta, react call to action\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Example and Layout Components\nDESCRIPTION: Shows the import of utility components for rendering documentation and layout examples\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/notification.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n```\n\n----------------------------------------\n\nTITLE: Basic List Example\nDESCRIPTION: This code snippet displays the basic usage of the `List` component using the example component `Basic`. The `Example` component likely wraps the `Basic` component to provide a title and source code path for demonstration purposes. This serves as a starting point for understanding how to implement lists in BaseWeb.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/list.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Example title=\\\"Basic usage\\\" path=\\\"list/basic.tsx\\\">\\n  <Basic />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Importing Cells Table Example\nDESCRIPTION: This snippet imports the Cells component from the \"examples/table/cells.tsx\" file. This component is a React component that demonstrates different cell configurations and customizations within the BaseWeb table.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Cells from \"examples/table/cells.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Sortable Table Example\nDESCRIPTION: This snippet imports the Sortable component from the \"examples/table/sortable.tsx\" file. This React component demonstrates how to enable column sorting within a BaseWeb table.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport Sortable from \"examples/table/sortable.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Sublist List Example\nDESCRIPTION: This code snippet demonstrates how to create sublists within a `List` component using the example component `Sublist`. The `Example` component provides a title and the source code path to the `Sublist` component. This is useful for creating hierarchical lists.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/list.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Example title=\\\"Sublist\\\" path=\\\"list/sublist.tsx\\\">\\n  <Sublist />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Radio Component Overrides - diff\nDESCRIPTION: Illustrates how to migrate from using specific StyledRadio overrides to employing 'StyledRadioInner' and 'StyledRadioOuter' or directly using the 'Radio' component. This change aligns with the recommended styles and functionalities.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v7/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n<Radio\\n  overrides={{\\n-   Radio: {},\\n+   RadioInner: {},\\n+   RadioOuter: {},\\n  }}\\n  value=\\\"1\\\"\\n>\\n  option\\n</Radio>\n```\n\n----------------------------------------\n\nTITLE: Multi-Select Tile Example with Toggle\nDESCRIPTION: This example shows how to use the Tile component for multi-selection using a toggle switch. The MultiSelectLive component is rendered, representing a tile group with toggle functionality.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tile.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Example title=\\\"Multi select with toggle\\\" path=\\\"tile/multi-select-live.tsx\\\">\\n  <MultiSelectLive />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Snackbar Components from BaseUI in React\nDESCRIPTION: This snippet exports the Snackbar components from the BaseUI library for use in the application. It utilizes the `Exports` component to facilitate the export.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/snackbar.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Exports\n  component={SnackbarExports}\n  title=\"Snackbar exports\"\n  path=\"baseui/snackbar\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Usage Examples in React\nDESCRIPTION: These snippets demonstrate how to render various Button component examples using the Example component. Each example corresponds to a different aspect or configuration of the Button component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/button.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Example title=\"Basic usage\" path=\"button/basic.tsx\">\n  <BasicButton />\n</Example>\n\n<Example title=\"Kinds\" path=\"button/kinds.tsx\">\n  <Kinds />\n</Example>\n\n<Example title=\"States\" path=\"button/states.tsx\">\n  <States />\n</Example>\n\n<Example title=\"Sizes\" path=\"button/sizes.tsx\">\n  <Sizes />\n</Example>\n\n<Example title=\"Shapes\" path=\"button/shapes.tsx\">\n  <Shapes />\n</Example>\n\n<Example title=\"Adding enhancers\" path=\"button/with-enhancers.tsx\">\n  <WithEnhancer />\n</Example>\n\n<Example title=\"As a dropdown\" path=\"button/dropdown.tsx\">\n  <Dropdown />\n</Example>\n\n<Example title=\"As an anchor\" path=\"button/as-an-anchor.tsx\">\n  <ButtonAsAnAnchor />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing FlexGrid Components and Examples in JavaScript\nDESCRIPTION: This snippet shows the import statements for the FlexGrid component, its examples, and related components used in the documentation page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/flex-grid.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport * as FlexGridExports from \"baseui/flex-grid\";\n\nimport Basic from \"examples/flex-grid/basic.tsx\";\nimport UnequalNarrow from \"examples/flex-grid/unequal-narrow.tsx\";\nimport UnequalWide from \"examples/flex-grid/unequal-wide.tsx\";\nimport Responsive from \"examples/flex-grid/responsive.tsx\";\nimport Missing from \"examples/flex-grid/missing.tsx\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: PinCode Component Example: Code Length\nDESCRIPTION: This snippet provides an example of the PinCode component where the `values` prop expects an array of strings, and the number of inputs rendered adjusts according to the length of the array.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/pin-code.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<Example title=\"Code length\" path=\"pin-code/length.tsx\">\n  <PinCodeLength />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Rendering Notification Component with Overrides in JSX\nDESCRIPTION: This snippet demonstrates how to use the Notification component with custom overrides and a warning message about using useStyletron hook.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/block.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Notification\n  overrides={{ Body: { style: { width: \"auto\" } } }}\n  kind={KIND.warning}\n>\n  We recommend using the <a href=\"/components/use-styletron\">useStyletron</a>{\" \"}\n  hook to apply css styles to your html elements. It allows for simpler patterns\n  with less custom api to learn. It aligns much closer to basic html/css without\n  React and maintains the efficient inline benefits of using the Block\n  component.\n</Notification>\n```\n\n----------------------------------------\n\nTITLE: Importing Pagination Components and Configurations\nDESCRIPTION: Imports necessary components, examples, and configuration for the Pagination component from various modules\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/pagination.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport Controlled from \"examples/pagination/controlled.tsx\";\nimport Uncontrolled from \"examples/pagination/uncontrolled.tsx\";\nimport Labels from \"examples/pagination/labels.tsx\";\nimport Customization from \"examples/pagination/overrides.tsx\";\n\nimport { StatefulPagination } from \"baseui/pagination\";\nimport * as PaginationExports from \"baseui/pagination\";\n\nimport Yard from \"../../components/yard/index\";\nimport paginationYardConfig from \"../../components/yard/config/pagination\";\n```\n\n----------------------------------------\n\nTITLE: Artwork Sizes List Example\nDESCRIPTION: This code snippet demonstrates how to use the `List` component with different artwork sizes using the example component `ArtworkSizes`. The `Example` component likely wraps the `ArtworkSizes` component to provide a title and source code path. This showcases the customization options for list items, specifically relating to artwork.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/list.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Example title=\\\"Artwork sizes\\\" path=\\\"list/artwork-sizes.tsx\\\">\\n  <ArtworkSizes />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Importing Graph Table Example\nDESCRIPTION: This snippet imports the Graph component from the \"examples/table/graph.tsx\" file. This component is a React component that demonstrates how to integrate the BaseWeb table with a graphing library like react-vis to display data visually.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport Graph from \"examples/table/graph.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Skeleton Animation Example - TypeScript\nDESCRIPTION: This snippet demonstrates the Skeleton component's animation capabilities using the SkeletonAnimation example. It provides animated loading visuals.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/skeleton.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<Example title=\"Animation\" path=\"skeleton/animation.tsx\">\n  <SkeletonAnimation />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Using Yard Component for Progress Steps - JSX\nDESCRIPTION: This snippet showcases how to implement the Yard component to display different configurations of progress steps. It receives configuration props and displays the corresponding layout for progress visuals. Expected inputs include placeholder height and configuration settings.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/progress-steps.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Yard placeholderHeight={20} {...progressStepsYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Type Checking in Styled Components with Base Web v7\nDESCRIPTION: Demonstrates the improved type checking capabilities in Base Web v7, where Flow will now detect errors for invalid props and CSS properties within styled components.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v7/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntype PropsT = { $active: boolean };\nconst MyStyledComponent =\n  styled <\n  PropsT >\n  ('div',\n  (props) => {\n    console.log(props.$notReal); // is now a flow error\n    return {\n      backgroundColor: props.$active\n        ? props.$theme.colors.primary400\n        : props.$theme.colors.negative400,\n      notACSSProperty: ':)', // flow will type check for valid css properties as well as values\n    };\n  });\n```\n\n----------------------------------------\n\nTITLE: Import Stateful Radio Example\nDESCRIPTION: This snippet imports the Stateful component from 'examples/radio/stateful.tsx'. This React component likely demonstrates the usage of the `StatefulRadioGroup` component, showcasing an uncontrolled radio group.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/radio.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Stateful from \"examples/radio/stateful.tsx\";\n```\n\n----------------------------------------\n\nTITLE: End Enhancers List Example\nDESCRIPTION: This code snippet demonstrates the usage of the `List` component with end enhancers, leveraging the `Enhancers` example component. The `Example` component likely wraps the `Enhancers` component, providing a title and path. End enhancers are additional elements placed at the end of a list item, providing extra functionality or information.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/list.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Example title=\\\"End enhancers\\\" path=\\\"list/enhancers.tsx\\\">\\n  <Enhancers />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Importing Notification Component from BaseWeb\nDESCRIPTION: Demonstrates how to import the Notification component and its KIND enumeration from BaseWeb's notification module.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/data-table.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Notification, KIND } from \"baseui/notification\";\n```\n\n----------------------------------------\n\nTITLE: PinCode Component Example: Passing ID and Name\nDESCRIPTION: This snippet illustrates how to pass custom `id` and `name` props to the PinCode inputs, ensuring unique IDs per input while sharing a common name.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/pin-code.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<Example title=\"Passing id and name\" path=\"pin-code/id-and-name.tsx\">\n  <PinCodeIdAndName />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Rendering Accordion Examples in Documentation\nDESCRIPTION: This JSX snippet shows how to render multiple Accordion examples with their respective components and source code paths. Each Example component displays a specific usage pattern of the Accordion.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/accordion.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"Custom Accordion\" path=\"accordion/custom.tsx\">\n  <CustomPanel />\n</Example>\n\n<Example title=\"Accordion basic usage\" path=\"accordion/basic.tsx\">\n  <BasicAccordion />\n</Example>\n\n<Example title=\"Accordion custom title\" path=\"accordion/title.tsx\">\n  <CustomTitle />\n</Example>\n\n<Example title=\"Accordion SEO Friendly\" path=\"accordion/renderpanelcontent.tsx\">\n  <AccordionSEO />\n</Example>\n\n<Example\n  title=\"Using a stateful panel component on it's own\"\n  path=\"accordion/stateful-panel.tsx\"\n>\n  <StatefulPanelExample />\n</Example>\n\n<Example title=\"Stateless Accordion\" path=\"accordion/stateless.tsx\">\n  <StatelessAccordion />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Exporting Progress Steps Component - JSX\nDESCRIPTION: This snippet utilizes the Exports component to share the ProgressSteps module from Base UI. It includes relevant title and path properties for documentation and reference purposes, facilitating usage across different parts of the application.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/progress-steps.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Exports\n  component={ProgressStepsExports}\n  title=\"Progress Steps exports\"\n  path=\"baseui/progress-steps\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Banner Examples in React\nDESCRIPTION: These code snippets demonstrate how to render different Banner examples using the Example component. It includes examples for color schemes, artwork integration, and action handling.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/banner.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Example title=\"Color schemes\" path=\"banner/variants.tsx\">\n  <Variants />\n</Example>\n\n<Example title=\"Artwork\" path=\"banner/artwork.tsx\">\n  <Artwork />\n</Example>\n\n<Example title=\"Action\" path=\"banner/action.tsx\">\n  <Action />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Basic Example\nDESCRIPTION: This snippet renders an Example component that displays the basic usage of the Table component. The title is set to \"Table basic usage\", and the path points to the \"table-semantic/basic.tsx\" file. The actual Table component is rendered within the Basic component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-semantic.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Example title=\"Table basic usage\" path=\"table-semantic/basic.tsx\">\n  <Basic />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Modal Components\nDESCRIPTION: This snippet demonstrates the usage of modal components within an Example wrapper, showcasing different scenarios including basic modal, auto focus behavior, sizing, buried interactive elements, and nested modals.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/modal.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Example title=\"Modal With Button Trigger\" path=\"modal/basic.tsx\">\n  <ModalBasic />\n</Example>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<Example title=\"Placing initial focus\" path=\"modal/autofocus.tsx\">\n  <ModalAutoFocus />\n</Example>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<Example title=\"Setting the size of the modal\" path=\"modal/sized.tsx\">\n  <ModalSized />\n</Example>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<Example\n  title=\"Dealing with a buried interactive element\"\n  path=\"modal/buried-interactive-element.tsx\"\n>\n  <ModalBuriedInteractiveElement />\n</Example>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<Example title=\"Adding nested modals\" path=\"modal/nested.tsx\">\n  <ModalNested />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Resizable Textarea Example\nDESCRIPTION: This snippet imports and renders the TextareaResizable component to demonstrate how to make the Base Web Textarea component resizable.  It allows users to resize the textarea within specified boundaries using overrides.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/textarea.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Example title=\\\"Allow the user to resize\\\" path=\\\"textarea/resizable.tsx\\\">\\n  <TextareaResizable />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Importing Table Exports from BaseWeb\nDESCRIPTION: This snippet imports all exports from the baseui/table module. It's used to access the various components and utilities provided by the BaseWeb Table component library for implementing and customizing tables.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as TableExports from \"baseui/table\";\n```\n\n----------------------------------------\n\nTITLE: Importing Step Min Max Slider Example - Typescript\nDESCRIPTION: This snippet imports the `StepMinMax` component from `examples/slider/step-min-max.tsx`.  It showcases how to customize the minimum, maximum, and step values of the slider. This controls the increment and range of selectable values.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/slider.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"import StepMinMax from \\\"examples/slider/step-min-max.tsx\\\";\"\n```\n\n----------------------------------------\n\nTITLE: Inline Notification Circle Example\nDESCRIPTION: This snippet defines an Example component to showcase the usage of NotificationCircle in an inline format, particularly emphasizing the avoidance of icons.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/notification-circle.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Example\n  title=\"Inline notification circle\"\n  path=\"notification-circle/inline.tsx\"\n>\n  <Inline />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Primitives in JavaScript\nDESCRIPTION: This snippet demonstrates how to customize the theme primitives to use blue as the primary color instead of the new default black in Base Web v9.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v9/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTheme, lightThemePrimitives } from \"baseui/themes\";\nimport { colors } from \"baseui/tokens\";\n\nconst myThemePrimitives = {\n  ...lightThemePrimitives,\n  primary: colors.blue400,\n  primary50: colors.blue50,\n  primary100: colors.blue100,\n  primary200: colors.blue200,\n  primary300: colors.blue300,\n  primary400: colors.blue400,\n  primary500: colors.blue500,\n  primary600: colors.blue600,\n  primary700: colors.blue700,\n};\n\nconst myTheme = createTheme(myThemePrimitives);\n\nexport default myTheme;\n```\n\n----------------------------------------\n\nTITLE: Importing Basic Table Example\nDESCRIPTION: This snippet imports the Basic component from the \"examples/table/basic.tsx\" file. This component is likely a React component demonstrating a basic implementation of the BaseWeb table.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Basic from \"examples/table/basic.tsx\";\n```\n\n----------------------------------------\n\nTITLE: PinCode Component Example: Stateful (Uncontrolled) Usage\nDESCRIPTION: This snippet describes the usage of the `StatefulPinCode` version of the component that manages its own state. The default code length is four but can be modified.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/pin-code.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n<Example title=\"Stateful (uncontrolled) usage\" path=\"pin-code/stateful.tsx\">\n  <PinCodeStateful />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Ticks Slider Example - Typescript\nDESCRIPTION: This snippet imports the `CustomTicks` component from `examples/slider/custom-ticks.tsx`. This example demonstrates how to use custom ticks for the slider. This allows for greater flexibility in visual representation of values.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/slider.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"import CustomTicks from \\\"examples/slider/custom-ticks.tsx\\\";\"\n```\n\n----------------------------------------\n\nTITLE: Importing Progress Steps Components - JavaScript/JSX\nDESCRIPTION: This snippet imports necessary components required for utilizing progress steps in the application, including example components and configurations. Dependencies include the Base UI library components as well as local component imports.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/progress-steps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport ProgressStepsDotted from \"examples/progress-steps/dotted\";\nimport ProgressStepsNumbered from \"examples/progress-steps/numbered\";\nimport ProgressStepsHorizontal from \"examples/progress-steps/horizontal\";\n\nimport { ProgressSteps, Step, NumberedStep } from \"baseui/progress-steps\";\nimport * as ProgressStepsExports from \"baseui/progress-steps\";\nimport { Block } from \"baseui/block\";\n\nimport Yard from \"../../components/yard/index\";\nimport progressStepsYardConfig from \"../../components/yard/config/progress-steps\";\nimport progressStepsNumberedYardConfig from \"../../components/yard/config/progress-steps-numbered\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: LayersManager Z-Index Configuration\nDESCRIPTION: Demonstrates setting z-index for LayersManager to manage stacking contexts in complex applications\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/layer.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<LayersManager zIndex={1}>\n  {/* Application content */}\n</LayersManager>\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip Yard with Configuration - JSX/TSX\nDESCRIPTION: This snippet renders a Yard component with tooltip configurations applied. It provides a placeholder for tooltip positioning and is a crucial part of displaying tooltips in the UI effectively.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tooltip.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Yard placeholderHeight={20} {...tooltipYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Rendering File Uploader Examples in React JSX\nDESCRIPTION: These code snippets demonstrate how to render various examples of the File Uploader component, including basic usage, item preview, label and hint, upload restrictions, dynamic loading, and overrides.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/file-uploader.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Example title=\"Basic usage\" path=\"file-uploader/basic.tsx\">\n  <FileUploaderBasic />\n</Example>\n\n<Example title=\"Item preview\" path=\"file-uploader/item-preview.tsx\">\n  <FileUploaderItemPreview />\n</Example>\n\n<Example title=\"Label and hint\" path=\"file-uploader/label-hint.tsx\">\n  <FileUploaderLabelHint />\n</Example>\n\n<Example\n  title=\"Upload restrictions\"\n  path=\"file-uploader/upload-restrictions.tsx\"\n>\n  <FileUploaderUploadRestrictions />\n</Example>\n\n<Example title=\"Dynamic loading\" path=\"file-uploader/dynamic-loading.tsx\">\n  <FileUploaderDynamicLoading />\n</Example>\n\n<Example title=\"Overrides\" path=\"file-uploader/overrides.tsx\">\n  <FileUploaderOverrides />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Textarea States Example\nDESCRIPTION: This snippet imports and renders the TextareaStates component to showcase different states of the Base Web Textarea component (e.g., disabled, error). It allows users to visually understand how the Textarea component appears in various states.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/textarea.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Example title=\\\"States\\\" path=\\\"textarea/states.tsx\\\">\\n  <TextareaStates />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Semantic Yard\nDESCRIPTION: This code snippet renders the Yard component, configured using the tableYardConfig object.  The Yard component is likely a component used for visual testing or showcasing different configurations of the Table Semantic component.  The placeholderHeight prop sets the initial height of the yard.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-semantic.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Yard placeholderHeight={202} {...tableYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Visible Label Example - TSX\nDESCRIPTION: This snippet illustrates how to implement a Progress Bar that includes a visible label, enhancing user experience by providing feedback on progress.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/progress-bar.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Example\n  title=\"Progress bar with Visible Label\"\n  path=\"progress-bar/with-label.tsx\"\n>\n  <WithLabel />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Defining Default Breakpoints for Responsive Layouts in JavaScript\nDESCRIPTION: This snippet shows the default breakpoint values used for responsive layouts with the Block component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/block.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbreakpoints: {\n  small: 320,\n  medium: 600,\n  large: 1136,\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Fixed Width Column Table Example\nDESCRIPTION: This snippet imports the FixedWidthColumn component from the \"examples/table/fixed-width-column.tsx\" file. This React component demonstrates how to define columns with a fixed width within a BaseWeb table.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport FixedWidthColumn from \"examples/table/fixed-width-column.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Mobile Header Components - JavaScript\nDESCRIPTION: This snippet imports various components needed for the mobile header from specific paths, including layout and mobile header components from the baseui library. Dependencies include components like Example, Exports, and others crucial for rendering the mobile header in the application.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/mobile-header.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Exports from \"../../components/exports\";\nimport Layout from \"../../components/layout\";\n\nimport FloatingMobileHeader from \"examples/mobile-header/floating.tsx\";\nimport TextContentMobileHeader from \"examples/mobile-header/text-content.tsx\";\n\nimport { MobileHeader, TYPE } from \"baseui/mobile-header\";\nimport * as MobileHeaderExports from \"baseui/mobile-header\";\n\nimport Yard from \"../../components/yard/index\";\nimport mobileHeaderYardConfig from \"../../components/yard/config/mobile-header\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Export Timepicker Component in BaseWeb\nDESCRIPTION: This snippet is responsible for exporting the Timepicker components so they can be used in different parts of the application. It ensures that the main functionalities of the Timepicker are available throughout the BaseWeb integration. It shows how to structure exports within a file.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/time-picker.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as TimepickerExports from \"baseui/timepicker\";\nimport Exports from \"../../components/exports\";\n\n<Exports\n  component={TimepickerExports}\n  title=\"Timepicker exports\"\n  path=\"baseui/timepicker\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Export Component for Stepper Exports in JSX\nDESCRIPTION: This snippet renders the Exports component, passing in the StepperExports object along with a title and a path. This setup is designed to document or manage exports related to the Stepper component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/stepper.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Exports\n  component={StepperExports}\n  title=\"Stepper exports\"\n  path=\"baseui/stepper\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Example Components in JavaScript\nDESCRIPTION: This snippet demonstrates how to render example components using the Example component structure, allowing users to view basic usage and variations of header navigation including search functionality.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/header-navigation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Example\ntitle=\"Header navigation basic usage\"\npath=\"header-navigation/basic.tsx\"\n>\n<BasicHeader />\n</Example>\n\n<Example\ntitle=\"Header navigation with search\"\npath=\"header-navigation/with-search.tsx\"\n>\n<WithSearch />\n</Example>\n\n```\n\n----------------------------------------\n\nTITLE: Auto Size Rows Skeleton Example - TypeScript\nDESCRIPTION: This snippet provides an example of the Skeleton component that automatically adjusts its rows to fill the container. It uses the Example wrapper to present this functionality.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/skeleton.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<Example title=\"AutoSize Rows\" path=\"skeleton/auto-size-rows.tsx\">\n  <SkeletonAutoSizeRows />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Rendering Pseudo Separators Breadcrumbs Example in TSX\nDESCRIPTION: This snippet renders an example of Breadcrumbs with pseudo separators. It uses the Example component to display the PseudoBreadcrumbs component with a title and file path.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/breadcrumbs.mdx#2025-04-21_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\n<Example\n  title=\"Breadcrumbs with pseudo separators\"\n  path=\"breadcrumbs/pseudo.tsx\"\n>\n  <PseudoBreadcrumbs />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Textarea Sizes Example\nDESCRIPTION: This snippet imports and renders the TextareaSizes component to demonstrate different sizes of the Base Web Textarea component. It allows the user to see the different size configurations and how they affect the layout.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/textarea.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Example title=\\\"Sizes\\\" path=\\\"textarea/sizes.tsx\\\">\\n  <TextareaSizes />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Import Basic Radio Example\nDESCRIPTION: This snippet imports the Basic component from the 'examples/radio/basic.tsx' file. This component is likely a React component that demonstrates a basic usage of the Radio component. It's used within an Example component to showcase a specific scenario.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/radio.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Basic from \"examples/radio/basic.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Tooltip Example with Stateful Complex Content - JSX\nDESCRIPTION: This snippet provides an example of a tooltip utilizing complex content. This is useful for scenarios where the tooltip requires more than basic information to be displayed.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tooltip.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Example\n  title=\"Tooltip stateful example with complex content\"\n  path=\"tooltip/stateful-complex-content.tsx\"\n>\n  <StatefulComplexContent />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Exporting Progress Bar Component - TSX\nDESCRIPTION: This snippet shows how to export the Progress Bar component from Base Web for use elsewhere in the application, enabling modular design.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/progress-bar.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Exports\n  component={ProgressBarExports}\n  title=\"Progress Bar exports\"\n  path=\"baseui/progress-bar\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Empty State and Loading Components - TypeScript\nDESCRIPTION: This snippet imports 'EmptyState' and 'Loading' components defined in TypeScript. These components are intended to render messages indicating the absence of content or a loading state in the UI.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/empty-state.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport EmptyState from \"examples/empty-state/empty-state.tsx\";\nimport Loading from \"examples/empty-state/loading.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Horizontal Scroll Table Example\nDESCRIPTION: This snippet imports the HorizontalScroll component from the \"examples/table/horizontal-scroll.tsx\" file. This React component demonstrates how to implement horizontal scrolling within a BaseWeb table, useful for tables with many columns.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport HorizontalScroll from \"examples/table/horizontal-scroll.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Yard for Mobile Header Example - JSX\nDESCRIPTION: This snippet is responsible for rendering the Yard component which employs the mobile header configuration. It visually illustrates the mobile header positioned below the status bar in the user interface. Expected parameters include placeholder height and configuration properties.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/mobile-header.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Yard placeholderHeight={52} {...mobileHeaderYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Notification Circle\nDESCRIPTION: This snippet imports necessary components and configurations required for the NotificationCircle badge from various paths, facilitating its usage within the layout.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/notification-circle.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport { NotificationCircle } from \"baseui/badge\";\nimport * as NotificationCircleExports from \"baseui/badge\";\n\nimport Yard from \"../../components/yard/index\";\nimport notificationCircleYardConfig from \"../../components/yard/config/notification-circle\";\n\nimport Inline from \"examples/notification-circle/inline.tsx\";\nimport Offset from \"examples/notification-circle/offset.tsx\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing Layer Components in BaseWeb\nDESCRIPTION: Demonstrates importing layer-related components and examples for UI layer management\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/layer.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport * as LayerExports from \"baseui/layer\";\n\nimport LayerBasic from \"examples/layer/basic.tsx\";\nimport LayerZIndex from \"examples/layer/layer-z-index.tsx\";\nimport TetherBasic from \"examples/layer/basic-tether.tsx\";\n```\n\n----------------------------------------\n\nTITLE: PinCode Component Example: Autofocus\nDESCRIPTION: This snippet demonstrates how to set the `autoFocus` prop to true for the PinCode component, ensuring the first input is focused when the component mounts.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/pin-code.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<Example title=\"Autofocus\" path=\"pin-code/autofocus.tsx\">\n  <PinCodeAutofocus />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Rendering Datepicker Component with Yard Configuration\nDESCRIPTION: This code snippet demonstrates how to render the Datepicker component using the Yard configuration. It sets up the playground for the Datepicker with specific placeholder height.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/datepicker.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Yard placeholderHeight={48} {...datepickerConfig} />\n```\n\n----------------------------------------\n\nTITLE: Importing Customization Slider Example - Typescript\nDESCRIPTION: This snippet imports the `Customization` component from `examples/slider/overrides.tsx`. It shows how to customize the appearance of the slider using overrides. This allows for complete control over the slider's visual style.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/slider.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n\"import Customization from \\\"examples/slider/overrides.tsx\\\";\"\n```\n\n----------------------------------------\n\nTITLE: Rating with Stars Example\nDESCRIPTION: This example demonstrates the usage of the Star rating component within the BaseWeb framework. It renders a standard star rating UI element for user interaction.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/rating.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example title=\\\"Rating with stars\\\" path=\\\"rating/star.tsx\\\">\\n  <Star />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Focus and InputRef Example in JSX\nDESCRIPTION: This snippet renders an example of the Combobox component demonstrating focus handling and input reference. It uses the Focus component to showcase these features.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/combobox.mdx#2025-04-21_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<Example title=\"Focus and inputRef\" path=\"combobox/focus.tsx\">\n  <Focus />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Grid Behavior Configuration - React\nDESCRIPTION: This snippet shows how to configure the grid's behavior as either fixed or fluid using the behavior prop, controlling its maximum width and alignment within the parent container.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/layout-grid.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Behavior\" path=\"layout-grid/behavior.tsx\">\n  <BehaviorExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag and Drop Configuration in JSX\nDESCRIPTION: This snippet sets up a Yard component with a placeholder height and drag-and-drop configuration. Dependency: dndListYardConfig. It configures the list behavior based on user interactions.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/dnd-list.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Yard placeholderHeight={208} {...dndListYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Importing Example and Layout Components - JavaScript\nDESCRIPTION: This snippet imports 'Example' and 'Layout' components from the specified paths. It serves as the foundation for rendering UI elements in the application, focusing on structuring the layout.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/empty-state.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Link Component with Yard Configuration\nDESCRIPTION: Renders the Link component using Yard configuration with a placeholder height of 20 pixels\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/link.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Yard placeholderHeight={20} {...linkConfig} />\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton and Related Components - TypeScript\nDESCRIPTION: This snippet imports necessary components and modules for using the Skeleton component in a BaseWeb application. It includes imports for Skeleton from BaseWeb's skeleton package and example skeletons for demonstration purposes.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/skeleton.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport { Skeleton } from \"baseui/skeleton\";\nimport * as SkeletonExports from \"baseui/skeleton\";\n\nimport SkeletonBasic from \"examples/skeleton/basic.tsx\";\nimport SkeletonAutoSizeRows from \"examples/skeleton/auto-size-rows.tsx\";\nimport SkeletonCircle from \"examples/skeleton/circle.tsx\";\nimport SkeletonAnimation from \"examples/skeleton/animation.tsx\";\nimport SkeletonSubElements from \"examples/skeleton/subElements.tsx\";\n\nimport Yard from \"../../components/yard/index\";\nimport skeletonYardConfig from \"../../components/yard/config/skeleton\";\n```\n\n----------------------------------------\n\nTITLE: Importing List Exports from BaseWeb List\nDESCRIPTION: This code snippet shows how to import all exports from the `baseui/list` module as `ListExports`.  This is useful for accessing all available components and utilities related to the list functionality within BaseWeb.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/list.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"import * as ListExports from \\\"baseui/list\\\";\"\n```\n\n----------------------------------------\n\nTITLE: Rating with Emoticons Example\nDESCRIPTION: This example illustrates the implementation of an Emoticon rating component within BaseWeb. It renders an emoticon-based rating UI, allowing users to express their sentiment.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/rating.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example title=\\\"Rating with emoticons\\\" path=\\\"rating/emoticon.tsx\\\">\\n  <Emoticon />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Custom with Merged Cells Example\nDESCRIPTION: This snippet renders the Example component for demonstrating merged cells in a table.  The title is set to \"Table custom with merged cells\", and the path is \"table-semantic/span.tsx\".  The <Span /> component is responsible for rendering the table with the merged cell example.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-semantic.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n<Example title=\"Table custom with merged cells\" path=\"table-semantic/span.tsx\">\n  <Span />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Setting ButtonGroup Kind in JSX\nDESCRIPTION: This snippet shows how to set the kind prop for ButtonGroup to use tertiary buttons instead of the new default secondary in Base Web v9.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v9/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroup kind={KIND.tertiary} />\n```\n\n----------------------------------------\n\nTITLE: Floating Marker with Two Labels in TypeScript\nDESCRIPTION: This example shows a floating marker with two lines of text using the secondaryLabel prop. Useful for providing additional context with markers.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/floating-marker.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<FloatingMarkerContainer>\\n  <SecondaryLabel />\\n</FloatingMarkerContainer>\n```\n\n----------------------------------------\n\nTITLE: Importing Components from BaseUI\nDESCRIPTION: Imports necessary components and example files for spinner functionality within the BaseUI framework. This snippet utilizes several imports from the baseui library, as well as local components needed for layout and examples.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/spinner.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Notification, KIND } from \"baseui/notification\";\nimport { StyledLink } from \"baseui/link\";\n\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport SpinnerBasic from \"examples/spinner/basic.tsx\";\nimport SpinnerSize from \"examples/spinner/size.tsx\";\nimport SpinnerCustom from \"examples/spinner/custom.tsx\";\nimport SpinnerSpan from \"examples/spinner/span.tsx\";\n\nimport { Spinner } from \"baseui/spinner\";\nimport * as SpinnerExports from \"baseui/spinner\";\n\nimport Yard from \"../../components/yard/index\";\nimport spinnerYardConfig from \"../../components/yard/config/spinner\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing Basic Slider Example - Typescript\nDESCRIPTION: This snippet imports the `Basic` component from the `examples/slider/basic.tsx` file. This component demonstrates a basic implementation of the slider component. This helps to showcase the fundamental usage of the slider.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/slider.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"import Basic from \\\"examples/slider/basic.tsx\\\";\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Breadcrumbs Exports in TSX\nDESCRIPTION: This snippet renders the exports of the Breadcrumbs component using the Exports component. It displays all exported members from the Breadcrumbs module with a title and file path.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/breadcrumbs.mdx#2025-04-21_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\n<Exports\n  component={BreadcrumbsExports}\n  title=\"Breadcrumbs exports\"\n  path=\"baseui/breadcrumbs\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Phone Input Components in React\nDESCRIPTION: Demonstrates importing StatefulPhoneInput and COUNTRIES object from baseui phone input module, along with additional example components and utilities\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/phone-input.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StatefulPhoneInput, COUNTRIES } from \"baseui/phone-input/index\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Datepicker Exports Documentation\nDESCRIPTION: This code snippet demonstrates how to render the exports documentation for the Datepicker component. It uses the Exports component to display all exported items from the Datepicker module.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/datepicker.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Exports\n  component={DatepickerExports}\n  title=\"Datepicker exports\"\n  path=\"baseui/datepicker\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem and ListItemLabel from BaseWeb List\nDESCRIPTION: This code snippet demonstrates how to import the `ListItem` and `ListItemLabel` components from the `baseui/list` module. These components are essential for creating lists within a BaseWeb application.  They allow for structured content within a list.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/list.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"import { ListItem, ListItemLabel } from \\\"baseui/list\\\";\"\n```\n\n----------------------------------------\n\nTITLE: Importing Component Dependencies in JavaScript\nDESCRIPTION: Imports several components necessary for displaying icons, including example components and specific icon configurations. Essential for integrating and displaying icon examples within the BaseWeb project, with dependencies on both example and baseui components.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/icon.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport Basic from \"examples/icon/basic.tsx\";\nimport List from \"examples/icon/list.tsx\";\nimport Button from \"examples/icon/button.tsx\";\n\nimport ArrowRight from \"baseui/icon/arrow-right\";\nimport * as IconExports from \"baseui/icon\";\n\nimport Yard from \"../../components/yard/index\";\nimport iconConfig from \"../../components/yard/config/icon\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing All Dialog Exports from Base Web\nDESCRIPTION: Demonstrates how to import all exports from the dialog module using the wildcard import syntax.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/dialog.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as DialogExports from \"baseui/dialog\";\n```\n\n----------------------------------------\n\nTITLE: Rendering PinCode Component with Config\nDESCRIPTION: This snippet shows how to render the Yard component with the PinCode component settings. It demonstrates the use of the placeholder height and configuration for the pin code inputs.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/pin-code.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<Yard placeholderHeight={48} {...pinYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Small Marker with No Anchor in TypeScript\nDESCRIPTION: Illustrates the usage of a small floating marker without an anchor, suitable for lightweight and less intrusive annotations on a map.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/floating-marker.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<FloatingMarkerContainer>\\n  <SmallNoAnchor />\\n</FloatingMarkerContainer>\n```\n\n----------------------------------------\n\nTITLE: Importing Form Control Components\nDESCRIPTION: This code snippet imports necessary components and modules from the baseui library for use with the Form Control component. It imports FormControl and StatefulInput from 'baseui/input'. It also imports all exports from 'baseui/form-control' into the FormControlExports namespace.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/form-control.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormControl } from \"baseui/form-control\";\nimport { StatefulInput } from \"baseui/input\";\nimport * as FormControlExports from \"baseui/form-control\";\n```\n\n----------------------------------------\n\nTITLE: Consumer Location Puck Without Heading Indicator Example - React\nDESCRIPTION: This snippet shows how to use the ConsumerLocationPuckNoHeading component, which is designed for scenarios where no heading information is available, tailored for desktop applications.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/location-puck.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Example\n  title=\"Consumer location puck with no heading indicator\"\n  path=\"location-puck/consumer-no-heading.tsx\"\n>\n  <FloatingMarkerContainer>\n    <ConsumerLocationPuckNoHeading />\n  </FloatingMarkerContainer>\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Yard Component for Tabs Motion - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Yard component with a specific configuration for Tabs Motion in JavaScript. It configures the layout and styles used in the documentation examples to visualize different functionalities of the Tabs component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tabs-motion.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Yard\n  placeholderHeight={100}\n  compilerStyles={{ width: \"100%\", marginBottom: \"1rem\" }}\n  {...tabsYardConfig}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Tile Examples\nDESCRIPTION: This code snippet imports various Tile component examples, each demonstrating a specific use case, such as single select, multi-select, action tiles, and alignment configurations. These examples are used within the documentation to showcase the Tile component's versatility.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tile.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"import SingleSelect from \\\"examples/tile/single-select.tsx\\\";\nimport SelectionNoTrailingContent from \\\"examples/tile/selection-no-trailing-content.tsx\\\";\nimport MultiSelectBatch from \\\"examples/tile/multi-select-batch.tsx\\\";\nimport MultiSelectLive from \\\"examples/tile/multi-select-live.tsx\\\";\nimport Action from \\\"examples/tile/action.tsx\\\";\nimport Alignment from \\\"examples/tile/alignment.tsx\\\";\"\n```\n\n----------------------------------------\n\nTITLE: Importing AspectRatioBox Components and Examples\nDESCRIPTION: This code imports required components for the AspectRatioBox documentation page, including layout components, examples, and exports from the Base Web library.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/aspect-ratio-box.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport * as AspectRatioBoxExports from \"baseui/aspect-ratio-box\";\n\nimport AspectRatioBoxBasic from \"examples/aspect-ratio-box/basic.tsx\";\nimport AspectRatioBoxCalendar from \"examples/aspect-ratio-box/calendar.tsx\";\nimport AspectRatioBoxImage from \"examples/aspect-ratio-box/image.tsx\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Rendering Combobox Exports in JSX\nDESCRIPTION: This snippet renders the exports of the Combobox component using the Exports component. It displays all the exported items from the baseui/combobox module.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/combobox.mdx#2025-04-21_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n<Exports\n  component={ComboboxExports}\n  title=\"Combobox exports\"\n  path=\"baseui/combobox\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering File Uploader Exports Component in React JSX\nDESCRIPTION: This code snippet renders the Exports component for the File Uploader, displaying all the exports from the baseui/file-uploader module.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/file-uploader.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Exports\n  component={FileUploaderExports}\n  title=\"File uploader exports\"\n  path=\"baseui/file-uploader\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and using Badge component in React\nDESCRIPTION: Shows how to import the Badge component from Base Web UI library and other related import statements for the documentation page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/badge.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport { Badge } from \"baseui/badge\";\nimport * as BadgeExports from \"baseui/badge\";\n\nimport Yard from \"../../components/yard/index\";\nimport badgeYardConfig from \"../../components/yard/config/badge\";\n\nimport PrimaryInline from \"examples/badge/primary-inline.tsx\";\nimport SecondaryInline from \"examples/badge/secondary-inline.tsx\";\nimport Offset from \"examples/badge/offset.tsx\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Import Customization Radio Example\nDESCRIPTION: This snippet imports the Customization component from 'examples/radio/overrides.tsx'. This React component is designed to show how to override default styles or behaviors of the Radio component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/radio.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport Customization from \"examples/radio/overrides.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Bottom Navigation Overflow Example\nDESCRIPTION: This snippet showcases the Bottom Navigation component's overflow behavior when more than five tabs are provided. It utilizes a separate `Overflow` component for rendering the example, which is imported from `examples/bottom-navigation/overflow.tsx`.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/bottom-navigation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"import Overflow from \\\"examples/bottom-navigation/overflow.tsx\\\";\n\n<Example\n  title=\\\"Bottom Navigation Overflow example\\\"\n  path=\\\"bottom-navigation/overflow.tsx\\\"\n>\n  <Overflow />\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Modal Components\nDESCRIPTION: This snippet exports the modal components from the BaseWeb modal library for external usage, allowing other components to access modal functionality.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/modal.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Exports component={ModalExports} title=\"Modal exports\" path=\"baseui/modal\" />\n```\n\n----------------------------------------\n\nTITLE: Running Codemods for Base Web v8 Migration\nDESCRIPTION: This snippet provides instructions on how to run a codemod to automate the migration from the v7 `styled` API to the v8 `createThemedStyled` API. It explains the command-line arguments and options for performing the codemod, including dry-run and print output options.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v8/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nnpx @uber-web-ui/baseui-codemods --mod=v8Types --dir=<path_to_code>\n\n```\n\n----------------------------------------\n\nTITLE: Select Uncontrolled Example\nDESCRIPTION: This example demonstrates the uncontrolled usage of the Select component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/select.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example title=\\\"Select uncontrolled example\\\" path=\\\"select/uncontrolled.tsx\\\">\\n  <SelectUncontrolled />\\n</Example>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Icon Exports in JSX\nDESCRIPTION: Utilizes the Exports component to display available icon components and exports from the baseui package. It acts as a showcase of all icons that can be imported and used within the BaseWeb application.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/icon.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Exports component={IconExports} title=\"Icon exports\" path=\"baseui/icon\" />\n```\n\n----------------------------------------\n\nTITLE: Nested Table Example\nDESCRIPTION: This snippet provides an example of a nested table implementation using the Table-Grid component. It showcases how to integrate additional data structures within a table format in a React application.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-grid.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Nested table\" path=\"table-grid/nested.tsx\">\n  <Nested />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: PinCode Component Example: Changing the Placeholder\nDESCRIPTION: This snippet illustrates how to change the default placeholder of the PinCode inputs and how it behaves when inputs receive focus.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/pin-code.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<Example title=\"Changing the placeholder\" path=\"pin-code/placeholder.tsx\">\n  <PinCodePlaceholder />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Defining Yard Component with Location Puck Configuration - React\nDESCRIPTION: This snippet displays the Yard component configured to represent the user's current location using the Location Puck configuration. It sets padding and alignment styles for the layout.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/location-puck.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default Layout;\n\n<Yard\n  {...locationPuckYardConfig}\n  compilerStyles={{\n    paddingTop: \"48px\",\n    paddingBottom: \"48px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting Spinner API\nDESCRIPTION: Exports the spinner component for use in other parts of the application through the Exports component, allowing for easy access to Spinner related functionalities.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/spinner.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Exports\n  component={SpinnerExports}\n  title=\"Spinner exports\"\n  path=\"baseui/spinner\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Datepicker Examples and Dependencies in React\nDESCRIPTION: This code snippet shows the import statements for various Datepicker examples and related components. It sets up the necessary dependencies for the documentation page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/datepicker.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport DatepickerBasic from \"examples/datepicker/basic.tsx\";\nimport DatepickerInPopover from \"examples/datepicker/in-popover.tsx\";\nimport DatepickerQuickSelect from \"examples/datepicker/quick-select.tsx\";\nimport DatepickerTimeSelect from \"examples/datepicker/calendar-time-select.tsx\";\nimport DatepickerMultipleMonths from \"examples/datepicker/calendar-multiple-months.tsx\";\nimport DatepickerMultipleMonthsWithLabel from \"examples/datepicker/calendar-multiple-months-with-label.tsx\";\nimport RangeDatepickerSeparateInputs from \"examples/datepicker/range-picker-with-separate-inputs.tsx\";\nimport DatepickerI18n from \"examples/datepicker/i18n.tsx\";\nimport DatepickerWithOverrides from \"examples/datepicker/with-overrides.tsx\";\nimport ComposedRangePickers from \"examples/datepicker/composed-range-pickers.tsx\";\nimport ComposedSinglePickers from \"examples/datepicker/composed-single-pickers.tsx\";\nimport DatepickersColorStates from \"examples/datepicker/datepickers-color-states.tsx\";\nimport DatepickerTimezone from \"examples/datepicker/datepicker-with-timezone.tsx\";\nimport NestedOverride from \"examples/datepicker/nested-override.tsx\";\nimport NestedOverridePropMerge from \"examples/datepicker/with-callback-overrides.tsx\";\nimport DatepickerWithMask from \"examples/datepicker/with-mask.tsx\";\nimport DatepickerNullMask from \"examples/datepicker/null-mask.tsx\";\n\nimport { StatefulCalendar } from \"baseui/datepicker\";\nimport * as DatepickerExports from \"baseui/datepicker\";\n\nimport Yard from \"../../components/yard/index\";\nimport datepickerConfig from \"../../components/yard/config/datepicker\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Assets for Visual Regression Testing Blog\nDESCRIPTION: Imports various components, metadata, and image assets needed for a blog post about visual regression testing. The code includes imports from local components, external libraries like react-compare-image, and image assets.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/visual-regression-testing/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport metadata from \"./metadata.json\";\nimport Layout from \"../../../components/layout\";\nimport { BlogImage, Meta, Caption } from \"../../../components/blog\";\nimport ReactCompareImage from \"react-compare-image\";\nimport ExampleSnapshotPNG from \"./examplesnapshot.png\";\nimport SwipeGIF from \"./swipe.gif\";\nimport ComparisonPNG from \"./comparison.png\";\nimport LeftPNG from \"./left.png\";\nimport RightPNG from \"./right.png\";\nimport MobileModalPNG from \"./mobilemodal.png\";\nimport ChangelogPNG from \"./changelog.png\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Semantic Exports\nDESCRIPTION: This snippet renders the Exports component, which likely displays the exports of the Table Semantic component. The `component` prop is set to `TableSemanticExports`, the title is \"Table Semantic exports\", and the path is \"baseui/table-semantic\".\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-semantic.mdx#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n<Exports\n  component={TableSemanticExports}\n  title=\"Table Semantic exports\"\n  path=\"baseui/table-semantic\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Skeleton Example Usage - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the SkeletonBasic example component. It utilizes the Example wrapper to provide a title and path for the example displayed on the page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/skeleton.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<Example title=\"Basic usage\" path=\"skeleton/basic.tsx\">\n  <SkeletonBasic />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Segmented Control Components in JavaScript\nDESCRIPTION: This snippet imports components necessary for demonstrating and exporting segmented control examples in BaseWeb. It sets up layout and example integrations, importing essential configuration files to render segmented control components effectively. This includes both basic and advanced usage examples such as disabled states and badges.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/segmented-control.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport Basic from \"examples/segmented-control/basic.tsx\";\nimport Badge from \"examples/segmented-control/badge.tsx\";\nimport BadgeHint from \"examples/segmented-control/badge-hint.tsx\";\nimport Disabled from \"examples/segmented-control/disabled.tsx\";\n\nimport * as SegmentedControlExports from \"baseui/segmented-control\";\n\nimport Yard from \"../../components/yard/index\";\nimport segmentedControlYardConfig from \"../../components/yard/config/segmented-control\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Rendering Table with Empty Message Example\nDESCRIPTION: This snippet renders an Example component showcasing a Table with an empty message. The title is \"Table with empty message\", and the path is \"table-semantic/empty-message.tsx\". The EmptyMessage component handles the display of a message when the table has no data.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-semantic.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<Example\n  title=\"Table with empty message\"\n  path=\"table-semantic/empty-message.tsx\"\n>\n  <EmptyMessage />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Shrink Prop Handling in Grid - React\nDESCRIPTION: This snippet demonstrates how to effectively manage cell width and layout behavior using the shrink prop in conjunction with skip, ensuring proper element alignment.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/layout-grid.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Shrink\" path=\"layout-grid/skip-shrink.tsx\">\n  <SkipShrinkExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Providing Icon Usage Examples in JSX\nDESCRIPTION: Supplies examples of how icons are utilized in various scenarios, such as basic usage, listing available icons, and incorporating them into buttons. Each example is wrapped in the Example component, which renders the corresponding component based on the specified path.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/icon.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Example title=\"Icon basic usage\" path=\"icon/basic.tsx\">\n  <Basic />\n</Example>\n\n<Example title=\"Available icons\" path=\"icon/list.tsx\">\n  <List />\n</Example>\n\n<Example title=\"Icon in a button\" path=\"icon/button.tsx\">\n  <Button />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Exports Documentation\nDESCRIPTION: This snippet shows how to render the exports documentation for the Button component using the Exports component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/button.mdx#2025-04-21_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<Exports\n  component={ButtonExports}\n  title=\"Button exports\"\n  path=\"baseui/button\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Snackbar Example for Action Button in React\nDESCRIPTION: This snippet demonstrates adding an action button within the Snackbar for user interactions. The `ActionButtonUsage` component provides examples of common actions like canceling or retrying.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/snackbar.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"Action button usage\" path=\"snackbar/action-button-usage.tsx\">\n  <ActionButtonUsage />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Customizing Spinner Styles\nDESCRIPTION: Demonstrates how to customize spinner styles by changing the underlying element type and modifying its appearance properties using ‘withStyle’. This allows for greater flexibility in how the spinner is displayed in the application.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/spinner.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"Customizing\" path=\"spinner/custom.tsx\">\n  <SpinnerCustom />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Examples and Components\nDESCRIPTION: Importing various examples of Checkbox usage and related components from Base Web and local files.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/checkbox.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport Basic from \"examples/checkbox/basic-controlled.tsx\";\nimport Uncontrolled from \"examples/checkbox/basic-uncontrolled\";\nimport Multiline from \"examples/checkbox/multiline.tsx\";\nimport Error from \"examples/checkbox/error.tsx\";\nimport Indeterminate from \"examples/checkbox/indeterminate.tsx\";\nimport Disabled from \"examples/checkbox/disabled.tsx\";\nimport Alignment from \"examples/checkbox/alignment.tsx\";\nimport Customization from \"examples/checkbox/overrides.tsx\";\nimport ComponentOverrides from \"examples/checkbox/component-overrides.tsx\";\nimport Focus from \"examples/checkbox/focus.tsx\";\nimport Toggle from \"examples/checkbox/toggle.tsx\";\n\nimport { Block } from \"baseui/block\";\nimport { StatefulCheckbox, STYLE_TYPE } from \"baseui/checkbox\";\nimport * as CheckboxExports from \"baseui/checkbox\";\n\nimport Yard from \"../../components/yard/index\";\nimport checkboxYardConfig from \"../../components/yard/config/checkbox\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing Base Web Phone Input Dependencies\nDESCRIPTION: Module imports for Base Web phone input component implementation including layout, blog components, and stateful UI components.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/phone-input/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Layout from \"../../../components/layout\";\nimport { BlogImage, Meta, Caption } from \"../../../components/blog\";\nimport { Block } from \"baseui/block\";\nimport { StatefulInput } from \"baseui/input\";\nimport { StatefulSelect } from \"baseui/select\";\nimport { StatefulPaymentCard } from \"baseui/payment-card\";\nimport { StatefulPhoneInput } from \"baseui/phone-input\";\nimport metadata from \"./metadata.json\";\n\nimport idealPNG from \"./ideal.png\";\nimport keyboardPNG from \"./keyboard.png\";\nimport mappingPNG from \"./mapping.png\";\nimport patternsPNG from \"./patterns.png\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Tabs Component for SEO Optimization - React\nDESCRIPTION: This code snippet demonstrates the usage of the StatefulTabs and Tab components from the baseui library to create tabs that are optimized for SEO. The renderAll property ensures that all tab content is server-side rendered to be crawlable by search engines.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/seo.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from \"react\";\nimport { StatefulTabs, Tab } from \"baseui/tabs\";\nexport default () => (\n  <StatefulTabs initialState={{ activeKey: \"0\" }} renderAll>\n    <Tab title=\"Tab Link 1\">\n      <p>Tab 1 content</p>\n    </Tab>\n    <Tab title=\"Tab Link 2\">\n      <p>Tab 2 content</p>\n    </Tab>\n    <Tab title=\"Tab Link 3\">\n      <p>Tab 3 content</p>\n    </Tab>\n  </StatefulTabs>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering TableGrid with Accessible Cell Navigation Example\nDESCRIPTION: JSX code that renders a TableGrid example demonstrating the custom cell navigation implementation that makes non-semantic table components accessible via keyboard navigation.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/screen-reader-improvements/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"TableGrid\" path=\"table-grid/cell-navigation.js\">\n  <CellNavigation />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing Disabled Slider Example - Typescript\nDESCRIPTION: This snippet imports the `Disabled` component from `examples/slider/disabled.tsx`. It is used to demonstrate the appearance and behavior of a disabled slider. This allows users to see how the slider behaves when it's not interactive.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/slider.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"import Disabled from \\\"examples/slider/disabled.tsx\\\";\"\n```\n\n----------------------------------------\n\nTITLE: Importing Stepper and Layout Components in JavaScript\nDESCRIPTION: This snippet imports the Layout component, the Stepper component along with its exports from the BaseWeb library, and configurations for the Stepper from local directories. These imports are essential for setting up the Stepper component within a layout.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/stepper.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport { Stepper } from \"baseui/stepper\";\nimport * as StepperExports from \"baseui/stepper\";\n\nimport Yard from \"../../components/yard/index\";\nimport stepperYardConfig from \"../../components/yard/config/stepper\";\n```\n\n----------------------------------------\n\nTITLE: Import Disabled Radio Example\nDESCRIPTION: This snippet imports the Disabled component from 'examples/radio/disabled.tsx'. This React component demonstrates the radio button's appearance and functionality when disabled.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/radio.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport Disabled from \"examples/radio/disabled.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering the HintDot Component - JSX\nDESCRIPTION: This snippet demonstrates the usage of the HintDot component within the Yard layout, applying the configuration for height and properties. It provides visual indication of new items.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/hint-dot.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Yard placeholderHeight={34} {...hintDotYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Rounded Progress Bar Example - TSX\nDESCRIPTION: This snippet demonstrates the implementation of a rounded version of the Progress Bar, which offers a visually distinct style option for progress displays.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/progress-bar.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Basic Usage\" path=\"progress-bar/rounded.tsx\">\n  <ProgressBarRounded />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Displaying AppNavBar Exports\nDESCRIPTION: This JSX snippet renders the Exports component to display all exported items from the AppNavBar module.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/app-nav-bar.mdx#2025-04-21_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<Exports\n  component={AppNavBarExports}\n  title=\"Navigation bar exports\"\n  path=\"baseui/app-nav-bar\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme for Rounded Corners - diff\nDESCRIPTION: This snippet shows how to maintain rounded corners in components using theme variables, specifying degrees of roundness for buttons, inputs, popovers, and surfaces. It introduces properties like 'buttonBorderRadius' and 'inputBorderRadius' specifically for individual components.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v7/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n  const theme = {\\n    borders: {\\n      // use these values to preserve rounded corners look\\n      useRoundedCorners: true,\\n+     buttonBorderRadius: '4px',\\n+     inputBorderRadius: '4px',\\n+     popoverBorderRadius: '8px',\\n+     surfaceBorderRadius: '4px',\\n    }\\n  };\n```\n\n----------------------------------------\n\nTITLE: Exports of PinCode Component\nDESCRIPTION: This snippet shows the export of the PinCode component and its associated functionalities from the baseui library.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/pin-code.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n<Exports\n  component={PinCodeExports}\n  title=\"Pin Code exports\"\n  path=\"baseui/pin-code\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Breadcrumbs Example in TSX\nDESCRIPTION: This snippet renders an example of basic Breadcrumbs usage. It uses the Example component to display the BasicBreadcrumbs component with a title and file path.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/breadcrumbs.mdx#2025-04-21_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\n<Example title=\"Breadcrumbs basic usage\" path=\"breadcrumbs/basic.tsx\">\n  <BasicBreadcrumbs />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Configuration Object for Snapshot Tests (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates the configuration object used to modify the behavior of specific snapshot tests. It includes scenarios with custom interactions, where each interaction has a `name` and a `behavior` function. The `behavior` function utilizes Playwright Page instance to arrange the UI into the desired state for taking a snapshot.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/visual-regression-testing/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  \"input-password\": {\n    interactions: [\n      {\n        name: \"togglesMask\",\n        behavior: async (page) => {\n          const toggleSelector = `[data-e2e=\"mask-toggle\"]`;\n          await page.$(toggleSelector);\n          await page.click(toggleSelector);\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Base Components Page in React\nDESCRIPTION: This code snippet imports necessary components and data, then exports a Layout component. It renders a page with metadata, instructions for accessing Base Components, and a button linking to Uber's Figma Community.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-figma-community/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Layout from \"../../../components/layout\";\nimport { Meta } from \"../../../components/blog\";\nimport metadata from \"./metadata.json\";\nimport { Button } from \"baseui/button\";\n\nexport default Layout;\n\n<Meta data={metadata} />\n\n<Button $as=\"a\" href=\"https://www.figma.com/@uber\" target=\"_blank\">\n  Go to Figma Community\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Rendering Browser Support Table with Base Web\nDESCRIPTION: Creates a table displaying supported browsers and their minimum version requirements using Base Web's Table component\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/discover-more/supported-platforms.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Table\n  columns={[\"Browser\", \"Supported version\"]}\n  data={[\n    [\"Chrome\", \">= 58\"],\n    [\"Firefox\", \"ESR\"],\n    [\"Safari\", \">= 10.1\"],\n    [\"Edge\", \">= 16\"],\n    [\"iOS Safari\", \">= 10.3\"],\n    [\"Android\", \">= 4.4\"],\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Bottom Navigation Exports\nDESCRIPTION: This snippet displays the exports from the `baseui/bottom-navigation` module. It uses the `Exports` component to present the exported members, providing a clear overview of the component's API. It imports `BottomNavigation` from `baseui/bottom-navigation` and assigns all exports from that module to `BottomNavigationExports`.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/bottom-navigation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"import { BottomNavigation } from \\\"baseui/bottom-navigation\\\";\nimport * as BottomNavigationExports from \\\"baseui/bottom-navigation\\\";\n\n<Exports\n  component={BottomNavigationExports}\n  title=\\\"Bottom Navigation exports\\\"\n  path=\\\"baseui/bottom-navigation\\\"\n/>\"\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Base Web Map Markers Page\nDESCRIPTION: Imports necessary components and assets for the Base Web map markers documentation page. This includes layout components, example containers, and specific map marker examples.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/introducing-base-map-markers/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport metadata from \"./metadata.json\";\nimport Layout from \"../../../components/layout\";\nimport Yard from \"../../../components/yard/index\";\nimport FloatingMarkerContainer from \"../../../components/floating-marker-container\";\n\nimport { BlogImage, Meta, Caption } from \"../../../components/blog\";\nimport { View, PropTypes } from \"react-view\";\nimport { Button, SIZE } from \"baseui/button\";\nimport Example from \"../../../components/example\";\nimport ReactMapGL from \"../../../examples/floating-marker/react-map-gl\";\nimport coverImg from \"./cover.png\";\nimport rendezvousImg from \"./rendezvous.png\";\nimport BasicFloating from \"../../../examples/floating-marker/basic\";\nimport BasicFixed from \"../../../examples/fixed-marker/basic\";\nimport AnchorPositionExample from \"./anchor-position-example.jsx\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Multi-Select Tile Example with Checkbox\nDESCRIPTION: This example demonstrates how the Tile component can be used for multi-selection scenarios, specifically using a checkbox. MultiSelectBatch is rendered, representing a tile group with checkbox functionality, within an Example component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tile.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Example title=\\\"Multi select with checkbox\\\" path=\\\"tile/multi-select-batch.tsx\\\">\\n  <MultiSelectBatch />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Using Yard component for Badge configuration\nDESCRIPTION: Demonstrates the use of the Yard component to render an interactive configuration tool for the Badge component with a placeholder height of 34 pixels.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/badge.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Yard placeholderHeight={34} {...badgeYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Displaying Banner Component Exports\nDESCRIPTION: This snippet shows how to use the Exports component to display the exports from the Banner component. It provides information about the available exports from the baseui/banner module.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/banner.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Exports\n  component={BannerExports}\n  title=\"Banner exports\"\n  path=\"baseui/banner\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Configurations - JavaScript\nDESCRIPTION: This snippet imports required components and configurations for the HintDot badge functionality. It sets up the necessary dependencies from local and BaseUI libraries.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/hint-dot.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport { HintDot } from \"baseui/badge\";\nimport * as HintDotExports from \"baseui/badge\";\n\nimport Yard from \"../../components/yard/index\";\nimport hintDotYardConfig from \"../../components/yard/config/hint-dot\";\n\nimport Offset from \"examples/hint-dot/offset.tsx\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Select Dropdown Control Example\nDESCRIPTION: This example shows how to imperatively control the dropdown of the Select component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/select.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example\\n  title=\\\"Imperatively control dropdown\\\"\\n  path=\\\"select/control-ref-dropdown.tsx\\\"\\n>\\n  <SelectDropdown />\\n</Example>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Importing AppNavBar Component and Related Utilities\nDESCRIPTION: This snippet shows the necessary imports for using the AppNavBar component, including example components, configuration, and exports.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/app-nav-bar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Exports from \"../../components/exports\";\nimport Layout from \"../../components/layout\";\nimport SEO from \"../../components/meta-seo\";\nimport Yard from \"../../components/yard/index\";\nimport appNavBarYardConfig from \"../../components/yard/config/app-nav-bar.ts\";\n\nimport * as AppNavBarExports from \"baseui/app-nav-bar\";\n\nimport Basic from \"examples/app-nav-bar/basic.tsx\";\nimport MapItemToNode from \"examples/app-nav-bar/map-item-to-node.tsx\";\nimport UniqueIdentifier from \"examples/app-nav-bar/unique-identifier.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Interaction Configuration with Playwright Selectors (JavaScript)\nDESCRIPTION: This snippet configures an interaction for a select component using Playwright selectors. It waits for the input and dropdown selectors to be present before clicking the input to open the dropdown.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/visual-regression-testing/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  \"select-search-single\": {\n    interactions: [\n      {\n        name: \"open\",\n        behavior: async (page) => {\n          const inputSelector = `[data-baseweb=\"select\"]`;\n          const dropdownSelector = `[role=\"listbox\"]`;\n          await page.waitForSelector(inputSelector);\n          await page.click(inputSelector);\n          await page.waitForSelector(dropdownSelector);\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Body Typography Table in React JSX\nDESCRIPTION: A JSX Table component displaying the body typography values used for Label and Paragraph components in v9, showing font tokens and their corresponding sizes, line heights, and weights.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v9/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Table\n  columns={[\"Name\", \"Value\"]}\n  data={[\n    [`font100`, `12px/20px/400`],\n    [`font150`, `12px/20px/500`],\n    [`font200`, `14px/20px/400`],\n    [`font250`, `14px/20px/500`],\n    [`font300`, `16px/24px/400`],\n    [`font350`, `16px/24px/500`],\n    [`font400`, `18px/28px/400`],\n    [`font450`, `18px/28px/500`],\n  ]}\n/>\n<Caption>Read values as font-size/line-height/font-weight.</Caption>\n```\n\n----------------------------------------\n\nTITLE: Supported Credit Card Brands Table Configuration\nDESCRIPTION: Configuration for rendering a table of supported credit card brands with example card numbers using Base Web's Table component\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/payment-card.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Table\n  columns={[\"Card Type\", \"Example Number\"]}\n  data={[\n    [\"American Express\", \"378282246310005\"],\n    [\"Diners Club\", \"36259600000004\"],\n    [\"Discover\", \"6011111111111117\"],\n    [\"ELO\", \"6550000000000001\"],\n    [\"JCB\", \"3530111333300000\"],\n    [\"Maestro\", \"6304000000000000\"],\n    [\"Mastercard\", \"5555555555554444\"],\n    [\"UnionPay\", \"6246729687894613\"],\n    [\"Visa\", \"4111111111111111\"],\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Testing a codemod during development\nDESCRIPTION: Command showing how to test a codemod by running it directly from the compiled output in the dist directory.\nSOURCE: https://github.com/uber/baseweb/blob/main/packages/baseui-codemods/README.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ node dist/cli.js --dir=~/code/some-project/src --mod=colorUpdate\n```\n\n----------------------------------------\n\nTITLE: BaseWeb Rating Component Exports\nDESCRIPTION: This snippet displays the exported components from the 'baseui/rating' module, enabling developers to utilize these components in their applications. It utilizes the Exports component for display.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/rating.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"<Exports\\n  component={RatingExports}\\n  title=\\\"Rating exports\\\"\\n  path=\\\"baseui/rating\\\"\\n/>\"\n```\n\n----------------------------------------\n\nTITLE: Importing Base Web Components in React\nDESCRIPTION: This snippet demonstrates the importation and usage of Base Web components such as PageControl in a React application. It requires Base Web package installed to function correctly. The imported components are utilized to manage and control pages in an application using indicator dots.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/page-control.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Example from \"../../components/example\";\\nimport Layout from \"../../components/layout\";\\nimport Exports from \"../../components/exports\";\\n\\nimport { PageControl } from \"baseui/page-control\";\\nimport * as PageControlExports from \"baseui/page-control\";\\n\\nimport Yard from \"../../components/yard/index\";\\nimport pageControlYardConfig from \"../../components/yard/config/page-control\";\\n\\nimport Overflow from \"examples/page-control/overflow.tsx\";\\n\\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Yard Component Configuration\nDESCRIPTION: Configuration for the Yard interactive documentation component with Avatar-specific settings.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/avatar.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Yard placeholderHeight={52} {...avatarYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Checkbox Example\nDESCRIPTION: This code snippet imports and renders the CheckboxExample component.  The example demonstrates the usage of FormControl with a checkbox, focusing on how the label is handled in conjunction with the checkbox element's accompanying text. The CheckboxExample component renders a checkbox inside the form control component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/form-control.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport CheckboxExample from \"examples/form-control/checkbox.tsx\";\n\n<Example title=\"Checkbox\" path=\"form-control/checkbox.tsx\">\n  <CheckboxExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing Divider Component and Dependencies\nDESCRIPTION: Demonstrates the import statements required to use the Divider component and related documentation components.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/divider.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport { StyledDivider } from \"baseui/divider\";\nimport * as DividerExports from \"baseui/divider\";\nimport DividerBasic from \"examples/divider/basic.tsx\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing Table Components in React\nDESCRIPTION: Import statements for various table examples in Base Web, showing how to include table components in a React application. This imports examples for table-semantic, data-table, table-grid, and basic table.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/tables.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\n\nimport TableSemantic from \"examples/table-semantic/basic.tsx\";\nimport DataTable from \"examples/data-table/batch-action.tsx\";\nimport TableGrid from \"examples/table-grid/cell-span.tsx\";\nimport Table from \"examples/table/basic.tsx\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Page Components\nDESCRIPTION: Import statements for the documentation page structure components like Example, Exports, Layout, and SEO.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/button-group.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Exports from \"../../components/exports\";\nimport Layout from \"../../components/layout\";\nimport SEO from \"../../components/meta-seo\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Exports\nDESCRIPTION: This snippet imports various React components and modules required for the Table-Grid functionality. This includes layout, table guide notifications, and specific example implementations from the 'examples' directory.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-grid.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\nimport TableGuideNotification from \"../../components/table-guide-notification\";\n\nimport * as TableGridExports from \"baseui/table-grid\";\n\nimport Basic from \"examples/table-grid/basic.tsx\";\nimport Nested from \"examples/table-grid/nested.tsx\";\nimport CellSpan from \"examples/table-grid/cell-span.tsx\";\nimport Sortable from \"examples/table-grid/sortable.tsx\";\nimport CellNavigation from \"examples/table-grid/cell-navigation.tsx\";\n\nexport default Layout;\n\n<TableGuideNotification />\n```\n\n----------------------------------------\n\nTITLE: Rendering Meta Component with Blog Metadata\nDESCRIPTION: A JSX snippet showing how to render the Meta component with blog metadata. This is used to provide metadata for the blog post about accessibility improvements.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/screen-reader-improvements/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta data={metadata} />\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Accent Colors to Theme in JavaScript\nDESCRIPTION: This code shows how to add custom accent colors to the theme primitives, which is useful for adapting to the new accent color system in Base Web v9.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v9/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTheme } from \"baseui/themes\";\n\nconst myTokens = {\n  // define various brand colors here...\n  colors: {\n    neonPink400: \"#FF69B4\",\n  },\n};\n\nconst myThemePrimitives = {\n  // define all the various primitives for my theme...\n  // adding in custom \"accent\" primitives\n  accent: myTokens.colors.neonPink400,\n  accent50: myTokens.colors.neonPink50,\n  accent100: myTokens.colors.neonPink100,\n  accent200: myTokens.colors.neonPink200,\n  accent300: myTokens.colors.neonPink300,\n  accent400: myTokens.colors.neonPink400,\n  accent500: myTokens.colors.neonPink500,\n  accent600: myTokens.colors.neonPink600,\n  accent700: myTokens.colors.neonPink700,\n};\n\nconst myTheme = createTheme(myThemePrimitives);\n\nexport default myTheme;\n```\n\n----------------------------------------\n\nTITLE: Exporting Location Puck Component - React\nDESCRIPTION: This snippet exports components related to the location puck from the baseui/map-marker module, allowing for structured usage in other parts of the application.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/location-puck.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Exports\n  component={LocationPuckExports}\n  title=\"Location Puck exports\"\n  path=\"baseui/map-marker\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Typography Comparison Table in React JSX\nDESCRIPTION: A JSX Table component that shows a comparison between the old (v8) and new (v9) typography values in Base Web, including font sizes, line heights, and font weights.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v9/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Table\n  columns={[\"Old\", \"Value\", \"New\", \"Value\"]}\n  data={[\n    [`font100`, `11px/16px/400`, `font100`, `12px/20px/400`],\n    [`-`, `-`, `font150`, `12px/20px/500`],\n    [`font200`, `12px/20px/400`, `font200`, `14px/20px/400`],\n    [`font250`, `12px/20px/500`, `font250`, `14px/20px/500`],\n    [`font300`, `14px/20px/400`, `font300`, `16px/24px/400`],\n    [`font350`, `14px/20px/500`, `font350`, `16px/24px/500`],\n    [`font400`, `16px/24px/400`, `font400`, `18px/28px/400`],\n    [`font450`, `16px/24px/500`, `font450`, `18px/28px/500`],\n    [`font460`, `18px/24px/400`, `-`, `-`],\n    [`font470`, `18px/24px/500`, `-`, `-`],\n    [`font500`, `20px/28px/500`, `-`, `-`],\n    [`-`, `-`, `font550`, `20px/28px/500`],\n    [`font600`, `24px/36px/500`, `-`, `-`],\n    [`-`, `-`, `font650`, `24px/32px/500`],\n    [`font700`, `32px/48px/500`, `-`, `-`],\n    [`-`, `-`, `font750`, `28px/36px/500`],\n    [`font800`, `40px/56px/500`, `-`, `-`],\n    [`-`, `-`, `font850`, `32px/40px/500`],\n    [`font900`, `52px/68px/500`, `-`, `-`],\n    [`-`, `-`, `font950`, `36px/44px/500`],\n    [`font1000`, `72px/96px/400`, `-`, `-`],\n    [`-`, `-`, `font1050`, `40px/52px/500`],\n    [`font1100`, `96px/116px/400`, `-`, `-`],\n    [`-`, `-`, `font1150`, `36px/44px/500`],\n    [`-`, `-`, `font1250`, `44px/52px/500`],\n    [`-`, `-`, `font1350`, `52px/64px/500`],\n    [`-`, `-`, `font1450`, `96px/112px/500`],\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Import Horizontal Alignment Radio Example\nDESCRIPTION: This snippet imports the HorizontalAlign component from 'examples/radio/horizontal-align.tsx'.  This component is a React component that demonstrates horizontal alignment configurations for radio buttons.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/radio.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport HorizontalAlign from \"examples/radio/horizontal-align.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Input Override with Select Component\nDESCRIPTION: Shows how to embed a Select component as a prefix to an Input using the Before override\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/phone-input/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst inputOverrides = {\n  Before: {\n    component: Select,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Layout and Meta Components in React\nDESCRIPTION: This snippet demonstrates how to import and use the Layout and Meta components in a React application. It also shows the import of metadata from a JSON file.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v12/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Layout from \"../../../components/layout\";\nimport { Meta } from \"../../../components/blog\";\nimport metadata from \"./metadata.json\";\n\nexport default Layout;\n\n<Meta data={metadata} />\n```\n\n----------------------------------------\n\nTITLE: Displaying Badge exports\nDESCRIPTION: Renders the Exports component to display all exported items from the Badge module with a title and source path.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/badge.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Exports component={BadgeExports} title=\"Badge exports\" path=\"baseui/badge\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Button Group Components from Base Web\nDESCRIPTION: Import statements for Button and ButtonGroup components from Base Web library. These components are used for grouping similar actions together.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/button-group.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from \"baseui/button\";\nimport { ButtonGroup } from \"baseui/button-group\";\nimport * as ButtonGroupExports from \"baseui/button-group\";\n```\n\n----------------------------------------\n\nTITLE: Rendering FlexGrid Exports in JSX\nDESCRIPTION: This snippet shows how to render the exports of the FlexGrid component using the Exports component, providing information about the available exports from the baseui/flex-grid module.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/flex-grid.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Exports\n  component={FlexGridExports}\n  title=\"FlexGrid exports\"\n  path=\"baseui/flex-grid\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Table Semantic Components\nDESCRIPTION: This code snippet imports necessary components and modules for rendering the Table Semantic component. It includes Example, Layout, Exports, and TableGuideNotification components, as well as specific examples and the TableSemanticExports object from the baseui library.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-semantic.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\nimport TableGuideNotification from \"../../components/table-guide-notification\";\n\nimport * as TableSemanticExports from \"baseui/table-semantic\";\n\nimport Basic from \"examples/table-semantic/basic.tsx\";\nimport Cells from \"examples/table-semantic/cells.tsx\";\nimport Scroll from \"examples/table-semantic/scroll.tsx\";\nimport Builder from \"examples/table-semantic/builder.tsx\";\nimport Sortable from \"examples/table-semantic/sortable.tsx\";\nimport Toggleable from \"examples/table-semantic/toggleable.tsx\";\nimport Alternating from \"examples/table-semantic/alternating.tsx\";\nimport Span from \"examples/table-semantic/span.tsx\";\nimport EmptyMessage from \"examples/table-semantic/empty-message.tsx\";\n\nimport Yard from \"../../components/yard/index\";\nimport tableYardConfig from \"../../components/yard/config/table-semantic\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Badge Offset example\nDESCRIPTION: Displays an example of badge positioning using offsets with a descriptive title and path to the example file.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/badge.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"Offsets\" path=\"badge/offset.tsx\">\n  <Offset />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Running Base Web V9 Migration Codemod in Shell\nDESCRIPTION: A shell command that uses npx to run the Base Web codemod utility for automatically migrating typography styles from v8 to v9 across a codebase.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v9/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ npx @uber-web-ui/baseui-codemods --mod=v9Styles --dir=<path_to_code>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Configuration - JavaScript\nDESCRIPTION: This snippet imports necessary modules and components required for implementing progress bars in the application.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/progress-bar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport Basic from \"examples/progress-bar/basic.tsx\";\nimport Negative from \"examples/progress-bar/negative.tsx\";\nimport WithLabel from \"examples/progress-bar/with-label.tsx\";\nimport CustomLabel from \"examples/progress-bar/custom-label.tsx\";\nimport Customization from \"examples/progress-bar/overrides.tsx\";\nimport Steps from \"examples/progress-bar/steps.tsx\";\nimport ProgressBarRounded from \"examples/progress-bar/rounded.tsx\";\n\nimport { ProgressBar } from \"baseui/progress-bar\";\nimport * as ProgressBarExports from \"baseui/progress-bar\";\n\nimport Yard from \"../../components/yard/index\";\nimport progressBarYardConfig from \"../../components/yard/config/progress-bar\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Updating Block Component Font Properties\nDESCRIPTION: Example showing how to update font properties in the Block component when migrating from Base Web v8 to v9. This demonstrates changing the font prop value to match the new typography scale.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v9/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// old\n<Block font=\"font300\" />\n\n// new\n<Block font=\"font200\" />\n```\n\n----------------------------------------\n\nTITLE: Using Yard Component with Configuration in JavaScript\nDESCRIPTION: The Yard component is utilized here to display layout configurations, specifically set for header navigation experiments using the given configuration object.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/header-navigation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Yard placeholderHeight={52} {...headerNavigationYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Phone Input Component\nDESCRIPTION: Example of rendering the StatefulPhoneInput component with a caption in JSX.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/phone-input/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<StatefulPhoneInput />\n<Caption>The new Phone Input component</Caption>\n```\n\n----------------------------------------\n\nTITLE: Exporting Layout Component\nDESCRIPTION: This code exports the Layout component as the default export from the current module, making it available for use in other parts of the application.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tokens.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Using Snackbar Example for Line Lengths in React\nDESCRIPTION: This snippet demonstrates how to render a Snackbar example illustrating line lengths. It utilizes the `LineLengths` component for showcasing the behavior of Snackbar with varying text lengths.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/snackbar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"Line lengths\" path=\"snackbar/line-lengths.tsx\">\n  <LineLengths />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Cheat Sheet Page in React\nDESCRIPTION: This snippet imports the necessary components for creating a cheat sheet page. It includes a Layout component for the page structure and a CheatSheet component for the main content.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/cheat-sheet.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Layout from \"../components/layout\";\nimport CheatSheet from \"../components/cheat-sheet\";\n```\n\n----------------------------------------\n\nTITLE: Examples of Tree View Usage with Base Web\nDESCRIPTION: Various Tree View examples are shown here, highlighting basic usage, customization options, and accessibility features. Each example utilizes a unique path and a specific aspect of the Tree View to demonstrate its functionality and flexibility.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tree-view.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Example title=\"Basic usage\" path=\"tree-view/basic.tsx\">\n  <TreeViewBasic />\n</Example>\n\n<Example title=\"Adding custom labels\" path=\"tree-view/custom-label.tsx\">\n  <CustomLabelledTreeView />\n</Example>\n\n<Example\n  title=\"Customizing icons and rendering all content for SEO\"\n  path=\"tree-view/overrides.tsx\"\n>\n  <TreeViewOverrides />\n</Example>\n\n<Example\n  title=\"Customizing labels based on depth\"\n  path=\"tree-view/label-overrides.tsx\"\n>\n  <TreeViewLabelOverrides />\n</Example>\n\n<Example\n  title=\"Expanding a single node at a time with indent guides\"\n  path=\"tree-view/single-expanded.tsx\"\n>\n  <SingleExpanded />\n</Example>\n\n<Example\n  title=\"Using interactable elements in a tree node label\"\n  path=\"tree-view/interactable.tsx\"\n>\n  <LabelInteractable />\n</Example>\n\n<Example\n  title=\"Stateful (uncontrolled) usage\"\n  path=\"tree-view/uncontrolled.tsx\"\n>\n  <TreeViewUncontrolled />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Displaying a Notification for Typography Usage\nDESCRIPTION: This code snippet displays a notification warning about the usage of typography components built on top of the Block component. It advises users to refer to the styling guide for implementing Base Web typography. The snippet uses the Notification component imported from BaseUI.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/typography.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Notification\n  overrides={{ Body: { style: { width: \"auto\" } } }}\n  kind={KIND.warning}\n>\n  These typography components are built on top of the Block component, which we\n  no longer recommend. Refer to the <a href=\"/guides/styling/\">Styling</a> guide\n  to understand how to use Base Web typography in your components.\n</Notification>\n```\n\n----------------------------------------\n\nTITLE: BaseWeb Layout Component with Gallery\nDESCRIPTION: This snippet defines a functional component that uses a Layout component and passes props to it. The maxContentWidth is set to \"95vw\" and hideSideNavigation is set to true, effectively hiding the side navigation panel. This likely simplifies or focuses the content displayed.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Layout from \"../../components/layout\";\nimport Gallery from \"../../components/gallery\";\n\nexport default (props) => (\n  <Layout {...props} maxContentWidth=\"95vw\" hideSideNavigation />\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Primary Inline Badge example\nDESCRIPTION: Displays an example of a primary inline badge with a descriptive title and path to the example file.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/badge.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"Primary inline badge\" path=\"badge/primary-inline.tsx\">\n  <PrimaryInline />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Simplifying TimezonePicker Value and onChange - diff\nDESCRIPTION: Adjusts the 'TimezonePicker' to simplify the 'value' and 'onChange' props. Instead of using an array, the 'value' prop now accepts a single string, and the 'onChange' function's parameter is streamlined for cleaner code.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v7/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n  <TimezonePicker\\n-   onChange={({item}) => console.log(item)}\\n+   onChange={item => console.log(item)}\\n-   value={[{id: 'America/Los_Angeles'}]}\\n+   value=\\\"America/Los_Angeles\\\"\\n  />\n```\n\n----------------------------------------\n\nTITLE: Importing PinCode Examples and Baseui Components\nDESCRIPTION: This code snippet demonstrates how to import various examples of the PinCode component along with necessary components from the baseui library, which help in building the layout of the application.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/pin-code.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport PinCodeBasic from \"examples/pin-code/basic.tsx\";\nimport PinCodeLength from \"examples/pin-code/length.tsx\";\nimport PinCodeIdAndName from \"examples/pin-code/id-and-name.tsx\";\nimport PinCodeStates from \"examples/pin-code/states.tsx\";\nimport PinCodeSizes from \"examples/pin-code/size.tsx\";\nimport PinCodePlaceholder from \"examples/pin-code/placeholder.tsx\";\nimport PinCodeNoTab from \"examples/pin-code/no-tab.tsx\";\nimport PinCodeAutofocus from \"examples/pin-code/autofocus.tsx\";\nimport PinCodeCompletion from \"examples/pin-code/completion.tsx\";\nimport PinCodeOverride from \"examples/pin-code/override.tsx\";\nimport PinCodeEvent from \"examples/pin-code/event.tsx\";\nimport PinCodeStateful from \"examples/pin-code/stateful.tsx\";\nimport PinCodeMask from \"examples/pin-code/mask.tsx\";\n\nimport * as PinCodeExports from \"baseui/pin-code/index\";\nimport { StatefulPinCode } from \"baseui/pin-code/index\";\n\nimport Yard from \"../../components/yard/index\";\nimport pinYardConfig from \"../../components/yard/config/pin-code\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Installing Base Web dependencies\nDESCRIPTION: Command to install the necessary packages for Base Web, including the component library and Styletron for CSS-in-JS styling.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/getting-started-with-base-web/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add baseui@next styletron-engine-monolithic styletron-react\n```\n\n----------------------------------------\n\nTITLE: Using the Yard Component for Skeleton - TypeScript\nDESCRIPTION: This snippet integrates the Yard component with the Skeleton configuration. The Yard component uses the skeletonYardConfig to set up the placeholder height, rendering skeleton elements within its layout.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/skeleton.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<Yard placeholderHeight={44} {...skeletonYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Setting Default Layout for AppNavBar Documentation\nDESCRIPTION: This line exports the default layout component for the AppNavBar documentation page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/app-nav-bar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Example codemod structure with dubstep/core\nDESCRIPTION: Example JavaScript code showing how to structure a codemod using dubstep/core with steps that perform specific transformations.\nSOURCE: https://github.com/uber/baseweb/blob/main/packages/baseui-codemods/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// A new `colorUpdate` codemod\nconst colorUpdate = [\n  step('replace \"red\" with \"blue\"', redToBlue),\n  step('replace \"green\" with \"pink\"', greenToPink),\n];\nconst stepper = new Stepper(colorUpdate);\nstepper.run();\n```\n\n----------------------------------------\n\nTITLE: Setting Default Export for Button Documentation Layout\nDESCRIPTION: This line sets the default export for the file to the Layout component, which likely wraps the entire documentation page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/button.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Rendering Popover Examples in JSX\nDESCRIPTION: This snippet illustrates how to render different popover examples within an interface. It uses the Example component to load various instances of popover behavior such as 'stateless', 'click', 'hover', and more.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/popover.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"Popover stateless example\" path=\"popover/stateless.tsx\">\n  <Stateless />\n</Example>\n\n<Example title=\"Popover opens on Click\" path=\"popover/stateful-click.tsx\">\n  <StatefulClick />\n</Example>\n\n<Example title=\"Popover opens on link Click\" path=\"popover/link.tsx\">\n  <Link />\n</Example>\n\n<Example title=\"Popover Opens on Hover\" path=\"popover/stateful-hover.tsx\">\n  <StatefulHover />\n</Example>\n\n<Example title=\"Popover Available Placements\" path=\"popover/placements.tsx\">\n  <Placements />\n</Example>\n\n<Example title=\"Popover With Arrow\" path=\"popover/with-arrow.tsx\">\n  <WithArrow />\n</Example>\n\n<Example title=\"Popover Close from Content\" path=\"popover/dismiss.tsx\">\n  <Dismiss />\n</Example>\n\n<Example title=\"Anchor ref handling example\" path=\"popover/ref-handling.tsx\">\n  <AnchorRefHandling />\n</Example>\n\n<Example title=\"Clipping Avoidance\" path=\"popover/clipping.tsx\">\n  <Clipping />\n</Example>\n\n<Example title=\"Popover with Overrides\" path=\"popover/overrides.tsx\">\n  <Customization />\n</Example>\n\n<Example title=\"SSR Popover\" path=\"popover/ssr-render-all.tsx\">\n  <SSRRenderAll />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing Fixed Marker Component Examples and Configuration\nDESCRIPTION: Initial imports for the Fixed Marker documentation page, including example components, layout utilities, and configuration options.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/fixed-marker.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport Basic from \"examples/fixed-marker/basic.tsx\";\nimport StartEnhancer from \"examples/fixed-marker/start-enhancer.tsx\";\nimport EndEnhancerColor from \"examples/fixed-marker/end-enhancer-color.tsx\";\nimport StartEnhancerLarge from \"examples/fixed-marker/start-enhancer-large.tsx\";\nimport Dragging from \"examples/fixed-marker/dragging.tsx\";\nimport XSmall from \"examples/fixed-marker/x-small.tsx\";\nimport ReactMapGL from \"examples/fixed-marker/react-map-gl.tsx\";\nimport ReactMapGLDragging from \"examples/fixed-marker/react-map-gl-dragging.tsx\";\nimport BadgeEnhancerText from \"examples/fixed-marker/badge-enhancer-text.tsx\";\nimport BadgeAndLabelEnhancers from \"examples/fixed-marker/badge-and-label-enhancers.tsx\";\nimport { FixedMarkerSizingTable } from \"../../components/map-marker-sizing-table.jsx\";\n\nimport Yard from \"../../components/yard/index\";\nimport fixedMarkerYardConfig from \"../../components/yard/config/fixed-marker\";\n\nimport * as FixedMarkerExports from \"baseui/map-marker\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: SEO Component Configuration\nDESCRIPTION: SEO metadata configuration for the Avatar component documentation page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/avatar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SEO\n  description=\"The Avatar component adds additional visual information about a user.\"\n  keywords=\"avatar, react avatar, react user info\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Password strength color mapping function\nDESCRIPTION: Function that maps password strength scores to theme color values, used for visual feedback about password security.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/getting-started-with-base-web/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst getStrengthColor = (strength) => {\n  switch (strength) {\n    case 0:\n      return \"negative400\";\n    case 1:\n      return \"warning400\";\n    case 2:\n      return \"warning200\";\n    case 3:\n      return \"positive200\";\n    case 4:\n      return \"positive400\";\n    default:\n      return \"primary50\";\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component Dependencies\nDESCRIPTION: Import statements for required components and examples including Avatar component, layout utilities, and example components.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/avatar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Exports from \"../../components/exports\";\nimport Layout from \"../../components/layout\";\nimport SEO from \"../../components/meta-seo\";\n\nimport Sizes from \"examples/avatar/sizes.tsx\";\nimport Error from \"examples/avatar/error.tsx\";\nimport Override from \"examples/avatar/override.tsx\";\nimport Initials from \"examples/avatar/initials.tsx\";\n\nimport { Avatar } from \"baseui/avatar\";\nimport * as AvatarExports from \"baseui/avatar\";\nimport { Block } from \"baseui/block\";\n```\n\n----------------------------------------\n\nTITLE: Running Codemod for v8Types Migration in Base Web\nDESCRIPTION: Command to run the codemod tool that adds FlowFixMe comments to all uses of styled functions, allowing gradual migration to the new type system.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v7/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @uber-web-ui/baseui-codemods --mod=v8Types --dir=<path_to_code>\n```\n\n----------------------------------------\n\nTITLE: Rendering and Configuring Page Controls\nDESCRIPTION: This snippet involves rendering yard components with defined configurations for page controls. Yard is utilized to configure the appearance of page indicators, and suggests that additional pages are available when there are more than 5 elements. Requires Base Web configuration files.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/page-control.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<Yard placeholderHeight={34} {...pageControlYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Card Component with SEO Considerations - React\nDESCRIPTION: This code snippet showcases a Card component utilizing StyledBody from baseui. The text content is wrapped in a paragraph to comply with SEO best practices, ensuring that search engines can interpret the content effectively.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/seo.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from \"react\";\nimport { Card, StyledBody } from \"baseui/card\";\nexport default () => (\n  <Card overrides={{ Root: { style: { width: \"328px\" } } }}>\n    <StyledBody $as=\"p\">\n      Proin ut dui sed metus pharetra hend rerit vel non mi. Nulla ornare\n      faucibus ex, non facilisis nisl.\n    </StyledBody>\n  </Card>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying International Metadata Table in Markdown\nDESCRIPTION: A markdown table showing ISO2 codes, region names (including native spellings), and international dial codes for various countries. This data is useful for applications requiring country selection or phone number input with country codes.\nSOURCE: https://github.com/uber/baseweb/blob/main/src/phone-input/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| iso2 | Region                                               | Dial Code |\n| :--- | :--------------------------------------------------- | --------: |\n| AD   | Andorra                                              |       376 |\n| AE   | United Arab Emirates (‫الإمارات العربية المتحدة‬‎)   |       971 |\n| AF   | Afghanistan (‫افغانستان‬‎)                           |        93 |\n| AG   | Antigua and Barbuda                                  |      1268 |\n| AI   | Anguilla                                             |      1264 |\n| AL   | Albania (Shqipëri)                                   |       355 |\n| AM   | Armenia (Հայաստան)                                   |       374 |\n| AO   | Angola                                               |       244 |\n| AR   | Argentina                                            |        54 |\n| AS   | American Samoa                                       |      1684 |\n| AT   | Austria (Österreich)                                 |        43 |\n| AU   | Australia                                            |        61 |\n| AW   | Aruba                                                |       297 |\n| AX   | Åland Islands                                        |       358 |\n| AZ   | Azerbaijan (Azərbaycan)                              |       994 |\n| BA   | Bosnia and Herzegovina (Босна и Херцеговина)         |       387 |\n| BB   | Barbados                                             |      1246 |\n| BD   | Bangladesh (বাংলাদেশ)                                |       880 |\n| BE   | Belgium (België)                                     |        32 |\n| BF   | Burkina Faso                                         |       226 |\n| BG   | Bulgaria (България)                                  |       359 |\n| BH   | Bahrain (‫البحرين‬‎)                                 |       973 |\n| BI   | Burundi (Uburundi)                                   |       257 |\n| BJ   | Benin (Bénin)                                        |       229 |\n| BL   | Saint Barthélemy                                     |       590 |\n| BM   | Bermuda                                              |      1441 |\n| BN   | Brunei                                               |       673 |\n| BO   | Bolivia                                              |       591 |\n| BR   | Brazil (Brasil)                                      |        55 |\n| BS   | Bahamas                                              |      1242 |\n| BT   | Bhutan (འབྲུག)                                       |       975 |\n| BW   | Botswana                                             |       267 |\n| BY   | Belarus (Беларусь)                                   |       375 |\n| BZ   | Belize                                               |       501 |\n| CA   | Canada                                               |         1 |\n| CC   | Cocos (Keeling) Islands                              |        61 |\n| CD   | Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)       |       243 |\n| CF   | Central African Republic (République centrafricaine) |       236 |\n| CG   | Congo (Republic) (Congo-Brazzaville)                 |       242 |\n| CH   | Switzerland (Schweiz)                                |        41 |\n| CI   | Côte d'Ivoire                                        |       225 |\n| CK   | Cook Islands                                         |       682 |\n| CL   | Chile                                                |        56 |\n| CM   | Cameroon (Cameroun)                                  |       237 |\n| CN   | China (中国)                                         |        86 |\n| CO   | Colombia                                             |        57 |\n| CR   | Costa Rica                                           |       506 |\n| CU   | Cuba                                                 |        53 |\n| CV   | Cape Verde (Kabu Verdi)                              |       238 |\n| CW   | Curaçao                                              |       599 |\n| CX   | Christmas Island                                     |        61 |\n| CY   | Cyprus (Κύπρος)                                      |       357 |\n| CZ   | Czech Republic (Česká republika)                     |       420 |\n| DE   | Germany (Deutschland)                                |        49 |\n| DJ   | Djibouti                                             |       253 |\n| DK   | Denmark (Danmark)                                    |        45 |\n| DM   | Dominica                                             |      1767 |\n| DO   | Dominican Republic (República Dominicana)            |         1 |\n| DZ   | Algeria (‫الجزائر‬‎)                                 |       213 |\n| EC   | Ecuador                                              |       593 |\n| EE   | Estonia (Eesti)                                      |       372 |\n| EG   | Egypt (‫مصر‬‎)                                       |        20 |\n| ER   | Eritrea                                              |       291 |\n| ES   | Spain (España)                                       |        34 |\n| ET   | Ethiopia                                             |       251 |\n| FI   | Finland (Suomi)                                      |       358 |\n| FJ   | Fiji                                                 |       679 |\n| FK   | Falkland Islands (Islas Malvinas)                    |       500 |\n| FM   | Micronesia                                           |       691 |\n| FO   | Faroe Islands (Føroyar)                              |       298 |\n| FR   | France                                               |        33 |\n| GA   | Gabon                                                |       241 |\n| GB   | United Kingdom                                       |        44 |\n| GD   | Grenada                                              |      1473 |\n| GE   | Georgia (საქართველო)                                 |       995 |\n| GF   | French Guiana (Guyane française)                     |       594 |\n| GG   | Guernsey                                             |        44 |\n| GH   | Ghana (Gaana)                                        |       233 |\n| GI   | Gibraltar                                            |       350 |\n| GL   | Greenland (Kalaallit Nunaat)                         |       299 |\n| GM   | Gambia                                               |       220 |\n| GN   | Guinea (Guinée)                                      |       224 |\n| GP   | Guadeloupe                                           |       590 |\n| GQ   | Equatorial Guinea (Guinea Ecuatorial)                |       240 |\n| GR   | Greece (Ελλάδα)                                      |        30 |\n| GT   | Guatemala                                            |       502 |\n| GU   | Guam                                                 |      1671 |\n| GW   | Guinea-Bissau (Guiné Bissau)                         |       245 |\n| GY   | Guyana                                               |       592 |\n| HK   | Hong Kong (香港)                                     |       852 |\n| HN   | Honduras                                             |       504 |\n| HR   | Croatia (Hrvatska)                                   |       385 |\n| HT   | Haiti                                                |       509 |\n| HU   | Hungary (Magyarország)                               |        36 |\n| ID   | Indonesia                                            |        62 |\n| IE   | Ireland                                              |       353 |\n| IL   | Israel (‫ישראל‬‎)                                    |       972 |\n| IM   | Isle of Man                                          |        44 |\n| IN   | India (भारत)                                         |        91 |\n| IO   | British Indian Ocean Territory                       |       246 |\n| IQ   | Iraq (‫العراق‬‎)                                     |       964 |\n| IR   | Iran (‫ایران‬‎)                                      |        98 |\n| IS   | Iceland (Ísland)                                     |       354 |\n| IT   | Italy (Italia)                                       |        39 |\n| JE   | Jersey                                               |        44 |\n| JM   | Jamaica                                              |         1 |\n| JO   | Jordan (‫الأردن‬‎)                                   |       962 |\n| JP   | Japan (日本)                                         |        81 |\n| KE   | Kenya                                                |       254 |\n| KG   | Kyrgyzstan (Кыргызстан)                              |       996 |\n| KH   | Cambodia (កម្ពុជា)                                   |       855 |\n| KI   | Kiribati                                             |       686 |\n| KM   | Comoros (‫جزر القمر‬‎)                               |       269 |\n| KN   | Saint Kitts and Nevis                                |      1869 |\n| KP   | North Korea (조선 민주주의 인민 공화국)              |       850 |\n| KR   | South Korea (대한민국)                               |        82 |\n| KW   | Kuwait (‫الكويت‬‎)                                   |       965 |\n| KY   | Cayman Islands                                       |      1345 |\n| KZ   | Kazakhstan (Казахстан)                               |         7 |\n| LA   | Laos (ລາວ)                                           |       856 |\n| LB   | Lebanon (‫لبنان‬‎)                                   |       961 |\n| LC   | Saint Lucia                                          |      1758 |\n| LI   | Liechtenstein                                        |       423 |\n| LK   | Sri Lanka (ශ්‍රී ලංකාව)                              |        94 |\n| LR   | Liberia                                              |       231 |\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Floating Marker Example in React\nDESCRIPTION: Shows how to render a basic floating marker example component within a FloatingMarkerContainer in React. This is used to showcase the floating marker type in the documentation.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/introducing-base-map-markers/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<FloatingMarkerContainer>\n  <BasicFloating />\n</FloatingMarkerContainer>\n```\n\n----------------------------------------\n\nTITLE: Matching baseui and eslint-plugin-baseui versions in package.json\nDESCRIPTION: Example package.json demonstrating version synchronization between baseui and eslint-plugin-baseui to ensure compatibility.\nSOURCE: https://github.com/uber/baseweb/blob/main/packages/eslint-plugin-baseui/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"baseui\": \"10.0.0\"\n  },\n  \"devDependencies\": {\n    \"eslint-plugin-baseui\": \"10.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Guide Notification\nDESCRIPTION: This snippet renders the TableGuideNotification component. The purpose of this component is likely to provide guidance or information related to using the Table Semantic component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-semantic.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<TableGuideNotification />\n```\n\n----------------------------------------\n\nTITLE: Configuring SEO Component for Breadcrumbs in TSX\nDESCRIPTION: This snippet configures the SEO component with a description and keywords for the Breadcrumbs documentation page. It helps improve search engine optimization for the component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/breadcrumbs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<SEO\n  description=\"The Breadcrumbs component is a secondary navigation scheme that reveals the user's location in an application.\"\n  keywords=\"breadcrumbs, react breadcrumbs\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Filter Table Example\nDESCRIPTION: This snippet imports the Filter component from the \"examples/table/filter.tsx\" file.  This React component demonstrates how to implement column filtering within a BaseWeb table.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport Filter from \"examples/table/filter.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Setting up SEO Metadata for Button Group Documentation\nDESCRIPTION: SEO component setup with description and keywords for the Button Group documentation page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/button-group.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SEO\n  description=\"The Button Group component groups a collection of similar actions together.\"\n  keywords=\"button group, react button group\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a React app with create-react-app\nDESCRIPTION: Commands to bootstrap a new React application using create-react-app and navigate to the project directory.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/getting-started-with-base-web/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncreate-react-app password-generator\ncd password-generator\n```\n\n----------------------------------------\n\nTITLE: Exporting Link Component Exports\nDESCRIPTION: Exports Link component variations and configurations with specific metadata\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/link.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Exports\n  component={LinkExports}\n  title=\"Link exports\"\n  path=\"baseui/link\"\n  cheatsheet={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Combining Month/Year Dropdowns in Datepicker - diff\nDESCRIPTION: This demonstrates combining the month and year selection into a single menu by removing separate 'MonthSelect' and 'YearSelect' overrides, replaced by 'MonthYearSelectButton', 'MonthYearSelectIconContainer', and 'MonthYearSelectPopover' overrides.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v7/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n  <Datepicker\\n    overrides={{\\n-     MonthSelect: {},\\n-     YearSelect: {},\\n+     MonthYearSelectButton: {},\\n+     MonthYearSelectIconContainer: {},\\n+     MonthYearSelectPopover: {},\\n+     MonthYearSelectStatefulMenu: {},\\n    }}\\n  />\n```\n\n----------------------------------------\n\nTITLE: Rendering File Uploader Component with Yard Configuration in React\nDESCRIPTION: This code snippet renders the File Uploader component using the Yard configuration. It sets up the component with a placeholder height and spreads the fileUploaderYardConfig object as props.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/file-uploader.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Yard placeholderHeight={120} {...fileUploaderYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with Base Web Plugin\nDESCRIPTION: This snippet demonstrates how to configure ESLint to use the baseui plugin.  It adds the plugin to the ESLint configuration file and sets up rules to warn about deprecated APIs and deep imports.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/getting-started/setup.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"plugins\": [\n    // ...\n    \"baseui\",\n  ],\n  \"rules\": {\n    // ...\n    'baseui/deprecated-theme-api': \"warn\",\n    'baseui/deprecated-component-api': \"warn\",\n    'baseui/no-deep-imports': \"warn\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering File Uploader API Exports Documentation\nDESCRIPTION: Displays the exports from the FileUploaderBasic component module to show available APIs and props for developers.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/file-uploader-basic.mdx#2025-04-21_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n<Exports\n  component={FileUploaderBasicExports}\n  title=\"File uploader basic exports\"\n  path=\"baseui/file-uploader-basic\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Refactoring Datepicker Quick Select to Dropdown Menu - diff\nDESCRIPTION: This transition involves replacing the 'QuickSelectLabel' and 'QuickSelectButtons' overrides with a single 'QuickSelect' override that customizes the internal Select component functionality. It streamlines the selection process with fewer overrides.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v7/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n  <Datepicker\\n    overrides={{\\n-     QuickSelectLabel: {},\\n-     QuickSelectButtons: {},\\n+     QuickSelect: {},\\n+     QuickSelectFormControl: {},\\n    }}\\n  />\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Code Editor with TypeScript Support\nDESCRIPTION: Example of implementing a simple live code editor with TypeScript support using React View components. This setup does not include knobs or props documentation, focusing only on code editing with live preview.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/introducing-react-view/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useView, Compiler, Editor, Error } from \"react-view\";\nimport presetTypescript from \"@babel/preset-typescript\";\n\nexport default () => {\n  const params = useView({\n    initialCode: `() => {\n      const text: string = \"Hey\";\n      return <h3>{text}</h3>;\n    }`,\n    scope: {},\n    onUpdate: console.log,\n  });\n\n  return (\n    <React.Fragment>\n      <Compiler {...params.compilerProps} presets={[presetTypescript]} />\n      <Editor {...params.editorProps} language=\"tsx\" />\n      <Error {...params.errorProps} />\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Components for File Uploader Documentation Page in React\nDESCRIPTION: Imports necessary components for the documentation page layout and examples of the FileUploaderBasic component from Base Web.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/file-uploader-basic.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport FileUploaderBasic from \"examples/file-uploader-basic/basic.tsx\";\nimport FileUploaderBasicError from \"examples/file-uploader-basic/error.tsx\";\nimport FileUploaderBasicIndeterminate from \"examples/file-uploader-basic/indeterminate-progress.tsx\";\nimport FileUploaderBasicDisabled from \"examples/file-uploader-basic/disabled.tsx\";\nimport FileUploaderBasicOverrides from \"examples/file-uploader-basic/overrides.tsx\";\n\nimport OverridesExample from \"examples/file-uploader-basic/_overrides_component.tsx\";\nimport * as FileUploaderBasicExports from \"baseui/file-uploader-basic\";\n\nimport Yard from \"../../components/yard/index\";\nimport fileUploaderBasicYardConfig from \"../../components/yard/config/file-uploader-basic\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Read-Only Rating with Stars Example\nDESCRIPTION: This example showcases the read-only version of the Star rating component in BaseWeb.  The rendered star rating will be non-interactive and display a pre-set value.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/rating.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Example title=\\\"Rating with stars read only\\\" path=\\\"rating/starReadOnly.tsx\\\">\\n  <StarReadOnly />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Setting up SEO Metadata for Accordion Documentation\nDESCRIPTION: This JSX snippet configures the SEO component with a description and keywords for the Accordion component documentation page to improve search engine visibility.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/accordion.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<SEO\n  description=\"Accordions display a list of high-level options that can expand/contract to reveal more detailed information.\"\n  keywords=\"accordion, react accordion, react expansion panel, react collapse\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Cheat Sheet Page Component in React\nDESCRIPTION: This snippet defines and exports a functional React component that renders the cheat sheet page. It uses the Layout component with specific props to control the page width and hide side navigation.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/cheat-sheet.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nexport default (props) => (\n  <Layout {...props} maxContentWidth=\"60em\" hideSideNavigation />\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Banner Component and Related Modules\nDESCRIPTION: This snippet shows the import statements for various components and modules used in the Banner documentation page. It includes imports for example components, layout, exports, and configuration.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/banner.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\nimport Yard from \"../../components/yard/index\";\nimport bannerYardConfig from \"../../components/yard/config/banner\";\n\nimport Action from \"examples/banner/action.tsx\";\nimport Artwork from \"examples/banner/artwork.tsx\";\nimport Variants from \"examples/banner/variants.tsx\";\n\nimport * as BannerExports from \"baseui/banner\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Migrating RadioGroup Component - diff\nDESCRIPTION: Demonstrates updating the aria properties in the RadioGroup component to use standard 'aria-label' instead of 'ariaLabel'. This change is part of efforts to maintain consistency across components.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v7/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- `ariaLabel=\\\"myLabel\\\"`\\n+ `aria-label=\\\"myLabel\\\"`\n```\n\n----------------------------------------\n\nTITLE: Tile Example without Trailing Content\nDESCRIPTION: This example showcases the Tile component without any trailing content, such as checkboxes or toggles. The SelectionNoTrailingContent component is rendered, demonstrating a tile that's purely for selection without additional controls.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tile.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Example\\n  title=\\\"No trailing content\\\"\\n  path=\\\"tile/selection-no-trailing-content.tsx\\\"\\n>\\n  <SelectionNoTrailingContent />\\n</Example>\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of StatefulNavigation Component in React\nDESCRIPTION: Advanced implementation example of the StatefulNavigation component from Base Web, showing how to use it within a functional React component with an empty items array.\nSOURCE: https://github.com/uber/baseweb/blob/main/src/side-navigation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport {StatefulNavigation} from 'baseui/side-navigation';\n export default () => {\n  return (<StatefulNavigation items={[]} />);\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Base Web Table Component in React\nDESCRIPTION: Demonstrates importing the Table component from Base Web and a layout component for rendering platform support information\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/discover-more/supported-platforms.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Layout from \"../../components/layout\";\nimport { Table } from \"baseui/table\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Common Cell Examples\nDESCRIPTION: This snippet renders the Example component to showcase common cell examples in a table. It sets the title to \"Common cell examples\" and the path to \"table-semantic/cells.tsx\". The <Cells /> component is responsible for rendering and displaying various cell examples.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-semantic.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n<Example title=\"Common cell examples\" path=\"table-semantic/cells.tsx\">\n  <Cells />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Importing Components in a React Layout for an Accessibility Blog Post\nDESCRIPTION: Code showing the import statements for a React-based blog post layout about accessibility, including Base Web components and example imports. This sets up the structure for the accessibility demonstration examples.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/screen-reader-improvements/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Layout from \"../../../components/layout\";\nimport Example from \"../../../components/example\";\nimport { Meta } from \"../../../components/blog\";\nimport metadata from \"./metadata.json\";\nimport { Button } from \"baseui/button\";\n\nimport Indeterminate from \"examples/checkbox/indeterminate.tsx\";\nimport CellNavigation from \"examples/table-grid/cell-navigation.tsx\";\nimport RadioMode from \"examples/button-group/radio-mode.tsx\";\nimport TreeViewBasic from \"examples/tree-view/basic.tsx\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Ordering Grid Cells - React\nDESCRIPTION: This snippet demonstrates the order prop, which allows for reordering of grid cells based on viewports, providing flexibility in responsive designs through CSS flexbox.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/layout-grid.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Example title=\"Order\" path=\"layout-grid/order.tsx\">\n  <OrderExample />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Exporting Layout Component in JavaScript\nDESCRIPTION: The snippet imports multiple components and exports the Layout component as the default export. There are no dependencies specified; it assumes components are correctly imported from the specified paths.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/dnd-list.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport Basic from \"examples/dnd-list/basic.tsx\";\nimport Stateless from \"examples/dnd-list/stateless.tsx\";\nimport Removable from \"examples/dnd-list/removable.tsx\";\nimport VaryingHeights from \"examples/dnd-list/varyingHeights.tsx\";\nimport CustomDragHandle from \"examples/dnd-list/customDragHandle.tsx\";\nimport OverrideLabel from \"examples/dnd-list/overrideLabel.tsx\";\n\nimport { StatefulList } from \"baseui/dnd-list\";\nimport * as ListExports from \"baseui/dnd-list\";\nimport Yard from \"../../components/yard/index\";\nimport dndListYardConfig from \"../../components/yard/config/dnd-list\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: V8 to V9 Component Mapping Table in React JSX\nDESCRIPTION: A JSX Table component that provides a reference mapping of typography components from v8 to v9, indicating which components have been aliased or completely renamed.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v9/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Table\n  columns={[\"Old\", \"New\", \"Note\"]}\n  data={[\n    [\"Display\", \"Display1\", \"Aliased\"],\n    [\"Label1\", \"Label3\", \"\"],\n    [\"Paragraph1\", \"Paragraph3\", \"\"],\n    [\"Caption1\", \"Paragraph4\", \"Aliased\"],\n    [\"Caption2\", \"Label4\", \"Aliased\"],\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with individual baseui rules\nDESCRIPTION: Example ESLint configuration showing how to add the baseui plugin and configure individual rules with warning severity.\nSOURCE: https://github.com/uber/baseweb/blob/main/packages/eslint-plugin-baseui/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json5\nCODE:\n```\n{\n  \"plugins\": [\n    // ...\n    \"baseui\",\n  ],\n  \"rules\": {\n    // ...\n    'baseui/deprecated-theme-api': \"warn\",\n    'baseui/deprecated-component-api': \"warn\",\n    'baseui/no-deep-imports': \"warn\",\n    'baseui/no-block-style': \"warn\",\n    'baseui/no-component-classname': \"warn\",\n    'baseui/no-shorthand-properties': \"warn\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Export for Data-Table Documentation\nDESCRIPTION: Sets the Layout component as the default export for the Data-Table documentation page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/data-table.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Import Components in TypeScript\nDESCRIPTION: Demonstrates the importation of examples and components required for the BaseWeb heading demonstration. It includes basic setup for the React components used in heading management. No additional dependencies are required apart from React and BaseWeb.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/heading.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Exports from \"../../components/exports\";\nimport Layout from \"../../components/layout\";\n\nimport * as HeadingExports from \"baseui/heading\";\n\nimport Basic from \"examples/heading/basic.tsx\";\nimport DecoupleStyles from \"examples/heading/decouple-styles.tsx\";\n\nimport { Heading, HeadingLevel } from \"baseui/heading\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Migrating Button Component - diff\nDESCRIPTION: This snippet showcases how to transition from using the 'square' shape property in a Button component to the new default implementation that supports square buttons intrinsically. No additional dependencies are needed, and the primary change is removing the 'shape' property.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v7/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- <Button shape=\\\"square\\\">\\n+ <Button>\\n    <Upload />\\n  </Button>\n```\n\n----------------------------------------\n\nTITLE: Exporting PageControl Elements\nDESCRIPTION: This snippet is responsible for exporting the PageControl components and their configurations. It allows other parts of the application to access and use these components. Continuous integration with Base Web components assures up-to-date element availability.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/page-control.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<Exports\\n  component={PageControlExports}\\n  title=\"PageControl exports\"\\n  path=\"baseui/page-control\"\\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Styling Without Theme Tokens in React\nDESCRIPTION: Example showing styling approach without using theme tokens, demonstrating potential maintainability issues with hardcoded values.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\";\nimport { useStyletron } from \"baseui\";\nimport { Card } from \"baseui/card\";\n\nexport default function Media({ left, right }) {\n  const [css] = useStyletron();\n  return (\n    <Card>\n      <div\n        className={css({\n          display: \"flex\",\n          fontSize: \"14px\",\n          lineHeight: \"1.25\",\n        })}\n      >\n        <div\n          className={css({\n            padding: \"8px\",\n          })}\n        >\n          {left}\n        </div>\n        <div\n          className={css({\n            padding: \"8px\",\n            borderLeft: \"solid 2px #eee\",\n          })}\n        >\n          {right}\n        </div>\n      </div>\n    </Card>\n  );\n```\n\n----------------------------------------\n\nTITLE: Importing A11y Components and Exports\nDESCRIPTION: Imports necessary components and exports for the accessibility validation module, including layout, example components, and A11y specific exports\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/unstable-a11y.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport * as A11yExports from \"baseui/a11y\";\n\nimport Wrapper from \"examples/unstable-a11y/wrapper.tsx\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Disabling CSS Animations for Snapshot Tests (CSS)\nDESCRIPTION: This CSS snippet disables transitions and animations to prevent flakiness in snapshot tests. It targets all elements and pseudo-elements and sets `transition`, `animation`, and `caret-color` properties to `none` or `transparent` respectively.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/visual-regression-testing/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n*, \n*::before,\n*::after {\n  -moz-transition: none !important;\n  transition: none !important;\n  -moz-animation: none !important;\n  animation: none !important;\n  caret-color: transparent !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Touch Scrolling with JavaScript\nDESCRIPTION: This JavaScript snippet disables touch scrolling by preventing default touch events.  It adds a touchstart event listener to the document and calls `e.preventDefault()` for each event. The listener must be non-passive to allow `preventDefault()` to work.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/drag-and-drop-list/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\"document.addEventListener(\\\"touchstart\\\", _, { passive: false });\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Component with Block\nDESCRIPTION: This example demonstrates how to use the Block component from Base Web to quickly create elements with styling that leverages theme tokens. Block provides an abstraction over CSS properties that maps to theme values.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\";\nimport { Block } from \"baseui/block\";\n\nexport default function Widget({ children }) {\n  return (\n    <Block backgroundColor=\"backgroundPrimary\" color=\"contentPrimary\">\n      {children}\n    </Block>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Divider API Exports Documentation\nDESCRIPTION: Renders the API documentation for the Divider component using the Exports documentation component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/divider.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Exports\n  component={DividerExports}\n  title=\"Divider exports\"\n  path=\"baseui/divider\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Registering a codemod in the CLI\nDESCRIPTION: Example showing how to add a new codemod to the MODS object in the CLI file, making it available as a command line option.\nSOURCE: https://github.com/uber/baseweb/blob/main/packages/baseui-codemods/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// src/cli.js\n\nimport {redToBlue, greenToPink} from './colorUpdate.js';\n\nconst MODS = {\n  // ...\n  colorUpdate: [\n    step('replace \"red\" with \"blue\"', redToBlue),\n    step('replace \"green\" with \"pink\"', greenToPink),\n  ],\n};\n\n// more CLI logic below\n```\n\n----------------------------------------\n\nTITLE: Exporting Layout Component\nDESCRIPTION: This code snippet exports the Layout component, implying that the current file represents a page or section that utilizes a specific layout structure. The Layout component likely provides a consistent structure for the page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tile.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"export default Layout;\"\n```\n\n----------------------------------------\n\nTITLE: Importing Components - React\nDESCRIPTION: This snippet demonstrates the import statements for various React components used in the project.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/timezone-picker.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport TimezonePicker from \"examples/timezonepicker/timezone-picker.tsx\";\n\nimport * as TimezonepickerExports from \"baseui/timezonepicker\";\n\nimport Yard from \"../../components/yard/index\";\nimport timezonepickerConfig from \"../../components/yard/config/timezonepicker\";\n```\n\n----------------------------------------\n\nTITLE: Exporting Timezone Picker Component - React\nDESCRIPTION: This snippet handles exporting the timezone picker component for external use, providing a structured format for the component's path and title.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/timezone-picker.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Exports\n  component={TimezonepickerExports}\n  title=\"Timezone Picker exports\"\n  path=\"baseui/timezonepicker\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Notification Component with Overrides in React\nDESCRIPTION: This snippet demonstrates how to use the Notification component from Base Web, with custom style overrides for the Body property. It illustrates how notifications can serve as informative banners in a UI. The component's Body style is adjusted to have its width automatically set.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/discover-more/versioning-policy.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Notification\n  overrides={{\n    Body: { style: { width: \"auto\" } },\n  }}\n>\n  The release schedule is offered as general guidance and may be adjusted by us\n  when necessary.\n</Notification>\n```\n\n----------------------------------------\n\nTITLE: Running a codemod with yarn link\nDESCRIPTION: Command showing how to run a linked codemod, simulating the end-user experience.\nSOURCE: https://github.com/uber/baseweb/blob/main/packages/baseui-codemods/README.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ baseui-codemods --dir=src --mod=colorUpdate\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Builder with Toggles Example\nDESCRIPTION: This snippet renders the Table Builder with toggles example. The title of the Example component is \"Table Builder with toggles\", and the path points to \"table-semantic/toggleable.tsx\". The Toggleable component implements the table builder and the toggling functionality.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-semantic.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<Example\n  title=\"Table Builder with toggles\"\n  path=\"table-semantic/toggleable.tsx\"\n>\n  <Toggleable />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Rendering Mobile Modal Snapshot with Custom Styling\nDESCRIPTION: JSX code for displaying a mobile-specific snapshot of a modal component with custom height constraints. This demonstrates how to present device-specific visual tests in documentation.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/visual-regression-testing/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<BlogImage\n  src={MobileModalPNG}\n  alt=\"A mobile phone sized snapshot with an open modal.\"\n  caption=\"An example of a mobile snapshot.\"\n  style={{\n    maxHeight: \"400px\",\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Resulting Theme Object Structure in JSON\nDESCRIPTION: This JSON snippet shows the structure of the resulting theme object after applying custom breakpoints and media queries. It includes breakpoint values and corresponding media query strings.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/responsive-web/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"breakpoints\": {\n    \"small\": 769\n    \"medium\": 1024,\n    \"large\": 1216,\n  },\n  \"mediaQuery\": {\n    \"small\": \"@media screen and (min-width: 769px)\"\n    \"medium\": \"@media screen and (min-width: 1024px)\",\n    \"large\": \"@media screen and (min-width: 1216px)\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modal Component with Paragraph Wrapping - React\nDESCRIPTION: This snippet demonstrates a Modal component implemented with Button for triggering visibility. It follows SEO practices by ensuring that text within the ModalBody is wrapped in a paragraph, aiding search engine visibility.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/seo.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from \"react\";\nimport { Button } from \"baseui/button\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  ModalButton,\n} from \"baseui/modal\";\nexport default () => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  function close() {\n    setIsOpen(false);\n  }\n  return (\n    <React.Fragment>\n      <Button onClick={() => setIsOpen(true)}>Open Modal</Button>\n      <Modal onClose={close} isOpen={isOpen}>\n        <ModalHeader>Hello world</ModalHeader>\n        <ModalBody $as=\"p\">\n          Proin ut dui sed metus pharetra hend rerit vel non mi. Nulla ornare\n          faucibus ex, non facilisis nisl. Maecenas aliquet mauris ut tempus.\n        </ModalBody>\n        <ModalFooter>\n          <ModalButton onClick={close}>Cancel</ModalButton>\n          <ModalButton onClick={close}>Okay</ModalButton>\n        </ModalFooter>\n      </Modal>\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: HTML RTL Direction Setup\nDESCRIPTION: This HTML snippet demonstrates how to set the direction of the document to right-to-left by adding the `dir` attribute to the `body` tag. This is crucial for mirroring the user interface for RTL languages.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/bidirectionality.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body dir=\"rtl\"></body>\n```\n\n----------------------------------------\n\nTITLE: Import Layout component in Javascript\nDESCRIPTION: This code snippet imports the Layout component from \"../../components/layout\" and the BlogImage component from \"../../components/blog\". It then exports the Layout component as the default export of the module, making it available for use in other parts of the application.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Layout from \"../../components/layout\";\nimport { BlogImage } from \"../../components/blog\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing Block Component and Related Modules in JavaScript\nDESCRIPTION: This snippet shows the necessary imports for the Block component documentation, including Notification, Example, Layout, and specific examples.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/block.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Notification, KIND } from \"baseui/notification\";\n\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport * as BlockExports from \"baseui/block\";\n\nimport Basic from \"examples/block/basic.tsx\";\nimport Responsive from \"examples/block/responsive.tsx\";\nimport Override from \"examples/block/override.tsx\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing Payment Card Components in React\nDESCRIPTION: Imports for various payment card examples and component configurations from Base Web library and local project files\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/payment-card.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { StatefulPaymentCard } from \"baseui/payment-card\";\n\nimport * as PaymentCardExports from \"baseui/payment-card\";\nimport * as InputExports from \"baseui/input\";\n```\n\n----------------------------------------\n\nTITLE: Disabling Touch Scrolling with CSS\nDESCRIPTION: This CSS snippet disables touch scrolling, which is useful to prevent conflicts between touch scrolling and drag-and-drop gestures. It utilizes the `touch-action` property to prevent the browser's default touch behavior.  This is the preferred approach if it works in all target browsers.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/drag-and-drop-list/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n\"touch-action: none;\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Skeleton Components - TypeScript\nDESCRIPTION: This snippet is responsible for exporting the Skeleton component and its variations for use in other parts of the application. It sets the title and path for proper documentation and referencing.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/skeleton.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<Exports\n  component={SkeletonExports}\n  title=\"Skeleton exports\"\n  path=\"baseui/skeleton\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing baseui-codemods globally\nDESCRIPTION: Command to install the baseui-codemods package globally using npm.\nSOURCE: https://github.com/uber/baseweb/blob/main/packages/baseui-codemods/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm i -g @uber-web-ui/baseui-codemods\n```\n\n----------------------------------------\n\nTITLE: Importing Layout and Notification Components in JavaScript\nDESCRIPTION: The snippet imports the Layout component from a relative path and the Notification component from Base Web. It exports the Layout component as the default export of the module. No additional dependencies are required beyond the specified imports.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/discover-more/versioning-policy.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Layout from \"../../components/layout\";\nimport { Notification } from \"baseui/notification\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Input Override with Emoji Prefix\nDESCRIPTION: Demonstrates adding a static emoji prefix to an input component using the Before override\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/phone-input/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst inputOverrides = {\n  Before: {\n    component: () => `🐨`,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Layout Export\nDESCRIPTION: Export statement that sets the Layout component as the default export for the page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/button-group.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport Meta Tag in HTML\nDESCRIPTION: This snippet shows how to set the viewport meta tag in the HTML head to properly size content based on device width. It sets the width to device-width, initial scale to 1, and prevents shrinking to fit.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/responsive-web/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<head> // or <Helmet>\n  <meta\n    name=\"viewport\"\n    content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n  />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Exporting Layout Component - React\nDESCRIPTION: This snippet imports a Layout component from a relative path and exports it as the default export. This structure allows for a reusable layout across different pages of the application.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/seo.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Layout from \"../../components/layout\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components\nDESCRIPTION: This snippet imports various components used for documentation layout and metadata. These components help structure the documentation page, provide SEO information, and render example code.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/accordion.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Exports from \"../../components/exports\";\nimport Layout from \"../../components/layout\";\nimport SEO from \"../../components/meta-seo\";\nimport Yard from \"../../components/yard/index\";\nimport accordionYardConfig from \"../../components/yard/config/accordion\";\n```\n\n----------------------------------------\n\nTITLE: Importing Toast Components in TypeScript\nDESCRIPTION: Import statements for Toast components and related utilities from BaseWeb library\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/toast.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Toast } from \"baseui/toast\";\nimport * as ToastExports from \"baseui/toast\";\n```\n\n----------------------------------------\n\nTITLE: Header Typography Table in React JSX\nDESCRIPTION: A JSX Table component showing the header typography values used for H1-H6 components in v9, displaying font tokens and their corresponding sizes, line heights, and weights.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v9/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Table\n  columns={[\"Name\", \"Value\"]}\n  data={[\n    [`font550`, `20px/28px/500`],\n    [`font650`, `24px/32px/500`],\n    [`font750`, `28px/36px/500`],\n    [`font850`, `32px/40px/500`],\n    [`font950`, `36px/44px/500`],\n    [`font1050`, `40px/52px/500`],\n  ]}\n/>\n<Caption>Read values as font-size/line-height/font-weight.</Caption>\n```\n\n----------------------------------------\n\nTITLE: Exporting HintDot Components - JSX\nDESCRIPTION: This snippet exports the HintDot components for external use, allowing other parts of the application to access the functionality of the HintDot badge.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/hint-dot.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Exports\n  component={HintDotExports}\n  title=\"HintDot exports\"\n  path=\"baseui/badge\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using useStyletron Hook for Styling Elements in Base Web\nDESCRIPTION: Example showing how to use the useStyletron hook to generate class names with theme-consistent styling. This approach is useful for styling arbitrary elements without creating new components.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/theming.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useStyletron } from \"baseui\";\n\nfunction App() {\n  const [css, theme] = useStyletron();\n  return (\n    <div\n      className={css({\n        color: theme.colors.accent,\n      })}\n    >\n      Hello\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Isolating Themed Styled Functions in Base Web\nDESCRIPTION: This snippet illustrates the practice of isolating `createThemedStyled` and `createThemedWithStyle` calls in a dedicated file to avoid duplicated import statements. It exports the themed `styled` and `withStyle` functions, making them reusable throughout the codebase. This promotes cleaner code and easier maintenance.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v8/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createThemedStyled,\n  createThemedWithStyle,\n} from \"baseui\";\n\ntype CustomTheme = { customColor: string };\nexport const styled = createThemedStyled<CustomTheme>();\nexport const withStyle =\n  createThemedWithStyle<CustomTheme>();\n```\n\n----------------------------------------\n\nTITLE: Rendering AspectRatioBox with Image\nDESCRIPTION: Demonstrates usage of AspectRatioBox component to maintain consistent layout during image loading, specifying aspect ratio and rendering an image within the component\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/responsive-web/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Example usage\n<AspectRatioBox aspectRatio={300 / 117}>\n  <AspectRatioBoxBody\n    as=\"img\"\n    src={assetUrl(\"/error-image.svg\")}\n    alt=\"Truck with scuba-gear on ocean floor with octopus and\\n         fishes behind it\"\n  />\n</AspectRatioBox>\n```\n\n----------------------------------------\n\nTITLE: Example Component for Styled Usage in Base Web\nDESCRIPTION: This snippet includes an Example component which showcases the usage of theme values within a styled component in Base Web. The rendered StyledBasic component demonstrates how to implement styling with theme variables.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/styled.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"Using theme values\" path=\"styled/basic.tsx\">\n  <StyledBasic />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Layout in JavaScript\nDESCRIPTION: This snippet sets the default export to the Layout component, suggesting that this is the primary component rendered or utilized within this file context.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/stepper.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Rendering CheatSheet Component in React\nDESCRIPTION: This snippet shows the usage of the CheatSheet component within the page content. It's placed inside a markdown-style header, indicating it's the main content of the page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/cheat-sheet.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n# Cheat Sheet\n\n<CheatSheet />\n```\n\n----------------------------------------\n\nTITLE: Pagination Export Configuration\nDESCRIPTION: Exports the default Layout component and sets up documentation for the Pagination component\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/pagination.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Exporting Mobile Header Components - JavaScript\nDESCRIPTION: This snippet exports the MobileHeader components for reuse in other parts of the application. It provides a structured way to access the various elements related to mobile headers defined in the BaseUI library.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/mobile-header.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Exports\n  component={MobileHeaderExports}\n  title=\"MobileHeader exports\"\n  path=\"baseui/mobile-header\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Example and Layout Components\nDESCRIPTION: Import utility components for documentation and layout rendering\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/toast.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\n```\n\n----------------------------------------\n\nTITLE: Importing Styled Components from Base Web\nDESCRIPTION: Shows how to import and reuse original styled components from Base Web for overrides.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/understanding-overrides.mdx#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { StyledLabel } from \"baseui/dnd-list\";\n```\n\n----------------------------------------\n\nTITLE: Exporting Icon Component with React.forwardRef in TypeScript\nDESCRIPTION: This snippet exports the icon component using React.forwardRef to allow refs to be passed to the SVG element. It explicitly types the ref as SVGSVGElement and the props as IconPropsT.\nSOURCE: https://github.com/uber/baseweb/blob/main/src/icon/icon-template.txt#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default React.forwardRef<SVGSVGElement, IconPropsT>(%%ICON_NAME%%);\n```\n\n----------------------------------------\n\nTITLE: Incrementing Base Web Version in package.json\nDESCRIPTION: Commands to increment the major, minor, or patch version in package.json. After running these commands, committing, and merging to main, CI will automatically publish the new version to npm if it's higher than the registry version.\nSOURCE: https://github.com/uber/baseweb/blob/main/PUBLISHING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm version major\nnpm version minor\nnpm version patch\n```\n\n----------------------------------------\n\nTITLE: Clamping Screenshot Dimensions with Playwright (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows how to use Playwright to clamp screenshot dimensions to a fixed width while capturing the maximum height of the page.  It utilizes Chrome Devtools Protocol to get the scroll height of the page, then uses `page.screenshot` to capture the image with specified clip dimensions. `VIEWPORT_WIDTH` and `viewport` variables are expected to be defined in the surrounding scope.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/visual-regression-testing/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Use Chrome Devtools Protocol to get the scroll height of the page.\nconst client = await page.target().createCDPSession();\nconst metrics = await client.send(\"Page.getLayoutMetrics\");\nconst height = Math.ceil(metrics.contentSize.height);\nconst image = await page.screenshot({\n  clip: {\n    x: 0,\n    y: 0,\n    width: VIEWPORT_WIDTH[viewport],\n    height: height,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Textarea Exports\nDESCRIPTION: This snippet utilizes the Exports component to display all exports from the `baseui/textarea` module. It provides information about the public API of the Textarea component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/textarea.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"<Exports\\n  component={TextareaExports}\\n  title=\\\"Textarea exports\\\"\\n  path=\\\"baseui/textarea\\\"\\n/>\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Layout Component as Default\nDESCRIPTION: This line sets the Layout component as the default export for this module.  This likely means the component imported as Layout will be used to wrap the content of this page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/table-semantic.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Rendering Exports Component for Layout Grid in Base Web (JSX)\nDESCRIPTION: This code snippet demonstrates how to use the Exports component to display exports from the layout-grid module in Base Web. It specifies the component, title, and path for the exports.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/layout-grid.mdx#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Exports\n  component={LayoutGridExports}\n  title=\"Layout Grid exports\"\n  path=\"baseui/layout-grid\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Typography Theme Variables in Styled Components\nDESCRIPTION: Example showing how to update direct references to typography theme variables in styled components when migrating from v8 to v9. The example demonstrates updating font300 to font200 to maintain the same 14px/20px/400 specification.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v9/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// old\n// font300 used to return 14px/20px/400\nconst StyledFoo = styled(\"div\", (props) => ({\n  ...props.$theme.typography.font300,\n}));\n\n// new\n// font200 now returns 14px/20px/400\nconst StyledFoo = styled(\"div\", (props) => ({\n  ...props.$theme.typography.font200,\n}));\n```\n\n----------------------------------------\n\nTITLE: Implementing Themed Button Styles with Styletron\nDESCRIPTION: Demonstrates how to use theme values to create dynamic button styles based on props in Styletron.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/getting-started-with-styletron/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst getButtonColor = (props) => {\n  const { colors } = props.$theme;\n  let color = colors.PRIMARY;\n  if (props.$primary) color = colors.PRIMARY;\n  if (props.$secondary) color = colors.SECONDARY;\n  return color;\n};\n\nconst Button = styled(\"button\", (props) => {\n  const color = getButtonColor(props);\n  const styles = getButtonStyles(color);\n  return {\n    ...styles,\n    \":after\": {\n      ...styles,\n      ...otherStyles,\n    },\n    \":hover:after\": {\n      ...hoverStyles,\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Button Component Snippet in VS Code\nDESCRIPTION: This code snippet is a VS Code snippet definition for the Base Button component. It outlines how to create a snippet that includes various component properties with customizable template fields for user inputs. It requires the VS Code snippet grammar and is meant for use in JavaScript or TypeScript React environments.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/vs-code-extension/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"Button\": {\"scope\": \"javascript,javascriptreact,typescript,typescriptreact\",\"prefix\": [\"Button component\"],\"description\": \"Base Button component.\",\"body\": [\"<Button\",\"  ${1:onClick={${2:() => alert(\\\"click\\\")}\\}}\",\"  ${3:startEnhancer={${4:undefined}\\}}\",\"  ${5:endEnhancer={${6:undefined}\\}}\",\"  ${7:disabled}\",\"  ${8:kind={${9|KIND.primary,KIND.secondary,KIND.tertiary,KIND.tertiary|}\\}}\",\"  ${10:size={${11|SIZE.default,SIZE.mini,SIZE.compact,SIZE.large|}\\}}\",\"  ${12:shape={${13|SHAPE.default,SHAPE.pill,SHAPE.round,SHAPE.square|}\\}}\",\"  ${14:isLoading}\",\"  ${15:isSelected}\",\">\",\"  ${16:Hello}\",\"</Button>\"]}}\n```\n\n----------------------------------------\n\nTITLE: Offset Notification Circle Example\nDESCRIPTION: This snippet provides another Example component for demonstrating the NotificationCircle badge with offset positioning, allowing for manual adjustments in placement.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/notification-circle.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Example title=\"Offset\" path=\"notification-circle/offset.tsx\">\n  <Offset />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Creating Visual Comparison Component with React\nDESCRIPTION: JSX code that implements a visual comparison between two images using ReactCompareImage. This component allows users to interactively swipe between before and after snapshots to visualize a regression.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/visual-regression-testing/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ReactCompareImage leftImage={LeftPNG} rightImage={RightPNG} />\n<Caption>\n  An example of two snapshots catching a regression. Swipe the divider back and\n  forth to see the difference.\n</Caption>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Export for the Dialog Documentation Page\nDESCRIPTION: Sets the Layout component as the default export for the dialog documentation page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/dialog.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring React Components for Blog Page\nDESCRIPTION: This code imports Layout and Posts components from their respective files, then exports the Layout as the default component. It also includes a Markdown header and renders the Posts component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Layout from \"../../components/layout\";\nimport Posts from \"../../components/posts\";\n\nexport default Layout;\n\n# Blog\n\n<Posts />\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component and Related Modules\nDESCRIPTION: Imports necessary modules for rendering and configuring the Link component, including Yard configuration and exports\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/link.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Yard from \"../../components/yard/index\";\nimport linkConfig from \"../../components/yard/config/link\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport * as LinkExports from \"baseui/link\";\n```\n\n----------------------------------------\n\nTITLE: Unreliable wait with page.waitForTimeout(ms)\nDESCRIPTION: This JavaScript code uses `page.waitForTimeout(250)` to pause the execution for 250 milliseconds. The text advises against using this, as it can introduce flakiness in tests due to its arbitrary nature. It is recommended to wait for specific elements or conditions on the page instead of using fixed timeouts.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/visual-regression-testing/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.waitForTimeout(250); // waits for 250ms before proceeding\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Export Documentation\nDESCRIPTION: This JSX snippet renders the Exports component which displays all exports from the Accordion module. This helps developers understand what components and utilities are available in the module.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/accordion.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Exports\n  component={AccordionExports}\n  title=\"Accordion exports\"\n  path=\"baseui/accordion\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Component Changelog Image\nDESCRIPTION: JSX code that renders an image showing a component's visual history through git snapshot changes. This illustrates how visual regression testing provides a visual changelog of component evolution over time.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/visual-regression-testing/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<BlogImage\n  src={ChangelogPNG}\n  alt=\"Viewing.\"\n  caption=\"Viewing the git history of a snapshot shows me the component's visual history.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Running Icon Generation Command in Base Web\nDESCRIPTION: Command to trigger the build process for all icons in the Base Web project. This command should be run after adding new SVG files to generate the corresponding React components.\nSOURCE: https://github.com/uber/baseweb/blob/main/src/icon/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn icon:generate\n```\n\n----------------------------------------\n\nTITLE: Importing Examples and Components\nDESCRIPTION: Shows imports for example components and layout utilities used for the documentation page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/dialog.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Exports from \"../../components/exports\";\nimport Layout from \"../../components/layout\";\n\nimport WithoutOverlay from \"examples/dialog/without-overlay.tsx\";\nimport WithBackgroundImage from \"examples/dialog/with-background-image.tsx\";\n\nimport Yard from \"../../components/yard/index\";\nimport dialogYardConfig from \"../../components/yard/config/dialog\";\n```\n\n----------------------------------------\n\nTITLE: Configuring SEO for AppNavBar Documentation\nDESCRIPTION: This JSX snippet sets up SEO metadata for the AppNavBar documentation page, including description and keywords.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/app-nav-bar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SEO\n  description=\"The shared navigation bar component enables users to orient and navigate different sections of applications reliably.\"\n  keywords=\"navigation, menu, app header, app navigation bar\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Theming with Styletron and React Context\nDESCRIPTION: Shows how to set up a theme provider using React Context and Styletron for consistent styling across components.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/getting-started-with-styletron/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { createContext } from \"react\";\nimport { createStyled } from \"styletron-react\";\nimport { driver, getInitialStyle } from \"styletron-standard\";\n\nconst { Consumer, Provider } = createContext();\n\nconst THEME = {\n  colors: {\n    PRIMARY: \"#276EF1\",\n    SECONDARY: \"#95A5A6\",\n    // Other colors\n  },\n};\n\nconst ThemeProvider = ({ children }) => (\n  <Provider value={THEME}>{children}</Provider>\n);\n\nconst wrapper = (StyledComponent) => (props) => (\n  <Consumer>\n    {(theme) => <StyledComponent {...props} $theme={theme} />}\n  </Consumer>\n);\n\nconst styled = createStyled({\n  wrapper,\n  getInitialStyle,\n  driver,\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Secondary Inline Badge example\nDESCRIPTION: Displays an example of a secondary inline badge with a descriptive title and path to the example file.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/badge.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"Secondary inline badge\" path=\"badge/secondary-inline.tsx\">\n  <SecondaryInline />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Rendering Blog Post Elements with JSX for Visual Testing Documentation\nDESCRIPTION: JSX code for rendering various blog elements including images, meta data, and comparison components. This snippet demonstrates how to use the imported components to create an interactive visual comparison between images showing UI component regressions.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/visual-regression-testing/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta data={metadata} />\n\n<BlogImage\n  src=\"https://i.imgur.com/X0jy3lO.png\"\n  alt=\"Two almost identical sheep standing in a verdant field.\"\n  caption=\"Don't count sheep. Test regressions.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Layout Export Configuration\nDESCRIPTION: Default export statement for the page layout.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/avatar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Styling a Button with Pseudo-elements in Styletron\nDESCRIPTION: Shows how to create a more complex button component using Styletron, including pseudo-elements and dynamic content based on props.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/getting-started-with-styletron/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Button = styled(\"button\", (props) => ({\n  background: \"transparent\",\n  border: \"4px solid #276EF1\",\n  borderTopLeftRadius: \"4px\",\n  borderTopRightRadius: \"4px\",\n  borderBottomRightRadius: \"4px\",\n  borderBottomLeftRadius: \"4px\",\n  color: \"#276EF1\",\n  cursor: \"pointer\",\n  fontWeight: \"bold\",\n  padding: \"8px 16px\",\n  position: \"relative\",\n  \":after\": {\n    background: \"#276EF1\",\n    bottom: 0,\n    color: \"#FFFFFF\",\n    content: `\"${props.children}\"`,\n    fontWeight: \"bold\",\n    left: 0,\n    padding: \"8px 16px\",\n    position: \"absolute\",\n    right: 0,\n    top: 0,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Rendering Example Snapshot Image in JSX\nDESCRIPTION: JSX code that displays a screenshot of a modal component using the BlogImage component. This demonstrates how to present visual snapshot examples in documentation with appropriate alt text and caption.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/visual-regression-testing/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<BlogImage\n  src={ExampleSnapshotPNG}\n  alt=\"An example snapshot of a modal.\"\n  caption=\"An example snapshot of a modal.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Component from Base Web\nDESCRIPTION: This snippet imports the Layout component from a relative path, enabling its usage within the current module. Ensure that the path is accurate to prevent import errors.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/discover-more/comparison.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Layout from \"../../components/layout\";\n```\n\n----------------------------------------\n\nTITLE: Example codemod execution\nDESCRIPTION: Example command showing how to run the v8Types codemod on the src directory.\nSOURCE: https://github.com/uber/baseweb/blob/main/packages/baseui-codemods/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ npx @uber-web-ui/baseui-codemods --dir=src --mod=v8Types\n```\n\n----------------------------------------\n\nTITLE: Import Error State Radio Example\nDESCRIPTION: This snippet imports the Error component from 'examples/radio/error.tsx'. This React component probably demonstrates the radio button's appearance and behavior when in an error state.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/radio.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport Error from \"examples/radio/error.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Metadata for Blog Post in React/JSX\nDESCRIPTION: Sets up the necessary imports for a blog post page, including Layout component, Meta component, and metadata. It also exports the Layout as the default export for the page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/open-source-engagement/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Layout from \"../../../components/layout\";\nimport { Meta } from \"../../../components/blog\";\nimport metadata from \"./metadata.json\";\n\nexport default Layout;\n\n<Meta data={metadata} />\n```\n\n----------------------------------------\n\nTITLE: Project setup for contributors\nDESCRIPTION: Command to install dependencies for contributing to the baseui-codemods project.\nSOURCE: https://github.com/uber/baseweb/blob/main/packages/baseui-codemods/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn install\n```\n\n----------------------------------------\n\nTITLE: Exporting NotificationCircle Component\nDESCRIPTION: This snippet exports the NotificationCircle component for usage in other parts of the application, defining its title and path for reference.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/notification-circle.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Exports\n  component={NotificationCircleExports}\n  title=\"NotificationCircle exports\"\n  path=\"baseui/badge\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Up File Uploader Basic Documentation with Yard Component\nDESCRIPTION: Configures the Yard component for interactive documentation of the FileUploaderBasic component with a placeholder height of 180 pixels.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/file-uploader-basic.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Yard placeholderHeight={180} {...fileUploaderBasicYardConfig} />\n```\n\n----------------------------------------\n\nTITLE: Installing React View with pnpm\nDESCRIPTION: Command to install React View package using pnpm package manager.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/introducing-react-view/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add react-view\n```\n\n----------------------------------------\n\nTITLE: Using Block with $style Override (Incorrect Approach)\nDESCRIPTION: This example shows an incorrect way to extend Block with additional CSS properties that aren't part of the Block API. The $style prop doesn't work with Block because it's not a styled component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\";\nimport { Block } from \"baseui/block\";\n\nexport default function Widget({ children }) {\n  return (\n    <Block\n      backgroundColor=\"backgroundPrimary\"\n      color=\"contentPrimary\"\n      $style={{ pointerEvents: \"none\" }}\n    >\n      {children}\n    </Block>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Country Code and Phone Code Tabular Data\nDESCRIPTION: Tabular data containing ISO country codes (2-letter), country names with local language variations, and international dialing codes. The data is formatted in a pipe-delimited structure with three columns: country code, country name, and phone code.\nSOURCE: https://github.com/uber/baseweb/blob/main/src/phone-input/README.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n| LS   | Lesotho                                              |       266 |\n| LT   | Lithuania (Lietuva)                                  |       370 |\n[...remaining rows...]\n```\n\n----------------------------------------\n\nTITLE: Rendering a Notification with Custom Styles using Base Web\nDESCRIPTION: This snippet shows how to render a Notification component from Base Web with specific overrides for styling. It also provides a warning message and guidance on using the useStyletron hook for applying CSS styles effectively.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/styled.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Notification, KIND } from \"baseui/notification\";\n\n<Notification\n  overrides={{ Body: { style: { width: \"auto\" } } }}\n  kind={KIND.warning}\n>\n  We recommend using the <a href=\"/components/use-styletron\">useStyletron</a>{\" \"}\n  hook to apply css styles to your html elements. It allows for simpler patterns\n  where not only elements can be reused, but the also the css definitions. See\n  the 'useStyletron' page for additional styletron-related information.\n</Notification>\n```\n\n----------------------------------------\n\nTITLE: Using Timezone Picker - React\nDESCRIPTION: This snippet shows how to use the Yard component with the timezone picker configuration in a JSX format. It provides a visual representation of the timezone picker.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/timezone-picker.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Yard placeholderHeight={48} {...timezonepickerConfig} />\n```\n\n----------------------------------------\n\nTITLE: Using Isolated Themed Styled Functions in Components\nDESCRIPTION: This snippet demonstrates how to import and utilize the themed `styled` and `withStyle` functions (exported from `themed-styled.jsx` in the prior snippet) within a component file. It defines `StyledA` and `StyledB` components using the custom themed styling, showcasing the reusability of the themed styling functions.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v8/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {styled, withStyle} from './themed-styled.jsx';\n\ntype PropsT = {};\n\nfunction StyledA = styled<PropsT>('div', props => {\n  return {\n    backgroundColor: props.$theme.customColor,\n  };\n});\n\nfunction StyledB = withStyle<typeof StyledA, PropsT>(StyledA, props => {\n  return {\n    color: props.$theme.customColor,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reusable Widget with useStyletron (Incorrect Approach)\nDESCRIPTION: This example demonstrates an incorrect way to create a reusable component with useStyletron by concatenating class names. This approach leads to non-deduped CSS and potential issues with style application order when using the atomic Styletron engine.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/guides/styling.mdx#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\";\nimport { useStyletron } from \"baseui\";\n\nexport default function Widget({ style, ...props }) {\n  const [css] = useStyletron();\n  return (\n    <div\n      {...props}\n      className={[\n        css({\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }),\n        css(style),\n      ].join(\" \")}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Icon Yard Component in JSX\nDESCRIPTION: The Yard component is integrated with a placeholder height and configuration specific to icons. It is purposed for visually indicating actions or options within the UI. This component is critical for dynamically displaying different icons based on configuration with no visible constraints on usage noted.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/icon.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Yard placeholderHeight={64} {...iconConfig} />\n```\n\n----------------------------------------\n\nTITLE: Importing Notification Components in React/TypeScript\nDESCRIPTION: Demonstrates importing various notification example components and the base Notification component from BaseWeb library\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/notification.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Notification } from \"baseui/notification\";\nimport * as NotificationExports from \"baseui/notification\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseWeb and Examples Components - JavaScript\nDESCRIPTION: This snippet imports various components such as Notification, Layout, and examples for demonstrating the Tabs Motion functionality in a web application using JavaScript and BaseWeb framework. It sets up necessary components and configurations for the examples shown in the documentation.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tabs-motion.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Notification, KIND } from \"baseui/notification\";\n\nimport Example from \"../../components/example\";\nimport Layout from \"../../components/layout\";\nimport Exports from \"../../components/exports\";\n\nimport Yard from \"../../components/yard/index\";\nimport tabsYardConfig from \"../../components/yard/config/tabs-motion\";\nimport tabYardConfig from \"../../components/yard/config/tab-motion\";\n\nimport BasicExample from \"examples/tabs-motion/basic.tsx\";\nimport KeysExample from \"examples/tabs-motion/keys.tsx\";\nimport KeyboardActivationExample from \"examples/tabs-motion/keyboard-activation.tsx\";\nimport VerticalOrientationExample from \"examples/tabs-motion/vertical-orientation.tsx\";\nimport FixedExample from \"examples/tabs-motion/fixed.tsx\";\nimport DisabledExample from \"examples/tabs-motion/disabled.tsx\";\nimport ArtworkExample from \"examples/tabs-motion/artwork.tsx\";\nimport RenderAllExample from \"examples/tabs-motion/renderAll.tsx\";\nimport AlignmentExample from \"examples/tabs-motion/alignment.tsx\";\nimport RefsExample from \"examples/tabs-motion/refs.tsx\";\nimport StatefulExample from \"examples/tabs-motion/stateful.tsx\";\nimport TabOverrideExample from \"examples/tabs-motion/tab-override.tsx\";\nimport EndEnhancer from \"examples/tabs-motion/enhancer.tsx\";\n\nimport * as TabsExports from \"baseui/tabs-motion\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Stateful Input with Select Prefix\nDESCRIPTION: Complex example of composing a Select component within an Input's Before override with custom styling\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/phone-input/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<StatefulInput\n  overrides={{\n    Before: {\n      component: () => {\n        return (\n          <Block width=\"200px\">\n            <StatefulSelect\n              options={[\n                { id: \"AliceBlue\", color: \"#F0F8FF\" },\n                { id: \"AntiqueWhite\", color: \"#FAEBD7\" },\n                { id: \"Aqua\", color: \"#00FFFF\" },\n                { id: \"Aquamarine\", color: \"#7FFFD4\" },\n                { id: \"Azure\", color: \"#F0FFFF\" },\n                { id: \"Beige\", color: \"#F5F5DC\" }\n              ]}\n              labelKey=\"id\"\n              valueKey=\"color\"\n            />\n          </Block>\n        );\n      },\n      style: {\n        width: \"100px\"\n      }\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Grid Components in JavaScript\nDESCRIPTION: The code snippet imports layout-related components and examples from the Base Web library and local files, setting up dependencies necessary for layout grid demonstrations. It exports a Layout component as the default module export.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/layout-grid.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Table } from \"baseui/table-semantic\";\nimport Example from \"../../components/example\";\nimport Exports from \"../../components/exports\";\nimport Layout from \"../../components/layout\";\n\nimport * as LayoutGridExports from \"baseui/layout-grid\";\n\nimport BasicExample from \"examples/layout-grid/basic.tsx\";\nimport SpanExample from \"examples/layout-grid/span.tsx\";\nimport ResponsiveExample from \"examples/layout-grid/responsive.tsx\";\nimport HideExample from \"examples/layout-grid/hide.tsx\";\nimport SkipExample from \"examples/layout-grid/skip.tsx\";\nimport SkipShrinkExample from \"examples/layout-grid/skip-shrink.tsx\";\nimport AlignExample from \"examples/layout-grid/align.tsx\";\nimport OrderExample from \"examples/layout-grid/order.tsx\";\nimport BehaviorExample from \"examples/layout-grid/behavior.tsx\";\nimport CustomExample from \"examples/layout-grid/custom.tsx\";\nimport UnitExample from \"examples/layout-grid/unit.tsx\";\nimport CompactExample from \"examples/layout-grid/compact.tsx\";\nimport OverridesExample from \"examples/layout-grid/overrides.tsx\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapsible Sidebar Layout in Base Web\nDESCRIPTION: This example demonstrates a layout with a collapsible sidebar navigation. The Layout structure includes a regular Header, and a nested Layout containing a collapsible Sidebar and Content area for the main page content.\nSOURCE: https://github.com/uber/baseweb/blob/main/src/layout/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport {Layout, Header, Sidebar, Content} from 'baseui/layout';\n\nexport default () => {\n  return (\n    <Layout>\n      <Header>Header content</Header>\n      <Layout>\n        <Sidebar collapsible>Menu content</Sidebar>\n        <Content>Main content placeholder</Content>\n      </Layout>\n    </Layout>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Layout in JavaScript\nDESCRIPTION: This snippet exports the default Layout component for the Breadcrumbs documentation page. It sets up the overall structure of the page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/breadcrumbs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Exporting Button Group Component API Documentation\nDESCRIPTION: Exports component that lists and documents all exports from the Button Group module with title and path information.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/button-group.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Exports\n  component={ButtonGroupExports}\n  title=\"ButtonGroup exports\"\n  path=\"baseui/button-group\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Button Group Example Component Usage\nDESCRIPTION: Example component demonstrating basic usage of the Button Group with a title and path to the source code.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/button-group.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"Basic usage\" path=\"button-group/basic.tsx\">\n  <Basic />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Creating a codemod implementation file\nDESCRIPTION: Example JavaScript module that exports functions for a codemod's steps, each performing specific transformations on the target directory.\nSOURCE: https://github.com/uber/baseweb/blob/main/packages/baseui-codemods/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// src/colorUpdate.js\n\nasync function redToBlue(options) {\n  // do some stuff with options.dir\n}\n\nasync function greenToPink(options) {\n  // do some stuff with options.dir\n}\n\nexport {redToBlue, greenToPink};\n```\n\n----------------------------------------\n\nTITLE: Importing Button Group Examples for Documentation\nDESCRIPTION: Import statements for various Button Group examples that demonstrate different usage patterns and configurations for the component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/button-group.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Basic from \"examples/button-group/basic.tsx\";\nimport Icon from \"examples/button-group/icon.tsx\";\nimport Enhancer from \"examples/button-group/enhancer.tsx\";\nimport RadioMode from \"examples/button-group/radio-mode.tsx\";\nimport CheckboxMode from \"examples/button-group/checkbox-mode.tsx\";\nimport Disabled from \"examples/button-group/disabled.tsx\";\nimport DisabledButton from \"examples/button-group/disabled-button.tsx\";\nimport Dropdown from \"examples/button-group/dropdown.tsx\";\nimport StatefulRadio from \"examples/button-group/stateful-radio.tsx\";\nimport StatefulCheckbox from \"examples/button-group/stateful-checkbox.tsx\";\nimport Wrappable from \"examples/button-group/wrappable.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Example Wrapper for Timezone Picker - React\nDESCRIPTION: This snippet creates an example wrapper for the timezone picker component, providing a title and path for the component used in documentation or testing.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/timezone-picker.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Example title=\"Timezone picker\" path=\"timezonepicker/timezone-picker.tsx\">\n  <TimezonePicker />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Card Yard Configuration Import\nDESCRIPTION: Import interactive configuration for the card component yard, allowing dynamic exploration of card properties\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/card.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Yard from \"../../components/yard/index\";\nimport cardYardConfig from \"../../components/yard/config/card\";\n```\n\n----------------------------------------\n\nTITLE: Installing eslint-plugin-baseui with npm or yarn\nDESCRIPTION: Commands to install eslint-plugin-baseui as a development dependency using either npm or yarn package managers.\nSOURCE: https://github.com/uber/baseweb/blob/main/packages/eslint-plugin-baseui/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# npm\nnpm install eslint-plugin-baseui --save-dev\n\n# yarn\nyarn add eslint-plugin-baseui --dev\n```\n\n----------------------------------------\n\nTITLE: Spinner Examples\nDESCRIPTION: Displays various examples of spinner usage in the application, showcasing different styles and functionalities through the Example component.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/spinner.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example title=\"Basic\" path=\"spinner/basic.tsx\">\n  <SpinnerBasic />\n</Example>\n\n<Example title=\"Sizes\" path=\"spinner/size.tsx\">\n  <SpinnerSize />\n</Example>\n\n<Example title=\"Element\" path=\"spinner/span.tsx\">\n  <SpinnerSpan />\n</Example>\n```\n\n----------------------------------------\n\nTITLE: Running a codemod with npx\nDESCRIPTION: Command syntax for running a codemod with npx, specifying the directory and which codemod to run.\nSOURCE: https://github.com/uber/baseweb/blob/main/packages/baseui-codemods/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npx @uber-web-ui/baseui-codemods --dir=<PATH_TO_CODE> --mod=<CODEMOD_NAME>\n```\n\n----------------------------------------\n\nTITLE: Extending the recommended baseui ESLint configuration\nDESCRIPTION: A simpler ESLint configuration that extends the recommended ruleset provided by the baseui plugin.\nSOURCE: https://github.com/uber/baseweb/blob/main/packages/eslint-plugin-baseui/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"plugin:baseui/recommended\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Base Web Extension Code Snippet Examples\nDESCRIPTION: List of available code snippets in the Base Web VS Code extension including component imports and React templates\nSOURCE: https://github.com/uber/baseweb/blob/main/packages/baseweb-vscode-extension/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `Button import`\n- `Button component`\n- `React import`\n- `React component`\n```\n\n----------------------------------------\n\nTITLE: Importing Yard and Tile Configuration\nDESCRIPTION: This code snippet imports the Yard component and tileConfig, likely used for visual representation and configuration of the Tile component within a design system documentation context. Yard is a component likely used to showcase the Tile component with different configurations.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tile.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"import Yard from \\\"../../components/yard/index\\\";\nimport tileConfig from \\\"../../components/yard/config/tile\\\";\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Tooltip Components - JSX\nDESCRIPTION: This snippet exports tooltip-related components for external use. It facilitates access to the tooltip utilities contained in the Base UI framework.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/tooltip.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Exports\n  component={TooltipExports}\n  title=\"Tooltip exports\"\n  path=\"baseui/tooltip\"\n  cheatsheet={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Countries Object Structure Definition\nDESCRIPTION: Defines the structure of the COUNTRIES object used for country selection, including country ISO, name, and dial code properties\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/phone-input.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCOUNTRIES: {\n  id: string,      // Country ISO\n  label: string,   // Country Name\n  dialCode: string // Country Dial Code\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Blog Post Layout in React\nDESCRIPTION: This code snippet demonstrates how to import necessary components and metadata for rendering a blog post layout in React. It includes imports for Layout, Meta, Code components, and metadata.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v11/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Layout from \"../../../components/layout\";\nimport { Meta } from \"../../../components/blog\";\nimport Code from \"../../../components/code\";\nimport metadata from \"./metadata.json\";\n\nexport default Layout;\n\n<Meta data={metadata} />\n```\n\n----------------------------------------\n\nTITLE: Display Typography Table in React JSX\nDESCRIPTION: A JSX Table component showing the display typography values used for Display components in v9, displaying font tokens and their corresponding sizes, line heights, and weights.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v9/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Table\n  columns={[\"Name\", \"Value\"]}\n  data={[\n    [`font1150`, `36px/44px/500`],\n    [`font1250`, `44px/52px/500`],\n    [`font1350`, `52px/64px/500`],\n    [`font1450`, `96px/112px/500`],\n  ]}\n/>\n<Caption>Read values as font-size/line-height/font-weight.</Caption>\n```\n\n----------------------------------------\n\nTITLE: Typography Components Mapping Table in React JSX\nDESCRIPTION: A JSX Table component showing how each typography theme value maps to a typography component in v9, displaying the component name, font token, and corresponding font properties.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v9/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Table\n  columns={[\"Component\", \"Font\", \"Value\"]}\n  data={[\n    [`Display1`, `font1450`, `96px/112px/500`],\n    [`Display2`, `font1350`, `52px/64px/500`],\n    [`Display3`, `font1250`, `44px/52px/500`],\n    [`Display4`, `font1150`, `36px/44px/500`],\n    [`H1`, `font1050`, `40px/52px/500`],\n    [`H2`, `font950`, `36px/44px/500`],\n    [`H3`, `font850`, `32px/40px/500`],\n    [`H4`, `font750`, `28px/36px/500`],\n    [`H5`, `font650`, `24px/32px/500`],\n    [`H6`, `font550`, `20px/28px/500`],\n    [`Label1`, `font450`, `18px/28px/500`],\n    [`Paragraph1`, `font400`, `18px/28px/400`],\n    [`Label2`, `font350`, `16px/24px/500`],\n    [`Paragraph2`, `font300`, `16px/24px/400`],\n    [`Label3`, `font250`, `14px/20px/500`],\n    [`Paragraph3`, `font200`, `14px/20px/400`],\n    [`Label4`, `font150`, `12px/20px/500`],\n    [`Paragraph4`, `font100`, `12px/20px/400`],\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Migrating Tab Component - diff\nDESCRIPTION: Requires migration from using the 'TabPanel' component to directly using the 'Tab' component for consistency and reducing unnecessary component layers. This change simplifies the tab structure under 'StatefulTabs'.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/blog/base-web-v7/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n<StatefulTabs initialState={{activeKey: '0'}}>\\n- <TabPanel title=\\\"Tab Link 1\\\">Tab 1 content</TabPanel>\\n+ <Tab title=\\\"Tab Link 1\\\">Tab 1 content</Tab>\\n</StatefulTabs>\n```\n\n----------------------------------------\n\nTITLE: Importing Combobox Dependencies in JavaScript/JSX\nDESCRIPTION: This snippet imports various components and examples needed for the Combobox documentation page. It includes layout components, yard configuration, and specific Combobox examples.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/combobox.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from \"../../components/example\";\nimport Exports from \"../../components/exports\";\nimport Layout from \"../../components/layout\";\nimport Yard from \"../../components/yard/index\";\n\nimport comboboxYardConfig from \"../../components/yard/config/combobox\";\n\nimport * as ComboboxExports from \"baseui/combobox\";\n\nimport AsyncOptions from \"examples/combobox/async-options.tsx\";\nimport FilteredOptions from \"examples/combobox/filtered-options.tsx\";\nimport ReplacementNode from \"examples/combobox/replacement-node.tsx\";\nimport InputOverrides from \"examples/combobox/input-overrides.tsx\";\nimport Focus from \"examples/combobox/focus.tsx\";\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Components Section (Markdown)\nDESCRIPTION: This markdown snippet indicates a section dedicated to components, specifically mentioning the Gallery component. The <Gallery /> tag suggests its inclusion and rendering within the context of the page.\nSOURCE: https://github.com/uber/baseweb/blob/main/documentation-site/pages/components/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Components\n\n<Gallery />\n```"
  }
]