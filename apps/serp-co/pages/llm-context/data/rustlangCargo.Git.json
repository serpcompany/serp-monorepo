[
  {
    "owner": "rust-lang",
    "repo": "cargo.git",
    "content": "TITLE: Creating a New Cargo Project\nDESCRIPTION: This snippet shows how to create a new Cargo project using the 'cargo new' command. It creates a binary program by default, but can be used to create a library with the '--lib' flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/getting-started/first-steps.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cargo new hello_world\n```\n\n----------------------------------------\n\nTITLE: Adding a Single Dependency in Cargo.toml\nDESCRIPTION: This snippet demonstrates how to add a single dependency to a Rust project's Cargo.toml file. It shows the correct format for specifying the crate name and version requirement.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ntime = \"0.1.12\"\n```\n\n----------------------------------------\n\nTITLE: Example Custom Build Script in Rust\nDESCRIPTION: This snippet demonstrates a basic build script that tells Cargo to rerun if a specific file changes and uses the cc crate to build and statically link a C file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-scripts.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    // Tell Cargo that if the given file changes, to rerun this build script.\n    println!(\"cargo::rerun-if-changed=src/hello.c\");\n    // Use the `cc` crate to build a C file and statically link it.\n    cc::Build::new()\n        .file(\"src/hello.c\")\n        .compile(\"hello\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maintenance Badge in Cargo.toml\nDESCRIPTION: Shows how to specify package maintenance status using the badges section, which can indicate the maintenance status of a crate.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_22\n\nLANGUAGE: toml\nCODE:\n```\n[badges]\nmaintenance = { status = \"...\" }\n```\n\n----------------------------------------\n\nTITLE: Feature-Based Dependencies Configuration\nDESCRIPTION: Example of configuring optional dependencies and features in Cargo.toml.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/specifying-dependencies.md#2025-04-21_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nfoo = { version = \"1.0\", optional = true }\nbar = { version = \"1.0\", optional = true }\n\n[features]\nfancy-feature = [\"foo\", \"bar\"]\n```\n\n----------------------------------------\n\nTITLE: Importing Renamed Dependencies in Rust\nDESCRIPTION: Demonstrates how to import renamed dependencies in Rust source code.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/specifying-dependencies.md#2025-04-21_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Cargo Package Index Entry in JavaScript\nDESCRIPTION: This code snippet provides a comprehensive example of the JSON structure for a package entry in Cargo's index. It includes all possible fields with detailed comments explaining their purpose and constraints.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/registry-index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // The name of the package.\n    // This must only contain alphanumeric, `-`, or `_` characters.\n    \"name\": \"foo\",\n    // The version of the package this row is describing.\n    // This must be a valid version number according to the Semantic\n    // Versioning 2.0.0 spec at https://semver.org/.\n    \"vers\": \"0.1.0\",\n    // Array of direct dependencies of the package.\n    \"deps\": [\n        {\n            // Name of the dependency.\n            // If the dependency is renamed from the original package name,\n            // this is the new name. The original package name is stored in\n            // the `package` field.\n            \"name\": \"rand\",\n            // The SemVer requirement for this dependency.\n            // This must be a valid version requirement defined at\n            // https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html.\n            \"req\": \"^0.6\",\n            // Array of features (as strings) enabled for this dependency.\n            // May be omitted since Cargo 1.84.\n            \"features\": [\"i128_support\"],\n            // Boolean of whether or not this is an optional dependency.\n            // Since Cargo 1.84, defaults to `false` if not specified.\n            \"optional\": false,\n            // Boolean of whether or not default features are enabled.\n            // Since Cargo 1.84, defaults to `true` if not specified.\n            \"default_features\": true,\n            // The target platform for the dependency.\n            // If not specified or `null`, it is not a target dependency.\n            // Otherwise, a string such as \"cfg(windows)\".\n            \"target\": null,\n            // The dependency kind.\n            // \"dev\", \"build\", or \"normal\".\n            // If not specified or `null`, it defaults to \"normal\".\n            \"kind\": \"normal\",\n            // The URL of the index of the registry where this dependency is\n            // from as a string. If not specified or `null`, it is assumed the\n            // dependency is in the current registry.\n            \"registry\": null,\n            // If the dependency is renamed, this is a string of the actual\n            // package name. If not specified or `null`, this dependency is not\n            // renamed.\n            \"package\": null,\n        }\n    ],\n    // A SHA256 checksum of the `.crate` file.\n    \"cksum\": \"d867001db0e2b6e0496f9fac96930e2d42233ecd3ca0413e0753d4c7695d289c\",\n    // Set of features defined for the package.\n    // Each feature maps to an array of features or dependencies it enables.\n    // May be omitted since Cargo 1.84.\n    \"features\": {\n        \"extras\": [\"rand/simd_support\"]\n    },\n    // Boolean of whether or not this version has been yanked.\n    \"yanked\": false,\n    // The `links` string value from the package's manifest, or null if not\n    // specified. This field is optional and defaults to null.\n    \"links\": null,\n    // An unsigned 32-bit integer value indicating the schema version of this\n    // entry.\n    //\n    // If this is not specified, it should be interpreted as the default of 1.\n    //\n    // Cargo (starting with version 1.51) will ignore versions it does not\n    // recognize. This provides a method to safely introduce changes to index\n    // entries and allow older versions of cargo to ignore newer entries it\n    // doesn't understand. Versions older than 1.51 ignore this field, and\n    // thus may misinterpret the meaning of the index entry.\n    //\n    // The current values are:\n    //\n    // * 1: The schema as documented here, not including newer additions.\n    //      This is honored in Rust version 1.51 and newer.\n    // * 2: The addition of the `features2` field.\n    //      This is honored in Rust version 1.60 and newer.\n    \"v\": 2,\n    // This optional field contains features with new, extended syntax.\n    // Specifically, namespaced features (`dep:`) and weak dependencies\n    // (`pkg?/feat`).\n    //\n    // This is separated from `features` because versions older than 1.19\n    // will fail to load due to not being able to parse the new syntax, even\n    // with a `Cargo.lock` file.\n    //\n    // Cargo will merge any values listed here with the \"features\" field.\n    //\n    // If this field is included, the \"v\" field should be set to at least 2.\n    //\n    // Registries are not required to use this field for extended feature\n    // syntax, they are allowed to include those in the \"features\" field.\n    // Using this is only necessary if the registry wants to support cargo\n    // versions older than 1.19, which in practice is only crates.io since\n    // those older versions do not support other registries.\n    \"features2\": {\n        \"serde\": [\"dep:serde\", \"chrono?/serde\"]\n    }\n    // The minimal supported Rust version (optional)\n    // This must be a valid version requirement without an operator (e.g. no `=`)\n    \"rust_version\": \"1.60\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Binary Package with Cargo\nDESCRIPTION: This command creates a new binary package named 'hello_world' using Cargo. It initializes a new git repository by default.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/creating-a-new-project.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cargo new hello_world --bin\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace Path in Cargo.toml\nDESCRIPTION: Defines the workspace root path for a package member when not in a subdirectory of the workspace.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\nworkspace = \"path/to/workspace/root\"\n```\n\n----------------------------------------\n\nTITLE: Default Rust Program in main.rs\nDESCRIPTION: This snippet shows the default 'Hello, world!' program that Cargo generates in the src/main.rs file. It defines the main function which prints a greeting to the console.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/getting-started/first-steps.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling a Cargo Project\nDESCRIPTION: This snippet demonstrates how to compile a Cargo project using the 'cargo build' command. It shows the output of the compilation process.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/getting-started/first-steps.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ cargo build\n   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n```\n\n----------------------------------------\n\nTITLE: Target-Specific Build Dependencies in Cargo.toml\nDESCRIPTION: Shows how to define platform-specific build dependencies that are only built when the host platform matches the specified target.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/specifying-dependencies.md#2025-04-21_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[target.'cfg(unix)'.build-dependencies]\ncc = \"1.0.3\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating Cargo Package Directory Structure\nDESCRIPTION: This snippet shows the typical directory and file layout for a Cargo package. It includes the main configuration files, source code directory, and directories for tests, benchmarks, and examples.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/project-layout.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── Cargo.lock\n├── Cargo.toml\n├── src/\n│   ├── lib.rs\n│   ├── main.rs\n│   └── bin/\n│       ├── named-executable.rs\n│       ├── another-executable.rs\n│       └── multi-file-executable/\n│           ├── main.rs\n│           └── some_module.rs\n├── benches/\n│   ├── large-input.rs\n│   └── multi-file-bench/\n│       ├── main.rs\n│       └── bench_module.rs\n├── examples/\n│   ├── simple.rs\n│   └── multi-file-example/\n│       ├── main.rs\n│       └── ex_module.rs\n└── tests/\n    ├── some-integration-tests.rs\n    └── multi-file-test/\n        ├── main.rs\n        └── test_module.rs\n```\n\n----------------------------------------\n\nTITLE: Default Main Function in Rust\nDESCRIPTION: This is the default main.rs file generated by Cargo for a new Rust project. It contains a simple 'Hello, world!' program.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/creating-a-new-project.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Tests with No Tests Present\nDESCRIPTION: This example demonstrates running the 'cargo test' command in a package that doesn't contain any tests. The output shows the compilation process and indicates that no tests were run.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/tests.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cargo test\n   Compiling regex v1.5.0 (https://github.com/rust-lang/regex.git#9f9f693)\n   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n     Running target/test/hello_world-9c2b65bbb79eabce\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\n----------------------------------------\n\nTITLE: Building a Rust Package with Release Optimizations\nDESCRIPTION: Command to build a Rust package with optimizations enabled for release builds.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo Settings using TOML\nDESCRIPTION: Complete example of Cargo's configuration options including build settings, profiles, registry settings, dependencies, and environment variables. Shows the full range of available configuration keys and their accepted values.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/config.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\npaths = [\"/path/to/override\"] # path dependency overrides\n\n[alias]     # command aliases\nb = \"build\"\nc = \"check\"\nt = \"test\"\nr = \"run\"\nrr = \"run --release\"\nrecursive_example = \"rr --example recursions\"\nspace_example = [\"run\", \"--release\", \"--\", \"\\\"command list\\\"\"]\n\n[build]\njobs = 1                      # number of parallel jobs, defaults to # of CPUs\nrustc = \"rustc\"               # the rust compiler tool\nrustc-wrapper = \"…\"           # run this wrapper instead of `rustc`\nrustc-workspace-wrapper = \"…\" # run this wrapper instead of `rustc` for workspace members\nrustdoc = \"rustdoc\"           # the doc generator tool\ntarget = \"triple\"             # build for the target triple (ignored by `cargo install`)\ntarget-dir = \"target\"         # path of where to place all generated artifacts\nrustflags = [\"…\", \"…\"]        # custom flags to pass to all compiler invocations\nrustdocflags = [\"…\", \"…\"]     # custom flags to pass to rustdoc\nincremental = true            # whether or not to enable incremental compilation\ndep-info-basedir = \"…\"        # path for the base directory for targets in depfiles\n\n[credential-alias]\n# Provides a way to define aliases for credential providers.\nmy-alias = [\"/usr/bin/cargo-credential-example\", \"--argument\", \"value\", \"--flag\"]\n\n[doc]\nbrowser = \"chromium\"          # browser to use with `cargo doc --open`,\n                              # overrides the `BROWSER` environment variable\n\n[env]\n# Set ENV_VAR_NAME=value for any process run by Cargo\nENV_VAR_NAME = \"value\"\n# Set even if already present in environment\nENV_VAR_NAME_2 = { value = \"value\", force = true }\n# `value` is relative to the parent of `.cargo/config.toml`, env var will be the full absolute path\nENV_VAR_NAME_3 = { value = \"relative/path\", relative = true }\n\n[future-incompat-report]\nfrequency = 'always' # when to display a notification about a future incompat report\n\n[cargo-new]\nvcs = \"none\"              # VCS to use ('git', 'hg', 'pijul', 'fossil', 'none')\n\n[http]\ndebug = false               # HTTP debugging\nproxy = \"host:port\"         # HTTP proxy in libcurl format\nssl-version = \"tlsv1.3\"     # TLS version to use\nssl-version.max = \"tlsv1.3\" # maximum TLS version\nssl-version.min = \"tlsv1.1\" # minimum TLS version\ntimeout = 30                # timeout for each HTTP request, in seconds\nlow-speed-limit = 10        # network timeout threshold (bytes/sec)\ncainfo = \"cert.pem\"         # path to Certificate Authority (CA) bundle\ncheck-revoke = true         # check for SSL certificate revocation\nmultiplexing = true         # HTTP/2 multiplexing\nuser-agent = \"…\"            # the user-agent header\n\n[install]\nroot = \"/some/path\"         # `cargo install` destination directory\n\n[net]\nretry = 3                   # network retries\ngit-fetch-with-cli = true   # use the `git` executable for git operations\noffline = true              # do not access the network\n\n[net.ssh]\nknown-hosts = [\"...\"]       # known SSH host keys\n\n[patch.<registry>]\n# Same keys as for [patch] in Cargo.toml\n\n[profile.<name>]         # Modify profile settings via config.\ninherits = \"dev\"         # Inherits settings from [profile.dev].\nopt-level = 0            # Optimization level.\ndebug = true             # Include debug info.\nsplit-debuginfo = '...'  # Debug info splitting behavior.\nstrip = \"none\"           # Removes symbols or debuginfo.\ndebug-assertions = true  # Enables debug assertions.\noverflow-checks = true   # Enables runtime integer overflow checks.\nlto = false              # Sets link-time optimization.\npanic = 'unwind'         # The panic strategy.\nincremental = true       # Incremental compilation.\ncodegen-units = 16       # Number of code generation units.\nrpath = false            # Sets the rpath linking option.\n[profile.<name>.build-override]  # Overrides build-script settings.\n# Same keys for a normal profile.\n[profile.<name>.package.<name>]  # Override profile for a package.\n# Same keys for a normal profile (minus `panic`, `lto`, and `rpath`).\n\n[resolver]\nincompatible-rust-versions = \"allow\"  # Specifies how resolver reacts to these\n\n[registries.<name>]  # registries other than crates.io\nindex = \"…\"          # URL of the registry index\ntoken = \"…\"          # authentication token for the registry\ncredential-provider = \"cargo:token\" # The credential provider for this registry.\n\n[registries.crates-io]\nprotocol = \"sparse\"  # The protocol to use to access crates.io.\n\n[registry]\ndefault = \"…\"        # name of the default registry\ntoken = \"…\"          # authentication token for crates.io\ncredential-provider = \"cargo:token\"           # The credential provider for crates.io.\nglobal-credential-providers = [\"cargo:token\"] # The credential providers to use by default.\n\n[source.<name>]      # source definition and replacement\nreplace-with = \"…\"   # replace this source with the given named source\ndirectory = \"…\"      # path to a directory source\nregistry = \"…\"       # URL to a registry source\nlocal-registry = \"…\" # path to a local registry source\ngit = \"…\"            # URL of a git repository source\nbranch = \"…\"         # branch name for the git repository\ntag = \"…\"            # tag name for the git repository\nrev = \"…\"            # revision for the git repository\n\n[target.<triple>]\nlinker = \"…\"              # linker to use\nrunner = \"…\"              # wrapper to run executables\nrustflags = [\"…\", \"…\"]    # custom flags for `rustc`\nrustdocflags = [\"…\", \"…\"] # custom flags for `rustdoc`\n\n[target.<cfg>]\nrunner = \"…\"            # wrapper to run executables\nrustflags = [\"…\", \"…\"]  # custom flags for `rustc`\n\n[target.<triple>.<links>] # `links` build script override\nrustc-link-lib = [\"foo\"]\nrustc-link-search = [\"/path/to/foo\"]\nrustc-flags = \"-L /some/path\"\nrustc-cfg = ['key=\"value\"']\nrustc-env = {key = \"value\"}\nrustc-cdylib-link-arg = [\"…\"]\nmetadata_key1 = \"value\"\nmetadata_key2 = \"value\"\n\n[term]\nquiet = false                    # whether cargo output is quiet\nverbose = false                  # whether cargo provides verbose output\ncolor = 'auto'                   # whether cargo colorizes output\nhyperlinks = true                # whether cargo inserts links into output\nunicode = true                   # whether cargo can render output using non-ASCII unicode characters\nprogress.when = 'auto'           # whether cargo shows progress bar\nprogress.width = 80              # width of progress bar\nprogress.term-integration = true # whether cargo reports progress to terminal emulator\n```\n\n----------------------------------------\n\nTITLE: Building a Rust Package with Cargo\nDESCRIPTION: This snippet demonstrates how to use the 'cargo build' command to compile the regex package and its dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/working-on-an-existing-project.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cargo build\n   Compiling regex v1.5.0 (file:///path/to/package/regex)\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Selection in Dependencies\nDESCRIPTION: Example of how to specify conditional features for a dependency, including disabling default features and cherry-picking individual features.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/specifying-dependencies.md#2025-04-21_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies.awesome]\nversion = \"1.3.5\"\ndefault-features = false\nfeatures = [\"secure-password\", \"civet\"]\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional Dependencies in Cargo.toml\nDESCRIPTION: Demonstrates how to declare an optional dependency. The 'gif' package is marked as optional, which implicitly creates a feature of the same name.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ngif = { version = \"0.11.1\", optional = true }\n```\n\n----------------------------------------\n\nTITLE: Cargo Environment Variables List\nDESCRIPTION: List of environment variables that can be used to customize Cargo's behavior, including paths, compilation settings, tool configurations, and HTTP settings.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/environment-variables.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `CARGO_LOG` --- Cargo uses the [`tracing`] crate to display debug log messages.\n* `CARGO_HOME` --- Cargo maintains a local cache of the registry index and of git checkouts of crates.\n* `CARGO_TARGET_DIR` --- Location of where to place all generated artifacts.\n* `CARGO` --- Path for Cargo to forward instead of its auto-detected path.\n* `RUSTC` --- Specifies alternative compiler instead of default `rustc`.\n* `RUSTC_WRAPPER` --- Wrapper command to execute instead of direct `rustc` invocation.\n* `RUSTC_WORKSPACE_WRAPPER` --- Workspace-specific wrapper for `rustc` execution.\n* `RUSTDOC` --- Alternative `rustdoc` instance to use.\n* `RUSTDOCFLAGS` --- Custom flags for `rustdoc` invocations.\n* `CARGO_ENCODED_RUSTDOCFLAGS` --- Unit Separator delimited flags for `rustdoc`.\n* `RUSTFLAGS` --- Custom flags for compiler invocations.\n* `CARGO_ENCODED_RUSTFLAGS` --- Unit Separator delimited compiler flags.\n* `CARGO_INCREMENTAL` --- Controls incremental compilation.\n* `CARGO_CACHE_RUSTC_INFO` --- Controls caching of compiler version information.\n* `HTTPS_PROXY` or `https_proxy` or `http_proxy` --- HTTP proxy configuration.\n* `HTTP_TIMEOUT` --- HTTP timeout settings.\n* `TERM` --- Terminal settings for progress bar.\n* `BROWSER` --- Web browser specification for documentation.\n* `RUSTFMT` --- Alternative `rustfmt` instance specification.\n```\n\n----------------------------------------\n\nTITLE: Edition Field Configuration in Cargo.toml\nDESCRIPTION: This snippet demonstrates how to set the Rust Edition for a package. The edition field affects which Rust Edition your package is compiled with and applies to all targets in the package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\nedition = '2024'\n```\n\n----------------------------------------\n\nTITLE: Specifying a Dependency from Another Registry in Cargo.toml\nDESCRIPTION: This example demonstrates how to specify a dependency from a registry other than crates.io. The 'registry' key is set to the name of the custom registry.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/specifying-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n----------------------------------------\n\nTITLE: Specifying a Git Dependency with Branch in Cargo.toml\nDESCRIPTION: This snippet shows how to specify a git dependency using a specific branch. The 'branch' key is used to indicate which branch to use.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/specifying-dependencies.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nregex = { git = \"https://github.com/rust-lang/regex.git\", branch = \"next\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI for Rust Projects\nDESCRIPTION: A GitLab CI configuration that builds and tests a Rust project using both stable and nightly Rust channels. The nightly build is allowed to fail without causing the entire pipeline to fail.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/continuous-integration.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  - build\n\nrust-latest:\n  stage: build\n  image: rust:latest\n  script:\n    - cargo build --verbose\n    - cargo test --verbose\n\nrust-nightly:\n  stage: build\n  image: rustlang/rust:nightly\n  script:\n    - cargo build --verbose\n    - cargo test --verbose\n  allow_failure: true\n```\n\n----------------------------------------\n\nTITLE: Basic Cargo.toml with Git Dependency\nDESCRIPTION: A complete Cargo.toml manifest showing a package with a Git dependency on the regex library without specifying a revision. Cargo will resolve this to a specific commit and record it in Cargo.lock.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/cargo-toml-vs-cargo-lock.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\n\n[dependencies]\nregex = { git = \"https://github.com/rust-lang/regex.git\" }\n```\n\n----------------------------------------\n\nTITLE: Specifying a Basic Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to specify a basic dependency on the 'time' crate from crates.io. The version string '0.1.12' represents the version range >=0.1.12, <0.2.0.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/specifying-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ntime = \"0.1.12\"\n```\n\n----------------------------------------\n\nTITLE: Building a Local Package with Cargo in Bash\nDESCRIPTION: Simple command to build a local Rust package and all of its dependencies using the default debug profile.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Building Optimized Release\nDESCRIPTION: Command to build the package with release optimizations enabled, producing optimized artifacts suitable for deployment.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-build.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Viewing Cargo Project Structure\nDESCRIPTION: This snippet demonstrates the structure of a newly created Cargo project using the 'tree' command. It shows the default file structure including the Cargo.toml file and src directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/getting-started/first-steps.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cd hello_world\n$ tree .\n.\n├── Cargo.toml\n└── src\n    └── main.rs\n\n1 directory, 2 files\n```\n\n----------------------------------------\n\nTITLE: Grouping Optional Dependencies in Cargo.toml\nDESCRIPTION: Shows how to group multiple optional dependencies under a single feature. The 'avif' feature enables two optional dependencies required for AVIF support.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nravif = { version = \"0.6.3\", optional = true }\nrgb = { version = \"0.8.25\", optional = true }\n\n[features]\navif = [\"dep:ravif\", \"dep:rgb\"]\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Test with Filtering and Thread Control\nDESCRIPTION: Example of using cargo test with filter and thread count arguments. This command filters tests with 'foo' in their name and runs them on 3 threads in parallel.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-test.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo test foo -- --test-threads 3\n```\n\n----------------------------------------\n\nTITLE: Example Cargo.toml Manifest File\nDESCRIPTION: This is the default Cargo.toml file generated for a new Rust project. It contains metadata about the package including name, version, and Rust edition.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/creating-a-new-project.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\nedition = \"2024\"\n\n[dependencies]\n```\n\n----------------------------------------\n\nTITLE: Compiling a Rust Project with Cargo\nDESCRIPTION: This command compiles the Rust project using Cargo in debug mode. It shows the compilation process output.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/creating-a-new-project.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ cargo build\n   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Features in Cargo.toml\nDESCRIPTION: Demonstrates how to define a simple feature named 'webp' in the [features] section of Cargo.toml. This feature can be used for conditional compilation of WebP image support.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[features]\n# Defines a feature named `webp` that does not enable any other features.\nwebp = []\n```\n\n----------------------------------------\n\nTITLE: Configuring Package-Specific Profile Overrides in Cargo.toml\nDESCRIPTION: Examples of overriding profile settings for specific packages, including setting a higher optimization level for a named package and all dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/profiles.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[profile.dev.package.foo]\nopt-level = 3\n\n[profile.dev.package.\"*\"]\nopt-level = 2\n```\n\n----------------------------------------\n\nTITLE: Patching Dependency with Local Path in Cargo.toml\nDESCRIPTION: Cargo.toml configuration showing how to override a dependency with a local path using the [patch] section.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/overriding-dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[patch.crates-io]\nuuid = { path = \"../path/to/uuid\" }\n```\n\n----------------------------------------\n\nTITLE: Working with Binary Crate Using Different Versions\nDESCRIPTION: Cargo.toml showing how different parts of the dependency tree can use different major versions of the same crate during migration.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/overriding-dependencies.md#2025-04-21_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"my-binary\"\nversion = \"0.1.0\"\n\n[dependencies]\nmy-library = { git = 'https://example.com/git/my-library' }\nuuid = \"1.0\"\n\n[patch.crates-io]\nuuid = { git = 'https://github.com/uuid-rs/uuid.git', branch = '2.0.0' }\n```\n\n----------------------------------------\n\nTITLE: Building Basic Rust Package\nDESCRIPTION: Command to build the local package and all of its dependencies using the default debug settings.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-build.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Adding a regular dependency with cargo add\nDESCRIPTION: Example of how to add the regex crate as a dependency to a Rust project using cargo add command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-add.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo add regex\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Lint Levels in Cargo.toml\nDESCRIPTION: Shows how to override default lint levels for Rust code using the lints section. Includes basic and expanded syntax for lint configuration.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_20\n\nLANGUAGE: toml\nCODE:\n```\n[lints.rust]\nunsafe_code = \"forbid\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[lints.rust]\nunsafe_code = { level = \"forbid\", priority = 0 }\n```\n\n----------------------------------------\n\nTITLE: Building in Offline Mode with Cargo (Rust)\nDESCRIPTION: Prevents Cargo from accessing the network. It will attempt to proceed without the network if possible, using only locally downloaded crates.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\ncargo build --offline\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Dependencies Configuration\nDESCRIPTION: Examples of configuring platform-specific dependencies using cfg syntax and target-specific sections.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/specifying-dependencies.md#2025-04-21_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[target.'cfg(windows)'.dependencies]\nwinhttp = \"0.4.0\"\n\n[target.'cfg(unix)'.dependencies]\nopenssl = \"1.0.1\"\n\n[target.'cfg(target_arch = \"x86\")'.dependencies]\nnative-i686 = { path = \"native/i686\" }\n\n[target.'cfg(target_arch = \"x86_64\")'.dependencies]\nnative-x86_64 = { path = \"native/x86_64\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies in Cargo.toml with Git Repository\nDESCRIPTION: A basic Cargo.toml manifest file that defines a package named 'hello_world' with a dependency on the regex library from a GitHub repository. This example shows how to specify a Git dependency without pinning to a specific revision.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/cargo-toml-vs-cargo-lock.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\n\n[dependencies]\nregex = { git = \"https://github.com/rust-lang/regex.git\" }\n```\n\n----------------------------------------\n\nTITLE: Viewing Project Structure with Tree Command\nDESCRIPTION: This command displays the directory structure of the newly created Rust project, showing the Cargo.toml file and src directory containing main.rs.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/creating-a-new-project.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cd hello_world\n$ tree .\n.\n├── Cargo.toml\n└── src\n    └── main.rs\n\n1 directory, 2 files\n```\n\n----------------------------------------\n\nTITLE: Creating a Binary Cargo Package with cargo init\nDESCRIPTION: This example demonstrates how to create a binary Cargo package in the current directory using the cargo init command. This will generate a new Cargo manifest and, if needed, a sample src/main.rs file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-init.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo init\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Patches in Cargo.toml\nDESCRIPTION: Demonstrates how to use the [patch] section to override dependencies with alternative sources. Shows patching both crates.io packages and git repositories.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/overriding-dependencies.md#2025-04-21_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[patch.crates-io]\nfoo = { git = 'https://github.com/example/foo.git' }\nbar = { path = 'my/local/bar' }\n\n[dependencies.baz]\ngit = 'https://github.com/example/baz.git'\n\n[patch.'https://github.com/example/baz']\nbaz = { git = 'https://github.com/example/patched-baz.git', branch = 'my-branch' }\n```\n\n----------------------------------------\n\nTITLE: Installing Rust and Cargo on Linux/macOS using rustup\nDESCRIPTION: Command to download and execute the rustup installation script on Linux and macOS systems. This single command will install both Rust and Cargo package manager.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/getting-started/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncurl https://sh.rustup.rs -sSf | sh\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Dependencies in Cargo.toml\nDESCRIPTION: This example shows how to add multiple dependencies to a Cargo.toml file, including the package metadata. It demonstrates the correct structure for specifying multiple crates and their version requirements.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\nedition = \"2024\"\n\n[dependencies]\ntime = \"0.1.12\"\nregex = \"0.1.41\"\n```\n\n----------------------------------------\n\nTITLE: Basic Cargo Add Command Syntax\nDESCRIPTION: Shows the three main syntax patterns for adding dependencies using cargo-add: basic crate addition, path-based dependency, and git-based dependency.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-add.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo add [options] crate...\ncargo add [options] --path path\ncargo add [options] --git url [crate...]\n```\n\n----------------------------------------\n\nTITLE: Cargo Configuration File Example\nDESCRIPTION: Example showing the standard Cargo package manifest filename (Cargo.toml) used for configuration and dependency management. This is part of explaining the naming convention for Cargo's configuration files.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nCargo.toml\n```\n\n----------------------------------------\n\nTITLE: Using the --features flag with cargo bench\nDESCRIPTION: This option allows enabling specific features for the benchmarking process. Features can be specified as a space or comma separated list, and workspace member features can be enabled with package-name/feature-name syntax.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n-F features\n```\n\nLANGUAGE: shell\nCODE:\n```\n--features features\n```\n\n----------------------------------------\n\nTITLE: Using cargo doc command syntax\nDESCRIPTION: Shows the basic syntax for using the cargo doc command, which builds documentation for a Rust package and its dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-doc.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo doc [_options_]\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenSSL Vendoring in Build Scripts\nDESCRIPTION: Shows how openssl-sys conditionally builds OpenSSL from source when the vendored feature is enabled. This allows users to choose between system-installed libraries and bundled versions.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nif let Some(openssl_dir) = env::var_os(\"OPENSSL_DIR\") {\n    println!(\"cargo:rustc-link-search=native={}/lib\", openssl_dir.to_string_lossy());\n}\n\n#[cfg(feature = \"vendored\")]\n{\n    // Build from local source\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resolver Version 2 in Cargo.toml\nDESCRIPTION: Shows how to specify resolver version 2 in Cargo.toml to enable enhanced feature resolution behavior.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features.md#2025-04-21_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"my-package\"\nversion = \"1.0.0\"\nresolver = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Specifying a Git Repository Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to depend on a library located in a git repository. The 'git' key specifies the URL of the repository.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/specifying-dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nregex = { git = \"https://github.com/rust-lang/regex.git\" }\n```\n\n----------------------------------------\n\nTITLE: Compiling a Rust Project in Release Mode\nDESCRIPTION: This command compiles the Rust project in release mode, which includes optimizations for better performance but longer compilation time.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/creating-a-new-project.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ cargo build --release\n   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by Name\nDESCRIPTION: Example of running only tests whose names match a specific filter string, useful for focusing on a subset of tests.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-test.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo test name_filter\n```\n\n----------------------------------------\n\nTITLE: Package Description Field in Cargo.toml\nDESCRIPTION: This snippet shows how to provide a short description for the package, which will be displayed on crates.io. The description should be plain text rather than Markdown and is required for publishing to crates.io.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\ndescription = \"A short description of my package\"\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running with Cargo Run\nDESCRIPTION: This snippet demonstrates how to use 'cargo run' to compile and run a Cargo project in one step. It shows the output of both the compilation and execution processes.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/getting-started/first-steps.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ cargo run\n     Fresh hello_world v0.1.0 (file:///path/to/package/hello_world)\n   Running `target/hello_world`\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Integration Tests in Rust\nDESCRIPTION: This snippet shows how to use the CARGO_BIN_EXE_<name> environment variable in an integration test to locate the executable being tested. It utilizes the env macro from the Rust standard library.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-test.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nenv!(\"CARGO_BIN_EXE_<name>\")\n```\n\n----------------------------------------\n\nTITLE: Adding dependencies with specific features enabled\nDESCRIPTION: Example of how to add serde and serde_json crates while enabling the 'derive' feature for serde, which allows for automatic serialization/deserialization code generation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-add.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncargo add serde serde_json -F serde/derive\n```\n\n----------------------------------------\n\nTITLE: Updating All Dependencies with Cargo in Rust\nDESCRIPTION: This command updates all dependencies in the Cargo.lock file to their latest compatible versions based on the specifications in Cargo.toml.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-update.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo update\n```\n\n----------------------------------------\n\nTITLE: Using a Regex Dependency in Rust\nDESCRIPTION: This Rust code snippet demonstrates how to use the regex crate after adding it as a dependency. It shows importing the Regex type, creating a new Regex instance, and using it to match a date string.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse regex::Regex;\n\nfn main() {\n    let re = Regex::new(r\"^\\d{4}-\\d{2}-\\d{2}$\").unwrap();\n    println!(\"Did our date match? {}\", re.is_match(\"2014-01-01\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cargo with Default Settings\nDESCRIPTION: This command builds the local package and runs its main target, assuming only one binary is present.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-run.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Package ID Specification Grammar Definition\nDESCRIPTION: Formal grammar definition for Package ID Specifications in Cargo. Defines the syntax for specifying package names, versions, and source locations including registry, git, and path-based dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/pkgid-spec.md#2025-04-21_snippet_0\n\nLANGUAGE: notrust\nCODE:\n```\nspec := pkgname |\n        [ kind \"+\" ] proto \"://\" hostname-and-path [ \"?\" query] [ \"#\" ( pkgname | semver ) ]\nquery = ( \"branch\" | \"tag\" | \"rev\" ) \"=\" ref\npkgname := name [ (\"@\" | \":\" ) semver ]\nsemver := digits [ \".\" digits [ \".\" digits [ \"-\" prerelease ] [ \"+\" build ]]]\n\nkind = \"registry\" | \"git\" | \"path\"\nproto := \"http\" | \"git\" | \"file\" | ...\n```\n\n----------------------------------------\n\nTITLE: Basic Cargo Run Command Syntax\nDESCRIPTION: Basic syntax for running cargo run command with optional arguments. Arguments after -- are passed to the binary being run.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-run.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run [_options_] [-- _args_]\n```\n\n----------------------------------------\n\nTITLE: Defining Rust Version Requirement in Cargo.toml\nDESCRIPTION: Example showing how to specify the minimum supported Rust version in a package's Cargo.toml file. The rust-version field must be a bare version number with at least one component, without semver operators or pre-release identifiers.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/rust-version.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\nrust-version = \"1.56\"\n```\n\n----------------------------------------\n\nTITLE: Basic Package Section in Cargo.toml\nDESCRIPTION: This snippet shows the minimal required configuration for a Cargo.toml manifest file with the package section. It defines a package named 'hello_world' with version '0.1.0', following semantic versioning principles.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"hello_world\" # the name of the package\nversion = \"0.1.0\"    # the current version, obeying semver\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Dev Profile in Cargo.toml\nDESCRIPTION: Default settings for the 'dev' profile used for normal development and debugging. It specifies various compilation options like optimization level, debug info, and code generation units.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/profiles.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[profile.dev]\nopt-level = 0\ndebug = true\nsplit-debuginfo = '...'\nstrip = \"none\"\ndebug-assertions = true\noverflow-checks = true\nlto = false\npanic = 'unwind'\nincremental = true\ncodegen-units = 256\nrpath = false\n```\n\n----------------------------------------\n\nTITLE: Virtual Workspace Configuration\nDESCRIPTION: Configuration for a virtual workspace without a root package, including workspace member definition and resolver version.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/workspaces.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# [PROJECT_DIR]/Cargo.toml\n[workspace]\nmembers = [\"hello_world\"]\nresolver = \"3\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n# [PROJECT_DIR]/hello_world/Cargo.toml\n[package]\nname = \"hello_world\" # the name of the package\nversion = \"0.1.0\"    # the current version, obeying semver\nedition = \"2024\"     # the edition, will have no effect on a resolver used in the workspace\n```\n\n----------------------------------------\n\nTITLE: Adding Specific Version Dependency in Rust\nDESCRIPTION: Shows how to add a specific version (5.x) of the nom crate as a dependency.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-add.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo add nom@5\n```\n\n----------------------------------------\n\nTITLE: Git Dependencies Configuration in TOML\nDESCRIPTION: Examples of configuring Git dependencies in Cargo.toml, including specifying commits, tags, and branch references. Also shows invalid configurations to avoid.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/specifying-dependencies.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\nregex = { git = \"https://github.com/rust-lang/regex\" }\nregex = { git = \"https://github.com/rust-lang/regex.git\" }\n\n# a commit with a particular tag\nregex = { git = \"https://github.com/rust-lang/regex.git\", tag = \"1.10.3\" }\n\n# a commit by its SHA1 hash\nregex = { git = \"https://github.com/rust-lang/regex.git\", rev = \"0c0990399270277832fbb5b91a1fa118e6f63dba\" }\n\n# HEAD commit of PR 493\nregex = { git = \"https://github.com/rust-lang/regex.git\", rev = \"refs/pull/493/head\" }\n\n# INVALID EXAMPLES\n\n# specifying the commit after # ignores the commit ID and generates a warning\nregex = { git = \"https://github.com/rust-lang/regex.git#4c59b70\" }\n\n# git and path cannot be used at the same time\nregex = { git = \"https://github.com/rust-lang/regex.git#4c59b70\", path = \"../regex\" }\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Run Command\nDESCRIPTION: Demonstrates the basic syntax for running the 'cargo run' command. This command runs the main target of the local package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-run.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Dependency in Rust\nDESCRIPTION: Shows how to add the regex crate as a basic dependency to a Rust project.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-add.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo add regex\n```\n\n----------------------------------------\n\nTITLE: Basic Cargo Build Example\nDESCRIPTION: Simple command to build the local package and all of its dependencies\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-build.txt#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Enabling Dependency Features in Cargo.toml\nDESCRIPTION: Illustrates how to enable specific features of a dependency. This example enables the 'derive' feature of the 'serde' package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\n# Enables the `derive` feature of serde.\nserde = { version = \"1.0.118\", features = [\"derive\"] }\n```\n\n----------------------------------------\n\nTITLE: Accessing Cargo Environment Variables in Rust\nDESCRIPTION: Demonstrates how to access Cargo-provided environment variables in Rust code using the env! macro. This example shows how to retrieve the package version, but the same pattern applies to all Cargo environment variables.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/environment-variables.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet version = env!(\"CARGO_PKG_VERSION\");\n```\n\n----------------------------------------\n\nTITLE: Executing Cargo Locate Project Command in Rust\nDESCRIPTION: This command prints the path to the Cargo.toml file in JSON format, searching upwards from the current directory. It can be used to locate the project manifest or workspace root.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-locate-project.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo locate-project\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Dependencies in Cargo.toml\nDESCRIPTION: Demonstrates how to specify build dependencies in Cargo.toml for use in build scripts.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/specifying-dependencies.md#2025-04-21_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[build-dependencies]\ncc = \"1.0.3\"\n```\n\n----------------------------------------\n\nTITLE: Installing a Package from crates.io with Cargo\nDESCRIPTION: Command to install or upgrade a package named 'ripgrep' from the crates.io registry.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-install.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo install ripgrep\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Features in Cargo Commands\nDESCRIPTION: Various ways to specify multiple features with the --features flag in Cargo 1.39, including using quotes, commas, or multiple flags.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\n# Using quotes to specify multiple features\ncargo build --features \"a b\"\n\n# Using commas to specify multiple features\ncargo build --features a,b\n\n# Using multiple --features flags\ncargo build --features a --features b\n```\n\n----------------------------------------\n\nTITLE: Creating Package Archive\nDESCRIPTION: Example of creating a compressed .crate file of the current package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-package.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncargo package\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Git Repository Dependencies in Cargo.toml\nDESCRIPTION: This example demonstrates specifying multiple dependencies from the same git repository. Cargo will find the Cargo.toml files for each crate within the repository.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/specifying-dependencies.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nregex-lite   = { git = \"https://github.com/rust-lang/regex.git\" }\nregex-syntax = { git = \"https://github.com/rust-lang/regex.git\" }\n```\n\n----------------------------------------\n\nTITLE: Build Dependencies Configuration in TOML\nDESCRIPTION: Example of declaring build dependencies in Cargo.toml file, showing how to specify dependencies that will only be used during the build process.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-scripts.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[build-dependencies]\ncc = \"1.0.46\"\n```\n\n----------------------------------------\n\nTITLE: Cargo New Command Syntax\nDESCRIPTION: The basic syntax format for the cargo new command, which requires a path argument and accepts various options.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-new.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo new [_options_] _path_\n```\n\n----------------------------------------\n\nTITLE: Running a Cargo Package with Arguments\nDESCRIPTION: Example of how to run a Cargo package with arguments passed to both Cargo and the binary.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-run.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run [options] [-- args]\n```\n\n----------------------------------------\n\nTITLE: Configuring CircleCI for Rust Projects\nDESCRIPTION: A basic CircleCI configuration that uses a Docker image with Rust installed to check out the code and run cargo test. The configuration uses CircleCI version 2.1.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/continuous-integration.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\njobs:\n  build:\n    docker:\n      # check https://circleci.com/developer/images/image/cimg/rust#image-tags for latest\n      - image: cimg/rust:1.77.2\n    steps:\n      - checkout\n      - run: cargo test\n```\n\n----------------------------------------\n\nTITLE: Configuring Alternate Registry in TOML\nDESCRIPTION: Demonstrates how to add an alternate registry to the .cargo/config.toml file. This configuration specifies the name and index URL of the registry.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/registries.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[registries]\nmy-registry = { index = \"https://my-intranet:8080/git/index\" }\n```\n\n----------------------------------------\n\nTITLE: Renaming Dependencies in Cargo.toml\nDESCRIPTION: Shows how to rename dependencies using the package key to support multiple versions or avoid naming conflicts.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/specifying-dependencies.md#2025-04-21_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project.git\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\n----------------------------------------\n\nTITLE: Basic Dependency Tree Example in Rust\nDESCRIPTION: Example output showing a simple project's dependency tree, including the rand package and its nested dependencies. Shows deduplication with (*) markers.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-tree.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmyproject v0.1.0 (/myproject)\n└── rand v0.7.3\n    ├── getrandom v0.1.14\n    │   ├── cfg-if v0.1.10\n    │   └── libc v0.2.68\n    ├── libc v0.2.68 (*)\n    ├── rand_chacha v0.2.2\n    │   ├── ppv-lite86 v0.2.6\n    │   └── rand_core v0.5.1\n    │       └── getrandom v0.1.14 (*)\n    └── rand_core v0.5.1 (*)\n[build-dependencies]\n└── cc v1.0.50\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Links in Cargo.toml\nDESCRIPTION: Manifest configuration to declare that a package links to a native library named 'foo'. This requires a build script that uses rustc-link-lib instruction.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-scripts.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\nlinks = \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Installing a Package from crates.io in Rust\nDESCRIPTION: This command installs or upgrades the 'ripgrep' package from crates.io using Cargo.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-install.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install ripgrep\n```\n\n----------------------------------------\n\nTITLE: Displaying Test Output with Nocapture Option\nDESCRIPTION: Example showing how to recover test output that is normally hidden by the Rust test harness, useful for debugging test execution.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-test.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo test -- --nocapture\n```\n\n----------------------------------------\n\nTITLE: Conditional Module Inclusion in Rust\nDESCRIPTION: Shows how to use cfg attributes to conditionally include a module based on whether a feature is enabled. This example demonstrates including a 'webp' module when the 'webp' feature is active.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// This conditionally includes a module which implements WEBP support.\n#[cfg(feature = \"webp\")]\npub mod webp;\n```\n\n----------------------------------------\n\nTITLE: Adding a specific version of a dependency\nDESCRIPTION: Example of how to add a specific version (version 5) of the nom crate as a dependency to a Rust project.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-add.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo add nom@5\n```\n\n----------------------------------------\n\nTITLE: Debugging Cargo with LLDB\nDESCRIPTION: Set of commands showing how to use LLDB debugger with Cargo, including setting breakpoints and running with arguments.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/writing.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nlldb /path/to/my/cargo/target/debug/cargo\nb generate_root_units\nr check\n```\n\n----------------------------------------\n\nTITLE: Cargo Package Command List\nDESCRIPTION: List of core Cargo package management commands with documentation links. Includes commands for project initialization, package installation, project creation, package search, and uninstallation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/package-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Package Commands\n* [cargo init](cargo-init.md)\n* [cargo install](cargo-install.md)\n* [cargo new](cargo-new.md)\n* [cargo search](cargo-search.md)\n* [cargo uninstall](cargo-uninstall.md)\n```\n\n----------------------------------------\n\nTITLE: Setting Package License in Cargo.toml\nDESCRIPTION: Defines the SPDX 2.3 license expression for the package, supporting single or multiple licenses with AND/OR operators.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\nlicense = \"MIT OR Apache-2.0\"\n```\n\n----------------------------------------\n\nTITLE: Using cargo generate-lockfile Command\nDESCRIPTION: Basic syntax for using the cargo generate-lockfile command to create or update a lockfile for a Rust package or workspace.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-generate-lockfile.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo generate-lockfile [options]\n```\n\n----------------------------------------\n\nTITLE: Cargo Metadata JSON Structure\nDESCRIPTION: Defines the JSON schema for Cargo's metadata output, including dependency graph nodes, workspace configuration, and build settings. Contains information about package dependencies, features, target directories and workspace metadata.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-metadata.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"resolve\": {\n        \"nodes\": [\n            {\n                \"id\": \"file:///path/to/my-package#0.1.0\",\n                \"dependencies\": [\n                    \"https://github.com/rust-lang/crates.io-index#bitflags@1.0.4\"\n                ],\n                \"deps\": [\n                    {\n                        \"name\": \"bitflags\",\n                        \"pkg\": \"https://github.com/rust-lang/crates.io-index#bitflags@1.0.4\",\n                        \"dep_kinds\": [\n                            {\n                                \"kind\": null,\n                                \"target\": \"cfg(windows)\"\n                            }\n                        ]\n                    }\n                ],\n                \"features\": [\n                    \"default\"\n                ]\n            }\n        ],\n        \"root\": \"file:///path/to/my-package#0.1.0\"\n    },\n    \"target_directory\": \"/path/to/my-package/target\",\n    \"build_directory\": \"/path/to/my-package/build-dir\",\n    \"version\": 1,\n    \"workspace_root\": \"/path/to/my-package\",\n    \"metadata\": {\n        \"docs\": {\n            \"rs\": {\n                \"all-features\": true\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Precedence for Log Levels in log Crate\nDESCRIPTION: Demonstrates how the log crate implements feature precedence to handle mutually-exclusive compile-time log level features. It uses cfg-if to select the highest enabled log level when multiple are specified.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\ncfg_if! {\n    if #[cfg(feature = \"max_level_off\")] {\n        const MAX_LEVEL: LevelFilter = LevelFilter::Off;\n    } else if #[cfg(feature = \"max_level_error\")] {\n        const MAX_LEVEL: LevelFilter = LevelFilter::Error;\n    } else if #[cfg(feature = \"max_level_warn\")] {\n        const MAX_LEVEL: LevelFilter = LevelFilter::Warn;\n    } else if #[cfg(feature = \"max_level_info\")] {\n        const MAX_LEVEL: LevelFilter = LevelFilter::Info;\n    } else if #[cfg(feature = \"max_level_debug\")] {\n        const MAX_LEVEL: LevelFilter = LevelFilter::Debug;\n    } else if #[cfg(feature = \"max_level_trace\")] {\n        const MAX_LEVEL: LevelFilter = LevelFilter::Trace;\n    } else {\n        const MAX_LEVEL: LevelFilter = LevelFilter::Trace;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building with Optimizations in Cargo (Rust)\nDESCRIPTION: Builds the package and all of its dependencies with optimizations enabled.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Creating a Binary Cargo Package (Rust/Cargo)\nDESCRIPTION: This example demonstrates how to use the 'cargo new' command to create a new binary Cargo package in a specified directory. The command will generate a basic project structure with a Cargo.toml manifest, a sample source file, and a VCS ignore file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-new.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo new foo\n```\n\n----------------------------------------\n\nTITLE: Logging in to crates.io via Cargo CLI\nDESCRIPTION: This snippet demonstrates how to log in to crates.io using the Cargo CLI. It involves running the 'cargo login' command and entering the API token obtained from crates.io.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/publishing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo login\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nplease paste the API Token found on https://crates.io/me below\nabcdefghijklmnopqrstuvwxyz012345\n```\n\n----------------------------------------\n\nTITLE: Workspace Members and Exclude Configuration\nDESCRIPTION: Example showing how to specify workspace members and exclude certain paths using glob patterns.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/workspaces.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nmembers = [\"member1\", \"path/to/member2\", \"crates/*\"]\nexclude = [\"crates/foo\", \"path/to/other\"]\n```\n\n----------------------------------------\n\nTITLE: Workspace Dependencies Configuration\nDESCRIPTION: Example showing how to define and inherit workspace-level dependencies in member packages.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/workspaces.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n# [PROJECT_DIR]/Cargo.toml\n[workspace]\nmembers = [\"bar\"]\n\n[workspace.dependencies]\ncc = \"1.0.73\"\nrand = \"0.8.5\"\nregex = { version = \"1.6.0\", default-features = false, features = [\"std\"] }\n```\n\nLANGUAGE: toml\nCODE:\n```\n# [PROJECT_DIR]/bar/Cargo.toml\n[package]\nname = \"bar\"\nversion = \"0.2.0\"\n\n[dependencies]\nregex = { workspace = true, features = [\"unicode\"] }\n\n[build-dependencies]\ncc.workspace = true\n\n[dev-dependencies]\nrand.workspace = true\n```\n\n----------------------------------------\n\nTITLE: Inspecting Package from crates.io\nDESCRIPTION: Example command showing how to inspect the serde package from the default crates.io registry.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-info.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo info serde\n```\n\n----------------------------------------\n\nTITLE: Updating All Dependencies with Cargo Update in Rust\nDESCRIPTION: This command updates all dependencies in the Cargo.lock file to their latest versions. If the lockfile doesn't exist, it will be created with the latest available versions.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-update.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo update\n```\n\n----------------------------------------\n\nTITLE: Optimized Release Build Example\nDESCRIPTION: Command to build with optimizations enabled for release mode\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-build.txt#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Controlling Test Threads with Jobs Option\nDESCRIPTION: Example demonstrating how to control both build jobs and test threads using separate options for compilation and test execution.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-test.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo test -j 2 -- --test-threads=2\n```\n\n----------------------------------------\n\nTITLE: Setting a Dependency to a Specific Version with Cargo in Rust\nDESCRIPTION: This command updates the 'foo' dependency to the exact version 1.2.3, regardless of the version constraints in Cargo.toml. The --precise flag ensures an exact version match.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-update.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo update foo --precise 1.2.3\n```\n\n----------------------------------------\n\nTITLE: Creating a Binary Cargo Package in Rust\nDESCRIPTION: This command creates a new binary Cargo package named 'foo' in the current directory. It initializes a new project with a default structure including a Cargo.toml manifest, a sample source file, and a VCS ignore file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-new.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo new foo\n```\n\n----------------------------------------\n\nTITLE: Using Keep-Going with No-Fail-Fast for Comprehensive Testing\nDESCRIPTION: Two-step approach to building and running as many tests as possible without stopping at failures, by separating compilation and test execution.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-test.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --tests --keep-going\ncargo test --tests --no-fail-fast\n```\n\n----------------------------------------\n\nTITLE: Basic Test Execution\nDESCRIPTION: Example of running all unit and integration tests in the current package\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-test.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Verifying Minimum Supported Rust Version (MSRV) in GitHub Actions\nDESCRIPTION: A GitHub Actions job configuration that checks if the specified rust-version in a package's Cargo.toml is correct by using cargo-hack to verify compatibility with the declared MSRV.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/continuous-integration.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  msrv:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: taiki-e/install-action@cargo-hack\n    - run: cargo hack check --rust-version --workspace --all-targets --ignore-private\n```\n\n----------------------------------------\n\nTITLE: Building Package Documentation with Cargo\nDESCRIPTION: Example command showing how to build the local package documentation and its dependencies, with output going to the target/doc directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-doc.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo doc\n```\n\n----------------------------------------\n\nTITLE: Basic Cargo Check Usage\nDESCRIPTION: Demonstrates the basic usage of cargo check command to verify the local package for errors without generating code.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-check.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo check\n```\n\n----------------------------------------\n\nTITLE: Setting Default Features in Cargo.toml\nDESCRIPTION: Shows how to specify default features that are enabled unless explicitly disabled. This example sets 'ico' and 'webp' as default features.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[features]\ndefault = [\"ico\", \"webp\"]\nbmp = []\npng = []\nico = [\"bmp\", \"png\"]\nwebp = []\n```\n\n----------------------------------------\n\nTITLE: Disabling Target Auto-discovery in Cargo.toml\nDESCRIPTION: Configuration to disable automatic target discovery for different target types (libs, bins, examples, tests, benches) in a Cargo package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/cargo-targets.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\nautolib = false\nautobins = false\nautoexamples = false\nautotests = false\nautobenches = false\n```\n\n----------------------------------------\n\nTITLE: Toolchain Selection Option in Cargo\nDESCRIPTION: Specifies how to use the +toolchain option with Cargo when installed via rustup. This allows selecting specific toolchain versions like stable or nightly.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/section-options-common.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`+`_toolchain_\n```\n\n----------------------------------------\n\nTITLE: Adding Trait Items Affecting Object Safety in Rust\nDESCRIPTION: Shows how adding a trait item that makes the trait non-object safe is a breaking change. This affects usage of the trait as a trait object.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_30\n\nLANGUAGE: rust\nCODE:\n```\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub trait Trait {}\n\n///////////////////////////////////////////////////////////\n// After\npub trait Trait {\n    // An associated const makes the trait not object-safe.\n    const CONST: i32 = 123;\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Trait;\nstruct Foo;\n\nimpl Trait for Foo {}\n\nfn main() {\n    let obj: Box<dyn Trait> = Box::new(Foo); // Error: the trait `Trait` is not dyn compatible\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Dependency Feature Enabling in Cargo.toml\nDESCRIPTION: Shows how to conditionally enable features of optional dependencies. The 'serde' feature enables the 'serde' dependency and its feature in 'rgb' only if 'rgb' is enabled.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features.md#2025-04-21_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nserde = { version = \"1.0.133\", optional = true }\nrgb = { version = \"0.8.25\", optional = true }\n\n[features]\nserde = [\"dep:serde\", \"rgb?/serde\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Dependency in Rust\nDESCRIPTION: Shows how to add the windows crate as a dependency only for Windows targets.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-add.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo add windows --target 'cfg(windows)'\n```\n\n----------------------------------------\n\nTITLE: Inheriting Workspace Dependencies\nDESCRIPTION: Demonstrates how to inherit dependencies from a workspace with optional features and configurations.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/specifying-dependencies.md#2025-04-21_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"bar\"\nversion = \"0.2.0\"\n\n[dependencies]\nregex = { workspace = true, features = [\"unicode\"] }\n\n[build-dependencies]\ncc.workspace = true\n\n[dev-dependencies]\nrand = { workspace = true, optional = true }\n```\n\n----------------------------------------\n\nTITLE: Patching Dependency with Git Repository in Cargo.toml\nDESCRIPTION: Cargo.toml configuration showing how to override a dependency with a git repository after submitting a pull request.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/overriding-dependencies.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[patch.crates-io]\nuuid = { git = 'https://github.com/uuid-rs/uuid.git' }\n```\n\n----------------------------------------\n\nTITLE: Handling Mutually Exclusive Features in Rust\nDESCRIPTION: Demonstrates how to implement compile-time detection of mutually exclusive features using compile_error! macro.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features.md#2025-04-21_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(all(feature = \"foo\", feature = \"bar\"))]\ncompile_error!(\"feature \\\"foo\\\" and feature \\\"bar\\\" cannot be enabled at the same time\");\n```\n\n----------------------------------------\n\nTITLE: Changing Dependency Features in Cargo\nDESCRIPTION: Example showing how changing the features on a dependency is generally a minor change. This example demonstrates removing a specific feature from a dependency, which is safe as long as the change doesn't introduce breaking behavior.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_56\n\nLANGUAGE: toml\nCODE:\n```\n# MINOR CHANGE\n\n###########################################################\n# Before\n[dependencies]\nrand = { version = \"0.7.3\", features = [\"small_rng\"] }\n\n\n###########################################################\n# After\n[dependencies]\nrand = \"0.7.3\"\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Packages with Cargo\nDESCRIPTION: Command to view the list of packages that have been installed using cargo install.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-install.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncargo install --list\n```\n\n----------------------------------------\n\nTITLE: Using Rustup Toolchain in Cargo Check\nDESCRIPTION: Specifies a rustup toolchain to use for the cargo check command, if Cargo has been installed with rustup.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-check.md#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\ncargo +nightly check\n```\n\n----------------------------------------\n\nTITLE: Setting Rust Edition in Cargo New Command\nDESCRIPTION: The --edition option allows specifying the Rust edition to use. The default is 2024. Possible values are 2015, 2018, 2021, and 2024.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-new.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n--edition _edition_\n```\n\n----------------------------------------\n\nTITLE: Adding a development dependency with cargo add\nDESCRIPTION: Example of how to add the trybuild crate as a development dependency to a Rust project, which will only be used during development/testing.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-add.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo add --dev trybuild\n```\n\n----------------------------------------\n\nTITLE: Setting a Specific Dependency Version with Cargo Update in Rust\nDESCRIPTION: This command sets the 'foo' dependency to the precise version 1.2.3. This can be used to pin a dependency to a specific version, including git revisions for git dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-update.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo update foo --precise 1.2.3\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Run Target in Cargo.toml\nDESCRIPTION: Demonstrates how to specify a default binary for cargo run when multiple binaries exist in a project using the default-run field in the package section.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_19\n\nLANGUAGE: toml\nCODE:\n```\n[package]\ndefault-run = \"a\"\n```\n\n----------------------------------------\n\nTITLE: Adding Specific Version Dependency in Cargo\nDESCRIPTION: Demonstrates adding a specific version (5.x) of a dependency (nom) to a Rust project.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-add.txt#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo add nom@5\n```\n\n----------------------------------------\n\nTITLE: Display Duplicate Dependencies\nDESCRIPTION: Command to show all packages that are built multiple times due to semver-incompatible versions\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-tree.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncargo tree -d\n```\n\n----------------------------------------\n\nTITLE: Configuring builds.sr.ht CI for Rust Projects\nDESCRIPTION: A builds.sr.ht configuration that sets up and tests a Rust project with both stable and nightly channels. It includes steps for installation, building, testing, and generating documentation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/continuous-integration.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimage: archlinux\npackages:\n  - rustup\nsources:\n  - <your repo>\ntasks:\n  - setup: |\n      rustup toolchain install nightly stable\n      cd <your project>/\n      rustup run stable cargo fetch\n  - stable: |\n      rustup default stable\n      cd <your project>/\n      cargo build --verbose\n      cargo test --verbose\n  - nightly: |\n      rustup default nightly\n      cd <your project>/\n      cargo build --verbose ||:\n      cargo test --verbose  ||:\n  - docs: |\n      cd <your project>/\n      rustup run stable cargo doc --no-deps\n      rustup run nightly cargo doc --no-deps ||:\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Metadata in Cargo.toml\nDESCRIPTION: Demonstrates usage of the metadata table for tool-specific configuration that Cargo ignores.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_18\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"...\"\n# ...\n\n# Metadata used when generating an Android APK, for example.\n[package.metadata.android]\npackage-name = \"my-awesome-android-app\"\nassets = \"path/to/static\"\n```\n\n----------------------------------------\n\nTITLE: Cargo Install Command Synopsis\nDESCRIPTION: Shows the different ways to invoke the cargo install command, including installing from crates.io, local path, git repository, or listing installed crates.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-install.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install [options] crate[@version]...\ncargo install [options] --path path\ncargo install [options] --git url [crate...]\ncargo install [options] --list\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Release Profile in Cargo.toml\nDESCRIPTION: Default settings for the 'release' profile intended for optimized artifacts used in production. It specifies various compilation options optimized for performance.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/profiles.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[profile.release]\nopt-level = 3\ndebug = false\nsplit-debuginfo = '...'\nstrip = \"none\"\ndebug-assertions = false\noverflow-checks = false\nlto = false\npanic = 'unwind'\nincremental = false\ncodegen-units = 16\nrpath = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Progress Bar Display in Cargo (TOML)\nDESCRIPTION: Sets the condition for displaying the progress bar in Cargo. Options include 'auto' (default), 'always', and 'never'. This setting can be controlled via the CARGO_TERM_PROGRESS_WHEN environment variable.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/config.md#2025-04-21_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\nterm.progress.when = \"auto\"\n```\n\n----------------------------------------\n\nTITLE: Using Locked Mode in Cargo Build (Rust)\nDESCRIPTION: Asserts that the exact same dependencies and versions are used as when the existing Cargo.lock file was originally generated. Useful for deterministic builds in CI pipelines.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\ncargo build --locked\n```\n\n----------------------------------------\n\nTITLE: Basic Cargo Documentation Generation\nDESCRIPTION: Simple example showing how to build documentation for a local package and its dependencies, which outputs to the target/doc directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-doc.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncargo doc\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Cargo Configuration\nDESCRIPTION: Example of defining environment variables in Cargo's configuration file. These variables will be available for build scripts, rustc invocations, and cargo commands.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/config.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[env]\nOPENSSL_DIR = \"/opt/openssl\"\n```\n\n----------------------------------------\n\nTITLE: Cargo Configuration File Structure\nDESCRIPTION: The main configuration file for Cargo settings located at $HOME/.cargo/config.toml\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/cargo-home.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nconfig.toml\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependency from Alternate Registry in TOML\nDESCRIPTION: Shows how to depend on a crate from an alternate registry in a project's Cargo.toml file. This includes specifying the package metadata and the dependency with its registry.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/registries.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# Sample Cargo.toml\n[package]\nname = \"my-project\"\nversion = \"0.1.0\"\nedition = \"2024\"\n\n[dependencies]\nother-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n----------------------------------------\n\nTITLE: Adding New Dependencies in Cargo\nDESCRIPTION: Example showing how adding new dependencies is typically a minor change. This is safe as long as the new dependency doesn't introduce requirements that would cause a breaking change, such as requiring nightly Rust.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_57\n\nLANGUAGE: toml\nCODE:\n```\n# MINOR CHANGE\n\n###########################################################\n# Before\n[dependencies]\n# ..empty\n\n###########################################################\n# After\n[dependencies]\nlog = \"0.4.11\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Settings in TOML\nDESCRIPTION: Example of how to configure profile settings in the Cargo.toml file. This snippet shows how to set the optimization level and disable integer overflow checks for the dev profile.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/profiles.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[profile.dev]\nopt-level = 1               # Use slightly better optimizations.\noverflow-checks = false     # Disable integer overflow checks.\n```\n\n----------------------------------------\n\nTITLE: Simple Build Script for zlib Detection\nDESCRIPTION: Build script using pkg-config to detect and link against system zlib library\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-script-examples.md#2025-04-21_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    pkg_config::Config::new().probe(\"zlib\").unwrap();\n    println!(\"cargo::rerun-if-changed=build.rs\");\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Multiple Versions of Same Crate in Cargo.toml\nDESCRIPTION: Cargo.toml showing how to use the package key to patch in multiple versions of the same crate simultaneously.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/overriding-dependencies.md#2025-04-21_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[patch.crates-io]\nserde = { git = 'https://github.com/serde-rs/serde.git' }\nserde2 = { git = 'https://github.com/example/serde.git', package = 'serde', branch = 'v2' }\n```\n\n----------------------------------------\n\nTITLE: Executing Cargo Test with Nocapture Option\nDESCRIPTION: This command runs Cargo test while showing the output from test execution, which is hidden by default. The '--nocapture' flag is passed to the test binaries to enable this behavior.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-test.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo test -- --nocapture\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Lint Sources in Cargo.toml\nDESCRIPTION: Demonstrates how to configure lints from multiple sources (rust and clippy) in the manifest file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_21\n\nLANGUAGE: toml\nCODE:\n```\n[lints.rust]\nunsafe_code = \"forbid\"\n\n[lints.clippy]\nenum_glob_use = \"deny\"\n```\n\n----------------------------------------\n\nTITLE: Cargo Package Metadata JSON Structure\nDESCRIPTION: Comprehensive example of the JSON format used by Cargo to represent package metadata, including package information, dependencies, targets, features, and workspace details. The structure contains extensive documentation of all possible fields and their meanings.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-metadata.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    /* Array of all packages in the workspace.\n       It also includes all feature-enabled dependencies unless --no-deps is used.\n    */\n    \"packages\": [\n        {\n            /* The name of the package. */\n            \"name\": \"my-package\",\n            /* The version of the package. */\n            \"version\": \"0.1.0\",\n            /* The Package ID for referring to the\n               package within the document and as the `--package` argument to many commands\n            */\n            \"id\": \"file:///path/to/my-package#0.1.0\",\n            /* The license value from the manifest, or null. */\n            \"license\": \"MIT/Apache-2.0\",\n            /* The license-file value from the manifest, or null. */\n            \"license_file\": \"LICENSE\",\n            /* The description value from the manifest, or null. */\n            \"description\": \"Package description.\",\n            /* The source ID of the package, an \"opaque\" identifier representing\n               where a package is retrieved from. See \"Compatibility\" above for\n               the stability guarantee.\n\n               This is null for path dependencies and workspace members.\n\n               For other dependencies, it is a string with the format:\n               - \"registry+URL\" for registry-based dependencies.\n                 Example: \"registry+https://github.com/rust-lang/crates.io-index\"\n               - \"git+URL\" for git-based dependencies.\n                 Example: \"git+https://github.com/rust-lang/cargo?rev=5e85ba14aaa20f8133863373404cb0af69eeef2c#5e85ba14aaa20f8133863373404cb0af69eeef2c\"\n               - \"sparse+URL\" for dependencies from a sparse registry\n                 Example: \"sparse+https://my-sparse-registry.org\"\n\n               The value after the `+` is not explicitly defined, and may change\n               between versions of Cargo and may not directly correlate to other\n               things, such as registry definitions in a config file. New source\n               kinds may be added in the future which will have different `+`\n               prefixed identifiers.\n            */\n            \"source\": null,\n            /* Array of dependencies declared in the package's manifest. */\n            \"dependencies\": [\n                {\n                    /* The name of the dependency. */\n                    \"name\": \"bitflags\",\n                    /* The source ID of the dependency. May be null, see\n                       description for the package source.\n                    */\n                    \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n                    /* The version requirement for the dependency.\n                       Dependencies without a version requirement have a value of \"*\".\n                    */\n                    \"req\": \"^1.0\",\n                    /* The dependency kind.\n                       \"dev\", \"build\", or null for a normal dependency.\n                    */\n                    \"kind\": null,\n                    /* If the dependency is renamed, this is the new name for\n                       the dependency as a string.  null if it is not renamed.\n                    */\n                    \"rename\": null,\n                    /* Boolean of whether or not this is an optional dependency. */\n                    \"optional\": false,\n                    /* Boolean of whether or not default features are enabled. */\n                    \"uses_default_features\": true,\n                    /* Array of features enabled. */\n                    \"features\": [],\n                    /* The target platform for the dependency.\n                       null if not a target dependency.\n                    */\n                    \"target\": \"cfg(windows)\",\n                    /* The file system path for a local path dependency.\n                       not present if not a path dependency.\n                    */\n                    \"path\": \"/path/to/dep\",\n                    /* A string of the URL of the registry this dependency is from.\n                       If not specified or null, the dependency is from the default\n                       registry (crates.io).\n                    */\n                    \"registry\": null,\n                    /* (unstable) Boolean flag of whether or not this is a pulbic\n                       dependency. This field is only present when\n                       `-Zpublic-dependency` is enabled.\n                    */\n                    \"public\": false\n                }\n            ],\n            /* Array of Cargo targets. */\n            \"targets\": [\n                {\n                    /* Array of target kinds.\n                       - lib targets list the `crate-type` values from the\n                         manifest such as \"lib\", \"rlib\", \"dylib\",\n                         \"proc-macro\", etc. (default [\"lib\"])\n                       - binary is [\"bin\"]\n                       - example is [\"example\"]\n                       - integration test is [\"test\"]\n                       - benchmark is [\"bench\"]\n                       - build script is [\"custom-build\"]\n                    */\n                    \"kind\": [\n                        \"bin\"\n                    ],\n                    /* Array of crate types.\n                       - lib and example libraries list the `crate-type` values\n                         from the manifest such as \"lib\", \"rlib\", \"dylib\",\n                         \"proc-macro\", etc. (default [\"lib\"])\n                       - all other target kinds are [\"bin\"]\n                    */\n                    \"crate_types\": [\n                        \"bin\"\n                    ],\n                    /* The name of the target.\n                       For lib targets, dashes will be replaced with underscores.\n                    */\n                    \"name\": \"my-package\",\n                    /* Absolute path to the root source file of the target. */\n                    \"src_path\": \"/path/to/my-package/src/main.rs\",\n                    /* The Rust edition of the target.\n                       Defaults to the package edition.\n                    */\n                    \"edition\": \"2018\",\n                    /* Array of required features.\n                       This property is not included if no required features are set.\n                    */\n                    \"required-features\": [\"feat1\"],\n                    /* Whether the target should be documented by `cargo doc`. */\n                    \"doc\": true,\n                    /* Whether or not this target has doc tests enabled, and\n                       the target is compatible with doc testing.\n                    */\n                    \"doctest\": false,\n                    /* Whether or not this target should be built and run with `--test`\n                    */\n                    \"test\": true\n                }\n            ],\n            /* Set of features defined for the package.\n               Each feature maps to an array of features or dependencies it\n               enables.\n            */\n            \"features\": {\n                \"default\": [\n                    \"feat1\"\n                ],\n                \"feat1\": [],\n                \"feat2\": []\n            },\n            /* Absolute path to this package's manifest. */\n            \"manifest_path\": \"/path/to/my-package/Cargo.toml\",\n            /* Package metadata.\n               This is null if no metadata is specified.\n            */\n            \"metadata\": {\n                \"docs\": {\n                    \"rs\": {\n                        \"all-features\": true\n                    }\n                }\n            },\n            /* List of registries to which this package may be published.\n               Publishing is unrestricted if null, and forbidden if an empty array. */\n            \"publish\": [\n                \"crates-io\"\n            ],\n            /* Array of authors from the manifest.\n               Empty array if no authors specified.\n            */\n            \"authors\": [\n                \"Jane Doe <user@example.com>\"\n            ],\n            /* Array of categories from the manifest. */\n            \"categories\": [\n                \"command-line-utilities\"\n            ],\n            /* Optional string that is the default binary picked by cargo run. */\n            \"default_run\": null,\n            /* Optional string that is the minimum supported rust version */\n            \"rust_version\": \"1.56\",\n            /* Array of keywords from the manifest. */\n            \"keywords\": [\n                \"cli\"\n            ],\n            /* The readme value from the manifest or null if not specified. */\n            \"readme\": \"README.md\",\n            /* The repository value from the manifest or null if not specified. */\n            \"repository\": \"https://github.com/rust-lang/cargo\",\n            /* The homepage value from the manifest or null if not specified. */\n            \"homepage\": \"https://rust-lang.org\",\n            /* The documentation value from the manifest or null if not specified. */\n            \"documentation\": \"https://doc.rust-lang.org/stable/std\",\n            /* The default edition of the package.\n               Note that individual targets may have different editions.\n            */\n            \"edition\": \"2018\",\n            /* Optional string that is the name of a native library the package\n               is linking to.\n            */\n            \"links\": null,\n        }\n    ],\n    /* Array of members of the workspace.\n       Each entry is the Package ID for the package.\n    */\n    \"workspace_members\": [\n        \"file:///path/to/my-package#0.1.0\",\n    ],\n    /* Array of default members of the workspace.\n       Each entry is the Package ID for the package.\n    */\n    \"workspace_default_members\": [\n        \"file:///path/to/my-package#0.1.0\",\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Target Configuration Template\nDESCRIPTION: Comprehensive example showing all available configuration options for a target in Cargo.toml.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/cargo-targets.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[lib]\nname = \"foo\"           # The name of the target.\npath = \"src/lib.rs\"    # The source file of the target.\ntest = true            # Is tested by default.\ndoctest = true         # Documentation examples are tested by default.\nbench = true           # Is benchmarked by default.\ndoc = true             # Is documented by default.\nproc-macro = false     # Set to `true` for a proc-macro library.\nharness = true         # Use libtest harness.\ncrate-type = [\"lib\"]   # The crate types to generate.\nrequired-features = [] # Features required to build this target (N/A for lib).\n```\n\n----------------------------------------\n\nTITLE: Compiler Message JSON Structure in Cargo\nDESCRIPTION: Defines the JSON structure for compiler messages output by Cargo when using '--message-format=json'. It includes package information, target details, and the embedded rustc compiler message.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/external-tools.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"reason\": \"compiler-message\",\n    \"package_id\": \"file:///path/to/my-package#0.1.0\",\n    \"manifest_path\": \"/path/to/my-package/Cargo.toml\",\n    \"target\": {\n        \"kind\": [\n            \"lib\"\n        ],\n        \"crate_types\": [\n            \"lib\"\n        ],\n        \"name\": \"my_package\",\n        \"src_path\": \"/path/to/my-package/src/lib.rs\",\n        \"edition\": \"2018\",\n        \"required-features\": [\"feat1\"],\n        \"doc\": true,\n        \"doctest\": true,\n        \"test\": true\n    },\n    \"message\": {\n        /* ... */\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Crate Versions with cargo yank\nDESCRIPTION: These commands demonstrate how to yank (disable) a specific version of a crate and how to undo a yank. Yanking prevents new dependencies on that version but doesn't delete the code.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/publishing.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo yank --version 1.0.1\n$ cargo yank --version 1.0.1 --undo\n```\n\n----------------------------------------\n\nTITLE: Conditional Nightly Features in wasm-bindgen\nDESCRIPTION: Shows how wasm-bindgen enables experimental language features only when the nightly feature is activated. This pattern allows packages to use nightly-only Rust features without requiring all users to use the nightly toolchain.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features-examples.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#![cfg_attr(feature = \"nightly\", feature(unsize))]\n```\n\n----------------------------------------\n\nTITLE: Version with Git Branch Configuration\nDESCRIPTION: Example showing how to combine version requirements with Git branch specifications for dependency resolution.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/specifying-dependencies.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nregex = { version = \"1.10.3\", git = \"https://github.com/rust-lang/regex.git\", branch = \"next\" }\n```\n\n----------------------------------------\n\nTITLE: Displaying Cargo Command Syntax in Markdown\nDESCRIPTION: Shows the various ways to invoke the Cargo command, including options, subcommands, and special flags.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`cargo` [_options_] _command_ [_args_]\\n`cargo` [_options_] `--version`\\n`cargo` [_options_] `--list`\\n`cargo` [_options_] `--help`\\n`cargo` [_options_] `--explain` _code_\n```\n\n----------------------------------------\n\nTITLE: Building a Package with Optimizations\nDESCRIPTION: Shows how to build a package with optimizations enabled using the --release flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Setting Package Categories in Cargo.toml\nDESCRIPTION: Specifies package categories matching crates.io category slugs, limited to 5 categories.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\ncategories = [\"command-line-utilities\", \"development-tools::cargo-plugins\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Binary Cargo Package\nDESCRIPTION: This command creates a new binary Cargo package in the current directory. It initializes a new package with default settings, creating a src/main.rs file if no Rust source files are present.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-init.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo init\n```\n\n----------------------------------------\n\nTITLE: Overriding Git Repository URL in Cargo.toml\nDESCRIPTION: Cargo.toml configuration showing how to override a git dependency by specifying the original repository URL in the patch section.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/overriding-dependencies.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[patch.\"https://github.com/your/repository\"]\nmy-library = { path = \"../my-library/path\" }\n```\n\n----------------------------------------\n\nTITLE: Managing Crate Ownership with cargo owner\nDESCRIPTION: These commands show how to add or remove owners of a crate, including both individual GitHub users and GitHub teams. This is useful for collaborative crate management.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/publishing.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo owner --add github-handle\n$ cargo owner --remove github-handle\n$ cargo owner --add github:rust-lang:owners\n$ cargo owner --remove github:rust-lang:owners\n```\n\n----------------------------------------\n\nTITLE: Building Optimized Artifacts with Release Profile in Rust\nDESCRIPTION: The -r or --release options build optimized artifacts using the release profile. This is an alternative to specifying a profile name explicitly.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustc.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n-r\n--release\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Cargo Vendor\nDESCRIPTION: Vendors all dependencies into a local 'vendor' folder. This will download all remote dependencies and place them in the vendor directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-vendor.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo vendor\n```\n\n----------------------------------------\n\nTITLE: Readme File Configuration in Cargo.toml\nDESCRIPTION: This snippet demonstrates setting the path to the README file, which contains general information about the package. This file will be transferred to the registry when published and rendered as Markdown on crates.io.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\nreadme = \"README.md\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Dependency Features via Local Features in Cargo.toml\nDESCRIPTION: Demonstrates how to enable features of dependencies through local feature definitions. The 'parallel' feature enables the 'rayon' feature of 'jpeg-decoder'.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features.md#2025-04-21_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\njpeg-decoder = { version = \"0.1.20\", default-features = false }\n\n[features]\n# Enables parallel processing support by enabling the \"rayon\" feature of jpeg-decoder.\nparallel = [\"jpeg-decoder/rayon\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Cargo Tree Usage\nDESCRIPTION: Basic command to display the dependency tree for the current package\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-tree.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo tree\n```\n\n----------------------------------------\n\nTITLE: Basic Functional Test Structure in Rust\nDESCRIPTION: Demonstrates the basic structure of a functional test for Cargo, including project setup and command execution with output verification.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/writing.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse cargo_test_support::prelude::*;\nuse cargo_test_support::str;\nuse cargo_test_support::project;\n\n#[cargo_test]\nfn <description>() {\n    let p = project()\n        .file(\"src/main.rs\", r#\"fn main() { println!(\"hi!\"); }\"#)\n        .build();\n\n    p.cargo(\"run --bin foo\")\n        .with_stderr_data(str![[r#\"\n[COMPILING] foo [..]\n[FINISHED] [..]\n[RUNNING] `target/debug/foo`\n\"#]])\n        .with_stdout_data(str![[\"hi!\"]])\n        .run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Example with Additional Arguments\nDESCRIPTION: This command runs a specific example from the package, passing extra arguments to the example after the '--' separator.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-run.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --example exname -- --exoption exarg1 exarg2\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies with Version Requirements in TOML\nDESCRIPTION: Examples of how to specify dependency version requirements in a Cargo.toml file. It shows different ways to define version constraints and how they affect dependency resolution.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/resolver.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nbitflags = \"*\"\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nbitflags = \"1.0\"  # meaning `>=1.0.0,<2.0.0`\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n# Package A\n[dependencies]\nbitflags = \"1.0\"  # meaning `>=1.0.0,<2.0.0`\n\n# Package B\n[dependencies]\nbitflags = \"1.1\"  # meaning `>=1.1.0,<2.0.0`\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n# Package A\n[dependencies]\nlog = \"=0.4.11\"\n\n# Package B\n[dependencies]\nlog = \"=0.4.8\"\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n# Package A\n[dependencies]\nrand = \"0.7\"  # meaning `>=0.7.0,<0.8.0`\n\n# Package B\n[dependencies]\nrand = \"0.6\"  # meaning `>=0.6.0,<0.7.0`\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n# Package A\n[dependencies]\nrand = \">=0.6,<0.8.0\"\n\n# Package B\n[dependencies]\nrand = \"0.6\"  # meaning `>=0.6.0,<0.7.0`\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Features of Dependencies in Cargo.toml\nDESCRIPTION: Shows how to disable default features of a dependency while enabling specific features. This is useful for customizing which features of a dependency are used.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nflate2 = { version = \"1.0.3\", default-features = false, features = [\"zlib-rs\"] }\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Fix\nDESCRIPTION: Demonstrates how to use the 'cargo fix' command to apply compiler suggestions to the local package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-fix.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo fix\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Dependencies with Cargo in Rust\nDESCRIPTION: This command updates only the specified dependencies (foo and bar) to their latest compatible versions while leaving other dependencies unchanged.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-update.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo update foo bar\n```\n\n----------------------------------------\n\nTITLE: Configuring Rustdoc External Documentation Links\nDESCRIPTION: This snippet shows how to configure Cargo to generate links to external documentation for dependencies using the rustdoc-map feature.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_19\n\nLANGUAGE: toml\nCODE:\n```\n[doc.extern-map.registries]\ncrates-io = \"https://docs.rs/\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Build Script for Code Generation\nDESCRIPTION: Build script that generates Rust code during the build process, writing a message function to a file in the OUT_DIR directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-script-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// build.rs\n\nuse std::env;\nuse std::fs;\nuse std::path::Path;\n\nfn main() {\n    let out_dir = env::var_os(\"OUT_DIR\").unwrap();\n    let dest_path = Path::new(&out_dir).join(\"hello.rs\");\n    fs::write(\n        &dest_path,\n        \"pub fn message() -> &'static str {\\n            \\\"Hello, World!\\\"\\n        }\\n        \"\n    ).unwrap();\n    println!(\"cargo::rerun-if-changed=build.rs\");\n}\n```\n\n----------------------------------------\n\nTITLE: Path Dependencies Configuration\nDESCRIPTION: Example of specifying local path dependencies in Cargo.toml for sub-crates within a project.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/specifying-dependencies.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\n----------------------------------------\n\nTITLE: Defining --locked Option for Cargo in Markdown\nDESCRIPTION: Documents the --locked option for Cargo, which ensures exact dependency versions are used as specified in the Cargo.lock file. It explains when Cargo will exit with an error and its use case in CI pipelines for deterministic builds.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-locked.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--locked`\"}}\nAsserts that the exact same dependencies and versions are used as when the\nexisting `Cargo.lock` file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:\n\n* The lock file is missing.\n* Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Building a Local Package with Cargo\nDESCRIPTION: Demonstrates how to build a local package and all of its dependencies using Cargo.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Publishing a Cargo Package Example\nDESCRIPTION: A simple example showing how to publish the current package to a registry using cargo publish command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-publish.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo publish\n```\n\n----------------------------------------\n\nTITLE: Accessing OUT_DIR Environment Variable in Rust Build Script\nDESCRIPTION: Example showing how to retrieve the OUT_DIR environment variable at runtime in a Cargo build script. This demonstrates the proper way to access build script environment variables since they are not available at compile time.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/environment-variables.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse std::env;\nlet out_dir = env::var(\"OUT_DIR\").unwrap();\n```\n\n----------------------------------------\n\nTITLE: Extended API with Nightly Features in wasm-bindgen\nDESCRIPTION: Example showing how wasm-bindgen conditionally exposes additional API functionality when the nightly feature is enabled. This demonstrates extending a crate's capabilities based on availability of unstable Rust features.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features-examples.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(feature = \"nightly\")]\nimpl<T: ?Sized> Closure<T> {\n    /// Creates a new `Closure` with the provided function.\n    ///\n    /// Note that using an unsized closure with `Closure::new()` requires the\n    /// `nightly` feature to be enabled.\n    #[inline]\n    pub fn new<F>(f: F) -> Closure<T>\n    where\n        F: Unsize<T> + 'static,\n    {\n        Closure::wrap(Box::new(f) as Box<T>)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Workspace Lints Configuration\nDESCRIPTION: Example demonstrating how to configure and inherit workspace-level lints.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/workspaces.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n# [PROJECT_DIR]/Cargo.toml\n[workspace]\nmembers = [\"crates/*\"]\n\n[workspace.lints.rust]\nunsafe_code = \"forbid\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n# [PROJECT_DIR]/crates/bar/Cargo.toml\n[package]\nname = \"bar\"\nversion = \"0.1.0\"\n\n[lints]\nworkspace = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Publishing in Cargo.toml\nDESCRIPTION: Controls which registries the package can be published to, or disables publishing entirely.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\npublish = [\"some-registry-name\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\npublish = false\n```\n\n----------------------------------------\n\nTITLE: Verifying Latest Dependencies in GitHub Actions\nDESCRIPTION: A GitHub Actions job configuration that updates all dependencies to their latest versions and runs tests. This job is configured to continue on error and includes environment settings to allow incompatible Rust versions.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/continuous-integration.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  latest_deps:\n    name: Latest Dependencies\n    runs-on: ubuntu-latest\n    continue-on-error: true\n    env:\n      CARGO_RESOLVER_INCOMPATIBLE_RUST_VERSIONS: allow\n    steps:\n      - uses: actions/checkout@v4\n      - run: rustup update stable && rustup default stable\n      - run: cargo update --verbose\n      - run: cargo build --verbose\n      - run: cargo test --verbose\n```\n\n----------------------------------------\n\nTITLE: Setting File Exclusions in Cargo.toml\nDESCRIPTION: Defines patterns for files to exclude from package publication and change tracking.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\nexclude = [\"/ci\", \"images/\", \".*\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Library Links in Cargo.toml\nDESCRIPTION: Specifies the name of a native library being linked to the package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\nlinks = \"git2\"\n```\n\n----------------------------------------\n\nTITLE: Setting Proc-Macro Crate Type in Cargo.toml\nDESCRIPTION: Cargo now treats `crate-type = [\"proc-macro\"]` the same as `proc-macro = true` in Cargo.toml configuration files. This provides an alternate way to declare a procedural macro crate.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_65\n\nLANGUAGE: toml\nCODE:\n```\n# These two configurations are now equivalent\n\n# Option 1\n[lib]\ncrate-type = [\"proc-macro\"]\n\n# Option 2\n[lib]\nproc-macro = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Targets in Cargo.toml\nDESCRIPTION: Configuration for multiple binary targets with custom names and feature requirements.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/cargo-targets.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# Example of customizing binaries in Cargo.toml.\n[[bin]]\nname = \"cool-tool\"\ntest = false\nbench = false\n\n[[bin]]\nname = \"frobnicator\"\nrequired-features = [\"frobnicate\"]\n```\n\n----------------------------------------\n\nTITLE: Running all benchmarks with cargo bench in Rust\nDESCRIPTION: Example showing how to build and execute all the benchmarks of the current package using the cargo bench command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-bench.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo bench\n```\n\n----------------------------------------\n\nTITLE: Adding a platform-specific dependency\nDESCRIPTION: Example of how to add the windows crate as a dependency that will only be included when building for Windows platforms using the target configuration option.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-add.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncargo add windows --target 'cfg(windows)'\n```\n\n----------------------------------------\n\nTITLE: Cargo Metadata Command Usage\nDESCRIPTION: Shows the basic command syntax for running cargo metadata with optional arguments.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo metadata [_options_]\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Target in Cargo.toml\nDESCRIPTION: Example showing how to customize a library target with specific crate type and benchmark settings.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/cargo-targets.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# Example of customizing the library in Cargo.toml.\n[lib]\ncrate-type = [\"cdylib\"]\nbench = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Features for Binary Target in Cargo.toml\nDESCRIPTION: Example showing how to specify required features for a binary target using the required-features field. The binary 'my-pg-tool' will only be built if both 'postgres' and 'tools' features are enabled.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/cargo-targets.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[features]\n# ...\npostgres = []\nsqlite = []\ntools = []\n\n[[bin]]\nname = \"my-pg-tool\"\nrequired-features = [\"postgres\", \"tools\"]\n```\n\n----------------------------------------\n\nTITLE: Specific Integration Test Execution\nDESCRIPTION: Example of running a specific test within an integration test module\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-test.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo test --test int_test_name -- modname::test_name\n```\n\n----------------------------------------\n\nTITLE: Defining Cargo Metadata JSON Structure in Rust\nDESCRIPTION: This snippet outlines the JSON structure for Cargo's metadata output. It includes fields for dependencies, package information, workspace details, and build configurations. The structure is designed to provide comprehensive information about a Cargo project and its dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-metadata.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"resolve\": {\n        \"nodes\": [\n            {\n                \"id\": \"file:///path/to/my-package#0.1.0\",\n                \"dependencies\": [\n                    \"https://github.com/rust-lang/crates.io-index#bitflags@1.0.4\"\n                ],\n                \"deps\": [\n                    {\n                        \"name\": \"bitflags\",\n                        \"pkg\": \"https://github.com/rust-lang/crates.io-index#bitflags@1.0.4\"\n                        \"dep_kinds\": [\n                            {\n                                \"kind\": null,\n                                \"target\": \"cfg(windows)\"\n                            }\n                        ]\n                    }\n                ],\n                \"features\": [\n                    \"default\"\n                ]\n            }\n        ],\n        \"root\": \"file:///path/to/my-package#0.1.0\"\n    },\n    \"target_directory\": \"/path/to/my-package/target\",\n    \"build_directory\": \"/path/to/my-package/build-dir\",\n    \"version\": 1,\n    \"workspace_root\": \"/path/to/my-package\"\n    \"metadata\": {\n        \"docs\": {\n            \"rs\": {\n                \"all-features\": true\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Executable Rust Package with Cargo in Bash\nDESCRIPTION: Command to create a new Rust package named 'foobar' that is set up to build an executable (binary) application rather than a library.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo new foobar\n```\n\n----------------------------------------\n\nTITLE: Setting Default Registry in TOML Configuration\nDESCRIPTION: Demonstrates how to set the default registry in the .cargo/config.toml file. This configuration allows publishing to the specified registry without explicitly providing the --registry flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/registries.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[registry]\ndefault = \"my-registry\"\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running a Rust Project with Cargo Run\nDESCRIPTION: This command compiles and runs the Rust project in a single step using 'cargo run'. It shows both compilation and execution output.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/creating-a-new-project.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ cargo run\n   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n     Running `target/debug/hello_world`\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Using the '--keep-going' Option with Cargo Commands\nDESCRIPTION: This snippet demonstrates the usage of the '--keep-going' flag in Cargo which continues building as many crates as possible despite failures. It shows examples of how the flag affects build behavior when dependencies fail.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-keep-going.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--keep-going`\"}}\nBuild as many crates in the dependency graph as possible, rather than aborting\nthe build on the first one that fails to build.\n\nFor example if the current package depends on dependencies `fails` and `works`,\none of which fails to build, `cargo {{command}} -j1` may or may not build the\none that succeeds (depending on which one of the two builds Cargo picked to run\nfirst), whereas `cargo {{command}} -j1 --keep-going` would definitely run both\nbuilds, even if the one run first fails.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Build Script Override Configuration\nDESCRIPTION: Configuration to override a build script in config.toml, specifying custom library metadata, link flags, and environment variables for a specific target architecture.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-scripts.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[target.x86_64-unknown-linux-gnu.foo]\nrustc-link-lib = [\"foo\"]\nrustc-link-search = [\"/path/to/foo\"]\nrustc-flags = \"-L /some/path\"\nrustc-cfg = ['key=\"value\"']\nrustc-env = {key = \"value\"}\nrustc-cdylib-link-arg = [\"…\"]\nmetadata_key1 = \"value\"\nmetadata_key2 = \"value\"\n```\n\n----------------------------------------\n\nTITLE: Publishing a Crate to crates.io\nDESCRIPTION: This command publishes the crate to crates.io. It performs verification checks, compresses the source code, and uploads the package to the registry.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/publishing.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo publish\n```\n\n----------------------------------------\n\nTITLE: Override Crate Type in Rust Build\nDESCRIPTION: Demonstrates how to override the crate-type field specified in Cargo.toml using command-line options to build both a static and dynamic library.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-rustc.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo rustc --lib --crate-type lib,cdylib\n```\n\n----------------------------------------\n\nTITLE: Vendoring Dependencies with Cargo (Shell)\nDESCRIPTION: Examples of using the 'cargo vendor' command to vendor dependencies in different scenarios, including specifying custom output directories and using additional Cargo.toml files.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-vendor.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo vendor\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo vendor third-party/vendor\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo vendor -s ../path/to/Cargo.toml\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo vendor > path/to/my/cargo/config.toml\n```\n\n----------------------------------------\n\nTITLE: Using Dependency Prefix in Cargo Features\nDESCRIPTION: The 'dep:' prefix can now be used in the [features] table to refer to an optional dependency. This allows creating feature names that match dependency names and provides more control over optional dependency visibility.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: toml\nCODE:\n```\n[features]\nmy_feature = [\"dep:some_optional_dependency\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional std Support in Rust\nDESCRIPTION: Example showing how to properly implement optional standard library support using features. Uses cfg attributes to conditionally include std-dependent code.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features.md#2025-04-21_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n#![no_std]\n\n#[cfg(feature = \"std\")]\nextern crate std;\n\n#[cfg(feature = \"std\")]\npub fn function_that_requires_std() {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Packages in Rust\nDESCRIPTION: This command displays a list of all packages installed using Cargo.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-install.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --list\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Bench with Specific Benchmark\nDESCRIPTION: Example showing how to run a specific benchmark named 'foo' with exact matching to avoid running similarly named benchmarks like 'foobar'.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo bench -- foo --exact\n```\n\n----------------------------------------\n\nTITLE: Applying Edition Idioms\nDESCRIPTION: Illustrates the use of 'cargo fix' with the '--edition-idioms' flag to apply suggested idioms for the current Rust edition.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-fix.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncargo fix --edition-idioms\n```\n\n----------------------------------------\n\nTITLE: Running a specific benchmark with cargo bench in Rust\nDESCRIPTION: Example showing how to run only a specific benchmark within a specific benchmark target by using the --bench flag and specifying the benchmark name and module path.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-bench.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo bench --bench bench_name -- modname::some_benchmark\n```\n\n----------------------------------------\n\nTITLE: Optional Renamed Dependencies Configuration\nDESCRIPTION: Example of configuring optional dependencies with custom package names.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/specifying-dependencies.md#2025-04-21_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nbar = { version = \"0.1\", package = 'foo', optional = true }\n```\n\n----------------------------------------\n\nTITLE: Prepublishing a Breaking Change in Cargo.toml\nDESCRIPTION: Cargo.toml showing how to use a major version update from a specific branch in a git repository before it's published.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/overriding-dependencies.md#2025-04-21_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nuuid = \"2.0\"\n\n[patch.crates-io]\nuuid = { git = \"https://github.com/uuid-rs/uuid.git\", branch = \"2.0.0\" }\n```\n\n----------------------------------------\n\nTITLE: Package Selection Example\nDESCRIPTION: Example showing how to specify a particular package to run using the -p or --package flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-run.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-p spec\n--package spec\n```\n\n----------------------------------------\n\nTITLE: Basic Cargo Build Command Syntax in Rust\nDESCRIPTION: The basic syntax for the cargo build command, used to compile local packages and their dependencies in Rust projects.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo build [_options_]\n```\n\n----------------------------------------\n\nTITLE: Installing a Package from Current Directory with Cargo\nDESCRIPTION: Command to install or reinstall the package located in the current directory using the --path option.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-install.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncargo install --path .\n```\n\n----------------------------------------\n\nTITLE: Manifest Options for Cargo Configuration\nDESCRIPTION: Options for specifying manifest-related settings in Cargo, including manifest path, version handling, and dependency locking.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-run.md#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n--manifest-path <path>\n--ignore-rust-version\n--locked\n--offline\n--frozen\n--lockfile-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Cloning and Navigating to a Rust Package Repository\nDESCRIPTION: This snippet shows how to clone the regex package from GitHub and navigate to its directory using Git and command-line operations.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/working-on-an-existing-project.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/rust-lang/regex.git\n$ cd regex\n```\n\n----------------------------------------\n\nTITLE: Fetching All Dependencies in Cargo\nDESCRIPTION: Example command to fetch all dependencies for a Rust project. This ensures all dependencies defined in Cargo.toml are downloaded and locally available for offline use.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-fetch.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo fetch\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo.toml for Code Generation Example\nDESCRIPTION: Basic Cargo manifest configuration for a project that uses a build script to generate code.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-script-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# Cargo.toml\n\n[package]\nname = \"hello-from-generated-code\"\nversion = \"0.1.0\"\nedition = \"2024\"\n```\n\n----------------------------------------\n\nTITLE: Examining Cargo.toml Manifest File\nDESCRIPTION: This snippet shows the contents of a default Cargo.toml file. It includes metadata such as package name, version, and Rust edition, as well as a section for dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/getting-started/first-steps.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\nedition = \"2024\"\n\n[dependencies]\n```\n\n----------------------------------------\n\nTITLE: Building Benchmarks with Keep-Going Option\nDESCRIPTION: Example showing how to build benchmarks while continuing on failures using the --keep-going flag and then running them with --no-fail-fast option.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --benches --release --keep-going\ncargo bench --no-fail-fast\n```\n\n----------------------------------------\n\nTITLE: Building a Release-Optimized Package with Cargo in Bash\nDESCRIPTION: Command to build a Rust package with optimizations enabled using the release profile, resulting in faster executables at the cost of longer compilation time.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Listing Files Included in Crate Package\nDESCRIPTION: This command lists all the files that will be included in the crate package when published. It's useful for verifying that only necessary files are included.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/publishing.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo package --list\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Dependency Overrides in Cargo.toml\nDESCRIPTION: Default settings for build dependency overrides in both dev and release profiles. These settings optimize build scripts and proc macros for faster compilation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/profiles.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[profile.dev.build-override]\nopt-level = 0\ncodegen-units = 256\ndebug = false\n\n[profile.release.build-override]\nopt-level = 0\ncodegen-units = 256\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Thread Control in Rust Cargo\nDESCRIPTION: This command demonstrates how to run tests with specified number of jobs for building and setting test thread count for execution. It controls both build parallelism and test execution parallelism.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-test.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo test -j 2 -- --test-threads=2\n```\n\n----------------------------------------\n\nTITLE: Major: Adding a private field to a struct with all public fields in Rust\nDESCRIPTION: Demonstrates how adding a private field to a struct that previously had all public fields breaks code that constructs the struct using struct literals. The mitigation is to use #[non_exhaustive] or provide constructors.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Foo {\n    pub f1: i32,\n}\n\n///////////////////////////////////////////////////////////\n// After\npub struct Foo {\n    pub f1: i32,\n    f2: i32,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nfn main() {\n    let x = updated_crate::Foo { f1: 123 }; // Error: cannot construct `Foo`\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning to Specific Git Revision in Cargo.toml\nDESCRIPTION: A Cargo.toml dependency specification that pins the regex library to a specific Git revision using the 'rev' parameter. This ensures reproducible builds by using exactly the same source code version.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/cargo-toml-vs-cargo-lock.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nregex = { git = \"https://github.com/rust-lang/regex.git\", rev = \"9f9f693\" }\n```\n\n----------------------------------------\n\nTITLE: Relative Path Configuration Examples in TOML\nDESCRIPTION: TOML configuration examples showing how to specify relative paths for runners and vendored sources in Cargo config files.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/config.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n# Relative path examples.\n\n[target.x86_64-unknown-linux-gnu]\nrunner = \"foo\"  # Searches `PATH` for `foo`.\n\n[source.vendored-sources]\n# Directory is relative to the parent where `.cargo/config.toml` is located.\n# For example, `/my/project/.cargo/config.toml` would result in `/my/project/vendor`.\ndirectory = \"vendor\"\n```\n\n----------------------------------------\n\nTITLE: Cargo Tree Command for Duplicate Dependencies\nDESCRIPTION: Command to identify duplicate dependencies in the dependency graph using cargo tree with the duplicates flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/resolver.md#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ cargo tree --workspace --target all --all-features --duplicates\nrand v0.7.3\n└── ...\n\nrand v0.8.5\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Cleaning Release Artifacts in Cargo\nDESCRIPTION: Shows how to use the --release option to remove all artifacts in the release directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-clean.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<dt class=\"option-term\" id=\"option-cargo-clean---release\"><a class=\"option-anchor\" href=\"#option-cargo-clean---release\"></a><code>--release</code></dt>\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies with Features in Rust\nDESCRIPTION: Demonstrates adding serde and serde_json with the derive feature enabled for JSON serialization support.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-add.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo add serde serde_json -F serde/derive\n```\n\n----------------------------------------\n\nTITLE: Remove All Build Artifacts with Cargo Clean\nDESCRIPTION: Command to remove the entire target directory containing all build artifacts.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-clean.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncargo clean\n```\n\n----------------------------------------\n\nTITLE: Cargo Target Selection Option: --example\nDESCRIPTION: Explains the usage of the --example flag for selecting specific example targets. Supports multiple specifications and glob patterns.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-targets.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--example` _name_...\" }}\n{{actionverb}} the specified example. This flag may be specified multiple times\nand supports common Unix glob patterns.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Rust Version Compatibility Example in Cargo.toml\nDESCRIPTION: Demonstrates how Cargo handles package resolution based on Rust version compatibility requirements. Shows a basic package configuration with clap dependency.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/resolver.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"my-cli\"\nrust-version = \"1.62\"\n\n[dependencies]\nclap = \"4.0\"  # resolves to 4.0.32\n```\n\n----------------------------------------\n\nTITLE: Running Basic Cargo Fix Command\nDESCRIPTION: Basic usage of cargo fix that automatically fixes applicable warnings in the current package. This is equivalent to running cargo check --all-targets.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-fix.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo fix\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Test within an Integration Test Module\nDESCRIPTION: Example showing how to run a single test function within a specific integration test module, providing precise test selection.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-test.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo test --test int_test_name -- modname::test_name\n```\n\n----------------------------------------\n\nTITLE: Installing a Package from crates.io in Rust\nDESCRIPTION: This command installs or upgrades the 'ripgrep' package from crates.io using Cargo.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-install.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install ripgrep\n```\n\n----------------------------------------\n\nTITLE: Target Selection Options\nDESCRIPTION: Commands for selecting specific binary or example targets to run.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-run.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--bin name\n--example name\n```\n\n----------------------------------------\n\nTITLE: Defining Dependent Features in Cargo.toml\nDESCRIPTION: Illustrates how to define features that depend on other features. The 'ico' feature enables both 'bmp' and 'png' features, as ICO images can contain BMP and PNG data.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[features]\nbmp = []\npng = []\nico = [\"bmp\", \"png\"]\nwebp = []\n```\n\n----------------------------------------\n\nTITLE: Filtered Test Execution\nDESCRIPTION: Example of running tests that match a specific name filter\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-test.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo test name_filter\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Dependency in Cargo\nDESCRIPTION: Demonstrates adding a dependency (windows) that is only included for specific platform configurations.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-add.txt#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncargo add windows --target 'cfg(windows)'\n```\n\n----------------------------------------\n\nTITLE: Build Script Check Configuration Example\nDESCRIPTION: Example showing how to use rustc-check-cfg and rustc-cfg instructions in a build script to handle conditional compilation configuration.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-scripts.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// build.rs\nprintln!(\"cargo::rustc-check-cfg=cfg(foo, values(\\\"bar\\\"))\");\nif foo_bar_condition {\n    println!(\"cargo::rustc-cfg=foo=\\\"bar\\\"\");\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Removing Public Items in Rust\nDESCRIPTION: Demonstrates how removing a public function is a major breaking change that will cause compilation failures in dependent code. This example shows why removing public items requires a major version bump.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// Before\npub fn foo() {}\n\n// After\n// ... item has been removed\n\n// Example usage that will break.\nfn main() {\n    updated_crate::foo(); // Error: cannot find function `foo`\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Environment Variables in Cargo Config\nDESCRIPTION: Added the [env] table to Cargo config files to specify environment variables to set when running Cargo commands.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_26\n\nLANGUAGE: TOML\nCODE:\n```\n[env]\nMY_VAR = \"value\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Update with Precise Version\nDESCRIPTION: Demonstrates how to use the '--precise' option to specify a specific version number or git revision for updating a package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-update.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`--precise` <em>precise</em>\n```\n\n----------------------------------------\n\nTITLE: Homepage URL Configuration in Cargo.toml\nDESCRIPTION: This snippet shows how to specify a URL to the package's homepage. This should only be set if there is a dedicated website for the crate, different from the source repository or API documentation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\nhomepage = \"https://serde.rs\"\n```\n\n----------------------------------------\n\nTITLE: Workspace Package Inheritance Configuration\nDESCRIPTION: Example of workspace-level package configuration that can be inherited by workspace members.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/workspaces.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n# [PROJECT_DIR]/Cargo.toml\n[workspace]\nmembers = [\"bar\"]\n\n[workspace.package]\nversion = \"1.2.3\"\nauthors = [\"Nice Folks\"]\ndescription = \"A short description of my package\"\ndocumentation = \"https://example.com/bar\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n# [PROJECT_DIR]/bar/Cargo.toml\n[package]\nname = \"bar\"\nversion.workspace = true\nauthors.workspace = true\ndescription.workspace = true\ndocumentation.workspace = true\n```\n\n----------------------------------------\n\nTITLE: Specifying Build Profile in Rust\nDESCRIPTION: The --profile flag allows building with a specific named profile, offering more granular control over optimization and other build settings.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ncargo build --profile <name>\n```\n\n----------------------------------------\n\nTITLE: Executing Cargo Generate Lockfile Command in Rust\nDESCRIPTION: This command creates or updates the Cargo.lock file for the current package or workspace. It can be run with optional arguments.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-generate-lockfile.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo generate-lockfile [_options_]\n```\n\n----------------------------------------\n\nTITLE: Using Frozen Mode in Cargo Check\nDESCRIPTION: Equivalent to specifying both --locked and --offline options, ensuring deterministic builds without network access.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-check.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\ncargo check --frozen\n```\n\n----------------------------------------\n\nTITLE: Removing Target-Specific Dependency with Cargo\nDESCRIPTION: Shows how to remove a dependency (nom) for a specific target platform (x86_64-pc-windows-gnu) using cargo remove\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-remove.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo remove --target x86_64-pc-windows-gnu nom\n```\n\n----------------------------------------\n\nTITLE: Building Cargo from Source\nDESCRIPTION: Command to build Cargo from source code in release mode using the cargo build system.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Creating a Compressed .crate File with Cargo Package\nDESCRIPTION: This example demonstrates how to use the 'cargo package' command to create a compressed .crate file of the current package. This is typically used to prepare a package for publishing to a registry like crates.io.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-package.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo package\n```\n\n----------------------------------------\n\nTITLE: Feature Dependencies Tree Example in Rust\nDESCRIPTION: Example showing how to display feature dependencies using the -e features flag, demonstrating how features are enabled across different packages.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-tree.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmyproject v0.1.0 (/myproject)\n└── log feature \"serde\"\n    └── log v0.4.8\n        ├── serde v1.0.106\n        └── cfg-if feature \"default\"\n            └── cfg-if v0.1.10\n```\n\n----------------------------------------\n\nTITLE: Using Profile Overrides for Specific Packages\nDESCRIPTION: Syntax for package-specific profile overrides in Cargo, renamed in the nightly version to use a more consistent format.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_63\n\nLANGUAGE: toml\nCODE:\n```\n# In Cargo.toml\n[profile.dev.package.some-dependency]\nopt-level = 3\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Profile with LTO in Cargo.toml\nDESCRIPTION: Example of creating a custom profile 'release-lto' that inherits from the release profile and enables Link Time Optimization (LTO).\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/profiles.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[profile.release-lto]\ninherits = \"release\"\nlto = true\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Target Directory for Cargo Clean\nDESCRIPTION: Shows how to use the --target-dir option to specify a custom directory for generated artifacts and intermediate files.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-clean.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<dt class=\"option-term\" id=\"option-cargo-clean---target-dir\"><a class=\"option-anchor\" href=\"#option-cargo-clean---target-dir\"></a><code>--target-dir</code> <em>directory</em></dt>\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Benchmark with Filtering in Cargo\nDESCRIPTION: Example of running only a benchmark named 'foo' with exact matching using the cargo bench command. This passes arguments after '--' to the benchmark binary rather than to Cargo itself.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-bench.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo bench -- foo --exact\n```\n\n----------------------------------------\n\nTITLE: Using Workspace Metadata in Cargo.toml\nDESCRIPTION: Example of how to use the new `metadata` table in the `workspace` definition in Cargo.toml, which can be used for arbitrary data similar to the `package.metadata` table.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_43\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nmembers = [\"package1\", \"package2\"]\nmetadata = { custom-info = \"This data can be used by external tools\" }\n```\n\n----------------------------------------\n\nTITLE: Cargo Target Selection Option: --all-targets\nDESCRIPTION: Explains the --all-targets flag, which selects all available targets for the specified action. Equivalent to combining multiple target-specific flags.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-targets.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--all-targets`\" }}\n{{actionverb}} all targets. This is equivalent to specifying `--lib --bins\n--tests --benches --examples`.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Adding repr(align) - Major Change\nDESCRIPTION: Shows how adding repr(align) can break code when the type is used in packed structures.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n// Before\npub struct Aligned {\n    pub a: i32,\n}\n\n// After\n#[repr(align(8))] // added\npub struct Aligned {\n    pub a: i32,\n}\n\n// Example usage that will break.\nuse updated_crate::Aligned;\n\n#[repr(packed)]\npub struct Packed { // Error: packed type cannot transitively contain a `#[repr(align)]` type\n    f1: Aligned,\n}\n\nfn main() {\n    let p = Packed {\n        f1: Aligned { a: 123 },\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unstable Features in Cargo Config File\nDESCRIPTION: Shows how to enable unstable features using the 'unstable' table in the Cargo config file (.cargo/config.toml). This example enables the 'mtime-on-use' and 'build-std' features.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[unstable]\nmtime-on-use = true\nbuild-std = [\"core\", \"alloc\"]\n```\n\n----------------------------------------\n\nTITLE: Checking for Unsafe Code in Rust Package\nDESCRIPTION: This command checks if your Rust package (excluding dependencies) uses unsafe code by passing the -D unsafe-code flag to rustc.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-rustc.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo rustc --lib -- -D unsafe-code\n```\n\n----------------------------------------\n\nTITLE: Configuring Different Binary Name in Cargo.toml\nDESCRIPTION: This TOML snippet shows how to use the 'different-binary-name' feature to set a custom filename for a binary target in Cargo.toml.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_34\n\nLANGUAGE: toml\nCODE:\n```\ncargo-features = [\"different-binary-name\"]\n\n[package]\nname =  \"foo\"\nversion = \"0.0.1\"\n\n[[bin]]\nname = \"foo\"\nfilename = \"007bar\"\npath = \"src/main.rs\"\n```\n\n----------------------------------------\n\nTITLE: Common Cargo Fix Command Options\nDESCRIPTION: General purpose options including toolchain selection, configuration overrides, and help commands.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-fix.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n+<toolchain>\n--config KEY=VALUE\n-C <PATH>\n-h, --help\n-Z <flag>\n```\n\n----------------------------------------\n\nTITLE: Running Rust files with Cargo script\nDESCRIPTION: Example of running a .rs file directly with cargo's script feature, which allows executing Rust files without creating a full project structure.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_40\n\nLANGUAGE: console\nCODE:\n```\n$ cargo +nightly -Zscript file.rs\n```\n\n----------------------------------------\n\nTITLE: Checking for Unsafe Code in Rust Package\nDESCRIPTION: Example command to check if a package uses unsafe code, excluding dependencies. Uses the -D unsafe-code flag with rustc.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustc.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncargo rustc --lib -- -D unsafe-code\n```\n\n----------------------------------------\n\nTITLE: Implementing Portable Native Library Build Script with cc\nDESCRIPTION: An improved build script using the cc crate to compile a C file into a static library in a portable, cross-platform manner.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-script-examples.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n// build.rs\n\nfn main() {\n    cc::Build::new()\n        .file(\"src/hello.c\")\n        .compile(\"hello\");\n    println!(\"cargo::rerun-if-changed=src/hello.c\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Development Dependency in Rust\nDESCRIPTION: Demonstrates adding trybuild as a development dependency for testing purposes.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-add.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo add --dev trybuild\n```\n\n----------------------------------------\n\nTITLE: Displaying the latest future-incompat report\nDESCRIPTION: Example showing how to display the latest future incompatibility report, which shows information about dependencies that may break in future Rust versions.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-report.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo report future-incompat\n```\n\n----------------------------------------\n\nTITLE: Using cargo init Command in Bash\nDESCRIPTION: Example of creating a binary Cargo package in the current directory using the 'cargo init' command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-init.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo init\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Packages in Rust\nDESCRIPTION: This command displays a list of all packages installed using Cargo.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-install.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --list\n```\n\n----------------------------------------\n\nTITLE: Package Selection Command Options\nDESCRIPTION: Command-line options for selecting specific packages in Cargo operations, including package specification and workspace handling.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-tree.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n-p spec\n--package spec\n--workspace\n--exclude SPEC\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Overrides in .cargo/config.toml\nDESCRIPTION: Demonstrates using paths configuration for temporary dependency overrides in .cargo/config.toml. Limited to exact dependency matches.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/overriding-dependencies.md#2025-04-21_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\npaths = [\"/path/to/uuid\"]\n```\n\n----------------------------------------\n\nTITLE: Using the cargo-remove Command\nDESCRIPTION: The basic command syntax for removing dependencies from a Cargo.toml manifest file. The command can take one or more dependency names as arguments.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-remove.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo remove [_options_] _dependency_...\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Native Library Build Script\nDESCRIPTION: A build script that compiles a C file into a static library and instructs Cargo to link against it. Uses explicit gcc and ar commands.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-script-examples.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n// build.rs\n\nuse std::process::Command;\nuse std::env;\nuse std::path::Path;\n\nfn main() {\n    let out_dir = env::var(\"OUT_DIR\").unwrap();\n\n    // Note that there are a number of downsides to this approach, the comments\n    // below detail how to improve the portability of these commands.\n    Command::new(\"gcc\").args(&[\"src/hello.c\", \"-c\", \"-fPIC\", \"-o\"])\n                       .arg(&format!(\"{}/hello.o\", out_dir))\n                       .status().unwrap();\n    Command::new(\"ar\").args(&[\"crus\", \"libhello.a\", \"hello.o\"])\n                      .current_dir(&Path::new(&out_dir))\n                      .status().unwrap();\n\n    println!(\"cargo::rustc-link-search=native={}\", out_dir);\n    println!(\"cargo::rustc-link-lib=static=hello\");\n    println!(\"cargo::rerun-if-changed=src/hello.c\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using cargo fix in a basic form\nDESCRIPTION: Demonstrates the basic usage of the cargo fix command, which behaves like cargo check but also applies available fixes.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-fix.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo fix\n```\n\n----------------------------------------\n\nTITLE: Using Manifest Path Option in Cargo Build (Rust)\nDESCRIPTION: Specifies the path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\ncargo build --manifest-path path/to/Cargo.toml\n```\n\n----------------------------------------\n\nTITLE: Running Filtered Cargo Tests\nDESCRIPTION: This example shows how to run specific tests by applying a filter to the 'cargo test' command. This will execute only tests with the string 'foo' in their name.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/tests.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cargo test foo\n```\n\n----------------------------------------\n\nTITLE: Credentials Configuration in TOML\nDESCRIPTION: Example of storing registry access tokens in Cargo's credentials.toml file for authentication with remote registries.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/config.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[registry]\ntoken = \"…\"   # Access token for crates.io\n\n[registries.<name>]\ntoken = \"…\"   # Access token for the named registry\n```\n\n----------------------------------------\n\nTITLE: Cargo Fix with Feature Flag\nDESCRIPTION: Running cargo fix with specific feature flags enabled to analyze conditionally compiled code\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-fix.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo fix --features foo\n```\n\n----------------------------------------\n\nTITLE: Removing Basic Dependency with Cargo\nDESCRIPTION: Shows how to remove a regular dependency (regex) from a Rust project using cargo remove\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-remove.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo remove regex\n```\n\n----------------------------------------\n\nTITLE: Initializing a Rust Package in the Current Directory\nDESCRIPTION: Commands to create a new directory, navigate to it, and initialize a Rust package in that location.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir foo && cd foo\ncargo init .\n```\n\n----------------------------------------\n\nTITLE: Specifying Build Target in Rust\nDESCRIPTION: The --target flag allows building for a specific architecture. The format is <arch><sub>-<vendor>-<sys>-<abi>. This can be specified multiple times and affects where artifacts are placed.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ncargo build --target <arch><sub>-<vendor>-<sys>-<abi>\n```\n\n----------------------------------------\n\nTITLE: Vendoring Dependencies to a Custom Directory\nDESCRIPTION: Vendors all dependencies into a specified folder path. This example uses 'third-party/vendor' as the target directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-vendor.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo vendor third-party/vendor\n```\n\n----------------------------------------\n\nTITLE: Running Filtered Tests with Thread Control in Cargo\nDESCRIPTION: Example of filtering tests with 'foo' in their name and running them on 3 threads in parallel using the cargo test command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-test.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo test foo -- --test-threads 3\n```\n\n----------------------------------------\n\nTITLE: Build Script for C Code with zlib Headers\nDESCRIPTION: Build script showing how to compile C code with zlib headers from libz-sys\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-script-examples.md#2025-04-21_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    let mut cfg = cc::Build::new();\n    cfg.file(\"src/zuser.c\");\n    if let Some(include) = std::env::var_os(\"DEP_Z_INCLUDE\") {\n        cfg.include(include);\n    }\n    cfg.compile(\"zuser\");\n    println!(\"cargo::rerun-if-changed=src/zuser.c\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Enum Variants Without Non-Exhaustive Attribute in Rust\nDESCRIPTION: Demonstrates how adding a new enum variant without the #[non_exhaustive] attribute is a breaking change. It shows how existing match statements can fail to compile.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_25\n\nLANGUAGE: rust\nCODE:\n```\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub enum E {\n    Variant1,\n}\n\n///////////////////////////////////////////////////////////\n// After\npub enum E {\n    Variant1,\n    Variant2,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nfn main() {\n    use updated_crate::E;\n    let x = E::Variant1;\n    match x { // Error: `E::Variant2` not covered\n        E::Variant1 => {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Working Directory for Cargo Build (Rust)\nDESCRIPTION: Changes the current working directory before executing operations. Affects where Cargo looks for the project manifest and config files. Requires nightly channel and -Z unstable-options flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\ncargo -C path/to/my-project build\n```\n\n----------------------------------------\n\nTITLE: Listing Cargo Configuration Environment Variables in Markdown\nDESCRIPTION: This snippet contains a markdown list of all the environment variables that Cargo uses for configuration. Each variable is linked to its corresponding configuration option in the Cargo documentation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/environment-variables.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* `CARGO_ALIAS_<name>` --- Command aliases, see [`alias`].\n* `CARGO_BUILD_JOBS` --- Number of parallel jobs, see [`build.jobs`].\n* `CARGO_BUILD_RUSTC` --- The `rustc` executable, see [`build.rustc`].\n* `CARGO_BUILD_RUSTC_WRAPPER` --- The `rustc` wrapper, see [`build.rustc-wrapper`].\n* `CARGO_BUILD_RUSTC_WORKSPACE_WRAPPER` --- The `rustc` wrapper for workspace members only, see [`build.rustc-workspace-wrapper`].\n* `CARGO_BUILD_RUSTDOC` --- The `rustdoc` executable, see [`build.rustdoc`].\n* `CARGO_BUILD_TARGET` --- The default target platform, see [`build.target`].\n* `CARGO_BUILD_TARGET_DIR` --- The default output directory, see [`build.target-dir`].\n* `CARGO_BUILD_RUSTFLAGS` --- Extra `rustc` flags, see [`build.rustflags`].\n* `CARGO_BUILD_RUSTDOCFLAGS` --- Extra `rustdoc` flags, see [`build.rustdocflags`].\n* `CARGO_BUILD_INCREMENTAL` --- Incremental compilation, see [`build.incremental`].\n* `CARGO_BUILD_DEP_INFO_BASEDIR` --- Dep-info relative directory, see [`build.dep-info-basedir`].\n* `CARGO_CARGO_NEW_VCS` --- The default source control system with [`cargo new`], see [`cargo-new.vcs`].\n* `CARGO_FUTURE_INCOMPAT_REPORT_FREQUENCY` --- How often we should generate a future incompat report notification, see [`future-incompat-report.frequency`].\n* `CARGO_HTTP_DEBUG` --- Enables HTTP debugging, see [`http.debug`].\n* `CARGO_HTTP_PROXY` --- Enables HTTP proxy, see [`http.proxy`].\n* `CARGO_HTTP_TIMEOUT` --- The HTTP timeout, see [`http.timeout`].\n* `CARGO_HTTP_CAINFO` --- The TLS certificate Certificate Authority file, see [`http.cainfo`].\n* `CARGO_HTTP_CHECK_REVOKE` --- Disables TLS certificate revocation checks, see [`http.check-revoke`].\n* `CARGO_HTTP_SSL_VERSION` --- The TLS version to use, see [`http.ssl-version`].\n* `CARGO_HTTP_LOW_SPEED_LIMIT` --- The HTTP low-speed limit, see [`http.low-speed-limit`].\n* `CARGO_HTTP_MULTIPLEXING` --- Whether HTTP/2 multiplexing is used, see [`http.multiplexing`].\n* `CARGO_HTTP_USER_AGENT` --- The HTTP user-agent header, see [`http.user-agent`].\n* `CARGO_INSTALL_ROOT` --- The default directory for [`cargo install`], see [`install.root`].\n* `CARGO_NET_RETRY` --- Number of times to retry network errors, see [`net.retry`].\n* `CARGO_NET_GIT_FETCH_WITH_CLI` --- Enables the use of the `git` executable to fetch, see [`net.git-fetch-with-cli`].\n* `CARGO_NET_OFFLINE` --- Offline mode, see [`net.offline`].\n* `CARGO_PROFILE_<name>_BUILD_OVERRIDE_<key>` --- Override build script profile, see [`profile.<name>.build-override`].\n* `CARGO_PROFILE_<name>_CODEGEN_UNITS` --- Set code generation units, see [`profile.<name>.codegen-units`].\n* `CARGO_PROFILE_<name>_DEBUG` --- What kind of debug info to include, see [`profile.<name>.debug`].\n* `CARGO_PROFILE_<name>_DEBUG_ASSERTIONS` --- Enable/disable debug assertions, see [`profile.<name>.debug-assertions`].\n* `CARGO_PROFILE_<name>_INCREMENTAL` --- Enable/disable incremental compilation, see [`profile.<name>.incremental`].\n* `CARGO_PROFILE_<name>_LTO` --- Link-time optimization, see [`profile.<name>.lto`].\n* `CARGO_PROFILE_<name>_OVERFLOW_CHECKS` --- Enable/disable overflow checks, see [`profile.<name>.overflow-checks`].\n* `CARGO_PROFILE_<name>_OPT_LEVEL` --- Set the optimization level, see [`profile.<name>.opt-level`].\n* `CARGO_PROFILE_<name>_PANIC` --- The panic strategy to use, see [`profile.<name>.panic`].\n* `CARGO_PROFILE_<name>_RPATH` --- The rpath linking option, see [`profile.<name>.rpath`].\n* `CARGO_PROFILE_<name>_SPLIT_DEBUGINFO` --- Controls debug file output behavior, see [`profile.<name>.split-debuginfo`].\n* `CARGO_PROFILE_<name>_STRIP` --- Controls stripping of symbols and/or debuginfos, see [`profile.<name>.strip`].\n* `CARGO_REGISTRIES_<name>_CREDENTIAL_PROVIDER` --- Credential provider for a registry, see [`registries.<name>.credential-provider`].\n* `CARGO_REGISTRIES_<name>_INDEX` --- URL of a registry index, see [`registries.<name>.index`].\n* `CARGO_REGISTRIES_<name>_TOKEN` --- Authentication token of a registry, see [`registries.<name>.token`].\n* `CARGO_REGISTRY_CREDENTIAL_PROVIDER` --- Credential provider for [crates.io], see [`registry.credential-provider`].\n* `CARGO_REGISTRY_DEFAULT` --- Default registry for the `--registry` flag, see [`registry.default`].\n* `CARGO_REGISTRY_GLOBAL_CREDENTIAL_PROVIDERS` --- Credential providers for registries that do not have a specific provider defined. See [`registry.global-credential-providers`].\n* `CARGO_REGISTRY_TOKEN` --- Authentication token for [crates.io], see [`registry.token`].\n* `CARGO_TARGET_<triple>_LINKER` --- The linker to use, see [`target.<triple>.linker`]. The triple must be [converted to uppercase and underscores](config.md#environment-variables).\n* `CARGO_TARGET_<triple>_RUNNER` --- The executable runner, see [`target.<triple>.runner`].\n* `CARGO_TARGET_<triple>_RUSTFLAGS` --- Extra `rustc` flags for a target, see [`target.<triple>.rustflags`].\n* `CARGO_TERM_QUIET` --- Quiet mode, see [`term.quiet`].\n* `CARGO_TERM_VERBOSE` --- The default terminal verbosity, see [`term.verbose`].\n* `CARGO_TERM_COLOR` --- The default color mode, see [`term.color`].\n* `CARGO_TERM_PROGRESS_WHEN` --- The default progress bar showing mode, see [`term.progress.when`].\n* `CARGO_TERM_PROGRESS_WIDTH` --- The default progress bar width, see [`term.progress.width`].\n```\n\n----------------------------------------\n\nTITLE: Documentation URL Configuration in Cargo.toml\nDESCRIPTION: This snippet shows how to specify a URL to the package's documentation website. If not specified, crates.io will automatically link to the corresponding docs.rs page when available.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\ndocumentation = \"https://docs.rs/bitflags\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile-Specific Rustflags in Cargo\nDESCRIPTION: This snippet demonstrates how to set profile-specific rustflags in Cargo configuration using the unstable profile-rustflags feature.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_18\n\nLANGUAGE: toml\nCODE:\n```\n# .cargo/config.toml\n[unstable]\nprofile-rustflags = true\n\n[profile.release]\nrustflags = [ \"-C\", \"...\" ]\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Fetch Command\nDESCRIPTION: Basic usage of the cargo fetch command which downloads all dependencies specified in the Cargo.lock file for a Rust project.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-fetch.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo fetch\n```\n\n----------------------------------------\n\nTITLE: Generating Rust Project Lockfile with Cargo\nDESCRIPTION: Basic command to create or update the Cargo.lock file for a Rust package or workspace. This ensures dependency versions are locked to specific versions for reproducible builds.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-generate-lockfile.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo generate-lockfile\n```\n\n----------------------------------------\n\nTITLE: Feature-Based Dependency Tree Example\nDESCRIPTION: Demonstrates how to display dependency trees with feature information using the -e features flag, showing which features are enabled for each dependency.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-tree.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmyproject v0.1.0 (/myproject)\n└── log feature \"serde\"\n    └── log v0.4.8\n        ├── serde v1.0.106\n        └── cfg-if feature \"default\"\n            └── cfg-if v0.1.10\n```\n\n----------------------------------------\n\nTITLE: Initializing a Package in the Current Directory\nDESCRIPTION: Shows how to create a new Cargo package in the current directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmkdir foo && cd foo\ncargo init .\n```\n\n----------------------------------------\n\nTITLE: Running a Compiled Rust Binary\nDESCRIPTION: This command runs the compiled Rust binary directly from the target/debug directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/creating-a-new-project.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ./target/debug/hello_world\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Basic FFI Bindings for zlib\nDESCRIPTION: Rust FFI bindings for zlib's crc32 function with test case\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-script-examples.md#2025-04-21_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nuse std::os::raw::{c_uint, c_ulong};\n\nunsafe extern \"C\" {\n    pub fn crc32(crc: c_ulong, buf: *const u8, len: c_uint) -> c_ulong;\n}\n\n#[test]\nfn test_crc32() {\n    let s = \"hello\";\n    unsafe {\n        assert_eq!(crc32(0, s.as_ptr(), s.len() as c_uint), 0x3610a686);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Color Output in Rust Cargo Build\nDESCRIPTION: The --color flag controls when colored output is used, with options for auto-detection, always on, or always off.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\ncargo build --color auto\ncargo build --color always\ncargo build --color never\n```\n\n----------------------------------------\n\nTITLE: Cargo Yank Command Syntax\nDESCRIPTION: The basic syntax patterns for using the cargo yank command. Shows two variations - one with direct version specification and another using the --version flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-yank.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo yank [options] crate@version\ncargo yank [options] --version version [crate]\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Strip Option in Rust\nDESCRIPTION: The 'strip' option can now be specified in a Cargo profile to control symbol and debug information removal from binaries. This allows fine-grained control over binary size and debug information.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: toml\nCODE:\n```\n[profile.release]\nstrip = \"debuginfo\"\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Dependency in Cargo.toml\nDESCRIPTION: A simple Cargo.toml manifest showing a dependency on the uuid crate at version 1.0.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/overriding-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"my-library\"\nversion = \"0.1.0\"\n\n[dependencies]\nuuid = \"1.0\"\n```\n\n----------------------------------------\n\nTITLE: Using the --all-features flag with cargo bench\nDESCRIPTION: This option activates all available features of all selected packages during benchmarking, which is useful for comprehensive testing.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n--all-features\n```\n\n----------------------------------------\n\nTITLE: Specifying Target Architecture for Rust Compilation\nDESCRIPTION: The --target option allows building for a specific architecture. It can be specified multiple times and affects where target artifacts are placed.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustc.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n--target <arch><sub>-<vendor>-<sys>-<abi>\n```\n\n----------------------------------------\n\nTITLE: Building with Release Profile in Rust\nDESCRIPTION: The -r or --release flag builds optimized artifacts using the release profile. This is an alternative to specifying a profile by name.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ncargo build -r\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Displaying Cargo Version\nDESCRIPTION: Command to display the current version of Cargo. This is the primary way to check which version of Cargo is installed.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-version.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo version\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Override Settings in Cargo.toml\nDESCRIPTION: Example of overriding settings for build scripts, proc macros, and their dependencies using the build-override table.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/profiles.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[profile.dev.build-override]\nopt-level = 3\n```\n\n----------------------------------------\n\nTITLE: Tightening Generic Bounds in Rust\nDESCRIPTION: Demonstrates how tightening generic bounds on a type is a breaking change. This can break existing code that relies on looser bounds.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_34\n\nLANGUAGE: rust\nCODE:\n```\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Foo<A> {\n    pub f1: A,\n}\n\n///////////////////////////////////////////////////////////\n// After\npub struct Foo<A: Eq> {\n    pub f1: A,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Foo;\n\nfn main() {\n    let s = Foo { f1: 1.23 }; // Error: the trait bound `{float}: Eq` is not satisfied\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Rust Package Documentation with Cargo\nDESCRIPTION: The 'cargo doc' command builds documentation for the local package and its dependencies. The output is placed in the target/doc directory using rustdoc's format. Various options allow for customizing the documentation process.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-doc.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo doc [options]\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables with Force and Relative Options\nDESCRIPTION: Example of defining environment variables with special flags. The 'force' flag overrides existing environment variables, while 'relative' interprets paths relative to the config file location.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/config.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[env]\nTMPDIR = { value = \"/home/tmp\", force = true }\nOPENSSL_DIR = { value = \"vendor/openssl\", relative = true }\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Credential Providers in Cargo\nDESCRIPTION: Example configuration for setting up global credential providers in Cargo's config.toml file. This configuration uses the operating system provider with a fallback to cargo:token.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/registry-authentication.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# ~/.cargo/config.toml\n[registry]\nglobal-credential-providers = [\"cargo:token\", \"cargo:libsecret\", \"cargo:macos-keychain\", \"cargo:wincred\"]\n```\n\n----------------------------------------\n\nTITLE: Enabling Unstable Features in Cargo.toml\nDESCRIPTION: Demonstrates how to enable new unstable features in Cargo.toml using the cargo-features key. This example enables the 'test-dummy-unstable' feature.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# This specifies which new Cargo.toml features are enabled.\ncargo-features = [\"test-dummy-unstable\"]\n\n[package]\nname = \"my-package\"\nversion = \"0.1.0\"\nim-a-teapot = true  # This is a new option enabled by test-dummy-unstable.\n```\n\n----------------------------------------\n\nTITLE: Initializing Version Control System in Cargo New Command\nDESCRIPTION: The --vcs option initializes a new VCS repository for the given version control system (git, hg, pijul, or fossil) or skips VCS initialization (none). Defaults to git, the configuration value cargo-new.vcs, or none if already in a VCS repository.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-new.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n--vcs _vcs_\n```\n\n----------------------------------------\n\nTITLE: Running the Basic Cargo Login Command\nDESCRIPTION: Executes the cargo login command to save a token for the default registry (crates.io). The token will be read from stdin and saved in the credentials.toml file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-login.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo login\n```\n\n----------------------------------------\n\nTITLE: Command-line Configuration Override Examples in Console\nDESCRIPTION: Examples of using the --config flag to override Cargo configuration settings via command line, including key-value pairs and file paths.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/config.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# With `KEY=VALUE` in TOML syntax\ncargo --config net.git-fetch-with-cli=true fetch\n\n# With a path to a configuration file\ncargo --config ./path/to/my/extra-config.toml fetch\n```\n\n----------------------------------------\n\nTITLE: Checking All Targets Including Tests in Rust\nDESCRIPTION: Using 'cargo check' to check all targets, including unit tests, with a specific profile.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-check.txt#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo check --all-targets --profile=test\n```\n\n----------------------------------------\n\nTITLE: Getting Help for a Cargo Command using the help Subcommand\nDESCRIPTION: Shows how to use the 'cargo help' subcommand to get documentation for a specific Cargo command, in this case the 'build' command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-help.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo help build\n```\n\n----------------------------------------\n\nTITLE: Configuring Symbol Stripping in Cargo Profile\nDESCRIPTION: Added 'strip' option to the profile to remove symbols and debug information. This is a nightly-only feature.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_47\n\nLANGUAGE: toml\nCODE:\n```\n[profile.release]\nstrip = true\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Dependency with Feature in Cargo.toml\nDESCRIPTION: Demonstrates how cargo-add now creates a feature for optional dependencies using the dep: syntax.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n<dep> = \"dep:<dep>\"\n```\n\n----------------------------------------\n\nTITLE: Removing Development Dependencies with cargo-remove\nDESCRIPTION: Demonstrates how to remove a development dependency using the --dev flag with the cargo-remove command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-remove.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo remove --dev trybuild\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Benchmark in a Target\nDESCRIPTION: Example command for running a specific benchmark function within a specific benchmark target.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-bench.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo bench --bench bench_name -- modname::some_benchmark\n```\n\n----------------------------------------\n\nTITLE: Using Keep-Going Option in Cargo Build (Rust)\nDESCRIPTION: Builds as many crates in the dependency graph as possible, rather than aborting the build on the first failure.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\ncargo build --keep-going\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rust Executable Package\nDESCRIPTION: Command to create a new Rust package that builds an executable application named 'foobar'.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo new foobar\n```\n\n----------------------------------------\n\nTITLE: Check Package for Unsafe Code in Rust\nDESCRIPTION: Demonstrates how to check if a package's library code contains unsafe code blocks by passing the -D unsafe-code flag to rustc.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-rustc.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo rustc --lib -- -D unsafe-code\n```\n\n----------------------------------------\n\nTITLE: Defining --offline Option for Cargo in Markdown\nDESCRIPTION: Documents the --offline option for Cargo, which prevents network access. It explains the behavior when network access is needed but unavailable, and warns about potential differences in dependency resolution compared to online mode.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-locked.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--offline`\"}}\nPrevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\n{{#if (ne command \"fetch\")}}\nSee the {{man \"cargo-fetch\" 1}} command to download dependencies before going\noffline.\n{{/if}}\n\nMay also be specified with the `net.offline` [config value](../reference/config.html).\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Using build-std Feature in Cargo\nDESCRIPTION: Example of creating and running a new project with custom standard library compilation\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ cargo new foo\n$ cd foo\n$ cargo +nightly run -Z build-std --target x86_64-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Metabuild Configuration\nDESCRIPTION: Example of configuring metabuild dependencies in Cargo.toml for declarative build scripts\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\ncargo-features = [\"metabuild\"]\n\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\nmetabuild = [\"foo\", \"bar\"]\n\n[build-dependencies]\nfoo = \"1.0\"\nbar = \"1.0\"\n\n[package.metadata.foo]\nextra-info = \"qwerty\"\n```\n\n----------------------------------------\n\nTITLE: Building Test Binaries with Keep-Going Option in Rust Cargo\nDESCRIPTION: This example shows how to build test binaries separately using the --tests flag with --keep-going option, followed by running tests with --no-fail-fast to continue after failures.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-test.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --tests --keep-going\ncargo test --tests --no-fail-fast\n```\n\n----------------------------------------\n\nTITLE: Major: Changing field order in a repr(C) struct in Rust\nDESCRIPTION: Demonstrates how changing the order of fields in a struct with `repr(C)` attribute breaks external code that relies on the exact memory layout. The example shows how a C function expecting a specific memory layout will return incorrect values when field order changes.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[repr(C)]\npub struct SpecificLayout {\n    pub a: u8,\n    pub b: u32,\n}\n\n///////////////////////////////////////////////////////////\n// After\n#[repr(C)]\npub struct SpecificLayout {\n    pub b: u32, // changed order\n    pub a: u8,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::SpecificLayout;\n\nunsafe extern \"C\" {\n    // This C function is assuming a specific layout defined in a C header.\n    fn c_fn_get_b(x: &SpecificLayout) -> u32;\n}\n\nfn main() {\n    let p = SpecificLayout { a: 1, b: 2 };\n    unsafe { assert_eq!(c_fn_get_b(&p), 2) } // Error: value not equal to 2\n}\n\n# mod cdep {\n#     // This simulates what would normally be something included from a build script.\n#     // This definition would be in a C header.\n#     #[repr(C)]\n#     pub struct SpecificLayout {\n#         pub a: u8,\n#         pub b: u32,\n#     }\n#\n#     #[no_mangle]\n#     pub fn c_fn_get_b(x: &SpecificLayout) -> u32 {\n#         x.b\n#     }\n# }\n```\n\n----------------------------------------\n\nTITLE: Setting Cargo Configuration\nDESCRIPTION: Example of using --config flag to override Cargo configuration values using TOML syntax.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-package.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\nKEY=VALUE\n```\n\n----------------------------------------\n\nTITLE: Cargo Tree Command for Feature Investigation\nDESCRIPTION: Command to investigate which packages activated specific features using cargo tree with the features edge flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/resolver.md#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ cargo tree --workspace --target all --all-features --edges features --invert rand\nrand v0.8.5\n└── ...\n\nrand v0.8.5\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Adding Crate Owner Example\nDESCRIPTION: Example command showing how to invite a user to become an owner of a crate named 'foo'.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-owner.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo owner --add username foo\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Known Hosts in TOML\nDESCRIPTION: Example configuration for setting SSH known host keys in the Cargo config file. This shows how to add a host key for example.com using SSH ED25519 key type.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/config.md#2025-04-21_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[net.ssh]\nknown-hosts = [\n    \"example.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFO4Q5T0UV0SQevair9PFwoxY9dl4pQl3u5phoqJH3cF\"\n]\n```\n\n----------------------------------------\n\nTITLE: Crate Version Specification\nDESCRIPTION: Example of specifying a crate with version constraint when adding a dependency\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-add.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ncrate@version\n```\n\n----------------------------------------\n\nTITLE: Using --help Flag with Cargo Commands\nDESCRIPTION: Illustrates an alternative way to access help information for Cargo commands by using the '--help' flag. This example shows how to get help for the 'cargo build' command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-help.txt#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncargo build --help\n```\n\n----------------------------------------\n\nTITLE: Target Architecture Specification\nDESCRIPTION: Format for specifying target architecture when running the package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-run.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n<arch><sub>-<vendor>-<sys>-<abi>\n```\n\n----------------------------------------\n\nTITLE: Removing a Regular Dependency with Cargo\nDESCRIPTION: Example command showing how to remove 'regex' as a regular dependency from a Cargo.toml manifest file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-remove.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo remove regex\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Cargo Check with Test Profile\nDESCRIPTION: Shows how to check all targets including unit tests using the test profile configuration.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-check.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo check --all-targets --profile=test\n```\n\n----------------------------------------\n\nTITLE: Build Script Link Arguments\nDESCRIPTION: Example of the cargo:rustc-link-arg-bin build script instruction for specifying linker arguments for binaries.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_33\n\nLANGUAGE: rust\nCODE:\n```\nprintln!(\"cargo:rustc-link-arg-bin=<argument>\");\n```\n\n----------------------------------------\n\nTITLE: Using Glob Patterns with Cargo Target Selection Flags\nDESCRIPTION: Demonstrates how to use Unix glob patterns with Cargo target selection flags. Quotes are required to prevent shell expansion of glob patterns.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-targets.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nNote that `--bin`, `--example`, `--test` and `--bench` flags also \nsupport common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your \nshell accidentally expanding glob patterns before Cargo handles them, you must \nuse single quotes or double quotes around each glob pattern.\n```\n\n----------------------------------------\n\nTITLE: Using Locked Dependencies in Cargo Doc Command\nDESCRIPTION: Ensures that exactly the same dependencies and versions are used as specified in the existing Cargo.lock file. Useful for deterministic builds in CI pipelines.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-doc.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n--locked\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Profile in Rust Cargo\nDESCRIPTION: Added support for custom named profiles in Cargo. This changes how test and bench profiles inherit settings and how profiles are applied during builds.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_29\n\nLANGUAGE: TOML\nCODE:\n```\n[profile.release-lto]\ninherits = \"release\"\nlto = true\n```\n\n----------------------------------------\n\nTITLE: Cargo Update Command Example\nDESCRIPTION: Basic command for updating dependencies using cargo update\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/resolver.md#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ cargo update\n```\n\n----------------------------------------\n\nTITLE: Setting Target Directory Option in Cargo Doc Command\nDESCRIPTION: Uses the --target-dir option to specify a custom directory for generated documentation artifacts. Can also be set through environment variables or configuration files.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-doc.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--target-dir directory\n```\n\n----------------------------------------\n\nTITLE: Using cargo-rustdoc with Custom CSS\nDESCRIPTION: Example showing how to build documentation with custom CSS included from a specified file using cargo-rustdoc.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-rustdoc.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo rustdoc --lib -- --extend-css extra.css\n```\n\n----------------------------------------\n\nTITLE: Cargo Configuration Override Example\nDESCRIPTION: Example of TOML syntax for overriding Cargo configuration values using the --config flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-metadata.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nKEY=VALUE\n```\n\n----------------------------------------\n\nTITLE: Building a Local Rust Package with Cargo\nDESCRIPTION: Basic command to build a local Rust package and all of its dependencies using Cargo.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Read Request Message Format\nDESCRIPTION: Message sent by Cargo to retrieve credentials for reading crate information.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/credential-provider-protocol.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // Protocol version\n    \"v\":1,\n    // Request kind: get credentials\n    \"kind\":\"get\",\n    // Action to perform: read crate information\n    \"operation\":\"read\",\n    // Registry information (see Registry information)\n    \"registry\":{\"index-url\":\"sparse+https://registry-url/index/\", \"name\": \"my-registry\"},\n    // Additional command-line args (optional)\n    \"args\":[]\n}\n```\n\n----------------------------------------\n\nTITLE: Major: Removing repr(C) from a struct in Rust\nDESCRIPTION: Demonstrates how removing the `repr(C)` attribute from a struct breaks FFI compatibility. External C code that expects a specific memory layout will no longer be able to reliably interact with the Rust struct.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[repr(C)]\npub struct SpecificLayout {\n    pub a: u8,\n    pub b: u32,\n}\n\n///////////////////////////////////////////////////////////\n// After\n// removed repr(C)\npub struct SpecificLayout {\n    pub a: u8,\n    pub b: u32,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::SpecificLayout;\n\nunsafe extern \"C\" {\n    // This C function is assuming a specific layout defined in a C header.\n    fn c_fn_get_b(x: &SpecificLayout) -> u32; // Error: is not FFI-safe\n}\n\nfn main() {\n    let p = SpecificLayout { a: 1, b: 2 };\n    unsafe { assert_eq!(c_fn_get_b(&p), 2) }\n}\n\n# mod cdep {\n#     // This simulates what would normally be something included from a build script.\n#     // This definition would be in a C header.\n#     #[repr(C)]\n#     pub struct SpecificLayout {\n#         pub a: u8,\n#         pub b: u32,\n#     }\n#\n#     #[no_mangle]\n#     pub fn c_fn_get_b(x: &SpecificLayout) -> u32 {\n#         x.b\n#     }\n# }\n```\n\n----------------------------------------\n\nTITLE: Adding Keywords to Package in Cargo.toml\nDESCRIPTION: Defines searchable keywords for the package, limited to 5 ASCII keywords of max 20 characters each.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\nkeywords = [\"gamedev\", \"graphics\"]\n```\n\n----------------------------------------\n\nTITLE: Adding a New Cargo Feature\nDESCRIPTION: Example of a minor change where a new Cargo feature is added. This demonstrates that adding features is generally backward compatible, as long as the feature doesn't introduce breaking changes.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_51\n\nLANGUAGE: toml\nCODE:\n```\n# MINOR CHANGE\n\n###########################################################\n# Before\n[features]\n# ..empty\n\n###########################################################\n# After\n[features]\nstd = []\n```\n\n----------------------------------------\n\nTITLE: Cleaning Release Artifacts with Cargo\nDESCRIPTION: Command to selectively remove only the release build artifacts while preserving debug builds.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-clean.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo clean --release\n```\n\n----------------------------------------\n\nTITLE: Vendoring Multiple Workspaces\nDESCRIPTION: Vendors the current workspace along with another workspace specified by its Cargo.toml path. Uses the -s flag to include additional manifests.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-vendor.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo vendor -s ../path/to/Cargo.toml\n```\n\n----------------------------------------\n\nTITLE: Edition migration with cargo fix\nDESCRIPTION: Example showing how to prepare code for the next Rust edition.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-fix.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo fix --edition\n```\n\n----------------------------------------\n\nTITLE: Setting Build Script in Cargo.toml\nDESCRIPTION: Specifies a build script file for building native code, defaulting to build.rs.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\nbuild = \"build.rs\"\n```\n\n----------------------------------------\n\nTITLE: Remove Release Build Artifacts with Cargo Clean\nDESCRIPTION: Command to selectively remove only the release build artifacts while preserving debug builds.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-clean.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncargo clean --release\n```\n\n----------------------------------------\n\nTITLE: Displaying Cargo Update Command Synopsis\nDESCRIPTION: Shows the basic syntax for using the 'cargo update' command, including optional arguments and specifications.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-update.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`cargo update` [_options_] _spec_\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Run with Example and Arguments\nDESCRIPTION: Shows how to run a specific example with additional arguments using the 'cargo run' command. The '--example' flag specifies the example to run, and arguments after '--' are passed to the example.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-run.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --example exname -- --exoption exarg1 exarg2\n```\n\n----------------------------------------\n\nTITLE: Removing a Target-Specific Dependency with Cargo\nDESCRIPTION: Example command showing how to remove 'nom' from a specific target platform (Windows x86_64) dependencies table in a Cargo.toml manifest file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-remove.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo remove --target x86_64-pc-windows-gnu nom\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen Backend in Cargo.toml\nDESCRIPTION: This TOML snippet shows how to select a specific codegen backend (Cranelift) for a package in the development profile using the unstable 'codegen-backend' feature.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_38\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"foo\"\n\n[dependencies]\nserde = \"1.0.117\"\n\n[profile.dev.package.foo]\ncodegen-backend = \"cranelift\"\n```\n\n----------------------------------------\n\nTITLE: Using Locked Dependencies in Cargo Check\nDESCRIPTION: Asserts that the exact same dependencies and versions are used as when the existing Cargo.lock file was originally generated. Useful for environments where deterministic builds are desired, such as in CI pipelines.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-check.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\ncargo check --locked\n```\n\n----------------------------------------\n\nTITLE: Basic cargo fix example\nDESCRIPTION: Example of applying compiler suggestions to the local package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-fix.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo fix\n```\n\n----------------------------------------\n\nTITLE: Using the cargo metadata command in a terminal\nDESCRIPTION: The basic syntax for running the cargo metadata command. This command outputs machine-readable JSON data about the current Cargo package and its dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n`cargo metadata` [_options_]\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Profile for Cargo Clean\nDESCRIPTION: Demonstrates how to use the --profile option to remove artifacts for a specific profile.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-clean.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<dt class=\"option-term\" id=\"option-cargo-clean---profile\"><a class=\"option-anchor\" href=\"#option-cargo-clean---profile\"></a><code>--profile</code> <em>name</em></dt>\n```\n\n----------------------------------------\n\nTITLE: Generalizing Rust Function to Use Generics\nDESCRIPTION: Illustrates a minor change where function parameters and return types are generalized to use generics while supporting the original types, maintaining backwards compatibility.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_43\n\nLANGUAGE: rust\nCODE:\n```\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub fn foo(x: u8) -> u8 {\n    x\n}\npub fn bar<T: Iterator<Item = u8>>(t: T) {}\n\n///////////////////////////////////////////////////////////\n// After\nuse std::ops::Add;\npub fn foo<T: Add>(x: T) -> T {\n    x\n}\npub fn bar<T: IntoIterator<Item = u8>>(t: T) {}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nuse updated_crate::{bar, foo};\n\nfn main() {\n    foo(1);\n    bar(vec![1, 2, 3].into_iter());\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Registry Authentication in TOML\nDESCRIPTION: Illustrates the structure of the credentials.toml file used to store authentication information for registries. This file is typically located in the Cargo home directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/registries.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[registries.my-registry]\ntoken = \"854DvwSlUwEHtIo3kWy6x7UCPKHfzCmy\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions CI for Rust Projects\nDESCRIPTION: A GitHub Actions workflow configuration that builds and tests a Rust project across multiple toolchain versions (stable, beta, and nightly). The workflow runs on both push and pull request events and uses Ubuntu as the runner.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/continuous-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Cargo Build & Test\n\non:\n  push:\n  pull_request:\n\nenv: \n  CARGO_TERM_COLOR: always\n\njobs:\n  build_and_test:\n    name: Rust project - latest\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        toolchain:\n          - stable\n          - beta\n          - nightly\n    steps:\n      - uses: actions/checkout@v4\n      - run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}\n      - run: cargo build --verbose\n      - run: cargo test --verbose\n  \n```\n\n----------------------------------------\n\nTITLE: Checking Local Package in Rust\nDESCRIPTION: Basic usage of the 'cargo check' command to check the local package for errors without building.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-check.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo check\n```\n\n----------------------------------------\n\nTITLE: Configuring Display Options in Cargo Fix\nDESCRIPTION: Command-line flags for controlling output verbosity, color settings, and message formatting in Cargo fix command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-fix.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n-v, --verbose\n-q, --quiet\n--color <when>\n--message-format <fmt>\n```\n\n----------------------------------------\n\nTITLE: Performing Manual Garbage Collection with Cargo Clean (Shell)\nDESCRIPTION: This snippet shows how to use the 'cargo clean gc' command for manual garbage collection. It includes examples of specifying age and size limits for different cache types.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_48\n\nLANGUAGE: sh\nCODE:\n```\ncargo clean gc\ncargo clean gc --max-download-age=1week\ncargo clean gc --max-git-size=0 --max-download-size=100MB\n```\n\n----------------------------------------\n\nTITLE: Generating Cargo Build Timings Report\nDESCRIPTION: This command runs a Cargo build with the --timings option, which generates an HTML report of build timings. The report is saved in the target/cargo-timings directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/timings.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo build --timings\n```\n\n----------------------------------------\n\nTITLE: Basic Cargo Fix Command\nDESCRIPTION: Basic usage of cargo fix to automatically apply rustc's suggestions to source code\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-fix.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo fix\n```\n\n----------------------------------------\n\nTITLE: Working with Unpublished Minor Version in Cargo.toml\nDESCRIPTION: Cargo.toml configuration showing how to use a newer version from a git repository before it's published to crates.io.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/overriding-dependencies.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"my-library\"\nversion = \"0.1.0\"\n\n[dependencies]\nuuid = \"1.0.1\"\n\n[patch.crates-io]\nuuid = { git = 'https://github.com/uuid-rs/uuid.git' }\n```\n\n----------------------------------------\n\nTITLE: Package Target Configuration\nDESCRIPTION: Example of setting target configuration for individual packages in Cargo.toml using the unstable per-package-target feature.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_34\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"example\"\ntarget = \"<target-triple>\"\n```\n\n----------------------------------------\n\nTITLE: Feature Dependency Analysis\nDESCRIPTION: Command to explain why features are enabled for a specific package\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-tree.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncargo tree -e features -i syn\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Thread Control\nDESCRIPTION: Example showing how to control both build jobs and test threads using cargo test command flags\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-test.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo test -j 2 -- --test-threads=2\n```\n\n----------------------------------------\n\nTITLE: Removing All Artifacts with Cargo Clean\nDESCRIPTION: This command removes the entire target directory, deleting all generated artifacts from previous builds.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-clean.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo clean\n```\n\n----------------------------------------\n\nTITLE: Applying edition idioms with cargo fix\nDESCRIPTION: Example of updating code to use the preferred style for the current edition.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-fix.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo fix --edition-idioms\n```\n\n----------------------------------------\n\nTITLE: Using the --test flag with cargo bench\nDESCRIPTION: This option allows benchmarking of specific integration test targets by name. It supports multiple specifications and Unix glob patterns when properly quoted.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n--test name…\n```\n\n----------------------------------------\n\nTITLE: Removing Development Dependency with Cargo\nDESCRIPTION: Demonstrates removing a development dependency (trybuild) using the --dev flag with cargo remove\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-remove.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo remove --dev trybuild\n```\n\n----------------------------------------\n\nTITLE: Building and Running Tests with Keep-Going Option\nDESCRIPTION: Example demonstrating how to build test binaries separately and run tests without stopping at first failure\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-test.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --tests --keep-going\ncargo test --tests --no-fail-fast\n```\n\n----------------------------------------\n\nTITLE: Using Named Profiles in Cargo Configuration\nDESCRIPTION: A nightly-only feature that supports custom named profiles beyond the standard dev, release, test, and bench profiles.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_62\n\nLANGUAGE: toml\nCODE:\n```\n# In Cargo.toml\n[profile.custom-profile-name]\nopt-level = 3\ndebug = false\n```\n\n----------------------------------------\n\nTITLE: Basic Dependency Tree Example\nDESCRIPTION: Shows a simple example of dependency tree output for a project depending on the rand package, demonstrating the hierarchical structure and de-duplication marking.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-tree.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmyproject v0.1.0 (/myproject)\n└── rand v0.7.3\n    ├── getrandom v0.1.14\n    │   ├── cfg-if v0.1.10\n    │   └── libc v0.2.68\n    ├── libc v0.2.68 (*)\n    ├── rand_chacha v0.2.2\n    │   ├── ppv-lite86 v0.2.6\n    │   └── rand_core v0.5.1\n    │       └── getrandom v0.1.14 (*)\n    └── rand_core v0.5.1 (*)\n[build-dependencies]\n└── cc v1.0.50\n```\n\n----------------------------------------\n\nTITLE: Logging in to Default Registry\nDESCRIPTION: Example showing how to save an authentication token for the default registry (typically crates.io).\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-login.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo login\n```\n\n----------------------------------------\n\nTITLE: Cleaning Only Documentation in Cargo\nDESCRIPTION: Demonstrates how to use the --doc option to remove only the doc directory in the target directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-clean.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<dt class=\"option-term\" id=\"option-cargo-clean---doc\"><a class=\"option-anchor\" href=\"#option-cargo-clean---doc\"></a><code>--doc</code></dt>\n```\n\n----------------------------------------\n\nTITLE: Invoking Custom Subcommand in Cargo\nDESCRIPTION: Demonstrates the pattern for invoking a custom Cargo subcommand. Cargo translates the command into an invocation of an external tool with a specific naming convention.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/external-tools.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\ncargo `(?<command>[^ ]+)`\n```\n\n----------------------------------------\n\nTITLE: Running cargo doc basic command\nDESCRIPTION: Example command for building the local package documentation and its dependencies, which will output to target/doc directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-doc.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo doc\n```\n\n----------------------------------------\n\nTITLE: Configuring Future Incompatibility Report in Cargo (TOML)\nDESCRIPTION: TOML configuration for the future incompatibility report feature in Cargo. It shows how to set the frequency of the report in the .cargo/config.toml file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/future-incompat-report.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[future-incompat-report]\nfrequency = \"always\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Executable Package\nDESCRIPTION: Demonstrates how to create a new package that builds an executable using Cargo.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo new foobar\n```\n\n----------------------------------------\n\nTITLE: Using Weak Dependency Features in Cargo\nDESCRIPTION: Example of the weak dependency feature syntax which enables a feature for a dependency without enabling the dependency itself, using the format 'dep_name?/feat_name'.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_39\n\nLANGUAGE: toml\nCODE:\n```\ndep_name?/feat_name\n```\n\n----------------------------------------\n\nTITLE: Outputting Compilation Timing Information in Rust\nDESCRIPTION: The --timings option outputs information about compilation duration and concurrency. It accepts optional output formats, with HTML being the default.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustc.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n--timings=<fmts>\n```\n\n----------------------------------------\n\nTITLE: Filtering Cargo Tree by Package\nDESCRIPTION: Command to display all packages that depend on a specific package (syn)\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-tree.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo tree -i syn\n```\n\n----------------------------------------\n\nTITLE: Performing a Dry Run of Crate Publication\nDESCRIPTION: This command performs a dry run of the crate publication process, which includes verification checks, compression, and compilation testing without actually uploading to crates.io.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/publishing.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo publish --dry-run\n```\n\n----------------------------------------\n\nTITLE: Logging in to Custom Registry\nDESCRIPTION: Example showing how to save an authentication token for a specific registry by using the --registry flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-login.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo login --registry my-registry\n```\n\n----------------------------------------\n\nTITLE: Setting Build Flags in TOML Config\nDESCRIPTION: Example of the new host table configuration in Cargo.toml for setting build flags for the host target, along with target-applies-to-host control option.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_32\n\nLANGUAGE: toml\nCODE:\n```\n[host]\n# Build flags for host target\n\ntarget-applies-to-host = true\n```\n\n----------------------------------------\n\nTITLE: Cargo Target Selection Option: --benches\nDESCRIPTION: Details the --benches flag, which selects all targets with the 'bench = true' manifest flag. Explains implications for build process and dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-targets.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--benches`\" }}\n{{actionverb}} all targets that have the `bench = true`\nmanifest flag set. By default this includes the library and binaries built\nas benchmarks, and bench targets. Be aware that this will also build any\nrequired dependencies, so the lib target may be built twice (once as a\nbenchmark, and once as a dependency for binaries, benchmarks, etc.).\nTargets may be enabled or disabled by setting the `bench` flag in the\nmanifest settings for the target.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Metadata for Current Package in Rust\nDESCRIPTION: Shows how to use the metadata command with Cargo to output JSON information about the current package. This is useful for integrating with external tools or scripts.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-metadata.txt#2025-04-21_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\ncargo metadata --format-version=1\n```\n\n----------------------------------------\n\nTITLE: Using cargo check command in Rust\nDESCRIPTION: The basic syntax for using the 'cargo check' command to check a Rust package for errors without full compilation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-check.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo check [_options_]\n```\n\n----------------------------------------\n\nTITLE: Installing a Package from Local Path in Rust\nDESCRIPTION: This command installs or reinstalls the package located in the current directory using Cargo.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-install.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --path .\n```\n\n----------------------------------------\n\nTITLE: Creating C Code for Native Library Example\nDESCRIPTION: Source code for a simple C function that prints 'Hello, World!' to be compiled and linked with Rust.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-script-examples.md#2025-04-21_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n// src/hello.c\n\n#include <stdio.h>\n\nvoid hello() {\n    printf(\"Hello, World!\\n\");\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Crate Type for Rust Compilation\nDESCRIPTION: The --crate-type option allows building for specific crate types. It accepts a comma-separated list and overrides the manifest if provided. Only works for lib or example library targets.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustc.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n--crate-type <crate-type>\n```\n\n----------------------------------------\n\nTITLE: Publishing a Package with Cargo\nDESCRIPTION: Basic example showing how to publish a Rust package using the cargo publish command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-publish.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo publish\n```\n\n----------------------------------------\n\nTITLE: Using Cargo Clean to Remove All Artifacts\nDESCRIPTION: Basic usage of the cargo clean command to remove the entire target directory containing all build artifacts in a Rust project.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-clean.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo clean\n```\n\n----------------------------------------\n\nTITLE: Using the --no-default-features flag with cargo bench\nDESCRIPTION: This option prevents activation of the 'default' feature of selected packages, allowing benchmarking with a minimal feature set.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n--no-default-features\n```\n\n----------------------------------------\n\nTITLE: Displaying Cargo Clean Command Synopsis\nDESCRIPTION: Shows the basic syntax for using the cargo clean command in the terminal.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-clean.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`cargo clean` [_options_]\n```\n\n----------------------------------------\n\nTITLE: Adding cc Crate as Build Dependency\nDESCRIPTION: Modifying Cargo.toml to include the cc crate as a build dependency for improved portability of native code compilation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-script-examples.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[build-dependencies]\ncc = \"1.0\"\n```\n\n----------------------------------------\n\nTITLE: Transitive Patching in Binary Crate's Cargo.toml\nDESCRIPTION: Cargo.toml showing how patch directives apply transitively across the dependency tree, requiring top-level definition.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/overriding-dependencies.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"my-binary\"\nversion = \"0.1.0\"\n\n[dependencies]\nmy-library = { git = 'https://example.com/git/my-library' }\nuuid = \"1.0\"\n\n[patch.crates-io]\nuuid = { git = 'https://github.com/uuid-rs/uuid.git' }\n```\n\n----------------------------------------\n\nTITLE: Cargo Offline Mode Command\nDESCRIPTION: Commands demonstrating how to use Cargo in offline mode, showing the --offline and --frozen flags that prevent network access.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/faq.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--offline\n```\n\nLANGUAGE: bash\nCODE:\n```\n--frozen\n```\n\n----------------------------------------\n\nTITLE: Packaging Multiple Crates in a Workspace with Cargo (Shell)\nDESCRIPTION: These snippets demonstrate how to package or publish multiple crates in a workspace using the 'package-workspace' feature. It includes examples for specific packages and the entire workspace.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_53\n\nLANGUAGE: sh\nCODE:\n```\ncargo +nightly -Zpackage-workspace package -p foo -p dep\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo +nightly -Zpackage-workspace publish -p foo -p dep\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo +nightly -Zpackage-workspace package --workspace\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo +nightly -Zpackage-workspace publish --workspace\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo +nightly -Zpackage-workspace --registry=my-registry package -p foo -p dep\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo +nightly -Zpackage-workspace --index=https://example.com package -p foo -p dep\n```\n\n----------------------------------------\n\nTITLE: Using the --bins flag with cargo bench\nDESCRIPTION: This option instructs Cargo to benchmark all binary targets in the package without having to name them individually.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n--bins\n```\n\n----------------------------------------\n\nTITLE: Default Members Configuration\nDESCRIPTION: Configuration showing how to specify default members for workspace operations.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/workspaces.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nmembers = [\"path/to/member1\", \"path/to/member2\", \"path/to/member3/*\"]\ndefault-members = [\"path/to/member2\", \"path/to/member3/foo\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Replacement in Cargo TOML\nDESCRIPTION: This TOML configuration demonstrates how to set up source replacement in Cargo's config file. It includes examples of defining custom sources, replacing the default crates.io source, and specifying different types of sources such as registry, local-registry, directory, and git sources.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/source-replacement.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# The `source` table is where all keys related to source-replacement\n# are stored.\n[source]\n\n# Under the `source` table are a number of other tables whose keys are a\n# name for the relevant source. For example this section defines a new\n# source, called `my-vendor-source`, which comes from a directory\n# located at `vendor` relative to the directory containing this `.cargo/config.toml`\n# file\n[source.my-vendor-source]\ndirectory = \"vendor\"\n\n# The crates.io default source for crates is available under the name\n# \"crates-io\", and here we use the `replace-with` key to indicate that it's\n# replaced with our source above.\n#\n# The `replace-with` key can also reference an alternative registry name\n# defined in the `[registries]` table.\n[source.crates-io]\nreplace-with = \"my-vendor-source\"\n\n# Each source has its own table where the key is the name of the source\n[source.the-source-name]\n\n# Indicate that `the-source-name` will be replaced with `another-source`,\n# defined elsewhere\nreplace-with = \"another-source\"\n\n# Several kinds of sources can be specified (described in more detail below):\nregistry = \"https://example.com/path/to/index\"\nlocal-registry = \"path/to/registry\"\ndirectory = \"path/to/vendor\"\n\n# Git sources can optionally specify a branch/tag/rev as well\ngit = \"https://example.com/path/to/repo\"\n# branch = \"master\"\n# tag = \"v1.0.1\"\n# rev = \"313f44e8\"\n```\n\n----------------------------------------\n\nTITLE: Installing Custom Credential Provider Configuration\nDESCRIPTION: Example showing how to configure a third-party credential provider (1password) in Cargo's config.toml file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/registry-authentication.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[registry]\nglobal-credential-providers = [\"cargo:token\", \"cargo-credential-1password --account my.1password.com\"]\n```\n\n----------------------------------------\n\nTITLE: Removing Default Registry Token using Cargo\nDESCRIPTION: Example command showing how to remove the token for the default registry (typically crates.io)\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-logout.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo logout\n```\n\n----------------------------------------\n\nTITLE: Using the --timings flag with cargo bench\nDESCRIPTION: This option outputs information about compilation times and concurrency. It accepts optional output formats (html or json) and is useful for diagnosing build performance issues.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n--timings=fmts\n```\n\n----------------------------------------\n\nTITLE: Listing Available Target Architectures with Rustc\nDESCRIPTION: Command to list all supported target architectures using rustc. This helps in choosing the appropriate target for cross-compilation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-check.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrustc --print target-list\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Metadata Command\nDESCRIPTION: Example of running cargo metadata command to output JSON information about the current package using a specific format version.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-metadata.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo metadata --format-version=1\n```\n\n----------------------------------------\n\nTITLE: Basic Cargo Uninstall Command Usage\nDESCRIPTION: Example showing how to uninstall a previously installed package named 'ripgrep'.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-uninstall.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo uninstall ripgrep\n```\n\n----------------------------------------\n\nTITLE: Using Cargo Fetch with Toolchain Specification\nDESCRIPTION: Example of using cargo fetch with a specific Rust toolchain via rustup integration.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-fetch.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n+toolchain\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Dependencies with Cargo Update in Rust\nDESCRIPTION: This command updates only the specified dependencies (foo and bar) in the Cargo.lock file. It performs a conservative update, meaning only the specified dependencies and their necessary transitive dependencies are updated.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-update.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo update foo bar\n```\n\n----------------------------------------\n\nTITLE: JSON Output Format for Cargo Package --list with --message-format=json Option\nDESCRIPTION: Shows the JSON format used when listing package contents with 'cargo package --list --message-format=json'. This format provides machine-readable information about each packaged file, including its source and destination in the package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-package.txt#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  /* The Package ID Spec of the package. */\n  \"id\": \"path+file:///home/foo#0.0.0\",\n  /* Files of this package */\n  \"files\" {\n    /* Relative path in the archive file. */\n    \"Cargo.toml.orig\": {\n      /* Where the file is from.\n         - \"generate\" for file being generated during packaging\n         - \"copy\" for file being copied from another location.\n      */\n      \"kind\": \"copy\",\n      /* For the \"copy\" kind,\n         it is an absolute path to the actual file content.\n         For the \"generate\" kind,\n         it is the original file the generated one is based on.\n      */\n      \"path\": \"/home/foo/Cargo.toml\"\n    },\n    \"Cargo.toml\": {\n      \"kind\": \"generate\",\n      \"path\": \"/home/foo/Cargo.toml\"\n    },\n    \"src/main.rs\": {\n      \"kind\": \"copy\",\n      \"path\": \"/home/foo/src/main.rs\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building with Artifact Directory Flag\nDESCRIPTION: Command line example showing how to use the artifact directory feature with cargo build\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo +nightly build --artifact-dir=out -Z unstable-options\n```\n\n----------------------------------------\n\nTITLE: Running Cargo with garbage collection enabled\nDESCRIPTION: Example command showing how to enable the garbage collection feature which cleans up Cargo's cache of unused dependencies and files.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_46\n\nLANGUAGE: console\nCODE:\n```\ncargo build -Zgc\n```\n\n----------------------------------------\n\nTITLE: Using Frozen Mode in Cargo Build (Rust)\nDESCRIPTION: Equivalent to specifying both --locked and --offline options. Ensures deterministic builds without network access.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\ncargo build --frozen\n```\n\n----------------------------------------\n\nTITLE: Displaying Cargo Version Command\nDESCRIPTION: Shows the basic usage of the cargo version command to display the Cargo version information.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-version.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo version\n```\n\n----------------------------------------\n\nTITLE: Selecting Rustup Toolchain for Cargo Doc Command\nDESCRIPTION: When Cargo is installed with rustup, specifies a particular toolchain to use for documentation generation, such as stable or nightly.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-doc.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n+toolchain\n```\n\n----------------------------------------\n\nTITLE: Restricting Package Publishing in TOML\nDESCRIPTION: Shows how to restrict package publishing to specific registries in the Cargo.toml manifest. This helps prevent accidental publishing of closed-source packages to public registries.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/registries.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\npublish = [\"my-registry\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Parallel Jobs in Cargo Documentation Build\nDESCRIPTION: Examples of using job control flags with cargo doc command. The -j or --jobs option controls the number of parallel jobs, defaulting to logical CPU count. Negative values set max jobs to CPU count plus the value.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-doc.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncargo doc -j1\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo doc -j1 --keep-going\n```\n\n----------------------------------------\n\nTITLE: Inspecting Specific Package Version\nDESCRIPTION: Example command demonstrating how to inspect a specific version (1.0.0) of the serde package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-info.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo info serde@1.0.0\n```\n\n----------------------------------------\n\nTITLE: Rust Feature Flag Example\nDESCRIPTION: Example showing the -F flag usage as an alias for --features in cargo add command\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\ncargo add package_name -F feature_name\ncargo add package_name --features feature_name\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Fix for Edition Migration\nDESCRIPTION: Using cargo fix with the edition flag to migrate code to the next Rust edition. This updates the code but doesn't modify the Cargo.toml edition field.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-fix.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo fix --edition\n```\n\n----------------------------------------\n\nTITLE: Defining Package Exclusions in Cargo.toml\nDESCRIPTION: The 'package.exclude' field in Cargo.toml can now match directory names. If a directory is specified, the entire directory will be excluded from packaging.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_45\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nexclude = [\"excluded_directory/\"]\n```\n\n----------------------------------------\n\nTITLE: Enabling Codegen Backend Feature in Cargo Configuration\nDESCRIPTION: This TOML snippet demonstrates how to enable the unstable 'codegen-backend' feature in Cargo's configuration file and set it for a specific package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_39\n\nLANGUAGE: toml\nCODE:\n```\n# .cargo/config.toml\n[unstable]\ncodegen-backend = true\n\n[profile.dev.package.foo]\ncodegen-backend = \"cranelift\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Binary Cargo Package Example\nDESCRIPTION: Example command to create a new binary Cargo package named 'foo' in a new directory. This creates the default project structure with src/main.rs.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-new.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo new foo\n```\n\n----------------------------------------\n\nTITLE: Configuring Resolver Version in Workspace TOML\nDESCRIPTION: Example of specifying the resolver version in a virtual workspace's Cargo.toml file. The resolver setting affects all workspace members.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/resolver.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nmembers = [\"member1\", \"member2\"]\nresolver = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MSRV-aware dependency addition in Cargo.toml\nDESCRIPTION: Specifies the minimum supported Rust version (MSRV) for a package, which Cargo will respect when adding new dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\nrust-version = \"1.56\"\n```\n\n----------------------------------------\n\nTITLE: Generalizing Rust Trait Object to Generic Parameter\nDESCRIPTION: Demonstrates a minor change where a function parameter is changed from a trait object to a generic type parameter, maintaining compatibility with existing code.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_44\n\nLANGUAGE: rust\nCODE:\n```\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub trait Trait {}\npub fn foo(t: &dyn Trait) {}\n\n///////////////////////////////////////////////////////////\n// After\npub trait Trait {}\npub fn foo<T: Trait + ?Sized>(t: &T) {}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nuse updated_crate::{foo, Trait};\n\nstruct Foo;\nimpl Trait for Foo {}\n\nfn main() {\n    let obj = Foo;\n    foo(&obj);\n}\n```\n\n----------------------------------------\n\nTITLE: Cargo Package Selection Options Example\nDESCRIPTION: Shows the command line syntax for selecting specific packages using glob patterns and workspace flags in Cargo commands.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/section-package-selection.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`-p` _spec_... `--package` _spec_...\n`--workspace`\n`--all`\n`--exclude` _SPEC_...\n```\n\n----------------------------------------\n\nTITLE: Configuring File Inclusion in Cargo.toml\nDESCRIPTION: This TOML snippet demonstrates how to use the 'include' key in Cargo.toml to explicitly list files or patterns that should be included in the crate package, overriding the 'exclude' key.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/publishing.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\ninclude = [\n    \"**/*.rs\",\n]\n```\n\n----------------------------------------\n\nTITLE: Version-Specific Package Info Query - Cargo CLI\nDESCRIPTION: Shows how to retrieve information about a specific version (1.0.0) of the 'serde' package using cargo info command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-info.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo info serde@1.0.0\n```\n\n----------------------------------------\n\nTITLE: Building and Running All Benchmarks\nDESCRIPTION: Example command for building and executing all benchmarks of the current package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-bench.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo bench\n```\n\n----------------------------------------\n\nTITLE: OpenSSL Version Detection in Build Script\nDESCRIPTION: Build script code demonstrating OpenSSL version detection and cfg generation\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-script-examples.md#2025-04-21_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nprintln!(\"cargo::metadata=version_number={openssl_version:x}\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nprintln!(\"cargo::rustc-check-cfg=cfg(ossl101,ossl102)\");\nprintln!(\"cargo::rustc-check-cfg=cfg(ossl110,ossl110g,ossl111)\");\n\nif let Ok(version) = env::var(\"DEP_OPENSSL_VERSION_NUMBER\") {\n    let version = u64::from_str_radix(&version, 16).unwrap();\n\n    if version >= 0x1_00_01_00_0 {\n        println!(\"cargo::rustc-cfg=ossl101\");\n    }\n    if version >= 0x1_00_02_00_0 {\n        println!(\"cargo::rustc-cfg=ossl102\");\n    }\n    if version >= 0x1_01_00_00_0 {\n        println!(\"cargo::rustc-cfg=ossl110\");\n    }\n    if version >= 0x1_01_00_07_0 {\n        println!(\"cargo::rustc-cfg=ossl110g\");\n    }\n    if version >= 0x1_01_01_00_0 {\n        println!(\"cargo::rustc-cfg=ossl111\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Selection Options\nDESCRIPTION: Commands for controlling which features are enabled when running the package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-run.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n-F features\n--features features\n--all-features\n--no-default-features\n```\n\n----------------------------------------\n\nTITLE: Listing Crate Owners Example\nDESCRIPTION: Example command showing how to list all owners of a crate named 'foo'.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-owner.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo owner --list foo\n```\n\n----------------------------------------\n\nTITLE: Parallel Jobs Configuration\nDESCRIPTION: Example of parallel jobs configuration showing both short and long format options. Allows specification of number of parallel jobs to run during installation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-install.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n-j N\n--jobs N\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Fix with Feature Flag\nDESCRIPTION: Running cargo fix with a specific feature enabled, which is necessary for fixing code that is conditionally enabled with optional features.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-fix.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo fix --features foo\n```\n\n----------------------------------------\n\nTITLE: Overriding Configuration Values in Cargo Doc Command\nDESCRIPTION: Overrides Cargo configuration values either through KEY=VALUE TOML syntax or by providing a path to an extra configuration file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-doc.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n--config KEY=VALUE or PATH\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Publishing in Cargo JSON\nDESCRIPTION: Specifies the structure for defining package publishing settings in Cargo's metadata JSON, including allowed registries.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-metadata.txt#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"publish\": [\n    \"crates-io\"\n]\n```\n\n----------------------------------------\n\nTITLE: Display Latest Future-Incompat Report in Cargo\nDESCRIPTION: Example command showing how to display the latest future-incompatibility report using cargo-report.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-report.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo report future-incompat\n```\n\n----------------------------------------\n\nTITLE: Getting Help for a Cargo Command using the --help Flag\nDESCRIPTION: Demonstrates how to use the '--help' flag with any Cargo command to get documentation. This example shows how to get help for the 'build' command using the flag approach.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-help.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --help\n```\n\n----------------------------------------\n\nTITLE: Using cargo fix for a specific target platform\nDESCRIPTION: Demonstrates how to target platform-specific code using the --target flag with cargo fix.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-fix.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo fix --target x86_64-pc-windows-gnu\n```\n\n----------------------------------------\n\nTITLE: Configuring Rustflags in Cargo Profile\nDESCRIPTION: Added support for specifying 'rustflags' within a Cargo profile definition. This allows setting compiler flags on a per-profile basis.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: toml\nCODE:\n```\n[profile.dev]\nrustflags = [\"-C\", \"debuginfo=2\"]\n```\n\n----------------------------------------\n\nTITLE: Forwarding --print Flag to Rustc in Cargo\nDESCRIPTION: This command demonstrates how to use the unstable feature to forward the '--print' flag to rustc through Cargo, specifically to print cfg values.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_33\n\nLANGUAGE: console\nCODE:\n```\ncargo rustc --print=cfg\n```\n\n----------------------------------------\n\nTITLE: Specifying Manifest Path in Cargo Doc Command\nDESCRIPTION: Indicates a custom path to the Cargo.toml file. By default, Cargo searches for the manifest file in the current directory or any parent directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-doc.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n--manifest-path path\n```\n\n----------------------------------------\n\nTITLE: Using Manifest Path Option in Cargo Check\nDESCRIPTION: Specifies the path to the Cargo.toml file for the 'cargo check' command. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-check.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ncargo check --manifest-path path/to/Cargo.toml\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Usage in Cargo Build Scripts\nDESCRIPTION: Example of RUSTC_WORKSPACE_WRAPPER environment variable usage for local workspace packages with independent artifact caching.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_35\n\nLANGUAGE: rust\nCODE:\n```\nRUSTC_WORKSPACE_WRAPPER=/path/to/wrapper\n```\n\n----------------------------------------\n\nTITLE: Minor: Converting between tuple and normal struct with all private fields in Rust\nDESCRIPTION: Demonstrates a minor change where converting between a tuple struct and a normal struct is safe when all fields are private. External code cannot construct or access the fields directly, so the change doesn't break existing code.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[derive(Default)]\npub struct Foo(i32);\n\n///////////////////////////////////////////////////////////\n// After\n#[derive(Default)]\npub struct Foo {\n    f1: i32,\n}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nfn main() {\n    // Cannot access private fields.\n    let x = updated_crate::Foo::default();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cargo Owner Command Syntax\nDESCRIPTION: Demonstrates the basic syntax for using the cargo owner command to add, remove, or list owners of a crate in the registry.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-owner.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo owner [_options_] --add _login_ [_crate_]\ncargo owner [_options_] --remove _login_ [_crate_]\ncargo owner [_options_] --list [_crate_]\n```\n\n----------------------------------------\n\nTITLE: Outputting Build Timing Information in Rust\nDESCRIPTION: The --timings flag outputs information about compilation times and concurrency. It accepts optional output formats, defaulting to HTML. JSON output requires the -Zunstable-options flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\ncargo build --timings\ncargo build --timings=html\ncargo build -Zunstable-options --timings=json\n```\n\n----------------------------------------\n\nTITLE: Using the --bin flag with cargo bench\nDESCRIPTION: This option allows benchmarking of specific binary targets by name. It supports multiple specifications and Unix glob patterns when properly quoted.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--bin name…\n```\n\n----------------------------------------\n\nTITLE: Building Benchmarks with Keep-Going and Running with No-Fail-Fast\nDESCRIPTION: Example of building benchmarks with --keep-going flag and then running them with --no-fail-fast to continue after failures.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-bench.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --benches --release --keep-going\ncargo bench --no-fail-fast\n```\n\n----------------------------------------\n\nTITLE: Configuring README in Cargo.toml\nDESCRIPTION: Configuration example showing how to specify or suppress the automatic README file detection in Cargo.toml. If not specified, Cargo will automatically infer from files named README, README.md, or README.txt.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_42\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"my-package\"\nversion = \"0.1.0\"\n# Let Cargo automatically detect README file\n# Or explicitly set it:\n# readme = \"README.md\"\n# Or disable it:\n# readme = false\n```\n\n----------------------------------------\n\nTITLE: Feature Selection Options\nDESCRIPTION: Commands for controlling feature activation in Cargo packages.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-tree.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n-F features\n--features features\n--all-features\n--no-default-features\n```\n\n----------------------------------------\n\nTITLE: Changing repr(packed(N)) Value - Major Change\nDESCRIPTION: Illustrates how changing the packing value can break field reference safety and alignment assumptions.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n// Before\n#[repr(packed(4))]\npub struct Packed {\n    pub a: u8,\n    pub b: u32,\n}\n\n// After\n#[repr(packed(2))] // changed to 2\npub struct Packed {\n    pub a: u8,\n    pub b: u32,\n}\n\n// Example usage that will break.\nuse updated_crate::Packed;\n\nfn main() {\n    let p = Packed { a: 1, b: 2 };\n    let x = &p.b; // Error: reference to packed field is unaligned\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Private Fields in repr(C) Struct\nDESCRIPTION: Demonstrates how to safely add private fields to a repr(C) struct while maintaining compatibility. Shows that private field changes are usually safe when following other guidelines, though size and alignment changes should be considered.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Default)]\n#[repr(C)]\npub struct Example {\n    pub f1: i32,\n    f2: i32, // a private field\n}\n\n#[derive(Default)]\n#[repr(C)]\npub struct Example {\n    pub f1: i32,\n    f2: i32,\n    f3: i32, // a new field\n}\n\nfn main() {\n    // NOTE: Users should not make assumptions about the size or alignment\n    // since they are not documented.\n    let f = updated_crate::Example::default();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Verbose Output Options in Cargo Doc Command\nDESCRIPTION: Controls the verbosity of output when running cargo doc. Can be used as -v or --verbose, with the option of specifying twice for 'very verbose' output.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-doc.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n-v\n```\n\nLANGUAGE: shell\nCODE:\n```\n--verbose\n```\n\n----------------------------------------\n\nTITLE: Using Unstable Flags in Cargo Doc Command (Nightly)\nDESCRIPTION: Enables unstable (nightly-only) flags to Cargo when generating documentation. Requires the nightly toolchain.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-doc.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n-Z flag\n```\n\n----------------------------------------\n\nTITLE: Updating to Latest SemVer-breaking Version\nDESCRIPTION: Shows the usage of the '--breaking' option to update a package to the latest SemVer-breaking version, which is an unstable feature available only on nightly channel.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-update.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`--breaking` <em>directory</em>\n```\n\n----------------------------------------\n\nTITLE: Defining Package Keywords in Cargo JSON\nDESCRIPTION: Shows the structure for specifying package keywords in Cargo's metadata JSON output.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-metadata.txt#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"keywords\": [\n    \"cli\"\n]\n```\n\n----------------------------------------\n\nTITLE: Using TOML 0.5 Syntax in Cargo Configuration Files\nDESCRIPTION: Cargo now supports the 0.5 TOML syntax in its configuration files. This update allows for more advanced TOML features including better datetime handling, improved table array syntax, and other enhancements documented in the TOML changelog.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_64\n\nLANGUAGE: toml\nCODE:\n```\n# Example of TOML 0.5 syntax that's now supported in Cargo\n```\n\n----------------------------------------\n\nTITLE: Removing a Cargo Feature (Breaking Change)\nDESCRIPTION: Example of a major change where a Cargo feature is removed. This is a breaking change as it will cause errors for any project that enabled the removed feature.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_52\n\nLANGUAGE: toml\nCODE:\n```\n# MAJOR CHANGE\n\n###########################################################\n# Before\n[features]\nlogging = []\n\n###########################################################\n# After\n[dependencies]\n# ..logging removed\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Selection in Cargo Clean\nDESCRIPTION: Demonstrates how to clean only specific packages using the -p or --package options.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-clean.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<dt class=\"option-term\" id=\"option-cargo-clean--p\"><a class=\"option-anchor\" href=\"#option-cargo-clean--p\"></a><code>-p</code> <em>spec</em>…</dt>\n<dt class=\"option-term\" id=\"option-cargo-clean---package\"><a class=\"option-anchor\" href=\"#option-cargo-clean---package\"></a><code>--package</code> <em>spec</em>…</dt>\n```\n\n----------------------------------------\n\nTITLE: Fetching Dependencies for Specific Target Architecture\nDESCRIPTION: Command to fetch dependencies for a specific target architecture. This allows for downloading only the dependencies needed for a particular platform.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-fetch.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo fetch --target triple\n```\n\n----------------------------------------\n\nTITLE: Using Experimental Nightly Compiler Flag in Rust\nDESCRIPTION: This example demonstrates how to use an experimental flag on the nightly Rust compiler, specifically one that prints the size of every type.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-rustc.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo rustc --lib -- -Z print-type-sizes\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom License File in Cargo.toml\nDESCRIPTION: Configures a custom license file path relative to Cargo.toml for non-standard licenses.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\nlicense-file = \"LICENSE.txt\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a Cargo Package in Current Directory in Bash\nDESCRIPTION: Commands to create a directory, navigate to it, and initialize a new Cargo package in that location. This creates a Cargo.toml file and other basic project structures.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir foo && cd foo\ncargo init .\n```\n\n----------------------------------------\n\nTITLE: Safe Replacement of Optional Dependencies\nDESCRIPTION: Example demonstrating how to safely replace optional dependencies by using the 'dep:' syntax in the features table. This approach maintains compatibility by keeping the same feature name while changing the underlying implementation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_55\n\nLANGUAGE: toml\nCODE:\n```\n# MINOR CHANGE\n#\n# This example shows how to avoid breaking changes with optional dependencies.\n\n###########################################################\n# Before\n[dependencies]\ncurl = { version = \"0.4.31\", optional = true }\n\n[features]\nnetworking = [\"dep:curl\"]\n\n###########################################################\n# After\n[dependencies]\n# Here, one optional dependency was replaced with another.\nhyper = { version = \"0.14.27\", optional = true }\n\n[features]\nnetworking = [\"dep:hyper\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Rust's Cargo.toml\nDESCRIPTION: Example of how to utilize the new environment variables that are set during compilation in Rust, such as `CARGO_CRATE_NAME`, `CARGO_BIN_NAME`, `CARGO_PKG_LICENSE`, and `CARGO_PKG_LICENSE_FILE`.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_41\n\nLANGUAGE: rust\nCODE:\n```\n// Access environment variables at compile time\nlet crate_name = env!(\"CARGO_CRATE_NAME\");\nlet bin_name = option_env!(\"CARGO_BIN_NAME\");\nlet license = env!(\"CARGO_PKG_LICENSE\");\nlet license_file = option_env!(\"CARGO_PKG_LICENSE_FILE\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Library Documentation Links\nDESCRIPTION: This snippet shows how to configure Cargo to use local standard library documentation instead of the default remote links.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_21\n\nLANGUAGE: toml\nCODE:\n```\n[doc.extern-map]\nstd = \"local\"\n```\n\n----------------------------------------\n\nTITLE: Basic Package Info Query - Cargo CLI\nDESCRIPTION: Demonstrates how to fetch information about the 'serde' package from crates.io using the cargo info command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-info.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo info serde\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo Lints (TOML)\nDESCRIPTION: This snippet shows how to configure lints emitted by Cargo itself using the 'lints.cargo' table in the TOML configuration. It also demonstrates workspace-level lint configuration.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_50\n\nLANGUAGE: toml\nCODE:\n```\n[lints.cargo]\nimplicit-features = \"warn\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[workspace.lints.cargo]\nimplicit-features = \"warn\"\n\n[lints]\nworkspace = true\n```\n\n----------------------------------------\n\nTITLE: Setting Publishing Registry in Cargo New Command\nDESCRIPTION: The --registry option sets the 'publish' field in Cargo.toml to restrict publishing to the specified registry. If not set, it uses the default registry or leaves the field unset for unrestricted publishing.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-new.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n--registry _registry_\n```\n\n----------------------------------------\n\nTITLE: Basic Cargo Search Command Syntax\nDESCRIPTION: Basic command syntax for searching packages in the crates registry. Shows how to search for a specific package named 'serde'.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-search.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo search serde\n```\n\n----------------------------------------\n\nTITLE: Using Frozen Mode in Cargo Doc Command\nDESCRIPTION: Equivalent to specifying both --locked and --offline flags. Ensures deterministic builds without network access.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-doc.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n--frozen\n```\n\n----------------------------------------\n\nTITLE: SBOM Precursor Schema Definition\nDESCRIPTION: JSON schema for SBOM precursor files that contain dependency information, target details, features, and compiler metadata\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_10\n\nLANGUAGE: json5\nCODE:\n```\n{\n  \"version\": 1,\n  \"root\": 0,\n  \"crates\": [\n    {\n      \"id\": \"path+file:///sample-package#0.1.0\",\n      \"kind\": [\"bin\"],\n      \"features\": [],\n      \"dependencies\": [\n        {\n          \"index\": 1,\n          \"kind\": \"normal\"\n        },\n        {\n          \"index\": 1,\n          \"kind\": \"build\"\n        }\n      ]\n    },\n    {\n      \"id\": \"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.16\",\n      \"kind\": [\"bin\"],\n      \"features\": [],\n      \"dependencies\": []\n    }\n  ],\n  \"rustc\": {\n    \"version\": \"1.86.0-nightly\",\n    \"wrapper\": null,\n    \"workspace_wrapper\": null,\n    \"commit_hash\": \"bef3c3b01f690de16738b1c9f36470fbfc6ac623\",\n    \"host\": \"x86_64-pc-windows-msvc\",\n    \"verbose_version\": \"rustc 1.86.0-nightly (bef3c3b01 2025-02-04)\\nbinary: rustc\\ncommit-hash: bef3c3b01f690de16738b1c9f36470fbfc6ac623\\ncommit-date: 2025-02-04\\nhost: x86_64-pc-windows-msvc\\nrelease: 1.86.0-nightly\\nLLVM version: 19.1.7\\n\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Cargo Configuration in Check Command\nDESCRIPTION: Overrides a Cargo configuration value for the duration of the check command. Can be specified multiple times for different values.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-check.md#2025-04-21_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\ncargo check --config KEY=VALUE\n```\n\n----------------------------------------\n\nTITLE: Vendoring Dependencies and Saving Configuration\nDESCRIPTION: Vendors dependencies and redirects the generated configuration to a Cargo config file. This saves the necessary configuration to use the vendored dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-vendor.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo vendor > path/to/my/cargo/config.toml\n```\n\n----------------------------------------\n\nTITLE: Manifest Path and Lock File Options\nDESCRIPTION: Options for specifying manifest path and controlling lock file behavior in Cargo.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-tree.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n--manifest-path path\n--locked\n--offline\n--frozen\n--lockfile-path PATH\n```\n\n----------------------------------------\n\nTITLE: Changing Working Directory for Cargo\nDESCRIPTION: Example of using -C flag to change the working directory before executing Cargo commands.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-package.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncargo -C path/to/my-project build\n```\n\n----------------------------------------\n\nTITLE: Feature Syntax Example\nDESCRIPTION: Demonstrates the syntax for enabling features of workspace members using package-name/feature-name format.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-package.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\npackage-name/feature-name\n```\n\n----------------------------------------\n\nTITLE: Basic Cargo Package ID Command\nDESCRIPTION: Basic command syntax for using cargo pkgid with optional spec argument\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-pkgid.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo pkgid [_options_] [_spec_]\n```\n\n----------------------------------------\n\nTITLE: Defining Credential Aliases in TOML Configuration\nDESCRIPTION: Example of defining a credential alias in Cargo's configuration. This allows referencing the alias in registry credential provider settings.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/config.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[credential-alias]\nmy-alias = [\"/usr/bin/cargo-credential-example\", \"--argument\", \"value\", \"--flag\"]\n```\n\n----------------------------------------\n\nTITLE: Using Dry Run Option in Cargo Clean\nDESCRIPTION: Shows how to use the --dry-run option to display a summary of what would be deleted without actually deleting anything.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-clean.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<dt class=\"option-term\" id=\"option-cargo-clean---dry-run\"><a class=\"option-anchor\" href=\"#option-cargo-clean---dry-run\"></a><code>--dry-run</code></dt>\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Lockfile Path in Cargo (Shell)\nDESCRIPTION: This snippet shows how to specify a custom path for the Cargo.lock file using the '--lockfile-path' flag. This is useful when working with read-only source directories.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_52\n\nLANGUAGE: sh\nCODE:\n```\ncargo +nightly metadata --lockfile-path=$LOCKFILES_ROOT/my-project/Cargo.lock -Z unstable-options\n```\n\n----------------------------------------\n\nTITLE: Adding Type Parameters Without Defaults to Traits in Rust\nDESCRIPTION: Demonstrates how adding a type parameter without a default to a trait is a breaking change. This affects existing implementations of the trait.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_31\n\nLANGUAGE: rust\nCODE:\n```\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub trait Trait {}\n\n///////////////////////////////////////////////////////////\n// After\npub trait Trait<T> {}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Trait;\nstruct Foo;\n\nimpl Trait for Foo {}  // Error: missing generics\n```\n\n----------------------------------------\n\nTITLE: Running a Compiled Cargo Project\nDESCRIPTION: This snippet shows how to run a compiled Cargo project by directly executing the binary file generated in the target/debug directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/getting-started/first-steps.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ./target/debug/hello_world\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Defining Cargo Documentation Output Format Option in Markdown\nDESCRIPTION: Defines the `--output-format` option for Cargo documentation generation, specifying valid values and usage constraints. It supports HTML (default) and experimental JSON output, with the latter requiring nightly Rust and an unstable options flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-output-format.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--output-format`\"}}\nThe output type for the documentation emitted. Valid values:\n\n* `html` (default): Emit the documentation in HTML format.\n* `json`: Emit the documentation in the [experimental JSON format](https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc_json_types).\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html)\nand requires the `-Z unstable-options` flag to enable.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Removing an Optional Dependency (Breaking Change)\nDESCRIPTION: Example showing how removing an optional dependency can break projects that rely on that dependency through Cargo features, as Cargo implicitly defines a feature of the same name for optional dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_54\n\nLANGUAGE: toml\nCODE:\n```\n# Breaking change example\n\n###########################################################\n# Before\n[dependencies]\ncurl = { version = \"0.4.31\", optional = true }\n\n###########################################################\n# After\n[dependencies]\n# ..curl removed\n```\n\n----------------------------------------\n\nTITLE: Specifying Target Directory in Rust\nDESCRIPTION: The --target-dir flag sets the directory for generated artifacts and intermediate files. It can also be set via environment variable or config value.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\ncargo build --target-dir <directory>\n```\n\n----------------------------------------\n\nTITLE: Specifying Target for Artifact Dependencies\nDESCRIPTION: These examples demonstrate how to specify the target for artifact dependencies, including using the special 'target' value for build dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_25\n\nLANGUAGE: toml\nCODE:\n```\n[build-dependencies]\nbar = { version = \"1.0\", artifact = \"cdylib\", target = \"wasm32-unknown-unknown\"}\nsame-target = { version = \"1.0\", artifact = \"bin\", target = \"target\" }\n```\n\n----------------------------------------\n\nTITLE: Using Keep-Going Option in Cargo Check\nDESCRIPTION: Instructs Cargo to build as many crates in the dependency graph as possible, rather than aborting the build on the first failure.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-check.md#2025-04-21_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\ncargo check --keep-going\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Paths in Cargo\nDESCRIPTION: Demonstrates how to use the include key in Cargo config files to load additional config files. The path must end with .toml and can be a single string or array of paths.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n# a path ending with `.toml`\ninclude = \"path/to/mordor.toml\"\n\n# or an array of paths\ninclude = [\"frodo.toml\", \"samwise.toml\"]\n```\n\n----------------------------------------\n\nTITLE: Declaring Artifact Dependencies in Cargo\nDESCRIPTION: These examples show how to declare artifact dependencies for different types of artifacts (staticlib, bin) in a Cargo.toml file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_23\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nbar = { version = \"1.0\", artifact = \"staticlib\" }\nzoo = { version = \"1.0\", artifact = [\"bin:cat\", \"bin:dog\"]}\n```\n\n----------------------------------------\n\nTITLE: Removing Default Registry Token with Cargo Logout\nDESCRIPTION: Example showing how to remove the API token for the default registry using the cargo logout command. This will remove credentials stored in $CARGO_HOME/credentials.toml.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-logout.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo logout\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Doc in Offline Mode\nDESCRIPTION: Prevents Cargo from accessing the network when generating documentation. Restricts to locally downloaded crates even if newer versions exist in the index.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-doc.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n--offline\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Check in Offline Mode\nDESCRIPTION: Prevents Cargo from accessing the network during the check process. It will attempt to proceed without the network if possible, using only locally downloaded crates.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-check.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\ncargo check --offline\n```\n\n----------------------------------------\n\nTITLE: Feature Documentation Block - Workspace Inheritance\nDESCRIPTION: Documentation for the stabilization of Workspace Inheritance in Cargo 1.64\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_60\n\nLANGUAGE: markdown\nCODE:\n```\n## Workspace Inheritance\n\nWorkspace Inheritance has been stabilized in the 1.64 release.\nSee [workspace.package](workspaces.md#the-package-table),\n[workspace.dependencies](workspaces.md#the-dependencies-table),\nand [inheriting-a-dependency-from-a-workspace](specifying-dependencies.md#inheriting-a-dependency-from-a-workspace)\nfor more information.\n```\n\n----------------------------------------\n\nTITLE: Using Experimental Compiler Flag in Rust\nDESCRIPTION: Shows how to use an experimental nightly compiler flag to print type sizes using the -Z print-type-sizes option.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-rustc.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo rustc --lib -- -Z print-type-sizes\n```\n\n----------------------------------------\n\nTITLE: Basic Cargo Version Command\nDESCRIPTION: Shows how to display the basic version information of Cargo using the standard command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-version.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo version\n```\n\n----------------------------------------\n\nTITLE: Changing Trait Item Signatures in Rust\nDESCRIPTION: Demonstrates how changing a trait item signature is a breaking change. This can break external implementations of the trait.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_28\n\nLANGUAGE: rust\nCODE:\n```\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub trait Trait {\n    fn f(&self, x: i32) {}\n}\n\n///////////////////////////////////////////////////////////\n// After\npub trait Trait {\n    // For sealed traits or normal functions, this would be a minor change\n    // because generalizing with generics strictly expands the possible uses.\n    // But in this case, trait implementations must use the same signature.\n    fn f<V>(&self, x: V) {}\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Trait;\nstruct Foo;\n\nimpl Trait for Foo {\n    fn f(&self, x: i32) {}  // Error: trait declaration has 1 type parameter\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Format for --message-format=json Output with Cargo Package\nDESCRIPTION: Demonstrates the JSON output format when using the --message-format=json flag with cargo package --list. The output shows package ID and a detailed breakdown of files included in the package with their source information.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-package.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  /* The Package ID Spec of the package. */\n  \"id\": \"path+file:///home/foo#0.0.0\",\n  /* Files of this package */\n  \"files\" {\n    /* Relative path in the archive file. */\n    \"Cargo.toml.orig\": {\n      /* Where the file is from.\n         - \"generate\" for file being generated during packaging\n         - \"copy\" for file being copied from another location.\n      */\n      \"kind\": \"copy\",\n      /* For the \"copy\" kind,\n         it is an absolute path to the actual file content.\n         For the \"generate\" kind,\n         it is the original file the generated one is based on.\n      */\n      \"path\": \"/home/foo/Cargo.toml\"\n    },\n    \"Cargo.toml\": {\n      \"kind\": \"generate\",\n      \"path\": \"/home/foo/Cargo.toml\"\n    },\n    \"src/main.rs\": {\n      \"kind\": \"copy\",\n      \"path\": \"/home/foo/src/main.rs\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Selection Options in Cargo Install\nDESCRIPTION: Command-line options for controlling feature activation in Cargo packages. Includes options for specifying features, enabling all features, or disabling default features.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-install.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-F features\n--features features\n--all-features\n--no-default-features\n```\n\n----------------------------------------\n\nTITLE: Specifying Target Architecture for Cargo Clean\nDESCRIPTION: Demonstrates how to use the --target option to clean artifacts for a specific architecture.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-clean.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n<dt class=\"option-term\" id=\"option-cargo-clean---target\"><a class=\"option-anchor\" href=\"#option-cargo-clean---target\"></a><code>--target</code> <em>triple</em></dt>\n```\n\n----------------------------------------\n\nTITLE: Configuring SBOM Generation in Cargo\nDESCRIPTION: Configuration settings in .cargo/config.toml to enable SBOM (Software Bill of Materials) generation for compiled artifacts\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[unstable]\nsbom = true\n\n[build]\nsbom = true\n```\n\n----------------------------------------\n\nTITLE: Basic Cargo Bench Command Example\nDESCRIPTION: Example demonstrating how to run a specific benchmark named 'foo' with exact name matching\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-bench.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo bench -- foo --exact\n```\n\n----------------------------------------\n\nTITLE: Specifying Target Architecture in Cargo\nDESCRIPTION: Shows the format for specifying a target architecture triple when using the `--target` flag in Cargo. The format includes architecture, vendor, system, and ABI components.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-check.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n<arch><sub>-<vendor>-<sys>-<abi>\n```\n\n----------------------------------------\n\nTITLE: Running cargo logout with default registry\nDESCRIPTION: Removes the token for the default registry (defaults to crates.io). This does not revoke the token on the server side.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-logout.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo logout\n```\n\n----------------------------------------\n\nTITLE: Example of Yanking a Crate Version\nDESCRIPTION: A complete example showing how to yank a specific version of a crate from the registry index.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-yank.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncargo yank foo@1.0.7\n```\n\n----------------------------------------\n\nTITLE: Documenting the --manifest-path option in Cargo\nDESCRIPTION: Documentation template for the `--manifest-path` command-line option in Cargo. It explains that this option specifies the path to the `Cargo.toml` file and describes Cargo's default behavior for locating this file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-manifest-path.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--manifest-path` _path_\" }}\nPath to the `Cargo.toml` file. By default, Cargo searches for the\n`Cargo.toml` file in the current directory or any parent directory.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Setting Parallel Jobs in Cargo Build (Rust)\nDESCRIPTION: Specifies the number of parallel jobs to run. Defaults to the number of logical CPUs. Can be set to 'default' to use the default value.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\ncargo build -j 4\n```\n\n----------------------------------------\n\nTITLE: Controlling Verbosity in Rust Cargo Build\nDESCRIPTION: The -v/--verbose and -q/--quiet flags control the verbosity of Cargo's output. Verbose mode can be specified twice for extra detail.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\ncargo build -v\ncargo build --verbose\ncargo build -q\ncargo build --quiet\n```\n\n----------------------------------------\n\nTITLE: Using the --profile flag with cargo bench\nDESCRIPTION: This option specifies which compilation profile to use for benchmarking, allowing customization of optimization levels and other compilation settings.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n--profile name\n```\n\n----------------------------------------\n\nTITLE: Using --lockfile-path Option with Cargo\nDESCRIPTION: This option changes the default lockfile path to a user-specified location. It allows operation in read-only directories by writing the lockfile elsewhere. Currently available only on the nightly channel with the -Z unstable-options flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-lockfile-path.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--lockfile-path` _PATH_\"}}\nChanges the path of the lockfile from the default (`<workspace_root>/Cargo.lock`) to _PATH_. _PATH_ must end with \n`Cargo.lock` (e.g. `--lockfile-path /tmp/temporary-lockfile/Cargo.lock`). Note that providing \n`--lockfile-path` will ignore existing lockfile at the default path, and instead will \neither use the lockfile from _PATH_, or write a new lockfile into the provided _PATH_ if it doesn't exist. \nThis flag can be used to run most commands in read-only directories, writing lockfile into the provided _PATH_.\n\nThis option is only available on the [nightly\nchannel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and\nrequires the `-Z unstable-options` flag to enable (see\n[#14421](https://github.com/rust-lang/cargo/issues/14421)).\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Copying Artifacts to Specific Directory in Rust\nDESCRIPTION: The --artifact-dir flag copies final artifacts to a specified directory. This is an unstable feature requiring the nightly channel and -Z unstable-options flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\ncargo build -Z unstable-options --artifact-dir <directory>\n```\n\n----------------------------------------\n\nTITLE: Declaring Artifact Dependency with Library Access\nDESCRIPTION: This example shows how to declare an artifact dependency while also allowing access to the dependency's library.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_24\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nbar = { version = \"1.0\", artifact = \"bin\", lib = true }\n```\n\n----------------------------------------\n\nTITLE: Removing an Owner from a Package with Cargo\nDESCRIPTION: Command to remove an existing owner (specified by username) from a package named 'foo' using the cargo owner command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-owner.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo owner --remove username foo\n```\n\n----------------------------------------\n\nTITLE: Adding an Owner to a Package with Cargo\nDESCRIPTION: Command to invite a new owner (specified by username) to a package named 'foo' using the cargo owner command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-owner.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo owner --add username foo\n```\n\n----------------------------------------\n\nTITLE: Error Handling Pattern - anyhow usage\nDESCRIPTION: Example of proper error handling using anyhow for chaining errors together and providing context. Uses InternalError for unexpected errors and CliError for process exit codes.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/implementation/console.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// Adding context to filesystem operations\nstd::fs::read_to_string(path)\n    .with_context(|| format!(\"failed to read `{}`\", path.display()))?;\n```\n\n----------------------------------------\n\nTITLE: Inspecting Package from Custom Registry\nDESCRIPTION: Example command showing how to inspect a package from a custom local registry using the --registry flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-info.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo info serde --registry my-registry\n```\n\n----------------------------------------\n\nTITLE: Defining Color Output Options in Cargo CLI\nDESCRIPTION: Documents the --color flag for Cargo that controls colored output with three possible values: auto (default), always, or never. Can also be configured via term.color config setting.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-display.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--color` _when_\"}}\nControl when colored output is used. Valid values:\n\n- `auto` (default): Automatically detect if color support is available on the\n  terminal.\n- `always`: Always display colors.\n- `never`: Never display colors.\n\nMay also be specified with the `term.color`\n[config value](../reference/config.html).\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Verbose Version Information Command\nDESCRIPTION: Shows how to display detailed version information using the verbose flag combination.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-version.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo -Vv\n```\n\n----------------------------------------\n\nTITLE: Generalizing a Function with Type Mismatch in Rust (Breaking Change)\nDESCRIPTION: This example demonstrates a breaking change where a function is generalized to use generics with a type constraint that may not be satisfied by existing code. The change adds a generic constraint `T: Copy + IntoIterator<Item = u8>` which breaks compatibility with `Vec<u8>`.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_46\n\nLANGUAGE: rust\nCODE:\n```\n// Before\npub fn foo(x: Vec<u8>) {}\n\n// After\npub fn foo<T: Copy + IntoIterator<Item = u8>>(x: T) {}\n\n// Example usage that will break.\nuse updated_crate::foo;\n\nfn main() {\n    foo(vec![1, 2, 3]); // Error: `Copy` is not implemented for `Vec<u8>`\n}\n```\n\n----------------------------------------\n\nTITLE: Using Namespaced Features in Cargo Dependencies\nDESCRIPTION: Example of the new namespaced features syntax for dependencies introduced in the nightly version, which allows explicitly specifying that a feature refers to a dependency using the format 'dep:serde'.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_38\n\nLANGUAGE: toml\nCODE:\n```\ndep:serde\n```\n\n----------------------------------------\n\nTITLE: Using Locked Mode in Cargo Clean\nDESCRIPTION: Shows how to use the --locked option to ensure exact same dependencies and versions are used as in the existing Cargo.lock file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-clean.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n<dt class=\"option-term\" id=\"option-cargo-clean---locked\"><a class=\"option-anchor\" href=\"#option-cargo-clean---locked\"></a><code>--locked</code></dt>\n```\n\n----------------------------------------\n\nTITLE: Specifying Message Format in Rust Cargo Build\nDESCRIPTION: The --message-format flag controls the output format for diagnostic messages. It supports human-readable, short, and JSON formats with various options for JSON output.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\ncargo build --message-format human\ncargo build --message-format short\ncargo build --message-format json\ncargo build --message-format json-diagnostic-short\n```\n\n----------------------------------------\n\nTITLE: Alternative Methods for Displaying Cargo Version\nDESCRIPTION: Shows alternative flag formats to display the Cargo version information using --version and -V flags.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-version.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo --version\ncargo -V\n```\n\n----------------------------------------\n\nTITLE: Feature Display Format\nDESCRIPTION: Shows features enabled on each package using custom format\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-tree.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo tree --format \"{p} {f}\"\n```\n\n----------------------------------------\n\nTITLE: Workspace Metadata Configuration\nDESCRIPTION: Example showing how to include custom metadata in the workspace configuration for external tools.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/workspaces.md#2025-04-21_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nmembers = [\"member1\", \"member2\"]\n\n[workspace.metadata.webcontents]\nroot = \"path/to/webproject\"\ntool = [\"npm\", \"run\", \"build\"]\n```\n\n----------------------------------------\n\nTITLE: Using CARGO_TARGET_TMPDIR in Integration Tests\nDESCRIPTION: Integration tests and benchmarks now have access to a temporary directory via the CARGO_TARGET_TMPDIR environment variable. This provides a scratch space in the target directory for tests and benches to use.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_31\n\nLANGUAGE: Rust\nCODE:\n```\n// In an integration test or benchmark\nlet temp_dir = std::env::var(\"CARGO_TARGET_TMPDIR\").expect(\"CARGO_TARGET_TMPDIR not set\");\nlet temp_file_path = std::path::Path::new(&temp_dir).join(\"temp_file.txt\");\n// Use temp_file_path for temporary file operations\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for Cargo\nDESCRIPTION: The main documentation structure for Cargo, including sections for getting started, guides, reference materials, commands, and appendices. Contains internal navigation links and references to external Rust resources.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# The Cargo Book\n\n![Cargo Logo](images/Cargo-Logo-Small.png)\n\nCargo is the [Rust] [*package manager*][def-package-manager]. Cargo downloads your Rust [package][def-package]'s\ndependencies, compiles your packages, makes distributable packages, and uploads them to\n[crates.io], the Rust community's [*package registry*][def-package-registry]. You can contribute\nto this book on [GitHub].\n\n## Sections\n\n**[Getting Started](getting-started/index.md)**\n\nTo get started with Cargo, install Cargo (and Rust) and set up your first\n[*crate*][def-crate].\n\n**[Cargo Guide](guide/index.md)**\n\nThe guide will give you all you need to know about how to use Cargo to develop\nRust packages.\n\n**[Cargo Reference](reference/index.md)**\n\nThe reference covers the details of various areas of Cargo.\n\n**[Cargo Commands](commands/index.md)**\n\nThe commands will let you interact with Cargo using its command-line interface.\n\n**[Frequently Asked Questions](faq.md)**\n\n**Appendices:**\n* [Glossary](appendix/glossary.md)\n* [Git Authentication](appendix/git-authentication.md)\n\n**Other Documentation:**\n* [Changelog](CHANGELOG.md)\n  --- Detailed notes about changes in Cargo in each release.\n* [Rust documentation website](https://doc.rust-lang.org/) --- Links to official\n  Rust documentation and tools.\n```\n\n----------------------------------------\n\nTITLE: Setting Parallel Jobs for Cargo Check\nDESCRIPTION: Specifies the number of parallel jobs to run during the check process. Defaults to the number of logical CPUs if not specified.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-check.md#2025-04-21_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\ncargo check --jobs 4\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Benchmark with Captured Output\nDESCRIPTION: Example command showing how to run cargo bench while displaying the benchmark execution output using the --nocapture flag\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncargo bench -- --nocapture\n```\n\n----------------------------------------\n\nTITLE: Setting Package Name in Cargo New Command\nDESCRIPTION: The --name option sets the package name. If not specified, it defaults to the directory name.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-new.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n--name _name_\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Manifest Path in Cargo Clean\nDESCRIPTION: Demonstrates how to use the --manifest-path option to specify a custom path to the Cargo.toml file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-clean.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n<dt class=\"option-term\" id=\"option-cargo-clean---manifest-path\"><a class=\"option-anchor\" href=\"#option-cargo-clean---manifest-path\"></a><code>--manifest-path</code> <em>path</em></dt>\n```\n\n----------------------------------------\n\nTITLE: Host-Specific Build Configuration\nDESCRIPTION: Example of configuring host-specific build settings including linkers and rustflags for different architectures.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n# config.toml\n[host]\nlinker = \"/path/to/host/linker\"\n[host.x86_64-unknown-linux-gnu]\nlinker = \"/path/to/host/arch/linker\"\nrustflags = [\"-Clink-arg=--verbose\"]\n[target.x86_64-unknown-linux-gnu]\nlinker = \"/path/to/target/linker\"\n```\n\n----------------------------------------\n\nTITLE: Setting Progress Bar Width in Cargo (TOML)\nDESCRIPTION: Configures the width of the progress bar in Cargo. The value should be an integer. This setting can be overridden by the CARGO_TERM_PROGRESS_WIDTH environment variable.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/config.md#2025-04-21_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\nterm.progress.width = 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging for Cargo using Environment Variables\nDESCRIPTION: This snippet demonstrates various ways to configure debug logging for Cargo using the CARGO_LOG environment variable. It shows how to set different log levels, filter by specific modules, and use additional environment variables for detailed debugging of network operations and fingerprint issues.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/implementation/debugging.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Outputs all logs with levels debug and higher\nCARGO_LOG=debug cargo generate-lockfile\n\n# Don't forget that you can filter by module as well\nCARGO_LOG=cargo::core::resolver=trace cargo generate-lockfile\n\n# This will print lots of info about the download process. `trace` prints even more.\nCARGO_HTTP_DEBUG=true CARGO_LOG=network=debug cargo fetch\n\n# This is an important command for diagnosing fingerprint issues.\nCARGO_LOG=cargo::core::compiler::fingerprint=trace cargo build\n```\n\n----------------------------------------\n\nTITLE: Running Filtered Tests in Rust Cargo\nDESCRIPTION: This command runs only tests whose names match the provided filter string, allowing for selective test execution.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-test.txt#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo test name_filter\n```\n\n----------------------------------------\n\nTITLE: Setting CARGO_BIN_EXE Environment Variable in Rust\nDESCRIPTION: The CARGO_BIN_EXE_<name> environment variable is set when an integration test is built, allowing the test to locate the executable using the env macro.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-build.txt#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstd::env::var(\"CARGO_BIN_EXE_<name>\")\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Registry Token with Cargo Logout\nDESCRIPTION: Example showing how to remove the API token for a specific registry by using the --registry flag followed by the registry name.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-logout.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo logout --registry my-registry\n```\n\n----------------------------------------\n\nTITLE: Updating Package for Next Rust Edition with cargo fix\nDESCRIPTION: Demonstrates using cargo fix with the --edition flag to prepare a Rust package for migration to the next edition.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-fix.txt#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncargo fix --edition\n```\n\n----------------------------------------\n\nTITLE: Utilizing Generated Code with include! Macro\nDESCRIPTION: Main source file that includes the generated code using include!, concat! and env! macros to incorporate the build script's output.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-script-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n// src/main.rs\n\ninclude!(concat!(env!(\"OUT_DIR\"), \"/hello.rs\"));\n\nfn main() {\n    println!(\"{}\", message());\n}\n```\n\n----------------------------------------\n\nTITLE: Example Token Environment Variable\nDESCRIPTION: Example showing how to specify registry tokens using environment variables, including the default crates.io token and custom registry tokens.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-yank.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCARGO_REGISTRY_TOKEN\nCARGO_REGISTRIES_NAME_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Token Variables\nDESCRIPTION: Environment variable examples for configuring registry authentication tokens in Cargo. The variables can override tokens stored in credentials files, with CARGO_REGISTRY_TOKEN for crates.io and CARGO_REGISTRIES_NAME_TOKEN for other registries.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-token.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCARGO_REGISTRY_TOKEN\nCARGO_REGISTRIES_NAME_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Overriding Crate Type in Rust Package\nDESCRIPTION: This command overrides the crate-type field specified in Cargo.toml with a command-line option, setting it to both 'lib' and 'cdylib'.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-rustc.txt#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo rustc --lib --crate-type lib,cdylib\n```\n\n----------------------------------------\n\nTITLE: Overriding Cargo Configuration in Build (Rust)\nDESCRIPTION: Overrides a Cargo configuration value using TOML syntax or a path to an extra configuration file. Can be specified multiple times.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\ncargo build --config KEY=VALUE\n```\n\n----------------------------------------\n\nTITLE: Introducing Generics in Rust Function Return Type\nDESCRIPTION: Shows a potentially breaking change where a function's return type is changed to use generics, which may cause type inference failures in existing code.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_45\n\nLANGUAGE: rust\nCODE:\n```\n// Breaking change example\n\n///////////////////////////////////////////////////////////\n// Before\npub fn foo() -> i32 {\n    0\n}\n\n///////////////////////////////////////////////////////////\n// After\npub fn foo<T: Default>() -> T {\n    Default::default()\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::foo;\n\nfn main() {\n    let x = foo(); // Error: type annotations needed\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Override Option in Cargo\nDESCRIPTION: Documents the --config flag that allows overriding Cargo configuration values using TOML syntax or external configuration files.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/section-options-common.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`--config` _KEY=VALUE_ or _PATH_\n```\n\n----------------------------------------\n\nTITLE: Setting trim-paths options in profile configurations\nDESCRIPTION: Example of setting different trim-paths options for development and release profiles in a project's Cargo.toml.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_45\n\nLANGUAGE: toml\nCODE:\n```\n[profile.dev]\ntrim-paths = \"all\"\n\n[profile.release]\ntrim-paths = [\"object\", \"diagnostics\"]\n```\n\n----------------------------------------\n\nTITLE: Saving a Token for a Specific Registry\nDESCRIPTION: Saves an API token for a specific registry by using the --registry flag. This allows authentication with alternative registries beyond the default crates.io.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-login.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo login --registry my-registry\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Directory Structure for Code Generation Example\nDESCRIPTION: Shows the directory structure for a simple code generation example, including the build script, cargo configuration, and source files.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-script-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── Cargo.toml\n├── build.rs\n└── src\n    └── main.rs\n\n1 directory, 3 files\n```\n\n----------------------------------------\n\nTITLE: Custom Format Cargo Tree Output\nDESCRIPTION: Command to show packages with their enabled features using custom formatting\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-tree.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncargo tree --format \"{p} {f}\"\n```\n\n----------------------------------------\n\nTITLE: Cargo Target Selection Option: --bench\nDESCRIPTION: Explains the usage of the --bench flag for selecting specific benchmark targets. Supports multiple specifications and glob patterns.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-targets.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--bench` _name_...\" }}\n{{actionverb}} the specified benchmark. This flag may be specified multiple\ntimes and supports common Unix glob patterns.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Credential Helper\nDESCRIPTION: Configuration snippet for setting up git credential helper in the global .gitconfig file. This enables storing credentials for HTTPS authentication with git repositories.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/appendix/git-authentication.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# ~/.gitconfig\n\n[credential]\nhelper = store\n```\n\n----------------------------------------\n\nTITLE: Public Dependency Configuration\nDESCRIPTION: Example of marking dependencies as public or private using the public-dependency feature\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\ncargo-features = [\"public-dependency\"]\n\n[dependencies]\nmy_dep = { version = \"1.2.3\", public = true }\nprivate_dep = \"2.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests for a Cross-Compiled Target\nDESCRIPTION: Illustrates how to run tests for a specific cross-compilation target using Cargo.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo test --target i686-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Local Package ID Retrieval in Cargo\nDESCRIPTION: Example command to retrieve package specification for 'foo' from a local package directory\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-pkgid.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo pkgid file:///path/to/local/package#foo\n```\n\n----------------------------------------\n\nTITLE: Setting Build Profile for Rustdoc\nDESCRIPTION: Shows how to use the release profile flag and custom profile flags when running rustdoc.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustdoc.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-r\n```\n\nLANGUAGE: bash\nCODE:\n```\n--release\n```\n\nLANGUAGE: bash\nCODE:\n```\n--profile name\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Rustdoc with Custom CSS in Rust\nDESCRIPTION: Demonstrates how to build documentation with custom CSS included from a given file using the cargo rustdoc command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustdoc.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo rustdoc --lib -- --extend-css extra.css\n```\n\n----------------------------------------\n\nTITLE: Generating Keypair for Asymmetric Token Authentication in Cargo\nDESCRIPTION: This command generates a public/private keypair for asymmetric token authentication, saves the private key in credentials.toml, and prints the public key in PASERK format.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_30\n\nLANGUAGE: console\nCODE:\n```\ncargo login --generate-keypair\n```\n\n----------------------------------------\n\nTITLE: Conditional std Feature Usage in wasm-bindgen\nDESCRIPTION: Example of how wasm-bindgen conditionally enables functionality that requires the standard library. These conditional compilation blocks are used throughout the codebase to provide different implementations depending on feature availability.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(feature = \"std\")]\npub use std::prelude::v1::*;\n```\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(feature = \"std\")]\nfn foo() {\n    // Implementation that uses std\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-Compiling Tests with Cargo in Bash\nDESCRIPTION: Command to run tests for a Rust package targeting a specific platform (in this case, 32-bit Linux) using the --target flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo test --target i686-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Specific Binary Target Option in Cargo Commands\nDESCRIPTION: Option flag for selecting specific binary targets by name. This flag can be used multiple times and supports Unix glob patterns to match multiple binaries at once.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-targets-lib-bin.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--bin` _name_...\" }}\n{{actionverb}} the specified binary. This flag may be specified multiple times\nand supports common Unix glob patterns.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Removing repr(align) - Major Change\nDESCRIPTION: Demonstrates how removing align attribute can break code that depends on specific alignment guarantees.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n// Before\n#[repr(C, align(8))]\npub struct Packed {\n    pub a: u8,\n    pub b: u32,\n}\n\n// After\n#[repr(C)] // removed align\npub struct Packed {\n    pub a: u8,\n    pub b: u32,\n}\n\n// Example usage that will break.\nuse updated_crate::Packed;\n\nfn main() {\n    let p = Packed { a: 1, b: 2 };\n    const _: () = assert!(std::mem::align_of::<Packed>() == 8); // Error: evaluation of constant value failed\n}\n```\n\n----------------------------------------\n\nTITLE: Registry Configuration JSON Format\nDESCRIPTION: Example configuration file (config.json) format for a Cargo registry. Defines download and API endpoints for package management. Includes optional authentication requirement flag for private registries.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/registry-index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"dl\": \"https://crates.io/api/v1/crates\",\n    \"api\": \"https://crates.io\"\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Rust Version Specification in Cargo Doc Command\nDESCRIPTION: Instructs Cargo to ignore rust-version specifications in packages when generating documentation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-doc.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n--ignore-rust-version\n```\n\n----------------------------------------\n\nTITLE: Workspace Members with Different Rust Versions\nDESCRIPTION: Illustrates how Cargo resolves dependencies when workspace members have different Rust version requirements.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/resolver.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"a\"\nrust-version = \"1.62\"\n\n[package]\nname = \"b\"\n\n[dependencies]\nclap = \"4.2\"  # resolves to 4.5.20\n```\n\n----------------------------------------\n\nTITLE: Switching from no_std to std Support in Rust (Breaking Change)\nDESCRIPTION: This example illustrates a breaking change where a library switches from supporting no_std environments to requiring std. The change introduces a dependency on std::time::SystemTime, which breaks compatibility with no_std targets as they don't have a std crate.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_48\n\nLANGUAGE: rust\nCODE:\n```\n// Before\n#![no_std]\npub fn foo() {}\n\n// After\npub fn foo() {\n    std::time::SystemTime::now();\n}\n\n// Example usage that will break.\n// This will fail to link for no_std targets because they don't have a `std` crate.\n#![no_std]\nuse updated_crate::foo;\n\nfn example() {\n    foo();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Offline Mode in Cargo Clean\nDESCRIPTION: Demonstrates how to use the --offline option to prevent Cargo from accessing the network during the clean process.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-clean.md#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n<dt class=\"option-term\" id=\"option-cargo-clean---offline\"><a class=\"option-anchor\" href=\"#option-cargo-clean---offline\"></a><code>--offline</code></dt>\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information for Cargo Commands in Bash\nDESCRIPTION: Command to display help information about a specific Cargo subcommand, in this case 'clean', which shows usage details and available options.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo help clean\n```\n\n----------------------------------------\n\nTITLE: Adding repr(int) to Enum\nDESCRIPTION: Demonstrates adding a primitive integer representation to an enum with default representation. This modification is safe as users should not make assumptions about the layout of enums with default representation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub enum E {\n    Variant1,\n    Variant2(i32),\n    Variant3 { f1: f64 },\n}\n\n#[repr(i32)] // added\npub enum E {\n    Variant1,\n    Variant2(i32),\n    Variant3 { f1: f64 },\n}\n\nfn main() {\n    let x = updated_crate::E::Variant3 { f1: 1.23 };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Target Directory for Rust Build Artifacts\nDESCRIPTION: The --target-dir option specifies the directory for generated artifacts and intermediate files. It can also be set via environment variable or config value.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustc.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n--target-dir <directory>\n```\n\n----------------------------------------\n\nTITLE: Error Response Structure Definition\nDESCRIPTION: JSON structure for error responses returned by the API. Contains an array of error objects with detailed messages.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/registry-web-api.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"errors\": [\n        {\n            \"detail\": \"error message text\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Library Target Option in Cargo Commands\nDESCRIPTION: Option flag for selecting a package's library as the target for a Cargo command operation. This is used with various Cargo commands to limit the operation to just the library component.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-targets-lib-bin.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--lib`\" }}\n{{actionverb}} the package's library.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Unstable Features Flag in Cargo\nDESCRIPTION: Details the -Z flag used to enable unstable (nightly-only) features in Cargo.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/section-options-common.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`-Z` _flag_\n```\n\n----------------------------------------\n\nTITLE: Debugging HTTP Connections in Cargo\nDESCRIPTION: This Bash command demonstrates how to enable HTTP debugging in Cargo. It sets the CARGO_HTTP_DEBUG environment variable and uses RUST_LOG to display debug information during a build.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_69\n\nLANGUAGE: Bash\nCODE:\n```\n\"CARGO_HTTP_DEBUG=true RUST_LOG=cargo::ops::registry cargo build\"\n```\n\n----------------------------------------\n\nTITLE: Conditional libcurl System Library Usage on macOS\nDESCRIPTION: Example from curl-sys showing how to override the static-curl feature on macOS with the force-system-lib-on-osx feature. This demonstrates prioritizing certain feature configurations over others.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(all(feature = \"force-system-lib-on-osx\", target_os = \"macos\"))]\nfn try_static() -> bool {\n    false\n}\n\n#[cfg(not(all(feature = \"force-system-lib-on-osx\", target_os = \"macos\")))]\nfn try_static() -> bool {\n    env::var(\"LIBCURL_STATIC\").is_ok() || cfg!(feature = \"static-curl\")\n}\n```\n\n----------------------------------------\n\nTITLE: Cargo Fix with Target Platform\nDESCRIPTION: Using cargo fix for platform-specific code by specifying the target triple\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-fix.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo fix --target x86_64-pc-windows-gnu\n```\n\n----------------------------------------\n\nTITLE: Setting Target Architecture for Rustdoc\nDESCRIPTION: Specifies how to use the --target flag to document for a specific architecture. The triple format is <arch><sub>-<vendor>-<sys>-<abi>. You can run 'rustc --print target-list' to see available targets.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustdoc.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n<arch><sub>-<vendor>-<sys>-<abi>\n```\n\nLANGUAGE: bash\nCODE:\n```\nrustc --print target-list\n```\n\n----------------------------------------\n\nTITLE: Setting and Using Variables in Cargo Documentation\nDESCRIPTION: This snippet shows how to set a variable 'foo' with the value 'Bar', and then use it in different contexts. It also demonstrates the 'lower' function to convert the variable to lowercase.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/compare/vars.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# vars(7)\n\n{{*set foo=\"Bar\"}}\n\n\n{{foo}}\n\n{{lower foo}}\n```\n\n----------------------------------------\n\nTITLE: Running All Package Benchmarks\nDESCRIPTION: Basic command to build and execute all benchmarks in the current package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncargo bench\n```\n\n----------------------------------------\n\nTITLE: Adding repr(transparent) to Default Struct - Minor Change\nDESCRIPTION: Demonstrates a safe, non-breaking change of adding repr(transparent) to a struct with default representation. This modification doesn't affect alignment, layout, or size assumptions.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n// Before\n#[derive(Default)]\npub struct Example<T>(T);\n\n// After\n#[derive(Default)]\n#[repr(transparent)] // added\npub struct Example<T>(T);\n\n// Example use of the library that will safely work.\nfn main() {\n    let x = updated_crate::Example::<i32>::default();\n}\n```\n\n----------------------------------------\n\nTITLE: Using cargo-rustdoc Command\nDESCRIPTION: The basic syntax for using the cargo-rustdoc command to build a package's documentation with custom flags passed to rustdoc.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-rustdoc.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo rustdoc [options] [-- args]\n```\n\n----------------------------------------\n\nTITLE: Cargo Credentials Storage\nDESCRIPTION: Private login credentials file created by cargo login command for registry authentication\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/cargo-home.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ncredentials.toml\n```\n\n----------------------------------------\n\nTITLE: Adding Non-Defaulted Trait Items in Rust\nDESCRIPTION: Shows how adding a non-defaulted item to a trait is a breaking change. This breaks existing implementations of the trait.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_27\n\nLANGUAGE: rust\nCODE:\n```\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub trait Trait {}\n\n///////////////////////////////////////////////////////////\n// After\npub trait Trait {\n    fn foo(&self);\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Trait;\nstruct Foo;\n\nimpl Trait for Foo {}  // Error: not all trait items implemented\n```\n\n----------------------------------------\n\nTITLE: Executing Cargo Yank Command in Rust\nDESCRIPTION: Examples of how to use the cargo yank command to remove a crate version from the index. This command requires authentication and can be used with various options.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-yank.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo yank [options] crate@version\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo yank [options] --version version [crate]\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo yank foo@1.0.7\n```\n\n----------------------------------------\n\nTITLE: Outputting Build Plan in Rust Cargo Build\nDESCRIPTION: The --build-plan flag outputs JSON messages indicating the commands to run the build. This is an unstable feature requiring the nightly channel and -Z unstable-options flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\ncargo build -Z unstable-options --build-plan\n```\n\n----------------------------------------\n\nTITLE: Generalizing Rust Struct to Use Generics with Possibly Different Types\nDESCRIPTION: Demonstrates a major change where a struct field is changed from a concrete type to a generic type parameter, potentially breaking existing code if the type can change.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_38\n\nLANGUAGE: rust\nCODE:\n```\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Foo<T = u8>(pub T, pub u8);\n\n///////////////////////////////////////////////////////////\n// After\npub struct Foo<T = u8>(pub T, pub T);\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Foo;\n\nfn main() {\n    let s: Foo<f32> = Foo(3.14, 123); // Error: mismatched types\n}\n```\n\n----------------------------------------\n\nTITLE: Incompatible Rust Version Resolution Example\nDESCRIPTION: Shows how Cargo handles dependency resolution when version requirements don't include Rust version compatible dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/resolver.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"my-cli\"\nrust-version = \"1.62\"\n\n[dependencies]\nclap = \"4.2\"  # resolves to 4.5.20\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of cargo-remove Command for Standard Dependencies\nDESCRIPTION: A simple example showing how to remove a regular dependency from a Cargo.toml manifest file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-remove.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo remove regex\n```\n\n----------------------------------------\n\nTITLE: Minor: Changing private fields in a struct that already has private fields in Rust\nDESCRIPTION: Demonstrates a minor change where adding or removing private fields from a struct that already has private fields is safe. External code cannot use struct literals or exhaustively match, so it doesn't break existing code.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[derive(Default)]\npub struct Foo {\n    f1: i32,\n}\n\n///////////////////////////////////////////////////////////\n// After\n#[derive(Default)]\npub struct Foo {\n    f2: f64,\n}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nfn main() {\n    // Cannot access private fields.\n    let x = updated_crate::Foo::default();\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Verbose Cargo Version Information\nDESCRIPTION: Command to display additional version information about Cargo. This provides more detailed version data beyond the basic version number.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-version.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo -Vv\n```\n\n----------------------------------------\n\nTITLE: Introducing New Lints in Rust Libraries\nDESCRIPTION: This example demonstrates adding a deprecated attribute to a function, which is considered a minor change even though it introduces a new lint warning. The code shows the function before and after the change, along with example usage that will generate a deprecation warning.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_50\n\nLANGUAGE: rust\nCODE:\n```\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub fn foo() {}\n\n///////////////////////////////////////////////////////////\n// After\n#[deprecated]\npub fn foo() {}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\n\nfn main() {\n    updated_crate::foo(); // Warning: use of deprecated function\n}\n```\n\n----------------------------------------\n\nTITLE: Crate Publication Metadata Structure\nDESCRIPTION: JSON structure for package metadata sent during crate publication. Includes package details, dependencies, features, and other metadata.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/registry-web-api.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"name\": \"foo\",\n    \"vers\": \"0.1.0\",\n    \"deps\": [\n        {\n            \"name\": \"rand\",\n            \"version_req\": \"^0.6\",\n            \"features\": [\"i128_support\"],\n            \"optional\": false,\n            \"default_features\": true,\n            \"target\": null,\n            \"kind\": \"normal\",\n            \"registry\": null,\n            \"explicit_name_in_toml\": null\n        }\n    ],\n    \"features\": {\n        \"extras\": [\"rand/simd_support\"]\n    },\n    \"authors\": [\"Alice <a@example.com>\"],\n    \"description\": null,\n    \"documentation\": null,\n    \"homepage\": null,\n    \"readme\": null,\n    \"readme_file\": null,\n    \"keywords\": [],\n    \"categories\": [],\n    \"license\": null,\n    \"license_file\": null,\n    \"repository\": null,\n    \"badges\": {\n        \"travis-ci\": {\n            \"branch\": \"master\",\n            \"repository\": \"rust-lang/cargo\"\n        }\n    },\n    \"links\": null,\n    \"rust_version\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Build Plan\nDESCRIPTION: Command to output JSON build information without executing the build\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo +nightly build --build-plan -Z unstable-options\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo with .toml Extension\nDESCRIPTION: Changed official documentation to recommend using '.cargo/config.toml' filenames with the '.toml' extension. This support was added in Cargo version 1.39.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_44\n\nLANGUAGE: toml\nCODE:\n```\n.cargo/config.toml\n```\n\n----------------------------------------\n\nTITLE: Enabling Example Scraping for Rustdoc in Cargo\nDESCRIPTION: This command enables the unstable feature to scrape examples from crates in the current workspace for inclusion in documentation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_35\n\nLANGUAGE: console\nCODE:\n```\ncargo doc -Z unstable-options -Z rustdoc-scrape-examples\n```\n\n----------------------------------------\n\nTITLE: Target Architecture Format Example\nDESCRIPTION: Shows the general format for specifying target architecture triple when using --target flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-package.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n<arch><sub>-<vendor>-<sys>-<abi>\n```\n\n----------------------------------------\n\nTITLE: Common Cargo CLI Options\nDESCRIPTION: Generally applicable Cargo command-line options including toolchain selection, configuration overrides, and help commands.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-run.md#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n+<toolchain>\n--config <KEY=VALUE> or <PATH>\n-C <PATH>\n-h, --help\n-Z <flag>\n```\n\n----------------------------------------\n\nTITLE: Conditional Feature Enabling in Cargo\nDESCRIPTION: The 'dep-name?/feature-name' syntax can be used in the [features] table to conditionally enable a feature only if the optional dependency is already enabled by another feature.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: toml\nCODE:\n```\n[features]\nenhanced = [\"some_dep?/extra_feature\"]\n```\n\n----------------------------------------\n\nTITLE: Listing Owners of a Package with Cargo\nDESCRIPTION: Command to list all current owners of a specified package named 'foo' using the cargo owner command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-owner.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo owner --list foo\n```\n\n----------------------------------------\n\nTITLE: Enabling Gitoxide Backend for Tests\nDESCRIPTION: Environment variable setting to use the gitoxide backend instead of git2 for all tests.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/running.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n__CARGO_USE_GITOXIDE_INSTEAD_OF_GIT2=1\n```\n\n----------------------------------------\n\nTITLE: Executing Cargo Help Command\nDESCRIPTION: Demonstrates how to use the 'cargo help' command to get assistance for a specific Cargo subcommand. This command prints a help message for the given subcommand.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-help.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncargo help [subcommand]\n```\n\n----------------------------------------\n\nTITLE: Cargo Target Selection Option: --tests\nDESCRIPTION: Details the --tests flag, which selects all targets with the 'test = true' manifest flag. Explains implications for build process and dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-targets.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--tests`\" }}\n{{actionverb}} all targets that have the `test = true` manifest\nflag set. By default this includes the library and binaries built as\nunittests, and integration tests. Be aware that this will also build any\nrequired dependencies, so the lib target may be built twice (once as a\nunittest, and once as a dependency for binaries, integration tests, etc.).\nTargets may be enabled or disabled by setting the `test` flag in the\nmanifest settings for the target.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Adding repr(packed) to Struct - Major Change\nDESCRIPTION: Shows how adding repr(packed) to a struct is a breaking change that can cause issues with field references and memory alignment.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n// Before\npub struct Example {\n    pub f1: u8,\n    pub f2: u16,\n}\n\n// After\n#[repr(packed)] // added\npub struct Example {\n    pub f1: u8,\n    pub f2: u16,\n}\n\n// Example usage that will break.\nfn main() {\n    let f = updated_crate::Example { f1: 1, f2: 2 };\n    let x = &f.f2; // Error: reference to packed field is unaligned\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Manifest Options in Cargo Fix\nDESCRIPTION: Options for specifying manifest path, version handling, and dependency locking in Cargo fix command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-fix.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n--manifest-path <path>\n--ignore-rust-version\n--locked\n--offline\n--frozen\n--lockfile-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Setting up cargo-credential in a Cargo project\nDESCRIPTION: Shows how to include the cargo-credential library as a dependency in a Cargo.toml file. This configuration specifies version 0.4 of the library.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/credential/cargo-credential/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# Add this to your Cargo.toml:\n\n[dependencies]\ncargo-credential = \"0.4\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Lockfile Path in Cargo Check\nDESCRIPTION: Changes the path of the lockfile from the default to a custom path. This option is only available on the nightly channel and requires the -Z unstable-options flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-check.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\ncargo check -Z unstable-options --lockfile-path /tmp/temporary-lockfile/Cargo.lock\n```\n\n----------------------------------------\n\nTITLE: Configuring Resolver Version in Package TOML\nDESCRIPTION: Example of specifying the resolver version in a package's Cargo.toml file. The resolver version controls feature unification behavior and other resolution settings.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/resolver.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"my-package\"\nversion = \"1.0.0\"\nresolver = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Using the -Ztimings Feature in Cargo Nightly\nDESCRIPTION: A nightly-only feature that generates an HTML report on compilation time, outputs completion steps on the console, and produces JSON data.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\n# Generate timing information\ncargo +nightly build -Ztimings\n```\n\n----------------------------------------\n\nTITLE: Adding Defaulted Type Parameters to Rust Struct\nDESCRIPTION: Shows a minor change where a defaulted type parameter is added to a struct, maintaining compatibility with existing code.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_36\n\nLANGUAGE: rust\nCODE:\n```\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[derive(Default)]\npub struct Foo {}\n\n///////////////////////////////////////////////////////////\n// After\n#[derive(Default)]\npub struct Foo<A = i32> {\n    f1: A,\n}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nuse updated_crate::Foo;\n\nfn main() {\n    let s: Foo = Default::default();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing mdBook using Cargo\nDESCRIPTION: Command to install mdBook tool required for building The Cargo Book documentation\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cargo install mdbook\n```\n\n----------------------------------------\n\nTITLE: Documenting the Cargo Jobs Parameter Option in Markdown Template\nDESCRIPTION: A documentation template that describes the `-j/--jobs` command-line option in Cargo which controls parallel job execution. It explains default values, configuration alternatives, and constraints for this parameter.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-jobs.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`-j` _N_\" \"`--jobs` _N_\"}}\nNumber of parallel jobs to run. May also be specified with the\n`build.jobs` [config value](../reference/config.html). Defaults to\nthe number of logical CPUs. If negative, it sets the maximum number of\nparallel jobs to the number of logical CPUs plus provided value. If\na string `default` is provided, it sets the value back to defaults.\nShould not be 0.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Owners List Response Structure\nDESCRIPTION: JSON structure for the response when listing crate owners, including user details.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/registry-web-api.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"users\": [\n        {\n            \"id\": 70,\n            \"login\": \"github:rust-lang:core\",\n            \"name\": \"Core\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Version-Specific Package ID Retrieval in Cargo\nDESCRIPTION: Example command to retrieve package specification for a specific version (1.0.0) of package 'foo'\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-pkgid.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo pkgid foo@1.0.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Build Profile for Rust Compilation\nDESCRIPTION: The --profile option allows building with a specific named profile. Certain profiles like 'check', 'test', and 'bench' have special behaviors in the rustc subcommand.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustc.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n--profile <name>\n```\n\n----------------------------------------\n\nTITLE: Controlling Colored Output in Cargo Update\nDESCRIPTION: Illustrates how to use the '--color' option to control when colored output is used in the cargo update command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-update.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`--color` <em>when</em>\n```\n\n----------------------------------------\n\nTITLE: Minor Change: Adding New Public Items in Rust\nDESCRIPTION: Demonstrates how adding new public items is generally a minor change, though with a caveat about glob imports potentially causing conflicts.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// Before\n// ... absence of trait\n\n// After\npub trait NewTrait {\n    fn foo(&self) {}\n}\n\nimpl NewTrait for i32 {}\n\n// Example usage that will break.\nuse updated_crate::*;\n\npub trait LocalTrait {\n    fn foo(&self) {}\n}\n\nimpl LocalTrait for i32 {}\n\nfn main() {\n    123i32.foo(); // Error:  multiple applicable items in scope\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Overrides in Cargo\nDESCRIPTION: Example profile override configuration to customize build settings for specific dependencies or build scripts.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_51\n\nLANGUAGE: toml\nCODE:\n```\n[profile.dev.overrides.\"*/*\"]\nopt-level = 2\n```\n\n----------------------------------------\n\nTITLE: Using the --target flag with cargo bench\nDESCRIPTION: This option specifies the target architecture for benchmarking. It uses the format <arch><sub>-<vendor>-<sys>-<abi> and can be specified multiple times for cross-compilation benchmarking.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n--target triple\n```\n\n----------------------------------------\n\nTITLE: Handlebars Template for Release Build Option\nDESCRIPTION: Template markup for documenting Cargo's release build flags that enable optimized compilation with the release profile. Shows both -r and --release flag syntax options.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-release.md#2025-04-21_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#option \"`-r`\" \"`--release`\"}}\n{{actionverb}} optimized artifacts with the `release` profile.\nSee also the `--profile` option for choosing a specific profile by name.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Changing Working Directory for Cargo Check\nDESCRIPTION: Changes the current working directory before executing the check command. This option is only available on the nightly channel and requires the -Z unstable-options flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-check.md#2025-04-21_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\ncargo -Z unstable-options -C path/to/my-project check\n```\n\n----------------------------------------\n\nTITLE: Basic mdman Command Example\nDESCRIPTION: Example showing how to convert a markdown document to a man page with the mdman tool, specifying the output type as man and the output directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/doc/out/mdman.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmdman -t man -o doc doc/mdman.md\n```\n\n----------------------------------------\n\nTITLE: Debugging Cargo Rebuild with Environment Variable\nDESCRIPTION: Command to enable detailed logging output for Cargo's fingerprint compiler to help diagnose why files are being rebuilt. Sets the CARGO_LOG environment variable to show compiler fingerprint information at info level.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/faq.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ CARGO_LOG=cargo::core::compiler::fingerprint=info cargo build\n```\n\n----------------------------------------\n\nTITLE: Defining --frozen Option for Cargo in Markdown\nDESCRIPTION: Documents the --frozen option for Cargo, which is equivalent to using both --locked and --offline options together.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-locked.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--frozen`\"}}\nEquivalent to specifying both `--locked` and `--offline`.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Major: Removing repr(transparent) from a type in Rust\nDESCRIPTION: Shows how removing the `repr(transparent)` attribute from a struct breaks FFI compatibility. The type no longer guarantees the same layout, alignment, and size as its contained type, making it unsuitable for FFI contexts.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[repr(transparent)]\npub struct Transparent<T>(T);\n\n///////////////////////////////////////////////////////////\n// After\n// removed repr\npub struct Transparent<T>(T);\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\n#![deny(improper_ctypes)]\nuse updated_crate::Transparent;\n\nunsafe extern \"C\" {\n    fn c_fn() -> Transparent<f64>; // Error: is not FFI-safe\n}\n\nfn main() {}\n```\n\n----------------------------------------\n\nTITLE: Updating Package for Next Edition\nDESCRIPTION: Shows how to use 'cargo fix' with the '--edition' flag to update a package in preparation for the next Rust edition.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-fix.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo fix --edition\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Lockfile Path\nDESCRIPTION: Demonstrates the usage of the '--lockfile-path' option to change the path of the lockfile, which is an unstable feature available only on nightly channel.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-update.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`--lockfile-path` <em>PATH</em>\n```\n\n----------------------------------------\n\nTITLE: Example Cargo.toml with Pre-release Dependencies\nDESCRIPTION: Configuration example showing dependency specification for pre-release versions\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nmy-dependency = \"0.1.1\"\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies Example in TOML\nDESCRIPTION: Example showing package dependency declaration with an open-ended version requirement, which is discouraged in Cargo\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/resolver.md#2025-04-21_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n# Package B\n[dependencies]\nrand = \">=0.6\"  # note: open requirements such as this are discouraged\n```\n\n----------------------------------------\n\nTITLE: Rust Environment Variable Example\nDESCRIPTION: Example showing the difference between Cargo environment variables CARGO_CRATE_NAME and CARGO_PKG_NAME\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nCARGO_CRATE_NAME\nCARGO_PKG_NAME\n```\n\n----------------------------------------\n\nTITLE: Display Options Configuration for Cargo CLI\nDESCRIPTION: Configuration options for controlling Cargo's output display, including verbosity levels, color settings, and message formatting options.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-run.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n-v, --verbose\n--quiet, -q\n--color <when>\n--message-format <fmt>\n```\n\n----------------------------------------\n\nTITLE: Search Crates Response Format\nDESCRIPTION: Response format for crate search results, including array of matching crates with name, version and description, plus metadata about total results available.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/registry-web-api.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // Array of results.\n    \"crates\": [\n        {\n            // Name of the crate.\n            \"name\": \"rand\",\n            // The highest version available.\n            \"max_version\": \"0.6.1\",\n            // Textual description of the crate.\n            \"description\": \"Random number generators and other randomness functionality.\\n\",\n        }\n    ],\n    \"meta\": {\n        // Total number of results available on the server.\n        \"total\": 119\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Cargo Manifest Commands in Markdown\nDESCRIPTION: This snippet presents a markdown-formatted list of Cargo manifest commands, each linked to its corresponding documentation file. It includes commands for adding, removing, and updating dependencies, as well as other project management tasks.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/manifest-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Manifest Commands\n\n* [cargo add](cargo-add.md)\n* [cargo_info](cargo-info.md)\n* [cargo generate-lockfile](cargo-generate-lockfile.md)\n* [cargo locate-project](cargo-locate-project.md)\n* [cargo metadata](cargo-metadata.md)\n* [cargo pkgid](cargo-pkgid.md)\n* [cargo remove](cargo-remove.md)\n* [cargo tree](cargo-tree.md)\n* [cargo update](cargo-update.md)\n* [cargo vendor](cargo-vendor.md)\n```\n\n----------------------------------------\n\nTITLE: Version Unification in Workspace Example\nDESCRIPTION: Shows how Cargo unifies versions across workspace members with different version requirements.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/resolver.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"a\"\nrust-version = \"1.62\"\n\n[dependencies]\nclap = \"4.2\"  # resolves to 4.5.20\n\n[package]\nname = \"b\"\n\n[dependencies]\nclap = \"4.5\"  # resolves to 4.5.20\n```\n\n----------------------------------------\n\nTITLE: Removing Custom Registry Token using Cargo\nDESCRIPTION: Example command demonstrating how to remove a token for a specific named registry\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-logout.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo logout --registry my-registry\n```\n\n----------------------------------------\n\nTITLE: Defining Quiet Mode Options in Cargo CLI\nDESCRIPTION: Documents the -q/--quiet flags for Cargo that suppress log messages. Can also be configured via term.quiet config setting.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-display.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`-q`\" \"`--quiet`\"}}\nDo not print cargo log messages.\nMay also be specified with the `term.quiet`\n[config value](../reference/config.html).\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Using Toolchain Override in Cargo\nDESCRIPTION: Example of using +toolchain prefix with cargo to specify a specific Rust toolchain like stable or nightly.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-package.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n+stable\n```\n\n----------------------------------------\n\nTITLE: Running Cross-Platform Doctests\nDESCRIPTION: Example of running doctests with cross-compilation support\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo test --target foo -Zdoctest-xcompile\n```\n\n----------------------------------------\n\nTITLE: Using Registry Names in Patch Tables (Nightly Only)\nDESCRIPTION: In nightly Cargo, the `[patch]` tables now accept registry names instead of just URLs. This makes it easier to patch dependencies from specific registries without needing to specify the full URL.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_67\n\nLANGUAGE: toml\nCODE:\n```\n# Example of using registry names in patch tables (nightly only)\n[patch.crates-io]\nsome-dependency = { path = \"../path/to/some-dependency\" }\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Fix for Specific Target Platform\nDESCRIPTION: Using cargo fix with a target flag to fix platform-specific code that is conditionally enabled with cfg expressions.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-fix.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo fix --target x86_64-pc-windows-gnu\n```\n\n----------------------------------------\n\nTITLE: Defining Cargo Command Line Options with Handlebars Templates\nDESCRIPTION: A Handlebars template defining two command line options for Cargo: `--no-run` to compile without running tests/benchmarks and `--no-fail-fast` to continue running tests after failures. The template uses variable {{nouns}} which is likely replaced with 'tests' or 'benchmarks' depending on context.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-test.md#2025-04-21_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#options}}\n\n{{#option \"`--no-run`\" }}\nCompile, but don't run {{nouns}}.\n{{/option}}\n\n{{#option \"`--no-fail-fast`\" }}\nRun all {{nouns}} regardless of failure. Without this flag, Cargo will exit\nafter the first executable fails. The Rust test harness will run all {{nouns}}\nwithin the executable to completion, this flag only applies to the executable\nas a whole.\n{{/option}}\n\n{{/options}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo.toml for Native Library Example\nDESCRIPTION: Basic Cargo manifest configuration for a project that builds and links to a native C library.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-script-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n# Cargo.toml\n\n[package]\nname = \"hello-world-from-c\"\nversion = \"0.1.0\"\nedition = \"2024\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Completions for Cargo in Elvish\nDESCRIPTION: Adds Cargo command completion support to Elvish shell by evaluating the output of a Cargo command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_57\n\nLANGUAGE: elvish\nCODE:\n```\neval (E:CARGO_COMPLETE=elvish cargo +nightly | slurp)\n```\n\n----------------------------------------\n\nTITLE: Setting CARGO_BIN_EXE Environment Variable Example\nDESCRIPTION: Example of using the CARGO_BIN_EXE environment variable in integration tests to locate binary targets. The env! macro should be used to get the binary path.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_48\n\nLANGUAGE: rust\nCODE:\n```\nlet binary_path = env!(\"CARGO_BIN_EXE_binary_name\");\n```\n\n----------------------------------------\n\nTITLE: Using Frozen Mode in Cargo Clean\nDESCRIPTION: Shows how to use the --frozen option, which is equivalent to specifying both --locked and --offline.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-clean.md#2025-04-21_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n<dt class=\"option-term\" id=\"option-cargo-clean---frozen\"><a class=\"option-anchor\" href=\"#option-cargo-clean---frozen\"></a><code>--frozen</code></dt>\n```\n\n----------------------------------------\n\nTITLE: Displaying Verbose Cargo Version Information\nDESCRIPTION: Shows how to display extra version information by combining the -V (version) and -v (verbose) flags.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-version.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo -Vv\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Test within an Integration Test\nDESCRIPTION: This command demonstrates how to run a specific test function within a specific integration test module. It uses the --test flag to specify the integration test file and passes the test path after the -- separator.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-test.txt#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo test --test int_test_name -- modname::test_name\n```\n\n----------------------------------------\n\nTITLE: Precise Version Update Command\nDESCRIPTION: Sets a specific dependency (foo) to an exact version number (1.2.3).\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-update.txt#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo update foo --precise 1.2.3\n```\n\n----------------------------------------\n\nTITLE: Feature Configuration for Renamed Dependencies\nDESCRIPTION: Shows how to configure features for renamed dependencies in the manifest.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/specifying-dependencies.md#2025-04-21_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n[features]\nlog-debug = ['bar/log-debug']\n```\n\n----------------------------------------\n\nTITLE: Retrieving Version-Specific Package Specification\nDESCRIPTION: Shows how to retrieve package specification for a specific version (1.0.0) of a package\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-pkgid.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo pkgid foo@1.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Completions for Cargo in Bash\nDESCRIPTION: Adds Cargo command completion support to Bash shell by sourcing the output of a Cargo command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\nsource <(CARGO_COMPLETE=bash cargo +nightly)\n```\n\n----------------------------------------\n\nTITLE: Enabling Open Namespaces Feature in Cargo (TOML)\nDESCRIPTION: This snippet demonstrates how to enable the 'open-namespaces' feature in Cargo, which allows multiple packages to participate in the same API namespace.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_49\n\nLANGUAGE: toml\nCODE:\n```\ncargo-features = [\"open-namespaces\"]\n\n[package]\n# ...\n```\n\n----------------------------------------\n\nTITLE: Defining Cargo's JSON Output Format in JavaScript\nDESCRIPTION: Comprehensive example of the JSON structure that Cargo outputs, detailing packages, dependencies, targets, features, and workspace information. The structure includes detailed annotations explaining each field and its purpose.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-metadata.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    /* Array of all packages in the workspace.\n       It also includes all feature-enabled dependencies unless --no-deps is used.\n    */\n    \"packages\": [\n        {\n            /* The name of the package. */\n            \"name\": \"my-package\",\n            /* The version of the package. */\n            \"version\": \"0.1.0\",\n            /* The Package ID for referring to the\n               package within the document and as the `--package` argument to many commands\n            */\n            \"id\": \"file:///path/to/my-package#0.1.0\",\n            /* The license value from the manifest, or null. */\n            \"license\": \"MIT/Apache-2.0\",\n            /* The license-file value from the manifest, or null. */\n            \"license_file\": \"LICENSE\",\n            /* The description value from the manifest, or null. */\n            \"description\": \"Package description.\",\n            /* The source ID of the package, an \"opaque\" identifier representing\n               where a package is retrieved from. See \"Compatibility\" above for\n               the stability guarantee.\n\n               This is null for path dependencies and workspace members.\n\n               For other dependencies, it is a string with the format:\n               - \"registry+URL\" for registry-based dependencies.\n                 Example: \"registry+https://github.com/rust-lang/crates.io-index\"\n               - \"git+URL\" for git-based dependencies.\n                 Example: \"git+https://github.com/rust-lang/cargo?rev=5e85ba14aaa20f8133863373404cb0af69eeef2c#5e85ba14aaa20f8133863373404cb0af69eeef2c\"\n               - \"sparse+URL\" for dependencies from a sparse registry\n                 Example: \"sparse+https://my-sparse-registry.org\"\n\n               The value after the `+` is not explicitly defined, and may change\n               between versions of Cargo and may not directly correlate to other\n               things, such as registry definitions in a config file. New source\n               kinds may be added in the future which will have different `+`\n               prefixed identifiers.\n            */\n            \"source\": null,\n            /* Array of dependencies declared in the package's manifest. */\n            \"dependencies\": [\n                {\n                    /* The name of the dependency. */\n                    \"name\": \"bitflags\",\n                    /* The source ID of the dependency. May be null, see\n                       description for the package source.\n                    */\n                    \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n                    /* The version requirement for the dependency.\n                       Dependencies without a version requirement have a value of \"*\".\n                    */\n                    \"req\": \"^1.0\",\n                    /* The dependency kind.\n                       \"dev\", \"build\", or null for a normal dependency.\n                    */\n                    \"kind\": null,\n                    /* If the dependency is renamed, this is the new name for\n                       the dependency as a string.  null if it is not renamed.\n                    */\n                    \"rename\": null,\n                    /* Boolean of whether or not this is an optional dependency. */\n                    \"optional\": false,\n                    /* Boolean of whether or not default features are enabled. */\n                    \"uses_default_features\": true,\n                    /* Array of features enabled. */\n                    \"features\": [],\n                    /* The target platform for the dependency.\n                       null if not a target dependency.\n                    */\n                    \"target\": \"cfg(windows)\",\n                    /* The file system path for a local path dependency.\n                       not present if not a path dependency.\n                    */\n                    \"path\": \"/path/to/dep\",\n                    /* A string of the URL of the registry this dependency is from.\n                       If not specified or null, the dependency is from the default\n                       registry (crates.io).\n                    */\n                    \"registry\": null,\n                    /* (unstable) Boolean flag of whether or not this is a pulbic\n                       dependency. This field is only present when\n                       `-Zpublic-dependency` is enabled.\n                    */\n                    \"public\": false\n                }\n            ],\n            /* Array of Cargo targets. */\n            \"targets\": [\n                {\n                    /* Array of target kinds.\n                       - lib targets list the `crate-type` values from the\n                         manifest such as \"lib\", \"rlib\", \"dylib\",\n                         \"proc-macro\", etc. (default [\"lib\"])\n                       - binary is [\"bin\"]\n                       - example is [\"example\"]\n                       - integration test is [\"test\"]\n                       - benchmark is [\"bench\"]\n                       - build script is [\"custom-build\"]\n                    */\n                    \"kind\": [\n                        \"bin\"\n                    ],\n                    /* Array of crate types.\n                       - lib and example libraries list the `crate-type` values\n                         from the manifest such as \"lib\", \"rlib\", \"dylib\",\n                         \"proc-macro\", etc. (default [\"lib\"])\n                       - all other target kinds are [\"bin\"]\n                    */\n                    \"crate_types\": [\n                        \"bin\"\n                    ],\n                    /* The name of the target.\n                       For lib targets, dashes will be replaced with underscores.\n                    */\n                    \"name\": \"my-package\",\n                    /* Absolute path to the root source file of the target. */\n                    \"src_path\": \"/path/to/my-package/src/main.rs\",\n                    /* The Rust edition of the target.\n                       Defaults to the package edition.\n                    */\n                    \"edition\": \"2018\",\n                    /* Array of required features.\n                       This property is not included if no required features are set.\n                    */\n                    \"required-features\": [\"feat1\"],\n                    /* Whether the target should be documented by `cargo doc`. */\n                    \"doc\": true,\n                    /* Whether or not this target has doc tests enabled, and\n                       the target is compatible with doc testing.\n                    */\n                    \"doctest\": false,\n                    /* Whether or not this target should be built and run with `--test`\n                    */\n                    \"test\": true\n                }\n            ],\n            /* Set of features defined for the package.\n               Each feature maps to an array of features or dependencies it\n               enables.\n            */\n            \"features\": {\n                \"default\": [\n                    \"feat1\"\n                ],\n                \"feat1\": [],\n                \"feat2\": []\n            },\n            /* Absolute path to this package's manifest. */\n            \"manifest_path\": \"/path/to/my-package/Cargo.toml\",\n            /* Package metadata.\n               This is null if no metadata is specified.\n            */\n            \"metadata\": {\n                \"docs\": {\n                    \"rs\": {\n                        \"all-features\": true\n                    }\n                }\n            },\n            /* List of registries to which this package may be published.\n               Publishing is unrestricted if null, and forbidden if an empty array. */\n            \"publish\": [\n                \"crates-io\"\n            ],\n            /* Array of authors from the manifest.\n               Empty array if no authors specified.\n            */\n            \"authors\": [\n                \"Jane Doe <user@example.com>\"\n            ],\n            /* Array of categories from the manifest. */\n            \"categories\": [\n                \"command-line-utilities\"\n            ],\n            /* Optional string that is the default binary picked by cargo run. */\n            \"default_run\": null,\n            /* Optional string that is the minimum supported rust version */\n            \"rust_version\": \"1.56\",\n            /* Array of keywords from the manifest. */\n            \"keywords\": [\n                \"cli\"\n            ],\n            /* The readme value from the manifest or null if not specified. */\n            \"readme\": \"README.md\",\n            /* The repository value from the manifest or null if not specified. */\n            \"repository\": \"https://github.com/rust-lang/cargo\",\n            /* The homepage value from the manifest or null if not specified. */\n            \"homepage\": \"https://rust-lang.org\",\n            /* The documentation value from the manifest or null if not specified. */\n            \"documentation\": \"https://doc.rust-lang.org/stable/std\",\n            /* The default edition of the package.\n               Note that individual targets may have different editions.\n            */\n            \"edition\": \"2018\",\n            /* Optional string that is the name of a native library the package\n               is linking to.\n            */\n            \"links\": null,\n        }\n    ],\n    /* Array of members of the workspace.\n       Each entry is the Package ID for the package.\n    */\n    \"workspace_members\": [\n        \"file:///path/to/my-package#0.1.0\",\n    ],\n    /* Array of default members of the workspace.\n       Each entry is the Package ID for the package.\n    */\n    \"workspace_default_members\": [\n        \"file:///path/to/my-package#0.1.0\",\n    ],\n    // The resolved dependency graph for the entire workspace. The enabled\n    // features are based on the enabled features for the \"current\" package.\n}\n```\n\n----------------------------------------\n\nTITLE: Using the --example flag with cargo bench\nDESCRIPTION: This option allows benchmarking of specific example targets by name. It supports multiple specifications and Unix glob patterns when properly quoted.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n--example name…\n```\n\n----------------------------------------\n\nTITLE: Using the --timings flag in Cargo\nDESCRIPTION: This snippet shows the documentation format for the `--timings` flag which outputs compilation timing information. It supports optional comma-separated output formats with html being the default. Some formats require the unstable options flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-timings.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--timings=`_fmts_\"}}\nOutput information how long each compilation takes, and track concurrency\ninformation over time. Accepts an optional comma-separated list of output\nformats; `--timings` without an argument will default to `--timings=html`.\nSpecifying an output format (rather than the default) is unstable and requires\n`-Zunstable-options`. Valid output formats:\n\n- `html` (unstable, requires `-Zunstable-options`): Write a human-readable file `cargo-timing.html` to the\n  `target/cargo-timings` directory with a report of the compilation. Also write\n  a report to the same directory with a timestamp in the filename if you want\n  to look at older runs. HTML output is suitable for human consumption only,\n  and does not provide machine-readable timing data.\n- `json` (unstable, requires `-Zunstable-options`): Emit machine-readable JSON\n  information about timing information.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Setting Target Directory for Rustdoc Output\nDESCRIPTION: Configures the output directory for generated documentation and intermediate files using the --target-dir flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustdoc.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--target-dir directory\n```\n\n----------------------------------------\n\nTITLE: Cargo Feature Name Pattern\nDESCRIPTION: Demonstrates the allowed characters pattern for Cargo feature names, including letters, digits, underscore, hyphen, plus sign, and period.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_36\n\nLANGUAGE: rust\nCODE:\n```\nmy-feature-1.0_test+\n```\n\n----------------------------------------\n\nTITLE: Displaying Feature Dependencies in Rust Project\nDESCRIPTION: Example output of 'cargo tree -e features' command, showing the features enabled by each dependency in the project.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-tree.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmyproject v0.1.0 (/myproject)\n└── log feature \"serde\"\n    └── log v0.4.8\n        ├── serde v1.0.106\n        └── cfg-if feature \"default\"\n            └── cfg-if v0.1.10\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository with Console Command\nDESCRIPTION: Command to clone the uuid repository locally, which is the first step in testing a local bugfix.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/overriding-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/uuid-rs/uuid.git\n```\n\n----------------------------------------\n\nTITLE: Displaying the latest future-incompat report in Cargo\nDESCRIPTION: Command example showing how to display the latest future-incompatibility report in Cargo without any filters.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-report.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo report future-incompat\n```\n\n----------------------------------------\n\nTITLE: Running Cross-Compiled Tests for a Specific Target\nDESCRIPTION: Command to run tests for a Rust package targeting a specific platform (i686 Linux in this example).\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo test --target i686-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Using Cargo Target Filters\nDESCRIPTION: Documentation showing the target selection flags used to filter compilation targets in Cargo when multiple targets are available. The flags --lib and --bin are used to specify which target should be compiled.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/description-one-target.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--lib, --bin\n```\n\n----------------------------------------\n\nTITLE: Using the --bench flag with cargo bench\nDESCRIPTION: This option allows benchmarking of specific benchmark targets by name. It supports multiple specifications and Unix glob patterns when properly quoted.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n--bench name…\n```\n\n----------------------------------------\n\nTITLE: Generalizing Rust Struct to Use Generics with Identical Types\nDESCRIPTION: Illustrates a minor change where a struct field is changed from a concrete type to a generic type parameter, resulting in an identical type for all existing use cases.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_37\n\nLANGUAGE: rust\nCODE:\n```\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Foo(pub u8);\n\n///////////////////////////////////////////////////////////\n// After\npub struct Foo<T = u8>(pub T);\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nuse updated_crate::Foo;\n\nfn main() {\n    let s: Foo = Foo(123);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Unstable mtime-on-use Config Option in Cargo Nightly\nDESCRIPTION: A nightly-only feature that enables the mtime-on-use functionality via the unstable.mtime_on_use configuration option.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_61\n\nLANGUAGE: toml\nCODE:\n```\n# In .cargo/config.toml\n[unstable]\nmtime_on_use = true\n```\n\n----------------------------------------\n\nTITLE: Running Build-Std Tests with Environment Variable\nDESCRIPTION: Commands for enabling and running build-std tests, which are disabled by default. Requires the nightly channel and rust-src component.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/running.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nCARGO_RUN_BUILD_STD_TESTS=1 cargo test --test build-std\n```\n\n----------------------------------------\n\nTITLE: Example of Creating a Lockfile\nDESCRIPTION: Example command showing how to create or update the lockfile for the current package or workspace.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-generate-lockfile.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo generate-lockfile\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Directory Structure for Native Library Example\nDESCRIPTION: Shows the directory structure for a project that builds and links to a native C library using a build script.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-script-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n.\n├── Cargo.toml\n├── build.rs\n└── src\n    ├── hello.c\n    └── main.rs\n\n1 directory, 4 files\n```\n\n----------------------------------------\n\nTITLE: Simple Rust script file example\nDESCRIPTION: Minimal example of a Rust script file that can be executed with cargo script. This shows the basic structure required for a runnable script.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_41\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {}\n```\n\n----------------------------------------\n\nTITLE: Display Control Options\nDESCRIPTION: Options for controlling Cargo's output verbosity and color settings.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-tree.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n-v\n--verbose\n-q\n--quiet\n--color when\n```\n\n----------------------------------------\n\nTITLE: Using Quiet Mode Options in Cargo Doc Command\nDESCRIPTION: Suppresses cargo log messages during documentation generation. Can be specified with -q or --quiet flags.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-doc.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n-q\n```\n\nLANGUAGE: shell\nCODE:\n```\n--quiet\n```\n\n----------------------------------------\n\nTITLE: Passing Target Flag to Rustdoc in Cargo Test\nDESCRIPTION: cargo test now passes --target to rustdoc if the specified target is the same as the host target.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: Rust\nCODE:\n```\ncargo test --target <target>\n```\n\n----------------------------------------\n\nTITLE: Feature Documentation Block - crate-type\nDESCRIPTION: Documentation for the stabilization of --crate-type flag in Cargo 1.64\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_59\n\nLANGUAGE: markdown\nCODE:\n```\n## crate-type\n\nThe `--crate-type` flag for `cargo rustc` has been stabilized in the 1.64\nrelease. See the [`cargo rustc` documentation](../commands/cargo-rustc.md)\nfor more information.\n```\n\n----------------------------------------\n\nTITLE: Defining --profile Option Template in Handlebars Syntax\nDESCRIPTION: A Handlebars template that documents the `--profile` command-line option for Cargo. It explains that specifying the `test` profile enables checking in test mode and the `test` cfg option, with references to additional documentation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-profile-legacy-check.md#2025-04-21_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#option \"`--profile` _name_\" }}\n{{actionverb}} with the given profile.\n\nAs a special case, specifying the `test` profile will also enable checking in\ntest mode which will enable checking tests and enable the `test` cfg option.\nSee [rustc tests](https://doc.rust-lang.org/rustc/tests/index.html) for more\ndetail.\n\nSee [the reference](../reference/profiles.html) for more details on profiles.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Accessing New Environment Variables in Build Scripts\nDESCRIPTION: Build scripts now have access to new environment variables: RUSTC_WRAPPER, RUSTC_WORKSPACE_WRAPPER, and CARGO_ENCODED_RUSTFLAGS. RUSTFLAGS is no longer set for build scripts; they should use CARGO_ENCODED_RUSTFLAGS instead.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_30\n\nLANGUAGE: Rust\nCODE:\n```\n// In a build script\nlet rustc_wrapper = std::env::var(\"RUSTC_WRAPPER\").ok();\nlet rustc_workspace_wrapper = std::env::var(\"RUSTC_WORKSPACE_WRAPPER\").ok();\nlet cargo_encoded_rustflags = std::env::var(\"CARGO_ENCODED_RUSTFLAGS\").ok();\n\n// RUSTFLAGS is no longer available\n// let rustflags = std::env::var(\"RUSTFLAGS\").ok(); // This won't work\n```\n\n----------------------------------------\n\nTITLE: Adding New Fields to Enum Variants in Rust\nDESCRIPTION: Illustrates how adding new fields to an enum variant is a breaking change. It affects both construction and pattern matching of the enum.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_26\n\nLANGUAGE: rust\nCODE:\n```\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub enum E {\n    Variant1 { f1: i32 },\n}\n\n///////////////////////////////////////////////////////////\n// After\npub enum E {\n    Variant1 { f1: i32, f2: i32 },\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nfn main() {\n    use updated_crate::E;\n    let x = E::Variant1 { f1: 1 }; // Error: missing f2\n    match x {\n        E::Variant1 { f1 } => {} // Error: missing f2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Color Output for Rustdoc\nDESCRIPTION: Controls when colored output is used in rustdoc command output with auto, always, or never options.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustdoc.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--color when\n```\n\n----------------------------------------\n\nTITLE: Using the --lib flag with cargo bench\nDESCRIPTION: This option allows benchmarking of the package's library target. When specified, Cargo will only benchmark the library component of your package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--lib\n```\n\n----------------------------------------\n\nTITLE: Feature Analysis Command\nDESCRIPTION: Explains why features are enabled for a specific package with inverted dependency tree\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-tree.txt#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo tree -e features -i syn\n```\n\n----------------------------------------\n\nTITLE: Display Package-Specific Future-Incompat Report in Cargo\nDESCRIPTION: Example command demonstrating how to display a future-incompatibility report for a specific package version.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-report.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo report future-incompat --package my-dep:0.0.1\n```\n\n----------------------------------------\n\nTITLE: Displaying a future-incompat report for a specific package in Cargo\nDESCRIPTION: Command example showing how to display the future-incompatibility report filtered for a specific package with version.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-report.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo report future-incompat --package my-dep:0.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing Rustup Components for Nightly Tests\nDESCRIPTION: Command for adding the rustc-dev and llvm-tools-preview components to the nightly toolchain, which are required for some nightly tests.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/running.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrustup component add rustc-dev llvm-tools-preview --toolchain=nightly\n```\n\n----------------------------------------\n\nTITLE: Cargo Target Selection Option: --test\nDESCRIPTION: Explains the usage of the --test flag for selecting specific integration test targets. Supports multiple specifications and glob patterns.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-targets.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--test` _name_...\" }}\n{{actionverb}} the specified integration test. This flag may be specified\nmultiple times and supports common Unix glob patterns.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Format for Rustdoc Output\nDESCRIPTION: Sets the output format for diagnostic messages with options for human-readable, short, JSON, and various JSON rendering formats.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustdoc.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n--message-format fmt\n```\n\n----------------------------------------\n\nTITLE: Credential Hello Message Format\nDESCRIPTION: Initial message sent by credential provider to identify supported protocol versions.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/credential-provider-protocol.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"v\":[1]\n}\n```\n\n----------------------------------------\n\nTITLE: Dependencies Example in Rust Tests\nDESCRIPTION: Shows how to specify project dependencies in Cargo tests using path dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/writing.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet p = project()\n    .file(\"Cargo.toml\", r#\"\n        [package]\n        name = \"foo\"\n        version = \"1.0.0\"\n\n        [dependencies]\n        bar = {path = \"bar\"}\n    \"#)\n    .file(\"src/lib.rs\", \"extern crate bar;\")\n    .file(\"bar/Cargo.toml\", &basic_manifest(\"bar\", \"1.0.0\"))\n    .file(\"bar/src/lib.rs\", \"\")\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Structuring Cargo Reference Documentation with Markdown\nDESCRIPTION: This markdown snippet outlines the structure of the Cargo reference documentation. It uses headings and bullet points to organize different topics and subtopics related to Cargo's features and functionalities.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Cargo Reference\n\nThe reference covers the details of various areas of Cargo.\n\n* [The Manifest Format](manifest.md)\n    * [Cargo Targets](cargo-targets.md)\n    * [Rust version](rust-version.md)\n* [Workspaces](workspaces.md)\n* [Specifying Dependencies](specifying-dependencies.md)\n    * [Overriding Dependencies](overriding-dependencies.md)\n    * [Source Replacement](source-replacement.md)\n    * [Dependency Resolution](resolver.md)\n* [Features](features.md)\n    * [Features Examples](features-examples.md)\n* [Profiles](profiles.md)\n* [Configuration](config.md)\n* [Environment Variables](environment-variables.md)\n* [Build Scripts](build-scripts.md)\n    * [Build Script Examples](build-script-examples.md)\n* [Build Cache](build-cache.md)\n* [Package ID Specifications](pkgid-spec.md)\n* [External Tools](external-tools.md)\n* [Registries](registries.md)\n    * [Registry Authentication](registry-authentication.md)\n        * [Credential Provider Protocol](credential-provider-protocol.md)\n    * [Running a Registry](running-a-registry.md)\n        * [Registry Index](registry-index.md)\n        * [Registry Web API](registry-web-api.md)\n* [SemVer Compatibility](semver.md)\n* [Future incompat report](future-incompat-report.md)\n* [Reporting build timings](timings.md)\n* [Lints](lints.md)\n* [Unstable Features](unstable.md)\n```\n\n----------------------------------------\n\nTITLE: Accessing Artifact Binary in Build Script\nDESCRIPTION: This Rust code snippet shows how to access and execute a binary artifact dependency from within a build script.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_26\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    let build_tool = std::env::var_os(\"CARGO_BIN_FILE_SOME_BUILD_TOOL\").unwrap();\n    let status = std::process::Command::new(build_tool)\n        .arg(\"do-stuff\")\n        .status()\n        .unwrap();\n    if !status.success() {\n        eprintln!(\"failed!\");\n        std::process::exit(1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information for Cargo Doc Command\nDESCRIPTION: Prints help information about the cargo doc command and its available options.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-doc.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n-h\n```\n\nLANGUAGE: shell\nCODE:\n```\n--help\n```\n\n----------------------------------------\n\nTITLE: Using CDYLIB Artifact in Build Script\nDESCRIPTION: This Rust code snippet demonstrates how to use a cdylib artifact dependency in a build script.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_27\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    wasm::run_file(std::env::var(\"CARGO_CDYLIB_FILE_BAR\").unwrap());\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Rust Function Arity\nDESCRIPTION: Demonstrates a major change where the number of parameters in a function is altered, breaking existing code that calls the function.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_41\n\nLANGUAGE: rust\nCODE:\n```\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub fn foo() {}\n\n///////////////////////////////////////////////////////////\n// After\npub fn foo(x: i32) {}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nfn main() {\n    updated_crate::foo(); // Error: this function takes 1 argument\n}\n```\n\n----------------------------------------\n\nTITLE: RUSTC_WORKSPACE_WRAPPER Usage\nDESCRIPTION: Example of using RUSTC_WORKSPACE_WRAPPER environment variable to wrap rustc for workspace members, commonly used with nightly clippy.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_50\n\nLANGUAGE: shell\nCODE:\n```\nRUSTC_WORKSPACE_WRAPPER=clippy cargo clippy -Zunstable-options\n```\n\n----------------------------------------\n\nTITLE: Setting CARGO_RUSTC_CURRENT_DIR Environment Variable\nDESCRIPTION: Demonstrates the new environment variable that Cargo sets to indicate the current directory from which rustc is invoked.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nCARGO_RUSTC_CURRENT_DIR=/path/to/crate\n```\n\n----------------------------------------\n\nTITLE: Feature Documentation Block - terminal-width\nDESCRIPTION: Documentation for the stabilization of terminal-width option in Cargo 1.68\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_61\n\nLANGUAGE: markdown\nCODE:\n```\n## terminal-width\n\nThe `-Z terminal-width` option has been stabilized in the 1.68 release.\nThe terminal width is always passed to the compiler when running from a\nterminal where Cargo can automatically detect the width.\n```\n\n----------------------------------------\n\nTITLE: All Binaries Target Option in Cargo Commands\nDESCRIPTION: Option flag for selecting all binary targets in a package for a Cargo command operation. This allows performing an operation on all binaries without having to specify each one individually.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-targets-lib-bin.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--bins`\" }}\n{{actionverb}} all binary targets.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Using Experimental Nightly Compiler Flag\nDESCRIPTION: Example showing how to use an experimental flag on the nightly compiler to print type sizes.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustc.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncargo rustc --lib -- -Z print-type-sizes\n```\n\n----------------------------------------\n\nTITLE: Configuring Example Target in Cargo.toml\nDESCRIPTION: Example showing how to configure an example target as a static library.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/cargo-targets.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[[example]]\nname = \"foo\"\ncrate-type = [\"staticlib\"]\n```\n\n----------------------------------------\n\nTITLE: Using the --target-dir flag with cargo bench\nDESCRIPTION: This option specifies a custom directory for all generated artifacts and intermediate files during benchmarking, overriding the default 'target' directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n--target-dir directory\n```\n\n----------------------------------------\n\nTITLE: Cargo Search Command Structure\nDESCRIPTION: The general syntax pattern for the cargo search command, showing the basic structure with optional parameters.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-search.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo search [_options_] [_query_...]\n```\n\n----------------------------------------\n\nTITLE: Using Package ID Spec Syntax in Cargo\nDESCRIPTION: Package ID specs now support name@version syntax in addition to name:version for commands like cargo install and cargo yank.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: Rust\nCODE:\n```\ncargo install name@version\n```\n\n----------------------------------------\n\nTITLE: Defining Dependency Resolution in Cargo JSON\nDESCRIPTION: Illustrates the structure for dependency resolution information in Cargo's metadata JSON, including package nodes and their dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-metadata.txt#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"resolve\": {\n    \"nodes\": [\n        {\n            \"id\": \"file:///path/to/my-package#0.1.0\",\n            \"dependencies\": [\n                \"https://github.com/rust-lang/crates.io-index#bitflags@1.0.4\"\n            ],\n            \"deps\": [\n                {\n                    \"name\": \"bitflags\",\n                    \"pkg\": \"https://github.com/rust-lang/crates.io-index#bitflags@1.0.4\",\n                    \"dep_kinds\": [\n                        {\n                            \"kind\": null,\n                            \"target\": \"cfg(windows)\"\n                        }\n                    ]\n                }\n            ],\n            \"features\": [\n                \"default\"\n            ]\n        }\n    ],\n    \"root\": \"file:///path/to/my-package#0.1.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: UI Test Structure in Rust\nDESCRIPTION: Shows the structure of a UI test including module declaration and test implementation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/writing.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nmod <case>;\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse cargo_test_support::compare::assert_ui;\nuse cargo_test_support::current_dir;\nuse cargo_test_support::file;\nuse cargo_test_support::prelude::*;\nuse cargo_test_support::Project;\n\n#[cargo_test]\nfn case() {\n    let project = Project::from_template(current_dir!().join(\"in\"));\n    let project_root = project.root();\n    let cwd = &project_root;\n\n    snapbox::cmd::Command::cargo_ui()\n        .arg(\"run\")\n        .arg_line(\"--bin foo\")\n        .current_dir(cwd)\n        .assert()\n        .success()\n        .stdout_matches(file!(\"stdout.log\"))\n        .stderr_matches(file!(\"stderr.log\"));\n\n    assert_ui().subset_matches(current_dir!().join(\"out\"), &project_root);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Library Target Option in Cargo New Command\nDESCRIPTION: The --lib option creates a package with a library target (src/lib.rs) when using the 'cargo new' command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-new.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n--lib\n```\n\n----------------------------------------\n\nTITLE: Configuring trim-paths in Cargo.toml\nDESCRIPTION: Example showing how to enable and configure the trim-paths feature in a project's Cargo.toml. This feature controls how paths are sanitized in compilation outputs.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_43\n\nLANGUAGE: toml\nCODE:\n```\ncargo-features = [\"trim-paths\"]\n\n[package]\n# ...\n\n[profile.release]\ntrim-paths = [\"diagnostics\", \"object\"]\n```\n\n----------------------------------------\n\nTITLE: Publication Response Structure\nDESCRIPTION: JSON structure for successful publication response including optional warnings about invalid categories and badges.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/registry-web-api.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"warnings\": {\n        \"invalid_categories\": [],\n        \"invalid_badges\": [],\n        \"other\": []\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Verbose Output Options in Cargo CLI\nDESCRIPTION: Documents the -v/--verbose flags for Cargo that enable verbose output. Can be used twice for very verbose output. Can also be configured via term.verbose config setting.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-display.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`-v`\" \"`--verbose`\"}}\nUse verbose output. May be specified twice for \"very verbose\" output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the `term.verbose`\n[config value](../reference/config.html).\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Setting File Inclusions in Cargo.toml\nDESCRIPTION: Specifies patterns for files to explicitly include in package publication.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\ninclude = [\"/src\", \"COPYRIGHT\", \"/examples\", \"!/examples/big_example\"]\n```\n\n----------------------------------------\n\nTITLE: Using Cargo Config Subcommand to Display Configuration\nDESCRIPTION: This command uses the unstable 'cargo config' subcommand to display the 'build.rustflags' configuration value.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_32\n\nLANGUAGE: console\nCODE:\n```\ncargo +nightly -Zunstable-options config get build.rustflags\n```\n\n----------------------------------------\n\nTITLE: Getting Help for a Cargo Command with cargo help\nDESCRIPTION: Shows how to use the cargo help command to get information about a specific subcommand like 'build'.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-help.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo help build\n```\n\n----------------------------------------\n\nTITLE: Using Binary Artifact and Library in Main Program\nDESCRIPTION: This Rust code snippet shows how to use both a binary artifact and its library in the main program.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_28\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    bar::init();\n    command::run(env!(\"CARGO_BIN_FILE_BAR\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP/2 Multiplexing in Cargo Configuration\nDESCRIPTION: This TOML snippet shows how to enable HTTP/2 pipelining and multiplexing in Cargo's configuration. It sets the 'http.multiplexing' value to true.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_68\n\nLANGUAGE: TOML\nCODE:\n```\n\"[http]\\nmultiplexing = true\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Discovery of Binary Targets\nDESCRIPTION: Setting `autobins=false` in Cargo.toml now disables auto-discovery of inferred binary targets, giving more explicit control over which binaries are built from a package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_66\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"my_package\"\nversion = \"0.1.0\"\nautobins = false\n# With this setting, only explicitly defined binary targets will be built\n```\n\n----------------------------------------\n\nTITLE: Referencing Cargo Credential Helper in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the Cargo credential helper 'cargo:libsecret' in a markdown file. It includes links to the GNOME libsecret project and Cargo's credential provider documentation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/credential/cargo-credential-libsecret/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# cargo-credential-libsecret\n\nThis is the implementation for the Cargo credential helper for [GNOME libsecret].\nSee the [credential-provider] documentation for how to use this.\n\nThis credential provider is built-in to cargo as `cargo:libsecret`.\n\n> This crate is maintained by the Cargo team, primarily for use by Cargo\n> and not intended for external use (except as a transitive dependency). This\n> crate may make major changes to its APIs or be deprecated without warning.\n\n[GNOME libsecret]: https://wiki.gnome.org/Projects/Libsecret\n[credential-provider]: https://doc.rust-lang.org/nightly/cargo/reference/registry-authentication.html\n```\n\n----------------------------------------\n\nTITLE: Basic Workspace Configuration in TOML\nDESCRIPTION: Minimal workspace configuration example showing the basic workspace section declaration.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/workspaces.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\n# ...\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Lockfile Path in Cargo Doc Command (Nightly)\nDESCRIPTION: Changes the path of the lockfile from the default workspace location. Requires nightly channel and unstable options flag to enable.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-doc.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n--lockfile-path PATH\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Package Target in Cargo\nDESCRIPTION: This example demonstrates how to use the per-package-target feature to force a package to always be compiled for a specific target.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_22\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nforced-target = \"wasm32-unknown-unknown\"\n```\n\n----------------------------------------\n\nTITLE: Using the --workspace Flag as an Alias for --all in Cargo Commands\nDESCRIPTION: A command-line option added in Cargo 1.39 as an alias for the --all flag to clarify its meaning when working with workspaces.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\n# These commands are equivalent\ncargo build --all\ncargo build --workspace\n```\n\n----------------------------------------\n\nTITLE: Removing a Feature from a Feature List (Breaking Change)\nDESCRIPTION: Example demonstrating how removing a feature from another feature's list can break existing users if they expect that functionality to be available. This shows how removing 'std' from the default features changes behavior.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_53\n\nLANGUAGE: toml\nCODE:\n```\n# Breaking change example\n\n###########################################################\n# Before\n[features]\ndefault = [\"std\"]\nstd = []\n\n###########################################################\n# After\n[features]\ndefault = []  # This may cause packages to fail if they are expecting std to be enabled.\nstd = []\n```\n\n----------------------------------------\n\nTITLE: Build Finished JSON Structure in Cargo\nDESCRIPTION: Defines the JSON structure for the build finished message in Cargo. It indicates whether the build was successful or not.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/external-tools.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"reason\": \"build-finished\",\n    \"success\": true,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Example Scraping for Specific Targets in Cargo.toml\nDESCRIPTION: This TOML snippet demonstrates how to enable or disable example scraping for specific targets in a Cargo.toml file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_36\n\nLANGUAGE: toml\nCODE:\n```\n# Enable scraping examples from a library\n[lib]\ndoc-scrape-examples = true\n\n# Disable scraping examples from an example target\n[[example]]\nname = \"my-example\"\ndoc-scrape-examples = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Timing Output for Rustdoc\nDESCRIPTION: Demonstrates how to output compilation timing information using the --timings flag, with options for HTML and JSON output formats.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustdoc.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--timings=fmts\n```\n\nLANGUAGE: bash\nCODE:\n```\n--timings=html\n```\n\nLANGUAGE: bash\nCODE:\n```\n--timings=json\n```\n\n----------------------------------------\n\nTITLE: Using the --all-targets flag with cargo bench\nDESCRIPTION: This option benchmarks all available targets, equivalent to specifying '--lib --bins --tests --benches --examples' together.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n--all-targets\n```\n\n----------------------------------------\n\nTITLE: JSON Format for .cargo_vcs_info.json in Cargo Package\nDESCRIPTION: Demonstrates the JSON format used for the .cargo_vcs_info.json file that Cargo generates when packaging a crate. This file contains Git repository information including the commit hash, whether the working directory was dirty, and the path within the VCS.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-package.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n \"git\": {\n   \"sha1\": \"aac20b6e7e543e6dd4118b246c77225e3a3a1302\",\n   \"dirty\": true\n },\n \"path_in_vcs\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Cargo configuration values\nDESCRIPTION: Example showing the TOML syntax for overriding Cargo configuration values via the command line.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-doc.txt#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nKEY=VALUE\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Dependency in Cargo\nDESCRIPTION: Demonstrates how to add a basic dependency (regex) to a Rust project using Cargo.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-add.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo add regex\n```\n\n----------------------------------------\n\nTITLE: Cargo Commands Index Structure in Markdown\nDESCRIPTION: Markdown structure defining the main navigation links for Cargo's command documentation, organized into six main categories with links to their respective documentation files.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Cargo Commands\n* [General Commands](general-commands.md)\n* [Build Commands](build-commands.md)\n* [Manifest Commands](manifest-commands.md)\n* [Package Commands](package-commands.md)\n* [Publishing Commands](publishing-commands.md)\n* [Deprecated and Removed](deprecated-and-removed.md)\n```\n\n----------------------------------------\n\nTITLE: Removing a Development Dependency with Cargo\nDESCRIPTION: Example command showing how to remove 'trybuild' as a development dependency from a Cargo.toml manifest file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-remove.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo remove --dev trybuild\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Categories in Cargo JSON\nDESCRIPTION: Illustrates the structure for defining package categories in Cargo's metadata JSON.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-metadata.txt#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"categories\": [\n    \"command-line-utilities\"\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Cargo Submodule Using Subup Tool\nDESCRIPTION: This bash command uses the subup tool to automate the process of updating the Cargo submodule in the rust-lang/rust repository. It creates a branch, updates the submodule, runs tests to verify compatibility, and prepares a PR.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/process/release.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubup --up-branch update-cargo \\\n    --commit-message \"Update cargo\" \\\n    --test=\"src/tools/linkchecker tidy \\\n        src/tools/cargo \\\n        src/tools/rustfmt\" \\\n    src/tools/cargo\n```\n\n----------------------------------------\n\nTITLE: Basic Package ID Retrieval in Cargo\nDESCRIPTION: Example command to retrieve package specification for a package named 'foo'\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-pkgid.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo pkgid foo\n```\n\n----------------------------------------\n\nTITLE: Publish Request Message Format\nDESCRIPTION: Message sent by Cargo to get credentials for publishing a crate, including crate metadata.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/credential-provider-protocol.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // Protocol version\n    \"v\":1,\n    // Request kind: get credentials\n    \"kind\":\"get\",\n    // Action to perform: publish crate\n    \"operation\":\"publish\",\n    // Crate name\n    \"name\":\"sample\",\n    // Crate version\n    \"vers\":\"0.1.0\",\n    // Crate checksum\n    \"cksum\":\"...\",\n    // Registry information (see Registry information)\n    \"registry\":{\"index-url\":\"sparse+https://registry-url/index/\", \"name\": \"my-registry\"},\n    // Additional command-line args (optional)\n    \"args\":[]\n}\n```\n\n----------------------------------------\n\nTITLE: Cargo Tree Command for Dependency Investigation\nDESCRIPTION: Command to investigate why a specific dependency was included in the build graph using cargo tree with workspace and feature flags.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/resolver.md#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ cargo tree --workspace --target all --all-features --invert rand\nrand v0.8.5\n└── ...\n\nrand v0.8.5\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Displaying Future Incompatibility Report in Cargo Build (Rust)\nDESCRIPTION: Shows a future-incompat report for any future-incompatible warnings produced during the build process.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\ncargo build --future-incompat-report\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Code Block Formatting\nDESCRIPTION: This snippet shows how code blocks are formatted within the document, including indentation preservation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/compare/expected/formatting.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThis is a code block. Groundhog watchfully sudden firefly some self-consciously hotly jeepers satanic after that this parrot this at virtuous\nsome mocking the leaned jeez nightingale as much mallard so because jeez\nturned dear crud grizzly strenuously.\n\n    Indented and should be unmodified.\n```\n\n----------------------------------------\n\nTITLE: Running cargo-vendor Command in Rust\nDESCRIPTION: The basic syntax for running the cargo-vendor command. It allows for optional path and options to be specified.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-vendor.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ncargo vendor [_options_] [_path_]\n```\n\n----------------------------------------\n\nTITLE: Cargo Check Target Selection\nDESCRIPTION: Command syntax for checking specific binary targets\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-check.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--bin name...\n```\n\n----------------------------------------\n\nTITLE: Loosening Generic Bounds in Rust Struct Definition\nDESCRIPTION: Demonstrates a minor change where generic bounds on a struct are loosened, expanding what is allowed without breaking existing code.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_35\n\nLANGUAGE: rust\nCODE:\n```\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Foo<A: Clone> {\n    pub f1: A,\n}\n\n///////////////////////////////////////////////////////////\n// After\npub struct Foo<A> {\n    pub f1: A,\n}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nuse updated_crate::Foo;\n\nfn main() {\n    let s = Foo { f1: 123 };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Build Jobs Configuration\nDESCRIPTION: Example showing how to reset build.jobs parallelism configuration back to default using the 'default' keyword.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\nbuild.jobs = \"default\"\n```\n\n----------------------------------------\n\nTITLE: Automatic @ Argfile Support in Cargo\nDESCRIPTION: Cargo now uses response files automatically if the command-line to rustc exceeds the operating system's limit.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: Rust\nCODE:\n```\n@response_file_arguments\n```\n\n----------------------------------------\n\nTITLE: File System References in Cargo\nDESCRIPTION: Links to related documentation for fingerprint module and fs::canonicalize function that are relevant to Cargo's filesystem handling.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/implementation/filesystem.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`fingerprint`]: https://github.com/rust-lang/cargo/blob/master/src/cargo/core/compiler/fingerprint/mod.rs\n[`fs::canonicalize`]: https://doc.rust-lang.org/std/fs/fn.canonicalize.html\n```\n\n----------------------------------------\n\nTITLE: Get Success Response Format\nDESCRIPTION: Success response from credential provider with token and caching information.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/credential-provider-protocol.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\"Ok\":{\n    // Response kind: this was a get request\n    \"kind\":\"get\",\n    // Token to send to the registry\n    \"token\":\"...\",\n    // Cache control. Can be one of the following:\n    // * \"never\": do not cache\n    // * \"session\": cache for the current cargo session\n    // * \"expires\": cache for the current cargo session until expiration\n    \"cache\":\"expires\",\n    // Unix timestamp (only for \"cache\": \"expires\")\n    \"expiration\":1693942857,\n    // Is the token operation independent?\n    \"operation_independent\":true\n}}\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Test With Nocapture Flag\nDESCRIPTION: Example of how to run cargo test with the --nocapture flag to show test output that would otherwise be hidden by the Rust test harness. This is useful for debugging tests.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-test.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo test -- --nocapture\n```\n\n----------------------------------------\n\nTITLE: Defining Cargo --target Option Documentation Template in Handlebars\nDESCRIPTION: A Handlebars template that generates documentation for Cargo's `--target` command-line option. It explains how to specify target architectures, the format of the target triple, and how this option affects build artifact placement.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-target-triple.md#2025-04-21_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#option \"`--target` _triple_\"}}\n{{actionverb}} for the given architecture.\n{{~#if target-default-to-all-arch}} The default is all architectures.\n{{~else}} The default is the host architecture.\n{{~/if}} The general format of the triple is\n`<arch><sub>-<vendor>-<sys>-<abi>`. Run `rustc --print target-list` for a\nlist of supported targets.\n{{~#if multitarget }} This flag may be specified multiple times. {{~/if}}\n\nThis may also be specified with the `build.target`\n[config value](../reference/config.html).\n\nNote that specifying this flag makes Cargo run in a different mode where the\ntarget artifacts are placed in a separate directory. See the\n[build cache](../reference/build-cache.html) documentation for more details.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Previewing the Cargo Contributor Guide with mdbook\nDESCRIPTION: Command for running the mdbook server to preview the Cargo Contributor Guide locally with automatic reloading. This allows contributors to see changes in real-time while editing documentation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmdbook serve\n```\n\n----------------------------------------\n\nTITLE: Crates.io Package ID Retrieval in Cargo\nDESCRIPTION: Example command to retrieve package specification for 'foo' package from crates.io registry\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-pkgid.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo pkgid https://github.com/rust-lang/crates.io-index#foo\n```\n\n----------------------------------------\n\nTITLE: Rust script with embedded cargo manifest\nDESCRIPTION: Example of a Rust script file with an embedded cargo manifest using a code fence. This allows dependencies to be specified directly in the script file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_42\n\nLANGUAGE: rust\nCODE:\n```\n#!/usr/bin/env -S cargo +nightly -Zscript\n---cargo\n[dependencies]\nclap = { version = \"4.2\", features = [\"derive\"] }\n---\n\nuse clap::Parser;\n\n#[derive(Parser, Debug)]\n#[clap(version)]\nstruct Args {\n    #[clap(short, long, help = \"Path to config\")]\n    config: Option<std::path::PathBuf>,\n}\n\nfn main() {\n    let args = Args::parse();\n    println!(\"{:?}\", args);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Defaulted Trait Items in Rust\nDESCRIPTION: Illustrates how adding a defaulted trait item can potentially cause breaking changes due to name collisions with other traits.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_29\n\nLANGUAGE: rust\nCODE:\n```\n// Breaking change example\n\n///////////////////////////////////////////////////////////\n// Before\npub trait Trait {}\n\n///////////////////////////////////////////////////////////\n// After\npub trait Trait {\n    fn foo(&self) {}\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Trait;\nstruct Foo;\n\ntrait LocalTrait {\n    fn foo(&self) {}\n}\n\nimpl Trait for Foo {}\nimpl LocalTrait for Foo {}\n\nfn main() {\n    let x = Foo;\n    x.foo(); // Error: multiple applicable items in scope\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring libz-sys Package in Cargo.toml\nDESCRIPTION: Package configuration for libz-sys showing basic metadata and dependencies including the links attribute for libz library\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-script-examples.md#2025-04-21_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"libz-sys\"\nversion = \"0.1.0\"\nedition = \"2024\"\nlinks = \"z\"\n\n[build-dependencies]\npkg-config = \"0.3.16\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Patch Table in Cargo Config\nDESCRIPTION: Patch tables can now be specified in Cargo config files, allowing for local overrides of dependencies across multiple projects.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_27\n\nLANGUAGE: TOML\nCODE:\n```\n[patch.crates-io]\nsome-dep = { path = \"../path/to/some-dep\" }\n```\n\n----------------------------------------\n\nTITLE: Cargo Check Feature Selection\nDESCRIPTION: Command syntax for enabling specific features\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-check.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n-F features, --features features\n```\n\n----------------------------------------\n\nTITLE: Remove Crate Owner Response Format\nDESCRIPTION: Success response format when removing crate owners. Returns a confirmation object with ok status and message.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/registry-web-api.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // Indicates the remove succeeded, always true.\n    \"ok\": true\n    // A string to be displayed to the user. Currently ignored by cargo.\n    \"msg\": \"owners successfully removed\",\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Help for Custom Cargo Subcommand\nDESCRIPTION: Illustrates how Cargo invokes the help output for a custom subcommand. It assumes the subcommand will print a help message when the third argument is '--help'.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/external-tools.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\ncargo help ${command}\n```\n\nLANGUAGE: markdown\nCODE:\n```\ncargo-${command} ${command} --help\n```\n\n----------------------------------------\n\nTITLE: Using the --tests flag with cargo bench\nDESCRIPTION: This option benchmarks all targets that have the 'test = true' manifest flag set, which typically includes library and binaries built as unittests, and integration tests.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n--tests\n```\n\n----------------------------------------\n\nTITLE: Configuring Publish Timeout in Cargo\nDESCRIPTION: This TOML snippet demonstrates how to configure the publish timeout in Cargo, which controls how long cargo publish waits for a package to be available in the index.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_29\n\nLANGUAGE: toml\nCODE:\n```\n# config.toml\n[publish]\ntimeout = 300  # in seconds\n```\n\n----------------------------------------\n\nTITLE: Removing repr(packed) - Major Change (Size Impact)\nDESCRIPTION: Demonstrates how removing repr(packed) can break code that relies on specific size assumptions.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n// Before\n#[repr(C, packed)]\npub struct Packed {\n    pub a: u8,\n    pub b: u16,\n}\n\n// After\n#[repr(C)] // removed packed\npub struct Packed {\n    pub a: u8,\n    pub b: u16,\n}\n\n// Example usage that will break.\nuse updated_crate::Packed;\n\nfn main() {\n    let p = Packed { a: 1, b: 2 };\n    const _: () = assert!(std::mem::size_of::<Packed>() == 3); // Error: evaluation of constant value failed\n}\n```\n\n----------------------------------------\n\nTITLE: Registry Information Message Format\nDESCRIPTION: Structure included in all Cargo messages containing registry details including index URL, name, and authentication headers.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/credential-provider-protocol.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // Index URL of the registry\n    \"index-url\":\"https://github.com/rust-lang/crates.io-index\",\n    // Name of the registry in configuration (optional)\n    \"name\": \"crates-io\",\n    // HTTP headers received from attempting to access an authenticated registry (optional)\n    \"headers\": [\"WWW-Authenticate: cargo\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Variants to repr(C) Enum\nDESCRIPTION: Shows how to safely add variants to a non_exhaustive repr(C) enum. Demonstrates that while the addition is safe, it may affect the size and alignment of the type.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[repr(C)]\n#[non_exhaustive]\npub enum Example {\n    Variant1 { f1: i16 },\n    Variant2 { f1: i32 },\n}\n\n#[repr(C)]\n#[non_exhaustive]\npub enum Example {\n    Variant1 { f1: i16 },\n    Variant2 { f1: i32 },\n    Variant3 { f1: i64 }, // added\n}\n\nfn main() {\n    let f = updated_crate::Example::Variant2 { f1: 123 };\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output Structure from cargo metadata Command\nDESCRIPTION: Example of the JSON output format from the cargo metadata command. This shows the structure containing package information, dependencies, targets, and other metadata about the current workspace.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-metadata.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    /* Array of all packages in the workspace.\n       It also includes all feature-enabled dependencies unless --no-deps is used.\n    */\n    \"packages\": [\n        {\n            /* The name of the package. */\n            \"name\": \"my-package\",\n            /* The version of the package. */\n            \"version\": \"0.1.0\",\n            /* The Package ID for referring to the\n               package within the document and as the `--package` argument to many commands\n            */\n            \"id\": \"file:///path/to/my-package#0.1.0\",\n            /* The license value from the manifest, or null. */\n            \"license\": \"MIT/Apache-2.0\",\n            /* The license-file value from the manifest, or null. */\n            \"license_file\": \"LICENSE\",\n            /* The description value from the manifest, or null. */\n            \"description\": \"Package description.\",\n            /* The source ID of the package, an \"opaque\" identifier representing\n               where a package is retrieved from. See \"Compatibility\" above for\n               the stability guarantee.\n\n               This is null for path dependencies and workspace members.\n\n               For other dependencies, it is a string with the format:\n               - \"registry+URL\" for registry-based dependencies.\n                 Example: \"registry+https://github.com/rust-lang/crates.io-index\"\n               - \"git+URL\" for git-based dependencies.\n                 Example: \"git+https://github.com/rust-lang/cargo?rev=5e85ba14aaa20f8133863373404cb0af69eeef2c#5e85ba14aaa20f8133863373404cb0af69eeef2c\"\n               - \"sparse+URL\" for dependencies from a sparse registry\n                 Example: \"sparse+https://my-sparse-registry.org\"\n\n               The value after the `+` is not explicitly defined, and may change\n               between versions of Cargo and may not directly correlate to other\n               things, such as registry definitions in a config file. New source\n               kinds may be added in the future which will have different `+`\n               prefixed identifiers.\n            */\n            \"source\": null,\n            /* Array of dependencies declared in the package's manifest. */\n            \"dependencies\": [\n                {\n                    /* The name of the dependency. */\n                    \"name\": \"bitflags\",\n                    /* The source ID of the dependency. May be null, see\n                       description for the package source.\n                    */\n                    \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n                    /* The version requirement for the dependency.\n                       Dependencies without a version requirement have a value of \"*\".\n                    */\n                    \"req\": \"^1.0\",\n                    /* The dependency kind.\n                       \"dev\", \"build\", or null for a normal dependency.\n                    */\n                    \"kind\": null,\n                    /* If the dependency is renamed, this is the new name for\n                       the dependency as a string.  null if it is not renamed.\n                    */\n                    \"rename\": null,\n                    /* Boolean of whether or not this is an optional dependency. */\n                    \"optional\": false,\n                    /* Boolean of whether or not default features are enabled. */\n                    \"uses_default_features\": true,\n                    /* Array of features enabled. */\n                    \"features\": [],\n                    /* The target platform for the dependency.\n                       null if not a target dependency.\n                    */\n                    \"target\": \"cfg(windows)\",\n                    /* The file system path for a local path dependency.\n                       not present if not a path dependency.\n                    */\n                    \"path\": \"/path/to/dep\",\n                    /* A string of the URL of the registry this dependency is from.\n                       If not specified or null, the dependency is from the default\n                       registry (crates.io).\n                    */\n                    \"registry\": null,\n                    /* (unstable) Boolean flag of whether or not this is a pulbic\n                       dependency. This field is only present when\n                       `-Zpublic-dependency` is enabled.\n                    */\n                    \"public\": false\n                }\n            ],\n            /* Array of Cargo targets. */\n            \"targets\": [\n                {\n                    /* Array of target kinds.\n                       - lib targets list the `crate-type` values from the\n                         manifest such as \"lib\", \"rlib\", \"dylib\",\n                         \"proc-macro\", etc. (default [\"lib\"])\n                       - binary is [\"bin\"]\n                       - example is [\"example\"]\n                       - integration test is [\"test\"]\n                       - benchmark is [\"bench\"]\n                       - build script is [\"custom-build\"]\n                    */\n                    \"kind\": [\n                        \"bin\"\n                    ],\n                    /* Array of crate types.\n                       - lib and example libraries list the `crate-type` values\n                         from the manifest such as \"lib\", \"rlib\", \"dylib\",\n                         \"proc-macro\", etc. (default [\"lib\"])\n                       - all other target kinds are [\"bin\"]\n                    */\n                    \"crate_types\": [\n                        \"bin\"\n                    ],\n                    /* The name of the target.\n                       For lib targets, dashes will be replaced with underscores.\n                    */\n                    \"name\": \"my-package\",\n                    /* Absolute path to the root source file of the target. */\n                    \"src_path\": \"/path/to/my-package/src/main.rs\",\n                    /* The Rust edition of the target.\n                       Defaults to the package edition.\n                    */\n                    \"edition\": \"2018\",\n                    /* Array of required features.\n                       This property is not included if no required features are set.\n                    */\n                    \"required-features\": [\"feat1\"],\n                    /* Whether the target should be documented by `cargo doc`. */\n                    \"doc\": true,\n                    /* Whether or not this target has doc tests enabled, and\n                       the target is compatible with doc testing.\n                    */\n                    \"doctest\": false,\n                    /* Whether or not this target should be built and run with `--test`\n                    */\n                    \"test\": true\n                }\n            ],\n```\n\n----------------------------------------\n\nTITLE: Running cargo rustdoc with custom CSS\nDESCRIPTION: Example of how to build package documentation with custom CSS included from a specified file. This command extends the default rustdoc styling with additional CSS rules.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-rustdoc.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo rustdoc --lib -- --extend-css extra.css\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenSSL Feature Implementation\nDESCRIPTION: Example of using cfg attributes to conditionally implement OpenSSL features based on version\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-script-examples.md#2025-04-21_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(ossl111)]\npub fn sha3_224() -> MessageDigest {\n    unsafe { MessageDigest(ffi::EVP_sha3_224()) }\n}\n```\n\n----------------------------------------\n\nTITLE: External Tool Naming Convention for Cargo Subcommands\nDESCRIPTION: Shows the naming convention for external tools that can be used as Cargo subcommands. The tool name is prefixed with 'cargo-' followed by the subcommand name.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/external-tools.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\ncargo-${command}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Basic Package Specification\nDESCRIPTION: Demonstrates how to retrieve package specification for a basic package named 'foo'\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-pkgid.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo pkgid foo\n```\n\n----------------------------------------\n\nTITLE: Adding Cross-Compilation Target for Tests\nDESCRIPTION: Command for installing a 32-bit target using rustup to support cross-compilation tests. The example shows installing the i686 Linux target.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/running.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrustup target add i686-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Advanced Command-line Configuration Examples\nDESCRIPTION: Complex examples of Cargo configuration overrides using Bourne shell syntax, demonstrating escaping, spaces, arrays, and profile settings.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/config.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# Most shells will require escaping.\ncargo --config http.proxy=\\\"http://example.com\\\" …\n\n# Spaces may be used.\ncargo --config \"net.git-fetch-with-cli = true\" …\n\n# TOML array example. Single quotes make it easier to read and write.\ncargo --config 'build.rustdocflags = [\"--html-in-header\", \"header.html\"]' …\n\n# Example of a complex TOML key.\ncargo --config \"target.'cfg(all(target_arch = \\\"arm\\\", target_os = \\\"none\\\"))'.runner = 'my-runner'\" …\n\n# Example of overriding a profile setting.\ncargo --config profile.dev.package.image.opt-level=3 …\n```\n\n----------------------------------------\n\nTITLE: Basic cargo login Command Syntax\nDESCRIPTION: Shows the basic syntax for the cargo login command, which allows users to log in to a registry. Options can be provided, and arguments after double dashes are passed to the credential provider.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-login.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo login [_options_] [-- _args_]\n```\n\n----------------------------------------\n\nTITLE: Using the --examples flag with cargo bench\nDESCRIPTION: This option instructs Cargo to benchmark all example targets in the package without having to name them individually.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n--examples\n```\n\n----------------------------------------\n\nTITLE: Target Architecture Specification\nDESCRIPTION: Format specification for the target triple used in cross-compilation. The triple format defines the architecture, vendor, system, and ABI.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-install.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n<arch><sub>-<vendor>-<sys>-<abi>\n```\n\n----------------------------------------\n\nTITLE: Handlebars Template for --ignore-rust-version Flag Documentation\nDESCRIPTION: A Handlebars template that defines the documentation format for the --ignore-rust-version flag in Cargo. This flag allows users to bypass rust-version requirements specified in packages.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-ignore-rust-version.md#2025-04-21_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#option \"--ignore-rust-version\"}}\nIgnore `rust-version` specification in packages.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Calling Native C Function from Rust\nDESCRIPTION: Rust code that declares an external C function and calls it, relying on the build script to handle the linking details.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-script-examples.md#2025-04-21_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n// src/main.rs\n\n// Note the lack of the `#[link]` attribute. We're delegating the responsibility\n// of selecting what to link over to the build script rather than hard-coding\n// it in the source file.\nunsafe extern { fn hello(); }\n\nfn main() {\n    unsafe { hello(); }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Rustdoc-Map for External Documentation\nDESCRIPTION: This command demonstrates how to use the rustdoc-map feature when building documentation to link dependencies to docs.rs.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncargo +nightly doc --no-deps -Zrustdoc-map\n```\n\n----------------------------------------\n\nTITLE: Updating Cargo Submodule in Rust Repository\nDESCRIPTION: This bash snippet demonstrates how to update the Cargo submodule in a Rust repository to point to a custom branch for testing purposes. It includes commands to set the URL, branch, update the submodule, and commit the changes.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/crater.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule set-url src/tools/cargo https://github.com/ehuss/cargo.git\ngit submodule set-branch --branch my-awesome-feature src/tools/cargo\ngit submodule update --remote src/tools/cargo\ngit add .gitmodules src/tools/cargo\ngit commit\n```\n\n----------------------------------------\n\nTITLE: Basic cargo-rustc command syntax\nDESCRIPTION: The basic syntax for the cargo-rustc command, showing how to compile the current package and pass additional arguments to the compiler.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustc.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo rustc [_options_] [-- _args_]\n```\n\n----------------------------------------\n\nTITLE: Working Directory Change Option in Cargo\nDESCRIPTION: Explains the -C flag that changes the working directory before executing Cargo operations. This affects manifest location and config file discovery. Only available on nightly channel.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/section-options-common.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`-C` _PATH_\n```\n\n----------------------------------------\n\nTITLE: Root Package Workspace Configuration\nDESCRIPTION: Example of a workspace configuration with a root package, including package name and version.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/workspaces.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\n\n[package]\nname = \"hello_world\" # the name of the package\nversion = \"0.1.0\"    # the current version, obeying semver\n```\n\n----------------------------------------\n\nTITLE: Basic Code Block Example\nDESCRIPTION: Demonstrates a simple code block with preserved indentation and formatting\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/compare/formatting.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThis is a code block. Groundhog watchfully sudden firefly some self-consciously hotly jeepers satanic after that this parrot this at virtuous\nsome mocking the leaned jeez nightingale as much mallard so because jeez\nturned dear crud grizzly strenuously.\n\n    Indented and should be unmodified.\n```\n\n----------------------------------------\n\nTITLE: Changing Rust Generic Type to More Generic Type\nDESCRIPTION: Shows a minor change where a generic type is changed to a more generic one by adding a defaulted type parameter, maintaining compatibility with existing code.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_39\n\nLANGUAGE: rust\nCODE:\n```\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Foo<T>(pub T, pub T);\n\n///////////////////////////////////////////////////////////\n// After\npub struct Foo<T, U = T>(pub T, pub U);\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nuse updated_crate::Foo;\n\nfn main() {\n    let s: Foo<f32> = Foo(1.0, 2.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Metadata in Cargo JSON\nDESCRIPTION: Defines the structure for package metadata in Cargo's JSON output, including documentation-related settings.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-metadata.txt#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"metadata\": {\n    \"docs\": {\n        \"rs\": {\n            \"all-features\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cargo Check Package Selection\nDESCRIPTION: Example of package specification syntax for cargo check command\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-check.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-p spec..., --package spec...\n```\n\n----------------------------------------\n\nTITLE: Selecting JSON Output Format for Rustdoc in Cargo\nDESCRIPTION: This command uses the unstable feature to set the output format of 'cargo rustdoc' to JSON, leveraging rustdoc's experimental JSON format.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_37\n\nLANGUAGE: console\nCODE:\n```\ncargo rustdoc -Z unstable-options --output-format json\n```\n\n----------------------------------------\n\nTITLE: Build Script Feature Environment Variable\nDESCRIPTION: Example showing the new CARGO_CFG_FEATURE environment variable available to build scripts, which contains activated package features. Added in Cargo 1.85.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nCARGO_CFG_FEATURE=\"feature_name\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Crates.io Package Specification\nDESCRIPTION: Example of retrieving package specification from crates.io using a GitHub URL\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-pkgid.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncargo pkgid https://github.com/rust-lang/crates.io-index#foo\n```\n\n----------------------------------------\n\nTITLE: Overriding Crate Type Configuration\nDESCRIPTION: Command demonstrating how to override the crate-type field specified in Cargo.toml using command line options.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustc.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncargo rustc --lib --crate-type lib,cdylib\n```\n\n----------------------------------------\n\nTITLE: Using the Unstable build-std Feature in Cargo Nightly\nDESCRIPTION: A nightly-only feature that provides basic support for building the standard library directly from Cargo.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\n# Build with standard library from source\ncargo +nightly build -Zbuild-std\n```\n\n----------------------------------------\n\nTITLE: Alternative Version Flag Commands\nDESCRIPTION: Demonstrates alternative ways to display Cargo's version using shorthand and longhand flags.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-version.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo --version\ncargo -V\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Dependencies with Features in Cargo\nDESCRIPTION: Shows how to add multiple related dependencies (serde and serde_json) with specific feature flags enabled.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-add.txt#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo add serde serde_json -F serde/derive\n```\n\n----------------------------------------\n\nTITLE: Updating Cargo Submodule for Beta Branch\nDESCRIPTION: This bash command shows how to update the Cargo submodule specifically for the beta branch of Rust. It specifies the beta branch, sets the appropriate rust channel configuration, and runs tests to ensure compatibility.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/process/release.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsubup --up-branch update-beta-cargo \\\n    --rust-branch beta \\\n    --set-config rust.channel=beta \\\n    --commit-message \"[beta] Update cargo\" \\\n    --test=\"src/tools/linkchecker tidy \\\n        src/tools/cargo \\\n        src/tools/rustfmt\" \\\n    rust-1.66.0:src/tools/cargo\n```\n\n----------------------------------------\n\nTITLE: Cargo Dependency Info File Example\nDESCRIPTION: Example of a dep-info file with .d extension that lists file dependencies needed to rebuild an artifact. The file uses Makefile syntax and typically contains absolute paths to source files.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-cache.md#2025-04-21_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\n# Example dep-info file found in target/debug/foo.d\n/path/to/myproj/target/debug/foo: /path/to/myproj/src/lib.rs /path/to/myproj/src/main.rs\n```\n\n----------------------------------------\n\nTITLE: Configuring Repository URL in Cargo.toml\nDESCRIPTION: Specifies the source repository URL for a Rust package in the package metadata section.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\nrepository = \"https://github.com/rust-lang/cargo\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Behavior with serde_json Preserve Order Feature\nDESCRIPTION: Example showing how serde_json implements conditional behavior with the preserve_order feature. The code changes JSON map implementation based on whether the feature is enabled, using indexmap when the feature is on.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(feature = \"preserve_order\")]\ntype Map = indexmap::IndexMap<String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype Map = std::collections::BTreeMap<String, Value>;\n```\n\n----------------------------------------\n\nTITLE: Basic Cargo Uninstall Command Example\nDESCRIPTION: Example showing how to uninstall a previously installed Rust package (ripgrep) using cargo uninstall\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-uninstall.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo uninstall ripgrep\n```\n\n----------------------------------------\n\nTITLE: Add Owners Request/Response Structure\nDESCRIPTION: JSON structures for adding new owners to a crate, including both request and response formats.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/registry-web-api.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"users\": [\"login_name\"]\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"ok\": true,\n    \"msg\": \"user ehuss has been invited to be an owner of crate cargo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Cargo Tree Command\nDESCRIPTION: Displays dependency tree for the package in current directory\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-tree.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo tree\n```\n\n----------------------------------------\n\nTITLE: Controlling Verbosity of Rust Cargo Output\nDESCRIPTION: The -v or --verbose options increase output verbosity, while -q or --quiet suppress cargo log messages. These can also be configured via config values.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustc.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n-v\n--verbose\n-q\n--quiet\n```\n\n----------------------------------------\n\nTITLE: Setting rustc Flags in Build Scripts with Cargo\nDESCRIPTION: In Cargo 1.39, the cargo:rustc-flags directive in build scripts now allows -l and -L flags without spaces, making the syntax more flexible.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\n# In a build.rs script\nprintln!(\"cargo:rustc-flags=-lfoo -Lbar\");\n```\n\n----------------------------------------\n\nTITLE: Dependency Analysis for Specific Package\nDESCRIPTION: Shows all packages that depend on a specific package (syn in this example)\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-tree.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo tree -i syn\n```\n\n----------------------------------------\n\nTITLE: Setting Message Format in Cargo Doc Command\nDESCRIPTION: Configures the output format for diagnostic messages during documentation generation. Supports human-readable, short, and various JSON output formats.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-doc.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n--message-format fmt\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Package with Cargo in Rust\nDESCRIPTION: This example demonstrates how to use the 'cargo uninstall' command to remove a previously installed package named 'ripgrep'.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-uninstall.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo uninstall ripgrep\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Output in Cargo Doc Command\nDESCRIPTION: Controls when colored output is used in documentation generation. Accepts values 'auto', 'always', or 'never' to determine color usage.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-doc.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n--color when\n```\n\n----------------------------------------\n\nTITLE: Example usage of cargo-locate-project in Markdown\nDESCRIPTION: Demonstrates how to use the cargo-locate-project command to display the path to the manifest based on the current directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-locate-project.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\ncargo locate-project\n```\n\n----------------------------------------\n\nTITLE: Extended Package ID Specification in Cargo\nDESCRIPTION: Shows new support for git+ and path+ schemes, as well as Git ref query strings in package ID specs.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\ngit+https://github.com/rust-lang/cargo.git?branch=dev\npath+/path/to/local/package?tag=1.69.0\n```\n\n----------------------------------------\n\nTITLE: Specifying custom vendor directory path with cargo vendor\nDESCRIPTION: Command to vendor all dependencies into a custom directory path (third-party/vendor).\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-vendor.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo vendor third-party/vendor\n```\n\n----------------------------------------\n\nTITLE: Duplicate Package Detection\nDESCRIPTION: Displays packages that are built multiple times due to semver-incompatible versions\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-tree.txt#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo tree -d\n```\n\n----------------------------------------\n\nTITLE: Cargo Package Installation Records\nDESCRIPTION: Hidden files that track installed packages and their metadata via cargo install\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/cargo-home.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n.crates.toml\n.crates2.json\n```\n\n----------------------------------------\n\nTITLE: URL Not Supported Error Response\nDESCRIPTION: Error response when registry URL is not supported by the credential provider.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/credential-provider-protocol.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\"Err\":{\n    \"kind\":\"url-not-supported\"\n}}\n```\n\n----------------------------------------\n\nTITLE: Specifying Minimum Rust Version in Cargo.toml\nDESCRIPTION: Added the 'rust-version' field to Cargo.toml to specify the minimum supported Rust version for a package. This can be overridden with the '--ignore-rust-version' command line option.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_25\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\nname = \"my_package\"\nversion = \"0.1.0\"\nrust-version = \"1.56\"\n```\n\n----------------------------------------\n\nTITLE: Using rustbot command for PR status labeling\nDESCRIPTION: Example of the command used to mark a pull request as ready for review after addressing reviewer feedback, which triggers the rustbot to update PR labels.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/process/working-on-cargo.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n@rustbot ready\n```\n\n----------------------------------------\n\nTITLE: Rust Configuration File Names\nDESCRIPTION: Standard configuration file names used in Rust projects for package management and dependency locking.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/appendix/glossary.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCargo.toml\nCargo.lock\n```\n\n----------------------------------------\n\nTITLE: Listing Cargo Publishing Commands in Markdown\nDESCRIPTION: A markdown list of links to documentation for Cargo's publishing-related commands, including login, logout, owner management, packaging, publishing, and yanking packages.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/publishing-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Publishing Commands\n* [cargo login](cargo-login.md)\n* [cargo logout](cargo-logout.md)\n* [cargo owner](cargo-owner.md)\n* [cargo package](cargo-package.md)\n* [cargo publish](cargo-publish.md)\n* [cargo yank](cargo-yank.md)\n```\n\n----------------------------------------\n\nTITLE: Defining an optional dependency in Cargo.toml\nDESCRIPTION: Demonstrates the correct way to specify an optional dependency, which now requires an explicit version.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: TOML\nCODE:\n```\n[dependencies]\nfoo = { version = \"1.0\", optional = true }\n```\n\n----------------------------------------\n\nTITLE: Doctest Working Directory Configuration\nDESCRIPTION: When running documentation tests, the working directory is now set to the root directory of the package containing the test being run.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n// Tests will run from package root directory\n/// ```\n/// // test code here\n/// ```\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Garbage Collection in Cargo (TOML)\nDESCRIPTION: This snippet demonstrates how to configure automatic garbage collection behavior for Cargo's caches using a TOML configuration file. It specifies cleaning frequency and age limits for various cache types.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_47\n\nLANGUAGE: toml\nCODE:\n```\n# Example config.toml file.\n\n# This table defines settings for cargo's caches.\n[cache]\n# The maximum frequency that automatic cleaning of the cache happens.\n# Can be \"never\" to disable, or \"always\" to run on every command.\nauto-clean-frequency = \"1 day\"\n\n# Sub-table for defining specific settings for cleaning the global cache.\n[cache.global-clean]\n# Anything older than this duration will be deleted in the source cache.\nmax-src-age = \"1 month\"\n# Anything older than this duration will be deleted in the compressed crate cache.\nmax-crate-age = \"3 months\"\n# Any index older than this duration will be deleted from the index cache.\nmax-index-age = \"3 months\"\n# Any git checkout older than this duration will be deleted from the checkout cache.\nmax-git-co-age = \"1 month\"\n# Any git clone older than this duration will be deleted from the git cache.\nmax-git-db-age = \"3 months\"\n```\n\n----------------------------------------\n\nTITLE: Cargo Update Breaking Command Usage\nDESCRIPTION: Example of using cargo update with the breaking flag to upgrade dependencies across SemVer incompatible versions\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ cargo +nightly -Zunstable-options update --breaking\n$ cargo +nightly -Zunstable-options update --breaking clap\n```\n\n----------------------------------------\n\nTITLE: Defining the --future-incompat-report Cargo Option in Handlebars Template\nDESCRIPTION: A Handlebars template that defines the --future-incompat-report command-line option for Cargo. This option displays future-incompatible warnings produced during command execution and references the cargo-report manual page for more information.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-future-incompat.md#2025-04-21_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#option \"`--future-incompat-report`\"}}\nDisplays a future-incompat report for any future-incompatible warnings\nproduced during execution of this command\n\nSee {{man \"cargo-report\" 1}}\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Overriding Cargo Configuration Values\nDESCRIPTION: The --config flag allows overriding Cargo configuration values using TOML syntax or by providing a path to a configuration file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-yank.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n--config KEY=VALUE\n```\n\n----------------------------------------\n\nTITLE: Cargo Command Links in Markdown\nDESCRIPTION: List of Cargo command documentation links formatted in Markdown, including common commands like build, test, check, clean, format, and documentation generation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/build-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Build Commands\n* [cargo bench](cargo-bench.md)\n* [cargo build](cargo-build.md)\n* [cargo check](cargo-check.md)\n* [cargo clean](cargo-clean.md)\n* [cargo clippy](cargo-clippy.md)\n* [cargo doc](cargo-doc.md)\n* [cargo fetch](cargo-fetch.md)\n* [cargo fix](cargo-fix.md)\n* [cargo fmt](cargo-fmt.md)\n* [cargo miri](cargo-miri.md)\n* [cargo report](cargo-report.md)\n* [cargo run](cargo-run.md)\n* [cargo rustc](cargo-rustc.md)\n* [cargo rustdoc](cargo-rustdoc.md)\n* [cargo test](cargo-test.md)\n```\n\n----------------------------------------\n\nTITLE: Target Host Configuration in Cargo\nDESCRIPTION: Shows how to disable target configuration applying to host builds using the target-applies-to-host setting.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n# config.toml\ntarget-applies-to-host = false\n```\n\n----------------------------------------\n\nTITLE: Enabling no_std Support in wasm-bindgen\nDESCRIPTION: Shows how wasm-bindgen configures no_std support while keeping std capabilities conditionally available. The first snippet shows the no_std attribute declaration, making std not automatically in scope.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/features-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#![no_std]\n```\n\n----------------------------------------\n\nTITLE: Ignoring Rust Version in Cargo Check\nDESCRIPTION: Instructs Cargo to ignore the 'rust-version' specification in packages when running the check command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-check.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\ncargo check --ignore-rust-version\n```\n\n----------------------------------------\n\nTITLE: Enabling Public Network Tests\nDESCRIPTION: Environment variable setting to enable tests that connect to the public internet, which are disabled by default.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/running.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nCARGO_PUBLIC_NETWORK_TESTS=1\n```\n\n----------------------------------------\n\nTITLE: Setting CARGO_PKG_RUST_VERSION Environment Variable in Rust\nDESCRIPTION: When compiling a crate, the CARGO_PKG_RUST_VERSION environment variable is now set if the manifest has the rust-version field set.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: Rust\nCODE:\n```\nCARGO_PKG_RUST_VERSION=<rust-version>\n```\n\n----------------------------------------\n\nTITLE: Using Cargo with working directory override\nDESCRIPTION: Example showing how to change the current working directory before executing Cargo operations. This affects where Cargo looks for the project manifest and configuration files.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-doc.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo -C path/to/my-project build\n```\n\n----------------------------------------\n\nTITLE: Generic Error Response Format\nDESCRIPTION: General error response format with message and optional cause chain.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/credential-provider-protocol.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\"Err\":{\n    // Error: something else has failed\n    \"kind\":\"other\",\n    // Error message string to be displayed\n    \"message\": \"free form string error message\",\n    // Detailed cause chain for the error (optional)\n    \"caused-by\": [\"cause 1\", \"cause 2\"]\n}}\n```\n\n----------------------------------------\n\nTITLE: Specifying Rustup Toolchain with Cargo Yank\nDESCRIPTION: When using Cargo with rustup, you can specify a toolchain using the + prefix. This allows you to use a specific version of Rust for the command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-yank.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n+stable\n```\n\nLANGUAGE: shell\nCODE:\n```\n+nightly\n```\n\n----------------------------------------\n\nTITLE: GitHub Organization OAuth Settings URL Format\nDESCRIPTION: URL format for accessing an organization's OAuth application policy settings page on GitHub. Used to manage third-party access permissions.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/publishing.md#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/organizations/:org/settings/oauth_application_policy\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running a Rust Program with rustc\nDESCRIPTION: This snippet demonstrates how to compile and run a simple 'Hello, world!' program in Rust using the rustc compiler directly. It highlights the manual process that Cargo aims to simplify.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/why-cargo-exists.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ rustc hello.rs\n$ ./hello\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Major: Adding a private field to a tuple struct that changes public field indices in Rust\nDESCRIPTION: Shows how adding a private field to a tuple struct is a major change if it shifts the indices of public fields. Code that accesses tuple fields by index will break when indices change.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_23\n\nLANGUAGE: rust\nCODE:\n```\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[derive(Default)]\npub struct Foo(pub i32, i32);\n\n///////////////////////////////////////////////////////////\n// After\n#[derive(Default)]\npub struct Foo(f64, pub i32, i32);\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nfn main() {\n    let x = updated_crate::Foo::default();\n    let y = x.0; // Error: is private\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Private Intra-doc Links Warning in Cargo Doc\nDESCRIPTION: cargo doc now automatically passes -Arustdoc::private-intra-doc-links when documenting a binary.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: Rust\nCODE:\n```\ncargo doc -Arustdoc::private-intra-doc-links\n```\n\n----------------------------------------\n\nTITLE: Sample Feature Tree Output\nDESCRIPTION: Example output showing feature dependencies for the syn package\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-tree.md#2025-04-21_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nsyn v1.0.17\n├── syn feature \"clone-impls\"\n│   └── syn feature \"default\"\n│       └── rustversion v1.0.2\n│           └── rustversion feature \"default\"\n│               └── myproject v0.1.0 (/myproject)\n│                   └── myproject feature \"default\" (command-line)\n├── syn feature \"default\" (*)\n├── syn feature \"derive\"\n│   └── syn feature \"default\" (*)\n├── syn feature \"full\"\n│   └── rustversion v1.0.2 (*)\n├── syn feature \"parsing\"\n│   └── syn feature \"default\" (*)\n├── syn feature \"printing\"\n│   └── syn feature \"default\" (*)\n├── syn feature \"proc-macro\"\n│   └── syn feature \"default\" (*)\n└── syn feature \"quote\"\n    ├── syn feature \"printing\" (*)\n    └── syn feature \"proc-macro\" (*)\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Linker Arguments in Rust Build Scripts\nDESCRIPTION: Build scripts can now pass additional linker arguments for binaries or all linkable targets using cargo:rustc-link-arg-bins and cargo:rustc-link-arg.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_28\n\nLANGUAGE: Rust\nCODE:\n```\nprintln!(\"cargo:rustc-link-arg-bins=-Wl,--stack,4194304\");\nprintln!(\"cargo:rustc-link-arg=-Wl,--allow-multiple-definition\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Quiet Mode in Cargo Clean\nDESCRIPTION: Demonstrates how to use the -q or --quiet options to suppress Cargo log messages during the clean process.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-clean.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n<dt class=\"option-term\" id=\"option-cargo-clean--q\"><a class=\"option-anchor\" href=\"#option-cargo-clean--q\"></a><code>-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-clean---quiet\"><a class=\"option-anchor\" href=\"#option-cargo-clean---quiet\"></a><code>--quiet</code></dt>\n```\n\n----------------------------------------\n\nTITLE: Using Path Bases for Dependencies in Cargo (TOML)\nDESCRIPTION: This snippet demonstrates how to use path bases for dependencies in Cargo. It shows how to specify a base path for a dependency and how to define custom path bases in the configuration.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_51\n\nLANGUAGE: toml\nCODE:\n```\ncargo-features = [\"path-bases\"]\n\n[dependencies]\nfoo = { base = \"dev\", path = \"foo\" }\n```\n\nLANGUAGE: toml\nCODE:\n```\n[path-bases]\ndev = \"/home/user/dev/rust/libraries/\"\n```\n\n----------------------------------------\n\nTITLE: Executing Cargo with Custom Working Directory in Rust\nDESCRIPTION: Demonstrates how to use the -C option to change the current working directory before executing Cargo operations. This affects where Cargo looks for the project manifest and configuration files.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-metadata.txt#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\ncargo -C path/to/my-project build\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable to Disable Cross Tests\nDESCRIPTION: Environment variable setting to disable cross-compilation tests when you can't install an alternate target.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/running.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCFG_DISABLE_CROSS_TESTS=1\n```\n\n----------------------------------------\n\nTITLE: Changing Working Directory with Cargo\nDESCRIPTION: The -C option changes the current working directory before executing operations. This affects where Cargo looks for the project manifest and configuration files.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-yank.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo -C path/to/my-project build\n```\n\n----------------------------------------\n\nTITLE: Capturing Additional Generic Parameters in Rust RPIT\nDESCRIPTION: Illustrates a major change where additional generic parameters are captured in a Return Position Impl Trait (RPIT), potentially breaking existing code due to additional constraints.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_40\n\nLANGUAGE: rust\nCODE:\n```\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub fn f<'a, 'b>(x: &'a str, y: &'b str) -> impl Iterator<Item = char> + use<'a> {\n    x.chars()\n}\n\n///////////////////////////////////////////////////////////\n// After\npub fn f<'a, 'b>(x: &'a str, y: &'b str) -> impl Iterator<Item = char> + use<'a, 'b> {\n    x.chars().chain(y.chars())\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nfn main() {\n    let a = String::new();\n    let b = String::new();\n    let iter = updated_crate::f(&a, &b);\n    drop(b); // Error: cannot move out of `b` because it is borrowed\n}\n```\n\n----------------------------------------\n\nTITLE: Vendoring multiple workspaces with cargo vendor\nDESCRIPTION: Command to vendor the current workspace and another workspace specified by path to its Cargo.toml.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-vendor.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo vendor -s ../path/to/Cargo.toml\n```\n\n----------------------------------------\n\nTITLE: Building a specific Cargo test\nDESCRIPTION: Command to build the sandbox for a specific Cargo test to be debugged.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/writing.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo test --test testsuite -- features2::inactivate_targets\n```\n\n----------------------------------------\n\nTITLE: Generating Future Incompatibility Report in Cargo Check\nDESCRIPTION: Displays a future-incompat report for any future-incompatible warnings produced during the check process.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-check.md#2025-04-21_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\ncargo check --future-incompat-report\n```\n\n----------------------------------------\n\nTITLE: Enabling Container Tests\nDESCRIPTION: Environment variable setting to enable tests that use Docker containers, which are disabled by default.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/running.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nCARGO_CONTAINER_TESTS=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Index with Prefix Markers in Rust Cargo\nDESCRIPTION: The `dl` key in `config.json` of a registry index now supports the replacement markers `{prefix}` and `{lowerprefix}` to allow spreading crates across directories similar to the index structure.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dl\": \"https://example.com/api/v1/crates/{prefix}/{crate}/download\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Artifact Directory in TOML\nDESCRIPTION: Configuration for specifying the output directory for build artifacts in Cargo.toml\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[build]\nartifact-dir = \"out\"\n```\n\n----------------------------------------\n\nTITLE: Example Communication Flow\nDESCRIPTION: Complete example showing the communication sequence between Cargo and credential provider for token request.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/credential-provider-protocol.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"v\": [1] }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"v\": 1,\n    \"kind\": \"get\",\n    \"operation\": \"read\",\n    \"registry\":{\"index-url\":\"sparse+https://registry-url/index/\"}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"token\": \"...\",\n    \"cache\": \"session\",\n    \"operation_independent\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for a Cargo Command\nDESCRIPTION: Illustrates how to get help information for a specific Cargo command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncargo help clean\n```\n\n----------------------------------------\n\nTITLE: Building The Cargo Book\nDESCRIPTION: Command to build The Cargo Book documentation using mdBook\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ mdbook build\n```\n\n----------------------------------------\n\nTITLE: Using the --benches flag with cargo bench\nDESCRIPTION: This option benchmarks all targets that have the 'bench = true' manifest flag set, which typically includes the library and binaries built as benchmarks, and bench targets.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n--benches\n```\n\n----------------------------------------\n\nTITLE: Cargo Package Selection Pattern\nDESCRIPTION: Unix-style glob pattern for selecting packages in Cargo commands using the -p flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_37\n\nLANGUAGE: rust\nCODE:\n```\ncargo build -p 'serde*'\n```\n\n----------------------------------------\n\nTITLE: Linking to Cargo Architecture Documentation in Markdown\nDESCRIPTION: This snippet provides a markdown link to the nightly documentation for Cargo's architecture overview. It directs users to the comprehensive documentation for detailed information about Cargo's structure and components.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/implementation/architecture.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[nightly docs](https://doc.rust-lang.org/nightly/nightly-rustc/cargo/index.html)\n```\n\n----------------------------------------\n\nTITLE: Package Dependency Example\nDESCRIPTION: Example showing a package dependency specification in Cargo.toml using a version requirement.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/resolver.md#2025-04-21_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n# Package A\n[dependencies]\nrand = \"0.7\"\n```\n\n----------------------------------------\n\nTITLE: Configuring New Feature Resolver in Cargo.toml\nDESCRIPTION: Added new 'resolver' field to Cargo.toml to opt-in to the new feature resolver. This is a nightly-only feature.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_46\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nresolver = \"2\"\n```\n\n----------------------------------------\n\nTITLE: JSON Message Format for Cargo Package Listing\nDESCRIPTION: Shows the JSON structure output when using the --message-format=json option with cargo package --list. This format provides machine-readable information about each packaged file including its source and destination in the archive.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-package.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  /* The Package ID Spec of the package. */\n  \"id\": \"path+file:///home/foo#0.0.0\",\n  /* Files of this package */\n  \"files\" {\n    /* Relative path in the archive file. */\n    \"Cargo.toml.orig\": {\n      /* Where the file is from.\n         - \"generate\" for file being generated during packaging\n         - \"copy\" for file being copied from another location.\n      */\n      \"kind\": \"copy\",\n      /* For the \"copy\" kind,\n         it is an absolute path to the actual file content.\n         For the \"generate\" kind,\n         it is the original file the generated one is based on.\n      */\n      \"path\": \"/home/foo/Cargo.toml\"\n    },\n    \"Cargo.toml\": {\n      \"kind\": \"generate\",\n      \"path\": \"/home/foo/Cargo.toml\"\n    },\n    \"src/main.rs\": {\n      \"kind\": \"copy\",\n      \"path\": \"/home/foo/src/main.rs\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring trim-paths in Cargo configuration file\nDESCRIPTION: Shows how to enable and configure the trim-paths feature in .cargo/config.toml rather than in the project's Cargo.toml.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_44\n\nLANGUAGE: toml\nCODE:\n```\n# .cargo/config.toml\n[unstable]\ntrim-paths = true\n\n[profile.release]\ntrim-paths = [\"diagnostics\", \"object\"]\n```\n\n----------------------------------------\n\nTITLE: Cargo Profile Configuration\nDESCRIPTION: Example of profile configuration in Cargo config files and environment variables for customizing build settings.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_49\n\nLANGUAGE: toml\nCODE:\n```\n[profile.release]\nopt-level = 3\ndebug = false\n```\n\n----------------------------------------\n\nTITLE: Package Selection Options Template - Markdown\nDESCRIPTION: Template for documenting the -p/--package flag used to select specific packages in Cargo operations. Includes Handlebars templating syntax for dynamic content insertion.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/section-options-package.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{#options}}\n\n{{#option \"`-p` _spec_\" \"`--package` _spec_\" }}\nThe package to {{lower actionverb}}. See {{man \"cargo-pkgid\" 1}} for the SPEC\nformat.\n{{/option}}\n\n{{/options}}\n```\n\n----------------------------------------\n\nTITLE: Workspace Documentation Fragment Redirect Script\nDESCRIPTION: JavaScript code that handles redirecting fragment identifiers to their corresponding documentation pages in the Cargo documentation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/workspaces.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n(function() {\n    var fragments = {\n        \"#virtual-manifest\": \"workspaces.html#virtual-workspace\",\n    };\n    var target = fragments[window.location.hash];\n    if (target) {\n        var url = window.location.toString();\n        var base = url.substring(0, url.lastIndexOf('/'));\n        window.location.replace(base + \"/\" + target);\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Changing repr(align(N)) Value - Major Change\nDESCRIPTION: Shows how changing alignment value can break code that relies on specific alignment guarantees.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n// Before\n#[repr(align(8))]\npub struct Packed {\n    pub a: u8,\n    pub b: u32,\n}\n\n// After\n#[repr(align(4))] // changed to 4\npub struct Packed {\n    pub a: u8,\n    pub b: u32,\n}\n\n// Example usage that will break.\nuse updated_crate::Packed;\n\nfn main() {\n    let p = Packed { a: 1, b: 2 };\n    const _: () = assert!(std::mem::align_of::<Packed>() == 8); // Error: evaluation of constant value failed\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Source Component for Build-Std Tests\nDESCRIPTION: Command for adding the rust-src component to the nightly toolchain, which is required for build-std tests.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/running.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrustup component add rust-src --toolchain=nightly\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Output in Rust Cargo\nDESCRIPTION: The --color option controls when colored output is used. It accepts 'auto', 'always', or 'never' as values and can also be set via config.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustc.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n--color <when>\n```\n\n----------------------------------------\n\nTITLE: Ignoring Rust Version in Cargo Build (Rust)\nDESCRIPTION: Ignores the rust-version specification in packages when building.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\ncargo build --ignore-rust-version\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Version in Cargo\nDESCRIPTION: Example configuration for controlling TLS version in Cargo's HTTP client settings.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_52\n\nLANGUAGE: toml\nCODE:\n```\n[http]\nssl-version = \"tlsv1.3\"\n```\n\n----------------------------------------\n\nTITLE: Configuring lib name in Cargo.toml\nDESCRIPTION: Shows how lib name is inferred from package name, with dashes replaced by underscores.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\nname = \"my-lib\"\n\n# This will result in a lib named \"my_lib\"\n```\n\n----------------------------------------\n\nTITLE: Compiler Artifact JSON Structure in Cargo\nDESCRIPTION: Defines the JSON structure for compiler artifact messages output by Cargo. It includes details about the compiled package, target, profile settings, features, and generated files.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/external-tools.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"reason\": \"compiler-artifact\",\n    \"package_id\": \"file:///path/to/my-package#0.1.0\",\n    \"manifest_path\": \"/path/to/my-package/Cargo.toml\",\n    \"target\": {\n        \"kind\": [\n            \"lib\"\n        ],\n        \"crate_types\": [\n            \"lib\"\n        ],\n        \"name\": \"my_package\",\n        \"src_path\": \"/path/to/my-package/src/lib.rs\",\n        \"edition\": \"2018\",\n        \"doc\": true,\n        \"doctest\": true,\n        \"test\": true\n    },\n    \"profile\": {\n        \"opt_level\": \"0\",\n        \"debuginfo\": 2,\n        \"debug_assertions\": true,\n        \"overflow_checks\": true,\n        \"test\": false\n    },\n    \"features\": [\"feat1\", \"feat2\"],\n    \"filenames\": [\n        \"/path/to/my-package/target/debug/libmy_package.rlib\",\n        \"/path/to/my-package/target/debug/deps/libmy_package-be9f3faac0a26ef0.rmeta\"\n    ],\n    \"executable\": null,\n    \"fresh\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Unstable Cargo Features\nDESCRIPTION: The -Z flag enables unstable (nightly-only) Cargo features. Specific flags can be provided as arguments.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-yank.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n-Z flag\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo -Z help\n```\n\n----------------------------------------\n\nTITLE: Adding Defaulted Type Parameters to Traits in Rust\nDESCRIPTION: Shows how adding a type parameter with a default to a trait is a safe change. Existing implementations will use the default without modification.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_32\n\nLANGUAGE: rust\nCODE:\n```\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub trait Trait {}\n\n///////////////////////////////////////////////////////////\n// After\npub trait Trait<T = i32> {}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nuse updated_crate::Trait;\nstruct Foo;\n\nimpl Trait for Foo {}\n```\n\n----------------------------------------\n\nTITLE: Removing Release Artifacts with Cargo Clean\nDESCRIPTION: This command removes only the release artifacts from the target directory, keeping debug builds intact.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-clean.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo clean --release\n```\n\n----------------------------------------\n\nTITLE: Handlebars Option Block Example\nDESCRIPTION: Example showing the Handlebars template syntax for defining command-line options in the markdown source. This demonstrates how to format option descriptions.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/doc/out/mdman.md#2025-04-21_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#option \"`-p` _spec_...\" \"`--package` _spec_...\"}}\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure for Cargo Documentation\nDESCRIPTION: A hierarchical markdown table of contents that outlines the structure of Cargo's developer documentation, including links to various sections like process documentation, implementation details, and testing guides.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/SUMMARY.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Summary\n\n- [Introduction](./index.md)\n- [Issue Tracker](./issues.md)\n- [Cargo Team](./team.md)\n- [Process](./process/index.md)\n    - [Working on Cargo](./process/working-on-cargo.md)\n    - [Release process](./process/release.md)\n    - [Writing an RFC](./process/rfc.md)\n    - [Unstable features](./process/unstable.md)\n    - [Security issues](./process/security.md)\n- [Design Principles](./design.md)\n- [Implementing a Change](./implementation/index.md)\n    - [Architecture](./implementation/architecture.md)\n    - [New packages](./implementation/packages.md)\n    - [New subcommands](./implementation/subcommands.md)\n    - [Data Schemas](./implementation/schemas.md)\n    - [Console Output](./implementation/console.md)\n    - [Filesystem](./implementation/filesystem.md)\n    - [Formatting](./implementation/formatting.md)\n    - [Debugging](./implementation/debugging.md)\n- [Tests](./tests/index.md)\n    - [Running Tests](./tests/running.md)\n    - [Writing Tests](./tests/writing.md)\n    - [Benchmarking and Profiling](./tests/profiling.md)\n    - [Crater](./tests/crater.md)\n```\n\n----------------------------------------\n\nTITLE: Running Specific Benchmark Test\nDESCRIPTION: Command to run a specific benchmark within a named benchmark target, demonstrating how to target individual benchmark functions.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-bench.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ncargo bench --bench bench_name -- modname::some_benchmark\n```\n\n----------------------------------------\n\nTITLE: Setting Message Format for Rust Cargo Diagnostics\nDESCRIPTION: The --message-format option specifies the output format for diagnostic messages. It accepts multiple comma-separated values for different formatting options.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustc.md#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n--message-format <fmt>\n```\n\n----------------------------------------\n\nTITLE: Configuring zuser Package with libz-sys Dependency\nDESCRIPTION: Cargo.toml configuration for a package depending on libz-sys\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-script-examples.md#2025-04-21_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"zuser\"\nversion = \"0.1.0\"\nedition = \"2024\"\n\n[dependencies]\nlibz-sys = \"1.0.25\"\n\n[build-dependencies]\ncc = \"1.0.46\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Completions for Cargo in Zsh\nDESCRIPTION: Adds Cargo command completion support to Zsh shell by sourcing the output of a Cargo command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_55\n\nLANGUAGE: zsh\nCODE:\n```\nsource <(CARGO_COMPLETE=zsh cargo +nightly)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo to Use 1Password as Credential Provider\nDESCRIPTION: This code snippet shows how to configure Cargo to use cargo-credential-1password as the global credential provider by adding the appropriate configuration to the Cargo config file. The example includes how to specify a 1Password account.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/credential/cargo-credential-1password/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[registry]\nglobal-credential-providers = [\"cargo-credential-1password --account my.1password.com\"]\n```\n\n----------------------------------------\n\nTITLE: Yank/Unyank Response Structure\nDESCRIPTION: JSON structure for successful yank and unyank operations response.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/registry-web-api.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for a Package with Cargo\nDESCRIPTION: Example command for searching the crates.io registry for packages matching 'serde'.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-search.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo search serde\n```\n\n----------------------------------------\n\nTITLE: Build Script Output JSON Structure in Cargo\nDESCRIPTION: Defines the JSON structure for build script output messages in Cargo. It includes linked libraries, search paths, cfg values, environment variables, and the output directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/external-tools.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"reason\": \"build-script-executed\",\n    \"package_id\": \"file:///path/to/my-package#0.1.0\",\n    \"linked_libs\": [\"foo\", \"static=bar\"],\n    \"linked_paths\": [\"/some/path\", \"native=/another/path\"],\n    \"cfgs\": [\"cfg1\", \"cfg2=\\\"string\\\"\"],\n    \"env\": [\n        [\"SOME_KEY\", \"some value\"],\n        [\"ANOTHER_KEY\", \"another value\"]\n    ],\n    \"out_dir\": \"/some/path/in/target/dir\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the basic cargo report command\nDESCRIPTION: The basic syntax for using the cargo report command, which requires specifying a report type. Currently only 'future-incompat' is supported as a type.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-report.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo report _type_ [_options_]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Cargo Generate Lockfile Command in Rust\nDESCRIPTION: This example demonstrates how to create or update the lockfile for the current package or workspace using the cargo generate-lockfile command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-generate-lockfile.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo generate-lockfile\n```\n\n----------------------------------------\n\nTITLE: Setting up the sandbox environment\nDESCRIPTION: Command to configure the CARGO_HOME environment variable to use the sandbox configuration.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/writing.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport CARGO_HOME=$(pwd)/home/.cargo\n```\n\n----------------------------------------\n\nTITLE: Using Platform Filter in Cargo Metadata\nDESCRIPTION: Example command showing how to filter cargo metadata output by target platform.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_53\n\nLANGUAGE: shell\nCODE:\n```\ncargo metadata --filter-platform=x86_64-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Example Cargo.lock File Contents\nDESCRIPTION: An example of a generated Cargo.lock file showing how Cargo records exact dependency information, including the specific Git commit hash. This ensures reproducible builds across different environments.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/guide/cargo-toml-vs-cargo-lock.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[[package]]\nname = \"hello_world\"\nversion = \"0.1.0\"\ndependencies = [\n \"regex 1.5.0 (git+https://github.com/rust-lang/regex.git#9f9f693768c584971a4d53bc3c586c33ed3a6831)\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.5.0\"\nsource = \"git+https://github.com/rust-lang/regex.git#9f9f693768c584971a4d53bc3c586c33ed3a6831\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links for Cargo Commands\nDESCRIPTION: Simple markdown list containing navigation links to core Cargo command documentation pages.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/general-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# General Commands\n* [cargo](cargo.md)\n* [cargo help](cargo-help.md)\n* [cargo version](cargo-version.md)\n```\n\n----------------------------------------\n\nTITLE: Using Multiple --message-format Options in Cargo Commands\nDESCRIPTION: A feature added in Cargo 1.38 that allows specifying the --message-format option multiple times or with comma-separated values, including new JSON diagnostic formats.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\n# Multiple --message-format options\ncargo build --message-format=json --message-format=human\n\n# Comma-separated values\ncargo build --message-format=json,json-diagnostic-rendered-ansi\n```\n\n----------------------------------------\n\nTITLE: Retrieving Local Package Specification\nDESCRIPTION: Demonstrates how to retrieve package specification from a local file system path\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-pkgid.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncargo pkgid file:///path/to/local/package#foo\n```\n\n----------------------------------------\n\nTITLE: Major: Removing repr(int) from an enum in Rust\nDESCRIPTION: Shows how removing the explicit integer representation (`repr(u16)`) from an enum breaks code that depends on a specific discriminant size. This breaks transmute operations that assume a fixed size for the enum.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[repr(u16)]\npub enum Example {\n    Variant1,\n    Variant2,\n    Variant3,\n}\n\n///////////////////////////////////////////////////////////\n// After\n// removed repr(u16)\npub enum Example {\n    Variant1,\n    Variant2,\n    Variant3,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\n\nfn main() {\n    let e = updated_crate::Example::Variant2;\n    let i: u16 = unsafe { std::mem::transmute(e) }; // Error: cannot transmute between types of different sizes\n}\n```\n\n----------------------------------------\n\nTITLE: Using TOML Config with .toml Extension in Cargo\nDESCRIPTION: A feature added in Cargo 1.39 that allows using the .toml filename extension for Cargo configuration files, which previously may have used other extensions.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_54\n\nLANGUAGE: toml\nCODE:\n```\n# Example of a Cargo config file with .toml extension\n# config.toml\n```\n\n----------------------------------------\n\nTITLE: Displaying cargo-locate-project command syntax in Markdown\nDESCRIPTION: Shows the basic syntax for using the cargo-locate-project command, which prints a JSON representation of a Cargo.toml file's location.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-locate-project.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`cargo locate-project` [_options_]\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Lockfile Path in Cargo Build (Rust)\nDESCRIPTION: Changes the path of the lockfile from the default. Requires nightly channel and -Z unstable-options flag. Useful for running commands in read-only directories.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-build.md#2025-04-21_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\ncargo build --lockfile-path /tmp/temporary-lockfile/Cargo.lock\n```\n\n----------------------------------------\n\nTITLE: Redirecting vendor configuration to a file\nDESCRIPTION: Command to vendor dependencies and redirect the generated configuration to a Cargo config file.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-vendor.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo vendor > path/to/my/cargo/config.toml\n```\n\n----------------------------------------\n\nTITLE: Rust Installation Success Message\nDESCRIPTION: Success message displayed when Rust and Cargo are successfully installed via rustup.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/getting-started/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nRust is installed now. Great!\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Completions for Cargo in Fish\nDESCRIPTION: Adds Cargo command completion support to Fish shell by sourcing the output of a Cargo command using process substitution.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_56\n\nLANGUAGE: fish\nCODE:\n```\nsource (CARGO_COMPLETE=fish cargo +nightly | psub)\n```\n\n----------------------------------------\n\nTITLE: Optimizing Field Serialization in Cargo Data Schemas\nDESCRIPTION: Using Serde's skip_serializing_if attribute to omit default values from serialized output, saving space and parse time in Cargo's data formats.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/implementation/schemas.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[serde(skip_serializing_if = \"Default::default\")]\n```\n\n----------------------------------------\n\nTITLE: GitHub Team Access Error Message\nDESCRIPTION: Example error message shown when attempting to add a GitHub team as a crate owner but encountering permission or authentication issues.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/publishing.md#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nerror: failed to invite owners to crate <crate_name>: api errors (status 200 OK): could not find the github team org/repo\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Verbosity for Rustdoc\nDESCRIPTION: Controls the verbosity level of the rustdoc command output using -v/--verbose and -q/--quiet flags.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-rustdoc.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-v\n```\n\nLANGUAGE: bash\nCODE:\n```\n--verbose\n```\n\nLANGUAGE: bash\nCODE:\n```\n-q\n```\n\nLANGUAGE: bash\nCODE:\n```\n--quiet\n```\n\n----------------------------------------\n\nTITLE: Git Compare URL for Version 1.87\nDESCRIPTION: URL format used to compare Git commits for Cargo version 1.87\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[ce948f46...rust-1.87.0](https://github.com/rust-lang/cargo/compare/ce948f46...rust-1.87.0)\n```\n\n----------------------------------------\n\nTITLE: Cargo Config Value Example\nDESCRIPTION: Example of using the KEY=VALUE syntax for cargo configuration overrides\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-pkgid.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nKEY=VALUE\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo with TOML (TOML)\nDESCRIPTION: Example of using the '--config' option to override Cargo configuration values using TOML syntax.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-vendor.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nKEY=VALUE\n```\n\n----------------------------------------\n\nTITLE: Remove Crate Owner Request Format\nDESCRIPTION: JSON format for removing owners from a crate via DELETE request to /api/v1/crates/{crate_name}/owners endpoint. Requires owner login names in users array.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/registry-web-api.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // Array of `login` strings of owners to remove.\n    \"users\": [\"login_name\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Unification Flag in Cargo\nDESCRIPTION: Example of using the new unstable -Z feature-unification flag to control how features are unified across a workspace, introduced in Cargo 1.86 nightly.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[resolver]\nfeature-unification = true\n```\n\n----------------------------------------\n\nTITLE: Demonstrating .cargo_vcs_info.json Format in JavaScript\nDESCRIPTION: Shows the format of the .cargo_vcs_info.json file that's generated during packaging. This file contains VCS information such as the Git commit hash, whether the worktree was dirty, and the relative path of the package in the VCS repository.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-package.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n \"git\": {\n   \"sha1\": \"aac20b6e7e543e6dd4118b246c77225e3a3a1302\",\n   \"dirty\": true\n },\n \"path_in_vcs\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Major: Adding a public field to a struct with no private fields in Rust\nDESCRIPTION: Shows how adding a public field to a struct that has all public fields breaks code that constructs the struct using struct literals because the new field is now required. The mitigation is to use #[non_exhaustive] or provide constructors.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Foo {\n    pub f1: i32,\n}\n\n///////////////////////////////////////////////////////////\n// After\npub struct Foo {\n    pub f1: i32,\n    pub f2: i32,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nfn main() {\n    let x = updated_crate::Foo { f1: 123 }; // Error: missing field `f2`\n}\n```\n\n----------------------------------------\n\nTITLE: Adding repr(packed) to Tuple Struct - Major Change\nDESCRIPTION: Demonstrates how adding repr(packed) affects closure capture behavior in tuple structs, potentially causing compilation errors.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n// Before\npub struct Example(pub i32, pub i32);\n\n// After\n#[repr(packed)]\npub struct Example(pub i32, pub i32);\n\n// Example usage that will break.\nfn main() {\n    let mut f = updated_crate::Example(123, 456);\n    let c = || {\n        let a = f.0;\n    };\n    f.1 = 789; // Error: cannot assign to `f.1` because it is borrowed\n    c();\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a future-incompat report for a specific package\nDESCRIPTION: Example showing how to display the future incompatibility report for a specific package by using the --package option with a package specification including version.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-report.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo report future-incompat --package my-dep:0.0.1\n```\n\n----------------------------------------\n\nTITLE: Displaying Future Incompatibility Warning in Cargo (Text Output)\nDESCRIPTION: Example of how Cargo displays a warning about future incompatibilities in dependencies. It shows a brief message and instructions on how to get more details.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/future-incompat-report.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nwarning: the following packages contain code that will be rejected by a future\n         version of Rust: rental v0.5.5\nnote: to see what the problems were, use the option `--future-incompat-report`,\n      or run `cargo report future-incompatibilities --id 1`\n```\n\n----------------------------------------\n\nTITLE: Linking to Rust Code of Conduct in Markdown\nDESCRIPTION: This Markdown snippet provides a link to the online version of the Rust Code of Conduct, which is applicable to the repository.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/CODE_OF_CONDUCT.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# The Rust Code of Conduct\n\nThe Code of Conduct for this repository [can be found online](https://www.rust-lang.org/conduct.html).\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Option Blocks in Handlebars\nDESCRIPTION: This snippet demonstrates how to structure nested option blocks in a Handlebars template. It shows the syntax for creating blocks that could conditionally render content based on the presence of option values.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/invalid/nested.md#2025-04-21_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#options}}\n{{#options}}\n{{/options}}\n{{/options}}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Cargo.toml and .cargo/config.toml Usage in Markdown\nDESCRIPTION: This code snippet illustrates the file names Cargo.toml and .cargo/config.toml in a markdown format. It emphasizes the distinction between these two configuration files in the Cargo ecosystem.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/process/rfc.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## `.cargo/config.toml` and `Cargo.toml`\n\n`.cargo/config.toml` is for environment or transient configuration,\nbeing dependent on what directory you are running from and settable on the command-line,\nindependent of other flags like `--manifest-path` or `--package`.\n\nOn the other hand `Cargo.toml` is for static, high-level project configuration.\n```\n\n----------------------------------------\n\nTITLE: Referencing RFC Numbers in Markdown\nDESCRIPTION: This code snippet shows how to reference RFC numbers in markdown format. It demonstrates the syntax for linking to specific RFCs in the Rust RFC repository.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/process/rfc.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [RFC 3537] chose\n  configuration for the MSRV-aware resolver because users would likely need\n  to change this setting, like in CI to verify the opposite case of\n  what they run by default.\n\n[RFC 3537]: https://rust-lang.github.io/rfcs/3537-msrv-resolver.html\n```\n\n----------------------------------------\n\nTITLE: Removing Target-Specific Dependencies with cargo-remove\nDESCRIPTION: Shows how to remove a dependency from a specific target platform using the --target option with cargo-remove.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-remove.txt#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo remove --target x86_64-pc-windows-gnu nom\n```\n\n----------------------------------------\n\nTITLE: Documenting Flag with Optional Value in Cargo (Markdown Template)\nDESCRIPTION: Template that shows how to document a command-line flag that takes an optional value in Cargo documentation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/compare/includes/options-common.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--foo` [_bar_]\"}}\nFlag with optional value.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Cargo Config Override Example\nDESCRIPTION: Example showing how to change working directory before executing cargo commands using the -C flag\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-uninstall.txt#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo -C path/to/my-project build\n```\n\n----------------------------------------\n\nTITLE: Indented Code Block\nDESCRIPTION: Shows an indented code block with preserved spacing and nested indentation\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/compare/formatting.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n    This is an indented code block. Egregiously yikes animatedly since outside beseechingly a badger hey shakily giraffe a one wow one this\n    goodness regarding reindeer so astride before.\n\n        Doubly indented\n```\n\n----------------------------------------\n\nTITLE: Entering the test project directory\nDESCRIPTION: Command to navigate to the test project directory, typically named 'foo'.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/writing.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd foo\n```\n\n----------------------------------------\n\nTITLE: Enabling Terminal Emulator Integration for Cargo Progress (TOML)\nDESCRIPTION: Controls whether Cargo reports progress to the terminal emulator for display in places like the task bar. The default is auto-detect. This can be set via the CARGO_TERM_PROGRESS_TERM_INTEGRATION environment variable.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/config.md#2025-04-21_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\nterm.progress.term-integration = true\n```\n\n----------------------------------------\n\nTITLE: Navigating to the sandbox directory\nDESCRIPTION: Command to change directory to the sandbox location where test files are stored.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/writing.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd target/tmp/cit/t0\n```\n\n----------------------------------------\n\nTITLE: Building Project with Patched Dependency in Console\nDESCRIPTION: Console output showing the build process using the local patched version of the uuid crate.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/overriding-dependencies.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cargo build\n   Compiling uuid v1.0.0 (.../uuid)\n   Compiling my-library v0.1.0 (.../my-library)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs\n```\n\n----------------------------------------\n\nTITLE: Cargo Update with Debug Logging\nDESCRIPTION: Command showing how to enable trace-level logging for cargo's resolver to debug dependency selection issues\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/resolver.md#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ env CARGO_LOG=cargo::core::resolver=trace cargo update\n```\n\n----------------------------------------\n\nTITLE: Defining the --index Option Template in Cargo Documentation\nDESCRIPTION: A Markdown template fragment that documents the --index command-line option for Cargo. The template uses Handlebars-style syntax to define the option and its description, which will be rendered in the final documentation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--index` _index_\"}}\nThe URL of the registry index to use.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Tests with Test Suite Filtering\nDESCRIPTION: Command for running the full Cargo test suite or filtering for specific tests. The example shows how to target a specific test in the testsuite.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/running.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo test --test testsuite -- check::check_success\n```\n\n----------------------------------------\n\nTITLE: Making an Unsafe Function Safe in Rust (Minor Change)\nDESCRIPTION: This example shows a minor change where a previously unsafe function is made safe. While this doesn't break existing code, it may trigger the unused_unsafe lint in some cases. The example demonstrates how the change affects the usage of the function in unsafe contexts.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_47\n\nLANGUAGE: rust\nCODE:\n```\n// Before\npub unsafe fn foo() {}\n\n// After\npub fn foo() {}\n\n// Example use of the library that will trigger a lint.\nuse updated_crate::foo;\n\nunsafe fn bar(f: unsafe fn()) {\n    f()\n}\n\nfn main() {\n    unsafe { foo() }; // The `unused_unsafe` lint will trigger here\n    unsafe { bar(foo) };\n}\n```\n\n----------------------------------------\n\nTITLE: Removing repr(packed) - Major Change (Thread Safety)\nDESCRIPTION: Shows how removing repr(packed) can affect thread safety and closure captures.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n// Before\n#[repr(C, packed)]\npub struct Packed {\n    pub a: *mut i32,\n    pub b: i32,\n}\nunsafe impl Send for Packed {}\n\n// After\n#[repr(C)] // removed packed\npub struct Packed {\n    pub a: *mut i32,\n    pub b: i32,\n}\nunsafe impl Send for Packed {}\n\n// Example usage that will break.\nuse updated_crate::Packed;\n\nfn main() {\n    let mut x = 123;\n    let p = Packed {\n        a: &mut x as *mut i32,\n        b: 456,\n    };\n    std::thread::spawn(move || unsafe {\n        *(p.a) += 1; // Error: cannot be sent between threads safely\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Unstable Cargo Flags\nDESCRIPTION: Command to view details about unstable nightly-only flags in Cargo.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-package.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncargo -Z help\n```\n\n----------------------------------------\n\nTITLE: Applying Issue Labels with Rustbot\nDESCRIPTION: Demonstrates how to use the @rustbot command to add or remove labels on GitHub issues for the Cargo project.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/issues.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n@rustbot label: +A-doctests, -A-dependency-resolution\n```\n\n----------------------------------------\n\nTITLE: Setting Private Key and Subject for Cargo Registry Authentication\nDESCRIPTION: This command sets the private key and subject for a specific registry in Cargo's credentials, prompting the user for input.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_31\n\nLANGUAGE: console\nCODE:\n```\ncargo login --registry=name --private-key --private-key-subject=\"subject\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Cargo Repository\nDESCRIPTION: Commands to clone the Cargo repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/rust-lang/cargo.git\ncd cargo\n```\n\n----------------------------------------\n\nTITLE: Referencing Cargo Issue Numbers in Markdown\nDESCRIPTION: This code snippet demonstrates how to reference Cargo issue numbers in markdown format. It shows the syntax for linking to specific issues in the Cargo repository on GitHub.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/process/rfc.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [#12738][cargo#12738] for exploring how existing config might be representable in `Cargo.toml`.\n\n[cargo#12738]: https://github.com/rust-lang/cargo/issues/12738\n```\n\n----------------------------------------\n\nTITLE: Executing Cargo Search Command in Rust\nDESCRIPTION: This snippet demonstrates how to use the cargo search command to search for packages in the registry. It shows the basic syntax for searching for a package named 'serde'.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-search.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo search serde\n```\n\n----------------------------------------\n\nTITLE: Documenting Alternate Flag Syntax in Cargo (Markdown Template)\nDESCRIPTION: Template that shows an alternate syntax for documenting a flag with an optional value that requires an equals sign for disambiguation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/compare/includes/options-common.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--foo`[`=`_bar_]\"}}\nAlternate syntax for optional value (with required = for disambiguation).\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Handlebars Option Block Example\nDESCRIPTION: Example of how to define command-line options in handlebars templates for mdman, showing the format for specifying options with multiple forms.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/doc/mdman.md#2025-04-21_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#option \"`-p` _spec_...\" \"`--package` _spec_...\"}}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Completions for Cargo in PowerShell\nDESCRIPTION: Adds Cargo command completion support to PowerShell by invoking the output of a Cargo command as an expression.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_58\n\nLANGUAGE: powershell\nCODE:\n```\nCARGO_COMPLETE=powershell cargo +nightly | Invoke-Expression\n```\n\n----------------------------------------\n\nTITLE: Illustrating Indented Code Block\nDESCRIPTION: This snippet demonstrates an indented code block with multiple levels of indentation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/compare/expected/formatting.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nThis is an indented code block. Egregiously yikes animatedly since outside beseechingly a badger hey shakily giraffe a one wow one this\ngoodness regarding reindeer so astride before.\n\n    Doubly indented\n```\n\n----------------------------------------\n\nTITLE: Alternative Command Usage Example\nDESCRIPTION: Shows how to use the command with --xyz flag\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/compare/options.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmy-command --xyz\n```\n\n----------------------------------------\n\nTITLE: Login Success Response Format\nDESCRIPTION: Success response indicating successful login operation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/credential-provider-protocol.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\"Ok\":{\n    // Response kind: this was a login request\n    \"kind\":\"login\"\n}}\n```\n\n----------------------------------------\n\nTITLE: Referencing Cargo.toml File in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the Cargo.toml file using inline code formatting in Markdown. It's used to highlight the specific file being discussed in the formatting guidelines.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/implementation/formatting.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`Cargo.toml`\n```\n\n----------------------------------------\n\nTITLE: Lockfile Path Example\nDESCRIPTION: Shows example path format for the --lockfile-path option when specifying custom lockfile location.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-package.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n--lockfile-path /tmp/temporary-lockfile/Cargo.lock\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Source for build-std\nDESCRIPTION: Command to add rust-src component required for building standard library from source\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ rustup component add rust-src --toolchain nightly\n```\n\n----------------------------------------\n\nTITLE: MSRV Policy Comment Format for RenovateBot\nDESCRIPTION: Example of the comment format used to indicate MSRV policy for RenovateBot. These comments (# MSRV:N) are placed in package configurations to specify how many Rust versions should be supported, where N is the number of supported versions.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/implementation/packages.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# MSRV:N\n```\n\n----------------------------------------\n\nTITLE: Adding repr(C) to Default Representation\nDESCRIPTION: Illustrates how to safely add repr(C) to a struct with default representation. This change is safe because users should not make assumptions about the layout of types with default representation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub struct Example {\n    pub f1: i32,\n    pub f2: i16,\n}\n\n#[repr(C)] // added\npub struct Example {\n    pub f1: i32,\n    pub f2: i16,\n}\n\nfn main() {\n    let f = updated_crate::Example { f1: 123, f2: 456 };\n}\n```\n\n----------------------------------------\n\nTITLE: Introducing New Function Type Parameter in Rust\nDESCRIPTION: Shows a potentially breaking change where a new non-defaulted type parameter is added to a function, which may break explicit calls with type arguments.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_42\n\nLANGUAGE: rust\nCODE:\n```\n// Breaking change example\n\n///////////////////////////////////////////////////////////\n// Before\npub fn foo<T>() {}\n\n///////////////////////////////////////////////////////////\n// After\npub fn foo<T, U>() {}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::foo;\n\nfn main() {\n    foo::<u8>(); // Error: function takes 2 generic arguments but 1 generic argument was supplied\n}\n```\n\n----------------------------------------\n\nTITLE: Major: Changing the integer representation type of an enum in Rust\nDESCRIPTION: Demonstrates how changing the specific integer representation of an enum (from `repr(u16)` to `repr(u8)`) breaks code that relies on the discriminant being a specific size for operations like transmute.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[repr(u16)]\npub enum Example {\n    Variant1,\n    Variant2,\n    Variant3,\n}\n\n///////////////////////////////////////////////////////////\n// After\n#[repr(u8)] // changed repr size\npub enum Example {\n    Variant1,\n    Variant2,\n    Variant3,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\n\nfn main() {\n    let e = updated_crate::Example::Variant2;\n    let i: u16 = unsafe { std::mem::transmute(e) }; // Error: cannot transmute between types of different sizes\n}\n```\n\n----------------------------------------\n\nTITLE: Rust Target Triple Format\nDESCRIPTION: Standardized format for specifying target architectures in Rust, consisting of CPU architecture, vendor, system, and ABI components.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/appendix/glossary.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<arch><sub>-<vendor>-<sys>-<abi>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Contents Structure\nDESCRIPTION: A markdown-formatted table of contents that organizes Cargo's documentation into hierarchical sections with links to individual pages. The structure includes major sections for Getting Started, Guide, Reference, and Commands, along with appendices and supplementary materials.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/SUMMARY.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Summary\n\n[Introduction](index.md)\n\n* [Getting Started](getting-started/index.md)\n    * [Installation](getting-started/installation.md)\n    * [First Steps with Cargo](getting-started/first-steps.md)\n\n* [Cargo Guide](guide/index.md)\n    * [Why Cargo Exists](guide/why-cargo-exists.md)\n    * [Creating a New Package](guide/creating-a-new-project.md)\n    * [Working on an Existing Package](guide/working-on-an-existing-project.md)\n    * [Dependencies](guide/dependencies.md)\n    * [Package Layout](guide/project-layout.md)\n    * [Cargo.toml vs Cargo.lock](guide/cargo-toml-vs-cargo-lock.md)\n    * [Tests](guide/tests.md)\n    * [Continuous Integration](guide/continuous-integration.md)\n    * [Publishing on crates.io](reference/publishing.md)\n    * [Cargo Home](guide/cargo-home.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Package Features in Cargo JSON\nDESCRIPTION: Specifies the structure for defining package features in Cargo's metadata JSON. It includes default features and custom feature definitions.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-metadata.txt#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"default\": [\n        \"feat1\"\n    ],\n    \"feat1\": [],\n    \"feat2\": []\n}\n```\n\n----------------------------------------\n\nTITLE: C Source Using zlib Headers\nDESCRIPTION: Example C source file including zlib headers\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/build-script-examples.md#2025-04-21_snippet_16\n\nLANGUAGE: c\nCODE:\n```\n#include \"zlib.h\"\n\n// … rest of code that makes use of zlib.\n```\n\n----------------------------------------\n\nTITLE: Specifying Binary Target Option in Cargo New Command\nDESCRIPTION: The --bin option creates a package with a binary target (src/main.rs). This is the default behavior for the 'cargo new' command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-new.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n--bin\n```\n\n----------------------------------------\n\nTITLE: Package Specification Format Examples\nDESCRIPTION: Examples showing different ways to specify package IDs using name, version and URL combinations\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-pkgid.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nbitflags\nbitflags@1.0.4\nhttps://github.com/rust-lang/cargo\nhttps://github.com/rust-lang/cargo#0.33.0\nhttps://github.com/rust-lang/crates.io-index#bitflags\nhttps://github.com/rust-lang/cargo#crates-io@0.21.0\n```\n\n----------------------------------------\n\nTITLE: JSON Format for .cargo_vcs_info.json in Cargo Packages\nDESCRIPTION: Defines the format of the .cargo_vcs_info.json file that is generated when packaging a Rust crate. This file contains information about the Git repository state, including the commit hash, whether the working directory was dirty, and the package's path within the version control system.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-package.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n \"git\": {\n   \"sha1\": \"aac20b6e7e543e6dd4118b246c77225e3a3a1302\",\n   \"dirty\": true\n },\n \"path_in_vcs\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Operation Not Supported Error Response\nDESCRIPTION: Error response when requested operation is not supported by the credential provider.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/credential-provider-protocol.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\"Err\":{\n    // Error: The credential could not be found in the provider.\n    \"kind\":\"operation-not-supported\"\n}}\n```\n\n----------------------------------------\n\nTITLE: Defining cargo-miri Command in Markdown\nDESCRIPTION: This snippet defines the name and basic purpose of the cargo-miri command using Markdown formatting.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-miri.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# cargo-miri(1)\n\n## NAME\n\ncargo-miri --- Runs binary crates and tests in Miri\n```\n\n----------------------------------------\n\nTITLE: Alignment Demonstration Table\nDESCRIPTION: Illustrates left, center, and right alignment in table columns.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/compare/tables.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nLeft aligned | Center aligned | Right aligned\n-------------|:--------------:|--------------:\nabc | def | ghi\n```\n\n----------------------------------------\n\nTITLE: Using Internal Profiler with Cargo\nDESCRIPTION: Example of using Cargo's internal profiler by setting the CARGO_LOG_PROFILE environment variable to generate a trace file for analysis in perfetto.dev or chrome://tracing\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/profiling.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ # Output first three levels of profiling info\n$ CARGO_LOG_PROFILE=true cargo generate-lockfile\n```\n\n----------------------------------------\n\nTITLE: Login Request Message Format\nDESCRIPTION: Message sent by Cargo to collect and store credentials with optional token and login URL.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/credential-provider-protocol.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // Protocol version\n    \"v\":1,\n    // Action to perform: login\n    \"kind\":\"login\",\n    // Registry information (see Registry information)\n    \"registry\":{\"index-url\":\"sparse+https://registry-url/index/\", \"name\": \"my-registry\"},\n    // User-specified token from stdin or command line (optional)\n    \"token\": \"<the token value>\",\n    // URL that the user could visit to get a token (optional)\n    \"login-url\": \"http://registry-url/login\",\n    // Additional command-line args (optional)\n    \"args\":[]\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Column Table with Formatted Text\nDESCRIPTION: Shows a three-column table with mixed content including code formatting and italic text.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/compare/tables.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nHeader content | With `format` *text* | Another column\n---------------|----------------------|----------------\nSome data      | More data            |\nExtra long amount of text within a column | hi | there\n```\n\n----------------------------------------\n\nTITLE: Running cargo bench with keep-going and no-fail-fast flags in Rust\nDESCRIPTION: Example showing how to compile and run as many benchmarks as possible without stopping at the first failure by using --keep-going for compilation and --no-fail-fast for benchmark execution.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-bench.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --benches --release --keep-going\ncargo bench --no-fail-fast\n```\n\n----------------------------------------\n\nTITLE: Using cargo fix with feature flags\nDESCRIPTION: Shows how to use cargo fix with feature flags to analyze and fix code that is conditionally enabled by features.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-fix.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo fix --features foo\n```\n\n----------------------------------------\n\nTITLE: Adding Inherent Items to Implementations in Rust\nDESCRIPTION: Illustrates how adding inherent items to an implementation can potentially cause breaking changes due to name collisions with trait items.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_33\n\nLANGUAGE: rust\nCODE:\n```\n// Breaking change example\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Foo;\n\n///////////////////////////////////////////////////////////\n// After\npub struct Foo;\n\nimpl Foo {\n    pub fn foo(&self) {}\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Foo;\n\ntrait Trait {\n    fn foo(&self, x: i32) {}\n}\n\nimpl Trait for Foo {}\n\nfn main() {\n    let x = Foo;\n    x.foo(1); // Error: this method takes 0 arguments but 1 argument was supplied\n}\n```\n\n----------------------------------------\n\nTITLE: Adding non_exhaustive to Existing Structs and Enums in Rust (Breaking Change)\nDESCRIPTION: This example demonstrates a breaking change where #[non_exhaustive] is added to existing structs and enums. This change affects how these types can be constructed and pattern matched outside the crate where they are defined, potentially breaking existing code that relies on exhaustive matching or struct literal syntax.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/semver.md#2025-04-21_snippet_49\n\nLANGUAGE: rust\nCODE:\n```\n// Before\npub struct Foo {\n    pub bar: usize,\n}\n\npub enum Bar {\n    X,\n    Y(usize),\n    Z { a: usize },\n}\n\npub enum Quux {\n    Var,\n}\n\n// After\n#[non_exhaustive]\npub struct Foo {\n    pub bar: usize,\n}\n\npub enum Bar {\n    #[non_exhaustive]\n    X,\n\n    #[non_exhaustive]\n    Y(usize),\n\n    #[non_exhaustive]\n    Z { a: usize },\n}\n\n#[non_exhaustive]\npub enum Quux {\n    Var,\n}\n\n// Example usage that will break.\nuse updated_crate::{Bar, Foo, Quux};\n\nfn main() {\n    let foo = Foo { bar: 0 }; // Error: cannot create non-exhaustive struct using struct expression\n\n    let bar_x = Bar::X; // Error: unit variant `X` is private\n    let bar_y = Bar::Y(0); // Error: tuple variant `Y` is private\n    let bar_z = Bar::Z { a: 0 }; // Error: cannot create non-exhaustive variant using struct expression\n\n    let q = Quux::Var;\n    match q {\n        Quux::Var => 0,\n        // Error: non-exhaustive patterns: `_` not covered\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Help Options in Cargo\nDESCRIPTION: Documents the help flags (-h and --help) that display assistance information for Cargo commands.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/section-options-common.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`-h` `--help`\n```\n\n----------------------------------------\n\nTITLE: Specifying Workspace Members in Cargo JSON\nDESCRIPTION: Defines the structure for listing workspace members in Cargo's metadata JSON, using Package IDs.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-metadata.txt#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"workspace_members\": [\n    \"file:///path/to/my-package#0.1.0\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Unknown Lints in Cargo TOML\nDESCRIPTION: Example showing an invalid lint configuration in Cargo.toml that would trigger the unknown_lints warning. This demonstrates what not to do when configuring lints.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/lints.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[lints.cargo]\nthis-lint-does-not-exist = \"warn\"\n```\n\n----------------------------------------\n\nTITLE: Running Cargo commands in the sandbox\nDESCRIPTION: Example commands for running Cargo directly in the sandbox environment for debugging purposes.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/tests/writing.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n/path/to/my/cargo/target/debug/cargo check\n```\n\n----------------------------------------\n\nTITLE: Feature Investigation Tree Example\nDESCRIPTION: Shows a detailed example of investigating feature dependencies for the syn package using cargo tree -e features -i syn command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-tree.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nsyn v1.0.17\n├── syn feature \"clone-impls\"\n│   └── syn feature \"default\"\n│       └── rustversion v1.0.2\n│           └── rustversion feature \"default\"\n│               └── myproject v0.1.0 (/myproject)\n│                   └── myproject feature \"default\" (command-line)\n├── syn feature \"default\" (*)\n├── syn feature \"derive\"\n│   └── syn feature \"default\" (*)\n├── syn feature \"full\"\n│   └── rustversion v1.0.2 (*)\n├── syn feature \"parsing\"\n│   └── syn feature \"default\" (*)\n├── syn feature \"printing\"\n│   └── syn feature \"default\" (*)\n├── syn feature \"proc-macro\"\n│   └── syn feature \"default\" (*)\n└── syn feature \"quote\"\n    ├── syn feature \"printing\" (*)\n    └── syn feature \"proc-macro\" (*)\n```\n\n----------------------------------------\n\nTITLE: Running Cargo directly with rustup toolchain specification\nDESCRIPTION: Example of how to run a locally built Cargo binary with a specific rustup toolchain to avoid toolchain override issues during development.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/process/working-on-cargo.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrustup run nightly target/debug/cargo\n```\n\n----------------------------------------\n\nTITLE: Basic Command Usage Example\nDESCRIPTION: Demonstrates using the command with --abc flag\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/compare/options.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmy-command --abc\n```\n\n----------------------------------------\n\nTITLE: Example Git Compare URL Format\nDESCRIPTION: URL format used to compare Git commits between versions\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[a6c604d1...HEAD](https://github.com/rust-lang/cargo/compare/a6c604d1...HEAD)\n```\n\n----------------------------------------\n\nTITLE: Cargo Unit Graph JSON Structure\nDESCRIPTION: Detailed JSON structure showing Cargo's internal unit graph representation, including package information, targets, profiles, and dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/unstable.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"version\": 1,\n  \"units\": [\n    {\n      \"pkg_id\": \"my-package 0.1.0 (path+file:///path/to/my-package)\",\n      \"target\": {\n        \"kind\": [\"lib\"],\n        \"crate_types\": [\"lib\"],\n        \"name\": \"my_package\",\n        \"src_path\": \"/path/to/my-package/src/lib.rs\",\n        \"edition\": \"2018\",\n        \"test\": true,\n        \"doctest\": true\n      },\n      \"profile\": {\n        \"name\": \"dev\",\n        \"opt_level\": \"0\",\n        \"lto\": \"false\",\n        \"codegen_units\": null,\n        \"debuginfo\": 2,\n        \"debug_assertions\": true,\n        \"overflow_checks\": true,\n        \"rpath\": false,\n        \"incremental\": true,\n        \"panic\": \"unwind\"\n      },\n      \"platform\": null,\n      \"mode\": \"build\",\n      \"features\": [\"somefeat\"],\n      \"is_std\": false,\n      \"dependencies\": [\n        {\n          \"index\": 1,\n          \"extern_crate_name\": \"unicode_xid\",\n          \"public\": false,\n          \"noprelude\": false\n        }\n      ]\n    }\n  ],\n  \"roots\": [0]\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Working Directory for Cargo Doc Command (Nightly)\nDESCRIPTION: Changes the current working directory before executing documentation generation. Affects manifest location and config discovery. Requires nightly channel.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-doc.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n-C PATH\n```\n\n----------------------------------------\n\nTITLE: Not Found Error Response\nDESCRIPTION: Error response when credentials cannot be found.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/credential-provider-protocol.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\"Err\":{\n    // Error: The credential could not be found in the provider.\n    \"kind\":\"not-found\"\n}}\n```\n\n----------------------------------------\n\nTITLE: Basic mdman Command Syntax\nDESCRIPTION: The basic command syntax for using mdman to convert markdown files to man pages.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/doc/mdman.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmdman [_options_] `-t` _type_ `-o` _outdir_ _sources..._\n```\n\n----------------------------------------\n\nTITLE: Defining Package Authors in Cargo JSON\nDESCRIPTION: Shows the structure for specifying package authors in Cargo's metadata JSON output.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-metadata.txt#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"authors\": [\n    \"Jane Doe <user@example.com>\"\n]\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Cargo Issue Triage Process\nDESCRIPTION: Detailed markdown documentation explaining the process of triaging issues in the Cargo repository, including handling duplicates, adding appropriate labels, and determining next steps for issue resolution.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/issues.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Triaging issues\n\nTriaging issues involves processing issues to assign appropriate labels, make\nsure the issue has sufficient information, and to decide the next steps.\nWhen new issues are filed, they should automatically get the [S-triage] label\nassuming the author uses one of the templates. This helps identify which\nissues have not yet been triaged.\n\nThere are several things to consider when triaging an issue:\n\n* Is this a duplicate? Search the issue tracker (including closed issues) to\n  see if there is an issue with a similar or identical root cause to what is reported.\n  We generally focus issues around root causes so alternative solutions can be\n  discussed and evaluated together.\n  If it is obviously a duplicate, write a comment that it is a duplicate of the\n  other issue, and close the issue.\n  If it isn't obvious that it is a duplicate, leave a comment asking the author\n  if the other issue covers what they reported.\n\n* For a bug, check if the report contains enough information to reproduce it.\n  If you can't reproduce it, solicit more information from the author to\n  better understand the issue.\n  Change the label from [S-triage] to [S-needs-info] if this is the case.\n\n* Add labels that describe what the issue is related to.\n\n    * Add the appropriate [A-], [Command-], [O-], and [Z-] prefixed labels.\n    * If this is a regression from stable, add one of the [regression-]\n      prefixed labels (depending on if it is a regression in an already\n      released stable release, or it is in nightly).\n\n* Assuming the issue looks valid, switch the [S-triage] label for one of the following:\n\n  * [S-needs-team-input] --- The next steps are not clear, and the Cargo team\n    needs to discuss whether or not to proceed and what needs to be done to\n    address the issue.\n  * [S-needs-design] --- The resolution of the issue or small feature request\n    will need more work to come up with the appropriate design.\n  * [S-needs-rfc] --- This is a large feature request that will require a\n    public design process.\n  * [S-needs-mentor] --- This is something the Cargo team wants to address,\n    but does not currently have the capacity to help with reviewing. **(reserved for Cargo team)**\n  * [S-accepted] --- This is something that clearly needs to be addressed, and\n    a Cargo team member has volunteered to help review. **(reserved for Cargo team)**\n\nAnyone is welcome to help with the triaging process. You can help with\nreproducing issues, checking for duplicates, gathering more information from\nthe reporter, assigning labels using [`@rustbot` comments](#issue-labels), and\ncreating a test using [Cargo's testsuite] ([example][cargotest-example]).\n\n[Cargo's testsuite]: tests/writing.md\n[cargotest-example]: https://github.com/rust-lang/cargo/issues/11628#issuecomment-1411088951\n```\n\n----------------------------------------\n\nTITLE: Describing cargo-miri Command Details in Markdown\nDESCRIPTION: This snippet provides a detailed description of the cargo-miri command, including its distribution, installation requirements, and availability.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-miri.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## DESCRIPTION\n\nThis is an external command distributed with the Rust toolchain as an optional component.\nIt is not built into Cargo, and may require additional installation.\n\nThis command is only available on the [nightly](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) channel.\n\nFor information about usage and installation,\nsee <https://github.com/rust-lang/miri>.\n```\n\n----------------------------------------\n\nTITLE: Console Output Examples - Shell struct usage\nDESCRIPTION: Code references showing the correct way to handle console output in Cargo. Output should go through the Shell struct obtained from GlobalContext, mostly directed to stderr except in JSON mode which uses stdout.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/implementation/console.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// Instead of this:\nprintln!(\"some output\");\n\n// Use this:\nshell.status(\"Status\", \"some output\")?;\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Lockfile Path in Cargo Clean\nDESCRIPTION: Demonstrates how to use the --lockfile-path option to change the path of the lockfile from the default location.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-clean.md#2025-04-21_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n<dt class=\"option-term\" id=\"option-cargo-clean---lockfile-path\"><a class=\"option-anchor\" href=\"#option-cargo-clean---lockfile-path\"></a><code>--lockfile-path</code> <em>PATH</em></dt>\n```\n\n----------------------------------------\n\nTITLE: Selective Package Update Command\nDESCRIPTION: Updates only specific packages (foo and bar) while keeping other dependencies locked at their current versions.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-update.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo update foo bar\n```\n\n----------------------------------------\n\nTITLE: Removing Crate Owner Example\nDESCRIPTION: Example command showing how to remove a user from the owners list of a crate named 'foo'.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-owner.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo owner --remove username foo\n```\n\n----------------------------------------\n\nTITLE: Alternative Methods for Displaying Cargo Version\nDESCRIPTION: Alternative flag-based commands to display the version of Cargo. These are command-line shortcuts that can be used instead of the explicit 'version' subcommand.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-version.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo --version\ncargo -V\n```\n\n----------------------------------------\n\nTITLE: Using Verbose Output in Cargo Clean\nDESCRIPTION: Shows how to use the -v or --verbose options to enable verbose output during the clean process.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-clean.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n<dt class=\"option-term\" id=\"option-cargo-clean--v\"><a class=\"option-anchor\" href=\"#option-cargo-clean--v\"></a><code>-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-clean---verbose\"><a class=\"option-anchor\" href=\"#option-cargo-clean---verbose\"></a><code>--verbose</code></dt>\n```\n\n----------------------------------------\n\nTITLE: Configuring File Exclusion in Cargo.toml\nDESCRIPTION: This TOML snippet shows how to configure the 'exclude' key in Cargo.toml to specify files or patterns that should be excluded from the crate package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/publishing.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\nexclude = [\n    \"public/assets/*\",\n    \"videos/*\",\n]\n```\n\n----------------------------------------\n\nTITLE: Proptest Seeds Definition\nDESCRIPTION: Records of past test failure seeds with their shrunk test cases. The first seed case shrinks to an empty string, while the second seed case shrinks to empty data and replacements tuple.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/rustfix/proptest-regressions/replace.txt#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nxs 358148376 3634975642 2528447681 3675516813 # shrinks to ref s = \"\"\nxs 3127423015 3362740891 2605681441 2390162043 # shrinks to ref data = \"\", ref replacements = [(0..0, [])]\n```\n\n----------------------------------------\n\nTITLE: Controlling Colored Output in Cargo Clean\nDESCRIPTION: Shows how to use the --color option to control when colored output is used in the clean process.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-clean.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n<dt class=\"option-term\" id=\"option-cargo-clean---color\"><a class=\"option-anchor\" href=\"#option-cargo-clean---color\"></a><code>--color</code> <em>when</em></dt>\n```\n\n----------------------------------------\n\nTITLE: Using Replace Section in Cargo.toml (Deprecated)\nDESCRIPTION: Shows the deprecated [replace] section syntax for overriding specific versions of dependencies. Requires exact version matching.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/overriding-dependencies.md#2025-04-21_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[replace]\n\"foo:0.1.0\" = { git = 'https://github.com/example/foo.git' }\n\"bar:1.0.2\" = { path = 'my/local/bar' }\n```\n\n----------------------------------------\n\nTITLE: Logout Success Response Format\nDESCRIPTION: Success response indicating successful logout operation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/credential-provider-protocol.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\"Ok\":{\n    // Response kind: this was a logout request\n    \"kind\":\"logout\"\n}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Tree Structure\nDESCRIPTION: This snippet shows how to represent a tree structure using ASCII characters.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/compare/expected/formatting.txt#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ntree\n└── example\n    ├── salamander\n    │   ├── honey\n    │   └── some\n    ├── fancifully\n    └── trout\n```\n\n----------------------------------------\n\nTITLE: Specifying Git Reference for Dependency in Rust Cargo\nDESCRIPTION: The 'rev' option for a git dependency now supports git references that start with 'refs/'. This allows depending on a pull request from services like GitHub before it is merged.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_24\n\nLANGUAGE: TOML\nCODE:\n```\n[dependencies]\nsome_crate = { git = \"https://github.com/example/repo\", rev = \"refs/pull/123/head\" }\n```\n\n----------------------------------------\n\nTITLE: Cargo Uninstall Command Syntax\nDESCRIPTION: Basic syntax for the cargo uninstall command showing the command structure with optional arguments\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-uninstall.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo uninstall [options] [spec...]\n```\n\n----------------------------------------\n\nTITLE: Referencing Related Cargo Commands in Markdown\nDESCRIPTION: This snippet lists related Cargo commands and documentation using Markdown link formatting.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-miri.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## SEE ALSO\n\n[cargo(1)](cargo.md),\n[cargo-run(1)](cargo-run.md),\n[cargo-test(1)](cargo-test.md),\n[Custom subcommands](../reference/external-tools.md#custom-subcommands)\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Links in Contributing Guidelines\nDESCRIPTION: This snippet shows how to format links in Markdown for the Cargo Contributor Guide and other relevant resources. It demonstrates the use of inline links and reference-style links for better readability.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Cargo Contributor Guide]: https://rust-lang.github.io/cargo/contrib/\n\n[internals forum]: https://internals.rust-lang.org/c/tools-and-infrastructure/cargo\n[file an issue]: https://github.com/rust-lang/cargo/issues\n[the process]: https://doc.crates.io/contrib/process/index.html\n[accepted]: https://github.com/rust-lang/cargo/issues?q=is%3Aissue+is%3Aopen+label%3AS-accepted\n```\n\n----------------------------------------\n\nTITLE: Authors Field Example in Cargo.toml\nDESCRIPTION: This deprecated field lists the people or organizations that are considered the authors of the package. Each author can optionally include an email address within angled brackets.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/manifest.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# ...\nauthors = [\"Graydon Hoare\", \"Fnu Lnu <no-reply@rust-lang.org>\"]\n```\n\n----------------------------------------\n\nTITLE: Table with Links\nDESCRIPTION: Demonstrates table formatting with different types of links including reference links and direct URLs.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/compare/tables.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Link check |\n|------------|\n| [foo] |\n| <https://example.com/> |\n\n[foo]: https://example.com/\n```\n\n----------------------------------------\n\nTITLE: Documenting File Loading Option in Cargo (Markdown Template)\nDESCRIPTION: Template that shows how to document a file loading option with the @filename syntax in Cargo documentation.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/compare/includes/options-common.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`@`_filename_\"}}\nLoad from filename.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Directory Tree Structure\nDESCRIPTION: Displays a tree-like directory structure using ASCII characters\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/compare/formatting.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ntree\n└── example\n    ├── salamander\n    │   ├── honey\n    │   └── some\n    ├── fancifully\n    └── trout\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Cargo Commands\nDESCRIPTION: The -h or --help flags display help information for the Cargo command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-yank.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n-h\n```\n\nLANGUAGE: shell\nCODE:\n```\n--help\n```\n\n----------------------------------------\n\nTITLE: Mixed Width Aligned Table\nDESCRIPTION: Shows alignment with varying column widths and long text content.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/compare/tables.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nLeft aligned | Center aligned | Right aligned\n-------------|:--------------:|--------------:\nX | X | X\nExtra long text 123456789012 with mixed widths. | Extra long text 123456789012 with mixed widths. | Extra long text 123456789012 with mixed widths.\n```\n\n----------------------------------------\n\nTITLE: Rust Path Pattern Example\nDESCRIPTION: Repository comparison path pattern showing version changes\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n115f3455...rust-1.68.0\nf6e737b1...rust-1.68.0\n```\n\n----------------------------------------\n\nTITLE: Example Usage of mdman\nDESCRIPTION: A practical example showing how to convert markdown documents to man pages using the mdman command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/doc/mdman.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmdman -t man -o doc doc/mdman.md\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency Resolution in Rust\nDESCRIPTION: Pseudo-code approximation of Cargo's resolver algorithm. It demonstrates the process of resolving dependencies, including walking the dependency tree, unifying versions, and backtracking when necessary.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/reference/resolver.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub fn resolve(workspace: &[Package], policy: Policy) -> Option<ResolveGraph> {\n    let dep_queue = Queue::new(workspace);\n    let resolved = ResolveGraph::new();\n    resolve_next(pkq_queue, resolved, policy)\n}\n\nfn resolve_next(dep_queue: Queue, resolved: ResolveGraph, policy: Policy) -> Option<ResolveGraph> {\n    let Some(dep_spec) = policy.pick_next_dep(dep_queue) else {\n        // Done\n        return Some(resolved);\n    };\n\n    if let Some(resolved) = policy.try_unify_version(dep_spec, resolved.clone()) {\n        return Some(resolved);\n    }\n\n    let dep_versions = dep_spec.lookup_versions()?;\n    let mut dep_versions = policy.filter_versions(dep_spec, dep_versions);\n    while let Some(dep_version) = policy.pick_next_version(&mut dep_versions) {\n        if policy.needs_version_unification(dep_version, &resolved) {\n            continue;\n        }\n\n        let mut dep_queue = dep_queue.clone();\n        dep_queue.enqueue(dep_version.dependencies);\n        let mut resolved = resolved.clone();\n        resolved.register(dep_version);\n        if let Some(resolved) = resolve_next(dep_queue, resolved) {\n            return Some(resolved);\n        }\n    }\n\n    // No valid solution found, backtrack and `pick_next_version`\n    None\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cargo Option Template\nDESCRIPTION: Template markup showing how to document a cargo command line option outside of an options block using Handlebars syntax\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/invalid/not-inside-options.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`-o`\"}}\nTesting without options block.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Single Column Table in Markdown\nDESCRIPTION: Demonstrates basic single column table with a simple greeting.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/compare/tables.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Single col |\n|------------|\n| Hi! :) |\n```\n\n----------------------------------------\n\nTITLE: Displaying Dependency Tree in Rust Project\nDESCRIPTION: Example output of 'cargo tree' command showing a simple project's dependency graph, including direct and transitive dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-tree.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmyproject v0.1.0 (/myproject)\n└── rand v0.7.3\n    ├── getrandom v0.1.14\n    │   ├── cfg-if v0.1.10\n    │   └── libc v0.2.68\n    ├── libc v0.2.68 (*)\n    ├── rand_chacha v0.2.2\n    │   ├── ppv-lite86 v0.2.6\n    │   └── rand_core v0.5.1\n    │       └── getrandom v0.1.14 (*)\n    └── rand_core v0.5.1 (*)\n[build-dependencies]\n└── cc v1.0.50\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cargo credential helper with the Credential trait\nDESCRIPTION: Demonstrates how to create a main.rs file that implements the Credential trait required for a credential helper. The example shows the basic structure with a custom MyCredential struct that implements the Credential trait.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/credential/cargo-credential/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// src/main.rs\n\nuse cargo_credential::{Credential, Error};\n\nstruct MyCredential;\n\nimpl Credential for MyCredential {\n    /// implement trait methods here...\n}\n\nfn main() {\n    cargo_credential::main(MyCredential);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Filtered Tests with Custom Thread Count in Rust\nDESCRIPTION: This example demonstrates how to run Cargo tests filtered by name and with a specified number of test threads. It filters for tests containing 'foo' in their name and runs them on 3 threads in parallel.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-test.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo test foo -- --test-threads 3\n```\n\n----------------------------------------\n\nTITLE: Yanking a Crate Version Using Cargo\nDESCRIPTION: Example command showing how to yank version 1.0.7 of a crate named 'foo' from the registry index. This prevents the yanked version from being used in new projects or checkouts without existing lockfiles.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-yank.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo yank foo@1.0.7\n```\n\n----------------------------------------\n\nTITLE: Command Syntax for Cargo Add\nDESCRIPTION: Basic syntax patterns for using the cargo add command to add dependencies to a Cargo.toml file. Shows three main usage patterns: adding from registry, from path, and from git repository.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-add.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo add [options] crate…\ncargo add [options] --path path\ncargo add [options] --git url [crate…]\n```\n\n----------------------------------------\n\nTITLE: Basic Cargo Install Command Syntax\nDESCRIPTION: Shows the different syntaxes for the cargo install command, including installing from crates.io, local path, Git repository, or listing installed packages.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-install.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install [options] crate[@version]…\ncargo install [options] --path path\ncargo install [options] --git url [crate…]\ncargo install [options] --list\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Cargo Build Command\nDESCRIPTION: Shows an example of how to get help specifically for the 'cargo build' command. This will display detailed information about the build command's usage and options.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-help.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncargo help build\n```\n\n----------------------------------------\n\nTITLE: Applying Kebab Case Serialization in Cargo Data Schemas\nDESCRIPTION: Using Serde's rename_all attribute to ensure fields are serialized in kebab-case format. This is recommended as a defensive practice in Cargo's data schemas.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/implementation/schemas.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[serde(rename_all = \"kebab-case\")]\n```\n\n----------------------------------------\n\nTITLE: Documenting Option with Multiline Block in Cargo (Markdown Template)\nDESCRIPTION: Template that demonstrates how to document an option with a description containing a code block that spans multiple lines.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/crates/mdman/tests/compare/includes/options-common.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--split-block`\"}}\nAn option where the description has a `block statement\nthat is split across multiple lines`\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Fetching All Dependencies with Cargo in Rust\nDESCRIPTION: This command fetches all dependencies for a Rust project using Cargo. It ensures that all git and registry dependencies are downloaded and locally available.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-fetch.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo fetch\n```\n\n----------------------------------------\n\nTITLE: Applying Edition-Specific Idioms with cargo fix\nDESCRIPTION: Shows how to use cargo fix with the --edition-idioms flag to update code to use idiomatic patterns for the current Rust edition.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-fix.txt#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncargo fix --edition-idioms\n```\n\n----------------------------------------\n\nTITLE: Showing Benchmark Output with nocapture\nDESCRIPTION: Command to run benchmarks while displaying their output, which is hidden by default. This is useful for debugging.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-bench.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo bench -- --nocapture\n```\n\n----------------------------------------\n\nTITLE: Schema Flexibility Attribute for Cargo Data Formats\nDESCRIPTION: The deny_unknown_fields attribute is deliberately not used in Cargo's data schemas to allow for format evolution and feature gating.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/contrib/src/implementation/schemas.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[serde(deny_unknown_fields)]\n```\n\n----------------------------------------\n\nTITLE: Custom Registry Package Info Query - Cargo CLI\nDESCRIPTION: Illustrates how to fetch package information from a custom registry instead of the default crates.io using the --registry flag.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-info.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo info serde --registry my-registry\n```\n\n----------------------------------------\n\nTITLE: Running cargo logout with a specific registry\nDESCRIPTION: Removes the token for a specific named registry. The registry name must be defined in Cargo config files.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-logout.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo logout --registry my-registry\n```\n\n----------------------------------------\n\nTITLE: Applying Compiler Suggestions with cargo fix\nDESCRIPTION: Shows how to use the basic cargo fix command to apply compiler-suggested fixes to the local Rust package.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-fix.txt#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo fix\n```\n\n----------------------------------------\n\nTITLE: Cargo Target Selection Option: --examples\nDESCRIPTION: Describes the --examples flag, which selects all example targets for the specified action.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/includes/options-targets.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{{#option \"`--examples`\" }}\n{{actionverb}} all example targets.\n{{/option}}\n```\n\n----------------------------------------\n\nTITLE: Running All Tests in a Rust Package\nDESCRIPTION: This command executes all unit and integration tests in the current Rust package without any filters.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-test.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Running All Tests in Current Package\nDESCRIPTION: Basic example of executing all unit and integration tests in the current Rust package using cargo test.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-test.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Getting Help for a Cargo Command with --help Flag\nDESCRIPTION: Demonstrates an alternative way to get help information by using the --help flag directly with a command.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-help.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --help\n```\n\n----------------------------------------\n\nTITLE: Installing a Package from Local Directory in Rust\nDESCRIPTION: This command installs or reinstalls the package located in the current directory using Cargo.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/cargo-install.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --path .\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Build Command in Rust\nDESCRIPTION: The basic syntax for running the cargo build command. This compiles the current package and its dependencies.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-build.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo build [options]\n```\n\n----------------------------------------\n\nTITLE: Custom Lockfile Path Example\nDESCRIPTION: Example showing the syntax for specifying a custom lockfile path using the --lockfile-path option.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/src/commands/cargo-metadata.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--lockfile-path /tmp/temporary-lockfile/Cargo.lock\n```\n\n----------------------------------------\n\nTITLE: Using cargo vendor command to vendor dependencies locally\nDESCRIPTION: The basic command to vendor all dependencies into a local \"vendor\" folder.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-vendor.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo vendor\n```\n\n----------------------------------------\n\nTITLE: Adding Development Dependency in Cargo\nDESCRIPTION: Shows how to add a development-only dependency (trybuild) to a Rust project.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-add.txt#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo add --dev trybuild\n```\n\n----------------------------------------\n\nTITLE: Basic Cargo Update Command\nDESCRIPTION: Updates all dependencies in the Cargo.lock file to their latest versions.\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-update.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo update\n```\n\n----------------------------------------\n\nTITLE: Cargo Check Basic Command\nDESCRIPTION: The basic syntax for running cargo check command with optional arguments\nSOURCE: https://github.com/rust-lang/cargo.git/blob/master/src/doc/man/generated_txt/cargo-check.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo check [options]\n```"
  }
]