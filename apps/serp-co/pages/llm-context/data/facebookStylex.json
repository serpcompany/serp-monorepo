[
  {
    "owner": "facebook",
    "repo": "stylex",
    "content": "TITLE: Example Usage of stylex.create\nDESCRIPTION: Example demonstrating how to use stylex.create to define both static and dynamic styles. The static 'root' style defines background color and padding properties, while the dynamic style generates a color based on RGB parameters.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/javascript/create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  root: {\n    backgroundColor: 'red',\n    padding: '1rem',\n    paddingInlineStart: '2rem',\n  },\n  dynamic: (r, g, b) => ({\n    color: `rgb(${r}, ${g}, ${b})`,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Styles with stylex.create in StyleX\nDESCRIPTION: Demonstrates how to create basic styles using the stylex.create function. This example defines two namespaces: 'base' for setting font size, line height, and color; and 'highlighted' for changing text color.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/04-styling-ui/01-defining-styles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  base: {\n    fontSize: 16,\n    lineHeight: 1.5,\n    color: 'rgb(60,60,60)',\n  },\n  highlighted: {\n    color: 'rebeccapurple',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Applying StyleX Styles in React Components\nDESCRIPTION: Demonstrates how to apply StyleX styles to React components using props() function, including conditional styling and prop-based style variants.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({ ... });\nconst colorStyles = stylex.create({ ... });\n\nfunction ReactDiv({ color, isActive, style }) {\n  return <div {...stylex.props(\n    styles.main,\n    // apply styles conditionally\n    isActive && styles.active,\n    // choose a style variant based on a prop\n    colorStyles[color],\n    // styles passed as props\n    style,\n  )} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Styles with StyleX in JavaScript\nDESCRIPTION: This snippet demonstrates how to import StyleX, create styles using the 'create' method, and apply those styles using the 'props' method. It shows the basic usage pattern for defining and combining styles in a React-like environment.\nSOURCE: https://github.com/facebook/stylex/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  root: {\n    padding: 10,\n  },\n  element: {\n    backgroundColor: 'red',\n  },\n});\n\nconst styleProps = stylex.props(styles.root, styles.element);\n```\n\n----------------------------------------\n\nTITLE: Applying StyleX Props to HTML Elements in React\nDESCRIPTION: Demonstrates how to use stylex.props() to apply styles to an HTML element in a React component.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/04-styling-ui/02-using-styles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<div {...stylex.props(styles.base)} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Button Variants with StyleX in React\nDESCRIPTION: Creates a button component with color and size variants using StyleX's create and props methods. The implementation allows selecting from predefined visual styles based on props passed to the component.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/06-recipes/02-variants.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  base: {\n    appearance: 'none',\n    borderWidth: 0,\n  },\n});\nconst colorVariants = stylex.create({\n  primary: {\n    backgroundColor: {\n      default: 'blue',\n      ':hover': 'darkblue',\n    },\n    color: 'white',\n  },\n  secondary: {\n    backgroundColor: {\n      default: 'gray',\n      ':hover': 'darkgray',\n    },\n    color: 'white',\n  },\n});\nconst sizeVariants = stylex.create({\n  small: {\n    fontSize: '1rem',\n    paddingBlock: 4,\n    paddingInline: 8\n  },\n  medium: {\n    fontSize: '1.2rem',\n    paddingBlock: 8,\n    paddingInline: 16\n  },\n});\n\ntype Props = {\n  color: keyof typeof colorVariants,\n  size: keyof typeof sizeVariants,\n  ...\n};\n\nfunction Button({ \n  color = 'primary',\n  size = 'small',\n  ...props\n}: Props) {\n  return (\n    <button \n      {...props}\n      {...stylex.props(\n        styles.base,\n        colorVariants[color],\n        sizeVariants[size],\n        props.style\n      )}\n    /\n  >);\n}\n\n// Usage\n<Button color=\"primary\" size=\"medium\">Primary</Button>\n<Button color=\"secondary\">Secondary</Button>\n```\n\n----------------------------------------\n\nTITLE: Using stylex.props in React Components\nDESCRIPTION: This example demonstrates how to use stylex.props in a React component. It shows creating styles with stylex.create and applying them to a div element using the spread operator.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/javascript/props.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  root: {\n    backgroundColor: 'red',\n    padding: '1rem',\n    paddingInlineStart: '2rem',\n  },\n  conditional: {\n    backgroundColor: 'blue',\n  },\n  dynamic: (opacity) => ({\n    opacity,\n  }),\n});\n\n<div\n  {...stylex.props(\n    styles.root,\n    condition && styles.conditional,\n    props.style,\n    styles.dynamic(state.opacity),\n  )}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Creating StyleX Theme Definition\nDESCRIPTION: Demonstrates how to create a theme by importing variable groups and using stylex.createTheme(). Shows implementation of responsive theming with dark mode support.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/05-theming/03-creating-themes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\nimport {colors, spacing} from './tokens.stylex';\n\n// A constant can be used to avoid repeating the media query\nconst DARK = '@media (prefers-color-scheme: dark)';\n\n// Dracula theme\nexport const dracula = stylex.createTheme(colors, {\n  primaryText: {default: 'purple', [DARK]: 'lightpurple'},\n  secondaryText: {default: 'pink', [DARK]: 'hotpink'},\n  accent: 'red',\n  background: {default: '#555', [DARK]: 'black'},\n  lineColor: 'red',\n});\n```\n\n----------------------------------------\n\nTITLE: Accepting and Applying StyleX Style Props in React Components\nDESCRIPTION: Illustrates how to accept style props in a React component and apply them using stylex.props(), allowing for customization of component styles.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/04-styling-ui/02-using-styles.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\n// Local Styles\nconst styles = stylex.create({\n  base: {\n    /*...*/\n  },\n});\n\nfunction CustomComponent({style}) {\n  return <div {...stylex.props(styles.base, style)} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Light and Dark Themes in StyleX using Theme Definitions\nDESCRIPTION: Demonstrates how to create separate light, dark, and system themes using stylex.createTheme(). The system theme includes media query support for automatic dark mode switching.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/06-recipes/06-light-dark-themes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst lightVars = {\n  primaryColor: 'black',\n  ...\n};\nexport const light = stylex.createTheme(vars, lightVars);\n\nconst darkVars = {\n  primaryColor: 'white',\n  ...\n};\nexport const dark = stylex.createTheme(vars, darkVars);\n\nconst systemVars = {\n  primaryColor: {\n    default: 'black',\n    '@media (prefers-color-scheme: dark)': 'white',\n  },\n  ...\n};\nexport const system = stylex.createTheme(vars, systemVars);\n```\n\n----------------------------------------\n\nTITLE: Advanced StyleX Style Creation with Media Queries\nDESCRIPTION: Example showing nested pseudo-classes and media queries in StyleX style definitions\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/stylex/README.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  root: {\n    width: '100%',\n    color: 'rgb(60,60,60)',\n    maxWidth: {\n      '@media (min-width: 800px)': '800px',\n    },\n  },\n  highlighted: {\n    color: 'yellow',\n    opacity: {\n      ':hover': '0.9',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Media Queries with stylex.defineVars in StyleX\nDESCRIPTION: This snippet shows how to define CSS variables with different values based on media queries, specifically for dark mode. It uses the stylex.defineVars function to create responsive color variables.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/05-theming/01-defining-variables.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\n// A constant can be used to avoid repeating the media query\nconst DARK = '@media (prefers-color-scheme: dark)';\n\nexport const colors = stylex.defineVars({\n  primaryText: {default: 'black', [DARK]: 'white'},\n  secondaryText: {default: '#333', [DARK]: '#ccc'},\n  accent: {default: 'blue', [DARK]: 'lightblue'},\n  background: {default: 'white', [DARK]: 'black'},\n  lineColor: {default: 'gray', [DARK]: 'lightgray'},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Basic Styles in StyleX with React\nDESCRIPTION: This snippet demonstrates the creation of basic styles using stylex.create and applying them using stylex.props. When styles are authored and consumed in the same file, StyleX compiles away these calls at build time, resulting in zero runtime overhead.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/02-thinking-in-stylex.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\nconst styles = stylex.create({\n  red: {color: 'red'},\n});\nlet a = stylex.props(styles.red);\n```\n\n----------------------------------------\n\nTITLE: Basic StyleX Style Creation\nDESCRIPTION: Example of creating basic styles using stylex.create() with simple CSS properties\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/stylex/README.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  root: {\n    width: '100%',\n    color: 'rgb(60,60,60)',\n  },\n  highlighted: {\n    color: 'yellow',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Queries in StyleX\nDESCRIPTION: Shows how to use media queries within StyleX styles by adding them as conditions within style values. This example demonstrates responsive width adjustments based on screen size.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/04-styling-ui/01-defining-styles.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  base: {\n    width: {\n      default: 800,\n      '@media (max-width: 800px)': '100%',\n      '@media (min-width: 1540px)': 1366,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Merging StyleX Styles in React\nDESCRIPTION: Shows how to define StyleX styles and merge them using stylex.props(), demonstrating the 'last style wins' principle.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/04-styling-ui/02-using-styles.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  base: {\n    fontSize: 16,\n    lineHeight: 1.5,\n    color: 'grey',\n  },\n  highlighted: {\n    color: 'rebeccapurple',\n  },\n});\n\n<div {...stylex.props(styles.base, styles.highlighted)} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Creation and Application with StyleX in React\nDESCRIPTION: Example demonstrating how to create a theme by overriding color variables and apply it to a React component hierarchy. The theme is created using stylex.createTheme and applied using stylex.props.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/javascript/createTheme.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\nimport { colors } from './vars.stylex.js';\n\nconst theme = stylex.createTheme(colors, {\n  accentColor: 'red',\n  backgroundColor: 'gray',\n  lineColor: 'purple',\n  textPrimaryColor: 'black',\n  textSecondaryColor: 'brown',\n});\n\nfunction App() {\n  return (\n    <div {...stylex.props(theme /* , ... */)}>\n      <ContentToBeThemed />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Pseudo-classes for Button States in StyleX\nDESCRIPTION: Demonstrates how to add pseudo-class states to a button by replacing a simple color value with an object containing different states (default, hover, active).\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/04-styling-ui/01-defining-styles.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  button: {\n    backgroundColor: {\n      default: 'lightblue',\n      ':hover': 'blue',\n      ':active': 'darkblue',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Working with Pseudo-elements in StyleX\nDESCRIPTION: Shows how to target pseudo-elements like ::placeholder in StyleX by defining them as top-level keys within a namespace. Also demonstrates combining pseudo-elements with pseudo-classes.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/04-styling-ui/01-defining-styles.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  input: {\n    // pseudo-element\n    '::placeholder': {\n      color: '#999',\n    },\n    color: {\n      default: '#333',\n      // pseudo-class\n      ':invalid': 'red',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Passing StyleX Styles as Props in React\nDESCRIPTION: Shows how to pass StyleX styles as props to child components, allowing for style overrides and composition.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/04-styling-ui/02-using-styles.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<CustomComponent style={styles.base} />\n\n<CustomComponent style={[styles.base, isHighlighted && styles.highlighted]} />\n```\n\n----------------------------------------\n\nTITLE: Applying StyleX Theme to Components\nDESCRIPTION: Shows how to apply a theme to React components using stylex.props(), combining theme styles with component-specific styles.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/05-theming/03-creating-themes.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\nimport {colors, spacing} from '../tokens.stylex';\nimport {dracula} from '../themes';\n\nconst styles = stylex.create({\n  container: {\n    color: colors.primaryText,\n    backgroundColor: colors.background,\n    padding: spacing.medium,\n  },\n});\n\n<div {...stylex.props(dracula, styles.container)}>{children}</div>;\n```\n\n----------------------------------------\n\nTITLE: Using stylex.firstThatWorks in JavaScript for CSS Fallbacks\nDESCRIPTION: This example demonstrates how to use stylex.firstThatWorks to define fallback values for the 'position' property in a StyleX style object. It provides multiple options for browser compatibility.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/javascript/firstThatWorks.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  header: {\n    position: stylex.firstThatWorks('sticky', '-webkit-sticky', 'fixed'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing StyleX Style Variants in React\nDESCRIPTION: Demonstrates how to define and use style variants with StyleX, allowing dynamic style selection based on props.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/04-styling-ui/02-using-styles.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  violet: {\n    backgroundColor: {\n      default: 'blueviolet',\n      ':hover': 'darkviolet',\n    },\n    color: 'white',\n  },\n  gray: {\n    backgroundColor: {\n      default: 'gainsboro',\n      ':hover': 'lightgray',\n    },\n  },\n  // ... more variants here ...\n});\n\nfunction Button({variant, ...props}) {\n  return <button {...props} {...stylex.props(styles[variant])} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Variables with stylex.defineVars in StyleX\nDESCRIPTION: This snippet demonstrates how to define a group of CSS variables using the stylex.defineVars function. It sets up various design tokens like colors, border radius, and typography.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/05-theming/01-defining-variables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nexport const tokens = stylex.defineVars({\n  primaryText: 'black',\n  secondaryText: '#333',\n  accent: 'blue',\n  background: 'white',\n  lineColor: 'gray',\n  borderRadius: '4px',\n  fontFamily: 'system-ui, sans-serif',\n  fontSize: '16px',\n});\n```\n\n----------------------------------------\n\nTITLE: Using StyleX Variables in Component Styles\nDESCRIPTION: This example shows how to import StyleX variables from a tokens file and use them in component styles. It demonstrates the correct import pattern and how to reference variables in stylex.create.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/05-theming/02-using-variables.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\nimport {colors, spacing} from '../tokens.stylex';\n\nconst styles = stylex.create({\n  container: {\n    color: colors.primaryText,\n    backgroundColor: colors.background,\n    padding: spacing.medium,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Fallback Styles with firstThatWorks in StyleX\nDESCRIPTION: Shows how to implement CSS fallback styles in StyleX using the firstThatWorks function. This example provides fallback position values for browsers with varying levels of support.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/04-styling-ui/01-defining-styles.mdx#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  header: {\n    position: stylex.firstThatWorks('sticky', '-webkit-sticky', 'fixed'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Button Styles in StyleX\nDESCRIPTION: Shows how to create a simple button style with a lightblue background color using the stylex.create function.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/04-styling-ui/01-defining-styles.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  button: {\n    backgroundColor: 'lightblue',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Building a Sidebar Component with StyleX and React Context\nDESCRIPTION: This code creates a Sidebar component that uses the SidebarContext to determine its state and applies conditional styles using StyleX. It demonstrates how to use context to drive style application.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/06-recipes/01-context-driven-styles.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useContext } from 'react';\nimport * as stylex from '@stylexjs/stylex';\nimport { SidebarContext } from './SidebarContext';\n\nexport default function Sidebar({ children }) {\n  const isOpen = useContext(SidebarContext);\n\n  return (\n    <div {...stylex.props(styles.base, isOpen ? styles.open : styles.closed)}>\n      {children}\n    </div>\n  );\n}\n\nconst styles = stylex.create({\n  base: {...},\n  open: {\n    width: 250,\n  },\n  closed: {\n    width: 50,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Styles with Functions in StyleX\nDESCRIPTION: Shows how to create dynamic styles in StyleX by defining styles as a function instead of an object literal. This approach allows passing runtime values as parameters to generate styles with CSS variables.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/04-styling-ui/01-defining-styles.mdx#2025-04-17_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  // Function arguments must be simple identifiers\n  // -- No destructuring or default values\n  bar: (height) => ({\n    height,\n    // The function body must be an object literal\n    // -- { return {} } is not allowed\n  }),\n});\n\nfunction MyComponent() {\n  // The value of `height` cannot be known at compile time.\n  const [height, setHeight] = useState(10);\n\n  return <div {...stylex.props(styles.bar(height))} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Style Props with StyleX in TypeScript\nDESCRIPTION: Shows how to use TypeScript to define constraints on style props. This example demonstrates typing a component to only accept specific style properties, providing type safety for style customization.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/02-thinking-in-stylex.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport type {StyleXStyles} from '@stylexjs/stylex';\n\ntype Props = {\n  //...\n  style?: StyleXStyles<{color?: string; backgroundColor?: string}>;\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional StyleX Styles in React\nDESCRIPTION: Illustrates how to apply StyleX styles conditionally using JavaScript expressions within stylex.props().\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/04-styling-ui/02-using-styles.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<div\n  {...stylex.props(\n    styles.base,\n    props.isHighlighted && styles.highlighted,\n    isActive ? styles.active : styles.inactive,\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Compound Variants with Disabled State in StyleX\nDESCRIPTION: Extends the basic button component to handle a disabled state using StyleX's deterministic style merging. When the disabled prop is true, disabled styles override the color variants.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/06-recipes/02-variants.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  base: {...},\n  disabled: {\n    backgroundColor: 'grey',\n    color: 'rgb(204, 204, 204)',\n    cursor: 'not-allowed',\n  },\n});\nconst colorVariants = stylex.create({\n  primary: {\n    backgroundColor: {\n      default: 'blue',\n      ':hover': 'darkblue',\n    },\n    color: 'white',\n  },\n  secondary: {\n    backgroundColor: {\n      default: 'gray',\n      ':hover': 'darkgray',\n    },\n    color: 'white',\n  },\n});\nconst sizeVariants = stylex.create({...});\n\ntype Props = {\n  color?: keyof typeof colorVariants,\n  size?: keyof typeof sizeVariants,\n  disabled?: boolean,\n  ...\n};\n\nfunction Button({ \n  color = 'primary',\n  size = 'small',\n  disabled = false,\n  ...props,\n}: Props) {\n  return (\n    <button \n      {...props}\n      {...stylex.props(\n        styles.base,\n        colorVariants[color],\n        sizeVariants[size],\n        disabled && styles.disabled,\n        props.style\n      )}\n    />\n  );\n}\n\n// Usage\n<Button color=\"primary\" size=\"medium\">Primary</Button>\n<Button color=\"secondary\">Secondary</Button>\n```\n\n----------------------------------------\n\nTITLE: Controlling Color Scheme with StyleX Styles\nDESCRIPTION: Demonstrates how to control the color scheme using the color-scheme CSS property with StyleX styles and dynamic application of themes.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/06-recipes/06-light-dark-themes.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst styles = stylex.create({\n  light: {\n    colorScheme: 'light',\n  },\n  dark: {\n    colorScheme: 'dark',\n  },\n  system: {\n    colorScheme: 'light dark',\n  },\n});\n\n<div {...stylex.props(styles[colorScheme])}>\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Constrained StyleXStyles Type in TypeScript for React Props\nDESCRIPTION: This snippet demonstrates how to use StyleXStyles<> to define a constrained style prop in a React component. It specifies allowed values for color, padding, and various border properties.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/types/StyleXStyles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {StyleXStyles} from '@stylexjs/stylex';\n\ntype Props = {\n  // ...\n  style?: StyleXStyles<{\n    color?: 'red' | 'blue' | 'green';\n    padding?: 0 | 4 | 8 | 16 | 32;\n    backgroundColor?: string;\n    borderColor?: string;\n    borderTopColor?: string;\n    borderEndColor?: string;\n    borderBottomColor?: string;\n    borderStartColor?: string;\n  }>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining StyleX Variables with Dark Mode Support\nDESCRIPTION: This snippet demonstrates how to define StyleX variables for colors and spacing in a dedicated file. It includes a technique for implementing dark mode using media queries and the stylex.defineVars API.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/05-theming/02-using-variables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\n// A constant can be used to avoid repeating the media query\nconst DARK = '@media (prefers-color-scheme: dark)';\n\nexport const colors = stylex.defineVars({\n  primaryText: {default: 'black', [DARK]: 'white'},\n  secondaryText: {default: '#333', [DARK]: '#ccc'},\n  accent: {default: 'blue', [DARK]: 'lightblue'},\n  background: {default: 'white', [DARK]: 'black'},\n  lineColor: {default: 'gray', [DARK]: 'lightgray'},\n});\n\nexport const spacing = stylex.defineVars({\n  none: '0px',\n  xsmall: '4px',\n  small: '8px',\n  medium: '12px',\n  large: '20px',\n  xlarge: '32px',\n  xxlarge: '48px',\n  xxxlarge: '96px',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Keyframe Animations in StyleX\nDESCRIPTION: Demonstrates how to define and use keyframe animations in StyleX using the stylex.keyframes function. This example creates a fade-in animation with opacity transitions.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/04-styling-ui/01-defining-styles.mdx#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst fadeIn = stylex.keyframes({\n  from: {opacity: 0},\n  to: {opacity: 1},\n});\n\nconst styles = stylex.create({\n  base: {\n    animationName: fadeIn,\n    animationDuration: '1s',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Component Style Composition\nDESCRIPTION: Example showing how to compose styles in nested components with props passing\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/stylex/README.md#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst styles = stylex.create({\n  internalRoot: {\n    padding: 10,\n  },\n  exportedRoot: {\n    position: 'relative',\n  },\n});\n\nfunction InternalComponent(props) {\n  return (\n    <div {...props} {...stylex.props(styles.internalRoot, props.style)} />\n  );\n}\n\nexport function ExportedComponent(props) {\n  return <InternalComponent style={[styles.exportedRoot, props.style]} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fallback Values for Variables in StyleX (TSX)\nDESCRIPTION: Demonstrates how to use the stylex.firstThatWorks API to provide fallback values for variables defined with stylex.defineVars. This allows for more robust styling when working with themes or dynamic variables.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/blog/2024-04-16-Release-v0.6.1.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\nimport {colors} from './tokens.stylex';\n\nconst styles = stylex.create({\n  container: {\n    color: stylex.firstThatWorks(colors.primary, 'black'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic StyleX Type Usage in TypeScript\nDESCRIPTION: Demonstrates basic usage of StyleXStyles type for accepting arbitrary StyleX styles in a React component with TypeScript.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/06-static-types.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {StyleXStyles} from '@stylexjs/stylex';\nimport * as stylex from '@stylexjs/stylex';\n\ntype Props = {\n  ...\n  style?: StyleXStyles,\n};\n\nfunction MyComponent({style, ...otherProps}: Props) {\n  return (\n    <div\n      {...stylex.props(localStyles.foo, localStyles.bar, style)}\n    >\n      {/* ... */}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Conditional Variable Values in Parent Component\nDESCRIPTION: This snippet demonstrates how to set conditional values for a StyleX variable within a parent component. The variable changes from black to blue when the parent is hovered, affecting child components that use this variable.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/06-recipes/03-descendant styles.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\nimport { vars } from './variables.stylex';\n\nconst styles = stylex.create({\n  parent: {\n    [vars.childColor]: {\n      default: 'black',\n      ':hover': 'blue',\n    },\n  },\n});\n\nfunction ParentWithHover({children}) {\n  return (\n    <div {...stylex.props(styles.parent)}>\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying StyleX Themes in React Components\nDESCRIPTION: Shows how to create themes using stylex.createTheme and apply them to React components with stylex.props. Demonstrates the exclusive theme behavior where themes override rather than merge.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/blog/2024-11-01-Release-v0.9.3.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\nimport {varGroup} from './tokens.stylex.ts';\n\nconst red = stylex.createTheme(varGroup, {\n  primary: 'red',\n});\n\nconst blue = stylex.createTheme(varGroup, {\n  secondary: 'blue',\n});\n\nconst styles = stylex.create({\n  primary: {color: varGroup.primary},\n  secondary: {color: varGroup.secondary},\n});\n\nfunction App() {\n  return (\n    <div {...stylex.props(red)}>\n      <div {...stylex.props(blue)}>\n        <span {...stylex.props(styles.primary)}>Hello </span>\n        <span {...stylex.props(styles.secondary)}>World!</span>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Keyframes Animation in StyleX\nDESCRIPTION: Example of creating a pulse animation using stylex.keyframes and applying it to a style object. The keyframes are defined and used in the same file.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/javascript/keyframes.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst pulse = stylex.keyframes({\n  '0%': {transform: 'scale(1)'},\n  '50%': {transform: 'scale(1.1)'},\n  '100%': {transform: 'scale(1)'},\n});\n\nconst styles = stylex.create({\n  pulse: {\n    animationName: pulse,\n    animationDuration: '1s',\n    animationIterationCount: 'infinite',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Keyframes Animations with StyleX\nDESCRIPTION: Example of creating multiple keyframes animations in a separate file using stylex.keyframes and exporting them as variables using stylex.defineVars for reuse across components.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/javascript/keyframes.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst pulse = stylex.keyframes({\n  '0%': {transform: 'scale(1)'},\n  '50%': {transform: 'scale(1.1)'},\n  '100%': {transform: 'scale(1)'},\n});\n\nconst fadeIn = stylex.keyframes({\n  '0%': {opacity: 0},\n  '100%': {opacity: 1},\n});\n\nconst fadeOut = stylex.keyframes({\n  '0%': {opacity: 1},\n  '100%': {opacity: 0},\n});\n\nexport const animations = stylex.defineVars({\n  pulse,\n  fadeIn,\n  fadeOut,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Merging StyleX Themes in TypeScript\nDESCRIPTION: This snippet demonstrates how to create individual themes and then merge them using object spread syntax in StyleX. It shows the creation of 'themeBlue', 'themeBig', and a combined 'themeBigBlue' theme.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/06-recipes/05-merge-themes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\nimport { vars } from './variables.stylex';\n\nconst themeBlueVars = {\n  backgroundColor: 'blue',\n};\nconst themeBlue = stylex.createTheme(vars, themeBlueVars);\n\nconst themeBigVars = {\n  size: '128px',\n};\nconst themeBig = stylex.createTheme(vars, themeBigVars);\n\nconst themeBigBlueVars = {...themeBlueVars, ...themeBigVars};\nconst themeBigBlue = stylex.createTheme(vars, themeBigBlueVars);\n```\n\n----------------------------------------\n\nTITLE: Defining StyleX Variable Function Type\nDESCRIPTION: TypeScript type definition for the stylex.defineVars function that creates global CSS Custom Properties.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/javascript/defineVars.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defineVars<Styles extends {[key: string]: Value}>(\n  styles: Styles,\n): Vars<{[key in keyof Styles]: string}>;\n```\n\n----------------------------------------\n\nTITLE: StyleX createTheme Function Signature in TypeScript\nDESCRIPTION: The function signature for createTheme, which takes a variable set and an object of overrides to create a StyleXStyles object that can be applied to components.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/javascript/createTheme.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createTheme(\n  vars: Vars,\n  overrides: {\n    [key: keyof Vars]: string;\n  },\n): StyleXStyles;\n```\n\n----------------------------------------\n\nTITLE: Unsetting StyleX Styles in React\nDESCRIPTION: Demonstrates how to unset or remove previously applied styles using StyleX by setting the value to null.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/04-styling-ui/02-using-styles.mdx#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  base: {\n    color: null,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Explicit Variant Definitions for Different States in StyleX\nDESCRIPTION: Advanced implementation using separate style definitions for enabled and disabled states. This approach provides more explicit control over styles applied under different conditions by selecting the appropriate variant object.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/06-recipes/02-variants.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  base: {...},\n});\nconst colorVariantsEnabled = stylex.create({\n  primary: {\n    backgroundColor: {\n      default: 'blue',\n      ':hover': 'darkblue',\n    },\n    color: 'white',\n  },\n  secondary: {\n    backgroundColor: {\n      default: 'gray',\n      ':hover': 'darkgray',\n    },\n    color: 'white',\n  },\n});\nconst colorVariantsDisabled = stylex.create({\n  primary: {\n    backgroundColor: 'blue',\n    color: 'white',\n  },\n  secondary: {\n    backgroundColor: 'gray',\n    color: 'white',\n  },\n});\nconst sizeVariants = stylex.create({...});\n\ntype Props = {\n  color?: keyof typeof colorVariants,\n  size?: keyof typeof sizeVariants,\n  disabled?: boolean,\n  ...\n};\n\nfunction Button({ \n  color = 'primary',\n  size = 'small',\n  disabled = false,\n  ...props,\n}: Props) {\n  const colorVariants = disabled \n    ? colorVariantsDisabled\n    : colorVariantsEnabled;\n\n  return (\n    <button \n      {...props}\n      {...stylex.props(\n        styles.base,\n        colorVariants[color],\n        sizeVariants[size],\n        props.style\n      )}\n    />\n  );\n}\n\n// Usage\n<Button color=\"primary\" size=\"medium\">Primary</Button>\n<Button color=\"secondary\">Secondary</Button>\n```\n\n----------------------------------------\n\nTITLE: Defining StyleX Variables with defineVars in TypeScript\nDESCRIPTION: Demonstrates how to define a variable group using stylex.defineVars to create theme tokens for primary and secondary colors.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/blog/2024-11-01-Release-v0.9.3.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// tokens.stylex.ts\nimport * as stylex from '@stylexjs/stylex';\n\nexport const varGroup = stylex.defineVars({\n  primary: 'black',\n  secondary: 'grey',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic StyleX Styles\nDESCRIPTION: Demonstrates how to define basic styles using StyleX's create() API with a root element configuration.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  root: {\n    width: '100%',\n    maxWidth: 800,\n    minHeight: 40,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Media Queries and Pseudo-classes in StyleX\nDESCRIPTION: Demonstrates how to combine media queries with pseudo-selectors by nesting conditions more than one level deep. Shows how to handle hover effects with media query conditions.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/04-styling-ui/01-defining-styles.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  button: {\n    color: {\n      default: 'var(--blue-link)',\n      ':hover': {\n        default: null,\n        '@media (hover: hover)': 'scale(1.1)',\n      },\n      ':active': 'scale(0.9)',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining StyleX Variables for Descendant Styling\nDESCRIPTION: This snippet shows how to define CSS variables using StyleX's defineVars method. The variable 'childColor' is created which will be used to control the text color of child elements.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/06-recipes/03-descendant styles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// variables.stylex.ts\nimport * as stylex from '@stylexjs/stylex';\n\nexport const vars = stylex.defineVars({\n  childColor: 'black',\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Style Application\nDESCRIPTION: Example of conditionally applying styles using JavaScript logic\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/stylex/README.md#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<div {...stylex.props(styles.root, isHighlighted && styles.highlighted)} />\n```\n\n----------------------------------------\n\nTITLE: Adapting stylex.props for Non-React Frameworks\nDESCRIPTION: This function adapts the output of stylex.props for frameworks that expect 'class' instead of 'className' and a string for 'style' instead of an object. It's useful for Solid, Svelte, Qwik, and Vue.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/javascript/props.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function attrs({ className, 'data-style-src': dataStyleSrc, style }) {\n  const result = {};\n  // Convert className to class\n  if (className != null && className !== '') {\n    result.class = className;\n  }\n  // Convert style object to string\n  if (style != null && Object.keys(style).length > 0) {\n    result.style = Object.keys(style)\n      .map((key) => `${key}:${style[key]};`)\n      .join('');\n  }\n  if (dataStyleSrc != null && dataStyleSrc !== '') {\n    result['data-style-src'] = dataStyleSrc;\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of stylex.defineVars in StyleX\nDESCRIPTION: This snippet illustrates the correct way to define and export variables using stylex.defineVars. It shows two valid examples of named exports for StyleX variables.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/05-theming/01-defining-variables.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// ✅ - Named export\nexport const colors = stylex.defineVars({\n  /* ... */\n});\n\nconst sizeVars = { ... };\n// ✅ - Another Named export\nexport const sizes = stylex.defineVars(sizeVars);\n```\n\n----------------------------------------\n\nTITLE: Using StyleXStylesWithout to exclude layout properties in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the StyleXStylesWithout utility type to create a style prop type that disallows layout-affecting properties. The type effectively creates a subset of StyleX properties by explicitly excluding position, dimension, margin, padding, border, and overflow properties.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/types/StyleXStylesWithout.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {StyleXStylesWithout} from '@stylexjs/stylex';\n\ntype Props = {\n  // ...\n  style?: StyleXStylesWithout<{\n    position: unknown,\n    display: unknown,\n    top: unknown,\n    start: unknown,\n    end: unknown,\n    bottom: unknown,\n    border: unknown,\n    borderWidth: unknown,\n    borderBottomWidth: unknown,\n    borderEndWidth: unknown,\n    borderStartWidth: unknown,\n    borderTopWidth: unknown,\n    margin: unknown,\n    marginBottom: unknown,\n    marginEnd: unknown,\n    marginStart: unknown,\n    marginTop: unknown,\n    padding: unknown,\n    paddingBottom: unknown,\n    paddingEnd: unknown,\n    paddingStart: unknown,\n    paddingTop: unknown,\n    width: unknown,\n    height: unknown,\n    flexBasis: unknown,\n    overflow: unknown,\n    overflowX: unknown,\n    overflowY: unknown,\n  }>,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Constrained Static Styles in StyleX with TypeScript\nDESCRIPTION: Example showing how to use StaticStyles type to create strictly typed style props with specific allowed values for CSS properties. The type ensures only static styles are accepted and validates against a predefined set of property values.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/types/StaticStyles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {StaticStyles} from '@stylexjs/stylex';\n\ntype Props = {\n  // ...\n  style?: StaticStyles<{\n    color?: 'red' | 'blue' | 'green';\n    padding?: 0 | 4 | 8 | 16 | 32;\n    backgroundColor?: string;\n    borderColor?: string;\n    borderTopColor?: string;\n    borderEndColor?: string;\n    borderBottomColor?: string;\n    borderStartColor?: string;\n  }>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Global StyleX Variables\nDESCRIPTION: Example of defining global color variables using stylex.defineVars in a dedicated .stylex.js file.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/javascript/defineVars.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nexport const colors = stylex.defineVars({\n  accent: 'blue',\n  background: 'white',\n  line: 'gray',\n  textPrimary: 'black',\n  textSecondary: '#333',\n});\n```\n\n----------------------------------------\n\nTITLE: StyleX Theme Creation with Types\nDESCRIPTION: Example showing how to create a theme while maintaining type safety for variables.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/05-theming/04-variable-types.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\nimport {tokens} from './tokens.stylex.js';\n\nexport const highContrast = stylex.createTheme(tokens, {\n  primaryText: stylex.types.color('black'),\n  secondaryText: stylex.types.color('#222'),\n  borderRadius: stylex.types.length('8px'),\n  angle: stylex.types.angle('0deg'),\n  int: stylex.types.integer(4),\n});\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Styles with TypeScript and StyleX\nDESCRIPTION: Demonstrates how to use the StyleXStylesWithout type to prevent certain styles from being accepted as props. This example disallows all margin-related properties while allowing other styles.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/02-thinking-in-stylex.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport type {StyleXStylesWithout} from '@stylexjs/stylex';\n\ntype Props = {\n  //...\n  style?: StyleXStylesWithout<{\n    margin: unknown;\n    marginBlock: unknown;\n    marginInline: unknown;\n    marginTop: unknown;\n    marginBottom: unknown;\n    marginLeft: unknown;\n    marginRight: unknown;\n    marginBlockStart: unknown;\n    marginBlockEnd: unknown;\n    marginInlineStart: unknown;\n    marginInlineEnd: unknown;\n  }>;\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Parent Component with StyleX Sidebar and Context\nDESCRIPTION: This snippet shows how to use the Sidebar component within a parent App component. It manages the sidebar's state using React's useState hook and provides the state to child components through SidebarContext.Provider.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/06-recipes/01-context-driven-styles.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport SidebarContext from './SidebarContext';\nimport Sidebar from './Sidebar';\n\nexport default function App() {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  return (\n    <SidebarContext.Provider value={isSidebarOpen}>\n      <button onClick={() => setIsSidebarOpen(open => !open)}>\n        Toggle Sidebar\n      </button>\n      <Sidebar>\n        <p>Sidebar Content</p>\n      </Sidebar>\n    </SidebarContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Typed StyleX Variable Definition\nDESCRIPTION: Example showing variable definitions with explicit type assignments using stylex.types functions.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/05-theming/04-variable-types.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nexport const tokens = stylex.defineVars({\n  primaryText: stylex.types.color('black'),\n  secondaryText: stylex.types.color('#333'),\n  borderRadius: stylex.types.length('4px'),\n  angle: stylex.types.angle('0deg'),\n  int: stylex.types.integer(2),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Themes with Constrained VarGroup in StyleX\nDESCRIPTION: Illustrates how themes can be created using the constrained VarGroup, ensuring type safety for variable values.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/types/VarGroup.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\nimport {vars} from './vars.stylex';\n\nexport const theme1 = stylex.createTheme(vars, {\n  color: 'red', // OK\n  backgroundColor: 'blue', // OK\n});\n\nexport const theme2 = stylex.createTheme(vars, {\n  // Error: 'orange' is not assignable to 'red' | 'blue' | 'green' | 'yellow'\n  color: 'orange', \n});\n```\n\n----------------------------------------\n\nTITLE: Composing Styles Across File Boundaries in StyleX\nDESCRIPTION: Demonstrates how StyleX handles style composition across file boundaries, including passing styles as props. This pattern requires a small runtime cost but enables powerful style compositions.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/02-thinking-in-stylex.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  foo: {\n    color: 'red',\n  },\n  bar: {\n    backgroundColor: 'blue',\n  },\n});\n\nfunction MyComponent({style}) {\n  return <div {...stylex.props(styles.foo, styles.bar, style)} />;\n}\n```\n\n----------------------------------------\n\nTITLE: StyleX Variable Definition with Type Specifications\nDESCRIPTION: Example demonstrating how to define variables with explicit type specifications using stylex.types.* helpers.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/javascript/types.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nexport const colors = stylex.defineVars({\n  accent: stylex.types.color({\n    default: 'blue',\n    '@media (prefers-color-scheme: dark)': 'lightblue',\n  }),\n  sm: stylex.types.length('4px'),\n});\n```\n\n----------------------------------------\n\nTITLE: Fallback Styles Definition\nDESCRIPTION: Example of defining fallback styles using stylex.firstThatWorks()\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/stylex/README.md#2025-04-17_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  header: {\n    position: stylex.firstThatWorks('sticky', '-webkit-sticky', 'fixed'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Theme Type with Unique Identity in StyleX\nDESCRIPTION: Advanced implementation showing how to create a theme with unique type identity using a symbol tag for strict type checking.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/types/Theme.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\nimport type {Theme} from '@stylexjs/stylex';\nimport {vars} from './vars.stylex';\n\ndeclare const Tag: unique symbol;\nexport const theme1: Theme<typeof vars, Tag> = stylex.createTheme(vars, {\n  color: 'red', // OK\n  backgroundColor: 'blue', // OK\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Context for StyleX Conditional Styling in React\nDESCRIPTION: This snippet creates a React context for managing the sidebar's open/closed state. It will be used to conditionally apply styles with StyleX.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/06-recipes/01-context-driven-styles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createContext } from 'react';\nimport * as stylex from '@stylexjs/stylex';\n\nexport default createContext(false);\n```\n\n----------------------------------------\n\nTITLE: Using stylex.firstThatWorks for property value fallbacks\nDESCRIPTION: This snippet demonstrates how to use the stylex.firstThatWorks function to provide fallback values for CSS properties like background-color. The function specifies the preferred value first, followed by fallback options that will be used if earlier options aren't supported.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/blog/2024-10-06-Release-v0.8.0.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst styles = stylex.create({\n  myClass: {\n    // as:\n    backgroundColor: stylex.firstThatWorks(\n      'oklab(0.5 0.5 0.5)',\n      '#808080',\n    ),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple StyleX Style Rules\nDESCRIPTION: Shows how to define multiple style rules including root styles, child styles, and color variant styles using multiple create() calls.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  root: {\n    width: '100%',\n    maxWidth: 800,\n    minHeight: 40,\n  },\n  child: {\n    backgroundColor: 'black',\n    marginBlock: '1rem',\n  },\n});\n\nconst colorStyles = stylex.create({\n  red: {\n    backgroundColor: 'red',\n    borderColor: 'darkred',\n  },\n  green: {\n    backgroundColor: 'lightgreen',\n    borderColor: 'darkgreen',\n  },\n});\n\nfunction ReactDiv({ color, isActive, style }) { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: Constraining VarGroup Values in StyleX\nDESCRIPTION: Shows how to explicitly use VarGroup to constrain the values of variables within themes.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/types/VarGroup.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\nimport type {VarGroup} from '@stylexjs/stylex';\n\nconst vars: VarGroup<{\n  color: 'red' | 'blue' | 'green' | 'yellow',\n  backgroundColor: 'red' | 'blue' | 'green' | 'yellow',\n}> = stylex.defineVars({\n  color: 'red',\n  backgroundColor: 'blue',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Theme Implementation in StyleX\nDESCRIPTION: Example showing how to create a theme using stylex.createTheme with variable group styling definitions.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/types/Theme.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {VarGroup} from '@stylexjs/stylex';\nimport * as stylex from '@stylexjs/stylex';\n\nimport {vars} from './vars.stylex';\n\nexport const theme: Theme<typeof vars> = stylex.createTheme(vars, {\n  color: 'red', // OK\n  backgroundColor: 'blue', // OK\n});\n```\n\n----------------------------------------\n\nTITLE: StyleX Create Function Type Definition\nDESCRIPTION: Type definition for the stylex.create function. It takes a map of style objects and returns compiled StyleX styles that map keys to class names. The function supports both static style objects and dynamic style functions.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/javascript/create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction create<T extends {[key: string]: RawStyles | (...any[]) => RawStyles}>(\n  styles: T,\n): {[Key in keyof T]: StyleXStyles<T[Key]>};\n```\n\n----------------------------------------\n\nTITLE: Defining VarGroup Type in TypeScript for StyleX\nDESCRIPTION: Defines the basic structure of the VarGroup type, which maps keys to references of CSS custom properties.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/types/VarGroup.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype VarGroup<Tokens extends {}>\n```\n\n----------------------------------------\n\nTITLE: Property Blocklist with StyleXStylesWithout in TypeScript\nDESCRIPTION: Demonstrates how to create a blocklist of disallowed style properties using StyleXStylesWithout type.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/06-static-types.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {StyleXStylesWithout} from '@stylexjs/stylex';\nimport * as stylex from '@stylexjs/stylex';\n\ntype NoLayout = StyleXStylesWithout<{\n  position: unknown,\n  display: unknown,\n  top: unknown,\n  start: unknown,\n  end: unknown,\n  bottom: unknown,\n  border: unknown,\n  borderWidth: unknown,\n  borderBottomWidth: unknown,\n  borderEndWidth: unknown,\n  borderStartWidth: unknown,\n  borderTopWidth: unknown,\n  margin: unknown,\n  marginBottom: unknown,\n  marginEnd: unknown,\n  marginStart: unknown,\n  marginTop: unknown,\n  padding: unknown,\n  paddingBottom: unknown,\n  paddingEnd: unknown,\n  paddingStart: unknown,\n  paddingTop: unknown,\n  width: unknown,\n  height: unknown,\n  flexBasis: unknown,\n  overflow: unknown,\n  overflowX: unknown,\n  overflowY: unknown,\n}>;\n\ntype Props = {\n  // ...\n  style?: NoLayout,\n};\n\nfunction MyComponent({style, ...}: Props) {\n  return (\n    <div\n      {...stylex.props(localStyles.foo, localStyles.bar, style)}\n    >\n      {/* ... */}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining stylex.props Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript definition of the stylex.props function. It takes StyleX styles as input and returns an object with className and style properties.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/javascript/props.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction props(styles: StyleXStyles | StyleXStyles[]): {\n  className: string;\n  style: {[key: string]: string};\n};\n```\n\n----------------------------------------\n\nTITLE: Animated Gradient Implementation\nDESCRIPTION: Example showing how to implement gradient animation using typed angle variables and keyframes.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/05-theming/04-variable-types.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\nimport {tokens} from './tokens.stylex';\n\nconst rotate = stylex.keyframes({\n  from: { [tokens.angle]: '0deg' },\n  to: { [tokens.angle]: '360deg' },\n});\n\nconst styles = stylex.create({\n  gradient: {\n    backgroundImage: `conic-gradient(from ${tokens.angle}, ...colors)`,\n    animationName: rotate,\n    animationDuration: '10s',\n    animationTimingFunction: 'linear',\n    animationIterationCount: 'infinite',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Animating Typed Variables with StyleX Keyframes (TSX)\nDESCRIPTION: Shows how to use stylex.keyframes to animate typed variables defined with stylex.types.*. This example demonstrates animating the angle of a conic gradient using a typed variable.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/blog/2024-04-16-Release-v0.6.1.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\nimport {typedTokens} from './tokens.stylex';\n\nconst rotate = stylex.keyframes({\n  from: { [typedTokens.angle]: '0deg' },\n  to: { [typedTokens.angle]: '360deg' },\n});\n\nconst styles = stylex.create({\n  gradient: {\n    backgroundImage: `conic-gradient(from ${tokens.angle}, ...colors)`,\n    animationName: rotate,\n    animationDuration: '10s',\n    animationTimingFunction: 'linear',\n    animationIterationCount: 'infinite',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for StyleX\nDESCRIPTION: Babel configuration for StyleX compiler with development, test environment settings and module resolution options\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/03-installation.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [\n    ...\n  ],\n  plugins: [\n    ...,\n    [\n      \"@stylexjs/babel-plugin\",\n      {\n        dev: process.env.NODE_ENV === \"development\",\n        test: process.env.NODE_ENV === \"test\",\n        runtimeInjection: false,\n        genConditionalClasses: true,\n        treeshakeCompensation: true,\n        unstable_moduleResolution: {\n          type: \"commonJS\",\n        },\n      },\n    ],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Style Priority Control\nDESCRIPTION: Example showing how to control style priority during merging\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/stylex/README.md#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<div {...stylex.props(props.style, styles.root)} />\n```\n\n----------------------------------------\n\nTITLE: Basic StyleX Type Usage in Flow\nDESCRIPTION: Shows how to use StyleXStyles type with Flow type system in a React component.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/06-static-types.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {StyleXStyles} from '@stylexjs/stylex';\nimport * as stylex from '@stylexjs/stylex';\n\ntype Props = $ReadOnly<{\n  ...\n  style?: StyleXStyles<>,\n}>;\n\nfunction MyComponent({style, ...otherProps}: Props): React.MixedElement {\n  return (\n    <div\n      {...stylex.props(localStyles.foo, localStyles.bar, style)}\n    >\n      {/* ... */}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced VarGroup Usage with Unique Type Identity in StyleX\nDESCRIPTION: Demonstrates how to use VarGroup with a unique symbol for nominal typing, allowing distinction between VarGroups with the same shape.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/types/VarGroup.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\nimport type {VarGroup} from '@stylexjs/stylex';\n\ntype Shape = {\n  color: string,\n  backgroundColor: string,\n};\n\ndeclare const BaseColors: unique symbol;\nexport const baseColors: VarGroup<Shape, typeof BaseColors> =\n  stylex.defineVars({\n    color: 'red',\n    backgroundColor: 'blue',\n  });\n\ndeclare const CardColors: unique symbol;\nexport const cardColors: VarGroup<Shape, typeof CardColors> =\n  stylex.defineVars({\n    color: 'red',\n    backgroundColor: 'blue',\n  });\n```\n\n----------------------------------------\n\nTITLE: Using StyleX Variables in Components\nDESCRIPTION: Demonstration of importing and using previously defined StyleX variables within component styles.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/javascript/defineVars.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\nimport { colors } from './vars.stylex.js';\n\nconst styles = stylex.create({\n  container: {\n    color: colors.textPrimary,\n    backgroundColor: colors.background,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using light-dark() CSS Function in StyleX\nDESCRIPTION: Shows how to use the modern light-dark() CSS function to simplify theme implementation by defining color variants directly in the variable definition.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/06-recipes/06-light-dark-themes.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const vars = stylex.defineVars({\n  primaryColor: 'light-dark(black, white)',\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: StyleX CSS Declaration\nDESCRIPTION: Required CSS declaration for StyleX integration that will be replaced with generated styles by the PostCSS plugin\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/03-installation.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@stylex;\n```\n\n----------------------------------------\n\nTITLE: Using stylex.firstThatWorks with CSS variables\nDESCRIPTION: This example shows how to use stylex.firstThatWorks to implement CSS variable fallbacks in StyleX. It provides a fallback hex color (#808080) if the CSS variable (--bg-color) is not defined, similar to the native CSS var() function with fallback value.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/blog/2024-10-06-Release-v0.8.0.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst styles = stylex.create({\n  myClass: {\n    // as:\n    backgroundColor: stylex.firstThatWorks(\n      'var(--bg-color)',\n      '#808080',\n    ),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Value-Constrained Styles in TypeScript\nDESCRIPTION: Shows how to limit both style properties and their possible values using TypeScript union types.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/06-static-types.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {StyleXStyles} from '@stylexjs/stylex';\n\ntype Props = {\n  ...\n  style?: StyleXStyles<{\n    marginTop: 0 | 4 | 8 | 16\n  }>,\n};\n```\n\n----------------------------------------\n\nTITLE: Compiled Output for Cross-File StyleX Styles\nDESCRIPTION: Shows how StyleX compiles styles that are shared across files. The stylex.create call is transformed into an object with class references, while stylex.props calls remain for runtime composition.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/02-thinking-in-stylex.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = {\n  foo: {\n    color: 'x1e2nbdu',\n    $$css: true,\n  },\n  bar: {\n    backgroundColor: 'x1t391ir',\n    $$css: true,\n  },\n};\n\nfunction MyComponent({style}) {\n  return <div {...stylex.props(styles.foo, styles.bar, style)} />;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.x1e2nbdu { color: red; }\n.x1t391ir { background-color: blue; }\n```\n\n----------------------------------------\n\nTITLE: Using VarGroup with StyleX defineVars Function\nDESCRIPTION: Demonstrates how to use stylex.defineVars to create a VarGroup object and infer its type.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/types/VarGroup.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nexport const vars = stylex.defineVars({\n  color: 'red',\n  backgroundColor: 'blue',\n});\n\nexport type Vars = typeof vars;\n/*\n  Vars = VarGroup<{\n    color: string,\n    backgroundColor: string,\n  }>\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining stylex.firstThatWorks Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for stylex.firstThatWorks. It takes an array of string or number values and returns one of those values.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/javascript/firstThatWorks.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction firstThatWorks<Values extends Array<string | number>>(\n  ...styles: Values\n): Values[number];\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables with Literal Names in StyleX\nDESCRIPTION: This snippet demonstrates the updated stylex.defineVars API that allows using literal CSS variable names that start with '--'. When used this way, StyleX preserves the exact variable name rather than generating unique ones, which is useful when variables need to be referenced in standalone CSS files.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/blog/2024-06-25-Release-v0.7.0.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst vars = stylex.defineVars({\n  '--primary-color': 'red',\n  '--secondary-color': 'blue',\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming StyleX Variables in Child Components\nDESCRIPTION: This snippet shows how a child component can consume the StyleX variable defined by its parent. The text color of the child element will change when the parent is hovered, using the value set in the parent component.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/06-recipes/03-descendant styles.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\nimport { vars } from './variables.stylex';\n\nconst styles = stylex.create({\n  child: {\n    color: vars.childColor,\n  }\n});\n\nfunction ParentWithHover() {\n  return (\n      <span {...stylex.props(styles.child)}><Icon />A Row</span>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Style Props Definition\nDESCRIPTION: Example of using StyleX TypeScript types for component props\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/stylex/README.md#2025-04-17_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\ntype Props = {\n  ...\n  style?: StyleXStyles<>,\n};\n\nfunction MyComponent({style, ...}: Props) {\n  return (\n    <div {...stylex.props(localStyles.foo, localStyles.bar, style)} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Adapted stylex.props in Non-React Frameworks\nDESCRIPTION: This snippet shows how to use the adapted attrs function with stylex.props in non-React frameworks like Solid, Svelte, Qwik, or Vue.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/javascript/props.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<div {...attrs(stylex.props(...styles))} />\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for StyleX\nDESCRIPTION: PostCSS configuration setup with StyleX plugin including file pattern matching and CSS layers option\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/03-installation.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    '@stylexjs/postcss-plugin': {\n      include: [\n        './**/*.{js,jsx,ts,tsx}',\n        // any other files that should be included\n        // this should include NPM dependencies that use StyleX\n      ],\n      useCSSLayers: true,\n    },\n    autoprefixer: {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining stylex.keyframes Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for stylex.keyframes, which takes a keyframes definition object and returns a string representing the keyframe name.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/javascript/keyframes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction keyframes(frames: {[key: string]: RawStyles}): string;\n```\n\n----------------------------------------\n\nTITLE: Importing StyleX CSS in Application Entry Point\nDESCRIPTION: JavaScript code showing how to import the StyleX CSS file into the application's main entry point to include the generated styles.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/postcss-plugin/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// src/index.js\nimport './stylex.css';\n```\n\n----------------------------------------\n\nTITLE: Using CSS with multi-value background-color fallbacks\nDESCRIPTION: This CSS example demonstrates how to provide fallback values for background-color, using both a modern color format (oklab) and a standard hex color. This approach ensures compatibility with browsers that don't support newer color formats.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/blog/2024-10-06-Release-v0.8.0.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Represent this */\n.my-class {\n  background-color: #808080;\n  background-color: oklab(0.5 0.5 0.5);\n}\n```\n\n----------------------------------------\n\nTITLE: Compiled Output for Local Styles in StyleX\nDESCRIPTION: Shows how StyleX compiles local styles into optimized JavaScript and CSS. The stylex.create and stylex.props calls are compiled away, leaving only the className reference with no runtime overhead.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/02-thinking-in-stylex.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nlet a = {className: 'x1e2nbdu'};\n```\n\nLANGUAGE: css\nCODE:\n```\n.x1e2nbdu { color: red; }\n```\n\n----------------------------------------\n\nTITLE: Basic StyleX Variable Definition\nDESCRIPTION: Example showing basic string variable definitions in StyleX without type specifications.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/05-theming/04-variable-types.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nexport const tokens = stylex.defineVars({\n  primaryText: 'black',\n  secondaryText: '#333',\n  borderRadius: '4px',\n  angle: '0deg',\n  int: '2',\n});\n```\n\n----------------------------------------\n\nTITLE: Atomic Style Generation Example\nDESCRIPTION: Example demonstrating how StyleX generates atomic CSS classes\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/stylex/README.md#2025-04-17_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst styles = stylex.create({\n  root: {\n    width: '100%',\n    color: 'red',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Typed Variables in StyleX (TSX)\nDESCRIPTION: Introduces the new stylex.types.* functions for defining CSS variables with specific types. This enables the generation of @property rules in CSS output, allowing for variable animation and other special use-cases.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/blog/2024-04-16-Release-v0.6.1.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nconst typedTokens = stylex.defineVars({\n  bgColor: stylex.types.color<string>({\n    default: 'cyan',\n    [DARK]: 'navy',\n  }),\n  cornerRadius: stylex.types.length<string | number>({\n    default: '4px',\n    '@media (max-width: 600px)': 0,\n  }),\n  translucent: stylex.types.number<number>(0.5),\n  angle: stylex.types.angle<string>('0deg'),\n  shortAnimation: stylex.types.time<string>('0.5s'),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Reset Theme in StyleX\nDESCRIPTION: Demonstrates how to create a reset theme that restores default variable values by passing an empty object to stylex.createTheme.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/blog/2024-11-01-Release-v0.9.3.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst reset = stylex.createTheme(varGroup, {});\n```\n\n----------------------------------------\n\nTITLE: Conditional Typed Variables\nDESCRIPTION: Example demonstrating how to use at-rules with typed variables for conditional styling.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/05-theming/04-variable-types.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nexport const colors = stylex.defineVars({\n  primaryText: stylex.types.color({default: 'black', [DARK]: 'white'}),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Babel transform with StyleX plugin\nDESCRIPTION: Demonstrates how to use Babel's transform function with the StyleX plugin to transform source code and extract injected styles from the metadata. The example shows getting both the transformed JavaScript code and the StyleX-generated CSS rules.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/babel-plugin/README.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = transformSync(sourceCode, {\n  filename: opts.filename,\n  parserOpts: { flow: { all: true } },\n  plugins: [stylexPlugin, opts],\n});\n\nconst transformedCode = result.code;\nconst injectedStyles = result.metadata.stylex;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Style Restrictions\nDESCRIPTION: Example of restricting specific style properties using TypeScript\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/stylex/README.md#2025-04-17_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\ntype Props = {\n  // ...\n  style?: StyleXStylesWithout<{\n    position: unknown;\n    display: unknown;\n  }>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for StyleX\nDESCRIPTION: Configuration for babel.config.js that sets up the StyleX babel plugin with necessary options for runtime injection, development mode, and module resolution settings.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/postcss-plugin/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport styleXPlugin from '@stylexjs/babel-plugin';\n\nconst config = {\n  plugins: [\n    [\n      styleXPlugin,\n      {\n        // Required for this plugin\n        runtimeInjection: false,\n        dev: true,\n        // Set this to true for snapshot testing\n        // default: false\n        test: false,\n        // Required for CSS variable support\n        unstable_moduleResolution: {\n          // type: 'commonJS' | 'haste'\n          // default: 'commonJS'\n          type: 'commonJS',\n          // The absolute path to the root directory of your project\n          rootDir: __dirname,\n        },\n      },\n    ],\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Aliases in StyleX Babel Plugin\nDESCRIPTION: The aliases option allows you to map directory paths to aliases for easier module imports. This configuration accepts an object where keys are alias patterns and values are the actual paths or arrays of paths.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/babel-plugin.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\naliases: {[key: string]: string | Array<string>} // Default: undefined\n```\n\n----------------------------------------\n\nTITLE: CSS example with variable and fallback value\nDESCRIPTION: This CSS snippet demonstrates the use of CSS custom properties (variables) with a fallback value. If the --bg-color variable is not defined in the current context, the hex color #808080 will be used instead.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/blog/2024-10-06-Release-v0.8.0.mdx#2025-04-17_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* Represent this */\n.my-class {\n  background-color: var(--bg-color, #808080);\n}\n```\n\n----------------------------------------\n\nTITLE: StyleX Plugin Option: useCSSLayers\nDESCRIPTION: Configuration option that switches StyleX from using :not(#\\#) to using @layers for CSS specificity handling when enabled.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/postcss-plugin/README.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nuseCSSLayers: boolean; // Default: false\n```\n\n----------------------------------------\n\nTITLE: StyleX CLI Configuration File Structure\nDESCRIPTION: Example JSON configuration file structure for StyleX CLI showing various options including input/output directories, experimental modules, bundle name, and watch mode settings.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/cli/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": \"./source\",\n  \"output\": \"./src\",\n  \"modules_EXPERIMENTAL\": [\"@stylexjs/open-props\"],\n  \"styleXBundleName\": \"stylex_bundle.css\",\n  \"watch\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Component Style Application\nDESCRIPTION: Example of applying StyleX styles to components using stylex.props()\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/stylex/README.md#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<div {...stylex.props(styles.root, styles.highlighted)} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Size Units in StyleX Babel Plugin\nDESCRIPTION: The useRemForFontSize option controls whether pixel values for fontSize should be converted to rem units, which is considered a best practice for allowing users to scale font sizes.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/babel-plugin.mdx#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nuseRemForFontSize: boolean // Default: false\n```\n\n----------------------------------------\n\nTITLE: Enabling @stylexjs/eslint-plugin in ESLint config\nDESCRIPTION: ESLint configuration to enable the @stylexjs plugin and its rules valid-styles and sort-keys.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/eslint-plugin/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"@stylexjs/valid-styles\": \"error\",\n    \"@stylexjs/sort-keys\": \"warn\"\n  },\n  \"plugins\": [\"@stylexjs\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Type in StyleX\nDESCRIPTION: Basic type definition for Theme that represents styles theming a set of variables in a VarGroup.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/types/Theme.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype Theme<T extends VarGroup<unknown, symbol>>\n```\n\n----------------------------------------\n\nTITLE: Example Configuration for @stylexjs/valid-styles Rule in JSON\nDESCRIPTION: JSON configuration example for the @stylexjs/valid-styles rule, demonstrating how to define property limits for mask properties, fontSize, and padding with specific error messages.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/eslint-plugin.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"@stylexjs/valid-styles\": [\n      \"error\",\n      {\n        \"propLimits\": {\n          \"mask+([a-zA-Z])\": {\n            \"limit\": null,\n            \"reason\": \"Use the `mask` shorthand property instead.\"\n          },\n          \"fontSize\": {\n            \"limit\": \"number\",\n            \"reason\": \"Only numeric font values are allowed\"\n          },\n          \"padding\": {\n            \"limit\": [0, 4, 8, 16, 32, 64],\n            \"reason\": \"Use a padding that conforms to the design system\"\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic StyleX CLI Usage Command\nDESCRIPTION: Basic command syntax for using the StyleX CLI to compile files from an input directory to an output directory.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/cli/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nstylex -i [input_directory] -o [output_directory]\n```\n\n----------------------------------------\n\nTITLE: Creating a Reset Theme in StyleX using TSX\nDESCRIPTION: This code snippet demonstrates how to create a reset theme in StyleX. It imports the necessary modules and a variables file, then uses stylex.createTheme with an empty object to create a theme that resets all variables to their default values.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/06-recipes/04-reset-themes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\nimport { vars } from './variables.stylex';\n\nexport const resetVars = stylex.createTheme(vars, {});\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for StyleX\nDESCRIPTION: Configuration for postcss.config.js that sets up the StyleX plugin with path inclusion settings and enables autoprefixer.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/postcss-plugin/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// postcss.config.js\nmodule.exports = {\n  plugins: {\n    '@stylexjs/postcss-plugin': {\n      include: ['src/**/*.{js,jsx,ts,tsx}'],\n    },\n    autoprefixer: {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Style Resolution Strategy in StyleX Babel Plugin\nDESCRIPTION: The styleResolution option defines how styles are merged. 'application-order' makes the last style win (like web inline styles), while 'property-specificity' makes more specific styles win (like React Native).\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/babel-plugin.mdx#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nstyleResolution: // Default: 'application-order'\n  | 'application-order'\n  | 'property-specificity'\n```\n\n----------------------------------------\n\nTITLE: Basic StyleX Variable Definition\nDESCRIPTION: Example showing basic variable definition in StyleX without type specifications.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/javascript/types.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as stylex from '@stylexjs/stylex';\n\nexport const colors = stylex.defineVars({\n  accent: {\n    default: 'blue',\n    '@media (prefers-color-scheme: dark)': 'lightblue',\n  },\n  sm: '4px',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Resolution in StyleX Babel Plugin\nDESCRIPTION: The unstable_moduleResolution option defines the strategy for resolving variables defined with stylex.defineVars(), required for using StyleX's theming APIs. Note that while theming APIs are stable, this configuration option may change.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/babel-plugin.mdx#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nunstable_moduleResolution: // Default: undefined\n  | {\n      // The module system to be used.\n      // Use this value when using `ESModules`.\n      type: 'commonJS',\n      // The absolute path to the root directory of your project.\n      // Only used as a fallback\n      rootDir?: string,\n      // Override `.stylex.js` with your own extension.\n      themeFileExtension?: string,\n    }\n  | {\n      // Use this when using the Haste module system\n      // Where all files are imported by filename rather\n      // than relative paths and all filenames must be unique.\n      type: 'haste',\n      // Override `.stylex.js` with your own extension.\n      themeFileExtension?: string,\n    }\n```\n\n----------------------------------------\n\nTITLE: StyleX Plugin useCSSLayers Option\nDESCRIPTION: Configuration option for enabling CSS layers instead of :not(#\\#) for handling CSS specificity.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/rollup-plugin/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nuseCSSLayers: boolean // Default: false\n```\n\n----------------------------------------\n\nTITLE: Enabling Conditional Classes Optimization in StyleX Babel Plugin\nDESCRIPTION: The genConditionalClasses option enables an experimental compile-time optimization that pre-computes stylex.props function calls with conditional styles when all possible styles are defined in the same file.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/babel-plugin.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngenConditionalClasses: boolean // Default: false\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of stylex.defineVars in StyleX\nDESCRIPTION: This snippet demonstrates incorrect ways to define and export variables using stylex.defineVars. It shows examples that violate the rules for defining StyleX variables.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/05-theming/01-defining-variables.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// ❌ - Only named exports are allowed\nexport default stylex.defineVars({\n  /* ... */\n});\n\n// ❌ - The variable must be exported directly\nconst x = stylex.defineVars({\n  /* ... */\n});\nexport const colors = x;\n\n// ❌ - The variables cannot be nested within another object\nexport const colors = {\n  foregrounds: stylex.defineVars({\n    /* ... */\n  }),\n  backgrounds: stylex.defineVars({\n    /* ... */\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating new media query syntax in StyleX\nDESCRIPTION: Example of the new recommended media query syntax in StyleX that uses an object with default and media query-specific values.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/eslint-plugin/README.md#2025-04-17_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst styles = stylex.create({\n  root: {\n    width: {\n      default: '100%',\n      '@media (min-width: 600px)': '50%',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Injection in StyleX Babel Plugin\nDESCRIPTION: The runtimeInjection option determines whether StyleX should generate code to inject styles at runtime. Useful during development but should be disabled in production.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/babel-plugin.mdx#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nruntimeInjection: boolean // Default: the value of `dev`\n```\n\n----------------------------------------\n\nTITLE: Demonstrating valid and invalid shorthand properties with StyleX's linting rules\nDESCRIPTION: This snippet shows examples of CSS shorthand properties that are disallowed by the new valid-shorthands ESLint rule, alongside examples of properly structured alternative properties that are considered valid. The rule enforces using more specific properties instead of multi-value shorthands.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/blog/2024-10-06-Release-v0.8.0.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst styles = stylex({\n  invalidShorthands: {\n    // border shorthands are entirely disallowed\n    // Use `borderWidth`, `borderStyle`, and `borderColor` instead\n    border: '1px solid black',\n    // Multiple values for different sides within the same shorthand are disallowed\n    borderWidth: '1px 2px 3px 4px',\n    margin: '10px 20px 30px',\n    padding: '10px 20px',\n  },\n  validShorthands: {\n    borderBottomWidth: 3,\n    borderColor: 'black',\n    borderInlineEndWidth: 2,\n    borderInlineStartWidth: 4,\n    borderStyle: 'solid',\n    borderTopWidth: 1,\n    marginBottom: 30,\n    marginInline: 20,\n    marginTop: 10,\n    paddingBlock: 10,\n    paddingInline: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring StyleX Dev Runtime\nDESCRIPTION: Shows how to use the updated @stylexjs/dev-runtime package which now returns the StyleX API instead of patching it at runtime, with configuration options for development purposes.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/blog/2024-11-01-Release-v0.9.3.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport makeStyleX from '@stylexjs/dev-runtime';\n\nconst stylex = makeStyleX({\n  // configuration options\n  classNamePrefix: 'x',\n  dev: true,\n  test: false,\n});\n\nconst styles = stylex.create({\n  color: 'red',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Mode in StyleX Babel Plugin\nDESCRIPTION: When the dev option is true, StyleX inserts function calls to inject CSS rules at runtime, enabling StyleX usage without CSS file extraction setup.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/babel-plugin.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndev: boolean // Default: false\n```\n\n----------------------------------------\n\nTITLE: Creating StyleX CSS Entry Point\nDESCRIPTION: CSS file with the @stylex directive that serves as an entry point for StyleX-generated CSS. This file will be processed by the PostCSS plugin.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/postcss-plugin/README.md#2025-04-17_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/**\n * The @stylex directive is used by the @stylexjs/postcss-plugin.\n * It is automatically replaced with generated CSS during builds.\n */\n@stylex;\n```\n\n----------------------------------------\n\nTITLE: Configuring Treeshake Compensation in StyleX Babel Plugin\nDESCRIPTION: The treeshakeCompensation option prevents bundlers from removing StyleX variable imports as dead code by adding an import with no specifier.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/babel-plugin.mdx#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntreeshakeCompensation: boolean // Default: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Sources in StyleX Babel Plugin\nDESCRIPTION: The importSources option allows overriding the package name from which stylex is imported, useful for setting up custom module aliases.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/babel-plugin.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimportSources: Array<string> // Default: ['@stylexjs/stylex']\n```\n\n----------------------------------------\n\nTITLE: TypeScript Static Style Constraints\nDESCRIPTION: Example of constraining style values using TypeScript static types\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/stylex/README.md#2025-04-17_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\ntype Props = {\n  ...\n  style?: StaticStyles<{\n    marginTop?: 0 | 4 | 8;\n  }>,\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Mode in StyleX Babel Plugin\nDESCRIPTION: When the test option is true, StyleX outputs only debug classNames without generating styles or functional classNames, which is useful for snapshot testing.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/babel-plugin.mdx#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntest: boolean // Default: false\n```\n\n----------------------------------------\n\nTITLE: Configuring stylex/stylex-valid-shorthands rule\nDESCRIPTION: Configuration options for the stylex/stylex-valid-shorthands ESLint rule, allowing customization of important usage and inline preferences.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/eslint-plugin/README.md#2025-04-17_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  allowImportant: false,                       // Whether `!important` is allowed\n  preferInline: false                          // Whether the expansion uses logical direction properties over physical\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in StyleX Babel Plugin\nDESCRIPTION: The debug option, when set to true, generates debug class names and inserts data-style-src props to help identify style sources during development.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/babel-plugin.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndebug: boolean // Default: false\n```\n\n----------------------------------------\n\nTITLE: Configuration Options for @stylexjs/sort-keys Rule in TypeScript\nDESCRIPTION: TypeScript type definition for the sort-keys rule options, including validImports for specifying import sources, minKeys for setting the minimum number of properties before enforcement, and allowLineSeparatedGroups for group-based sorting.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/eslint-plugin.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Options = {\n  // Possible string where you can import stylex from\n  //\n  // Default: ['@stylexjs/stylex']\n  validImports: Array<string>,\n\n  // Minimum number of keys required after which the rule is enforced\n  //\n  // Default: 2\n  minKeys: number,\n\n  // Sort groups of keys that have a blank line between them separately\n  //\n  // Default: false\n  allowLineSeparatedGroups: boolean,\n};\n```\n\n----------------------------------------\n\nTITLE: Including Paths for Compilation in @stylexjs/postcss-plugin using JavaScript\nDESCRIPTION: Specifies an array of paths or glob patterns to compile. This option is required for the plugin to function.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/postcss-plugin.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ninclude: string[] // Required\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Layers in @stylexjs/postcss-plugin using JavaScript\nDESCRIPTION: Controls whether Stylex uses @layers instead of :not(#\\#) for handling CSS specificity. Defaults to false.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/postcss-plugin.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nuseCSSLayers: boolean; // Default: false\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for StyleX\nDESCRIPTION: ESLint configuration with StyleX plugin rules for style validation, unused styles detection, and code organization\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/03-installation.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\"@stylexjs\"],\n  rules: {\n    \"@stylexjs/valid-styles\": \"error\",\n    \"@stylexjs/no-unused\": \"error\",\n    \"@stylexjs/valid-shorthands\": \"warning\",\n    \"@stylexjs/sort-keys\": \"warning\"\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Options for @stylexjs/postcss-plugin in JavaScript\nDESCRIPTION: Sets Babel configuration options for the plugin. By default, it reads from babel.config.js. For custom configs, set babelrc: false and specify desired options.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/postcss-plugin.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbabelConfig: object; // Default: {}\n```\n\n----------------------------------------\n\nTITLE: StyleX Plugin babelConfig Option\nDESCRIPTION: Configuration option for specifying custom Babel plugins and presets during code transformation.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/rollup-plugin/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbabelConfig: {\n  plugins: PluginItem[],\n  presets: PluginItem[]\n} // Default: { plugins: [], presets: [] }\n```\n\n----------------------------------------\n\nTITLE: Configuration Options for @stylexjs/valid-styles Rule in TypeScript\nDESCRIPTION: TypeScript type definition for the valid-styles rule options, including validImports for specifying import sources, propLimits for defining property value restrictions, and deprecated options for backwards compatibility.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/eslint-plugin.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Options = {\n  // Possible strings where you can import stylex from\n  //\n  // Default: ['@stylexjs/stylex']\n  validImports: Array<string>,\n\n  // Custom limits for values of various properties\n  propLimits?: PropLimits,\n\n  // @deprecated\n  // Allow At Rules and Pseudo Selectors outside of\n  // style values.\n  //\n  // Default: false\n  allowOuterPseudoAndMedia: boolean,\n\n  // @deprecated\n  // Disallow properties that are known to break\n  // in 'legacy-expand-shorthands' style resolution mode.\n  //\n  // Default: false\n  banPropsForLegacy: boolean,\n\n};\n\ntype PropLimits = {\n  // The property name as a string or a glob pattern\n  [propertyName: string]: {\n    limit:\n      // Disallow the property\n      | null\n      // Allow any string value\n      | 'string'\n      // Allow any number value\n      | 'number'\n      // Any string other 'string' or 'number'\n      // will be considered to be a valid constant\n      // e.g. 'red' or '100px'.\n      | string\n      // You can also provide numeric constants\n      // e.g. 100 or 0.5\n      | number\n      // You can also provide an array of valid\n      // number or string constant values.\n      | Array<string | number>,\n    // The error message to show when a value doesn't\n    // conform to the provided restriction.\n    reason: string,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Class Name Prefix in StyleX Babel Plugin\nDESCRIPTION: The classNamePrefix option defines the prefix applied to every generated className. By default, it uses 'x' as the prefix.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/babel-plugin.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclassNamePrefix: string // Default: 'x'\n```\n\n----------------------------------------\n\nTITLE: CSS Fallback Example\nDESCRIPTION: Equivalent CSS output for fallback styles\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/stylex/README.md#2025-04-17_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.header {\n  position: fixed;\n  position: -webkit-sticky;\n  position: sticky;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StyleX Rollup Plugin\nDESCRIPTION: Basic configuration setup for the StyleX Rollup plugin in rollup.config.mjs, including input/output settings and plugin initialization with CSS filename option.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/rollup-plugin/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport stylexPlugin from '@stylexjs/rollup-plugin';\n\nconst config = {\n  input: './index.js',\n  output: {\n    file: './.build/bundle.js',\n    format: 'es',\n  },\n  plugins: [stylexPlugin({ fileName: 'stylex.css' })],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Installing StyleX Babel Plugin\nDESCRIPTION: Command to install the StyleX compiler plugin for build-time style extraction\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/stylex/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @stylexjs/babel-plugin\n```\n\n----------------------------------------\n\nTITLE: Example Configuration for StyleX ESLint Rules in JSON\nDESCRIPTION: JSON configuration example showing how to enable both @stylexjs/valid-styles and @stylexjs/sort-keys rules, with the sort-keys rule configured to require at least 3 properties and allow line-separated groups.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/eslint-plugin.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"@stylexjs/valid-styles\": \"error\",\n    \"@stylexjs/sort-keys\": [\n      \"warn\",\n      {\n        \"minKeys\": 3,\n        \"allowLineSeparatedGroups\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: StyleX Plugin fileName Option\nDESCRIPTION: Configuration option for specifying the output CSS filename in the StyleX Rollup plugin.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/rollup-plugin/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfileName: string // Default: 'stylex.css'\n```\n\n----------------------------------------\n\nTITLE: Constrained Style Properties in TypeScript\nDESCRIPTION: Example of limiting accepted style properties to a specific set using TypeScript type arguments.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/learn/06-static-types.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {StyleXStyles} from '@stylexjs/stylex';\n\ntype Props = {\n  // ...\n  style?: StyleXStyles<{\n    color?: string;\n    backgroundColor?: string;\n    borderColor?: string;\n    borderTopColor?: string;\n    borderEndColor?: string;\n    borderBottomColor?: string;\n    borderStartColor?: string;\n  }>;\n};\n```\n\n----------------------------------------\n\nTITLE: StyleX Plugin Option: include\nDESCRIPTION: Configuration option that specifies which files should be processed by the StyleX plugin using an array of paths or glob patterns.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/postcss-plugin/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ninclude: string[] // Required\n```\n\n----------------------------------------\n\nTITLE: StyleX Plugin Option: exclude\nDESCRIPTION: Configuration option that specifies which files should be excluded from processing by the StyleX plugin, taking precedence over include patterns.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/postcss-plugin/README.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexclude: string[] // Default: []\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with npm, yarn, pnpm, or bun\nDESCRIPTION: Commands to start the Next.js development server using different package managers. After running any of these commands, the application will be available at http://localhost:3000.\nSOURCE: https://github.com/facebook/stylex/blob/main/examples/example-nextjs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Installing StyleX PostCSS Plugin with npm\nDESCRIPTION: Command to install @stylexjs/postcss-plugin and its autoprefixer dependency using npm package manager.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/postcss-plugin/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @stylexjs/postcss-plugin autoprefixer\n```\n\n----------------------------------------\n\nTITLE: Installing StyleX CLI with NPM\nDESCRIPTION: Command to install the StyleX CLI as a development dependency in a project.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/cli/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @stylexjs/cli\n```\n\n----------------------------------------\n\nTITLE: Configuring @stylexjs/stylex-enforce-extension rule\nDESCRIPTION: Configuration option for the @stylexjs/stylex-enforce-extension ESLint rule, allowing customization of the theme file extension.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/eslint-plugin/README.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"themeFileExtension\": \".stylex.js\" // default, can be customized\n}\n```\n\n----------------------------------------\n\nTITLE: StyleX Plugin Option: cwd\nDESCRIPTION: Configuration option that sets the working directory for the plugin, defaulting to the current working directory if not specified.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/postcss-plugin/README.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncwd: string; // Default: process.cwd()\n```\n\n----------------------------------------\n\nTITLE: Excluding Paths from Compilation in @stylexjs/postcss-plugin using JavaScript\nDESCRIPTION: Defines an array of paths or glob patterns to exclude from compilation. Exclusions take precedence over inclusions.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/postcss-plugin.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexclude: string[] // Default: []\n```\n\n----------------------------------------\n\nTITLE: Installing @stylexjs/eslint-plugin via npm\nDESCRIPTION: Command to install the @stylexjs/eslint-plugin as a dev dependency using npm.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/eslint-plugin/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @stylexjs/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Demonstrating deprecated media query syntax in StyleX\nDESCRIPTION: Example of the deprecated media query syntax in StyleX that wraps multiple property values within a single @-rule.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/eslint-plugin/README.md#2025-04-17_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst styles = stylex.create({\n  root: {\n    width: '100%',\n    '@media (min-width: 600px)': {\n      width: '50%',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory for @stylexjs/postcss-plugin in JavaScript\nDESCRIPTION: Specifies the working directory for the plugin. If not set, it defaults to process.cwd().\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/docs/api/configuration/postcss-plugin.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncwd: string; // Default: process.cwd()\n```\n\n----------------------------------------\n\nTITLE: Installing StyleX Rollup Plugin via Yarn\nDESCRIPTION: Command to install the @stylexjs/rollup-plugin package using yarn package manager.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/rollup-plugin/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @stylexjs/rollup-plugin\n```\n\n----------------------------------------\n\nTITLE: Performing a Dry Run Release\nDESCRIPTION: This command demonstrates how to perform a dry run of the release process by only specifying the package version without committing or publishing changes.\nSOURCE: https://github.com/facebook/stylex/blob/main/tools/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run release -- --pkg-version 0.10.2\n```\n\n----------------------------------------\n\nTITLE: Installing StyleX Core Package\nDESCRIPTION: Command to install the main StyleX package for style definitions\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/stylex/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @stylexjs/stylex\n```\n\n----------------------------------------\n\nTITLE: Configuring Flow for @stylexjs/eslint-plugin\nDESCRIPTION: Flow configuration options to resolve type definitions for eslint and estree when using @stylexjs/eslint-plugin.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/eslint-plugin/README.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule.system.node.resolve_dirname=flow_modules\nmodule.system.node.resolve_dirname=node_modules\n```\n\n----------------------------------------\n\nTITLE: Documenting StyleX Release 0.10.1 in Markdown\nDESCRIPTION: This markdown snippet outlines the release notes for StyleX version 0.10.1. It includes information about bug fixes, improvements, and acknowledgments to contributors.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/blog/2025-01-17-Release-v0.10.1.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release 0.10.1\n\n## Release Notes\n\n- Fixed a bug where variables with camelCase names were incorrectly converted to kebab-case (Thanks [yasuhiro-yamamoto](https://github.com/yasuhiro-yamamoto))\n- Fixed a bug in the eslint `valid-styles` rule where it would incorrectly flag when importing a file with an extension (Thanks [beaumontjonathan](https://github.com/beaumontjonathan))\n- Added support for `.js` resolved file extension imports from `.ts` files (Thanks [beaumontjonathan](https://github.com/beaumontjonathan))\n- Replaced `crypto` with `murmurhash` for CLI caching \n- Fixed a bug where the `import resolve` function would not respect the Windows system (Thanks [nonzzz](https://github.com/nonzzz))\n- Fixed a bug where the `initial-value` in `@Property` was invalid\n```\n\n----------------------------------------\n\nTITLE: StyleX Plugin Option: babelConfig\nDESCRIPTION: Configuration option for customizing Babel settings, allowing override of the default behavior that reads from babel.config.js.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/postcss-plugin/README.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nbabelConfig: object; // Default: {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Dial Component in Markdown\nDESCRIPTION: This snippet demonstrates how to import and render a custom 'Dial' component within a Markdown file, likely used for visual representation in the documentation.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/blog/2025-02-27-Release-v0.11.0.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport Dial from '../components/Dial';\n\n<Dial />\n```\n\n----------------------------------------\n\nTITLE: Installing StyleX PostCSS Plugin with yarn\nDESCRIPTION: Command to install @stylexjs/postcss-plugin and its autoprefixer dependency using yarn package manager.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/postcss-plugin/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @stylexjs/postcss-plugin autoprefixer\n```\n\n----------------------------------------\n\nTITLE: Deploying StyleX Website with SSH\nDESCRIPTION: Command for deploying the StyleX website using SSH authentication method.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true npm run deploy\n```\n\n----------------------------------------\n\nTITLE: Running StyleX Release Script with Full Options\nDESCRIPTION: This command demonstrates how to run the release script with all available options, including package versioning, git commit/tag creation, and npm publishing with two-factor authentication.\nSOURCE: https://github.com/facebook/stylex/blob/main/tools/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run release\n  # package version (required)\n  --pkg-version 0.10.2\n  # creates git commit and tag\n  --commit\n  # publishes to npm using 2fa\n  --publish --otp 123456\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: A standard robots.txt configuration that allows all web crawlers to access all parts of the website, with an additional verification line for the Algolia crawler service.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/static/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow:\n# Algolia-Crawler-Verif: B9862393E0F20501\n```\n\n----------------------------------------\n\nTITLE: Installing StyleX Rollup Plugin via NPM\nDESCRIPTION: Command to install the @stylexjs/rollup-plugin package using npm package manager.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/rollup-plugin/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @stylexjs/rollup-plugin\n```\n\n----------------------------------------\n\nTITLE: Publishing a Release to npm\nDESCRIPTION: This command demonstrates how to create a release and publish it to npm without specifying a one-time password, which will be prompted for during execution.\nSOURCE: https://github.com/facebook/stylex/blob/main/tools/README.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run release -- --pkg-version 0.10.2 --publish\n```\n\n----------------------------------------\n\nTITLE: Committing and Tagging a Release\nDESCRIPTION: This command shows how to create a release with automatic git commit and tag creation, without publishing to npm.\nSOURCE: https://github.com/facebook/stylex/blob/main/tools/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run release -- --pkg-version 0.10.2 --commit\n```\n\n----------------------------------------\n\nTITLE: Deploying StyleX Website without SSH\nDESCRIPTION: Command for deploying the StyleX website using GitHub username authentication method.\nSOURCE: https://github.com/facebook/stylex/blob/main/packages/docs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> npm run deploy\n```"
  }
]