[
  {
    "owner": "braintree",
    "repo": "braintree-web",
    "content": "TITLE: Implementing Hosted Fields Payment Processing\nDESCRIPTION: JavaScript implementation for Braintree's Hosted Fields payment processing, including client creation, field styling, and payment submission handling.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar submitBtn = document.getElementById(\"my-submit\");\nvar form = document.getElementById(\"my-sample-form\");\n\nbraintree.client.create(\n  {\n    authorization: CLIENT_AUTHORIZATION,\n  },\n  clientDidCreate\n);\n\nfunction clientDidCreate(err, client) {\n  braintree.hostedFields.create(\n    {\n      client: client,\n      styles: {\n        input: {\n          \"font-size\": \"16pt\",\n          color: \"#3A3A3A\",\n        },\n\n        \".number\": {\n          \"font-family\": \"monospace\",\n        },\n\n        \".valid\": {\n          color: \"green\",\n        },\n      },\n      fields: {\n        number: {\n          selector: \"#card-number\",\n        },\n        cvv: {\n          selector: \"#cvv\",\n        },\n        expirationDate: {\n          selector: \"#expiration-date\",\n        },\n      },\n    },\n    hostedFieldsDidCreate\n  );\n}\n\nfunction hostedFieldsDidCreate(err, hostedFields) {\n  submitBtn.addEventListener(\"click\", submitHandler.bind(null, hostedFields));\n  submitBtn.removeAttribute(\"disabled\");\n}\n\nfunction submitHandler(hostedFields, event) {\n  event.preventDefault();\n  submitBtn.setAttribute(\"disabled\", \"disabled\");\n\n  hostedFields.tokenize(function (err, payload) {\n    if (err) {\n      submitBtn.removeAttribute(\"disabled\");\n      console.error(err);\n    } else {\n      form[\"payment_method_nonce\"].value = payload.nonce;\n      form.submit();\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Promise-based Payment Implementation\nDESCRIPTION: Modern implementation using Promises instead of callbacks for handling asynchronous Braintree operations.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar submitBtn = document.getElementById(\"my-submit\");\nvar yourStylesConfig = {\n  /* your Hosted Fields `styles` config */\n};\nvar yourFieldsConfig = {\n  /* your Hosted Hields `fields` config */\n};\n\nbraintree.client\n  .create({ authorization: CLIENT_AUTHORIZATION })\n  .then(function (client) {\n    return braintree.hostedFields.create({\n      client: client,\n      styles: yourStylesConfig,\n      fields: yourFieldsConfig,\n    });\n  })\n  .then(function (hostedFields) {\n    submitBtn.addEventListener(\"click\", function (event) {\n      event.preventDefault();\n      submitBtn.setAttribute(\"disabled\", \"disabled\");\n\n      hostedFields\n        .tokenize()\n        .then(function (payload) {\n          // send payload.nonce to your server\n        })\n        .catch(function (err) {\n          submitBtn.removeAttribute(\"disabled\");\n          console.error(err);\n        });\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Advanced Payment Integration\nDESCRIPTION: Direct implementation of payment processing without Hosted Fields, suitable for merchants with higher PCI compliance levels.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nbraintree.client.create(\n  {\n    authorization: CLIENT_AUTHORIZATION,\n  },\n  function (err, client) {\n    client.request(\n      {\n        endpoint: \"payment_methods/credit_cards\",\n        method: \"post\",\n        data: {\n          creditCard: {\n            number: \"4111111111111111\",\n            expirationDate: \"10/20\",\n            cvv: \"123\",\n            billingAddress: {\n              postalCode: \"12345\",\n            },\n          },\n        },\n      },\n      function (err, response) {\n        // Send response.creditCards[0].nonce to your server\n      }\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Hosted Fields Payment Form Structure\nDESCRIPTION: HTML structure for implementing Braintree's Hosted Fields payment form, including placeholders for card number, CVV, and expiration date fields.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/\" id=\"my-sample-form\">\n  <input type=\"hidden\" name=\"payment_method_nonce\" />\n  <label for=\"card-number\">Card Number</label>\n  <div id=\"card-number\"></div>\n\n  <label for=\"cvv\">CVV</label>\n  <div id=\"cvv\"></div>\n\n  <label for=\"expiration-date\">Expiration Date</label>\n  <div id=\"expiration-date\"></div>\n\n  <input id=\"my-submit\" type=\"submit\" value=\"Pay\" disabled />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Installing Braintree Web SDK\nDESCRIPTION: Commands for installing the Braintree web SDK using npm or bower package managers.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install braintree-web\n```\n\nLANGUAGE: bash\nCODE:\n```\nbower install braintree-web\n```\n\n----------------------------------------\n\nTITLE: Error Handling with BraintreeError Code in Hosted Fields\nDESCRIPTION: Example of handling specific error codes in Hosted Fields tokenization callbacks. This pattern allows developers to check for particular error types like empty fields.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhostedFieldsInstance.tokenize(function (err, payload) {\n  if (err && err.code === 'FIELDS_EMPTY') {\n    // Handle user input error\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Promises with Braintree SDK\nDESCRIPTION: Example of using Promise-based implementation with Braintree SDK when no callback is provided, allowing for chained asynchronous operations.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/jsdoc/Home.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbraintree.client\n  .create({\n    authorization: CLIENT_AUTHORIZATION,\n  })\n  .then(function (client) {\n    // Create other components\n  });\n```\n\n----------------------------------------\n\nTITLE: Using Callbacks with Braintree SDK\nDESCRIPTION: Example of using the Node.js callback style with Braintree SDK, where callbacks receive potential errors as the first parameter and returned data as the second parameter.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/jsdoc/Home.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbraintree.client.create({...}, callback);\n\nfunction callback(err, clientInstance) { ... }\n```\n\n----------------------------------------\n\nTITLE: PayPal Integration with Options in Tokenize Method\nDESCRIPTION: Example showing how to create a PayPal instance and tokenize with specific options. This pattern moved options from creation time to tokenization time for greater flexibility.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbraintree.paypal.create({\n  client: clientInstance\n}, function (err, paypalInstance) {\n  paypalInstance.tokenize({\n    flow: 'checkout',\n    amount: '10.00',\n    currency: 'USD'\n  }, function (tokenizeErr, payload) {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Data Collector Integration with Kount and PayPal\nDESCRIPTION: Example showing how to initialize the Data Collector component with Kount and PayPal fraud protection options. This demonstrates the simplified boolean configuration for fraud tools.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndataCollector.create({\n  client: clientInstance,\n  kount: true,\n  paypal: true\n}, function (err, collector) {});\n```\n\n----------------------------------------\n\nTITLE: Implementing Teardown for Braintree Components\nDESCRIPTION: Example of tearing down a Braintree component (Hosted Fields) to clean up DOM nodes, event handlers, and other resources. The teardown method accepts a callback to handle completion or errors.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/jsdoc/Home.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nhostedFieldsInstance.teardown(function (err) {\n  if (err) {\n    console.error(\"Could not tear down Hosted Fields!\");\n  } else {\n    console.log(\"Hosted Fields has been torn down!\");\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Module Hierarchy for Braintree SDK\nDESCRIPTION: A diagram showing how multiple Braintree components can be created from a single Client instance, illustrating the parent-child relationship between modules.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/jsdoc/Home.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbraintree.client.create(...) --------> Client ─┐\n                         ┌─────────────────────┤\nbraintree.paypal.create(...) --------> PayPal  │\n                               ┌───────────────┘\nbraintree.hostedFields.create(...) --> HostedFields\n```\n\n----------------------------------------\n\nTITLE: Implementing CSP with Nonce-Based Inline Script Execution in HTML\nDESCRIPTION: Example demonstrating CSP configuration using nonce values to allow multiple inline scripts. Shows how to set up the meta tag and apply matching nonce attributes to script tags.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/jsdoc/Home.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<html><head>\n  <meta http-equiv=\"Content-Security-Policy\" content=\"\n    Content-Security-Policy: script-src 'unsafe-inline' 'nonce-123a456b789c000d='\n\"/>\n<head>\n<script nonce=\"123a456b789c000d=\">console.log(\"execution of inline-script\");</script>\n<script nonce=\"123a456b789c000d=\">var sum = 1 + 2;</script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing CSP with Hash-Based Inline Script Execution in HTML\nDESCRIPTION: Example showing how to configure CSP meta tag with a SHA-256 hash to allow specific inline script execution. The hash value corresponds to the exact content of the script tag.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/jsdoc/Home.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html><head><meta http-equiv=\"Content-Security-Policy\" content=\"\n    Content-Security-Policy: script-src 'unsafe-inline' 'sha256-zVu1jtS1MTItvxLN0tAAAAOAOlDFjjz/oAIlo5KIjMs='\n\"/><head>\n<script>console.log(\"execution of inline-script\")</script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Displaying PayPal Flow Options in Markdown Table\nDESCRIPTION: This table illustrates the breaking changes in the PayPal integration, showing how the 'singleUse' property is replaced with the new 'flow' property.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Old                 | New                |\n| ------------------- | ------------------ |\n| `singleUse` omitted | `flow: 'vault'`    |\n| `singleUse: false`  | `flow: 'vault'`    |\n| `singleUse: true`   | `flow: 'checkout'` |\n```\n\n----------------------------------------\n\nTITLE: Build Commands for Components\nDESCRIPTION: NPM commands for building all components or individual components of the SDK.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/DEVELOPMENT.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm run build <component>\n```\n\n----------------------------------------\n\nTITLE: Testing and Linting Commands\nDESCRIPTION: NPM commands for running tests and linting on all components or individual components.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/DEVELOPMENT.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\nnpm test <component>\nnpm test lib\nnpm run lint\nnpm run lint <component>\njest <path to file>\n```\n\n----------------------------------------\n\nTITLE: Release Commands\nDESCRIPTION: NPM commands for releasing different distributions of the SDK including hosted, bower, jsdoc, and source.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/DEVELOPMENT.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run release -- hosted\nnpm run release -- bower\nnpm run release -- jsdoc\nnpm run release -- source\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure Overview\nDESCRIPTION: Shows the main directory structure of the Braintree.js project including distribution, source, and test directories.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/DEVELOPMENT.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbraintree.js\n├── dist/hosted        <- assets output\n├── dist/bower/        <- bower package output\n├── dist/npm/          <- npm package output\n├── publishing/        <- npm/bower-specific sources\n├── scripts/           <- build helper scripts\n├── src/               <- source code\n│   ├── <component>/\n│   └── ...\n├── tasks/             <- gulp tasks\n└── test/              <- testing suite\n    ├── <component>/\n    └── ...\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Example\nDESCRIPTION: Sample .env file configuration showing required environment variables for development and deployment.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/DEVELOPMENT.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nBRAINTREE_JS_API_HOST=development.gateway.hostname\nBRAINTREE_JS_API_PORT=443\nBRAINTREE_JS_API_PROTOCOL=https\nBRAINTREE_JS_HOSTED_DEST=/absolute/path/to/assets/directory\nBRAINTREE_JS_BOWER_DEST=/absolute/path/to/braintree-web-bower/repository\nBRAINTREE_JS_SOURCE_DEST=/absolute/path/to/braintree-web/repository\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for Braintree Web\nDESCRIPTION: Command to install all the necessary development dependencies for the braintree-web project after cloning the repository.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Listing Available npm Tasks for Braintree Web\nDESCRIPTION: Command to display all available npm scripts defined in the package.json for the braintree-web project, which helps developers see what tasks are available.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run\n```\n\n----------------------------------------\n\nTITLE: Distribution Directory Structure\nDESCRIPTION: Shows the output directory structure after building, including npm, bower, and hosted distributions.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/DEVELOPMENT.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n├── dist/npm/\n│   └── ... (mirrors src/)\n├── dist/bower/\n│   ├── index.js\n│   ├── LICENSE\n│   ├── bower.json\n│   ├── <component>.js\n│   ├── <component>.min.js\n│   └── ...\n└── dist/hosted/\n    └── web/\n        ├── 3.0.0/\n        │   ├── css/\n        │   ├── html/\n        │   ├── images/\n        │   └── js/\n        └── dev@ -> 3.0.0/\n```\n\n----------------------------------------\n\nTITLE: Updating Node QRCode in braintree-web\nDESCRIPTION: Commands to build the QRCode dependency from the forked repository and copy it to the braintree.js project. This process is necessary since the original node-qrcode repository hasn't been updated in a while, prompting Braintree to maintain their own fork with updated dependencies.\nSOURCE: https://github.com/braintree/braintree-web/blob/main/src/venmo/internal/vendor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\ncp build/qrcode.js ../braintree.js/src/venmo/internal/vendor/node-qrcode.js\n```"
  }
]