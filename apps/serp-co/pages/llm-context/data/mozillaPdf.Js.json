[
  {
    "owner": "mozilla",
    "repo": "pdf.js",
    "content": "TITLE: Loading PDF Document with PDF.js\nDESCRIPTION: This code snippet demonstrates how to load a PDF document using PDF.js. It uses `pdfjsLib.getDocument` to initiate the loading process, which returns a `PDFDocumentLoadingTask`. The `promise` property of this task is resolved with the PDF document object upon successful loading.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/docs/contents/examples/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfjsLib.getDocument('helloworld.pdf')\n```\n\n----------------------------------------\n\nTITLE: Getting a Page from a PDF Document\nDESCRIPTION: This code snippet shows how to retrieve a specific page from a loaded PDF document using the `pdf.getPage()` method. This method also returns a promise, which is resolved with the `page` object when the page is successfully retrieved.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/docs/contents/examples/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\npdf.getPage(1).then(function(page) {\n  // you can now use *page* here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling PDF Document Loading Promise\nDESCRIPTION: This code snippet illustrates how to handle the promise returned by `pdfjsLib.getDocument`. It uses the `.then()` method to execute a function when the PDF document is successfully loaded. Inside the function, the loaded PDF document object (`pdf`) can be used.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/docs/contents/examples/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar loadingTask = pdfjsLib.getDocument('helloworld.pdf');\nloadingTask.promise.then(function(pdf) {\n  // you can now use *pdf* here\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a PDF Page to a Canvas\nDESCRIPTION: This code snippet demonstrates how to render a PDF page to a canvas element. It involves creating a viewport, setting the canvas dimensions, and creating a render context. The `page.render()` method is then called with the render context to draw the page on the canvas. It also includes logic to support HiDPI screens.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/docs/contents/examples/index.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar scale = 1.5;\nvar viewport = page.getViewport({ scale: scale, });\n// Support HiDPI-screens.\nvar outputScale = window.devicePixelRatio || 1;\n\nvar canvas = document.getElementById('the-canvas');\nvar context = canvas.getContext('2d');\n\ncanvas.width = Math.floor(viewport.width * outputScale);\ncanvas.height = Math.floor(viewport.height * outputScale);\ncanvas.style.width = Math.floor(viewport.width) + \"px\";\ncanvas.style.height =  Math.floor(viewport.height) + \"px\";\n\nvar transform = outputScale !== 1\n  ? [outputScale, 0, 0, outputScale, 0, 0]\n  : null;\n\nvar renderContext = {\n  canvasContext: context,\n  transform: transform,\n  viewport: viewport\n};\npage.render(renderContext);\n```\n\n----------------------------------------\n\nTITLE: Importing PDF.js with Webpack\nDESCRIPTION: This JavaScript snippet demonstrates how to import the PDF.js library in a Webpack project. It imports `pdfjs-dist/webpack.mjs`, which configures the worker automatically for Webpack users, eliminating the need for `worker-loader`. This import is essential for initializing PDF.js within the Webpack environment.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/examples/webpack/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as pdfjsLib from 'pdfjs-dist/webpack.mjs';\n```\n\n----------------------------------------\n\nTITLE: Scaling Viewport to a Desired Width\nDESCRIPTION: This code snippet shows an alternative method for scaling the viewport to a desired width. It calculates the scale factor based on the desired width and the original viewport width.  A new viewport is then created with the calculated scale.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/docs/contents/examples/index.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar desiredWidth = 100;\nvar viewport = page.getViewport({ scale: 1, });\nvar scale = desiredWidth / viewport.width;\nvar scaledViewport = page.getViewport({ scale: scale, });\n```\n\n----------------------------------------\n\nTITLE: Cloning PDF.js Repository\nDESCRIPTION: This snippet demonstrates how to clone the PDF.js repository using git. It is the first step in obtaining a local copy of the source code for development or usage.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/mozilla/pdf.js.git\n$ cd pdf.js\n```\n\n----------------------------------------\n\nTITLE: Cloning PDF.js Repository with Git\nDESCRIPTION: This command clones the PDF.js repository from GitHub, allowing developers to obtain a local copy of the source code. Subsequent commands change the directory to the cloned repository. It's a prerequisite for building or modifying PDF.js from source.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/docs/contents/getting_started/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/mozilla/pdf.js.git\n$ cd pdf.js\n```\n\n----------------------------------------\n\nTITLE: Install NPM Dependencies\nDESCRIPTION: This command installs the necessary Node.js dependencies for the PDF.js project. It uses the npm package manager to download and install the packages listed in the project's package.json file.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/examples/node/pdf2png/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and building the project\nDESCRIPTION: These shell commands install necessary dependencies and build the example project using gulp and npm.  They are essential for setting up the environment before running the PDF.js example with Webpack. `gulp dist-install` prepares the distribution files, `npm install` installs the node modules, and `webpack` builds the project.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/examples/webpack/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ gulp dist-install\n$ cd examples/webpack\n$ npm install\n$ ./node_modules/webpack/bin/webpack.js\n```\n\n----------------------------------------\n\nTITLE: Installing PDF.js Dependencies\nDESCRIPTION: This snippet shows how to install the necessary dependencies for PDF.js using npm. This step is required after cloning the repository and before building or running the project.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Build PDF.js Distribution\nDESCRIPTION: This command builds the PDF.js library distribution using Gulp. It prepares the library for use in other projects by creating a distribution-ready bundle.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/examples/node/pdf2png/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gulp dist-install\n```\n\n----------------------------------------\n\nTITLE: Building PDF.js with Gulp\nDESCRIPTION: This snippet shows how to build PDF.js using gulp to bundle source files into production scripts. It creates `pdf.js` and `pdf.worker.js` in the `build/generic/build/` directory.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npx gulp generic\n```\n\n----------------------------------------\n\nTITLE: Starting a Local PDF.js Server\nDESCRIPTION: This snippet demonstrates how to start a local web server for PDF.js using gulp. This is necessary because some browsers do not allow opening PDF files directly from the file system.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx gulp server\n```\n\n----------------------------------------\n\nTITLE: Run PDF to PNG Conversion Script\nDESCRIPTION: This command navigates to the pdf2png example directory and executes the pdf2png.mjs script using Node.js. This script demonstrates converting the first page of a PDF file to a PNG image.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/examples/node/pdf2png/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd examples/node/pdf2png\n$ node pdf2png.mjs\n```\n\n----------------------------------------\n\nTITLE: Run Font Tests Locally with Virtual Environment\nDESCRIPTION: This snippet provides the commands to set up a virtual environment, install fonttools using pip, and run the PDF.js font tests using gulp. It ensures a clean and isolated environment for running the tests with the necessary dependencies.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/test/font/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\npip install fonttools\nnpx gulp fonttest\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for openjpeg.js\nDESCRIPTION: This command builds the Docker image required for compiling the OpenJPEG decoder for use in PDF.js. It assumes that the necessary `build.js` script is available in the current directory and that Docker is properly set up.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/external/openjpeg/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode build.js -C\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for qcms Compilation (JavaScript)\nDESCRIPTION: This command builds the Docker image required for compiling the qcms decoder.  It is a necessary prerequisite for generating the `qcms.js` and `qcms_bg.wasm` files.  The command utilizes `node build.js` with the `-C` flag.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/external/qcms/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnode build.js -C\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for quickjs-eval.js\nDESCRIPTION: This command builds the Docker image required for compiling the sandbox environment used to generate the `quickjs-eval.js` file.  It requires Node.js and Docker to be installed and configured properly.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/external/quickjs/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n`node build.js -C`\n```\n\n----------------------------------------\n\nTITLE: Compiling qcms Decoder (JavaScript)\nDESCRIPTION: This command compiles the qcms decoder, generating the `qcms.js` and `qcms_bg.wasm` files. It requires a Docker setup and the Docker image to be built beforehand. The `-co` flag specifies the output directory within the PDF.js project.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/external/qcms/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnode build.js -co /pdf.js/external/qcms/\n```\n\n----------------------------------------\n\nTITLE: Compiling the Sandbox for quickjs-eval.js\nDESCRIPTION: This command compiles the sandbox environment, which is a crucial step in generating the `quickjs-eval.js` file.  It relies on the previously built Docker image and outputs the compiled files to the specified directory.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/external/quickjs/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n`node build.js -co /pdf.js/external/quickjs/`\n```\n\n----------------------------------------\n\nTITLE: Compiling OpenJPEG Decoder for PDF.js\nDESCRIPTION: This command compiles the OpenJPEG decoder using the `build.js` script and places the output files in the specified directory within the PDF.js project structure. It requires a Docker image to be built beforehand, and the `/pdf.js/external/openjpeg/` directory should exist in the PDF.js project.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/external/openjpeg/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnode build.js -co /pdf.js/external/openjpeg/\n```\n\n----------------------------------------\n\nTITLE: Building PDF.js for Legacy Browsers\nDESCRIPTION: This snippet builds PDF.js with support for older browsers. The output will be placed in `build/generic-legacy/build/` directory.\nSOURCE: https://github.com/mozilla/pdf.js/blob/master/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npx gulp generic-legacy\n```"
  }
]