[
  {
    "owner": "elixr-games",
    "repo": "elics",
    "content": "TITLE: Creating Custom System with Queries and Lifecycle in EliCS\nDESCRIPTION: This snippet demonstrates how to define a custom system (`EnemySystem`) by extending the base system created by `createSystem`. It shows how to define queries for entities with specific components (`EnemyComponent`), configure schema data (`healthRegen`), implement initialization logic (`init`) including subscribing to query events, and define per-frame update logic (`update`) to process queried entities.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/system.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createSystem, Entity } from 'elics';\nimport { EnemyComponent } from './EnemyComponent';\n\nconst queries = {\n\tenemies: { required: [EnemyComponent] },\n};\n\nconst schema = {\n\thealthRegen: { type: Types.Float32, default: 0.5 },\n};\n\nclass EnemySystem extends createSystem(queries, schema) {\n\tinit(): void {\n\t\tthis.queries.enemies.subscribe('qualify', (entity: Entity) => {\n\t\t\tconsole.log('new enemy entity:', entity);\n\t\t});\n\t}\n\n\tupdate(delta: number, time: number): void {\n\t\tthis.queries.enemies.entities.forEach((enemy: Entity) => {\n\t\t\tEnemyComponent.data['health'][enemy.index] +=\n\t\t\t\tthis.config.healthRegen * delta;\n\t\t});\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering a Movement System in EliCS with TypeScript\nDESCRIPTION: Implements a system class extending the base system created by createSystem function from EliCS. Defines a query for moving entities that require Position and Velocity components. The update method processes each matched entity by retrieving vector views of Position and Velocity data, then updates position coordinates based on velocity scaled by the delta time parameter. The system is registered with the ECS world to be executed during the update cycle.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/getting-started.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSystem } from 'elics';\n\nconst queryConfig = {\n\tmovables: { required: [Position, Velocity] },\n};\n\nclass MovementSystem extends createSystem(queryConfig) {\n\tupdate(delta, time) {\n\t\tthis.queries.movables.entities.forEach((entity) => {\n\t\t\tconst position = entity.getVectorView(Position, 'value');\n\t\t\tconst velocity = entity.getVectorView(Velocity, 'value');\n\t\t\tposition[0] += velocity[0] * delta;\n\t\t\tposition[1] += velocity[1] * delta;\n\t\t\tposition[2] += velocity[2] * delta;\n\t\t});\n\t}\n}\n\nworld.registerSystem(MovementSystem);\n```\n\n----------------------------------------\n\nTITLE: Creating World Instance with EliCS in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and instantiate the World class from the EliCS ECS library in TypeScript. No additional dependencies are required beyond the EliCS package. Instantiate the World class to initialize the ECS environment and its core managers.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/world.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { World } from 'elics';\n\nconst world = new World();\n```\n\n----------------------------------------\n\nTITLE: Accessing System Configuration Data in EliCS\nDESCRIPTION: This snippet shows how to access the configuration data within a system's method (e.g., `update`) using the `this.config` property. The accessed values reflect the configuration provided during system registration, falling back to schema defaults if not overridden.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/system.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdate() {\n\tconst healthRegen = this.config.healthRegen;\n\t// Use healthRegen value in system logic\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Component with createComponent\nDESCRIPTION: This code snippet demonstrates how to define a component using the `createComponent` function in EliCS. It includes defining a schema with data types and default values, as well as optional `onAttach` and `onDetach` lifecycle hooks. The component manages entity data through centralized, typed arrays for optimal performance.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/component.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createComponent, Types } from 'elics';\n\nconst schema = {\n\tisAlive: { type: Types.Boolean, default: true },\n\tposition: { type: Types.Vec3, default: [0, 0, 0] },\n\thealth: { type: Types.Float32, default: 100 },\n\tuuid: { type: Types.String, default: '' },\n\tobject3D: { type: Types.Object, default: null },\n};\nconst onAttach = (index: number) => {\n\tconsole.log(`EnemyComponent attached to entity at index ${index}`);\n};\nconst onDetach = (index: number) => {\n\tEnemyComponent.data.object3D[index].removeFromParent();\n};\n\nconst EnemyComponent = createComponent(schema, onAttach, onDetach);\n```\n\n----------------------------------------\n\nTITLE: Defining WorldOptions Interface for ECS World in TypeScript\nDESCRIPTION: This snippet defines the WorldOptions interface, allowing configuration of entity capacity and runtime checks for the World class. Both properties are optional; entityCapacity sets a limit on entities (default 1000), and checksOn enables/disables runtime validation (default true).\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/world.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface WorldOptions {\n\tentityCapacity: number;\n\tchecksOn: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Query in a System\nDESCRIPTION: Example demonstrating how to define a query configuration, create a system with that query, and process entities matching the query criteria. Shows subscription to query events and entity iteration.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/query.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSystem, Entity } from 'elics';\nimport { ComponentA, ComponentC, ComponentB } from 'your-components';\n\n// Define a query for entities with ComponentA but excluding ComponentC.\nconst queryConfig = {\n\tAButNotC: { required: [ComponentA], excluded: [ComponentC] },\n};\n\nclass GenericSystem extends createSystem(queryConfig) {\n\tinit(): void {\n\t\t// Subscribe to the query to receive notifications when entities qualify.\n\t\tconst qualifyCallback = (entity: Entity) => {\n\t\t\tconsole.log(`Entity ${entity.id} qualifies for query AButNotC.`);\n\t\t};\n\t\tconst unsub = this.queries.AButNotC.subscribe('qualify', qualifyCallback);\n\t\t// Unsubscribe later if needed.\n\t\tunsub();\n\t}\n\n\tupdate(): void {\n\t\t// Retrieve entities matching the query.\n\t\tconst entities = this.queries.AButNotC.entities;\n\t\tentities.forEach((entity: Entity) => {\n\t\t\tconst value = entity.getValue(ComponentA, 'key');\n\t\t});\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Entities and Attaching Components in EliCS using TypeScript\nDESCRIPTION: Creates a new entity instance in the ECS world, then attaches multiple components to it, optionally initializing component properties. This snippet demonstrates how to assign Position with a custom value and add default Velocity and Health components. The world object must previously exist and components must be registered. Attached components define data held by the entity during the ECS lifecycle.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/getting-started.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst entity = world.createEntity();\nentity.addComponent(Position, { value: [10, 20, 30] });\nentity.addComponent(Velocity);\nentity.addComponent(Health);\n```\n\n----------------------------------------\n\nTITLE: Registering a System with Optional Configuration in World in TypeScript\nDESCRIPTION: Shows the method for registering a system in the World with optional configuration parameters, such as system-specific options or execution priority. Systems should be registered after their required components. Returns the World instance for chaining.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/world.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nregisterSystem(system: System, options?: Partial<SystemOptions>): this;\n```\n\n----------------------------------------\n\nTITLE: Creating an Entity with World class in EliCS\nDESCRIPTION: Demonstrates how to create an entity using the `World` class in EliCS.  It imports the `World` class and instantiates it, then creates a new entity. This relies on the EliCS library being installed and available in the project.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/entity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { World } from 'elics';\n\nconst world = new World();\nconst entity = world.createEntity();\n```\n\n----------------------------------------\n\nTITLE: Defining System Configuration Schema in EliCS\nDESCRIPTION: This snippet illustrates how to define a configuration schema for an EliCS system using a simple object structure. The schema specifies configuration properties, their data types (`Types.Float32`), and default values, enabling systems to be customized during registration.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/system.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst schema = {\n\thealthRegen: { type: Types.Float32, default: 0.5 },\n};\n```\n\n----------------------------------------\n\nTITLE: Attaching a Component to an Entity\nDESCRIPTION: This code snippet demonstrates how to attach a component to an entity using the `addComponent` method in EliCS. It shows how to provide initial data to override the default values defined in the component's schema. The provided data is used to initialize the component's properties for the specific entity.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/component.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nentity.addComponent(EnemyComponent, {\n\tisAlive: 1,\n\tposition: [10, 20, 30],\n\thealth: 50,\n\tuuid: 'abc123',\n\tobject3D: someObject3D,\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Components on an EliCS Entity\nDESCRIPTION: Illustrates how to add, access, and modify components of an entity in EliCS. It assumes the existence of a custom component (`YourComponent`) and demonstrates adding it with initial data, accessing a value using a key, and modifying a value using `setValue`. Requires that 'your-components' is a valid module in the project.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/entity.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { YourComponent } from 'your-components';\n\n// Adding a component\nentity.addComponent(YourComponent, {\n\t/* initial data */\n});\n\n// Accessing a component's value\nconst value = entity.getValue(YourComponent, 'key');\n\n// Modifying a component's value\nentity.setValue(YourComponent, 'key', newValue);\n```\n\n----------------------------------------\n\nTITLE: Registering Components and Systems in EliCS World in TypeScript\nDESCRIPTION: This snippet illustrates registering custom components and systems with the World instance to define ECS behavior. Dependencies include user-defined PositionComponent and MovementSystem, and registration order is important: components should be registered before systems to satisfy system query dependencies.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/world.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { PositionComponent, MovementSystem } from './movement';\n\nworld.registerComponent(PositionComponent).registerSystem(MovementSystem);\n```\n\n----------------------------------------\n\nTITLE: Component Schema Definition\nDESCRIPTION: This code snippet shows an example of defining a schema for an EliCS component. The schema specifies the data types and default values for each property of the component. The `Types` enum is used to define the data types, ensuring type safety and efficient data storage. This schema is a part of the component definition that uses `createComponent` function.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/component.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = {\n\tisAlive: { type: Types.Boolean, default: true },\n\t// ... more properties\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a Component with the World\nDESCRIPTION: This code snippet shows how to register a component with the EliCS `World` instance. Registering the component initializes its data storage based on the defined schema. It is a necessary step before the component can be used with entities or queries. Failure to register the component will result in an error during entity attachment or query formation.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/component.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nworld.registerComponent(EnemyComponent);\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Configuration Object\nDESCRIPTION: Demonstrates how to define a query configuration object that specifies required and excluded components. This object is used when creating systems.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/query.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst queryConfig = {\n\tAButNotC: { required: [ComponentA], excluded: [ComponentC] },\n\t// more queries...\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Component Data\nDESCRIPTION: This code snippet shows how to directly access and modify the component data in EliCS. It uses the entity's index to access the underlying storage arrays. This direct access provides high performance for data-intensive operations. It demonstrates how to access properties of different types, including numbers and vectors, and how to modify their values.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/component.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst index = entity.index;\n\n// Accessing values\nconst isAlive = EnemyComponent.data['isAlive'][index];\nconst position = EnemyComponent.data['position'].subarray(\n\tindex * 3,\n\tindex * 3 + 3,\n);\nconst health = EnemyComponent.data['health'][index];\n\n// Modifying values\nEnemyComponent.data['health'][index] = 75;\nEnemyComponent.data['position'].set([5, 10, 15], index * 3);\nEnemyComponent.data['isAlive'][index] = 0; // Mark as not alive\n```\n\n----------------------------------------\n\nTITLE: Registering EliCS System with Priority and Config\nDESCRIPTION: This snippet demonstrates registering a system (`EnemySystem`) with the `World`, specifying both configuration data (`configData`) and an execution priority. The `priority` value influences the order in which systems are updated each frame.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/system.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst world = new World();\nworld.registerComponent(EnemyComponent).registerSystem(EnemySystem, {\n\tconfigData: { healthRegen: 0.5 },\n\tpriority: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating World ECS Loop in Application Main Loop in TypeScript\nDESCRIPTION: This code sets up an application main loop that updates the ECS world on each animation frame using requestAnimationFrame. The world.update(deltaTime, performance.now()) method runs all systems, handling game logic and entity processing. Pass delta time (usually in seconds) and current time since application start.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/world.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction mainLoop(deltaTime: number) {\n\tworld.update(deltaTime, performance.now());\n\trequestAnimationFrame(mainLoop);\n}\n\nrequestAnimationFrame(mainLoop);\n```\n\n----------------------------------------\n\nTITLE: Entity.addComponent Method in EliCS\nDESCRIPTION: Illustrates the `addComponent` method of the `Entity` class in EliCS, which adds a component to the entity.  It takes a component instance and optional initial data as parameters and returns the entity instance for method chaining. Requires `Component` type to be defined.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/entity.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\naddComponent(component: Component, initialData?: { [key: string]: any }): this;\n```\n\n----------------------------------------\n\nTITLE: API: System.update Method Signature in EliCS\nDESCRIPTION: This snippet documents the `update()` method signature. This method is called every frame while the system is active and is where the primary per-frame processing logic for the system resides. It receives `delta` time (since last frame) and total `time` as parameters.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/system.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdate(delta: number, time: number): void;\n```\n\n----------------------------------------\n\nTITLE: Retrieving System Instance by Class Constructor in TypeScript\nDESCRIPTION: Illustrates how to retrieve a currently registered system by passing its class constructor. Returns the system instance if present (typed with generics) or undefined otherwise. Useful for accessing system state or methods directly.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/world.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetSystem<T extends System>(systemClass: SystemConstructor<T>): T | undefined;\n```\n\n----------------------------------------\n\nTITLE: Processing the ECS Loop with update in World in TypeScript\nDESCRIPTION: Shows the update method signature for advancing the ECS loop. Pass elapsed delta time (in seconds) and the total runtime. The method runs all active systems and processes deferred entity updates. Critical for frame-based logic.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/world.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdate(delta: number, time: number): void;\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering Components in EliCS with TypeScript\nDESCRIPTION: Defines component types representing entity data using the createComponent function and various Types (e.g., Vec3, Float32) from EliCS. Components like Position, Velocity, and Health store structured properties and default values. After definition, these components are registered with the ECS world to be available for entities. Dependencies include the createComponent function and Types module from EliCS.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/getting-started.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst Position = createComponent({\n\tvalue: { type: Types.Vec3, default: [0, 0, 0] },\n});\n\nconst Velocity = createComponent({\n\tvalue: { type: Types.Vec3, default: [0, 0, 0] },\n});\n\nconst Health = createComponent({\n\tvalue: { type: Types.Float32, default: 100 },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nworld\n\t.registerComponent(Position)\n\t.registerComponent(Velocity)\n\t.registerComponent(Health);\n```\n\n----------------------------------------\n\nTITLE: Creating ECS World using EliCS in TypeScript\nDESCRIPTION: Initializes a new instance of the EliCS World, which serves as the container for all ECS entities, components, systems, and queries. This world object manages the lifecycle and interaction of ECS elements. It requires the World class imported from the 'elics' package.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/getting-started.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { World } from 'elics';\n\nconst world = new World();\n```\n\n----------------------------------------\n\nTITLE: Registering EliCS System with Configuration Data\nDESCRIPTION: This snippet demonstrates how to register a custom system (`EnemySystem`) with an EliCS `World` instance while providing specific configuration data. The `configData` object allows overriding default values defined in the system's schema, customizing its behavior.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/system.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nworld.registerSystem(EnemySystem, { configData: { healthRegen: 1.0 } });\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Query Events\nDESCRIPTION: Shows how to subscribe to query qualification and disqualification events and handle entity updates. Includes unsubscription pattern for cleanup.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/query.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst qualifyCallback = (entity: Entity) => {\n\tconsole.log(`Entity ${entity.id} qualifies for query AButNotC.`);\n};\nconst unsub = this.queries.AButNotC.subscribe('qualify', qualifyCallback);\n// Unsubscribe later if needed.\nunsub();\n```\n\n----------------------------------------\n\nTITLE: Creating a New Entity with createEntity in EliCS World in TypeScript\nDESCRIPTION: This snippet shows the createEntity method signature, which creates and returns a new entity managed by the World instance. No arguments are needed; returns a unique (usually numeric) Entity object for further component assignment.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/world.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateEntity(): Entity;\n\n```\n\n----------------------------------------\n\nTITLE: Entity.getValue Method in EliCS\nDESCRIPTION: Illustrates the `getValue` method of the `Entity` class in EliCS, which retrieves a value from a component associated with the entity. It takes a component instance and a key as parameters and returns the associated value. Requires `Component` type to be defined.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/entity.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ngetValue(component: Component, key: string): any;\n```\n\n----------------------------------------\n\nTITLE: Basic System Definition Structure in EliCS\nDESCRIPTION: This snippet provides the fundamental structure for defining a custom system in EliCS. It shows extending the class returned by `createSystem` and implementing the required `init` for setup and `update` for per-frame logic.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/system.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass EnemySystem extends createSystem(queries, schema) {\n\tinit(): void {\n\t\t// Initialization logic\n\t}\n\n\tupdate(delta: number, time: number): void {\n\t\t// Per-frame logic\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Component with World in EliCS in TypeScript\nDESCRIPTION: Demonstrates how to register a new component type with the World, making it available for systems and queries. Requires a component object instance. Registration enables efficient storage and query resolution for associated entities.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/world.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nregisterComponent(component: Component): this;\n```\n\n----------------------------------------\n\nTITLE: Creating Component (API)\nDESCRIPTION: This code snippet provides the function signature for `createComponent` in EliCS. This function is used to create new components, taking a schema and optional lifecycle hooks as parameters. The schema defines the data structure and default values for the component's data. The lifecycle hooks are invoked when the component is attached to or detached from an entity.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/component.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createComponent<T extends Types>(\n\tschema: TypedSchema<T>,\n\tonAttach?: (index: number) => void,\n\tonDetach?: (index: number) => void,\n): Component<T>;\n```\n\n----------------------------------------\n\nTITLE: Accessing a Vector View in EliCS\nDESCRIPTION: Shows how to retrieve and manipulate a subarray view for vector-like component data in EliCS.  It retrieves a `vectorView` using `getVectorView`, then demonstrates updating an element, setting the entire vector from an array, and setting the vector using data from a Three.js Vector3 (requires vector3 to be defined elsewhere).\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/entity.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst vectorView = entity.getVectorView(YourComponent, 'vectorKey');\n\n// Update the first element of the vector\nvectorView[0] = 42;\n\n// Set the entire vector from an array\nvectorView.set([1, 2, 3]);\n\n// Set the vector using data from a Three.js Vector3 (after converting to an array)\nvectorView.set(vector3.toArray());\n```\n\n----------------------------------------\n\nTITLE: Component Schema (API)\nDESCRIPTION: This code snippet shows the definition of the `schema` property of an EliCS Component. The `schema` property is a read-only property that defines the structure and default values for the component's data. It is of type `TypedSchema<Types>`, which ensures type safety and efficient data storage.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/component.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly schema: TypedSchema<Types>;\n```\n\n----------------------------------------\n\nTITLE: Destroying an Entity in EliCS\nDESCRIPTION: Demonstrates how to destroy an entity in EliCS using the `destroy()` method. This method releases all the entity's components and returns it to the internal pool for reuse. Relies on `entity` being a valid entity object.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/entity.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nentity.destroy();\n```\n\n----------------------------------------\n\nTITLE: Entity.setValue Method in EliCS\nDESCRIPTION: Illustrates the `setValue` method of the `Entity` class in EliCS, which updates a value in a component associated with the entity.  It takes a component instance, a key, and the new value as parameters and returns `void`. Requires `Component` type to be defined.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/entity.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nsetValue(component: Component, key: string, value: any): void;\n```\n\n----------------------------------------\n\nTITLE: Controlling EliCS System Execution State\nDESCRIPTION: This snippet shows how to retrieve a system instance from the `World` and control its local execution state using the `play()` and `stop()` methods. `play()` resumes updates if paused, while `stop()` pauses the system's `update` method execution.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/system.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst enemySystem = world.getSystem(EnemySystem);\nenemySystem.play(); // Resume system updates\nenemySystem.stop(); // Pause system updates\n```\n\n----------------------------------------\n\nTITLE: API: System.stop Method Signature in EliCS\nDESCRIPTION: This snippet documents the `stop()` method signature. Calling this method pauses the execution of the system's `update` method, preventing it from being processed each frame until `play()` is called.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/system.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nstop(): void;\n```\n\n----------------------------------------\n\nTITLE: Getting All Registered Systems from World in TypeScript\nDESCRIPTION: Demonstrates a method to return an array of all currently registered system instances. No parameters are needed; returns an array for further iteration or inspection. Useful for debugging or meta-system processing.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/world.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetSystems(): System[];\n```\n\n----------------------------------------\n\nTITLE: Entity.removeComponent Method in EliCS\nDESCRIPTION: Illustrates the `removeComponent` method of the `Entity` class in EliCS, which removes a component from the entity. It takes a component instance as a parameter and returns the entity instance for method chaining.  Requires `Component` type to be defined.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/entity.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nremoveComponent(component: Component): this;\n```\n\n----------------------------------------\n\nTITLE: Component onAttach (API)\nDESCRIPTION: This code snippet shows the definition of the `onAttach` property of an EliCS Component. The `onAttach` property is a lifecycle hook that is invoked when the component is attached to an entity. It is a function that takes the entity's index as an argument and returns void.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/component.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nonAttach: (index: number) => void;\n```\n\n----------------------------------------\n\nTITLE: Component Data (API)\nDESCRIPTION: This code snippet shows the definition of the `data` property of an EliCS Component. The `data` property is a read-only property that stores the component's data in optimized arrays. Each property in the `data` object corresponds to a property in the component's schema. Numerical and vector data are typically stored in a `TypedArray`, while strings and objects are stored in regular JavaScript arrays.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/component.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly data: { [key: keyof schema]: TypedArray | Array<any> };\n```\n\n----------------------------------------\n\nTITLE: API: createSystem Function Signature in EliCS\nDESCRIPTION: This snippet provides the TypeScript signature for the `createSystem` function. It shows that the function accepts a queries configuration object and an optional schema object, returning a base `SystemConstructor` class that can be extended.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/system.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction createSystem(\n\tqueries: Record<string, { required: Component[]; excluded?: Component[] }>,\n\tschema?: TypedSchema,\n): SystemConstructor;\n```\n\n----------------------------------------\n\nTITLE: Entity.index Property in EliCS\nDESCRIPTION: Illustrates the `index` property of the `Entity` class in EliCS. This is a unique index assigned to the entity by the `EntityManager` and used for efficient component data access. Accessing this property requires an existing `Entity` object.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/entity.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly index: number;\n```\n\n----------------------------------------\n\nTITLE: Accessing Entities Matching a Query\nDESCRIPTION: Example showing how to iterate over entities that match a query during a system update cycle. Demonstrates direct access to the query's entities collection.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/query.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nupdate(): void {\n  const entities = this.queries.AButNotC.entities;\n  entities.forEach((entity: Entity) => {\n    // do something with the entity\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Entity.getComponents Method in EliCS\nDESCRIPTION: Illustrates the `getComponents` method of the `Entity` class in EliCS, which retrieves a list of all component instances currently associated with the entity. It returns an array of `Component` instances. Requires `Component` type to be defined.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/entity.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetComponents(): Component[];\n```\n\n----------------------------------------\n\nTITLE: Entity.active Property in EliCS\nDESCRIPTION: Illustrates the `active` property of the `Entity` class in EliCS, indicating whether the entity is currently active. It's a read-only boolean property reflecting the entity's lifecycle state. Accessing this property requires an existing `Entity` object.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/entity.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly active: boolean;\n```\n\n----------------------------------------\n\nTITLE: Unregistering a System from World in EliCS in TypeScript\nDESCRIPTION: This snippet documents the method to unregister and remove a system instance from the World. Pass the target system object as a parameter; the method performs cleanup and removes it from the update loop.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/world.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nunregisterSystem(system: System): void;\n```\n\n----------------------------------------\n\nTITLE: Constructing World Instance with Custom Options in TypeScript\nDESCRIPTION: This example displays the constructor signature for creating a World instance with optional WorldOptions such as entity capacity and debug checks. Pass a partial options object; omitted properties use defaults. Requires EliCS library.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/world.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew World(options?: Partial<WorldOptions>)\n```\n\n----------------------------------------\n\nTITLE: Defining Component Schema with TypedSchema in TypeScript\nDESCRIPTION: Defines the `TypedSchema` interface in TypeScript. This interface is used in EliCS to structure component or system configuration data using key-value pairs, where each key has a defined type (from the `Types` enum) and a default value corresponding to that type. This enforces type safety and enables memory optimization.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/types.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TypedSchema<T extends Types> {\n\t[key: string]: { type: T; default: DefaultValueForType<T> };\n}\n```\n\n----------------------------------------\n\nTITLE: Entity.destroy Method in EliCS\nDESCRIPTION: Illustrates the `destroy` method of the `Entity` class in EliCS, which destroys the entity by releasing all its components and returning it to the pool. It returns `void`.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/entity.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ndestroy(): void;\n```\n\n----------------------------------------\n\nTITLE: API: System.isPaused Property in EliCS\nDESCRIPTION: This snippet documents the read-only boolean property `isPaused` on EliCS System instances. It indicates whether the system's execution is currently paused (i.e., `update` is not being called).\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/system.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly isPaused: boolean;\n```\n\n----------------------------------------\n\nTITLE: Component onDetach Lifecycle Hook\nDESCRIPTION: This code snippet illustrates the usage of the `onDetach` lifecycle hook in an EliCS component. The `onDetach` function is called when the component is detached from an entity. It allows for custom logic to be executed, such as cleanup operations or resource management. This example accesses the `object3D` property of the component's data to remove it from its parent.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/component.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst onDetach = (index: number) => {\n\tEnemyComponent.data.object3D[index].removeFromParent();\n};\n```\n\n----------------------------------------\n\nTITLE: Query API TypeScript Definitions\nDESCRIPTION: API documentation showing the TypeScript interface for the Query class, including query configuration structure, entity access, subscription methods, and matching functionality.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/query.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Query Configuration\nRecord<string, { required: Component[]; excluded?: Component[] }>;\n\n// Query.entities\nreadonly entities: Set<Entity>;\n\n// Query.subscribe\nsubscribe(event: 'qualify' | 'disqualify', callback: (entity: Entity) => void): () => void;\n\n// Query.matches\nmatches(entity: Entity): boolean;\n```\n\n----------------------------------------\n\nTITLE: Installing EliCS Package with npm\nDESCRIPTION: Installs the EliCS ECS framework via npm to add the necessary EliCS packages to your project dependencies. Requires a Node.js environment with npm installed. This is the prerequisite step before importing and using EliCS components in development.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install elics\n```\n\n----------------------------------------\n\nTITLE: Entity.hasComponent Method in EliCS\nDESCRIPTION: Illustrates the `hasComponent` method of the `Entity` class in EliCS, which checks if the entity has a specified component. It takes a component instance as a parameter and returns a boolean value indicating whether the component is present. Requires `Component` type to be defined.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/entity.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nhasComponent(component: Component): boolean;\n```\n\n----------------------------------------\n\nTITLE: Using the Global State Object in World in TypeScript\nDESCRIPTION: Displays the type of the global property on the World instance, allowing storage and access of shared state or configuration between systems. The property is a generic record and can hold arbitrary values, functions, or settings.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/world.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nglobal: Record<string, any>;\n```\n\n----------------------------------------\n\nTITLE: Updating the ECS World in the Render Loop with TypeScript\nDESCRIPTION: Demonstrates how to call the world.update method within the application’s render or game loop to process all registered systems. The update method takes delta (time elapsed since last update) and time (total time) as parameters to advance entity states and execute system logic accordingly. This keeps the ECS simulation running and synchronized with frame updates.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/getting-started.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction render() {\n  ...\n\tworld.update(delta, time);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: API: System.queries Property in EliCS\nDESCRIPTION: This snippet documents the read-only `queries` property on EliCS System instances. It's an object mapping the names defined in the system's query configuration to the corresponding `Query` objects, which provide access to filtered entities.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/system.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly queries: { [key: keyof System.schema]: Query };\n```\n\n----------------------------------------\n\nTITLE: API: System.world Property in EliCS\nDESCRIPTION: This snippet documents the read-only `world` property available on EliCS System instances. It provides access to the `World` instance the system is registered with, allowing interaction with other parts of the ECS framework.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/system.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly world: World;\n```\n\n----------------------------------------\n\nTITLE: Component onDetach (API)\nDESCRIPTION: This code snippet shows the definition of the `onDetach` property of an EliCS Component. The `onDetach` property is a lifecycle hook that is invoked when the component is detached from an entity. It is a function that takes the entity's index as an argument and returns void.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/component.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nonDetach: (index: number) => void;\n```\n\n----------------------------------------\n\nTITLE: API: System.init Method Signature in EliCS\nDESCRIPTION: This snippet documents the `init()` method signature. This method is called once immediately after the system is registered with the `World` and is intended for system setup and initialization tasks.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/system.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\ninit(): void;\n```\n\n----------------------------------------\n\nTITLE: Entity.getVectorView Method in EliCS\nDESCRIPTION: Illustrates the `getVectorView` method of the `Entity` class in EliCS, which provides a subarray view for vector-like component data. It takes a component instance and a key associated with the vector data as parameters and returns a `TypedArray`. Requires `Component` type to be defined.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/entity.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ngetVectorView(component: Component, key: string): TypedArray;\n```\n\n----------------------------------------\n\nTITLE: API: System.play Method Signature in EliCS\nDESCRIPTION: This snippet documents the `play()` method signature. Calling this method resumes the execution of the system's `update` method if it was previously paused using `stop()`, allowing it to process entities each frame again.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/system.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nplay(): void;\n```\n\n----------------------------------------\n\nTITLE: API: System.priority Property in EliCS\nDESCRIPTION: This snippet documents the `priority` property on EliCS System instances. This number determines the system's execution order relative to other systems in the `World`, with higher values processed earlier.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/architecture/system.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\npriority: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Team Members Data (Vue)\nDESCRIPTION: This Vue `<script setup>` block defines the `members` array used by the VitePress theme's team components (`VPTeamMembers`). It contains an array of objects, each representing a team member with properties for their avatar, name, title, and links. This data is used to render a 'team' section on the page. It depends on the `VPTeamMembers` component being available.\nSOURCE: https://github.com/elixr-games/elics/blob/main/docs/introduction.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\nimport {\n  VPTeamPage,\n  VPTeamPageTitle,\n  VPTeamMembers\n} from 'vitepress/theme'\n\nconst members = [\n  {\n    avatar: 'https://github.com/felixtrz.png',\n    name: 'Felix Z',\n    title: 'Founder & Lead Developer',\n    links: [\n      { icon: 'github', link: 'https://github.com/felixtrz' },\n      { icon: 'linkedin', link: 'https://www.linkedin.com/in/felixtrz' },\n      { icon: 'twitter', link: 'https://x.com/felix_trz' }\n    ]\n  },\n]\n```"
  }
]