[
  {
    "owner": "opnsense",
    "repo": "core",
    "content": "TITLE: Defining Jinja2 Content Block for Inheritance\nDESCRIPTION: This Jinja2 snippet defines a named block called 'content'. Templates that extend this parent template can provide their own implementation for this block, enabling content customization within a consistent layout defined by the parent.\nSOURCE: https://github.com/opnsense/core/blob/master/src/opnsense/service/templates/OPNsense/Sample/example_parent.txt#_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{% block content %}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Iterating Interfaces and Displaying Data with Jinja2\nDESCRIPTION: This snippet iterates through a list of network interfaces (`interfaces`) and displays their details.  It accesses the `key`, `if`, `ipaddr`, and `subnet` attributes of each interface. This snippet demonstrates iterating through a dictionary and accessing nested properties.\nSOURCE: https://github.com/opnsense/core/blob/master/src/opnsense/service/templates/OPNsense/Sample/example_simple_page.txt#_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\n\n{% for key,item in interfaces.items() %}\n    interface {{ key }}\n    --- interface {{ item.if }}\n    --- address  {{ item.ipaddr }}\n    --- subnet  {{ item.subnet }}\n\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Conditional Check with Jinja2\nDESCRIPTION: This snippet checks if the `filter.rule` exists using the `helpers.exists()` helper function.  It provides a simple conditional statement to check the presence of firewall rules. It demonstrates the use of conditional logic within a Jinja2 template.\nSOURCE: https://github.com/opnsense/core/blob/master/src/opnsense/service/templates/OPNsense/Sample/example_simple_page.txt#_snippet_4\n\nLANGUAGE: jinja2\nCODE:\n```\n\n{% if helpers.exists('filter.rule') %}\n    filter.rule exists\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using Helper Functions with Jinja2\nDESCRIPTION: This snippet demonstrates the use of helper functions to retrieve the physical interface connected to a specified network (e.g., 'lan'). It uses `helpers.physical_interface('lan')` and `helpers.physical_interfaces(['lan', 'wan'])` to retrieve network interface information. It showcases accessing helper functions to retrieve the desired configuration.\nSOURCE: https://github.com/opnsense/core/blob/master/src/opnsense/service/templates/OPNsense/Sample/example_simple_page.txt#_snippet_2\n\nLANGUAGE: jinja2\nCODE:\n```\nPhysical interface connected to \"lan\" : {{ helpers.physical_interface('lan') }} or both lan and wan  {{ helpers.physical_interfaces(['lan', 'wan']) }}\n```\n\n----------------------------------------\n\nTITLE: Iterating Firewall Rules and Displaying Data with Jinja2\nDESCRIPTION: This snippet iterates through a list of firewall rules (`filter.rule`) and displays their description, type, and interface. It utilizes the `descr`, `type`, and `interface` attributes of each rule. This demonstrates iteration through a list to present firewall rule details.\nSOURCE: https://github.com/opnsense/core/blob/master/src/opnsense/service/templates/OPNsense/Sample/example_simple_page.txt#_snippet_3\n\nLANGUAGE: jinja2\nCODE:\n```\n\n{% for item in filter.rule %}\n    descr : {{ item.descr }}\n    type : {{ item.type }}\n    interface : {{ item.interface }}\n\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Configuration Data with Jinja2\nDESCRIPTION: This snippet retrieves and displays the last change date and version from the OPNsense configuration. It uses the `lastchange` and `version` variables, with default values if they are not found.  The output provides information about the configuration's modification time and version.\nSOURCE: https://github.com/opnsense/core/blob/master/src/opnsense/service/templates/OPNsense/Sample/example_simple_page.txt#_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\nlast change date : {{ lastchange|default('unknown') }}\nversion according to config.xml : {{ version|default('?') }}\n```\n\n----------------------------------------\n\nTITLE: Building OPNsense Package with Custom Options in Makefile\nDESCRIPTION: Shows how to use the 'make package' command with a custom option. This example demonstrates passing the CORE_NAME parameter to customize the package name. Makefile targets in the OPNsense core repository allow for building packages and development workflows.\nSOURCE: https://github.com/opnsense/core/blob/master/README.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\n# make package CORE_NAME=my_new_name\n```\n\n----------------------------------------\n\nTITLE: Defining Minimum Supported PHP Version in Source File - PHP\nDESCRIPTION: This snippet shows how to include a special comment at the top of a PHP file (directly after the PHP opening tag) to specify the minimum PHP version required for the file. The 'PHP Parallel Lint' tool will skip linting this file when running with a lower PHP version than specified. The comment must be on the first line. No external dependencies are required besides the Parallel Lint application. The only expected input is the PHP file itself; the output is the exclusion of incompatible files during linting.\nSOURCE: https://github.com/opnsense/core/blob/master/contrib/parallel-lint/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php // lint >= 7.4\n\n// Code which contains PHP 7.4 syntax.\n```"
  }
]