[
  {
    "owner": "nix-community",
    "repo": "home-manager",
    "content": "TITLE: Basic Home Manager Configuration in Nix\nDESCRIPTION: Minimal initial Home Manager configuration file that sets up user information and enables self-management. This includes essential configuration like username, home directory, and state version.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/usage/configuration.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ config, pkgs, ... }:\n\n{\n  # Home Manager needs a bit of information about you and the\n  # paths it should manage.\n  home.username = \"jdoe\";\n  home.homeDirectory = \"/home/jdoe\";\n\n  # This value determines the Home Manager release that your\n  # configuration is compatible with. This helps avoid breakage\n  # when a new Home Manager release introduces backwards\n  # incompatible changes.\n  #\n  # You can update Home Manager without changing this value. See\n  # the Home Manager release notes for a list of state version\n  # changes in each release.\n  home.stateVersion = \"24.11\";\n\n  # Let Home Manager install and manage itself.\n  programs.home-manager.enable = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Home Manager Activation Commands in Shell\nDESCRIPTION: Shell commands used to activate or test a Home Manager configuration. The commands either apply the configuration directly or build it for inspection before applying.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/usage/configuration.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhome-manager switch\n```\n\n----------------------------------------\n\nTITLE: Enabling Flakes in NixOS Configuration\nDESCRIPTION: This snippet shows how to enable the experimental features 'nix-command' and 'flakes' in a NixOS system by modifying the configuration.nix file. It sets the Nix package to nixFlakes and adds the necessary options.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/nix-flakes/prerequisites.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nnix = {\n  package = pkgs.nixFlakes;\n  extraOptions = ''\n    experimental-features = nix-command flakes\n  '';\n};\n```\n\n----------------------------------------\n\nTITLE: Declarative Home Manager Installation in NixOS\nDESCRIPTION: Complete example of declaratively installing and configuring Home Manager through configuration.nix\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nixos.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{ config, pkgs, lib, ... }:\n\nlet\n  home-manager = builtins.fetchTarball https://github.com/nix-community/home-manager/archive/release-24.11.tar.gz;\nin\n{\n  imports =\n    [\n      (import \"${home-manager}/nixos\")\n    ];\n\n  users.users.eve.isNormalUser = true;\n  home-manager.users.eve = { pkgs, ... }: {\n    home.packages = [ pkgs.atool pkgs.httpie ];\n    programs.bash.enable = true;\n  \n    # The state version is required and should stay at the version you\n    # originally installed.\n    home.stateVersion = \"24.11\";\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Home Manager from Nix Channel\nDESCRIPTION: Command to install Home Manager using nix-shell, creating the first Home Manager generation. This executes the installer script provided by the home-manager channel.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/standalone.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-shell '<home-manager>' -A install\n```\n\n----------------------------------------\n\nTITLE: Enabling Flakes in nix.conf for Non-NixOS Systems\nDESCRIPTION: This bash snippet shows the line that needs to be added to the nix.conf file to enable the experimental features for Nix Flakes. The file is located either in ~/.config/nix/ or /etc/nix/nix.conf.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/nix-flakes/prerequisites.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexperimental-features = nix-command flakes\n```\n\n----------------------------------------\n\nTITLE: Adding Home Manager Channel for Nixpkgs Master/Unstable\nDESCRIPTION: Commands to add and update the Home Manager channel for users following Nixpkgs master or unstable channel. This adds the repository as a channel named 'home-manager'.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/standalone.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager\n$ nix-channel --update\n```\n\n----------------------------------------\n\nTITLE: Configuring NixGL Integration with Home Manager for Multi-GPU System\nDESCRIPTION: A configuration example for an Optimus laptop using both Mesa and Nvidia wrappers. It shows how to wrap mpv to run on integrated Intel GPU, FreeCAD to run on Nvidia dGPU, and demonstrates direct usage of wrapper functions with Xonotic. The example includes setting up default wrappers and installing wrapper scripts.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/usage/gpu-non-nixos.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ config, lib, pkgs, nixgl, ... }:\n{\n  nixGL.packages = nixgl.packages;\n  nixGL.defaultWrapper = \"mesa\";\n  nixGL.offloadWrapper = \"nvidiaPrime\";\n  nixGL.installScripts = [ \"mesa\" \"nvidiaPrime\" ];\n\n  programs.mpv = {\n    enable = true;\n    package = config.lib.nixGL.wrap pkgs.mpv;\n  };\n\n  home.packages = [\n    (config.lib.nixGL.wrapOffload pkgs.freecad)\n    (config.lib.nixGL.wrappers.nvidiaPrime pkgs.xonotic)\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Home Manager Configuration with Packages and Services in Nix\nDESCRIPTION: Enhanced Home Manager configuration that adds custom packages, configures Emacs with extra packages, and enables the gpg-agent service. This demonstrates how to extend the basic configuration with additional functionality.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/usage/configuration.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{ config, pkgs, ... }:\n\n{\n  # Home Manager needs a bit of information about you and the\n  # paths it should manage.\n  home.username = \"jdoe\";\n  home.homeDirectory = \"/home/jdoe\";\n\n  # Packages that should be installed to the user profile.\n  home.packages = [\n    pkgs.htop\n    pkgs.fortune\n  ];\n\n  # This value determines the Home Manager release that your\n  # configuration is compatible with. This helps avoid breakage\n  # when a new Home Manager release introduces backwards\n  # incompatible changes.\n  #\n  # You can update Home Manager without changing this value. See\n  # the Home Manager release notes for a list of state version\n  # changes in each release.\n  home.stateVersion = \"24.11\";\n\n  # Let Home Manager install and manage itself.\n  programs.home-manager.enable = true;\n\n  programs.emacs = {\n    enable = true;\n    extraPackages = epkgs: [\n      epkgs.nix-mode\n      epkgs.magit\n    ];\n  };\n\n  services.gpg-agent = {\n    enable = true;\n    defaultCacheTtl = 1800;\n    enableSshSupport = true;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Home Manager with Unstable Nixpkgs\nDESCRIPTION: Command to generate and activate a basic Home Manager configuration using the master branch for unstable Nixpkgs users.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/nix-flakes/standalone.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnix run home-manager/master -- init --switch\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Manager as a NixOS Module with Flakes\nDESCRIPTION: A basic flake.nix configuration that incorporates Home Manager as a NixOS module. This setup enables Home Manager to use the global package set and allows individual user configurations to be specified separately.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/nix-flakes/nixos.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  description = \"NixOS configuration\";\n\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";\n    home-manager.url = \"github:nix-community/home-manager\";\n    home-manager.inputs.nixpkgs.follows = \"nixpkgs\";\n  };\n\n  outputs = inputs@{ nixpkgs, home-manager, ... }: {\n    nixosConfigurations = {\n      hostname = nixpkgs.lib.nixosSystem {\n        system = \"x86_64-linux\";\n        modules = [\n          ./configuration.nix\n          home-manager.nixosModules.home-manager\n          {\n            home-manager.useGlobalPkgs = true;\n            home-manager.useUserPackages = true;\n            home-manager.users.jdoe = ./home.nix;\n\n            # Optionally, use home-manager.extraSpecialArgs to pass\n            # arguments to home.nix\n          }\n        ];\n      };\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Home Manager Module in NixOS Configuration\nDESCRIPTION: Basic import statement to add Home Manager module to NixOS configuration\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nixos.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nimports = [ <home-manager/nixos> ];\n```\n\n----------------------------------------\n\nTITLE: Standard Home Manager Switch Command\nDESCRIPTION: Command for building and activating flake-based configuration after initial setup is complete.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/nix-flakes/standalone.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhome-manager switch\n```\n\n----------------------------------------\n\nTITLE: Importing Home Manager Module in nix-darwin Configuration\nDESCRIPTION: Nix code to import the Home Manager module into nix-darwin's configuration.nix file. This enables the home-manager option for user configurations.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nix-darwin.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nimports = [ <home-manager/nix-darwin> ];\n```\n\n----------------------------------------\n\nTITLE: Integrating Home Manager with flake-parts in Nix\nDESCRIPTION: Example flake.nix configuration showing how to import Home Manager's flake module in a flake-parts setup. This configuration sets up the inputs with proper following of nixpkgs and imports Home Manager's flake module to enable proper merging of homeModules and homeConfigurations.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/nix-flakes/flake-parts.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  description = \"flake-parts configuration\";\n\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";\n    home-manager.url = \"github:nix-community/home-manager\";\n    home-manager.inputs.nixpkgs.follows = \"nixpkgs\";\n    flake-parts.url = \"github:hercules-ci/flake-parts\";\n  };\n\n  outputs = inputs@{ flake-parts, ... }:\n    flake-parts.lib.mkFlake { inherit inputs; } {\n      imports = [\n        # Import home-manager's flake module\n        inputs.home-manager.flakeModules.home-manager\n      ];\n      flake = {\n        # Define `homeModules`, `homeConfigurations`,\n        # `nixosConfigurations`, etc here\n      };\n      # See flake.parts for more features, such as `perSystem`\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Manager for a User in nix-darwin\nDESCRIPTION: Example nix-darwin configuration that sets up a user (eve) and their Home Manager configuration. This demonstrates basic package installation and shell configuration.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nix-darwin.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nusers.users.eve = {\n  name = \"eve\";\n  home = \"/Users/eve\";\n};\nhome-manager.users.eve = { pkgs, ... }: {\n  home.packages = [ pkgs.atool pkgs.httpie ];\n  programs.bash.enable = true;\n\n  # The state version is required and should stay at the version you\n  # originally installed.\n  home.stateVersion = \"24.11\";\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Home Manager User Configuration\nDESCRIPTION: Example of configuring a user environment with packages and Bash configuration\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nixos.md#2025-04-16_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nusers.users.eve.isNormalUser = true;\nhome-manager.users.eve = { pkgs, ... }: {\n  home.packages = [ pkgs.atool pkgs.httpie ];\n  programs.bash.enable = true;\n\n  # This value determines the Home Manager release that your configuration is \n  # compatible with. This helps avoid breakage when a new Home Manager release \n  # introduces backwards incompatible changes. \n  #\n  # You should not change this value, even if you update Home Manager. If you do \n  # want to update the value, then make sure to first check the Home Manager \n  # release notes. \n  home.stateVersion = \"24.05\"; # Please read the comment before changing. \n\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Machine-Specific Home Manager Settings in Nix\nDESCRIPTION: Template for machine-specific Home Manager configuration that imports common settings and allows for machine/user-specific customizations. This pattern enables sharing common configurations while maintaining machine-specific settings.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/faq/multiple-users-machines.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ ... }:\n\n{\n  imports = [ ./common.nix ];\n\n  # Various options that are specific for this machine/user.\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Nixpkgs Unstable for Package Installation in Home Manager\nDESCRIPTION: This snippet demonstrates how to import packages from the Nixpkgs unstable channel in a Home Manager configuration. It creates a separate pkgsUnstable variable to access packages from the unstable channel.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/faq/unstable.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, config, ... }:\n\nlet\n\n  pkgsUnstable = import <nixpkgs-unstable> {};\n\nin\n\n{\n  home.packages = [\n    pkgsUnstable.foo\n  ];\n\n  # …\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Home Manager Generations in Shell\nDESCRIPTION: This command lists all available Home Manager generations, showing their creation dates, IDs, and corresponding Nix store paths. It's used to identify the generation to rollback to.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/usage/rollbacks.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ home-manager generations\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Manager to Use Custom Path Permanently\nDESCRIPTION: Nix configuration snippet to permanently configure Home Manager to use a custom repository path. This enables the home-manager program and sets its path to the local development clone.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/contributing/getting-started.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nprograms.home-manager.enable = true;\nprograms.home-manager.path = \"$HOME/devel/home-manager\";\n```\n\n----------------------------------------\n\nTITLE: Adding the Nixpkgs Unstable Channel via Shell Commands\nDESCRIPTION: These shell commands add the Nixpkgs unstable channel to your system. The first command adds the channel with the alias 'nixpkgs-unstable', and the second command updates all channels.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/faq/unstable.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs-unstable\n$ nix-channel --update\n```\n\n----------------------------------------\n\nTITLE: Creating a New Home Manager NixOS Flake from Template\nDESCRIPTION: A shell command that creates a new NixOS configuration in /etc/nixos using the Home Manager flake template. This provides a quick way to set up Home Manager as a NixOS module.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/nix-flakes/nixos.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nix flake new /etc/nixos -t github:nix-community/home-manager#nixos\n```\n\n----------------------------------------\n\nTITLE: Enabling XSession in Home Manager Configuration\nDESCRIPTION: Home Manager configuration that enables XSession management and specifies the window manager command. This is required for graphical services to start automatically.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/usage/graphical.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{\n  # …\n\n  xsession.enable = true;\n  xsession.windowManager.command = \"…\";\n\n  # …\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nix Darwin Flake\nDESCRIPTION: Defines a flake configuration for nix-darwin that integrates Home Manager. Sets up system configuration with nixpkgs, darwin, and home-manager inputs, and configures the darwin system with home-manager modules.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/nix-flakes/nix-darwin.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  description = \"Darwin configuration\";\n\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";\n    darwin.url = \"github:lnl7/nix-darwin\";\n    darwin.inputs.nixpkgs.follows = \"nixpkgs\";\n    home-manager.url = \"github:nix-community/home-manager\";\n    home-manager.inputs.nixpkgs.follows = \"nixpkgs\";\n  };\n\n  outputs = inputs@{ nixpkgs, home-manager, darwin, ... }: {\n    darwinConfigurations = {\n      hostname = darwin.lib.darwinSystem {\n        system = \"x86_64-darwin\";\n        modules = [\n          ./configuration.nix\n          home-manager.darwinModules.home-manager\n          {\n            home-manager.useGlobalPkgs = true;\n            home-manager.useUserPackages = true;\n            home-manager.users.jdoe = ./home.nix;\n\n            # Optionally, use home-manager.extraSpecialArgs to pass\n            # arguments to home.nix\n          }\n        ];\n      };\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Running Full Home Manager Test Suite in Shell\nDESCRIPTION: This command executes the entire Home Manager test suite in a pure Nix shell environment. It's run from the project root directory.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/contributing/tests.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-shell --pure tests -A run.all\n```\n\n----------------------------------------\n\nTITLE: Using Unstable Nixpkgs for Package Selection\nDESCRIPTION: Demonstrates how to use a package from the unstable channel by importing nixpkgs-unstable and assigning it to the package option.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/faq/change-package-module.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, config, ... }:\n\nlet\n\n  pkgsUnstable = import <nixpkgs-unstable> {};\n\nin\n\n{\n  programs.beets.package = pkgsUnstable.beets;\n\n  # …\n}\n```\n\n----------------------------------------\n\nTITLE: Sourcing Home Manager Session Variables in Bash/Zsh\nDESCRIPTION: This snippet shows how to manually source the Home Manager session variables file in Bash and Z shell. It should be added to .profile and .zshrc files respectively to ensure session variables are set correctly.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/faq/session-variables.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n. \"$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh\"\n```\n\n----------------------------------------\n\nTITLE: Running All Tests with Locked Nixpkgs\nDESCRIPTION: This command runs all tests using the Nixpkgs version specified in the flake.lock file. It ensures consistent testing across different environments.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/contributing/tests.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ nix build --reference-lock-file flake.lock ./tests#test-all\n```\n\n----------------------------------------\n\nTITLE: Overriding Package Options in Home Manager (Beets Example)\nDESCRIPTION: Shows how to override the default beets package by modifying plugin settings using the package option.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/faq/change-package-module.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nprograms.beets.package = pkgs.beets.override { pluginOverrides = { beatport.enable = false; }; };\n```\n\n----------------------------------------\n\nTITLE: Enabling User Packages in System Profile\nDESCRIPTION: Configuration to install packages to /etc/profiles instead of $HOME/.nix-profile\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nixos.md#2025-04-16_snippet_8\n\nLANGUAGE: nix\nCODE:\n```\nhome-manager.useUserPackages = true;\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation for Home Manager\nDESCRIPTION: Commands to build and view the HTML version of the Home Manager manual, which includes module option descriptions and general documentation.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/contributing/guidelines.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-build -A docs.html\n$ xdg-open ./result/share/doc/home-manager/index.html\n```\n\n----------------------------------------\n\nTITLE: Two-Step Home Manager Initialization\nDESCRIPTION: Commands to initialize Home Manager configuration without immediate activation, allowing for configuration review and editing before switching.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/nix-flakes/standalone.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnix run home-manager/$branch -- init\n# Edit files in ~/.config/home-manager\nnix run home-manager/$branch -- init --switch\n```\n\n----------------------------------------\n\nTITLE: Adding Home Manager Environment Variables to Shell with per-user profiles\nDESCRIPTION: Bash snippet to source Home Manager environment variables from the system's per-user profile. This is necessary when useUserPackages is enabled.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nix-darwin.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n. \"/etc/profiles/per-user/$USER/etc/profile.d/hm-session-vars.sh\"\n```\n\n----------------------------------------\n\nTITLE: Updating Home Manager via Nix Channel\nDESCRIPTION: Commands to update Home Manager by first updating the Nix channel and then switching to the updated environment. This is the standard update procedure for installations using the Nix channel method.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/usage/updating.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-channel --update\n…\nunpacking channels...\n$ home-manager switch\n```\n\n----------------------------------------\n\nTITLE: Example Commit Message for Home Manager\nDESCRIPTION: An example of a well-formatted commit message following the Home Manager guidelines, including a component prefix, brief description, and optional long description.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/contributing/guidelines.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nstarship: allow running in Emacs if vterm is used\n\nThe vterm buffer is backed by libvterm and can handle Starship prompts\nwithout issues.\n```\n\n----------------------------------------\n\nTITLE: Adding Home Manager Channel for Nixpkgs 24.11\nDESCRIPTION: Commands to add and update the Home Manager channel for users following Nixpkgs version 24.11. This adds the repository's release branch as a channel named 'home-manager'.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/standalone.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-channel --add https://github.com/nix-community/home-manager/archive/release-24.11.tar.gz home-manager\n$ nix-channel --update\n```\n\n----------------------------------------\n\nTITLE: Enabling DConf Service in NixOS Configuration\nDESCRIPTION: This snippet shows how to enable the DConf service in a NixOS system configuration to resolve errors related to missing DBus DConf service. Adding this to your NixOS configuration will fix errors about 'ca.desrt.dconf' or 'dconf.service'.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/faq/ca-desrt-dconf.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nprograms.dconf.enable = true;\n```\n\n----------------------------------------\n\nTITLE: Using Overlays for Package Replacement in Home Manager\nDESCRIPTION: Shows how to use nixpkgs overlays to replace a package when no package option is available, using skim as an example.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/faq/change-package-module.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, config, ... }:\n\nlet\n\n  pkgsUnstable = import <nixpkgs-unstable> {};\n\nin\n\n{\n  programs.skim.enable = true;\n\n  nixpkgs.overlays = [\n    (self: super: {\n      skim = pkgsUnstable.skim;\n    })\n  ];\n\n  # …\n}\n```\n\n----------------------------------------\n\nTITLE: Using Home Manager with Custom Path via Command Line Option\nDESCRIPTION: Command to run Home Manager with a custom repository path using the -I flag, allowing developers to temporarily use their cloned repository instead of the default installation.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/contributing/getting-started.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ home-manager -I home-manager=$HOME/devel/home-manager\n```\n\n----------------------------------------\n\nTITLE: Adding Home Manager Channel for NixOS (Unstable)\nDESCRIPTION: Commands to add and update the Home Manager channel for the unstable/master branch\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nixos.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager\n$ sudo nix-channel --update\n```\n\n----------------------------------------\n\nTITLE: Activating a Specific Home Manager Generation in Shell\nDESCRIPTION: This command activates a specific Home Manager generation by running the 'activate' script inside the chosen generation's Nix store path. It's the final step in performing a manual rollback.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/usage/rollbacks.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ /nix/store/mv960kl9chn2lal5q8lnqdp1ygxngcd1-home-manager-generation/activate\n```\n\n----------------------------------------\n\nTITLE: Using Global Package Configuration\nDESCRIPTION: Configuration to use system-level Nixpkgs configuration instead of per-user configuration\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nixos.md#2025-04-16_snippet_9\n\nLANGUAGE: nix\nCODE:\n```\nhome-manager.useGlobalPkgs = true;\n```\n\n----------------------------------------\n\nTITLE: Adding Home Manager Channel for NixOS 24.11\nDESCRIPTION: Commands to add and update the Home Manager channel for the 24.11 release\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nixos.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo nix-channel --add https://github.com/nix-community/home-manager/archive/release-24.11.tar.gz home-manager\n$ sudo nix-channel --update\n```\n\n----------------------------------------\n\nTITLE: Adding Home Manager Channel for Nixpkgs Master/Unstable in nix-darwin\nDESCRIPTION: Commands to add and update the Home Manager channel when following Nixpkgs master or unstable channel. This is required to make the Home Manager nix-darwin module available for use.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nix-darwin.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager\n$ nix-channel --update\n```\n\n----------------------------------------\n\nTITLE: Shell Configuration for NIX_PROFILE\nDESCRIPTION: Commands to source Home Manager environment variables in shell configuration\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nixos.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n. \"$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh\"\n```\n\n----------------------------------------\n\nTITLE: Adding Home Manager Channel for Nixpkgs 24.11 in nix-darwin\nDESCRIPTION: Commands to add and update the Home Manager channel when following a specific Nixpkgs version (24.11) channel. This makes the Home Manager nix-darwin module available for a stable release.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nix-darwin.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-channel --add https://github.com/nix-community/home-manager/archive/release-24.11.tar.gz home-manager\n$ nix-channel --update\n```\n\n----------------------------------------\n\nTITLE: Configuring Firefox Extensions Per-Profile in Home Manager (New Method)\nDESCRIPTION: This snippet demonstrates the new method of configuring Firefox extensions per-profile in Home Manager, introduced in the 23.05 release. It allows for more granular control over extensions for different Firefox profiles.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2305.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nprograms.firefox.profiles.myprofile.extensions = [ foo bar ];\n```\n\n----------------------------------------\n\nTITLE: Adding Home Manager Variables to Bash Profile\nDESCRIPTION: Command to source the Home Manager environment variables file in a Bash shell configuration. This should be added to your '~/.profile' file to ensure Home Manager settings are loaded.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/standalone.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n. \"$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh\"\n```\n\n----------------------------------------\n\nTITLE: Module Arguments Example\nDESCRIPTION: Example of accessing system NixOS configuration through osConfig module argument\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nixos.md#2025-04-16_snippet_10\n\nLANGUAGE: nix\nCODE:\n```\n{ lib, pkgs, osConfig, ... }:\n```\n\n----------------------------------------\n\nTITLE: Viewing Home Manager Configuration Documentation\nDESCRIPTION: Shell command to access the manual page for Home Manager configuration options. This provides a way to check option documentation directly from the terminal.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/usage.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nman home-configuration.nix\n```\n\n----------------------------------------\n\nTITLE: Initializing Home Manager with NixOS 24.11\nDESCRIPTION: Command to generate and activate a basic Home Manager configuration for NixOS 24.11 users.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/nix-flakes/standalone.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnix run home-manager/release-24.11 -- init --switch\n```\n\n----------------------------------------\n\nTITLE: Configuring NixGL with Home Manager using Nix Channels\nDESCRIPTION: An alternative configuration for NixGL that uses Nix channels instead of flakes. This snippet shows how to import NixGL packages when not using the flake-based approach, referencing NixGL as a channel.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/usage/gpu-non-nixos.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{ config, lib, pkgs, ... }:\n{\n  nixGL.packages = import <nixgl> { inherit pkgs; };\n  # The rest is the same as above\n  ...\n```\n\n----------------------------------------\n\nTITLE: Sourcing Home Manager Session Variables in Fish Shell\nDESCRIPTION: This snippet demonstrates how to source the Home Manager session variables file in Fish shell using the foreign-env plugin. It allows Fish shell to read and set environment variables from the Bourne shell compatible file.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/faq/session-variables.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfenv source \"$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh\" > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Installing Home Manager via nix-shell\nDESCRIPTION: Command to install Home Manager using nix-shell. This will generate an initial configuration that includes necessary options.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2009.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-shell '<home-manager>' -A install\n```\n\n----------------------------------------\n\nTITLE: Accessing System Configuration in Home Manager Modules\nDESCRIPTION: Example of a Home Manager module that accepts osConfig as an argument, which provides access to the system's nix-darwin configuration.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nix-darwin.md#2025-04-16_snippet_8\n\nLANGUAGE: nix\nCODE:\n```\n{ lib, pkgs, osConfig, ... }:\n```\n\n----------------------------------------\n\nTITLE: Home Manager Switch Command Output (Shell)\nDESCRIPTION: This shell output shows the result of running 'home-manager switch' when a file collision is detected. It demonstrates how Home Manager prevents overwriting existing files by halting the activation process.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/usage/dotfiles.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ home-manager switch\n…\nActivating checkLinkTargets\nExisting file '/home/jdoe/.config/git/config' is in the way\nPlease move the above files and try again\n```\n\n----------------------------------------\n\nTITLE: Setting Home Manager State Version in Nix\nDESCRIPTION: Basic configuration to set the home.stateVersion option, which is now required explicitly instead of defaulting to '18.09'.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2211.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nhome.stateVersion = \"18.09\";\n```\n\n----------------------------------------\n\nTITLE: Enabling X Server in NixOS System Configuration\nDESCRIPTION: System-level NixOS configuration to enable the X server, which is a prerequisite for Home Manager graphical services to function properly.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/usage/graphical.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  # …\n\n  services.xserver.enable = true;\n\n  # …\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Activation Script Using run Command\nDESCRIPTION: New recommended pattern for activation scripts using the 'run' command instead of $DRY_RUN_CMD. This is the preferred method for executing commands in activation scripts.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2405.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nhome.activation.reportChanges = config.lib.dag.entryAnywhere ''\n  if [[ -v oldGenPath ]]; then\n    run nix store diff-closures $oldGenPath $newGenPath\n  fi\n'';\n```\n\n----------------------------------------\n\nTITLE: Adding Home Manager Environment Variables to Shell with nix-profile\nDESCRIPTION: Bash snippet to source Home Manager environment variables from the user's nix-profile. This is necessary when Home Manager does not manage the shell configuration.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nix-darwin.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n. \"$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Manager Uninstall in Nix Flake\nDESCRIPTION: Configuration option to enable uninstallation of Home Manager in a Flake-based setup. When set to true, this will remove all managed files and Home Manager state from the user environment.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2405.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nuninstall = true;\n```\n\n----------------------------------------\n\nTITLE: Legacy Home Manager Configuration Structure\nDESCRIPTION: Example of the previous homeManagerConfiguration format using individual parameters for configuration settings.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2211.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nhomeManagerConfiguration {\n  configuration = import ./home.nix;\n  system = \"x86_64-linux\";\n  username = \"jdoe\";\n  homeDirectory = \"/home/jdoe\";\n  stateVersion = \"22.05\";\n  extraModules = [ ./some-extra-module.nix ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nix Darwin Template\nDESCRIPTION: Shell command to create a new nix-darwin configuration using a template from the home-manager repository.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/nix-flakes/nix-darwin.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nix flake new ~/.config/darwin -t github:nix-community/home-manager#nix-darwin\n```\n\n----------------------------------------\n\nTITLE: Home Manager Build Command in Shell\nDESCRIPTION: Alternative Home Manager command that builds the configuration without activating it, creating a result link to review before activation. This is useful for testing configurations before applying them.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/usage/configuration.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhome-manager build\n```\n\n----------------------------------------\n\nTITLE: Configuring Waybar Modules in Nix (21.11+)\nDESCRIPTION: Example of defining a custom Waybar module after the 21.11 state version changes, now directly under settings.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2111.md#2025-04-16_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\nprograms.waybar.settings.\"custom/my-module\" = { };\n```\n\n----------------------------------------\n\nTITLE: Enabling User Packages in nix-darwin Home Manager\nDESCRIPTION: Nix configuration to enable the useUserPackages option, which installs packages to /etc/profiles/per-user/$USERNAME instead of the user's nix-profile.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nix-darwin.md#2025-04-16_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\nhome-manager.useUserPackages = true;\n```\n\n----------------------------------------\n\nTITLE: Using Home Manager with Custom Path via Flakes Override\nDESCRIPTION: Command to run Home Manager with a custom repository path when using the flakes system, allowing developers to temporarily use their cloned repository via the --override-input option.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/contributing/getting-started.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ home-manager --override-input home-manager ~/devel/home-manager\n```\n\n----------------------------------------\n\nTITLE: Creating Basic DAG Entries in Nix Using entryAnywhere\nDESCRIPTION: Demonstrates how to create a DAG entry that can be placed anywhere within the directed acyclic graph. Shows both explicit and implicit syntax.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/writing-modules/types.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar = {\n  a = hm.dag.entryAnywhere 0;\n}\n```\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar = {\n  a = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pet Settings in Nix (Pre-21.11)\nDESCRIPTION: Example of setting Pet editor configuration before the 21.11 state version changes.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2111.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nprograms.pet.settings.editor = \"nvim\";\n```\n\n----------------------------------------\n\nTITLE: Using System Nixpkgs in nix-darwin Home Manager\nDESCRIPTION: Nix configuration to use the system's global pkgs instance instead of a private one. This saves an extra Nixpkgs evaluation, adds consistency, and removes dependency on NIX_PATH.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nix-darwin.md#2025-04-16_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\nhome-manager.useGlobalPkgs = true;\n```\n\n----------------------------------------\n\nTITLE: Custom Directory Home Manager Setup\nDESCRIPTION: Commands for initializing and switching Home Manager configuration using a custom configuration directory path.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/nix-flakes/standalone.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnix run home-manager/$branch -- init --switch ~/hmconf\n# And after the initial activation.\nhome-manager switch --flake ~/hmconf\n```\n\n----------------------------------------\n\nTITLE: Setting Taskwarrior Config in Nix (Pre-2.6.0)\nDESCRIPTION: Example of configuring Taskwarrior before version 2.6.0, which used ~/.taskrc.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2111.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nprograms.taskwarrior.config\n```\n\n----------------------------------------\n\nTITLE: Checking Home Manager Service Status\nDESCRIPTION: Command to check the status of Home Manager activation script output\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nixos.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ systemctl status \"home-manager-$USER.service\"\n```\n\n----------------------------------------\n\nTITLE: Htop Settings Configuration in Nix\nDESCRIPTION: Demonstrates the new consolidated htop settings configuration using the settings attribute.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2105.md#2025-04-16_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\nprograms.htop = {\n  enabled = true;\n  settings = {\n     color_scheme = 5;\n     delay = 15;\n     highlight_base_name = 1;\n     highlight_megabytes = 1;\n     highlight_threads = 1;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Creating DAG Entries with After Dependencies in Nix\nDESCRIPTION: Shows how to create DAG entries with explicit ordering where one entry must come after specified others using entryAfter.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/writing-modules/types.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar = {\n  a = 0;\n  b = hm.dag.entryAfter [ \"a\" ] 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom MPV Package Configuration in Nix\nDESCRIPTION: Demonstrates how to configure a custom MPV package with vapoursynth support and additional wrapper arguments.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2105.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nprograms.mpv.package = (pkgs.wrapMpv (pkgs.mpv-unwrapped.override {\n  vapoursynthSupport = true;\n}) {\n  extraMakeWrapperArgs = [\n    \"--prefix\" \"LD_LIBRARY_PATH\" \":\" \"${pkgs.vapoursynth-mvtools}/lib/vapoursynth\"\n  ];\n});\n```\n\n----------------------------------------\n\nTITLE: Shell Configuration for System Profiles\nDESCRIPTION: Alternative command to source Home Manager environment variables when using system profiles\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/nixos.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n. \"/etc/profiles/per-user/$USER/etc/profile.d/hm-session-vars.sh\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sway/i3 Bars in Home Manager\nDESCRIPTION: Example Nix configuration for setting up a custom bar command in Sway or i3 window managers. This demonstrates the new behavior where unspecified options default to null.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2009.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nbars = [ {\n  command = \"waybar\";\n} ];\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple DAG Entries Before Specific Entries in Nix\nDESCRIPTION: Demonstrates creating multiple DAG entries that should all come before specified entries using entriesBefore, with automatic sequential naming.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/writing-modules/types.md#2025-04-16_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar =\n  { b = 0; }\n  // hm.dag.entriesBefore \"a\" [ \"b\" ] [ 1 2 ];\n```\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar = {\n  b = 0;\n  a-0 = 1;\n  a-1 = hm.dag.entryBetween [ \"b\" ] [ \"a-0\" ] 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Font Configuration Type in Nix\nDESCRIPTION: Shows the updated font type configuration that includes both name and size attributes.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2105.md#2025-04-16_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\nfont = {\n  name = \"DejaVu Sans\";\n  size = 8;\n};\n```\n\n----------------------------------------\n\nTITLE: Updated Home Manager Configuration Structure\nDESCRIPTION: New simplified homeManagerConfiguration format using the modules list approach and mandatory pkgs parameter.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2211.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nhomeManagerConfiguration {\n  pkgs = nixpkgs.legacyPackages.${system};\n  modules = [\n    ./home.nix\n    ./some-extra-module.nix\n    {\n      home = {\n        username = \"jdoe\";\n        homeDirectory = \"/home/jdoe\";\n        stateVersion = \"22.05\";\n      };\n    }\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Newsboat RSS Feed URLs\nDESCRIPTION: This snippet shows the format for configuring RSS feed URLs in Newsboat. The first line demonstrates a feed with tags and a custom title, the second shows a basic URL without tags, and the third shows a query feed that filters URLs matching a pattern.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/modules/programs/newsboat/newsboat-basics-urls.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://example.org/feed.xml \"tag1\" \"tag2\" \"~Cool feed\"\nhttp://example.org/feed2.xml\n\"query:foo:rssurl =~ \\\"example.com\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Recommended Attribute Set Form for home.file in Nix (Home Manager)\nDESCRIPTION: This example shows the recommended attribute set form that should be used instead of the deprecated list form for configuring home.file in Home Manager.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2003.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nhome.file = {\n  \".config/foo.txt\".text = \"bar\";\n}\n```\n\n----------------------------------------\n\nTITLE: Running Individual Home Manager Test Case\nDESCRIPTION: This command demonstrates how to run a specific test case, in this example 'alacritty-empty-settings'. It allows for targeted testing of individual components.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/contributing/tests.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-shell --pure tests -A run.alacritty-empty-settings\n```\n\n----------------------------------------\n\nTITLE: Key-Value Pairs with Various Data Types in Nix Configuration\nDESCRIPTION: Examples of basic key-value pairs using different data types in Nix configuration, including numbers, strings, booleans, and null values. The syntax demonstrates simple assignments as well as more complex multi-value attributes and multiline strings with escape sequences.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/lib/generators/tokdl-result.txt#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\na 1\nb \"string\"\nbigFlatItems 23847590283751 1.239000 \"multiline \\\" \\\" \\\"\\nstring\\n\" null\nc \"multiline string\\nwith special characters:\\n\\t \\n \\\\\" \\\"\\n\"\nextraAttrs 2 true arg1=1 arg2=false {\n\tnested {\n\t\ta 1\n\t\tb null\n\t}\n}\nflatItems 1 2 \"asdf\" true null\nlistInAttrsInList {\n\tlist1 {\n\t\t- {\n\t\t\ta 1\n\t\t}\n\t\t- {\n\t\t\tb true\n\t\t}\n\t\t- {\n\t\t\tc null\n\t\t\td {\n\t\t\t\t- {\n\t\t\t\t\te \"asdfadfasdfasdf\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tlist2 {\n\t\t- {\n\t\t\ta 8\n\t\t}\n\t}\n}\nnested {\n\t- 1 2\n\t- true false\n\t- \n\t- null\n}\nunsafeString \" \\\" \\n \\t \"\n```\n\n----------------------------------------\n\nTITLE: Configuring Git with Home Manager in Nix\nDESCRIPTION: A Nix code snippet that configures Git through Home Manager by enabling the program and setting user email and name. This configuration makes the git executable available and creates the appropriate configuration file.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nprograms.git = {\n  enable = true;\n  userEmail = \"joe@example.org\";\n  userName = \"joe\";\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Waybar Modules in Home Manager - New Format\nDESCRIPTION: Example showing the new recommended way of configuring Waybar modules directly under programs.waybar.settings in Home Manager version 22.05 and later.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2205.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nprograms.waybar.settings.\"custom/my-module\" = { };\n```\n\n----------------------------------------\n\nTITLE: Running Individual Test with Locked Nixpkgs\nDESCRIPTION: This command runs a specific test ('alacritty-empty-settings') using the Nixpkgs version from the flake.lock file. It allows for consistent, targeted testing of individual components.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/contributing/tests.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ nix build --reference-lock-file flake.lock ./tests#test-alacritty-empty-settings\n```\n\n----------------------------------------\n\nTITLE: Recommended DAG-based SSH Match Blocks in Home Manager\nDESCRIPTION: This example demonstrates the recommended way to define ordered SSH match blocks using DAG entries in Home Manager, which should be used instead of the deprecated list form.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2003.md#2025-04-16_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\nprograms.ssh.matchBlocks = {\n  \"*.example.com\" = {\n    user = \"john.doe\";\n  }\n  \"alpha.example.com\" = lib.hm.dag.entryBefore [\"*.example.com\"] {\n    user = \"jd\";\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Generated Git Configuration File\nDESCRIPTION: The INI configuration file that would be generated by Home Manager at ~/.config/git/config based on the Nix configuration. It sets the user's email and name for Git.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[user]\n\temail = \"joe@example.org\"\n\tname = \"joe\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Waybar Modules in Nix (Pre-21.11)\nDESCRIPTION: Example of defining a custom Waybar module before the 21.11 state version changes.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2111.md#2025-04-16_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nprograms.waybar.settings.modules.\"custom/my-module\" = { };\n```\n\n----------------------------------------\n\nTITLE: Generating Man Pages for Home Manager Modules\nDESCRIPTION: Commands to build and view the man page version of the Home Manager module options, useful for checking changes made to a module.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/contributing/guidelines.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-build -A docs.manPages\n$ man ./result/share/man/man5/home-configuration.nix.5.gz\n```\n\n----------------------------------------\n\nTITLE: Setting pkgsPath for Nixpkgs in Home Manager Configuration\nDESCRIPTION: Nix configuration to set the pkgsPath to use <nixpkgs> with state version 20.09 or later. This is necessary if you want to continue using <nixpkgs> after the change in how the pkgs argument is built.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2009.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n_module.args.pkgsPath = <nixpkgs>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information in Home Manager (Nix)\nDESCRIPTION: This Nix code snippet demonstrates how to configure Git user information using Home Manager. It enables Git configuration and sets the user's name and email.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/usage/dotfiles.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  # …\n\n  programs.git = {\n    enable = true;\n    userName = \"Jane Doe\";\n    userEmail = \"jane.doe@example.org\";\n  };\n\n  # …\n}\n```\n\n----------------------------------------\n\nTITLE: Redshift Settings Configuration in Nix\nDESCRIPTION: Shows the new attribute set-based configuration for Redshift settings, including dawn/dusk times and display adjustments.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2105.md#2025-04-16_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nservices.redshift = {\n  dawnTime = \"6:00-7:45\";\n  duskTime = \"18:35-20:15\";\n  settings = {\n    redshift = {\n      gamma = 0.8;\n      adjustment-method = \"randr\";\n    };\n\n    randr = {\n      screen = 0;\n    };\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Updated Verbose Echo Activation Script\nDESCRIPTION: New recommended pattern for activation scripts using the 'verboseEcho' function instead of $VERBOSE_ECHO. This is the preferred method for verbose logging in activation scripts.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2405.md#2025-04-16_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nhome.activation.doThing = config.lib.dag.entryAnywhere ''\n  verboseEcho \"Doing the thing\"\n''\n```\n\n----------------------------------------\n\nTITLE: Enabling Flakes on a Per-Command Basis\nDESCRIPTION: This shell command demonstrates how to enable Nix Flakes experimental features on a per-command basis. It shows the additional flags needed for both the nix and home-manager commands.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/nix-flakes/prerequisites.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ nix --extra-experimental-features \"nix-command flakes\" <sub-commands>\n$ home-manager --extra-experimental-features \"nix-command flakes\" <sub-commands>\n```\n\n----------------------------------------\n\nTITLE: Migrating Broot Verbs Configuration in Nix\nDESCRIPTION: Shows the migration from attribute set to list format for broot verbs configuration. The new format requires moving keys into list items' invocation fields.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2105.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nprograms.broot.verbs = {\n  \"p\" = { execution = \":parent\"; };\n};\n```\n\nLANGUAGE: nix\nCODE:\n```\nprograms.broot.verbs = [\n  {\n    invocation = \"p\";\n    execution = \":parent\";\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Pet Settings in Nix (21.11+)\nDESCRIPTION: Example of setting Pet editor configuration after the 21.11 state version changes, now nested under General.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2111.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nprograms.pet.settings.General.editor = \"nvim\";\n```\n\n----------------------------------------\n\nTITLE: Generating News Entry File in Shell\nDESCRIPTION: Uses the create-news-entry.sh script to generate a new news entry file in the modules/misc/news directory with placeholder information for editing.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/contributing/news.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ modules/misc/news/create-news-entry.sh\n```\n\n----------------------------------------\n\nTITLE: Using mkForce for Systemd Service Configuration in Nix\nDESCRIPTION: Shows how to use the mkForce function to override systemd service configurations in the new type system for systemd unit options.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-1903.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nsystemd.user.services.foo.Service.ExecStart = lib.mkForce \"/foo/bar\";\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Unordered DAG Entries from a List in Nix\nDESCRIPTION: Shows how to create multiple DAG entries from a list using entriesAnywhere, which gives them sequential names with a provided tag.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/writing-modules/types.md#2025-04-16_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar = hm.dag.entriesAnywhere \"a\" [ 0 1 ];\n```\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar = {\n  a-0 = 0;\n  a-1 = hm.dag.entryAfter [ \"a-0\" ] 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Rofi Theme Configuration with Attribute Set in Nix\nDESCRIPTION: Demonstrates the new attribute set-based theme configuration for Rofi, including import statements and styled elements.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2105.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nprograms.rofi.theme = let\n  # Necessary to avoid quoting non-string values\n  inherit (config.lib.formats.rasi) mkLiteral;\nin {\n   \"@import\" = \"~/.config/rofi/theme.rasi\";\n\n  \"*\" = {\n    background-color = mkLiteral \"#000000\";\n    foreground-color = mkLiteral \"rgba ( 250, 251, 252, 100 % )\";\n    border-color = mkLiteral \"#FFFFFF\";\n    width = 512;\n  };\n\n  \"#textbox-prompt-colon\" = {\n    expand = false;\n    str = \":\";\n    margin = mkLiteral \"0px 0.3em 0em 0em\";\n    text-color = mkLiteral \"@foreground-color\";\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Including Nix-Darwin Options in Markdown\nDESCRIPTION: This code snippet uses a special include directive to generate a list of nix-darwin configuration options from a JSON source. It sets up the id prefix and list id for the generated content.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/nix-darwin-options.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{=include=} options\nid-prefix: nix-darwin-opt-\nlist-id: nix-darwin-options\nsource: @OPTIONS_JSON@\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Yazi Flavor with Git Clone\nDESCRIPTION: Commands to install a Yazi flavor theme by cloning the repository to the appropriate configuration directory. Shows installation paths for both Unix-like systems (Linux/macOS) and Windows.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/modules/programs/yazi/flavor/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Linux/macOS\ngit clone https://github.com/username/example.yazi.git ~/.config/yazi/flavors/example.yazi\n\n# Windows\ngit clone https://github.com/username/example.yazi.git %AppData%\\yazi\\config\\flavors\\example.yazi\n```\n\n----------------------------------------\n\nTITLE: Creating GVariant Integer Values in Nix\nDESCRIPTION: Shows how to create GVariant int32 values both explicitly and implicitly through automatic coercion.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/writing-modules/types.md#2025-04-16_snippet_10\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar = hm.gvariant.mkInt32 7;\n```\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar = 7;\n```\n\n----------------------------------------\n\nTITLE: Qt Style Configuration in Nix\nDESCRIPTION: Demonstrates configuration of Qt theme and platform theme settings with Gnome integration.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2105.md#2025-04-16_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\nqt = {\n  platformTheme = \"gnome\";\n  style = {\n    name = \"adwaita-dark\";\n    package = pkgs.adwaita-qt;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Creating DAG Entries with Before Dependencies in Nix\nDESCRIPTION: Shows how to create DAG entries with explicit ordering where one entry must come before specified others using entryBefore.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/writing-modules/types.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar = {\n  b = hm.dag.entryBefore [ \"a\" ] 1;\n  a = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple DAG Entries Between Specific Entries in Nix\nDESCRIPTION: Shows how to create multiple DAG entries that must come before certain entries and after others using entriesBetween, with automatic sequential naming.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/writing-modules/types.md#2025-04-16_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar =\n  { b = 0; c = 3; }\n  // hm.dag.entriesBetween \"a\" [ \"b\" ] [ \"c\" ] [ 1 2 ];\n```\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar = {\n  b = 0;\n  c = 3;\n  a-0 = hm.dag.entryAfter [ \"c\" ] 1;\n  a-1 = hm.dag.entryBetween [ \"b\" ] [ \"a-0\" ] 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Firefox Extensions in Home Manager (Old Method)\nDESCRIPTION: This snippet shows the old method of configuring Firefox extensions globally in Home Manager. It is no longer the recommended approach after the 23.05 release.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2305.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nprograms.firefox.extensions = [ foo bar ];\n```\n\n----------------------------------------\n\nTITLE: Configuring Rofi Theme in Nix\nDESCRIPTION: Example of moving Rofi configuration options to the theme attribute after version 1.7.0 changes.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2111.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nprograms.rofi.theme\n```\n\n----------------------------------------\n\nTITLE: Creating DAG Entries with Before and After Dependencies in Nix\nDESCRIPTION: Demonstrates creating DAG entries with complex ordering constraints that must come before certain entries and after others using entryBetween.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/writing-modules/types.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar = {\n  a = 0;\n  c = hm.dag.entryBetween [ \"b\" ] [ \"a\" ] 2;\n  b = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple DAG Entries After Specific Entries in Nix\nDESCRIPTION: Demonstrates creating multiple DAG entries that should all come after specified entries using entriesAfter, with automatic sequential naming.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/writing-modules/types.md#2025-04-16_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar =\n  { b = 0; }\n  // hm.dag.entriesAfter \"a\" [ \"b\" ] [ 1 2 ];\n```\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar = {\n  b = 0;\n  a-0 = hm.dag.entryAfter [ \"b\" ] 1;\n  a-1 = hm.dag.entryAfter [ \"a-0\" ] 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Rofi Extra Config Migration in Nix\nDESCRIPTION: Shows migration from string-based to attribute set-based configuration for Rofi's extra config options.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2105.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nprograms.rofi.extraConfig = ''\n  rofi.show-icons: true\n  rofi.modi: drun,emoji,ssh\n'';\n```\n\nLANGUAGE: nix\nCODE:\n```\nprograms.rofi.extraConfig = {\n  show-icons = true;\n  modi = \"drun,emoji,ssh\";\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring home.file with Special Characters in Nix\nDESCRIPTION: Demonstrates the new capability of the home.file._name_.source option to handle hidden files and source file names with special characters.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-1903.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nhome.file.\"my file\".source = ./. + \"/file with spaces!\";\n```\n\n----------------------------------------\n\nTITLE: Creating GVariant String Values in Nix\nDESCRIPTION: Shows how to create GVariant string values both explicitly and implicitly through automatic coercion.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/writing-modules/types.md#2025-04-16_snippet_9\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar = hm.gvariant.mkString \"a string\";\n```\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar = \"a string\";\n```\n\n----------------------------------------\n\nTITLE: Creating GVariant Basic Types in Nix\nDESCRIPTION: Defines basic GVariant types in home-manager including int64, uint64, double, variant, arrays, maybes, tuples, and dictionary entries.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/writing-modules/types.md#2025-04-16_snippet_12\n\nLANGUAGE: nix\nCODE:\n```\nhm.gvariant.type.int64           # GVariant format string `x`\nhm.gvariant.type.uint64          # GVariant format string `t`\nhm.gvariant.type.double          # GVariant format string `d`\nhm.gvariant.type.variant         # GVariant format string `v`\nhm.gvariant.type.arrayOf type    # GVariant format string `a${type}`\nhm.gvariant.type.maybeOf type    # GVariant format string `m${type}`\nhm.gvariant.type.tupleOf types   # GVariant format string `(${lib.concatStrings types})`\nhm.gvariant.type.dictionaryEntryOf [keyType valueType]  # GVariant format string `{${keyType}${valueType}}`\n```\n\n----------------------------------------\n\nTITLE: Defining JupyterLab Module Options in Home Manager (Nix)\nDESCRIPTION: This snippet defines the configuration options for the JupyterLab module in Home Manager. It includes settings for enabling the service, configuring the port, setting environment variables, and specifying package options.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/lib/generators/toscfg-empty-result.txt#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ config, lib, pkgs, ... }:\n\nwith lib;\n\nlet\n  cfg = config.services.jupyterLab;\nin\n{\n  options.services.jupyterLab = {\n    enable = mkEnableOption \"JupyterLab\";\n\n    package = mkOption {\n      type = types.package;\n      default = pkgs.python3Packages.jupyterlab;\n      defaultText = literalExpression \"pkgs.python3Packages.jupyterlab\";\n      description = \"The JupyterLab package to use.\";\n    };\n\n    port = mkOption {\n      type = types.port;\n      default = 8888;\n      description = \"Port to listen on.\";\n    };\n\n    bind = mkOption {\n      type = types.str;\n      default = \"127.0.0.1\";\n      description = \"IP to bind on.\";\n    };\n\n    extraFlags = mkOption {\n      type = types.listOf types.str;\n      default = [ ];\n      description = \"Extra flags to pass to jupyter-lab.\";\n      example = literalExpression ''[ \"--no-browser\" ]'';\n    };\n\n    settings = mkOption {\n      type = types.attrs;\n      default = { };\n      description = \"JupyterLab configuration.\";\n      example = literalExpression ''{\n        \"LabApp\" = {\n          \"ipython_config\" = {\n            \"InteractiveShell\" = {\n              \"colors\" = \"Linux\";\n            };\n          };\n        };\n      }'';\n    };\n\n    environment = mkOption {\n      type = types.attrs;\n      default = { };\n      description = \"Environment variables.\";\n      example = literalExpression ''{\n        PYTHONPATH = \"$HOME/.local/lib/python3.8/site-packages:$PYTHONPATH\";\n      }'';\n    };\n  };\n\n```\n\n----------------------------------------\n\nTITLE: Creating GVariant Double Values in Nix\nDESCRIPTION: Shows how to create GVariant double values both explicitly and implicitly through automatic coercion.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/writing-modules/types.md#2025-04-16_snippet_11\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar = hm.gvariant.mkDouble 3.14;\n```\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar = 3.14;\n```\n\n----------------------------------------\n\nTITLE: Creating GVariant Maybe Just Values in Nix\nDESCRIPTION: Function to create a GVariant maybe value that contains a specified element (Just).\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/writing-modules/types.md#2025-04-16_snippet_15\n\nLANGUAGE: nix\nCODE:\n```\nhm.gvariant.mkJust element\n```\n\n----------------------------------------\n\nTITLE: Implementing JupyterLab Service Configuration in Home Manager (Nix)\nDESCRIPTION: This snippet implements the configuration for the JupyterLab service in Home Manager. It creates the necessary service definition, generates configuration files, and sets up environment variables based on user configuration.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/lib/generators/toscfg-empty-result.txt#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n  config = mkIf cfg.enable {\n    home.packages = [ cfg.package ];\n\n    xdg.configFile.\"jupyter/jupyter_notebook_config.json\".text =\n      builtins.toJSON cfg.settings;\n\n    systemd.user.services.jupyter-lab = {\n      Unit = {\n        Description = \"JupyterLab\";\n        After = [ \"graphical-session-pre.target\" ];\n        PartOf = [ \"graphical-session.target\" ];\n      };\n\n      Service = {\n        ExecStart = ''${cfg.package}/bin/jupyter-lab \\\n          --port=${toString cfg.port} \\\n          --ip=${cfg.bind} \\\n          ${escapeShellArgs cfg.extraFlags}\n        '';\n        Environment = mapAttrsToList (name: value: \"${name}=${value}\") cfg.environment;\n        Restart = \"on-failure\";\n      };\n\n      Install = { WantedBy = [ \"graphical-session.target\" ]; };\n    };\n  };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Empty GVariant Arrays in Nix\nDESCRIPTION: Function to create an empty GVariant array of a specified type, which is an alias of hm.gvariant.mkArray with an empty list.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/writing-modules/types.md#2025-04-16_snippet_13\n\nLANGUAGE: nix\nCODE:\n```\nhm.gvariant.mkEmptyArray type\n```\n\n----------------------------------------\n\nTITLE: Creating GVariant Maybe Nothing Values in Nix\nDESCRIPTION: Function to create a GVariant maybe value with no content (Nothing) of a specified type.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/writing-modules/types.md#2025-04-16_snippet_14\n\nLANGUAGE: nix\nCODE:\n```\nhm.gvariant.mkNothing type\n```\n\n----------------------------------------\n\nTITLE: Configuring Yazi to Use Custom Flavor\nDESCRIPTION: TOML configuration snippet showing how to enable a custom flavor in Yazi's theme.toml configuration file. This setting tells Yazi which flavor to load when starting.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/modules/programs/yazi/flavor/README.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flavor]\nuse = \"example\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Home Manager Session Variables in Bash\nDESCRIPTION: This script sets up environment variables for a Home Manager session. It includes a check to prevent multiple sourcing and exports various variables including locale settings, custom variables, and XDG directory paths.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/modules/home-environment/session-variables-expected.txt#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Only source this once.\nif [ -n \"$__HM_SESS_VARS_SOURCED\" ]; then return; fi\nexport __HM_SESS_VARS_SOURCED=1\n@exportLocaleVar@\nexport V1=\"v1\"\nexport V2=\"v2-v1\"\nexport XDG_CACHE_HOME=\"/home/hm-user/.cache\"\nexport XDG_CONFIG_HOME=\"/home/hm-user/.config\"\nexport XDG_DATA_HOME=\"/home/hm-user/.local/share\"\n```\n\n----------------------------------------\n\nTITLE: Defining Packages in Home Manager Configuration\nDESCRIPTION: This Nix code snippet shows how to define packages to be installed by Home Manager in the configuration file.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/faq/collision.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nhome.packages = [ pkgs.hello ];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Option Assignment in Home Manager NixOS Module\nDESCRIPTION: This example demonstrates an incorrect way to assign a top-level option named 'config' in a Home Manager NixOS module, which must be updated in version 20.03.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2003.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nhome-manager.users.jane = { config = \"foo\"; };\n```\n\n----------------------------------------\n\nTITLE: Sourcing Home Manager Session Variables in Bash\nDESCRIPTION: Sources the Home Manager session variables file to set up the environment.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/modules/misc/xsession/basic-xprofile-expected.txt#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n. \"/home/hm-user/.nix-profile/etc/profile.d/hm-session-vars.sh\"\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Condition in Nix\nDESCRIPTION: Demonstrates how to add a platform-specific condition to a news entry, specifically for Linux-only modules using systemd.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/contributing/news.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\ncondition = hostPlatform.isLinux;\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Ignore Patterns for IDE and Build Directories\nDESCRIPTION: Defines patterns for Git to ignore when tracking changes, specifically excluding JetBrains IDE files (.idea directory and .iml files) and Haskell Stack build artifacts (.stack-work directory).\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/modules/programs/darcs/boring-expected.txt#2025-04-16_snippet_0\n\nLANGUAGE: gitignore\nCODE:\n```\n^.idea$\n.iml$\n^.stack-work$\n```\n\n----------------------------------------\n\nTITLE: Creating GVariant Boolean Values in Nix\nDESCRIPTION: Shows how to create GVariant boolean values both explicitly and implicitly through automatic coercion.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/writing-modules/types.md#2025-04-16_snippet_8\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar = hm.gvariant.mkBoolean true;\n```\n\nLANGUAGE: nix\nCODE:\n```\nfoo.bar = true;\n```\n\n----------------------------------------\n\nTITLE: Sourcing User Profile in Bash\nDESCRIPTION: Checks for the existence of a user profile file and sources it if present.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/modules/misc/xsession/basic-xprofile-expected.txt#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nif [ -e \"$HOME/.profile\" ]; then\n  . \"$HOME/.profile\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Version Overrides in Shell\nDESCRIPTION: This snippet defines two environment variables, V1 and V2, with specific override values. These variables are likely used to control version-specific behavior or configurations in the project.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/modules/misc/pam/session-variables-expected.txt#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nV1 OVERRIDE=\"v1\"\nV2 OVERRIDE=\"v2-v1\"\n```\n\n----------------------------------------\n\nTITLE: Home Manager Switch Command and Error Output\nDESCRIPTION: This shell snippet demonstrates the command to switch Home Manager generations and the resulting collision error output when a package conflict occurs.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/faq/collision.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ home-manager switch\nthese derivations will be built:\n  /nix/store/xg69wsnd1rp8xgs9qfsjal017nf0ldhm-home-manager-path.drv\n[…]\nActivating installPackages\nreplacing old 'home-manager-path'\ninstalling 'home-manager-path'\nbuilding path(s) '/nix/store/b5c0asjz9f06l52l9812w6k39ifr49jj-user-environment'\nWide character in die at /nix/store/64jc9gd2rkbgdb4yjx3nrgc91bpjj5ky-buildenv.pl line 79.\ncollision between '/nix/store/fmwa4axzghz11cnln5absh31nbhs9lq1-home-manager-path/bin/hello' and '/nix/store/c2wyl8b9p4afivpcz8jplc9kis8rj36d-hello-2.10/bin/hello'; use 'nix-env --set-flag priority NUMBER PKGNAME' to change the priority of one of the conflicting packages\nbuilder for '/nix/store/b37x3s7pzxbasfqhaca5dqbf3pjjw0ip-user-environment.drv' failed with exit code 2\nerror: build of '/nix/store/b37x3s7pzxbasfqhaca5dqbf3pjjw0ip-user-environment.drv' failed\n```\n\n----------------------------------------\n\nTITLE: Importing Environment Variables for User Session in Bash\nDESCRIPTION: Imports essential environment variables for the user session using systemctl.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/modules/misc/xsession/basic-xprofile-expected.txt#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl --user import-environment DBUS_SESSION_BUS_ADDRESS DISPLAY SSH_AUTH_SOCK XAUTHORITY XDG_DATA_DIRS XDG_RUNTIME_DIR XDG_SESSION_ID EXTRA_IMPORTED_VARIABLE\n```\n\n----------------------------------------\n\nTITLE: Correct Option Assignment in Home Manager NixOS Module\nDESCRIPTION: This example shows the correct way to assign a top-level option named 'config' in a Home Manager NixOS module for version 20.03 and later.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2003.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nhome-manager.users.jane = { config.config = \"foo\"; };\n```\n\n----------------------------------------\n\nTITLE: Generating Home Manager Options Documentation in Markdown\nDESCRIPTION: This code snippet is a placeholder for generating documentation of Home Manager configuration options. It uses an include directive to insert option details from an external JSON source file. The options are given an ID prefix and a list ID for organization.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/options.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{=include=} options\nid-prefix: opt-\nlist-id: home-manager-options\nsource: @OPTIONS_JSON@\n```\n```\n\n----------------------------------------\n\nTITLE: Creating GVariant Tuples in Nix\nDESCRIPTION: Function to create a GVariant tuple from a list of GVariant elements.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/writing-modules/types.md#2025-04-16_snippet_16\n\nLANGUAGE: nix\nCODE:\n```\nhm.gvariant.mkTuple elements\n```\n\n----------------------------------------\n\nTITLE: Sourcing X11 Profile in Home Manager Session\nDESCRIPTION: Conditionally sources the user's .xprofile file if it hasn't been sourced already, using an environment variable flag to prevent multiple sourcing.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/modules/misc/xsession/basic-xsession-expected.txt#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nif [ -z \"$HM_XPROFILE_SOURCED\" ]; then\n  . \"/home/hm-user/.xprofile\"\nfi\nunset HM_XPROFILE_SOURCED\n```\n\n----------------------------------------\n\nTITLE: Deprecated List Form for SSH Match Blocks in Home Manager\nDESCRIPTION: This example shows the deprecated list form for configuring SSH match blocks in Home Manager that will be removed in version 20.09.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2003.md#2025-04-16_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nprograms.ssh.matchBlocks = [\n  {\n    host = \"alpha.foo.com\";\n    user = \"jd\";\n  }\n  {\n    host = \"*.foo.com\";\n    user = \"john.doe\";\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Up Options Import Directive in Markdown for NixOS Documentation\nDESCRIPTION: This snippet defines an include directive in Markdown that imports NixOS configuration options from a JSON source. It configures the ID prefix as 'nixos-opt-' and sets the list ID to 'nixos-options'.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/nixos-options.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{=include=} options\nid-prefix: nixos-opt-\nlist-id: nixos-options\nsource: @OPTIONS_JSON@\n```\n```\n\n----------------------------------------\n\nTITLE: Creating GVariant Variant Values in Nix\nDESCRIPTION: Function to wrap a GVariant element in a variant container, using GVariant format string 'v'.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/writing-modules/types.md#2025-04-16_snippet_17\n\nLANGUAGE: nix\nCODE:\n```\nhm.gvariant.mkVariant element\n```\n\n----------------------------------------\n\nTITLE: Starting Home Manager Graphical Session\nDESCRIPTION: Starts the systemd user target for the Home Manager graphical session, which triggers the activation of all related user services.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/modules/misc/xsession/basic-xsession-expected.txt#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl --user start hm-graphical-session.target\n```\n\n----------------------------------------\n\nTITLE: Legacy Verbose Echo Activation Script\nDESCRIPTION: Deprecated activation script pattern using $VERBOSE_ECHO for verbose output. This pattern is being phased out in favor of the new 'verboseEcho' function.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2405.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nhome.activation.doThing = config.lib.dag.entryAnywhere ''\n  $VERBOSE_ECHO \"Doing the thing\"\n''\n```\n\n----------------------------------------\n\nTITLE: Configuring Waybar Modules in Home Manager - Old Format\nDESCRIPTION: Example showing the deprecated way of configuring Waybar modules under programs.waybar.settings.modules in Home Manager prior to version 22.05.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2205.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nprograms.waybar.settings.modules.\"custom/my-module\" = { };\n```\n\n----------------------------------------\n\nTITLE: Creating GVariant Dictionary Entries in Nix\nDESCRIPTION: Function to create a GVariant dictionary entry from a key-value pair of GVariant elements.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/writing-modules/types.md#2025-04-16_snippet_18\n\nLANGUAGE: nix\nCODE:\n```\nhm.gvariant.mkDictionaryEntry [key value]\n```\n\n----------------------------------------\n\nTITLE: Cleaning up Session Environment Variables\nDESCRIPTION: Unsets various X11 and session-related environment variables using systemctl to ensure a clean environment after the graphical session ends.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/modules/misc/xsession/basic-xsession-expected.txt#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl --user unset-environment DBUS_SESSION_BUS_ADDRESS DISPLAY SSH_AUTH_SOCK XAUTHORITY XDG_DATA_DIRS XDG_RUNTIME_DIR XDG_SESSION_ID EXTRA_IMPORTED_VARIABLE\n```\n\n----------------------------------------\n\nTITLE: Configuring htop Display Parameters\nDESCRIPTION: Configuration settings for htop system monitor including CPU display preferences, field visibility, update delay, and meter layouts. Defines both left and right panel meters along with their display modes.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/modules/programs/htop/example-htoprc.txt#2025-04-16_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\ncolor_scheme=6\ncpu_count_from_one=0\ndelay=15\nfields=0 48 17 18 38 39 40 2 46 47 49 1\nhighlight_base_name=1\nhighlight_megabytes=1\nhighlight_threads=1\nleft_meter_modes=1 1 1 2\nleft_meters=AllCPUs2 Memory Swap Zram\nright_meter_modes=2 2 2 2\nright_meters=Tasks LoadAverage Uptime Systemd\n```\n\n----------------------------------------\n\nTITLE: Configuring RSS Feed URLs with Tags in Home Manager\nDESCRIPTION: This snippet demonstrates how to add RSS feed URLs with tags and custom titles in Home Manager. It includes two example feed URLs with different configurations.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/modules/programs/newsboat/newsboat-basics-urls-2003.txt#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://example.org/feed.xml \"tag1\" \"tag2\" \"~Cool feed\"\nhttp://example.org/feed2.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring Readline Settings with Inputrc\nDESCRIPTION: Defines base readline behavior including bell style, case-sensitive completion, and custom key bindings. Includes system-wide inputrc settings and adds emacs-mode specific key mappings.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/modules/programs/readline/using-all-options.txt#2025-04-16_snippet_0\n\nLANGUAGE: inputrc\nCODE:\n```\n# Generated by Home Manager.\n\n$include /etc/inputrc\nset bell-style audible\nset completion-map-case on\nset completion-prefix-display-length 2\nControl-p: \"whups\"\n\"\\C-h\": backward-kill-word\n$if mode=emacs\n\"\\e[1~\": beginning-of-line\n$endif\n```\n\n----------------------------------------\n\nTITLE: Error Message from Home Manager Build Command\nDESCRIPTION: This shows the error output when building a Home Manager configuration with incorrect type assignment. It demonstrates how Home Manager validates configuration types during the build process.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/usage.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ home-manager build\nerror: A definition for option `programs.emacs.enable' is not of type `boolean'. Definition values:\n- In `/home/jdoe/.config/home-manager/home.nix': \"yes\"\n(use '--show-trace' to show detailed location information)\n```\n\n----------------------------------------\n\nTITLE: Defining RSS Query Filter in Home Manager\nDESCRIPTION: This snippet shows how to create a query filter for RSS feeds in Home Manager. It filters URLs containing 'example.com'.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/modules/programs/newsboat/newsboat-basics-urls-2003.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"query:foo:rssurl =~ \\\"example.com\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Directory Structure in Nix for Home Manager\nDESCRIPTION: This Nix code defines a directory structure with nested blocks and arguments. It uses the 'dir' function to create a top-level directory, with a nested block 'blk1' containing multiple sub-blocks and arguments.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/lib/generators/toscfg-example-result.txt#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\ndir {\n\tblk1 p1 \"\\\"p2\\\"\" {\n\t\tsub1 arg11 arg12\n\t\tsub2 arg21 arg22\n\t\tsub3 arg31 arg32 {\n\t\t\tsub-sub1\n\t\t\tsub-sub2 arg321 arg322\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Emacs Configuration in Home Manager\nDESCRIPTION: This snippet demonstrates the incorrect usage of a boolean option in Home Manager configuration, setting 'programs.emacs.enable' to a string value 'yes' instead of the required boolean value.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/usage.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nprograms.emacs.enable = \"yes\";\n```\n\n----------------------------------------\n\nTITLE: Including Release Notes Appendix in Home Manager Manual\nDESCRIPTION: Directive to include the release notes markdown file as an appendix, with output directed to a specific HTML file.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/manual.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n{=include=} appendix html:into-file=//release-notes.xhtml\nrelease-notes/release-notes.md\n```\n\n----------------------------------------\n\nTITLE: Path to Home Manager Environment Variables for User Profile\nDESCRIPTION: Path to the file containing Home Manager environment variables when using a user-specific Nix profile. This file needs to be sourced in your shell configuration if Home Manager isn't managing your shell.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/standalone.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Properties in Properties Format\nDESCRIPTION: This snippet shows a collection of configuration properties with various naming patterns, demonstrating how values might be merged or appended in a configuration system. It includes values with 'before/after' prefixes, list properties, and merged values separated by commas.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/lib/types/dag-merge-result.txt#2025-04-16_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nbefore:before\nmerged:left,middle,middle,right\nbetween:between\nafter:after\nlist-anywhere-0:list-anywhere-0\nlist-before-0:list-before-0,sneaky-merge\nlist-before-1:list-before-1\nlist-anywhere-1:list-anywhere-1\ninside-list:inside-list\nlist-after-0:list-after-0\nlist-after-1:list-after-1\nlist-anywhere-2:list-anywhere-2\n```\n\n----------------------------------------\n\nTITLE: Legacy Activation Script Using DRY_RUN_CMD\nDESCRIPTION: Deprecated activation script pattern using $DRY_RUN_CMD to compare generation closures. This pattern is being phased out in favor of the new 'run' command.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2405.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nhome.activation.reportChanges = config.lib.dag.entryAnywhere ''\n  if [[ -v oldGenPath ]]; then\n    $DRY_RUN_CMD nix store diff-closures $oldGenPath $newGenPath\n  fi\n'';\n```\n\n----------------------------------------\n\nTITLE: Path to Home Manager Environment Variables for System Profile\nDESCRIPTION: Path to the file containing Home Manager environment variables when managing home configuration together with system configuration. Used as an alternative to the user-specific path.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation/standalone.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n/etc/profiles/per-user/$USER/etc/profile.d/hm-session-vars.sh\n```\n\n----------------------------------------\n\nTITLE: Including Preface Section in Home Manager Manual\nDESCRIPTION: Directive to include the preface.md file in the manual structure.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/manual.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{=include=} preface\npreface.md\n```\n\n----------------------------------------\n\nTITLE: Referencing Home Manager Configuration Options in Markdown\nDESCRIPTION: This snippet demonstrates how to reference Home Manager configuration options using Markdown syntax. It includes links to specific options related to swayidle and eza modules.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2411.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[services.swayidle.extraArgs](#opt-services.swayidle.extraArgs)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[programs.eza.icons](#opt-programs.eza.icons)\n```\n\n----------------------------------------\n\nTITLE: Including Nix Darwin Options Appendix in Home Manager Manual\nDESCRIPTION: Directive to include the nix-darwin-options.md file as an appendix, with output directed to a specific HTML file.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/manual.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{=include=} appendix html:into-file=//nix-darwin-options.xhtml\nnix-darwin-options.md\n```\n\n----------------------------------------\n\nTITLE: Stopping Graphical Session and Waiting for Completion\nDESCRIPTION: Stops the graphical session systemd targets and then waits in a loop until all deactivating units have stopped completely, ensuring clean session termination.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/modules/misc/xsession/basic-xsession-expected.txt#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl --user stop graphical-session.target\nsystemctl --user stop graphical-session-pre.target\n\n# Wait until the units actually stop.\nwhile [ -n \"$(systemctl --user --no-legend --state=deactivating list-units)\" ]; do\n  sleep 0.5\ndone\n```\n\n----------------------------------------\n\nTITLE: Including Third-Party Collections Section in Markdown\nDESCRIPTION: Markdown include directive to import content from the third-party collections documentation file.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/3rd-party.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{=include=} sections\n3rd-party/collections.md\n```\n\n----------------------------------------\n\nTITLE: Stopping Previous Graphical Session Services in Bash\nDESCRIPTION: Stops any running services from a previous graphical session using systemctl.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/modules/misc/xsession/basic-xprofile-expected.txt#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl --user stop graphical-session.target graphical-session-pre.target\n```\n\n----------------------------------------\n\nTITLE: Including FAQ Documentation Sections in Markdown\nDESCRIPTION: Markdown include directive that specifies the FAQ documentation sections to be included in the main FAQ document. Lists paths to individual FAQ topic files.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/faq.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{=include=} sections\nfaq/collision.md\nfaq/session-variables.md\nfaq/multiple-users-machines.md\nfaq/ca-desrt-dconf.md\nfaq/unstable.md\nfaq/change-package-module.md\n```\n\n----------------------------------------\n\nTITLE: Setting XProfile Sourced Flag in Bash\nDESCRIPTION: Sets an environment variable to indicate that the xprofile has been sourced.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/tests/modules/misc/xsession/basic-xprofile-expected.txt#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport HM_XPROFILE_SOURCED=1\n```\n\n----------------------------------------\n\nTITLE: Listing All Home Manager Test Cases\nDESCRIPTION: This command lists all available test cases for the Home Manager project. It's useful for getting an overview of the test suite.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/contributing/tests.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-shell --pure tests -A list\n```\n\n----------------------------------------\n\nTITLE: Deprecated List Form for home.file in Nix (Home Manager)\nDESCRIPTION: This example shows the deprecated list form for configuring home.file in Home Manager that will produce a warning message in version 20.03 and will be removed in version 20.09.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/rl-2003.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nhome.file = [\n  {\n    target = \".config/foo.txt\";\n    text = \"bar\";\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Including Installation Sections in Markdown\nDESCRIPTION: This code snippet includes separate markdown files for different installation methods of Home Manager. It uses a custom include directive to incorporate standalone, NixOS, and nix-darwin installation instructions.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/installation.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{=include=} sections\ninstallation/standalone.md\ninstallation/nixos.md\ninstallation/nix-darwin.md\n```\n```\n\n----------------------------------------\n\nTITLE: Include Directive for Release Notes in Markdown\nDESCRIPTION: A markdown include directive that imports multiple release note files for different versions of Home Manager. The directive lists files in reverse chronological order, from the latest version (2505) to the earliest documented version (1809).\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/release-notes/release-notes.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{=include=} chapters\nrl-2505.md\nrl-2411.md\nrl-2405.md\nrl-2311.md\nrl-2305.md\nrl-2211.md\nrl-2205.md\nrl-2111.md\nrl-2105.md\nrl-2009.md\nrl-2003.md\nrl-1909.md\nrl-1903.md\nrl-1809.md\n```\n\n----------------------------------------\n\nTITLE: Querying Installed Packages in Nix Environment\nDESCRIPTION: This snippet demonstrates how to query the packages installed in the Nix environment using the nix-env command.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/faq/collision.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-env --query\nhello-2.10\n```\n\n----------------------------------------\n\nTITLE: Including Main Content Parts in Home Manager Manual\nDESCRIPTION: Directive to include the main content sections of the manual, structured as separate markdown files covering topics from introduction to FAQ.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/manual.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{=include=} parts\nintroduction.md\ninstallation.md\nusage.md\nnix-flakes.md\nwriting-modules.md\ncontributing.md\n3rd-party.md\nfaq.md\n```\n\n----------------------------------------\n\nTITLE: Including Options Appendix in Home Manager Manual\nDESCRIPTION: Directive to include the options.md file as an appendix, with output directed to a specific HTML file.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/manual.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{=include=} appendix html:into-file=//options.xhtml\noptions.md\n```\n\n----------------------------------------\n\nTITLE: Including NixOS Options Appendix in Home Manager Manual\nDESCRIPTION: Directive to include the nixos-options.md file as an appendix, with output directed to a specific HTML file.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/manual.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{=include=} appendix html:into-file=//nixos-options.xhtml\nnixos-options.md\n```\n\n----------------------------------------\n\nTITLE: Displaying Note on Root Commands in Markdown\nDESCRIPTION: This snippet uses Markdown syntax to create a note block explaining that commands prefixed with '$ sudo' need to be run with root privileges.\nSOURCE: https://github.com/nix-community/home-manager/blob/master/docs/manual/preface.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::{.note}\nCommands prefixed with `$ sudo` have to be run as root, either\nrequiring to login as root user or temporarily switching to it using\n`sudo` for example.\n:::\n```"
  }
]