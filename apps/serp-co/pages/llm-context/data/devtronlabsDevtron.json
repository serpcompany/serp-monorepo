[
  {
    "owner": "devtron-labs",
    "repo": "devtron",
    "content": "TITLE: Installing Devtron with Default Configuration using Helm3\nDESCRIPTION: Commands to add Devtron helm repository and install Devtron operator in hyperion mode using default configurations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/setup/install.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai\nhelm install devtron devtron/devtron-operator --create-namespace --namespace devtroncd --set installer.mode=hyperion\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe in Kubernetes Deployment Chart\nDESCRIPTION: YAML configuration for Kubernetes liveness probes that determine when to restart a container. Supports HTTP, TCP, and gRPC checks with customizable timing parameters and headers. If this check fails, Kubernetes will restart the pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n  grpc:\n    port: 8080\n    service: \"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron Platform using Helm\nDESCRIPTION: Helm command to install the latest version of Devtron Platform with CICD, ArgoCD, security features, notifications, Trivy scanning, and Grafana monitoring enabled.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm install devtron devtron/devtron-operator --namespace devtroncd \\\n--set installer.modules={cicd} --set argo-cd.enabled=true \\ \n--set security.enabled=true  --set notifier.enabled=true  \\\n--set security.trivy.enabled=true --set monitoring.grafana.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to set up an Ingress resource in Kubernetes. It includes options for enabling Ingress, setting the Ingress class, specifying hosts and paths, and configuring TLS.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Canary Deployment Strategy in Devtron\nDESCRIPTION: Configuration for Canary deployments in Devtron. This strategy deploys changes to a subset of users or servers first, then gradually rolls out to the rest. Parameters define weight steps, pauses between steps, and maximum surge/unavailable pods.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/workflow/cd-pipeline.md#2025-04-22_snippet_4\n\nLANGUAGE: markup\nCODE:\n```\ncanary:\n  maxSurge: \"25%\"\n  maxUnavailable: 1\n  steps:\n    - setWeight: 25\n    - pause:\n        duration: 15 # 1 min\n    - setWeight: 50\n    - pause:\n        duration: 15 # 1 min\n    - setWeight: 75\n    - pause:\n        duration: 15 # 1 min\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Various Kubernetes Deployments\nDESCRIPTION: This snippet provides instructions to obtain the application URL for different Kubernetes deployment scenarios, including ingress-enabled, NodePort, LoadBalancer, and ClusterIP service types. It uses Helm templating to generate appropriate commands based on the deployment configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Restarting Devtron Installation after Error\nDESCRIPTION: These commands clean up components installed by the Devtron installer. It deletes resources in the 'devtroncd' namespace and removes the status from the installer. This prepares the system for a fresh installation using Helm3.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-helm-3.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd devtron-installation-script/\nkubectl delete -n devtroncd -f yamls/\nkubectl -n devtroncd patch installer installer-devtron --type json -p '[{\"op\": \"remove\", \"path\": \"/status\"}]'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Various Kubernetes Service Types\nDESCRIPTION: This snippet uses Go templating to generate commands for retrieving the application URL based on the Kubernetes service type and ingress configuration. It handles Ingress, NodePort, LoadBalancer, and ClusterIP scenarios.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: GoTemplate\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using MessagePack in Go\nDESCRIPTION: Demonstrates how to use the MessagePack library to marshal and unmarshal Go structs. The example shows creating a simple struct, encoding it to MessagePack format, and then decoding it back into a struct instance.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/vmihailenco/msgpack/v5/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/vmihailenco/msgpack/v5\"\n\nfunc ExampleMarshal() {\n    type Item struct {\n        Foo string\n    }\n\n    b, err := msgpack.Marshal(&Item{Foo: \"bar\"})\n    if err != nil {\n        panic(err)\n    }\n\n    var item Item\n    err = msgpack.Unmarshal(b, &item)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(item.Foo)\n    // Output: bar\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Affinity and Anti-Affinity in Kubernetes YAML\nDESCRIPTION: This snippet shows the structure for defining node affinity rules in Kubernetes. It allows for constraining pod scheduling based on node labels.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Prometheus in Kubernetes YAML\nDESCRIPTION: This YAML configuration sets up KEDA (Kubernetes-based Event Driven Autoscaler) using Prometheus metrics. It defines scaling parameters, triggers, and authentication for dynamic pod scaling based on custom metrics.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in Kubernetes Deployment\nDESCRIPTION: Defines the port configuration for exposing application services including envoy ports, service ports, and node ports with HTTP/2 and streaming support.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    nodePort: 32056\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Containers in a Pod\nDESCRIPTION: YAML configuration for defining multiple containers within a pod, including a side-car container. Shows how to configure container ports, commands, arguments, and volume mounts, with an option to reuse the base container image.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n      - reuseContainerImage: true\n        securityContext:\n          runAsUser: 1000\n          runAsGroup: 3000\n          fsGroup: 2000\n        volumeMounts:\n        - mountPath: /etc/ls-oms\n          name: ls-oms-cm-vol\n        command:\n          - flyway\n          - -configFiles=/etc/ls-oms/flyway.conf\n          - migrate\n```\n\n----------------------------------------\n\nTITLE: Using Comparison Conditions in Go with builder\nDESCRIPTION: Examples showing how to use comparison operators (Gt, Gte, Lt, Lte) to construct comparison conditions for SQL queries.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/builder/README.md#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nimport . \"xorm.io/builder\"\n\nsql, args, _ := ToSQL(Gt{\"a\", 1}.And(Gte{\"b\", 2}))\n// a>? AND b>=? [1, 2]\nsql, args, _ := ToSQL(Lt{\"a\", 1}.Or(Lte{\"b\", 2}))\n// a<? OR b<=? [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Implementing KEDA Autoscaling with Prometheus Metrics\nDESCRIPTION: Configures Kubernetes Event-Driven Autoscaling (KEDA) using Prometheus metrics. Defines scaling thresholds, replica counts, polling intervals, and scale-down behavior based on custom metrics.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress in Kubernetes YAML\nDESCRIPTION: This YAML snippet defines an Ingress configuration for Kubernetes. It includes options for enabling Ingress, setting the Ingress class, specifying hosts and paths, and configuring TLS.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Winter-Soldier Configuration for Scheduled Scaling\nDESCRIPTION: Demonstrates a complete Winter-Soldier configuration for scheduled resource scaling. Defines time ranges for weekdays and weekends with different scaling behaviors, and uses field selectors to target specific resources based on creation time.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nwinterSoldier:\n  apiVersion: pincher.devtron.ai/v1alpha1 \n  enabled: true\n  annotations: {}\n  labels: {}\n  timeRangesWithZone:\n    timeZone: \"Asia/Kolkata\"\n    timeRanges: \n      - timeFrom: 00:00\n        timeTo: 23:59:59\n        weekdayFrom: Sat\n        weekdayTo: Sun\n      - timeFrom: 00:00\n        timeTo: 08:00\n        weekdayFrom: Mon\n        weekdayTo: Fri\n      - timeFrom: 20:00\n        timeTo: 23:59:59\n        weekdayFrom: Mon\n        weekdayTo: Fri\n  action: scale\n  targetReplicas: [1,1,1]\n  fieldSelector: \n    - AfterTime(AddTime( ParseTime({{metadata.creationTimestamp}}, '2006-01-02T15:04:05Z'), '10h'), Now())\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe\nDESCRIPTION: Defines readiness probe configuration for service availability checking including HTTP, TCP, and gRPC probe options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n  grpc:\n    port: 8080\n    service: \"\"\n```\n\n----------------------------------------\n\nTITLE: Autoscaling Configuration\nDESCRIPTION: HPA configuration for automatic scaling based on resource utilization.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with Ingress Values File\nDESCRIPTION: Command to install Devtron using a values file for Ingress configuration. This applies the settings from the ingress-values.yaml file.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/ingress-setup.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm install devtron devtron/devtron-operator -n devtroncd  --reuse-values  -f ingress-values.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring StatefulSet and PersistentVolumeClaims in YAML\nDESCRIPTION: Defines the StatefulSet configuration including labels, annotations, service name, pod management policy, and volume claim templates. Includes detailed PersistentVolumeClaim specifications with access modes, data sources, and resource requests.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstatefulSetConfig:\n  labels:\n    app: my-statefulset\n    environment: production\n  annotations:\n    example.com/version: \"1.0\"\n  serviceName: \"my-statefulset-service\"\n  podManagementPolicy: \"Parallel\"\n  revisionHistoryLimit: 5\n  mountPath: \"/data\"\n  volumeClaimTemplates:\n    - apiVersion: v1\n      kind: PersistentVolumeClaim\n      metadata:\n        labels:\n          app: my-statefulset\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        dataSource:\n          kind: Snapshot\n          apiGroup: snapshot.storage.k8s.io\n          name: my-snapshot\n        resources:\n          requests:\n            storage: 5Gi\n          limits:\n            storage: 10Gi\n        storageClassName: my-storage-class\n        selector:\n          matchLabels:\n            app: my-statefulset\n        volumeMode: Filesystem\n        volumeName: my-pv\n  - apiVersion: v1\n    kind: PersistentVolumeClaim\n    metadata:\n      name: pvc-logs\n      labels:\n        app: myapp\n    spec:\n      accessModes:\n        - ReadWriteMany\n      dataSourceRef:\n        kind: Secret\n        apiGroup: v1\n        name: my-secret\n      resources:\n        requests:\n          storage: 5Gi\n      storageClassName: my-storage-class\n      selector:\n        matchExpressions:\n          - {key: environment, operator: In, values: [production]}\n      volumeMode: Block\n      volumeName: my-pv\n```\n\n----------------------------------------\n\nTITLE: Configuring Containers for Kubernetes Deployment in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure multiple containers within a Kubernetes pod, including setting up a main container and a sidecar. It shows options for specifying image, ports, commands, and volume mounts.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ncontainers:\n  - name: nginx\n    image: nginx:1.14.2\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n    - mountPath: /etc/ls-oms\n      name: ls-oms-cm-vol\n    command:\n      - flyway\n      - -configFiles=/etc/ls-oms/flyway.conf\n      - migrate\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL in Kubernetes Environment\nDESCRIPTION: A helm template that generates appropriate commands to fetch the application URL based on the service type configured. Handles different scenarios including Ingress configurations, NodePort services, LoadBalancer services, and ClusterIP services. The template uses conditional logic to output the correct command sequence for each service type.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Casbin with PostgreSQL using Xorm Adapter in Go\nDESCRIPTION: This example shows how to connect Casbin to a PostgreSQL database using the Xorm adapter. It covers initialization, database connection, policy loading, permission checking, and saving policies.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/xorm-adapter/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/casbin/casbin\"\n\t\"github.com/casbin/xorm-adapter\"\n\t_ \"github.com/lib/pq\"\n)\n\nfunc main() {\n\t// Initialize a Xorm adapter and use it in a Casbin enforcer:\n\t// The adapter will use the Postgres database named \"casbin\".\n\t// If it doesn't exist, the adapter will create it automatically.\n\ta := xormadapter.NewAdapter(\"postgres\", \"user=postgres_username password=postgres_password host=127.0.0.1 port=5432 sslmode=disable\") // Your driver and data source.\n\n\t// Or you can use an existing DB \"abc\" like this:\n\t// The adapter will use the table named \"casbin_rule\".\n\t// If it doesn't exist, the adapter will create it automatically.\n\t// a := xormadapter.NewAdapter(\"postgres\", \"dbname=abc user=postgres_username password=postgres_password host=127.0.0.1 port=5432 sslmode=disable\", true)\n\n\te := casbin.NewEnforcer(\"../examples/rbac_model.conf\", a)\n\n\t// Load the policy from DB.\n\te.LoadPolicy()\n\n\t// Check the permission.\n\te.Enforce(\"alice\", \"data1\", \"read\")\n\n\t// Modify the policy.\n\t// e.AddPolicy(...)\n\t// e.RemovePolicy(...)\n\n\t// Save the policy back to DB.\n\te.SavePolicy()\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Application URL Based on Service Type\nDESCRIPTION: Template logic to generate appropriate commands for retrieving the application URL based on the service type configured in Kubernetes. Handles different scenarios including Ingress, NodePort, LoadBalancer, and ClusterIP service types. Uses Helm templating to inject values from the chart configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure Istio service mesh features in Kubernetes. It includes settings for gateways, virtual services, traffic management, and security options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nistio:\n  enable: true\n  gateway:\n    annotations: {}\n    enabled: false\n    host: example.com\n    labels: {}\n    tls:\n      enabled: false\n      secretName: example-tls-secret\n  virtualService:\n    annotations: {}\n    enabled: false\n    gateways: []\n    hosts: []\n    http:\n      - corsPolicy:\n          allowCredentials: false\n          allowHeaders:\n            - x-some-header\n          allowMethods:\n            - GET\n          allowOrigin:\n            - example.com\n          maxAge: 24h\n        headers:\n          request:\n            add:\n              x-some-header: value\n        match:\n          - uri:\n              prefix: /v1\n          - uri:\n              prefix: /v2\n        retries:\n          attempts: 2\n          perTryTimeout: 3s\n        rewriteUri: /\n        route:\n          - destination:\n              host: service1\n              port: 80\n        timeout: 12s\n      - route:\n          - destination:\n              host: service2\n    labels: {}\n```\n\n----------------------------------------\n\nTITLE: Basic Workerpool Usage Example in Go\nDESCRIPTION: Demonstrates how to create and use a worker pool to process multiple requests concurrently. Creates a pool with 2 workers and submits 5 tasks for processing.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/gammazero/workerpool/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gammazero/workerpool\"\n)\n\nfunc main() {\n\twp := workerpool.New(2)\n\trequests := []string{\"alpha\", \"beta\", \"gamma\", \"delta\", \"epsilon\"}\n\n\tfor _, r := range requests {\n\t\tr := r\n\t\twp.Submit(func() {\n\t\t\tfmt.Println(\"Handling request:\", r)\n\t\t})\n\t}\n\n\twp.StopWait()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Kubernetes Autoscaling Configuration\nDESCRIPTION: YAML configuration for Horizontal Pod Autoscaling (HPA) that controls scaling based on CPU and memory utilization. Includes min/max replicas and target utilization percentages.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Complete StatefulSet Configuration\nDESCRIPTION: Full configuration example for StatefulSet including labels, annotations, PVC templates, and volume configurations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstatefulSetConfig:\n  labels:\n    app: my-statefulset\n    environment: production\n  annotations:\n    example.com/version: \"1.0\"\n  serviceName: \"my-statefulset-service\"\n  podManagementPolicy: \"Parallel\"\n  revisionHistoryLimit: 5\n  mountPath: \"/data\"\n  volumeClaimTemplates:\n    - apiVersion: v1\n      kind: PersistentVolumeClaim\n      metadata:\n        labels:\n          app: my-statefulset\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        dataSource:\n          kind: Snapshot\n          apiGroup: snapshot.storage.k8s.io\n          name: my-snapshot\n        resources:\n          requests:\n            storage: 5Gi\n          limits:\n            storage: 10Gi\n        storageClassName: my-storage-class\n        selector:\n          matchLabels:\n            app: my-statefulset\n        volumeMode: Filesystem\n        volumeName: my-pv\n  - apiVersion: v1\n    kind: PersistentVolumeClaim\n    metadata:\n      name: pvc-logs\n      labels:\n        app: myapp\n    spec:\n      accessModes:\n        - ReadWriteMany\n      dataSourceRef:\n        kind: Secret\n        apiGroup: v1\n        name: my-secret\n      resources:\n        requests:\n          storage: 5Gi\n      storageClassName: my-storage-class\n      selector:\n        matchExpressions:\n          - {key: environment, operator: In, values: [production]}\n      volumeMode: Block\n      volumeName: my-pv\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Containers in a Pod\nDESCRIPTION: Defines sidecar containers to run alongside the main container within the same pod. Containers in the same pod can share volumes and network space, and can reuse the base container image by setting reuseContainerImage to true.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n      - reuseContainerImage: true\n        securityContext:\n          runAsUser: 1000\n          runAsGroup: 3000\n          fsGroup: 2000\n        volumeMounts:\n        - mountPath: /etc/ls-oms\n          name: ls-oms-cm-vol\n        command:\n          - flyway\n          - -configFiles=/etc/ls-oms/flyway.conf\n          - migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Affinity and Anti-Affinity in YAML\nDESCRIPTION: This YAML snippet defines the configuration for Kubernetes Affinity and Anti-Affinity rules. It specifies how pods can be scheduled based on node labels and other pod placements.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Basic REST Endpoint Implementation\nDESCRIPTION: Demonstrates setting up a basic REST endpoint for user resources with path parameters, content types, and route handling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/emicklei/go-restful/v3/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nws := new(restful.WebService)\nws.\n\tPath(\"/users\").\n\tConsumes(restful.MIME_XML, restful.MIME_JSON).\n\tProduces(restful.MIME_JSON, restful.MIME_XML)\n\nws.Route(ws.GET(\"/{user-id}\").To(u.findUser).\n\tDoc(\"get a user\").\n\tParam(ws.PathParameter(\"user-id\", \"identifier of the user\").DataType(\"string\")).\n\tWrites(User{}))\n...\n\nfunc (u UserResource) findUser(request *restful.Request, response *restful.Response) {\n\tid := request.PathParameter(\"user-id\")\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe for Kubernetes Containers\nDESCRIPTION: Defines health check parameters that Kubernetes uses to determine if a pod needs to be restarted. Includes path configuration, timing parameters, and TCP socket options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers in Kubernetes YAML\nDESCRIPTION: This YAML snippet defines Init Containers for a Kubernetes deployment. It includes options for reusing container images, setting security contexts, volume mounts, and specifying commands and arguments for the init containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n    image: nginx:1.14.2\n    securityContext:\n      privileged: true\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Deployment Configuration Override Example - YAML\nDESCRIPTION: Example of environment-specific deployment template override showing how to customize deployment configurations per environment. This allows specifying different resource requirements like CPU allocation between production and non-production environments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/environment-overrides.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Production environment override example\nresources:\n  limits:\n    cpu: 500m\n  requests:\n    cpu: 500m\n\n# Non-production environment override example\nresources:\n  limits:\n    cpu: 100m\n  requests:\n    cpu: 100m\n```\n\n----------------------------------------\n\nTITLE: Implementing Container Lifecycle Hooks in Kubernetes\nDESCRIPTION: Configures PostStart and PreStop lifecycle hooks for a container. PostStart executes immediately after container creation, while PreStop runs just before container termination, allowing for custom actions at specific lifecycle stages.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSpec:\n  lifecycle:\n    enabled: false\n    postStart:\n      httpGet:\n        host: example.com\n        path: /example\n        port: 90\n    preStop:\n      exec:\n        command:\n          - sleep\n          - \"10\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Containers in Kubernetes YAML\nDESCRIPTION: This snippet shows how to configure multiple containers within a single pod in Kubernetes. It includes examples of setting image, ports, commands, and volume mounts for containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\ncontainers:\n  - name: nginx\n    image: nginx:1.14.2\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n    - mountPath: /etc/ls-oms\n      name: ls-oms-cm-vol\n    command:\n      - flyway\n      - -configFiles=/etc/ls-oms/flyway.conf\n      - migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress in Kubernetes YAML\nDESCRIPTION: Sets up Ingress for public access to the application. Includes options for Ingress class, annotations, hosts, paths, and TLS configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Kafka in Kubernetes YAML\nDESCRIPTION: Sets up KEDA autoscaling based on Kafka metrics. This configuration allows for scaling based on Kafka topic lag and includes authentication for secure Kafka clusters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe in Kubernetes Deployment Chart\nDESCRIPTION: YAML configuration for Kubernetes readiness probes that determine when a container is ready to accept traffic. Supports HTTP, TCP, and gRPC checks with customizable timing parameters and headers. If this check fails, Kubernetes stops sending traffic to the pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n  grpc:\n    port: 8080\n    service: \"\"\n```\n\n----------------------------------------\n\nTITLE: Basic NATS Usage in Go\nDESCRIPTION: Demonstrates basic NATS operations including connecting to a server, publishing messages, subscribing to topics, handling requests and replies, and managing connections.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/nats-io/nats.go\"\n\n// Connect to a server\nnc, _ := nats.Connect(nats.DefaultURL)\n\n// Simple Publisher\nnc.Publish(\"foo\", []byte(\"Hello World\"))\n\n// Simple Async Subscriber\nnc.Subscribe(\"foo\", func(m *nats.Msg) {\n    fmt.Printf(\"Received a message: %s\\n\", string(m.Data))\n})\n\n// Responding to a request message\nnc.Subscribe(\"request\", func(m *nats.Msg) {\n    m.Respond([]byte(\"answer is 42\"))\n})\n\n// Simple Sync Subscriber\nsub, err := nc.SubscribeSync(\"foo\")\nm, err := sub.NextMsg(timeout)\n\n// Channel Subscriber\nch := make(chan *nats.Msg, 64)\nsub, err := nc.ChanSubscribe(\"foo\", ch)\nmsg := <- ch\n\n// Unsubscribe\nsub.Unsubscribe()\n\n// Drain\nsub.Drain()\n\n// Requests\nmsg, err := nc.Request(\"help\", []byte(\"help me\"), 10*time.Millisecond)\n\n// Replies\nnc.Subscribe(\"help\", func(m *nats.Msg) {\n    nc.Publish(m.Reply, []byte(\"I can help!\"))\n})\n\n// Drain connection (Preferred for responders)\n// Close() not needed if this is called.\nnc.Drain()\n\n// Close connection\nnc.Close()\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in Kubernetes Deployment Chart\nDESCRIPTION: Configuration for exposing application services in Kubernetes. Defines ports for container, service, nodePort with additional Envoy proxy settings like HTTP2 support and streaming options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    nodePort: 32056\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Kafka in Kubernetes YAML\nDESCRIPTION: This snippet shows how to configure KEDA autoscaling using Kafka in Kubernetes. It specifies Kafka-specific parameters, triggers, and authentication details.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Setting Up Service Monitor for Kubernetes in YAML\nDESCRIPTION: This YAML configuration defines a service monitor for Kubernetes. It specifies monitoring parameters such as the path, scheme, interval, and metric relabeling rules for Prometheus monitoring.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal Pod Autoscaling\nDESCRIPTION: Defines HorizontalPodAutoscaler configuration for automatic scaling based on resource utilization.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  containerResource:\n    enabled: true\n    TargetCPUUtilizationPercentage: 90\n    TargetMemoryUtilizationPercentage: 80\n\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio in Kubernetes YAML\nDESCRIPTION: This snippet shows how to configure Istio service mesh in Kubernetes. It includes settings for enabling Istio, configuring gateways, virtual services, and various traffic management options like CORS policies, headers, and routing rules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nistio:\n  enable: true\n  gateway:\n    annotations: {}\n    enabled: false\n    host: example.com\n    labels: {}\n    tls:\n      enabled: false\n      secretName: example-tls-secret\n  virtualService:\n    annotations: {}\n    enabled: false\n    gateways: []\n    hosts: []\n    http:\n      - corsPolicy:\n          allowCredentials: false\n          allowHeaders:\n            - x-some-header\n          allowMethods:\n            - GET\n          allowOrigin:\n            - example.com\n          maxAge: 24h\n        headers:\n          request:\n            add:\n              x-some-header: value\n        match:\n          - uri:\n              prefix: /v1\n          - uri:\n              prefix: /v2\n        retries:\n          attempts: 2\n          perTryTimeout: 3s\n        rewriteUri: /\n        route:\n          - destination:\n              host: service1\n              port: 80\n        timeout: 12s\n      - route:\n          - destination:\n              host: service2\n    labels: {}\n```\n\n----------------------------------------\n\nTITLE: Setting Readiness Probe for Kubernetes Pod\nDESCRIPTION: Configuration for pod readiness checks that determine when a container is ready to accept traffic. Supports both HTTP and TCP checks with customizable parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with Default Configuration using kubectl\nDESCRIPTION: This command installs Devtron with default values by applying a YAML manifest directly from a URL. It's a one-line installation method that requires kubectl access to your Kubernetes cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/getting-started/installation-with-default-values.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/devtron-labs/charts/main/charts/devtron/devtron-bom.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron on Minikube/Kind Cluster\nDESCRIPTION: Commands to add Devtron helm repository and install Devtron operator on Minikube or Kind cluster using NodePort service type.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/Install-devtron-on-Minikube-Microk8s-K3s-Kind.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai\n\nhelm repo update devtron\n\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd \\\n--set components.devtron.service.type=NodePort --set installer.arch=multi-arch\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Prometheus Metrics\nDESCRIPTION: Sets up KEDA (Kubernetes Event-Driven Autoscaling) using Prometheus metrics. This configuration defines scaling parameters, triggers based on metric thresholds, and advanced behavior like stabilization windows.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: Using Context with NATS Operations in Go\nDESCRIPTION: Demonstrates how to use Go's context package with NATS operations including requests, synchronous subscribers, and JSON-encoded requests. This allows for timeout and cancellation control across NATS operations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)\ndefer cancel()\n\nnc, err := nats.Connect(nats.DefaultURL)\n\n// Request with context\nmsg, err := nc.RequestWithContext(ctx, \"foo\", []byte(\"bar\"))\n\n// Synchronous subscriber with context\nsub, err := nc.SubscribeSync(\"foo\")\nmsg, err := sub.NextMsgWithContext(ctx)\n\n// Encoded Request with context\nc, err := nats.NewEncodedConn(nc, nats.JSON_ENCODER)\ntype request struct {\n\tMessage string `json:\"message\"`\n}\ntype response struct {\n\tCode int `json:\"code\"`\n}\nreq := &request{Message: \"Hello\"}\nresp := &response{}\nerr := c.RequestWithContext(ctx, \"foo\", req, resp)\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with Azure Blob Storage\nDESCRIPTION: Helm command to install Devtron with Azure Blob Storage for storing build logs and cache by specifying the Azure account key, account name, and container names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd-with-gitops.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai\n\nhelm repo update devtron\n\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--set secrets.AZURE_ACCOUNT_KEY=xxxxxxxxxx \\\n--set configs.BLOB_STORAGE_PROVIDER=AZURE \\\n--set configs.AZURE_ACCOUNT_NAME=test-account \\\n--set configs.AZURE_BLOB_CONTAINER_CI_LOG=ci-log-container \\\n--set configs.AZURE_BLOB_CONTAINER_CI_CACHE=ci-cache-container \\\n--set argo-cd.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Setting Liveness Probe for Kubernetes Pod\nDESCRIPTION: Configuration for pod liveness checks that determine when to restart a container. Supports both HTTP and TCP checks with customizable timing parameters and headers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in Kubernetes Deployment\nDESCRIPTION: Defines container port configuration including envoy ports, service ports, and HTTP/2 settings for application services.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Prometheus in YAML\nDESCRIPTION: This snippet shows how to configure KEDA autoscaling using Prometheus metrics. It includes settings for minimum and maximum replica counts, polling interval, and advanced configurations for the Horizontal Pod Autoscaler.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe for Kubernetes Containers\nDESCRIPTION: Defines liveness probe configuration for health checking containers including HTTP, TCP, and gRPC probe options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n  grpc:\n    port: 8080\n    service: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Volumes in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure volumes in Kubernetes. It includes examples of an emptyDir volume and a persistentVolumeClaim.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Using OR Condition in Go with builder\nDESCRIPTION: Examples of connecting multiple conditions with OR operator using the Or function, including combining OR with AND conditions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/builder/README.md#2025-04-22_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nimport . \"xorm.io/builder\"\n\nsql, args, _ := ToSQL(Or(Eq{\"a\":1}, Like{\"b\", \"c\"}, Neq{\"d\", 2}))\n// a=? OR b LIKE ? OR d<>? [1, %c%, 2]\nsql, args, _ := ToSQL(Or(Eq{\"a\":1}, And(Like{\"b\", \"c\"}, Neq{\"d\", 2})))\n// a=? OR (b LIKE ? AND d<>?) [1, %c%, 2]\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Deployment in Kubernetes YAML\nDESCRIPTION: Specifies server deployment details, including the image tag and URL. This configuration determines which container image is used for the deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service in YAML\nDESCRIPTION: This snippet demonstrates how to define a Kubernetes Service. It specifies the service type and allows for custom annotations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n  service:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Setting Up ServiceMonitor for Prometheus Metrics Collection\nDESCRIPTION: Configures ServiceMonitor resource for Prometheus metrics collection. Includes settings for scrape path, interval, timeout, and metric relabeling to enhance observability.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Setting Container Security Context in Kubernetes\nDESCRIPTION: Configuration for adding security context at the container level to define privilege and access control settings, preventing privilege escalation for enhanced security.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Prometheus Metrics\nDESCRIPTION: Sets up Kubernetes Event-Driven Autoscaling (KEDA) based on Prometheus metrics. Defines scaling thresholds, replica counts, and behaviors for efficiently scaling applications based on real-time metric data.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Prometheus Metrics\nDESCRIPTION: YAML configuration for Kubernetes Event-Driven Autoscaling (KEDA) using Prometheus metrics. Includes min/max replicas, polling interval, and advanced behaviors for scaling based on metrics queries.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagger for Canary Deployments\nDESCRIPTION: Configuration for Flagger-based canary releases with Istio service mesh integration. Includes settings for traffic routing, analysis parameters, and gateway configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nflaggerCanary:\n  addOtherGateways: []\n  addOtherHosts: []\n  analysis:\n    interval: 15s\n    maxWeight: 50\n    stepWeight: 5\n    threshold: 5\n  annotations: {}\n  appProtocol: http\n  corsPolicy:\n    allowCredentials: false\n    allowHeaders:\n      - x-some-header\n    allowMethods:\n      - GET\n    allowOrigin:\n      - example.com\n    maxAge: 24h\n  createIstioGateway:\n    annotations: {}\n    enabled: false\n    host: example.com\n    labels: {}\n    tls:\n      enabled: false\n      secretName: example-tls-secret\n  enabled: false\n  gatewayRefs: null\n  headers:\n    request:\n      add:\n        x-some-header: value\n  labels: {}\n  loadtest:\n    enabled: true\n    url: http://flagger-loadtester.istio-system/\n  match:\n    - uri:\n        prefix: /\n  port: 8080\n  portDiscovery: true\n  retries: null\n  rewriteUri: /\n  targetPort: 8080\n  thresholds:\n    latency: 500\n    successRate: 90\n  timeout: null\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Limits and Requests\nDESCRIPTION: Defines CPU and memory resource limits and guaranteed requests for containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Logger Instances in Logrus\nDESCRIPTION: This example shows how to create and configure a new instance of the Logrus logger, which allows for multiple loggers with different settings in the same application.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  \"github.com/sirupsen/logrus\"\n)\n\n// Create a new instance of the logger. You can have any number of instances.\nvar log = logrus.New()\n\nfunc main() {\n  // The API for setting attributes is a little different than the package level\n  // exported logger. See Godoc.\n  log.Out = os.Stdout\n\n  // You could set this to any `io.Writer` such as a file\n  // file, err := os.OpenFile(\"logrus.log\", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)\n  // if err == nil {\n  //  log.Out = file\n  // } else {\n  //  log.Info(\"Failed to log to file, using default stderr\")\n  // }\n\n  log.WithFields(logrus.Fields{\n    \"animal\": \"walrus\",\n    \"size\":   10,\n  }).Info(\"A group of walrus emerges from the ocean\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress Settings\nDESCRIPTION: Defines ingress configuration for public access including hosts, paths and TLS settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Implementing Topology Spread Constraints for Pod Distribution\nDESCRIPTION: YAML configuration for topology spread constraints to control how pods are distributed across failure domains. This example ensures pods are evenly spread across zones for high availability with a maximum skew of 1.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Prometheus Metrics\nDESCRIPTION: Example configuration for KEDA autoscaling using Prometheus metrics as triggers. Includes settings for replica counts, polling intervals, and scale down behaviors.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Containers\nDESCRIPTION: Defines sidecar containers running alongside the main container within the same pod, including configuration for shared resources.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n      - reuseContainerImage: true\n        securityContext:\n          runAsUser: 1000\n          runAsGroup: 3000\n          fsGroup: 2000\n        volumeMounts:\n        - mountPath: /etc/ls-oms\n          name: ls-oms-cm-vol\n        command:\n          - flyway\n          - -configFiles=/etc/ls-oms/flyway.conf\n          - migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Backends in Kubernetes Ingress YAML\nDESCRIPTION: Defines additional backend paths in the ingress configuration. This allows routing to different services based on the path.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n    hosts:\n    - host: chart-example2.local\n      pathType: \"ImplementationSpecific\"\n      paths:\n        - /example2\n        - /example2/healthz\n      additionalBackends: \n        - path: /example1\n          pathType: \"ImplementationSpecific\"\n          backend:\n            service:\n              name: test-service\n              port:\n                number: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Containers in Kubernetes YAML\nDESCRIPTION: This snippet shows how to define multiple containers within a single pod in Kubernetes. It includes examples of setting container images, ports, commands, and security contexts.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n      - reuseContainerImage: true\n        securityContext:\n          runAsUser: 1000\n          runAsGroup: 3000\n          fsGroup: 2000\n        volumeMounts:\n        - mountPath: /etc/ls-oms\n          name: ls-oms-cm-vol\n        command:\n          - flyway\n          - -configFiles=/etc/ls-oms/flyway.conf\n          - migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal Pod Autoscaling (HPA)\nDESCRIPTION: Defines autoscaling parameters for automatic scaling based on CPU and memory utilization, with minimum and maximum replica counts and custom metrics support.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Limits and Requests in Kubernetes YAML\nDESCRIPTION: Specifies minimum (requests) and maximum (limits) RAM and CPU resources available to the application. Limits restrict the container's resource usage, while requests guarantee the minimum resources allocated.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Kafka Triggers\nDESCRIPTION: Sets up KEDA (Kubernetes Event-Driven Autoscaling) using Kafka lag as a trigger. This configuration includes Kafka bootstrap servers, topic, consumer group settings, and authentication details for secure Kafka connections.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Configuring Recreate Deployment Strategy in Devtron\nDESCRIPTION: Configuration for Recreate deployments in Devtron. This strategy shuts down version A completely before deploying version B, resulting in downtime but ensuring old and new code never run simultaneously.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/workflow/cd-pipeline.md#2025-04-22_snippet_5\n\nLANGUAGE: markup\nCODE:\n```\nrecreate:\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagger Canary Deployment\nDESCRIPTION: Configuration for Flagger-based canary deployments with Istio service mesh integration. Includes settings for traffic routing, analysis parameters, and gateway configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nflaggerCanary:\n  addOtherGateways: []\n  addOtherHosts: []\n  analysis:\n    interval: 15s\n    maxWeight: 50\n    stepWeight: 5\n    threshold: 5\n  annotations: {}\n  appProtocol: http\n  corsPolicy:\n    allowCredentials: false\n    allowHeaders:\n      - x-some-header\n    allowMethods:\n      - GET\n    allowOrigin:\n      - example.com\n    maxAge: 24h\n  createIstioGateway:\n    annotations: {}\n    enabled: false\n    host: example.com\n    labels: {}\n    tls:\n      enabled: false\n      secretName: example-tls-secret\n  enabled: false\n  gatewayRefs: null\n  headers:\n    request:\n      add:\n        x-some-header: value\n  labels: {}\n  loadtest:\n    enabled: true\n    url: http://flagger-loadtester.istio-system/\n  match:\n    - uri:\n        prefix: /\n  port: 8080\n  portDiscovery: true\n  retries: null\n  rewriteUri: /\n  targetPort: 8080\n  thresholds:\n    latency: 500\n    successRate: 90\n  timeout: null\n```\n\n----------------------------------------\n\nTITLE: Defining Topology Spread Constraints in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure topology spread constraints in a Kubernetes deployment. It includes settings for controlling pod distribution across failure domains.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaling in Kubernetes YAML\nDESCRIPTION: Defines autoscaling settings for Kubernetes deployments. It includes options for enabling autoscaling, setting minimum and maximum replicas, and specifying CPU and memory utilization targets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Arguments for Kubernetes Deployment in YAML\nDESCRIPTION: This YAML snippet defines the structure for specifying arguments in a Kubernetes deployment. It allows enabling or disabling arguments and providing an array of values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Schema Validation Example in Go\nDESCRIPTION: Demonstrates basic usage of gojsonschema for validating JSON documents against a schema using file references. Shows how to load schema and document files, perform validation, and handle results.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/xeipuuv/gojsonschema\"\n)\n\nfunc main() {\n\n    schemaLoader := gojsonschema.NewReferenceLoader(\"file:///home/me/schema.json\")\n    documentLoader := gojsonschema.NewReferenceLoader(\"file:///home/me/document.json\")\n\n    result, err := gojsonschema.Validate(schemaLoader, documentLoader)\n    if err != nil {\n        panic(err.Error())\n    }\n\n    if result.Valid() {\n        fmt.Printf(\"The document is valid\\n\")\n    } else {\n        fmt.Printf(\"The document is not valid. see errors :\\n\")\n        for _, desc := range result.Errors() {\n            fmt.Printf(\"- %s\\n\", desc)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Topology Spread Constraints in Kubernetes YAML\nDESCRIPTION: Configures how pods are distributed across the cluster to achieve high availability and efficient resource utilization. This example spreads pods across zones with a maximum skew of 1.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Topology Spread Constraints for Pod Distribution\nDESCRIPTION: Configuration for topology spread constraints to control how pods are distributed across failure domains in a Kubernetes cluster, helping achieve high availability and efficient resource utilization.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Implementing ORM Models and Database Operations with go-pg\nDESCRIPTION: Complete example demonstrating go-pg ORM usage with User and Story models, including schema creation, data insertion, and relational queries. Shows how to establish connections, define models with relationships, and perform various database operations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-pg/pg/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage pg_test\n\nimport (\n    \"fmt\"\n\n    \"github.com/go-pg/pg\"\n    \"github.com/go-pg/pg/orm\"\n)\n\ntype User struct {\n    Id     int64\n    Name   string\n    Emails []string\n}\n\nfunc (u User) String() string {\n    return fmt.Sprintf(\"User<%d %s %v>\", u.Id, u.Name, u.Emails)\n}\n\ntype Story struct {\n    Id       int64\n    Title    string\n    AuthorId int64\n    Author   *User\n}\n\nfunc (s Story) String() string {\n    return fmt.Sprintf(\"Story<%d %s %s>\", s.Id, s.Title, s.Author)\n}\n\nfunc ExampleDB_Model() {\n    db := pg.Connect(&pg.Options{\n        User: \"postgres\",\n    })\n    defer db.Close()\n\n    err := createSchema(db)\n    if err != nil {\n        panic(err)\n    }\n\n    user1 := &User{\n        Name:   \"admin\",\n        Emails: []string{\"admin1@admin\", \"admin2@admin\"},\n    }\n    err = db.Insert(user1)\n    if err != nil {\n        panic(err)\n    }\n\n    err = db.Insert(&User{\n        Name:   \"root\",\n        Emails: []string{\"root1@root\", \"root2@root\"},\n    })\n    if err != nil {\n        panic(err)\n    }\n\n    story1 := &Story{\n        Title:    \"Cool story\",\n        AuthorId: user1.Id,\n    }\n    err = db.Insert(story1)\n    if err != nil {\n        panic(err)\n    }\n\n    // Select user by primary key.\n    user := &User{Id: user1.Id}\n    err = db.Select(user)\n    if err != nil {\n        panic(err)\n    }\n\n    // Select all users.\n    var users []User\n    err = db.Model(&users).Select()\n    if err != nil {\n        panic(err)\n    }\n\n    // Select story and associated author in one query.\n    story := new(Story)\n    err = db.Model(story).\n        Relation(\"Author\").\n        Where(\"story.id = ?\", story1.Id).\n        Select()\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(user)\n    fmt.Println(users)\n    fmt.Println(story)\n    // Output: User<1 admin [admin1@admin admin2@admin]>\n    // [User<1 admin [admin1@admin admin2@admin]> User<2 root [root1@root root2@root]>]\n    // Story<1 Cool story User<1 admin [admin1@admin admin2@admin]>>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Deployment in Kubernetes YAML\nDESCRIPTION: This snippet shows how to configure server deployment settings in Kubernetes. It specifies the image tag and image URL for the deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Limits and Requests\nDESCRIPTION: Configuration for container resource constraints including CPU and memory limits\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes NetworkPolicy in YAML\nDESCRIPTION: This snippet shows how to define a Kubernetes NetworkPolicy to control pod communication. It includes configurations for ingress and egress rules, specifying allowed IP blocks, namespace selectors, and pod selectors for fine-grained network access control.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nnetworkPolicy:\n  enabled: false\n  annotations: {}\n  labels: {}\n  podSelector:\n    matchLabels:\n      role: db\n  policyTypes:\n    - Ingress\n    - Egress\n  ingress:\n    - from:\n        - ipBlock:\n            cidr: 172.17.0.0/16\n            except:\n              - 172.17.1.0/24\n        - namespaceSelector:\n            matchLabels:\n              project: myproject\n        - podSelector:\n            matchLabels:\n              role: frontend\n      ports:\n        - protocol: TCP\n          port: 6379\n  egress:\n    - to:\n        - ipBlock:\n            cidr: 10.0.0.0/24\n      ports:\n        - protocol: TCP\n          port: 5978\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Security Context in Kubernetes YAML\nDESCRIPTION: This snippet shows how to add a security context at the pod level in a Kubernetes deployment. It sets the user ID, group ID, and file system group for the pod, which affects all containers within the pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Setting Up Winter-Soldier Resource Management\nDESCRIPTION: Configures Winter-Soldier for managing Kubernetes resources based on schedules. This template allows resource hibernation, deletion, or scaling based on time ranges and custom selectors.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nwinterSoldier:\n  enabled: false\n  apiVersion: pincher.devtron.ai/v1alpha1\n  action: sleep\n  timeRangesWithZone:\n    timeZone: \"Asia/Kolkata\"\n    timeRanges: []\n  targetReplicas: []\n  fieldSelector: []\n```\n\n----------------------------------------\n\nTITLE: Iterating through an Objx Map with Range\nDESCRIPTION: Shows how to iterate through an objx.Map using a standard Go range loop, as it's fundamentally a map[string]interface{}.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/stretchr/objx/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nm := objx.MustFromJSON(json)\nfor key, value := range m {\n  // Your code...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagger for Canary Deployments\nDESCRIPTION: YAML configuration for Flagger canary releases that supports progressive traffic shifting. Includes analysis settings, gateway configurations, and traffic routing rules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nflaggerCanary:\n  addOtherGateways: []\n  addOtherHosts: []\n  analysis:\n    interval: 15s\n    maxWeight: 50\n    stepWeight: 5\n    threshold: 5\n  annotations: {}\n  appProtocol: http\n  corsPolicy:\n    allowCredentials: false\n    allowHeaders:\n      - x-some-header\n    allowMethods:\n      - GET\n    allowOrigin:\n      - example.com\n    maxAge: 24h\n  createIstioGateway:\n    annotations: {}\n    enabled: false\n    host: example.com\n    labels: {}\n    tls:\n      enabled: false\n      secretName: example-tls-secret\n  enabled: false\n  gatewayRefs: null\n  headers:\n    request:\n      add:\n        x-some-header: value\n  labels: {}\n  loadtest:\n    enabled: true\n    url: http://flagger-loadtester.istio-system/\n  match:\n    - uri:\n        prefix: /\n  port: 8080\n  portDiscovery: true\n  retries: null\n  rewriteUri: /\n  targetPort: 8080\n  thresholds:\n    latency: 500\n    successRate: 90\n  timeout: null\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in Kubernetes Deployment Chart\nDESCRIPTION: YAML configuration for defining container ports in a Kubernetes deployment. Includes settings for port mapping, envoy configuration, and streaming support. Defines how the application services will be exposed to other services.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    nodePort: 32056\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: StatefulSet Core Configuration\nDESCRIPTION: Comprehensive StatefulSet configuration including labels, annotations, volume claims, and storage specifications.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstatefulSetConfig:\n  labels:\n    app: my-statefulset\n    environment: production\n  annotations:\n    example.com/version: \"1.0\"\n  serviceName: \"my-statefulset-service\"\n  podManagementPolicy: \"Parallel\"\n  revisionHistoryLimit: 5\n  mountPath: \"/data\"\n  volumeClaimTemplates:\n    - apiVersion: v1\n      kind: PersistentVolumeClaim\n      metadata:\n        labels:\n          app: my-statefulset\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        dataSource:\n          kind: Snapshot\n          apiGroup: snapshot.storage.k8s.io\n          name: my-snapshot\n        resources:\n          requests:\n            storage: 5Gi\n          limits:\n            storage: 10Gi\n        storageClassName: my-storage-class\n        selector:\n          matchLabels:\n            app: my-statefulset\n        volumeMode: Filesystem\n        volumeName: my-pv\n  - apiVersion: v1\n    kind: PersistentVolumeClaim\n    metadata:\n      name: pvc-logs\n      labels:\n        app: myapp\n    spec:\n      accessModes:\n        - ReadWriteMany\n      dataSourceRef:\n        kind: Secret\n        apiGroup: v1\n        name: my-secret\n      resources:\n        requests:\n          storage: 5Gi\n      storageClassName: my-storage-class\n      selector:\n        matchExpressions:\n          - {key: environment, operator: In, values: [production]}\n      volumeMode: Block\n      volumeName: my-pv\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Backends in Kubernetes Ingress YAML\nDESCRIPTION: This YAML snippet demonstrates how to define additional backend paths in a Kubernetes Ingress configuration. It includes host, path type, paths, and an additional backend with its own service and port.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n    hosts:\n    - host: chart-example2.local\n      pathType: \"ImplementationSpecific\"\n      paths:\n        - /example2\n        - /example2/healthz\n      additionalBackends: \n        - path: /example1\n          pathType: \"ImplementationSpecific\"\n          backend:\n            service:\n              name: test-service\n              port:\n                number: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaling in Kubernetes YAML\nDESCRIPTION: Defines autoscaling settings for Kubernetes Horizontal Pod Autoscaler (HPA). It includes configurations for minimum and maximum replicas, CPU and memory utilization targets, and custom metrics.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Accessing Capture Groups with Regexp2 in Go\nDESCRIPTION: Shows how to use the FindStringMatch method to access capture groups in a matched string. It demonstrates accessing the whole match and individual group captures.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/dlclark/regexp2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif m, _ := re.FindStringMatch(`Something to match`); m != nil {\n    // the whole match is always group 0\n    fmt.Printf(\"Group 0: %v\\n\", m.String())\n\n    // you can get all the groups too\n    gps := m.Groups()\n\n    // a group can be captured multiple times, so each cap is separately addressable\n    fmt.Printf(\"Group 1, first capture\", gps[1].Captures[0].String())\n    fmt.Printf(\"Group 1, second capture\", gps[1].Captures[1].String())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ambassador Mappings in Kubernetes\nDESCRIPTION: YAML configuration for creating Ambassador mappings to expose applications outside the cluster. Includes settings for hostname, TLS, CORS, and path configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nambassadorMapping:\n  ambassadorId: \"prod-emissary\"\n  cors: {}\n  enabled: true\n  hostname: devtron.example.com\n  labels: {}\n  prefix: /\n  retryPolicy: {}\n  rewrite: \"\"\n  tls:\n    context: \"devtron-tls-context\"\n    create: false\n    hosts: []\n    secretName: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal Pod Autoscaling in Kubernetes Deployment\nDESCRIPTION: YAML configuration for Horizontal Pod Autoscaler (HPA) that automatically scales the number of pods based on observed CPU and memory utilization or other custom metrics. Defines min/max replicas and target utilization percentages.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Winter-Soldier Configuration Example\nDESCRIPTION: Comprehensive example of Winter-Soldier configuration showing how to set up time-based scaling of resources with multiple time ranges and a field selector for targeting specific resources.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\nwinterSoldier:\n  apiVersion: pincher.devtron.ai/v1alpha1 \n  enabled: true\n  annotations: {}\n  labels: {}\n  timeRangesWithZone:\n    timeZone: \"Asia/Kolkata\"\n    timeRanges: \n      - timeFrom: 00:00\n        timeTo: 23:59:59\n        weekdayFrom: Sat\n        weekdayTo: Sun\n      - timeFrom: 00:00\n        timeTo: 08:00\n        weekdayFrom: Mon\n        weekdayTo: Fri\n      - timeFrom: 20:00\n        timeTo: 23:59:59\n        weekdayFrom: Mon\n        weekdayTo: Fri\n  action: scale\n  targetReplicas: [1,1,1]\n  fieldSelector: \n    - AfterTime(AddTime( ParseTime({{metadata.creationTimestamp}}, '2006-01-02T15:04:05Z'), '10h'), Now())\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio in Kubernetes YAML\nDESCRIPTION: Defines Istio service mesh configuration including gateway and virtual service settings. It includes options for TLS, CORS policy, headers, and routing rules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nistio:\n  enable: true\n  gateway:\n    annotations: {}\n    enabled: false\n    host: example.com\n    labels: {}\n    tls:\n      enabled: false\n      secretName: example-tls-secret\n  virtualService:\n    annotations: {}\n    enabled: false\n    gateways: []\n    hosts: []\n    http:\n      - corsPolicy:\n          allowCredentials: false\n          allowHeaders:\n            - x-some-header\n          allowMethods:\n            - GET\n          allowOrigin:\n            - example.com\n          maxAge: 24h\n        headers:\n          request:\n            add:\n              x-some-header: value\n        match:\n          - uri:\n              prefix: /v1\n          - uri:\n              prefix: /v2\n        retries:\n          attempts: 2\n          perTryTimeout: 3s\n        rewriteUri: /\n        route:\n          - destination:\n              host: service1\n              port: 80\n        timeout: 12s\n      - route:\n          - destination:\n              host: service2\n    labels: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Prometheus Metrics\nDESCRIPTION: Example configuration for KEDA autoscaling using Prometheus metrics as a trigger. Includes settings for scaling policies, replica counts, and metric queries.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Blue-Green Deployment Strategy in Devtron\nDESCRIPTION: Configuration for Blue-Green deployments in Devtron. This strategy involves running two versions of an application simultaneously and moving traffic from the production version to the newer version. Parameters control auto-promotion, scale down delay, preview replica count, and auto-promotion enablement.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/workflow/cd-pipeline.md#2025-04-22_snippet_2\n\nLANGUAGE: markup\nCODE:\n```\nblueGreen:\n  autoPromotionSeconds: 30\n  scaleDownDelaySeconds: 30\n  previewReplicaCount: 1\n  autoPromotionEnabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Readiness Probe\nDESCRIPTION: Configuration for Kubernetes readiness probe including HTTP, TCP and gRPC health checks. Defines probe timing, thresholds and connection parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n  grpc:\n    port: 8080\n    service: \"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Node Affinity in YAML\nDESCRIPTION: Configures node affinity specifications for pod scheduling based on node labels.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Limits and Requests\nDESCRIPTION: Defines CPU and memory resource limits and requests for containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Implementing KEDA Autoscaling with Prometheus Metrics\nDESCRIPTION: Configures KEDA (Kubernetes Event-Driven Autoscaling) using Prometheus metrics. It defines scaling parameters, triggers based on HTTP request metrics, and advanced behavior for the HorizontalPodAutoscaler.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe in Kubernetes Deployment\nDESCRIPTION: This YAML snippet defines the liveness probe configuration for Kubernetes to determine when to restart a pod due to application failures.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Containers in a Kubernetes Pod\nDESCRIPTION: Defines multiple containers within a single pod, allowing for sidecar patterns. Containers in the same pod share volumes and network space and can communicate via localhost.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n      - reuseContainerImage: true\n        securityContext:\n          runAsUser: 1000\n          runAsGroup: 3000\n          fsGroup: 2000\n        volumeMounts:\n        - mountPath: /etc/ls-oms\n          name: ls-oms-cm-vol\n        command:\n          - flyway\n          - -configFiles=/etc/ls-oms/flyway.conf\n          - migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Service Mesh\nDESCRIPTION: Configuration for Istio service mesh features including virtual services and gateways.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nistio:\n  enable: true\n  gateway:\n    annotations: {}\n    enabled: false\n    host: example.com\n    labels: {}\n    tls:\n      enabled: false\n      secretName: example-tls-secret\n  virtualService:\n    annotations: {}\n    enabled: false\n    gateways: []\n    hosts: []\n    http:\n      - corsPolicy:\n          allowCredentials: false\n          allowHeaders:\n            - x-some-header\n          allowMethods:\n            - GET\n          allowOrigin:\n            - example.com\n          maxAge: 24h\n        headers:\n          request:\n            add:\n              x-some-header: value\n        match:\n          - uri:\n              prefix: /v1\n          - uri:\n              prefix: /v2\n        retries:\n          attempts: 2\n          perTryTimeout: 3s\n        rewriteUri: /\n        route:\n          - destination:\n              host: service1\n              port: 80\n        timeout: 12s\n      - route:\n          - destination:\n              host: service2\n    labels: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Affinity in Kubernetes YAML\nDESCRIPTION: This YAML snippet defines affinity rules for a Kubernetes deployment. It provides a template for specifying node affinity or inter-pod affinity based on labels.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers in Kubernetes YAML\nDESCRIPTION: Defines init containers that run before app containers in a Pod. These can contain utilities or setup scripts not present in the app image. The 'reuseContainerImage' flag allows using the base image inside the initContainer.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n    image: nginx:1.14.2\n    securityContext:\n      privileged: true\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Kafka Integration\nDESCRIPTION: Example configuration for KEDA autoscaling using Kafka as a trigger. Includes authentication settings and Kafka-specific configurations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in Kubernetes Deployment\nDESCRIPTION: Defines ports on which application services will be exposed to other services. Includes settings for envoy, service ports, and protocol options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    nodePort: 32056\n    supportStreaming: true\n    useHTTP2: true\n    protocol: TCP\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Service Mesh\nDESCRIPTION: Configuration for Istio service mesh including virtual services and gateway settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nistio:\n  enable: true\n  gateway:\n    annotations: {}\n    enabled: false\n    host: example.com\n    labels: {}\n    tls:\n      enabled: false\n      secretName: example-tls-secret\n  virtualService:\n    annotations: {}\n    enabled: false\n    gateways: []\n    hosts: []\n    http:\n      - corsPolicy:\n          allowCredentials: false\n          allowHeaders:\n            - x-some-header\n          allowMethods:\n            - GET\n          allowOrigin:\n            - example.com\n          maxAge: 24h\n        headers:\n          request:\n            add:\n              x-some-header: value\n        match:\n          - uri:\n              prefix: /v1\n          - uri:\n              prefix: /v2\n        retries:\n          attempts: 2\n          perTryTimeout: 3s\n        rewriteUri: /\n        route:\n          - destination:\n              host: service1\n              port: 80\n        timeout: 12s\n      - route:\n          - destination:\n              host: service2\n    labels: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Readiness Probe\nDESCRIPTION: Defines readiness probe settings that determine when a pod is ready to accept traffic.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaling in Kubernetes Deployment (YAML)\nDESCRIPTION: Defines autoscaling settings for the deployment, including minimum and maximum replicas, CPU and memory utilization targets. This is connected to HPA (Horizontal Pod Autoscaler).\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure Init Containers in Kubernetes. It includes settings for container image reuse, security context, volume mounts, and commands to be executed before the main application containers start.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n    image: nginx:1.14.2\n    securityContext:\n      privileged: true\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Integrating Log Rotation with Zap using Lumberjack\nDESCRIPTION: Example of integrating the lumberjack log rotation package with Zap. This demonstrates how to create a core logger with a file rotation strategy for log files, including size limits and retention policies.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.uber.org/zap/FAQ.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// lumberjack.Logger is already safe for concurrent use, so we don't need to\n// lock it.\nw := zapcore.AddSync(&lumberjack.Logger{\n  Filename:   \"/var/log/myapp/foo.log\",\n  MaxSize:    500, // megabytes\n  MaxBackups: 3,\n  MaxAge:     28, // days\n})\ncore := zapcore.NewCore(\n  zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()),\n  w,\n  zap.InfoLevel,\n)\nlogger := zap.New(core)\n```\n\n----------------------------------------\n\nTITLE: Configuring Resources in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure resource limits and requests for containers in Kubernetes. It sets CPU and memory limits and requests to ensure proper resource allocation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Ingress\nDESCRIPTION: Defines ingress settings for external access to services including hosts, paths, and TLS configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Resource Limits and Requests in YAML\nDESCRIPTION: This YAML snippet defines the configuration for Kubernetes resource limits and requests. It specifies CPU and memory constraints for containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaling in Kubernetes Deployment\nDESCRIPTION: Sets up Horizontal Pod Autoscaling (HPA) for the deployment. This configuration specifies CPU and memory utilization targets for scaling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  containerResource:\n    enabled: true\n    TargetCPUUtilizationPercentage: 90\n    TargetMemoryUtilizationPercentage: 80  \n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Parsing Semantic Versions in Go\nDESCRIPTION: Demonstrates how to parse a semantic version string into a version object using the NewVersion function.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Masterminds/semver/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n    v, err := semver.NewVersion(\"1.2.3-beta.1+build345\")\n```\n\n----------------------------------------\n\nTITLE: Setting ORCH_HOST in Devtron Configuration\nDESCRIPTION: Configuration example for setting the ORCH_HOST key-value pair in the devtron-cm configmap. This is required when enabling the 'Execute tasks in application environment' feature.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/workflow/cd-pipeline.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nORCH_HOST: <host_url>/orchestrator/webhook/msg/nats\n\nExample:\n\nORCH_HOST: http://xyz.devtron.com/orchestrator/webhook/msg/nats\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertical Pod Autoscaling in Kubernetes YAML\nDESCRIPTION: Enables automatic scaling of pod resources based on workload demands. Connected to VPA to control scaling in response to request load.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\nverticalPodScaling:\n  enabled: true\n  resourcePolicy: {}\n  updatePolicy: {}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Logrus Configuration and Usage\nDESCRIPTION: A more advanced example showing how to configure Logrus with JSON formatting, custom output, and log level filtering. It also demonstrates structured logging with fields and context reuse.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  // Log as JSON instead of the default ASCII formatter.\n  log.SetFormatter(&log.JSONFormatter{})\n\n  // Output to stdout instead of the default stderr\n  // Can be any io.Writer, see below for File example\n  log.SetOutput(os.Stdout)\n\n  // Only log the warning severity or above.\n  log.SetLevel(log.WarnLevel)\n}\n\nfunc main() {\n  log.WithFields(log.Fields{\n    \"animal\": \"walrus\",\n    \"size\":   10,\n  }).Info(\"A group of walrus emerges from the ocean\")\n\n  log.WithFields(log.Fields{\n    \"omg\":    true,\n    \"number\": 122,\n  }).Warn(\"The group's number increased tremendously!\")\n\n  log.WithFields(log.Fields{\n    \"omg\":    true,\n    \"number\": 100,\n  }).Fatal(\"The ice breaks!\")\n\n  // A common pattern is to re-use fields between logging statements by re-using\n  // the logrus.Entry returned from WithFields()\n  contextLogger := log.WithFields(log.Fields{\n    \"common\": \"this is a common field\",\n    \"other\": \"I also should be logged always\",\n  })\n\n  contextLogger.Info(\"I'll be logged with common and other field\")\n  contextLogger.Info(\"Me too\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with CI/CD using Helm\nDESCRIPTION: Basic Helm command to install the latest version of Devtron with CI/CD module. Creates a namespace 'devtroncd' and installs Devtron with CI/CD capability.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai \n\nhelm repo update devtron\n\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd \\\n--set installer.modules={cicd}\n```\n\n----------------------------------------\n\nTITLE: Setting Affinity and Anti-Affinity in Kubernetes YAML\nDESCRIPTION: Configures node affinity to constrain pod scheduling based on node labels. This allows for more controlled pod placement within the cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Liveness Probe Configuration\nDESCRIPTION: Kubernetes liveness probe configuration for container health checking, including path, timing parameters, and HTTP headers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Scanning Results into a Pointer Slice in Core for Go\nDESCRIPTION: Shows how to scan query results into a slice of string pointers, which allows for handling NULL values from the database.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/core/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nrows, _ := db.Query()\ncols, _ := rows.Columns()\nfor rows.Next() {\n    var s = make([]*string, len(cols))\n    rows.ScanSlice(&s)\n}\n```\n\n----------------------------------------\n\nTITLE: Server Deployment Configuration\nDESCRIPTION: Defines server deployment settings including image details.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Policy in Kubernetes YAML\nDESCRIPTION: Defines the image pull policy for Kubernetes deployments, specifying when to pull the container image.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Kubernetes Ingress in YAML\nDESCRIPTION: This YAML snippet shows the configuration for a legacy Kubernetes Ingress resource. It includes settings for enabling the Ingress, specifying the Ingress class, annotations, path, host, and TLS configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  path: \"\"\n  host: \"\"\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Defining Tolerations in Kubernetes YAML\nDESCRIPTION: Specifies pod tolerations to allow scheduling on nodes with matching taints. This mechanism ensures pods are not placed on inappropriate nodes and can access nodes with specific taints.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Monitor in Kubernetes YAML\nDESCRIPTION: This snippet shows how to configure a Service Monitor in Kubernetes for Prometheus monitoring. It includes settings for the metrics path, scrape interval, and label rewriting.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Using Logger for High-Performance Structured Logging in Go\nDESCRIPTION: This example demonstrates using the Logger interface for high-performance, type-safe structured logging. It shows how to log structured data using strongly typed Field values for maximum performance and minimal allocations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.uber.org/zap/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlogger, _ := zap.NewProduction()\ndefer logger.Sync()\nlogger.Info(\"failed to fetch URL\",\n  // Structured context as strongly typed Field values.\n  zap.String(\"url\", url),\n  zap.Int(\"attempt\", 3),\n  zap.Duration(\"backoff\", time.Second),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service in YAML\nDESCRIPTION: This YAML snippet defines the configuration for a Kubernetes Service. It specifies the service type, annotations, and session affinity settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n  service:\n    type: ClusterIP\n    annotations: {}\n    sessionAffinity:\n      enabled: true\n      sessionAffinityConfig: {}    \n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Components in YAML\nDESCRIPTION: This snippet demonstrates the configuration of various Istio components including Gateway, VirtualService, DestinationRule, PeerAuthentication, RequestAuthentication, and AuthorizationPolicy. It shows how to set up traffic management, security policies, and access control for a microservices architecture.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nistio:\n  enable: true\n\n  gateway:\n    enabled: true\n    labels:\n      app: my-gateway\n    annotations:\n      description: \"Istio Gateway for external traffic\"\n    host: \"example.com\"\n    tls:\n      enabled: true\n      secretName: my-tls-secret\n\n  virtualService:\n    enabled: true\n    labels:\n      app: my-service\n    annotations:\n      description: \"Istio VirtualService for routing\"\n    gateways:\n      - my-gateway\n    hosts:\n      - \"example.com\"\n    http:\n      - match:\n          - uri:\n              prefix: /v1\n        route:\n          - destination:\n              host: my-service-v1\n              subset: version-1\n      - match:\n          - uri:\n              prefix: /v2\n        route:\n          - destination:\n              host: my-service-v2\n              subset: version-2\n\n  destinationRule:\n    enabled: true\n    labels:\n      app: my-service\n    annotations:\n      description: \"Istio DestinationRule for traffic policies\"\n    subsets:\n      - name: version-1\n        labels:\n          version: \"v1\"\n      - name: version-2\n        labels:\n          version: \"v2\"\n    trafficPolicy:\n      connectionPool:\n        tcp:\n          maxConnections: 100\n      outlierDetection:\n        consecutiveErrors: 5\n        interval: 30s\n        baseEjectionTime: 60s\n\n  peerAuthentication:\n    enabled: true\n    labels:\n      app: my-service\n    annotations:\n      description: \"Istio PeerAuthentication for mutual TLS\"\n    selector:\n      matchLabels:\n        version: \"v1\"\n    mtls:\n      mode: STRICT\n    portLevelMtls:\n      8080:\n        mode: DISABLE\n\n  requestAuthentication:\n    enabled: true\n    labels:\n      app: my-service\n    annotations:\n      description: \"Istio RequestAuthentication for JWT validation\"\n    selector:\n      matchLabels:\n        version: \"v1\"\n    jwtRules:\n      - issuer: \"issuer-1\"\n        jwksUri: \"https://issuer-1/.well-known/jwks.json\"\n\n  authorizationPolicy:\n    enabled: true\n    labels:\n      app: my-service\n    annotations:\n      description: \"Istio AuthorizationPolicy for access control\"\n    action: ALLOW\n    provider:\n      name: jwt\n      kind: Authorization\n    rules:\n      - from:\n          - source:\n              requestPrincipals: [\"*\"]\n        to:\n          - operation:\n              methods: [\"GET\"]\n```\n\n----------------------------------------\n\nTITLE: ConfigMap-based Environment Variables Configuration\nDESCRIPTION: Configuration for environment variables sourced from Kubernetes ConfigMaps, specifying environment name, ConfigMap name and key.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromConfigMapKeys: \n  - name: ENV_NAME\n    configMapName: CONFIG_MAP_NAME\n    keyName: CONFIG_MAP_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Kafka Triggers\nDESCRIPTION: Implements Kubernetes Event-Driven Autoscaling (KEDA) based on Kafka topic lag. Includes authentication, connection details, and scaling parameters to dynamically adjust pod counts based on Kafka message processing needs.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure Internal Ingress in Kubernetes for private access. It includes settings for enabling Ingress, specifying the Ingress class, annotations, hosts, paths, and TLS configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Disruption Budget with minAvailable\nDESCRIPTION: Sets minimum number of pods that must be available during voluntary disruptions. Ensures application availability during maintenance operations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     minAvailable: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in Kubernetes Deployment\nDESCRIPTION: Defines the port configuration for application services exposure including envoy ports, timeouts and HTTP/2 settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes CronJob Resources\nDESCRIPTION: Example configuration for a Kubernetes CronJob showing scheduling and execution parameters including concurrency policy, job history limits, restart policy, and schedule. This configuration defines how and when jobs should be repeatedly executed.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/job-and-cronjob.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: CronJob\ncronjobConfigs:\n    concurrencyPolicy: Allow\n    failedJobsHistoryLimit: 1\n    restartPolicy: OnFailure\n    schedule: 32 8 * * *\n    startingDeadlineSeconds: 100\n    successfulJobsHistoryLimit: 3\n    suspend: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Volume Claims in Kubernetes YAML\nDESCRIPTION: Specifies storage requirements for mounting persistent volumes in pods. Defines storage class, access mode, and mount path for the volume.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\npersistentVolumeClaim:\n  name: my-pvc\n  storageClassName: default\n  accessMode:\n    - ReadWriteOnce\n  mountPath: /tmp\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Pod Resource using YAML\nDESCRIPTION: Sample YAML configuration for creating a Kubernetes Deployment resource with Nginx. This example demonstrates the required fields for defining a Deployment with replicas, selectors, and container specifications.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/resource-browser.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels: \n     app: nginx\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n       app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n       - name: nginx\n         image: nginx:1.14.2\n         ports:\n         - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaling in Devtron Deployment\nDESCRIPTION: Controls scaling up and down in response to request load. Connected to Horizontal Pod Autoscaler and allows setting CPU and memory utilization thresholds.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Generating Application URL for Kubernetes Services\nDESCRIPTION: This snippet generates the appropriate application URL based on the service type and ingress configuration. It handles Ingress, NodePort, LoadBalancer, and ClusterIP service types, providing the necessary commands to retrieve the URL or IP address.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaling in Kubernetes Deployment YAML\nDESCRIPTION: Defines autoscaling settings for Kubernetes deployments. It specifies the minimum and maximum number of replicas, as well as CPU and memory utilization targets for scaling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Context in Kubernetes\nDESCRIPTION: Configuration for pod and container level security contexts defining privilege and access control settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron's Kubernetes Dashboard with Helm\nDESCRIPTION: Commands to add the Devtron Helm repository and install the Devtron operator in the devtroncd namespace.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai\n\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts in Kubernetes\nDESCRIPTION: YAML configuration for mounting volumes into container file systems. Specifies the mount path, volume name, and optionally a sub-path within the volume.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee  \n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Prometheus in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure KEDA autoscaling using Prometheus metrics in Kubernetes. It specifies scaling parameters, triggers, and authentication.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service in YAML\nDESCRIPTION: Defines the type of service and any associated annotations. This configuration determines how the service is exposed within the cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n  service:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: KEDA Autoscaling with Prometheus\nDESCRIPTION: Configuration for KEDA autoscaling based on Prometheus metrics. Includes scaling policies and trigger configurations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: Setting MaxSurge in Kubernetes Deployment Update Strategy\nDESCRIPTION: YAML configuration for MaxSurge parameter which specifies the maximum number of pods that can be created over the desired number of pods during an update. Can be an absolute number or percentage of replicas.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Kafka in Kubernetes YAML\nDESCRIPTION: This YAML snippet demonstrates KEDA autoscaling configuration using Kafka as a trigger. It specifies Kafka-specific parameters, authentication, and scaling thresholds for event-driven autoscaling in Kubernetes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe in Devtron Deployment Chart\nDESCRIPTION: This YAML configuration defines a readiness probe which Kubernetes uses to determine when to stop sending traffic to the application. It includes settings for health check path, timeouts, and thresholds.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Limits and Requests in Kubernetes Deployment (YAML)\nDESCRIPTION: Defines the minimum (requests) and maximum (limits) CPU and memory resources available to the application containers. This helps in efficient resource allocation and prevents resource starvation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Defining Containers in Kubernetes YAML\nDESCRIPTION: Configures multiple containers within a pod, including main and sidecar containers. Demonstrates various container properties and shared resources.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ncontainers:\n  - name: nginx\n    image: nginx:1.14.2\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n    - mountPath: /etc/ls-oms\n      name: ls-oms-cm-vol\n    command:\n      - flyway\n      - -configFiles=/etc/ls-oms/flyway.conf\n      - migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Ingress\nDESCRIPTION: Configuration for Kubernetes ingress including host rules and TLS settings\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Implementing Hooks in Logrus for Go\nDESCRIPTION: Example of setting up Logrus hooks to report errors to Airbrake and send logs to syslog. This demonstrates how to extend Logrus with external logging services during application initialization.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n  \"gopkg.in/gemnasium/logrus-airbrake-hook.v2\" // the package is named \"airbrake\"\n  logrus_syslog \"github.com/sirupsen/logrus/hooks/syslog\"\n  \"log/syslog\"\n)\n\nfunc init() {\n\n  // Use the Airbrake hook to report errors that have Error severity or above to\n  // an exception tracker. You can create custom hooks, see the Hooks section.\n  log.AddHook(airbrake.NewHook(123, \"xyz\", \"production\"))\n\n  hook, err := logrus_syslog.NewSyslogHook(\"udp\", \"localhost:514\", syslog.LOG_INFO, \"\")\n  if err != nil {\n    log.Error(\"Unable to connect to local syslog daemon\")\n  } else {\n    log.AddHook(hook)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Security Context\nDESCRIPTION: YAML configuration for setting security context at the pod level. This includes user ID, group ID, and file system group settings to control the security posture of the entire pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Volumes in YAML\nDESCRIPTION: Defines volume configurations for storing data externally. This includes empty directories and persistent volume claims that can be attached to containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Expression Reuse with Parameters in Go\nDESCRIPTION: Shows how to reuse a parsed expression with different parameter values in a loop.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Knetic/govaluate/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nexpression, err := govaluate.NewEvaluableExpression(\"response_time <= 100\");\nparameters := make(map[string]interface{}, 8)\n\nfor {\n\tparameters[\"response_time\"] = pingSomething();\n\tresult, err := expression.Evaluate(parameters)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Limits and Requests in Kubernetes YAML\nDESCRIPTION: This snippet shows how to set resource limits and requests for CPU and memory in a Kubernetes deployment. It defines both the maximum allowed resources (limits) and the guaranteed resources (requests).\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Affinity and Anti-Affinity in Kubernetes YAML\nDESCRIPTION: Defines node affinity and inter-pod affinity rules for pod scheduling based on node labels. Used to constrain which nodes a pod can be scheduled on.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaling in Kubernetes Deployment (YAML)\nDESCRIPTION: Sets up autoscaling for the deployment, connected to HPA. Includes settings for min/max replicas and target CPU/memory utilization percentages.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio in Kubernetes YAML\nDESCRIPTION: This YAML snippet defines Istio configuration for a Kubernetes deployment. It includes settings for enabling Istio, configuring gateways and virtual services, and specifying routing rules, CORS policies, and timeouts.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nistio:\n  enable: true\n  gateway:\n    annotations: {}\n    enabled: false\n    host: example.com\n    labels: {}\n    tls:\n      enabled: false\n      secretName: example-tls-secret\n  virtualService:\n    annotations: {}\n    enabled: false\n    gateways: []\n    hosts: []\n    http:\n      - corsPolicy:\n          allowCredentials: false\n          allowHeaders:\n            - x-some-header\n          allowMethods:\n            - GET\n          allowOrigin:\n            - example.com\n          maxAge: 24h\n        headers:\n          request:\n            add:\n              x-some-header: value\n        match:\n          - uri:\n              prefix: /v1\n          - uri:\n              prefix: /v2\n        retries:\n          attempts: 2\n          perTryTimeout: 3s\n        rewriteUri: /\n        route:\n          - destination:\n              host: service1\n              port: 80\n        timeout: 12s\n      - route:\n          - destination:\n              host: service2\n    labels: {}\n```\n\n----------------------------------------\n\nTITLE: Liveness Probe Configuration\nDESCRIPTION: Configuration for Kubernetes liveness probe including path, timing parameters, and HTTP headers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Creating Repository with Go Bitbucket\nDESCRIPTION: Example demonstrating repository creation using the go-bitbucket library. Shows how to set repository options including owner, name and SCM type.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/devtron-labs/go-bitbucket/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n\n        \"github.com/ktrysmt/go-bitbucket\"\n)\n\nfunc main() {\n        c := bitbucket.NewBasicAuth(\"username\", \"password\")\n\n        opt := &bitbucket.RepositoryOptions{\n                Owner:    \"project_name\",\n                RepoSlug: \"repo_name\",\n                Scm:      \"git\",\n        }\n\n        res, err := c.Repositories.Repository.Create(opt)\n        if err != nil {\n                panic(err)\n        }\n\n        fmt.Println(res)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Deployment Image\nDESCRIPTION: Specifies the server deployment configuration including the image tag and image URL. This determines which container image version will be deployed for the server component.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables from ConfigMap Keys\nDESCRIPTION: Configures environment variables sourced from Kubernetes ConfigMaps with mapping between environment names and ConfigMap keys.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromConfigMapKeys: \n  - name: ENV_NAME\n    configMapName: CONFIG_MAP_NAME\n    keyName: CONFIG_MAP_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe in Kubernetes YAML\nDESCRIPTION: Defines a readiness probe configuration for Kubernetes. It includes settings for the probe path, port, delays, thresholds, and custom headers. This probe helps Kubernetes determine when the application is ready to receive traffic.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Defining Arguments for Kubernetes Container Commands\nDESCRIPTION: Specifies arguments to be passed to the container's entrypoint command. Allows customization of container behavior without modifying the image.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts in Kubernetes YAML\nDESCRIPTION: This snippet shows how to configure volume mounts in Kubernetes. It specifies mount paths for different volumes, including an example with a subPath.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee  \n```\n\n----------------------------------------\n\nTITLE: Using heredoc for Multiline Text in Go\nDESCRIPTION: Complete example demonstrating how to use heredoc.Doc() to create a multiline string while preserving indentation\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/MakeNowJust/heredoc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/MakeNowJust/heredoc\"\n)\n\nfunc main() {\n\tfmt.Println(heredoc.Doc(`\n\t\tLorem ipsum dolor sit amet, consectetur adipisicing elit,\n\t\tsed do eiusmod tempor incididunt ut labore et dolore magna\n\t\taliqua. Ut enim ad minim veniam, ...\n\t`))\n\t// Output:\n\t// Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n\t// sed do eiusmod tempor incididunt ut labore et dolore magna\n\t// aliqua. Ut enim ad minim veniam, ...\n\t//\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure Ingress in Kubernetes. It includes settings for enabling Ingress, specifying the Ingress class, annotations, hosts, paths, and TLS configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Service Mesh in YAML\nDESCRIPTION: This YAML snippet defines the configuration for Istio service mesh. It includes settings for enabling Istio, configuring gateways, virtual services, and traffic management rules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nistio:\n  enable: true\n  gateway:\n    annotations: {}\n    enabled: false\n    host: example.com\n    labels: {}\n    tls:\n      enabled: false\n      secretName: example-tls-secret\n  virtualService:\n    annotations: {}\n    enabled: false\n    gateways: []\n    hosts: []\n    http:\n      - corsPolicy:\n          allowCredentials: false\n          allowHeaders:\n            - x-some-header\n          allowMethods:\n            - GET\n          allowOrigin:\n            - example.com\n          maxAge: 24h\n        headers:\n          request:\n            add:\n              x-some-header: value\n        match:\n          - uri:\n              prefix: /v1\n          - uri:\n              prefix: /v2\n        retries:\n          attempts: 2\n          perTryTimeout: 3s\n        rewriteUri: /\n        route:\n          - destination:\n              host: service1\n              port: 80\n        timeout: 12s\n      - route:\n          - destination:\n              host: service2\n    labels: {}\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Affinity and Anti-Affinity Rules in YAML\nDESCRIPTION: This snippet outlines the structure for specifying affinity rules in a Kubernetes deployment. It allows for constraining pod scheduling based on node labels.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Volumes in YAML\nDESCRIPTION: This snippet demonstrates how to define volumes in a Kubernetes deployment. It includes examples of an emptyDir volume and a persistentVolumeClaim.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Kafka in Kubernetes YAML\nDESCRIPTION: This snippet shows how to configure KEDA autoscaling based on Kafka metrics in a Kubernetes deployment. It includes settings for Kafka servers, topics, and authentication.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Using WithStackTrace Option\nDESCRIPTION: Example of using the WithStackTrace option for spans to include stack traces for errors\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_26\n\nLANGUAGE: go\nCODE:\n```\nspan.RecordError(err, trace.WithStackTrace())\n```\n\n----------------------------------------\n\nTITLE: Configuring Service in Devtron Deployment Chart\nDESCRIPTION: This YAML configuration defines the Kubernetes service that exposes the application. It specifies the service type and optional annotations for customizing service behavior.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n  service:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress in Kubernetes YAML\nDESCRIPTION: Sets up Ingress for public access to applications in Kubernetes. It includes options for enabling Ingress, specifying the Ingress class, annotations, hosts, paths, and TLS settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables from Secret Keys in Kubernetes\nDESCRIPTION: YAML configuration for setting environment variables from Kubernetes Secrets. This allows pods to reference sensitive data stored in Secrets by specifying the Secret name and key to reference.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromSecretKeys: \n  - name: ENV_NAME\n    secretName: SECRET_NAME\n    keyName: SECRET_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaling in Kubernetes YAML\nDESCRIPTION: Sets up Horizontal Pod Autoscaling (HPA) to automatically scale the number of pods based on CPU and memory utilization or custom metrics.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak OIDC for Devtron SSO Integration\nDESCRIPTION: YAML configuration for setting up the Keycloak OIDC connection in Devtron. It includes the issuer URL, client ID, client secret, and redirect URI fields necessary for establishing SSO between Keycloak and Devtron.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/authorization/sso/keycloak.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nissuer: https://keycloak.example.com/auth/realms/your-realm\nclientID: devtron\nclientSecret: your-client-secret-from-keycloak\nredirectURI: https://your-devtron-url/orchestrator/api/dex/callback\n```\n\n----------------------------------------\n\nTITLE: Configuring Topology Spread Constraints in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to set up topology spread constraints for a Kubernetes deployment. It defines rules for spreading pods across failure domains, which can help achieve high availability and efficient resource utilization.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Various Kubernetes Service Types\nDESCRIPTION: This snippet uses Go templating to generate shell commands for retrieving the application URL. It handles different scenarios including Ingress, NodePort, LoadBalancer, and ClusterIP service types. The generated commands use kubectl to extract necessary information from the Kubernetes cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Cache Usage in Go\nDESCRIPTION: Example demonstrating basic cache operations with go-redis/cache, including setting up a Redis ring, configuring the cache with TinyLFU local caching, and performing Set and Get operations on a custom object.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-redis/cache/v9/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage cache_test\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n\n    \"github.com/redis/go-redis/v9\"\n    \"github.com/go-redis/cache/v9\"\n)\n\ntype Object struct {\n    Str string\n    Num int\n}\n\nfunc Example_basicUsage() {\n    ring := redis.NewRing(&redis.RingOptions{\n        Addrs: map[string]string{\n            \"server1\": \":6379\",\n            \"server2\": \":6380\",\n        },\n    })\n\n    mycache := cache.New(&cache.Options{\n        Redis:      ring,\n        LocalCache: cache.NewTinyLFU(1000, time.Minute),\n    })\n\n    ctx := context.TODO()\n    key := \"mykey\"\n    obj := &Object{\n        Str: \"mystring\",\n        Num: 42,\n    }\n\n    if err := mycache.Set(&cache.Item{\n        Ctx:   ctx,\n        Key:   key,\n        Value: obj,\n        TTL:   time.Hour,\n    }); err != nil {\n        panic(err)\n    }\n\n    var wanted Object\n    if err := mycache.Get(ctx, key, &wanted); err == nil {\n        fmt.Println(wanted)\n    }\n\n    // Output: {mystring 42}\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Validation for Resource Constraints in Kubernetes\nDESCRIPTION: Validation rules ensuring resource limits are greater than or equal to resource requests for CPU and memory in both the main container and envoyproxy.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\nresources.limits.cpu >= resources.requests.cpu\nresources.limits.memory >= resources.requests.memory\nenvoyproxy.resources.limits.cpu >= envoyproxy.resources.requests.cpu\nenvoyproxy.resources.limits.memory >= envoyproxy.resources.requests.memory\n```\n\n----------------------------------------\n\nTITLE: Using SugaredLogger for Structured Logging in Go\nDESCRIPTION: This example demonstrates how to use the SugaredLogger for contexts where performance is not critical. It shows both structured logging with key-value pairs and printf-style logging.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.uber.org/zap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogger, _ := zap.NewProduction()\ndefer logger.Sync() // flushes buffer, if any\nsugar := logger.Sugar()\nsugar.Infow(\"failed to fetch URL\",\n  // Structured context as loosely typed key-value pairs.\n  \"url\", url,\n  \"attempt\", 3,\n  \"backoff\", time.Second,\n)\nsugar.Infof(\"Failed to fetch URL: %s\", url)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Different Kubernetes Service Types\nDESCRIPTION: Template logic that generates appropriate commands to get the application URL based on ingress configuration and service type. Handles four scenarios: ingress-enabled, NodePort, LoadBalancer, and ClusterIP service types. Uses Kubernetes commands and environment variables to construct the appropriate URL.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-0-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Monitor in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure a Service Monitor in Kubernetes. It specifies monitoring parameters such as path, scheme, interval, and metric relabeling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Setting Container Security Context in Devtron\nDESCRIPTION: Configuration example for adding security context at the container level in Kubernetes deployments. This example prevents privilege escalation for the main container.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Volumes in YAML\nDESCRIPTION: This YAML snippet defines the configuration for Kubernetes Volumes. It includes examples of emptyDir and persistentVolumeClaim volume types.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Helm Template for Kubernetes Service URL Retrieval\nDESCRIPTION: A comprehensive Helm template that generates commands to retrieve application URLs based on the service type configured. Handles multiple scenarios including Ingress configurations with TLS, NodePort services, LoadBalancer services with IP waiting logic, and ClusterIP services for pod identification.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Various Kubernetes Service Types using Helm Templates\nDESCRIPTION: A collection of commands to retrieve the application URL based on the service type configuration in Helm values. It handles Ingress, NodePort, LoadBalancer, and ClusterIP service types, with specific commands for each scenario to extract and format the URL properly.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-2-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Prometheus in Kubernetes YAML\nDESCRIPTION: Sets up KEDA (Kubernetes-based Event Driven Autoscaler) using Prometheus metrics. This allows for event-driven autoscaling of containers based on custom metrics.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress in Kubernetes Deployment (YAML)\nDESCRIPTION: Defines Ingress settings for public access to the application. Includes options for enabling Ingress, setting the Ingress class, annotations, hosts, paths, and TLS configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaling in YAML\nDESCRIPTION: Defines autoscaling settings connected to HPA for controlling scaling up and down in response to request load. Includes settings for enabling, min/max replicas, CPU/memory utilization targets, and extra metrics.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Kafka Integration\nDESCRIPTION: Sets up KEDA autoscaling based on Kafka message lag. Includes configuration for bootstrap servers, topic, consumer group, and authentication using Kubernetes secrets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Configuring Resources in Kubernetes YAML\nDESCRIPTION: This YAML snippet defines resource requirements for a Kubernetes deployment. It specifies CPU and memory limits and requests for the containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaling\nDESCRIPTION: Defines HPA configuration for automatic scaling based on CPU and memory utilization.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Adding Raw Kubernetes YAML Resources\nDESCRIPTION: YAML configuration for including custom Kubernetes resources in the deployment. Allows specifying any Kubernetes object that will be applied when the application is deployed.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Containers in Kubernetes YAML\nDESCRIPTION: This snippet shows how to define multiple containers within a single pod in a Kubernetes deployment. It includes container name, image, ports, and command specifications.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Ingress Configuration for Devtron Installation\nDESCRIPTION: Command to install Devtron with a comprehensive Ingress configuration. This includes class, host, annotations, labels, path type, and TLS settings in a single command.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/ingress-setup.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm install devtron devtron/devtron-operator -n devtroncd \\\n  --set components.devtron.ingress.enabled=true \\\n  --set components.devtron.ingress.className=nginx \\\n  --set components.devtron.ingress.host=devtron.example.com \\\n  --set components.devtron.ingress.annotations.\"kubernetes\\.io/ingress\\.class\"=nginx \\\n  --set components.devtron.ingress.annotations.\"nginx\\.ingress\\.kubernetes\\.io\\/app-root\"=\"/dashboard\" \\\n  --set components.devtron.ingress.labels.env=production \\\n  --set components.devtron.ingress.pathType=ImplementationSpecific \\\n  --set components.devtron.ingress.tls[0].secretName=devtron-tls \\\n  --set components.devtron.ingress.tls[0].hosts[0]=devtron.example.com\n```\n\n----------------------------------------\n\nTITLE: Go Example of YAML Marshaling and Unmarshaling\nDESCRIPTION: A complete example demonstrating how to marshal and unmarshal YAML data in Go. It shows how to convert between YAML strings and both typed structs and dynamic maps, including custom struct tag usage for renaming fields and controlling output format.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/sigs.k8s.io/yaml/goyaml.v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v2\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Admin Token for Kubernetes Cluster Authentication in Bash\nDESCRIPTION: This script downloads and executes a Kubernetes service account creator that generates the bearer token needed for adding a cluster to Devtron. It creates a service account named 'cd-user' in the 'devtroncd' namespace with appropriate cluster role permissions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/user-guide/global-configurations/cluster-and-environments.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/devtron-labs/utilities/main/kubeconfig-exporter/kubernetes_export_sa.sh && bash kubernetes_export_sa.sh cd-user devtroncd https://raw.githubusercontent.com/devtron-labs/utilities/main/kubeconfig-exporter/clusterrole.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe in YAML\nDESCRIPTION: Defines a liveness probe for Kubernetes to restart the pod if the check fails. Includes options for path, port, delay, timeout, and custom headers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Merging Structs with Mergo in Go\nDESCRIPTION: Example of using Mergo to merge two structs, demonstrating basic usage and error handling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/dario.cat/mergo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif err := mergo.Merge(&dst, src); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Devtron CI YAML Structure\nDESCRIPTION: YAML configuration structure for defining CI pipeline behavior and test execution in Devtron. Includes version specification, branch targeting, and script execution stages.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/workflow/automated-test.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: string              # specify the version of yaml\nappliesTo:\n  type: string            # BRANCH_FIXED or TAG_PATTERN\n  value: string           # branch name or regex pattern\nscript: string            # execution script\nbeforeDockerBuildStages:  # scripts to run before docker build\nafterDockerBuildStages:   # scripts to run after docker build\noutputLocation: string     # test report output location\n```\n\n----------------------------------------\n\nTITLE: Configuring Rolling Deployment Strategy in Devtron\nDESCRIPTION: Configuration for Rolling deployments in Devtron. This strategy gradually replaces instances of the previous version with instances of the new version. Parameters control maximum surge and maximum unavailable pods during rollout.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/workflow/cd-pipeline.md#2025-04-22_snippet_3\n\nLANGUAGE: markup\nCODE:\n```\nrolling:\n  maxSurge: \"25%\"\n  maxUnavailable: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Volumes in Kubernetes YAML\nDESCRIPTION: This snippet shows how to define volumes in a Kubernetes deployment. It includes examples of using an emptyDir volume and a persistentVolumeClaim.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: KEDA Autoscaling with Prometheus\nDESCRIPTION: Configures KEDA autoscaling using Prometheus metrics\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Various Kubernetes Service Types\nDESCRIPTION: This snippet demonstrates how to obtain the application URL for different Kubernetes service types including Ingress, NodePort, LoadBalancer, and ClusterIP. It uses Go templating to conditionally execute the appropriate commands based on the service configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Limits and Requests in Kubernetes YAML\nDESCRIPTION: Defines CPU and memory resource limits and requests for containers in a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Converting Retryable HTTP Client to Standard HTTP Client in Go\nDESCRIPTION: Demonstrates how to create a retryablehttp client with custom configuration and convert it to a standard *http.Client for broader compatibility with existing code.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/go-retryablehttp/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nretryClient := retryablehttp.NewClient()\nretryClient.RetryMax = 10\n\nstandardClient := retryClient.StandardClient() // *http.Client\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Deployment Settings\nDESCRIPTION: YAML configuration for server deployment settings, including image tag and URL. This is used to provide basic server configuration for the deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables from ConfigMap Keys in YAML\nDESCRIPTION: Configures environment variables using values from Kubernetes ConfigMaps. Specifies the environment variable name, ConfigMap name, and the key within the ConfigMap.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromCongigMapKeys: \n  - name: ENV_NAME\n    configMapName: CONFIG_MAP_NAME\n    keyName: CONFIG_MAP_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Affinity Rules in Kubernetes Specs\nDESCRIPTION: Defines affinity rules that constrain which nodes your pods can be scheduled on. This helps in controlling pod placement based on node labels.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Disruption Budget with maxUnavailable in Kubernetes\nDESCRIPTION: YAML configuration for PodDisruptionBudget that limits the number of pods that can be down simultaneously from voluntary disruptions. This example allows maximum 50% of pods to be unavailable during disruptions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     maxUnavailable: 50%\n```\n\n----------------------------------------\n\nTITLE: Configuring MaxUnavailable for Rolling Updates\nDESCRIPTION: Defines the maximum number of pods that can be unavailable during a rolling update. Value can be an absolute number or percentage of replicas count.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  MaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Managing Transactions in XORM\nDESCRIPTION: Examples of transaction handling using both manual begin/commit and the Transaction helper function\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-xorm/xorm/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nsession := engine.NewSession()\ndefer session.Close()\n\nif err := session.Begin(); err != nil {\n    return err\n}\n\n// ... perform operations ...\n\nreturn session.Commit()\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Resource Limits\nDESCRIPTION: Resource configuration for container CPU and memory limits and requests.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Different Kubernetes Service Types\nDESCRIPTION: A conditional template that outputs commands for getting the application URL based on the service type configured in values.yaml. Handles Ingress, NodePort, LoadBalancer, and ClusterIP service types with appropriate kubectl commands for each scenario.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-1-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe for StatefulSet in YAML\nDESCRIPTION: Defines the liveness probe configuration for the StatefulSet. Includes settings for probe path, port, delays, thresholds, custom headers, and TCP check options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Setting Up Service Monitor for Prometheus in Kubernetes\nDESCRIPTION: Configures a ServiceMonitor resource for Prometheus monitoring. Specifies monitoring parameters such as scrape path, interval, timeout, and metric relabeling rules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Internal Ingress in YAML\nDESCRIPTION: This YAML snippet defines the configuration for a Kubernetes Internal Ingress resource. It includes settings for enabling the Ingress, specifying the Ingress class, annotations, hosts, paths, and TLS configuration for private access.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Unset Environment Variables After Reading with env Package\nDESCRIPTION: Example struct definition showing how to unset environment variables after reading their values using the unset tag option.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/caarlos0/env/v6/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype config struct {\n\tSecretKey string `env:\"SECRET_KEY,unset\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Kubernetes Pod\nDESCRIPTION: Configuration for setting environment variables in container pods.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Winter Soldier in Kubernetes YAML\nDESCRIPTION: This YAML snippet defines Winter Soldier configuration for managing Kubernetes resources. It includes settings for enabling Winter Soldier, specifying actions, time ranges, target replicas, and field selectors for resource management.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nwinterSoldier:\n  enabled: false\n  apiVersion: pincher.devtron.ai/v1alpha1\n  action: sleep\n  timeRangesWithZone:\n    timeZone: \"Asia/Kolkata\"\n    timeRanges: []\n  targetReplicas: []\n  fieldSelector: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe for Kubernetes Container (YAML)\nDESCRIPTION: Defines a liveness probe to check if the container is running. If this check fails, Kubernetes restarts the pod. Includes settings for probe path, port, delay, timeout, and custom headers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Arguments for Container Commands\nDESCRIPTION: YAML configuration for specifying arguments to be passed to the container command. The 'enabled' flag controls whether arguments are provided, and 'value' contains the actual argument list.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Defining a Go struct with comments\nDESCRIPTION: This snippet demonstrates how to define a Go struct with comments that can be used in the generated JSON Schema.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/invopop/jsonschema/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// User is used as a base to provide tests for comments.\ntype User struct {\n\t// Unique sequential identifier.\n\tID int `json:\"id\" jsonschema:\"required\"`\n\t// Name of the user\n\tName string `json:\"name\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe\nDESCRIPTION: Health check configuration to determine if a pod can receive traffic.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Server with Chained Interceptors in Go\nDESCRIPTION: This snippet demonstrates how to create a gRPC server with chained interceptors using the grpc_middleware package. It includes both stream and unary interceptors for various purposes such as context tagging, OpenTracing, Prometheus monitoring, Zap logging, authentication, and error recovery.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-middleware/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/grpc-ecosystem/go-grpc-middleware\"\n\nmyServer := grpc.NewServer(\n    grpc.StreamInterceptor(grpc_middleware.ChainStreamServer(\n        grpc_ctxtags.StreamServerInterceptor(),\n        grpc_opentracing.StreamServerInterceptor(),\n        grpc_prometheus.StreamServerInterceptor,\n        grpc_zap.StreamServerInterceptor(zapLogger),\n        grpc_auth.StreamServerInterceptor(myAuthFunction),\n        grpc_recovery.StreamServerInterceptor(),\n    )),\n    grpc.UnaryInterceptor(grpc_middleware.ChainUnaryServer(\n        grpc_ctxtags.UnaryServerInterceptor(),\n        grpc_opentracing.UnaryServerInterceptor(),\n        grpc_prometheus.UnaryServerInterceptor,\n        grpc_zap.UnaryServerInterceptor(zapLogger),\n        grpc_auth.UnaryServerInterceptor(myAuthFunction),\n        grpc_recovery.UnaryServerInterceptor(),\n    )),\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Redis Cache Usage with Once Pattern in Go\nDESCRIPTION: Demonstrates the advanced 'Once' pattern with go-redis/cache, which combines get-or-set functionality to retrieve a cached item or compute and store it if not found, reducing boilerplate code and race conditions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-redis/cache/v9/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc Example_advancedUsage() {\n    ring := redis.NewRing(&redis.RingOptions{\n        Addrs: map[string]string{\n            \"server1\": \":6379\",\n            \"server2\": \":6380\",\n        },\n    })\n\n    mycache := cache.New(&cache.Options{\n        Redis:      ring,\n        LocalCache: cache.NewTinyLFU(1000, time.Minute),\n    })\n\n    obj := new(Object)\n    err := mycache.Once(&cache.Item{\n        Key:   \"mykey\",\n        Value: obj, // destination\n        Do: func(*cache.Item) (interface{}, error) {\n            return &Object{\n                Str: \"mystring\",\n                Num: 42,\n            }, nil\n        },\n    })\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(obj)\n    // Output: &{mystring 42}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets\nDESCRIPTION: Configures credentials for pulling images from private registries.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Basic Logrus Usage with Package-Level Logger\nDESCRIPTION: A simple example demonstrating the basic usage of Logrus with the package-level exported logger, showing how to add structured fields to log entries.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc main() {\n  log.WithFields(log.Fields{\n    \"animal\": \"walrus\",\n  }).Info(\"A walrus appears\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers in Kubernetes YAML\nDESCRIPTION: Defines init containers that run before app containers in a Kubernetes Pod. It includes options for reusing the base image, setting security context, and specifying commands.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n    image: nginx:1.14.2\n    securityContext:\n      privileged: true\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Using Raw Kubernetes YAML for Custom Resources\nDESCRIPTION: Allows specifying arbitrary Kubernetes resources as raw YAML that will be applied during deployment. This example defines a Service resource that exposes the application within the cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Monitor in Kubernetes YAML\nDESCRIPTION: Specifies service monitor settings for Prometheus, including path, scheme, interval, and metric relabelings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe\nDESCRIPTION: Defines health check configuration for container readiness including paths, timeouts, and thresholds\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in YAML\nDESCRIPTION: Defines ports on which application services will be exposed to other services. Includes settings for envoy port, idle timeout, name, port, service port, streaming support, and HTTP2 usage.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Setting Up Prometheus ServiceMonitor\nDESCRIPTION: Configures Prometheus ServiceMonitor for application metrics collection. It specifies the monitoring path, scheme, scraping interval, timeout, and metric relabeling rules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Setting Command Arguments in Kubernetes YAML\nDESCRIPTION: This snippet shows how to set command arguments for a container in Kubernetes. It allows you to enable or disable arguments and specify their values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Setting MaxUnavailable in Kubernetes YAML\nDESCRIPTION: Specifies the maximum number of pods that can be unavailable during the update process. Can be an absolute number or percentage of replicas count.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaling in Devtron Deployment Chart\nDESCRIPTION: This YAML configuration defines autoscaling parameters connected to HPA (Horizontal Pod Autoscaler). It controls scaling up and down in response to CPU, memory, or custom metrics load.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers in Kubernetes Deployment YAML\nDESCRIPTION: Defines init containers that run before the main application containers in a pod. It includes options for reusing the main container image, setting security contexts, and specifying commands.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n    image: nginx:1.14.2\n    securityContext:\n      privileged: true\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Limits and Requests\nDESCRIPTION: Defines CPU and memory resource limits and requests for containers\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagger Canary Deployment in Kubernetes\nDESCRIPTION: Configuration for Flagger-based canary deployments with Istio service mesh integration. Includes settings for traffic routing, analysis parameters, and load testing configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nflaggerCanary:\n  addOtherGateways: []\n  addOtherHosts: []\n  analysis:\n    interval: 15s\n    maxWeight: 50\n    stepWeight: 5\n    threshold: 5\n  annotations: {}\n  appProtocol: http\n  corsPolicy:\n    allowCredentials: false\n    allowHeaders:\n      - x-some-header\n    allowMethods:\n      - GET\n    allowOrigin:\n      - example.com\n    maxAge: 24h\n  createIstioGateway:\n    annotations: {}\n    enabled: false\n    host: example.com\n    labels: {}\n    tls:\n      enabled: false\n      secretName: example-tls-secret\n  enabled: false\n  gatewayRefs: null\n  headers:\n    request:\n      add:\n        x-some-header: value\n  labels: {}\n  loadtest:\n    enabled: true\n    url: http://flagger-loadtester.istio-system/\n  match:\n    - uri:\n        prefix: /\n  port: 8080\n  portDiscovery: true\n  retries: null\n  rewriteUri: /\n  targetPort: 8080\n  thresholds:\n    latency: 500\n    successRate: 90\n  timeout: null\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Limits and Requests in YAML\nDESCRIPTION: Defines minimum and maximum RAM and CPU available to the application. Includes settings for both resource limits and requests.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Using Encoded Connections in NATS Go\nDESCRIPTION: Demonstrates the usage of encoded connections in NATS, which allow publishing and subscribing to Go types directly. It covers creating an encoded connection, publishing, subscribing, and making requests.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nnc, _ := nats.Connect(nats.DefaultURL)\nc, _ := nats.NewEncodedConn(nc, nats.JSON_ENCODER)\ndefer c.Close()\n\n// Simple Publisher\nc.Publish(\"foo\", \"Hello World\")\n\n// Simple Async Subscriber\nc.Subscribe(\"foo\", func(s string) {\n    fmt.Printf(\"Received a message: %s\\n\", s)\n})\n\n// EncodedConn can Publish any raw Go type using the registered Encoder\ntype person struct {\n     Name     string\n     Address  string\n     Age      int\n}\n\n// Go type Subscriber\nc.Subscribe(\"hello\", func(p *person) {\n    fmt.Printf(\"Received a person: %+v\\n\", p)\n})\n\nme := &person{Name: \"derek\", Age: 22, Address: \"140 New Montgomery Street, San Francisco, CA\"}\n\n// Go type Publisher\nc.Publish(\"hello\", me)\n\n// Unsubscribe\nsub, err := c.Subscribe(\"foo\", nil)\n// ...\nsub.Unsubscribe()\n\n// Requests\nvar response string\nerr = c.Request(\"help\", \"help me\", &response, 10*time.Millisecond)\nif err != nil {\n    fmt.Printf(\"Request failed: %v\\n\", err)\n}\n\n// Replying\nc.Subscribe(\"help\", func(subj, reply string, msg string) {\n    c.Publish(reply, \"I can help!\")\n})\n\n// Close connection\nc.Close();\n```\n\n----------------------------------------\n\nTITLE: Secret-based Environment Variables Configuration\nDESCRIPTION: Configuration for environment variables sourced from Kubernetes secrets, specifying environment name, secret name and key.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromSecretKeys: \n  - name: ENV_NAME\n    secretName: SECRET_NAME\n    keyName: SECRET_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress in Kubernetes YAML\nDESCRIPTION: Defines ingress settings for Kubernetes deployments, including class, annotations, hosts, paths, and TLS configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Calculating gRPC Request Inbound Rate\nDESCRIPTION: Calculates the rate of incoming requests per second over a 1-minute window for each gRPC service. Groups results by grpc_service and sums all methods together.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_8\n\nLANGUAGE: jsoniq\nCODE:\n```\nsum(rate(grpc_server_started_total{job=\"foo\"}[1m])) by (grpc_service)\n```\n\n----------------------------------------\n\nTITLE: Configuring Ambassador Mappings for External Access\nDESCRIPTION: Configuration for Ambassador API Gateway mappings to expose services outside the cluster. Includes hostname, path, TLS settings, and CORS policy configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nambassadorMapping:\n  ambassadorId: \"prod-emissary\"\n  cors: {}\n  enabled: true\n  hostname: devtron.example.com\n  labels: {}\n  prefix: /\n  retryPolicy: {}\n  rewrite: \"\"\n  tls:\n    context: \"devtron-tls-context\"\n    create: false\n    hosts: []\n    secretName: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Init Containers in YAML\nDESCRIPTION: This YAML snippet defines the configuration for Kubernetes Init Containers. It includes settings for container image reuse, security context, volume mounts, and command execution.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   args:\n    - sleep 300           \n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n    image: nginx:1.14.2\n    securityContext:\n      privileged: true\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables from ConfigMaps in Kubernetes\nDESCRIPTION: Demonstrates how to set environment variables using values from Kubernetes ConfigMaps. This is useful for injecting configuration data into containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromConfigMapKeys: \n  - name: ENV_NAME\n    configMapName: CONFIG_MAP_NAME\n    keyName: CONFIG_MAP_KEY\n```\n\n----------------------------------------\n\nTITLE: Setting Pod-Level Security Context for User and Group Permissions\nDESCRIPTION: YAML configuration for pod-level security context that defines user, group, and filesystem group IDs for the pod. This helps manage access control and permissions at the pod level.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Using RE2 Compatibility Mode with Regexp2 in Go\nDESCRIPTION: Demonstrates how to use the RE2 compatibility mode when compiling a regular expression with regexp2. This mode changes certain behaviors to increase compatibility with the RE2 engine.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/dlclark/regexp2/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nre := regexp2.MustCompile(`Your RE2-compatible pattern`, regexp2.RE2)\nif isMatch, _ := re.MatchString(`Something to match`); isMatch {\n    //do something\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Deployment Settings\nDESCRIPTION: Defines server deployment configuration including image tag and image URL. This is used to specify which container image should be deployed for the server component.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Setting MaxUnavailable in YAML\nDESCRIPTION: Defines the maximum number of pods that can be unavailable during the update process. Can be an absolute number or percentage of replicas count.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaling\nDESCRIPTION: Defines HPA (Horizontal Pod Autoscaling) settings for automatic scaling based on resource utilization.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: KEDA Autoscaling with Prometheus\nDESCRIPTION: Configures KEDA autoscaling based on Prometheus metrics\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Termination Grace Period\nDESCRIPTION: Sets the termination grace period for pods, which defines how long Kubernetes waits before forcefully terminating a pod. Default is 30 seconds, but can be increased for applications requiring more time for graceful shutdown.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Using Log Levels in Logrus for Go\nDESCRIPTION: Examples of using the seven logging levels in Logrus (Trace, Debug, Info, Warning, Error, Fatal, Panic). Shows how to output logs with different severity levels and set the minimum logging threshold.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nlog.Trace(\"Something very low level.\")\nlog.Debug(\"Useful debugging information.\")\nlog.Info(\"Something noteworthy happened!\")\nlog.Warn(\"You should probably take a look at this.\")\nlog.Error(\"Something failed but I'm not quitting.\")\n// Calls os.Exit(1) after logging\nlog.Fatal(\"Bye.\")\n// Calls panic() after logging\nlog.Panic(\"I'm bailing.\")\n```\n\nLANGUAGE: go\nCODE:\n```\n// Will log anything that is info or above (warn, error, fatal, panic). Default.\nlog.SetLevel(log.InfoLevel)\n```\n\n----------------------------------------\n\nTITLE: MaxSurge Configuration\nDESCRIPTION: Defines the maximum number of pods that can exceed the desired pod count during updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Volumes in Kubernetes Deployments\nDESCRIPTION: Configures volume resources that need to be read from or written to an external disk. Includes examples of both emptyDir and persistentVolumeClaim volume types.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Ingress\nDESCRIPTION: Ingress configuration for external access to services including host rules, paths, and TLS settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Resources in Devtron Deployment Chart\nDESCRIPTION: This YAML configuration defines minimum (requests) and maximum (limits) RAM and CPU resources available to the application. These settings ensure proper resource allocation and constraints.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Kafka in YAML\nDESCRIPTION: This snippet demonstrates how to set up KEDA autoscaling based on Kafka metrics. It includes configurations for Kafka bootstrap servers, topic, lag threshold, and authentication details for secure Kafka connections.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Reading Object from Google Cloud Storage Bucket in Go\nDESCRIPTION: This snippet demonstrates how to read an object from a Google Cloud Storage bucket. It creates a new reader for the specified object, reads all its content, and handles potential errors. The bucket name and object name are hardcoded in this example.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/cloud.google.com/go/storage/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Read the object1 from bucket.\nrc, err := client.Bucket(\"bucket\").Object(\"object1\").NewReader(ctx)\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer rc.Close()\nbody, err := io.ReadAll(rc)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Raw Kubernetes YAML Objects to Deployments\nDESCRIPTION: Allows direct inclusion of Kubernetes objects in the deployment. This example demonstrates adding a Service resource that will be applied alongside the main application deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Defining Volumes in Kubernetes YAML\nDESCRIPTION: Specifies volumes for external storage, including empty directories and persistent volume claims. This is necessary when values need to be read from or written to external disks.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Implementing KEDA Autoscaling with Kafka Triggers\nDESCRIPTION: Configures KEDA autoscaling based on Kafka message lag. It includes bootstrap server configuration, topic name, consumer group, and authentication specifications for secure Kafka connections.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress in Kubernetes YAML\nDESCRIPTION: Defines ingress settings for public access to the application. It includes configurations for ingress class, annotations, hosts, paths, and TLS settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Executing Queries with Parameters in Core for Go\nDESCRIPTION: Shows different ways to execute queries with parameters: using positional parameters, named parameters with a struct, and named parameters with a map.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/core/README.md#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nrows, err := db.Query(\"select * from table where name = ?\", name)\n\nuser = User{\n    Name:\"lunny\",\n}\nrows, err := db.QueryStruct(\"select * from table where name = ?Name\",\n            &user)\n\nvar user = map[string]interface{}{\n    \"name\": \"lunny\",\n}\nrows, err = db.QueryMap(\"select * from table where name = ?name\",\n            &user)\n```\n\n----------------------------------------\n\nTITLE: Validating Resource Limits and Requests in Kubernetes Manifests\nDESCRIPTION: Defines the validation requirements for resource allocation in Kubernetes. The constraints ensure that the limit values for CPU and memory must always be greater than or equal to their corresponding request values, both for regular containers and for envoyproxy sidecar containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_46\n\nLANGUAGE: plaintext\nCODE:\n```\nresources.limits.cpu >= resources.requests.cpu\nresources.limits.memory >= resources.requests.memory\nenvoyproxy.resources.limits.cpu >= envoyproxy.resources.requests.cpu\nenvoyproxy.resources.limits.memory >= envoyproxy.resources.requests.memory\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes Application URL Based on Service Type\nDESCRIPTION: A Helm template that determines and outputs the appropriate application URL based on the configured service type (Ingress, NodePort, LoadBalancer, or ClusterIP). The template handles different service configurations and provides corresponding kubectl commands to retrieve the necessary connection information.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-app-rolling/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL Based on Service Type - Helm Template\nDESCRIPTION: A Helm template that generates commands to obtain the application URL based on the service type configuration. Handles multiple scenarios including Ingress endpoints, NodePort services, LoadBalancer IPs, and ClusterIP pod names. Uses conditional logic to determine the appropriate command set based on the service configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Limits and Requests in Devtron Deployment\nDESCRIPTION: Defines minimum (requests) and maximum (limits) CPU and memory resources available to the application. Requests are guaranteed resources, while limits restrict maximum usage.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress Settings\nDESCRIPTION: YAML configuration for Kubernetes ingress including hosts, paths, and TLS settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Volumes in Kubernetes YAML\nDESCRIPTION: This YAML snippet defines volume configurations for a Kubernetes deployment. It includes examples of emptyDir and persistentVolumeClaim volume types.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes Application URL Based on Service Type\nDESCRIPTION: A conditional Helm template that generates instructions for accessing a deployed application based on the service type. The template handles Ingress, NodePort, LoadBalancer, and ClusterIP configurations, providing the appropriate kubectl commands for each case.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Readiness Probe Configuration\nDESCRIPTION: Kubernetes readiness probe configuration for traffic management, including path, timing parameters, and HTTP headers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in Kubernetes\nDESCRIPTION: Defines how application services are exposed through container ports, including envoy, service, and node ports with HTTP/2 and streaming support.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    nodePort: 32056\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Service in Kubernetes YAML\nDESCRIPTION: Defines the type of Kubernetes service and any associated annotations. This configuration determines how the application is exposed within the cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n  service:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service\nDESCRIPTION: Defines service type and annotations for Kubernetes service configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  type: ClusterIP\n  annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Volumes in Kubernetes YAML\nDESCRIPTION: Defines volume configurations for a Kubernetes deployment, including an empty directory and a persistent volume claim.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal Pod Autoscaling\nDESCRIPTION: Sets up HPA for automatic scaling based on CPU and memory utilization. Controls minimum and maximum replica counts and scaling thresholds for the deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Setting Max Surge in Kubernetes Deployment (YAML)\nDESCRIPTION: Defines the maximum number of pods that can be created over the desired number of pods. Can be an absolute number or percentage of replicas.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaling Settings\nDESCRIPTION: Defines horizontal pod autoscaling configuration including min/max replicas and CPU/memory targets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress in Kubernetes YAML\nDESCRIPTION: Defines Ingress resources for public access to the application. It includes settings for ingress class, annotations, hosts, paths, and TLS configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Service in Kubernetes YAML\nDESCRIPTION: This snippet shows how to configure a Kubernetes Service. It specifies the service type as ClusterIP and allows for custom annotations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n  service:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Deployment with Devtron Dynamic Variables in YAML\nDESCRIPTION: This snippet demonstrates how to create a Kubernetes Deployment using Devtron's dynamic variables. It shows how to reference application ID, environment ID, and container image details that will be automatically populated by Devtron during deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/contrib-chart/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n    name: httpd-web\n    labels:\n        app: myweb\nspec:\n    replicas: 1\n    selector:\n        matchLabels:\n            app: myweb\n    template:\n        metadata:\n            labels:\n                app: myweb\n                appId: {{ $.Values.app | quote }}\n                envId: {{ $.Values.env | quote }}\n        spec:\n            containers:\n            - name: myweb-pod\n              image: \"{{ $.Values.server.deployment.image }}:{{ $.Values.server.deployment.image_tag }}\"\n              ports:\n              - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Debugging Pods with kubectl commands in Cluster Terminal\nDESCRIPTION: Commands to check the current state of pods and get detailed information for debugging. These commands can be executed in Devtron's Cluster Terminal to help troubleshoot pod issues.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/resource-browser.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe pod <podname>\n```\n\n----------------------------------------\n\nTITLE: Generating Cluster Credentials for K8s Providers (Bash)\nDESCRIPTION: This script generates the server URL and bearer token for Kubernetes clusters from providers like EKS, AKS, GKE, Kops, and Digital Ocean managed Kubernetes. It creates a service account and extracts the necessary credentials.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/cluster-and-environments.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/devtron-labs/utilities/main/kubeconfig-exporter/kubernetes_export_sa.sh && bash kubernetes_export_sa.sh cd-user  devtroncd\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidecar Containers\nDESCRIPTION: Defines additional containers running alongside the main container in the same pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe for Kubernetes Containers\nDESCRIPTION: Defines parameters for readiness checks that determine when a pod should receive traffic. Includes HTTP path, timing, and TCP socket options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Security Context in YAML\nDESCRIPTION: Configuration for pod-level security context settings including user, group, and filesystem permissions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Container Pod\nDESCRIPTION: Configuration for deploying multiple containers within a pod, including sidecar containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ncontainers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n      - reuseContainerImage: true\n        securityContext:\n          runAsUser: 1000\n          runAsGroup: 3000\n          fsGroup: 2000\n        volumeMounts:\n        - mountPath: /etc/ls-oms\n          name: ls-oms-cm-vol\n        command:\n          - flyway\n          - -configFiles=/etc/ls-oms/flyway.conf\n          - migrate\n```\n\n----------------------------------------\n\nTITLE: Acquiring Access Token with Client Credentials in Go\nDESCRIPTION: This code demonstrates how to acquire an access token using client credentials authentication in Go.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/autorest/adal/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\napplicationSecret := \"APPLICATION_SECRET\"\n\nspt, err := adal.NewServicePrincipalToken(\n\t*oauthConfig,\n\tappliationID,\n\tapplicationSecret,\n\tresource,\n\tcallbacks...)\nif err != nil {\n\treturn nil, err\n}\n\n// Acquire a new access token\nerr  = spt.Refresh()\nif (err == nil) {\n    token := spt.Token\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Application Gateway Annotations for HTTPS in Devtron\nDESCRIPTION: This code snippet shows the required annotations that need to be added under the ingress.annotations section to configure Devtron to run over HTTPS with Azure Application Gateway. The annotations specify the ingress class, backend protocol, SSL redirect configuration, and certificate reference.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/ingress-setup.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n annotations:\n  kubernetes.io/ingress.class: \"azure/application-gateway\"\n  appgw.ingress.kubernetes.io/backend-protocol: \"http\"\n  appgw.ingress.kubernetes.io/ssl-redirect: \"true\"\n  appgw.ingress.kubernetes.io/appgw-ssl-certificate: \"<name-of-appgw-installed-certificate>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaling in Kubernetes YAML\nDESCRIPTION: Sets up autoscaling for Kubernetes deployments. It includes options for enabling autoscaling, setting minimum and maximum replicas, and defining CPU and memory utilization targets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables from Kubernetes ConfigMaps\nDESCRIPTION: Configuration for injecting environment variables from Kubernetes ConfigMap resources. Maps ConfigMap key values to environment variables in the container.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromConfigMapKeys: \n  - name: ENV_NAME\n    configMapName: CONFIG_MAP_NAME\n    keyName: CONFIG_MAP_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress in YAML\nDESCRIPTION: Sets up ingress for public access to the URL. Includes options for enabling, setting the ingress class, annotations, hosts, and TLS configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Environment Variables from ConfigMaps\nDESCRIPTION: Configuration for mapping ConfigMap values to environment variables.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromConfigMapKeys: \n  - name: ENV_NAME\n    configMapName: CONFIG_MAP_NAME\n    keyName: CONFIG_MAP_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Arguments for Container Commands\nDESCRIPTION: Specifies arguments to be passed to the container's command. The enabled flag determines whether custom arguments are applied, and the value array contains the actual arguments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: GitHub Enterprise Authentication Setup\nDESCRIPTION: Implementation example for GitHub Enterprise authentication using custom base URL\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/bradleyfalzon/ghinstallation/v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/bradleyfalzon/ghinstallation/v2\"\n\nconst GitHubEnterpriseURL = \"https://github.example.com/api/v3\"\n\nfunc main() {\n    // Shared transport to reuse TCP connections.\n    tr := http.DefaultTransport\n\n    // Wrap the shared transport for use with the app ID 1 authenticating with installation ID 99.\n    itr, err := ghinstallation.NewKeyFromFile(tr, 1, 99, \"2016-10-19.private-key.pem\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    itr.BaseURL = GitHubEnterpriseURL\n\n    // Use installation transport with github.com/google/go-github\n    client := github.NewEnterpriseClient(GitHubEnterpriseURL, GitHubEnterpriseURL, &http.Client{Transport: itr})\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe in Kubernetes YAML\nDESCRIPTION: Defines a readiness probe to determine if the container is ready to serve traffic. If this check fails, Kubernetes stops sending traffic to the application.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts in YAML\nDESCRIPTION: Specifies volume mount configurations including mount paths and subpaths for containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe in Devtron Deployment\nDESCRIPTION: Defines the health check that Kubernetes uses to determine if traffic should be sent to a pod. Traffic is stopped if the check fails, useful for recoverable errors.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Tolerations in Kubernetes YAML\nDESCRIPTION: Specifies pod tolerations for node taints, allowing pods to be scheduled on nodes with matching taints.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers in Kubernetes YAML\nDESCRIPTION: This snippet shows how to configure Init Containers in Kubernetes. It includes examples of setting security contexts, volume mounts, and commands for initialization tasks before the main application containers start.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n    image: nginx:1.14.2\n    securityContext:\n      privileged: true\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Creating and Parsing UUIDs in Go\nDESCRIPTION: This example demonstrates how to create a new UUID (version 4) and parse an existing UUID from a string. It uses the github.com/satori/go.uuid package to perform these operations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/satori/go.uuid/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/satori/go.uuid\"\n)\n\nfunc main() {\n\t// Creating UUID Version 4\n\tu1 := uuid.NewV4()\n\tfmt.Printf(\"UUIDv4: %s\\n\", u1)\n\n\t// Parsing UUID from string input\n\tu2, err := uuid.FromString(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")\n\tif err != nil {\n\t\tfmt.Printf(\"Something gone wrong: %s\", err)\n\t}\n\tfmt.Printf(\"Successfully parsed: %s\", u2)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers for Pod Initialization\nDESCRIPTION: Defines containers that run before application containers to perform setup tasks. Supports reusing the main container image or specifying custom images.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Secret in Kubernetes\nDESCRIPTION: This command creates a Kubernetes secret of type docker-registry named 'regcred' in the specified namespace. It stores Docker registry credentials including server URL, username, password, and email which can be used for pulling images from private repositories.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/container-registries.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -n <namespace> secret docker-registry regcred --docker-server=<your-registry-server> --docker-username=<your-name> --docker-password=<your-pword> --docker-email=<your-email>\n```\n\n----------------------------------------\n\nTITLE: Defining Containers in Kubernetes YAML\nDESCRIPTION: Specifies container configurations for a Kubernetes deployment, including image, ports, commands, and arguments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Resources\nDESCRIPTION: Configuration for container resource limits and requests.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Kafka in Kubernetes YAML\nDESCRIPTION: Sets up KEDA autoscaling based on Kafka metrics. Includes Kafka-specific configurations, triggers, and authentication details.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Specifying Raw Kubernetes YAML Configuration\nDESCRIPTION: This snippet shows how to include raw Kubernetes YAML configurations in a deployment. It allows for defining custom Kubernetes objects directly within the deployment template.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure volume mounts in a Kubernetes deployment. It shows examples of mounting volumes to specific paths in the container.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee  \n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts for Containers\nDESCRIPTION: Specifies how volumes should be mounted inside containers. This configuration mounts the log-volume at /var/log/nginx/ and mounts the logpvc volume at /mnt/logs with a specific subPath.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee  \n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for StatefulSet in YAML\nDESCRIPTION: Configures environment variables for the containers in the StatefulSet. Includes options for setting variables directly, from secret keys, and from ConfigMap keys.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromSecretKeys: \n  - name: ENV_NAME\n    secretName: SECRET_NAME\n    keyName: SECRET_KEY\n```\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromCongigMapKeys: \n  - name: ENV_NAME\n    configMapName: CONFIG_MAP_NAME\n    keyName: CONFIG_MAP_KEY\n```\n\n----------------------------------------\n\nTITLE: Creating Ingress Values YAML File for Devtron Installation\nDESCRIPTION: YAML configuration file for enabling Ingress in Devtron. This template includes settings for class, labels, annotations, path type, host, and TLS configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/ingress-setup.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  devtron:\n    ingress:\n      enabled: true\n      className: nginx\n      labels: {}\n        # env: production\n      annotations: {}\n        # nginx.ingress.kubernetes.io/app-root: /dashboard\n      pathType: ImplementationSpecific\n      host: devtron.example.com\n      tls: []\n    #    - secretName: devtron-info-tls\n    #      hosts:\n    #        - devtron.example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress\nDESCRIPTION: Defines ingress configuration for public access to services\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with AWS S3 Configuration\nDESCRIPTION: Devtron installation using AWS S3 buckets for storing build logs and cache\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-helm-3.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai\nhelm repo update devtron\nhelm install devtron devtron/devtron-operator --create-namespace --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--set configs.BLOB_STORAGE_PROVIDER=S3 \\\n--set configs.DEFAULT_CACHE_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CACHE_BUCKET_REGION=us-east-1 \\\n--set configs.DEFAULT_BUILD_LOGS_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CD_LOGS_BUCKET_REGION=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Limits and Requests\nDESCRIPTION: Defines CPU and memory resource limits and requests for containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MinReadySeconds in YAML\nDESCRIPTION: Specifies the minimum number of seconds a newly created Pod should be ready without container crashes to be considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Implementing Casbin with MySQL using Xorm Adapter in Go\nDESCRIPTION: This example demonstrates how to initialize an Xorm adapter with MySQL, create a Casbin enforcer, and perform basic operations like loading policies, checking permissions, and saving policies back to the database.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/xorm-adapter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/casbin/casbin\"\n\t\"github.com/casbin/xorm-adapter\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\t// Initialize a Xorm adapter and use it in a Casbin enforcer:\n\t// The adapter will use the MySQL database named \"casbin\".\n\t// If it doesn't exist, the adapter will create it automatically.\n\ta := xormadapter.NewAdapter(\"mysql\", \"mysql_username:mysql_password@tcp(127.0.0.1:3306)/\") // Your driver and data source. \n\n\t// Or you can use an existing DB \"abc\" like this:\n\t// The adapter will use the table named \"casbin_rule\".\n\t// If it doesn't exist, the adapter will create it automatically.\n\t// a := xormadapter.NewAdapter(\"mysql\", \"mysql_username:mysql_password@tcp(127.0.0.1:3306)/abc\", true)\n\n\te := casbin.NewEnforcer(\"examples/rbac_model.conf\", a)\n\t\n\t// Load the policy from DB.\n\te.LoadPolicy()\n\t\n\t// Check the permission.\n\te.Enforce(\"alice\", \"data1\", \"read\")\n\t\n\t// Modify the policy.\n\t// e.AddPolicy(...)\n\t// e.RemovePolicy(...)\n\t\n\t// Save the policy back to DB.\n\te.SavePolicy()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Security Context in Kubernetes YAML\nDESCRIPTION: Defines privilege and access control settings for a container. This example disables privilege escalation for the main container.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request with Retryable HTTP Client in Go\nDESCRIPTION: A simple example showing how to make a GET request using the retryablehttp library. The function automatically handles retries with exponential backoff if the request fails.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/go-retryablehttp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nresp, err := retryablehttp.Get(\"/foo\")\nif err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron Stable Release with Helm\nDESCRIPTION: Commands to add Devtron helm repository and install the stable release of Devtron operator in the devtroncd namespace.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/charts/devtron/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai \n\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd \\\n--set installer.modules={cicd}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Disruption Budget with Minimum Available\nDESCRIPTION: Defines PodDisruptionBudget configuration specifying minimum available pods during voluntary disruptions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     minAvailable: 1\n```\n\n----------------------------------------\n\nTITLE: Pod Disruption Budget Configuration Options\nDESCRIPTION: Configurations for PodDisruptionBudget to manage pod availability during voluntary disruptions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     minAvailable: 1\n```\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     maxUnavailable: 50%\n```\n\n----------------------------------------\n\nTITLE: Specifying Volume Mounts in Kubernetes YAML\nDESCRIPTION: Defines volume mount configurations for containers in a Kubernetes deployment, specifying mount paths and volume names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Ingress in Kubernetes YAML\nDESCRIPTION: This snippet shows the legacy deployment-template format for configuring Ingress in Kubernetes. It includes settings for enabling Ingress, specifying the Ingress class, annotations, path, host, and TLS configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  path: \"\"\n  host: \"\"\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: HTTPS Annotations for Nginx Ingress Controller on AWS\nDESCRIPTION: Annotations to enable HTTPS for Devtron with Nginx Ingress Controller on AWS. These annotations configure SSL termination using an AWS ACM certificate.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/ingress-setup.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n  annotations:\n    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: \"http\"\n    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: \"443\"\n    nginx.ingress.kubernetes.io/force-ssl-redirect: \"true\"\n    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: \"<acm-arn-here>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Prometheus\nDESCRIPTION: Configuration for Kubernetes Event-Driven Autoscaling using Prometheus metrics.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Security Context in Kubernetes YAML\nDESCRIPTION: Defines pod-level security context settings including user ID, group ID, and file system group for controlling permissions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Configuring a Kubernetes Job with YAML\nDESCRIPTION: Example YAML configuration for a Kubernetes Job. This demonstrates the basic configuration fields including activeDeadlineSeconds, backoffLimit, completions, parallelism, suspend, and ttlSecondsAfterFinished.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/cronjob-chart_1-2-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Job\njobConfigs:\n    activeDeadlineSeconds: 120\n    backoffLimit: 6\n    completions: 1\n    parallelism: 1\n    suspend: false\n    ttlSecondsAfterFinished: 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe\nDESCRIPTION: YAML configuration for Kubernetes readiness probe including timing parameters and health check options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables from ConfigMap Keys in Kubernetes\nDESCRIPTION: YAML configuration for setting environment variables from Kubernetes ConfigMaps. This allows pods to reference configuration data stored in ConfigMaps by specifying the ConfigMap name and key to reference.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromConfigMapKeys: \n  - name: ENV_NAME\n    configMapName: CONFIG_MAP_NAME\n    keyName: CONFIG_MAP_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe in YAML\nDESCRIPTION: Defines a readiness probe for Kubernetes to stop sending traffic if the check fails. Similar to liveness probe but for traffic management.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Volumes\nDESCRIPTION: Defines volume configurations for external storage including empty directories and persistent volume claims.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Configuring Ambassador Mappings in Kubernetes for External Access\nDESCRIPTION: YAML configuration for Ambassador API Gateway mappings that expose services outside the cluster. Includes settings for hostname, path, TLS, CORS, and other access controls for the application endpoints.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nambassadorMapping:\n  ambassadorId: \"prod-emissary\"\n  cors: {}\n  enabled: true\n  hostname: devtron.example.com\n  labels: {}\n  prefix: /\n  retryPolicy: {}\n  rewrite: \"\"\n  tls:\n    context: \"devtron-tls-context\"\n    create: false\n    hosts: []\n    secretName: \"\"\n```\n\n----------------------------------------\n\nTITLE: NATS Queue Groups in Go\nDESCRIPTION: Explains the concept of queue groups in NATS and demonstrates how to use them. Queue groups allow load balancing of message processing across multiple subscribers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// All subscriptions with the same queue name will form a queue group.\n// Each message will be delivered to only one subscriber per queue group,\n// using queuing semantics. You can have as many queue groups as you wish.\n// Normal subscribers will continue to work as expected.\n\nnc.QueueSubscribe(\"foo\", \"job_workers\", func(_ *Msg) {\n  received += 1;\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress in Devtron Deployment Chart (Modern Format)\nDESCRIPTION: This YAML configuration enables external access to the application via Ingress. It supports multiple hosts, paths, and TLS configuration, using the modern multi-host format for Kubernetes 1.19+.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Commands in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to specify commands for a container in Kubernetes. It allows for enabling or disabling the command and defining the command values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service\nDESCRIPTION: Defines service type and annotations for Kubernetes service configuration\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n  service:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Defining Container Commands in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to define commands for a container in Kubernetes. It allows you to enable or disable the command and specify its value.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Basic Word Wrapping in Go\nDESCRIPTION: Example demonstrating basic usage of the wordwrap package to wrap text at specified width. The example shows wrapping 'foo bar baz' with a width of 3 characters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/mitchellh/go-wordwrap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nwrapped := wordwrap.WrapString(\"foo bar baz\", 3)\nfmt.Println(wrapped)\n```\n\nLANGUAGE: text\nCODE:\n```\nfoo\nbar\nbaz\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe in Kubernetes YAML\nDESCRIPTION: Defines a liveness probe to check if the container is running. If this check fails, Kubernetes restarts the pod. Includes settings for probe path, port, delay, timeout, and custom headers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Setting Grace Period in YAML\nDESCRIPTION: Configures termination grace period for pods.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe\nDESCRIPTION: Defines health check configuration for container readiness including paths, timeouts and failure thresholds.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress in Kubernetes YAML\nDESCRIPTION: Defines Ingress resources for private access to the application. It includes settings for ingress class, annotations, hosts, paths, and TLS configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Security Context in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to add a security context for the main container in a Kubernetes deployment. It sets the allowPrivilegeEscalation flag to false, which prevents the process from gaining more privileges than its parent process.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Creating XORM Engine Group in Go\nDESCRIPTION: Illustrates how to create an XORM engine group for handling multiple database connections, such as master-slave setups.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ndataSourceNameSlice := []string{masterDataSourceName, slave1DataSourceName, slave2DataSourceName}\nengineGroup, err := xorm.NewEngineGroup(driverName, dataSourceNameSlice)\n```\n\nLANGUAGE: Go\nCODE:\n```\nmasterEngine, err := xorm.NewEngine(driverName, masterDataSourceName)\nslave1Engine, err := xorm.NewEngine(driverName, slave1DataSourceName)\nslave2Engine, err := xorm.NewEngine(driverName, slave2DataSourceName)\nengineGroup, err := xorm.NewEngineGroup(masterEngine, []*Engine{slave1Engine, slave2Engine})\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers in YAML\nDESCRIPTION: Defines specialized containers that run before app containers in a Pod. Can contain utilities or setup scripts not present in an app image. Allows reusing the base image.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Image Promotion Policy with Devtron CLI\nDESCRIPTION: Command to create an image promotion policy using the Devtron CLI. It specifies various parameters like name, description, conditions, and approval settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/image-promotion-policy.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevtctl create imagePromotionPolicy \\\n    --name=\"example-policy\" \\\n    --description=\"This is a sample policy that promotes an image to production environment\" \\\n    --passCondition=\"true\" \\\n    --failCondition=\"false\" \\\n    --approverCount=0 \\\n    --allowRequestFromApprove=false \\\n    --allowImageBuilderFromApprove=false \\\n    --allowApproverFromDeploy=false \\\n    --applyPath=\"path/to/applyPolicy.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Setting Container Resources in Kubernetes\nDESCRIPTION: Configuration for defining minimum and maximum RAM and CPU resources available to the application.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Image Pull Secrets\nDESCRIPTION: Configuration for Docker registry credentials used to pull private container images.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers in Kubernetes YAML\nDESCRIPTION: Defines init containers that run before app containers in a Pod. These can contain utilities or setup scripts not present in the app image. It includes options for reusing the base image and setting security contexts.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n    image: nginx:1.14.2\n    securityContext:\n      privileged: true\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Deployment in Kubernetes YAML\nDESCRIPTION: This YAML snippet provides server deployment configurations for Kubernetes. It specifies the image tag and image URL to be used for the deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe\nDESCRIPTION: Defines health check configuration for container liveness including paths, timeouts, and thresholds\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Autoscaling\nDESCRIPTION: HPA configuration for automatic scaling based on CPU and memory utilization. Defines scaling thresholds and replica limits.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Defining Volume Mounts in Kubernetes Deployments\nDESCRIPTION: Specifies how volumes should be mounted within containers. Includes examples of mounting both an emptyDir volume and a persistentVolumeClaim with a subPath.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee  \n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in YAML\nDESCRIPTION: Defines ports on which application services will be exposed to other services, including envoy port, idle timeout, and HTTP2 support.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    nodePort: 32056\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress in Kubernetes for Private Access\nDESCRIPTION: YAML configuration for enabling private access to applications through internal Ingress. Similar to public ingress but typically uses a different ingress class.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress for Private Access\nDESCRIPTION: Sets up internal ingress for private network access with multiple host and path configurations. Uses nginx-internal ingress class.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL in Kubernetes Environment\nDESCRIPTION: Template logic for obtaining application URLs based on service type and ingress configuration. Handles different scenarios including Ingress-enabled setups, NodePort services, LoadBalancer services, and ClusterIP services. Provides appropriate kubectl commands and environment variable exports for each case.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Encoding and Setting a Secure Cookie in Go\nDESCRIPTION: This handler function demonstrates how to encode a map of values into a secure cookie and set it in the HTTP response. The cookie is marked as secure and HTTP-only for added security.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/gorilla/securecookie/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc SetCookieHandler(w http.ResponseWriter, r *http.Request) {\n\tvalue := map[string]string{\n\t\t\"foo\": \"bar\",\n\t}\n\tif encoded, err := s.Encode(\"cookie-name\", value); err == nil {\n\t\tcookie := &http.Cookie{\n\t\t\tName:  \"cookie-name\",\n\t\t\tValue: encoded,\n\t\t\tPath:  \"/\",\n\t\t\tSecure: true,\n\t\t\tHttpOnly: true,\n\t\t}\n\t\thttp.SetCookie(w, cookie)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe in Kubernetes Deployment\nDESCRIPTION: This YAML snippet defines the readiness probe configuration for Kubernetes to determine when a pod is ready to accept traffic.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Ingress in YAML\nDESCRIPTION: This YAML snippet defines the configuration for a Kubernetes Ingress resource. It includes settings for enabling the Ingress, specifying the Ingress class, annotations, hosts, paths, and TLS configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Setting Tolerations for Kubernetes Pods\nDESCRIPTION: Configures pod tolerations to allow scheduling on nodes with specific taints. Tolerations work together with node taints to control pod placement and ensure pods are not scheduled on inappropriate nodes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Termination Grace Period in Kubernetes Pods\nDESCRIPTION: Defines the duration Kubernetes waits before forcibly terminating a pod. Properly handling SIGTERM signals during this period ensures graceful application shutdown.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in Kubernetes Deployment\nDESCRIPTION: This YAML snippet defines the container ports configuration for exposing application services to other services within Kubernetes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Monitoring in Kubernetes\nDESCRIPTION: Defines Prometheus monitoring settings for the application deployment. The 'release' parameter specifies the monitoring instance to use.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Setting Up Service Monitor in Kubernetes YAML\nDESCRIPTION: Configures service monitoring for a Kubernetes deployment, including path, scheme, interval, and metric relabeling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Pod Disruption Budget Configuration - MinAvailable\nDESCRIPTION: Configuration to ensure minimum number of pods are available during voluntary disruptions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     minAvailable: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress in YAML\nDESCRIPTION: Defines internal ingress settings for private access to the URL. Includes options for enabling, class name, annotations, hosts, paths, and TLS configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Account in Kubernetes\nDESCRIPTION: YAML configuration for creating and managing service accounts used by pods. Includes options to create a service account, specify its name, and add annotations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nserviceAccount:\n  create: false\n  name: \"\"\n  annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Defining Topology Spread Constraints in YAML\nDESCRIPTION: YAML configuration for setting up topology spread constraints to control how Pods are distributed across the cluster, specifying maximum skew, topology key, and scheduling behavior.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Prometheus Monitoring in Kubernetes\nDESCRIPTION: Configures Prometheus monitoring for a Kubernetes application. This snippet sets the release name for the Prometheus integration, enabling metrics collection for the application.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of env Package in Go\nDESCRIPTION: A complete example showing how to define a struct with env tags and parse environment variables into it. The example demonstrates various tag options including defaults, unset, separators, and variable expansion.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/caarlos0/env/v6/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/caarlos0/env/v6\"\n)\n\ntype config struct {\n\tHome         string        `env:\"HOME\"`\n\tPort         int           `env:\"PORT\" envDefault:\"3000\"`\n\tPassword     string        `env:\"PASSWORD,unset\"`\n\tIsProduction bool          `env:\"PRODUCTION\"`\n\tHosts        []string      `env:\"HOSTS\" envSeparator:\":\"`\n\tDuration     time.Duration `env:\"DURATION\"`\n\tTempFolder   string        `env:\"TEMP_FOLDER\" envDefault:\"${HOME}/tmp\" envExpand:\"true\"`\n}\n\nfunc main() {\n\tcfg := config{}\n\tif err := env.Parse(&cfg); err != nil {\n\t\tfmt.Printf(\"%+v\\n\", err)\n\t}\n\n\tfmt.Printf(\"%+v\\n\", cfg)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe in YAML\nDESCRIPTION: Defines a readiness probe to determine if the pod is ready to receive traffic. Includes settings for path, port, delay, timeout, and custom headers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring StatefulSet Properties in YAML\nDESCRIPTION: Defines all configuration settings for the StatefulSet, including labels, annotations, service name, pod management policy, revision history limit, and volume claim templates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstatefulSetConfig:\n  labels:\n    app: my-statefulset\n    environment: production\n  annotations:\n    example.com/version: \"1.0\"\n  serviceName: \"my-statefulset-service\"\n  podManagementPolicy: \"Parallel\"\n  revisionHistoryLimit: 5\n  mountPath: \"/data\"\n  volumeClaimTemplates:\n    - apiVersion: v1\n      kind: PersistentVolumeClaim\n      metadata:\n        labels:\n          app: my-statefulset\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        dataSource:\n          kind: Snapshot\n          apiGroup: snapshot.storage.k8s.io\n          name: my-snapshot\n        resources:\n          requests:\n            storage: 5Gi\n          limits:\n            storage: 10Gi\n        storageClassName: my-storage-class\n        selector:\n          matchLabels:\n            app: my-statefulset\n        volumeMode: Filesystem\n        volumeName: my-pv\n  - apiVersion: v1\n    kind: PersistentVolumeClaim\n    metadata:\n      name: pvc-logs\n      labels:\n        app: myapp\n    spec:\n      accessModes:\n        - ReadWriteMany\n      dataSourceRef:\n        kind: Secret\n        apiGroup: v1\n        name: my-secret\n      resources:\n        requests:\n          storage: 5Gi\n      storageClassName: my-storage-class\n      selector:\n        matchExpressions:\n          - {key: environment, operator: In, values: [production]}\n      volumeMode: Block\n      volumeName: my-pv\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports for StatefulSet in YAML\nDESCRIPTION: Defines ports on which application services will be exposed to other services. Includes options for envoy port, idle timeout, service port, node port, and HTTP2 support.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    nodePort: 32056\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Setting Host Aliases in Kubernetes Pods\nDESCRIPTION: YAML configuration for associating additional hostnames with a pod's IP address. Useful when specific hostnames need to be resolved within the pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n  hostAliases:\n  - ip: \"192.168.1.10\"\n    hostnames:\n    - \"hostname1.example.com\"\n    - \"hostname2.example.com\"\n  - ip: \"192.168.1.11\"\n    hostnames:\n    - \"hostname3.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Containers in a Kubernetes Pod\nDESCRIPTION: Defines multiple containers within a single pod for sidecar patterns. Containers in the same pod share network and can communicate via localhost. The reuseContainerImage flag allows reusing the base image.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n      - reuseContainerImage: true\n        securityContext:\n          runAsUser: 1000\n          runAsGroup: 3000\n          fsGroup: 2000\n        volumeMounts:\n        - mountPath: /etc/ls-oms\n          name: ls-oms-cm-vol\n        command:\n          - flyway\n          - -configFiles=/etc/ls-oms/flyway.conf\n          - migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Kafka Triggers\nDESCRIPTION: Example configuration for KEDA autoscaling using Kafka triggers. Includes settings for Kafka bootstrap servers, topic configuration, and authentication details.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with Google Cloud Storage\nDESCRIPTION: Helm command to install Devtron with Google Cloud Storage for storing build logs and cache by specifying GCP credentials JSON and bucket names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd-with-gitops.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai\n\nhelm repo update devtron\n\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--set configs.BLOB_STORAGE_PROVIDER=GCP \\\n--set secrets.BLOB_STORAGE_GCP_CREDENTIALS_JSON=eyJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsInByb2plY3RfaWQiOiAiPHlvdXItcHJvamVjdC1pZD4iLCJwcml2YXRlX2tleV9pZCI6ICI8eW91ci1wcml2YXRlLWtleS1pZD4iLCJwcml2YXRlX2tleSI6ICI8eW91ci1wcml2YXRlLWtleT4iLCJjbGllbnRfZW1haWwiOiAiPHlvdXItY2xpZW50LWVtYWlsPiIsImNsaWVudF9pZCI6ICI8eW91ci1jbGllbnQtaWQ+IiwiYXV0aF91cmkiOiAiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLCJ0b2tlbl91cmkiOiAiaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW4iLCJhdXRoX3Byb3ZpZGVyX3g1MDlfY2VydF91cmwiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YxL2NlcnRzIiwiY2xpZW50X3g1MDlfY2VydF91cmwiOiAiPHlvdXItY2xpZW50LWNlcnQtdXJsPiJ9Cg== \\\n--set configs.DEFAULT_CACHE_BUCKET=cache-bucket \\\n--set configs.DEFAULT_BUILD_LOGS_BUCKET=log-bucket \\\n--set argo-cd.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Kubernetes Deployment\nDESCRIPTION: This code snippet provides conditional logic to determine the appropriate method for retrieving the application URL based on the Kubernetes service type and ingress configuration. It includes commands for ingress, NodePort, LoadBalancer, and ClusterIP scenarios.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Persistent Volume Claim\nDESCRIPTION: Configuration for persistent storage requirements.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\npersistentVolumeClaim:\n  name: my-pvc\n  storageClassName: default\n  accessMode:\n    - ReadWriteOnce\n  mountPath: /tmp\n```\n\n----------------------------------------\n\nTITLE: Advanced JMESPath Queries in Go\nDESCRIPTION: This snippet showcases more complex JMESPath queries, including nested object selection, array projection, and filtering based on conditions. It demonstrates the versatility of JMESPath expressions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar jsondata = []byte(`{\"foo\": {\"bar\": {\"baz\": [0, 1, 2, 3, 4]}}}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search(\"foo.bar\", data)\nresult = { \"baz\": [ 0, 1, 2, 3, 4 ] }\n\nvar jsondata  = []byte(`{\"foo\": [{\"first\": \"a\", \"last\": \"b\"},\n                           {\"first\": \"c\", \"last\": \"d\"}]}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search({\"foo[*].first\", data)\nresult [ 'a', 'c' ]\n\nvar jsondata = []byte(`{\"foo\": [{\"age\": 20}, {\"age\": 25},\n                           {\"age\": 30}, {\"age\": 35},\n                           {\"age\": 40}]}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search(\"foo[?age > `30`]\")\nresult = [ { age: 35 }, { age: 40 } ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress in Kubernetes YAML\nDESCRIPTION: This YAML snippet defines an Internal Ingress configuration for Kubernetes. It includes options for enabling internal Ingress, setting the Ingress class, specifying hosts and paths, and configuring TLS for private access.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Ingress for Public Access\nDESCRIPTION: Sets up ingress for public URL access with multiple host and path configurations. Uses nginx ingress controller by default.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Defining Affinity and Anti-Affinity in Kubernetes YAML\nDESCRIPTION: Configures node and pod affinity rules for scheduling. Includes placeholders for key-value pairs used in node selection.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Upgrading Devtron Using Helm\nDESCRIPTION: Command for upgrading an existing Helm-based Devtron installation to the latest version using the Helm upgrade process.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade-devtron.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Policy in Kubernetes Deployment (YAML)\nDESCRIPTION: Defines the policy for pulling container images. Set to 'IfNotPresent' to only pull if the image is not already present.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Monitoring\nDESCRIPTION: Specifies the Prometheus release name for monitoring the application. Prometheus is a Kubernetes monitoring tool that collects metrics from configured targets at given intervals.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Implementing Functional Options in Go\nDESCRIPTION: Shows a functional approach to implementing Options where the option is defined as a function that modifies config. This approach provides flexibility for complex option logic.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype optionFunc func(config) config\n\nfunc (fn optionFunc) apply(c config) config {\n\treturn fn(c)\n}\n\n// WithMyType sets t as MyType.\nfunc WithMyType(t MyType) Option {\n\treturn optionFunc(func(c config) config {\n\t\tc.MyType = t\n        return c\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe\nDESCRIPTION: Health check configuration to determine if a pod needs to be restarted.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Migration in Kubernetes YAML\nDESCRIPTION: Enables or disables database migration configuration. Used to manage database schema changes during deployments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Resources in YAML\nDESCRIPTION: Defines minimum and maximum RAM and CPU available to the application, including both limits and requests.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Defining Command Arguments in Kubernetes YAML\nDESCRIPTION: This snippet shows the structure for specifying command arguments in a Kubernetes deployment. It allows enabling or disabling arguments and providing values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Affinity\nDESCRIPTION: Configuration for pod scheduling constraints based on node labels.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Date Comparison Expression Evaluation in Go\nDESCRIPTION: Demonstrates date comparison functionality using string date representations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Knetic/govaluate/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nexpression, err := govaluate.NewEvaluableExpression(\"'2014-01-02' > '2014-01-01 23:59:59'\");\nresult, err := expression.Evaluate(nil);\n\n// result is now set to true\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe in Kubernetes YAML\nDESCRIPTION: Defines a readiness probe configuration for Kubernetes deployments. It includes settings for the probe path, port, delay, period, thresholds, and custom headers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets in Kubernetes Deployment\nDESCRIPTION: Specifies the secret containing Docker registry credentials for pulling private images. This secret must be created separately in the cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress in Kubernetes for Public Access\nDESCRIPTION: YAML configuration for enabling public access to applications through Ingress. Includes host, path, annotations, and TLS settings. Supports multiple hosts and paths.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Server Deployment Configuration\nDESCRIPTION: Defines server deployment settings including image details\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Service Monitor for Prometheus\nDESCRIPTION: Configures Prometheus ServiceMonitor resources to scrape metrics from the application. This includes settings for the metrics path, scraping interval, timeout, and metric relabeling rules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe in Devtron Deployment Chart\nDESCRIPTION: This YAML configuration defines a liveness probe which Kubernetes uses to determine when to restart a pod. It includes settings for health check path, timeouts, thresholds, and TCP connections.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Settings\nDESCRIPTION: Defines image pull policy for container images.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets in Kubernetes Deployment YAML\nDESCRIPTION: Specifies the secret containing Docker registry credentials for pulling container images from private registries.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Ingress\nDESCRIPTION: Configuration for Kubernetes Ingress resource to manage external access to services.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Setting Up Service Monitor in Kubernetes YAML\nDESCRIPTION: Configures service monitoring parameters, including metrics path, scrape interval, and label manipulations. This is used to define how services are monitored within the cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in StatefulSet\nDESCRIPTION: Defines the port configuration for application services including envoy ports, service ports, and node ports with HTTP/2 and streaming support options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    nodePort: 32056\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Limits and Requests\nDESCRIPTION: Defines minimum guaranteed resources (requests) and maximum allowed resources (limits) for CPU and memory usage by the container.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Example Winter-Soldier Configuration with Time-Based Scaling\nDESCRIPTION: Comprehensive example of Winter-Soldier configuration that scales resources based on specified time ranges. It defines different time windows for weekdays and weekends, targeting resources created more than 10 hours ago.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nwinterSoldier:\n  apiVersion: pincher.devtron.ai/v1alpha1 \n  enabled: true\n  annotations: {}\n  labels: {}\n  timeRangesWithZone:\n    timeZone: \"Asia/Kolkata\"\n    timeRanges: \n      - timeFrom: 00:00\n        timeTo: 23:59:59\n        weekdayFrom: Sat\n        weekdayTo: Sun\n      - timeFrom: 00:00\n        timeTo: 08:00\n        weekdayFrom: Mon\n        weekdayTo: Fri\n      - timeFrom: 20:00\n        timeTo: 23:59:59\n        weekdayFrom: Mon\n        weekdayTo: Fri\n  action: scale\n  targetReplicas: [1,1,1]\n  fieldSelector: \n    - AfterTime(AddTime( ParseTime({{metadata.creationTimestamp}}, '2006-01-02T15:04:05Z'), '10h'), Now())\n```\n\n----------------------------------------\n\nTITLE: Decoding a Secure Cookie in Go\nDESCRIPTION: This handler function demonstrates how to read a secure cookie from an HTTP request, decode its value, and access the stored data. It uses the same SecureCookie instance that encoded the cookie to ensure the hash validation works correctly.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/gorilla/securecookie/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc ReadCookieHandler(w http.ResponseWriter, r *http.Request) {\n\tif cookie, err := r.Cookie(\"cookie-name\"); err == nil {\n\t\tvalue := make(map[string]string)\n\t\tif err = s2.Decode(\"cookie-name\", cookie.Value, &value); err == nil {\n\t\t\tfmt.Fprintf(w, \"The value of foo is %q\", value[\"foo\"])\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MaxUnavailable in Kubernetes Deployment\nDESCRIPTION: This YAML snippet sets the maximum number of pods that can be unavailable during the update process in a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Job Resources\nDESCRIPTION: Example configuration for a Kubernetes Job showing key parameters like activeDeadlineSeconds, backoffLimit, completions, parallelism, suspend, and ttlSecondsAfterFinished. This configuration defines a finite task execution with specific completion and retry parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/job-and-cronjob.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Job\njobConfigs:\n    activeDeadlineSeconds: 120\n    backoffLimit: 6\n    completions: 1\n    parallelism: 1\n    suspend: false\n    ttlSecondsAfterFinished: 100\n```\n\n----------------------------------------\n\nTITLE: Setting Container Security Context in YAML\nDESCRIPTION: YAML configuration for adding a security context to the main container, disabling privilege escalation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Setting Tolerations for Node Taints in Kubernetes\nDESCRIPTION: Configures pod tolerations that allow pods to be scheduled on nodes with matching taints. Tolerations specify which taints the pod can tolerate during scheduling and execution.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress in Devtron Deployment\nDESCRIPTION: Allows public access to the application URL. This configuration supports multiple hosts and paths, and uses the 'nginx' ingress class by default.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Secrets in Kubernetes YAML\nDESCRIPTION: Specifies the secret containing Docker registry credentials for pulling images from private registries.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Updating Records with XORM in Go\nDESCRIPTION: Shows various ways to update records in the database using XORM, including conditional updates and column-specific updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\naffected, err := engine.ID(1).Update(&user)\n// UPDATE user SET ... Where id = ?\n\naffected, err := engine.Update(&user, &User{Name:name})\n// UPDATE user SET ... Where name = ?\n\nvar ids = []int64{1, 2, 3}\naffected, err := engine.In(\"id\", ids).Update(&user)\n// UPDATE user SET ... Where id IN (?, ?, ?)\n\n// force update indicated columns by Cols\naffected, err := engine.ID(1).Cols(\"age\").Update(&User{Name:name, Age: 12})\n// UPDATE user SET age = ?, updated=? Where id = ?\n\n// force NOT update indicated columns by Omit\naffected, err := engine.ID(1).Omit(\"name\").Update(&User{Name:name, Age: 12})\n// UPDATE user SET age = ?, updated=? Where id = ?\n\naffected, err := engine.ID(1).AllCols().Update(&user)\n// UPDATE user SET name=?,age=?,salt=?,passwd=?,updated=? Where id = ?\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod-Level Security Context in Kubernetes YAML\nDESCRIPTION: Defines security context settings at the pod level, specifying the user ID, group ID, and file system group for all containers in the pod. This helps in controlling permissions and access to resources within the pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Containers in a Kubernetes Pod\nDESCRIPTION: Defines multiple containers within a single pod, including a main container and a sidecar. Demonstrates how to set container-specific properties like image, ports, commands, and volume mounts.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n      - reuseContainerImage: true\n        securityContext:\n          runAsUser: 1000\n          runAsGroup: 3000\n          fsGroup: 2000\n        volumeMounts:\n        - mountPath: /etc/ls-oms\n          name: ls-oms-cm-vol\n        command:\n          - flyway\n          - -configFiles=/etc/ls-oms/flyway.conf\n          - migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Tolerations in Kubernetes YAML\nDESCRIPTION: Sets up tolerations to allow pods to be scheduled on nodes with matching taints. Includes options for different effects.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Migration in Kubernetes YAML\nDESCRIPTION: This YAML snippet enables or disables database migration configuration for a Kubernetes deployment. It provides a simple toggle for managing database migration processes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe\nDESCRIPTION: Defines health check configuration for container readiness including path, timing, and threshold parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Volumes and Volume Mounts\nDESCRIPTION: Configuration for Kubernetes volumes and their mounting in containers\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: KEDA Autoscaling with Kafka\nDESCRIPTION: Configures KEDA autoscaling using Kafka metrics, including authentication and trigger settings for Kafka-based scaling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidecar Containers\nDESCRIPTION: Defines additional containers to run alongside the main container in a pod\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Decoding Form Values to a Struct with Gorilla Schema in Go\nDESCRIPTION: This example demonstrates how to parse POST form values and decode them into a struct using gorilla/schema. It creates a shared Decoder instance and uses it to populate a Person struct with form data from an HTTP request.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/gorilla/schema/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Set a Decoder instance as a package global, because it caches\n// meta-data about structs, and an instance can be shared safely.\nvar decoder = schema.NewDecoder()\n\ntype Person struct {\n    Name  string\n    Phone string\n}\n\nfunc MyHandler(w http.ResponseWriter, r *http.Request) {\n    err := r.ParseForm()\n    if err != nil {\n        // Handle error\n    }\n\n    var person Person\n\n    // r.PostForm is a map of our POST form values\n    err = decoder.Decode(&person, r.PostForm)\n    if err != nil {\n        // Handle error\n    }\n\n    // Do something with person.Name or person.Phone\n}\n```\n\n----------------------------------------\n\nTITLE: HTTPS Annotations for AWS Application Load Balancer\nDESCRIPTION: Annotations to enable HTTPS for Devtron with AWS Application Load Balancer. These annotations configure the ALB to listen on HTTP and HTTPS ports with an ACM certificate.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/ingress-setup.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n  annotations:\n    kubernetes.io/ingress.class: alb\n    alb.ingress.kubernetes.io/listen-ports: '[{\"HTTP\": 80}, {\"HTTPS\": 443}]'\n    alb.ingress.kubernetes.io/certificate-arn: \"<acm-arn-here>\"\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Schema from Go struct\nDESCRIPTION: This snippet shows how to use the jsonschema.Reflect function to generate a JSON Schema from a Go struct. It creates a schema for the TestUser struct defined earlier.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/invopop/jsonschema/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\njsonschema.Reflect(&TestUser{})\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Unavailable Pods\nDESCRIPTION: Configures the maximum number of pods that can be unavailable during updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Schema from Go Types\nDESCRIPTION: Demonstrates loading JSON schemas from Go maps and structs using NewGoLoader\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nm := map[string]interface{}{\"type\": \"string\"}\nloader := gojsonschema.NewGoLoader(m)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Disruption Budget with Maximum Unavailable\nDESCRIPTION: Defines PodDisruptionBudget configuration specifying maximum unavailable pods during voluntary disruptions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     maxUnavailable: 50%\n```\n\n----------------------------------------\n\nTITLE: Image Pull Policy Configuration\nDESCRIPTION: Configuration for container image pull behavior in Kubernetes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Defining Prometheus Monitoring in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure Prometheus monitoring in a Kubernetes deployment. It specifies the release name for Prometheus.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in Kubernetes Deployment\nDESCRIPTION: Defines ports configuration for exposing application services to other services. Includes settings for envoy port, idle timeout, service ports and HTTP/2 support.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Prometheus in Kubernetes YAML\nDESCRIPTION: Sets up KEDA autoscaling based on Prometheus metrics. Includes scaling policies, triggers, and authentication configurations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Kubernetes Ingress\nDESCRIPTION: Defines internal ingress settings for private access to services within the cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Raw Kubernetes YAML Configuration\nDESCRIPTION: Allows specification of raw Kubernetes objects to be applied during deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Kubernetes YAML\nDESCRIPTION: Configures environment variables for containers running in the Pod. In this example, the environment variables array is empty.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Limits and Requests in Kubernetes Deployment\nDESCRIPTION: This YAML snippet defines the minimum and maximum RAM and CPU resources available to the application in a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Values with Type Conversion Methods\nDESCRIPTION: Demonstrates extracting a value as a specific type using the Int() method, which will convert the value to an integer.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/stretchr/objx/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nm.Get(\"code\").Int()\n```\n\n----------------------------------------\n\nTITLE: Setting MaxUnavailable for Rolling Updates\nDESCRIPTION: Configures the maximum number of pods that can be unavailable during updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Image Pull Secrets Configuration\nDESCRIPTION: Configuration for Docker registry credentials used for pulling private images.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Volumes\nDESCRIPTION: Defines volume configurations for external storage access, including empty directory and persistent volume claim definitions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets\nDESCRIPTION: Configuration for Docker registry credentials used for pulling private container images.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Deleting Last Array Value\nDESCRIPTION: Example showing how to delete the last value from a JSON array using -1 index\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/sjson/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nvalue, _ := sjson.Delete(`{\"friends\":[\"Andy\",\"Carol\"]}`, \"friends.-1\")\nprintln(value)\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Policy\nDESCRIPTION: Defines when Kubernetes should pull container images.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Secrets\nDESCRIPTION: Configuration for docker registry credentials using secrets\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Containers in Kubernetes YAML\nDESCRIPTION: Defines sidecar containers to run alongside the main container within the same pod, sharing volumes and network.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n      - reuseContainerImage: true\n        securityContext:\n          runAsUser: 1000\n          runAsGroup: 3000\n          fsGroup: 2000\n        volumeMounts:\n        - mountPath: /etc/ls-oms\n          name: ls-oms-cm-vol\n        command:\n          - flyway\n          - -configFiles=/etc/ls-oms/flyway.conf\n          - migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus in Kubernetes YAML\nDESCRIPTION: Defines Prometheus monitoring configuration for a Kubernetes deployment, specifying the release name.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling YAML with Structs in Go\nDESCRIPTION: Demonstrates how to use the yaml package to marshal a Person struct to YAML and then unmarshal it back into a struct. This example showcases the usage of JSON struct tags for YAML field naming.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/sigs.k8s.io/yaml/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"sigs.k8s.io/yaml\"\n)\n\ntype Person struct {\n\tName string `json:\"name\"` // Affects YAML field names too.\n\tAge  int    `json:\"age\"`\n}\n\nfunc main() {\n\t// Marshal a Person struct to YAML.\n\tp := Person{\"John\", 30}\n\ty, err := yaml.Marshal(p)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(y))\n\t/* Output:\n\tage: 30\n\tname: John\n\t*/\n\n\t// Unmarshal the YAML back into a Person struct.\n\tvar p2 Person\n\terr = yaml.Unmarshal(y, &p2)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(p2)\n\t/* Output:\n\t{John 30}\n\t*/\n}\n```\n\n----------------------------------------\n\nTITLE: Chart Configuration Table Definition\nDESCRIPTION: Defines the key configuration parameters required for deploying a chart in Devtron, including app name, project, environment, chart version, and chart value settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/deploy-chart/deployment-of-charts.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Key | Description |\n| :--- | :--- |\n| `App Name` | Name of the Chart Unique|\n| `Project` |  Project in which you want to deploy the chart |\n| `Environment` | Environment in which you want to deploy the chart |\n| `Chart Version` | Chart version |\n| `Chart Value` | Latest default value or create a custom value |\n```\n\n----------------------------------------\n\nTITLE: Implementing Winter-Soldier with Scale Action and Time-Based Constraints\nDESCRIPTION: Example configuration of Winter-Soldier that scales resources based on time ranges. This implementation schedules scaling actions during weekends and specific hours on weekdays, targeting resources created more than 10 hours ago.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\nwinterSoldier:\n  apiVersion: pincher.devtron.ai/v1alpha1 \n  enabled: true\n  annotations: {}\n  labels: {}\n  timeRangesWithZone:\n    timeZone: \"Asia/Kolkata\"\n    timeRanges: \n      - timeFrom: 00:00\n        timeTo: 23:59:59\n        weekdayFrom: Sat\n        weekdayTo: Sun\n      - timeFrom: 00:00\n        timeTo: 08:00\n        weekdayFrom: Mon\n        weekdayTo: Fri\n      - timeFrom: 20:00\n        timeTo: 23:59:59\n        weekdayFrom: Mon\n        weekdayTo: Fri\n  action: scale\n  targetReplicas: [1,1,1]\n  fieldSelector: \n    - AfterTime(AddTime( ParseTime({{metadata.creationTimestamp}}, '2006-01-02T15:04:05Z'), '10h'), Now())\n```\n\n----------------------------------------\n\nTITLE: Configuring Topology Spread Constraints in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure topology spread constraints in Kubernetes. It specifies how pods should be distributed across failure domains.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Setting MinReadySeconds in Kubernetes Deployment\nDESCRIPTION: This YAML snippet specifies the minimum number of seconds for which a newly created Pod should be ready without any of its containers crashing to be considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values in Code with env Package\nDESCRIPTION: Example showing how to initialize struct fields with default values in code before parsing environment variables. Tag defaults will overwrite code defaults.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/caarlos0/env/v6/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/caarlos0/env/v6\"\n)\n\ntype Config struct {\n\tUsername string `env:\"USERNAME\" envDefault:\"admin\"`\n\tPassword string `env:\"PASSWORD\"`\n}\n\nfunc main() {\n\tvar cfg = Config{\n\t\tUsername: \"test\",\n\t\tPassword: \"123456\",\n\t}\n\n\tif err := env.Parse(&cfg); err != nil {\n\t\tfmt.Println(\"failed:\", err)\n\t}\n\n\tfmt.Printf(\"%+v\", cfg)  // {Username:admin Password:123456}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Update Strategy for StatefulSet in YAML\nDESCRIPTION: Configures the update strategy for the StatefulSet, including maximum unavailable pods, maximum surge, and minimum ready seconds.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: cURL Request for External CI Integration with Devtron\nDESCRIPTION: A sample cURL command to send container image information from an external CI service to Devtron via the webhook API. It includes the required headers for content type and authentication token.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/workflow/ci-pipeline.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST \\\n'https://{domain-name}/orchestrator/webhook/ext-ci/{pipeline-id}' \\\n--header 'Content-Type: application/json' \\\n--header 'token: {token}' \\\n--data-raw '{\n    \"dockerImage\": \"445808685819.dkr.ecr.us-east-2.amazonaws.com/orch:23907713-2\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets in Kubernetes Deployment (YAML)\nDESCRIPTION: Specifies the secret containing Docker credentials for accessing a private registry. The secret must be created separately.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: KEDA Autoscaling with Kafka\nDESCRIPTION: Configures KEDA autoscaling using Kafka metrics.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with CI/CD and GitOps (Argo CD) using Helm\nDESCRIPTION: Basic Helm command to install the latest version of Devtron with CI/CD along with GitOps (Argo CD) module in the devtroncd namespace.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd-with-gitops.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai\n\nhelm repo update devtron\n\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--set argo-cd.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Pause Before Switch Active in Kubernetes YAML\nDESCRIPTION: This YAML snippet defines a pause duration before switching a container to active state in a Kubernetes deployment. It specifies the wait time in seconds.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Service in Kubernetes YAML\nDESCRIPTION: Specifies service type and annotations for Kubernetes deployments, defining how the service is exposed within the cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n  service:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Limits and Requests in Kubernetes\nDESCRIPTION: YAML configuration for defining CPU and memory resource constraints. Limits prevent containers from exceeding specific values, while requests guarantee minimum resource allocation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables from Kubernetes Secrets\nDESCRIPTION: Configuration for injecting environment variables from Kubernetes Secret resources. Maps secret key values to environment variables in the container.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromSecretKeys: \n  - name: ENV_NAME\n    secretName: SECRET_NAME\n    keyName: SECRET_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Winter Soldier in Kubernetes YAML\nDESCRIPTION: This snippet shows how to configure Winter Soldier for managing Kubernetes resources. It includes settings for enabling Winter Soldier, specifying API version, action to perform, time ranges, target replicas, and field selectors.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nwinterSoldier:\n  enabled: false\n  apiVersion: pincher.devtron.ai/v1alpha1\n  action: sleep\n  timeRangesWithZone:\n    timeZone: \"Asia/Kolkata\"\n    timeRanges: []\n  targetReplicas: []\n  fieldSelector: []\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connection in Express.js\nDESCRIPTION: JavaScript module that exports the MongoDB connection string using the service name of the MongoDB Helm Chart. It follows the syntax '<service-name>:27017/<database-name>' to connect to the MongoDB instance.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/use-cases/connect-expressjs-with-mongodb-database.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    DB: 'mondo-dev-mongodb-replicaset-client:27017/sale'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaling in YAML\nDESCRIPTION: Sets up autoscaling configuration connected to HPA, controlling scaling based on CPU and memory utilization percentages.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in Kubernetes\nDESCRIPTION: Defines container port configuration including envoy ports, service ports, and HTTP/2 settings\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Prometheus Alert Rules\nDESCRIPTION: Defines Prometheus alerting rules and conditions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nprometheusRule:\n  enabled: true\n  additionalLabels: {}\n  namespace: \"\"\n  rules:\n    - alert: TooMany500s\n      expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"5.+\"} ) / sum(nginx_ingress_controller_requests) ) > 5\n      for: 1m\n      labels:\n        severity: critical\n      annotations:\n        description: Too many 5XXs\n        summary: More than 5% of the all requests did return 5XX, this require your attention\n```\n\n----------------------------------------\n\nTITLE: Installing mapstructure Go Library\nDESCRIPTION: Command to install the mapstructure Go library using the standard go get command.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/mitchellh/mapstructure\n```\n\n----------------------------------------\n\nTITLE: Configuring Tolerations in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure tolerations in Kubernetes. Tolerations allow pods to be scheduled on nodes with matching taints, controlling pod placement.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Volumes\nDESCRIPTION: Defines volume configurations for external storage using empty directory and persistent volume claims.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Setting Node Affinity and Anti-Affinity Rules\nDESCRIPTION: Defines node affinity rules to control pod scheduling based on node labels. This allows constraining which nodes a pod can be scheduled on, based on the labels of the node or other pods.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Limits and Requests in Kubernetes YAML\nDESCRIPTION: Defines CPU and memory resource limits and requests for the container. Limits set the maximum resources a container can use, while requests are the guaranteed resources allocated to the container.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Topology Spread Constraints in YAML\nDESCRIPTION: Configuration for controlling pod distribution across cluster topology domains.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Enabling Histogram Metrics for gRPC Prometheus in Go\nDESCRIPTION: Code snippet showing how to enable handling time histogram metrics for gRPC calls. This allows for measuring latency distributions of RPCs which are disabled by default.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngrpc_prometheus.EnableHandlingTimeHistogram()\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe in YAML\nDESCRIPTION: Defines the readiness probe configuration for Kubernetes to stop sending traffic to the application if the check fails. Includes settings for path, port, delay, period, thresholds, headers, scheme, and TCP check.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL in Kubernetes Using Helm Templates\nDESCRIPTION: This snippet provides a series of conditional blocks that generate appropriate commands to retrieve the application URL based on the service type configured in Kubernetes. It handles Ingress, NodePort, LoadBalancer, and ClusterIP service types, using kubectl commands with proper namespace and service name references from the Helm release context.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service Type and Annotations\nDESCRIPTION: YAML configuration for defining the service type (e.g., ClusterIP) and any additional annotations. Services expose applications within or outside the cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n  service:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Gorilla Sessions in Go\nDESCRIPTION: This snippet demonstrates how to initialize a cookie store, retrieve or create a session, set session values, and save the session. It also includes important notes about securely storing session keys.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/gorilla/sessions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"net/http\"\n\t\"github.com/gorilla/sessions\"\n)\n\n// Note: Don't store your key in your source code. Pass it via an\n// environmental variable, or flag (or both), and don't accidentally commit it\n// alongside your code. Ensure your key is sufficiently random - i.e. use Go's\n// crypto/rand or securecookie.GenerateRandomKey(32) and persist the result.\nvar store = sessions.NewCookieStore([]byte(os.Getenv(\"SESSION_KEY\")))\n\nfunc MyHandler(w http.ResponseWriter, r *http.Request) {\n\t// Get a session. We're ignoring the error resulted from decoding an\n\t// existing session: Get() always returns a session, even if empty.\n\tsession, _ := store.Get(r, \"session-name\")\n\t// Set some session values.\n\tsession.Values[\"foo\"] = \"bar\"\n\tsession.Values[42] = 43\n\t// Save it before we write to the response/return from the handler.\n\terr := session.Save(r, w)\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\treturn\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Content Digest in Go\nDESCRIPTION: Demonstrates how to create a content identifier from a byte slice using the digest package. This is commonly used in Content Addressable Storage systems.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nid := digest.FromBytes([]byte(\"my content\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe in Kubernetes Deployment\nDESCRIPTION: Defines a liveness probe for Kubernetes to determine if a container is running. If this check fails, Kubernetes restarts the pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio in Kubernetes YAML\nDESCRIPTION: Sets up Istio service mesh configuration for Kubernetes deployments. It includes options for enabling Istio, configuring gateways, virtual services, and traffic management rules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nistio:\n  enable: true\n  gateway:\n    annotations: {}\n    enabled: false\n    host: example.com\n    labels: {}\n    tls:\n      enabled: false\n      secretName: example-tls-secret\n  virtualService:\n    annotations: {}\n    enabled: false\n    gateways: []\n    hosts: []\n    http:\n      - corsPolicy:\n          allowCredentials: false\n          allowHeaders:\n            - x-some-header\n          allowMethods:\n            - GET\n          allowOrigin:\n            - example.com\n          maxAge: 24h\n        headers:\n          request:\n            add:\n              x-some-header: value\n        match:\n          - uri:\n              prefix: /v1\n          - uri:\n              prefix: /v2\n        retries:\n          attempts: 2\n          perTryTimeout: 3s\n        rewriteUri: /\n        route:\n          - destination:\n              host: service1\n              port: 80\n        timeout: 12s\n      - route:\n          - destination:\n              host: service2\n    labels: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Image Settings\nDESCRIPTION: Configuration for container image pull policy settings\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress in Kubernetes YAML\nDESCRIPTION: Specifies internal ingress settings for Kubernetes deployments, allowing private access to services within the cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Pause Before Switch Active in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure a pause before switching active containers in Kubernetes. It sets a wait time of 30 seconds before activating the container.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe for StatefulSet in YAML\nDESCRIPTION: Defines the liveness probe configuration for the StatefulSet. Includes options for path, port, delay, timeout, success threshold, and custom headers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Preserving Code Block Classes with Bluemonday HTML Sanitizer\nDESCRIPTION: Go code example showing how to configure the Bluemonday HTML sanitizer to preserve language classes in fenced code blocks. This allows syntax highlighting to work while still sanitizing the HTML.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\np := bluemonday.UGCPolicy()\np.AllowAttrs(\"class\").Matching(regexp.MustCompile(\"^language-[a-zA-Z0-9]+$\")).OnElements(\"code\")\nhtml := p.SanitizeBytes(unsafe)\n```\n\n----------------------------------------\n\nTITLE: Configuring MinReadySeconds\nDESCRIPTION: Defines the minimum time a pod should be ready without crashes to be considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts in Kubernetes YAML\nDESCRIPTION: Specifies volume mount configurations for containers, including mountPath and subPath settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee\n```\n\n----------------------------------------\n\nTITLE: Setting Termination Grace Period for Kubernetes Pods\nDESCRIPTION: Defines the duration Kubernetes waits before forcibly terminating pods. This allows applications time to gracefully shut down, save data, and close connections when receiving SIGTERM signals.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Deployment Settings\nDESCRIPTION: Specifies server deployment configuration including the container image and tag to use. This determines which version of the application is deployed in the Kubernetes cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress in Kubernetes Deployment YAML\nDESCRIPTION: Defines Ingress settings for exposing services externally. It includes options for enabling Ingress, specifying hostnames, paths, and TLS configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Fuzzing a Single Variable in Go\nDESCRIPTION: Demonstrates how to use gofuzz to assign a random value to a single integer variable.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/google/gofuzz/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nf := fuzz.New()\nvar myInt int\nf.Fuzz(&myInt) // myInt gets a random value.\n```\n\n----------------------------------------\n\nTITLE: Configuring Resources in Kubernetes YAML\nDESCRIPTION: Defines resource limits and requests for CPU and memory usage of the application containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Tolerations\nDESCRIPTION: Defines pod tolerations for node taints to control pod scheduling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Volumes\nDESCRIPTION: Configures volume definitions including empty directories and persistent volume claims.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables from Secret Keys\nDESCRIPTION: Defines environment variables sourced from Kubernetes secrets with mapping between environment names and secret keys.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromSecretKeys: \n  - name: ENV_NAME\n    secretName: SECRET_NAME\n    keyName: SECRET_KEY\n```\n\n----------------------------------------\n\nTITLE: Vertical Pod Autoscaling\nDESCRIPTION: Configuration for vertical pod autoscaling policies.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nverticalPodScaling:\n  enabled: true\n  resourcePolicy: {}\n  updatePolicy: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Topology Spread Constraints\nDESCRIPTION: Configuration for controlling pod distribution across cluster topology domains.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Service Monitor Configuration\nDESCRIPTION: Defines monitoring targets and metrics collection settings\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring Topology Spread Constraints in Kubernetes YAML\nDESCRIPTION: Controls how pods are distributed across failure domains like regions, zones, and nodes to achieve high availability and efficient resource usage.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n    minDomains: 1\n    nodeAffinityPolicy: Ignore\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers\nDESCRIPTION: Defines initialization containers that run before app containers in a Pod, useful for setup and utilities.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio in Kubernetes YAML\nDESCRIPTION: Specifies Istio service mesh configurations for Kubernetes deployments, including gateway and virtual service settings for traffic management and security.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nistio:\n  enable: true\n  gateway:\n    annotations: {}\n    enabled: false\n    host: example.com\n    labels: {}\n    tls:\n      enabled: false\n      secretName: example-tls-secret\n  virtualService:\n    annotations: {}\n    enabled: false\n    gateways: []\n    hosts: []\n    http:\n      - corsPolicy:\n          allowCredentials: false\n          allowHeaders:\n            - x-some-header\n          allowMethods:\n            - GET\n          allowOrigin:\n            - example.com\n          maxAge: 24h\n        headers:\n          request:\n            add:\n              x-some-header: value\n        match:\n          - uri:\n              prefix: /v1\n          - uri:\n              prefix: /v2\n        retries:\n          attempts: 2\n          perTryTimeout: 3s\n        rewriteUri: /\n        route:\n          - destination:\n              host: service1\n              port: 80\n        timeout: 12s\n      - route:\n          - destination:\n              host: service2\n    labels: {}\n```\n\n----------------------------------------\n\nTITLE: Using errors.Cause to retrieve the original error\nDESCRIPTION: Example showing how to use errors.Cause to unwrap errors and handle specific error types.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nswitch err := errors.Cause(err).(type) {\ncase *MyError:\n        // handle specifically\ndefault:\n        // unknown error\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Storage\nDESCRIPTION: Helm command to configure Google Cloud Storage for storing build logs and cache using service account credentials.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/installation-configuration.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd \\\n--reuse-values \\\n--set installer.modules={cicd} \\\n--set configs.BLOB_STORAGE_PROVIDER=GCP \\\n--set secrets.BLOB_STORAGE_GCP_CREDENTIALS_JSON=eyJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsInByb2plY3RfaWQiOiAiPHlvdXItcHJvamVjdC1pZD4iLCJwcml2YXRlX2tleV9pZCI6ICI8eW91ci1wcml2YXRlLWtleS1pZD4iLCJwcml2YXRlX2tleSI6ICI8eW91ci1wcml2YXRlLWtleT4iLCJjbGllbnRfZW1haWwiOiAiPHlvdXItY2xpZW50LWVtYWlsPiIsImNsaWVudF9pZCI6ICI8eW91ci1jbGllbnQtaWQ+IiwiYXV0aF91cmkiOiAiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLCJ0b2tlbl91cmkiOiAiaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW4iLCJhdXRoX3Byb3ZpZGVyX3g1MDlfY2VydF91cmwiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YxL2NlcnRzIiwiY2xpZW50X3g1MDlfY2VydF91cmwiOiAiPHlvdXItY2xpZW50LWNlcnQtdXJsPiJ9Cg== \\\n--set configs.DEFAULT_CACHE_BUCKET=cache-bucket \\\n--set configs.DEFAULT_BUILD_LOGS_BUCKET=log-bucket\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe in Kubernetes YAML\nDESCRIPTION: Defines a readiness probe configuration for Kubernetes deployments. It includes settings for path, port, delay, interval, thresholds, and custom headers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers in Kubernetes Deployment (YAML)\nDESCRIPTION: Defines initialization containers that run before app containers in a Pod. These can contain utilities or setup scripts not present in the main app image.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers in Kubernetes YAML\nDESCRIPTION: Defines init containers that run before app containers in a Pod. It includes options for reusing container images, setting security contexts, and specifying commands.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n    image: nginx:1.14.2\n    securityContext:\n      privileged: true\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service Type\nDESCRIPTION: Defines the type of Kubernetes service and any annotations. Using ClusterIP as the default service type, which is only accessible within the cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n  service:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables from Secrets in Kubernetes\nDESCRIPTION: Shows how to set environment variables using values from Kubernetes Secrets. This is useful for injecting sensitive data into containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromSecretKeys: \n  - name: ENV_NAME\n    secretName: SECRET_NAME\n    keyName: SECRET_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts\nDESCRIPTION: Specifies mount paths for volumes to be accessed by containers\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee\n```\n\n----------------------------------------\n\nTITLE: Configuring Affinity in Kubernetes YAML\nDESCRIPTION: Defines node affinity rules for pod scheduling based on node labels.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Database Settings for MySQL Connection\nDESCRIPTION: This code snippet shows how to configure the DATABASES dictionary in Django's settings.py file to connect to a MySQL database. It includes settings for the database engine, name, user, password, host, and port.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/use-cases/connect-django-with-mysql-database.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\n    'default': {\n        # If you are using Cloud SQL for MySQL rather than PostgreSQL, set\n        # 'ENGINE': 'django.db.backends.mysql' instead of the following.\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': '<mysql-database>',\n        'USER': '<mysql-user>',\n        'PASSWORD': '<mysql-password>',\n        'HOST': '<service-name>',\n        'PORT': '3306',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Type and Annotations in Kubernetes\nDESCRIPTION: Defines the service type and optional annotations for a Kubernetes service. The service type determines how the service is exposed, with ClusterIP being used for internal access within the cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n  service:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Pod Disruption Budget Configuration - MaxUnavailable\nDESCRIPTION: Configuration to limit maximum unavailable pods during voluntary disruptions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     maxUnavailable: 50%\n```\n\n----------------------------------------\n\nTITLE: Raw Kubernetes YAML Configuration\nDESCRIPTION: Allows direct specification of Kubernetes objects in YAML format.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: JSON Iterator Unmarshal Implementation\nDESCRIPTION: Example showing how to use JSON Iterator as a replacement for standard JSON unmarshaling with compatible configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport jsoniter \"github.com/json-iterator/go\"\n\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\njson.Unmarshal(input, &data)\n```\n\n----------------------------------------\n\nTITLE: Defining Scoped Variables Using YAML Template in Devtron\nDESCRIPTION: This snippet demonstrates how to define scoped variables in Devtron using a YAML template. It includes examples of two variables: DB_URL with a global scope and DB_Name with both global and application-environment specific scopes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/scoped-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: devtron.ai/v1beta1\nkind: Variable\nspec:\n\n# First example of a variable\n  - name: DB_URL\n    shortDescription: My application's customers are stored\n    notes: The DB is a MySQL DB running version 7.0. The DB contains confidential\n      information.\n    isSensitive: true\n    values:\n      - category: Global\n        value: mysql.example.com\n\n# Second example of a variable\n  - name: DB_Name\n    shortDescription: My database name to recognize the DB\n    notes: NA\n    isSensitive: false\n    values:\n      - category: Global\n        value: Devtron\n      - category: ApplicationEnv\n        value: app1-p\n        selectors:\n          attributeSelectors:\n            ApplicationName: MyFirstApplication\n            EnvName: prod\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers\nDESCRIPTION: Configuration for initialization containers that run before app containers\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n    image: nginx:1.14.2\n    securityContext:\n      privileged: true\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress\nDESCRIPTION: Defines ingress configuration for public access to services.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Defining an Option Interface in Go\nDESCRIPTION: Creates an Option interface with an unexported apply method that modifies and returns a config. This design prevents external implementation and ensures the interface is sealed.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype Option interface {\n\tapply(config) config\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing In-Memory Cache with go-cache in Go\nDESCRIPTION: Demonstrates the basic usage of go-cache including initialization, setting values with expiration times, retrieving values with type assertions, and handling pointers. Shows how to create a cache with default expiration times and various methods to safely retrieve and type-assert cached values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/patrickmn/go-cache/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"fmt\"\n\t\"github.com/patrickmn/go-cache\"\n\t\"time\"\n)\n\nfunc main() {\n\t// Create a cache with a default expiration time of 5 minutes, and which\n\t// purges expired items every 10 minutes\n\tc := cache.New(5*time.Minute, 10*time.Minute)\n\n\t// Set the value of the key \"foo\" to \"bar\", with the default expiration time\n\tc.Set(\"foo\", \"bar\", cache.DefaultExpiration)\n\n\t// Set the value of the key \"baz\" to 42, with no expiration time\n\t// (the item won't be removed until it is re-set, or removed using\n\t// c.Delete(\"baz\")\n\tc.Set(\"baz\", 42, cache.NoExpiration)\n\n\t// Get the string associated with the key \"foo\" from the cache\n\tfoo, found := c.Get(\"foo\")\n\tif found {\n\t\tfmt.Println(foo)\n\t}\n\n\t// Since Go is statically typed, and cache values can be anything, type\n\t// assertion is needed when values are being passed to functions that don't\n\t// take arbitrary types, (i.e. interface{}). The simplest way to do this for\n\t// values which will only be used once--e.g. for passing to another\n\t// function--is:\n\tfoo, found := c.Get(\"foo\")\n\tif found {\n\t\tMyFunction(foo.(string))\n\t}\n\n\t// This gets tedious if the value is used several times in the same function.\n\t// You might do either of the following instead:\n\tif x, found := c.Get(\"foo\"); found {\n\t\tfoo := x.(string)\n\t\t// ...\n\t}\n\t// or\n\tvar foo string\n\tif x, found := c.Get(\"foo\"); found {\n\t\tfoo = x.(string)\n\t}\n\t// ...\n\t// foo can then be passed around freely as a string\n\n\t// Want performance? Store pointers!\n\tc.Set(\"foo\", &MyStruct, cache.DefaultExpiration)\n\tif x, found := c.Get(\"foo\"); found {\n\t\tfoo := x.(*MyStruct)\n\t\t\t// ...\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Transaction Function with XORM in Go\nDESCRIPTION: Shows how to use XORM's Transaction function to simplify transaction handling and error management.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_19\n\nLANGUAGE: Go\nCODE:\n```\nres, err := engine.Transaction(func(session *xorm.Session) (interface{}, error) {\n    user1 := Userinfo{Username: \"xiaoxiao\", Departname: \"dev\", Alias: \"lunny\", Created: time.Now()}\n    if _, err := session.Insert(&user1); err != nil {\n        return nil, err\n    }\n\n    user2 := Userinfo{Username: \"yyy\"}\n    if _, err := session.Where(\"id = ?\", 2).Update(&user2); err != nil {\n        return nil, err\n    }\n\n    if _, err := session.Exec(\"delete from userinfo where username = ?\", user2.Username); err != nil {\n        return nil, err\n    }\n    return nil, nil\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Backends in Ingress YAML\nDESCRIPTION: Defines additional backend paths in the Ingress configuration, allowing routing to different services based on the path.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n    hosts:\n    - host: chart-example2.local\n      pathType: \"ImplementationSpecific\"\n      paths:\n        - /example2\n        - /example2/healthz\n      additionalBackends: \n        - path: /example1\n          pathType: \"ImplementationSpecific\"\n          backend:\n            service:\n              name: test-service\n              port:\n                number: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in Kubernetes Deployment\nDESCRIPTION: Defines the port configuration for container services including envoy ports, service ports, and node ports with protocol specifications.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    nodePort: 32056\n    supportStreaming: true\n    useHTTP2: true\n    protocol: TCP\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Backends in Kubernetes Ingress YAML\nDESCRIPTION: This snippet shows how to define additional backend paths in the Ingress configuration. It includes settings for hosts, path types, paths, and additional backends with service specifications.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n    hosts:\n    - host: chart-example2.local\n      pathType: \"ImplementationSpecific\"\n      paths:\n        - /example2\n        - /example2/healthz\n      additionalBackends: \n        - path: /example1\n          pathType: \"ImplementationSpecific\"\n          backend:\n            service:\n              name: test-service\n              port:\n                number: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Arguments\nDESCRIPTION: Defines container runtime arguments configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Surge in Kubernetes Deployment (YAML)\nDESCRIPTION: Defines the maximum number of pods that can be created over the desired number of pods. The value can be an absolute number or percentage of the replicas count.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: KEDA Kafka-based Autoscaling\nDESCRIPTION: Configuration for KEDA autoscaling based on Kafka metrics. Includes Kafka-specific triggers and authentication settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Disruption Budget in Kubernetes YAML\nDESCRIPTION: Sets a Pod Disruption Budget to limit the number of pods that are down simultaneously from voluntary disruptions. Can be configured with either minAvailable or maxUnavailable.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     minAvailable: 1\n```\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     maxUnavailable: 50%\n```\n\n----------------------------------------\n\nTITLE: Comparing JSON Documents in Go\nDESCRIPTION: Example demonstrating how to compare JSON documents for structural equality while ignoring whitespace and ordering differences.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/gopkg.in/evanphx/json-patch.v4/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\tsimilar := []byte(`\n\t\t{\n\t\t\t\"age\": 24,\n\t\t\t\"height\": 3.21,\n\t\t\t\"name\": \"John\"\n\t\t}\n\t`)\n\tdifferent := []byte(`{\"name\": \"Jane\", \"age\": 20, \"height\": 3.37}`)\n\n\tif jsonpatch.Equal(original, similar) {\n\t\tfmt.Println(`\"original\" is structurally equal to \"similar\"`)\n\t}\n\n\tif !jsonpatch.Equal(original, different) {\n\t\tfmt.Println(`\"original\" is _not_ structurally equal to \"different\"`)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Internal Ingress\nDESCRIPTION: Internal ingress configuration for private access within the cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Security Context in Kubernetes YAML\nDESCRIPTION: Sets security context at the pod level, defining user and group IDs for running processes and setting the filesystem group. This ensures consistent security settings across all containers in the pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Policy in YAML\nDESCRIPTION: Defines the image pull policy for Kubernetes, determining when to pull the container image.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Pod Security Context\nDESCRIPTION: Specifies pod-level security context including user and group IDs.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to set up an internal Ingress resource in Kubernetes for private access. It includes options for enabling Ingress, setting the Ingress class, specifying hosts and paths, and configuring TLS.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Hash Function in go-git\nDESCRIPTION: Shows how to register a custom SHA1 hash function implementation in go-git, replacing the default one.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-git/go-git/v5/EXTENDING.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n    hash.RegisterHash(crypto.SHA1, sha1.New)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Tolerations\nDESCRIPTION: Specifies pod tolerations for node taints\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MaxSurge\nDESCRIPTION: Setting maximum number of extra pods during updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling YAML in Go with yaml.v3\nDESCRIPTION: This example demonstrates the core functionality of the yaml.v3 package, showing how to marshal and unmarshal YAML data in Go using both typed structs and generic maps. It illustrates struct tag usage for controlling field names and collection formatting.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/gopkg.in/yaml.v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v3\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts\nDESCRIPTION: Specifies how volumes are mounted into containers, including mount paths and subpaths.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaling\nDESCRIPTION: Defines HPA configuration for automatic scaling based on CPU and memory utilization\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Tolerations for Node Taints\nDESCRIPTION: Defines tolerations that allow pods to be scheduled on nodes with matching taints. Tolerations work with taints to ensure pods are not placed on inappropriate nodes and can specify different effects like NoSchedule, PreferNoSchedule, or NoExecute.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Pod Disruption Budget in Kubernetes\nDESCRIPTION: Configures a PodDisruptionBudget to limit the number of pods that are down simultaneously from voluntary disruptions. This example ensures at least 1 pod is always available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     minAvailable: 1\n```\n\n----------------------------------------\n\nTITLE: Adding context to an error using errors.Wrap\nDESCRIPTION: Shows how to use errors.Wrap to add contextual information to an error when handling a file reading operation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n_, err := ioutil.ReadAll(r)\nif err != nil {\n        return errors.Wrap(err, \"read failed\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Security Context in Kubernetes\nDESCRIPTION: Configuration for pod-level security context that defines the user ID, group ID, and file system group for running containers, enhancing security by controlling the execution context.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe\nDESCRIPTION: Defines health check configuration for Kubernetes to monitor container health and restart if necessary.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Defining Volumes in Kubernetes\nDESCRIPTION: YAML configuration for creating storage volumes that can be used by containers. Includes examples of both emptyDir volumes and persistent volume claims.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Security Context in YAML\nDESCRIPTION: YAML configuration for adding a security context at the pod level, specifying user ID, group ID, and file system group.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Configuring Tolerations in Kubernetes YAML\nDESCRIPTION: Defines pod tolerations to allow scheduling on nodes with matching taints. Includes options for different effects like NoSchedule and PreferNoSchedule.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL in Kubernetes Based on Service Type\nDESCRIPTION: A template for determining how to access an application deployed in Kubernetes based on the service type configuration. This snippet provides commands for different scenarios including Ingress-enabled services, NodePort, LoadBalancer, and ClusterIP service types. The commands use kubectl to extract the necessary connection information.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-4-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress in Kubernetes YAML\nDESCRIPTION: Sets up internal Ingress for private access to the application. Similar to public Ingress but typically used for internal services.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers in Kubernetes Deployment\nDESCRIPTION: This YAML snippet defines init containers that run before app containers in a Kubernetes pod, used for setup tasks or utilities.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts\nDESCRIPTION: Specifies how volumes are mounted within containers, including mount paths and subpath configurations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee\n```\n\n----------------------------------------\n\nTITLE: Configuring Affinity in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure affinity rules in Kubernetes. It shows the basic structure for defining node affinity or inter-pod affinity based on labels.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Arguments\nDESCRIPTION: Specifies container argument configuration with enable/disable toggle.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Defining Node Affinity\nDESCRIPTION: Configures pod scheduling constraints based on node labels\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-side gRPC Prometheus Interceptors in Go\nDESCRIPTION: Code example demonstrating how to set up gRPC client with Prometheus interceptors. It shows how to dial a connection with both unary and stream interceptors for metrics collection.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/grpc-ecosystem/go-grpc-prometheus\"\n...\n   clientConn, err = grpc.Dial(\n       address,\n\t\t   grpc.WithUnaryInterceptor(grpc_prometheus.UnaryClientInterceptor),\n\t\t   grpc.WithStreamInterceptor(grpc_prometheus.StreamClientInterceptor)\n   )\n   client = pb_testproto.NewTestServiceClient(clientConn)\n   resp, err := client.PingEmpty(s.ctx, &myservice.Request{Msg: \"hello\"})\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets\nDESCRIPTION: Configures secrets for pulling images from private registries.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Setting MaxUnavailable and MaxSurge in YAML\nDESCRIPTION: Configures the maximum number of pods that can be unavailable or created over the desired number during updates. Values can be absolute numbers or percentages.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe in YAML\nDESCRIPTION: Defines the readiness probe for Kubernetes to determine if the pod is ready to receive traffic. Includes path, port, delay, and timeout settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Volumes\nDESCRIPTION: Configuration for Kubernetes volumes and volume mounts.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Defining Containers in Kubernetes YAML\nDESCRIPTION: Shows the structure for defining containers within a pod, including image, ports, command, and arguments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Ingress Format in Kubernetes YAML\nDESCRIPTION: This snippet shows the legacy deployment-template format for Ingress configuration in Kubernetes. It includes options for enabling Ingress, setting the Ingress class, and specifying path, host, and TLS settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  path: \"\"\n  host: \"\"\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in YAML\nDESCRIPTION: Configures environment variables for containers running in the Pod. Includes options for setting variables directly and fetching values from pod-level fields.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromFieldPath:\n- name: ENV_NAME\n  fieldPath: status.podIP (example)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Tolerations\nDESCRIPTION: Defines pod tolerations for node taints to control pod scheduling\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Pod Grace Period Configuration\nDESCRIPTION: Defines the termination grace period for pods before they are forcefully terminated.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: String Comparison Expression Evaluation in Go\nDESCRIPTION: Demonstrates string comparison in expressions using equality operators.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Knetic/govaluate/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nexpression, err := govaluate.NewEvaluableExpression(\"http_response_body == 'service is ok'\");\n\nparameters := make(map[string]interface{}, 8)\nparameters[\"http_response_body\"] = \"service is ok\";\n\nresult, err := expression.Evaluate(parameters);\n// result is now set to \"true\", the bool value.\n```\n\n----------------------------------------\n\nTITLE: Configuring Resources in Kubernetes YAML\nDESCRIPTION: Defines resource limits and requests for CPU and memory in Kubernetes deployments, ensuring proper resource allocation and constraints.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in Devtron Deployment Chart\nDESCRIPTION: This YAML configuration defines ports on which application services will be exposed to other services. It includes settings for port mapping, protocol support, and network timeouts.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Polling for Long-Running Operations in Go\nDESCRIPTION: Adds WaitForCompletion() method to Future struct as a default polling implementation for long-running operations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nWaitForCompletion()\n```\n\n----------------------------------------\n\nTITLE: Configuring MinReadySeconds for Pod Availability\nDESCRIPTION: Defines the minimum time a pod should be ready without crashes to be considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Limits\nDESCRIPTION: YAML configuration for container resource limits and requests.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Security Context in Kubernetes YAML\nDESCRIPTION: This snippet shows how to configure a security context at the pod level in Kubernetes. It sets user, group, and filesystem group IDs.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Setting MaxUnavailable for Rolling Updates\nDESCRIPTION: Specifies maximum number of pods that can be unavailable during updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Unavailable Pods\nDESCRIPTION: Defines maximum number of pods that can be unavailable during updates\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Security Context\nDESCRIPTION: YAML configuration for setting security context at the container level. This example disables privilege escalation for the main container, enhancing security by limiting container permissions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Go Glob Pattern Matching Examples\nDESCRIPTION: Comprehensive example demonstrating various glob pattern matching scenarios including wildcards, meta characters, delimiters, character lists, and pattern alternatives\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/gobwas/glob/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/gobwas/glob\"\n\nfunc main() {\n    var g glob.Glob\n    \n    // create simple glob\n    g = glob.MustCompile(\"*.github.com\")\n    g.Match(\"api.github.com\") // true\n    \n    // quote meta characters and then create simple glob \n    g = glob.MustCompile(glob.QuoteMeta(\"*.github.com\"))\n    g.Match(\"*.github.com\") // true\n    \n    // create new glob with set of delimiters as [\".\"] \n    g = glob.MustCompile(\"api.*.com\", '.')\n    g.Match(\"api.github.com\") // true\n    g.Match(\"api.gi.hub.com\") // false\n    \n    // create new glob with set of delimiters as [\".\"] \n    // but now with super wildcard\n    g = glob.MustCompile(\"api.**.com\", '.')\n    g.Match(\"api.github.com\") // true\n    g.Match(\"api.gi.hub.com\") // true\n        \n    // create glob with single symbol wildcard\n    g = glob.MustCompile(\"?at\")\n    g.Match(\"cat\") // true\n    g.Match(\"fat\") // true\n    g.Match(\"at\") // false\n    \n    // create glob with single symbol wildcard and delimiters ['f']\n    g = glob.MustCompile(\"?at\", 'f')\n    g.Match(\"cat\") // true\n    g.Match(\"fat\") // false\n    g.Match(\"at\") // false \n    \n    // create glob with character-list matchers \n    g = glob.MustCompile(\"[abc]at\")\n    g.Match(\"cat\") // true\n    g.Match(\"bat\") // true\n    g.Match(\"fat\") // false\n    g.Match(\"at\") // false\n    \n    // create glob with character-list matchers \n    g = glob.MustCompile(\"[!abc]at\")\n    g.Match(\"cat\") // false\n    g.Match(\"bat\") // false\n    g.Match(\"fat\") // true\n    g.Match(\"at\") // false \n    \n    // create glob with character-range matchers \n    g = glob.MustCompile(\"[a-c]at\")\n    g.Match(\"cat\") // true\n    g.Match(\"bat\") // true\n    g.Match(\"fat\") // false\n    g.Match(\"at\") // false\n    \n    // create glob with character-range matchers \n    g = glob.MustCompile(\"[!a-c]at\")\n    g.Match(\"cat\") // false\n    g.Match(\"bat\") // false\n    g.Match(\"fat\") // true\n    g.Match(\"at\") // false \n    \n    // create glob with pattern-alternatives list \n    g = glob.MustCompile(\"{cat,bat,[fr]at}\")\n    g.Match(\"cat\") // true\n    g.Match(\"bat\") // true\n    g.Match(\"fat\") // true\n    g.Match(\"rat\") // true\n    g.Match(\"at\") // false \n    g.Match(\"zat\") // false \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-side gRPC Prometheus Interceptors in Go\nDESCRIPTION: Code example showing how to initialize gRPC server with Prometheus monitoring interceptors. It demonstrates registering the interceptors, service implementations, and exposing the metrics endpoint.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/grpc-ecosystem/go-grpc-prometheus\"\n...\n    // Initialize your gRPC server's interceptor.\n    myServer := grpc.NewServer(\n        grpc.StreamInterceptor(grpc_prometheus.StreamServerInterceptor),\n        grpc.UnaryInterceptor(grpc_prometheus.UnaryServerInterceptor),\n    )\n    // Register your gRPC service implementations.\n    myservice.RegisterMyServiceServer(s.server, &myServiceImpl{})\n    // After all your registrations, make sure all of the Prometheus metrics are initialized.\n    grpc_prometheus.Register(myServer)\n    // Register Prometheus metrics handler.    \n    http.Handle(\"/metrics\", promhttp.Handler())\n```\n\n----------------------------------------\n\nTITLE: Server Deployment Configuration\nDESCRIPTION: Specifies server deployment settings including image and tag.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Node Affinity Rules\nDESCRIPTION: Configures pod scheduling constraints based on node labels.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Policy in Kubernetes Deployment (YAML)\nDESCRIPTION: Defines the policy for pulling container images. In this case, it's set to 'IfNotPresent', meaning the image is pulled only if it's not already present on the node.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers\nDESCRIPTION: Defines initialization containers that run before app containers\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n    image: nginx:1.14.2\n    securityContext:\n      privileged: true\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe in Kubernetes Deployment (YAML)\nDESCRIPTION: Defines a liveness probe for Kubernetes to determine if a pod needs to be restarted. Includes settings for probe path, port, delay, timeout, and custom headers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in Devtron Deployment\nDESCRIPTION: Defines the ports on which application services will be exposed to other services. Includes configuration for envoy proxy, HTTP/2 support, and streaming capabilities.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Topology Spread Constraints\nDESCRIPTION: Configures pod distribution across cluster topology.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override\nDESCRIPTION: Configuration to override the default release fullname used by Devtron for Kubernetes object names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Container Security Context Configuration\nDESCRIPTION: Defines security context settings for containers including privilege escalation controls.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Proxy Sidecar in Devtron\nDESCRIPTION: YAML configuration for setting up the envoy proxy sidecar container that enables advanced metrics collection. Defines the container image, resources limits and requests for CPU and memory utilization.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/app-metrics.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenvoyproxy:\n  image: envoyproxy/envoy:v1.14.1\n  configMapName: \"\"\n  resources:\n    limits:\n      cpu: \"50m\"\n      memory: \"50Mi\"\n    requests:\n      cpu: \"50m\"\n      memory: \"50Mi\"\n```\n\n----------------------------------------\n\nTITLE: Topology Spread Constraints\nDESCRIPTION: Configuration for controlling pod distribution across cluster topology.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n    minDomains: 1\n    nodeAffinityPolicy: Ignore\n```\n\n----------------------------------------\n\nTITLE: Defining Pod Affinity Rules\nDESCRIPTION: Configures node affinity rules for pod scheduling based on node labels.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Defining Node Affinity in Kubernetes Deployments\nDESCRIPTION: Configures node affinity rules to control which nodes pods can be scheduled on based on node labels. This helps to ensure pods are placed on appropriate infrastructure.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress\nDESCRIPTION: Defines ingress configuration for private internal access to services.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Volumes\nDESCRIPTION: Volume configuration for persistent and temporary storage.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Service Mesh\nDESCRIPTION: Configuration for Istio service mesh including gateway and virtual service settings for traffic management, security, and routing.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nistio:\n  enable: true\n  gateway:\n    annotations: {}\n    enabled: false\n    host: example.com\n    labels: {}\n    tls:\n      enabled: false\n      secretName: example-tls-secret\n  virtualService:\n    annotations: {}\n    enabled: false\n    gateways: []\n    hosts: []\n    http:\n      - corsPolicy:\n          allowCredentials: false\n          allowHeaders:\n            - x-some-header\n          allowMethods:\n            - GET\n          allowOrigin:\n            - example.com\n          maxAge: 24h\n        headers:\n          request:\n            add:\n              x-some-header: value\n        match:\n          - uri:\n              prefix: /v1\n          - uri:\n              prefix: /v2\n        retries:\n          attempts: 2\n          perTryTimeout: 3s\n        rewriteUri: /\n        route:\n          - destination:\n              host: service1\n              port: 80\n        timeout: 12s\n      - route:\n          - destination:\n              host: service2\n    labels: {}\n```\n\n----------------------------------------\n\nTITLE: Topology Spread Constraints\nDESCRIPTION: Configures pod distribution across cluster topology\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Functions in Go with Govaluate\nDESCRIPTION: Demonstrates how to register and use custom functions in expressions. This example creates a 'strlen' function that returns the length of a string.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/govaluate/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunctions := map[string]govaluate.ExpressionFunction {\n\t\"strlen\": func(args ...interface{}) (interface{}, error) {\n\t\tlength := len(args[0].(string))\n\t\treturn (float64)(length), nil\n\t},\n}\n\nexpString := \"strlen('someReallyLongInputString') <= 16\"\nexpression, _ := govaluate.NewEvaluableExpressionWithFunctions(expString, functions)\n\nresult, _ := expression.Evaluate(nil)\n// result is now \"false\", the boolean value\n```\n\n----------------------------------------\n\nTITLE: Simple ACL Policy Examples in Casbin\nDESCRIPTION: Example policy rules for the ACL model giving read and write permissions to different users. The first rule allows alice to read data1, and the second rule allows bob to write data2.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/casbin/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\np, alice, data1, read\np, bob, data2, write\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Security Context in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure a security context for the main container in Kubernetes. It sets privilege escalation permissions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Kubernetes YAML for Custom Resources\nDESCRIPTION: Allows specifying custom Kubernetes objects to be applied alongside the main deployment. In this example, a Service object is defined to expose the application within the cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress with TLS Settings for Devtron Installation\nDESCRIPTION: Command to install Devtron with Ingress configuration that includes TLS settings. This configures a TLS secret name and hosts for secure access.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/ingress-setup.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install devtron devtron/devtron-operator -n devtroncd \\\n  --set components.devtron.ingress.enabled=true \\\n  --set components.devtron.ingress.className=nginx \\\n  --set components.devtron.ingress.host=devtron.example.com \\\n  --set components.devtron.ingress.tls[0].secretName=devtron-tls \\\n  --set components.devtron.ingress.tls[0].hosts[0]=devtron.example.com\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets for Private Registries\nDESCRIPTION: References Kubernetes secrets containing Docker registry credentials for pulling images from private registries. Requires creating the secret separately.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe\nDESCRIPTION: Defines health check configuration to determine if a pod is ready to receive traffic.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Affinity Rules in Kubernetes YAML\nDESCRIPTION: Defines affinity rules for pod scheduling in a Kubernetes deployment, allowing control over which nodes pods can be scheduled on.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in Kubernetes Deployment\nDESCRIPTION: Defines the ports on which application services will be exposed to other services, including envoy configuration, HTTP/2 support, and streaming capabilities.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Topology Spread Constraints\nDESCRIPTION: Configuration for controlling pod distribution across cluster topology domains for high availability.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Ready Seconds\nDESCRIPTION: Specifies the minimum time a pod should be ready before being considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets in Kubernetes YAML\nDESCRIPTION: Specifies the secret containing Docker registry credentials for pulling private images. The secret must be created separately.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Specifying Kubernetes Volume Mounts in YAML\nDESCRIPTION: This snippet shows how to configure volume mounts in a Kubernetes deployment. It demonstrates mounting volumes to specific paths in the container filesystem.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Tolerations\nDESCRIPTION: Defines pod tolerations for node taints to control pod scheduling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ambassador Mappings in YAML\nDESCRIPTION: Defines Ambassador mappings to access applications from outside the cluster, including hostname, TLS settings, and CORS policy.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nambassadorMapping:\n  ambassadorId: \"prod-emissary\"\n  cors: {}\n  enabled: true\n  hostname: devtron.example.com\n  labels: {}\n  prefix: /\n  retryPolicy: {}\n  rewrite: \"\"\n  tls:\n    context: \"devtron-tls-context\"\n    create: false\n    hosts: []\n    secretName: \"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Tolerations in Kubernetes YAML\nDESCRIPTION: Defines tolerations for pods in a Kubernetes deployment, allowing pods to be scheduled on nodes with specific taints.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Array Value\nDESCRIPTION: Example demonstrating how to delete a value from a JSON array\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/sjson/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nvalue, _ := sjson.Delete(`{\"friends\":[\"Andy\",\"Carol\"]}`, \"friends.1\")\nprintln(value)\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in Kubernetes YAML\nDESCRIPTION: Defines ports on which application services will be exposed to other services. Includes settings for envoy port, idle timeout, service port, and HTTP2 support.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Version Constraint Checking in Go\nDESCRIPTION: Shows how to create and check version constraints against semantic versions\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nc, err := semver.NewConstraint(\">= 1.2.3\")\nif err != nil {\n    // Handle constraint not being parsable.\n}\n\nv, err := semver.NewVersion(\"1.3\")\nif err != nil {\n    // Handle version not being parsable.\n}\n// Check if the version meets the constraints. The a variable will be true.\na := c.Check(v)\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override in Kubernetes\nDESCRIPTION: YAML configuration to override the default naming convention used by Devtron for Kubernetes resources. By default, Devtron uses {app-name}-{environment-name}.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets\nDESCRIPTION: YAML configuration for private registry credentials.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Tolerations\nDESCRIPTION: Configuration for pod scheduling tolerations on nodes with specific taints.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Specifications\nDESCRIPTION: Defines container configurations including image, ports, and startup commands.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Topology Spread Constraints Configuration\nDESCRIPTION: Defines how pods are distributed across cluster topology domains for high availability.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Image Settings\nDESCRIPTION: Configuration for container image pull policy settings in Kubernetes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Using httpsnoop to Capture HTTP Metrics in Go\nDESCRIPTION: This example demonstrates how to wrap an existing HTTP handler with httpsnoop to capture and log metrics for each request. The CaptureMetrics function preserves the functionality of the original handler while collecting data about the response code, duration, and bytes written.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/felixge/httpsnoop/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// myH is your app's http handler, perhaps a http.ServeMux or similar.\nvar myH http.Handler\n// wrappedH wraps myH in order to log every request.\nwrappedH := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\tm := httpsnoop.CaptureMetrics(myH, w, r)\n\tlog.Printf(\n\t\t\"%s %s (code=%d dt=%s written=%d)\",\n\t\tr.Method,\n\t\tr.URL,\n\t\tm.Code,\n\t\tm.Duration,\n\t\tm.Written,\n\t)\n})\nhttp.ListenAndServe(\":8080\", wrappedH)\n```\n\n----------------------------------------\n\nTITLE: Defining Affinity Rules\nDESCRIPTION: Configures node and pod affinity rules for scheduling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: KEDA Kafka-based Autoscaling\nDESCRIPTION: Configures KEDA autoscaling based on Kafka metrics.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Configuring MinReadySeconds for Pod Availability\nDESCRIPTION: Specifies the minimum time a newly created Pod should be ready without container crashes before being considered available. Defaults to 0 seconds.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Security Context in YAML\nDESCRIPTION: Configuration for container-level security context settings in Kubernetes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Setting MaxSurge in Kubernetes Deployment\nDESCRIPTION: This YAML snippet sets the maximum number of pods that can be created over the desired number of pods in a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Init Containers\nDESCRIPTION: Configuration for initialization containers that run before app containers in a pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n    image: nginx:1.14.2\n    securityContext:\n      privileged: true\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Service in Kubernetes YAML\nDESCRIPTION: This YAML snippet defines a service configuration for a Kubernetes deployment. It specifies the service type and allows for custom annotations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n  service:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Security Context in Kubernetes YAML\nDESCRIPTION: This snippet shows how to set up security context at the pod level in a Kubernetes deployment. It includes settings for user ID, group ID, and filesystem group.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Settings\nDESCRIPTION: YAML configuration for container image pull policy settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Kubernetes YAML\nDESCRIPTION: Allows inclusion of arbitrary Kubernetes objects in the deployment. This section can contain any valid Kubernetes YAML that will be applied during application deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Setting Grace Period for Kubernetes Pod Termination in YAML\nDESCRIPTION: This YAML configuration sets the termination grace period for Kubernetes pods. It specifies the time Kubernetes waits before forcefully terminating a pod, allowing for graceful shutdown procedures.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Migration in Kubernetes Deployments\nDESCRIPTION: Controls whether database migration is enabled during application deployment. When enabled, this would run migration scripts to update database schema.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Using PostHog Go Client for Analytics and Feature Flags\nDESCRIPTION: Complete example demonstrating how to initialize the PostHog client and use it for various operations including capturing events, identifying users, creating aliases, capturing pageviews, deduplicating events, and checking feature flags.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/posthog/posthog-go/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"os\"\n    \"github.com/posthog/posthog-go\"\n)\n\nfunc main() {\n    client := posthog.New(os.Getenv(\"POSTHOG_API_KEY\")) // This value must be set to the project API key in PostHog\n    // alternatively, you can do \n    // client, _ := posthog.NewWithConfig(\n    //     os.Getenv(\"POSTHOG_API_KEY\"),\n    //     posthog.Config{\n    //         PersonalApiKey: \"your personal API key\", // Set this to your personal API token you want feature flag evaluation to be more performant.  This will incur more costs, though\n    //         Endpoint:       \"https://us.i.posthog.com\",\n    //     },\n    // )\n    defer client.Close()\n\n    // Capture an event\n    client.Enqueue(posthog.Capture{\n      DistinctId: \"test-user\",\n      Event:      \"test-snippet\",\n      Properties: posthog.NewProperties().\n        Set(\"plan\", \"Enterprise\").\n        Set(\"friends\", 42),\n    })\n    \n    // Add context for a user\n    client.Enqueue(posthog.Identify{\n      DistinctId: \"user:123\",\n      Properties: posthog.NewProperties().\n        Set(\"email\", \"john@doe.com\").\n        Set(\"proUser\", false),\n    })\n    \n    // Link user contexts\n    client.Enqueue(posthog.Alias{\n      DistinctId: \"user:123\",\n      Alias: \"user:12345\",\n    })\n    \n    // Capture a pageview\n    client.Enqueue(posthog.Capture{\n      DistinctId: \"test-user\",\n      Event:      \"$pageview\",\n      Properties: posthog.NewProperties().\n        Set(\"$current_url\", \"https://example.com\"),\n    })\n    \n    // Capture event with calculated uuid to deduplicate repeated events. \n    // The library github.com/google/uuid is used\n    key := myEvent.Id + myEvent.Project\n    uid := uuid.NewSHA1(uuid.NameSpaceX500, []byte(key)).String()\n    client.Enqueue(posthog.Capture{\n      Uuid: uid,\n      DistinctId: \"test-user\",\n      Event:      \"$pageview\",\n      Properties: posthog.NewProperties().\n        Set(\"$current_url\", \"https://example.com\"),\n    })\n\n    // Check if a feature flag is enabled\n    isMyFlagEnabled, err := client.IsFeatureEnabled(\n            FeatureFlagPayload{\n                Key:        \"flag-key\",\n                DistinctId: \"distinct_id_of_your_user\",\n            })\n\n    if isMyFlagEnabled == true {\n        // Do something differently for this user\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: KEDA Kafka Autoscaling\nDESCRIPTION: Configuration for KEDA autoscaling based on Kafka metrics.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Image Descriptor Template for Deployment Values\nDESCRIPTION: Example of a .image_descriptor_template.json file that injects values from the CD pipeline into the Helm chart. This template contains placeholders for image tag, name, pipeline details, and other deployment information.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/deployment-charts.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"server\": {\n        \"deployment\": {\n            \"image_tag\": \"{{.Tag}}\",\n            \"image\": \"{{.Name}}\"\n        }\n    },\n    \"pipelineName\": \"{{.PipelineName}}\",\n    \"releaseVersion\": \"{{.ReleaseVersion}}\",\n    \"deploymentType\": \"{{.DeploymentType}}\",\n    \"app\": \"{{.App}}\",\n    \"env\": \"{{.Env}}\",\n    \"appMetrics\": {{.AppMetrics}}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers\nDESCRIPTION: Defines initialization containers that run before app containers with specialized setup tasks.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n    image: nginx:1.14.2\n    securityContext:\n      privileged: true\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Commands for Kubernetes Deployment in YAML\nDESCRIPTION: This YAML configuration specifies the structure for defining commands in a Kubernetes deployment. It includes options to enable or disable the command and provide an array of command values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Creating a GitLab Client with Custom Base URL in Go\nDESCRIPTION: Demonstrates how to create a GitLab client with a custom base URL using the WithBaseURL option function.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xanzy/go-gitlab/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngit, err := gitlab.NewClient(\"yourtokengoeshere\", gitlab.WithBaseURL(\"https://git.mydomain.com/api/v4\"))\nif err != nil {\n  log.Fatalf(\"Failed to create client: %v\", err)\n}\nusers, _, err := git.Users.ListUsers(&gitlab.ListUsersOptions{})\n```\n\n----------------------------------------\n\nTITLE: Tracking Devtron Microservices Installation Progress\nDESCRIPTION: This command checks the status of the Devtron installer to track the progress of microservices installation. It retrieves the sync status from the installer-devtron resource in the devtroncd namespace.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/charts/devtron/templates/NOTES.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get installers installer-devtron -o jsonpath='{.status.sync.status}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer in Go\nDESCRIPTION: Creates a new Casbin enforcer instance with model and policy files. This is the first step for implementing authorization with Casbin.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/casbin/v2/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ne, _ := casbin.NewEnforcer(\"path/to/model.conf\", \"path/to/policy.csv\")\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Surge for Pod Scaling\nDESCRIPTION: Configures the maximum number of pods that can be created over the desired number during updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Field Names and Ignoring Fields with Struct Tags in Go\nDESCRIPTION: This example demonstrates how to use struct tags with gorilla/schema to customize field behavior. It shows how to define custom field names, make fields required, and exclude fields from processing using the schema tag.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/gorilla/schema/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Person struct {\n    Name  string `schema:\"name,required\"`  // custom name, must be supplied\n    Phone string `schema:\"phone\"`          // custom name\n    Admin bool   `schema:\"-\"`              // this field is never set\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe\nDESCRIPTION: YAML configuration for Kubernetes liveness probe settings including path, timing parameters, and health check options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe in Devtron Deployment\nDESCRIPTION: Defines the health check that Kubernetes uses to determine if a pod needs to be restarted. This should return an error code in case of non-recoverable errors.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Disruption Budget\nDESCRIPTION: Defines the minimum availability constraints for voluntary pod disruptions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     minAvailable: 1\n```\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     maxUnavailable: 50%\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress in Kubernetes Deployment\nDESCRIPTION: This YAML snippet sets up internal ingress configuration for private access to the application URL in a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Custom TOML Unmarshaler Implementation\nDESCRIPTION: Demonstrates implementing the TextUnmarshaler interface for custom type parsing, using email addresses as an example.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/BurntSushi/toml/README.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\ncontacts = [\n    \"Donald Duck <donald@duckburg.com>\",\n    \"Scrooge McDuck <scrooge@duckburg.com>\",\n]\n```\n\nLANGUAGE: go\nCODE:\n```\ntype address struct {\n\t*mail.Address\n}\n\nfunc (a *address) UnmarshalText(text []byte) error {\n\tvar err error\n\ta.Address, err = mail.ParseAddress(string(text))\n\treturn err\n}\n\nfunc decode() {\n\tblob := `\n\t\tcontacts = [\n\t\t\t\"Donald Duck <donald@duckburg.com>\",\n\t\t\t\"Scrooge McDuck <scrooge@duckburg.com>\",\n\t\t]\n\t`\n\n\tvar contacts struct {\n\t\tContacts []address\n\t}\n\n\t_, err := toml.Decode(blob, &contacts)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfor _, c := range contacts.Contacts {\n\t\tfmt.Printf(\"%#v\\n\", c.Address)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: HTTPS Annotations for Nginx Ingress Controller on Digital Ocean\nDESCRIPTION: Annotations to enable HTTPS for Devtron with Nginx Ingress Controller on Digital Ocean. These settings configure SSL termination using a DO certificate.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/ingress-setup.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  service.beta.kubernetes.io/do-loadbalancer-protocol: \"http\"\n  service.beta.kubernetes.io/do-loadbalancer-tls-ports: \"443\"\n  service.beta.kubernetes.io/do-loadbalancer-certificate-id: \"<your-certificate-id>\"\n  service.beta.kubernetes.io/do-loadbalancer-redirect-http-to-https: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Disruption Budget in YAML\nDESCRIPTION: Defines the Pod Disruption Budget to limit the number of pods that are down simultaneously from voluntary disruptions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     minAvailable: 1\n```\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     maxUnavailable: 50%\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Monitoring\nDESCRIPTION: Specifies Prometheus monitoring configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Service Monitor Configuration\nDESCRIPTION: YAML configuration for setting up service monitoring. Includes monitoring path, scheme, intervals, and metric relabeling rules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe in YAML\nDESCRIPTION: Defines a liveness probe to check if the pod needs to be restarted. Includes settings for path, port, delay, timeout, and custom headers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Project and Snippet Creation with GitLab API\nDESCRIPTION: A full example that demonstrates creating a GitLab client, creating a new project with specific access levels, and adding a snippet to that project.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xanzy/go-gitlab/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\n\t\"github.com/xanzy/go-gitlab\"\n)\n\nfunc main() {\n\tgit, err := gitlab.NewClient(\"yourtokengoeshere\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create client: %v\", err)\n\t}\n\n\t// Create new project\n\tp := &gitlab.CreateProjectOptions{\n\t\tName:                     gitlab.Ptr(\"My Project\"),\n\t\tDescription:              gitlab.Ptr(\"Just a test project to play with\"),\n\t\tMergeRequestsAccessLevel: gitlab.Ptr(gitlab.EnabledAccessControl),\n\t\tSnippetsAccessLevel:      gitlab.Ptr(gitlab.EnabledAccessControl),\n\t\tVisibility:               gitlab.Ptr(gitlab.PublicVisibility),\n\t}\n\tproject, _, err := git.Projects.CreateProject(p)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Add a new snippet\n\ts := &gitlab.CreateProjectSnippetOptions{\n\t\tTitle:           gitlab.Ptr(\"Dummy Snippet\"),\n\t\tFileName:        gitlab.Ptr(\"snippet.go\"),\n\t\tContent:         gitlab.Ptr(\"package main....\"),\n\t\tVisibility:      gitlab.Ptr(gitlab.PublicVisibility),\n\t}\n\t_, _, err = git.ProjectSnippets.CreateSnippet(project.ID, s)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Host-Specific Ingress for Devtron\nDESCRIPTION: YAML configuration to create an Ingress resource for Devtron with a specific host. This defines a custom domain and paths for orchestrator, dashboard, and grafana components.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/ingress-setup.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations: \n    nginx.ingress.kubernetes.io/app-root: /dashboard\n  labels:\n    app: devtron\n    release: devtron\n  name: devtron-ingress\n  namespace: devtroncd\nspec:\n  ingressClassName: nginx\n  rules:\n    - host: devtron.example.com\n      http:\n        paths:\n          - backend:\n              service:\n                name: devtron-service\n                port:\n                  number: 80\n            path: /orchestrator\n            pathType: ImplementationSpecific\n          - backend:\n              service:\n                name: devtron-service\n                port:\n                  number: 80\n            path: /dashboard\n            pathType: ImplementationSpecific\n          - backend:\n              service:\n                name: devtron-service\n                port:\n                  number: 80\n            path: /grafana\n            pathType: ImplementationSpecific\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Policy in Kubernetes Deployment\nDESCRIPTION: Sets the image pull policy for containers in the deployment. This example uses 'IfNotPresent' to only pull the image if it's not already available on the node.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Maximum Unavailable Pods Configuration\nDESCRIPTION: Defines the maximum number of pods that can be unavailable during updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Installing go-pg PostgreSQL Client for Golang\nDESCRIPTION: Command to install the go-pg PostgreSQL client and ORM library using go get.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-pg/pg/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/go-pg/pg\n```\n\n----------------------------------------\n\nTITLE: Configuring Winter-Soldier for Kubernetes Resource Management in YAML\nDESCRIPTION: Winter-Soldier configuration template for cleaning up or hibernating Kubernetes resources. This template shows the basic structure with fields for enabling the service, setting API version, defining action type, and specifying time ranges.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nwinterSoldier:\n  enabled: false\n  apiVersion: pincher.devtron.ai/v1alpha1\n  action: sleep\n  timeRangesWithZone:\n    timeZone: \"Asia/Kolkata\"\n    timeRanges: []\n  targetReplicas: []\n  fieldSelector: []\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Formatters for Logrus in Go\nDESCRIPTION: Implementation of a custom JSON formatter for Logrus by implementing the Formatter interface. This example shows how to define a custom log output format by serializing log entries to JSON.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype MyJSONFormatter struct {\n}\n\nlog.SetFormatter(new(MyJSONFormatter))\n\nfunc (f *MyJSONFormatter) Format(entry *Entry) ([]byte, error) {\n  // Note this doesn't include Time, Level and Message which are available on\n  // the Entry. Consult `godoc` on information about those fields or read the\n  // source of the official loggers.\n  serialized, err := json.Marshal(entry.Data)\n    if err != nil {\n      return nil, fmt.Errorf(\"Failed to marshal fields to JSON, %w\", err)\n    }\n  return append(serialized, '\\n'), nil\n}\n```\n\n----------------------------------------\n\nTITLE: SplitPattern Utility for Pattern Parsing in Go\nDESCRIPTION: SplitPattern splits a pattern at the last slash before any unescaped meta characters. This is useful for initializing os.DirFS() to call Glob(), as it separates the base path from the pattern to avoid silent failures with path components like '/./'. \nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc SplitPattern(p string) (base, pattern string)\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override\nDESCRIPTION: Configures custom name for Kubernetes objects instead of default naming pattern.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Kubernetes YAML\nDESCRIPTION: Allows specifying raw Kubernetes objects to be applied during deployment. Includes an example of a Service definition.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Configuring Tolerations in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure tolerations in Kubernetes. Tolerations allow pods to be scheduled on nodes with matching taints, providing control over pod placement.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Policy in Kubernetes Deployment\nDESCRIPTION: This YAML snippet sets the image pull policy for containers in a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers in Devtron Deployment\nDESCRIPTION: Specialized containers that run before app containers in a Pod. Can contain utilities or setup scripts not present in the app image, with options to reuse the main container image.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Kafka\nDESCRIPTION: YAML configuration for Kubernetes Event-Driven Autoscaling (KEDA) using Kafka metrics. Includes bootstrap servers, topic configuration, lag threshold, and authentication settings for Kafka-based scaling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Generating Template Chart in Devtron Orchestrator API using Go\nDESCRIPTION: This snippet shows how to use the OrchestratorApplicationTemplateChartPost endpoint to generate a template chart. It demonstrates creating an API client, forming the request with TemplateChartRequest, and handling the TemplateChartResponse.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/DefaultApi.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n    openapiclient \"./openapi\"\n)\n\nfunc main() {\n    templateChartRequest := *openapiclient.NewTemplateChartRequest() // TemplateChartRequest \n\n    configuration := openapiclient.NewConfiguration()\n    api_client := openapiclient.NewAPIClient(configuration)\n    resp, r, err := api_client.DefaultApi.OrchestratorApplicationTemplateChartPost(context.Background()).TemplateChartRequest(templateChartRequest).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `DefaultApi.OrchestratorApplicationTemplateChartPost``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    // response from `OrchestratorApplicationTemplateChartPost`: TemplateChartResponse\n    fmt.Fprintf(os.Stdout, \"Response from `DefaultApi.OrchestratorApplicationTemplateChartPost`: %v\\n\", resp)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Security Context\nDESCRIPTION: Configuration for container-level security context settings in Kubernetes deployments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Database Migration Configuration\nDESCRIPTION: Controls whether database migration should be enabled during deployment. When enabled, this would trigger database schema migrations as part of the deployment process.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Setting MaxSurge for Rolling Updates\nDESCRIPTION: Specifies the maximum number of pods that can be created over the desired count during updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Ready Seconds in Kubernetes Deployment (YAML)\nDESCRIPTION: Specifies the minimum number of seconds for which a newly created Pod should be ready without any of its containers crashing, for it to be considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: MaxUnavailable Setting\nDESCRIPTION: Configuration for maximum number of pods that can be unavailable during updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress in Kubernetes Deployment YAML\nDESCRIPTION: Defines internal Ingress settings for private access within the cluster. It includes options similar to the public Ingress configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Creating New Err in Go\nDESCRIPTION: NewErr is used to return an Err for the purpose of embedding in other structures. The location is not specified and needs to be set with a call to SetLocation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nfunc NewErr(format string, args ...interface{}) Err\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure Prometheus monitoring in Kubernetes. It specifies the release name for Prometheus.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus:\n  release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Setting Pod Arguments\nDESCRIPTION: Configuration for providing arguments to container commands.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Monitor in Kubernetes YAML\nDESCRIPTION: Defines service monitoring settings including path, scheme, interval, and metric relabeling. Used for monitoring specific services.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Pod Security Context\nDESCRIPTION: Security context configuration for pod level access controls.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Volume Mounts in YAML\nDESCRIPTION: This YAML snippet defines the configuration for Kubernetes Volume Mounts. It specifies how volumes are mounted within containers, including mount paths and subpaths.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee  \n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers\nDESCRIPTION: YAML configuration for Kubernetes init containers with volume mounts and commands.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Patching Devtron Service for Ingress Support\nDESCRIPTION: Command to patch the Devtron service to use ClusterIP instead of LoadBalancer. This is necessary when configuring Ingress after Devtron installation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/ingress-setup.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch -n devtroncd svc devtron-service -p '{\"spec\": {\"ports\": [{\"port\": 80,\"targetPort\": \"devtron\",\"protocol\": \"TCP\",\"name\": \"devtron\"}],\"type\": \"ClusterIP\",\"selector\": {\"app\": \"devtron\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override\nDESCRIPTION: Overrides the default release name used by Devtron\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables from Secret Keys in YAML\nDESCRIPTION: Configures environment variables using values from Kubernetes Secrets. Specifies the environment variable name, secret name, and the key within the secret.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromSecretKeys: \n  - name: ENV_NAME\n    secretName: SECRET_NAME\n    keyName: SECRET_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in Kubernetes Deployment (YAML)\nDESCRIPTION: Defines ports on which application services will be exposed to other services. Includes settings for envoy port, idle timeout, service port, node port, and HTTP2 support.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    nodePort: 32056\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Increasing PVC Storage Capacity in Kubernetes\nDESCRIPTION: Modify the storage capacity of a Persistent Volume Claim (PVC) to resolve disk full issues. Increase the storage value as needed.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n    capacity:\n        storage: 10Gi # increase as per convenience\n```\n\n----------------------------------------\n\nTITLE: Accessing Devtron Dashboard URL\nDESCRIPTION: Command to retrieve the Devtron dashboard URL from the Kubernetes service.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc -n devtroncd devtron-service -o jsonpath='{.status.loadBalancer.ingress}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Ambassador Mappings in Kubernetes (YAML)\nDESCRIPTION: Sets up Ambassador mappings to access applications from outside the cluster. Includes settings for hostname, TLS, CORS, and more.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nambassadorMapping:\n  ambassadorId: \"prod-emissary\"\n  cors: {}\n  enabled: true\n  hostname: devtron.example.com\n  labels: {}\n  prefix: /\n  retryPolicy: {}\n  rewrite: \"\"\n  tls:\n    context: \"devtron-tls-context\"\n    create: false\n    hosts: []\n    secretName: \"\"\n```\n\n----------------------------------------\n\nTITLE: Service Monitor Configuration in YAML\nDESCRIPTION: Defines service monitoring configuration including path, scheme, intervals and metric relabeling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets in Kubernetes Deployment (YAML)\nDESCRIPTION: Specifies the secret containing Docker registry credentials for pulling private images. The secret needs to be created separately.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Setting Grace Period\nDESCRIPTION: Configures pod termination grace period.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress in Devtron Deployment Chart (Legacy Format)\nDESCRIPTION: This YAML configuration enables external access to the application via Ingress using the legacy single-host format. It includes settings for className, annotations, path, and TLS configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  path: \"\"\n  host: \"\"\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Setting Up Kubernetes Volumes\nDESCRIPTION: Configuration for volume definitions including empty directories and persistent volume claims.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Adding Raw Kubernetes YAML Configuration\nDESCRIPTION: This snippet shows how to include raw Kubernetes YAML configurations in your deployment. It allows you to specify any Kubernetes object directly.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Environment Variables from Secrets\nDESCRIPTION: Configuration for mapping Kubernetes secrets to environment variables.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromSecretKeys: \n  - name: ENV_NAME\n    secretName: SECRET_NAME\n    keyName: SECRET_KEY\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Unavailable Pods in Kubernetes Deployment (YAML)\nDESCRIPTION: Defines the maximum number of pods that can be unavailable during the update process. The value can be an absolute number or percentage of the replicas count.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Environment Variables from ConfigMap Keys\nDESCRIPTION: Configuration for setting environment variables using values from Kubernetes ConfigMaps.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromCongigMapKeys: \n  - name: ENV_NAME\n    configMapName: CONFIG_MAP_NAME\n    keyName: CONFIG_MAP_KEY\n```\n\n----------------------------------------\n\nTITLE: Checking Job Completion Status in Kubernetes\nDESCRIPTION: Command to verify if migration jobs are completed in the devtroncd namespace. This helps diagnose why helm apps might not be visible on the dashboard.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/FAQs/hyperion-troubleshoot.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get jobs -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: Binding Flag to Variable using pflag\nDESCRIPTION: This snippet demonstrates how to bind a flag to a variable using pflag's Var() functions. It creates an integer flag and binds it to the 'flagvar' variable.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar flagvar int\nfunc init() {\n    flag.IntVar(&flagvar, \"flagname\", 1234, \"help message for flagname\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports for StatefulSet in YAML\nDESCRIPTION: Defines ports on which application services will be exposed to other services. Includes options for envoy port, idle timeout, service port, node port, and HTTP2 support.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    nodePort: 32056\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Security Context\nDESCRIPTION: Example of setting container-level security context in Kubernetes deployments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Installation Command\nDESCRIPTION: Command to install the JSON Iterator library using Go modules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/json-iterator/go\n```\n\n----------------------------------------\n\nTITLE: Defining Service Monitor in Kubernetes YAML\nDESCRIPTION: Configures Prometheus ServiceMonitor for scraping metrics. Includes path, scheme, interval, and label configurations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring values.yaml for MongoDB Helm Chart\nDESCRIPTION: Example of configuring the values.yaml file for the MongoDB Helm chart. Users can customize these values according to their project requirements. The full documentation for available parameters can be found in the MongoDB Helm chart documentation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/deploy-chart/examples/deploying-mongodb-helm-chart.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example values.yaml configuration\n# Actual content not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron without Integrations (With Image Pull Secrets)\nDESCRIPTION: Helm command to install Devtron without any integrations but with image pull secrets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-in-airgapped-environment.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nhelm install devtron . -n devtroncd --set global.containerRegistry=\"$TARGET_REGISTRY\" --set global.imagePullSecrets[0].name=devtron-imagepull\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers in YAML\nDESCRIPTION: Defines init containers that run before app containers in a Pod. Can include utilities or setup scripts not present in the app image.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Affinity in Kubernetes YAML\nDESCRIPTION: Demonstrates the structure for specifying node affinity or inter-pod affinity in a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Ingress Format in Kubernetes YAML\nDESCRIPTION: Defines the legacy deployment-template ingress format for Kubernetes. It includes settings for ingress class, annotations, path, host, and TLS configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  path: \"\"\n  host: \"\"\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Containers\nDESCRIPTION: Defines container specifications including image, ports, commands and arguments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress in Kubernetes Deployment\nDESCRIPTION: This YAML snippet sets up ingress configuration for public access to the application URL in a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Converting CamelCase to snake_case in Go\nDESCRIPTION: Example showing how to use the go-strcase package to convert a CamelCase string to snake_case format. The package is imported from github.com/stoewer/go-strcase.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/stoewer/go-strcase/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/stoewer/go-strcase\"\n\nvar snake = strcase.SnakeCase(\"CamelCase\")\n```\n\n----------------------------------------\n\nTITLE: Defining Sidecar Containers\nDESCRIPTION: Configuration for additional containers running in the same pod\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Kubernetes Deployment\nDESCRIPTION: Demonstrates how to set environment variables for containers in a pod. This example shows an empty array, indicating no environment variables are set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Container Security Context\nDESCRIPTION: Defines security context for containers\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Kubernetes Pod\nDESCRIPTION: Configuration for setting environment variables in container pods with empty array initialization.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Migration\nDESCRIPTION: Controls whether database migration should be performed during application deployment. When enabled, it executes migration scripts to update the database schema.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts in Kubernetes YAML\nDESCRIPTION: Defines how volumes are mounted within containers, specifying mount paths and optional subpaths. This connects the volumes defined earlier to specific locations in the container filesystem.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee  \n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Ingress in Kubernetes YAML\nDESCRIPTION: Specifies the legacy ingress configuration format for Kubernetes deployments, including class, annotations, path, and host settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  path: \"\"\n  host: \"\"\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus ServiceMonitor\nDESCRIPTION: YAML configuration for Prometheus ServiceMonitor which defines how metrics are collected. Includes path, scheme, interval, timeout, and metric relabeling configurations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Migration in Kubernetes Deployment\nDESCRIPTION: Enables or disables database migration configuration for the deployment. When enabled, it allows for automatic database schema updates during deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer in Golang\nDESCRIPTION: This snippet demonstrates how to initialize a Casbin enforcer in Golang using a model file and a policy file.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/casbin/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ne := casbin.NewEnforcer(\"path/to/model.conf\", \"path/to/policy.csv\")\n```\n\n----------------------------------------\n\nTITLE: Setting Termination Grace Period\nDESCRIPTION: YAML configuration for setting the termination grace period, which specifies how long Kubernetes waits before terminating pods. Default is 30 seconds, but should be increased if application shutdown requires more time.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Required Fields Configuration Example\nDESCRIPTION: Demonstrates how to mark environment variables as required using the required tag option. If a required field is not set, the parser will return an error.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/caarlos0/env/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype config struct {\n    Home         string   `env:\"HOME\"`\n    Port         int      `env:\"PORT\" envDefault:\"3000\"`\n    IsProduction bool     `env:\"PRODUCTION\"`\n    Hosts        []string `env:\"HOSTS\" envSeparator:\":\"`\n    SecretKey    string   `env:\"SECRET_KEY,required\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Container Commands in Kubernetes Pods\nDESCRIPTION: Sets the command to run within the container, overriding the default command from the image. The 'enabled' flag controls whether the custom command is used.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts in Kubernetes YAML\nDESCRIPTION: Specifies how volumes are mounted within containers. Demonstrates mounting to specific paths and using subPaths.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Security Context in Devtron\nDESCRIPTION: YAML configuration for adding security context at the pod level, specifying user ID, group ID, and filesystem group for controlling pod privileges and access control settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in YAML\nDESCRIPTION: Defines an empty array for environment variables to be set for containers running in the Pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: KEDA Autoscaling with Kafka\nDESCRIPTION: Configures KEDA autoscaling using Kafka metrics\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in Kubernetes Deployment (YAML)\nDESCRIPTION: Defines ports on which application services will be exposed to other services. Includes settings for envoy port, idle timeout, port names, and streaming support.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Defining the causer interface for error unwrapping\nDESCRIPTION: Interface definition for error types that can expose their underlying cause, used by the errors.Cause function.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype causer interface {\n        Cause() error\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Compatible Storage\nDESCRIPTION: Helm command to configure S3 compatible storage with custom endpoint for storing build logs and cache.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/installation-configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd \\\n--reuse-values \\\n--set installer.modules={cicd} \\\n--set configs.BLOB_STORAGE_PROVIDER=S3 \\\n--set configs.DEFAULT_CACHE_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CACHE_BUCKET_REGION=us-east-1 \\\n--set configs.DEFAULT_BUILD_LOGS_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CD_LOGS_BUCKET_REGION=us-east-1 \\\n--set secrets.BLOB_STORAGE_S3_ACCESS_KEY=<access-key> \\\n--set secrets.BLOB_STORAGE_S3_SECRET_KEY=<secret-key> \\\n--set configs.BLOB_STORAGE_S3_ENDPOINT=<endpoint>\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 with Access Keys\nDESCRIPTION: Helm command to configure AWS S3 bucket using access key and secret key authentication for storing build logs and cache.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/installation-configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd \\\n--reuse-values \\\n--set installer.modules={cicd} \\\n--set configs.BLOB_STORAGE_PROVIDER=S3 \\\n--set configs.DEFAULT_CACHE_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CACHE_BUCKET_REGION=us-east-1 \\\n--set configs.DEFAULT_BUILD_LOGS_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CD_LOGS_BUCKET_REGION=us-east-1 \\\n--set secrets.BLOB_STORAGE_S3_ACCESS_KEY=<access-key> \\\n--set secrets.BLOB_STORAGE_S3_SECRET_KEY=<secret-key>\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with MinIO for Storage\nDESCRIPTION: Helm command to install Devtron with MinIO for storing logs and cache. MinIO can be hosted locally unlike global cloud providers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd-with-gitops.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai \n\nhelm repo update devtron\n\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--set minio.enabled=true \\\n--set argo-cd.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Tolerations in Kubernetes\nDESCRIPTION: Configuration for pod tolerations to control pod scheduling based on node taints.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets in YAML\nDESCRIPTION: Specifies the Docker credentials secret used for accessing a private registry.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Kubernetes Deployments\nDESCRIPTION: This snippet provides conditional logic to obtain the application URL based on the service type and ingress configuration. It handles Ingress, NodePort, LoadBalancer, and ClusterIP service types, using kubectl commands and Helm template variables.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override in Devtron Deployment Chart\nDESCRIPTION: This YAML configuration replaces the release fullname created by default by Devtron, which is used to construct Kubernetes object names. By default, Devtron uses {app-name}-{environment-name} as release fullname.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Configuring Pause Before Switch Active in Kubernetes YAML\nDESCRIPTION: Specifies a wait time before switching active containers in Kubernetes deployments, allowing for graceful transitions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Disruption Budget in YAML\nDESCRIPTION: Creates a PodDisruptionBudget to limit the number of pods down simultaneously from voluntary disruptions. Can specify either minAvailable or maxUnavailable.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     minAvailable: 1\n```\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     maxUnavailable: 50%\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress in Kubernetes Deployment (YAML)\nDESCRIPTION: Defines Ingress settings for private access to the application. Similar to the public Ingress configuration, but typically used for internal network access.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Topology Spread Constraints\nDESCRIPTION: Configuration for controlling pod distribution across cluster topology domains for high availability.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: KEDA Autoscaling with Prometheus\nDESCRIPTION: Configures KEDA autoscaling based on Prometheus metrics.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Ready Seconds\nDESCRIPTION: Specifies the minimum time a pod must be ready before being considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress in Devtron Deployment Chart\nDESCRIPTION: This YAML configuration enables private access to the application via internal Ingress. It supports multiple hosts, paths, and TLS configuration for internal network access.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Manipulating SSH Config Files in Go\nDESCRIPTION: Shows how to open an SSH config file, parse it, manipulate its contents, and print the result. This example reads the user's SSH config, iterates through hosts and nodes, and prints the modified config.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/kevinburke/ssh_config/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nf, _ := os.Open(filepath.Join(os.Getenv(\"HOME\"), \".ssh\", \"config\"))\ncfg, _ := ssh_config.Decode(f)\nfor _, host := range cfg.Hosts {\n    fmt.Println(\"patterns:\", host.Patterns)\n    for _, node := range host.Nodes {\n        // Manipulate the nodes as you see fit, or use a type switch to\n        // distinguish between Empty, KV, and Include nodes.\n        fmt.Println(node.String())\n    }\n}\n\n// Print the config to stdout:\nfmt.Println(cfg.String())\n```\n\n----------------------------------------\n\nTITLE: Validating Resource Limits and Requests in Devtron Helm Charts\nDESCRIPTION: This JSON snippet demonstrates the validation rules for CPU and memory resource allocation in Devtron Helm charts. It ensures that the limit values are always greater than or equal to the request values for both the main container and the Envoy proxy.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_36\n\nLANGUAGE: json\nCODE:\n```\nresources.limits.cpu >= resources.requests.cpu\nresources.limits.memory >= resources.requests.memory\nenvoyproxy.resources.limits.cpu >= envoyproxy.resources.requests.cpu\nenvoyproxy.resources.limits.memory >= envoyproxy.resources.requests.memory\n```\n\n----------------------------------------\n\nTITLE: Setting MaxSurge in Devtron Deployment Chart\nDESCRIPTION: This YAML configuration defines the maximum number of pods that can be created over the desired number of pods. The value can be an absolute number or percentage of the replicas count.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts\nDESCRIPTION: Defines mount paths and configurations for containers to access volumes\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee\n```\n\n----------------------------------------\n\nTITLE: Installing Deque Package in Go\nDESCRIPTION: Command to install the deque package using go get\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/gammazero/deque/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/gammazero/deque\n```\n\n----------------------------------------\n\nTITLE: Configuring Winter-Soldier for Kubernetes Resource Management in YAML\nDESCRIPTION: This YAML snippet defines the configuration for Winter-Soldier, a tool for managing Kubernetes resources. It includes settings for enabling the tool, specifying actions, time ranges, and target replicas.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nwinterSoldier:\n  enabled: false\n  apiVersion: pincher.devtron.ai/v1alpha1\n  action: sleep\n  timeRangesWithZone:\n    timeZone: \"Asia/Kolkata\"\n    timeRanges: []\n  targetReplicas: []\n  fieldSelector: []\n```\n\n----------------------------------------\n\nTITLE: Setting MaxSurge for StatefulSet Updates in YAML\nDESCRIPTION: Defines the maximum number of pods that can be created over the desired number of pods during an update. Can be an absolute number or percentage of replicas.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: AWS SDK Checksum Module Release Notes - v1.0.0\nDESCRIPTION: Initial release notes entry for version 1.0.0 announcing the new module for computing checksums and dependency updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/internal/checksum/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.0.0 (2022-02-24)\n\n* **Release**: New module for computing checksums\n* **Feature**: Updated `github.com/aws/smithy-go` to latest version\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: YAML configuration for container environment variables in Kubernetes pods.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts in Kubernetes YAML\nDESCRIPTION: Specifies the mount paths for volumes within containers, including subpath configurations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee  \n```\n\n----------------------------------------\n\nTITLE: Service Monitor Configuration\nDESCRIPTION: Configures service monitoring settings including metrics path and scraping intervals.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus in Kubernetes YAML\nDESCRIPTION: This snippet shows how to configure Prometheus monitoring in Kubernetes. It specifies the release name for Prometheus.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Fullname Override Configuration\nDESCRIPTION: Configuration to override the default release name used by Devtron.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress in Devtron Deployment\nDESCRIPTION: Allows private access to the application URL. Similar to public ingress but typically uses a different ingress class ('nginx-internal') for internal network access.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Converting Between Map and Struct in Go using Mergo\nDESCRIPTION: Demonstrates mapping a map[string]interface{} to a struct using Mergo. Keys will be capitalized to match exported struct fields.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/imdario/mergo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nif err := mergo.Map(&dst, srcMap); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Ambassador Mapping Configuration\nDESCRIPTION: Configuration for Ambassador API Gateway mappings to expose applications outside the cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nambassadorMapping:\n  ambassadorId: \"prod-emissary\"\n  cors: {}\n  enabled: true\n  hostname: devtron.example.com\n  labels: {}\n  prefix: /\n  retryPolicy: {}\n  rewrite: \"\"\n  tls:\n    context: \"devtron-tls-context\"\n    create: false\n    hosts: []\n    secretName: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MinReadySeconds in YAML\nDESCRIPTION: Specifies the minimum number of seconds for which a newly created Pod should be ready without any of its containers crashing to be considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Envoy Proxy Configuration\nDESCRIPTION: Configures Envoy proxy sidecar for metrics collection.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nenvoyproxy:\n  image: envoyproxy/envoy:v1.14.1\n  configMapName: \"\"\n  resources:\n    limits:\n      cpu: \"50m\"\n      memory: \"50Mi\"\n    requests:\n      cpu: \"50m\"\n      memory: \"50Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Migration in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to enable or disable database migration configuration in Kubernetes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: GKE Backend Configuration for Terminal Timeout\nDESCRIPTION: YAML configuration to resolve terminal connection timeout issues in GKE clusters by setting a custom backend timeout.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cloud.google.com/v1beta1\nkind: BackendConfig\nmetadata:\n  name: devtron-backendconfig\nspec:\n  timeoutSec: 1800\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe in Kubernetes Deployment (YAML)\nDESCRIPTION: Defines a readiness probe for Kubernetes to determine if a pod is ready to receive traffic. Includes settings for probe path, port, delay, timeout, and custom headers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Containers in Kubernetes YAML\nDESCRIPTION: Configures side-car containers to run alongside the main container within the same pod. These containers can share volumes and network space, communicating via localhost.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Node Affinity\nDESCRIPTION: Configures pod scheduling constraints based on node labels\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Scheduler in Kubernetes YAML\nDESCRIPTION: Allows specifying a custom scheduler for pod placement instead of using the default Kubernetes scheduler.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nschedulerName: \"\"\n```\n\n----------------------------------------\n\nTITLE: Performing Multiple Operations in One Session with XORM in Go\nDESCRIPTION: Shows how to perform multiple database operations in a single session without using transactions, reusing session memory.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\nsession := engine.NewSession()\ndefer session.Close()\n\nuser1 := Userinfo{Username: \"xiaoxiao\", Departname: \"dev\", Alias: \"lunny\", Created: time.Now()}\nif _, err := session.Insert(&user1); err != nil {\n    return err\n}\n\nuser2 := Userinfo{Username: \"yyy\"}\nif _, err := session.Where(\"id = ?\", 2).Update(&user2); err != nil {\n    return err\n}\n\nif _, err := session.Exec(\"delete from userinfo where username = ?\", user2.Username); err != nil {\n    return err\n}\n\nreturn nil\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus ServiceMonitor\nDESCRIPTION: Defines a ServiceMonitor resource for Prometheus to scrape metrics from the application. Includes settings for scrape path, interval, timeout, and metric relabeling to customize collected metrics.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Deployment Image in Kubernetes\nDESCRIPTION: Defines the container image and tag to be used for the server deployment. This configuration specifies the exact version of the application to be deployed.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Database Migration Configuration in YAML\nDESCRIPTION: Configures database migration settings with enable/disable option.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Monitor\nDESCRIPTION: Configuration for service monitoring settings including metrics collection.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus in Kubernetes YAML\nDESCRIPTION: Specifies the Prometheus release name for monitoring. Used to describe the state of Prometheus in the cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus:\n  release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Autoscaling Configuration\nDESCRIPTION: HPA configuration for automatic scaling based on CPU and memory utilization metrics.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Using NKEYS for Key Generation, Signing and Verification in Go\nDESCRIPTION: This example demonstrates the basic usage of the NKEYS library, showing how to create key pairs, sign and verify data, extract seeds and public keys, and create key pairs from existing seeds or public keys. It also demonstrates creating keys with custom random data.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/nats-io/nkeys/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Create a new User KeyPair\nuser, _ := nkeys.CreateUser()\n\n// Sign some data with a full key pair user.\ndata := []byte(\"Hello World\")\nsig, _ := user.Sign(data)\n\n// Verify the signature.\nerr = user.Verify(data, sig)\n\n// Access the seed, the only thing that needs to be stored and kept safe.\n// seed = \"SUAKYRHVIOREXV7EUZTBHUHL7NUMHPMAS7QMDU3GTIUWEI5LDNOXD43IZY\"\nseed, _ := user.Seed()\n\n// Access the public key which can be shared.\n// publicKey = \"UD466L6EBCM3YY5HEGHJANNTN4LSKTSUXTH7RILHCKEQMQHTBNLHJJXT\"\npublicKey, _ := user.PublicKey()\n\n// Create a full User who can sign and verify from a private seed.\nuser, _ = nkeys.FromSeed(seed)\n\n// Create a User who can only verify signatures via a public key.\nuser, _ = nkeys.FromPublicKey(publicKey)\n\n// Create a User KeyPair with our own random data.\nvar rawSeed [32]byte\n_, err := io.ReadFull(rand.Reader, rawSeed[:])  // Or some other random source.\nuser2, _ := nkeys.FromRawSeed(PrefixByteUser, rawSeed)\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting Devtron Kubernetes Client\nDESCRIPTION: Command to install and automatically start the Devtron Kubernetes dashboard in the browser. Requires the devtron-install.bash script to be present in the current directory.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-Kubernetes-client.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsh devtron-install.bash start\n```\n\n----------------------------------------\n\nTITLE: Configuring MinReadySeconds in Kubernetes Deployment\nDESCRIPTION: YAML configuration for MinReadySeconds parameter which specifies the minimum number of seconds a newly created Pod should be ready without any containers crashing to be considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Specifying Container Commands in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to define container commands in a Kubernetes deployment. It includes options to enable or disable the command and specify command values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Defining Commands in Kubernetes YAML\nDESCRIPTION: Configures the command to be run in the container. Includes an enable flag and an array for command values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Setting MaxUnavailable in YAML\nDESCRIPTION: Specifies the maximum number of pods that can be unavailable during the update process. Can be an absolute number or percentage of replicas.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Kubernetes Deployments\nDESCRIPTION: This snippet provides conditional logic to retrieve the application URL based on the Kubernetes service type and ingress configuration. It uses Helm templating to generate appropriate kubectl commands for different scenarios including Ingress, NodePort, LoadBalancer, and ClusterIP service types.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-6-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Monitoring Configuration\nDESCRIPTION: Specifies Prometheus monitoring settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Setting Up Image Pull Secrets in Kubernetes\nDESCRIPTION: YAML configuration for specifying Docker registry credentials. This requires creating a secret separately using dt-secrets helm chart or kubectl.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Using AND Condition in Go with builder\nDESCRIPTION: Example of connecting multiple conditions with AND operator using the And function.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/builder/README.md#2025-04-22_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\nimport . \"xorm.io/builder\"\n\nsql, args, _ := ToSQL(And(Eq{\"a\":1}, Like{\"b\", \"c\"}, Neq{\"d\", 2}))\n// a=? AND b LIKE ? AND d<>? [1, %c%, 2]\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress with Labels for Devtron Installation\nDESCRIPTION: Command to install Devtron with Ingress configuration that includes custom labels. This adds an environment label to the Ingress resource.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/ingress-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install devtron devtron/devtron-operator -n devtroncd \\\n  --set components.devtron.ingress.enabled=true \\\n  --set components.devtron.ingress.className=nginx \\\n  --set components.devtron.ingress.host=devtron.example.com \\\n  --set components.devtron.ingress.labels.env=production\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Integration\nDESCRIPTION: YAML configuration for integrating with Prometheus monitoring. Specifies the Prometheus release name for monitoring the application.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Node.js Express Application\nDESCRIPTION: Dockerfile for setting up a Node.js environment and exposing the Express.js application on port 8080. It copies the application files, installs dependencies, and specifies the entry point.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/use-cases/connect-expressjs-with-mongodb-database.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nFROM node:7\nWORKDIR /app\nCOPY package.json /app\nRUN npm install\nCOPY . /app\nCMD node server.js\nEXPOSE 8080\n```\n\n----------------------------------------\n\nTITLE: Custom Error Formatting in Go Multierror\nDESCRIPTION: Shows how to customize the string representation of multiple errors by setting a custom ErrorFormat function on the multierror.Error struct.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here, maybe using Append\n\nif result != nil {\n\tresult.ErrorFormat = func([]error) string {\n\t\treturn \"errors!\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables from Secret Keys\nDESCRIPTION: Configuration for mapping environment variables to Kubernetes Secret keys.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromSecretKeys: \n  - name: ENV_NAME\n    secretName: SECRET_NAME\n    keyName: SECRET_KEY\n```\n\n----------------------------------------\n\nTITLE: Setting MaxUnavailable in YAML\nDESCRIPTION: Specifies the maximum number of pods that can be unavailable during the update process.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts in Kubernetes YAML\nDESCRIPTION: Specifies how volumes are mounted in containers. Includes examples of mounting to specific paths and using subPaths.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe in Kubernetes Deployment\nDESCRIPTION: Defines a readiness probe for Kubernetes to determine if a pod is ready to receive traffic. If this check fails, Kubernetes stops sending traffic to the pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Inflection Rules in Go\nDESCRIPTION: Shows how to register custom inflection rules including uncountable words, irregular plurals, and pattern-based plural/singular transformations using regular expressions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/jinzhu/inflection/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ninflection.AddUncountable(\"fish\")\ninflection.AddIrregular(\"person\", \"people\")\ninflection.AddPlural(\"(bu)s$\", \"${1}ses\") # \"bus\" => \"buses\" / \"BUS\" => \"BUSES\" / \"Bus\" => \"Buses\"\ninflection.AddSingular(\"(bus)(es)?$\", \"${1}\") # \"buses\" => \"bus\" / \"Buses\" => \"Bus\" / \"BUSES\" => \"BUS\"\n```\n\n----------------------------------------\n\nTITLE: AppEnvironmentDetail Property Definition Table\nDESCRIPTION: Markdown table defining the clusterName property of the AppEnvironmentDetail_allOf model, including its type, description and optional parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/md-output/Models/AppEnvironmentDetail_allOf.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**clusterName** | **String** | cluster corresponding to the environemt where application is deployed | [optional] [default to null]\n```\n\n----------------------------------------\n\nTITLE: Configuring Winter Soldier Basic Template in YAML\nDESCRIPTION: Basic configuration template for Winter Soldier showing core settings including action type, timezone configuration, and target replica settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nwinterSoldier:\n  enabled: false\n  apiVersion: pincher.devtron.ai/v1alpha1\n  action: sleep\n  timeRangesWithZone:\n    timeZone: \"Asia/Kolkata\"\n    timeRanges: []\n  targetReplicas: []\n  fieldSelector: []\n```\n\n----------------------------------------\n\nTITLE: Raw Kubernetes YAML Configuration\nDESCRIPTION: Allows direct Kubernetes resource definition in YAML format.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Topology Spread Constraints\nDESCRIPTION: Controls pod distribution across cluster topology domains\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Monitoring Configuration\nDESCRIPTION: YAML configuration for Prometheus monitoring setup. Specifies the release name for Prometheus monitoring.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Setting Grace Period in Kubernetes YAML\nDESCRIPTION: Defines the termination grace period for pods. Specifies how long Kubernetes waits before forcefully terminating a pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress in YAML\nDESCRIPTION: Sets up internal ingress for private access to the URL. Similar to public ingress but typically used for internal services.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Generated JSON Schema with Custom Key Naming\nDESCRIPTION: Shows the difference between default field naming and snake_case naming in the generated JSON schema.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/invopop/jsonschema/README.md#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n  {\n    \"$schema\": \"http://json-schema.org/draft/2020-12/schema\",\n    \"$ref\": \"#/$defs/User\",\n    \"$defs\": {\n      \"User\": {\n        \"properties\": {\n-         \"GivenName\": {\n+         \"given_name\": {\n            \"type\": \"string\"\n          },\n          \"salted_password\": {\n            \"type\": \"string\",\n            \"contentEncoding\": \"base64\"\n          }\n        },\n        \"additionalProperties\": false,\n        \"type\": \"object\",\n-       \"required\": [\"GivenName\", \"salted_password\"]\n+       \"required\": [\"given_name\", \"salted_password\"]\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Resources\nDESCRIPTION: Configuration for container resource limits and requests.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe in YAML\nDESCRIPTION: Defines the liveness probe for Kubernetes to check if the pod needs to be restarted. Includes path, port, delay, and timeout settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Migration in Kubernetes YAML\nDESCRIPTION: This snippet shows how to enable or disable database migration configuration in Kubernetes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Monitoring in Kubernetes\nDESCRIPTION: Specifies the Prometheus release name for monitoring. This configuration is used to associate the deployment with a specific Prometheus instance for metrics collection and monitoring.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Values with Pointers in Go Structs\nDESCRIPTION: Demonstrates how to use pointers to distinguish between empty values and values to be left unchanged in JSON structures.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ns := struct {\n  S *string\n}{ S: to.StringPtr(\"foo\") }\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Service Configuration in YAML\nDESCRIPTION: This snippet defines the service type and annotations for a Kubernetes deployment. It specifies the service type as ClusterIP and allows for custom annotations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n  service:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Creating Ingress for Devtron with Any Host\nDESCRIPTION: YAML configuration to create an Ingress resource for Devtron accessible from any host. This defines paths for orchestrator, dashboard, and grafana components.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/ingress-setup.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations: \n    nginx.ingress.kubernetes.io/app-root: /dashboard\n  labels:\n    app: devtron\n    release: devtron\n  name: devtron-ingress\n  namespace: devtroncd\nspec:\n  ingressClassName: nginx\n  rules:\n  - http:\n      paths:\n      - backend:\n          service:\n            name: devtron-service\n            port:\n              number: 80\n        path: /orchestrator\n        pathType: ImplementationSpecific \n      - backend:\n          service:\n            name: devtron-service\n            port:\n              number: 80\n        path: /dashboard\n        pathType: ImplementationSpecific\n      - backend:\n          service:\n            name: devtron-service\n            port:\n              number: 80\n        path: /grafana\n        pathType: ImplementationSpecific\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers in Kubernetes\nDESCRIPTION: Configuration for initialization containers that run before app containers in a Pod. Includes security context settings and container specifications.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n    image: nginx:1.14.2\n    securityContext:\n      privileged: true\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Deployment Schema via API in Devtron\nDESCRIPTION: This API endpoint allows superadmins to create or update a custom deployment schema that defines which fields appear in the Basic (GUI) section. The request includes schema name, type, the JSON schema definition, and selectors that determine where the schema will be applied.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"schema-1\",\n  \"type\": \"JSON\",\n  \"schema\": \"{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"args\\\":{\\\"type\\\":\\\"object\\\",\\\"title\\\":\\\"Arguments\\\",\\\"properties\\\":{\\\"value\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":{\\\"type\\\":\\\"string\\\"},\\\"title\\\":\\\"Value\\\"},\\\"enabled\\\":{\\\"type\\\":\\\"boolean\\\",\\\"title\\\":\\\"Enabled\\\"}}},\\\"command\\\":{\\\"type\\\":\\\"object\\\",\\\"title\\\":\\\"Command\\\",\\\"properties\\\":{\\\"value\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":{\\\"type\\\":\\\"string\\\"},\\\"title\\\":\\\"Value\\\"},\\\"enabled\\\":{\\\"type\\\":\\\"boolean\\\",\\\"title\\\":\\\"Enabled\\\"}}},\\\"resources\\\":{\\\"type\\\":\\\"object\\\",\\\"title\\\":\\\"Resources(CPU&RAM)\\\",\\\"properties\\\":{\\\"limits\\\":{\\\"type\\\":\\\"object\\\",\\\"required\\\":[\\\"cpu\\\",\\\"memory\\\"],\\\"properties\\\":{\\\"cpu\\\":{\\\"type\\\":\\\"string\\\"},\\\"memory\\\":{\\\"type\\\":\\\"string\\\"}}},\\\"requests\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"cpu\\\":{\\\"type\\\":\\\"string\\\"},\\\"memory\\\":{\\\"type\\\":\\\"string\\\"}}}}},\\\"autoscaling\\\":{\\\"type\\\":\\\"object\\\",\\\"title\\\":\\\"Autoscaling\\\",\\\"properties\\\":{\\\"MaxReplicas\\\":{\\\"type\\\":[\\\"integer\\\",\\\"string\\\"],\\\"title\\\":\\\"MaximumReplicas\\\",\\\"pattern\\\":\\\"^[a-zA-Z0-9-+\\\\\\\\/*%_\\\\\\\\\\\\\\\\s]+$\\\"},\\\"MinReplicas\\\":{\\\"type\\\":[\\\"integer\\\",\\\"string\\\"],\\\"title\\\":\\\"MinimumReplicas\\\",\\\"pattern\\\":\\\"^[a-zA-Z0-9-+\\\\\\\\/*%_\\\\\\\\\\\\\\\\s]+$\\\"},\\\"TargetCPUUtilizationPercentage\\\":{\\\"type\\\":[\\\"integer\\\",\\\"string\\\"],\\\"title\\\":\\\"TargetCPUUtilizationPercentage\\\",\\\"pattern\\\":\\\"^[a-zA-Z0-9-+\\\\\\\\/*%_\\\\\\\\\\\\\\\\s]+$\\\"},\\\"TargetMemoryUtilizationPercentage\\\":{\\\"type\\\":[\\\"integer\\\",\\\"string\\\"],\\\"title\\\":\\\"TargetMemoryUtilizationPercentage\\\",\\\"pattern\\\":\\\"^[a-zA-Z0-9-+\\\\\\\\/*%_\\\\\\\\\\\\\\\\s]+$\\\"}}},\\\"EnvVariables\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"key\\\":{\\\"type\\\":\\\"string\\\"},\\\"value\\\":{\\\"type\\\":\\\"string\\\"}}},\\\"title\\\":\\\"EnvironmentVariables\\\"},\\\"ContainerPort\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"port\\\":{\\\"type\\\":\\\"integer\\\"}}},\\\"title\\\":\\\"ContainerPort\\\"}}}\",\n  \"selectors\": [\n    {\n      \"attributeSelector\": {\n        \"category\": \"APP\",\n        \"appNames\": [\"my-demo-app\"]\n      }\n    },\n    {\n      \"attributeSelector\": {\n        \"category\": \"ENV\",\n        \"envNames\": [\"env1\", \"env2\", \"env3\"]\n      }\n    },\n    {\n      \"attributeSelector\": {\n        \"category\": \"CLUSTER\",\n        \"clusterNames\": [\"cluster1\", \"cluster2\", \"cluster3\"]\n      }\n    },\n    {\n      \"attributeSelector\": {\n        \"category\": \"CHART_REF\",\n        \"chartVersions\": [\n          {\n            \"type\": \"Deployment\",\n            \"version\": \"1.0.0\"\n          }\n        ]\n      }\n    },\n    {\n      \"attributeSelector\": {\n        \"category\": \"APP_ENV\",\n        \"appEnvNames\": [\n          {\n            \"appName\": \"my-demo-app\",\n            \"envName\": \"devtron\"\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Pull Request with Go Bitbucket\nDESCRIPTION: Example showing how to create a pull request using the go-bitbucket library. Demonstrates authentication and setting pull request options including source/destination branches and title.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/devtron-labs/go-bitbucket/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n\n        \"github.com/ktrysmt/go-bitbucket\"\n)\n\nfunc main() {\n        c := bitbucket.NewBasicAuth(\"username\", \"password\")\n\n        opt := &bitbucket.PullRequestsOptions{\n                Owner:             \"your-team\",\n                RepoSlug:          \"awesome-project\",\n                SourceBranch:      \"develop\",\n                DestinationBranch: \"master\",\n                Title:             \"fix bug. #9999\",\n                CloseSourceBranch: true,\n        }\n\n        res, err := c.Repositories.PullRequests.Create(opt)\n        if err != nil {\n                panic(err)\n        }\n\n        fmt.Println(res)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers in Devtron Deployment Chart\nDESCRIPTION: This YAML configuration defines specialized containers that run before app containers in a Pod. Init containers can contain utilities or setup scripts not present in the main application image.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Grace Period in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to set the termination grace period for pods in Kubernetes. It specifies the time Kubernetes waits before forcefully terminating a pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Resource Validation Rules for Deployment Templates in Devtron\nDESCRIPTION: Validation rules for CPU and memory resource allocations in Devtron deployment templates. These rules ensure that limits are always greater than or equal to requests for both application containers and envoyproxy.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_39\n\nLANGUAGE: plaintext\nCODE:\n```\nresources.limits.cpu >= resources.requests.cpu\nresources.limits.memory >= resources.requests.memory\nenvoyproxy.resources.limits.cpu >= envoyproxy.resources.requests.cpu\nenvoyproxy.resources.limits.memory >= envoyproxy.resources.requests.memory\n```\n\n----------------------------------------\n\nTITLE: Setting Container Arguments in Kubernetes Pods\nDESCRIPTION: Configures arguments to be passed to the container command. The 'enabled' flag controls whether arguments are applied, and the 'value' array contains the actual arguments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Basic Diskv Usage Example in Go\nDESCRIPTION: Demonstrates how to initialize a diskv store, write data to a key, read it back, and erase it. It includes a simple transform function and sets up a 1MB cache.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/peterbourgon/diskv/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/peterbourgon/diskv\"\n)\n\nfunc main() {\n\t// Simplest transform function: put all the data files into the base dir.\n\tflatTransform := func(s string) []string { return []string{} }\n\n\t// Initialize a new diskv store, rooted at \"my-data-dir\", with a 1MB cache.\n\td := diskv.New(diskv.Options{\n\t\tBasePath:     \"my-data-dir\",\n\t\tTransform:    flatTransform,\n\t\tCacheSizeMax: 1024 * 1024,\n\t})\n\n\t// Write three bytes to the key \"alpha\".\n\tkey := \"alpha\"\n\td.Write(key, []byte{'1', '2', '3'})\n\n\t// Read the value back out of the store.\n\tvalue, _ := d.Read(key)\n\tfmt.Printf(\"%v\\n\", value)\n\n\t// Erase the key+value from the store (and the disk).\n\td.Erase(key)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for NodePort Service in Helm Chart\nDESCRIPTION: Commands to obtain the NodePort URL by extracting the port and node IP using kubectl commands. Uses jsonpath to parse the Kubernetes resource information.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/contrib-chart/reference-chart_3-11-0/templates/NOTES.txt#2025-04-22_snippet_1\n\nLANGUAGE: helm\nCODE:\n```\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe in Kubernetes YAML\nDESCRIPTION: Defines a readiness probe configuration for Kubernetes pods. It specifies how Kubernetes should check if a pod is ready to receive traffic and when to stop sending traffic if the check fails.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress\nDESCRIPTION: Defines public access configuration for the application including hosts, paths, and TLS settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  ingressClassName: nginx-internal\n  annotations: {}\n  path: \"\"\n  host: \"\"\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Creating Microk8s Cluster on Cloud VM\nDESCRIPTION: Commands to install and configure Microk8s cluster on a Cloud VM with necessary add-ons and aliases.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/Install-devtron-on-Minikube-Microk8s-K3s-Kind.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap install microk8s --classic --channel=1.22\nsudo usermod -a -G microk8s $USER\nsudo chown -f -R $USER ~/.kube\nnewgrp microk8s\nmicrok8s enable dns storage helm3\necho \"alias kubectl='microk8s kubectl '\" >> .bashrc\necho \"alias helm='microk8s helm3 '\" >> .bashrc\nsource .bashrc\n```\n\n----------------------------------------\n\nTITLE: Basic Logging with glog/klog\nDESCRIPTION: Basic examples of using the logging functions provided by glog/klog to output information and error messages at different severity levels.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/k8s.io/klog/v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nglog.Info(\"Prepare to repel boarders\")\n\nglog.Fatalf(\"Initialization failed: %s\", err)\n```\n\n----------------------------------------\n\nTITLE: Defining SonarQube Configuration Variables in Markdown\nDESCRIPTION: This snippet presents a markdown table that lists and describes the configuration variables required for setting up SonarQube in a Devtron build pipeline. It includes variable names, expected formats, and descriptions for each setting.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/plugins/sonarqube.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n | Variable | Format | Description |\n| ---- | ---- | ---- |\n| SonarqubeProjectKey | String | Project key of SonarQube account |\n| SonarqubeApiKey | String | API key of SonarQube account |\n| SonarqubeEndpoint | String | API endpoint of SonarQube account |\n| CheckoutPath | String | Checkout path of Git material |\n| UsePropertiesFileFromProject | Boolean | Enter either `true` or `false` accordingly whether the configuration file should be fetched from the project's source code |\n| CheckForSonarAnalysisReport | Boolean | Enter either `true` or `false` accordingly whether you want poll or actively check for the generation of the SonarQube analysis report |\n| AbortPipelineOnPolicyCheckFailed | Boolean | Enter either `true` or `false` accordingly whether you want to check if the policy fails or not |\n```\n\n----------------------------------------\n\nTITLE: Setting Pause Before Switch Active in Kubernetes Deployment (YAML)\nDESCRIPTION: Specifies a wait period before switching the container to active state. This can be useful for allowing the container to fully initialize before receiving traffic.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Adding Devtron Helm Repository\nDESCRIPTION: Command to add the Devtron Helm repository to your local Helm configuration, which allows you to install Devtron charts.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai\n```\n\n----------------------------------------\n\nTITLE: Container Security Context\nDESCRIPTION: Defines security context for containers including privilege settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers\nDESCRIPTION: Configuration for initialization containers that run before app containers in a pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   args:\n    - sleep 300    \n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n    image: nginx:1.14.2\n    securityContext:\n      privileged: true\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus in Kubernetes YAML\nDESCRIPTION: Specifies Prometheus monitoring configuration. Includes the release name for the Prometheus instance.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Raw Kubernetes YAML Configuration\nDESCRIPTION: Defines raw Kubernetes service configuration including metadata, selectors and ports.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Registering a View in OpenCensus Go\nDESCRIPTION: Example of how to register a view with a distribution aggregation in OpenCensus Go.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opencensus.io/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nif err := view.Register(&view.View{\n\tName:        \"example.com/video_size_distribution\",\n\tDescription: \"distribution of processed video size over time\",\n\tMeasure:     videoSize,\n\tAggregation: view.Distribution(1<<32, 2<<32, 3<<32),\n}); err != nil {\n\tlog.Fatalf(\"Failed to register view: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ambassador Mappings in Kubernetes YAML\nDESCRIPTION: Defines ambassador mapping configurations for accessing applications outside the cluster. It includes settings for CORS, hostname, TLS, and other mapping-specific options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nambassadorMapping:\n  ambassadorId: \"prod-emissary\"\n  cors: {}\n  enabled: true\n  hostname: devtron.example.com\n  labels: {}\n  prefix: /\n  retryPolicy: {}\n  rewrite: \"\"\n  tls:\n    context: \"devtron-tls-context\"\n    create: false\n    hosts: []\n    secretName: \"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Configuration for container environment variables in the Pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Setting MaxSurge for Rolling Updates\nDESCRIPTION: Configures the maximum number of extra pods during rolling updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Error Annotation Example in Go\nDESCRIPTION: Demonstrates how to add context to an error using the Annotate function. Adds additional information while preserving the original error.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif err := SomeFunc(); err != nil {\n    return errors.Annotate(err, \"more context\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic JetStream Operations in Go\nDESCRIPTION: Demonstrates essential JetStream usage patterns including connecting to NATS, creating a JetStream context, publishing messages synchronously and asynchronously, and subscribing to streams using different consumer types.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/nats-io/nats.go/legacy_jetstream.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/nats-io/nats.go\"\n\n// Connect to NATS\nnc, _ := nats.Connect(nats.DefaultURL)\n\n// Create JetStream Context\njs, _ := nc.JetStream(nats.PublishAsyncMaxPending(256))\n\n// Simple Stream Publisher\njs.Publish(\"ORDERS.scratch\", []byte(\"hello\"))\n\n// Simple Async Stream Publisher\nfor i := 0; i < 500; i++ {\n    js.PublishAsync(\"ORDERS.scratch\", []byte(\"hello\"))\n}\nselect {\ncase <-js.PublishAsyncComplete():\ncase <-time.After(5 * time.Second):\n    fmt.Println(\"Did not resolve in time\")\n}\n\n// Simple Async Ephemeral Consumer\njs.Subscribe(\"ORDERS.*\", func(m *nats.Msg) {\n    fmt.Printf(\"Received a JetStream message: %s\\n\", string(m.Data))\n})\n\n// Simple Sync Durable Consumer (optional SubOpts at the end)\nsub, err := js.SubscribeSync(\"ORDERS.*\", nats.Durable(\"MONITOR\"), nats.MaxDeliver(3))\nm, err := sub.NextMsg(timeout)\n\n// Simple Pull Consumer\nsub, err := js.PullSubscribe(\"ORDERS.*\", \"MONITOR\")\nmsgs, err := sub.Fetch(10)\n\n// Unsubscribe\nsub.Unsubscribe()\n\n// Drain\nsub.Drain()\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Seconds Parser\nDESCRIPTION: Example showing how to initialize cron with an optional seconds field parser, providing maximum flexibility in cron expression format.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/robfig/cron/v3/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ncron.New(\n    cron.WithParser(\n        cron.SecondOptional | cron.Minute | cron.Hour | cron.Dom | cron.Month | cron.Dow | cron.Descriptor))\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Disruption Budget in Kubernetes (YAML)\nDESCRIPTION: Sets up a Pod Disruption Budget to limit the number of pods that are down simultaneously from voluntary disruptions. Can specify either minAvailable or maxUnavailable.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     minAvailable: 1\n```\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     maxUnavailable: 50%\n```\n\n----------------------------------------\n\nTITLE: Configuring MinReadySeconds for StatefulSet in YAML\nDESCRIPTION: Specifies the minimum number of seconds for which a newly created Pod should be ready without any container crashing, to be considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with AWS S3 using IAM Policy\nDESCRIPTION: Helm command to install Devtron with AWS S3 bucket integration using IAM policy for authentication. This requires S3 permission policy attached to the IAM role of the cluster nodes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai\n\nhelm repo update devtron\n\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--set configs.BLOB_STORAGE_PROVIDER=S3 \\\n--set configs.DEFAULT_CACHE_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CACHE_BUCKET_REGION=us-east-1 \\\n--set configs.DEFAULT_BUILD_LOGS_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CD_LOGS_BUCKET_REGION=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Setting MaxUnavailable in Kubernetes Deployment\nDESCRIPTION: Specifies the maximum number of pods that can be unavailable during the update process. Can be an absolute number or percentage of replicas.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  MaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: HPA Custom Metrics Configuration\nDESCRIPTION: Configures Horizontal Pod Autoscaling with custom metrics and behavior.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: true\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  behavior:\n    scaleDown:\n      stabilizationWindowSeconds: 300\n      policies:\n      - type: Percent\n        value: 100\n        periodSeconds: 15\n    scaleUp:\n      stabilizationWindowSeconds: 0\n      policies:\n      - type: Percent\n        value: 100\n        periodSeconds: 15\n      - type: Pods\n        value: 4\n        periodSeconds: 15\n      selectPolicy: Max\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Record with XORM in Go\nDESCRIPTION: Shows various methods to retrieve a single record from the database using XORM, including condition-based queries and column selection.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nhas, err := engine.Get(&user)\n// SELECT * FROM user LIMIT 1\n\nhas, err := engine.Where(\"name = ?\", name).Desc(\"id\").Get(&user)\n// SELECT * FROM user WHERE name = ? ORDER BY id DESC LIMIT 1\n\nvar name string\nhas, err := engine.Table(&user).Where(\"id = ?\", id).Cols(\"name\").Get(&name)\n// SELECT name FROM user WHERE id = ?\n\nvar id int64\nhas, err := engine.Table(&user).Where(\"name = ?\", name).Cols(\"id\").Get(&id)\nhas, err := engine.SQL(\"select id from user\").Get(&id)\n// SELECT id FROM user WHERE name = ?\n\nvar valuesMap = make(map[string]string)\nhas, err := engine.Table(&user).Where(\"id = ?\", id).Get(&valuesMap)\n// SELECT * FROM user WHERE id = ?\n\nvar valuesSlice = make([]interface{}, len(cols))\nhas, err := engine.Table(&user).Where(\"id = ?\", id).Cols(cols...).Get(&valuesSlice)\n// SELECT col1, col2, col3 FROM user WHERE id = ?\n```\n\n----------------------------------------\n\nTITLE: Go Package Import Statement\nDESCRIPTION: Code to import the doublestar package in Go\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/bmatcuk/doublestar/v4\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Winter Soldier Extended Example in YAML\nDESCRIPTION: Detailed example of Winter Soldier configuration with time ranges, scaling actions, and field selectors for resource management.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nwinterSoldier:\n  apiVersion: pincher.devtron.ai/v1alpha1\n  enabled: true\n  annotations: {}\n  labels: {}\n  timeRangesWithZone:\n    timeZone: \"Asia/Kolkata\"\n    timeRanges: \n      - timeFrom: 00:00\n        timeTo: 23:59:59\n        weekdayFrom: Sat\n        weekdayTo: Sun\n      - timeFrom: 00:00\n        timeTo: 08:00\n        weekdayFrom: Mon\n        weekdayTo: Fri\n      - timeFrom: 20:00\n        timeTo: 23:59:59\n        weekdayFrom: Mon\n        weekdayTo: Fri\n  action: scale\n  targetReplicas: [1,1,1]\n  fieldSelector: \n    - AfterTime(AddTime( ParseTime({{metadata.creationTimestamp}}, '2006-01-02T15:04:05Z'), '10h'), Now())\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe for Kubernetes Container (YAML)\nDESCRIPTION: Defines a readiness probe to determine if the container is ready to serve traffic. If this check fails, Kubernetes stops sending traffic to the application. Includes settings similar to the liveness probe.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nReadinessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Security Context Configuration\nDESCRIPTION: Defines security and access control settings for pods and containers\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Setting Up Init Containers in Kubernetes\nDESCRIPTION: YAML configuration for specialized containers that run before app containers in a pod. Can reuse the main container image or specify a different one with custom commands and security contexts.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n    image: nginx:1.14.2\n    securityContext:\n      privileged: true\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Container Arguments in Kubernetes\nDESCRIPTION: Specifies arguments to be passed to the container command. This configuration allows enabling or disabling arguments and providing a list of values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Preparing Pipeline Step Variables for CI Runner in Go\nDESCRIPTION: Defines the structure and logic for preparing pipeline step variables to be sent to the CI runner, including variable type determination and value setting.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/developers-guide/PluginIntegrationVariableInfo&Flow.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nInput Variables:\n\n\tName                         string\n\tFormat                       string \n\tValue                        string                       \n\tVariableType                 VariableType  \n\tReferenceVariableStepIndex   int                                 \n\tReferenceVariableName        string                             \n\nOutput Variables:\n\n\tName                         string\n\tFormat                       string \n\tVariableType                 VariableType   \n\t\nwhere,\n\nVariableType = [\"VALUE\", \"REF_PRE_CI\", \"REF_POST_CI\", \"REF_GLOBAL, \"REF_PLUGIN\"]\n```\n\nLANGUAGE: go\nCODE:\n```\nvariable -> object from db\nvariableData -> object to be sent to ci runner\nif variable.ValueType == \"NEW {\n\tvariableData.VariableType = \"VALUE\"\n} else if variable.ValueType == \"GLOBAL\" {\n\tvariableData.VariableType = \"REF_GLOBAL\"\n} else if variable.ValueType == \"FROM_PREVIOUS_STEP {\n\tif variable.ReferenceVariableStage == \"POST_CI\" {\n\t\tvariableData.VariableType = \"REF_POST_CI\"\n\t} else if variable.ReferenceVariableStage == \"PRE_CI\" {\n\t\tvariableData.VariableType = \"REF_PRE_CI\"\n\t}\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nvariable -> object from db\nvariableData -> object to be sent to ci runner\n\n//below checks for setting Value field is only relevant for ref_plugin\n//for inline step it will always end up using user's choice(if value == \"\" then defaultValue will also be = \"\", as no defaultValue option in inline )\nif variable.Value == \"\" {\n\t//no value from user; will use default value\n\tvariableData.Value = variable.DefaultValue\n} else {\n\tvariableData.Value = variable.Value\n}\n\nNote - here we are assuming, only validated data is saved in db(that either we will have defaultValue/value in object from db)\n```\n\n----------------------------------------\n\nTITLE: Importing Go JOSE v4 Package\nDESCRIPTION: Shows how to import the Go JOSE v4 package in a Go application. This is the current stable version of the library.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-jose/go-jose/v4/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/go-jose/go-jose/v4\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Containers in Kubernetes YAML\nDESCRIPTION: Defines container specifications including image, ports, commands, and arguments. Used for running side-car containers within the same pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Environment Variables from Secret Keys\nDESCRIPTION: Configuration for setting environment variables using values from Kubernetes Secrets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromSecretKeys: \n  - name: ENV_NAME\n    secretName: SECRET_NAME\n    keyName: SECRET_KEY\n```\n\n----------------------------------------\n\nTITLE: Database Migration Configuration\nDESCRIPTION: Simple configuration to enable or disable database migration functionality.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Step Variables in SQL\nDESCRIPTION: SQL statement for defining variables used by plugin steps. Variables can be inputs, outputs, or globals, with various data types and validation rules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/developers-guide/PluginCreationStep.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO \"plugin_step_variable\" (\"id\", \"plugin_step_id\", \"name\", \"format\", \"description\", \"is_exposed\", \"allow_empty_value\", \"variable_type\", \"value_type\", \"previous_step_index\",\"default_value\", \"variable_step_index\", \"deleted\", \"created_on\", \"created_by\", \"updated_on\", \"updated_by\") VALUES\n(nextval('id_seq_plugin_step_variable'), 'id-from-plugin_step','name_of_variable','STRING/BOOL/DATE/NUMBER','description_of_variable','true/false','true/false','INPUT/OUTPUT','NEW/FROM_PREVIOUS_STEP/GLOBAL','index_of_step_of_ref_variable','default_value-nullable','index_of_step_variable_is_present_in','f','now()', 'user_id', 'now()', 'user_id');\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Span Processor with Environment Variables in Go\nDESCRIPTION: Example of environment variables used to configure the batch span processor in the OpenTelemetry Go SDK. These control scheduling, timeouts, and queue sizes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_24\n\nLANGUAGE: Go\nCODE:\n```\nOTEL_BSP_SCHEDULE_DELAY\nOTEL_BSP_EXPORT_TIMEOUT\nOTEL_BSP_MAX_QUEUE_SIZE\nOTEL_BSP_MAX_EXPORT_BATCH_SIZE\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts in Kubernetes\nDESCRIPTION: Configuration for mounting volumes to specific paths in containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts\nDESCRIPTION: Configuration for mounting volumes to specific paths in containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Tolerations\nDESCRIPTION: Defines pod tolerations for node taints to control pod scheduling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-Specific Logrus Settings in Go\nDESCRIPTION: Example of setting up environment-specific Logrus configurations. JSON formatter is used in production while TextFormatter is used in other environments. This helps tailor logging to different deployment contexts.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  // do something here to set environment depending on an environment variable\n  // or command-line flag\n  if Environment == \"production\" {\n    log.SetFormatter(&log.JSONFormatter{})\n  } else {\n    // The TextFormatter is default, you don't actually have to do this.\n    log.SetFormatter(&log.TextFormatter{})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Mergo Usage Example in Go\nDESCRIPTION: A full example demonstrating how to merge two structs. The source struct's B field is copied to the destination because it's zero-valued, but the A field is not overwritten.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/imdario/mergo/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/imdario/mergo\"\n)\n\ntype Foo struct {\n\tA string\n\tB int64\n}\n\nfunc main() {\n\tsrc := Foo{\n\t\tA: \"one\",\n\t\tB: 2,\n\t}\n\tdest := Foo{\n\t\tA: \"two\",\n\t}\n\tmergo.Merge(&dest, src)\n\tfmt.Println(dest)\n\t// Will print\n\t// {two 2}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Commands for Kubernetes Deployments in YAML\nDESCRIPTION: Defines command configuration for server applications. The 'enabled' flag toggles command execution, while 'value' array contains the actual commands to be executed.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Backends for Kubernetes Ingress in YAML\nDESCRIPTION: This YAML snippet shows how to define additional backend paths in a Kubernetes Ingress resource. It includes host configuration, path types, and additional backend service definitions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n    hosts:\n    - host: chart-example2.local\n      pathType: \"ImplementationSpecific\"\n      paths:\n        - /example2\n        - /example2/healthz\n      additionalBackends: \n        - path: /example1\n          pathType: \"ImplementationSpecific\"\n          backend:\n            service:\n              name: test-service\n              port:\n                number: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Arguments\nDESCRIPTION: Configuration for container command arguments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Database Creation for Devtron\nDESCRIPTION: SQL script for creating the required databases for Devtron operation. Creates four databases: casbin (for access control), git_sensor (for Git operations), lens, and clairv4 (for vulnerability scanning).\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/config.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate database casbin;\ncreate database git_sensor;\ncreate database lens;\ncreate database clairv4\n```\n\n----------------------------------------\n\nTITLE: Pod Security Context\nDESCRIPTION: Defines pod-level security context settings\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Cloning Podman Images\nDESCRIPTION: Bash script to clone Podman images from source to target registry, including creating and pushing manifests.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-in-airgapped-environment.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nSOURCE_REGISTRY=\"quay.io/devtron\"\nTARGET_REGISTRY=${TARGET_REGISTRY}\nSOURCE_IMAGES_FILE_NAME=\"${SOURCE_IMAGES_FILE_NAME:=devtron-images.txt.source}\"\nTARGET_IMAGES_FILE_NAME=\"${TARGET_IMAGES_FILE_NAME:=devtron-images.txt.target}\"\n\ncp $SOURCE_IMAGES_FILE_NAME $TARGET_IMAGES_FILE_NAME\nwhile read source_image; do\n  if [[ \"$source_image\" == *\"workflow-controller:\"* || \"$source_image\" == *\"argoexec:\"* || \"$source_image\" == *\"argocd:\"* ]]\n  then\n    SOURCE_REGISTRY=\"quay.io/argoproj\"\n    sed -i \"s|${SOURCE_REGISTRY}|${TARGET_REGISTRY}|g\" $TARGET_IMAGES_FILE_NAME\n  elif [[ \"$source_image\" == *\"redis:\"* ]]\n  then\n    SOURCE_REGISTRY=\"public.ecr.aws/docker/library\"\n    sed -i \"s|${SOURCE_REGISTRY}|${TARGET_REGISTRY}|g\" $TARGET_IMAGES_FILE_NAME\n  else\n    SOURCE_REGISTRY=\"quay.io/devtron\"\n    sed -i \"s|${SOURCE_REGISTRY}|${TARGET_REGISTRY}|g\" $TARGET_IMAGES_FILE_NAME\n  fi\ndone <$SOURCE_IMAGES_FILE_NAME\necho \"Target Images file finalized\"\n\nwhile read -r -u 3 source_image && read -r -u 4 target_image ; do\n  echo \"Pushing $source_image $target_image\"\n  podman manifest create $source_image\n  podman manifest add $source_image $source_image --all\n  podman manifest push $source_image $target_image --all\ndone 3<\"$SOURCE_IMAGES_FILE_NAME\" 4<\"$TARGET_IMAGES_FILE_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Pod Disruption Budget Configuration\nDESCRIPTION: Defines pod disruption budget settings for high availability.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: {}\n     minAvailable: 1\n     maxUnavailable: 1\n```\n\n----------------------------------------\n\nTITLE: Measuring 99th Percentile Unary Request Latency\nDESCRIPTION: Estimates the 99th percentile of RPC handling time per service using a 5-minute rolling window. Useful for monitoring system responsiveness and caching effects.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_12\n\nLANGUAGE: jsoniq\nCODE:\n```\nhistogram_quantile(0.99, \n  sum(rate(grpc_server_handling_seconds_bucket{job=\"foo\",grpc_type=\"unary\"}[5m])) by (grpc_service,le)\n)\n```\n\n----------------------------------------\n\nTITLE: Alternative Installation using Downloaded Helm Chart\nDESCRIPTION: Commands to download and install Devtron using a locally downloaded helm chart, useful for regions where Github access is restricted.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/setup/install.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://s3-ap-southeast-1.amazonaws.com/devtron.ai/devtron-operator-latest.tgz\nhelm install devtron devtron-operator-latest.tgz --create-namespace --namespace devtroncd --set installer.mode=hyperion\n```\n\n----------------------------------------\n\nTITLE: Verbosity-Based Conditional Logging in glog/klog\nDESCRIPTION: Examples demonstrating how to use verbosity levels (V-style logging) to conditionally log information based on runtime verbosity settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/k8s.io/klog/v2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif glog.V(2) {\n\tglog.Info(\"Starting transaction...\")\n}\n\nglog.V(2).Infoln(\"Processed\", nItems, \"elements\")\n```\n\n----------------------------------------\n\nTITLE: Setting MaxSurge Parameter\nDESCRIPTION: YAML configuration for maximum number of extra pods during deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL in Helm Chart Template\nDESCRIPTION: This Go template snippet determines how to retrieve and display the application URL based on the ingress configuration and service type. It handles scenarios for ingress, NodePort, LoadBalancer, and ClusterIP service types.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go Template\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Container Security Context\nDESCRIPTION: Security context configuration for container level privileges.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Fullname Override Configuration\nDESCRIPTION: Configuration to override the default release name used by Devtron.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Measuring Unary Request Error Rate\nDESCRIPTION: Calculates the rate of failed unary (1:1) RPCs per service over a 1-minute window. Considers all non-OK status codes as errors.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_9\n\nLANGUAGE: jsoniq\nCODE:\n```\nsum(rate(grpc_server_handled_total{job=\"foo\",grpc_type=\"unary\",grpc_code!=\"OK\"}[1m])) by (grpc_service)\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Settings\nDESCRIPTION: Defines image pull policy for container images\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw YAML in Kubernetes\nDESCRIPTION: Allows inclusion of custom Kubernetes object definitions to be applied during deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Arguments\nDESCRIPTION: Specifies arguments to be passed to container commands\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Defining Arguments in Kubernetes YAML\nDESCRIPTION: Specifies the structure for providing arguments to a container command in a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Checking for Value Existence in JSON with GJSON in Go\nDESCRIPTION: Shows how to verify if a value exists in JSON using the Exists method in GJSON, which can be used either in a multi-step approach or in a single check.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nvalue := gjson.Get(json, \"name.last\")\nif !value.Exists() {\n\tprintln(\"no last name\")\n} else {\n\tprintln(value.String())\n}\n\n// Or as one step\nif gjson.Get(json, \"name.last\").Exists() {\n\tprintln(\"has a last name\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Max Unavailable Pods in Kubernetes Deployment (YAML)\nDESCRIPTION: Specifies the maximum number of pods that can be unavailable during the update process. Can be an absolute number or percentage of replicas.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Wrapping Errors with Formatting in Go\nDESCRIPTION: Wrapf changes the Cause of the error and adds an annotation. The location of the Wrap call is also stored in the error stack. It takes two error parameters, a format string, and optional formatting arguments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nfunc Wrapf(other, newDescriptive error, format string, args ...interface{}) error\n```\n\n----------------------------------------\n\nTITLE: Setting Container Arguments\nDESCRIPTION: Defines container runtime arguments configuration\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Topology Spread Constraints\nDESCRIPTION: YAML configuration for pod topology spread constraints, which control how pods are distributed across failure domains like regions, zones, and nodes. This helps achieve high availability and efficient resource utilization.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Expression with Parameters in Go using Govaluate\nDESCRIPTION: Creates an expression with a parameter 'foo' and evaluates it by passing a parameter map. The expression checks if the parameter 'foo' is greater than 0.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/govaluate/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nexpression, err := govaluate.NewEvaluableExpression(\"foo > 0\");\n\nparameters := make(map[string]interface{}, 8)\nparameters[\"foo\"] = -1;\n\nresult, err := expression.Evaluate(parameters);\n// result is now set to \"false\", the bool value.\n```\n\n----------------------------------------\n\nTITLE: Deleting Devtron Pod in Kubernetes\nDESCRIPTION: Delete the Devtron pod to force it to use the new ArgoCD certificate. This command targets pods with the label app=devtron in the devtroncd namespace.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod -n devtroncd -l app=devtron\n```\n\n----------------------------------------\n\nTITLE: Defining Arguments in Kubernetes YAML\nDESCRIPTION: Configures arguments to be passed to the container command. Includes an enable flag and an array for values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Container Security Context\nDESCRIPTION: Defines security context for containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Ingress with Helm Set Flags for Devtron Installation\nDESCRIPTION: Command to install Devtron with basic Ingress configuration using helm set flags. This enables Ingress with nginx class and sets a specific hostname.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/ingress-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install devtron devtron/devtron-operator -n devtroncd \\\n  --set components.devtron.ingress.enabled=true \\\n  --set components.devtron.ingress.className=nginx \\\n  --set components.devtron.ingress.host=devtron.example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Arguments in Kubernetes YAML\nDESCRIPTION: Defines arguments configuration for containers in a Kubernetes deployment, allowing additional command-line arguments to be passed.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override in YAML\nDESCRIPTION: Overrides the release fullname created by default by Devtron, which is used to construct Kubernetes object names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Query Operations in GJSON Path Syntax\nDESCRIPTION: Examples of querying arrays for matching elements using comparison operators and pattern matching in GJSON paths.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/SYNTAX.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfriends.#(last==\"Murphy\").first     \"Dale\"\nfriends.#(last==\"Murphy\")#.first    [\"Dale\",\"Jane\"]\nfriends.#(age>45)#.last             [\"Craig\",\"Murphy\"]\nfriends.#(first%\"D*\").last          \"Murphy\"\nfriends.#(first!%\"D*\").last         \"Craig\"\n```\n\nLANGUAGE: go\nCODE:\n```\nchildren.#(!%\"*a*\")                 \"Alex\"\nchildren.#(%\"*a*\")#                 [\"Sara\",\"Jack\"]\n```\n\nLANGUAGE: go\nCODE:\n```\nfriends.#(nets.#(==\"fb\"))#.first  >> [\"Dale\",\"Roger\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Service Mesh\nDESCRIPTION: Istio service mesh configuration including virtual services, gateways, and traffic management rules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nistio:\n  enable: true\n  gateway:\n    annotations: {}\n    enabled: false\n    host: example.com\n    labels: {}\n    tls:\n      enabled: false\n      secretName: example-tls-secret\n  virtualService:\n    annotations: {}\n    enabled: false\n    gateways: []\n    hosts: []\n    http:\n      - corsPolicy:\n          allowCredentials: false\n          allowHeaders:\n            - x-some-header\n          allowMethods:\n            - GET\n          allowOrigin:\n            - example.com\n          maxAge: 24h\n        headers:\n          request:\n            add:\n              x-some-header: value\n        match:\n          - uri:\n              prefix: /v1\n          - uri:\n              prefix: /v2\n        retries:\n          attempts: 2\n          perTryTimeout: 3s\n        rewriteUri: /\n        route:\n          - destination:\n              host: service1\n              port: 80\n        timeout: 12s\n      - route:\n          - destination:\n              host: service2\n    labels: {}\n```\n\n----------------------------------------\n\nTITLE: Defining Container Commands\nDESCRIPTION: Configures container startup commands\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Switch Delay\nDESCRIPTION: Configuration for specifying pause duration before switching active containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with S3-Compatible Storage\nDESCRIPTION: Helm command to install Devtron with S3-compatible storage. This configuration allows using non-AWS S3-compatible storage solutions by specifying an endpoint along with access credentials.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai\n\nhelm repo update devtron\n\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--set configs.BLOB_STORAGE_PROVIDER=S3 \\\n--set configs.DEFAULT_CACHE_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CACHE_BUCKET_REGION=us-east-1 \\\n--set configs.DEFAULT_BUILD_LOGS_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CD_LOGS_BUCKET_REGION=us-east-1 \\\n--set secrets.BLOB_STORAGE_S3_ACCESS_KEY=<access-key> \\\n--set secrets.BLOB_STORAGE_S3_SECRET_KEY=<secret-key> \\\n--set configs.BLOB_STORAGE_S3_ENDPOINT=<endpoint>\n```\n\n----------------------------------------\n\nTITLE: Sorting Semantic Versions in Go\nDESCRIPTION: Shows how to sort a slice of version strings using the standard sort package and semver.Version objects.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Masterminds/semver/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n    raw := []string{\"1.2.3\", \"1.0\", \"1.3\", \"2\", \"0.4.2\",}\n    vs := make([]*semver.Version, len(raw))\n\tfor i, r := range raw {\n\t\tv, err := semver.NewVersion(r)\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Error parsing version: %s\", err)\n\t\t}\n\n\t\tvs[i] = v\n\t}\n\n\tsort.Sort(semver.Collection(vs))\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Kubernetes YAML\nDESCRIPTION: Allows inclusion of arbitrary Kubernetes object definitions. Demonstrates a Service object as an example.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Using Logger in Application Code\nDESCRIPTION: Demonstrates how to use the logger within application code through a struct field and logging method calls.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n    type appObject struct {\n        // ... other fields ...\n        logger logr.Logger\n        // ... other fields ...\n    }\n\n    func (app *appObject) Run() {\n        app.logger.Info(\"starting up\", \"timestamp\", time.Now())\n\n        // ... app code ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Different Kubernetes Service Types\nDESCRIPTION: This snippet provides conditional logic to retrieve the application URL based on ingress configuration and service types (NodePort, LoadBalancer, ClusterIP) in a Kubernetes environment. It uses Helm templating to generate appropriate kubectl commands and output the URL.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go Template\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: JSON Iterator Marshal Implementation\nDESCRIPTION: Example showing how to use JSON Iterator as a replacement for standard JSON marshaling with compatible configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport jsoniter \"github.com/json-iterator/go\"\n\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\njson.Marshal(&data)\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress\nDESCRIPTION: Defines ingress configuration for private internal access\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Setting Termination Grace Period\nDESCRIPTION: Specifies the duration in seconds Kubernetes waits before terminating pods. The default is 30 seconds, but should be increased if the application needs more time to shut down gracefully.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring MaxSurge in Kubernetes Deployment\nDESCRIPTION: Defines the maximum number of pods that can be created over the desired number of pods during an update. Can be an absolute number or percentage.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Type and Annotations in YAML\nDESCRIPTION: Defines the type of Kubernetes service and any associated annotations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Setting MaxSurge in YAML\nDESCRIPTION: Defines the maximum number of pods that can be created over the desired number of pods. Can be an absolute number or percentage of replicas count.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Checking Current Devtron Version\nDESCRIPTION: Command to retrieve and display the currently installed version of Devtron from the Kubernetes cluster in the devtroncd namespace.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-to-beta.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get installers installer-devtron -o jsonpath='{.status.sync.data}' | grep \"^LTAG=\" | cut -d\"=\" -f2-\n```\n\n----------------------------------------\n\nTITLE: Checking Devtron Installation Status\nDESCRIPTION: Command to check the status of Devtron installation by retrieving the sync status of the installer. Returns 'Downloaded' if installation is in progress or 'Applied' when completed.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd-with-gitops.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get installers installer-devtron \\\n-o jsonpath='{.status.sync.status}'\n```\n\n----------------------------------------\n\nTITLE: Defining Affinity and Anti-Affinity in Kubernetes YAML\nDESCRIPTION: Configures node affinity for pod scheduling based on node labels. Used to constrain which nodes a pod can be scheduled on.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Initializing procfs and Reading CPU Statistics in Go\nDESCRIPTION: This snippet demonstrates how to initialize the proc filesystem mount point and read CPU statistics from /proc/stat using the procfs library.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/prometheus/procfs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfs, err := procfs.NewFS(\"/proc\")\nstats, err := fs.Stat()\n```\n\n----------------------------------------\n\nTITLE: Defining Raw YAML for Kubernetes Objects\nDESCRIPTION: This YAML snippet allows specifying raw Kubernetes object configurations that will be applied during deployment. It demonstrates defining a Service object with its metadata, spec, and port configurations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Service Monitor Configuration\nDESCRIPTION: Defines Prometheus ServiceMonitor settings for monitoring targets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for NATS Go Client\nDESCRIPTION: Demonstrates various ways to configure TLS for secure connections in the NATS Go client. It covers using the tls scheme, setting up a tls.Config for self-signed certificates, and providing client certificates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// tls as a scheme will enable secure connections by default. This will also verify the server name.\nnc, err := nats.Connect(\"tls://nats.demo.io:4443\")\n\n// If you are using a self-signed certificate, you need to have a tls.Config with RootCAs setup.\n// We provide a helper method to make this case easier.\nnc, err = nats.Connect(\"tls://localhost:4443\", nats.RootCAs(\"./configs/certs/ca.pem\"))\n\n// If the server requires client certificate, there is an helper function for that too:\ncert := nats.ClientCert(\"./configs/certs/client-cert.pem\", \"./configs/certs/client-key.pem\")\nnc, err = nats.Connect(\"tls://localhost:4443\", cert)\n\n// You can also supply a complete tls.Config\n\ncertFile := \"./configs/certs/client-cert.pem\"\nkeyFile := \"./configs/certs/client-key.pem\"\ncert, err := tls.LoadX509KeyPair(certFile, keyFile)\nif err != nil {\n    t.Fatalf(\"error parsing X509 certificate/key pair: %v\", err)\n}\n\nconfig := &tls.Config{\n    ServerName: \topts.Host,\n    Certificates: \t[]tls.Certificate{cert},\n    RootCAs:    \tpool,\n    MinVersion: \ttls.VersionTLS12,\n}\n\nnc, err = nats.Connect(\"nats://localhost:4443\", nats.Secure(config))\nif err != nil {\n\tt.Fatalf(\"Got an error on Connect with Secure Options: %+v\\n\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Devtron and Kubewatch Pods\nDESCRIPTION: This command restarts both Devtron and Kubewatch pods to resolve issues related to build logs visibility and abort functionality.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod -n devtroncd -l app=devtron; kubectl delete pod -n devtroncd -l app=kubewatch\n```\n\n----------------------------------------\n\nTITLE: Implementing Topology Spread Constraints for Pod Distribution\nDESCRIPTION: Configuration for controlling how pods are spread across failure domains in a Kubernetes cluster. This helps achieve high availability and efficient resource utilization by defining topology constraints.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Ready Seconds for Kubernetes Deployment\nDESCRIPTION: Specifies the minimum duration a pod should be ready without crashing before being considered available. Provides stability control during deployments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Setting Container Commands\nDESCRIPTION: Specifies the commands to be executed in the container.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Response Stream Size\nDESCRIPTION: Computes the average number of messages sent per server_stream RPC over a 10-minute window. Helps track stream sizes and identify wide queries.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_11\n\nLANGUAGE: jsoniq\nCODE:\n```\nsum(rate(grpc_server_msg_sent_total{job=\"foo\",grpc_type=\"server_stream\"}[10m])) by (grpc_service)\n /\nsum(rate(grpc_server_started_total{job=\"foo\",grpc_type=\"server_stream\"}[10m])) by (grpc_service)\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets\nDESCRIPTION: Configuration for Docker registry credentials using image pull secrets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Setting Pause Time Before Switching Active Container in Devtron Deployment\nDESCRIPTION: Configures a wait period before switching active the container, allowing for graceful transitions during deployments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Grace Period\nDESCRIPTION: Configuration for pod termination grace period.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Devtron Deployment\nDESCRIPTION: Configuration for setting environment variables for containers running in the Pod. This example shows an empty array that can be populated with environment variables.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Policy in Devtron Deployment\nDESCRIPTION: Defines the policy for pulling container images. 'IfNotPresent' pulls the image only when it's not already present on the node.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Upgrading Devtron with Helm\nDESCRIPTION: Command to upgrade Devtron using Helm. This uses the devtron-operator chart from the devtron repository, preserves existing values, and applies configurations from the specified BOM file.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.6.x-0.7.x.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade devtron devtron/devtron-operator -n devtroncd --reuse-values -f https://raw.githubusercontent.com/devtron-labs/devtron/main/charts/devtron/devtron-bom.yaml\n```\n\n----------------------------------------\n\nTITLE: Enforcing Access Control with Casbin in Golang\nDESCRIPTION: This snippet shows how to add an enforcement hook in Golang code to check access permissions using Casbin.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/casbin/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nsub := \"alice\" // the user that wants to access a resource.\nobj := \"data1\" // the resource that is going to be accessed.\nact := \"read\" // the operation that the user performs on the resource.\n\nif e.Enforce(sub, obj, act) == true {\n    // permit alice to read data1\n} else {\n    // deny the request, show an error\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MaxUnavailable in Devtron Deployment\nDESCRIPTION: Configures the maximum number of pods that can be unavailable during the update process. The value can be an absolute number or percentage of replicas count.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  MaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Setting MaxSurge in Kubernetes YAML\nDESCRIPTION: Defines the maximum number of pods that can be created over the desired number of pods. Can be an absolute number or percentage of replicas count.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Managing JetStream Streams and Consumers in Go\nDESCRIPTION: Demonstrates JetStream management capabilities including creating and updating streams, adding and deleting consumers, and deleting streams. This shows the administrative API for JetStream resources.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/nats-io/nats.go/legacy_jetstream.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/nats-io/nats.go\"\n\n// Connect to NATS\nnc, _ := nats.Connect(nats.DefaultURL)\n\n// Create JetStream Context\njs, _ := nc.JetStream()\n\n// Create a Stream\njs.AddStream(&nats.StreamConfig{\n    Name:     \"ORDERS\",\n    Subjects: []string{\"ORDERS.*\"},\n})\n\n// Update a Stream\njs.UpdateStream(&nats.StreamConfig{\n    Name:     \"ORDERS\",\n    MaxBytes: 8,\n})\n\n// Create a Consumer\njs.AddConsumer(\"ORDERS\", &nats.ConsumerConfig{\n    Durable: \"MONITOR\",\n})\n\n// Delete Consumer\njs.DeleteConsumer(\"ORDERS\", \"MONITOR\")\n\n// Delete Stream\njs.DeleteStream(\"ORDERS\")\n```\n\n----------------------------------------\n\nTITLE: Using POST_COMMAND for Custom Database Migrations in GoLang-migrate\nDESCRIPTION: Example of how to use the POST_COMMAND variable when the DB_TYPE is not natively supported by the plugin. This command runs a custom migration using a Docker container with a specific connection string and migration version.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/plugins/golang-migrate.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPOST_COMMAND: \n     docker run -v $PWD:$PWD $MIGRATE_IMAGE   -path $PWD/$SCRIPT_LOCATION -database <myDB-connection-string>\" goto $MIGRATE_TO_VERSION;\n```\n\n----------------------------------------\n\nTITLE: KEDA Prometheus Autoscaling\nDESCRIPTION: Configuration for KEDA autoscaling based on Prometheus metrics.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: KEDA Autoscaling with Kafka\nDESCRIPTION: Configures KEDA autoscaling based on Kafka metrics.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced: {}\n  triggers: \n    - type: kafka\n      metadata:\n        bootstrapServers: b-2.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-3.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092,b-1.kafka-msk-dev.example.c2.kafka.ap-southeast-1.amazonaws.com:9092\n        topic: Orders-Service-ESP.info\n        lagThreshold: \"100\"\n        consumerGroup: oders-remove-delivered-packages\n        allowIdleConsumers: \"true\"\n  triggerAuthentication:\n    enabled: true\n    name: keda-trigger-auth-kafka-credential\n    spec:\n      secretTargetRef:\n        - parameter: sasl\n          name: keda-kafka-secrets\n          key: sasl\n        - parameter: username\n          name: keda-kafka-secrets\n          key: username\n  authenticationRef: \n    name: keda-trigger-auth-kafka-credential\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaling in Kubernetes Deployment\nDESCRIPTION: This YAML snippet sets up autoscaling configuration for a Kubernetes deployment, including min/max replicas and CPU/memory utilization targets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Deleting Git Sensor Pod in Kubernetes\nDESCRIPTION: Delete the Git sensor pod to apply PVC changes and resolve disk full issues.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl delete po -n devtroncd git-sensor-0\n```\n\n----------------------------------------\n\nTITLE: Service Monitor Configuration\nDESCRIPTION: Defines monitoring parameters for services including metrics collection.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Database Migration Configuration\nDESCRIPTION: Controls database migration settings\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Creating Fail Condition Filter Using CEL in Devtron\nDESCRIPTION: This CEL expression creates a fail condition that excludes images from deployment if their tag starts with 'trial' or ends with 'testing'. It uses string manipulation functions to check the containerImageTag.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/filter-condition.md#2025-04-22_snippet_3\n\nLANGUAGE: CEL\nCODE:\n```\ncontainerImageTag.startsWith(\"trial\") || containerImageTag.endsWith(\"testing\")\n```\n\n----------------------------------------\n\nTITLE: Prometheus Monitoring Configuration\nDESCRIPTION: Defines Prometheus monitoring setup for Kubernetes clusters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Environment Variables\nDESCRIPTION: Commands to set environment variables for Docker image cloning, including source and target registry information.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-in-airgapped-environment.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport SOURCE_REGISTRY=\"quay.io/devtron\"\n\nexport TARGET_REGISTRY=\"\"\nexport TARGET_REGISTRY_USERNAME=\"\"\nexport TARGET_REGISTRY_TOKEN=\"\"\n\nSOURCE_IMAGES_LIST=\"${SOURCE_IMAGES_LIST:=devtron-images.txt.source}\"\nTARGET_IMAGES_LIST=\"${TARGET_IMAGES_LIST:=devtron-images.txt.target}\"\n```\n\n----------------------------------------\n\nTITLE: Generating Semantic Conventions for OpenTelemetry Go\nDESCRIPTION: Shell commands for generating new versions of semantic conventions package from the OpenTelemetry Semantic Conventions repository. It sets the release version tag, specifies the repository path, pulls the semconvgen Docker image, and runs the generator.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport TAG=\"v1.21.0\" # Change to the release version you are generating.\nexport OTEL_SEMCONV_REPO=\"/absolute/path/to/opentelemetry/semantic-conventions\"\ndocker pull otel/semconvgen:latest\nmake semconv-generate # Uses the exported TAG and OTEL_SEMCONV_REPO.\n```\n\n----------------------------------------\n\nTITLE: Configuring Volumes in Kubernetes YAML\nDESCRIPTION: Defines volume configurations for a Kubernetes deployment, including an emptyDir volume and a persistentVolumeClaim.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Minimal Required StatefulSet Configuration\nDESCRIPTION: Mandatory fields required for basic StatefulSet configuration including mount path and volume claim templates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nstatefulSetConfig:\n  mountPath: /tmp\n  volumeClaimTemplates:\n  - spec:\n      accessModes: \n        - ReadWriteOnce\n      resources: \n        requests:\n            storage: 2Gi\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts\nDESCRIPTION: Configuration for mounting volumes to specific paths in containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee\n```\n\n----------------------------------------\n\nTITLE: Initializing go-gitignore from io.Reader in Go\nDESCRIPTION: Demonstrates how to initialize a GitIgnore instance from an io.Reader instead of a file path. This allows for more flexibility in sourcing the gitignore patterns.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/monochromegane/go-gitignore/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngitignore, _ := gitignore.NewGitIgnoreFromReader(base, reader)\n```\n\n----------------------------------------\n\nTITLE: Using SplitPattern with DirFS for Glob Matching in Go\nDESCRIPTION: Example showing how to use SplitPattern to initialize os.DirFS() for calling Glob(). This approach handles relative paths properly by separating the base directory from the actual glob pattern.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nbase, pattern := SplitPattern(\"../../path/to/meta*/**\")\nfsys := os.DirFS(base)\nmatches, err := Glob(fsys, pattern)\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts\nDESCRIPTION: Specifies how volumes should be mounted in containers including mount paths and subpaths.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee\n```\n\n----------------------------------------\n\nTITLE: Numeric Calculation Expression Evaluation in Go\nDESCRIPTION: Shows how to perform numeric calculations using expressions that return float values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Knetic/govaluate/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nexpression, err := govaluate.NewEvaluableExpression(\"(mem_used / total_mem) * 100\");\n\nparameters := make(map[string]interface{}, 8)\nparameters[\"total_mem\"] = 1024;\nparameters[\"mem_used\"] = 512;\n\nresult, err := expression.Evaluate(parameters);\n// result is now set to \"50.0\", the float64 value.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ambassador Mappings in Kubernetes YAML\nDESCRIPTION: Configures Ambassador mappings for external access to applications. It includes settings for enabling the mapping, specifying the hostname, path prefix, and TLS options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nambassadorMapping:\n  ambassadorId: \"prod-emissary\"\n  cors: {}\n  enabled: true\n  hostname: devtron.example.com\n  labels: {}\n  prefix: /\n  retryPolicy: {}\n  rewrite: \"\"\n  tls:\n    context: \"devtron-tls-context\"\n    create: false\n    hosts: []\n    secretName: \"\"\n```\n\n----------------------------------------\n\nTITLE: Building INSERT Queries in Go with builder\nDESCRIPTION: Examples of constructing INSERT SQL statements using the builder package, including basic inserts with values, inserting from SELECT statements, and specifying columns for insertion.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/builder/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nsql, args, err := builder.Insert(Eq{\"c\": 1, \"d\": 2}).Into(\"table1\").ToSQL()\n\n// INSERT INTO table1 SELECT * FROM table2\nsql, err := builder.Insert().Into(\"table1\").Select().From(\"table2\").ToBoundSQL()\n\n// INSERT INTO table1 (a, b) SELECT b, c FROM table2\nsql, err = builder.Insert(\"a, b\").Into(\"table1\").Select(\"b, c\").From(\"table2\").ToBoundSQL()\n```\n\n----------------------------------------\n\nTITLE: Defining ACL Policy in Casbin\nDESCRIPTION: This snippet shows how to define a simple ACL policy in Casbin. It grants read access to 'data1' for 'alice' and write access to 'data2' for 'bob'.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/casbin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\np, alice, data1, read\np, bob, data2, write\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Secrets in Kubernetes YAML\nDESCRIPTION: Specifies the secret containing Docker credentials for accessing private registries in Kubernetes deployments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Setting Pod Tolerations\nDESCRIPTION: Defines pod tolerations for node taints to control pod scheduling on specific nodes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Server Deployment Configuration in YAML\nDESCRIPTION: Specifies server deployment configuration including image and tag details.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Setting MaxUnavailable Parameter\nDESCRIPTION: YAML configuration for maximum unavailable pods during deployment updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Getting Devtron Service Port\nDESCRIPTION: Command to retrieve the NodePort number for the Devtron service.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/Install-devtron-on-Minikube-Microk8s-K3s-Kind.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc -n devtroncd devtron-service -o jsonpath='{.spec.ports[0].nodePort}'\n```\n\n----------------------------------------\n\nTITLE: Prometheus Monitoring Configuration\nDESCRIPTION: Specifies Prometheus monitoring settings\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Basic NUID Usage in Go\nDESCRIPTION: Demonstrates the basic usage patterns of NUID including using the global locked instance, creating new instances, and randomizing the prefix. The generator combines crypto/rand seeded prefix with pseudo-random sequential data.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/nats-io/nuid/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Utilize the global locked instance\nnuid := nuid.Next()\n\n// Create an instance, these are not locked.\nn := nuid.New()\nnuid = n.Next()\n\n// Generate a new crypto/rand seeded prefix.\n// Generally not needed, happens automatically.\nn.RandomizePrefix()\n```\n\n----------------------------------------\n\nTITLE: Retrieving PostgreSQL Password from Kubernetes Secret\nDESCRIPTION: Command to extract the PostgreSQL password from the Kubernetes secret for database access in the dirty db resolution process.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/FAQs/hyperion-troubleshoot.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get secret devtron-secret -o jsonpath='{.data.PG_PASSWORD}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth Configuration in Go\nDESCRIPTION: This code snippet initializes the OAuth configuration for Azure AD authentication in Go.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/autorest/adal/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nconst activeDirectoryEndpoint = \"https://login.microsoftonline.com/\"\ntenantID := \"TENANT_ID\"\noauthConfig, err := adal.NewOAuthConfig(activeDirectoryEndpoint, tenantID)\n\napplicationID := \"APPLICATION_ID\"\n\ncallback := func(token adal.Token) error {\n    // This is called after the token is acquired\n}\n\n// The resource for which the token is acquired\nresource := \"https://management.core.windows.net/\"\n```\n\n----------------------------------------\n\nTITLE: Restarting Devtron Pod for SSO Configuration\nDESCRIPTION: This command deletes the Devtron pod to reload SSO configurations, resolving login issues related to SSO credentials.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod -n devtroncd -l app=devtron\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Configuration for container environment variables in the Pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Setting Pause Duration Before Container Activation\nDESCRIPTION: Configures a wait period in seconds before switching active the container during deployment or updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Pause Before Container Switch in Kubernetes\nDESCRIPTION: YAML configuration to specify a waiting period in seconds before switching active containers. Useful for allowing services to properly initialize.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Markdown Output with Bluemonday in Go\nDESCRIPTION: Example of combining Blackfriday with Bluemonday HTML sanitizer to safely process user-supplied Markdown content. This helps protect against malicious content.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/microcosm-cc/bluemonday\"\n    \"github.com/russross/blackfriday/v2\"\n)\n\n// ...\nunsafe := blackfriday.Run(input)\nhtml := bluemonday.UGCPolicy().SanitizeBytes(unsafe)\n```\n\n----------------------------------------\n\nTITLE: Configuring Service in Kubernetes Deployment\nDESCRIPTION: This YAML snippet defines the service type and annotations for a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Winter-Soldier Base Template in YAML\nDESCRIPTION: Basic template for Winter-Soldier configuration that defines action type, time zone, and other essential parameters for managing Kubernetes workloads based on schedules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nwinterSoldier:\n  enabled: false\n  apiVersion: pincher.devtron.ai/v1alpha1\n  action: sleep\n  timeRangesWithZone:\n    timeZone: \"Asia/Kolkata\"\n    timeRanges: []\n  targetReplicas: []\n  fieldSelector: []\n```\n\n----------------------------------------\n\nTITLE: Setting Container Arguments\nDESCRIPTION: Configures command-line arguments for containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Secret Key Environment Variables\nDESCRIPTION: Configuration for environment variables sourced from Kubernetes secrets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromSecretKeys: \n  - name: ENV_NAME\n    secretName: SECRET_NAME\n    keyName: SECRET_KEY\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Ready Seconds in Kubernetes Deployment (YAML)\nDESCRIPTION: Specifies the minimum number of seconds a newly created Pod should be ready without any containers crashing to be considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Labeling and Annotating Service Accounts in devtron-cd Namespace\nDESCRIPTION: Commands to label and annotate all service accounts in the devtron-cd namespace with Helm-specific metadata. This ensures proper management by Helm during the upgrade process.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.6.x-0.7.x.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtron-cd label sa --all \"app.kubernetes.io/managed-by=Helm\" --overwrite\nkubectl -n devtron-cd annotate sa --all \"meta.helm.sh/release-name=$RELEASE_NAME\" \"meta.helm.sh/release-namespace=devtroncd\" --overwrite\n```\n\n----------------------------------------\n\nTITLE: Custom Resource Definition GVK Example\nDESCRIPTION: Example showing the format for specifying a Custom Resource Definition's Group/Version/Kind (GVK)\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/resource-watcher.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ninstall.istio.io/v1apha1/IstioOperator\n```\n\n----------------------------------------\n\nTITLE: Listing Projects with Search Parameters in GitLab API\nDESCRIPTION: Shows how to use optional parameters when calling GitLab API methods, specifically searching for projects by username.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xanzy/go-gitlab/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngit := gitlab.NewClient(\"yourtokengoeshere\")\nopt := &gitlab.ListProjectsOptions{Search: gitlab.Ptr(\"svanharmelen\")}\nprojects, _, err := git.Projects.ListProjects(opt)\n```\n\n----------------------------------------\n\nTITLE: Configuring NATS Clustered Connections in Go\nDESCRIPTION: Shows how to connect to a cluster of NATS servers with various options including reconnection strategies, server pool randomization, and authentication methods. Demonstrates setting up event callbacks for connection state changes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nvar servers = \"nats://localhost:1222, nats://localhost:1223, nats://localhost:1224\"\n\nnc, err := nats.Connect(servers)\n\n// Optionally set ReconnectWait and MaxReconnect attempts.\n// This example means 10 seconds total per backend.\nnc, err = nats.Connect(servers, nats.MaxReconnects(5), nats.ReconnectWait(2 * time.Second))\n\n// You can also add some jitter for the reconnection.\n// This call will add up to 500 milliseconds for non TLS connections and 2 seconds for TLS connections.\n// If not specified, the library defaults to 100 milliseconds and 1 second, respectively.\nnc, err = nats.Connect(servers, nats.ReconnectJitter(500*time.Millisecond, 2*time.Second))\n\n// You can also specify a custom reconnect delay handler. If set, the library will invoke it when it has tried\n// all URLs in its list. The value returned will be used as the total sleep time, so add your own jitter.\n// The library will pass the number of times it went through the whole list.\nnc, err = nats.Connect(servers, nats.CustomReconnectDelay(func(attempts int) time.Duration {\n    return someBackoffFunction(attempts)\n}))\n\n// Optionally disable randomization of the server pool\nnc, err = nats.Connect(servers, nats.DontRandomize())\n\n// Setup callbacks to be notified on disconnects, reconnects and connection closed.\nnc, err = nats.Connect(servers,\n\tnats.DisconnectErrHandler(func(nc *nats.Conn, err error) {\n\t\tfmt.Printf(\"Got disconnected! Reason: %q\\n\", err)\n\t}),\n\tnats.ReconnectHandler(func(nc *nats.Conn) {\n\t\tfmt.Printf(\"Got reconnected to %v!\\n\", nc.ConnectedUrl())\n\t}),\n\tnats.ClosedHandler(func(nc *nats.Conn) {\n\t\tfmt.Printf(\"Connection closed. Reason: %q\\n\", nc.LastError())\n\t})\n)\n\n// When connecting to a mesh of servers with auto-discovery capabilities,\n// you may need to provide a username/password or token in order to connect\n// to any server in that mesh when authentication is required.\n// Instead of providing the credentials in the initial URL, you will use\n// new option setters:\nnc, err = nats.Connect(\"nats://localhost:4222\", nats.UserInfo(\"foo\", \"bar\"))\n\n// For token based authentication:\nnc, err = nats.Connect(\"nats://localhost:4222\", nats.Token(\"S3cretT0ken\"))\n\n// You can even pass the two at the same time in case one of the server\n// in the mesh requires token instead of user name and password.\nnc, err = nats.Connect(\"nats://localhost:4222\",\n    nats.UserInfo(\"foo\", \"bar\"),\n    nats.Token(\"S3cretT0ken\"))\n\n// Note that if credentials are specified in the initial URLs, they take\n// precedence on the credentials specified through the options.\n// For instance, in the connect call below, the client library will use\n// the user \"my\" and password \"pwd\" to connect to localhost:4222, however,\n// it will use username \"foo\" and password \"bar\" when (re)connecting to\n// a different server URL that it got as part of the auto-discovery.\nnc, err = nats.Connect(\"nats://my:pwd@localhost:4222\", nats.UserInfo(\"foo\", \"bar\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes HPA Autoscaling\nDESCRIPTION: Defines Horizontal Pod Autoscaling settings for automatically scaling pods based on resource utilization.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Creating PersistentVolumeClaim YAML for Devtron Build Optimization\nDESCRIPTION: YAML configuration for creating a PersistentVolumeClaim (PVC) to optimize build time in Devtron. The PVC requests 30Gi of storage with ReadWriteOnce access mode.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: cache-pvc # here comes the name of PVC\nspec:\n  accessModes:\n    - ReadWriteOnce\n  storageClassName: # here comes storage class name\n  resources:\n    requests:\n      storage: 30Gi\n```\n\n----------------------------------------\n\nTITLE: Working with JSON Bytes in GJSON in Go\nDESCRIPTION: Demonstrates how to work directly with JSON in byte slice form using GetBytes, which is more efficient than converting bytes to string. Also shows a pattern to avoid allocations when accessing raw data.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nvar json []byte = ...\nresult := gjson.GetBytes(json, path)\n```\n\nLANGUAGE: go\nCODE:\n```\nvar json []byte = ...\nresult := gjson.GetBytes(json, path)\nvar raw []byte\nif result.Index > 0 {\n    raw = json[result.Index:result.Index+len(result.Raw)]\n} else {\n    raw = []byte(result.Raw)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Migration in Kubernetes YAML\nDESCRIPTION: Enables or disables database migration configuration for a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Raw Kubernetes YAML Configuration\nDESCRIPTION: Allows direct specification of Kubernetes objects\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Boot application.properties for MySQL Connection\nDESCRIPTION: Configuration settings in application.properties file to connect a Spring Boot application to a MySQL database. It includes database URL, credentials, Hibernate settings, and dialect configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/use-cases/connect-springboot-with-mysql-database.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nspring.datasource.url=jdbc:mysql://<service-name>/<mysql database-name>\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=true\nspring.datasource.username=<mysql-user>\nspring.datasource.password=<mysql-password>\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect\nspring.jpa.open-in-view=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Deployment in Kubernetes YAML\nDESCRIPTION: Specifies server deployment details including image tag and URL. Used for providing server configurations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Disruption Budget with minAvailable in Kubernetes\nDESCRIPTION: YAML configuration for PodDisruptionBudget that limits the number of pods that can be down simultaneously from voluntary disruptions. This example ensures at least 1 pod remains available during disruptions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     minAvailable: 1\n```\n\n----------------------------------------\n\nTITLE: Adding WithInt64Callback Option in Go OpenTelemetry Metric Instrument\nDESCRIPTION: Introduces the WithInt64Callback option for configuring int64 Observer callbacks during creation in the OpenTelemetry metric instrument package.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/metric/instrument.WithInt64Callback\n```\n\n----------------------------------------\n\nTITLE: Winter-Soldier Resource Management\nDESCRIPTION: Configuration for Winter-Soldier, a tool for managing Kubernetes resources including cleanup and workload scaling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nwinterSoldier:\n  apiVersion: pincher.devtron.ai/v1alpha1 \n  enabled: true\n  annotations: {}\n  labels: {}\n  timeRangesWithZone:\n    timeZone: \"Asia/Kolkata\"\n    timeRanges: \n      - timeFrom: 00:00\n        timeTo: 23:59:59\n        weekdayFrom: Sat\n        weekdayTo: Sun\n      - timeFrom: 00:00\n        timeTo: 08:00\n        weekdayFrom: Mon\n        weekdayTo: Fri\n      - timeFrom: 20:00\n        timeTo: 23:59:59\n        weekdayFrom: Mon\n        weekdayTo: Fri\n  action: scale\n  targetReplicas: [1,1,1]\n  fieldSelector: \n    - AfterTime(AddTime( ParseTime({{metadata.creationTimestamp}}, '2006-01-02T15:04:05Z'), '10h'), Now())\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe\nDESCRIPTION: Defines health check configuration for container liveness including path, timing, and threshold parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Raw Kubernetes YAML Configuration\nDESCRIPTION: Example of raw Kubernetes YAML configuration for creating a Service object. Demonstrates how to define Kubernetes objects directly in the configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Type Options in Go\nDESCRIPTION: Demonstrates how to implement an Option for custom type configuration values. The pattern includes both the option implementation and the exported wrapper function.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype myTypeOption struct {\n\tMyType MyType\n}\n\nfunc (o myTypeOption) apply(c config) config {\n\tc.MyType = o.MyType\n    return c\n}\n\n// WithMyType sets T to have include MyType.\nfunc WithMyType(t MyType) Option {\n\treturn myTypeOption{t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Client with Known Hosts in Go\nDESCRIPTION: Demonstrates how to create an SSH client configuration using the knownhosts package to properly set up host key callback and algorithms.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/skeema/knownhosts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\nimport (\n\t\"golang.org/x/crypto/ssh\"\n\t\"github.com/skeema/knownhosts\"\n)\n\nfunc sshConfigForHost(hostWithPort string) (*ssh.ClientConfig, error) {\n\tkh, err := knownhosts.NewDB(\"/home/myuser/.ssh/known_hosts\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tconfig := &ssh.ClientConfig{\n\t\tUser:              \"myuser\",\n\t\tAuth:              []ssh.AuthMethod{ /* ... */ },\n\t\tHostKeyCallback:   kh.HostKeyCallback(),\n\t\tHostKeyAlgorithms: kh.HostKeyAlgorithms(hostWithPort),\n\t}\n\treturn config, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Arguments in Kubernetes YAML\nDESCRIPTION: This snippet shows how to define arguments for a container in Kubernetes. It allows for enabling or disabling arguments and specifying their values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Prometheus Monitoring Configuration\nDESCRIPTION: Defines Prometheus monitoring settings\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: MinReadySeconds Configuration\nDESCRIPTION: Specification for minimum time a new pod should be ready before being considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Control Check with Casbin in Go\nDESCRIPTION: Demonstrates how to perform an authorization check using Casbin's Enforce method. This code checks if a subject (user) can perform an action on a resource according to the policy.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/casbin/v2/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nsub := \"alice\" // the user that wants to access a resource.\nobj := \"data1\" // the resource that is going to be accessed.\nact := \"read\" // the operation that the user performs on the resource.\n\nif res, _ := e.Enforce(sub, obj, act); res {\n    // permit alice to read data1\n} else {\n    // deny the request, show an error\n}\n```\n\n----------------------------------------\n\nTITLE: Service Monitor Configuration\nDESCRIPTION: Configures monitoring settings including path, scheme, intervals, and metric relabeling rules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring a Kubernetes CronJob with YAML\nDESCRIPTION: Example YAML configuration for a Kubernetes CronJob. This demonstrates the scheduling and management fields including concurrencyPolicy, failedJobsHistoryLimit, restartPolicy, schedule, startingDeadlineSeconds, successfulJobsHistoryLimit, and suspend.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/cronjob-chart_1-2-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: CronJob\ncronjobConfigs:\n    concurrencyPolicy: Allow\n    failedJobsHistoryLimit: 1\n    restartPolicy: OnFailure\n    schedule: 32 8 * * *\n    startingDeadlineSeconds: 100\n    successfulJobsHistoryLimit: 3\n    suspend: false\n```\n\n----------------------------------------\n\nTITLE: Acquiring Access Token with Authorization Code in Go\nDESCRIPTION: This code demonstrates how to acquire an access token using the authorization code flow in Go.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/autorest/adal/README.md#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nspt, err := adal.NewServicePrincipalTokenFromAuthorizationCode(\n\t*oauthConfig,\n\tapplicationID,\n\tclientSecret,\n        authorizationCode,\n        redirectURI,\n\tresource,\n\tcallbacks...)\n\nerr  = spt.Refresh()\nif (err == nil) {\n    token := spt.Token\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with AWS S3 using Access Key Authentication\nDESCRIPTION: Helm command to install Devtron with AWS S3 integration using access-key and secret-key for authentication. This method specifies S3 credentials directly in the installation command.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai\n\nhelm repo update devtron\n\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--set configs.BLOB_STORAGE_PROVIDER=S3 \\\n--set configs.DEFAULT_CACHE_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CACHE_BUCKET_REGION=us-east-1 \\\n--set configs.DEFAULT_BUILD_LOGS_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CD_LOGS_BUCKET_REGION=us-east-1 \\\n--set secrets.BLOB_STORAGE_S3_ACCESS_KEY=<access-key> \\\n--set secrets.BLOB_STORAGE_S3_SECRET_KEY=<secret-key>\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenSSL Certificate Request in INI Format\nDESCRIPTION: This configuration file specifies the parameters for generating an SSL certificate for giantswarm.io. It includes settings for key size, digest algorithm, distinguished name fields, and subject alternative names for a multi-domain certificate.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/manifests/ca_config.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[ req ]\ndefault_bits       = 2048\ndefault_md         = sha512\ndefault_keyfile    = ca.key\nprompt             = no\nencrypt_key        = yes\n\n# base request\ndistinguished_name = req_distinguished_name\n\n# extensions\nreq_extensions     = v3_req\n\n# distinguished_name\n[ req_distinguished_name ]\ncountryName            = \"DE\"                     # C=\nstateOrProvinceName    = \"Cologne\"                # ST=\nlocalityName           = \"Cologne\"                # L=\npostalCode             = \"424242\"                 # L/postalcode=\nstreetAddress          = \"Hallo  1621\"            # L/street=\norganizationName       = \"giantswarm\"             # O=\norganizationalUnitName = \"Emojy Department\"       # OU=\ncommonName             = \"giantswarm.io\"          # CN=\nemailAddress           = \"no-reply@giantswarm.io\" # CN/emailAddress=\n\n# req_extensions\n[ v3_req ]\n# The subject alternative name extension allows various literal values to be \n# included in the configuration file\n# http://www.openssl.org/docs/apps/x509v3_config.html\nsubjectAltName  = DNS:www.giantswarm.io,DNS:www2.giantswarm.io # multidomain certificate\n```\n\n----------------------------------------\n\nTITLE: Configuring Arguments in Kubernetes YAML\nDESCRIPTION: Defines command-line arguments for the container's entrypoint.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Evaluating Complex Mathematical Expression in Go using Govaluate\nDESCRIPTION: Creates a complex expression involving multiple parameters and mathematical operations. The expression calculates if the success rate is at least 90%.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/govaluate/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nexpression, err := govaluate.NewEvaluableExpression(\"(requests_made * requests_succeeded / 100) >= 90\");\n\nparameters := make(map[string]interface{}, 8)\nparameters[\"requests_made\"] = 100;\nparameters[\"requests_succeeded\"] = 80;\n\nresult, err := expression.Evaluate(parameters);\n// result is now set to \"false\", the bool value.\n```\n\n----------------------------------------\n\nTITLE: Configuring MinReadySeconds in Kubernetes YAML\nDESCRIPTION: Specifies the minimum number of seconds for which a newly created Pod should be ready without any of its containers crashing to be considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Merging with Override in Go using Mergo\nDESCRIPTION: Shows how to merge structs with the WithOverride transformer, which will overwrite destination values with source values regardless of whether they are zero-valued.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/imdario/mergo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nif err := mergo.Merge(&dst, src, mergo.WithOverride); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Image Pull Policy\nDESCRIPTION: Configuration for container image pull policy, determining when Kubernetes should pull the container image.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Granting Permissions to Azure AD Application using Azure CLI\nDESCRIPTION: These commands assign a role to the service principal and create a custom role definition using Azure CLI.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/autorest/adal/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\naz role assignment create --assigner \"SERVICE_PRINCIPAL_ID\" --role \"ROLE_NAME\"\n```\n\nLANGUAGE: Bash\nCODE:\n```\naz role definition create --role-definition role-definition.json\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Microsoft SSO Setup\nDESCRIPTION: Complete documentation covering Microsoft SSO configuration, including client ID, tenant ID, and client secret setup, along with auto-permission assignment functionality using Azure AD groups.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/authorization/sso/microsoft.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Microsoft\n\n## Sample Configuration\n\n![](https://devtron-public-asset.s3.us-east-2.amazonaws.com/images/global-configurations/sso-login-service/microsoft.jpg)\n\n---\n\n## Values You Would Require at SSO Provider\n\nDevtron provides a sample configuration out of the box. There are some values that you need to either get from your SSO provider or give to your SSO provider.\n\n### Values to Fetch\n\n* clientID\n\n* tenantID (required only if you want to use Azure AD for auto-assigning permissions)\n\n* clientSecret\n\n### Values to Provide\n\n* redirectURI (provided in SSO Login Services by Devtron)\n\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Surge Pods\nDESCRIPTION: Defines maximum number of pods that can exceed the desired count during updates\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Setting up Zap development environment in Go\nDESCRIPTION: Instructions for forking, cloning, and setting up the Zap repository for development. This includes adding the upstream remote and fetching the latest changes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $GOPATH/src/go.uber.org\ncd $GOPATH/src/go.uber.org\ngit clone git@github.com:your_github_username/zap.git\ncd zap\ngit remote add upstream https://github.com/uber-go/zap.git\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: CEL Expression Example for Resource Monitoring\nDESCRIPTION: Common Expression Language (CEL) example showing how to check if current replicas equal maximum replicas in a resource manifest\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/resource-watcher.md#2025-04-22_snippet_0\n\nLANGUAGE: cel\nCODE:\n```\nDEVTRON_FINAL_MANIFEST.status.currentReplicas == DEVTRON_FINAL_MANIFEST.spec.maxReplicas\n```\n\n----------------------------------------\n\nTITLE: Database Migration Configuration\nDESCRIPTION: Controls database migration settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Processing with Blackfriday in Go\nDESCRIPTION: Simple example of processing Markdown input with default extensions enabled. This is the most common usage pattern for Blackfriday.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\noutput := blackfriday.Run(input)\n```\n\n----------------------------------------\n\nTITLE: Defining Container Commands in Kubernetes Deployments\nDESCRIPTION: Configures the command to be executed when a container starts. The enabled flag controls whether a custom command is used, and value contains the command and its parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Defining Sidecar Containers\nDESCRIPTION: Configures additional containers to run alongside the main container in a pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ncontainers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Container Arguments\nDESCRIPTION: Configures command-line arguments for containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Policy in Kubernetes YAML\nDESCRIPTION: Defines the image pull policy for Kubernetes deployments, specifying when to pull the container image.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Setting MinReadySeconds\nDESCRIPTION: YAML configuration for minimum ready time before pod availability.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Storage in Devtron\nDESCRIPTION: Helm commands to configure MinIO as the storage backend for logs and cache in Devtron.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n\nhelm upgrade devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd \\\n--reuse-values \\\n--set installer.modules={cicd} \\\n--set minio.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Using concurrent.Executor in Go\nDESCRIPTION: Example of using concurrent.Executor to manage goroutines with explicit ownership and cancellation. This creates an unbounded executor, runs a goroutine that checks for cancellation, and then stops the executor waiting for the goroutine to finish.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/modern-go/concurrent/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nexecutor := concurrent.NewUnboundedExecutor()\nexecutor.Go(func(ctx context.Context) {\n    everyMillisecond := time.NewTicker(time.Millisecond)\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Println(\"goroutine exited\")\n            return\n        case <-everyMillisecond.C:\n            // do something\n        }\n    }\n})\ntime.Sleep(time.Second)\nexecutor.StopAndWaitForever()\nfmt.Println(\"executor stopped\")\n```\n\n----------------------------------------\n\nTITLE: Setting Container Security Context in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure security context for a container in a Kubernetes deployment. It shows how to set privilege escalation permissions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Defining Container Specifications\nDESCRIPTION: Configuration for containers including image, ports, and runtime commands.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Student Record using cURL\nDESCRIPTION: cURL command to send a POST request to the Spring Boot API endpoint for creating a new student record. The request includes student name and marks in JSON format.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/use-cases/connect-springboot-with-mysql-database.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo curl -d '{\"name\": \"Anushka\", \"marks\": 98}' -H \"Content-Type: application/json\" -X POST http://<hostname>/<path-name>/create\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository with OS Filesystem in Go\nDESCRIPTION: Shows how to initialize a Git repository using the OS filesystem implementation in go-git.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-git/go-git/v5/EXTENDING.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfs := osfs.New(\"/tmp/foo\")\nr, err := git.Init(memory.NewStorage(), fs)\n```\n\n----------------------------------------\n\nTITLE: KEDA Autoscaling with Prometheus\nDESCRIPTION: Configures KEDA autoscaling using Prometheus metrics.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: Installing kubernetes-external-secrets Using Helm\nDESCRIPTION: Commands to install kubernetes-external-secrets chart with a release name using Helm. This is a prerequisite for using AWS Secrets Manager with Devtron.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/secrets.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install my-release external-secrets/kubernetes-external-secrets\n```\n\n----------------------------------------\n\nTITLE: Setting MinReadySeconds in Kubernetes Deployment\nDESCRIPTION: Specifies the minimum number of seconds a newly created Pod should be ready without any containers crashing to be considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Complex Mathematical Expression Evaluation in Go\nDESCRIPTION: Shows evaluation of a more complex expression involving multiple parameters and mathematical operations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Knetic/govaluate/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nexpression, err := govaluate.NewEvaluableExpression(\"(requests_made * requests_succeeded / 100) >= 90\");\n\nparameters := make(map[string]interface{}, 8)\nparameters[\"requests_made\"] = 100;\nparameters[\"requests_succeeded\"] = 80;\n\nresult, err := expression.Evaluate(parameters);\n// result is now set to \"false\", the bool value.\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override in Kubernetes YAML\nDESCRIPTION: Overrides the release fullname used to construct Kubernetes object names. By default, Devtron uses {app-name}-{environment-name} as the release fullname.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Tolerations in YAML\nDESCRIPTION: Defines pod tolerations for node taints with operator, value and effect specifications.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning Devtron Installation\nDESCRIPTION: Commands to completely remove Devtron from the cluster, including uninstalling Helm charts, removing CRDs, and deleting namespaces. This will delete everything in devtroncd, devtron-cd, devtron-ci, and devtron-demo namespaces.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/setup/upgrade-to-devtron.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm uninstall devtron --namespace devtroncd\nkubectl delete -n devtroncd -f https://raw.githubusercontent.com/devtron-labs/charts/main/charts/devtron/crds/crd-devtron.yaml\nkubectl delete -n argo -f https://raw.githubusercontent.com/devtron-labs/devtron/main/manifests/yamls/workflow.yaml\nkubectl delete ns devtroncd devtron-cd devtron-ci devtron-demo\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Policy in Kubernetes YAML\nDESCRIPTION: Defines the image pull policy for Kubernetes. It specifies when the image should be pulled from the registry.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Container Pod Configuration in Kubernetes\nDESCRIPTION: Demonstrates how to configure multiple containers within a single pod, including sidecar containers. Shows options for both using custom images and reusing the main container image with the 'reuseContainerImage' flag.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n      - reuseContainerImage: true\n        securityContext:\n          runAsUser: 1000\n          runAsGroup: 3000\n          fsGroup: 2000\n        volumeMounts:\n        - mountPath: /etc/ls-oms\n          name: ls-oms-cm-vol\n        command:\n          - flyway\n          - -configFiles=/etc/ls-oms/flyway.conf\n          - migrate\n```\n\n----------------------------------------\n\nTITLE: Defining structs for ExpandedStruct example\nDESCRIPTION: This snippet shows the definition of GrandfatherType and SomeBaseType structs used to demonstrate the ExpandedStruct feature of the jsonschema package.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/invopop/jsonschema/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype GrandfatherType struct {\n\tFamilyName string `json:\"family_name\" jsonschema:\"required\"`\n}\n\ntype SomeBaseType struct {\n\tSomeBaseProperty int `json:\"some_base_property\"`\n\tsomePrivateBaseProperty            string `json:\"i_am_private\" jsonschema:\"required\"`\n\tSomeIgnoredBaseProperty            string `json:\"-\" jsonschema:\"required\"`\n\tSomeSchemaIgnoredProperty          string `jsonschema:\"-,required\"`\n\tSomeUntaggedBaseProperty           bool   `jsonschema:\"required\"`\n\tsomeUnexportedUntaggedBaseProperty bool\n\tGrandfather                        GrandfatherType `json:\"grand\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Pod Grace Period Configuration\nDESCRIPTION: Defines the termination grace period for pods\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Raw Kubernetes YAML Configuration\nDESCRIPTION: Allows direct Kubernetes object definitions in YAML format.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Arguments in YAML\nDESCRIPTION: Defines argument configuration for container commands with enable/disable option.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Ingress Format\nDESCRIPTION: Legacy deployment template format for ingress configuration with a single host and path. Uses nginx-internal ingress class by default.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  path: \"\"\n  host: \"\"\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Basic Error Accumulation with Multierror in Go\nDESCRIPTION: Demonstrates how to accumulate multiple errors using the Append function. Shows the basic pattern of collecting errors from multiple steps into a single error value.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar result error\n\nif err := step1(); err != nil {\n\tresult = multierror.Append(result, err)\n}\nif err := step2(); err != nil {\n\tresult = multierror.Append(result, err)\n}\n\nreturn result\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Volumes\nDESCRIPTION: Specifies volume configurations including empty directories and persistent volume claims\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Adding External Secrets Chart Repository URL in Devtron\nDESCRIPTION: Command to add the External Secrets chart repository to Devtron. This step is necessary if the 'external-secrets' chart is not found in the existing chart store.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/eso/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n` https://charts.external-secrets.io`\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Migration in Kubernetes YAML\nDESCRIPTION: This snippet shows how to enable or disable database migration configuration in a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Acquiring Access Token with Device Code Flow in Go\nDESCRIPTION: This code demonstrates how to acquire an access token using the device code flow authentication in Go.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/autorest/adal/README.md#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\noauthClient := &http.Client{}\n\n// Acquire the device code\ndeviceCode, err := adal.InitiateDeviceAuth(\n\toauthClient,\n\t*oauthConfig,\n\tapplicationID,\n\tresource)\nif err != nil {\n\treturn nil, fmt.Errorf(\"Failed to start device auth flow: %s\", err)\n}\n\n// Display the authentication message\nfmt.Println(*deviceCode.Message)\n\n// Wait here until the user is authenticated\ntoken, err := adal.WaitForUserCompletion(oauthClient, deviceCode)\nif err != nil {\n\treturn nil, fmt.Errorf(\"Failed to finish device auth flow: %s\", err)\n}\n\nspt, err := adal.NewServicePrincipalTokenFromManualToken(\n\t*oauthConfig,\n\tapplicationID,\n\tresource,\n\t*token,\n\tcallbacks...)\n\nif (err == nil) {\n    token := spt.Token\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MaxSurge in YAML\nDESCRIPTION: Defines the maximum number of pods that can be created over the desired number of pods. Can be an absolute number or percentage of replicas.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Different Kubernetes Service Types\nDESCRIPTION: This snippet provides conditional logic to obtain the application URL based on the Kubernetes service type (Ingress, NodePort, LoadBalancer, or ClusterIP) and configuration. It uses Go templating syntax for Kubernetes manifests and includes Bash commands for extracting necessary information.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go Template\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts in Kubernetes YAML\nDESCRIPTION: Defines how volumes are mounted within containers, specifying the mount path and corresponding volume name. This allows containers to access the defined volumes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee  \n```\n\n----------------------------------------\n\nTITLE: Retrieving Admin Password for Devtron v0.6.0+ using kubectl\nDESCRIPTION: This command retrieves the admin password for Devtron version 0.6.0 and higher. It gets the 'devtron-secret' from the 'devtroncd' namespace, extracts the base64-encoded ADMIN_PASSWORD field, and decodes it.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd-with-gitops.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get secret devtron-secret \\\n-o jsonpath='{.data.ADMIN_PASSWORD}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Filtering Images by Git Branch with CEL in Devtron\nDESCRIPTION: Complex CEL expression that filters images based on the repository URL and branch name, allowing only those from specific GitHub repos with branch names starting with 'hotfix-'.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/filter-condition.md#2025-04-22_snippet_1\n\nLANGUAGE: cel\nCODE:\n```\ngitCommitDetails.filter(gitCommitDetail, gitCommitDetail.startsWith('https://github.com/devtron-labs')).map(repo, gitCommitDetails[repo].branch).exists_one(branch, branch.startsWith('hotfix-'))\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Values in values.yaml\nDESCRIPTION: Configuration parameters for MySQL deployment including root password, database name, username, and password settings. These values are essential for setting up the MySQL instance and connecting it with applications.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/deploy-chart/examples/deploying-mysql-helm-chart.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmysqlRootPassword: \"your-root-password\"\nmysqlDatabase: \"your-database-name\"\nmysqluser: \"your-username\"\nmysqlPassword: \"your-user-password\"\n```\n\n----------------------------------------\n\nTITLE: Building SELECT Queries in Go with builder\nDESCRIPTION: Examples showing how to construct SELECT SQL statements with various options including simple queries, joins, subqueries, union queries, ordering, and limits.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/builder/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Simple Query\nsql, args, err := Select(\"c, d\").From(\"table1\").Where(Eq{\"a\": 1}).ToSQL()\n// With join\nsql, args, err = Select(\"c, d\").From(\"table1\").LeftJoin(\"table2\", Eq{\"table1.id\": 1}.And(Lt{\"table2.id\": 3})).\n\t\tRightJoin(\"table3\", \"table2.id = table3.tid\").Where(Eq{\"a\": 1}).ToSQL()\n// From sub query\nsql, args, err := Select(\"sub.id\").From(Select(\"c\").From(\"table1\").Where(Eq{\"a\": 1}), \"sub\").Where(Eq{\"b\": 1}).ToSQL()\n// From union query\nsql, args, err = Select(\"sub.id\").From(\n\tSelect(\"id\").From(\"table1\").Where(Eq{\"a\": 1}).Union(\"all\", Select(\"id\").From(\"table1\").Where(Eq{\"a\": 2})),\"sub\").\n\tWhere(Eq{\"b\": 1}).ToSQL()\n// With order by\nsql, args, err = Select(\"a\", \"b\", \"c\").From(\"table1\").Where(Eq{\"f1\": \"v1\", \"f2\": \"v2\"}).\n\t\tOrderBy(\"a ASC\").ToSQL()\n// With limit.\n// Be careful! You should set up specific dialect for builder before performing a query with LIMIT\nsql, args, err = Dialect(MYSQL).Select(\"a\", \"b\", \"c\").From(\"table1\").OrderBy(\"a ASC\").\n\t\tLimit(5, 10).ToSQL()\n```\n\n----------------------------------------\n\nTITLE: Error Wrapping with Type Check in Go\nDESCRIPTION: Demonstrates wrapping an error with a specific error type while maintaining the error stack. Useful for creating typed errors that can be checked later.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nif err := FindField(field); err != nil {\n    return errors.Wrap(err, errors.NotFoundf(field))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service in Kubernetes YAML\nDESCRIPTION: Defines the service type and annotations for the Kubernetes service resource.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n  service:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Date Comparison in Go using Govaluate\nDESCRIPTION: Creates an expression that compares two date strings. The expression checks if one date is greater than another, demonstrating Govaluate's date parsing capabilities.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/govaluate/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nexpression, err := govaluate.NewEvaluableExpression(\"'2014-01-02' > '2014-01-01 23:59:59'\");\nresult, err := expression.Evaluate(nil);\n\n// result is now set to true\n```\n\n----------------------------------------\n\nTITLE: Validating Versions Against Constraints in Go\nDESCRIPTION: Shows how to validate a version against constraints and handle validation error messages.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Masterminds/semver/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n    c, err := semver.NewConstraint(\"<= 1.2.3, >= 1.4\")\n    if err != nil {\n        // Handle constraint not being parseable.\n    }\n\n    v, _ := semver.NewVersion(\"1.3\")\n    if err != nil {\n        // Handle version not being parseable.\n    }\n\n    // Validate a version against a constraint.\n    a, msgs := c.Validate(v)\n    // a is false\n    for _, m := range msgs {\n        fmt.Println(m)\n\n        // Loops over the errors which would read\n        // \"1.3 is greater than 1.2.3\"\n        // \"1.3 is less than 1.4\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Arguments\nDESCRIPTION: Defines optional arguments passed to container commands.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Setting No Option Default Value for Flags with pflag\nDESCRIPTION: This snippet demonstrates how to set a NoOptDefVal for a flag, which changes the flag's behavior when set without an option on the command line.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nflag.Lookup(\"flagname\").NoOptDefVal = \"4321\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage\nDESCRIPTION: Helm command to configure Azure Blob Storage for storing build logs and cache using account key authentication.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/installation-configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd \\\n--reuse-values \\\n--set installer.modules={cicd} \\\n--set secrets.AZURE_ACCOUNT_KEY=xxxxxxxxxx \\\n--set configs.BLOB_STORAGE_PROVIDER=AZURE \\\n--set configs.AZURE_ACCOUNT_NAME=test-account \\\n--set configs.AZURE_BLOB_CONTAINER_CI_LOG=ci-log-container \\\n--set configs.AZURE_BLOB_CONTAINER_CI_CACHE=ci-cache-container\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Configuration for environment variables in the StatefulSet pods.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron with Panic Recovery\nDESCRIPTION: Example showing how to initialize cron with panic recovery enabled, using the new chain system for job wrappers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/robfig/cron/v3/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ncron.New(cron.WithChain(\n    cron.Recover(logger),  // or use cron.DefaultLogger\n))\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets in Kubernetes YAML\nDESCRIPTION: Specifies the Docker registry credentials secret for pulling private images. The secret 'regcred' must be created separately in the cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Specifying Commands in Kubernetes YAML\nDESCRIPTION: Defines command configuration for containers in a Kubernetes deployment, allowing custom commands to be executed when the container starts.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Defining Container Commands\nDESCRIPTION: Configuration for specifying container commands with enable/disable toggle.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure for Docker Templates Organization\nDESCRIPTION: This example shows the recommended directory structure for organizing Docker templates. Each language or framework should have its own directory (in lowercase) containing the Dockerfile and any supporting configuration files like server configs or shell scripts.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/sample-docker-templates/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n├── flask   \t\t\t# dir should be framework name (lower-case)\n│\t├── Dockerfile\t\t# Dockerfile\n│\t├── nginx.default\t# server files\n│\t├── start.sh\t\t# shell scripts\n│\t└── uwsgi.ini\n├── go\t\t\t\t# dir should be language name (lower-case)\n│\t└── Dockerfile\t\t# Dockerfile\n├── node\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with Azure Blob Storage\nDESCRIPTION: Helm command to install Devtron with Azure Blob Storage for storing build logs and cache. This configuration requires an Azure account key, account name, and container names for CI logs and cache.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai\n\nhelm repo update devtron\n\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--set secrets.AZURE_ACCOUNT_KEY=xxxxxxxxxx \\\n--set configs.BLOB_STORAGE_PROVIDER=AZURE \\\n--set configs.AZURE_ACCOUNT_NAME=test-account \\\n--set configs.AZURE_BLOB_CONTAINER_CI_LOG=ci-log-container \\\n--set configs.AZURE_BLOB_CONTAINER_CI_CACHE=ci-cache-container\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Monitoring in Kubernetes\nDESCRIPTION: Specifies Prometheus monitoring configuration for the application. The release field identifies which Prometheus instance should scrape metrics from this application.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Commands in Kubernetes\nDESCRIPTION: YAML configuration for enabling and setting container commands. Used to specify commands that should be executed in the container.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Multi-line Matcher Definition in Casbin INI Format\nDESCRIPTION: Example of using multi-line configuration in Casbin matchers by appending backslash at the end of lines. This allows for better readability in complex matcher expressions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/casbin/v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# Matchers\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj \\\n  && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Basic GJSON Value Retrieval Example\nDESCRIPTION: Simple Go program demonstrating how to retrieve a JSON value using GJSON's dot notation syntax\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/tidwall/gjson\"\n\nconst json = `{\"name\":{\"first\":\"Janet\",\"last\":\"Prichard\"},\"age\":47}`\n\nfunc main() {\n\tvalue := gjson.Get(json, \"name.last\")\n\tprintln(value.String())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Autoscaling with Prometheus in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to set up KEDA autoscaling using Prometheus metrics in a Kubernetes deployment. It includes configurations for scaling limits, polling interval, and trigger settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: Error Comparison using errors.Is with Multierror\nDESCRIPTION: Demonstrates how to check for specific error values within a multierror using the standard library errors.Is function.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\nif errors.Is(err, os.ErrNotExist) {\n\t// err contains os.ErrNotExist\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Reading Data from Objx Map\nDESCRIPTION: A comprehensive example showing how to create an objx.Map from JSON, extract string and integer values, and use a default value when a key doesn't exist.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/stretchr/objx/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Use MustFromJSON to make an objx.Map from some JSON\nm := objx.MustFromJSON(`{\"name\": \"Mat\", \"age\": 30}`)\n\n// Get the details\nname := m.Get(\"name\").Str()\nage := m.Get(\"age\").Int()\n\n// Get their nickname (or use their name if they don't have one)\nnickname := m.Get(\"nickname\").Str(name)\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Backends in Kubernetes Ingress YAML\nDESCRIPTION: Defines additional backend paths in the Kubernetes ingress configuration, allowing for multiple services to be exposed through a single ingress.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n    hosts:\n    - host: chart-example2.local\n      pathType: \"ImplementationSpecific\"\n      paths:\n        - /example2\n        - /example2/healthz\n      additionalBackends: \n        - path: /example1\n          pathType: \"ImplementationSpecific\"\n          backend:\n            service:\n              name: test-service\n              port:\n                number: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress\nDESCRIPTION: Defines ingress configuration for private internal access.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Hyperion\nDESCRIPTION: Commands to completely remove Hyperion/Devtron installation including CRDs and namespace cleanup.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/setup/install.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm uninstall devtron --namespace devtroncd\nkubectl delete -n devtroncd -f https://raw.githubusercontent.com/devtron-labs/charts/main/charts/devtron/crds/crd-devtron.yaml\nkubectl delete ns devtroncd\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for External CI Integration in Devtron\nDESCRIPTION: A simple JSON payload example for the webhook API that allows external CI services to send container image information to Devtron. This payload specifies the Docker image that should be deployed.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/workflow/ci-pipeline.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n    {\n    \"dockerImage\": \"445808685819.dkr.ecr.us-east-2.amazonaws.com/orch:23907713-2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Deployment in Kubernetes YAML\nDESCRIPTION: Defines server deployment configuration for a Kubernetes deployment, specifying image tag and URL.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Getting Admin Password for Devtron v0.6.0 and Higher\nDESCRIPTION: Command to retrieve the admin password from Kubernetes secrets for Devtron version 0.6.0 and higher. The username is 'admin'.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get secret devtron-secret \\\n-o jsonpath='{.data.ADMIN_PASSWORD}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Commands\nDESCRIPTION: Configuration for container startup commands.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Prometheus Monitoring Configuration\nDESCRIPTION: Sets up Prometheus monitoring release name.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Defining Container Commands\nDESCRIPTION: Specifies container startup commands and their configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Retrieving Admin Password for Devtron in Kubernetes\nDESCRIPTION: This command retrieves the password for the default admin user from a Kubernetes secret in the devtroncd namespace. It uses kubectl to get the secret and decodes the base64-encoded password.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/charts/devtron/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get secret devtron-secret -o jsonpath='{.data.ADMIN_PASSWORD}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Using OnSet Hooks with env Package\nDESCRIPTION: Example showing how to use the OnSet hook option to execute custom logic when environment variables are set, including tracking default values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/caarlos0/env/v6/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/caarlos0/env/v6\"\n)\n\ntype Config struct {\n\tUsername string `env:\"USERNAME\" envDefault:\"admin\"`\n\tPassword string `env:\"PASSWORD\"`\n}\n\nfunc main() {\n\tcfg := &Config{}\n\topts := &env.Options{\n\t\tOnSet: func(tag string, value interface{}, isDefault bool) {\n\t\t\tfmt.Printf(\"Set %s to %v (default? %v)\\n\", tag, value, isDefault)\n\t\t},\n\t}\n\n\t// Load env vars.\n\tif err := env.Parse(cfg, opts); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Print the loaded data.\n\tfmt.Printf(\"%+v\\n\", cfg.envData)\n}\n```\n\n----------------------------------------\n\nTITLE: Pod Security Context Configuration\nDESCRIPTION: Configures pod-level security context settings including user, group, and filesystem permissions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaling\nDESCRIPTION: YAML configuration for HorizontalPodAutoscaler settings including replica counts and resource utilization targets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL with Helm Template Logic\nDESCRIPTION: A Helm template that provides different commands to retrieve the application URL based on service type. Handles Ingress, NodePort, LoadBalancer, and ClusterIP configurations with appropriate kubectl commands and environment variable exports.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Advanced Redis Commands in Go\nDESCRIPTION: Examples of various Redis commands implementation in go-redis, including SET with options, SORT, ZRANGEBYSCORE, ZINTERSTORE, EVAL, and custom commands.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/redis/go-redis/v9/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// SET key value EX 10 NX\nset, err := rdb.SetNX(ctx, \"key\", \"value\", 10*time.Second).Result()\n\n// SET key value keepttl NX\nset, err := rdb.SetNX(ctx, \"key\", \"value\", redis.KeepTTL).Result()\n\n// SORT list LIMIT 0 2 ASC\nvals, err := rdb.Sort(ctx, \"list\", &redis.Sort{Offset: 0, Count: 2, Order: \"ASC\"}).Result()\n\n// ZRANGEBYSCORE zset -inf +inf WITHSCORES LIMIT 0 2\nvals, err := rdb.ZRangeByScoreWithScores(ctx, \"zset\", &redis.ZRangeBy{\n    Min: \"-inf\",\n    Max: \"+inf\",\n    Offset: 0,\n    Count: 2,\n}).Result()\n\n// ZINTERSTORE out 2 zset1 zset2 WEIGHTS 2 3 AGGREGATE SUM\nvals, err := rdb.ZInterStore(ctx, \"out\", &redis.ZStore{\n    Keys: []string{\"zset1\", \"zset2\"},\n    Weights: []int64{2, 3}\n}).Result()\n\n// EVAL \"return {KEYS[1],ARGV[1]}\" 1 \"key\" \"hello\"\nvals, err := rdb.Eval(ctx, \"return {KEYS[1],ARGV[1]}\", []string{\"key\"}, \"hello\").Result()\n\n// custom command\nres, err := rdb.Do(ctx, \"set\", \"key\", \"value\").Result()\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Image Settings\nDESCRIPTION: Defines image pull policy for container images in Kubernetes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Volumes in YAML\nDESCRIPTION: Defines volume configurations including empty directory and persistent volume claim specifications.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Installing Helm Dashboard by Devtron\nDESCRIPTION: Command to install the Helm Dashboard by Devtron using Helm. It creates a namespace called 'devtroncd' and installs the Devtron operator within it.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd\n```\n\n----------------------------------------\n\nTITLE: Alternative Fixed Branch Filtering with CEL in Devtron\nDESCRIPTION: Simplified CEL expression that checks for a specific branch name ('hotfix-123') within repositories that match a specific GitHub URL pattern.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/filter-condition.md#2025-04-22_snippet_2\n\nLANGUAGE: cel\nCODE:\n```\n'hotfix-123' in gitCommitDetails.filter(gitCommitDetail, gitCommitDetail.startsWith('https://github.com/devtron-labs')).map(repo, gitCommitDetails[repo].branch)\n```\n\n----------------------------------------\n\nTITLE: Creating a Helm Chart with Helm CLI\nDESCRIPTION: Command to create a new Helm chart using the Helm CLI. This generates the basic structure of a Helm chart including the Chart.yaml metadata file.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/deployment-charts.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm create my-custom-chart\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling YAML in Go\nDESCRIPTION: Demonstrates how to use the yaml package to marshal a Person struct to YAML and then unmarshal it back into a struct. This example showcases the JSON-like syntax and the use of struct tags for field naming.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/ghodss/yaml/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/ghodss/yaml\"\n)\n\ntype Person struct {\n\tName string `json:\"name\"` // Affects YAML field names too.\n\tAge  int    `json:\"age\"`\n}\n\nfunc main() {\n\t// Marshal a Person struct to YAML.\n\tp := Person{\"John\", 30}\n\ty, err := yaml.Marshal(p)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(y))\n\t/* Output:\n\tage: 30\n\tname: John\n\t*/\n\n\t// Unmarshal the YAML back into a Person struct.\n\tvar p2 Person\n\terr = yaml.Unmarshal(y, &p2)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(p2)\n\t/* Output:\n\t{John 30}\n\t*/\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Ready Seconds\nDESCRIPTION: Sets minimum time a pod must be ready before being considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in YAML\nDESCRIPTION: Defines ports on which application services will be exposed to other services, including envoy port, idle timeout, and streaming support.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Contents Structure\nDESCRIPTION: Hierarchical markdown structure defining the navigation and organization of Devtron's documentation, including main sections for installation, configuration, and upgrade procedures.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/SUMMARY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Table of contents\n\n* [Introduction](README.md)\n* [Getting Started](setup/getting-started/getting-started.md)\n* [Install Devtron](setup/install/README.md)\n  * [Install Devtron with CI/CD](setup/install/install-devtron-with-cicd.md)\n  * [Install Devtron with CI/CD and GitOps (Argo CD)](setup/install/install-devtron-with-cicd-with-gitops.md)\n  * [Install Devtron without Integrations](setup/install/install-devtron.md)\n  * [Install Devtron on Minikube, Microk8s, K3s, Kind, Cloud VMs](setup/install/Install-devtron-on-Minikube-Microk8s-K3s-Kind.md)\n  * [Install Devtron on Airgapped Environment](setup/install/install-devtron-in-airgapped-environment.md)\n  * [Demo on Popular Cloud Providers](setup/install/demo-tutorials.md)\n  * [Backup for Disaster Recovery](setup/install/devtron-backup.md)\n  * [Uninstall Devtron](setup/install/uninstall-devtron.md)\n  * [FAQs](setup/install/faq-on-installation.md)\n* [Devtron Kubernetes Client](setup/install/install-devtron-Kubernetes-client.md)\n* [Configurations](setup/configurations/configurations-overview.md)\n  * [Installation Configurations](setup/install/installation-configuration.md)\n  * [Override Configurations](setup/install/override-default-devtron-installation-configs.md)\n  * [Ingress Setup](setup/install/ingress-setup.md)\n* [Global Configurations](user-guide/global-configurations/README.md)\n  * [Host URL](user-guide/global-configurations/host-url.md)\n  * [GitOps](user-guide/global-configurations/gitops.md)\n  * [Projects](user-guide/global-configurations/projects.md)\n  * [Clusters & Environments](user-guide/global-configurations/cluster-and-environments.md)\n  * [Git Accounts](user-guide/global-configurations/git-accounts.md)\n  * [Container/OCI Registry](user-guide/global-configurations/container-registries.md)\n  * [Chart Repositories](user-guide/global-configurations/chart-repo.md)\n  * [Deployment Charts](user-guide/global-configurations/deployment-charts.md)\n  * [Authorization](user-guide/global-configurations/authorization/README.md)\n    * [SSO Login Services](user-guide/global-configurations/sso-login.md)\n      * [Google](user-guide/global-configurations/authorization/sso/google.md)\n      * [GitHub](user-guide/global-configurations/authorization/sso/github.md)\n      * [GitLab](user-guide/global-configurations/authorization/sso/gitlab.md)\n      * [Microsoft](user-guide/global-configurations/authorization/sso/microsoft.md)\n      * [LDAP](user-guide/global-configurations/authorization/sso/ldap.md)\n      * [OIDC](user-guide/global-configurations/authorization/sso/oidc.md)\n        * [Keycloak](user-guide/global-configurations/authorization/sso/keycloak.md)\n        * [Okta](user-guide/global-configurations/authorization/sso/okta.md)\n      * [OpenShift](user-guide/global-configurations/authorization/sso/openshift.md)\n    * [User Permissions](user-guide/global-configurations/authorization/user-access.md)\n    * [Permission Groups](user-guide/global-configurations/authorization/permission-groups.md)\n    * [API Tokens](user-guide/global-configurations/authorization/api-tokens.md)\n  * [Notifications](user-guide/global-configurations/manage-notification.md)\n  * [Deployment Window](user-guide/global-configurations/deployment-window.md)\n  * [External Links](user-guide/global-configurations/external-links.md)\n  * [Catalog Framework](user-guide/global-configurations/catalog-framework.md)\n  * [Scoped Variables](user-guide/global-configurations/scoped-variables.md)\n  * [Pull Image Digest](user-guide/global-configurations/pull-image-digest.md)\n  * [Tags Policy](user-guide/global-configurations/tags-policy.md)\n  * [Filter Condition](user-guide/global-configurations/filter-condition.md)\n  * [Lock Deployment Configuration](user-guide/global-configurations/lock-deployment-config.md)\n  * [Image Promotion Policy](user-guide/global-configurations/image-promotion-policy.md)  \n  * [Build Infra](user-guide/global-configurations/build-infra.md)\n* [Devtron Upgrade](setup/upgrade/README.md)\n  * [Update Devtron from Devtron UI](setup/upgrade/upgrade-devtron-ui.md)\n  * [0.6.x-0.7.x](setup/upgrade/devtron-upgrade-0.6.x-0.7.x.md)\n  * [0.5.x-0.6.x](setup/upgrade/devtron-upgrade-0.5.x-0.6.x.md)\n  * [0.4.x-0.5.x](setup/upgrade/devtron-upgrade-0.4.x-0.5.x.md)\n  * [0.4.x-0.4.x](setup/upgrade/devtron-upgrade-0.4.x-0.4.x.md)\n  * [0.3.x-0.4.x](setup/upgrade/devtron-upgrade-0.3.x-0.4.x.md)\n  * [0.3.x-0.3.x](setup/upgrade/devtron-upgrade-0.3.x-0.3.x.md)\n  * [0.2.x-0.3.x](setup/upgrade/devtron-upgrade-0.2.x-0.3.x.md)\n```\n\n----------------------------------------\n\nTITLE: GJSON Path Syntax Example JSON\nDESCRIPTION: Sample JSON document showing various data structures that can be queried using GJSON path syntax\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": {\"first\": \"Tom\", \"last\": \"Anderson\"},\n  \"age\":37,\n  \"children\": [\"Sara\",\"Alex\",\"Jack\"],\n  \"fav.movie\": \"Deer Hunter\",\n  \"friends\": [\n    {\"first\": \"Dale\", \"last\": \"Murphy\", \"age\": 44, \"nets\": [\"ig\", \"fb\", \"tw\"]},\n    {\"first\": \"Roger\", \"last\": \"Craig\", \"age\": 68, \"nets\": [\"fb\", \"tw\"]},\n    {\"first\": \"Jane\", \"last\": \"Murphy\", \"age\": 47, \"nets\": [\"ig\", \"tw\"]}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Schema from String\nDESCRIPTION: Shows how to load a JSON schema directly from a string\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nloader := gojsonschema.NewStringLoader(`{\"type\": \"string\"}`)\n```\n\n----------------------------------------\n\nTITLE: Configuring Arguments in Kubernetes YAML\nDESCRIPTION: Defines arguments to be passed to the container's command. This allows for customization of the container's behavior at runtime.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Using Translations in Go Code for Kubernetes\nDESCRIPTION: Example Go code demonstrating how to use the i18n package in Kubernetes to translate strings, handle plurals, and create translated error messages.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/k8s.io/kubectl/pkg/util/i18n/translations/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport pkg/i18n\n...\n// Get a translated string\ntranslated := i18n.T(\"Your message in english here\")\n\n// Get a translated plural string\ntranslated := i18n.T(\"You had % items\", items)\n\n// Translated error\nreturn i18n.Error(\"Something bad happened\")\n\n// Translated plural error\nreturn i18n.Error(\"%d bad things happened\")\n```\n\n----------------------------------------\n\nTITLE: Server Deployment Configuration\nDESCRIPTION: Configuration for server deployment settings including image tag and URL specifications.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in Kubernetes Pod\nDESCRIPTION: Configuration for setting environment variables for containers running in the Pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Custom Signer Implementation\nDESCRIPTION: Example of implementing a custom signer for GitHub App authentication using a key vault\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/bradleyfalzon/ghinstallation/v2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nsigner := &myCustomSigner{\n  key: \"https://url/to/key/vault\",\n}\natr := NewAppsTransportWithOptions(http.DefaultTransport, 1, WithSigner(signer))\ntr := NewFromAppsTransport(atr, 99)\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe in YAML\nDESCRIPTION: Defines the liveness probe configuration for Kubernetes to restart the pod if the check fails. Includes settings for path, port, delay, period, thresholds, headers, scheme, and TCP check.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Defining Container Commands\nDESCRIPTION: Specifies the commands to be executed in containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Example of Locking a Key in Deployment Configuration\nDESCRIPTION: An example of using JSONpath expressions to lock specific keys in the deployment configuration, such as 'autoscaling.MaxReplicas'.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/lock-deployment-config.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling.MaxReplicas\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with Helm for New Installations\nDESCRIPTION: Command for installing Devtron using Helm chart for fresh installations, specifying the latest version from the Devtron charts repository.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade-devtron.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install devtron devtron/devtron-operator --create-namespace --namespace devtroncd\n```\n\n----------------------------------------\n\nTITLE: Configuring Service in Kubernetes Deployment (YAML)\nDESCRIPTION: Defines the type of Kubernetes Service and any associated annotations. In this case, it's set to ClusterIP type with no specific annotations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress in Kubernetes YAML\nDESCRIPTION: Sets up internal Ingress for private access to applications in Kubernetes. It includes options similar to the public Ingress configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Querying Database with XORM in Go\nDESCRIPTION: Demonstrates various ways to query the database using XORM, including raw SQL queries and method chaining.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nresults, err := engine.Query(\"select * from user\")\nresults, err := engine.Where(\"a = 1\").Query()\n\nresults, err := engine.QueryString(\"select * from user\")\nresults, err := engine.Where(\"a = 1\").QueryString()\n\nresults, err := engine.QueryInterface(\"select * from user\")\nresults, err := engine.Where(\"a = 1\").QueryInterface()\n```\n\n----------------------------------------\n\nTITLE: Complete Deque Usage Example in Go\nDESCRIPTION: Comprehensive example demonstrating deque operations including pushing/popping elements from both ends, checking length, and iterating through elements\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/gammazero/deque/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/gammazero/deque\"\n)\n\nfunc main() {\n    var q deque.Deque[string]\n    q.PushBack(\"foo\")\n    q.PushBack(\"bar\")\n    q.PushBack(\"baz\")\n\n    fmt.Println(q.Len())   // Prints: 3\n    fmt.Println(q.Front()) // Prints: foo\n    fmt.Println(q.Back())  // Prints: baz\n\n    q.PopFront() // remove \"foo\"\n    q.PopBack()  // remove \"baz\"\n\n    q.PushFront(\"hello\")\n    q.PushBack(\"world\")\n\n    // Consume deque and print elements.\n    for q.Len() != 0 {\n        fmt.Println(q.PopFront())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Policy in Kubernetes YAML\nDESCRIPTION: Defines the policy for pulling container images. Set to 'IfNotPresent' to only pull the image if it doesn't exist locally.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Function Signature for govaluate ExpressionFunction\nDESCRIPTION: Defines the required signature for functions that can be used in govaluate expressions. These functions take variadic arguments and return an interface{} and an error.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/govaluate/MANUAL.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc(args ...interface{}) (interface{}, error)\n```\n\n----------------------------------------\n\nTITLE: POST Request API Endpoint for Creating Plugins in Devtron\nDESCRIPTION: The API endpoint used to create a new plugin in Devtron. Requires a valid token for authentication.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/plugins/create-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST {{DEVTRON_BASEURL}}/orchestrator/plugin/global\n```\n\n----------------------------------------\n\nTITLE: Legacy Ingress Configuration in Kubernetes YAML\nDESCRIPTION: This YAML snippet shows a legacy format for Ingress configuration in Kubernetes. It includes options for enabling Ingress, setting the Ingress class, annotations, path, host, and TLS settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  path: \"\"\n  host: \"\"\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Tolerations in YAML\nDESCRIPTION: This snippet demonstrates how to set up tolerations in a Kubernetes deployment. Tolerations allow pods to be scheduled on nodes with matching taints.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ambassador Mappings in Kubernetes YAML\nDESCRIPTION: Defines Ambassador mappings for accessing applications from outside the cluster. It includes settings for enabling the mapping, specifying the hostname, and configuring TLS.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nambassadorMapping:\n  ambassadorId: \"prod-emissary\"\n  cors: {}\n  enabled: true\n  hostname: devtron.example.com\n  labels: {}\n  prefix: /\n  retryPolicy: {}\n  rewrite: \"\"\n  tls:\n    context: \"devtron-tls-context\"\n    create: false\n    hosts: []\n    secretName: \"\"\n```\n\n----------------------------------------\n\nTITLE: Opening File with O_APPEND Flag for Thread-Safe Writing (Go)\nDESCRIPTION: Demonstrates how to open a file with the O_APPEND flag, which allows for thread-safe writing when each write operation is smaller than 4KB. This approach enables multi-thread and multi-process writing without additional locking.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nos.File handler opened with `O_APPEND` flag\n```\n\n----------------------------------------\n\nTITLE: Setting Grace Period in Kubernetes YAML\nDESCRIPTION: Specifies the termination grace period for pods in a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Setting MinReadySeconds in YAML\nDESCRIPTION: Specifies the minimum number of seconds for which a newly created Pod should be ready without any of its containers crashing to be considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Deleting Incomplete Jobs in Devtron\nDESCRIPTION: This command deletes specific failed jobs in the devtroncd namespace, allowing for job recreation and completion of the installation process.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete jobs <job1-name> <job2-name> -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with Helm and Custom Parameter Values\nDESCRIPTION: Example Helm command to install Devtron with overridden default values using the --set flag. This example shows how to customize PostgreSQL password and storage provider settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/installation-configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install devtron devtron/devtron-operator --create-namespace --namespace devtroncd \\\n--set secrets.POSTGRESQL_PASSWORD=change-me \\\n--set configs.BLOB_STORAGE_PROVIDER=S3\n```\n\n----------------------------------------\n\nTITLE: Validating CPU and Memory Resource Constraints in Kubernetes YAML\nDESCRIPTION: This snippet shows the validation rules for CPU and memory resource constraints in a Kubernetes deployment. It ensures that the limits are always greater than or equal to the requests for both the main container and the Envoy proxy sidecar.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nresources.limits.cpu >= resources.requests.cpu\nresources.limits.memory >= resources.requests.memory\nenvoyproxy.resources.limits.cpu >= envoyproxy.resources.requests.cpu\nenvoyproxy.resources.limits.memory >= envoyproxy.resources.requests.memory\n```\n\n----------------------------------------\n\nTITLE: Monitoring Devtron Installation Progress - Bash\nDESCRIPTION: Commands to track installation progress by following the logs of the inception pod in the devtroncd namespace.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/faq-on-installation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npod=$(kubectl -n devtroncd get po -l app=inception -o jsonpath='{.items[0].metadata.name}')&& kubectl -n devtroncd logs -f $pod\n```\n\n----------------------------------------\n\nTITLE: Setting Pause Duration Before Switching Active Container in Kubernetes\nDESCRIPTION: Configures a wait period before switching the active container. This allows for a delay in the container activation process.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating a GitLab API Client in Go\nDESCRIPTION: Shows how to import the go-gitlab package and initialize a new GitLab client with a token for authentication.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xanzy/go-gitlab/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/xanzy/go-gitlab\"\n```\n\nLANGUAGE: go\nCODE:\n```\ngit, err := gitlab.NewClient(\"yourtokengoeshere\")\nif err != nil {\n  log.Fatalf(\"Failed to create client: %v\", err)\n}\nusers, _, err := git.Users.ListUsers(&gitlab.ListUsersOptions{})\n```\n\n----------------------------------------\n\nTITLE: Configuring Command in Kubernetes YAML\nDESCRIPTION: Specifies the command to run in the container, overriding the default entrypoint.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Reapplying Migrator Manifests in Kubernetes\nDESCRIPTION: Commands to delete and reapply the migrator configuration from GitHub, completing the database reset process to make helm apps visible.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/FAQs/hyperion-troubleshoot.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete -f https://raw.githubusercontent.com/devtron-labs/devtron/main/manifests/hyperion/migrator.yaml -n devtroncd\nkubectl apply -f https://raw.githubusercontent.com/devtron-labs/devtron/main/manifests/hyperion/migrator.yaml -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Traces in Go\nDESCRIPTION: Demonstrates how to create nested traces for hierarchical operations. Child traces can have their own log thresholds and fields, and can be managed independently.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/k8s.io/utils/trace/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc doSomething() {\n    rootTrace := trace.New(\"rootOperation\")\n    defer rootTrace.LogIfLong(100 * time.Millisecond)\n    \n    func() {\n        nestedTrace := rootTrace.Nest(\"nested\", Field{Key: \"nestedFieldKey1\", Value: \"nestedFieldValue1\"})\n        defer nestedTrace.LogIfLong(50 * time.Millisecond)\n        // do nested operation\n    }()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets\nDESCRIPTION: Specifies secrets for pulling images from private registries.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Cloning the OpenTelemetry Go Repository\nDESCRIPTION: Command to clone the OpenTelemetry Go repository to your local machine for development.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go.git\n```\n\n----------------------------------------\n\nTITLE: KEDA Autoscaling with Prometheus\nDESCRIPTION: Configures KEDA autoscaling using Prometheus metrics, including replica counts, polling intervals, and trigger settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: Checking Version Constraints in Go\nDESCRIPTION: Demonstrates how to create and check version constraints against semantic versions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Masterminds/semver/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n    c, err := semver.NewConstraint(\">= 1.2.3\")\n    if err != nil {\n        // Handle constraint not being parseable.\n    }\n\n    v, _ := semver.NewVersion(\"1.3\")\n    if err != nil {\n        // Handle version not being parseable.\n    }\n    // Check if the version meets the constraints. The a variable will be true.\n    a := c.Check(v)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Records with XORM in Go\nDESCRIPTION: Demonstrates how to iterate over multiple records using XORM's Iterate and Rows methods for efficient large dataset processing.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nerr := engine.Iterate(&User{Name:name}, func(idx int, bean interface{}) error {\n    user := bean.(*User)\n    return nil\n})\n// SELECT * FROM user\n\nerr := engine.BufferSize(100).Iterate(&User{Name:name}, func(idx int, bean interface{}) error {\n    user := bean.(*User)\n    return nil\n})\n// SELECT * FROM user Limit 0, 100\n// SELECT * FROM user Limit 101, 100\n\nrows, err := engine.Rows(&User{Name:name})\n// SELECT * FROM user\ndefer rows.Close()\nbean := new(Struct)\nfor rows.Next() {\n    err = rows.Scan(bean)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes Service URLs\nDESCRIPTION: Script to determine and display the application URL based on the Kubernetes service type (NodePort, LoadBalancer, or ClusterIP). Uses kubectl commands with Helm templating to extract service information and construct the appropriate URL.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/cronjob-chart_1-4-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n{{- if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Resulting JSON Schema\nDESCRIPTION: This snippet shows the JSON Schema generated from the TestUser struct. It includes all the properties defined in the struct with their respective types, descriptions, and constraints.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/invopop/jsonschema/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft/2020-12/schema\",\n  \"$ref\": \"#/$defs/SampleUser\",\n  \"$defs\": {\n    \"SampleUser\": {\n      \"oneOf\": [\n        {\n          \"required\": [\"birth_date\"],\n          \"title\": \"date\"\n        },\n        {\n          \"required\": [\"year_of_birth\"],\n          \"title\": \"year\"\n        }\n      ],\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\"\n        },\n        \"name\": {\n          \"type\": \"string\",\n          \"title\": \"the name\",\n          \"description\": \"The name of a friend\",\n          \"default\": \"alex\",\n          \"examples\": [\"joe\", \"lucy\"]\n        },\n        \"friends\": {\n          \"items\": {\n            \"type\": \"integer\"\n          },\n          \"type\": \"array\",\n          \"description\": \"The list of IDs, omitted when empty\"\n        },\n        \"tags\": {\n          \"type\": \"object\",\n          \"a\": \"b\",\n          \"foo\": [\"bar\", \"bar1\"]\n        },\n        \"birth_date\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\"\n        },\n        \"year_of_birth\": {\n          \"type\": \"string\"\n        },\n        \"metadata\": {\n          \"oneOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"array\"\n            }\n          ]\n        },\n        \"fav_color\": {\n          \"type\": \"string\",\n          \"enum\": [\"red\", \"green\", \"blue\"]\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\",\n      \"required\": [\"id\", \"name\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Devtron Dashboard with NodePort Service\nDESCRIPTION: These commands retrieve the NodePort for the Devtron service and construct the dashboard URL. They export the nodeport to a variable and then use it to create the access URL.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/charts/devtron/templates/NOTES.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport nodeport=$(kubectl get svc -n devtroncd devtron-service -o jsonpath=\"{.spec.ports[0].nodePort}\")\n\necho http://HOST_IP:$nodeport/dashboard\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Image Settings\nDESCRIPTION: Container image pull policy configuration for Kubernetes deployments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Packaging a Helm Chart for Devtron Upload\nDESCRIPTION: Command to package a Helm chart into the required .tgz format for uploading to Devtron. This creates a versioned archive file of the chart.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/deployment-charts.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm package my-custom-chart\n```\n\n----------------------------------------\n\nTITLE: Verifying Content Stream with Digest in Go\nDESCRIPTION: Demonstrates how to verify streaming content against a digest using the Verifier type and io.Reader interface.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nrd := getContent()\nverifier := id.Verifier()\nio.Copy(verifier, rd)\n\nif !verifier.Verified() {\n  return errors.New(\"the content has changed!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MaxSurge for Rolling Updates\nDESCRIPTION: Defines maximum number of pods that can exceed the desired pod count during updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Policy in Devtron Deployment Chart\nDESCRIPTION: This YAML configuration defines the image pull policy for containers. It determines when Kubernetes should pull the container image, with 'IfNotPresent' meaning pull only if not already present.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Markdown Installation Requirements Table\nDESCRIPTION: Resource requirements table showing CPU and memory specifications for different Devtron installations based on the number of applications to be managed.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/getting-started/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Integration | CPU | Memory |\n| --- | :---: | :---: |\n| **Devtron with CI/CD** | 2 | 6 GB |\n| **Helm Dashboard by Devtron** | 1 | 1 GB |\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Type with JSON Schema Definition\nDESCRIPTION: Defines a CompactDate struct with custom JSON marshaling/unmarshaling and a JSONSchema method that provides a custom schema definition.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/invopop/jsonschema/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype CompactDate struct {\n\tYear  int\n\tMonth int\n}\n\nfunc (d *CompactDate) UnmarshalJSON(data []byte) error {\n  if len(data) != 9 {\n    return errors.New(\"invalid compact date length\")\n  }\n  var err error\n  d.Year, err = strconv.Atoi(string(data[1:5]))\n  if err != nil {\n    return err\n  }\n  d.Month, err = strconv.Atoi(string(data[7:8]))\n  if err != nil {\n    return err\n  }\n  return nil\n}\n\nfunc (d *CompactDate) MarshalJSON() ([]byte, error) {\n  buf := new(bytes.Buffer)\n  buf.WriteByte('\"')\n  buf.WriteString(fmt.Sprintf(\"%d-%02d\", d.Year, d.Month))\n  buf.WriteByte('\"')\n  return buf.Bytes(), nil\n}\n\nfunc (CompactDate) JSONSchema() *Schema {\n\treturn &Schema{\n\t\tType:        \"string\",\n\t\tTitle:       \"Compact Date\",\n\t\tDescription: \"Short date that only includes year and month\",\n\t\tPattern:     \"^[0-9]{4}-[0-1][0-9]$\",\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in YAML\nDESCRIPTION: Configures environment variables for containers running in the Pod. In this example, it's set to an empty array.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Using Match Function for Pattern Matching in Go\nDESCRIPTION: Examples of using the Match function to perform pattern matching with wildcard characters. The function returns a boolean indicating if the pattern matches the string.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/match/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmatch.Match(\"hello\", \"*llo\") \nmatch.Match(\"jello\", \"?ello\") \nmatch.Match(\"hello\", \"h*o\") \n```\n\n----------------------------------------\n\nTITLE: Dashboard Security Configuration\nDESCRIPTION: Configuration settings for security scanning and Discord integration in the Devtron dashboard.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/installation-configuration.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nRECOMMEND_SECURITY_SCANNING=false\nFORCE_SECURITY_SCANNING=false\nHIDE_DISCORD=false\n```\n\n----------------------------------------\n\nTITLE: Performing Transactions with XORM in Go\nDESCRIPTION: Demonstrates how to perform database operations within a transaction using XORM, ensuring atomicity of operations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_18\n\nLANGUAGE: Go\nCODE:\n```\nsession := engine.NewSession()\ndefer session.Close()\n\n// add Begin() before any action\nif err := session.Begin(); err != nil {\n    // if returned then will rollback automatically\n    return err\n}\n\nuser1 := Userinfo{Username: \"xiaoxiao\", Departname: \"dev\", Alias: \"lunny\", Created: time.Now()}\nif _, err := session.Insert(&user1); err != nil {\n    return err\n}\n\nuser2 := Userinfo{Username: \"yyy\"}\nif _, err := session.Where(\"id = ?\", 2).Update(&user2); err != nil {\n    return err\n}\n\nif _, err := session.Exec(\"delete from userinfo where username = ?\", user2.Username); err != nil {\n    return err\n}\n\n// add Commit() after all actions\nreturn session.Commit()\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying JSON Patches in Go\nDESCRIPTION: Example showing how to create and apply a JSON patch with multiple operations against a document.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/gopkg.in/evanphx/json-patch.v4/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\tpatchJSON := []byte(`[\n\t\t{\"op\": \"replace\", \"path\": \"/name\", \"value\": \"Jane\"},\n\t\t{\"op\": \"remove\", \"path\": \"/height\"}\n\t]`)\n\n\tpatch, err := jsonpatch.DecodePatch(patchJSON)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmodified, err := patch.Apply(original)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"Original document: %s\\n\", original)\n\tfmt.Printf(\"Modified document: %s\\n\", modified)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Application URL Based on Service Type\nDESCRIPTION: A Helm template that generates appropriate commands to retrieve the application URL based on the configured service type. Handles multiple cases including Ingress with TLS support, NodePort service with node IP and port, LoadBalancer service with external IP, and ClusterIP service with pod name.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-3-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Commands in YAML\nDESCRIPTION: Specifies container command configuration with enable/disable option.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress\nDESCRIPTION: Defines private access configuration for the application within the cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Checking Current Devtron Version with kubectl\nDESCRIPTION: Command to verify the current version of Devtron installation using kubectl. This extracts the version tag from the installer-devtron resource in the devtroncd namespace.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.6.x-0.7.x.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get installers installer-devtron -o jsonpath='{.status.sync.data}' | grep \"^LTAG=\" | cut -d\"=\" -f2-\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Kubernetes Pod (YAML)\nDESCRIPTION: Defines environment variables for containers running in the Pod. In this example, the array is empty, indicating no environment variables are set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Accessing PostgreSQL Pod in Kubernetes\nDESCRIPTION: Command to execute a shell inside the PostgreSQL pod for direct database access during the troubleshooting process.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/FAQs/hyperion-troubleshoot.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -it postgresql-postgresql-0 -n devtroncd -- sh\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - K6 Configuration Variables\nDESCRIPTION: Defines the required variables and their formats for configuring K6 load testing tasks. Includes path configuration, Prometheus credentials, and output settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/plugins/k6-load-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable | Format | Description |\n| ---- | ---- | ---- |\n| RelativePathToScript | String | Checkout path + script path along with script name |\n| PrometheusUsername | String | Username of Prometheus account |\n| PrometheusApiKey | String | API key of Prometheus account |\n| PrometheusRemoteWriteEndpoint | String | Remote write endpoint of Prometheus account |\n| OutputType | String | `Log` or `Prometheus` |\n```\n\n----------------------------------------\n\nTITLE: Evaluating Numeric Calculation in Go using Govaluate\nDESCRIPTION: Creates an expression that performs a calculation and returns a numeric result. The expression calculates the percentage of memory used.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/govaluate/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nexpression, err := govaluate.NewEvaluableExpression(\"(mem_used / total_mem) * 100\");\n\nparameters := make(map[string]interface{}, 8)\nparameters[\"total_mem\"] = 1024;\nparameters[\"mem_used\"] = 512;\n\nresult, err := expression.Evaluate(parameters);\n// result is now set to \"50.0\", the float64 value.\n```\n\n----------------------------------------\n\nTITLE: Parsing structured tags in Go using tagparser\nDESCRIPTION: Example function demonstrating how to use the tagparser package to parse a structured tag. It shows parsing a tag with a name and key-value pairs, including handling of complex values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/vmihailenco/tagparser/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc ExampleParse() {\n\ttag := tagparser.Parse(\"some_name,key:value,key2:'complex value'\")\n\tfmt.Println(tag.Name)\n\tfmt.Println(tag.Options)\n\t// Output: some_name\n\t// map[key:value key2:'complex value']\n}\n```\n\n----------------------------------------\n\nTITLE: Mandatory StatefulSet Configuration\nDESCRIPTION: Minimum required configuration for StatefulSet including mount path and volume claim templates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nstatefulSetConfig:\n  mountPath: /tmp\n  volumeClaimTemplates:\n  - spec:\n      accessModes: \n        - ReadWriteOnce\n      resources: \n        requests:\n            storage: 2Gi\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Resource Limits\nDESCRIPTION: Configuration for setting CPU and memory resource limits and requests for containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"1\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"0.10\"\n    memory: \"100Mi\"\n```\n\n----------------------------------------\n\nTITLE: Database Migration Configuration\nDESCRIPTION: Controls database migration settings\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Setting Grace Period in Kubernetes YAML\nDESCRIPTION: Defines the termination grace period for pods. Specifies how long Kubernetes waits before forcefully terminating a pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring MinReadySeconds in Devtron Deployment\nDESCRIPTION: Specifies the minimum number of seconds for which a newly created Pod should be ready without any of its containers crashing to be considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Checking CI Pods in Devtron\nDESCRIPTION: This command lists all pods in the devtron-ci namespace, helping to verify if new pods are created during the build process.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n devtron-ci\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for LoadBalancer Service in Helm Chart\nDESCRIPTION: Commands to retrieve the LoadBalancer IP and construct the application URL. Includes a note about potential delays in IP assignment and suggests how to monitor service status.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/contrib-chart/reference-chart_3-11-0/templates/NOTES.txt#2025-04-22_snippet_2\n\nLANGUAGE: helm\nCODE:\n```\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Security Context in Kubernetes YAML\nDESCRIPTION: Sets security context for the main container in a Kubernetes pod. This example disables privilege escalation for the container, enhancing the security posture by preventing processes from gaining more privileges than their parent process.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Checking Devtron Release Name with Helm\nDESCRIPTION: Command to list the Helm releases in the devtroncd namespace to identify the Devtron release name.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.4.x-0.4.x.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm list --namespace devtroncd\n```\n\n----------------------------------------\n\nTITLE: Defining Node Affinity\nDESCRIPTION: Configures pod scheduling constraints based on node labels.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Custom Time Type Implementation with TextUnmarshaler in Go\nDESCRIPTION: Implementation of a custom time type that implements the TextUnmarshaler interface for use with the env package to support custom time formats.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/caarlos0/env/v6/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype MyTime time.Time\n\nfunc (t *MyTime) UnmarshalText(text []byte) error {\n\ttt, err := time.Parse(\"2006-01-02\", string(text))\n\t*t = MyTime(tt)\n\treturn err\n}\n\ntype Config struct {\n\tSomeTime MyTime `env:\"SOME_TIME\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Stack values.yaml in Devtron\nDESCRIPTION: This snippet shows the required configurations in values.yaml for setting up Prometheus Stack. It includes settings for kube-state-metrics to allow all pod metrics and configuration for podMonitorSelector and serviceMonitorSelector to use custom selections rather than Helm values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/use-cases/prometheus-stack-over-devtron.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n1. search for kube-state-metrics and add below data\n\n   kube-state-metrics:\n    metricLabelsAllowlist:\n      - pods=[*]\n\n2. search for podMonitorSelectorNilUsesHelmValues and make it false \n podMonitorSelectorNilUsesHelmValues: false\n\n3. search for serviceMonitorSelectorNilUsesHelmValues and make it false\nserviceMonitorSelectorNilUsesHelmValues: false\n```\n\n----------------------------------------\n\nTITLE: Applying PersistentVolumeClaim in Kubernetes for Devtron\nDESCRIPTION: Bash command to apply the PersistentVolumeClaim YAML file in a Kubernetes cluster. This command creates the PVC in the specified namespace.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://k8s.io/examples/pods/storage/pv-claim.yaml -n {namespace}\n```\n\n----------------------------------------\n\nTITLE: ABAC Matcher Using 'in' Operator in Casbin\nDESCRIPTION: Example of a matcher using the 'in' operator for Attribute-Based Access Control (ABAC). This shows how to check if an object is in a predefined list of values. Note that array length must be more than 1.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/casbin/v2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n# Matchers\n[matchers]\nm = r.obj == p.obj && r.act == p.act || r.obj in ('data2', 'data3')\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers in Kubernetes YAML\nDESCRIPTION: Defines init containers for Kubernetes deployments, which run before the main application containers and can be used for setup tasks or utilities.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n    image: nginx:1.14.2\n    securityContext:\n      privileged: true\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Container Pod Configuration\nDESCRIPTION: YAML configuration for setting up multiple containers within a pod, including sidecar containers. Shows how to configure container images, ports, commands, and security contexts.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n      - reuseContainerImage: true\n        securityContext:\n          runAsUser: 1000\n          runAsGroup: 3000\n          fsGroup: 2000\n        volumeMounts:\n        - mountPath: /etc/ls-oms\n          name: ls-oms-cm-vol\n        command:\n          - flyway\n          - -configFiles=/etc/ls-oms/flyway.conf\n          - migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in StatefulSet\nDESCRIPTION: Defines ports configuration for container services including envoy port, service port, and node port settings. Includes support for streaming and HTTP2 protocols.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    nodePort: 32056\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Basic Row Scanning in Core for Go\nDESCRIPTION: Demonstrates the basic usage of Scan method to retrieve data from query results. This follows the standard Go sql.Rows pattern.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/core/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nrows, _ := db.Query()\nfor rows.Next() {\n    rows.Scan()\n}\n```\n\n----------------------------------------\n\nTITLE: ConfigMap Environment Variables\nDESCRIPTION: Configuration for environment variables sourced from Kubernetes ConfigMaps.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromCongigMapKeys: \n  - name: ENV_NAME\n    configMapName: CONFIG_MAP_NAME\n    keyName: CONFIG_MAP_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers\nDESCRIPTION: Configuration for initialization containers that run before app containers in a Pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n    image: nginx:1.14.2\n    securityContext:\n      privileged: true\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Fixing PostgreSQL Image Pull Issue in Devtron\nDESCRIPTION: Command to patch PostgreSQL StatefulSet with updated container images to resolve crashloop issues caused by image pull failures\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch -n devtroncd statefulset postgresql-postgresql -p '{\"spec\":{\"template\":{\"spec\":{\"initContainers\":[{\"name\":\"init-chmod-data\",\"image\":\"quay.io/devtron/minideb:latest\"}],\"containers\":[{\"name\":\"postgresql-postgresql\",\"image\":\"quay.io/devtron/postgres:11.3.0-debian-9-r28\"}]}}}}'\n```\n\n----------------------------------------\n\nTITLE: Setting Grace Period in Kubernetes YAML\nDESCRIPTION: Specifies the termination grace period for pods in a Kubernetes deployment, allowing time for graceful shutdown.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Basic Merging of Structs in Go using Mergo\nDESCRIPTION: Demonstrates how to merge two structs using Mergo's basic Merge function. The source struct's values will only be applied to destination fields that are zero-valued.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/imdario/mergo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nif err := mergo.Merge(&dst, src); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Smithy Build with Go Codegen Plugin\nDESCRIPTION: Example configuration for applying the go-codegen build plugin to a Smithy quickstart project. Demonstrates setting up service configuration, module naming, and Go-specific settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/smithy-go/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1.0\",\n  \"sources\": [\n    \"models\"\n  ],\n  \"maven\": {\n    \"dependencies\": [\n      \"software.amazon.smithy.go:smithy-go-codegen:0.1.0\"\n    ]\n  },\n  \"plugins\": {\n    \"go-codegen\": {\n      \"service\": \"example.weather#Weather\",\n      \"module\": \"github.com/example/weather\",\n      \"generateGoMod\": true,\n      \"goDirective\": \"1.20\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Logs with Logrus Test Hooks in Go\nDESCRIPTION: Example of using Logrus's built-in test facilities to assert the presence of log messages in unit tests. This approach allows for verifying that specific log messages are generated with the correct level and content.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nimport(\n  \"github.com/sirupsen/logrus\"\n  \"github.com/sirupsen/logrus/hooks/test\"\n  \"github.com/stretchr/testify/assert\"\n  \"testing\"\n)\n\nfunc TestSomething(t*testing.T){\n  logger, hook := test.NewNullLogger()\n  logger.Error(\"Helloerror\")\n\n  assert.Equal(t, 1, len(hook.Entries))\n  assert.Equal(t, logrus.ErrorLevel, hook.LastEntry().Level)\n  assert.Equal(t, \"Helloerror\", hook.LastEntry().Message)\n\n  hook.Reset()\n  assert.Nil(t, hook.LastEntry())\n}\n```\n\n----------------------------------------\n\nTITLE: Deferred Error Annotation in Go\nDESCRIPTION: Example of using DeferredAnnotatef in a defer statement to annotate errors. Useful for adding context to errors in cleanup or defer blocks.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ndefer DeferredAnnotatef(&err, \"failed to frombulate the %s\", arg)\n```\n\n----------------------------------------\n\nTITLE: Checking Current Devtron Version Using kubectl\nDESCRIPTION: Command to check the current version of Devtron installed in the cluster. This extracts the version tag from the installer configuration in the devtroncd namespace.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.4.x-0.4.x.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get installers installer-devtron -o jsonpath='{.status.sync.data}' | grep \"^LTAG=\" | cut -d\"=\" -f2-\n```\n\n----------------------------------------\n\nTITLE: Installing pq Driver with Go\nDESCRIPTION: Command to install the pq driver using Go's package manager. This adds the GitHub library to your Go dependencies.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/lib/pq/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/lib/pq\n```\n\n----------------------------------------\n\nTITLE: Basic TOML Decoding in Go\nDESCRIPTION: Demonstrates how to decode TOML data into a Go struct using struct fields that match TOML keys.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/BurntSushi/toml/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\tAge        int\n\tCats       []string\n\tPi         float64\n\tPerfection []int\n\tDOB        time.Time\n}\n\nvar conf Config\n_, err := toml.Decode(tomlData, &conf)\n```\n\n----------------------------------------\n\nTITLE: Viewing Pod Logs in Kubernetes\nDESCRIPTION: Command to access logs from pods that are in CrashloopBackOff state to diagnose issues with migration jobs.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/FAQs/hyperion-troubleshoot.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -f <pod-name-in-crashloop> -n devtroncd -c <job-name>\n```\n\n----------------------------------------\n\nTITLE: Sorting Semantic Versions in Go\nDESCRIPTION: Demonstrates how to sort a collection of semantic versions using the sort package\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nraw := []string{\"1.2.3\", \"1.0\", \"1.3\", \"2\", \"0.4.2\",}\nvs := make([]*semver.Version, len(raw))\nfor i, r := range raw {\n    v, err := semver.NewVersion(r)\n    if err != nil {\n        t.Errorf(\"Error parsing version: %s\", err)\n    }\n\n    vs[i] = v\n}\n\nsort.Sort(semver.Collection(vs))\n```\n\n----------------------------------------\n\nTITLE: Pod Labels Configuration\nDESCRIPTION: Defines pod labels for identification and organization.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\npodLabels:\n  severity: critical\n```\n\n----------------------------------------\n\nTITLE: Performing Sum Operations with XORM in Go\nDESCRIPTION: Shows various sum operations that can be performed using XORM, including single and multiple column sums.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\nagesFloat64, err := engine.Sum(&user, \"age\")\n// SELECT sum(age) AS total FROM user\n\nagesInt64, err := engine.SumInt(&user, \"age\")\n// SELECT sum(age) AS total FROM user\n\nsumFloat64Slice, err := engine.Sums(&user, \"age\", \"score\")\n// SELECT sum(age), sum(score) FROM user\n\nsumInt64Slice, err := engine.SumsInt(&user, \"age\", \"score\")\n// SELECT sum(age), sum(score) FROM user\n```\n\n----------------------------------------\n\nTITLE: Defining and Syncing Struct to Database Table in Go\nDESCRIPTION: Shows how to define a struct representing a database table and sync it to the actual database schema using XORM.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ntype User struct {\n    Id int64\n    Name string\n    Salt string\n    Age int\n    Passwd string `xorm:\"varchar(200)\"`\n    Created time.Time `xorm:\"created\"`\n    Updated time.Time `xorm:\"updated\"`\n}\n\nerr := engine.Sync2(new(User))\n```\n\n----------------------------------------\n\nTITLE: Setting MaxSurge in YAML\nDESCRIPTION: Defines the maximum number of pods that can be created over the desired number of pods during an update.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets in Kubernetes Deployment\nDESCRIPTION: This YAML snippet specifies the secrets to be used for pulling images from private registries in a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Restarting NATS and STAN Pods in Devtron\nDESCRIPTION: These commands restart NATS, STAN, Devtron, and Kubewatch pods to resolve persistent issues with build logs and functionality.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod -n devtroncd devtron-nats-0\nkubectl delete pod -n devtroncd devtron-stan-0\nkubectl delete pod -n devtroncd -l app=devtron\nkubectl delete pod -n devtroncd -l app=kubewatch\n```\n\n----------------------------------------\n\nTITLE: Creating Namespace for Devtron Installation\nDESCRIPTION: This command creates the devtroncd namespace in Kubernetes, which is required before applying production overrides during a pre-installation configuration process.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/override-default-devtron-installation-configs.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns devtroncd\n```\n\n----------------------------------------\n\nTITLE: Editing Node Config in YAML\nDESCRIPTION: This snippet demonstrates how to edit a node's configuration using the YAML editor in Devtron. Users can make changes to the node's settings and apply them through the interface.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/resource-browser.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example node config YAML\napiVersion: v1\nkind: Node\nmetadata:\n  name: example-node\nspec:\n  # Node specifications\nstatus:\n  # Node status\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets in Kubernetes YAML\nDESCRIPTION: Specifies the Docker credentials secret for accessing private registries in Kubernetes deployments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Creating and Ending a Span in OpenCensus Go\nDESCRIPTION: Example of how to start and end a span for tracing in OpenCensus Go.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opencensus.io/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx, span := trace.StartSpan(ctx, \"cache.Get\")\ndefer span.End()\n\n// Do work to get from cache.\n```\n\n----------------------------------------\n\nTITLE: Service Monitor Configuration\nDESCRIPTION: Defines service monitoring parameters including metrics collection settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Running a Go application with environment variables\nDESCRIPTION: Example command showing how to run a Go application with environment variables set for parsing by the env package.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/caarlos0/env/v6/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ PRODUCTION=true HOSTS=\"host1:host2:host3\" DURATION=1s go run main.go\n{Home:/your/home Port:3000 IsProduction:true Hosts:[host1 host2 host3] Duration:1s}\n```\n\n----------------------------------------\n\nTITLE: Overriding Standard Library Logger with Logrus in Go\nDESCRIPTION: Example of replacing the standard library's logger with Logrus. This allows existing code that uses the standard log package to benefit from Logrus's advanced features and formatters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nlogger := logrus.New()\nlogger.Formatter = &logrus.JSONFormatter{}\n\n// Use logrus for standard log output\n// Note that `log` here references stdlib's log\n// Not logrus imported under the name `log`.\nlog.SetOutput(logger.Writer())\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw YAML in Kubernetes\nDESCRIPTION: This snippet demonstrates how to include raw Kubernetes YAML configurations. It allows for specifying custom Kubernetes objects that will be applied during deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Deployment in Kubernetes YAML\nDESCRIPTION: This snippet shows how to configure server deployment settings in a Kubernetes deployment. It includes specifying the image tag and image URL.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Core Functions for xxhash in Go\nDESCRIPTION: This snippet outlines the main API functions provided by the xxhash package. It includes functions for hashing byte slices and strings, as well as a Digest struct for streaming hashing.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Sum64(b []byte) uint64\nfunc Sum64String(s string) uint64\ntype Digest struct{ ... }\n    func New() *Digest\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Fields with Struct Tags in Go\nDESCRIPTION: This example shows how to set default values for struct fields when using gorilla/schema. It demonstrates the default tag option for various data types including strings, numbers, booleans, and slices.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/gorilla/schema/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Person struct {\n    Phone string `schema:\"phone,default:+123456\"`          // custom name\n    Age int     `schema:\"age,default:21\"`\n\tAdmin bool    `schema:\"admin,default:false\"`\n\tBalance float64 `schema:\"balance,default:10.0\"`\n    Friends []string `schema:friends,default:john|bob`\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets\nDESCRIPTION: Configures credentials for pulling images from private registries.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Setting MaxUnavailable for Rolling Updates\nDESCRIPTION: Specifies the maximum number of pods that can be unavailable during the update process.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployment Window Fetch Days in Orchestrator ConfigMap\nDESCRIPTION: This JSON snippet shows the configuration for setting the number of days to fetch upcoming deployment windows for blackout and maintenance windows in the Orchestrator microservice ConfigMap.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/deployment-window.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DEPLOYMENT_WINDOW_FETCH_DAYS_BLACKOUT\": \"90\",\n  \"DEPLOYMENT_WINDOW_FETCH_DAYS_MAINTENANCE\": \"90\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving LoadBalancer Service URL in Kubernetes\nDESCRIPTION: Commands to get the application URL when the service type is LoadBalancer. It exports the service IP from the load balancer ingress and displays the URL with the configured service port.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/cronjob-chart_1-3-0/templates/NOTES.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\necho http://$SERVICE_IP:{{ .Values.service.port }}\n```\n\n----------------------------------------\n\nTITLE: MinReadySeconds Configuration\nDESCRIPTION: Specifies the minimum time a pod must be ready without crashes to be considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Verifying Resource Deletion\nDESCRIPTION: Commands to verify the successful deletion of NATS resources by checking pods, service accounts, and cluster roles.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.2.x-0.3.x.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get pods \nkubectl -n devtroncd get serviceaccount\nkubectl -n devtroncd get clusterrole\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in YAML\nDESCRIPTION: Defines ports on which application services will be exposed to other services. Includes options for envoy port, idle timeout, service port, and more.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    nodePort: 32056\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Performing Database Operations with XORM\nDESCRIPTION: Comprehensive examples of CRUD operations including Insert, Get, Find, Update and Delete\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-xorm/xorm/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\naffected, err := engine.Insert(&user)\nhas, err := engine.Get(&user)\nvar users []User\nerr := engine.Where(\"name = ?\", name).Find(&users)\naffected, err := engine.ID(1).Update(&user)\naffected, err := engine.Where(...).Delete(&user)\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with AWS S3 Bucket using IAM Policy\nDESCRIPTION: Helm command to install Devtron with AWS S3 buckets for storing build logs and cache using S3 IAM policy. Requires S3 permission policy attached to the IAM role for the cluster nodes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd-with-gitops.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai\n\nhelm repo update devtron\n\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--set configs.BLOB_STORAGE_PROVIDER=S3 \\\n--set configs.DEFAULT_CACHE_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CACHE_BUCKET_REGION=us-east-1 \\\n--set configs.DEFAULT_BUILD_LOGS_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CD_LOGS_BUCKET_REGION=us-east-1 \\\n--set argo-cd.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Secrets for Additional Namespaces\nDESCRIPTION: Commands to create Docker registry secrets in additional namespaces for CI/CD and Argo CD.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-in-airgapped-environment.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret docker-registry devtron-imagepull \\\n  --namespace devtron-cd \\\n  --docker-server=$TARGET_REGISTRY \\\n  --docker-username=$TARGET_REGISTRY_USERNAME \\\n  --docker-password=$TARGET_REGISTRY_TOKEN\nkubectl create secret docker-registry devtron-imagepull \\\n  --namespace devtron-ci \\\n  --docker-server=$TARGET_REGISTRY \\\n  --docker-username=$TARGET_REGISTRY_USERNAME \\\n  --docker-password=$TARGET_REGISTRY_TOKEN\nkubectl create secret docker-registry devtron-imagepull \\\n  --namespace argo \\\n  --docker-server=$TARGET_REGISTRY \\\n  --docker-username=$TARGET_REGISTRY_USERNAME \\\n  --docker-password=$TARGET_REGISTRY_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Locale in Go\nDESCRIPTION: Example of how to set a custom locale for error handling in gojsonschema.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ngojsonschema.Locale = YourCustomLocale{}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in YAML\nDESCRIPTION: Sets environment variables for the containers that run in the Pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Volumes\nDESCRIPTION: Defines volume configurations for external storage using empty directories and persistent volume claims\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with AWS S3 Bucket using Access Keys\nDESCRIPTION: Helm command to install Devtron with AWS S3 buckets for storing build logs and cache using access-key and secret-key for AWS S3 authentication.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd-with-gitops.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai\n\nhelm repo update devtron\n\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--set configs.BLOB_STORAGE_PROVIDER=S3 \\\n--set configs.DEFAULT_CACHE_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CACHE_BUCKET_REGION=us-east-1 \\\n--set configs.DEFAULT_BUILD_LOGS_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CD_LOGS_BUCKET_REGION=us-east-1 \\\n--set secrets.BLOB_STORAGE_S3_ACCESS_KEY=<access-key> \\\n--set secrets.BLOB_STORAGE_S3_SECRET_KEY=<secret-key> \\\n--set argo-cd.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Implementing SpdyStream Client in Go\nDESCRIPTION: A Go client implementation that connects to a SpdyStream server, creates a stream, sends data, and receives the mirrored response. This example demonstrates connection establishment, stream creation, and data exchange using the SpdyStream library.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/moby/spdystream/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/moby/spdystream\"\n\t\"net\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tconn, err := net.Dial(\"tcp\", \"localhost:8080\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tspdyConn, err := spdystream.NewConnection(conn, false)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tgo spdyConn.Serve(spdystream.NoOpStreamHandler)\n\tstream, err := spdyConn.CreateStream(http.Header{}, nil, false)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tstream.Wait()\n\n\tfmt.Fprint(stream, \"Writing to stream\")\n\n\tbuf := make([]byte, 25)\n\tstream.Read(buf)\n\tfmt.Println(string(buf))\n\n\tstream.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Scale Down Delay Configuration\nDESCRIPTION: Sets the waiting period before scaling down containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nwaitForSecondsBeforeScalingDown: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Monitoring in Kubernetes YAML\nDESCRIPTION: Specifies Prometheus monitoring settings. This configuration determines how the application is monitored within the Kubernetes cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Upgrading Hyperion Installation of Devtron\nDESCRIPTION: Command for upgrading Devtron that was installed using the Hyperion installer script, which updates it to the latest version.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade-devtron.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://raw.githubusercontent.com/devtron-labs/devtron/main/manifests/hyperion.yaml | kubectl apply -f - -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Development for PostHog Go\nDESCRIPTION: Example go.mod file configuration that demonstrates how to use a local build of the PostHog Go client library during development by using the replace directive.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/posthog/posthog-go/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example/posthog-go-app\n\ngo 1.22.5\n\nrequire github.com/posthog/posthog-go v0.0.0-20240327112532-87b23fe11103\n\nrequire github.com/google/uuid v1.3.0 // indirect\n\nreplace github.com/posthog/posthog-go => /path-to-your-local/posthog-go\n```\n\n----------------------------------------\n\nTITLE: Loading and Parsing SSH Config in Go\nDESCRIPTION: Demonstrates loading an SSH config from a string and accessing values from it. This example creates a config with Compression enabled for all .test hosts.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/kevinburke/ssh_config/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar config = `\nHost *.test\n  Compression yes\n`\n\ncfg, err := ssh_config.Decode(strings.NewReader(config))\nfmt.Println(cfg.Get(\"example.test\", \"Port\"))\n```\n\n----------------------------------------\n\nTITLE: Splitting a Trace into Multiple Steps in Go\nDESCRIPTION: Creates a trace with multiple steps, allowing timing of different parts of an operation. Each step can have its own custom fields for additional context.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/k8s.io/utils/trace/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc doSomething() {\n    opTrace := trace.New(\"operation\")\n    defer opTrace.LogIfLong(100 * time.Millisecond)\n    // do step 1\n    opTrace.Step(\"step1\", Field{Key: \"stepFieldKey1\", Value: \"stepFieldValue1\"})\n    // do step 2\n    opTrace.Step(\"step2\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus in Kubernetes YAML\nDESCRIPTION: Specifies the Prometheus release name for monitoring in a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Creating Not Supported Error in Go\nDESCRIPTION: NewNotSupported returns an error which wraps err and satisfies IsNotSupported(). It takes an error and a message string as parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc NewNotSupported(err error, msg string) error\n```\n\n----------------------------------------\n\nTITLE: Setting Pause Before Switch Active in YAML\nDESCRIPTION: Specifies the waiting period before switching the container to active state.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository with Memory Storage in Go\nDESCRIPTION: Demonstrates how to initialize a Git repository using the memory storer implementation in go-git.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-git/go-git/v5/EXTENDING.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nr, err := git.Init(memory.NewStorage(), nil)\n```\n\n----------------------------------------\n\nTITLE: Overriding Fullname in Kubernetes YAML\nDESCRIPTION: Overrides the release fullname created by default by Devtron. This is used to construct Kubernetes object names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Multipath Syntax in GJSON\nDESCRIPTION: Example of using the multipath feature to join multiple paths together to form new documents by wrapping comma-separated paths in brackets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/SYNTAX.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n{name.first,age,\"the_murphys\":friends.#(last=\"Murphy\")#.first}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"first\":\"Tom\",\"age\":37,\"the_murphys\":[\"Dale\",\"Jane\"]}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Existing Devtron to Beta\nDESCRIPTION: Commands to upgrade an existing Devtron installation to the beta version using helm upgrade.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/charts/devtron/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone [https://github.com/devtron-labs/devtron.git](https://github.com/devtron-labs/devtron.git)\n$ cd devtron/charts/devtron\n$ helm dependency up\n$ #modify values in values.yaml\n$ helm upgrade devtron . --reuse-values --namespace devtroncd -f devtron-bom.yaml\n```\n\n----------------------------------------\n\nTITLE: Using concurrent.Map in Go\nDESCRIPTION: Example of using concurrent.Map, which is a backport of sync.Map for Go versions below 1.9. This demonstrates how to store and retrieve values from the map with a simple string key-value pair.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/modern-go/concurrent/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nm := concurrent.NewMap()\nm.Store(\"hello\", \"world\")\nelem, found := m.Load(\"hello\")\n// elem will be \"world\"\n// found will be true\n```\n\n----------------------------------------\n\nTITLE: Executing Row Queries with Parameters in Core for Go\nDESCRIPTION: Demonstrates querying for a single row using different parameter styles: positional parameters, struct-based named parameters, and map-based named parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/core/README.md#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nrow := db.QueryRow(\"select * from table where name = ?\", name)\n\nuser = User{\n    Name:\"lunny\",\n}\nrow := db.QueryRowStruct(\"select * from table where name = ?Name\",\n            &user)\n\nvar user = map[string]interface{}{\n    \"name\": \"lunny\",\n}\nrow = db.QueryRowMap(\"select * from table where name = ?name\",\n            &user)\n```\n\n----------------------------------------\n\nTITLE: Database Migration Configuration\nDESCRIPTION: Controls database migration settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Using Raw Kubernetes YAML Definitions\nDESCRIPTION: Allows including raw Kubernetes object definitions that will be applied during deployment. This example defines a Service with selector, ports, and type specifications.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Kubernetes Ingress\nDESCRIPTION: Legacy format for Kubernetes ingress configuration with simplified structure.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  ingressClassName: nginx-internal\n  annotations: {}\n  path: \"\"\n  host: \"\"\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grafana Password in Devtron\nDESCRIPTION: This command retrieves the Grafana password from the Devtron secret in the devtroncd namespace, necessary for accessing Grafana dashboards.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get secret devtron-secret -o jsonpath='{.data.GRAFANA_PASSWORD}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Queries with XORM\nDESCRIPTION: Shows different ways to execute SQL queries including Query, QueryString and QueryInterface methods\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-xorm/xorm/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nresults, err := engine.Query(\"select * from user\")\nresults, err := engine.Where(\"a = 1\").Query()\n\nresults, err := engine.QueryString(\"select * from user\")\nresults, err := engine.Where(\"a = 1\").QueryString()\n\nresults, err := engine.QueryInterface(\"select * from user\")\nresults, err := engine.Where(\"a = 1\").QueryInterface()\n```\n\n----------------------------------------\n\nTITLE: Upgrading Devtron with PostgreSQL Volume Size\nDESCRIPTION: Helm command to upgrade Devtron while specifying PostgreSQL volume size to avoid StatefulSet update errors\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd \\\n-f https://raw.githubusercontent.com/devtron-labs/devtron/main/charts/devtron/devtron-bom.yaml \\\n--set installer.modules={cicd} --reuse-values \\\n--set components.postgres.persistence.volumeSize=20Gi\n```\n\n----------------------------------------\n\nTITLE: Using In and NotIn Conditions in Go with builder\nDESCRIPTION: Examples demonstrating the use of In and NotIn conditions for SQL queries, including direct values, arrays, and subqueries.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/builder/README.md#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nimport . \"xorm.io/builder\"\n\nsql, args, _ := ToSQL(In(\"a\", 1, 2, 3))\n// a IN (?,?,?) [1,2,3]\nsql, args, _ := ToSQL(In(\"a\", []int{1, 2, 3}))\n// a IN (?,?,?) [1,2,3]\nsql, args, _ := ToSQL(In(\"a\", Expr(\"select id from b where c = ?\", 1))))\n// a IN (select id from b where c = ?) [1]\n```\n\n----------------------------------------\n\nTITLE: Updating Azure CLI Authentication in Go\nDESCRIPTION: Updates the AccessTokensPath() function to read access tokens path through AZURE_ACCESS_TOKEN_FILE environment variable. Falls back to default path set by Azure CLI if not set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nAccessTokensPath()\n```\n\n----------------------------------------\n\nTITLE: Acquiring Access Token with Username/Password in Go\nDESCRIPTION: This code shows how to acquire an access token using username and password authentication in Go.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/autorest/adal/README.md#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nspt, err := adal.NewServicePrincipalTokenFromUsernamePassword(\n\t*oauthConfig,\n\tapplicationID,\n\tusername,\n\tpassword,\n\tresource,\n\tcallbacks...)\n\nif (err == nil) {\n    token := spt.Token\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Image Pull Policy\nDESCRIPTION: Specifies when Kubernetes should pull the container image. 'IfNotPresent' pulls only when not cached, while 'Always' pulls on every deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Schema from HTTP Reference\nDESCRIPTION: Shows how to load a JSON schema from a web/HTTP reference using NewReferenceLoader\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nloader := gojsonschema.NewReferenceLoader(\"http://www.some_host.com/schema.json\")\n```\n\n----------------------------------------\n\nTITLE: Implementing hash.Hash64 Interface for Digest in Go\nDESCRIPTION: This snippet shows the key methods of the Digest type, which implements the hash.Hash64 interface. It includes methods for writing data and computing the hash sum.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (*Digest) Write([]byte) (int, error)\nfunc (*Digest) WriteString(string) (int, error)\nfunc (*Digest) Sum64() uint64\n```\n\n----------------------------------------\n\nTITLE: Wildcard Path Syntax in GJSON\nDESCRIPTION: Examples of using wildcard characters (* and ?) in GJSON paths to match multiple characters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/SYNTAX.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nchild*.2               \"Jack\"\nc?ildren.0             \"Sara\"\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override in YAML\nDESCRIPTION: Replaces the release fullname created by default by Devtron, which is used to construct Kubernetes object names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL in Kubernetes using Helm Templates\nDESCRIPTION: A Helm template snippet that provides different command sequences to obtain the application URL based on the Kubernetes service type configured (Ingress, NodePort, LoadBalancer, or ClusterIP). Each section uses specific kubectl commands tailored to the service type to extract the necessary information for accessing the application.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-5-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Installing Universal Translator with Go\nDESCRIPTION: Command to install the Universal Translator package using go get.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-playground/universal-translator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/go-playground/universal-translator\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Volumes\nDESCRIPTION: Configuration for Kubernetes volume definitions including empty dir and PVC.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Checking Git Sensor Pod Logs in Kubernetes\nDESCRIPTION: View the logs of the Git sensor pod to troubleshoot issues related to Git commits not being visible in the build pipeline.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl logs -n devtroncd -l app=git-sensor\n```\n\n----------------------------------------\n\nTITLE: Configuring Ambassador Mappings for Kubernetes Ingress\nDESCRIPTION: Sets up Ambassador mappings to access applications from outside the cluster. This configuration includes settings for TLS, hostname, and other routing options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nambassadorMapping:\n  ambassadorId: \"prod-emissary\"\n  cors: {}\n  enabled: true\n  hostname: devtron.example.com\n  labels: {}\n  prefix: /\n  retryPolicy: {}\n  rewrite: \"\"\n  tls:\n    context: \"devtron-tls-context\"\n    create: false\n    hosts: []\n    secretName: \"\"\n```\n\n----------------------------------------\n\nTITLE: Using JSON Pointer in Go to Manipulate JSON Documents\nDESCRIPTION: This example demonstrates how to use the gojsonpointer library to create and manipulate a JSON document. It shows creating a JSON pointer, setting a value, retrieving a value, and deleting an element from a nested JSON structure.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xeipuuv/gojsonpointer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\njsonText := `{\n\t\"name\": \"Bobby B\",\n\t\"occupation\": {\n\t\t\"title\" : \"King\",\n\t\t\"years\" : 15,\n\t\t\"heir\" : \"Joffrey B\"\t\t\t\n\t}\n}`\n\nvar jsonDocument map[string]interface{}\njson.Unmarshal([]byte(jsonText), &jsonDocument)\n\n//create a JSON pointer\npointerString := \"/occupation/title\"\npointer, _ := NewJsonPointer(pointerString)\n\n//SET a new value for the \"title\" in the document     \npointer.Set(jsonDocument, \"Supreme Leader of Westeros\")\n\n//GET the new \"title\" from the document\ntitle, _, _ := pointer.Get(jsonDocument)\nfmt.Println(title) //outputs \"Supreme Leader of Westeros\"\n\n//DELETE the \"heir\" from the document\ndeletePointer := NewJsonPointer(\"/occupation/heir\")\ndeletePointer.Delete(jsonDocument)\n\nb, _ := json.Marshal(jsonDocument)\nfmt.Println(string(b))\n//outputs `{\"name\":\"Bobby B\",\"occupation\":{\"title\":\"Supreme Leader of Westeros\",\"years\":15}}`\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with Azure Blob Storage\nDESCRIPTION: Devtron installation using Azure Blob Storage for build logs and cache\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-helm-3.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai\nhelm repo update devtron\nhelm install devtron devtron/devtron-operator --create-namespace --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--set secrets.AZURE_ACCOUNT_KEY=xxxxxxxxxx \\\n--set configs.BLOB_STORAGE_PROVIDER=AZURE \\\n--set configs.AZURE_ACCOUNT_NAME=test-account \\\n--set configs.AZURE_BLOB_CONTAINER_CI_LOG=ci-log-container \\\n--set configs.AZURE_BLOB_CONTAINER_CI_CACHE=ci-cache-container\n```\n\n----------------------------------------\n\nTITLE: Upgrading Devtron to Latest Version\nDESCRIPTION: This command upgrades Devtron to the latest available version using the devtron-operator Helm chart. It configures the CICD module and preserves existing values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.3.x-0.4.x.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd \\\n-f https://raw.githubusercontent.com/devtron-labs/devtron/main/charts/devtron/devtron-bom.yaml \\\n--set installer.modules={cicd} --reuse-values\n```\n\n----------------------------------------\n\nTITLE: Using Go comments in JSON Schema generation\nDESCRIPTION: This snippet shows how to use the AddGoComments method to incorporate Go comments into the generated JSON Schema.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/invopop/jsonschema/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nr := new(Reflector)\nif err := r.AddGoComments(\"github.com/invopop/jsonschema\", \"./\"); err != nil {\n  // deal with error\n}\ns := r.Reflect(&User{})\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override in Kubernetes Deployment\nDESCRIPTION: Overrides the default fullname used by Devtron to construct Kubernetes object names. This allows for custom naming of resources.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Creating Definition Lists in Markdown with Blackfriday\nDESCRIPTION: Example of creating definition lists in Markdown that can be processed by Blackfriday. Each term is followed by a colon and its definition, with terms separated by blank lines.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nCat\n: Fluffy animal everyone likes\n\nInternet\n: Vector of transmission for pictures of cats\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with Google Cloud Storage\nDESCRIPTION: Helm command to install Devtron with Google Cloud Storage for storing build logs and cache. This configuration requires GCP service account credentials in JSON format and bucket names for cache and logs.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai\n\nhelm repo update devtron\n\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--set configs.BLOB_STORAGE_PROVIDER=GCP \\\n--set secrets.BLOB_STORAGE_GCP_CREDENTIALS_JSON=eyJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsInByb2plY3RfaWQiOiAiPHlvdXItcHJvamVjdC1pZD4iLCJwcml2YXRlX2tleV9pZCI6ICI8eW91ci1wcml2YXRlLWtleS1pZD4iLCJwcml2YXRlX2tleSI6ICI8eW91ci1wcml2YXRlLWtleT4iLCJjbGllbnRfZW1haWwiOiAiPHlvdXItY2xpZW50LWVtYWlsPiIsImNsaWVudF9pZCI6ICI8eW91ci1jbGllbnQtaWQ+IiwiYXV0aF91cmkiOiAiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLCJ0b2tlbl91cmkiOiAiaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW4iLCJhdXRoX3Byb3ZpZGVyX3g1MDlfY2VydF91cmwiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YxL2NlcnRzIiwiY2xpZW50X3g1MDlfY2VydF91cmwiOiAiPHlvdXItY2xpZW50LWNlcnQtdXJsPiJ9Cg== \\\n--set configs.DEFAULT_CACHE_BUCKET=cache-bucket \\\n--set configs.DEFAULT_BUILD_LOGS_BUCKET=log-bucket\n```\n\n----------------------------------------\n\nTITLE: Custom Randomization Function for Complex Structures in Go\nDESCRIPTION: Illustrates how to create a custom randomization function for a complex struct with enum types and conditional fields.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/google/gofuzz/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype MyEnum string\nconst (\n        A MyEnum = \"A\"\n        B MyEnum = \"B\"\n)\ntype MyInfo struct {\n        Type MyEnum\n        AInfo *string\n        BInfo *string\n}\n\nf := fuzz.New().NilChance(0).Funcs(\n        func(e *MyInfo, c fuzz.Continue) {\n                switch c.Intn(2) {\n                case 0:\n                        e.Type = A\n                        c.Fuzz(&e.AInfo)\n                case 1:\n                        e.Type = B\n                        c.Fuzz(&e.BInfo)\n                }\n        },\n)\n\nvar myObject MyInfo\nf.Fuzz(&myObject) // Type will correspond to whether A or B info is set.\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override in Devtron Deployment\nDESCRIPTION: Replaces the release fullname created by default by Devtron, which is used to construct Kubernetes object names. By default, Devtron uses {app-name}-{environment-name}.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts\nDESCRIPTION: Specifies mount paths for volumes in Kubernetes pods.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee\n```\n\n----------------------------------------\n\nTITLE: RBAC Environment Variables Configuration in Markdown\nDESCRIPTION: Configuration table defining RBAC-related environment variables including cache settings and enforcer configurations. Includes variable types, default values, and deprecation status.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/env_gen.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Key   | Type     | Default Value     | Description       | Example       | Deprecated       |\n|-------|----------|-------------------|-------------------|-----------------------|------------------|\n | ENFORCER_CACHE | bool |false |  |  | false |\n | ENFORCER_CACHE_EXPIRATION_IN_SEC | int |86400 |  |  | false |\n | ENFORCER_MAX_BATCH_SIZE | int |1 |  |  | false |\n | USE_CASBIN_V2 | bool |true |  |  | false |\n```\n\n----------------------------------------\n\nTITLE: Using ExponentialHistogram as Aggregation in OpenTelemetry Go SDK\nDESCRIPTION: Configuration for exponential histogram aggregation in OpenTelemetry Go SDK using a view with ExponentialHistogram as the aggregation type.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n\"go.opentelemetry.io/otel/sdk/metric\".ExponentialHistogram\n```\n\n----------------------------------------\n\nTITLE: Using go mod to replace gRPC import path\nDESCRIPTION: This shell script demonstrates how to use go mod to create an alias for the gRPC package when the google.golang.org domain is inaccessible. It replaces the import path with a GitHub repository and updates the module dependencies.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest\ngo mod tidy\ngo mod vendor\ngo build -mod=vendor\n```\n\n----------------------------------------\n\nTITLE: Traditional error handling in Go\nDESCRIPTION: Demonstrates the traditional error handling pattern in Go that returns errors without context or debugging information.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n        return err\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fullname Override\nDESCRIPTION: Override configuration for the release fullname in Kubernetes object names\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Creating User Not Found Error in Go\nDESCRIPTION: NewUserNotFound returns an error which wraps err and satisfies IsUserNotFound(). It takes an error and a message string as parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc NewUserNotFound(err error, msg string) error\n```\n\n----------------------------------------\n\nTITLE: Setting Sparse Array Value\nDESCRIPTION: Example of setting an array value beyond the current array length\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/sjson/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvalue, _ := sjson.Set(`{\"friends\":[\"Andy\",\"Carol\"]}`, \"friends.4\", \"Sara\")\nprintln(value)\n```\n\n----------------------------------------\n\nTITLE: Installing Xorm ORM for Go\nDESCRIPTION: Command for installing the Xorm ORM library using Go's package manager. This installs the main Xorm package from GitHub.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-xorm/xorm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/go-xorm/xorm\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flag Value from FlagSet with pflag\nDESCRIPTION: This snippet demonstrates how to retrieve a flag value from a FlagSet using pflag's helper functions like GetInt().\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ni, err := flagset.GetInt(\"flagname\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage\nDESCRIPTION: Helm commands to configure Azure Blob Storage for build logs and cache.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--reuse-values \\\n--set secrets.AZURE_ACCOUNT_KEY=xxxxxxxxxx \\\n--set configs.BLOB_STORAGE_PROVIDER=AZURE \\\n--set configs.AZURE_ACCOUNT_NAME=test-account \\\n--set configs.AZURE_BLOB_CONTAINER_CI_LOG=ci-log-container \\\n--set configs.AZURE_BLOB_CONTAINER_CI_CACHE=ci-cache-container\n```\n\n----------------------------------------\n\nTITLE: Boolean Conversion Query Example in GJSON\nDESCRIPTION: Example of using the tilde (~) operator to convert values to boolean before comparison in queries.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/SYNTAX.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vals\": [\n    { \"a\": 1, \"b\": true },\n    { \"a\": 2, \"b\": true },\n    { \"a\": 3, \"b\": false },\n    { \"a\": 4, \"b\": \"0\" },\n    { \"a\": 5, \"b\": 0 },\n    { \"a\": 6, \"b\": \"1\" },\n    { \"a\": 7, \"b\": 1 },\n    { \"a\": 8, \"b\": \"true\" },\n    { \"a\": 9, \"b\": false },\n    { \"a\": 10, \"b\": null },\n    { \"a\": 11 }\n  ]\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nvals.#(b==~true)#.a    >> [1,2,6,7,8]\nvals.#(b==~false)#.a   >> [3,4,5,9,10,11]\n```\n\n----------------------------------------\n\nTITLE: Editing Devtron ConfigMap for CI Resource Allocation\nDESCRIPTION: Command to edit the devtron-cm ConfigMap in the devtroncd namespace to allocate more resources for CI workers when using BuildX for multi-platform builds.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/docker-build-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl edit configmap devtron-cm -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: Finding All Matches with Regexp2 in Go\nDESCRIPTION: Implements a function similar to regexp.FindAllString using regexp2. It demonstrates how to find multiple matches in a single input string using the FindNextMatch method.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/dlclark/regexp2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc regexp2FindAllString(re *regexp2.Regexp, s string) []string {\n\tvar matches []string\n\tm, _ := re.FindStringMatch(s)\n\tfor m != nil {\n\t\tmatches = append(matches, m.String())\n\t\tm, _ = re.FindNextMatch(m)\n\t}\n\treturn matches\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logrus as an io.Writer in Go\nDESCRIPTION: Example of using Logrus as an io.Writer interface, allowing it to be used with standard library components that accept writers. This pattern is useful for integrating with the standard HTTP server's error logging.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nw := logger.Writer()\ndefer w.Close()\n\nsrv := http.Server{\n    // create a stdlib log.Logger that writes to\n    // logrus.Logger.\n    ErrorLog: log.New(w, \"\", 0),\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Empty array configuration for container environment variables in Kubernetes pods.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Migration in Kubernetes YAML\nDESCRIPTION: Enables or disables database migration configuration. Used to manage database schema changes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Checking Failed Jobs in Devtron Installation\nDESCRIPTION: This command lists all jobs in the devtroncd namespace, allowing users to identify which jobs have failed during the Devtron installation process.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get jobs -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: Applying Configuration Override Files in Kubernetes\nDESCRIPTION: This command applies the configuration override file to the Kubernetes cluster in the devtroncd namespace. The file contains ConfigMap definitions that override default configurations for Devtron components.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/override-default-devtron-installation-configs.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f file-name -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: Using NULL Conditions in Go with builder\nDESCRIPTION: Examples showing how to create IS NULL and IS NOT NULL conditions using IsNull and NotNull types.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/builder/README.md#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\nimport . \"xorm.io/builder\"\n\nsql, args, _ := ToSQL(IsNull{\"a\"})\n// a IS NULL []\nsql, args, _ := ToSQL(NotNull{\"b\"})\n\t// b IS NOT NULL []\n```\n\n----------------------------------------\n\nTITLE: Retrieving Devtron Dashboard URL\nDESCRIPTION: Command to get the Devtron dashboard URL from the Kubernetes service. This command outputs the hostname of the load balancer that provides access to the Devtron UI.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc -n devtroncd devtron-service \\\n-o jsonpath='{.status.loadBalancer.ingress}'\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git repository in-memory and displaying commit history\nDESCRIPTION: Advanced example showing how to clone a Git repository into memory and print its commit history, similar to the 'git log' command.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-git/go-git/v5/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Clones the given repository in memory, creating the remote, the local\n// branches and fetching the objects, exactly as:\nInfo(\"git clone https://github.com/go-git/go-billy\")\n\nr, err := git.Clone(memory.NewStorage(), nil, &git.CloneOptions{\n    URL: \"https://github.com/go-git/go-billy\",\n})\n\nCheckIfError(err)\n\n// Gets the HEAD history from HEAD, just like this command:\nInfo(\"git log\")\n\n// ... retrieves the branch pointed by HEAD\nref, err := r.Head()\nCheckIfError(err)\n\n\n// ... retrieves the commit history\ncIter, err := r.Log(&git.LogOptions{From: ref.Hash()})\nCheckIfError(err)\n\n// ... just iterates over the commits, printing it\nerr = cIter.ForEach(func(c *object.Commit) error {\n\tfmt.Println(c)\n\treturn nil\n})\nCheckIfError(err)\n```\n\n----------------------------------------\n\nTITLE: Minimum Ready Seconds Configuration\nDESCRIPTION: Defines the minimum time a pod should be ready without crashes to be considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Configuring Winter Soldier for Kubernetes Resource Management in YAML\nDESCRIPTION: This YAML configuration sets up Winter Soldier, a tool for managing Kubernetes resources. It defines actions, time ranges, and selectors for automatically scaling or deleting resources based on specified conditions and schedules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nwinterSoldier:\n  apiVersion: pincher.devtron.ai/v1alpha1 \n  enabled: true\n  annotations: {}\n  labels: {}\n  timeRangesWithZone:\n    timeZone: \"Asia/Kolkata\"\n    timeRanges: \n      - timeFrom: 00:00\n        timeTo: 23:59:59\n        weekdayFrom: Sat\n        weekdayTo: Sun\n      - timeFrom: 00:00\n        timeTo: 08:00\n        weekdayFrom: Mon\n        weekdayTo: Fri\n      - timeFrom: 20:00\n        timeTo: 23:59:59\n        weekdayFrom: Mon\n        weekdayTo: Fri\n  action: scale\n  targetReplicas: [1,1,1]\n  fieldSelector: \n    - AfterTime(AddTime( ParseTime({{metadata.creationTimestamp}}, '2006-01-02T15:04:05Z'), '10h'), Now())\n```\n\n----------------------------------------\n\nTITLE: Email Format Schema Definition\nDESCRIPTION: JSON Schema example showing how to use the email format validator.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"string\", \"format\": \"email\"}\n```\n\n----------------------------------------\n\nTITLE: Deleting JSON Value\nDESCRIPTION: Example showing how to delete a value from a JSON document\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/sjson/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nvalue, _ := sjson.Delete(`{\"name\":{\"first\":\"Sara\",\"last\":\"Anderson\"}}`, \"name.first\")\nprintln(value)\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in StatefulSet YAML\nDESCRIPTION: Defines the port configuration for application services including envoy ports, service ports, and node ports with HTTP/2 and streaming support options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    nodePort: 32056\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Devtron from Kubernetes Cluster\nDESCRIPTION: This bash script removes all Devtron components from a Kubernetes cluster, including the Helm release, custom resource definitions, workflow configurations, and associated namespaces.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/uninstall-devtron.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm uninstall devtron --namespace devtroncd\n\nkubectl delete -n devtroncd -f https://raw.githubusercontent.com/devtron-labs/charts/main/charts/devtron/crds/crd-devtron.yaml\n\nkubectl delete -n argo -f https://raw.githubusercontent.com/devtron-labs/devtron/main/manifests/yamls/workflow.yaml\n\nkubectl delete ns devtroncd devtron-cd devtron-ci devtron-demo argo\n\n```\n\n----------------------------------------\n\nTITLE: Adding Scope Info to Prometheus Exporter\nDESCRIPTION: Instrumentation Scope and Version are added as info metric and label in the Prometheus exporter. This can be disabled using the WithoutScopeInfo() option.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_21\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/exporters/prometheus.WithoutScopeInfo()\n```\n\n----------------------------------------\n\nTITLE: Implementing Snake Case Key Naming in JSON Schema Reflector\nDESCRIPTION: Configures a JSON schema reflector to convert Go struct field names to snake_case format using an external library.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/invopop/jsonschema/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nr := new(jsonschema.Reflector)\nr.KeyNamer = strcase.SnakeCase // from package github.com/stoewer/go-strcase\n\nr.Reflect(&User{})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Flag Name Normalization with pflag\nDESCRIPTION: This example shows how to set a custom flag name normalization function to handle different separator characters in flag names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc wordSepNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tfrom := []string{\"-\", \"_\"}\n\tto := \".\"\n\tfor _, sep := range from {\n\t\tname = strings.Replace(name, sep, to, -1)\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(wordSepNormalizeFunc)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Logrusr with Logrus in Go\nDESCRIPTION: This snippet demonstrates how to set up and use Logrusr with Logrus in a Go application. It shows the process of creating a new logger, adding context with WithName and WithValues, and logging an info message.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/bombsimon/logrusr/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/bombsimon/logrusr/v2\"\n    \"github.com/go-logr/logr\"\n    \"github.com/sirupsen/logrus\"\n)\n\nfunc main() {\n    logrusLog := logrus.New()\n    log := logrusr.NewLogger(logrusLog)\n\n    log = log.WithName(\"MyName\").WithValues(\"user\", \"you\")\n    log.Info(\"Logr in action!\", \"the answer\", 42)\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional URL Generation for Kubernetes Services\nDESCRIPTION: Template logic that generates appropriate commands to access the application URL based on the service type. Handles Ingress, NodePort, LoadBalancer, and ClusterIP configurations with specific kubectl commands for each scenario.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Go struct for JSON Schema generation\nDESCRIPTION: This snippet demonstrates how to define a Go struct with various field types and JSON schema annotations. It includes examples of custom tags for schema properties like title, description, examples, and enums.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/invopop/jsonschema/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype TestUser struct {\n  ID            int                    `json:\"id\"`\n  Name          string                 `json:\"name\" jsonschema:\"title=the name,description=The name of a friend,example=joe,example=lucy,default=alex\"`\n  Friends       []int                  `json:\"friends,omitempty\" jsonschema_description:\"The list of IDs, omitted when empty\"`\n  Tags          map[string]interface{} `json:\"tags,omitempty\" jsonschema_extras:\"a=b,foo=bar,foo=bar1\"`\n  BirthDate     time.Time              `json:\"birth_date,omitempty\" jsonschema:\"oneof_required=date\"`\n  YearOfBirth   string                 `json:\"year_of_birth,omitempty\" jsonschema:\"oneof_required=year\"`\n  Metadata      interface{}            `json:\"metadata,omitempty\" jsonschema:\"oneof_type=string;array\"`\n  FavColor      string                 `json:\"fav_color,omitempty\" jsonschema:\"enum=red,enum=green,enum=blue\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing YAML Marshaling and Unmarshaling in Go\nDESCRIPTION: This example demonstrates how to use the yaml.v2 package to parse YAML data into Go structs and maps, and then marshal them back to YAML format. It shows struct tag usage for custom field naming and formatting.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/gopkg.in/yaml.v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v2\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 with Access Keys\nDESCRIPTION: Helm commands to configure AWS S3 bucket storage using access key and secret key authentication.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--reuse-values \\\n--set configs.BLOB_STORAGE_PROVIDER=S3 \\\n--set configs.DEFAULT_CACHE_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CACHE_BUCKET_REGION=us-east-1 \\\n--set configs.DEFAULT_BUILD_LOGS_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CD_LOGS_BUCKET_REGION=us-east-1 \\\n--set secrets.BLOB_STORAGE_S3_ACCESS_KEY=<access-key> \\\n--set secrets.BLOB_STORAGE_S3_SECRET_KEY=<secret-key>\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Migration Settings\nDESCRIPTION: Enables or disables database migration functionality. When enabled, database schema changes can be automatically applied during deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Registering Azure AD Application with Certificate using Azure CLI\nDESCRIPTION: These commands create a certificate, register an Azure AD application with the certificate, and create a service principal.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/autorest/adal/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nopenssl genrsa -out \"example-app.key\" 2048\n```\n\nLANGUAGE: Bash\nCODE:\n```\nopenssl req -new -key \"example-app.key\" -subj \"/CN=example-app\" -out \"example-app.csr\"\nopenssl x509 -req -in \"example-app.csr\" -signkey \"example-app.key\" -out \"example-app.crt\" -days 10000\n```\n\nLANGUAGE: Bash\nCODE:\n```\nopenssl pkcs12 -export -out \"example-app.pfx\" -inkey \"example-app.key\" -in \"example-app.crt\" -passout pass:\n```\n\nLANGUAGE: Bash\nCODE:\n```\ncertificateContents=\"$(tail -n+2 \"example-app.crt\" | head -n-1)\"\n\naz ad app create \\\n   --display-name example-app \\\n   --homepage https://example-app/home \\\n   --identifier-uris https://example-app/app \\\n   --key-usage Verify --end-date 2018-01-01 \\\n   --key-value \"${certificateContents}\"\n```\n\nLANGUAGE: Bash\nCODE:\n```\naz ad sp create --id \"APPLICATION_ID\"\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron Beta Version\nDESCRIPTION: Installation steps for Devtron beta version using local chart repository\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-helm-3.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone [https://github.com/devtron-labs/devtron.git](https://github.com/devtron-labs/devtron.git)\n$ cd devtron/charts/devtron\n$ helm dependency up\n$ #modify values in values.yaml\n$ helm install devtron . --create-namespace --namespace devtroncd \\\n--set installer.modules={cicd}\n```\n\n----------------------------------------\n\nTITLE: Configuring Span Limits with Environment Variables in Go\nDESCRIPTION: Example of environment variables that can be used to configure span limits in the OpenTelemetry Go SDK. These variables control attributes, events, links and their limits.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_23\n\nLANGUAGE: Go\nCODE:\n```\nOTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT\nOTEL_SPAN_ATTRIBUTE_COUNT_LIMIT\nOTEL_SPAN_EVENT_COUNT_LIMIT\nOTEL_EVENT_ATTRIBUTE_COUNT_LIMIT\nOTEL_SPAN_LINK_COUNT_LIMIT\nOTEL_LINK_ATTRIBUTE_COUNT_LIMIT\n```\n\n----------------------------------------\n\nTITLE: Adding Callback Function Type in Go OpenTelemetry Metric\nDESCRIPTION: Introduces the Callback function type that can be registered with a Meter in the OpenTelemetry metric package.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/metric.Callback\n```\n\n----------------------------------------\n\nTITLE: Setting Grace Period for Kubernetes Pod Termination\nDESCRIPTION: Specifies the termination grace period for pods. Kubernetes waits for this duration before forcefully terminating pods, allowing for graceful shutdown and cleanup operations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Pause Before Switching Active Container in YAML\nDESCRIPTION: This YAML snippet defines the configuration for pausing before switching to an active container. It specifies the duration to wait in seconds.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Annotating and Labeling Devtron Resources for Helm Management\nDESCRIPTION: These commands apply Helm-specific labels and annotations to all Devtron resources in the devtroncd namespace to ensure they are properly managed by Helm during the upgrade process. This includes deployments, services, secrets, config maps, service accounts, roles, and cluster resources.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.3.x-0.4.x.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd label all --all \"app.kubernetes.io/managed-by=Helm\"\nkubectl -n devtroncd annotate all --all \"meta.helm.sh/release-name=$RELEASE_NAME\" \"meta.helm.sh/release-namespace=devtroncd\"\nkubectl -n devtroncd label secret --all \"app.kubernetes.io/managed-by=Helm\"\nkubectl -n devtroncd annotate secret --all \"meta.helm.sh/release-name=$RELEASE_NAME\" \"meta.helm.sh/release-namespace=devtroncd\"\nkubectl -n devtroncd label cm --all \"app.kubernetes.io/managed-by=Helm\"\nkubectl -n devtroncd annotate cm --all \"meta.helm.sh/release-name=$RELEASE_NAME\" \"meta.helm.sh/release-namespace=devtroncd\"\nkubectl -n devtroncd label sa --all \"app.kubernetes.io/managed-by=Helm\"\nkubectl -n devtroncd annotate sa --all \"meta.helm.sh/release-name=$RELEASE_NAME\" \"meta.helm.sh/release-namespace=devtroncd\"\nkubectl label clusterrole devtron \"app.kubernetes.io/managed-by=Helm\"\nkubectl annotate clusterrole devtron \"meta.helm.sh/release-name=$RELEASE_NAME\" \"meta.helm.sh/release-namespace=devtroncd\"\nkubectl label clusterrolebinding devtron \"app.kubernetes.io/managed-by=Helm\"\nkubectl annotate clusterrolebinding devtron \"meta.helm.sh/release-name=$RELEASE_NAME\" \"meta.helm.sh/release-namespace=devtroncd\"\nkubectl -n devtroncd label role --all \"app.kubernetes.io/managed-by=Helm\"\nkubectl -n devtroncd annotate role --all \"meta.helm.sh/release-name=$RELEASE_NAME\" \"meta.helm.sh/release-namespace=devtroncd\"\nkubectl -n devtroncd label rolebinding --all \"app.kubernetes.io/managed-by=Helm\"\nkubectl -n devtroncd annotate rolebinding --all \"meta.helm.sh/release-name=$RELEASE_NAME\" \"meta.helm.sh/release-namespace=devtroncd\"\n```\n\n----------------------------------------\n\nTITLE: Using klog in Go Applications with Global Flags\nDESCRIPTION: Code snippet showing how to initialize klog with global flags. This is required when replacing glog as klog no longer uses init() to register flags.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/k8s.io/klog/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nklog.InitFlags(nil)\n```\n\n----------------------------------------\n\nTITLE: TOML Struct Tags Example\nDESCRIPTION: Shows how to use struct tags to map TOML keys to differently named struct fields.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/BurntSushi/toml/README.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nsome_key_NAME = \"wat\"\n```\n\nLANGUAGE: go\nCODE:\n```\ntype TOML struct {\n    ObscureKey string `toml:\"some_key_NAME\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling JSON to a Map with GJSON in Go\nDESCRIPTION: Shows how to convert JSON to a map[string]interface{} using GJSON's Parse and Value methods, including a type assertion to ensure the result is a map.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nm, ok := gjson.Parse(json).Value().(map[string]interface{})\nif !ok {\n\t// not a map\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing ANSI Sequence Example in Go\nDESCRIPTION: This snippet demonstrates how the parser processes an ANSI sequence for Cursor Up (ESC[A). It shows the character stream input and the resulting function call on the event handler.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-ansiterm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n\"ESC, [, A\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving SSH Config Values in Go\nDESCRIPTION: Demonstrates how to retrieve a single SSH configuration value for a specific host using the Get() function. This example shows getting the Port configuration for 'myhost'.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/kevinburke/ssh_config/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nport := ssh_config.Get(\"myhost\", \"Port\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress in Kubernetes YAML\nDESCRIPTION: Defines internal ingress settings for private access to the application. It includes configurations similar to the public ingress but for internal network access.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Simple Parsing and Getting Values in JSON with GJSON in Go\nDESCRIPTION: Demonstrates various equivalent ways to parse and access JSON data using GJSON, including chaining Get methods and using dot notation for path access.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ngjson.Parse(json).Get(\"name\").Get(\"last\")\ngjson.Get(json, \"name\").Get(\"last\")\ngjson.Get(json, \"name.last\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Commands in Kubernetes YAML\nDESCRIPTION: Specifies the command to be run in the container. Includes an enable flag and an array for command values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Creating Not Assigned Error with Formatting in Go\nDESCRIPTION: NotAssignedf returns an error which satisfies IsNotAssigned(). It takes a format string and optional arguments for formatting.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc NotAssignedf(format string, args ...interface{}) error\n```\n\n----------------------------------------\n\nTITLE: Appending Array Value\nDESCRIPTION: Example showing how to append a value to a JSON array using -1 index\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/sjson/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvalue, _ := sjson.Set(`{\"friends\":[\"Andy\",\"Carol\"]}`, \"friends.-1\", \"Sara\")\nprintln(value)\n```\n\n----------------------------------------\n\nTITLE: Additional Trace Operations in Go\nDESCRIPTION: Shows how to get the total time of a trace and how to log a trace unconditionally regardless of its duration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/k8s.io/utils/trace/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nopTrace.TotalTime() // Duration since the Trace was created\nopTrace.Log() // unconditionally log the trace\n```\n\n----------------------------------------\n\nTITLE: Server Deployment Configuration\nDESCRIPTION: Specifies server deployment settings including image and tag.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Counting Records with XORM in Go\nDESCRIPTION: Shows how to count records in the database using XORM.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\ncounts, err := engine.Count(&user)\n// SELECT count(*) AS total FROM user\n```\n\n----------------------------------------\n\nTITLE: Accessing Flag Values with pflag\nDESCRIPTION: This example shows how to access the values of parsed flags using pflag. It demonstrates accessing both pointer-based and value-based flags.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(\"ip has value \", *ip)\nfmt.Println(\"flagvar has value \", flagvar)\n```\n\n----------------------------------------\n\nTITLE: Defining ACL Model Configuration in Casbin INI Format\nDESCRIPTION: This snippet shows the basic Access Control List (ACL) model configuration in Casbin's INI format. It defines request structure, policy structure, policy effect, and matching rules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/casbin/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Request definition\n[request_definition]\nr = sub, obj, act\n\n# Policy definition\n[policy_definition]\np = sub, obj, act\n\n# Policy effect\n[policy_effect]\ne = some(where (p.eft == allow))\n\n# Matchers\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n\n```\n\n----------------------------------------\n\nTITLE: Installing go-git using Go modules\nDESCRIPTION: Shows how to import go-git in a Go project with and without Go modules enabled.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-git/go-git/v5/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/go-git/go-git/v5\" // with go modules enabled (GO111MODULE=on or outside GOPATH)\nimport \"github.com/go-git/go-git\" // with go modules disabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service\nDESCRIPTION: Service configuration defining the type and annotations for Kubernetes service.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Database Migration Configuration\nDESCRIPTION: Simple configuration flag for enabling or disabling database migration functionality.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Applying Migrator YAML in Devtron\nDESCRIPTION: This command applies the modified migrator.yaml file to recreate failed jobs in the devtroncd namespace, completing the installation process.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f migrator.yaml -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: Preparing Plugin Variables for CI Runner in Go\nDESCRIPTION: Defines the structure and logic for preparing plugin variables to be sent to the CI runner, including variable type determination and value setting.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/developers-guide/PluginIntegrationVariableInfo&Flow.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nInput Variables:\n\n\tName                         string\n\tFormat                       string \n\tValue                        string                       \n\tVariableType                 VariableType  \n\tReferenceVariableStepIndex   int                                 \n\tReferenceVariableName        string                             \n\nOutput Variables:\n\n\tName                         string\n\tFormat                       string \n\tVariableType                 VariableType   \n\t\nwhere,\n\nVariableType = [\"VALUE\", \"REF_PRE_CI\", \"REF_POST_CI\", \"REF_GLOBAL, \"REF_PLUGIN\"]\n```\n\nLANGUAGE: go\nCODE:\n```\nvariable -> object from db\nvariableData -> object to be sent to ci runner\nif variable.ValueType == \"NEW {\n\tvariableData.VariableType = \"VALUE\"\n} else if variable.ValueType == \"GLOBAL\" {\n\tvariableData.VariableType = \"REF_GLOBAL\"\n} else if variable.ValueType == \"FROM_PREVIOUS_STEP {\n\tvariableData.VariableType = \"REF_PLUGIN\"\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nvariable -> object from db\nvariableData -> object to be sent to ci runner\n\nif variable.DefaultValue == \"\" {\n\t//no default value; will use value received from user, as it must be exposed\n\tvariableData.Value = variable.Value\n} else {\n    if variable.IsExposed {\n\t    //this value will be empty as value is set in plugin_stage_step_variable\n\t    //& that variable is sent in pre/post steps data\n\t    variableData.Value = variable.Value\n    } else {\n\t    variableData.Value = variable.DefaultValue\n    }\n}\n\nNote - here we are assuming, only validated data is saved in db(that either we will have defaultValue/value in object from db)\n```\n\n----------------------------------------\n\nTITLE: Using Expr Condition in Go with builder\nDESCRIPTION: Examples showing how to use the Expr type to create custom SQL expressions, including parameterized expressions and subqueries.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/builder/README.md#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nimport . \"xorm.io/builder\"\n\nsql, args, _ := ToSQL(Expr(\"a = ? \", 1))\n// a = ? [1]\nsql, args, _ := ToSQL(Eq{\"a\": Expr(\"select id from table where c = ?\", 1)})\n// a=(select id from table where c = ?) [1]\n```\n\n----------------------------------------\n\nTITLE: User ID Format Checker Implementation\nDESCRIPTION: Implementation of a custom format checker for validating user IDs against a database.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype ValidUserIdFormatChecker struct {}\n\nfunc (f ValidUserIdFormatChecker) IsFormat(input interface{}) bool {\n    asFloat64, ok := input.(float64)\n    if ok == false {\n        return false\n    }\n    return true\n}\n\ngojsonschema.FormatCheckers.Add(\"ValidUserId\", ValidUserIdFormatChecker{})\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Deployment in Kubernetes YAML\nDESCRIPTION: Defines server deployment settings, including image tag and image URL for a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Checking Current Devtron Version with kubectl\nDESCRIPTION: Command to retrieve the current version of Devtron installed in the cluster by extracting it from the installer-devtron resource in the devtroncd namespace.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.3.x-0.3.x.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get installers installer-devtron -o jsonpath='{.status.sync.data}' | grep \"^LTAG=\" | cut -d\"=\" -f2-\n```\n\n----------------------------------------\n\nTITLE: Implementing Getter and Setter Methods for TemplateChartRequest in Go\nDESCRIPTION: Defines getter and setter methods for each property of TemplateChartRequest. Each getter returns the field value and a boolean indicating if it's set, while setters update the field value.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/TemplateChartRequest.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc (o *TemplateChartRequest) GetEnvironmentId() int32 {\n\tif o == nil || o.EnvironmentId == nil {\n\t\tvar ret int32\n\t\treturn ret\n\t}\n\treturn *o.EnvironmentId\n}\n\nfunc (o *TemplateChartRequest) GetEnvironmentIdOk() (*int32, bool) {\n\tif o == nil || o.EnvironmentId == nil {\n\t\treturn nil, false\n\t}\n\treturn o.EnvironmentId, true\n}\n\nfunc (o *TemplateChartRequest) SetEnvironmentId(v int32) {\n\to.EnvironmentId = &v\n}\n\nfunc (o *TemplateChartRequest) HasEnvironmentId() bool {\n\tif o != nil && o.EnvironmentId != nil {\n\t\treturn true\n\t}\n\n\treturn false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaling in YAML\nDESCRIPTION: Defines autoscaling settings connected to HPA, controlling scaling up and down in response to request load.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nautoscaling:\n  enabled: false\n  MinReplicas: 1\n  MaxReplicas: 2\n  TargetCPUUtilizationPercentage: 90\n  TargetMemoryUtilizationPercentage: 80\n  extraMetrics: []\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override in Kubernetes Deployment (YAML)\nDESCRIPTION: Overrides the release fullname created by default by Devtron, which is used to construct Kubernetes object names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Defining a Multipath with JSON Literals in GJSON\nDESCRIPTION: Demonstrates how to use JSON literals in a multipath query. The example shows selecting existing fields (name.first, age) while adding new static fields (company, employed) using the '!' declaration character.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/SYNTAX.md#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n{name.first,age,\"company\":!\"Happysoft\",\"employed\":!true}\n```\n\n----------------------------------------\n\nTITLE: Defining otlp/gRPC Status Codes for Retry Policy\nDESCRIPTION: A table showing the gRPC status codes that are defined as transient errors for the OTLP/gRPC exporter retry policy.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n| gRPC Status Code | Description |\n| ---------------- | ----------- |\n| 1  | Cancelled |\n| 4  | Deadline Exceeded |\n| 8  | Resource Exhausted |\n| 10 | Aborted |\n| 10 | Out of Range |\n| 14 | Unavailable |\n| 15 | Data Loss |\n```\n\n----------------------------------------\n\nTITLE: Building Query Conditions with XORM in Go\nDESCRIPTION: Demonstrates how to use XORM's query builder to construct complex query conditions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\nerr := engine.Where(builder.NotIn(\"a\", 1, 2).And(builder.In(\"b\", \"c\", \"d\", \"e\"))).Find(&users)\n// SELECT id, name ... FROM user WHERE a NOT IN (?, ?) AND b IN (?, ?, ?)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Admin Password for Devtron versions below v0.6.0\nDESCRIPTION: Command to extract the admin password from Kubernetes secrets for Devtron versions earlier than v0.6.0. The command gets the ACD_PASSWORD field from the devtron-secret in the devtroncd namespace and decodes it from base64.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get secret devtron-secret \\\n-o jsonpath='{.data.ACD_PASSWORD}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Computing Unary Request Error Percentage\nDESCRIPTION: Calculates the percentage of failed unary requests by service. Useful for SLA monitoring to ensure error rates stay below acceptable thresholds.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_10\n\nLANGUAGE: jsoniq\nCODE:\n```\nsum(rate(grpc_server_handled_total{job=\"foo\",grpc_type=\"unary\",grpc_code!=\"OK\"}[1m])) by (grpc_service)\n / \nsum(rate(grpc_server_started_total{job=\"foo\",grpc_type=\"unary\"}[1m])) by (grpc_service)\n * 100.0\n```\n\n----------------------------------------\n\nTITLE: Preparing, Sending, and Responding to HTTP Requests in Go\nDESCRIPTION: Demonstrates the typical pattern for preparing an HTTP request, sending it, and responding to it using go-autorest decorators.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nreq, err := Prepare(&http.Request{},\n  token.WithAuthorization())\n\nresp, err := Send(req,\n  WithLogging(logger),\n  DoErrorIfStatusCode(http.StatusInternalServerError),\n  DoCloseIfError(),\n  DoRetryForAttempts(5, time.Second))\n\nerr = Respond(resp,\n\t\tByDiscardingBody(),\n  ByClosing())\n```\n\n----------------------------------------\n\nTITLE: AWS SDK Checksum Module Release Notes - v1.1.0\nDESCRIPTION: Release notes entry for version 1.1.0 documenting changes to checksum validation logic, requiring opt-in for output response payload validation and updating dependencies.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/internal/checksum/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.1.0 (2022-03-08)\n\n* **Feature**:  Updates the SDK's checksum validation logic to require opt-in to output response payload validation. The SDK was always preforming output response payload checksum validation, not respecting the output validation model option. Fixes [#1606](https://github.com/aws/aws-sdk-go-v2/issues/1606)\n* **Feature**: Updated `github.com/aws/smithy-go` to latest version\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress in YAML\nDESCRIPTION: Defines ingress settings for public access to the URL. Includes options for enabling, class name, annotations, hosts, paths, and TLS configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Adding Go Flags to pflag FlagSet\nDESCRIPTION: This example shows how to add flags defined using Go's native flag package to a pflag FlagSet, allowing support for third-party dependencies.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tgoflag \"flag\"\n\tflag \"github.com/spf13/pflag\"\n)\n\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n\nfunc main() {\n\tflag.CommandLine.AddGoFlagSet(goflag.CommandLine)\n\tflag.Parse()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Pod for Curl Commands\nDESCRIPTION: This command creates a temporary pod with curl utility, used for executing various curl commands to configure Grafana in Devtron.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl run --rm -it --image quay.io/devtron/k8s-utils:tutum-curl curl\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode for Linting with golangci-lint\nDESCRIPTION: JSON configuration for setting up golangci-lint in VSCode. This enables automatic linting on save for Go packages.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Microsoft/go-winio/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"go.lintTool\": \"golangci-lint\",\n    \"go.lintOnSave\": \"package\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Go Get Command for Contrib Repository Module\nDESCRIPTION: This snippet shows how to use the go get command to fetch a specific version of a module from the contrib repository, including version information in the module path and version specifier.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo get go.opentelemetry.io/contrib/instrumentation/host/v2@v2.0.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Pause Before Switch Active in Kubernetes YAML\nDESCRIPTION: Specifies a wait period before switching the container to active state. This allows for any necessary startup procedures to complete.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Resource Validation Rules for Kubernetes Deployments\nDESCRIPTION: Validation rules for CPU and memory resource specifications in Kubernetes deployments. These rules ensure that resource limits are always greater than or equal to resource requests for both the main container and the Envoy proxy sidecar.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nresources.limits.cpu >= resources.requests.cpu\nresources.limits.memory >= resources.requests.memory\nenvoyproxy.resources.limits.cpu >= envoyproxy.resources.requests.cpu\nenvoyproxy.resources.limits.memory >= envoyproxy.resources.requests.memory\n```\n\n----------------------------------------\n\nTITLE: Upgrading Devtron to Specific Target Version\nDESCRIPTION: This command upgrades Devtron to a specified target version using the devtron-operator Helm chart. It sets the target version as a variable and uses the appropriate Bill of Materials file for that version.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.3.x-0.4.x.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nDEVTRON_TARGET_VERSION=v0.4.x\n\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd \\\n-f https://raw.githubusercontent.com/devtron-labs/devtron/$DEVTRON_TARGET_VERSION/charts/devtron/devtron-bom.yaml \\\n--set installer.modules={cicd} --reuse-values\n```\n\n----------------------------------------\n\nTITLE: Basic Boolean Expression Evaluation in Go\nDESCRIPTION: Shows how to create and evaluate a simple boolean expression without parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Knetic/govaluate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexpression, err := govaluate.NewEvaluableExpression(\"10 > 0\");\nresult, err := expression.Evaluate(nil);\n// result is now set to \"true\", the bool value.\n```\n\n----------------------------------------\n\nTITLE: Colorizing JSON Output with pretty.Color\nDESCRIPTION: Go code example showing how to colorize JSON for terminal output.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/pretty/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nresult = pretty.Color(json, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagger for Canary Releases in YAML\nDESCRIPTION: Defines Flagger configuration for canary releases with deployment objects, supporting flexible traffic routing with Istio service mesh.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nflaggerCanary:\n  addOtherGateways: []\n  addOtherHosts: []\n  analysis:\n    interval: 15s\n    maxWeight: 50\n    stepWeight: 5\n    threshold: 5\n  annotations: {}\n  appProtocol: http\n  corsPolicy:\n    allowCredentials: false\n    allowHeaders:\n      - x-some-header\n    allowMethods:\n      - GET\n    allowOrigin:\n      - example.com\n    maxAge: 24h\n  createIstioGateway:\n    annotations: {}\n    enabled: false\n    host: example.com\n    labels: {}\n    tls:\n      enabled: false\n      secretName: example-tls-secret\n  enabled: false\n  gatewayRefs: null\n  headers:\n    request:\n      add:\n        x-some-header: value\n  labels: {}\n  loadtest:\n    enabled: true\n    url: http://flagger-loadtester.istio-system/\n  match:\n    - uri:\n        prefix: /\n  port: 8080\n  portDiscovery: true\n  retries: null\n  rewriteUri: /\n  targetPort: 8080\n  thresholds:\n    latency: 500\n    successRate: 90\n  timeout: null\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Security Context\nDESCRIPTION: Example of setting pod-level security context including user, group and filesystem permissions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Using Atomic Operations with Uber Atomic Package in Go\nDESCRIPTION: Example of using the atomic package to perform thread-safe operations on an unsigned 32-bit integer. Shows storing a value, subtracting from it, and using Compare-And-Swap (CAS).\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.uber.org/atomic/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar atom atomic.Uint32\natom.Store(42)\natom.Sub(2)\natom.CAS(40, 11)\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Ingress Format in Kubernetes\nDESCRIPTION: YAML configuration for legacy deployments using the older ingress format. Includes a single host and path configuration with ingress class annotation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  path: \"\"\n  host: \"\"\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Using CamelCase Package to Split Strings in Go\nDESCRIPTION: Example of how to use the CamelCase package to split a camelcase string into individual words. It demonstrates importing the package, splitting a string, and printing the results.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/fatih/camelcase/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nsplitted := camelcase.Split(\"GolangPackage\")\n\nfmt.Println(splitted[0], splitted[1]) // prints: \"Golang\", \"Package\"\n```\n\n----------------------------------------\n\nTITLE: Type Assertion with Multierror in Go\nDESCRIPTION: Demonstrates how to check and access the underlying errors using type assertion when working with multierror values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif err := something(); err != nil {\n\tif merr, ok := err.(*multierror.Error); ok {\n\t\t// Use merr.Errors\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Scanning JSON with Custom Path Actions in Go\nDESCRIPTION: Shows how to use the Scan method with PathActions to extract specific values from a JSON structure. This example extracts the 'A' (Alpha) value from each 'Point' object in the 'colors' array.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/exponent-io/jsonpath/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar j = []byte(`{\"colors\":[\n  {\"Space\": \"YCbCr\", \"Point\": {\"Y\": 255, \"Cb\": 0, \"Cr\": -10, \"A\": 58}},\n  {\"Space\": \"RGB\",   \"Point\": {\"R\": 98, \"G\": 218, \"B\": 255, \"A\": 231}}\n]}`)\n\nvar actions PathActions\n\n// Extract the value at Point.A\nactions.Add(func(d *Decoder) error {\n  var alpha int\n  err := d.Decode(&alpha)\n  fmt.Printf(\"Alpha: %v\\n\", alpha)\n  return err\n}, \"Point\", \"A\")\n\nw := NewDecoder(bytes.NewReader(j))\nw.SeekTo(\"colors\", 0)\n\nvar ok = true\nvar err error\nfor ok {\n  ok, err = w.Scan(&actions)\n  if err != nil && err != io.EOF {\n    panic(err)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Tag Name with env Package\nDESCRIPTION: Example demonstrating how to use a different tag name (other than 'env') by setting the Options.TagName value.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/caarlos0/env/v6/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/caarlos0/env/v6\"\n)\n\ntype Config struct {\n\tPassword string `json:\"PASSWORD\"`\n}\n\nfunc main() {\n\tcfg := &Config{}\n\topts := &env.Options{TagName: \"json\"}\n\n\t// Load env vars.\n\tif err := env.Parse(cfg, opts); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Print the loaded data.\n\tfmt.Printf(\"%+v\\n\", cfg.envData)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Function Expression Evaluation in Go\nDESCRIPTION: Demonstrates how to use custom functions within expressions for extended functionality.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Knetic/govaluate/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunctions := map[string]govaluate.ExpressionFunction {\n\t\"strlen\": func(args ...interface{}) (interface{}, error) {\n\t\tlength := len(args[0].(string))\n\t\treturn (float64)(length), nil\n\t},\n}\n\nexpString := \"strlen('someReallyLongInputString') <= 16\"\nexpression, _ := govaluate.NewEvaluableExpressionWithFunctions(expString, functions)\n\nresult, _ := expression.Evaluate(nil)\n// result is now \"false\", the boolean value\n```\n\n----------------------------------------\n\nTITLE: Setting MinReadySeconds in Kubernetes Deployment YAML\nDESCRIPTION: Specifies the minimum number of seconds for which a newly created Pod should be ready without any of its containers crashing, for it to be considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Getting Nested Array Values in JSON with GJSON in Go\nDESCRIPTION: Demonstrates how to extract values from nested arrays in JSON using GJSON. Shows how to get all items matching a path and how to query specific objects within an array using filter conditions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"programmers\": [\n    {\n      \"firstName\": \"Janet\", \n      \"lastName\": \"McLaughlin\", \n    }, {\n      \"firstName\": \"Elliotte\", \n      \"lastName\": \"Hunter\", \n    }, {\n      \"firstName\": \"Jason\", \n      \"lastName\": \"Harold\", \n    }\n  ]\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nresult := gjson.Get(json, \"programmers.#.lastName\")\nfor _, name := range result.Array() {\n\tprintln(name.String())\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nname := gjson.Get(json, `programmers.#(lastName=\"Hunter\").firstName`)\nprintln(name.String())  // prints \"Elliotte\"\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Steps in SQL\nDESCRIPTION: SQL statement for defining individual plugin steps in the plugin_step table. Steps can be inline or reference another plugin, and they execute in the order specified by their index values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/developers-guide/PluginCreationStep.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO \"plugin_step\" (\"id\", \"plugin_id\",\"name\",\"description\",\"index\",\"step_type\",\"script_id\",\"ref_plugin_id\",\"deleted\", \"created_on\", \"created_by\", \"updated_on\", \"updated_by\") VALUES\n(nextval('id_seq_plugin_step'), 'id-from-plugin_metadata','name_of_step','description_of_step','index_of_step-start-from-1','INLINE/REF_PLUGIN','id_from_script_table','id-of-ref-plugin-get-from-plugin_metadata','f','now()', 'user_id', 'now()', 'user_id');\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository with In-Memory Filesystem in Go\nDESCRIPTION: Demonstrates how to initialize a Git repository using an in-memory filesystem implementation in go-git.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-git/go-git/v5/EXTENDING.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfs := memfs.New()\nr, err := git.Init(memory.NewStorage(), fs)\n```\n\n----------------------------------------\n\nTITLE: Importing go-restful With Go Modules\nDESCRIPTION: Shows how to import the go-restful package for version v3.0.0 and above that support Go modules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/emicklei/go-restful/v3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\trestful \"github.com/emicklei/go-restful/v3\"\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Record Existence with XORM in Go\nDESCRIPTION: Demonstrates various ways to check if a record exists in the database using XORM, including condition-based checks and raw SQL.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nhas, err := testEngine.Exist(new(RecordExist))\n// SELECT * FROM record_exist LIMIT 1\n\nhas, err = testEngine.Exist(&RecordExist{\n\t\tName: \"test1\",\n\t})\n// SELECT * FROM record_exist WHERE name = ? LIMIT 1\n\nhas, err = testEngine.Where(\"name = ?\", \"test1\").Exist(&RecordExist{})\n// SELECT * FROM record_exist WHERE name = ? LIMIT 1\n\nhas, err = testEngine.SQL(\"select * from record_exist where name = ?\", \"test1\").Exist()\n// select * from record_exist where name = ?\n\nhas, err = testEngine.Table(\"record_exist\").Exist()\n// SELECT * FROM record_exist LIMIT 1\n\nhas, err = testEngine.Table(\"record_exist\").Where(\"name = ?\", \"test1\").Exist()\n// SELECT * FROM record_exist WHERE name = ? LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Pod Grace Period Configuration\nDESCRIPTION: Defines the termination grace period for pods.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Registering Azure AD Application with Secret using Azure CLI\nDESCRIPTION: These commands use the Azure CLI to register a new Azure AD application with a secret credential and create a service principal.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/autorest/adal/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\naz ad app create \\\n   --display-name example-app \\\n   --homepage https://example-app/home \\\n   --identifier-uris https://example-app/app \\\n   --password secret\n```\n\nLANGUAGE: Bash\nCODE:\n```\naz ad sp create --id \"Application ID\"\n```\n\n----------------------------------------\n\nTITLE: Advanced NATS Connection Management in Go\nDESCRIPTION: Demonstrates advanced NATS client connection features including retry on failed connect, connection flushing, auto-unsubscribe, and multiple connection management. Shows how to configure reconnect options and handle connection events.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Normally, the library will return an error when trying to connect and\n// there is no server running. The RetryOnFailedConnect option will set\n// the connection in reconnecting state if it failed to connect right away.\nnc, err := nats.Connect(nats.DefaultURL,\n    nats.RetryOnFailedConnect(true),\n    nats.MaxReconnects(10),\n    nats.ReconnectWait(time.Second),\n    nats.ReconnectHandler(func(_ *nats.Conn) {\n        // Note that this will be invoked for the first asynchronous connect.\n    }))\nif err != nil {\n    // Should not return an error even if it can't connect, but you still\n    // need to check in case there are some configuration errors.\n}\n\n// Flush connection to server, returns when all messages have been processed.\nnc.Flush()\nfmt.Println(\"All clear!\")\n\n// FlushTimeout specifies a timeout value as well.\nerr := nc.FlushTimeout(1*time.Second)\nif err != nil {\n    fmt.Println(\"All clear!\")\n} else {\n    fmt.Println(\"Flushed timed out!\")\n}\n\n// Auto-unsubscribe after MAX_WANTED messages received\nconst MAX_WANTED = 10\nsub, err := nc.Subscribe(\"foo\")\nsub.AutoUnsubscribe(MAX_WANTED)\n\n// Multiple connections\nnc1 := nats.Connect(\"nats://host1:4222\")\nnc2 := nats.Connect(\"nats://host2:4222\")\n\nnc1.Subscribe(\"foo\", func(m *Msg) {\n    fmt.Printf(\"Received a message: %s\\n\", string(m.Data))\n})\n\nnc2.Publish(\"foo\", []byte(\"Hello World!\"));\n```\n\n----------------------------------------\n\nTITLE: Setting a Mapper in Core for Go\nDESCRIPTION: Shows how to set a mapper for the database connection. The SameMapper preserves the original field names when mapping between Go structs and database columns.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/core/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ndb.SetMapper(SameMapper())\n```\n\n----------------------------------------\n\nTITLE: User ID Format Schema\nDESCRIPTION: JSON Schema for validating user IDs using a custom format checker.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"integer\", \"format\": \"ValidUserId\"}\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git repository to a local directory\nDESCRIPTION: Basic example that demonstrates cloning a Git repository to a local directory, similar to the 'git clone' command.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-git/go-git/v5/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Clone the given repository to the given directory\nInfo(\"git clone https://github.com/go-git/go-git\")\n\n_, err := git.PlainClone(\"/tmp/foo\", false, &git.CloneOptions{\n    URL:      \"https://github.com/go-git/go-git\",\n    Progress: os.Stdout,\n})\n\nCheckIfError(err)\n```\n\n----------------------------------------\n\nTITLE: Scanning Results into Structs in Core for Go\nDESCRIPTION: Demonstrates scanning query results into Go structs using either field names or field indices for mapping between database columns and struct fields.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/core/README.md#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nrows, _ := db.Query()\nfor rows.Next() {\n    rows.ScanStructByName()\n    rows.ScanStructByIndex()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Migration\nDESCRIPTION: YAML configuration for enabling or disabling database migration. When enabled, this allows for database schema changes to be applied during deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Documenting Changes for Version 8 in Markdown\nDESCRIPTION: This snippet outlines the changes introduced in version 8 of the project. It includes the addition of s2 (snappy) compression, replacement of LRU with TinyLFU for local cache, and a requirement for go-redis v8.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-redis/cache/v9/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## v8\n\n- Added s2 (snappy) compression. That means that v8 can't read the data set by v7.\n- Replaced LRU with TinyLFU for local cache.\n- Requires go-redis v8.\n```\n\n----------------------------------------\n\nTITLE: Defining Err Struct in Go\nDESCRIPTION: Err holds a description of an error along with information about where the error was created. It may be embedded in custom error types to add extra information that this errors package can understand.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\ntype Err struct {\n    // contains filtered or unexported fields\n}\n```\n\n----------------------------------------\n\nTITLE: Container Security Context\nDESCRIPTION: Defines security context for containers including privilege settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Commands for Kubernetes Containers\nDESCRIPTION: Defines a custom command to be executed when the container starts. Overrides the default entrypoint of the container image.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Setting Pause Before Switch Active in Kubernetes Deployment\nDESCRIPTION: This YAML snippet specifies a pause duration before switching active containers in a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress\nDESCRIPTION: YAML configuration for internal Kubernetes ingress settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Adding WithFloat64Callback Option in Go OpenTelemetry Metric Instrument\nDESCRIPTION: Introduces the WithFloat64Callback option for configuring float64 Observer callbacks during creation in the OpenTelemetry metric instrument package.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/metric/instrument.WithFloat64Callback\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with XORM in Go\nDESCRIPTION: Demonstrates how to delete records from the database using XORM, emphasizing the need for conditions in delete operations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\naffected, err := engine.Where(...).Delete(&user)\n// DELETE FROM user Where ...\n\naffected, err := engine.ID(2).Delete(&user)\n// DELETE FROM user Where id = ?\n```\n\n----------------------------------------\n\nTITLE: Creating Global Deployment Template in YAML\nDESCRIPTION: Defines the structure and sources for creating a global deployment template, including values, overrides, and image descriptor templates. It specifies how different components are combined from reference charts and database values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/developers-guide/DeploymentTemplate.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncharts.Values: values.yaml + charts.global_override\ncharts.GlobalOverride: charts.global_override + global_override\ncharts.ReleaseOverrides: release-values.yaml\ncharts.PipelineOverrides: pipeline-values.yaml\ncharts.ImageDescriptorTemplate: image_descriptor_template.json\n```\n\n----------------------------------------\n\nTITLE: Iterating Through JSON Objects and Arrays with GJSON in Go\nDESCRIPTION: Shows how to use the ForEach function in GJSON to iterate through objects or arrays in JSON. The function passes key and value for objects, and only value for arrays.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nresult := gjson.Get(json, \"programmers\")\nresult.ForEach(func(key, value gjson.Result) bool {\n\tprintln(value.String()) \n\treturn true // keep iterating\n})\n```\n\n----------------------------------------\n\nTITLE: Finding and Counting Records with XORM in Go\nDESCRIPTION: Demonstrates the use of FindAndCount method in XORM, which combines finding records with counting total matches.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\nvar users []User\ncounts, err := engine.FindAndCount(&users)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Structured changelog documenting version history with sections for Added, Fixed, and Changed items across multiple releases. Uses Keep a Changelog format and follows Semantic Versioning.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Pallinder/go-randomdata/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [1.2.0] - 2019-06-02\n### Added\n- Spaces in postal code for GB.\n- Add functionality to randomly generate alphanumeric text.\n\n### Fixed\n- Fix race condition that was introduced by relying on privateRand.\n- Fix title with random gender not actually generating a title\n\n## [1.1.0] - 2018-10-31\n\n### Added\n- Generate random locale strings\n- Country localised street names\n- Country localised provinces\n\n### Fixed\n- Generating dates will respect varying number of days in a month\n\n## [1.0.0] - 2018-10-30\n\n### Added\n- This CHANGELOG file to hopefully serve as an evolving example of a\n  standardized open source project CHANGELOG.\n- Enforcing Semver compatability in releases\n\n### Changed\n- Update README.md to include information about release strategy\n- Update README.md to link to CHANGELOG.md\n```\n\n----------------------------------------\n\nTITLE: Setting Global Override Values from UI in YAML\nDESCRIPTION: Describes two cases for setting global override values: for new applications and existing applications. New apps combine app and environment values from reference charts, while existing apps use values from the database.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/developers-guide/DeploymentTemplate.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nCase 1 (new app): app-values.yaml + env-values.yaml\nCase 2 (old app): charts.global_override\n```\n\n----------------------------------------\n\nTITLE: Creating and Submitting a Pull Request with Git\nDESCRIPTION: Step-by-step git commands for contributing to the Cobra project, from forking and cloning to creating a feature branch, committing changes, and creating a pull request.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/cobra/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit clone https://github.com/your_username/cobra && cd cobra\ngit checkout -b my-new-feature\ngit add .\ngit commit -m 'Add some feature'\ngit push origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Deleting PostgreSQL Pod for Image Update\nDESCRIPTION: Command to delete the PostgreSQL pod to force it to restart with updated images\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod -n devtroncd postgresql-postgresql-0\n```\n\n----------------------------------------\n\nTITLE: Verifying Pre-release Changes in OpenTelemetry Go\nDESCRIPTION: Shell commands to verify the changes made by the pre-release process, showing the differences between the current branch and the pre-release branch, and how to merge them if they look correct.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit diff ...prerelease_<module set>_<new tag>\ngit merge prerelease_<module set>_<new tag>\n```\n\n----------------------------------------\n\nTITLE: Creating Fenced Code Blocks in Markdown with Blackfriday\nDESCRIPTION: Example of using fenced code blocks in Markdown with language specification for syntax highlighting. The code is enclosed in triple backticks with an optional language identifier.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```go\nfunc getTrue() bool {\n    return true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting MaxUnavailable in Kubernetes Deployment YAML\nDESCRIPTION: Specifies the maximum number of pods that can be unavailable during the update process. It can be an absolute number or a percentage of the total replicas.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Setting Container Switch Delay\nDESCRIPTION: Configures delay before switching active containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Checking Devtron Release Name with Helm\nDESCRIPTION: Command to list all Helm releases in the devtroncd namespace to identify the Devtron release name.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.4.x-0.5.x.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm list --namespace devtroncd\n```\n\n----------------------------------------\n\nTITLE: Evaluating Simple Boolean Expression in Go using Govaluate\nDESCRIPTION: Creates a simple boolean expression and evaluates it without parameters. The expression checks if 10 is greater than 0, which evaluates to true.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/govaluate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexpression, err := govaluate.NewEvaluableExpression(\"10 > 0\");\nresult, err := expression.Evaluate(nil);\n// result is now set to \"true\", the bool value.\n```\n\n----------------------------------------\n\nTITLE: Setting Nested Value in Empty Document\nDESCRIPTION: Example showing how to set a nested value in an empty JSON document\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/sjson/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvalue, _ := sjson.Set(\"\", \"name.last\", \"Anderson\")\nprintln(value)\n```\n\n----------------------------------------\n\nTITLE: Configuring Volumes in Kubernetes YAML\nDESCRIPTION: Defines volume configurations including empty directories and persistent volume claims for external storage.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Pod Grace Period Configuration\nDESCRIPTION: Configuration for pod termination grace period. Specifies how long Kubernetes should wait before forcefully terminating pods.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Getting Multiple JSON Values at Once with GJSON in Go\nDESCRIPTION: Shows how to retrieve multiple values from a JSON object in a single operation using the GetMany function, which returns an array of results matching the provided paths.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nresults := gjson.GetMany(json, \"name.first\", \"name.last\", \"age\")\n```\n\n----------------------------------------\n\nTITLE: Setting Devtron Release Name Variable\nDESCRIPTION: This command sets the release name of Devtron as a variable for use in subsequent commands. The default value 'devtron' is used but can be replaced with the actual release name from the previous step.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.3.x-0.4.x.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRELEASE_NAME=devtron\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets\nDESCRIPTION: Specifies secrets for pulling images from private registries\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Importing JWT-GO in Go Code\nDESCRIPTION: Code snippet showing how to import the jwt-go package in a Go program. This makes the JWT functionality available in your application.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/golang-jwt/jwt/v4/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/golang-jwt/jwt/v4\"\n```\n\n----------------------------------------\n\nTITLE: ValidatePathPattern for OS-Specific Pattern Validation in Go\nDESCRIPTION: Similar to ValidatePattern but uses the OS path separator. Use this when validating patterns for PathMatch() rather than Match() or Glob(), which require '/' separators regardless of OS.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc ValidatePathPattern(s string) bool\n```\n\n----------------------------------------\n\nTITLE: Copying Directory in Go using copy Library\nDESCRIPTION: This snippet demonstrates how to use the 'copy' library to recursively copy a directory in Go. It shows a simple function call that copies the contents of one directory to another.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/otiai10/copy/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nerr := Copy(\"your/directory\", \"your/directory.copy\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Commands\nDESCRIPTION: Specifies container startup commands configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Installing Cron v3 with Go Modules\nDESCRIPTION: Command to download and install a specific tagged release of cron v3 using Go modules. Requires Go 1.11 or later.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/robfig/cron/v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/robfig/cron/v3@v3.0.0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Records with XORM in Go\nDESCRIPTION: Shows how to retrieve multiple records from the database using XORM, including joins and struct extensions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nvar users []User\nerr := engine.Where(\"name = ?\", name).And(\"age > 10\").Limit(10, 0).Find(&users)\n// SELECT * FROM user WHERE name = ? AND age > 10 limit 10 offset 0\n\ntype Detail struct {\n    Id int64\n    UserId int64 `xorm:\"index\"`\n}\n\ntype UserDetail struct {\n    User `xorm:\"extends\"`\n    Detail `xorm:\"extends\"`\n}\n\nvar users []UserDetail\nerr := engine.Table(\"user\").Select(\"user.*, detail.*\").\n    Join(\"INNER\", \"detail\", \"detail.user_id = user.id\").\n    Where(\"user.name = ?\", name).Limit(10, 0).\n    Find(&users)\n// SELECT user.*, detail.* FROM user INNER JOIN detail WHERE user.name = ? limit 10 offset 0\n```\n\n----------------------------------------\n\nTITLE: Get and Set HAppId Methods in Go\nDESCRIPTION: Methods to get, check existence of, and set the HAppId field for helm-installed applications. The HAppId follows the format \"clusterId|namespace|appName\".\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/RollbackReleaseRequest.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *RollbackReleaseRequest) GetHAppId() string\nfunc (o *RollbackReleaseRequest) GetHAppIdOk() (*string, bool)\nfunc (o *RollbackReleaseRequest) SetHAppId(v string)\nfunc (o *RollbackReleaseRequest) HasHAppId() bool\n```\n\n----------------------------------------\n\nTITLE: Creating a SecureCookie Instance in Go\nDESCRIPTION: This snippet demonstrates how to create a new SecureCookie instance with hash and block keys. The hash key is required for HMAC authentication, while the block key is optional for encryption. It's recommended to use keys of appropriate length for security.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/gorilla/securecookie/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Hash keys should be at least 32 bytes long\nvar hashKey = []byte(\"very-secret\")\n// Block keys should be 16 bytes (AES-128) or 32 bytes (AES-256) long.\n// Shorter keys may weaken the encryption used.\nvar blockKey = []byte(\"a-lot-secret\")\nvar s = securecookie.New(hashKey, blockKey)\n```\n\n----------------------------------------\n\nTITLE: Importing go-restful Without Go Modules\nDESCRIPTION: Shows how to import the go-restful package for versions up to v2.*.* that don't support Go modules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/emicklei/go-restful/v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\trestful \"github.com/emicklei/go-restful\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table for Helm Charts User Roles and Permissions\nDESCRIPTION: This snippet defines a markdown table showing the permissions for different user roles (View Only, View and Edit, Admin, Super Admin) across various actions (View, Deploy, Edit, Delete) for Helm Charts in Devtron.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/authorization/user-access.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| User Roles       | View        | Deploy         | Edit        | Delete        |\n| :---:            |  :---:      |    :---:       |   :---:     |   :---:       |\n| View Only        | Yes         | No             | No          | No            |\n| View and Edit    | Yes         | Yes            | Yes         | No            |\n| Admin            | Yes         | Yes            | Yes         | Yes           |\n| Super Admin      | Yes         | Yes            | Yes         | Yes           |\n```\n\n----------------------------------------\n\nTITLE: Using Context Cache with XORM in Go\nDESCRIPTION: Demonstrates how to use XORM's context cache feature to improve query performance by caching results within a session.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_20\n\nLANGUAGE: Go\nCODE:\n```\nsess := engine.NewSession()\ndefer sess.Close()\n\nvar context = xorm.NewMemoryContextCache()\n\nvar c2 ContextGetStruct\nhas, err := sess.ID(1).ContextCache(context).Get(&c2)\nassert.NoError(t, err)\nassert.True(t, has)\nassert.EqualValues(t, 1, c2.Id)\nassert.EqualValues(t, \"1\", c2.Name)\nsql, args := sess.LastSQL()\nassert.True(t, len(sql) > 0)\nassert.True(t, len(args) > 0)\n\nvar c3 ContextGetStruct\nhas, err = sess.ID(1).ContextCache(context).Get(&c3)\nassert.NoError(t, err)\nassert.True(t, has)\nassert.EqualValues(t, 1, c3.Id)\nassert.EqualValues(t, \"1\", c3.Name)\nsql, args = sess.LastSQL()\nassert.True(t, len(sql) == 0)\nassert.True(t, len(args) == 0)\n```\n\n----------------------------------------\n\nTITLE: Setting MaxSurge for Rolling Updates\nDESCRIPTION: Specifies the maximum number of pods that can be created over the desired number of pods during updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Deployment in Kubernetes YAML\nDESCRIPTION: Specifies server deployment details including image tag and URL. Used for providing server configurations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Basic Environment Variable Parsing in Go\nDESCRIPTION: Demonstrates how to use struct tags to parse environment variables into a configuration struct. Shows support for various types including strings, integers, booleans, durations, and slices with custom separators and default values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/caarlos0/env/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/caarlos0/env\"\n)\n\ntype config struct {\n\tHome         string        `env:\"HOME\"`\n\tPort         int           `env:\"PORT\" envDefault:\"3000\"`\n\tIsProduction bool          `env:\"PRODUCTION\"`\n\tHosts        []string      `env:\"HOSTS\" envSeparator:\":\"`\n\tDuration     time.Duration `env:\"DURATION\"`\n\tTempFolder   string        `env:\"TEMP_FOLDER\" envDefault:\"${HOME}/tmp\" envExpand:\"true\"`\n}\n\nfunc main() {\n\tcfg := config{}\n\terr := env.Parse(&cfg)\n\tif err != nil {\n\t\tfmt.Printf(\"%+v\\n\", err)\n\t}\n\tfmt.Printf(\"%+v\\n\", cfg)\n}\n```\n\n----------------------------------------\n\nTITLE: CD Environment Variables Configuration Table\nDESCRIPTION: Configuration table defining environment variables related to Continuous Delivery operations including ArgoCD settings, pipeline status monitoring, and deployment configurations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/env_gen.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Key   | Type     | Default Value     | Description       | Example       | Deprecated       |\n|-------|----------|-------------------|-------------------|-----------------------|------------------|\n | ARGO_APP_MANUAL_SYNC_TIME | int |3 |  |  | false |\n | CD_HELM_PIPELINE_STATUS_CRON_TIME | string |*/2 * * * * |  |  | false |\n | CD_PIPELINE_STATUS_CRON_TIME | string |*/2 * * * * |  |  | false |\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Tree Nodes in Go\nDESCRIPTION: Demonstrates how to iterate over all nodes in a tree structure using the VisitAll() method. This allows for custom processing of branch and leaf nodes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xlab/treeprint/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntree := New()\n\none := tree.AddBranch(\"one\")\none.AddNode(\"one-subnode1\").AddNode(\"one-subnode2\")\none.AddBranch(\"two\").AddNode(\"two-subnode1\").AddNode(\"two-subnode2\").\n    AddBranch(\"three\").AddNode(\"three-subnode1\").AddNode(\"three-subnode2\")\ntree.AddNode(\"outernode\")\n\n// if you need to iterate over the whole tree\n// call `VisitAll` from your top root node.\ntree.VisitAll(func(item *node) {\n    if len(item.Nodes) > 0 {\n        // branch nodes\n        fmt.Println(item.Value) // will output one, two, three\n    } else {\n        // leaf nodes\n        fmt.Println(item.Value) // will output one-*, two-*, three-* and outernode\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for xxhash in Go\nDESCRIPTION: This snippet demonstrates the commands used to run benchmarks for the xxhash package. It shows how to compare the performance of pure Go and assembly implementations using the benchstat tool.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbenchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')\nbenchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n\n----------------------------------------\n\nTITLE: Storage Environment Variable Config\nDESCRIPTION: Shows storage emulator environment variable configuration without scheme requirement\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/cloud.google.com/go/storage/CHANGES.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// Accepts emulator env var without scheme\n// Example: STORAGE_EMULATOR_HOST=localhost:8081\n```\n\n----------------------------------------\n\nTITLE: Go Expression Function Type Definition\nDESCRIPTION: Definition of the ExpressionFunction type used for custom function implementations in Govaluate. Functions take variable arguments and return an interface{} value and error.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Knetic/govaluate/MANUAL.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc(args ...interface{}) (interface{}, error)\n```\n\n----------------------------------------\n\nTITLE: Topology Spread Constraints\nDESCRIPTION: Defines rules for pod distribution across cluster topology.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Monitoring Configuration\nDESCRIPTION: Sets up Prometheus monitoring release name.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Using time.Sleep Directly Example in Go\nDESCRIPTION: An example showing a function that uses time.Sleep directly from the time package, which is difficult to test.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/jonboulle/clockwork/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc myFunc() {\n\ttime.Sleep(3 * time.Second)\n\tdoSomething()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DecodeHookFuncValue in Go\nDESCRIPTION: A new decode hook type that has access to full values, providing more context during decoding.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/mitchellh/mapstructure/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nDecodeHookFuncValue\n```\n\n----------------------------------------\n\nTITLE: Implementing SpdyStream Server in Go\nDESCRIPTION: A Go server implementation that accepts TCP connections and creates SpdyStream connections with a mirror handler. This example shows how to set up a listener, accept connections, and configure the server to echo back any data received from clients.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/moby/spdystream/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/moby/spdystream\"\n\t\"net\"\n)\n\nfunc main() {\n\tlistener, err := net.Listen(\"tcp\", \"localhost:8080\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tspdyConn, err := spdystream.NewConnection(conn, true)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tgo spdyConn.Serve(spdystream.MirrorStreamHandler)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Update Sample Script in YAML for Devtron Applications\nDESCRIPTION: This sample script demonstrates how to perform bulk updates to deployment templates, ConfigMaps, and Secrets across multiple Devtron applications. It includes filtering applications by name (inclusion/exclusion patterns), targeting specific environments, and applying JSON patch operations to make changes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/bulk-update.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: batch/v1beta1\nkind: Application\nspec:\n  includes:\n    names:\n    - \"%abc%\"\n    - \"%xyz%\"\n  excludes:\n    names:\n    - \"%abcd%\"\n    - \"%xyza%\"\n  envIds:\n  - 23\n  global: false\n  deploymentTemplate:\n    spec:\n      patchJson: '[{ \"op\": \"add\", \"path\": \"/MaxSurge\", \"value\": 1 },{\"op\": \"replace\",\"path\":\"/GracePeriod\",\"value\": \"30\"}]'\n  configMap:\n    spec:\n      names:\n      - \"configmap1\"\n      - \"configmap2\"\n      - \"configmap3\"\n      patchJson: '[{ \"op\": \"add\", \"path\": \"/{key}\", \"value\": \"{value}\" },{\"op\": \"replace\",\"path\":\"/{key}\",\"value\": \"{value}\"}]'\n  secret:\n    spec:\n      names:\n      - \"secret1\"\n      - \"secret2\"\n      patchJson: '[{ \"op\": \"add\", \"path\": \"/{key}\", \"value\": \"{value}\" },{\"op\": \"replace\",\"path\":\"/{key}\",\"value\": \"{value}\"}]'\n```\n\n----------------------------------------\n\nTITLE: Reusing Expression with Different Parameters in Go using Govaluate\nDESCRIPTION: Demonstrates how to parse an expression once and reuse it with different parameters. This approach is more efficient for repeated evaluations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/govaluate/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nexpression, err := govaluate.NewEvaluableExpression(\"response_time <= 100\");\nparameters := make(map[string]interface{}, 8)\n\nfor {\n\tparameters[\"response_time\"] = pingSomething();\n\tresult, err := expression.Evaluate(parameters)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ACL Model in Casbin CONF Format\nDESCRIPTION: This snippet demonstrates how to define a basic ACL (Access Control List) model using Casbin's CONF file format. It includes request definition, policy definition, policy effect, and matchers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/casbin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Request definition\n[request_definition]\nr = sub, obj, act\n\n# Policy definition\n[policy_definition]\np = sub, obj, act\n\n# Policy effect\n[policy_effect]\ne = some(where (p.eft == allow))\n\n# Matchers\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Defining HelmApp Properties in Markdown\nDESCRIPTION: Documents the properties of the HelmApp model including app name, app ID, chart details, project ID and environment configuration. Each property includes its type, description and optional status.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/md-output/Models/HelmApp.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# HelmApp\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**appName** | **String** | name of the helm application/helm release name | [optional] [default to null]\n**appId** | **String** | unique identifier for app | [optional] [default to null]\n**chartName** | **String** | name of the chart | [optional] [default to null]\n**chartAvatar** | **String** | url/location of the chart icon | [optional] [default to null]\n**projectId** | **Integer** | unique identifier for the project, APP with no project will have id `0` | [optional] [default to null]\n**environmentDetail** | [**AppEnvironmentDetail**](.md) |  | [optional] [default to null]\n```\n\n----------------------------------------\n\nTITLE: Database Migration Configuration\nDESCRIPTION: Toggle for enabling/disabling database migration functionality.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Creating a Tree with Meta-Data in Go\nDESCRIPTION: Shows how to create a tree structure where nodes can have associated meta-data. Uses AddMetaBranch() and AddMetaNode() methods to include file sizes or other metadata.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xlab/treeprint/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main {\n    // to add a custom root name use `treeprint.NewWithRoot()` instead\n    tree := treeprint.New()\n\n    tree.AddNode(\"Dockerfile\")\n    tree.AddNode(\"Makefile\")\n    tree.AddNode(\"aws.sh\")\n    tree.AddMetaBranch(\" 204\", \"bin\").\n        AddNode(\"dbmaker\").AddNode(\"someserver\").AddNode(\"testtool\")\n    tree.AddMetaBranch(\" 374\", \"deploy\").\n        AddNode(\"Makefile\").AddNode(\"bootstrap.sh\")\n    tree.AddMetaNode(\"122K\", \"testtool.a\")\n\n    fmt.Println(tree.String())\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Devtron Stack Upgrade\nDESCRIPTION: Command to patch the installer object with reSync flag to trigger the upgrade process for the entire Devtron stack.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.2.x-0.3.x.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch -n devtroncd installer installer-devtron --type='json' -p='[{\"op\": \"add\", \"path\": \"/spec/reSync\", \"value\": true }]'\n```\n\n----------------------------------------\n\nTITLE: Creating Aggregations for Views in Go\nDESCRIPTION: Examples of creating different types of aggregations for views in OpenCensus Go.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opencensus.io/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ndistAgg := view.Distribution(1<<32, 2<<32, 3<<32)\ncountAgg := view.Count()\nsumAgg := view.Sum()\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Environment Variables\nDESCRIPTION: Configuration for request/response logging in Azure SDK using environment variables. Controls log level and output destination.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_GO_SDK_LOG_LEVEL=LogInfo\\nAZURE_GO_SDK_LOG_FILE=<filepath>\n```\n\n----------------------------------------\n\nTITLE: Server Deployment Configuration\nDESCRIPTION: Specifies server deployment settings including image details.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Using rawYaml for Custom Kubernetes Resources\nDESCRIPTION: Allows direct specification of Kubernetes objects to be applied with the application deployment. This example defines a Service resource for the application.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Upgrading Devtron to a Specific Version\nDESCRIPTION: Commands to upgrade Devtron to a specific version by setting the target version as a variable and using that version's bill of materials file.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.4.x-0.4.x.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nDEVTRON_TARGET_VERSION=v0.4.x\n\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd \\\n-f https://raw.githubusercontent.com/devtron-labs/devtron/$DEVTRON_TARGET_VERSION/charts/devtron/devtron-bom.yaml \\\n--set installer.modules={cicd} --reuse-values\n```\n\n----------------------------------------\n\nTITLE: Error Extraction using errors.As with Multierror\nDESCRIPTION: Shows how to extract specific error types from a multierror using the standard library errors.As function.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\n\n// We want to know if \"err\" has a \"RichErrorType\" in it and extract it.\nvar errRich RichErrorType\nif errors.As(err, &errRich) {\n\t// It has it, and now errRich is populated.\n}\n```\n\n----------------------------------------\n\nTITLE: Fuzzing a Map with Controlled Elements in Go\nDESCRIPTION: Shows how to use gofuzz to populate a map with exactly one element, avoiding nil values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/google/gofuzz/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nf := fuzz.New().NilChance(0).NumElements(1, 1)\nvar myMap map[ComplexKeyType]string\nf.Fuzz(&myMap) // myMap will have exactly one element.\n```\n\n----------------------------------------\n\nTITLE: Defining Volumes in Kubernetes Manifests\nDESCRIPTION: Specifies volumes to be used by containers in a pod. This example shows an emptyDir volume for temporary storage and a persistentVolumeClaim for persistent storage needs, which is required when values need to be read from or written to external disks.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: NATS Wildcard Subscriptions in Go\nDESCRIPTION: Demonstrates how to use wildcard subscriptions in NATS. It shows the usage of '*' to match any token at any level of the subject, and '>' to match any length of the tail of a subject.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// \"*\" matches any token, at any level of the subject.\nnc.Subscribe(\"foo.*.baz\", func(m *Msg) {\n    fmt.Printf(\"Msg received on [%s] : %s\\n\", m.Subject, string(m.Data));\n})\n\nnc.Subscribe(\"foo.bar.*\", func(m *Msg) {\n    fmt.Printf(\"Msg received on [%s] : %s\\n\", m.Subject, string(m.Data));\n})\n\n// \">\" matches any length of the tail of a subject, and can only be the last token\n// E.g. 'foo.>' will match 'foo.bar', 'foo.bar.baz', 'foo.foo.bar.bax.22'\nnc.Subscribe(\"foo.>\", func(m *Msg) {\n    fmt.Printf(\"Msg received on [%s] : %s\\n\", m.Subject, string(m.Data));\n})\n\n// Matches all of the above\nnc.Publish(\"foo.bar.baz\", []byte(\"Hello World\"))\n```\n\n----------------------------------------\n\nTITLE: GlobWalk Function Implementation\nDESCRIPTION: Function signatures for walking through files matching a pattern with callback functionality\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype GlobWalkFunc func(path string, d fs.DirEntry) error\n\nfunc GlobWalk(fsys fs.FS, pattern string, fn GlobWalkFunc, opts ...GlobOption) error\n```\n\n----------------------------------------\n\nTITLE: Enabling External ArgoCD Feature Flag in YAML\nDESCRIPTION: This YAML snippet shows the feature flag configuration to enable external ArgoCD app listing in Devtron. It should be added to the dashboard ConfigMap.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/applications.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nENABLE_EXTERNAL_ARGO_CD: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple SSH Config Values in Go\nDESCRIPTION: Shows how to retrieve all values for a directive that can appear multiple times for a host, like IdentityFile, using the GetAll() function.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/kevinburke/ssh_config/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfiles := ssh_config.GetAll(\"myhost\", \"IdentityFile\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Kubernetes Services\nDESCRIPTION: This code snippet demonstrates how to obtain the application URL for different Kubernetes service types using Go templating and Bash commands. It covers scenarios for Ingress, NodePort, LoadBalancer, and ClusterIP service types.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring MinReadySeconds in YAML\nDESCRIPTION: Specifies the minimum number of seconds for which a newly created Pod should be ready without any of its containers crashing to be considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Additional Backends\nDESCRIPTION: Configuration for additional ingress backend paths and services.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n    hosts:\n    - host: chart-example2.local\n      pathType: \"ImplementationSpecific\"\n      paths:\n        - /example2\n        - /example2/healthz\n      additionalBackends: \n        - path: /example1\n          pathType: \"ImplementationSpecific\"\n          backend:\n            service:\n              name: test-service\n              port:\n                number: 80\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of go-gitignore Library in Go\nDESCRIPTION: Demonstrates the basic usage of the go-gitignore library. It shows how to create a new GitIgnore instance from a file path and check if a specific path matches any ignore pattern.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/monochromegane/go-gitignore/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngitignore, _ := gitignore.NewGitIgnore(\"/path/to/gitignore\")\n\npath := \"/path/to/file\"\nisDir := false\ngitignore.Match(path, isDir)\n```\n\n----------------------------------------\n\nTITLE: Custom Format Checker Implementation\nDESCRIPTION: Example of implementing and registering a custom role format checker.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype RoleFormatChecker struct {}\n\nfunc (f RoleFormatChecker) IsFormat(input interface{}) bool {\n    asString, ok := input.(string)\n    if ok == false {\n        return false\n    }\n    return strings.HasPrefix(\"ROLE_\", asString)\n}\n\ngojsonschema.FormatCheckers.Add(\"role\", RoleFormatChecker{})\n```\n\n----------------------------------------\n\nTITLE: Executing Commands with Parameters in Core for Go\nDESCRIPTION: Shows how to execute SQL commands (like INSERT) with different parameter styles: positional parameters, struct-based named parameters, and map-based named parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/core/README.md#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\ndb.Exec(\"insert into user (`name`, title, age, alias, nick_name,created) values (?,?,?,?,?,?)\", name, title, age, alias...)\n\nuser = User{\n    Name:\"lunny\",\n    Title:\"test\",\n    Age: 18,\n}\nresult, err = db.ExecStruct(\"insert into user (`name`, title, age, alias, nick_name,created) values (?Name,?Title,?Age,?Alias,?NickName,?Created)\",\n            &user)\n\nvar user = map[string]interface{}{\n    \"Name\": \"lunny\",\n    \"Title\": \"test\",\n    \"Age\": 18,\n}\nresult, err = db.ExecMap(\"insert into user (`name`, title, age, alias, nick_name,created) values (?Name,?Title,?Age,?Alias,?NickName,?Created)\",\n            &user)\n```\n\n----------------------------------------\n\nTITLE: Getting Admin Password for Devtron Prior to v0.6.0\nDESCRIPTION: Command to retrieve the admin password from Kubernetes secrets for Devtron versions earlier than 0.6.0. The username is 'admin'.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get secret devtron-secret \\\n-o jsonpath='{.data.ACD_PASSWORD}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Downloading Devtron Migrator YAML\nDESCRIPTION: This command downloads the migrator.yaml file from the Devtron GitHub repository, which is used to recreate failed jobs during the installation process.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/devtron-labs/devtron/main/manifests/yamls/migrator.yaml\n```\n\n----------------------------------------\n\nTITLE: Compacting JSON with pretty.Ugly Function\nDESCRIPTION: Go code example showing how to compact JSON using the Ugly function.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/pretty/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nresult = pretty.Ugly(example)\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table for Global Configurations Permissions\nDESCRIPTION: This snippet defines a markdown table showing the permissions for the Super Admin role across various actions related to Global Configuration management in Devtron.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/authorization/user-access.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| User Role    | Add Global Config | Edit Global Config | Delete Global Config |\n| :---         | :---:             | :---:              | :---:                |\n| Super Admin  | Yes               | Yes                | Yes                  |\n```\n\n----------------------------------------\n\nTITLE: Acquiring Access Token with Client Certificate in Go\nDESCRIPTION: This code shows how to acquire an access token using client certificate authentication in Go.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/autorest/adal/README.md#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\ncertificatePath := \"./example-app.pfx\"\n\ncertData, err := ioutil.ReadFile(certificatePath)\nif err != nil {\n\treturn nil, fmt.Errorf(\"failed to read the certificate file (%s): %v\", certificatePath, err)\n}\n\n// Get the certificate and private key from pfx file\ncertificate, rsaPrivateKey, err := decodePkcs12(certData, \"\")\nif err != nil {\n\treturn nil, fmt.Errorf(\"failed to decode pkcs12 certificate while creating spt: %v\", err)\n}\n\nspt, err := adal.NewServicePrincipalTokenFromCertificate(\n\t*oauthConfig,\n\tapplicationID,\n\tcertificate,\n\trsaPrivateKey,\n\tresource,\n\tcallbacks...)\n\n// Acquire a new access token\nerr  = spt.Refresh()\nif (err == nil) {\n    token := spt.Token\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MaxUnavailable for StatefulSet Updates in YAML\nDESCRIPTION: Specifies the maximum number of pods that can be unavailable during the update process. Can be an absolute number or percentage of replicas.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Deployment\nDESCRIPTION: Configuration for server deployment settings including image details.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Not Empty Fields Configuration with env Package\nDESCRIPTION: Example struct definition showing how to ensure a field is not only set but also has a non-empty value using the notEmpty tag option.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/caarlos0/env/v6/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype config struct {\n\tSecretKey string `env:\"SECRET_KEY,notEmpty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ApiToken Object in Go\nDESCRIPTION: Constructor functions for creating new ApiToken instances. NewApiToken assigns default values to all properties while NewApiTokenWithDefaults only sets defined default values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/ApiToken.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc NewApiToken() *ApiToken\nfunc NewApiTokenWithDefaults() *ApiToken\n```\n\n----------------------------------------\n\nTITLE: Using rawYaml in Kubernetes Deployment\nDESCRIPTION: Demonstrates how to include raw Kubernetes YAML objects in a deployment configuration, such as defining a Service.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Implementing FilepathGlob Pattern Matching in Go\nDESCRIPTION: FilepathGlob returns all files matching a pattern with support for hierarchical paths. It offers a drop-in replacement for path/filepath.Glob() with additional features. By default, it ignores file system I/O errors but can be configured to abort on them.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc FilepathGlob(pattern string, opts ...GlobOption) (matches []string, err error)\n```\n\n----------------------------------------\n\nTITLE: Displaying Command Bar Shortcuts Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table that lists the keyboard shortcuts for various actions in the command bar, including how to open it, navigate options, and select items.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/command-bar.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Action | Keys |\n| :--- | :--- |\n| Open Command bar | `Cmd/Ctrl` + `/` |\n| Navigate | `↓` `↑`|\n| Explore nested options | `→` |\n| Navigate to a screen | `Enter` |\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with CI/CD and Argo CD (With Image Pull Secrets)\nDESCRIPTION: Helm command to install Devtron with CI/CD module, Argo CD, and image pull secrets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-in-airgapped-environment.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nhelm install devtron . --create-namespace -n devtroncd --set installer.modules={cicd} --set argo-cd.enabled=true --set global.containerRegistry=\"$TARGET_REGISTRY\" --set argo-cd.global.image.repository=\"${TARGET_REGISTRY}/argocd\" --set argo-cd.redis.image.repository=\"${TARGET_REGISTRY}/redis\" --set global.imagePullSecrets[0].name=devtron-imagepull\n```\n\n----------------------------------------\n\nTITLE: Creating Split Driver for OTLP Exporter in Go\nDESCRIPTION: Creates a driver for the OTLP exporter that allows sending traces and metrics to different endpoints.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_36\n\nLANGUAGE: Go\nCODE:\n```\nNewSplitDriver()\n```\n\n----------------------------------------\n\nTITLE: Role Format Schema Definition\nDESCRIPTION: JSON Schema example showing how to use a custom role format validator.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"string\", \"format\": \"role\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Policy in Kubernetes YAML\nDESCRIPTION: Defines the image pull policy for Kubernetes pods. The 'IfNotPresent' policy pulls the image only if it's not already present on the node.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Getting Admin Password for Devtron v0.6.0+\nDESCRIPTION: Command to retrieve the admin password for Devtron versions 0.6.0 and higher.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/charts/devtron/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get secret devtron-secret -o jsonpath='{.data.ADMIN_PASSWORD}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Retrieving Devtron Admin Password (v0.6.0+)\nDESCRIPTION: Command to get the admin password for Devtron version 0.6.0 and higher from a Kubernetes secret.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get secret devtron-secret -o jsonpath='{.data.ADMIN_PASSWORD}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Retrieving NodePort Service URL in Kubernetes\nDESCRIPTION: Commands to get the application URL when the service type is NodePort. It exports the node port and IP address, then constructs and displays the URL.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/cronjob-chart_1-3-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\nexport NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\necho http://$NODE_IP:$NODE_PORT\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoints in Markdown\nDESCRIPTION: This snippet defines the API endpoints for Devtron Labs, including their HTTP methods and descriptions. It uses a Markdown table to structure the information.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/md-output/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nClass | Method | HTTP request | Description\n------------ | ------------- | ------------- | -------------\n*DefaultApi* | [**orchestratorAppListGet**](Apis/DefaultApi.md#orchestratorapplistget) | **GET** /orchestrator/app/list/ | this api gives all devtron applications.\n*DefaultApi* | [**orchestratorApplicationClusterEnvDetailsGet**](Apis/DefaultApi.md#orchestratorapplicationclusterenvdetailsget) | **GET** /orchestrator/application/cluster-env-details | returns cluster environment namespace mappings\n*DefaultApi* | [**orchestratorApplicationGet**](Apis/DefaultApi.md#orchestratorapplicationget) | **GET** /orchestrator/application/ | this api gives all external application+ devtron helm chart applications.\n```\n\n----------------------------------------\n\nTITLE: Parsing URN using NewMachine()\nDESCRIPTION: Example demonstrating URN parsing using NewMachine() method with error handling\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/leodido/go-urn/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/leodido/go-urn\"\n)\n\nfunc main() {\n\tvar uid = \"URN:foo:a123,456\"\n\n    // Parse the input string as a RFC 2141 URN only\n\tu, e := urn.NewMachine().Parse(uid)\n\tif e != nil {\n\t\tfmt.Errorf(err)\n\n\t\treturn\n\t}\n\n\tfmt.Println(u.ID)\n\tfmt.Println(u.SS)\n\n\t// Output:\n\t// foo\n\t// a123,456\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository with Filesystem Storage in Go\nDESCRIPTION: Shows how to initialize a Git repository using the filesystem storer implementation in go-git, storing data in the OS filesystem.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-git/go-git/v5/EXTENDING.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nr, err := git.Init(filesystem.NewStorage(osfs.New(\"/tmp/foo\")), nil)\n```\n\n----------------------------------------\n\nTITLE: Customizing HTTPS Transport in go-git\nDESCRIPTION: Demonstrates how to replace the built-in HTTPS implementation in go-git to skip TLS verification, using a custom HTTP client.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-git/go-git/v5/EXTENDING.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ncustomClient := &http.Client{\n\tTransport: &http.Transport{\n\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t},\n}\n\nclient.InstallProtocol(\"https\", githttp.NewClient(customClient))\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Flags with pflag\nDESCRIPTION: This example shows how to create custom flags that satisfy the Value interface and couple them to flag parsing using pflag.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nflag.Var(&flagVal, \"name\", \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Installing Mergo in Go\nDESCRIPTION: Instructions for installing Mergo using Go's package manager and importing it in Go code.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/dario.cat/mergo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get dario.cat/mergo\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"dario.cat/mergo\"\n)\n```\n\n----------------------------------------\n\nTITLE: ClusterEnvironmentDetail Properties Table Markdown\nDESCRIPTION: Markdown table defining the properties of the ClusterEnvironmentDetail model including property names, types, descriptions and notes\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/md-output/Models/ClusterEnvironmentDetail.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **clusterName** | **String** | name of the cluster | [optional] [default to null] |\n| **clusterID** | **Integer** | id of the cluster | [optional] [default to null] |\n| **environments** | [**List**](EnvironmentDetail.md) | environments in that cluster | [optional] [default to null] |\n```\n\n----------------------------------------\n\nTITLE: Customizing Nil Pointer Probability in Go Fuzzing\nDESCRIPTION: Demonstrates how to set the probability of getting nil pointers when fuzzing a struct with multiple pointer fields.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/google/gofuzz/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nf := fuzz.New().NilChance(.5)\nvar fancyStruct struct {\n  A, B, C, D *string\n}\nf.Fuzz(&fancyStruct) // About half the pointers should be set.\n```\n\n----------------------------------------\n\nTITLE: Getting Admin Password for Devtron < v0.6.0\nDESCRIPTION: Command to retrieve the admin password from Kubernetes secret for Devtron versions lower than 0.6.0.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/Install-devtron-on-Minikube-Microk8s-K3s-Kind.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get secret devtron-secret \\\n-o jsonpath='{.data.ACD_PASSWORD}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Parameter-based Expression Evaluation in Go\nDESCRIPTION: Demonstrates evaluating an expression using a parameter map to provide values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Knetic/govaluate/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nexpression, err := govaluate.NewEvaluableExpression(\"foo > 0\");\n\nparameters := make(map[string]interface{}, 8)\nparameters[\"foo\"] = -1;\n\nresult, err := expression.Evaluate(parameters);\n// result is now set to \"false\", the bool value.\n```\n\n----------------------------------------\n\nTITLE: Checking Devtron Installation Status using kubectl\nDESCRIPTION: This command checks the status of the Devtron installation by querying the 'installer-devtron' resource in the 'devtroncd' namespace. It returns 'Applied' when the installation is complete.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-helm-3.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get installers installer-devtron -o jsonpath='{.status.sync.status}'\n```\n\n----------------------------------------\n\nTITLE: Server Deployment Configuration\nDESCRIPTION: Specifies server deployment settings including image details.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Containers\nDESCRIPTION: Defines initialization containers that run before app containers in a Pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers: \n  - reuseContainerImage: true\n    securityContext:\n      runAsUser: 1000\n      runAsGroup: 3000\n      fsGroup: 2000\n    volumeMounts:\n     - mountPath: /etc/ls-oms\n       name: ls-oms-cm-vol\n   command:\n     - flyway\n     - -configFiles=/etc/ls-oms/flyway.conf\n     - migrate\n\n  - name: nginx\n    image: nginx:1.14.2\n    securityContext:\n      privileged: true\n    ports:\n    - containerPort: 80\n    command: [\"/usr/local/bin/nginx\"]\n    args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Installing AWS EBS CSI Driver for EKS using Helm\nDESCRIPTION: Command to install AWS EBS CSI driver on EKS version 1.23 or above using Helm. This driver is required for proper storage functionality on newer EKS versions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add aws-ebs-csi-driver \\\nhttps://kubernetes-sigs.github.io/aws-ebs-csi-driver \\\nhelm repo update \\\nhelm upgrade --install aws-ebs-csi-driver \\\n--namespace kube-system aws-ebs-csi-driver/aws-ebs-csi-driver\n```\n\n----------------------------------------\n\nTITLE: Server Started Metrics Example in Prometheus Format\nDESCRIPTION: Example of Prometheus metrics showing a server-side RPC call being started. This counter is incremented when the server receives a call.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_3\n\nLANGUAGE: jsoniq\nCODE:\n```\ngrpc_server_started_total{grpc_method=\"PingList\",grpc_service=\"mwitkow.testproto.TestService\",grpc_type=\"server_stream\"} 1\n```\n\n----------------------------------------\n\nTITLE: Installing CamelCase Package in Go\nDESCRIPTION: Command to install the CamelCase package using Go's package manager.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/fatih/camelcase/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/fatih/camelcase\n```\n\n----------------------------------------\n\nTITLE: Implementing a Config Struct in Go\nDESCRIPTION: Defines a config struct pattern for holding configuration options. This struct typically contains configuration fields and should generally be unexported unless users need to extend it.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// config contains configuration options for a thing.\ntype config struct {\n\t// options ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Pause Before Switch Active\nDESCRIPTION: Defines wait time before switching active containers\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Testing with FakeClock in Go\nDESCRIPTION: A test implementation using a FakeClock that demonstrates how to control time progression in tests. It uses BlockUntil to wait for sleep operations and Advance to move time forward.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/jonboulle/clockwork/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc TestMyFunc(t *testing.T) {\n\tc := clockwork.NewFakeClock()\n\n\t// Start our sleepy function\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo func() {\n\t\tmyFunc(c)\n\t\twg.Done()\n\t}()\n\n\t// Ensure we wait until myFunc is sleeping\n\tc.BlockUntil(1)\n\n\tassertState()\n\n\t// Advance the FakeClock forward in time\n\tc.Advance(3 * time.Second)\n\n\t// Wait until the function completes\n\twg.Wait()\n\n\tassertState()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Options with Default True in Go\nDESCRIPTION: Shows how to implement an Option for boolean configuration values that default to true. Includes both the option implementation and the exported wrapper function.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype defaultTrueOption bool\n\nfunc (o defaultTrueOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithoutOption sets a T to have Bool option excluded.\nfunc WithoutOption() Option {\n\treturn defaultTrueOption(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in Kubernetes\nDESCRIPTION: Defines the port configuration for container services including envoy ports, service ports, and HTTP2 settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Using Like Condition in Go with builder\nDESCRIPTION: Example of creating LIKE condition for SQL queries using the Like type.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/builder/README.md#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nimport . \"xorm.io/builder\"\n\nsql, args, _ := ToSQL(Like{\"a\", \"c\"})\n// a LIKE ? [%c%]\n```\n\n----------------------------------------\n\nTITLE: Sample Telemetry Event Data Structure in JSON\nDESCRIPTION: This code snippet shows the structure of a sample telemetry event JSON sent by Devtron. It includes information like event type, timestamp, anonymous user identifiers, and system properties. The data is used to understand product usage patterns.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/telemetry.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"017ah6af-8h60-0000-abfc-a0a25hd823d6\",\n  \"timestamp\": \"2021-06-29T07:33:02.001000+00:00\",\n  \"event\": \"Heartbeat\",\n  \"distinct_id\": \"qadgrtuxogziz8ak\",\n  \"properties\": {\n    \"$geoip_city_name\": \"Columbus\",\n    \"$geoip_continent_code\": \"NA\",\n    \"$geoip_continent_name\": \"North America\",\n    \"$geoip_country_code\": \"US\",\n    \"$geoip_country_name\": \"United States\",\n    \"$geoip_latitude\": 39.9625,\n    \"$geoip_longitude\": -83.0061,\n    \"$geoip_postal_code\": \"43215\",\n    \"$geoip_subdivision_1_code\": \"OH\",\n    \"$geoip_subdivision_1_name\": \"Ohio\",\n    \"$geoip_time_zone\": \"America/New_York\",\n    \"$ip\": \"18.117.165.2\",\n    \"$lib\": \"posthog-go\",\n    \"$lib_version\": \"1.0.2\",\n    \"devtronVersion\": \"v1\",\n    \"eventType\": 0,\n    \"serverVersion\": \"v1.17.17\",\n    \"timestamp\": \"2021-06-29T07:33:02.001372393Z\",\n    \"ucid\": \"qadgrtuxogziz8ak\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pod Grace Period Configuration\nDESCRIPTION: Sets termination grace period for pods in seconds.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Defining Applications and Environments for Image Promotion Policy\nDESCRIPTION: YAML configuration defining the applications and environments to which an image promotion policy should be applied. It specifies multiple application-environment pairs and the policy name.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/image-promotion-policy.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: artifactPromotionPolicy\nspec:\n    payload:\n    applicationEnvironments:\n    - appName: \"app1\"\n        envName: \"env-demo\"\n    - appName: \"app1\"\n        envName: \"env-staging\"\n    - appName: \"app2\"\n        envName: \"env-demo\"\n    applyToPolicyName: \"example-policy\"\n```\n\n----------------------------------------\n\nTITLE: Go Package Installation Command\nDESCRIPTION: Command to install the doublestar package using go get\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/bmatcuk/doublestar/v4\n```\n\n----------------------------------------\n\nTITLE: Using Locales Library for Internationalization in Go\nDESCRIPTION: Demonstrates how to use the locales library for date, time, number and currency formatting with the en_CA locale. The example shows date formatting, time formatting, month and weekday names, number formatting, currency formatting, accounting formatting, percentage formatting, and plural rule handling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-playground/locales/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/go-playground/locales/currency\"\n\t\"github.com/go-playground/locales/en_CA\"\n)\n\nfunc main() {\n\n\tloc, _ := time.LoadLocation(\"America/Toronto\")\n\tdatetime := time.Date(2016, 02, 03, 9, 0, 1, 0, loc)\n\n\tl := en_CA.New()\n\n\t// Dates\n\tfmt.Println(l.FmtDateFull(datetime))\n\tfmt.Println(l.FmtDateLong(datetime))\n\tfmt.Println(l.FmtDateMedium(datetime))\n\tfmt.Println(l.FmtDateShort(datetime))\n\n\t// Times\n\tfmt.Println(l.FmtTimeFull(datetime))\n\tfmt.Println(l.FmtTimeLong(datetime))\n\tfmt.Println(l.FmtTimeMedium(datetime))\n\tfmt.Println(l.FmtTimeShort(datetime))\n\n\t// Months Wide\n\tfmt.Println(l.MonthWide(time.January))\n\tfmt.Println(l.MonthWide(time.February))\n\tfmt.Println(l.MonthWide(time.March))\n\t// ...\n\n\t// Months Abbreviated\n\tfmt.Println(l.MonthAbbreviated(time.January))\n\tfmt.Println(l.MonthAbbreviated(time.February))\n\tfmt.Println(l.MonthAbbreviated(time.March))\n\t// ...\n\n\t// Months Narrow\n\tfmt.Println(l.MonthNarrow(time.January))\n\tfmt.Println(l.MonthNarrow(time.February))\n\tfmt.Println(l.MonthNarrow(time.March))\n\t// ...\n\n\t// Weekdays Wide\n\tfmt.Println(l.WeekdayWide(time.Sunday))\n\tfmt.Println(l.WeekdayWide(time.Monday))\n\tfmt.Println(l.WeekdayWide(time.Tuesday))\n\t// ...\n\n\t// Weekdays Abbreviated\n\tfmt.Println(l.WeekdayAbbreviated(time.Sunday))\n\tfmt.Println(l.WeekdayAbbreviated(time.Monday))\n\tfmt.Println(l.WeekdayAbbreviated(time.Tuesday))\n\t// ...\n\n\t// Weekdays Short\n\tfmt.Println(l.WeekdayShort(time.Sunday))\n\tfmt.Println(l.WeekdayShort(time.Monday))\n\tfmt.Println(l.WeekdayShort(time.Tuesday))\n\t// ...\n\n\t// Weekdays Narrow\n\tfmt.Println(l.WeekdayNarrow(time.Sunday))\n\tfmt.Println(l.WeekdayNarrow(time.Monday))\n\tfmt.Println(l.WeekdayNarrow(time.Tuesday))\n\t// ...\n\n\tvar f64 float64\n\n\tf64 = -10356.4523\n\n\t// Number\n\tfmt.Println(l.FmtNumber(f64, 2))\n\n\t// Currency\n\tfmt.Println(l.FmtCurrency(f64, 2, currency.CAD))\n\tfmt.Println(l.FmtCurrency(f64, 2, currency.USD))\n\n\t// Accounting\n\tfmt.Println(l.FmtAccounting(f64, 2, currency.CAD))\n\tfmt.Println(l.FmtAccounting(f64, 2, currency.USD))\n\n\tf64 = 78.12\n\n\t// Percent\n\tfmt.Println(l.FmtPercent(f64, 0))\n\n\t// Plural Rules for locale, so you know what rules you must cover\n\tfmt.Println(l.PluralsCardinal())\n\tfmt.Println(l.PluralsOrdinal())\n\n\t// Cardinal Plural Rules\n\tfmt.Println(l.CardinalPluralRule(1, 0))\n\tfmt.Println(l.CardinalPluralRule(1.0, 0))\n\tfmt.Println(l.CardinalPluralRule(1.0, 1))\n\tfmt.Println(l.CardinalPluralRule(3, 0))\n\n\t// Ordinal Plural Rules\n\tfmt.Println(l.OrdinalPluralRule(21, 0)) // 21st\n\tfmt.Println(l.OrdinalPluralRule(22, 0)) // 22nd\n\tfmt.Println(l.OrdinalPluralRule(33, 0)) // 33rd\n\tfmt.Println(l.OrdinalPluralRule(34, 0)) // 34th\n\n\t// Range Plural Rules\n\tfmt.Println(l.RangePluralRule(1, 0, 1, 0)) // 1-1\n\tfmt.Println(l.RangePluralRule(1, 0, 2, 0)) // 1-2\n\tfmt.Println(l.RangePluralRule(5, 0, 8, 0)) // 5-8\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Devtron Kubernetes Dashboard\nDESCRIPTION: Command to reopen the Devtron dashboard if the browser is closed. Opens the dashboard through an available port and maintains the client state.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-Kubernetes-client.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsh devtron-install.bash open\n```\n\n----------------------------------------\n\nTITLE: Overwriting Values during Merge with Mergo in Go\nDESCRIPTION: Example of using Mergo to merge structs while overwriting existing values using the WithOverride transformer.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/dario.cat/mergo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif err := mergo.Merge(&dst, src, mergo.WithOverride); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Compact JSON Output\nDESCRIPTION: The result of applying the pretty.Ugly function to the example JSON.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/pretty/README.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\"name\":{\"first\":\"Tom\",\"last\":\"Anderson\"},\"age\":37,\"children\":[\"Sara\",\"Alex\",\"Jack\"],\"fav.movie\":\"Deer Hunter\",\"friends\":[{\"first\":\"Janet\",\"last\":\"Murphy\",\"age\":44}]}\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in Markdown with Blackfriday\nDESCRIPTION: Example of creating simple tables in Markdown syntax that can be processed by Blackfriday. The syntax uses pipes and dashes to define table structure with column headers and data rows.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nName    | Age\n--------|------\nBob     | 27\nAlice   | 23\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Data with Get Method\nDESCRIPTION: Demonstrates how to access nested data within an objx.Map using dot notation and array indexing through the Get method.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/stretchr/objx/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nm.Get(\"places[0].latlng\")\n```\n\n----------------------------------------\n\nTITLE: Configuring MaxSurge in Kubernetes Deployment YAML\nDESCRIPTION: Defines the maximum number of pods that can be created over the desired number of pods during an update. It can be an absolute number or a percentage of the replicas count.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Creating XORM Engine Groups\nDESCRIPTION: Demonstrates how to set up master-slave database configurations using engine groups\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-xorm/xorm/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ndataSourceNameSlice := []string{masterDataSourceName, slave1DataSourceName, slave2DataSourceName}\nengineGroup, err := xorm.NewEngineGroup(driverName, dataSourceNameSlice)\n\nmasterEngine, err := xorm.NewEngine(driverName, masterDataSourceName)\nslave1Engine, err := xorm.NewEngine(driverName, slave1DataSourceName)\nslave2Engine, err := xorm.NewEngine(driverName, slave2DataSourceName)\nengineGroup, err := xorm.NewEngineGroup(masterEngine, []*Engine{slave1Engine, slave2Engine})\n```\n\n----------------------------------------\n\nTITLE: Configuring Verbose Logging\nDESCRIPTION: Example showing how to initialize cron with verbose logging enabled using the new logging interface.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/robfig/cron/v3/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ncron.New(\n    cron.WithLogger(cron.VerbosePrintfLogger(logger)))\n```\n\n----------------------------------------\n\nTITLE: Creating New UpdateApiTokenRequest Object in Go\nDESCRIPTION: Defines two constructor functions for creating new UpdateApiTokenRequest objects, one with default values and one without.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/UpdateApiTokenRequest.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc NewUpdateApiTokenRequest() *UpdateApiTokenRequest\n\nfunc NewUpdateApiTokenRequestWithDefaults() *UpdateApiTokenRequest\n```\n\n----------------------------------------\n\nTITLE: Ambassador Mapping Configuration\nDESCRIPTION: Configuration for Ambassador API Gateway mappings to expose services.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nambassadorMapping:\n  ambassadorId: \"prod-emissary\"\n  cors: {}\n  enabled: true\n  hostname: devtron.example.com\n  labels: {}\n  prefix: /\n  retryPolicy: {}\n  rewrite: \"\"\n  tls:\n    context: \"devtron-tls-context\"\n    create: false\n    hosts: []\n    secretName: \"\"\n```\n\n----------------------------------------\n\nTITLE: Adding OpenCensus Tracing Import in Go\nDESCRIPTION: Code example showing how to enable the OpenCensus tracing provider by importing the required package. This is required to enable tracing functionality after v13.0.0.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport _ \"github.com/Azure/go-autorest/tracing/opencensus\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Resource with Default Attributes in Go\nDESCRIPTION: Creates a default Resource with common attributes for use with meter and tracer providers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_32\n\nLANGUAGE: Go\nCODE:\n```\nresource.Default()\n```\n\n----------------------------------------\n\nTITLE: Setting Pause Duration\nDESCRIPTION: YAML configuration for pause duration before container activation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus for Kubernetes Monitoring in YAML\nDESCRIPTION: This YAML configuration specifies the release name for Prometheus, a Kubernetes monitoring tool. It sets up the monitoring state for the deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus:\n  release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Getting Devtron Dashboard URL\nDESCRIPTION: Command to retrieve the LoadBalancer URL for accessing the Devtron dashboard.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/setup/install.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nkubectl get svc -n devtroncd devtron-service -o jsonpath='{.status.loadBalancer.ingress}'\n```\n\n----------------------------------------\n\nTITLE: Creating Not Provisioned Error with Formatting in Go\nDESCRIPTION: NotProvisionedf returns an error which satisfies IsNotProvisioned(). It takes a format string and optional arguments for formatting.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc NotProvisionedf(format string, args ...interface{}) error\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint: orchestratorApplicationClusterEnvDetailsGet in Markdown\nDESCRIPTION: Documents the orchestratorApplicationClusterEnvDetailsGet endpoint, which retrieves cluster environment namespace mappings. It takes no parameters and returns a ClusterEnvironmentDetail object.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/md-output/Apis/DefaultApi.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# **orchestratorApplicationClusterEnvDetailsGet**\nClusterEnvironmentDetail orchestratorApplicationClusterEnvDetailsGet()\n\n    returns cluster environment namespace mappings\n\n### Parameters\nThis endpoint does not need any parameter.\n\n### Return type\n\n[**ClusterEnvironmentDetail**](../Models/ClusterEnvironmentDetail.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json\n```\n\n----------------------------------------\n\nTITLE: Custom Transformer for time.Time in Go using Mergo\nDESCRIPTION: Demonstrates how to create a custom transformer for handling special types like time.Time. The transformer checks if the destination time is zero before merging.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/imdario/mergo/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/imdario/mergo\"\n        \"reflect\"\n        \"time\"\n)\n\ntype timeTransformer struct {\n}\n\nfunc (t timeTransformer) Transformer(typ reflect.Type) func(dst, src reflect.Value) error {\n\tif typ == reflect.TypeOf(time.Time{}) {\n\t\treturn func(dst, src reflect.Value) error {\n\t\t\tif dst.CanSet() {\n\t\t\t\tisZero := dst.MethodByName(\"IsZero\")\n\t\t\t\tresult := isZero.Call([]reflect.Value{})\n\t\t\t\tif result[0].Bool() {\n\t\t\t\t\tdst.Set(src)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}\n\ntype Snapshot struct {\n\tTime time.Time\n\t// ...\n}\n\nfunc main() {\n\tsrc := Snapshot{time.Now()}\n\tdest := Snapshot{}\n\tmergo.Merge(&dest, src, mergo.WithTransformers(timeTransformer{}))\n\tfmt.Println(dest)\n\t// Will print\n\t// { 2018-01-12 01:15:00 +0000 UTC m=+0.000000001 }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Permissive Host Key Checking in Go\nDESCRIPTION: Shows how to implement OpenSSH-like StrictHostKeyChecking behavior with automatic addition of new hosts to known_hosts file.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/skeema/knownhosts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\nsshHost := \"yourserver.com:22\"\nkhPath := \"/home/myuser/.ssh/known_hosts\"\nkh, err := knownhosts.NewDB(khPath)\nif err != nil {\n\tlog.Fatal(\"Failed to read known_hosts: \", err)\n}\n\n// Create a custom permissive hostkey callback which still errors on hosts\n// with changed keys, but allows unknown hosts and adds them to known_hosts\ncb := ssh.HostKeyCallback(func(hostname string, remote net.Addr, key ssh.PublicKey) error {\n\tinnerCallback := kh.HostKeyCallback()\n\terr := innerCallback(hostname, remote, key)\n\tif knownhosts.IsHostKeyChanged(err) {\n\t\treturn fmt.Errorf(\"REMOTE HOST IDENTIFICATION HAS CHANGED for host %s! This may indicate a MitM attack.\", hostname)\n\t} else if knownhosts.IsHostUnknown(err) {\n\t\tf, ferr := os.OpenFile(khPath, os.O_APPEND|os.O_WRONLY, 0600)\n\t\tif ferr == nil {\n\t\t\tdefer f.Close()\n\t\t\tferr = knownhosts.WriteKnownHost(f, hostname, remote, key)\n\t\t}\n\t\tif ferr == nil {\n\t\t\tlog.Printf(\"Added host %s to known_hosts\\n\", hostname)\n\t\t} else {\n\t\t\tlog.Printf(\"Failed to add host %s to known_hosts: %v\\n\", hostname, ferr)\n\t\t}\n\t\treturn nil // permit previously-unknown hosts (warning: may be insecure)\n\t}\n\treturn err\n})\n\nconfig := &ssh.ClientConfig{\n\tUser:              \"myuser\",\n\tAuth:              []ssh.AuthMethod{ /* ... */ },\n\tHostKeyCallback:   cb,\n\tHostKeyAlgorithms: kh.HostKeyAlgorithms(sshHost),\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Flag Aliasing with pflag\nDESCRIPTION: This snippet demonstrates how to create aliases for flags using a custom normalization function in pflag.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc aliasNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tswitch name {\n\tcase \"old-flag-name\":\n\t\tname = \"new-flag-name\"\n\t\tbreak\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(aliasNormalizeFunc)\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON with pretty.Pretty Function\nDESCRIPTION: Go code example showing how to format JSON for readability using the Pretty function.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/pretty/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nresult = pretty.Pretty(example)\n```\n\n----------------------------------------\n\nTITLE: Configuring Jaeger Environment Variables\nDESCRIPTION: Example of updated Jaeger exporter environment variable names to comply with OpenTelemetry specification\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_29\n\nLANGUAGE: properties\nCODE:\n```\nOTEL_EXPORTER_JAEGER_ENDPOINT\nOTEL_EXPORTER_JAEGER_USER\nOTEL_EXPORTER_JAEGER_PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Secrets Manager Parameters\nDESCRIPTION: Configuration parameters required for setting up GCP Secrets Manager integration in Devtron. Includes authentication secret reference, project ID, and secret key mappings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/eso/gcp-eso.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecretAccessKeySecretRef.name: # Name of secret created for authentication\nsecretAccessKeySecretRef.key: # Variable name storing base64 encoded service account key\nProjectID: # GCP Project ID where secret is created\nsecretKey: # Key name to store secret\nkey: # GCP Secrets Manager secret name\n```\n\n----------------------------------------\n\nTITLE: Markdown Cloud Provider Options Table\nDESCRIPTION: Table listing supported cloud providers for Kubernetes cluster creation with links to their respective documentation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/getting-started/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Cloud Provider | Description |\n| --- | --- |\n| **AWS EKS** | Create a cluster using [AWS EKS](https://docs.aws.amazon.com/eks/latest/userguide/getting-started-console.html). |\n| **Google Kubernetes Engine (GKE)** | Create a cluster using [GKE](https://cloud.google.com/kubernetes-engine/). |\n| **Azure Kubernetes Service (AKS)** | Create a cluster using [AKS](https://learn.microsoft.com/en-us/azure/aks/). |\n```\n\n----------------------------------------\n\nTITLE: JSON Schema output with ExpandedStruct\nDESCRIPTION: This snippet shows the JSON Schema output when using the ExpandedStruct option. It expands the top-level struct and includes definitions for nested types.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/invopop/jsonschema/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft/2020-12/schema\",\n  \"required\": [\"some_base_property\", \"grand\", \"SomeUntaggedBaseProperty\"],\n  \"properties\": {\n    \"SomeUntaggedBaseProperty\": {\n      \"type\": \"boolean\"\n    },\n    \"grand\": {\n      \"$schema\": \"http://json-schema.org/draft/2020-12/schema\",\n      \"$ref\": \"#/definitions/GrandfatherType\"\n    },\n    \"some_base_property\": {\n      \"type\": \"integer\"\n    }\n  },\n  \"type\": \"object\",\n  \"$defs\": {\n    \"GrandfatherType\": {\n      \"required\": [\"family_name\"],\n      \"properties\": {\n        \"family_name\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with MinIO for Log and Cache Storage\nDESCRIPTION: Helm command to install Devtron with MinIO for storing build logs and cache. MinIO provides an S3-compatible object storage that can be hosted locally.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai \n\nhelm repo update devtron\n\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--set minio.enabled=true\n```\n\n----------------------------------------\n\nTITLE: SSO Configuration Payload Structure\nDESCRIPTION: JSON structure for configuring SSO authentication in Devtron. Includes essential fields like type, name, id, config details, and hosted domains for authorization.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/user-guide/global-configurations/sso-login.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"oidc or platform name (google, gitlab, github etc)\",\n  \"name\": \"identity provider platform name\",\n  \"id\": \"identity provider platform unique id\",\n  \"config\": \"connector details including clientID, clientSecret, redirectURI\",\n  \"hostedDomains\": \"authorized domains for SSO login\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Rendering a Complex Tree Structure in Go\nDESCRIPTION: Demonstrates how to create a tree with multiple branches and nodes, and render it as a string. Showcases the use of AddBranch(), AddNode(), and String() methods.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xlab/treeprint/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    // to add a custom root name use `treeprint.NewWithRoot()` instead\n    tree := treeprint.New()\n\n    // create a new branch in the root\n    one := tree.AddBranch(\"one\")\n\n    // add some nodes\n    one.AddNode(\"subnode1\").AddNode(\"subnode2\")\n\n    // create a new sub-branch\n    one.AddBranch(\"two\").\n        AddNode(\"subnode1\").AddNode(\"subnode2\"). // add some nodes\n        AddBranch(\"three\"). // add a new sub-branch\n        AddNode(\"subnode1\").AddNode(\"subnode2\") // add some nodes too\n\n    // add one more node that should surround the inner branch\n    one.AddNode(\"subnode3\")\n\n    // add a new node to the root\n    tree.AddNode(\"outernode\")\n\n    fmt.Println(tree.String())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with CI/CD Mode (No Image Pull Secrets)\nDESCRIPTION: Helm command to install Devtron with CI/CD module without image pull secrets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-in-airgapped-environment.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nhelm install devtron . -n devtroncd --set installer.modules={cicd} --set global.containerRegistry=\"$TARGET_REGISTRY\"\n```\n\n----------------------------------------\n\nTITLE: Handling Time Histogram Metrics Example in Prometheus Format\nDESCRIPTION: Example of Prometheus histogram metrics showing RPC handling time distribution. These metrics include buckets, sum, and count for analyzing latency patterns and SLAs.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_7\n\nLANGUAGE: jsoniq\nCODE:\n```\ngrpc_server_handling_seconds_bucket{grpc_code=\"OK\",grpc_method=\"PingList\",grpc_service=\"mwitkow.testproto.TestService\",grpc_type=\"server_stream\",le=\"0.005\"} 1\ngrpc_server_handling_seconds_bucket{grpc_code=\"OK\",grpc_method=\"PingList\",grpc_service=\"mwitkow.testproto.TestService\",grpc_type=\"server_stream\",le=\"0.01\"} 1\ngrpc_server_handling_seconds_bucket{grpc_code=\"OK\",grpc_method=\"PingList\",grpc_service=\"mwitkow.testproto.TestService\",grpc_type=\"server_stream\",le=\"0.025\"} 1\ngrpc_server_handling_seconds_bucket{grpc_code=\"OK\",grpc_method=\"PingList\",grpc_service=\"mwitkow.testproto.TestService\",grpc_type=\"server_stream\",le=\"0.05\"} 1\ngrpc_server_handling_seconds_bucket{grpc_code=\"OK\",grpc_method=\"PingList\",grpc_service=\"mwitkow.testproto.TestService\",grpc_type=\"server_stream\",le=\"0.1\"} 1\ngrpc_server_handling_seconds_bucket{grpc_code=\"OK\",grpc_method=\"PingList\",grpc_service=\"mwitkow.testproto.TestService\",grpc_type=\"server_stream\",le=\"0.25\"} 1\ngrpc_server_handling_seconds_bucket{grpc_code=\"OK\",grpc_method=\"PingList\",grpc_service=\"mwitkow.testproto.TestService\",grpc_type=\"server_stream\",le=\"0.5\"} 1\ngrpc_server_handling_seconds_bucket{grpc_code=\"OK\",grpc_method=\"PingList\",grpc_service=\"mwitkow.testproto.TestService\",grpc_type=\"server_stream\",le=\"1\"} 1\ngrpc_server_handling_seconds_bucket{grpc_code=\"OK\",grpc_method=\"PingList\",grpc_service=\"mwitkow.testproto.TestService\",grpc_type=\"server_stream\",le=\"2.5\"} 1\ngrpc_server_handling_seconds_bucket{grpc_code=\"OK\",grpc_method=\"PingList\",grpc_service=\"mwitkow.testproto.TestService\",grpc_type=\"server_stream\",le=\"5\"} 1\ngrpc_server_handling_seconds_bucket{grpc_code=\"OK\",grpc_method=\"PingList\",grpc_service=\"mwitkow.testproto.TestService\",grpc_type=\"server_stream\",le=\"10\"} 1\ngrpc_server_handling_seconds_bucket{grpc_code=\"OK\",grpc_method=\"PingList\",grpc_service=\"mwitkow.testproto.TestService\",grpc_type=\"server_stream\",le=\"+Inf\"} 1\ngrpc_server_handling_seconds_sum{grpc_code=\"OK\",grpc_method=\"PingList\",grpc_service=\"mwitkow.testproto.TestService\",grpc_type=\"server_stream\"} 0.0003866430000000001\ngrpc_server_handling_seconds_count{grpc_code=\"OK\",grpc_method=\"PingList\",grpc_service=\"mwitkow.testproto.TestService\",grpc_type=\"server_stream\"} 1\n```\n\n----------------------------------------\n\nTITLE: Importing gofuzz Library in Go\nDESCRIPTION: Shows how to import the gofuzz library into a Go project.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/google/gofuzz/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/google/gofuzz\"\n```\n\n----------------------------------------\n\nTITLE: Converting between YAML and JSON in Go\nDESCRIPTION: Shows how to use the yaml.YAMLToJSON and yaml.JSONToYAML functions to convert between YAML and JSON formats. This is useful for interoperability between YAML and JSON data representations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/sigs.k8s.io/yaml/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"sigs.k8s.io/yaml\"\n)\n\nfunc main() {\n\tj := []byte(`{\"name\": \"John\", \"age\": 30}`)\n\ty, err := yaml.JSONToYAML(j)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(y))\n\t/* Output:\n\tage: 30\n\tname: John\n\t*/\n\tj2, err := yaml.YAMLToJSON(y)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(j2))\n\t/* Output:\n\t{\"age\":30,\"name\":\"John\"}\n\t*/\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Devtron Deployment Chart\nDESCRIPTION: This YAML configuration is used to set environment variables for containers running in the Pod. The example shows an empty array that can be populated with environment variable definitions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Supporting Configured Endpoints via Environment Variables in Go\nDESCRIPTION: Adds support for configured endpoints via environment variables and the AWS shared configuration file.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/internal/ini/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n// No specific code provided, but implies new functionality for endpoint configuration\n```\n\n----------------------------------------\n\nTITLE: Creating Not Found Error with Formatting in Go\nDESCRIPTION: NotFoundf returns an error which satisfies IsNotFound(). It takes a format string and optional arguments for formatting.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc NotFoundf(format string, args ...interface{}) error\n```\n\n----------------------------------------\n\nTITLE: Setting Devtron Release Name as a Variable\nDESCRIPTION: Command to set the Devtron release name as a variable for use in subsequent upgrade commands.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.4.x-0.4.x.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRELEASE_NAME=devtron\n```\n\n----------------------------------------\n\nTITLE: GJSON Performance Benchmarks Against Other Go JSON Libraries\nDESCRIPTION: Benchmark results comparing GJSON with other JSON parsing libraries in Go, showing GJSON's efficiency for direct value access operations without full unmarshaling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nBenchmarkGJSONGet-16                11644512       311 ns/op       0 B/op\t       0 allocs/op\nBenchmarkGJSONUnmarshalMap-16        1122678      3094 ns/op    1920 B/op\t      26 allocs/op\nBenchmarkJSONUnmarshalMap-16          516681      6810 ns/op    2944 B/op\t      69 allocs/op\nBenchmarkJSONUnmarshalStruct-16       697053      5400 ns/op     928 B/op\t      13 allocs/op\nBenchmarkJSONDecoder-16               330450     10217 ns/op    3845 B/op\t     160 allocs/op\nBenchmarkFFJSONLexer-16              1424979      2585 ns/op     880 B/op\t       8 allocs/op\nBenchmarkEasyJSONLexer-16            3000000       729 ns/op     501 B/op\t       5 allocs/op\nBenchmarkJSONParserGet-16            3000000       366 ns/op      21 B/op\t       0 allocs/op\nBenchmarkJSONIterator-16             3000000       869 ns/op     693 B/op\t      14 allocs/op\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"widget\": {\n    \"debug\": \"on\",\n    \"window\": {\n      \"title\": \"Sample Konfabulator Widget\",\n      \"name\": \"main_window\",\n      \"width\": 500,\n      \"height\": 500\n    },\n    \"image\": { \n      \"src\": \"Images/Sun.png\",\n      \"hOffset\": 250,\n      \"vOffset\": 250,\n      \"alignment\": \"center\"\n    },\n    \"text\": {\n      \"data\": \"Click Here\",\n      \"size\": 36,\n      \"style\": \"bold\",\n      \"vOffset\": 100,\n      \"alignment\": \"center\",\n      \"onMouseUp\": \"sun1.opacity = (sun1.opacity / 100) * 90;\"\n    }\n  }\n}    \n```\n\n----------------------------------------\n\nTITLE: Upgrading Devtron with AWS S3 Storage Configuration\nDESCRIPTION: Command to upgrade Hyperion to Devtron full mode using AWS S3 buckets for storing build logs and cache, specifying bucket names and regions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/setup/upgrade-to-devtron.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade devtron devtron/devtron-operator --create-namespace --namespace devtroncd \\\n--set installer.mode=full \\\n--set configs.BLOB_STORAGE_PROVIDER=S3 \\\n--set configs.DEFAULT_CACHE_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CACHE_BUCKET_REGION=us-east-1 \\\n--set configs.DEFAULT_BUILD_LOGS_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CD_LOGS_BUCKET_REGION=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Ingress Format in Devtron Deployment\nDESCRIPTION: Legacy format for ingress configuration in Devtron deployment templates. This simpler format supports a single host and path.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  # For K8s 1.19 and above use ingressClassName instead of annotation kubernetes.io/ingress.class:\n  ingressClassName: nginx-internal\n  annotations: {}\n  path: \"\"\n  host: \"\"\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Updating Key-Value Types in Go OpenTelemetry API\nDESCRIPTION: Code changes showing the replacement of value package types with new kv package types in OpenTelemetry Go SDK. Shows the migration from value.X to kv.XValue type names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_38\n\nLANGUAGE: go\nCODE:\n```\nvalue.Bool -> kv.BoolValue\nvalue.Int64 -> kv.Int64Value\nvalue.Uint64 -> kv.Uint64Value\nvalue.Float64 -> kv.Float64Value\nvalue.Int32 -> kv.Int32Value\nvalue.Uint32 -> kv.Uint32Value\nvalue.Float32 -> kv.Float32Value\nvalue.String -> kv.StringValue\nvalue.Int -> kv.IntValue\nvalue.Uint -> kv.UintValue\nvalue.Array -> kv.ArrayValue\n```\n\n----------------------------------------\n\nTITLE: Importing heredoc Package in Go\nDESCRIPTION: Standard import statement for including the heredoc package in Go code\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/MakeNowJust/heredoc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/MakeNowJust/heredoc\"\n```\n\n----------------------------------------\n\nTITLE: Setting MaxUnavailable for Rolling Updates\nDESCRIPTION: Configures the maximum number of pods that can be unavailable during the update process. Can be an absolute number or percentage of replicas.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  MaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint: orchestratorApplicationGet in Markdown\nDESCRIPTION: Documents the orchestratorApplicationGet endpoint, which retrieves all external applications and Devtron helm chart applications. It takes clusterIds as a parameter and returns an AppList object.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/md-output/Apis/DefaultApi.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# **orchestratorApplicationGet**\nAppList orchestratorApplicationGet(clusterIds)\n\n    this api gives all external application+ devtron helm chart applications.\n\n### Parameters\n\nName | Type | Description  | Notes\n------------- | ------------- | ------------- | -------------\n **clusterIds** | [**List**](../Models/Integer.md)| cluster ids | [default to null]\n\n### Return type\n\n[**AppList**](../Models/AppList.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: text/event-stream\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override for Kubernetes Objects\nDESCRIPTION: Replaces the default release fullname used by Devtron for Kubernetes object naming. By default, Devtron uses {app-name}-{environment-name}.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Handling Theoretical Errors with DPanic in Go\nDESCRIPTION: Example of code that should be replaced with DPanic, which panics in development but logs errors in production. This demonstrates an anti-pattern where developers use panic for errors that shouldn't occur.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.uber.org/zap/FAQ.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n  panic(fmt.Sprintf(\"shouldn't ever get here: %v\", err))\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and marshaling YAML data in Go using yaml.v3\nDESCRIPTION: A complete example demonstrating how to unmarshal YAML into a Go struct with custom tags, marshal a struct back to YAML, and perform the same operations with a dynamic map. Shows struct field tagging for renaming fields and controlling formatting.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/sigs.k8s.io/yaml/goyaml.v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v3\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with Default Configuration\nDESCRIPTION: Basic Devtron installation using Helm with Minio storage for build logs and cache\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-helm-3.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai\n\nhelm repo update devtron\n\nhelm install devtron devtron/devtron-operator --create-namespace --namespace devtroncd \\\n--set installer.modules={cicd}\n```\n\n----------------------------------------\n\nTITLE: Applying ArgoCD Prerequisites Patch Job\nDESCRIPTION: Command to apply the ArgoCD v2.4.0 prerequisites patch job to fix compatibility issues before upgrading to Devtron v0.5.x.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.4.x-0.5.x.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/devtron-labs/utilities/main/scripts/jobs/argocd-2.4.0-prerequisites-patch-job.yaml\n```\n\n----------------------------------------\n\nTITLE: Importing gRPC in Go\nDESCRIPTION: This snippet shows how to import the gRPC package in a Go project. After adding this import, running go build, go run, or go test will automatically fetch the necessary dependencies.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"google.golang.org/grpc\"\n```\n\n----------------------------------------\n\nTITLE: Basic Error Wrapping Usage in Go\nDESCRIPTION: Demonstrates basic usage of errwrap package including wrapping errors, checking contained errors, and extracting specific error types. Shows implementation of error handling for file operations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// A function that always returns an error, but wraps it, like a real\n// function might.\nfunc tryOpen() error {\n\t_, err := os.Open(\"/i/dont/exist\")\n\tif err != nil {\n\t\treturn errwrap.Wrapf(\"Doesn't exist: {{err}}\", err)\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\terr := tryOpen()\n\n\t// We can use the Contains helpers to check if an error contains\n\t// another error. It is safe to do this with a nil error, or with\n\t// an error that doesn't even use the errwrap package.\n\tif errwrap.Contains(err, \"does not exist\") {\n\t\t// Do something\n\t}\n\tif errwrap.ContainsType(err, new(os.PathError)) {\n\t\t// Do something\n\t}\n\n\t// Or we can use the associated `Get` functions to just extract\n\t// a specific error. This would return nil if that specific error doesn't\n\t// exist.\n\tperr := errwrap.GetType(err, new(os.PathError))\n}\n```\n\n----------------------------------------\n\nTITLE: Validating JSON with GJSON in Go\nDESCRIPTION: Demonstrates how to validate that a JSON string is well-formed before processing it with GJSON, which is important when handling JSON from unpredictable sources.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nif !gjson.Valid(json) {\n\treturn errors.New(\"invalid json\")\n}\nvalue := gjson.Get(json, \"name.last\")\n```\n\n----------------------------------------\n\nTITLE: Setting Token Expiration Time - Go\nDESCRIPTION: Method to set the ExpireAtInMs field in the CreateApiTokenRequest object.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/CreateApiTokenRequest.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *CreateApiTokenRequest) SetExpireAtInMs(v int64)\n```\n\n----------------------------------------\n\nTITLE: Pod Annotations Configuration\nDESCRIPTION: Specifies pod annotations for metadata and configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\npodAnnotations:\n  fluentbit.io/exclude: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Using Context to Manage Nested Traces in Go\nDESCRIPTION: Demonstrates how to use context.Context to manage trace nesting across function boundaries. This pattern allows traces to propagate through call chains automatically.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/k8s.io/utils/trace/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc doSomething(ctx context.Context) {\n    opTrace := trace.FromContext(ctx).Nest(\"operation\") // create a trace, possibly nested\n    ctx = trace.ContextWithTrace(ctx, opTrace) // make this trace the parent trace of the context\n    defer opTrace.LogIfLong(50 * time.Millisecond)\n    \n    doSomethingElse(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Incomplete Jobs in Devtron Installation\nDESCRIPTION: Command to check the status of Kubernetes jobs in the devtroncd namespace to identify failed jobs during installation. This helps diagnose unauthorized errors when trying to save global configurations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/Troubleshooting.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get jobs -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with CI/CD and Argo CD (No Image Pull Secrets)\nDESCRIPTION: Helm command to install Devtron with CI/CD module and Argo CD without image pull secrets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-in-airgapped-environment.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nhelm install devtron . --create-namespace -n devtroncd --set installer.modules={cicd} --set argo-cd.enabled=true --set global.containerRegistry=\"$TARGET_REGISTRY\" --set argo-cd.global.image.repository=\"${TARGET_REGISTRY}/argocd\" --set argo-cd.redis.image.repository=\"${TARGET_REGISTRY}/redis\"\n```\n\n----------------------------------------\n\nTITLE: Running Vet and Tests in Bash\nDESCRIPTION: Command-line instructions for running code verification and tests before submitting a PR. These commands check for vet errors and run tests in both normal and race mode.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/google.golang.org/grpc/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nVET_SKIP_PROTO=1 ./vet.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo test -cpu 1,4 -timeout 7m ./...\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo test -race -cpu 1,4 -timeout 7m ./...\n```\n\n----------------------------------------\n\nTITLE: Simplified Image Descriptor Template Example\nDESCRIPTION: A minimal example of an image descriptor template that only renders the repository name and tag from the CI/CD pipeline. This simplified template can be used when only basic image information is needed.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/deployment-charts.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"image\": {\n\t        \"repository\": \"{{.Name}}\",\n\t        \"tag\": \"{{.Tag}}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw Kubernetes YAML\nDESCRIPTION: Configuration for including raw Kubernetes object definitions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Setting Grace Period in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to set the termination grace period for pods in a Kubernetes deployment. It specifies the time Kubernetes waits before forcefully terminating a pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Retrieving Devtron Admin Password\nDESCRIPTION: Command to retrieve the Devtron admin password from the Kubernetes secret. The admin username remains 'admin' after upgrading from Hyperion to Devtron full mode.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/setup/upgrade-to-devtron.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get secret devtron-secret -o jsonpath='{.data.ACD_PASSWORD}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Creating Not Valid Error with Formatting in Go\nDESCRIPTION: NotValidf returns an error which satisfies IsNotValid(). It takes a format string and optional arguments for formatting.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nfunc NotValidf(format string, args ...interface{}) error\n```\n\n----------------------------------------\n\nTITLE: Configuring User Inputs for Devtron CD Trigger Plugin in Markdown\nDESCRIPTION: This snippet defines the user input variables required for configuring the Devtron CD Trigger plugin. It includes variable names, formats, descriptions, and sample values in a markdown table format.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/plugins/devtron-cd-trigger.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable                 | Format       | Description | Sample Value |\n| ------------------------ | ------------ | ----------- | ------------ |\n|   DevtronApiToken        | STRING       | Enter target Devtron API token. |  abc123DEFxyz456token789            |\n|   DevtronEndpoint        | STRING       | Enter the target URL of Devtron.     | https://devtron.example.com            |\n|   DevtronApp             | STRING       | Enter the target Devtron Application name/ID | plugin-demo |\n|   DevtronEnv             | STRING       | Enter the target Environment name/ID. Required if JobPipeline is not given |  preview         |\n|   StatusTimeoutSeconds           | STRING       | Enter the maximum time (in seconds) a user can wait for the application to deploy. Enter a positive integer value   | 120  |\n|   GitCommitHash          | STRING       | Enter the git hash from which user wants to deploy its application. By default it takes latest Artifact ID to deploy the application |    cf19e4fd348589kjhsdjn092nfse01d2234235sdsg        |\n|   TargetTriggerStage   | STRING       | Enter the Trigger Stage PRE/DEPLOY/POST. Default value is `Deploy`. |   PRE   |\n```\n\n----------------------------------------\n\nTITLE: Validating a Semantic Version Against Constraints in Go\nDESCRIPTION: This snippet demonstrates how to validate a semantic version against a constraint and extract error messages when validation fails. It first creates a constraint with two conditions, creates a version, then validates the version against the constraint and loops through the error messages.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nc, err := semver.NewConstraint(\"<= 1.2.3, >= 1.4\")\nif err != nil {\n    // Handle constraint not being parseable.\n}\n\nv, err := semver.NewVersion(\"1.3\")\nif err != nil {\n    // Handle version not being parseable.\n}\n\n// Validate a version against a constraint.\na, msgs := c.Validate(v)\n// a is false\nfor _, m := range msgs {\n    fmt.Println(m)\n\n    // Loops over the errors which would read\n    // \"1.3 is greater than 1.2.3\"\n    // \"1.3 is less than 1.4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Roles with Casbin in Go\nDESCRIPTION: Shows how to retrieve all implicit roles assigned to a user using Casbin's API. This is useful for permission management at runtime.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/casbin/v2/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nroles, _ := e.GetImplicitRolesForUser(sub)\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Go Exporter Support Matrix\nDESCRIPTION: Table showing officially supported exporters and their compatibility with metrics and traces functionality. Includes OTLP, Prometheus, stdout, and Zipkin exporters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Exporter                              | Metrics | Traces |\n|---------------------------------------|:-------:|:------:|\n| [OTLP](./exporters/otlp/)             |    ✓    |   ✓    |\n| [Prometheus](./exporters/prometheus/) |    ✓    |        |\n| [stdout](./exporters/stdout/)         |    ✓    |   ✓    |\n| [Zipkin](./exporters/zipkin/)         |         |   ✓    |\n```\n\n----------------------------------------\n\nTITLE: Pretty-Formatted JSON Output\nDESCRIPTION: The result of applying the pretty.Pretty function to the example JSON.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/pretty/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": {\n    \"first\": \"Tom\",\n    \"last\": \"Anderson\"\n  },\n  \"age\": 37,\n  \"children\": [\"Sara\", \"Alex\", \"Jack\"],\n  \"fav.movie\": \"Deer Hunter\",\n  \"friends\": [\n    {\n      \"first\": \"Janet\",\n      \"last\": \"Murphy\",\n      \"age\": 44\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service in YAML\nDESCRIPTION: Defines the type of service and annotations. In this case, it's set to ClusterIP with empty annotations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Getting Application URL Based on Service Type in Helm Template\nDESCRIPTION: A conditional template that outputs different commands to retrieve the application URL depending on the service type (Ingress, NodePort, LoadBalancer, or ClusterIP). Uses Helm templating syntax to access values and generate appropriate kubectl commands.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Admin Password\nDESCRIPTION: Command to get the admin password from Kubernetes secrets for dashboard login.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/setup/install.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get secret devtron-secret -o jsonpath='{.data.ACD_PASSWORD}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Encoding a Struct to Form Values with Gorilla Schema in Go\nDESCRIPTION: This example shows how to encode the contents of a struct into form values using gorilla/schema. It creates an Encoder instance and uses it to convert a Person struct into URL-encoded form values that can be used in HTTP requests.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/gorilla/schema/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar encoder = schema.NewEncoder()\n\nfunc MyHttpRequest() {\n    person := Person{\"Jane Doe\", \"555-5555\"}\n    form := url.Values{}\n\n    err := encoder.Encode(person, form)\n\n    if err != nil {\n        // Handle error\n    }\n\n    // Use form values, for example, with an http client\n    client := new(http.Client)\n    res, err := client.PostForm(\"http://my-api.test\", form)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Hash Implementations in Go\nDESCRIPTION: Shows required hash implementation imports to use the digest package. These imports are necessary to avoid panics and allow for hash implementation substitution.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    _ \"crypto/sha256\"\n    _ \"crypto/sha512\"\n)\n```\n\n----------------------------------------\n\nTITLE: Removing NATS Resources\nDESCRIPTION: Commands to delete nats-operator, nats-streaming, and nats-server resources from the Kubernetes cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.2.x-0.3.x.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete -f https://raw.githubusercontent.com/devtron-labs/devtron/v0.2.37/manifests/yamls/nats-operator.yaml\nkubectl -n devtroncd delete -f https://raw.githubusercontent.com/devtron-labs/devtron/v0.2.37/manifests/yamls/nats-streaming.yaml\nkubectl -n devtroncd delete -f https://raw.githubusercontent.com/devtron-labs/devtron/v0.2.37/manifests/yamls/nats-server.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Devtron Release Name as Environment Variable\nDESCRIPTION: Command to set the identified Devtron release name as an environment variable for use in the upgrade process.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.5.x-0.6.x.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport RELEASE_NAME=devtron\n```\n\n----------------------------------------\n\nTITLE: Configuring Service in Kubernetes YAML\nDESCRIPTION: Defines the service type and annotations for a Kubernetes service.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n  service:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron on K3s Cluster\nDESCRIPTION: Commands to install local storage provisioner and Devtron operator on K3s cluster using NodePort service type.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/Install-devtron-on-Minikube-Microk8s-K3s-Kind.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml\n\nhelm repo add devtron https://helm.devtron.ai\n\nhelm repo update devtron\n\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd \\\n--set components.devtron.service.type=NodePort\n```\n\n----------------------------------------\n\nTITLE: Enabling Method Name Reporting in Logrus\nDESCRIPTION: This code snippet shows how to configure Logrus to include the calling method name in log entries, which helps with debugging but adds some performance overhead.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlog.SetReportCaller(true)\n```\n\n----------------------------------------\n\nTITLE: Updating Rollout CRDs in Devtron\nDESCRIPTION: This command updates the rollout Custom Resource Definitions to the latest version, resolving issues related to deployment metrics and application configurations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/devtron-labs/devtron/main/manifests/yamls/rollout.yaml -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Fullname Override\nDESCRIPTION: Configuration to override the default release name used by Devtron for Kubernetes object names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Kubernetes Deployment\nDESCRIPTION: This YAML snippet shows how to set environment variables for containers running in a Kubernetes pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Injecting Clock Dependency Example in Go\nDESCRIPTION: An improved version of the function that takes a clockwork.Clock interface as a parameter, allowing the sleep behavior to be controlled in tests.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/jonboulle/clockwork/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc myFunc(clock clockwork.Clock) {\n\tclock.Sleep(3 * time.Second)\n\tdoSomething()\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with Stacktrace in Go Main Function\nDESCRIPTION: Example of a main function that calls the crashy.Crash() function and handles the returned error. It shows how to check if the error matches a specific error using errors.Is() and how to print the error's stack trace.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-errors/errors/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"crashy\"\n    \"fmt\"\n    \"github.com/go-errors/errors\"\n)\n\nfunc main() {\n    err := crashy.Crash()\n    if err != nil {\n        if errors.Is(err, crashy.Crashed) {\n            fmt.Println(err.(*errors.Error).ErrorStack())\n        } else {\n            panic(err)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Ready Seconds\nDESCRIPTION: Specifies minimum time a pod must be ready before being considered available\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC-Go logging\nDESCRIPTION: This shell script shows how to turn on logging for gRPC-Go by setting environment variables. It sets the verbosity level to maximum and the severity level to info.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport GRPC_GO_LOG_VERBOSITY_LEVEL=99\nexport GRPC_GO_LOG_SEVERITY_LEVEL=info\n```\n\n----------------------------------------\n\nTITLE: Implementing Setter and Has Methods for RollbackReleaseResponse in Go\nDESCRIPTION: Defines a setter method SetSuccess for the Success field and a HasSuccess method to check if the Success field has been set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/RollbackReleaseResponse.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc (o *RollbackReleaseResponse) SetSuccess(v bool)\n\nfunc (o *RollbackReleaseResponse) HasSuccess() bool\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from Files Example Command\nDESCRIPTION: Bash command example showing how to set up files with values and run a Go application that loads them using the file tag option.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/caarlos0/env/v6/README.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n$ echo qwerty > /tmp/secret\n$ echo dvorak > /tmp/password\n$ echo coleman > /tmp/certificate\n\n$ SECRET=/tmp/secret  \\\n\tCERTIFICATE_FILE=/tmp/certificate \\\n\tgo run main.go\n{Secret:qwerty Password:dvorak Certificate:coleman}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes Service URLs\nDESCRIPTION: Template logic for obtaining application URLs based on the service type (NodePort, LoadBalancer, or ClusterIP). Uses kubectl commands with jsonpath queries to extract relevant service information and construct the appropriate URL.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/cronjob-chart_1-2-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Importing the goautoneg Package in Go\nDESCRIPTION: Shows how to import the goautoneg package from its Bitbucket repository. This package provides HTTP Content-Type Autonegotiation functionality as specified in RFC 2616.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"bitbucket.org/ww/goautoneg\"\n```\n\n----------------------------------------\n\nTITLE: Access Levels Table for Charts\nDESCRIPTION: Markdown table showing permission matrix for different access levels regarding chart management.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/user-guide/global-configurations/user-access.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Access Level | View Charts | Install Charts | Edit Charts | Delete Charts |\n|--|--|--|--|--|\n| View | Yes  | No | No | No|\n| View and Edit | Yes  | No | No | No|\n|Admin| Yes | Yes | Yes | Yes |\n|Super Admin| Yes | Yes | Yes | Yes |\n```\n\n----------------------------------------\n\nTITLE: Setting Nginx Ingress File Upload Size Limit\nDESCRIPTION: Annotation to configure maximum file upload size in Nginx ingress\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnginx.ingress.kubernetes.io/proxy-body-size: 100m\n```\n\n----------------------------------------\n\nTITLE: Using RealClock in Production Code in Go\nDESCRIPTION: Example showing how to use the real clock implementation in production code, while maintaining the ability to inject a fake clock in tests.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/jonboulle/clockwork/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmyFunc(clockwork.NewRealClock())\n```\n\n----------------------------------------\n\nTITLE: Defining Starlark File Structure and Statements\nDESCRIPTION: Specifies the overall structure of a Starlark file and defines various types of statements including function definitions, control flow statements, and simple statements.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.starlark.net/syntax/grammar.txt#2025-04-22_snippet_0\n\nLANGUAGE: Starlark\nCODE:\n```\nFile = {Statement | newline} eof .\n\nStatement = DefStmt | IfStmt | ForStmt | WhileStmt | SimpleStmt .\n\nDefStmt = 'def' identifier '(' [Parameters [',']] ')' ':' Suite .\n\nParameters = Parameter {',' Parameter}.\n\nParameter = identifier | identifier '=' Test | '*' | '*' identifier | '**' identifier .\n\nIfStmt = 'if' Test ':' Suite {'elif' Test ':' Suite} ['else' ':' Suite] .\n\nForStmt = 'for' LoopVariables 'in' Expression ':' Suite .\n\nWhileStmt = 'while' Test ':' Suite .\n\nSuite = [newline indent {Statement} outdent] | SimpleStmt .\n```\n\n----------------------------------------\n\nTITLE: Checking Devtron Installation Status\nDESCRIPTION: Command to verify the status of Devtron installation\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-helm-3.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get installers installer-devtron -o jsonpath='{.status.sync.status}'\n```\n\n----------------------------------------\n\nTITLE: Running Devtron v6 Upgrade Script\nDESCRIPTION: Command to execute the downloaded upgrade script which will update Devtron from version 0.5.x to 0.6.x.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.5.x-0.6.x.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsh upgrade-devtron-v6.sh\n```\n\n----------------------------------------\n\nTITLE: Adding Extrema Type in Go OpenTelemetry SDK Metric Metricdata\nDESCRIPTION: Introduces the Extrema type to represent min/max values and distinguish between unset and zero values in the OpenTelemetry SDK metric metricdata package.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/sdk/metric/metricdata.Extrema\n```\n\n----------------------------------------\n\nTITLE: Passing Logger to Application Object\nDESCRIPTION: Shows how to pass the logger instance to other parts of the application.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n    app := createTheAppObject(logger)\n    app.Run()\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Value Setting Example\nDESCRIPTION: Basic example showing how to set a JSON value using SJSON package with dot notation path syntax\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/sjson/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/tidwall/sjson\"\n\nconst json = `{\"name\":{\"first\":\"Janet\",\"last\":\"Prichard\"},\"age\":47}`\n\nfunc main() {\n\tvalue, _ := sjson.Set(json, \"name.last\", \"Anderson\")\n\tprintln(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Reviewing Changes in OpenTelemetry Go Library\nDESCRIPTION: Changelog entries detailing API modifications, component renames, and structural changes in the OpenTelemetry Go implementation. Changes include updates to propagators, metric handling, and trace API modifications.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_39\n\n\n\n----------------------------------------\n\nTITLE: Raw Kubernetes YAML Configuration\nDESCRIPTION: Allows direct Kubernetes object definitions in YAML format.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Installing IAM API Go Client Library\nDESCRIPTION: This command installs the IAM API Go Client Library using the go get command. It fetches the library from the specified cloud.google.com/go/iam package.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/cloud.google.com/go/iam/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/iam\n```\n\n----------------------------------------\n\nTITLE: Message Sent Metrics Example in Prometheus Format\nDESCRIPTION: Example of Prometheus metrics showing messages sent by the server. This counter is incremented for each message sent back to the client.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_5\n\nLANGUAGE: jsoniq\nCODE:\n```\ngrpc_server_msg_sent_total{grpc_method=\"PingList\",grpc_service=\"mwitkow.testproto.TestService\",grpc_type=\"server_stream\"} 20\n```\n\n----------------------------------------\n\nTITLE: Example Description Configuration in Code Scan Plugin\nDESCRIPTION: Example showing how to set the description when configuring the Code Scan plugin in Devtron.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/plugins/code-scan.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThe Code Scan plugin is integrated for scanning the in-code vulnerabilities.\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override\nDESCRIPTION: Overrides the default release name pattern used by Devtron.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 with IAM Policy\nDESCRIPTION: Helm command to configure AWS S3 bucket using IAM policy for storing build logs and cache. Requires S3 permission policy attached to cluster nodes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/installation-configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd \\\n--reuse-values \\\n--set installer.modules={cicd} \\\n--set configs.BLOB_STORAGE_PROVIDER=S3 \\\n--set configs.DEFAULT_CACHE_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CACHE_BUCKET_REGION=us-east-1 \\\n--set configs.DEFAULT_BUILD_LOGS_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CD_LOGS_BUCKET_REGION=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Creating Not Valid Error in Go\nDESCRIPTION: NewNotValid returns an error which wraps err and satisfies IsNotValid(). It takes an error and a message string as parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc NewNotValid(err error, msg string) error\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Go Playground Validator Operations\nDESCRIPTION: This code snippet shows benchmark results for various validation operations using the Go Playground Validator library. It includes metrics for field validation, array and map diving, custom type validation, struct-level validation, and more. The benchmarks measure operations per second and memory allocations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/gopkg.in/go-playground/validator.v9/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngoos: darwin\ngoarch: amd64\npkg: github.com/go-playground/validator\nBenchmarkFieldSuccess-8                                         20000000                83.6 ns/op             0 B/op          0 allocs/op\nBenchmarkFieldSuccessParallel-8                                 50000000                26.8 ns/op             0 B/op          0 allocs/op\nBenchmarkFieldFailure-8                                          5000000               291 ns/op             208 B/op          4 allocs/op\nBenchmarkFieldFailureParallel-8                                 20000000               107 ns/op             208 B/op          4 allocs/op\nBenchmarkFieldArrayDiveSuccess-8                                 2000000               623 ns/op             201 B/op         11 allocs/op\nBenchmarkFieldArrayDiveSuccessParallel-8                        10000000               237 ns/op             201 B/op         11 allocs/op\nBenchmarkFieldArrayDiveFailure-8                                 2000000               859 ns/op             412 B/op         16 allocs/op\nBenchmarkFieldArrayDiveFailureParallel-8                         5000000               335 ns/op             413 B/op         16 allocs/op\nBenchmarkFieldMapDiveSuccess-8                                   1000000              1292 ns/op             432 B/op         18 allocs/op\nBenchmarkFieldMapDiveSuccessParallel-8                           3000000               467 ns/op             432 B/op         18 allocs/op\nBenchmarkFieldMapDiveFailure-8                                   1000000              1082 ns/op             512 B/op         16 allocs/op\nBenchmarkFieldMapDiveFailureParallel-8                           5000000               425 ns/op             512 B/op         16 allocs/op\nBenchmarkFieldMapDiveWithKeysSuccess-8                           1000000              1539 ns/op             480 B/op         21 allocs/op\nBenchmarkFieldMapDiveWithKeysSuccessParallel-8                   3000000               613 ns/op             480 B/op         21 allocs/op\nBenchmarkFieldMapDiveWithKeysFailure-8                           1000000              1413 ns/op             721 B/op         21 allocs/op\nBenchmarkFieldMapDiveWithKeysFailureParallel-8                   3000000               575 ns/op             721 B/op         21 allocs/op\nBenchmarkFieldCustomTypeSuccess-8                               10000000               216 ns/op              32 B/op          2 allocs/op\nBenchmarkFieldCustomTypeSuccessParallel-8                       20000000                82.2 ns/op            32 B/op          2 allocs/op\nBenchmarkFieldCustomTypeFailure-8                                5000000               274 ns/op             208 B/op          4 allocs/op\nBenchmarkFieldCustomTypeFailureParallel-8                       20000000               116 ns/op             208 B/op          4 allocs/op\nBenchmarkFieldOrTagSuccess-8                                     2000000               740 ns/op              16 B/op          1 allocs/op\nBenchmarkFieldOrTagSuccessParallel-8                             3000000               474 ns/op              16 B/op          1 allocs/op\nBenchmarkFieldOrTagFailure-8                                     3000000               471 ns/op             224 B/op          5 allocs/op\nBenchmarkFieldOrTagFailureParallel-8                             3000000               414 ns/op             224 B/op          5 allocs/op\nBenchmarkStructLevelValidationSuccess-8                         10000000               213 ns/op              32 B/op          2 allocs/op\nBenchmarkStructLevelValidationSuccessParallel-8                 20000000                91.8 ns/op            32 B/op          2 allocs/op\nBenchmarkStructLevelValidationFailure-8                          3000000               473 ns/op             304 B/op          8 allocs/op\nBenchmarkStructLevelValidationFailureParallel-8                 10000000               234 ns/op             304 B/op          8 allocs/op\nBenchmarkStructSimpleCustomTypeSuccess-8                         5000000               385 ns/op              32 B/op          2 allocs/op\nBenchmarkStructSimpleCustomTypeSuccessParallel-8                10000000               161 ns/op              32 B/op          2 allocs/op\nBenchmarkStructSimpleCustomTypeFailure-8                         2000000               640 ns/op             424 B/op          9 allocs/op\nBenchmarkStructSimpleCustomTypeFailureParallel-8                 5000000               318 ns/op             440 B/op         10 allocs/op\nBenchmarkStructFilteredSuccess-8                                 2000000               597 ns/op             288 B/op          9 allocs/op\nBenchmarkStructFilteredSuccessParallel-8                        10000000               266 ns/op             288 B/op          9 allocs/op\nBenchmarkStructFilteredFailure-8                                 3000000               454 ns/op             256 B/op          7 allocs/op\nBenchmarkStructFilteredFailureParallel-8                        10000000               214 ns/op             256 B/op          7 allocs/op\nBenchmarkStructPartialSuccess-8                                  3000000               502 ns/op             256 B/op          6 allocs/op\nBenchmarkStructPartialSuccessParallel-8                         10000000               225 ns/op             256 B/op          6 allocs/op\nBenchmarkStructPartialFailure-8                                  2000000               702 ns/op             480 B/op         11 allocs/op\nBenchmarkStructPartialFailureParallel-8                          5000000               329 ns/op             480 B/op         11 allocs/op\nBenchmarkStructExceptSuccess-8                                   2000000               793 ns/op             496 B/op         12 allocs/op\nBenchmarkStructExceptSuccessParallel-8                          10000000               193 ns/op             240 B/op          5 allocs/op\nBenchmarkStructExceptFailure-8                                   2000000               639 ns/op             464 B/op         10 allocs/op\nBenchmarkStructExceptFailureParallel-8                           5000000               300 ns/op             464 B/op         10 allocs/op\nBenchmarkStructSimpleCrossFieldSuccess-8                         3000000               417 ns/op              72 B/op          3 allocs/op\nBenchmarkStructSimpleCrossFieldSuccessParallel-8                10000000               163 ns/op              72 B/op          3 allocs/op\nBenchmarkStructSimpleCrossFieldFailure-8                         2000000               645 ns/op             304 B/op          8 allocs/op\nBenchmarkStructSimpleCrossFieldFailureParallel-8                 5000000               285 ns/op             304 B/op          8 allocs/op\nBenchmarkStructSimpleCrossStructCrossFieldSuccess-8              3000000               588 ns/op              80 B/op          4 allocs/op\nBenchmarkStructSimpleCrossStructCrossFieldSuccessParallel-8     10000000               221 ns/op              80 B/op          4 allocs/op\nBenchmarkStructSimpleCrossStructCrossFieldFailure-8              2000000               868 ns/op             320 B/op          9 allocs/op\nBenchmarkStructSimpleCrossStructCrossFieldFailureParallel-8      5000000               337 ns/op             320 B/op          9 allocs/op\nBenchmarkStructSimpleSuccess-8                                   5000000               260 ns/op               0 B/op          0 allocs/op\nBenchmarkStructSimpleSuccessParallel-8                          20000000                90.6 ns/op             0 B/op          0 allocs/op\nBenchmarkStructSimpleFailure-8                                   2000000               619 ns/op             424 B/op          9 allocs/op\nBenchmarkStructSimpleFailureParallel-8                           5000000               296 ns/op             424 B/op          9 allocs/op\nBenchmarkStructComplexSuccess-8                                  1000000              1454 ns/op             128 B/op          8 allocs/op\nBenchmarkStructComplexSuccessParallel-8                          3000000               579 ns/op             128 B/op          8 allocs/op\nBenchmarkStructComplexFailure-8                                   300000              4140 ns/op            3041 B/op         53 allocs/op\nBenchmarkStructComplexFailureParallel-8                          1000000              2127 ns/op            3041 B/op         53 allocs/op\nBenchmarkOneof-8                                                10000000               140 ns/op               0 B/op          0 allocs/op\nBenchmarkOneofParallel-8                                        20000000                70.1 ns/op             0 B/op          0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Conditional Error Return with ErrorOrNil\nDESCRIPTION: Shows how to return a multierror only when it contains actual errors, using the ErrorOrNil method to return nil when no errors are present.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here\n\n// Return the `error` only if errors were added to the multierror, otherwise\n// return nil since there are no errors.\nreturn result.ErrorOrNil()\n```\n\n----------------------------------------\n\nTITLE: JetStream Basic Usage in Go\nDESCRIPTION: Shows how to use JetStream, NATS' built-in persistence system, including creating a JetStream context, working with streams and consumers, and consuming messages.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// connect to nats server\nnc, _ := nats.Connect(nats.DefaultURL)\n\n// create jetstream context from nats connection\njs, _ := jetstream.New(nc)\n\nctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)\ndefer cancel()\n\n// get existing stream handle\nstream, _ := js.Stream(ctx, \"foo\")\n\n// retrieve consumer handle from a stream\ncons, _ := stream.Consumer(ctx, \"cons\")\n\n// consume messages from the consumer in callback\ncc, _ := cons.Consume(func(msg jetstream.Msg) {\n    fmt.Println(\"Received jetstream message: \", string(msg.Data()))\n    msg.Ack()\n})\ndefer cc.Stop()\n```\n\n----------------------------------------\n\nTITLE: Using WithProducer Option for Prometheus Exporter in Go OpenTelemetry\nDESCRIPTION: Code showing the WithProducer option for the prometheus exporter that allows registering producers on the prometheus exporter's manual reader.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nWithProducer\n```\n\n----------------------------------------\n\nTITLE: Parsing URN using Parse() Function\nDESCRIPTION: Example showing URN parsing using the Parse() function with byte slice input\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/leodido/go-urn/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/leodido/go-urn\"\n)\n\nfunc main() {\n\tvar uid = \"URN:foo:a123,456\"\n\n    // Parse the input string as a RFC 2141 URN only\n\tu, ok := urn.Parse([]byte(uid))\n\tif !ok {\n\t\tpanic(\"error parsing urn\")\n\t}\n\n\tfmt.Println(u.ID)\n\tfmt.Println(u.SS)\n\n\t// Output:\n\t// foo\n\t// a123,456\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Settings\nDESCRIPTION: YAML configuration for Kubernetes service type and annotations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Kubeconfig for Devtron Access\nDESCRIPTION: YAML configuration for the kubeconfig file to connect to Kubernetes clusters through Devtron. This enables running kubectl commands locally while using Devtron's proxy and authentication system.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/resource-browser.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Config\nclusters:\n- cluster:\n    insecure-skip-tls-verify: true\n    server: https://<devtron_host_name>/orchestrator/k8s/proxy/cluster/<cluster_name>\n  name: devtron-cluster\ncontexts:\n- context:\n    cluster: devtron-cluster\n    user: admin\n  name: devtron-cluster\ncurrent-context: devtron-cluster\nusers:\n- name: admin\n  user:\n    token: <devtron_token>\n```\n\n----------------------------------------\n\nTITLE: Getting Admin Password for Devtron v0.6.0+\nDESCRIPTION: Command to retrieve the admin password from Kubernetes secret for Devtron version 0.6.0 and higher.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/Install-devtron-on-Minikube-Microk8s-K3s-Kind.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get secret devtron-secret \\\n-o jsonpath='{.data.ADMIN_PASSWORD}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema with go-pg ORM\nDESCRIPTION: Function to create temporary database tables for User and Story models using go-pg's ORM functionality.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-pg/pg/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc createSchema(db *pg.DB) error {\n    for _, model := range []interface{}{(*User)(nil), (*Story)(nil)} {\n        err := db.CreateTable(model, &orm.CreateTableOptions{\n            Temp: true,\n        })\n        if err != nil {\n            return err\n        }\n    }\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Flag with pflag\nDESCRIPTION: This example shows how to deprecate a flag and provide a usage message for the deprecated flag using pflag.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nflags.MarkDeprecated(\"badflag\", \"please use --good-flag instead\")\n```\n\n----------------------------------------\n\nTITLE: Example Task Name Configuration in Code Scan Plugin\nDESCRIPTION: Example showing how to set the task name when configuring the Code Scan plugin in Devtron.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/plugins/code-scan.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCode Scanning\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Disruption Budget with maxUnavailable\nDESCRIPTION: Sets maximum number of pods that can be unavailable during voluntary disruptions. Alternative to minAvailable approach for ensuring application availability.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget: \n     maxUnavailable: 50%\n```\n\n----------------------------------------\n\nTITLE: Upgrading Devtron using Helm\nDESCRIPTION: Command to upgrade Devtron using Helm, specifying the target version previously set in the environment variable.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.3.x-0.3.x.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd --set installer.release=$DEVTRON_TARGET_VERSION\n```\n\n----------------------------------------\n\nTITLE: Standard JSON Marshal Example\nDESCRIPTION: Example showing the standard Go JSON marshaling import and usage that users will be replacing.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"encoding/json\"\njson.Marshal(&data)\n```\n\n----------------------------------------\n\nTITLE: Using Array Separator in govaluate\nDESCRIPTION: Demonstrates the use of the comma separator to create arrays in govaluate expressions. Arrays must be enclosed in parentheses.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/govaluate/MANUAL.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n(1, 2, 3, 4)\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Template in YAML\nDESCRIPTION: Outlines two scenarios for creating environment templates: when the environment is overridden and when it's not. It specifies how the override YAML is set and used in each case.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/developers-guide/DeploymentTemplate.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nCase 1 (env overridden):\n  chart_env_config_override.env_override_yaml: from UI\nCase 2 (env not overridden):\n  chart_env_config_override.env_override_yaml: \"{}\"\n```\n\n----------------------------------------\n\nTITLE: Using Default Fields for Context in Logrus\nDESCRIPTION: This snippet shows how to create a logger with default fields that will be included in all subsequent log entries, which is useful for including request context information.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nrequestLogger := log.WithFields(log.Fields{\"request_id\": request_id, \"user_ip\": user_ip})\nrequestLogger.Info(\"something happened on that request\") # will log request_id and user_ip\nrequestLogger.Warn(\"something not great happened\")\n```\n\n----------------------------------------\n\nTITLE: Basic Struct Merging Example with Mergo in Go\nDESCRIPTION: A complete example demonstrating how to merge two structs using Mergo, showing the result of the merge operation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/dario.cat/mergo/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"dario.cat/mergo\"\n)\n\ntype Foo struct {\n\tA string\n\tB int64\n}\n\nfunc main() {\n\tsrc := Foo{\n\t\tA: \"one\",\n\t\tB: 2,\n\t}\n\tdest := Foo{\n\t\tA: \"two\",\n\t}\n\tmergo.Merge(&dest, src)\n\tfmt.Println(dest)\n\t// Will print\n\t// {two 2}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Kubernetes Deployment\nDESCRIPTION: Empty array configuration for setting environment variables in container pods. This allows for runtime configuration of application behavior.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Creating GRPC Driver for OTLP Exporter in Go\nDESCRIPTION: Returns a ProtocolDriver that maintains a single gRPC connection to the collector for the OTLP exporter.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_35\n\nLANGUAGE: Go\nCODE:\n```\nNewGRPCDriver()\n```\n\n----------------------------------------\n\nTITLE: Using Multi-line Matchers in Casbin CONF\nDESCRIPTION: This snippet demonstrates how to use multi-line matchers in Casbin's CONF file by appending '\\' at the end of each line.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/casbin/README.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# Matchers\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj \\ \n  && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Reading Sys Filesystem Files in Go\nDESCRIPTION: Example showing how to read small single-value files from the /sys filesystem using the specialized util.SysReadFile function which optimizes for small file reads.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ndata, err := util.SysReadFile(\"/sys/class/power_supply/BAT0/capacity\")\n```\n\n----------------------------------------\n\nTITLE: Installing tagparser package using Go\nDESCRIPTION: Command to install the tagparser package using Go's package management system. This installs version 2 of the package.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/vmihailenco/tagparser/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/vmihailenco/tagparser/v2\n```\n\n----------------------------------------\n\nTITLE: Configuring Ambassador Mappings\nDESCRIPTION: Configuration for Ambassador API Gateway mappings including routing, TLS, and CORS settings. Defines how external traffic is routed to services.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nambassadorMapping:\n  ambassadorId: \"prod-emissary\"\n  cors: {}\n  enabled: true\n  hostname: devtron.example.com\n  labels: {}\n  prefix: /\n  retryPolicy: {}\n  rewrite: \"\"\n  tls:\n    context: \"devtron-tls-context\"\n    create: false\n    hosts: []\n    secretName: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Volumes in Kubernetes YAML\nDESCRIPTION: Defines volumes for external storage in Kubernetes deployments. Includes examples of emptyDir and persistentVolumeClaim.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Parsing Command Line Arguments with pflag\nDESCRIPTION: This snippet demonstrates how to parse command line arguments into defined flags using pflag's Parse() function.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nflag.Parse()\n```\n\n----------------------------------------\n\nTITLE: Terminating Database Connections in PostgreSQL\nDESCRIPTION: SQL command to terminate all active connections to a specific database before deletion\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nSELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname='TARGET_DB';\n```\n\n----------------------------------------\n\nTITLE: Implementing Getter Methods for RollbackReleaseResponse in Go\nDESCRIPTION: Defines getter methods for the Success field of RollbackReleaseResponse. GetSuccess returns the Success value, while GetSuccessOk returns a tuple with the Success value and a boolean indicating if it's set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/RollbackReleaseResponse.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc (o *RollbackReleaseResponse) GetSuccess() bool\n\nfunc (o *RollbackReleaseResponse) GetSuccessOk() (*bool, bool)\n```\n\n----------------------------------------\n\nTITLE: Defining Starlark Simple Statements\nDESCRIPTION: Specifies the structure of simple statements in Starlark, including return, break, continue, pass, assignment, expression, and load statements.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.starlark.net/syntax/grammar.txt#2025-04-22_snippet_1\n\nLANGUAGE: Starlark\nCODE:\n```\nSimpleStmt = SmallStmt {';' SmallStmt} [';'] '\\n' .\n# NOTE: '\\n' optional at EOF\n\nSmallStmt = ReturnStmt\n          | BreakStmt | ContinueStmt | PassStmt\n          | AssignStmt\n          | ExprStmt\n          | LoadStmt\n          .\n\nReturnStmt   = 'return' [Expression] .\nBreakStmt    = 'break' .\nContinueStmt = 'continue' .\nPassStmt     = 'pass' .\nAssignStmt   = Expression ('=' | '+=' | '-=' | '*=' | '/=' | '//=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=') Expression .\nExprStmt     = Expression .\n\nLoadStmt = 'load' '(' string {',' [identifier '='] string} [','] ')' .\n```\n\n----------------------------------------\n\nTITLE: Sample Output for Devtron Dashboard URL\nDESCRIPTION: Example output from the command to get the Devtron dashboard URL, showing the Loadbalancer hostname that can be used to access the dashboard.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n[test2@server ~]$ kubectl get svc -n devtroncd devtron-service -o jsonpath='{.status.loadBalancer.ingress}'\n[map[hostname:aaff16e9760594a92afa0140dbfd99f7-305259315.us-east-1.elb.amazonaws.com]]\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Go Validator Package\nDESCRIPTION: Shows how to properly handle validation errors by type asserting the returned error to validator.ValidationErrors type for proper processing.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/gopkg.in/go-playground/validator.v9/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nerr := validate.Struct(mystruct)\nvalidationErrors := err.(validator.ValidationErrors)\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 with IAM Policy\nDESCRIPTION: Helm commands to configure AWS S3 bucket storage using IAM policy for build logs and cache.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--reuse-values \\\n--set configs.BLOB_STORAGE_PROVIDER=S3 \\\n--set configs.DEFAULT_CACHE_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CACHE_BUCKET_REGION=us-east-1 \\\n--set configs.DEFAULT_BUILD_LOGS_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CD_LOGS_BUCKET_REGION=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Plugin Request Body JSON for Secret Management Validator Plugin\nDESCRIPTION: Sample JSON request body for creating a Secret Management Validator plugin. The payload defines plugin metadata, variables, and shell script implementation for detecting secrets in code.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/plugins/create-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Secret Management Validator\",\n    \"description\": \"The Secret Management Validator plugin integrates with your CI/CD pipeline to automatically detect and prevent the inclusion of secrets or sensitive information in your codebase, ensuring compliance and security.\",\n    \"type\": \"SHARED\",\n    \"icon\": \"https://devtron-public-asset.s3.us-east-2.amazonaws.com/images/vectors/secret-management-validator.png\",\n    \"tags\": [\"security\", \"compliance\", \"secrets\"],\n    \"action\": 0,\n    \"pluginStage\": \"CI_CD\",\n    \"pluginSteps\": [\n        {\n            \"name\": \"Step 1\",\n            \"description\": \"Step 1 - Secret Management Validator\",\n            \"index\": 1,\n            \"stepType\": \"INLINE\",\n            \"refPluginId\": 0,\n            \"outputDirectoryPath\": null,\n            \"dependentOnStep\": \"\",\n            \"pluginStepVariable\": [\n                {\n                    \"name\": \"PathToScan\",\n                    \"format\": \"STRING\",\n                    \"description\": \"The relative path to the directory or file that needs to be scanned for secrets.\",\n                    \"isExposed\": true,\n                    \"allowEmptyValue\": true,\n                    \"defaultValue\": \"\",\n                    \"variableType\": \"INPUT\",\n                    \"valueType\": \"NEW\",\n                    \"variableStepIndex\": 1,\n                    \"variableStepIndexInPlugin\": 0\n                },\n                {\n                    \"name\": \"GitGuardianApiKey\",\n                    \"format\": \"STRING\",\n                    \"description\": \"The API key for GitGuardian to authenticate and use the secret detection service.\",\n                    \"isExposed\": true,\n                    \"allowEmptyValue\": false,\n                    \"defaultValue\": \"\",\n                    \"variableType\": \"INPUT\",\n                    \"valueType\": \"NEW\",\n                    \"variableStepIndex\": 1,\n                    \"variableStepIndexInPlugin\": 0\n                },\n                {\n                    \"name\": \"ScanScope\",\n                    \"format\": \"STRING\",\n                    \"description\": \"Defines the scope of the scan. It can be set to scan all files, specific file types, or based on patterns.\",\n                    \"isExposed\": true,\n                    \"allowEmptyValue\": true,\n                    \"defaultValue\": \"all\",\n                    \"variableType\": \"INPUT\",\n                    \"valueType\": \"NEW\",\n                    \"variableStepIndex\": 1,\n                    \"variableStepIndexInPlugin\": 0\n                },\n                {\n                    \"name\": \"OutputFormat\",\n                    \"format\": \"STRING\",\n                    \"description\": \"The desired format for the output report, such as JSON, HTML, or plaintext.\",\n                    \"isExposed\": true,\n                    \"allowEmptyValue\": true,\n                    \"defaultValue\": \"JSON\",\n                    \"variableType\": \"INPUT\",\n                    \"valueType\": \"NEW\",\n                    \"variableStepIndex\": 1,\n                    \"variableStepIndexInPlugin\": 0\n                }\n            ],\n            \"pluginPipelineScript\": {\n                \"script\": \"\\n# Run GitGuardian secret detection\\nif [ -n \\\"$GITGUARDIAN_API_KEY\\\" ]; then\\n echo \\\"Running GitGuardian Secret Detection...\\\"\\n ggshield scan path $SCAN_PATH --api-key $GITGUARDIAN_API_KEY\\nelse\\n echo \\\"GitGuardian API key is missing. Skipping secret detection.\\\"\\nfi\\n\\n# Output the results\\nif [ -f ggshield-output.json ]; then\\n cat ggshield-output.json\\nelse\\n echo \\\"No GitGuardian output found.\\\"\\nfi\",\n                \"storeScriptAt\": \"\",\n                \"type\": \"SHELL\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting New Value in Existing Document\nDESCRIPTION: Example of adding a new field to an existing JSON document\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/sjson/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvalue, _ := sjson.Set(`{\"name\":{\"last\":\"Anderson\"}}`, \"name.first\", \"Sara\")\nprintln(value)\n```\n\n----------------------------------------\n\nTITLE: Adapting HTTP Header to TextMapCarrier Interface in Go\nDESCRIPTION: Adds Keys() method to propagation.TextMapCarrier and propagation.HeaderCarrier to adapt http.Header to this interface.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_33\n\nLANGUAGE: Go\nCODE:\n```\nKeys()\n```\n\n----------------------------------------\n\nTITLE: Creating API Token in Go\nDESCRIPTION: Makes a POST request to create new API tokens. Takes an array of CreateApiTokenRequest objects and returns CreateApiTokenResponse.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/DefaultApi.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n    openapiclient \"./openapi\"\n)\n\nfunc main() {\n    createApiTokenRequest := []openapiclient.CreateApiTokenRequest{*openapiclient.NewCreateApiTokenRequest()} // []CreateApiTokenRequest | \n\n    configuration := openapiclient.NewConfiguration()\n    apiClient := openapiclient.NewAPIClient(configuration)\n    resp, r, err := apiClient.DefaultApi.OrchestratorApiTokenPost(context.Background()).CreateApiTokenRequest(createApiTokenRequest).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `DefaultApi.OrchestratorApiTokenPost``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    // response from `OrchestratorApiTokenPost`: CreateApiTokenResponse\n    fmt.Fprintf(os.Stdout, \"Response from `DefaultApi.OrchestratorApiTokenPost`: %v\\n\", resp)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts\nDESCRIPTION: Configuration for mounting volumes in containers with specific paths.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override in Kubernetes Deployment\nDESCRIPTION: This YAML snippet shows how to override the default fullname used by Devtron for constructing Kubernetes object names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with CI/CD Mode (With Image Pull Secrets)\nDESCRIPTION: Helm command to install Devtron with CI/CD module and image pull secrets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-in-airgapped-environment.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nhelm install devtron . -n devtroncd --set installer.modules={cicd} --set global.containerRegistry=\"$TARGET_REGISTRY\" --set global.imagePullSecrets[0].name=devtron-imagepull\n```\n\n----------------------------------------\n\nTITLE: Defining Codacy Task Variables in Devtron Pipeline\nDESCRIPTION: This table defines the input variables required for configuring the Codacy task in a Devtron pipeline. It includes variables for the API endpoint, Git provider, API token, organization, repository name, and branch.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/plugins/codacy.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n | Variable | Format | Description |\n| ---- | ---- | ---- |\n| CodacyEndpoint | String | API endpoint for Codacy |\n| GitProvider | String | Git provider for the scanning |\n| CodacyApiToken | String | API token for Codacy. If it is provided, it will be used, otherwise it will be picked from Global secret (CODACY_API_TOKEN). |\n| Organisation | String | Your Organization for Codacy|\n| RepoName | String | Your Repository name |\n| Branch | String | Your branch name |\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Kubernetes Deployment Chart\nDESCRIPTION: YAML configuration for setting environment variables for containers running in a Pod. This example shows an empty array, indicating no environment variables are currently defined.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Setting Feature Flag for GitOps Repo Configuration\nDESCRIPTION: YAML configuration showing how to enable or disable custom GitOps repository functionality through feature flags in Devtron's ConfigMap.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/gitops.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nFEATURE_USER_DEFINED_GITOPS_REPO_ENABLE: \"false\"  # For disabling\nFEATURE_USER_DEFINED_GITOPS_REPO_ENABLE: \"true\"   # For enabling\n```\n\n----------------------------------------\n\nTITLE: Using Go Channels with NATS (netchan)\nDESCRIPTION: Shows how to use Go channels with NATS for sending and receiving messages. It demonstrates creating an encoded connection, binding channels for sending and receiving, and using custom types.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nnc, _ := nats.Connect(nats.DefaultURL)\nec, _ := nats.NewEncodedConn(nc, nats.JSON_ENCODER)\ndefer ec.Close()\n\ntype person struct {\n     Name     string\n     Address  string\n     Age      int\n}\n\nrecvCh := make(chan *person)\nec.BindRecvChan(\"hello\", recvCh)\n\nsendCh := make(chan *person)\nec.BindSendChan(\"hello\", sendCh)\n\nme := &person{Name: \"derek\", Age: 22, Address: \"140 New Montgomery Street\"}\n\n// Send via Go channels\nsendCh <- me\n\n// Receive via Go channels\nwho := <- recvCh\n```\n\n----------------------------------------\n\nTITLE: Setting Container Commands\nDESCRIPTION: Defines container command configuration with enable/disable toggle.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Creating User Not Found Error with Formatting in Go\nDESCRIPTION: UserNotFoundf returns an error which satisfies IsUserNotFound(). It takes a format string and optional arguments for formatting.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nfunc UserNotFoundf(format string, args ...interface{}) error\n```\n\n----------------------------------------\n\nTITLE: Listing Enhancements in Markdown\nDESCRIPTION: A markdown list of enhancements made in Devtron v1.4.0. Each item is a brief description of a feature or improvement, along with its corresponding pull request number.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/CHANGELOG/release-notes-v1.4.0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Enhancements\n- feat: Made ng labels env driven (#6438)\n- feat: Link helm release (#6454)\n- feat: access manager (#6377)\n- feat: migrate external argo cd application (#6303)\n- feat: Dark Mode v1 (#2348)\n- feat: Dark Mode v2 (#2367)\n- feat: Dark Mode v3 (#2484)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Inflection Library in Go\nDESCRIPTION: Demonstrates the basic usage of the inflection library for converting words between singular and plural forms. Shows examples with different word cases (lowercase, uppercase, title case) and irregular plurals.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/jinzhu/inflection/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ninflection.Plural(\"person\") => \"people\"\ninflection.Plural(\"Person\") => \"People\"\ninflection.Plural(\"PERSON\") => \"PEOPLE\"\ninflection.Plural(\"bus\")    => \"buses\"\ninflection.Plural(\"BUS\")    => \"BUSES\"\ninflection.Plural(\"Bus\")    => \"Buses\"\n\ninflection.Singular(\"people\") => \"person\"\ninflection.Singular(\"People\") => \"Person\"\ninflection.Singular(\"PEOPLE\") => \"PERSON\"\ninflection.Singular(\"buses\")  => \"bus\"\ninflection.Singular(\"BUSES\")  => \"BUS\"\ninflection.Singular(\"Buses\")  => \"Bus\"\n\ninflection.Plural(\"FancyPerson\") => \"FancyPeople\"\ninflection.Singular(\"FancyPeople\") => \"FancyPerson\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Content Digest in Go\nDESCRIPTION: Shows how to verify if content matches an existing digest by comparing hash values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif id != digest.FromBytes([]byte(\"my content\")) {\n  return errors.New(\"the content has changed!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using go-randomdata Library for Random Data Generation in Go\nDESCRIPTION: This comprehensive example demonstrates how to use various functions from the go-randomdata library to generate different types of random data, including names, addresses, numbers, dates, and more.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Pallinder/go-randomdata/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/Pallinder/go-randomdata\"\n)\n\nfunc main() {\n    // Print a random silly name\n    fmt.Println(randomdata.SillyName())\n\n    // Print a male title\n    fmt.Println(randomdata.Title(randomdata.Male))\n\n    // Print a female title\n    fmt.Println(randomdata.Title(randomdata.Female))\n\n    // Print a title with random gender\n    fmt.Println(randomdata.Title(randomdata.RandomGender))\n\n    // Print a male first name\n    fmt.Println(randomdata.FirstName(randomdata.Male))\n\n    // Print a female first name\n    fmt.Println(randomdata.FirstName(randomdata.Female))\n\n    // Print a last name\n    fmt.Println(randomdata.LastName())\n\n    // Print a male name\n    fmt.Println(randomdata.FullName(randomdata.Male))\n\n    // Print a female name\n    fmt.Println(randomdata.FullName(randomdata.Female))\n\n    // Print a name with random gender\n    fmt.Println(randomdata.FullName(randomdata.RandomGender))\n\n    // Print an email\n    fmt.Println(randomdata.Email())\n\n    // Print a country with full text representation\n    fmt.Println(randomdata.Country(randomdata.FullCountry))\n\n    // Print a country using ISO 3166-1 alpha-2\n    fmt.Println(randomdata.Country(randomdata.TwoCharCountry))\n\n    // Print a country using ISO 3166-1 alpha-3\n    fmt.Println(randomdata.Country(randomdata.ThreeCharCountry))\n    \n    // Print BCP 47 language tag\n    fmt.Println(randomdata.Locale())\n\n    // Print a currency using ISO 4217\n    fmt.Println(randomdata.Currency())\n\n    // Print the name of a random city\n    fmt.Println(randomdata.City())\n\n    // Print the name of a random american state\n    fmt.Println(randomdata.State(randomdata.Large))\n\n    // Print the name of a random american state using two chars\n    fmt.Println(randomdata.State(randomdata.Small))\n\n    // Print an american sounding street name\n    fmt.Println(randomdata.Street())\n\n    // Print an american sounding address\n    fmt.Println(randomdata.Address())\n\n    // Print a random number >= 10 and < 20\n    fmt.Println(randomdata.Number(10, 20))\n\n    // Print a number >= 0 and < 20\n    fmt.Println(randomdata.Number(20))\n\n    // Print a random float >= 0 and < 20 with decimal point 3\n    fmt.Println(randomdata.Decimal(0, 20, 3))\n\n    // Print a random float >= 10 and < 20\n    fmt.Println(randomdata.Decimal(10, 20))\n\n    // Print a random float >= 0 and < 20\n    fmt.Println(randomdata.Decimal(20))\n\n    // Print a bool\n    fmt.Println(randomdata.Boolean())\n\n    // Print a paragraph\n    fmt.Println(randomdata.Paragraph())\n\n    // Print a postal code\n    fmt.Println(randomdata.PostalCode(\"SE\"))\n\n    // Print a set of 2 random numbers as a string\n    fmt.Println(randomdata.StringNumber(2, \"-\"))\n\n    // Print a set of 2 random 3-Digits numbers as a string\n    fmt.Println(randomdata.StringNumberExt(2, \"-\", 3))\n\n    // Print a random string sampled from a list of strings\n    fmt.Println(randomdata.StringSample(\"my string 1\", \"my string 2\", \"my string 3\"))\n\n    // Print a valid random IPv4 address\n    fmt.Println(randomdata.IpV4Address())\n\n    // Print a valid random IPv6 address\n    fmt.Println(randomdata.IpV6Address())\n\n    // Print a browser's user agent string\n    fmt.Println(randomdata.UserAgentString())\n\n    // Print a day\n    fmt.Println(randomdata.Day())\n\n    // Print a month\n    fmt.Println(randomdata.Month())\n\n    // Print full date like Monday 22 Aug 2016\n    fmt.Println(randomdata.FullDate())\n\n    // Print full date <= Monday 22 Aug 2016\n    fmt.Println(randomdata.FullDateInRange(\"2016-08-22\"))\n\n    // Print full date >= Monday 01 Aug 2016 and <= Monday 22 Aug 2016\n    fmt.Println(randomdata.FullDateInRange(\"2016-08-01\", \"2016-08-22\"))\n\n    // Print phone number according to e.164\n    fmt.Println(randomdata.PhoneNumber())\n\n    // Get a complete and randomised profile of data generally used for users\n    // There are many fields in the profile to use check the Profile struct definition in fullprofile.go\n    profile := randomdata.GenerateProfile(randomdata.Male | randomdata.Female | randomdata.RandomGender)\n    fmt.Printf(\"The new profile's username is: %s and password (md5): %s\\n\", profile.Login.Username, profile.Login.Md5)\n\n    // Get a random country-localised street name for Great Britain\n    fmt.Println(randomdata.StreetForCountry(\"GB\"))\n    // Get a random country-localised street name for USA\n    fmt.Println(randomdata.StreetForCountry(\"US\"))\n\n    // Get a random country-localised province for Great Britain\n    fmt.Println(randomdata.ProvinceForCountry(\"GB\"))\n    // Get a random country-localised province for USA\n    fmt.Println(randomdata.ProvinceForCountry(\"US\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra CLI Generator Tool\nDESCRIPTION: Command to install the cobra-cli command line generator tool that helps bootstrap Cobra applications and command files.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/spf13/cobra-cli@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Type in Devtron Deployment\nDESCRIPTION: Defines the type of Kubernetes service and any annotations. This example uses ClusterIP service type which exposes the service on an internal IP.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n  service:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Ingress Configuration in Helm Chart\nDESCRIPTION: Template logic to generate the URL when ingress is enabled. Iterates through hosts and paths defined in values.yaml, and constructs URLs with appropriate HTTP/HTTPS protocol based on TLS configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/contrib-chart/reference-chart_3-11-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Devtron to Latest Version\nDESCRIPTION: Helm command to upgrade Devtron to the latest available version using the devtron-operator chart with CICD modules enabled.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.4.x-0.4.x.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd \\\n-f https://raw.githubusercontent.com/devtron-labs/devtron/main/charts/devtron/devtron-bom.yaml \\\n--set installer.modules={cicd} --reuse-values\n```\n\n----------------------------------------\n\nTITLE: Specifying Base Directory with go-gitignore in Go\nDESCRIPTION: Shows how to specify a base directory when initializing a GitIgnore instance. This is useful when working with global gitignore files or when the base directory isn't the same as the gitignore file location.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/monochromegane/go-gitignore/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngitignore, _ := gitignore.NewGitIgnore(\"/home/you/.gitignore\", \".\")\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenSSL Certificate for Devtron Guard Service\nDESCRIPTION: This configuration specifies the requirements for a TLS certificate for the guard-service component in Devtron. It defines the certificate as non-CA, includes subject alternative names for various service DNS entries, and sets the key usage parameters for server authentication.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/manifests/grumpy_config.txt#2025-04-22_snippet_0\n\nLANGUAGE: config\nCODE:\n```\n[req]\nreq_extensions = v3_req\ndistinguished_name = req_distinguished_name\n[ req_distinguished_name ]\n[ v3_req ]\nbasicConstraints=CA:FALSE\nsubjectAltName=@alt_names\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage = serverAuth\n\n[ alt_names ]\nDNS.1 = guard-service\nDNS.2 = guard-service.devtroncd\nDNS.3 = guard-service.devtroncd.svc\nDNS.4 = guard-service.devtroncd.svc.cluster.local\n```\n\n----------------------------------------\n\nTITLE: Building XORM Locally\nDESCRIPTION: Command for building the XORM project locally during development.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: Logging into Podman Target Registry\nDESCRIPTION: Command to log into the target Podman registry using the provided credentials.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-in-airgapped-environment.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npodman login -u $TARGET_REGISTRY_USERNAME -p $TARGET_REGISTRY_TOKEN $TARGET_REGISTRY\n```\n\n----------------------------------------\n\nTITLE: Unsafe Pointer Manipulation with Reflect2\nDESCRIPTION: Demonstrates using reflect2's unsafe pointer operations for direct memory manipulation. This provides better performance but requires careful handling of memory safety.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/modern-go/reflect2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvalType := reflect2.TypeOf(1)\ni := 1\nj := 10\nvalType.UnsafeSet(unsafe.Pointer(&i), unsafe.Pointer(&j))\n// i will be 10\n```\n\n----------------------------------------\n\nTITLE: Checking Current Devtron Version with kubectl\nDESCRIPTION: Command to check the current version of Devtron installed in the cluster using kubectl. It retrieves the installer status and extracts the version tag from the sync data.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.5.x-0.6.x.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get installers installer-devtron -o jsonpath='{.status.sync.data}' | grep \"^LTAG=\" | cut -d\"=\" -f2-\n```\n\n----------------------------------------\n\nTITLE: Describing Safe JSON Package Modifications in Markdown\nDESCRIPTION: This markdown snippet outlines the changes made to the original encoding/json package from Go 1.6. It explains the switch to case-sensitive member name matching for object deserialization and the addition of duplicate key detection and rejection for JSON objects.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-jose/go-jose/v4/json/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Safe JSON\n\nThis repository contains a fork of the `encoding/json` package from Go 1.6.\n\nThe following changes were made:\n\n* Object deserialization uses case-sensitive member name matching instead of\n  [case-insensitive matching](https://www.ietf.org/mail-archive/web/json/current/msg03763.html).\n  This is to avoid differences in the interpretation of JOSE messages between\n  go-jose and libraries written in other languages.\n* When deserializing a JSON object, we check for duplicate keys and reject the\n  input whenever we detect a duplicate. Rather than trying to work with malformed\n  data, we prefer to reject it right away.\n```\n\n----------------------------------------\n\nTITLE: Using TypeByName in Go for Runtime Type Lookup\nDESCRIPTION: Demonstrates how to use reflect2.TypeByName to look up types by their package path and name. Note that types must be used in the program to be available at runtime.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/modern-go/reflect2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// given package is github.com/your/awesome-package\ntype MyStruct struct {\n\t// ...\n}\n\n// will return the type\nreflect2.TypeByName(\"awesome-package.MyStruct\")\n// however, if the type has not been used\n// it will be eliminated by compiler, so we can not get it in runtime\n```\n\n----------------------------------------\n\nTITLE: Triggering Resync of Devtron Installer\nDESCRIPTION: This command patches the Devtron installer to resync and apply the configuration changes. It adds the reSync flag to the installer spec, which triggers Devtron to reload configurations and apply the overrides.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/override-default-devtron-installation-configs.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch -n devtroncd installer installer-devtron --type='json' -p='[{\"op\": \"add\", \"path\": \"/spec/reSync\", \"value\": true }]'\n```\n\n----------------------------------------\n\nTITLE: Recording Stats Measurements in Go\nDESCRIPTION: Example of how to record a measurement for a stat in OpenCensus Go.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opencensus.io/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nstats.Record(ctx, videoSize.M(102478))\n```\n\n----------------------------------------\n\nTITLE: Getting Implicit Roles for User with Casbin in Golang\nDESCRIPTION: This snippet demonstrates how to retrieve all roles assigned to a user using Casbin's API in Golang.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/casbin/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nroles := e.GetImplicitRolesForUser(sub)\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Flag with pflag\nDESCRIPTION: This example shows how to define an integer flag using pflag. It creates a flag named 'flagname' with a default value of 1234 and a help message.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Setting Pause Before Switch Active in YAML\nDESCRIPTION: Specifies a waiting period before switching the container to active state.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Tracing Errors in Go\nDESCRIPTION: Trace adds the location of the Trace call to the stack. The Cause of the resulting error is the same as the error parameter. If the other error is nil, the result will be nil.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nfunc Trace(other error) error\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Ports in Kubernetes\nDESCRIPTION: YAML configuration for defining container ports and service exposure settings including envoy ports, streaming support, and HTTP2 capabilities.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nContainerPort:\n  - envoyPort: 8799\n    idleTimeout:\n    name: app\n    port: 8080\n    servicePort: 80\n    supportStreaming: true\n    useHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Simple Transform Function in Go\nDESCRIPTION: Defines a basic transform function that places all keys in the same base directory. This is used to demonstrate the concept of TransformFunc in diskv.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/peterbourgon/diskv/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc SimpleTransform (key string) []string {\n    return []string{}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table for User Access Permissions\nDESCRIPTION: This snippet defines a markdown table showing the permissions for different user roles (Manager, Super Admin) across various actions related to User Access management in Devtron.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/authorization/user-access.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| User Roles   | Add User Access | Edit User Access | Delete User Access |\n| :---         | :---:           | :---:            | :---:              |\n| Manager      | Yes             | Yes              | Yes                |\n| Super Admin  | Yes             | Yes              | Yes                |\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service\nDESCRIPTION: Configuration for Kubernetes Service with session affinity settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n  service:\n    type: ClusterIP\n    annotations: {}\n    sessionAffinity:\n      enabled: true\n      sessionAffinityConfig: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Timeout for OpenTelemetry Exporters in Go\nDESCRIPTION: Sets the batch timeout to 5 seconds for OpenTelemetry exporters using WithBatchTimeout option.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_34\n\nLANGUAGE: Go\nCODE:\n```\nWithBatchTimeout(5 * time.Second)\n```\n\n----------------------------------------\n\nTITLE: Editing ArgoCD Secret in Kubernetes\nDESCRIPTION: Use kubectl to edit the ArgoCD secret in the devtroncd namespace. This is part of the process to refresh expired ArgoCD certificates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nkubectl edit secret argocd-secret -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: Initializing blockdevice Package and Reading Disk Statistics in Go\nDESCRIPTION: This example shows how to initialize the blockdevice package with both /proc and /sys filesystems, and then read disk statistics using the ProcDiskstats function.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/prometheus/procfs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfs, err := blockdevice.NewFS(\"/proc\", \"/sys\")\nstats, err := fs.ProcDiskstats()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Go Package Import with Versioning\nDESCRIPTION: This snippet shows how to properly import a Go package that includes version information in its import path. It's used for modules with version v2 or higher.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"go.opentelemetry.io/otel/v2/trace\"\n```\n\n----------------------------------------\n\nTITLE: Checking Devtron Installation Status - Bash\nDESCRIPTION: Command to check the status of Devtron installation by querying the installer status in the devtroncd namespace. Returns 'Applied' when installation is complete.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/faq-on-installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get installers installer-devtron -o jsonpath='{.status.sync.status}'\n```\n\n----------------------------------------\n\nTITLE: New API Function Signatures for MkdirAll and MkdirAllHandle\nDESCRIPTION: Function signatures for the new API's MkdirAll and MkdirAllHandle functions. These functions provide safer alternatives to SecureJoin when creating directory structures.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/cyphar/filepath-securejoin/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc MkdirAll(root, unsafePath string, mode int) error\nfunc MkdirAllHandle(root *os.File, unsafePath string, mode int) (*os.File, error)\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL benchmark tests\nDESCRIPTION: Command for executing benchmark tests as part of the test suite. This uses Go's built-in benchmarking capabilities to test performance.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/lib/pq/TESTS.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test -bench .\n```\n\n----------------------------------------\n\nTITLE: Database Migration Configuration\nDESCRIPTION: Controls database migration settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Setting Value in Empty Document\nDESCRIPTION: Example demonstrating how to set a value starting from an empty JSON document\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/sjson/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvalue, _ := sjson.Set(\"\", \"name\", \"Tom\")\nprintln(value)\n```\n\n----------------------------------------\n\nTITLE: Deprecating Async Metric Instrument Packages\nDESCRIPTION: Several packages for async metric instruments are deprecated. Users should use instruments from go.opentelemetry.io/otel/metric/instrument instead.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/metric/instrument/asyncfloat64\ngo.opentelemetry.io/otel/metric/instrument/asyncint64\ngo.opentelemetry.io/otel/metric/instrument/syncfloat64\ngo.opentelemetry.io/otel/metric/instrument/syncint64\n```\n\n----------------------------------------\n\nTITLE: Setter Methods for UpdateApiTokenResponse in Go\nDESCRIPTION: These methods set the values of the Success and Token fields in the UpdateApiTokenResponse struct.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/UpdateApiTokenResponse.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc (o *UpdateApiTokenResponse) SetSuccess(v bool)\n\nfunc (o *UpdateApiTokenResponse) SetToken(v string)\n```\n\n----------------------------------------\n\nTITLE: Match Function Implementation\nDESCRIPTION: Function signature for matching file patterns against names using forward slash as separator\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc Match(pattern, name string) (bool, error)\n```\n\n----------------------------------------\n\nTITLE: Array Operations in GJSON Path Syntax\nDESCRIPTION: Examples of working with arrays in GJSON paths using the # character to get array length and elements.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/SYNTAX.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfriends.#              3\nfriends.#.age         [44,68,47]\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Migration in Kubernetes YAML\nDESCRIPTION: Enables or disables database migration configuration for a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repository for Latest Charts\nDESCRIPTION: This command updates the local Helm repository to ensure access to the latest version of the Devtron Helm chart.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.3.x-0.4.x.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Getting Token Name with Status - Go\nDESCRIPTION: Method that returns both the Name field value and a boolean indicating if the value has been set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/CreateApiTokenRequest.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *CreateApiTokenRequest) GetNameOk() (*string, bool)\n```\n\n----------------------------------------\n\nTITLE: Git Commit Message Format Example\nDESCRIPTION: Demonstrates the proper format for git commit messages in the go-git project, showing how to reference the package, subpackage, changes made, and related issue numbers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-git/go-git/v5/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nplumbing: packp, Skip argument validations for unknown capabilities. Fixes #623\n```\n\n----------------------------------------\n\nTITLE: Markdown Warning Block for User Permissions\nDESCRIPTION: A markdown hint block specifying the required permissions for performing security scans and defining policies.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/security-features.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"warning\" %}\n### Who Can Perform This Action?\nUsers need to have super-admin permission to enable vulnerability scanning and to define security policies in Devtron.\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Modern Config Parser in Go\nDESCRIPTION: Replaces the legacy config parser with a modern, less-strict implementation. Parsing failures within a section now simply ignore the invalid line rather than silently dropping the entire section.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/internal/ini/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// No specific code provided, but implies significant changes to config parsing logic\n```\n\n----------------------------------------\n\nTITLE: Updating API Token in Go\nDESCRIPTION: Makes a PUT request to update an existing API token. Takes an ID parameter and UpdateApiTokenRequest body, returns UpdateApiTokenResponse object.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/DefaultApi.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n    openapiclient \"./openapi\"\n)\n\nfunc main() {\n    id := int64(789) // int64 | api-token Id\n    updateApiTokenRequest := *openapiclient.NewUpdateApiTokenRequest() // UpdateApiTokenRequest | \n\n    configuration := openapiclient.NewConfiguration()\n    apiClient := openapiclient.NewAPIClient(configuration)\n    resp, r, err := apiClient.DefaultApi.OrchestratorApiTokenIdPut(context.Background(), id).UpdateApiTokenRequest(updateApiTokenRequest).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `DefaultApi.OrchestratorApiTokenIdPut``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    // response from `OrchestratorApiTokenIdPut`: UpdateApiTokenResponse\n    fmt.Fprintf(os.Stdout, \"Response from `DefaultApi.OrchestratorApiTokenIdPut`: %v\\n\", resp)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GJSON Path Examples in Go\nDESCRIPTION: Examples of basic GJSON path syntax for retrieving values by object name or array index.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/SYNTAX.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nname.last              \"Anderson\"\nname.first             \"Tom\"\nage                    37\nchildren               [\"Sara\",\"Alex\",\"Jack\"]\nchildren.0             \"Sara\"\nchildren.1             \"Alex\"\nfriends.1              {\"first\": \"Roger\", \"last\": \"Craig\", \"age\": 68}\nfriends.1.first        \"Roger\"\n```\n\n----------------------------------------\n\nTITLE: Tracking Devtron Installation Progress by Viewing Pod Logs\nDESCRIPTION: This set of commands finds the Pod with the label 'app=inception' in the 'devtroncd' namespace and then streams its logs. This allows tracking the progress of the Devtron installation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-helm-3.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npod=$(kubectl -n devtroncd get po -l app=inception -o jsonpath='{.items[0].metadata.name}')&& kubectl -n devtroncd logs -f $pod\n```\n\n----------------------------------------\n\nTITLE: Setting Grace Period\nDESCRIPTION: Configures pod termination grace period in seconds.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Installing UUID Package with Go\nDESCRIPTION: Command to install the Google UUID package using Go's package manager. This will add the package to your Go project's dependencies.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/google/uuid/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/google/uuid\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository for go-gitlab Contribution\nDESCRIPTION: Instructions for forking and cloning the go-gitlab repository to set up a local development environment. Includes both HTTPS and SSH cloning options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xanzy/go-gitlab/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/<your-username>/go-gitlab.git\n# or via ssh\ngit clone git@github.com:<your-username>/go-gitlab.git\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Merge Patches in Go\nDESCRIPTION: Example demonstrating how to create a merge patch from two JSON documents and apply it to a third document.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/gopkg.in/evanphx/json-patch.v4/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\ttarget := []byte(`{\"name\": \"Jane\", \"age\": 24}`)\n\n\tpatch, err := jsonpatch.CreateMergePatch(original, target)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\talternative := []byte(`{\"name\": \"Tina\", \"age\": 28, \"height\": 3.75}`)\n\tmodifiedAlternative, err := jsonpatch.MergePatch(alternative, patch)\n\n\tfmt.Printf(\"patch document:   %s\\n\", patch)\n\tfmt.Printf(\"updated alternative doc: %s\\n\", modifiedAlternative)\n}\n```\n\n----------------------------------------\n\nTITLE: Release Hub Markdown Documentation\nDESCRIPTION: Complete markdown documentation for Devtron's Release Hub feature, including prerequisites, release track creation, application management, image selection, and deployment steps.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/sdh/release-hub.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release Hub\n\n{% hint style=\"warning\" %}\n### Prerequisite\nCreate a [Tenant](./tenants.md) before proceeding with any action in Release Hub.\n{% endhint %}\n\n## Introduction [![](https://devtron-public-asset.s3.us-east-2.amazonaws.com/images/elements/EnterpriseTag.svg)](https://devtron.ai/pricing)\n\nThis section allows you to define [release tracks](./README.md#release-tracks), create and version software releases, add applications, select container images, and deploy releases to specified tenant [installations](./README.md#installations).\n```\n\n----------------------------------------\n\nTITLE: Defining For Expressions in EBNF\nDESCRIPTION: EBNF grammar for for expressions in HCL, including tuple and object expressions, introduction syntax, and conditional filtering.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/hcl2/hcl/hclsyntax/spec.md#2025-04-22_snippet_5\n\nLANGUAGE: ebnf\nCODE:\n```\nForExpr = forTupleExpr | forObjectExpr;\nforTupleExpr = \"[\" forIntro Expression forCond? \"]\";\nforObjectExpr = \"{\" forIntro Expression \"=>\" Expression \"...\"? forCond? \"}\";\nforIntro = \"for\" Identifier (\",\" Identifier)? \"in\" Expression \":\";\nforCond = \"if\" Expression;\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table for Custom Applications User Roles and Permissions\nDESCRIPTION: This snippet defines a markdown table showing the permissions for different user roles (View, Build and Deploy, Admin, Manager, Super Admin) across various actions (View, Create, Edit, Delete, Build & Deploy) for Custom Applications in Devtron.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/authorization/user-access.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| User Roles     | View       | Create     | Edit     | Delete     | Build & Deploy|\n| :---           | :---:      | :---:      | :---:    | :---:      | :---:         |\n| View             | Yes      | No         | No       | No         | No            |\n| Build and Deploy | Yes      | No         | No       | No         | Yes           |\n| Admin            | Yes      | Yes        | Yes      | Yes        | Yes           |\n| Manager          | Yes      | Yes        | Yes      | Yes        | Yes           |\n| Super Admin      | Yes      | Yes        | Yes      | Yes        | Yes           |\n```\n\n----------------------------------------\n\nTITLE: Example LoadBalancer Response\nDESCRIPTION: Sample output showing the LoadBalancer hostname for dashboard access.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/setup/install.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[test2@server ~]$ kubectl get svc -n devtroncd devtron-service -o jsonpath='{.status.loadBalancer.ingress}'\n[map[hostname:aaff16e9760594a92afa0140dbfd99f7-305259315.us-east-1.elb.amazonaws.com]]\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud Storage Client in Go\nDESCRIPTION: This snippet shows how to create a new storage.Client instance for interacting with Google Cloud Storage. The client is initialized using the current context and can be used throughout the application.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/cloud.google.com/go/storage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nclient, err := storage.NewClient(ctx)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Workerpool Package with Go\nDESCRIPTION: Command to install the workerpool package using Go's package management system.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/gammazero/workerpool/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/gammazero/workerpool\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Pipeline Scripts in SQL\nDESCRIPTION: SQL statement for inserting script details for plugin steps into the plugin_pipeline_script table. Each custom step in a plugin requires a script that defines its behavior.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/developers-guide/PluginCreationStep.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO \"plugin_pipeline_script\" (\"id\", \"script\", \"store_script_at\",\"mount_code_to_container,\"mount_code_to_container_path\", \"mount_directory_from_host\",\"type\",\"deleted\",\"created_on\", \"created_by\", \"updated_on\", \"updated_by\") VALUES\n(nextval('id_seq_plugin_pipeline_script'), 'script','mount_code_at-field-on-UI',\"true/false\",\"path_if_yes_in_previous_field\",\"true/false\",'SHELL/CONTAINER_IMAGE','f','now()', 'user_id', 'now()', 'user_id');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Admin Password for Devtron v0.6.0+\nDESCRIPTION: Command to extract the admin password from Kubernetes secrets for Devtron version v0.6.0 and higher. The command gets the ADMIN_PASSWORD field from the devtron-secret in the devtroncd namespace and decodes it from base64.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get secret devtron-secret \\\n-o jsonpath='{.data.ADMIN_PASSWORD}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Redirecting klog Output to Custom Writer\nDESCRIPTION: Example showing how to redirect all klog output to a custom io.Writer, which can be useful for sending logs to alternative destinations like syslog.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/k8s.io/klog/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nklog.SetOutput()\n```\n\n----------------------------------------\n\nTITLE: Cloning the go-grpc-middleware Repository in Bash\nDESCRIPTION: This command clones the forked go-grpc-middleware repository to the local machine. It assumes the user has already forked the repository on GitHub.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-middleware/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:your-username/go-grpc-middleware.git\n```\n\n----------------------------------------\n\nTITLE: Server Deployment Configuration\nDESCRIPTION: Defines server deployment settings including image tag and image URL specifications.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Installing the env module with Go\nDESCRIPTION: Command to get the env module using Go's package manager.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/caarlos0/env/v6/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/caarlos0/env/v6\n```\n\n----------------------------------------\n\nTITLE: Defining ActionResponse Struct in Go\nDESCRIPTION: Defines the ActionResponse struct with a single boolean property 'Success'. The struct is used to represent the success or failure of an action.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/ActionResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype ActionResponse struct {\n    Success *bool `json:\"success,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating PostgreSQL User\nDESCRIPTION: Command to authenticate as the postgres user within the PostgreSQL pod using the password retrieved from Kubernetes secrets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/FAQs/hyperion-troubleshoot.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npsql -U postgres\n```\n\n----------------------------------------\n\nTITLE: Defining Flags with Shorthand Letters using pflag\nDESCRIPTION: This example shows how to define flags with one-letter shorthands using pflag's 'P' suffix functions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nvar flagvar bool\nfunc init() {\n\tflag.BoolVarP(&flagvar, \"boolname\", \"b\", true, \"help message\")\n}\nflag.VarP(&flagVal, \"varname\", \"v\", \"help message\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Settings\nDESCRIPTION: Defines image pull policy for container images.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Checking Pod Status in Kubernetes\nDESCRIPTION: Command to check the status of pods in the devtroncd namespace, helping to determine if migration jobs are still running or have failed.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/FAQs/hyperion-troubleshoot.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: Initialize RollbackReleaseRequest Object in Go\nDESCRIPTION: Creates new instances of RollbackReleaseRequest with default or custom values. Provides constructors for initializing the object with different property configurations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/RollbackReleaseRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc NewRollbackReleaseRequest() *RollbackReleaseRequest\nfunc NewRollbackReleaseRequestWithDefaults() *RollbackReleaseRequest\n```\n\n----------------------------------------\n\nTITLE: Implementing SecureJoin with chroot on GNU/Linux (Example)\nDESCRIPTION: A trivial implementation of the SecureJoin function on GNU/Linux systems using chroot. This example requires root privileges and uses the readlink command to canonicalize paths within a chroot environment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/cyphar/filepath-securejoin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage securejoin\n\nimport (\n\t\"os/exec\"\n\t\"path/filepath\"\n)\n\nfunc SecureJoin(root, unsafePath string) (string, error) {\n\tunsafePath = string(filepath.Separator) + unsafePath\n\tcmd := exec.Command(\"chroot\", root,\n\t\t\"readlink\", \"--canonicalize-missing\", \"--no-newline\", unsafePath)\n\toutput, err := cmd.CombinedOutput()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\texpanded := string(output)\n\treturn filepath.Join(root, expanded), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Schema from Complex Go Struct\nDESCRIPTION: Shows how to load a JSON schema from a complex Go struct with nested types\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype Root struct {\n\tUsers []User `json:\"users\"`\n}\n\ntype User struct {\n\tName string `json:\"name\"`\n}\n\n...\n\ndata := Root{}\ndata.Users = append(data.Users, User{\"John\"})\ndata.Users = append(data.Users, User{\"Sophia\"})\ndata.Users = append(data.Users, User{\"Bill\"})\n\nloader := gojsonschema.NewGoLoader(data)\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a Branch for PR\nDESCRIPTION: Sequence of commands to create a new branch, make changes, run tests, and push to your fork for creating a pull request.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b <YOUR_BRANCH_NAME>\n# edit files\n# update changelog\nmake precommit\ngit add -p\ngit commit\ngit push <YOUR_FORK> <YOUR_BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: Deleting Git Sensor Pod in Kubernetes\nDESCRIPTION: Delete the Git sensor pod to resolve issues with Git commits not being visible. This forces the creation of a new pod.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl delete po -n devtroncd -l app=git-sensor\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Storage\nDESCRIPTION: Helm commands to configure Google Cloud Storage for build logs and cache.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--reuse-values \\\n--set configs.BLOB_STORAGE_PROVIDER: GCP \\\n--set secrets.BLOB_STORAGE_GCP_CREDENTIALS_JSON: {\\\"type\\\": \\\"service_account\\\",\\\"project_id\\\": \\\"<your-project-id>\\\",\\\"private_key_id\\\": \\\"<your-private-key-id>\\\",\\\"private_key\\\": \\\"<your-private-key>\\\",\\\"client_email\\\": \\\"<your-client-email>\\\",\\\"client_id\\\": \\\"<your-client-id>\\\",\\\"auth_uri\\\": \\\"https://accounts.google.com/o/oauth2/auth\\\",\\\"token_uri\\\": \\\"https://oauth2.googleapis.com/token\\\",\\\"auth_provider_x509_cert_url\\\": \\\"https://www.googleapis.com/oauth2/v1/certs\\\",\\\"client_x509_cert_url\\\": \\\"<your-client-cert-url>\\\"} \\\n--set configs.DEFAULT_CACHE_BUCKET: cache-bucket\n--set configs.DEFAULT_BUILD_LOGS_BUCKET: log-bucket\n```\n\n----------------------------------------\n\nTITLE: Running XORM Tests with MySQL\nDESCRIPTION: Command for running XORM tests against a MySQL database with environment variables for connection parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nTEST_MYSQL_HOST= TEST_MYSQL_CHARSET= TEST_MYSQL_DBNAME= TEST_MYSQL_USERNAME= TEST_MYSQL_PASSWORD= make test-mysql\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus in Kubernetes YAML\nDESCRIPTION: Specifies the Prometheus release name for monitoring purposes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Context in Go\nDESCRIPTION: Example of how to add or modify tags in the current context using the tag package.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opencensus.io/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nctx, err := tag.New(ctx,\n\ttag.Insert(osKey, \"macOS-10.12.5\"),\n\ttag.Upsert(userIDKey, \"cde36753ed\"),\n)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Value Constants Migration (Go)\nDESCRIPTION: Migration guidance for deprecated unit constants to string values\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nunit.Dimensionless -> \"1\"\nunit.Bytes -> \"By\"\nunit.Milliseconds -> \"ms\"\n```\n\n----------------------------------------\n\nTITLE: Required Fields Configuration with env Package\nDESCRIPTION: Example struct definition showing how to mark fields as required using the required tag option.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/caarlos0/env/v6/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype config struct {\n\tSecretKey string `env:\"SECRET_KEY,required\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service\nDESCRIPTION: Configuration for Kubernetes Service resource type and annotations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pause Before Switch Active in Kubernetes YAML\nDESCRIPTION: Specifies the wait time in seconds before switching the container to active state.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Access Levels Table for Apps\nDESCRIPTION: Markdown table showing permission matrix for different access levels regarding application management.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/user-guide/global-configurations/user-access.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Access Level | View App | Create App | Edit App | Delete App | Trigger App |\n|--|--|--|--|--|--|\n| View | Yes  | No | No | No| No |\n| View and Edit | Yes  | No | Yes | Yes| Yes |\n|Admin| Yes | Yes | Yes | Yes | Yes |\n|Super Admin| Yes | Yes | Yes | Yes | Yes |\n```\n\n----------------------------------------\n\nTITLE: Performance Benchmarks\nDESCRIPTION: Benchmark results comparing Pretty functions with the built-in encoding/json methods, showing operations per second, memory allocations, and efficiency.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/pretty/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nBenchmarkPretty-16           1000000    1034 ns/op    720 B/op     2 allocs/op\nBenchmarkPrettySortKeys-16    586797    1983 ns/op   2848 B/op    14 allocs/op\nBenchmarkUgly-16             4652365     254 ns/op    240 B/op     1 allocs/op\nBenchmarkUglyInPlace-16      6481233     183 ns/op      0 B/op     0 allocs/op\nBenchmarkJSONIndent-16        450654    2687 ns/op   1221 B/op     0 allocs/op\nBenchmarkJSONCompact-16       685111    1699 ns/op    442 B/op     0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Performance Benchmarks for Doublestar vs Standard Library in Go\nDESCRIPTION: Performance benchmarks comparing doublestar's implementations to Go's standard library functions. The tests cover Match(), PathMatch(), Glob(), and GlobWalk() against their standard library counterparts with comparable patterns.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ngoos: darwin\ngoarch: amd64\npkg: github.com/bmatcuk/doublestar/v4\ncpu: Intel(R) Core(TM) i7-4870HQ CPU @ 2.50GHz\nBenchmarkMatch-8                  285639              3868 ns/op               0 B/op          0 allocs/op\nBenchmarkGoMatch-8                286945              3726 ns/op               0 B/op          0 allocs/op\nBenchmarkPathMatch-8              320511              3493 ns/op               0 B/op          0 allocs/op\nBenchmarkGoPathMatch-8            304236              3434 ns/op               0 B/op          0 allocs/op\nBenchmarkGlob-8                      466           2501123 ns/op          190225 B/op       2849 allocs/op\nBenchmarkGlobWalk-8                  476           2536293 ns/op          184017 B/op       2750 allocs/op\nBenchmarkGoGlob-8                    463           2574836 ns/op          194249 B/op       2929 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Upgrading Devtron using Kubectl\nDESCRIPTION: Command to upgrade Devtron using Kubectl by patching the installer-devtron resource with the target version and triggering a resync.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.3.x-0.3.x.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch -n devtroncd installer installer-devtron --type='json' -p='[{\"op\": \"add\", \"path\": \"/spec/reSync\", \"value\": true },{\"op\": \"replace\", \"path\": \"/spec/url\", \"value\": \"https://raw.githubusercontent.com/devtron-labs/devtron/'$DEVTRON_TARGET_VERSION'/manifests/installation-script\"}]'\n```\n\n----------------------------------------\n\nTITLE: NATS Authentication with Nkeys and User Credentials\nDESCRIPTION: Explains various authentication methods for NATS servers, including user credentials, JWT and Nkey combinations, and bare Nkeys. It demonstrates how to use these authentication methods when connecting to a NATS server.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nnc, err := nats.Connect(url, nats.UserCredentials(\"user.creds\"))\n\nnc, err := nats.Connect(url, nats.UserCredentials(\"user.jwt\", \"user.nk\"))\n\nnc, err := nats.Connect(url, nats.UserJWT(jwtCB, sigCB))\n\nopt, err := nats.NkeyOptionFromSeed(\"seed.txt\")\nnc, err := nats.Connect(serverUrl, opt)\n\n// Direct\nnc, err := nats.Connect(serverUrl, nats.Nkey(pubNkey, sigCB))\n```\n\n----------------------------------------\n\nTITLE: Getting Manifest Value with Status - Go\nDESCRIPTION: Method that returns both the Manifest value and a boolean indicating if the value has been set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/TemplateChartResponse.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *TemplateChartResponse) GetManifestOk() (*string, bool)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL in Kubernetes Environment\nDESCRIPTION: Helm template that provides different methods to obtain the application URL based on the service type and ingress configuration. Handles multiple scenarios including Ingress-enabled setups, NodePort services, LoadBalancer services, and ClusterIP services. Each case generates appropriate kubectl commands to extract the necessary information.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-7-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Go Code Formatting Command\nDESCRIPTION: Command to format Go code according to standard conventions before committing changes\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/google/gofuzz/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ngo fmt\n```\n\n----------------------------------------\n\nTITLE: Installing Local Go Documentation Server\nDESCRIPTION: Commands to install and run a local documentation server for previewing package documentation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngo install golang.org/x/pkgsite/cmd/pkgsite@latest\npkgsite\n```\n\n----------------------------------------\n\nTITLE: Version History Entry v1.25.0\nDESCRIPTION: Changelog entry for version 1.25.0 released on 2023-11-14, adding support for dynamic auth token functionality and dependency updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/config/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.25.0 (2023-11-14)\n\n* **Feature**: Add support for dynamic auth token from file and EKS container host in absolute/relative URIs in the HTTP credential provider.\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Implementing GetSuccess Method for ActionResponse in Go\nDESCRIPTION: Defines a method to retrieve the Success field value from the ActionResponse struct. Returns the value if non-nil, zero value otherwise.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/ActionResponse.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc (o *ActionResponse) GetSuccess() bool {\n    if o == nil || o.Success == nil {\n        var ret bool\n        return ret\n    }\n    return *o.Success\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Formatter with Disabled Colors in Go\nDESCRIPTION: This snippet demonstrates how to configure the Logrus TextFormatter to disable colors and enable full timestamps, which ensures consistent output even when a TTY is attached.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlog.SetFormatter(&log.TextFormatter{\n\tDisableColors: true,\n\tFullTimestamp: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Translation File Format Example\nDESCRIPTION: JSON structure showing the basic format for translation files. Includes fields for locale, key, translation text, type, rule, and override flag.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-playground/universal-translator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"locale\": \"en\",\n    \"key\": \"days-left\",\n    \"trans\": \"You have {0} day left.\",\n    \"type\": \"Cardinal\",\n    \"rule\": \"One\",\n    \"override\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Pause Before Switch Active in Kubernetes YAML\nDESCRIPTION: Configures a wait period before switching the active container in a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Creating API Token Request Constructor - Go\nDESCRIPTION: Constructor function that creates a new CreateApiTokenRequest object with default values for required API properties.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/CreateApiTokenRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc NewCreateApiTokenRequest() *CreateApiTokenRequest\n```\n\n----------------------------------------\n\nTITLE: Creating Unauthorized Error with Formatting in Go\nDESCRIPTION: Unauthorizedf returns an error which satisfies IsUnauthorized(). It takes a format string and optional arguments for formatting.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nfunc Unauthorizedf(format string, args ...interface{}) error\n```\n\n----------------------------------------\n\nTITLE: Executing SQL with XORM in Go\nDESCRIPTION: Shows how to execute SQL statements using XORM, returning the number of affected rows and any error.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\naffected, err := engine.Exec(\"update user set age = ? where name = ?\", age, name)\n```\n\n----------------------------------------\n\nTITLE: Converting Parameters to String Slice in Go\nDESCRIPTION: Adds utility function AsStringSlice() to convert its parameters to a string slice in Azure SDK for Go.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nAsStringSlice()\n```\n\n----------------------------------------\n\nTITLE: Defining Attribute Access Operator in EBNF\nDESCRIPTION: EBNF grammar for the attribute access operator in HCL, which returns a single attribute from an object value.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/hcl2/hcl/hclsyntax/spec.md#2025-04-22_snippet_7\n\nLANGUAGE: ebnf\nCODE:\n```\nGetAttr = \".\" Identifier;\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Reset Operations\nDESCRIPTION: SQL commands to terminate connections, drop and recreate the orchestrator and casbin databases to resolve 'dirty db found' errors.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/FAQs/hyperion-troubleshoot.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = 'orchestrator';\nSELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = 'casbin';\nDROP database orchestrator;\nDROP database casbin;\nCREATE database orchestrator;\nCREATE database casbin;\n```\n\n----------------------------------------\n\nTITLE: MaxSurge Setting\nDESCRIPTION: Configuration for maximum number of pods that can exceed the desired replica count during updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Cloning Docker Images\nDESCRIPTION: Bash script to clone Docker images from source to target registry, including pulling, tagging, and pushing images.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-in-airgapped-environment.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwhile IFS= read -r source_image; do\n  if [[ \"$source_image\" == quay.io/devtron/* ]]; then\n    target_image=\"${source_image/quay.io\\/devtron/$TARGET_REGISTRY}\"\n  elif [[ \"$source_image\" == quay.io/argoproj/* ]]; then\n    target_image=\"${source_image/quay.io\\/argoproj/$TARGET_REGISTRY}\"\n  elif [[ \"$source_image\" == public.ecr.aws/docker/library/* ]]; then\n    target_image=\"${source_image/public.ecr.aws\\/docker\\/library/$TARGET_REGISTRY}\"\n  fi\n\n  docker pull --platform $PLATFORM $source_image\n  docker tag $source_image $target_image\n  docker push $target_image\n  echo \"Updated image: $target_image\"\n  echo \"$target_image\" >> \"$TARGET_IMAGES_LIST\"\ndone < \"$SOURCE_IMAGES_LIST\"\n```\n\n----------------------------------------\n\nTITLE: Defining Pipeline Stage Step Variable Schema in SQL\nDESCRIPTION: Outlines the database schema for pipeline stage step variables, including input and output variables for both inline and reference plugin types.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/developers-guide/PluginIntegrationVariableInfo&Flow.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDb table - pipeline_stage_step_variable\n\nInput Variables:\n   \n   \tName                   string\n   \tFormat                 PipelineStageStepVariableFormatType \n\tDescription            string                     \n\tValue                  string                       \n\tValueType              PipelineStageStepVariableValueType  \n\tPreviousStepIndex      int                                 \n\tReferenceVariableName  string                             \n\tReferenceVariableStage PipelineStageType \n\n\nOutput Variables:\n\n\tName                   string                         \n\tFormat                 PipelineStageStepVariableFormatType \n\tDescription            string     \n\t\nwhere,\n\nPipelineStageStepVariableFormatType = [\"STRING\", \"BOOL\", \"NUMBER\", \"DATE\"]\nPipelineStageStepVariableValueType = [\"NEW\", \"FROM_PREVIOUS_STEP\", \"GLOBAL\"]\nPipelineStageType = [\"PRE_CI\", \"POST_CI\"]\n```\n\n----------------------------------------\n\nTITLE: Upgrading Devtron to Custom Version with Helm\nDESCRIPTION: Commands to upgrade Devtron to a specific custom version by setting a target version variable and using that version's configuration from the GitHub repository.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.4.x-0.5.x.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nDEVTRON_TARGET_VERSION=v0.5.x\n\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd \\\n-f https://raw.githubusercontent.com/devtron-labs/devtron/$DEVTRON_TARGET_VERSION/charts/devtron/devtron-bom.yaml \\\n--set installer.modules={cicd} --reuse-values\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Trace in Go\nDESCRIPTION: Creates a new trace for an operation with custom fields and logs it if the duration exceeds a specified threshold. The trace is automatically ended when the function exits via defer.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/k8s.io/utils/trace/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc doSomething() {\n    opTrace := trace.New(\"operation\", Field{Key: \"fieldKey1\", Value: \"fieldValue1\"})\n    defer opTrace.LogIfLong(100 * time.Millisecond)\n    // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Labeling and Annotating Service Accounts in devtron-ci Namespace\nDESCRIPTION: Commands to label and annotate all service accounts in the devtron-ci namespace with Helm-specific metadata. This ensures proper management by Helm during the upgrade process.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.6.x-0.7.x.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtron-ci label sa --all \"app.kubernetes.io/managed-by=Helm\" --overwrite\nkubectl -n devtron-ci annotate sa --all \"meta.helm.sh/release-name=$RELEASE_NAME\" \"meta.helm.sh/release-namespace=devtroncd\" --overwrite\n```\n\n----------------------------------------\n\nTITLE: Scanning Results into a String Slice in Core for Go\nDESCRIPTION: Demonstrates using ScanSlice to scan query results into a slice of strings. This example prepares a string slice with the appropriate length based on column count.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/core/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nrows, _ := db.Query()\ncols, _ := rows.Columns()\nfor rows.Next() {\n    var s = make([]string, len(cols))\n    rows.ScanSlice(&s)\n}\n```\n\n----------------------------------------\n\nTITLE: Database Migration Configuration\nDESCRIPTION: Controls database migration settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Installing Wire via Go\nDESCRIPTION: Command to install the Wire tool using Go's package manager. It installs the latest version of Wire and assumes $GOPATH/bin is in the system PATH.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/google/wire/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/google/wire/cmd/wire@latest\n```\n\n----------------------------------------\n\nTITLE: Formatting Go Code for Contributing to go-jose\nDESCRIPTION: Command to format code according to Go conventions before submission.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-jose/go-jose/v4/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo fmt\n```\n\n----------------------------------------\n\nTITLE: Structured Logging with Fields in Logrus\nDESCRIPTION: This example demonstrates the recommended pattern for structured logging in Logrus using fields, which improves discoverability and usefulness of log messages.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nlog.WithFields(log.Fields{\n  \"event\": event,\n  \"topic\": topic,\n  \"key\": key,\n}).Fatal(\"Failed to send event\")\n```\n\n----------------------------------------\n\nTITLE: Deleting ArgoCD Server Pod in Kubernetes\nDESCRIPTION: Delete the ArgoCD server pod to force the creation of a new pod with updated certificates. Replace <argocd-server-pod-name> with the actual pod name.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod -n devtroncd <argocd-server-pod-name>\n```\n\n----------------------------------------\n\nTITLE: Defining Index Operator in EBNF\nDESCRIPTION: EBNF grammar for the index operator in HCL, which returns a single element from a collection value using a key expression.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/hcl2/hcl/hclsyntax/spec.md#2025-04-22_snippet_6\n\nLANGUAGE: ebnf\nCODE:\n```\nIndex = \"[\" Expression \"]\";\n```\n\n----------------------------------------\n\nTITLE: Setting MaxUnavailable for Rolling Updates\nDESCRIPTION: Specifies the maximum number of pods that can be unavailable during updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Updating JWT Library Import Path for v4.0.0\nDESCRIPTION: The new import path for v4.0.0 of the golang-jwt/jwt library. This is required when upgrading from previous versions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/golang-jwt/jwt/v4/MIGRATION_GUIDE.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\"github.com/golang-jwt/jwt/v4\"\n```\n\n----------------------------------------\n\nTITLE: Parsing SCIM URN (RFC 7643)\nDESCRIPTION: Example demonstrating parsing of SCIM URN using RFC7643Only parsing mode\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/leodido/go-urn/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/leodido/go-urn\"\n)\n\nfunc main() {\n\tinput := \"urn:ietf:params:scim:api:messages:2.0:ListResponse\"\n\n\t// Parsing the input string as a RFC 7643 SCIM URN\n\tu, ok := urn.Parse([]byte(input), urn.WithParsingMode(urn.RFC7643Only))\n\tif !ok {\n\t\tpanic(\"error parsing urn\")\n\t}\n\n\tfmt.Println(u.IsSCIM())\n\tscim := u.SCIM()\n\tfmt.Println(scim.Type.String())\n\tfmt.Println(scim.Name)\n\tfmt.Println(scim.Other)\n\n\t// Output:\n\t// true\n\t// api\n\t// messages\n\t// 2.0:ListResponse\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Constructor Functions for TemplateChartRequest in Go\nDESCRIPTION: Defines two constructor functions for TemplateChartRequest: NewTemplateChartRequest creates an instance with default values, while NewTemplateChartRequestWithDefaults creates an instance without setting default values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/TemplateChartRequest.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc NewTemplateChartRequest() *TemplateChartRequest {\n\treturn &TemplateChartRequest{}\n}\n\nfunc NewTemplateChartRequestWithDefaults() *TemplateChartRequest {\n\tthis := TemplateChartRequest{}\n\treturn &this\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana in Devtron\nDESCRIPTION: This multi-line bash script configures Grafana settings, creates a new organization, sets preferences, and configures the Prometheus data source in Devtron.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncat << EOF\ngrafanaUrl=\"http://admin:grafana-password@devtron-grafana.devtroncd/grafana\"\nprometheusUrl=\"http://prometheus.example.com\"\n\nORG_ID=$( curl -d '{\"name\":\"devtron-metrics-view\"}' -H \"Content-Type: application/json\" -X POST \"${grafanaUrl}/api/orgs\" )\n\necho $ORG_ID\n\ncurl -X POST \"${grafanaUrl}/api/user/using/2\";\n\ncurl -X PUT -H \"Content-Type: application/json\" -d '{\"homeDashboardId\":0,\"theme\":\"light\",\"timezone\":\"browser\"}' \"${grafanaUrl}/api/org/preferences\";\n\ncurl \"${grafanaUrl}/api/datasources\" -H 'content-type: application/json' -H 'x-grafana-org-id: 2' --data '{\"name\":\"Prometheus-devtron-demo\",\"type\":\"prometheus\",\"access\":\"proxy\",\"isDefault\":true}'\n\ncurl \"${grafanaUrl}/api/datasources/2\" -X PUT \\\n    -H 'content-type: application/json' \\\n    -H 'x-grafana-org-id: 2' \\\n    --data '{\"id\": 2 ,\n    \"orgId\": 2,\n    \"name\":\"Prometheus-devtron-demo\",\"type\":\"prometheus\",\"access\":\"proxy\",\n    \"url\":${prometheusUrl},\n    \"basicAuth\":false,\"jsonData\":{},\"version\":1}'\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a Feature Branch\nDESCRIPTION: Git commands for creating a new branch, making changes, committing them, and pushing to your fork. This prepares your changes for a pull request.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b feature\n# edit files\n$ git commit\n$ git push fork feature\n```\n\n----------------------------------------\n\nTITLE: Glob Function Implementation\nDESCRIPTION: Function signature for finding files matching a pattern in a filesystem\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc Glob(fsys fs.FS, pattern string, opts ...GlobOption) ([]string, error)\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repository for Devtron\nDESCRIPTION: Command to update the Helm repository to ensure the latest Devtron chart is available for the upgrade.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.4.x-0.4.x.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Documenting AppListRequest Model Properties in Markdown\nDESCRIPTION: Markdown table documenting the properties of the appListRequest model used for filtering application lists. Includes property names, types, descriptions and optional status.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/md-output/Models/appListRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**projectIds** | **List** | project ids | [optional] [default to null]\n**clusterIds** | **List** | cluster ids | [optional] [default to null]\n**namespaces** | **List** | namespace ID | [optional] [default to null]\n**environmentIds** | **List** | environemnt ids | [optional] [default to null]\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Flag Shorthand with pflag\nDESCRIPTION: This snippet demonstrates how to deprecate a flag's shorthand while keeping the long form of the flag using pflag.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nflags.MarkShorthandDeprecated(\"noshorthandflag\", \"please use --noshorthandflag only\")\n```\n\n----------------------------------------\n\nTITLE: Setting Target Devtron Version for Upgrade\nDESCRIPTION: Command to set the target Devtron version as an environment variable for use in the upgrade process. This appears twice in the document for both Helm and Kubectl methods.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.3.x-0.3.x.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDEVTRON_TARGET_VERSION=v0.3.x\n```\n\n----------------------------------------\n\nTITLE: Providing Default Values for Type Conversion\nDESCRIPTION: Shows how to provide a default value when extracting data using the Int() method, which will be returned if the value doesn't exist or can't be converted.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/stretchr/objx/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nGet(\"code\").Int(-1)\n```\n\n----------------------------------------\n\nTITLE: Implementing System Call Dispatch in Assembly (Go)\nDESCRIPTION: Hand-written assembly code implementing system call dispatch with three entry points: Syscall, Syscall6, and RawSyscall. This must be implemented for each GOOS/GOARCH pair when porting Go to a new architecture/OS.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/golang.org/x/sys/unix/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\nfunc Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)\nfunc RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n```\n\n----------------------------------------\n\nTITLE: Overriding Fullname in Kubernetes YAML\nDESCRIPTION: Specifies a fullname override for the Kubernetes deployment, which is used to construct Kubernetes object names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Retrieving Devtron Dashboard URL\nDESCRIPTION: Command to get the Devtron dashboard URL by retrieving the LoadBalancer address created during installation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/setup/upgrade-to-devtron.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc -n devtroncd devtron-service -o jsonpath='{.status.loadBalancer.ingress}'\n```\n\n----------------------------------------\n\nTITLE: Updating filepath.Walk to filepath.WalkDir in Go\nDESCRIPTION: Refactors the usage of filepath.Walk to filepath.WalkDir for improved performance and functionality.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/internal/ini/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfilepath.WalkDir\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra Library with Go Get\nDESCRIPTION: Command to install the latest version of the Cobra library using go get.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/spf13/cobra@latest\n```\n\n----------------------------------------\n\nTITLE: Generating New Schemas and Updating Files Using Make\nDESCRIPTION: This command fetches the OpenAPI schema, generates the corresponding swagger.go for the Kubernetes API, and updates kubernetesapi/openapiinfo.go using the 'all' make target.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/sigs.k8s.io/kustomize/kyaml/openapi/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake all\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example in Bash\nDESCRIPTION: Example directory structure showing parent-child relationships for demonstrating doublestar pattern matching\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngrandparent\n`-- parent\n    |-- child1\n    `-- child2\n```\n\n----------------------------------------\n\nTITLE: ValidatePattern for Pattern Validation in Go\nDESCRIPTION: ValidatePattern checks if a pattern is valid. This is useful when you need to validate user-provided patterns before execution. The function assumes patterns use '/' as the path separator.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc ValidatePattern(s string) bool\n```\n\n----------------------------------------\n\nTITLE: Redis Test Configuration in Go\nDESCRIPTION: Go code that defines the paths to Redis server binary and configuration files for testing purposes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/redis/go-redis/v9/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar (\n\tredisServerBin, _  = filepath.Abs(filepath.Join(\"testdata\", \"redis\", \"src\", \"redis-server\"))\n\tredisServerConf, _ = filepath.Abs(filepath.Join(\"testdata\", \"redis\", \"redis.conf\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 0.7.5\nDESCRIPTION: Release notes for version 0.7.5 addressing a request body preservation issue.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/go-retryablehttp/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.7.5 (Nov 8, 2023)\n\nBUG FIXES:\n\n- client: fixes an issue where the request body is not preserved on temporary redirects or re-established HTTP/2 connections (#207)\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets in YAML\nDESCRIPTION: Specifies the Docker credentials secret used for accessing a private registry.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Policy in YAML\nDESCRIPTION: Sets the image pull policy for accessing images in Kubernetes. In this case, it's set to pull if not present.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Displaying Go Reference Badge for Prometheus Client Library\nDESCRIPTION: This code snippet shows how to embed a Go Reference badge in Markdown, linking to the Prometheus client library documentation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/prometheus/client_golang/prometheus/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Go Reference](https://pkg.go.dev/badge/github.com/prometheus/client_golang/prometheus.svg)](https://pkg.go.dev/github.com/prometheus/client_golang/prometheus)\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Client Usage in Go\nDESCRIPTION: Example demonstrating how to create a Redis client connection, set a value, and retrieve values with error handling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/redis/go-redis/v9/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/redis/go-redis/v9\"\n    \"fmt\"\n)\n\nvar ctx = context.Background()\n\nfunc ExampleClient() {\n    rdb := redis.NewClient(&redis.Options{\n        Addr:     \"localhost:6379\",\n        Password: \"\", // no password set\n        DB:       0,  // use default DB\n    })\n\n    err := rdb.Set(ctx, \"key\", \"value\", 0).Err()\n    if err != nil {\n        panic(err)\n    }\n\n    val, err := rdb.Get(ctx, \"key\").Result()\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(\"key\", val)\n\n    val2, err := rdb.Get(ctx, \"key2\").Result()\n    if err == redis.Nil {\n        fmt.Println(\"key2 does not exist\")\n    } else if err != nil {\n        panic(err)\n    } else {\n        fmt.Println(\"key2\", val2)\n    }\n    // Output: key value\n    // key2 does not exist\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Token Description - Go\nDESCRIPTION: Method to retrieve the Description field from the CreateApiTokenRequest object, returning zero value if nil.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/CreateApiTokenRequest.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *CreateApiTokenRequest) GetDescription() string\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Project Governance\nDESCRIPTION: Comprehensive markdown documentation detailing the project's governance model, including maintainer roles, decision making processes, and contributor guidelines. It covers the process of adding/removing maintainers, reviewer responsibilities, and conflict resolution procedures.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/distribution/reference/GOVERNANCE.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# distribution/reference Project Governance\n\nDistribution [Code of Conduct](./CODE-OF-CONDUCT.md) can be found here.\n\nFor specific guidance on practical contribution steps please\nsee our [CONTRIBUTING.md](./CONTRIBUTING.md) guide.\n\n## Maintainership\n\nThere are different types of maintainers, with different responsibilities, but\nall maintainers have 3 things in common:\n\n1) They share responsibility in the project's success.\n2) They have made a long-term, recurring time investment to improve the project.\n3) They spend that time doing whatever needs to be done, not necessarily what\nis the most interesting or fun.\n\nMaintainers are often under-appreciated, because their work is harder to appreciate.\nIt's easy to appreciate a really cool and technically advanced feature. It's harder\nto appreciate the absence of bugs, the slow but steady improvement in stability,\nor the reliability of a release process. But those things distinguish a good\nproject from a great one.\n```\n\n----------------------------------------\n\nTITLE: Changing to Package Directory\nDESCRIPTION: Command to navigate to the downloaded Google App Engine package directory in the Go workspace.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/google.golang.org/appengine/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/google.golang.org/appengine\n```\n\n----------------------------------------\n\nTITLE: Logging into Docker Target Registry\nDESCRIPTION: Command to log into the target Docker registry using the provided credentials.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-in-airgapped-environment.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker login -u $TARGET_REGISTRY_USERNAME -p $TARGET_REGISTRY_TOKEN $TARGET_REGISTRY\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Step Conditions in SQL\nDESCRIPTION: SQL statement for creating conditions that control plugin step execution based on variable values. Conditions can determine when to skip, trigger, succeed, or fail a step.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/developers-guide/PluginCreationStep.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO \"plugin_step_condition\" (\"id\", \"plugin_step_id\",\"condition_variable_id\",\"condition_type\", \"conditional_operator\",\"conditional_value\",\"deleted\", \"created_on\", \"created_by\", \"updated_on\", \"updated_by\") VALUES\n(nextval('id_seq_plugin_step_condition'), 'id-from-plugin_step',\"id-of-variable-on-which-condition-is-applied\",'SKIP/TRIGGER/SUCCESS/FAILURE','conditional_operator','conditional_value','f','now()', 'user_id', 'now()', 'user_id');\n```\n\n----------------------------------------\n\nTITLE: Running Go Commands for JWT Library Migration\nDESCRIPTION: Commands to fetch the new version of the JWT library and update the go.mod file after changing import paths.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/golang-jwt/jwt/v4/MIGRATION_GUIDE.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/golang-jwt/jwt/v4\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Installing go-xgettext for String Extraction in Go\nDESCRIPTION: Command to install the go-xgettext tool used for extracting strings from Go files for translation purposes in the Kubernetes project.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/k8s.io/kubectl/pkg/util/i18n/translations/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo get github.com/gosexy/gettext/go-xgettext\n```\n\n----------------------------------------\n\nTITLE: Installing go-redis/cache with Go Modules\nDESCRIPTION: Shell commands for initializing a Go module and installing the go-redis/cache library version 9, which is required for proper functionality.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-redis/cache/v9/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init github.com/my/repo\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/go-redis/cache/v9\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Operators in HCL\nDESCRIPTION: Defines the core arithmetic operators in HCL that apply to number values and always produce number results. Operations are performed in arbitrary-precision number space.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/hcl2/hcl/hclsyntax/spec.md#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\na + b   sum        (addition)\na - b   difference (subtraction)\na * b   product    (multiplication)\na / b   quotient   (division)\na % b   remainder  (modulo)\n-a      negation\n```\n\n----------------------------------------\n\nTITLE: Custom Transformer for time.Time with Mergo in Go\nDESCRIPTION: An advanced example showing how to create a custom transformer for merging time.Time values using Mergo.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/dario.cat/mergo/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"dario.cat/mergo\"\n    \"reflect\"\n    \"time\"\n)\n\ntype timeTransformer struct {\n}\n\nfunc (t timeTransformer) Transformer(typ reflect.Type) func(dst, src reflect.Value) error {\n\tif typ == reflect.TypeOf(time.Time{}) {\n\t\treturn func(dst, src reflect.Value) error {\n\t\t\tif dst.CanSet() {\n\t\t\t\tisZero := dst.MethodByName(\"IsZero\")\n\t\t\t\tresult := isZero.Call([]reflect.Value{})\n\t\t\t\tif result[0].Bool() {\n\t\t\t\t\tdst.Set(src)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}\n\ntype Snapshot struct {\n\tTime time.Time\n\t// ...\n}\n\nfunc main() {\n\tsrc := Snapshot{time.Now()}\n\tdest := Snapshot{}\n\tmergo.Merge(&dest, src, mergo.WithTransformers(timeTransformer{}))\n\tfmt.Println(dest)\n\t// Will print\n\t// { 2018-01-12 01:15:00 +0000 UTC m=+0.000000001 }\n}\n```\n\n----------------------------------------\n\nTITLE: RPC Handled Metrics Example in Prometheus Format\nDESCRIPTION: Example of Prometheus metrics showing completed RPCs. This counter is incremented when a call completes with a status code.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_6\n\nLANGUAGE: jsoniq\nCODE:\n```\ngrpc_server_handled_total{grpc_code=\"OK\",grpc_method=\"PingList\",grpc_service=\"mwitkow.testproto.TestService\",grpc_type=\"server_stream\"} 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Ingress\nDESCRIPTION: Configuration for internal Ingress resource to manage private access to services within the cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ningressInternal:\n  enabled: false\n  ingressClassName: nginx-internal\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Storage in Devtron\nDESCRIPTION: Helm command to configure MinIO for storing logs and cache. MinIO can be hosted locally unlike other cloud providers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/installation-configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd \\\n--reuse-values \\\n--set installer.modules={cicd} \\\n--set minio.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Winter Soldier Settings in YAML\nDESCRIPTION: Example YAML configuration for Winter Soldier, including API version, enabled status, time ranges, action type, and field selectors. This configuration scales resources based on specified time ranges and conditions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nwinterSoldier:\n  apiVersion: pincher.devtron.ai/v1alpha1\n  enabled: true\n  annotations: {}\n  labels: {}\n  timeRangesWithZone:\n    timeZone: \"Asia/Kolkata\"\n    timeRanges: \n      - timeFrom: 00:00\n        timeTo: 23:59:59\n        weekdayFrom: Sat\n        weekdayTo: Sun\n      - timeFrom: 00:00\n        timeTo: 08:00\n        weekdayFrom: Mon\n        weekdayTo: Fri\n      - timeFrom: 20:00\n        timeTo: 23:59:59\n        weekdayFrom: Mon\n        weekdayTo: Fri\n  action: scale\n  targetReplicas: [1,1,1]\n  fieldSelector: \n    - AfterTime(AddTime( ParseTime({{metadata.creationTimestamp}}, '2006-01-02T15:04:05Z'), '10h'), Now())\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override in Kubernetes Deployment (YAML)\nDESCRIPTION: Overrides the release fullname created by default by Devtron, which is used to construct Kubernetes object names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Server Deployment Configuration\nDESCRIPTION: Specifies server deployment settings including image details\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-11-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Recommended Go Code Quality Tools for go-jose\nDESCRIPTION: Recommended tools for ensuring code quality in go-jose contributions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-jose/go-jose/v4/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngolint\n```\n\nLANGUAGE: bash\nCODE:\n```\nerrcheck\n```\n\n----------------------------------------\n\nTITLE: Using WithoutCounterSuffixes Option in Prometheus Exporter\nDESCRIPTION: The WithoutCounterSuffixes option for the Prometheus exporter allows disabling automatic addition of _total suffixes to counter metric names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nWithoutCounterSuffixes\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Deques using Generics in Go\nDESCRIPTION: Examples of creating type-specific deques using Go generics, showing string and integer deque initialization\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/gammazero/deque/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nstringDeque := deque.New[string]()\nvar intDeque deque.Deque[int]\n```\n\n----------------------------------------\n\nTITLE: Listing Storage Classes in Kubernetes\nDESCRIPTION: Check the available storage classes in the Kubernetes cluster to troubleshoot PVC-related issues.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl get storageclass\n```\n\n----------------------------------------\n\nTITLE: Installing go-bindata for Converting Translation Files to Go Code\nDESCRIPTION: Command to install the go-bindata tool which converts the MO translation files into Go code that can be embedded into Kubernetes binaries.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/k8s.io/kubectl/pkg/util/i18n/translations/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo get github.com/go-bindata/go-bindata/...\n```\n\n----------------------------------------\n\nTITLE: Running XORM Tests with SQLite\nDESCRIPTION: Command for running XORM tests against SQLite database, which is the default test configuration requiring only a cgo compile environment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Combining Merge Patches in Go\nDESCRIPTION: Example showing how to combine multiple JSON merge patches into a single patch document.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/gopkg.in/evanphx/json-patch.v4/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\n\tnameAndHeight := []byte(`{\"height\":null,\"name\":\"Jane\"}`)\n\tageAndEyes := []byte(`{\"age\":4.23,\"eyes\":\"blue\"}`)\n\n\tcombinedPatch, err := jsonpatch.MergeMergePatches(nameAndHeight, ageAndEyes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\twithoutCombinedPatch, err := jsonpatch.MergePatch(original, nameAndHeight)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\twithoutCombinedPatch, err = jsonpatch.MergePatch(withoutCombinedPatch, ageAndEyes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\twithCombinedPatch, err := jsonpatch.MergePatch(original, combinedPatch)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif jsonpatch.Equal(withCombinedPatch, withoutCombinedPatch) {\n\t\tfmt.Println(\"Both JSON documents are structurally the same!\")\n\t}\n\n\tfmt.Printf(\"combined merge patch: %s\", combinedPatch)\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Go Compatibility Matrix\nDESCRIPTION: Table showing the currently supported environments for OpenTelemetry Go, including operating systems, Go versions, and architectures. Support is confirmed for Ubuntu, MacOS, and Windows with Go versions 1.20 and 1.21.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| OS      | Go Version | Architecture |\n|---------|------------|------------|\n| Ubuntu  | 1.21       | amd64        |\n| Ubuntu  | 1.20       | amd64        |\n| Ubuntu  | 1.21       | 386          |\n| Ubuntu  | 1.20       | 386          |\n| MacOS   | 1.21       | amd64        |\n| MacOS   | 1.20       | amd64        |\n| Windows | 1.21       | amd64        |\n| Windows | 1.20       | amd64        |\n| Windows | 1.21       | 386          |\n| Windows | 1.20       | 386          |\n```\n\n----------------------------------------\n\nTITLE: Example Task Description Configuration\nDESCRIPTION: Example description for documenting the purpose of the Jenkins task\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/plugins/jenkins.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ne.g. Trigger the build Job of Jenkins\n```\n\n----------------------------------------\n\nTITLE: Git Commit Message Format Template\nDESCRIPTION: Template showing the formal structure for commit messages with placeholders for package, subpackage, description of changes, and optional issue reference.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-git/go-git/v5/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<package>: <subpackage>, <what changed>. [Fixes #<issue-number>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Commands in Deployment\nDESCRIPTION: YAML configuration for specifying the command to be run in the container. The 'enabled' flag controls whether the custom command is used, and 'value' contains the command array.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Setting Grace Period in Kubernetes YAML\nDESCRIPTION: Defines the termination grace period for pods. This specifies how long Kubernetes waits before forcefully terminating a pod, allowing for graceful shutdown procedures.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Setter Methods for ApiToken Properties in Go\nDESCRIPTION: Collection of setter methods for modifying ApiToken fields. Each method takes a value of appropriate type and updates the corresponding field in the ApiToken struct.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/ApiToken.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *ApiToken) SetId(v int32)\nfunc (o *ApiToken) SetUserId(v int32)\nfunc (o *ApiToken) SetName(v string)\nfunc (o *ApiToken) SetDescription(v string)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Failed Devtron Installation - Bash\nDESCRIPTION: Commands to clean up components installed by Devtron installer and reset the installer status for a fresh installation attempt.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/faq-on-installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd devtron-installation-script/\nkubectl delete -n devtroncd -f yamls/\nkubectl -n devtroncd patch installer installer-devtron --type json -p '[{\"op\": \"remove\", \"path\": \"/status\"}]'\n```\n\n----------------------------------------\n\nTITLE: Creating New UpdateApiTokenResponse Objects in Go\nDESCRIPTION: These functions create new instances of UpdateApiTokenResponse. NewUpdateApiTokenResponse assigns default values, while NewUpdateApiTokenResponseWithDefaults only sets defined default values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/UpdateApiTokenResponse.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc NewUpdateApiTokenResponse() *UpdateApiTokenResponse\n\nfunc NewUpdateApiTokenResponseWithDefaults() *UpdateApiTokenResponse\n```\n\n----------------------------------------\n\nTITLE: Maximum Surge Pods Configuration\nDESCRIPTION: Specifies the maximum number of pods that can be created over the desired count.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Admin Password for Devtron pre-v0.6.0 using kubectl\nDESCRIPTION: This command retrieves the admin password for Devtron versions prior to 0.6.0. It gets the 'devtron-secret' from the 'devtroncd' namespace, extracts the base64-encoded ACD_PASSWORD field, and decodes it.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd-with-gitops.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get secret devtron-secret \\\n-o jsonpath='{.data.ACD_PASSWORD}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Inserting Records with XORM in Go\nDESCRIPTION: Demonstrates various ways to insert records into the database using XORM, including single and multiple record insertions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\naffected, err := engine.Insert(&user)\n// INSERT INTO struct () values ()\n\naffected, err := engine.Insert(&user1, &user2)\n// INSERT INTO struct1 () values ()\n// INSERT INTO struct2 () values ()\n\naffected, err := engine.Insert(&users)\n// INSERT INTO struct () values (),(),()\n\naffected, err := engine.Insert(&user1, &users)\n// INSERT INTO struct1 () values ()\n// INSERT INTO struct2 () values (),(),()\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Secrets in Devtron Deployment\nDESCRIPTION: Contains the Docker credentials for accessing private registries. These secrets must be created separately via dt-secrets helm chart or kubectl.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Installing PostHog Go Client\nDESCRIPTION: Command to install the PostHog Go client library to your GOPATH using go get.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/posthog/posthog-go/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/posthog/posthog-go\n```\n\n----------------------------------------\n\nTITLE: Retrieving Devtron Admin Password\nDESCRIPTION: Command to retrieve the admin password from Kubernetes secret\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get secret devtron-secret -o jsonpath='{.data.ADMIN_PASSWORD}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: JSON Example Data Structure\nDESCRIPTION: A sample JSON document used throughout the documentation to demonstrate GJSON path syntax examples.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/SYNTAX.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": {\"first\": \"Tom\", \"last\": \"Anderson\"},\n  \"age\":37,\n  \"children\": [\"Sara\",\"Alex\",\"Jack\"],\n  \"fav.movie\": \"Deer Hunter\",\n  \"friends\": [\n    {\"first\": \"Dale\", \"last\": \"Murphy\", \"age\": 44, \"nets\": [\"ig\", \"fb\", \"tw\"]},\n    {\"first\": \"Roger\", \"last\": \"Craig\", \"age\": 68, \"nets\": [\"fb\", \"tw\"]},\n    {\"first\": \"Jane\", \"last\": \"Murphy\", \"age\": 47, \"nets\": [\"ig\", \"tw\"]}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Fatal Handlers in Logrus for Go\nDESCRIPTION: Example of registering a fatal handler function in Logrus that executes before application termination. This pattern allows for graceful shutdown operations when fatal errors occur, which cannot be achieved with panic/recover.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nhandler := func() {\n  // gracefully shutdown something...\n}\nlogrus.RegisterExitHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Implementing RetriableRequest for HTTP Requests in Go\nDESCRIPTION: Adds RetriableRequest type for more efficient handling of retrying HTTP requests in Azure SDK for Go.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nRetriableRequest\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 0.7.4\nDESCRIPTION: Release notes for version 0.7.4 fixing a Content-Type header issue with HTTP/2.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/go-retryablehttp/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.7.4 (Jun 6, 2023)\n\nBUG FIXES:\n\n- client: fixing an issue where the Content-Type header wouldn't be sent with an empty payload when using HTTP/2 (#194)\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Commands\nDESCRIPTION: Specifies container startup commands\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollout Resources in YAML\nDESCRIPTION: YAML configuration for rollout resources in Devtron, specifying CPU and memory limits and requests. Sets limits of 250m CPU and 200Mi memory, with requests of 50m CPU and 100Mi memory.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/config.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrollout:\n  resources:\n    limits:\n      cpu: 250m\n      memory: 200Mi\n    requests:\n      cpu: 50m\n      memory: 100Mi\n```\n\n----------------------------------------\n\nTITLE: Defining Accept Struct in Go for HTTP Accept Header\nDESCRIPTION: This snippet defines the Accept struct, which represents a clause in an HTTP Accept Header. It includes fields for Type, SubType, Q (quality factor), and additional parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/prometheus/common/internal/bitbucket.org/ww/goautoneg/README.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ntype Accept struct {\n    Type, SubType string\n    Q             float32\n    Params        map[string]string\n}\n```\n\n----------------------------------------\n\nTITLE: Removing InstrumentProvider from Async Metric Packages\nDESCRIPTION: The InstrumentProvider from async metric packages is removed. Users should use new creation methods of the Meter in go.opentelemetry.io/otel/sdk/metric instead.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_19\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/sdk/metric/asyncint64.InstrumentProvider\ngo.opentelemetry.io/otel/sdk/metric/asyncfloat64.InstrumentProvider\ngo.opentelemetry.io/otel/sdk/metric/syncint64.InstrumentProvider\ngo.opentelemetry.io/otel/sdk/metric/syncfloat64.InstrumentProvider\n```\n\n----------------------------------------\n\nTITLE: Get and Set InstalledAppId Methods in Go\nDESCRIPTION: Methods to get, check existence of, and set the InstalledAppId field for installed chart store applications.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/RollbackReleaseRequest.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *RollbackReleaseRequest) GetInstalledAppId() int32\nfunc (o *RollbackReleaseRequest) GetInstalledAppIdOk() (*int32, bool)\nfunc (o *RollbackReleaseRequest) SetInstalledAppId(v int32)\nfunc (o *RollbackReleaseRequest) HasInstalledAppId() bool\n```\n\n----------------------------------------\n\nTITLE: Defining DevtronApp Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the DevtronApp model using a Markdown table. It includes the property names, their data types, descriptions, and additional notes such as optionality and default values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/md-output/Models/DevtronApp.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# DevtronApp\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**appName** | **String** | name of the helm application/helm release name | [optional] [default to null]\n**appId** | **String** | unique identifier for app | [optional] [default to null]\n**projectId** | **Integer** | unique identifier for the project | [optional] [default to null]\n**environmentDetails** | [**List**](AppEnvironmentDetail.md) |  | [optional] [default to null]\n```\n\n----------------------------------------\n\nTITLE: StatefulSet Configuration with Volume Claims\nDESCRIPTION: Comprehensive StatefulSet configuration including labels, annotations, volume claim templates, and storage specifications.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstatefulSetConfig:\n  labels:\n    app: my-statefulset\n    environment: production\n  annotations:\n    example.com/version: \"1.0\"\n  serviceName: \"my-statefulset-service\"\n  podManagementPolicy: \"Parallel\"\n  revisionHistoryLimit: 5\n  mountPath: \"/data\"\n  volumeClaimTemplates:\n    - apiVersion: v1\n      kind: PersistentVolumeClaim\n      metadata:\n        labels:\n          app: my-statefulset\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        dataSource:\n          kind: Snapshot\n          apiGroup: snapshot.storage.k8s.io\n          name: my-snapshot\n        resources:\n          requests:\n            storage: 5Gi\n          limits:\n            storage: 10Gi\n        storageClassName: my-storage-class\n        selector:\n          matchLabels:\n            app: my-statefulset\n        volumeMode: Filesystem\n        volumeName: my-pv\n  - apiVersion: v1\n    kind: PersistentVolumeClaim\n    metadata:\n      name: pvc-logs\n      labels:\n        app: myapp\n    spec:\n      accessModes:\n        - ReadWriteMany\n      dataSourceRef:\n        kind: Secret\n        apiGroup: v1\n        name: my-secret\n      resources:\n        requests:\n          storage: 5Gi\n      storageClassName: my-storage-class\n      selector:\n        matchExpressions:\n          - {key: environment, operator: In, values: [production]}\n      volumeMode: Block\n      volumeName: my-pv\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Vault Authentication in YAML\nDESCRIPTION: YAML definition for creating a Kubernetes secret that stores the vault authentication token. This secret will be referenced when configuring external secrets from HashiCorp Vault in Devtron.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/eso/hashicorp-eso.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\ntype: Opaque\ndata:\n   token: <vault-password>\nmetadata:\n   name: vault-token\n   namespace: <namespace>\n```\n\n----------------------------------------\n\nTITLE: Regenerating Kubernetes API Schemas\nDESCRIPTION: These commands specifically regenerate the Kubernetes API schemas by removing the existing swagger.go file and recreating it.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/sigs.k8s.io/kustomize/kyaml/openapi/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrm kubernetesapi/swagger.go\nmake kubernetesapi/swagger.go\n```\n\n----------------------------------------\n\nTITLE: Semantic Convention Naming (Go)\nDESCRIPTION: Constants renamed in semantic conventions v1.18.0 package\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nOtelScopeNameKey -> OTelScopeNameKey\nOtelScopeVersionKey -> OTelScopeVersionKey\nOtelLibraryNameKey -> OTelLibraryNameKey\nOtelLibraryVersionKey -> OTelLibraryVersionKey\nOtelStatusCodeKey -> OTelStatusCodeKey\nOtelStatusDescriptionKey -> OTelStatusDescriptionKey\nOtelStatusCodeOk -> OTelStatusCodeOk\nOtelStatusCodeError -> OTelStatusCodeError\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from Files with env Package\nDESCRIPTION: Example showing how to load environment variable values from files using the file tag option, including usage with default paths and variable expansion.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/caarlos0/env/v6/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\t\"github.com/caarlos0/env/v6\"\n)\n\ntype config struct {\n\tSecret       string   `env:\"SECRET,file\"`\n\tPassword     string   `env:\"PASSWORD,file\" envDefault:\"/tmp/password\"`\n\tCertificate  string   `env:\"CERTIFICATE,file\" envDefault:\"${CERTIFICATE_FILE}\" envExpand:\"true\"`\n}\n\nfunc main() {\n\tcfg := config{}\n\tif err := env.Parse(&cfg); err != nil {\n\t\tfmt.Printf(\"%+v\\n\", err)\n\t}\n\n\tfmt.Printf(\"%+v\\n\", cfg)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Individual Schema Generation Steps\nDESCRIPTION: These commands run the individual steps for generating Kustomization and Kubernetes API schemas, and updating the openapiinfo.go file.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/sigs.k8s.io/kustomize/kyaml/openapi/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake kustomizationapi/swagger.go\nmake kubernetesapi/swagger.go\nmake kubernetesapi/openapiinfo.go\n```\n\n----------------------------------------\n\nTITLE: Using Between Condition in Go with builder\nDESCRIPTION: Example of creating a BETWEEN condition for SQL queries using the Between type.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/builder/README.md#2025-04-22_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\nimport . \"xorm.io/builder\"\n\nsql, args, _ := ToSQL(Between{\"a\", 1, 2})\n// a BETWEEN 1 AND 2\n```\n\n----------------------------------------\n\nTITLE: Basic Error Trace Example in Go\nDESCRIPTION: Shows how to trace an error using the errors package instead of direct error return. Records file and line number of the error occurrence.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif err := SomeFunc(); err != nil {\n    return errors.Trace(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating String Comparison in Go using Govaluate\nDESCRIPTION: Creates an expression that compares a string parameter with a string literal. The expression checks if an HTTP response body matches an expected string.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/govaluate/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nexpression, err := govaluate.NewEvaluableExpression(\"http_response_body == 'service is ok'\");\n\nparameters := make(map[string]interface{}, 8)\nparameters[\"http_response_body\"] = \"service is ok\";\n\nresult, err := expression.Evaluate(parameters);\n// result is now set to \"true\", the bool value.\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin-Tag Relationships in SQL\nDESCRIPTION: SQL statement for establishing a relationship between a plugin and its tags in the plugin_tag_relation table. Multiple tags can be associated with a single plugin.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/developers-guide/PluginCreationStep.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO \"plugin_tag_relation\" (\"id\", \"tag_id\", \"plugin_id\", \"created_on\", \"created_by\", \"updated_on\", \"updated_by\") VALUES\n(nextval('id_seq_plugin_tag_relation'), 'id_from_table-plugin_tag','id_from_table-plugin_metadata','now()', 'user_id', 'now()', 'user_id');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Devtron Admin Password (pre-v0.6.0)\nDESCRIPTION: Command to get the admin password for Devtron versions lower than 0.6.0 from a Kubernetes secret.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get secret devtron-secret -o jsonpath='{.data.ACD_PASSWORD}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Cleaning Devtron Installation\nDESCRIPTION: Commands for completely removing Devtron and its components\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-helm-3.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm uninstall devtron --namespace devtroncd\nkubectl delete -n devtroncd -f https://raw.githubusercontent.com/devtron-labs/charts/main/charts/devtron/crds/crd-devtron.yaml\nkubectl delete -n argo -f https://raw.githubusercontent.com/devtron-labs/devtron/main/manifests/yamls/workflow.yaml\nkubectl delete ns devtroncd devtron-cd devtron-ci devtron-demo\n```\n\n----------------------------------------\n\nTITLE: Deleting API Token in Go\nDESCRIPTION: Makes a DELETE request to remove an API token by ID. Takes an integer ID parameter and returns an ActionResponse object.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/DefaultApi.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n    openapiclient \"./openapi\"\n)\n\nfunc main() {\n    id := int64(789) // int64 | api-token Id\n\n    configuration := openapiclient.NewConfiguration()\n    apiClient := openapiclient.NewAPIClient(configuration)\n    resp, r, err := apiClient.DefaultApi.OrchestratorApiTokenIdDelete(context.Background(), id).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `DefaultApi.OrchestratorApiTokenIdDelete``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    // response from `OrchestratorApiTokenIdDelete`: ActionResponse\n    fmt.Fprintf(os.Stdout, \"Response from `DefaultApi.OrchestratorApiTokenIdDelete`: %v\\n\", resp)\n}\n```\n\n----------------------------------------\n\nTITLE: Image Pull Secrets Configuration\nDESCRIPTION: Configuration for private registry credentials.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin Text in Markdown\nDESCRIPTION: The full text of the Developer Certificate of Origin (DCO) version 1.1 that contributors must certify compliance with when submitting code. This certification confirms the contributor has the right to submit the code under the project's open source license.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/distribution/reference/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n```\n\n----------------------------------------\n\nTITLE: Adding ErrorHandlerFunc Example\nDESCRIPTION: Example code showing how to use ErrorHandlerFunc to handle errors in OpenTelemetry\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_25\n\nLANGUAGE: go\nCODE:\n```\nErrorHandlerFunc(func(err error) {\n    // Error handling logic here\n})\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateApiTokenResponse Struct in Go\nDESCRIPTION: This snippet defines the UpdateApiTokenResponse struct with two properties: Success (bool) and Token (string). Both are optional fields.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/UpdateApiTokenResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype UpdateApiTokenResponse struct {\n    Success *bool   `json:\"success,omitempty\"`\n    Token   *string `json:\"token,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Editing PVC for Git Sensor in Kubernetes\nDESCRIPTION: Edit the Persistent Volume Claim (PVC) for the Git sensor to increase its size when encountering disk full errors.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl edit pvc git-volume-git-sensor-0 -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: Installing ADAL Package for Go\nDESCRIPTION: This command installs the Azure Active Directory authentication library for Go using the go get command.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/autorest/adal/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngo get -u github.com/Azure/go-autorest/autorest/adal\n```\n\n----------------------------------------\n\nTITLE: Function Declaration in govaluate\nDESCRIPTION: Shows the syntax for declaring and using functions in govaluate expressions. Functions always require parentheses, even with empty parameter lists.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/govaluate/MANUAL.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n<name>(<parameters>)\n```\n\nLANGUAGE: go\nCODE:\n```\n<name>()\n```\n\n----------------------------------------\n\nTITLE: Installing ghinstallation Package with Go Modules\nDESCRIPTION: Command to install the ghinstallation package using Go modules\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/bradleyfalzon/ghinstallation/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGO111MODULE=on go get -u github.com/bradleyfalzon/ghinstallation/v2\n```\n\n----------------------------------------\n\nTITLE: Creating Not Supported Error with Formatting in Go\nDESCRIPTION: NotSupportedf returns an error which satisfies IsNotSupported(). It takes a format string and optional arguments for formatting.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc NotSupportedf(format string, args ...interface{}) error\n```\n\n----------------------------------------\n\nTITLE: Getting Manifest Value - Go\nDESCRIPTION: Method to retrieve the Manifest field value, returning zero value if nil.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/TemplateChartResponse.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *TemplateChartResponse) GetManifest() string\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 0.7.7\nDESCRIPTION: Release notes for version 0.7.7 documenting a security fix for potential URL credential leakage in logs.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/go-retryablehttp/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.7.7 (May 30, 2024)\n\nBUG FIXES:\n\n- client: avoid potentially leaking URL-embedded basic authentication credentials in logs (#158)\n```\n\n----------------------------------------\n\nTITLE: Reading Proc Filesystem Files in Go\nDESCRIPTION: Example code demonstrating how to properly read files from the /proc filesystem using the util.ReadFileNoStat function and then parsing the contents line by line with a scanner.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ndata, err := util.ReadFileNoStat(\"/proc/cpuinfo\")\nif err != nil {\n    return err\n}\nreader := bytes.NewReader(data)\nscanner := bufio.NewScanner(reader)\n```\n\n----------------------------------------\n\nTITLE: Field Presence Check Methods for UpdateApiTokenResponse in Go\nDESCRIPTION: These methods check if the Success and Token fields have been set in the UpdateApiTokenResponse struct.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/UpdateApiTokenResponse.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc (o *UpdateApiTokenResponse) HasSuccess() bool\n\nfunc (o *UpdateApiTokenResponse) HasToken() bool\n```\n\n----------------------------------------\n\nTITLE: Creating NewActionResponseWithDefaults Constructor in Go\nDESCRIPTION: Defines a constructor function that creates a new ActionResponse object with default values, but doesn't guarantee required properties are set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/ActionResponse.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc NewActionResponseWithDefaults() *ActionResponse {\n    return &ActionResponse{}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repository for Devtron Upgrade\nDESCRIPTION: Command to update the Helm repository to ensure the latest chart versions are available for the upgrade process.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.3.x-0.3.x.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron on Cloud VM\nDESCRIPTION: Commands to install Devtron on a Cloud VM using NodePort service type.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/Install-devtron-on-Minikube-Microk8s-K3s-Kind.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai\n\nhelm repo update devtron\n\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd \\\n--set components.devtron.service.type=NodePort\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes Documentation\nDESCRIPTION: Structured changelog documenting bug fixes, enhancements, and documentation updates across multiple release versions of Devtron. Includes version tags, categorized changes, and reference to GitHub pull request numbers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/CHANGELOG/release-notes-v0.6.10.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.6.10\n\n## Bugs\n- fix: safe check added if cell value is not found in resource list (#2839)\n## Enhancements\n- feat: Resource viewer implementation for a cluster (#2811)\n- feat: Deployment status restructuring (#2806)\n\n\n## v0.6.10-rc.1\n\n## Bugs\n- fix: cluster name passed in node metadata list (#2804)\n- fix: Chart with nested directory  (#2797)\n## Enhancements\n- feat: added support for node-[delete, cordon, drain, taint edit] (#2805)\n- feat: Cluster terminal multiple image support (#2815)\n## Documentation\n- docs: minor correction in ingress yaml (#2819)\n- docs: updated cluster server url (#2816)\n- docs: minor updates (#2800)\n- docs: updated-global-configs (#2712)\n- docs: added deployment status shows failed or degraded in troubleshooting section (#2795)\n- docs: uninstall minor updates (#2788)\n- docs: Updated devtron admin password reset doc (#2785)\n\n\n## v0.6.10-rc.0\n\n## Bugs\n- fix: Authenticator updated - handling api token (#2745)\n- fix: Ci workflow status update when workflow stuck. (#2726)\n- fix: Update Chart.yaml for security integration chart fix (#2771)\n- fix: Helm app proxy chart auto fix (#2754)\n- fix: No need to bounce orchestrator if SSO config are added/updated (#2753)\n- fix: ArgoCD Connection Manager connection handling (#2702)\n## Enhancements\n- feat: added new chart for job and cronjob with keda scaledjob support (#2749)\n## Documentation\n- docs: deployment updates (#2769)\n- docs: deployment template doc (#2770)\n- docs: install command corrected (#2775)\n- docs: broken links fixed in doc v0.6 (#2776)\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Compute Metadata Package in Go\nDESCRIPTION: This snippet shows how to install the Google Cloud Compute metadata package using the go get command. This package is used for communicating with Google Cloud metadata service.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/cloud.google.com/go/compute/metadata/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/compute/metadata\n```\n\n----------------------------------------\n\nTITLE: Checking Devtron Installation Status\nDESCRIPTION: Command to check the status of the Devtron installation. It retrieves the installation status which can be either 'Downloaded' (in progress) or 'Applied' (completed).\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get installers installer-devtron \\\n-o jsonpath='{.status.sync.status}'\n```\n\n----------------------------------------\n\nTITLE: Generated JSON Schema for Custom Type Definition\nDESCRIPTION: Shows the resulting JSON schema for the CompactDate type with the custom schema definition.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/invopop/jsonschema/README.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft/2020-12/schema\",\n  \"$ref\": \"#/$defs/CompactDate\",\n  \"$defs\": {\n    \"CompactDate\": {\n      \"pattern\": \"^[0-9]{4}-[0-1][0-9]$\",\n      \"type\": \"string\",\n      \"title\": \"Compact Date\",\n      \"description\": \"Short date that only includes year and month\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Splat Operators in EBNF\nDESCRIPTION: EBNF grammar for splat operators in HCL, including attribute-only and full splat operators that allow access to attributes or elements of collections.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/hcl2/hcl/hclsyntax/spec.md#2025-04-22_snippet_8\n\nLANGUAGE: ebnf\nCODE:\n```\nSplat = attrSplat | fullSplat;\nattrSplat = \".\" \"*\" GetAttr*;\nfullSplat = \"[\" \"*\" \"]\" (GetAttr | Index)*;\n```\n\n----------------------------------------\n\nTITLE: Removing Escaping of Shared Config Values in Go\nDESCRIPTION: Removes invalid escaping of shared config values. All values in the shared config file will now be interpreted literally, except for fully-quoted strings which are unwrapped for legacy reasons.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/internal/ini/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// No specific code provided, but implies changes to shared config parsing logic\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variable Support to OTLP Exporters\nDESCRIPTION: OTLP exporters now recognize several new environment variables for configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_22\n\nLANGUAGE: Go\nCODE:\n```\nOTEL_EXPORTER_OTLP_INSECURE\nOTEL_EXPORTER_OTLP_TRACES_INSECURE\nOTEL_EXPORTER_OTLP_METRICS_INSECURE\nOTEL_EXPORTER_OTLP_CLIENT_KEY\nOTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY\nOTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY\nOTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE\nOTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE\nOTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE\n```\n\n----------------------------------------\n\nTITLE: Raw Kubernetes YAML Configuration\nDESCRIPTION: Direct Kubernetes resource definitions using raw YAML\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Implementing Future Type for Long-Running Operations in Go\nDESCRIPTION: Adds azure.Future type used to track the status of long-running operations in Azure SDK for Go.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nazure.Future\n```\n\n----------------------------------------\n\nTITLE: Custom Formatting Options Structure\nDESCRIPTION: The Options struct that can be used with PrettyOptions function to customize JSON formatting.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/pretty/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype Options struct {\n\t// Width is an max column width for single line arrays\n\t// Default is 80\n\tWidth int\n\t// Prefix is a prefix for all lines\n\t// Default is an empty string\n\tPrefix string\n\t// Indent is the nested indentation\n\t// Default is two spaces\n\tIndent string\n\t// SortKeys will sort the keys alphabetically\n\t// Default is false\n\tSortKeys bool\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable Example\nDESCRIPTION: Example showing the environment variable settings for enabling tracing and instrumentation with Azure SDK\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_SDK_TRACING_ENABLED=true\\nOCAGENT_TRACE_EXPORTER_ENDPOINT=<endpoint>\n```\n\n----------------------------------------\n\nTITLE: Service Account Configuration\nDESCRIPTION: Specifies the service account for pod identity.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nserviceAccountName: orchestrator\n```\n\n----------------------------------------\n\nTITLE: Field Presence Check Methods for ApiToken in Go\nDESCRIPTION: Boolean methods that check if specific fields have been set in the ApiToken struct. Returns true if the field has a non-nil value.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/ApiToken.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *ApiToken) HasId() bool\nfunc (o *ApiToken) HasUserId() bool\nfunc (o *ApiToken) HasName() bool\nfunc (o *ApiToken) HasDescription() bool\n```\n\n----------------------------------------\n\nTITLE: Empty Environment Variables Configuration\nDESCRIPTION: Template for defining environment variables list in StatefulSet configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Adding Go Module Replace Directive for Legacy Import Path\nDESCRIPTION: Command to add a replace directive in go.mod to handle legacy imports from github.com/uber-go/atomic by downgrading to v1.4.0.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.uber.org/atomic/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go mod edit -replace github.com/uber-go/atomic=github.com/uber-go/atomic@v1.4.0\n```\n\n----------------------------------------\n\nTITLE: Converting String to Base64 for Devtron Configuration\nDESCRIPTION: Command to convert a string to base64 encoding, which is required for certain Devtron configuration parameters like BLOB_STORAGE_GCP_CREDENTIALS_JSON.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/installation-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho -n \"string\" | base64\n```\n\n----------------------------------------\n\nTITLE: Checking Manifest Field Status - Go\nDESCRIPTION: Method that returns a boolean indicating whether the Manifest field has been set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/TemplateChartResponse.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *TemplateChartResponse) HasManifest() bool\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark for Logr in Markdown\nDESCRIPTION: Instructions for running the benchmark to evaluate performance impact of code changes. Contributors are required to include benchmark results before and after any proposed changes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-logr/logr/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[benchmark](./benchmark)\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for Redis Client\nDESCRIPTION: Shell commands to initialize a Go module and install the go-redis client library v9.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/redis/go-redis/v9/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init github.com/my/repo\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/redis/go-redis/v9\n```\n\n----------------------------------------\n\nTITLE: Using Preparers to Construct URLs in Go\nDESCRIPTION: Shows how to use Preparers to construct a URL by chaining multiple WithPath decorators.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nreq, err := Prepare(&http.Request{},\n  WithBaseURL(\"https://microsoft.com/\"),\n  WithPath(\"a\"),\n  WithPath(\"b\"),\n  WithPath(\"c\"))\n```\n\n----------------------------------------\n\nTITLE: Custom Template Functions for Error Messages\nDESCRIPTION: Demonstrates how to add custom template functions for formatting error messages.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ngojsonschema.ErrorTemplateFuncs = map[string]interface{}{\n\t\"allcaps\": func(s string) string {\n\t\treturn strings.ToUpper(s)\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Value Type with Type Assertion Methods\nDESCRIPTION: Shows how to check the type of a value retrieved from an objx.Map using the IsStr() method before processing it.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/stretchr/objx/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif m.Get(\"code\").IsStr() { // Your code... }\n```\n\n----------------------------------------\n\nTITLE: Adding Script Mappings in SQL\nDESCRIPTION: SQL statement for creating file path, command arguments, or port mappings for scripts in the script_path_arg_port_mapping table. Each mapping requires a separate entry.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/developers-guide/PluginCreationStep.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO \"script_path_arg_port_mapping\" (\"id\", \"type_of_mapping\", \"file_path_on_disk\",\"file_path_on_container,\"command\", \"args\",\"port_on_local\",\"port_on_container\",\"script_id\",\"deleted\",\"created_on\", \"created_by\", \"updated_on\", \"updated_by\") VALUES\n(nextval('id_seq_script_path_arg_port_mapping'), 'FILE_PATH/DOCKER_ARG/PORT','file_path_mapping_entry',\"file_path_mapping_entry\",\"command\",\"array_of_args\",'port_on_local',''port_on_container','id-from-script-table','f','now()', 'user_id', 'now()', 'user_id');\n```\n\n----------------------------------------\n\nTITLE: Deleting Devtron Pod Using kubectl Command\nDESCRIPTION: Command to delete the Devtron pod after configuring the ORCH_HOST in order to apply changes to the environment configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/workflow/cd-pipeline.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod -l app=devtron -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: API Endpoint for Fetching Plugin Details by ID\nDESCRIPTION: GET request endpoint for retrieving detailed information about a specific plugin using its ID.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/plugins/create-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /orchestrator/plugin/global/detail/{pluginId}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Monitoring Configuration\nDESCRIPTION: Specifies Prometheus monitoring release name for Kubernetes monitoring.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Getting Token Expiration Time with Status - Go\nDESCRIPTION: Method that returns both the ExpireAtInMs field value and a boolean indicating if the value has been set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/CreateApiTokenRequest.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *CreateApiTokenRequest) GetExpireAtInMsOk() (*int64, bool)\n```\n\n----------------------------------------\n\nTITLE: Configuring Volumes in Kubernetes YAML\nDESCRIPTION: Defines volume configurations for external storage in Kubernetes. Includes examples for emptyDir and persistentVolumeClaim.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Logic Operators in HCL\nDESCRIPTION: Defines the logic operators in HCL that apply only to boolean values and always produce boolean results.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/hcl2/hcl/hclsyntax/spec.md#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\na && b   logical AND\na || b   logical OR\n!a       logical NOT\n```\n\n----------------------------------------\n\nTITLE: Setting Platform Environment Variable for Linux/arm64\nDESCRIPTION: Command to set the PLATFORM environment variable for Linux/arm64 architecture.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-in-airgapped-environment.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport PLATFORM=\"linux/arm64\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests in the Project\nDESCRIPTION: Commands for installing required tools and running tests. The first command only needs to be run once to set up the development environment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ make install-tools  # Only first time.\n$ make\n```\n\n----------------------------------------\n\nTITLE: Checking Pod Status in Devtron Namespace\nDESCRIPTION: This command retrieves the status of all pods in the devtroncd namespace, helping to identify if any pods are still running or have failed.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: Importing Cobra in Go Application\nDESCRIPTION: Code snippet showing how to import the Cobra library in a Go application.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/spf13/cobra\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Creating Errors in Go with Stacktrace Support\nDESCRIPTION: Example showing how to define a constant error and create a new error with stacktrace in a package called 'crashy'. Uses the go-errors/errors package to create errors with stacktrace information.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-errors/errors/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage crashy\n\nimport \"github.com/go-errors/errors\"\n\nvar Crashed = errors.Errorf(\"oh dear\")\n\nfunc Crash() error {\n    return errors.New(Crashed)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Cron v3 in Go\nDESCRIPTION: Import statement to include the cron v3 library in a Go program.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/robfig/cron/v3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/robfig/cron/v3\"\n```\n\n----------------------------------------\n\nTITLE: Executing Go Generate for Auto-generated Code\nDESCRIPTION: Shell command to run 'go generate' on all packages in the repository, ensuring that auto-generated code is up to date.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Microsoft/go-winio/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> go generate ./...\n```\n\n----------------------------------------\n\nTITLE: Installing JSON-Patch Library in Go\nDESCRIPTION: Commands for installing different versions of the json-patch library using go get.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/gopkg.in/evanphx/json-patch.v4/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/evanphx/json-patch/v5\n```\n\n----------------------------------------\n\nTITLE: Running XORM Tests with TiDB\nDESCRIPTION: Command for running XORM tests against a TiDB database with environment variables for connection parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nTEST_TIDB_HOST= TEST_TIDB_DBNAME= TEST_TIDB_USERNAME= TEST_TIDB_PASSWORD= make test-tidb\n```\n\n----------------------------------------\n\nTITLE: Creating Changelog Document for Devtron Pull Requests\nDESCRIPTION: This JSON structure defines the format for changelog documents to be included with pull requests. It specifies the required fields and their purposes, including a unique ID, change type, collapsibility, description, and affected modules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/smithy-go/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"12345678-1234-1234-1234-123456789012\"\n    \"type\": \"bugfix\"\n    \"collapse\": true\n    \"description\": \"Fix improper use of printf-style functions.\",\n    \"modules\": [\n        \".\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Neq Condition in Go with builder\nDESCRIPTION: Examples showing how to construct inequality conditions using the Neq type, which handles NOT EQUAL and NOT IN operations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/builder/README.md#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nimport . \"xorm.io/builder\"\n\nsql, args, _ := ToSQL(Neq{\"a\":1})\n// a<>? [1]\nsql, args, _ := ToSQL(Neq{\"b\":\"c\"}.And(Neq{\"c\": 0}))\n// b<>? AND c<>? [\"c\", 0]\nsql, args, _ := ToSQL(Neq{\"b\":\"c\", \"c\":0})\n// b<>? AND c<>? [\"c\", 0]\nsql, args, _ := ToSQL(Neq{\"b\":\"c\"}.Or(Neq{\"b\":\"d\"}))\n// b<>? OR b<>? [\"c\", \"d\"]\nsql, args, _ := ToSQL(Neq{\"b\": []string{\"c\", \"d\"}})\n// b NOT IN (?,?) [\"c\", \"d\"]\nsql, args, _ := ToSQL(Neq{\"b\": 1, \"c\":[]int{2, 3}})\n// b<>? AND c NOT IN (?,?) [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Options with Default False in Go\nDESCRIPTION: Shows how to implement an Option for boolean configuration values that default to false. Includes both the option implementation and the exported wrapper function.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype defaultFalseOption bool\n\nfunc (o defaultFalseOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithOption sets a T to have an option included.\nfunc WithOption() Option {\n\treturn defaultFalseOption(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Searching JSON with JMESPath in Go\nDESCRIPTION: This snippet demonstrates how to use the jmespath.Search function to query JSON data. It shows importing the library, unmarshaling JSON data, and executing a simple JMESPath query.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/jmespath/go-jmespath\"\n\nvar jsondata = []byte(`{\"foo\": {\"bar\": {\"baz\": [0, 1, 2, 3, 4]}}}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.Search(\"foo.bar.baz[2]\", data)\nresult = 2\n```\n\n----------------------------------------\n\nTITLE: Applying OpenCensus Tags as Profiler Labels in Go\nDESCRIPTION: Example of how to apply OpenCensus tags as profiler labels for Go 1.9 and above.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opencensus.io/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx, err = tag.New(ctx,\n\ttag.Insert(osKey, \"macOS-10.12.5\"),\n\ttag.Insert(userIDKey, \"fff0989878\"),\n)\nif err != nil {\n\tlog.Fatal(err)\n}\ntag.Do(ctx, func(ctx context.Context) {\n\t// Do work.\n\t// When profiling is on, samples will be\n\t// recorded with the key/values from the tag map.\n})\n```\n\n----------------------------------------\n\nTITLE: Initial OpenTelemetry Module Versions\nDESCRIPTION: Initial module versions before stable release, with all packages at v0.14.0\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v0.14.0`\n* `otel/trace`: `v0.14.0`\n* `otel/metric`: `v0.14.0`\n* `otel/baggage`: `v0.14.0`\n* `otel/sdk/trace`: `v0.14.0`\n* `otel/sdk/metric`: `v0.14.0`\n```\n\n----------------------------------------\n\nTITLE: Managing Dependencies with Go Modules - Adding New Dependencies\nDESCRIPTION: Commands to add or update dependencies using Go modules, demonstrating how to pick either the latest tagged release or a specific version.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Pick the latest tagged release.\ngo get example.com/some/module/pkg\n\n# Pick a specific version.\ngo get example.com/some/module/pkg@vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Creating XORM Engine in Go\nDESCRIPTION: Demonstrates how to create a new XORM engine for database operations. This is the first step in using XORM to interact with a database.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nengine, err := xorm.NewEngine(driverName, dataSourceName)\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron Beta Release with Helm\nDESCRIPTION: Commands to clone Devtron repository and install the beta version using local helm charts.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/charts/devtron/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone [https://github.com/devtron-labs/devtron.git](https://github.com/devtron-labs/devtron.git)\n$ cd devtron/charts/devtron\n$ helm dependency up\n$ #modify values in values.yaml\n$ helm install devtron . --create-namespace --namespace devtroncd -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Kubernetes Services using Go Templates and Bash\nDESCRIPTION: This snippet provides conditional logic to retrieve the application URL based on different Kubernetes service types. It handles Ingress, NodePort, LoadBalancer, and ClusterIP configurations, using Go templating for Helm charts and Bash commands for kubectl interactions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-app/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment for Testing\nDESCRIPTION: Shell commands for setting up environment variables required for testing the go-bitbucket library\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/devtron-labs/go-bitbucket/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport BITBUCKET_TEST_USERNAME=<your_username>\nexport BITBUCKET_TEST_PASSWORD=<your_password>\nexport BITBUCKET_TEST_OWNER=<your_repo_owner>\nexport BITBUCKET_TEST_REPOSLUG=<your_repo_name>\n```\n\n----------------------------------------\n\nTITLE: Applying Production Configuration Overrides\nDESCRIPTION: This command applies the production override configurations to an existing Devtron installation. The prod-configs directory contains the recommended resource configurations for production-ready deployments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/override-default-devtron-installation-configs.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f prod-configs -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: Defining Operations in EBNF\nDESCRIPTION: EBNF grammar for operations in HCL, including unary and binary operators with their precedence levels for arithmetic, logical, and comparison operations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/hcl2/hcl/hclsyntax/spec.md#2025-04-22_snippet_9\n\nLANGUAGE: ebnf\nCODE:\n```\nOperation = unaryOp | binaryOp;\nunaryOp = (\"-\" | \"!\") ExprTerm;\nbinaryOp = ExprTerm binaryOperator ExprTerm;\nbinaryOperator = compareOperator | arithmeticOperator | logicOperator;\ncompareOperator = \"==\" | \"!=\" | \"<\" | \">\" | \"<=\" | \">=\";\narithmeticOperator = \"+\" | \"-\" | \"*\" | \"/\" | \"%\";\nlogicOperator = \"&&\" | \"||\" | \"!\";\n```\n\n----------------------------------------\n\nTITLE: Defining Variable Expressions in HCL using EBNF\nDESCRIPTION: EBNF grammar for variable expressions in HCL, which are simply identifiers that reference a variable defined in the current scope or an ancestor scope.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/hcl2/hcl/hclsyntax/spec.md#2025-04-22_snippet_3\n\nLANGUAGE: ebnf\nCODE:\n```\nVariableExpr = Identifier;\n```\n\n----------------------------------------\n\nTITLE: Version History Entry v1.24.0\nDESCRIPTION: Changelog entry for version 1.24.0 released on 2023-11-13, describing implementation of a new config parser and dependency updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/config/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.24.0 (2023-11-13)\n\n* **Feature**: Replace the legacy config parser with a modern, less-strict implementation. Parsing failures within a section will now simply ignore the invalid line rather than silently drop the entire section.\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Go Bitbucket\nDESCRIPTION: Commands for running all tests or individual test files for the go-bitbucket library\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/devtron-labs/go-bitbucket/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmake test\n```\n\nLANGUAGE: sh\nCODE:\n```\ngo test -v ./tests/diff_test.go\n```\n\n----------------------------------------\n\nTITLE: Configuring Tolerations in Kubernetes YAML\nDESCRIPTION: Shows how to define tolerations for pods, allowing them to be scheduled on nodes with matching taints.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Secret\nDESCRIPTION: Command to create a Kubernetes secret for Docker registry authentication in the Devtron namespace.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-in-airgapped-environment.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret docker-registry devtron-imagepull \\\n  --namespace devtroncd \\\n  --docker-server=$TARGET_REGISTRY \\\n  --docker-username=$TARGET_REGISTRY_USERNAME \\\n  --docker-password=$TARGET_REGISTRY_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Git Commit Sign-off Format\nDESCRIPTION: The required format for signing off on git commits to certify compliance with the Developer Certificate of Origin. This must be added to every commit message when contributing to the project.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/opencontainers/go-digest/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSigned-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Importing the sortorder Go Package\nDESCRIPTION: Example of how to import the sortorder package in Go. This package provides sorting orders and comparison functions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/fvbommel/sortorder/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/fvbommel/sortorder\"\n```\n\n----------------------------------------\n\nTITLE: Database Migration Configuration\nDESCRIPTION: Controls database migration settings with enable/disable toggle.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Setting Token Description - Go\nDESCRIPTION: Method to set the Description field in the CreateApiTokenRequest object.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/CreateApiTokenRequest.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *CreateApiTokenRequest) SetDescription(v string)\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Table for AppEnvironmentDetail Properties\nDESCRIPTION: Table documenting the properties of the AppEnvironmentDetail model including field names, types, descriptions and additional notes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/md-output/Models/AppEnvironmentDetail.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**environmentName** | **String** | name of the environemnt | [optional] [default to null]\n**environmentId** | **Integer** | id in which app is deployed | [optional] [default to null]\n**namespace** | **String** | namespace corresponding to the environemnt | [optional] [default to null]\n**isPrduction** | **Boolean** | if given environemnt is marked as production or not, nullable | [optional] [default to null]\n**clusterName** | **String** | cluster corresponding to the environemt where application is deployed | [optional] [default to null]\n```\n\n----------------------------------------\n\nTITLE: Running Pre-submission Checks for go-grpc-middleware in Bash\nDESCRIPTION: This command runs all necessary checks before submitting a pull request. It includes vetting the code, formatting, regenerating documentation, and running all tests.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-middleware/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake all\n```\n\n----------------------------------------\n\nTITLE: Initializing New TemplateChartResponse Object - Go\nDESCRIPTION: Constructor function that creates a new TemplateChartResponse object with default values for defined properties and ensures required API properties are set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/TemplateChartResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc NewTemplateChartResponse() *TemplateChartResponse\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL in Kubernetes Environment\nDESCRIPTION: A Helm template that determines how to access the application URL based on the service type configured. Handles different scenarios including Ingress endpoints, NodePort services, LoadBalancer IP addresses, and ClusterIP pod names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Setting up test environment variables with env.Options\nDESCRIPTION: Example showing how to provide environment variables programmatically using the Options.Environment map, bypassing the system environment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/caarlos0/env/v6/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/caarlos0/env/v6\"\n)\n\ntype Config struct {\n\tPassword string `env:\"PASSWORD\"`\n}\n\nfunc main() {\n\tcfg := &Config{}\n\topts := &env.Options{Environment: map[string]string{\n\t\t\"PASSWORD\": \"MY_PASSWORD\",\n\t}}\n\n\t// Load env vars.\n\tif err := env.Parse(cfg, opts); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Print the loaded data.\n\tfmt.Printf(\"%+v\\n\", cfg.envData)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ambassador Mappings\nDESCRIPTION: Defines Ambassador API Gateway mapping configuration for external access to services.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nambassadorMapping:\n  ambassadorId: \"prod-emissary\"\n  cors: {}\n  enabled: true\n  hostname: devtron.example.com\n  labels: {}\n  prefix: /\n  retryPolicy: {}\n  rewrite: \"\"\n  tls:\n    context: \"devtron-tls-context\"\n    create: false\n    hosts: []\n    secretName: \"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Configuration with Type-Specific Options in Go\nDESCRIPTION: Demonstrates a complex pattern for handling overlapping configurations between different types. Uses specialized interfaces to apply common and type-specific options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// config holds options for all animals.\ntype config struct {\n\tWeight      float64\n\tColor       string\n\tMaxAltitude float64\n}\n\n// DogOption apply Dog specific options.\ntype DogOption interface {\n\tapplyDog(config) config\n}\n\n// BirdOption apply Bird specific options.\ntype BirdOption interface {\n\tapplyBird(config) config\n}\n\n// Option apply options for all animals.\ntype Option interface {\n\tBirdOption\n\tDogOption\n}\n\ntype weightOption float64\n\nfunc (o weightOption) applyDog(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc (o weightOption) applyBird(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc WithWeight(w float64) Option { return weightOption(w) }\n\ntype furColorOption string\n\nfunc (o furColorOption) applyDog(c config) config {\n\tc.Color = string(o)\n\treturn c\n}\n\nfunc WithFurColor(c string) DogOption { return furColorOption(c) }\n\ntype maxAltitudeOption float64\n\nfunc (o maxAltitudeOption) applyBird(c config) config {\n\tc.MaxAltitude = float64(o)\n\treturn c\n}\n\nfunc WithMaxAltitude(a float64) BirdOption { return maxAltitudeOption(a) }\n\nfunc NewDog(name string, o ...DogOption) Dog    {…}\nfunc NewBird(name string, o ...BirdOption) Bird {…}\n```\n\n----------------------------------------\n\nTITLE: Final Stable Release for All Modules\nDESCRIPTION: Stable v1.1.0 release for all modules including metrics\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.1.0`\n* `otel/trace`: `v1.1.0`\n* `otel/metric`: `v1.1.0`\n* `otel/baggage`: `v1.1.0`\n* `otel/sdk/trace`: `v1.1.0`\n* `otel/sdk/metric`: `v1.1.0`\n```\n\n----------------------------------------\n\nTITLE: Integrating gofuzz with go-fuzz for Fuzz Testing in Go\nDESCRIPTION: Shows how to use gofuzz in conjunction with go-fuzz to create a fuzz test for a function that takes an integer argument.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/google/gofuzz/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// +build gofuzz\npackage mypackage\n\nimport fuzz \"github.com/google/gofuzz\"\n\nfunc Fuzz(data []byte) int {\n        var i int\n        fuzz.NewFromGoFuzz(data).Fuzz(&i)\n        MyFunc(i)\n        return 0\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Deployment Trigger Configuration in YAML\nDESCRIPTION: Defines the process of creating deployment trigger configurations, including pipeline overrides and merged values. It specifies how various components are combined and stored in the pipeline_config_override table.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/developers-guide/DeploymentTemplate.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npipeline_config_override.pipeline_override_yaml: rendered value of image descriptor template\npipeline_config_override.merged_values_yaml: charts.global_override + chart_env_config_override.env_override_yaml + cm/secrets(converted to json) + pipeline_strategy.config\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Contrib Repository Package Import\nDESCRIPTION: This snippet illustrates how to import a package from the contrib repository, including version information in the import path for modules with version v2 or higher.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport \"go.opentelemetry.io/contrib/instrumentation/host/v2\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Hint for Build Parameter Access Permissions\nDESCRIPTION: This markdown snippet shows a hint block explaining who can perform the action of passing build parameters in Devtron. It specifies the required permissions and links to the user access documentation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/deploying-application/triggering-ci.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"warning\" %}\n### Who Can Perform This Action?\nUsers need to have [Build & deploy permission](../global-configurations/authorization/user-access.md#role-based-access-levels) or above (along with access to the environment and application) to pass build parameters.\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Basic SHA1CD Hash Generation in Go\nDESCRIPTION: Demonstrates the basic usage of sha1cd package as a drop-in replacement for crypto/sha1. This snippet shows how to generate a SHA1 hash of data using the Sum function.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/pjbgf/sha1cd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\nimport \"github.com/pjbgf/sha1cd\"\n\nfunc test(){\n\tdata := []byte(\"data to be sha1 hashed\")\n\th := sha1cd.Sum(data)\n\tfmt.Printf(\"hash: %q\\n\", hex.EncodeToString(h))\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Token Expiration Time - Go\nDESCRIPTION: Method to retrieve the ExpireAtInMs field from the CreateApiTokenRequest object, returning zero value if nil.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/CreateApiTokenRequest.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *CreateApiTokenRequest) GetExpireAtInMs() int64\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.1.1 Changes\nDESCRIPTION: Release introducing dependency management with godeps and vendor dependencies\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.1.1\n\n- Introduce godeps and vendor dependencies introduced in v1.1.1\n```\n\n----------------------------------------\n\nTITLE: Creating a new branch for Zap feature development\nDESCRIPTION: Steps to create a new branch for developing a feature in Zap. This includes updating the local master branch with the latest changes from upstream before creating a new feature branch.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/go.uber.org/zap\ngit checkout master\ngit fetch upstream\ngit rebase upstream/master\ngit checkout -b cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Step Variable Schema in SQL\nDESCRIPTION: Defines the database schema for plugin step variables, including input and output variables with their respective types and formats.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/developers-guide/PluginIntegrationVariableInfo&Flow.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDb table - plugin_step_variable\n \nInput Variables:\n    \n\tName                  string \n\tFormat                PluginStepVariableFormatType \n\tDescription           string                      \n\tIsExposed             bool                       \n\tAllowEmptyValue       bool     \n\tValueType             PluginStepVariableValueType                   \n\tDefaultValue          string                                          \n\tReferenceVariableName string\n\tPreviousStepIndex     int                 \n\nOutput Variables:\n   \n\tName                  string\n\tFormat                PluginStepVariableFormatType \n\tDescription           string                      \n\tIsExposed             bool                       \n\tAllowEmptyValue       bool     \n\t               \nwhere, \n\nPluginStepVariableFormatType = [\"STRING\", \"BOOL\", \"NUMBER\", \"DATE\"]\nPluginStepVariableValueType = [\"NEW\", \"FROM_PREVIOUS_STEP\", \"GLOBAL\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Manifest Value - Go\nDESCRIPTION: Method to set the Manifest field value in the TemplateChartResponse object.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/TemplateChartResponse.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *TemplateChartResponse) SetManifest(v string)\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Linting Commands\nDESCRIPTION: Commands for running static code analysis, linters and unit tests for the go-strcase package using golangci-lint and go test.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/stoewer/go-strcase/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngolangci-lint run --config .golangci.yml ./...\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Running tests and linters for Zap\nDESCRIPTION: Commands to run the test suite and linters for the Zap project. This ensures that all tests pass and the code meets the project's style guidelines.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake test\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Reviewing Commits Since Last Release for Changelog\nDESCRIPTION: Shell command to view all commits since the last release tag, which helps in preparing the changelog for the new release by ensuring all relevant changes are documented.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit --no-pager log --pretty=oneline \"<last tag>..HEAD\"\n```\n\n----------------------------------------\n\nTITLE: Git Clone Alternative for OpenTelemetry Go\nDESCRIPTION: Alternative command to clone the repository directly using git instead of Go's package management.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Running XORM Tests with Microsoft SQL Server\nDESCRIPTION: Command for running XORM tests against a Microsoft SQL Server database with environment variables for connection parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nTEST_MSSQL_HOST= TEST_MSSQL_DBNAME= TEST_MSSQL_USERNAME= TEST_MSSQL_PASSWORD= make test-mssql\n```\n\n----------------------------------------\n\nTITLE: Parsing Trailing Comments in Shared Config Properties in Go\nDESCRIPTION: Fixes recognition of trailing comments in shared config properties. # or ; separators that aren't preceded by whitespace at the end of a property value are now considered part of the value.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/internal/ini/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// No specific code provided, but implies changes to comment parsing logic\n```\n\n----------------------------------------\n\nTITLE: Access Levels Table for Config Management\nDESCRIPTION: Markdown table showing permission matrix for configuration management capabilities.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/user-guide/global-configurations/user-access.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Access Level | Add Global Config  | Edit Global Config | Delete Global Config |\n|--|--|--|--|\n|Super Admin| Yes | Yes |\n```\n\n----------------------------------------\n\nTITLE: Setting up the Project Repository in Go Environment\nDESCRIPTION: Instructions for checking out the upstream repository to your GOPATH. This is the first step in the development workflow.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get -d go.opencensus.io\n```\n\n----------------------------------------\n\nTITLE: Deprecating NewWrappedTracerProvider in OpenTracing Bridge\nDESCRIPTION: The NewWrappedTracerProvider function in the OpenTracing bridge is deprecated. Users should use NewTracerProvider instead.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/bridge/opentracing.NewWrappedTracerProvider\n```\n\n----------------------------------------\n\nTITLE: Creating Not Provisioned Error in Go\nDESCRIPTION: NewNotProvisioned returns an error which wraps err that satisfies IsNotProvisioned(). It takes an error and a message string as parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc NewNotProvisioned(err error, msg string) error\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service\nDESCRIPTION: Service configuration for defining service type and annotations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Different Kubernetes Service Types\nDESCRIPTION: A template script that generates commands to obtain the application URL based on the service type specified in Helm values. Handles Ingress, NodePort, LoadBalancer, and ClusterIP configurations with appropriate kubectl commands for each scenario.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_5-0-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.0.0 Changes\nDESCRIPTION: Major initial release adding logging inspectors, HTTP request handling, and Azure-specific helpers\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.0.0\n\n- Added Logging inspectors to trace http.Request / Response\n- Added support for User-Agent header\n- Changed WithHeader PrepareDecorator to use set vs. add\n- Added JSON to error when unmarshalling fails\n- Added Client#Send method\n- Corrected case of \"Azure\" in package paths\n- Added \"to\" helpers, Azure helpers, and improved ease-of-use\n- Corrected golint issues\n```\n\n----------------------------------------\n\nTITLE: Upgrading Devtron to Beta Version\nDESCRIPTION: Series of Helm commands to upgrade an existing Devtron installation to beta version. Includes cloning the repository, updating dependencies, and performing the upgrade while preserving existing values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-to-beta.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone [https://github.com/devtron-labs/devtron.git](https://github.com/devtron-labs/devtron.git)\ncd devtron/charts/devtron\nhelm dependency up\n#modify values in values.yaml\nhelm upgrade devtron . --reuse-values --namespace devtroncd \\\n-f devtron-bom.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Windows Explorer Process Start in Go\nDESCRIPTION: Function signature for detecting if the current process was started by double-clicking in Windows Explorer. Returns a boolean indicating whether the process was started via Explorer.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/inconshreveable/mousetrap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc StartedByExplorer() (bool)\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests for Contributing to go-jose\nDESCRIPTION: Command to run tests before submitting contributions to ensure all tests pass.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-jose/go-jose/v4/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Expression Syntax in HCL\nDESCRIPTION: EBNF grammar definition for conditional expressions in HCL that select between two expressions based on a boolean predicate.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/hcl2/hcl/hclsyntax/spec.md#2025-04-22_snippet_12\n\nLANGUAGE: ebnf\nCODE:\n```\nConditional = Expression \"?\" Expression \":\" Expression;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Remote for Fork\nDESCRIPTION: Git command to add a personal fork as a remote repository for contribution.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/google.golang.org/appengine/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add fork git@github.com:GITHUB_USERNAME/appengine.git\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Kubernetes Pod\nDESCRIPTION: Configures environment variables for containers running in the Pod. This example shows an empty array which can be populated as needed.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL in Kubernetes Using Helm Template\nDESCRIPTION: A conditional template that generates commands to obtain the application URL based on service type and ingress configuration. Handles different scenarios including Ingress, NodePort, LoadBalancer, and ClusterIP service types.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Modifiers in GJSON Path Syntax\nDESCRIPTION: Examples of using built-in modifiers like @reverse, @pretty, and @this in GJSON paths to perform operations on JSON data.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/SYNTAX.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nchildren.@reverse                   [\"Jack\",\"Alex\",\"Sara\"]\nchildren.@reverse.0                 \"Jack\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"age\":37,\n  \"children\": [\"Sara\",\"Alex\",\"Jack\"],\n  \"fav.movie\": \"Deer Hunter\",\n  \"friends\": [\n    {\"age\": 44, \"first\": \"Dale\", \"last\": \"Murphy\"},\n    {\"age\": 68, \"first\": \"Roger\", \"last\": \"Craig\"},\n    {\"age\": 47, \"first\": \"Jane\", \"last\": \"Murphy\"}\n  ],\n  \"name\": {\"first\": \"Tom\", \"last\": \"Anderson\"}\n}\n```\n\nLANGUAGE: go\nCODE:\n```\ngjson.AddModifier(\"case\", func(json, arg string) string {\n  if arg == \"upper\" {\n    return strings.ToUpper(json)\n  }\n  if arg == \"lower\" {\n    return strings.ToLower(json)\n  }\n  return json\n})\n\"children.@case:upper\"             [\"SARA\",\"ALEX\",\"JACK\"]\n\"children.@case:lower.@reverse\"    [\"jack\",\"alex\",\"sara\"]\n```\n\n----------------------------------------\n\nTITLE: Checking Token Description Status - Go\nDESCRIPTION: Method that returns a boolean indicating if the Description field has been set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/CreateApiTokenRequest.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *CreateApiTokenRequest) HasDescription() bool\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace for Devtron\nDESCRIPTION: Command to create the Kubernetes namespace for Devtron installation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-in-airgapped-environment.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns devtroncd\n```\n\n----------------------------------------\n\nTITLE: Documenting Exec Package in Markdown\nDESCRIPTION: This markdown snippet describes the Exec package, explaining its purpose as an interface for os/exec and mentioning the FakeExec struct for easier mocking and replacement in tests.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/k8s.io/utils/exec/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Exec\n\nThis package provides an interface for `os/exec`. It makes it easier to mock\nand replace in tests, especially with the [FakeExec](testing/fake_exec.go)\nstruct.\n```\n\n----------------------------------------\n\nTITLE: Listing Documentation for Models in Markdown\nDESCRIPTION: This snippet lists the available models for the Devtron Labs API and provides links to their respective documentation files. It uses a Markdown unordered list for presentation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/md-output/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n - [AppEnvironmentDetail](./Models/AppEnvironmentDetail.md)\n - [AppEnvironmentDetail_allOf](./Models/AppEnvironmentDetail_allOf.md)\n - [AppList](./Models/AppList.md)\n - [ClusterEnvironmentDetail](./Models/ClusterEnvironmentDetail.md)\n - [DevtronApp](./Models/DevtronApp.md)\n - [EnvironmentDetail](./Models/EnvironmentDetail.md)\n - [HelmApp](./Models/HelmApp.md)\n - [appListRequest](./Models/appListRequest.md)\n```\n\n----------------------------------------\n\nTITLE: Initializing Logger in Main Function\nDESCRIPTION: Example showing how to initialize the root logger in the main function using a chosen logging implementation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n    func main() {\n        // ... other setup code ...\n\n        // Create the \"root\" logger.  We have chosen the \"logimpl\" implementation,\n        // which takes some initial parameters and returns a logr.Logger.\n        logger := logimpl.New(param1, param2)\n\n        // ... other setup code ...\n```\n\n----------------------------------------\n\nTITLE: Using NewAllowKeysFilter and NewDenyKeysFilter in OpenTelemetry Go Attribute Package\nDESCRIPTION: Functions for creating attribute filters that either allow or deny specific attribute keys, providing convenient filter creation for OpenTelemetry instrumentation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nNewAllowKeysFilter\n```\n\nLANGUAGE: go\nCODE:\n```\nNewDenyKeysFilter\n```\n\n----------------------------------------\n\nTITLE: Get Application URL Based on Service Type\nDESCRIPTION: Helm template that generates appropriate commands to retrieve the application URL based on the service type (NodePort, LoadBalancer, or ClusterIP). Uses kubectl commands to extract service information and construct the URL.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/cronjob-chart_1-5-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: CI Runner Environment Variables Configuration Table\nDESCRIPTION: Detailed configuration table for CI Runner related environment variables, including storage settings, build configurations, workflow parameters, and infrastructure specifications.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/env_gen.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Key   | Type     | Default Value     | Description       | Example       | Deprecated       |\n|-------|----------|-------------------|-------------------|-----------------------|------------------|\n | AZURE_ACCOUNT_KEY | string | |  |  | false |\n | AZURE_ACCOUNT_NAME | string | |  |  | false |\n | AZURE_BLOB_CONTAINER_CI_CACHE | string | |  |  | false |\n```\n\n----------------------------------------\n\nTITLE: Installing Xorm ORM Library for Go\nDESCRIPTION: Command to install the Xorm ORM library using Go's package manager. This will fetch the latest version of Xorm from the specified repository.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get xorm.io/xorm\n```\n\n----------------------------------------\n\nTITLE: Checking Token Expiration Time Status - Go\nDESCRIPTION: Method that returns a boolean indicating if the ExpireAtInMs field has been set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/CreateApiTokenRequest.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *CreateApiTokenRequest) HasExpireAtInMs() bool\n```\n\n----------------------------------------\n\nTITLE: JSON Schema output with Go comments\nDESCRIPTION: This snippet shows the JSON Schema output when incorporating Go comments. The comments are used as descriptions for the schema properties.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/invopop/jsonschema/README.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft/2020-12/schema\",\n  \"$ref\": \"#/$defs/User\",\n  \"$defs\": {\n    \"User\": {\n      \"required\": [\"id\"],\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"description\": \"Unique sequential identifier.\"\n        },\n        \"name\": {\n          \"type\": \"string\",\n          \"description\": \"Name of the user\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\",\n      \"description\": \"User is used as a base to provide tests for comments.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Success Field Accessor Methods in Go\nDESCRIPTION: Methods to get, set, and check the Success field of CreateApiTokenResponse.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/CreateApiTokenResponse.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *CreateApiTokenResponse) GetSuccess() bool\nfunc (o *CreateApiTokenResponse) GetSuccessOk() (*bool, bool)\nfunc (o *CreateApiTokenResponse) SetSuccess(v bool)\nfunc (o *CreateApiTokenResponse) HasSuccess() bool\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Go Get Command with Versioned Module\nDESCRIPTION: This snippet illustrates how to use the go get command to fetch a specific version of a Go module that includes version information in its path. It shows the correct syntax for modules with version v2 or higher.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo get go.opentelemetry.io/otel/v2@v2.0.1\n```\n\n----------------------------------------\n\nTITLE: Get Application URL Based on Service Type\nDESCRIPTION: Helm template configuration that generates appropriate commands to obtain the application URL based on the service type. Handles multiple scenarios including Ingress-enabled setups, NodePort services, LoadBalancer services, and ClusterIP services.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Retry Policy Example\nDESCRIPTION: Example showing how to implement RetryAlways policy for non-idempotent storage requests\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/cloud.google.com/go/storage/CHANGES.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport \"cloud.google.com/go/storage\"\n\n// Re-enable retries for non-idempotent requests\nstorage.RetryAlways\n```\n\n----------------------------------------\n\nTITLE: Defining TemplateChartRequest Struct in Go\nDESCRIPTION: Defines the TemplateChartRequest struct with properties for Helm chart templating. Each property is annotated with JSON tags and includes a description of its purpose.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/TemplateChartRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype TemplateChartRequest struct {\n\tEnvironmentId                *int32  `json:\"EnvironmentId,omitempty\"`\n\tClusterId                    *int32  `json:\"ClusterId,omitempty\"`\n\tNamespace                    *string `json:\"Namespace,omitempty\"`\n\tReleaseName                  *string `json:\"ReleaseName,omitempty\"`\n\tAppStoreApplicationVersionId *int32  `json:\"AppStoreApplicationVersionId,omitempty\"`\n\tValuesYaml                   *string `json:\"ValuesYaml,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Current Devtron Version Using kubectl\nDESCRIPTION: This command retrieves the current version of Devtron by querying the installer-devtron resource in the devtroncd namespace and extracting the LTAG value.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.3.x-0.4.x.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get installers installer-devtron -o jsonpath='{.status.sync.data}' | grep \"^LTAG=\" | cut -d\"=\" -f2-\n```\n\n----------------------------------------\n\nTITLE: Installing go-urn Package\nDESCRIPTION: Command to install the go-urn package using go get\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/leodido/go-urn/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/leodido/go-urn\n```\n\n----------------------------------------\n\nTITLE: Installing Go Glob Library\nDESCRIPTION: Command to install the glob library using go get\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/gobwas/glob/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n    go get github.com/gobwas/glob\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Struct with JSON Tags\nDESCRIPTION: Defines a User struct with a mix of default field names and custom JSON tag naming.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/invopop/jsonschema/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n  GivenName       string\n  PasswordSalted  []byte `json:\"salted_password\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Devtron Installation Status\nDESCRIPTION: Command to check the status of Devtron installation. When installation is in progress, it returns 'Downloaded', and when complete, it returns 'Applied'.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/setup/upgrade-to-devtron.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get installers installer-devtron -o jsonpath='{.status.sync.status}'\n```\n\n----------------------------------------\n\nTITLE: Implementing GetSuccessOk Method for ActionResponse in Go\nDESCRIPTION: Defines a method that returns a tuple with the Success field value and a boolean indicating if the value has been set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/ActionResponse.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc (o *ActionResponse) GetSuccessOk() (*bool, bool) {\n    if o == nil || o.Success == nil {\n        return nil, false\n    }\n    return o.Success, true\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Locking in Logrus Logger (Go)\nDESCRIPTION: Shows how to disable the default mutex locking in Logrus logger when thread safety is not needed. This method should be used when you're sure that concurrent writes are safe without locking.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nlogger.SetNoLock()\n```\n\n----------------------------------------\n\nTITLE: Installing OpenCensus Go Library\nDESCRIPTION: Command to install the OpenCensus Go library using go get.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opencensus.io/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get -u go.opencensus.io\n```\n\n----------------------------------------\n\nTITLE: Using Options for Instantiation in Go\nDESCRIPTION: Shows how to use the options pattern in an instantiation function that creates new instances of a type. The function accepts a variadic slice of options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc NewT(options ...Option) T {…}\n```\n\n----------------------------------------\n\nTITLE: Jaeger Default Endpoint\nDESCRIPTION: Default collector endpoint URL for Jaeger exporter\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_31\n\nLANGUAGE: go\nCODE:\n```\nhttp://localhost:14250\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Different Kubernetes Service Types in Helm Template\nDESCRIPTION: This template generates appropriate commands to retrieve the application URL based on the configured Kubernetes service type (Ingress, NodePort, LoadBalancer, or ClusterIP). It uses conditional logic to provide the correct commands for each service type scenario.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: GoTemplate\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Stopping Devtron Kubernetes Dashboard\nDESCRIPTION: Command to stop the running Devtron Kubernetes dashboard.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-Kubernetes-client.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsh devtron-install.bash stop\n```\n\n----------------------------------------\n\nTITLE: Deprecating NewMetricExporter in OpenCensus Bridge\nDESCRIPTION: The NewMetricExporter function in the OpenCensus bridge package is deprecated. Users should use NewMetricProducer instead.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/bridge/opencensus.NewMetricExporter\n```\n\n----------------------------------------\n\nTITLE: Using Eq Condition in Go with builder\nDESCRIPTION: Examples showing how to construct equality conditions using the Eq type, which can handle simple equality, AND/OR operations, and IN clauses.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/builder/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nimport . \"xorm.io/builder\"\n\nsql, args, _ := ToSQL(Eq{\"a\":1})\n// a=? [1]\nsql, args, _ := ToSQL(Eq{\"b\":\"c\"}.And(Eq{\"c\": 0}))\n// b=? AND c=? [\"c\", 0]\nsql, args, _ := ToSQL(Eq{\"b\":\"c\", \"c\":0})\n// b=? AND c=? [\"c\", 0]\nsql, args, _ := ToSQL(Eq{\"b\":\"c\"}.Or(Eq{\"b\":\"d\"}))\n// b=? OR b=? [\"c\", \"d\"]\nsql, args, _ := ToSQL(Eq{\"b\": []string{\"c\", \"d\"}})\n// b IN (?,?) [\"c\", \"d\"]\nsql, args, _ := ToSQL(Eq{\"b\": 1, \"c\":[]int{2, 3}})\n// b=? AND c IN (?,?) [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Installing NATS Go Client and Server\nDESCRIPTION: Commands to install the NATS Go client and server using go get. It includes instructions for both standard installation and Go modules support.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Go client\ngo get github.com/nats-io/nats.go/\n\n# Server\ngo get github.com/nats-io/nats-server\n\n# Go client latest or explicit version\ngo get github.com/nats-io/nats.go/@latest\ngo get github.com/nats-io/nats.go/@v1.28.0\n\n# For latest NATS Server, add /v2 at the end\ngo get github.com/nats-io/nats-server/v2\n\n# NATS Server v1 is installed otherwise\n# go get github.com/nats-io/nats-server\n```\n\n----------------------------------------\n\nTITLE: Using OrderedMap in Go with JSON Support\nDESCRIPTION: Demonstrates the usage of OrderedMap including initialization, key-value operations, iteration, JSON serialization/deserialization, and sorting. The implementation supports string keys only and maintains insertion order.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/iancoleman/orderedmap/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"encoding/json\"\n    \"github.com/iancoleman/orderedmap\"\n)\n\nfunc main() {\n\n    // use New() instead of o := map[string]interface{}{}\n    o := orderedmap.New()\n\n    // use Set instead of o[\"a\"] = 1\n    o.Set(\"a\", 1)\n\n    // use Get instead of i, ok := o[\"a\"]\n    val, ok := o.Get(\"a\")\n\n    // use Keys instead of for k, v := range o\n    key := o.Keys()\n    for _, k := range keys {\n        v, _ := o.Get(k)\n    }\n\n    // use o.Delete instead of delete(o, key)\n    err := o.Delete(\"a\")\n\n    // serialize to a json string using encoding/json\n    bytes, err := json.Marshal(o)\n    prettyBytes, err := json.MarshalIndent(o)\n\n    // deserialize a json string using encoding/json\n    // all maps (including nested maps) will be parsed as orderedmaps\n    s := `{\"a\": 1}`\n    err := json.Unmarshal([]byte(s), &o)\n    \n    // sort the keys\n    o.SortKeys(sort.Strings)\n    \n    // sort by Pair\n    o.Sort(func(a *Pair, b *Pair) bool {\n        return a.Value().(float64) < b.Value().(float64)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Service Monitor Configuration\nDESCRIPTION: Defines service monitoring settings including metrics path and scrape intervals.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Checking Token Name Status - Go\nDESCRIPTION: Method that returns a boolean indicating if the Name field has been set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/CreateApiTokenRequest.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *CreateApiTokenRequest) HasName() bool\n```\n\n----------------------------------------\n\nTITLE: Creating Unauthorized Error in Go\nDESCRIPTION: NewUnauthorized returns an error which wraps err and satisfies IsUnauthorized(). It takes an error and a message string as parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc NewUnauthorized(err error, msg string) error\n```\n\n----------------------------------------\n\nTITLE: KEDA Autoscaling with Prometheus\nDESCRIPTION: Configures KEDA autoscaling based on Prometheus metrics.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  enabled: true\n  minReplicaCount: 1\n  maxReplicaCount: 2\n  idleReplicaCount: 0\n  pollingInterval: 30\n  advanced:\n    restoreToOriginalReplicaCount: true\n    horizontalPodAutoscalerConfig:\n      behavior:\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n          - type: Percent\n            value: 100\n            periodSeconds: 15\n  triggers: \n    - type: prometheus\n      metadata:\n        serverAddress:  http://<prometheus-host>:9090\n        metricName: http_request_total\n        query: envoy_cluster_upstream_rq{appId=\"300\", cluster_name=\"300-0\", container=\"envoy\",}\n        threshold: \"50\"\n  triggerAuthentication:\n    enabled: false\n    name:\n    spec: {}\n  authenticationRef: {}\n```\n\n----------------------------------------\n\nTITLE: MaxUnavailable Configuration\nDESCRIPTION: Defines the maximum number of pods that can be unavailable during updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: File/Folder Exclusion Rules Examples in Devtron\nDESCRIPTION: Examples of exclusion and inclusion rules for Git repositories in Devtron. These rules determine which file changes trigger CI builds, allowing developers to exclude certain files from triggering new builds or specifically include only certain files.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/git-material.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Sample Values | Description |\n|---|---|\n| `!README.md` | **Exclusion of a single file in root folder:** <br/> Commits containing changes made only in README.md file will not be shown |\n| `!README.md` <br /> `!index.js` | **Exclusion of multiple files in root folder:** <br/> Commits containing changes made only in README.md or/and index.js files will not be shown |\n|  `README.md` | **Inclusion of a single file in root folder:** <br/> Commits containing changes made only in README.md file will be shown. Rest all will be excluded. |\n|  `!src/extensions/printer/code2.py` | **Exclusion of a single file in a folder tree:** <br/> Commits containing changes made specifically to code2.py file will not be shown |\n|  `!src/*` | **Exclusion of a single folder and all its files:** <br/> Commits containing changes made specifically to files within src folder will not be shown |\n|  `!README.md` <br/> `index.js` | **Exclusion and inclusion of files:** <br/> Commits containing changes made only in README.md will not be shown, but commits made in index.js file will be shown. All other commits apart from the aforementioned files will be excluded. |\n|  `!README.md` <br/> `README.md` | **Exclusion and inclusion of conflicting files:** <br/> If conflicting paths are defined in the rule, the one defined later will be considered. In this case, commits containing changes made only in README.md will be shown. |\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 0.7.6\nDESCRIPTION: Release notes for version 0.7.6 describing client enhancements for retry functionality and body handling improvements.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/go-retryablehttp/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.7.6 (May 9, 2024)\n\nENHANCEMENTS:\n\n- client: support a `RetryPrepare` function for modifying the request before retrying (#216)\n- client: support HTTP-date values for `Retry-After` header value (#138)\n- client: avoid reading entire body when the body is a `*bytes.Reader` (#197)\n\nBUG FIXES:\n\n- client: fix a broken check for invalid server certificate in go 1.20+ (#210)\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard copyright and license notice template to be included in project files. Requires replacing [yyyy] with the year and [name of copyright owner] with appropriate copyright holder information.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/sts/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Adding a Fork Remote to the Project Repository\nDESCRIPTION: Commands to navigate to the project directory and add your fork as a remote. This enables pushing changes to your fork.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $(go env GOPATH)/src/go.opencensus.io\ngit remote add fork git@github.com:YOUR_GITHUB_USERNAME/opencensus-go.git\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Prometheus Project\nDESCRIPTION: Command to compile and test changes before committing to ensure all tests pass.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake test         # Make sure all the tests pass before you commit and push :)\n```\n\n----------------------------------------\n\nTITLE: Defining Starlark List and Dict Expressions\nDESCRIPTION: Specifies the structure of list and dictionary expressions in Starlark, including list comprehensions and dictionary comprehensions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.starlark.net/syntax/grammar.txt#2025-04-22_snippet_3\n\nLANGUAGE: Starlark\nCODE:\n```\nListExpr = '[' [Expression [',']] ']' .\nListComp = '[' Test {CompClause} ']'.\n\nDictExpr = '{' [Entries [',']] '}' .\nDictComp = '{' Entry {CompClause} '}' .\nEntries  = Entry {',' Entry} .\nEntry    = Test ':' Test .\n\nCompClause = 'for' LoopVariables 'in' Test | 'if' Test .\n```\n\n----------------------------------------\n\nTITLE: Using OrComposeDecodeHookFunc in Go\nDESCRIPTION: New function to help compose decode hooks, allowing for more flexible decoding processes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/mitchellh/mapstructure/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nOrComposeDecodeHookFunc()\n```\n\n----------------------------------------\n\nTITLE: Setting Pause Before Switch Active in Devtron Deployment Chart\nDESCRIPTION: This YAML configuration defines a waiting period in seconds before switching active the container. This allows for graceful transition during deployments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Listing Devtron Helm Releases\nDESCRIPTION: Command to list all Helm releases in the devtroncd namespace to identify the Devtron release name.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.5.x-0.6.x.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm list --namespace devtroncd\n```\n\n----------------------------------------\n\nTITLE: Adding Tags for OpenTelemetry Go Release\nDESCRIPTION: Shell command for adding version tags to modules being released. This uses the 'add-tags' make target and can specify a particular commit hash if needed.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmake add-tags MODSET=<module set> COMMIT=<commit hash>\n```\n\n----------------------------------------\n\nTITLE: Getter Methods for ApiToken Properties in Go\nDESCRIPTION: Collection of getter methods for accessing ApiToken fields. Each method returns either the field value if set, or a zero value. Methods with 'Ok' suffix return both the value and a boolean indicating if the value was set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/ApiToken.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *ApiToken) GetId() int32\nfunc (o *ApiToken) GetIdOk() (*int32, bool)\nfunc (o *ApiToken) GetUserId() int32\nfunc (o *ApiToken) GetUserIdOk() (*int32, bool)\nfunc (o *ApiToken) GetName() string\nfunc (o *ApiToken) GetNameOk() (*string, bool)\n```\n\n----------------------------------------\n\nTITLE: Using TestingT Interface in OpenTelemetry Go SDK Metric Testing\nDESCRIPTION: The TestingT interface is used instead of a direct *testing.T struct in the metricdatatest package, allowing for more flexible test implementations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nTestingT\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Kubernetes Pod (YAML)\nDESCRIPTION: Specifies environment variables for containers running in the Pod. In this case, an empty array is provided, indicating no environment variables are set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Installing Go Bitbucket Library\nDESCRIPTION: Command to install the go-bitbucket library using go get\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/devtron-labs/go-bitbucket/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/ktrysmt/go-bitbucket\n```\n\n----------------------------------------\n\nTITLE: Git Commit Sign-off Format in Markdown\nDESCRIPTION: The format for signing off on Git commits in the Distribution project, showing the required \"Signed-off-by\" line that must be added to every commit message to certify compliance with the Developer Certificate of Origin.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/distribution/reference/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n    Signed-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.0.1 Changes\nDESCRIPTION: Minor release adding changelog documentation\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.0.1\n\n- Added CHANGELOG.md\n```\n\n----------------------------------------\n\nTITLE: Retrieving ClusterIP Pod Name in Kubernetes\nDESCRIPTION: Command to get the pod name when the service type is ClusterIP. It exports the pod name using label selectors for the application name and release instance.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/cronjob-chart_1-3-0/templates/NOTES.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Compatible Storage\nDESCRIPTION: Helm commands to configure S3 compatible storage with custom endpoint.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--reuse-values \\\n--set configs.BLOB_STORAGE_PROVIDER=S3 \\\n--set configs.DEFAULT_CACHE_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CACHE_BUCKET_REGION=us-east-1 \\\n--set configs.DEFAULT_BUILD_LOGS_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CD_LOGS_BUCKET_REGION=us-east-1 \\\n--set secrets.BLOB_STORAGE_S3_ACCESS_KEY=<access-key> \\\n--set secrets.BLOB_STORAGE_S3_SECRET_KEY=<secret-key> \\\n--set configs.BLOB_STORAGE_S3_ENDPOINT=<endpoint>\n```\n\n----------------------------------------\n\nTITLE: Updating Devtron Helm Repository\nDESCRIPTION: Command to update the Devtron Helm repository to ensure you have the latest chart versions available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update devtron\n```\n\n----------------------------------------\n\nTITLE: Creating Not Implemented Error with Formatting in Go\nDESCRIPTION: NotImplementedf returns an error which satisfies IsNotImplemented(). It takes a format string and optional arguments for formatting.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc NotImplementedf(format string, args ...interface{}) error\n```\n\n----------------------------------------\n\nTITLE: Implementing HasSuccess Method for ActionResponse in Go\nDESCRIPTION: Defines a method that returns a boolean indicating if the Success field has been set in the ActionResponse struct.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/ActionResponse.md#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nfunc (o *ActionResponse) HasSuccess() bool {\n    if o != nil && o.Success != nil {\n        return true\n    }\n\n    return false\n}\n```\n\n----------------------------------------\n\nTITLE: Message Received Metrics Example in Prometheus Format\nDESCRIPTION: Example of Prometheus metrics showing messages received by the server. This counter is incremented for each message received from the client.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_4\n\nLANGUAGE: jsoniq\nCODE:\n```\ngrpc_server_msg_received_total{grpc_method=\"PingList\",grpc_service=\"mwitkow.testproto.TestService\",grpc_type=\"server_stream\"} 1\n```\n\n----------------------------------------\n\nTITLE: Setting Token Name - Go\nDESCRIPTION: Method to set the Name field in the CreateApiTokenRequest object.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/CreateApiTokenRequest.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *CreateApiTokenRequest) SetName(v string)\n```\n\n----------------------------------------\n\nTITLE: Using Typed Slice Attributes\nDESCRIPTION: Example of using the new typed slice attribute functions that replace the Array function\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_27\n\nLANGUAGE: go\nCODE:\n```\nattribute.BoolSlice(\"key\", []bool{true, false})\nattribute.IntSlice(\"key\", []int{1, 2, 3})\nattribute.StringSlice(\"key\", []string{\"a\", \"b\"})\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateApiTokenRequest Struct in Go\nDESCRIPTION: Defines the UpdateApiTokenRequest struct with two properties: Description (string) and ExpireAtInMs (int64). Both fields are optional.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/UpdateApiTokenRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype UpdateApiTokenRequest struct {\n    Description Pointer to string // Description of api-token\n    ExpireAtInMs Pointer to int64 // Expiration time of api-token in milliseconds\n}\n```\n\n----------------------------------------\n\nTITLE: Installing multierr Go Package\nDESCRIPTION: Command to install the latest version of the multierr package using Go modules. This will add the package to your Go project dependencies.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.uber.org/multierr/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u go.uber.org/multierr@latest\n```\n\n----------------------------------------\n\nTITLE: Creating TemplateChartResponse With Defaults - Go\nDESCRIPTION: Constructor that creates a new TemplateChartResponse object only assigning default values to defined properties without guaranteeing required API properties.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/TemplateChartResponse.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc NewTemplateChartResponseWithDefaults() *TemplateChartResponse\n```\n\n----------------------------------------\n\nTITLE: Installing Pretty Package with Go Get\nDESCRIPTION: Command to install the Pretty package using Go's package manager.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/pretty/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ go get -u github.com/tidwall/pretty\n```\n\n----------------------------------------\n\nTITLE: Markdown Security Policy Document\nDESCRIPTION: Provides security vulnerability reporting instructions, directing reporters to submit privately to CNCF's security mailing list rather than creating public issues.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/distribution/reference/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Security Policy\n\n## Reporting a Vulnerability\n\nThe maintainers take security seriously. If you discover a security issue, please bring it to their attention right away!\n\nPlease DO NOT file a public issue, instead send your report privately to cncf-distribution-security@lists.cncf.io.\n```\n\n----------------------------------------\n\nTITLE: Installing Gorilla WebSocket Package in Go\nDESCRIPTION: Command to install the Gorilla WebSocket package using Go's package management system.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/gorilla/websocket/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/gorilla/websocket\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repository\nDESCRIPTION: Command to update the Helm repository to ensure the latest charts are available for the upgrade.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.4.x-0.5.x.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Creating New Err with Cause in Go\nDESCRIPTION: NewErrWithCause is used to return an Err with cause by other error for the purpose of embedding in other structures. The location is not specified and needs to be set with a call to SetLocation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nfunc NewErrWithCause(other error, format string, args ...interface{}) Err\n```\n\n----------------------------------------\n\nTITLE: Starting a PostgreSQL Docker container for testing\nDESCRIPTION: Docker command to start a PostgreSQL container for testing purposes. This exposes port 5432 for connecting to the database.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/lib/pq/TESTS.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --expose 5432:5432 postgres\n```\n\n----------------------------------------\n\nTITLE: Creating NewActionResponse Constructor in Go\nDESCRIPTION: Defines a constructor function that creates a new ActionResponse object with default values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/ActionResponse.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc NewActionResponse() *ActionResponse {\n    return &ActionResponse{}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Producer Interface and RegisterProducer Method in Go OpenTelemetry SDK Metric\nDESCRIPTION: Introduces the Producer interface and Reader.RegisterProducer(Producer) method to enable external metric Producers in the OpenTelemetry SDK metric package.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/sdk/metric.Producer\ngo.opentelemetry.io/otel/sdk/metric.Reader.RegisterProducer(Producer)\n```\n\n----------------------------------------\n\nTITLE: Installing copystructure Go Library via go get\nDESCRIPTION: Command to install the copystructure Go library using the standard Go package manager. This installs the library from the GitHub repository maintained by mitchellh.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/mitchellh/copystructure/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/mitchellh/copystructure\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron without Integrations (No Image Pull Secrets)\nDESCRIPTION: Helm command to install Devtron without any integrations and without image pull secrets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-in-airgapped-environment.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nhelm install devtron . -n devtroncd --set global.containerRegistry=\"$TARGET_REGISTRY\"\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: The standard boilerplate notice text to be included in files to apply the Apache License 2.0. It includes placeholders for copyright year and owner that should be replaced with actual information.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override in Kubernetes Deployment YAML\nDESCRIPTION: Overrides the default release fullname used by Devtron to construct Kubernetes object names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Ingress Backends\nDESCRIPTION: Configuration for additional backend paths in Ingress with specific service targets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n    hosts:\n    - host: chart-example2.local\n      pathType: \"ImplementationSpecific\"\n      paths:\n        - /example2\n        - /example2/healthz\n      additionalBackends: \n        - path: /example1\n          pathType: \"ImplementationSpecific\"\n          backend:\n            service:\n              name: test-service\n              port:\n                number: 80\n```\n\n----------------------------------------\n\nTITLE: Running the Release Script in Shell\nDESCRIPTION: Executes the release.sh script to update versions in go.mod files and push a new branch to GitHub. The TAG environment variable specifies the version to be released.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/redis/go-redis/v9/RELEASING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nTAG=v1.0.0 ./scripts/release.sh\n```\n\n----------------------------------------\n\nTITLE: Getter Methods for UpdateApiTokenResponse in Go\nDESCRIPTION: These methods retrieve the values of the Success and Token fields, handling nil cases and returning additional boolean for presence check.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/UpdateApiTokenResponse.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc (o *UpdateApiTokenResponse) GetSuccess() bool\n\nfunc (o *UpdateApiTokenResponse) GetSuccessOk() (*bool, bool)\n\nfunc (o *UpdateApiTokenResponse) GetToken() string\n\nfunc (o *UpdateApiTokenResponse) GetTokenOk() (*string, bool)\n```\n\n----------------------------------------\n\nTITLE: Adding WithView Option to SDK Metric Package\nDESCRIPTION: The WithView Option is added to configure views a MeterProvider will use for all Readers registered with it.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_20\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/sdk/metric.WithView\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 0.3.0 Release in Markdown\nDESCRIPTION: This snippet documents the release of version 0.3.0, highlighting the addition of context-aware functions as a new feature.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/cloud.google.com/go/compute/metadata/CHANGES.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## [0.3.0](https://github.com/googleapis/google-cloud-go/compare/compute/metadata/v0.2.3...compute/metadata/v0.3.0) (2024-04-15)\n\n\n### Features\n\n* **compute/metadata:** Add context aware functions  ([#9733](https://github.com/googleapis/google-cloud-go/issues/9733)) ([e4eb5b4](https://github.com/googleapis/google-cloud-go/commit/e4eb5b46ee2aec9d2fc18300bfd66015e25a0510))\n```\n\n----------------------------------------\n\nTITLE: Installing Levenshtein Package with Go\nDESCRIPTION: Command to install the Levenshtein package using Go's package manager.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/agext/levenshtein/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/agext/levenshtein\n```\n\n----------------------------------------\n\nTITLE: Getting the OpenTelemetry Go Package\nDESCRIPTION: Command to download the OpenTelemetry Go package using Go's package management.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo get -d go.opentelemetry.io/otel\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL tests with custom host configuration\nDESCRIPTION: Command for running Go tests for a PostgreSQL driver with a custom host configuration. This demonstrates how to set the PGHOST environment variable to connect to a PostgreSQL server running on a non-default location.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/lib/pq/TESTS.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPGHOST=/run/postgresql go test\n```\n\n----------------------------------------\n\nTITLE: Running All Tests Using Make\nDESCRIPTION: This command runs all tests using the 'prow-presubmit-check' make target and redirects output to a file for examination.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/sigs.k8s.io/kustomize/kyaml/openapi/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake prow-presubmit-check >& /tmp/k.txt; echo $?\n```\n\n----------------------------------------\n\nTITLE: Marking a Flag as Hidden with pflag\nDESCRIPTION: This example shows how to mark a flag as hidden, making it function normally but not appear in usage or help text.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nflags.MarkHidden(\"secretFlag\")\n```\n\n----------------------------------------\n\nTITLE: Topology Spread Constraints\nDESCRIPTION: Defines how pods are distributed across cluster topology.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Pattern Matching in Doublestar v4\nDESCRIPTION: This code snippet shows how pattern matching works in Doublestar v4, specifically illustrating that a pattern like 'path/to/a/**' will now match 'path/to/a', which is a change from previous versions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/bmatcuk/doublestar/v4/UPGRADING.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nMatch(\"path/to/a/**\", \"path/to/a\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Kubernetes Deployments\nDESCRIPTION: This code snippet provides conditional logic to retrieve the application URL based on the Kubernetes service type and ingress configuration. It covers scenarios for ingress, NodePort, LoadBalancer, and ClusterIP service types.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-8-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Setter Methods for UpdateApiTokenRequest in Go\nDESCRIPTION: Defines setter methods for the Description and ExpireAtInMs fields of the UpdateApiTokenRequest struct.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/UpdateApiTokenRequest.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc (o *UpdateApiTokenRequest) SetDescription(v string)\n\nfunc (o *UpdateApiTokenRequest) SetExpireAtInMs(v int64)\n```\n\n----------------------------------------\n\nTITLE: API Endpoint for Fetching Global Variables\nDESCRIPTION: GET request endpoint for retrieving a list of all global variables available for use in plugins.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/plugins/create-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /orchestrator/plugin/global/list/global-variable\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate text to be included in files of a project to apply the Apache License 2.0. The template includes placeholders for copyright year and owner information.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/internal/checksum/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.1.0 Changes\nDESCRIPTION: Feature release adding certificate-based authentication capabilities for ServicePrincipalToken\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.1.0\n\n- Added mechanism to retrieve a ServicePrincipalToken using a certificate-signed JWT\n- Added an example of creating a certificate-based ServicePrincipal and retrieving an OAuth token using the certificate\n```\n\n----------------------------------------\n\nTITLE: Validating Resource Limits and Requests in JSON Schema\nDESCRIPTION: This JSON snippet defines validation rules for CPU and memory resource limits and requests in both the main container and envoyproxy. It ensures that limit values are always greater than or equal to request values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-0-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\nresources.limits.cpu >= resources.requests.cpu\nresources.limits.memory >= resources.requests.memory\nenvoyproxy.resources.limits.cpu >= envoyproxy.resources.requests.cpu\nenvoyproxy.resources.limits.memory >= envoyproxy.resources.requests.memory\n```\n\n----------------------------------------\n\nTITLE: Checking Devtron Helm Release Name\nDESCRIPTION: This command lists all Helm releases in the devtroncd namespace to identify the release name of the existing Devtron installation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.3.x-0.4.x.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm list --namespace devtroncd\n```\n\n----------------------------------------\n\nTITLE: Getting Devtron Dashboard URL for LoadBalancer Service\nDESCRIPTION: This command retrieves the LoadBalancer ingress information for the Devtron service in the devtroncd namespace. It's used to obtain the external IP or hostname for accessing the Devtron dashboard.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/charts/devtron/templates/NOTES.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc -n devtroncd devtron-service -o jsonpath='{.status.loadBalancer.ingress}'\n```\n\n----------------------------------------\n\nTITLE: Getting Token Name - Go\nDESCRIPTION: Method to retrieve the Name field from the CreateApiTokenRequest object, returning zero value if nil.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/CreateApiTokenRequest.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *CreateApiTokenRequest) GetName() string\n```\n\n----------------------------------------\n\nTITLE: Minimal Markdown Processing with No Extensions in Go\nDESCRIPTION: Example of processing Markdown with only the basic feature set corresponding to the bare Markdown specification, without any extensions enabled.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\noutput := blackfriday.Run(input, blackfriday.WithNoExtensions())\n```\n\n----------------------------------------\n\nTITLE: Defining Starlark Expressions and Tests\nDESCRIPTION: Specifies the structure of expressions and tests in Starlark, including lambda expressions, if expressions, primary expressions, and binary expressions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.starlark.net/syntax/grammar.txt#2025-04-22_snippet_2\n\nLANGUAGE: Starlark\nCODE:\n```\nTest = LambdaExpr\n     | IfExpr\n     | PrimaryExpr\n     | UnaryExpr\n     | BinaryExpr\n     .\n\nLambdaExpr = 'lambda' [Parameters] ':' Test .\n\nIfExpr = Test 'if' Test 'else' Test .\n\nPrimaryExpr = Operand\n            | PrimaryExpr DotSuffix\n            | PrimaryExpr CallSuffix\n            | PrimaryExpr SliceSuffix\n            .\n\nOperand = identifier\n        | int | float | string\n        | ListExpr | ListComp\n        | DictExpr | DictComp\n        | '(' [Expression [',']] ')'\n        | ('-' | '+') PrimaryExpr\n        .\n\nDotSuffix   = '.' identifier .\nCallSuffix  = '(' [Arguments [',']] ')' .\nSliceSuffix = '[' [Expression] [':' Test [':' Test]] ']' .\n\nArguments = Argument {',' Argument} .\nArgument  = Test | identifier '=' Test | '*' Test | '**' Test .\n```\n\n----------------------------------------\n\nTITLE: Using CEL Expression for Version Filtering in CD Pipeline\nDESCRIPTION: CEL expression that checks if the container image tag is greater than v0.0.7, allowing only newer versions to proceed through the CD pipeline.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/filter-condition.md#2025-04-22_snippet_0\n\nLANGUAGE: cel\nCODE:\n```\ncontainerImageTag > \"v0.0.7\"\n```\n\n----------------------------------------\n\nTITLE: Code Signing Comment Format in Go\nDESCRIPTION: Demonstrates the required format for signing code contributions with GitHub username and comments in the Xorm codebase.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-xorm/xorm/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// !<you github id>! your comments\n\n// !lunny! this is comments made by lunny\n```\n\n----------------------------------------\n\nTITLE: Adding a Git Remote for PR Creation\nDESCRIPTION: Command to add your forked repository as a remote in your local Git repository.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add <YOUR_FORK> git@github.com:<YOUR_GITHUB_USERNAME>/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Installing the errors package in Go\nDESCRIPTION: Command to install the errors package using Go's package management.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/pkg/errors\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Deployment Settings\nDESCRIPTION: Specifies server deployment configuration including the container image and tag to use. These settings control which application version is deployed.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Escape Character Usage in GJSON Paths\nDESCRIPTION: Examples of escaping special purpose characters in GJSON paths, including implementation in Go and Rust code.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/SYNTAX.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfav\\.movie             \"Deer Hunter\"\n```\n\nLANGUAGE: go\nCODE:\n```\n// Go\nval := gjson.Get(json, \"fav\\\\.movie\")  // must escape the slash\nval := gjson.Get(json, `fav\\.movie`)   // no need to escape the slash \n```\n\nLANGUAGE: rust\nCODE:\n```\n// Rust\nlet val = gjson::get(json, \"fav\\\\.movie\")     // must escape the slash\nlet val = gjson::get(json, r#\"fav\\.movie\"#)   // no need to escape the slash \n```\n\n----------------------------------------\n\nTITLE: Running Specific XORM Test Method with SQLite\nDESCRIPTION: Command for running a specific test method in XORM using SQLite database, useful when testing newly implemented features.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake test-sqlite#TestMyNewMethod\n```\n\n----------------------------------------\n\nTITLE: Using RememberWidths flag in Go Tabwriter\nDESCRIPTION: Interface definition showing the new methods added to the tabwriter package for managing column widths across multiple writes. Includes RememberWidths flag, RememberedWidths() and SetRememberedWidths() methods.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/liggitt/tabwriter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nRememberWidths flag\nRememberedWidths() []int\nSetRememberedWidths([]int) *Writer\n```\n\n----------------------------------------\n\nTITLE: Enabling Key Conversion for Basic/Manual Scaling in Go App Engine\nDESCRIPTION: Code snippet showing how to enable datastore key conversion between cloud.google.com/go/datastore and google.golang.org/appengine/datastore in basic or manual scaling environments. This is implemented in the /_ah/start handler.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/google.golang.org/appengine/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nhttp.HandleFunc(\"/_ah/start\", func(w http.ResponseWriter, r *http.Request) {\n    datastore.EnableKeyConversion(appengine.NewContext(r))\n})\n```\n\n----------------------------------------\n\nTITLE: Navigating to Devtron Helm Chart Directory\nDESCRIPTION: Command to change the current directory to the Devtron Helm chart location.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-in-airgapped-environment.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncd charts/devtron\n```\n\n----------------------------------------\n\nTITLE: Fetching Schema Without Generating swagger.go\nDESCRIPTION: These commands fetch the schema without generating the swagger.go file by removing the existing swagger.pb file and recreating it.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/sigs.k8s.io/kustomize/kyaml/openapi/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrm kubernetesapi/swagger.pb\nmake kubernetesapi/swagger.pb\n```\n\n----------------------------------------\n\nTITLE: Accessing Devtron Dashboard on Minikube\nDESCRIPTION: Command to expose Devtron service on Minikube cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/Install-devtron-on-Minikube-Microk8s-K3s-Kind.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nminikube service devtron-service --namespace devtroncd\n```\n\n----------------------------------------\n\nTITLE: Defining Semgrep Configuration Variables in Devtron\nDESCRIPTION: This snippet outlines the input variables required for configuring Semgrep in the Devtron build pipeline. It includes the token, naming conventions, and additional command arguments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/plugins/semgrep.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n | Variable | Format | Description |\n| ---- | ---- | ---- |\n| SemgrepAppToken | String | App token of Semgrep. If it is provided, this token will be used, otherwise it will be picked from Global Secret. |\n| PrefixAppNameInSemgrepBranchName | Bool | Enter either `true` or `false` accordingly whether you want app name to be reflected with a branch name. If it is `true`, it will add app name with branch name. E.g., {SemgrepAppName}-{branchName} |\n| UseCommitAsSemgrepBranchName | Bool | Enter either `true` or `false` accordingly whether you want app name to be reflected with commit hash. If it is `true`, it will add app name with commit hash. E.g., {SemgrepAppName}-{CommitHash}. |\n| SemgrepAppName | String | App name for Semgrep. If it is provided, and `PrefixAppNameInSemgrepBranchName` is true, then this will be prefixed with branch name/commit hash.|\n| ExtraCommandArguments | String | Extra command arguments for Semgrep CI command. E.g., Input: --json --dry-run. |\n```\n\n----------------------------------------\n\nTITLE: Adding NewTracerProvider in Go OpenTelemetry Bridge Opentracing\nDESCRIPTION: Introduces NewTracerProvider function to create WrapperTracer instances from a TracerProvider in the OpenTelemetry bridge opentracing package.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/bridge/opentracing.NewTracerProvider\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results for Govaluate Library in Go\nDESCRIPTION: A set of benchmark results demonstrating the performance of the Govaluate library for various operations including parsing and evaluation. These benchmarks were run on a 3rd-gen Macbook Pro running Linux Mint 17.1.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Knetic/govaluate/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nBenchmarkSingleParse-12                          1000000              1382 ns/op\nBenchmarkSimpleParse-12                           200000             10771 ns/op\nBenchmarkFullParse-12                              30000             49383 ns/op\nBenchmarkEvaluationSingle-12                    50000000                30.1 ns/op\nBenchmarkEvaluationNumericLiteral-12            10000000               119 ns/op\nBenchmarkEvaluationLiteralModifiers-12          10000000               236 ns/op\nBenchmarkEvaluationParameters-12                 5000000               260 ns/op\nBenchmarkEvaluationParametersModifiers-12        3000000               547 ns/op\nBenchmarkComplexExpression-12                    2000000               963 ns/op\nBenchmarkRegexExpression-12                       100000             20357 ns/op\nBenchmarkConstantRegexExpression-12              1000000              1392 ns/op\nok\n```\n\n----------------------------------------\n\nTITLE: Embedding Software Distribution Hub GIF in Markdown\nDESCRIPTION: This snippet demonstrates how to embed a GIF image of the Software Distribution Hub using Markdown syntax. The image is hosted on Amazon S3.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/sdh/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![Figure: Software Distribution Hub](https://devtron-public-asset.s3.us-east-2.amazonaws.com/images/sdh/sdh-eagle-eye.gif)\n```\n\n----------------------------------------\n\nTITLE: Listing Bug Fixes in Markdown\nDESCRIPTION: A markdown list of bug fixes implemented in Devtron v1.4.0. Each item briefly describes the fix and includes its corresponding pull request number.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/CHANGELOG/release-notes-v1.4.0.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Bugs\n- fix: cluster update issue (#6465)\n- fix: in CreateGrafanaDataSource (#6463)\n- fix: onboard acd app (#6457)\n- fix: prom client in chart-sync (#6442)\n- fix: incorrect gitops metrics (#6444)\n- fix: envId check in EventBuilder.go (#6436)\n- fix: createDockerRepoIfNeeded error handling (#6433)\n```\n\n----------------------------------------\n\nTITLE: Building UNION Queries in Go with builder\nDESCRIPTION: Example of constructing UNION SQL statements with various union types (all, distinct) using the builder package.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/builder/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nsql, args, err := Select(\"*\").From(\"a\").Where(Eq{\"status\": \"1\"}).\n\t\tUnion(\"all\", Select(\"*\").From(\"a\").Where(Eq{\"status\": \"2\"})).\n\t\tUnion(\"distinct\", Select(\"*\").From(\"a\").Where(Eq{\"status\": \"3\"})).\n\t\tUnion(\"\", Select(\"*\").From(\"a\").Where(Eq{\"status\": \"4\"})).\n\t\tToSQL()\n```\n\n----------------------------------------\n\nTITLE: Using IgnoreValue Option in OpenTelemetry Go Metric Data Testing\nDESCRIPTION: Using the IgnoreValue option in the metricdatatest package to allow ignoring values when comparing metrics in tests.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nIgnoreValue\n```\n\n----------------------------------------\n\nTITLE: GitHub App Authentication Implementation\nDESCRIPTION: Example of implementing GitHub App authentication using the ghinstallation transport with the go-github client\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/bradleyfalzon/ghinstallation/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/bradleyfalzon/ghinstallation/v2\"\n\nfunc main() {\n    // Shared transport to reuse TCP connections.\n    tr := http.DefaultTransport\n\n    // Wrap the shared transport for use with the app ID 1 authenticating with installation ID 99.\n    itr, err := ghinstallation.NewKeyFromFile(tr, 1, 99, \"2016-10-19.private-key.pem\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Use installation transport with github.com/google/go-github\n    client := github.NewClient(&http.Client{Transport: itr})\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Replace Directive Example for Legacy Import Path\nDESCRIPTION: Example of a replace directive to add to a go.mod file to handle legacy imports from github.com/uber-go/atomic by downgrading to v1.4.0.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.uber.org/atomic/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nreplace github.com/uber-go/atomic => github.com/uber-go/atomic v1.4.0\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice template for applying Apache License 2.0 to software projects. Includes copyright notice and basic license terms that should be included at the top of source files.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/internal/v4a/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Insecure Alternative to MkdirAll Using SecureJoin\nDESCRIPTION: An example of the less secure alternative to MkdirAll using SecureJoin. This code is vulnerable to race conditions and is provided to illustrate what MkdirAll replaces.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/cyphar/filepath-securejoin/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npath, err := securejoin.SecureJoin(root, unsafePath)\nerr = os.MkdirAll(path, mode)\n```\n\n----------------------------------------\n\nTITLE: Setting MaxUnavailable in Kubernetes Deployment Update Strategy\nDESCRIPTION: YAML configuration for MaxUnavailable parameter which specifies the maximum number of pods that can be unavailable during the update process. Can be an absolute number or percentage of replicas.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  MaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Usage Example (Go)\nDESCRIPTION: Example showing how environment variables are handled in OpenTelemetry Go SDK\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nOTEL_METRIC_EXPORT_INTERVAL // sets the time between collections and exports\nOTEL_METRIC_EXPORT_TIMEOUT // sets the timeout an export is attempted\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Empty array for environment variables configuration in StatefulSet.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Installing SJSON Package\nDESCRIPTION: Command to install the SJSON package using go get\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/sjson/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ go get -u github.com/tidwall/sjson\n```\n\n----------------------------------------\n\nTITLE: Running Google App Engine Tests\nDESCRIPTION: Command to run all tests for the Google App Engine package and its subpackages with verbose output.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/google.golang.org/appengine/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo test -v google.golang.org/appengine/...\n```\n\n----------------------------------------\n\nTITLE: Installing Go OAuth2 Package\nDESCRIPTION: Command to install the OAuth2 package using Go modules.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/golang.org/x/oauth2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get golang.org/x/oauth2\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Versions in Markdown Table\nDESCRIPTION: This snippet shows a markdown table that lists the supported versions of Devtron for security updates. It indicates that version 3.7.x is supported, while versions below 3.0.1 are not supported.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/emicklei/go-restful/v3/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| v3.7.x     | :white_check_mark: |\n| < v3.0.1   | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Converting between YAML and JSON in Go\nDESCRIPTION: Shows how to use the yaml.YAMLToJSON and yaml.JSONToYAML functions to convert between YAML and JSON formats. This demonstrates the package's ability to work with both YAML and JSON interchangeably.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/ghodss/yaml/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/ghodss/yaml\"\n)\n\nfunc main() {\n\tj := []byte(`{\"name\": \"John\", \"age\": 30}`)\n\ty, err := yaml.JSONToYAML(j)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(y))\n\t/* Output:\n\tname: John\n\tage: 30\n\t*/\n\tj2, err := yaml.YAMLToJSON(y)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(j2))\n\t/* Output:\n\t{\"age\":30,\"name\":\"John\"}\n\t*/\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Policy in Kubernetes Deployment YAML\nDESCRIPTION: Specifies the image pull policy for containers in the deployment. It determines when Kubernetes should pull the container image.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Checking Devtron Version\nDESCRIPTION: Command to check the currently installed version of Devtron.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/charts/devtron/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get installers installer-devtron -o jsonpath='{.status.sync.data}' | grep \"^LTAG=\" | cut -d\"=\" -f2-\n```\n\n----------------------------------------\n\nTITLE: Token Field Accessor Methods in Go\nDESCRIPTION: Methods to get, set, and check the Token field of CreateApiTokenResponse.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/CreateApiTokenResponse.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *CreateApiTokenResponse) GetToken() string\nfunc (o *CreateApiTokenResponse) GetTokenOk() (*string, bool)\nfunc (o *CreateApiTokenResponse) SetToken(v string)\nfunc (o *CreateApiTokenResponse) HasToken() bool\n```\n\n----------------------------------------\n\nTITLE: Defining Input Variables for Dependency Track in Python (Markdown)\nDESCRIPTION: This table defines the input variables required for configuring Dependency Track for Python in Devtron. It includes variables for project manifest type, file paths, Dependency Track API details, and project information.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/plugins/dependency-track-python.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n | Variable | Format | Description |\n| ---- | ---- | ---- |\n| ProjectManifestType | String | Type of your Python project manifest which is used to build cycloneDx [Software Bill of Materials (SBOM)](https://owasp.org/www-community/Component_Analysis#software-bill-of-materials-sbom). E.g., PIP, Poetry etc. |\n| RelativePathToPoetryLock | String | Path to your poetry.lock file inside your project |\n| RelativePathToPipfile | String | Path to your Pipfile.lock file inside your project |\n| RelativePathToRequirementTxt | String | Path to your requirements.txt file inside your project |\n| DTrackEndpoint | String | API endpoint of your dependency track account |\n| DTrackProjectName | String | Name of your dependency track project |\n| DTrackProjectVersion | String | Version of dependency track project |\n| DTrackApiKey | String | API key of your dependency track account |\n| CheckoutPath | String | Checkout path of Git material |\n```\n\n----------------------------------------\n\nTITLE: Filing Issues Checklist for Go Project\nDESCRIPTION: A numbered list of questions that contributors should answer when filing an issue for the Go project. These questions help provide necessary context for troubleshooting.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/golang.org/x/oauth2/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1.  What version of Go are you using (`go version`)?\n2.  What operating system and processor architecture are you using?\n3.  What did you do?\n4.  What did you expect to see?\n5.  What did you see instead?\n```\n\n----------------------------------------\n\nTITLE: Configuring Grace Period in Kubernetes\nDESCRIPTION: Sets the termination grace period for pods, determining how long Kubernetes waits before terminating pods. Default value is 30 seconds.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_1-1-0/README.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Devtron Dashboard on Kind/K3s\nDESCRIPTION: Command to port forward Devtron service to access the dashboard on Kind or K3s cluster.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/Install-devtron-on-Minikube-Microk8s-K3s-Kind.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd port-forward service/devtron-service 8000:80\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice text to apply the Apache License 2.0 to a software project. Users should replace '[yyyy]' with the year and '[name of copyright owner]' with the appropriate copyright owner information.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/feature/ec2/imds/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Monitoring\nDESCRIPTION: Configuration for Prometheus monitoring integration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Configuring Winter-Soldier Resource Management in YAML\nDESCRIPTION: Basic configuration template for Winter-Soldier which can be used to clean up Kubernetes resources or reduce workload pods. This YAML defines the core parameters including enabled status, API version, action, timezone settings, and selector options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nwinterSoldier:\n  enabled: false\n  apiVersion: pincher.devtron.ai/v1alpha1\n  action: sleep\n  timeRangesWithZone:\n    timeZone: \"Asia/Kolkata\"\n    timeRanges: []\n  targetReplicas: []\n  fieldSelector: []\n```\n\n----------------------------------------\n\nTITLE: New API Function Signatures for OpenInRoot and Related Functions\nDESCRIPTION: Function signatures for the new API's OpenInRoot, OpenatInRoot, and Reopen functions. These functions provide safer alternatives to SecureJoin when opening files by protecting against race attacks.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/cyphar/filepath-securejoin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc OpenInRoot(root, unsafePath string) (*os.File, error)\nfunc OpenatInRoot(root *os.File, unsafePath string) (*os.File, error)\nfunc Reopen(handle *os.File, flags int) (*os.File, error)\n```\n\n----------------------------------------\n\nTITLE: Creating Package Tags with tag.sh in Shell\nDESCRIPTION: After merging the pull request, this command executes the tag.sh script to create tags for packages. The TAG environment variable specifies the version to be tagged.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/redis/go-redis/v9/RELEASING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nTAG=v1.0.0 ./scripts/tag.sh\n```\n\n----------------------------------------\n\nTITLE: Managing Dependencies with Go Modules - Tidying and Vendoring\nDESCRIPTION: Commands to tidy up go.mod and go.sum files and vendor dependencies after adding or updating them, ensuring proper module management.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# The GO111MODULE variable can be omitted when the code isn't located in GOPATH.\nGO111MODULE=on go mod tidy\n\nGO111MODULE=on go mod vendor\n```\n\n----------------------------------------\n\nTITLE: Installing kubernetes-external-secrets with AWS IAM Roles\nDESCRIPTION: Command to install kubernetes-external-secrets with AWS IAM Roles for Service Accounts using Helm. This configuration sets the security context and AWS role ARN annotation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/secrets.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install my-release external-secrets/kubernetes-external-secrets --set securityContext.fsGroup=65534 --set serviceAccount.annotations.\"eks\\.amazonaws\\.com/role-arn\"='arn:aws:iam::111111111111:role/ROLENAME'\n```\n\n----------------------------------------\n\nTITLE: Installing Diskv via Go Get Command\nDESCRIPTION: Command to install diskv using Go's package management system.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/peterbourgon/diskv/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/peterbourgon/diskv\n```\n\n----------------------------------------\n\nTITLE: Pod Security Context\nDESCRIPTION: Defines security context at pod level.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v1.0.0-rc1\nDESCRIPTION: Documents the first logged release of Devtron, indicating significant changes from previous unlogged versions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-logr/logr/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\n## v1.0.0-rc1\n\nThis is the first logged release.  Major changes (including breaking changes)\nhave occurred since earlier tags.\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Switch Delay\nDESCRIPTION: Configuration for adding delay before switching active containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Setting Release Name Variable in Bash\nDESCRIPTION: Command to set the release name as a variable for use in subsequent upgrade commands.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.4.x-0.5.x.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nRELEASE_NAME=devtron\n```\n\n----------------------------------------\n\nTITLE: Getting Devtron Dashboard URL\nDESCRIPTION: Command to retrieve the Devtron dashboard URL from the LoadBalancer service. The hostname in the output is used to access the Devtron dashboard.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd-with-gitops.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc -n devtroncd devtron-service \\\n-o jsonpath='{.status.loadBalancer.ingress}'\n```\n\n----------------------------------------\n\nTITLE: Second Release Candidate Versions\nDESCRIPTION: Second release candidate (RC2) addressing backwards incompatible changes\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.0.0-RC2`\n* `otel/trace`: `v1.0.0-RC2`\n* `otel/baggage`: `v1.0.0-RC2`\n* `otel/sdk/trace`: `v1.0.0-RC2`\n```\n\n----------------------------------------\n\nTITLE: Disabling Flag Sorting in pflag\nDESCRIPTION: This snippet demonstrates how to disable automatic sorting of flags for help and usage messages in pflag.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nflags.BoolP(\"verbose\", \"v\", false, \"verbose output\")\nflags.String(\"coolflag\", \"yeaah\", \"it's really cool flag\")\nflags.Int(\"usefulflag\", 777, \"sometimes it's very useful\")\nflags.SortFlags = false\nflags.PrintDefaults()\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Schemas Using Make\nDESCRIPTION: This command removes both the Kustomization and Kubernetes schemas using the 'nuke' make target.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/sigs.k8s.io/kustomize/kyaml/openapi/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake nuke\n```\n\n----------------------------------------\n\nTITLE: Git Release Tag Commands\nDESCRIPTION: Commands used by OWNERS to create and push a signed release tag for version control.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/sigs.k8s.io/yaml/RELEASE.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -s $VERSION\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push $VERSION\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Formatting\nDESCRIPTION: A sample JSON object used to demonstrate the formatting capabilities of the Pretty package.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/pretty/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"name\":  {\"first\":\"Tom\",\"last\":\"Anderson\"},  \"age\":37,\n\"children\": [\"Sara\",\"Alex\",\"Jack\"],\n\"fav.movie\": \"Deer Hunter\", \"friends\": [\n    {\"first\": \"Janet\", \"last\": \"Murphy\", \"age\": 44}\n  ]}\n```\n\n----------------------------------------\n\nTITLE: Pushing Zap feature branch to fork\nDESCRIPTION: Command to push the newly created feature branch to your fork of the Zap repository on GitHub.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Image Pull Configuration\nDESCRIPTION: Configuration for container image pulling behavior.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Go Module Versioning in go.mod Files\nDESCRIPTION: This snippet illustrates how to include the major version in module paths for Go modules with version v2 or higher. It shows the correct format for module declaration and dependency requirements in go.mod files.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule go.opentelemetry.io/otel/v2\nrequire go.opentelemetry.io/otel/v2 v2.0.1\n```\n\n----------------------------------------\n\nTITLE: Apache License Text\nDESCRIPTION: License text for the Skeema Knownhosts package showing Apache License 2.0 terms.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/skeema/knownhosts/README.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog documenting version releases, dependency updates, bug fixes and feature changes for AWS SDK modules. Includes semantic versioning and dated entries.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/internal/endpoints/v2/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v2.6.32 (2025-02-05)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v2.6.31 (2025-01-31)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format in Markdown\nDESCRIPTION: Standard format for changelog entries showing version numbers, dates, and categorized changes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/internal/accept-encoding/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.12.2 (2025-01-24)\n\n* **Dependency Update**: Upgrade to smithy-go v1.22.2.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SSH Config Trailing Whitespace Behavior\nDESCRIPTION: This example shows how SSH config files with trailing whitespace were previously parsed. Before version 1.2, whitespace after 'example' and 'example.com' would be included in the values, which was unintuitive. The new behavior strips this trailing whitespace.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/kevinburke/ssh_config/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHost example       # A comment\n    HostName example.com      # Another comment\n```\n\n----------------------------------------\n\nTITLE: Version Declaration\nDESCRIPTION: Defines a stable version number (v1.4.0) with a stability flag (-1)\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/manifests/release.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstable -1 v1.4.0\n```\n\n----------------------------------------\n\nTITLE: Signing Code with Comments in XORM\nDESCRIPTION: Convention for signing your code contributions in XORM with your GitHub ID embedded in comments to identify authorship.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// !<you github id>! your comments\n\ne.g.,\n\n// !lunny! this is comments made by lunny\n```\n\n----------------------------------------\n\nTITLE: MIT License Text\nDESCRIPTION: Standard MIT license text defining software usage rights and liability limitations. Includes copyright notices for PostHog (2020) and Segment, Inc (2016).\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/posthog/posthog-go/LICENSE.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) 2020 PostHog (part of Hiberly Inc)\n\nCopyright (c) 2016 Segment, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Tags in SQL\nDESCRIPTION: SQL statement for adding a new tag in the plugin_tag table. Tags are used to categorize and organize plugins in the system.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/developers-guide/PluginCreationStep.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO \"plugin_tag\" (\"id\", \"name\", \"deleted\", \"created_on\", \"created_by\", \"updated_on\", \"updated_by\") VALUES\n(nextval('id_seq_plugin_tag'), 'name_of_tag','f', 'now()', 'user_id', 'now()', 'user_id');\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 0.7.3\nDESCRIPTION: Initial release announcement for version 0.7.3.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/go-retryablehttp/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.7.3 (May 15, 2023)\n\nInitial release\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard boilerplate notice to apply the Apache License 2.0 to your work. This text should be included in the appropriate comment syntax for the file format.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/internal/accept-encoding/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Sample Summary Event JSON Structure\nDESCRIPTION: This code snippet demonstrates the structure of the 'Summary' event sent daily by the Orchestrator component. It includes statistical data about system usage such as pipeline counts, cluster counts, and user counts to help understand product adoption.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/telemetry.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"summary\": {\n    \"cdCountPerDay\": 1,\n    \"ciCountPerDay\": 1,\n    \"clusterCount\": 1,\n    \"environmentCount\": 1,\n    \"nonProdAppCount\": 1,\n    \"userCount\": 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Tokens in Go\nDESCRIPTION: Makes a GET request to fetch all API tokens. Uses the OpenAPI client to call the orchestrator endpoint and returns an array of ApiToken objects.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/DefaultApi.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n    openapiclient \"./openapi\"\n)\n\nfunc main() {\n    configuration := openapiclient.NewConfiguration()\n    apiClient := openapiclient.NewAPIClient(configuration)\n    resp, r, err := apiClient.DefaultApi.OrchestratorApiTokenGet(context.Background()).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `DefaultApi.OrchestratorApiTokenGet``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    // response from `OrchestratorApiTokenGet`: []ApiToken\n    fmt.Fprintf(os.Stdout, \"Response from `DefaultApi.OrchestratorApiTokenGet`: %v\\n\", resp)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override\nDESCRIPTION: YAML configuration for overriding the default release name.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Pipeline Plugins\nDESCRIPTION: Markdown content describing pipeline plugins, their purpose, and how they differ from custom scripts in CI/CD workflows.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/plugins/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Pipeline Plugins\n\nPipeline plugins (a.k.a. preset plugins) are micro tools that allow you to enhance and refine the [CI/CD workflow](../creating-application/workflow/README.md) of your application by adding new features, integrating with external tools, and automating tasks.\n\nUnlike [custom scripts](../creating-application/workflow/ci-build-pre-post-plugins.md#execute-custom-script), preset plugins come bundled with specific variables and conditions that help you make the plugins work seamlessly with your CI/CD pipeline.\n\nSome plugins are meant for pre-build/post-build, while some are meant for pre-deployment/post-deployment.\n\nFrom this section, you can know more about the individual plugins and its purpose.\n```\n\n----------------------------------------\n\nTITLE: Access Levels Table for User Management\nDESCRIPTION: Markdown table showing permission matrix for user management capabilities.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/user-guide/global-configurations/user-access.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Access Level | Add User Access  | Edit User Access | Delete User Access |\n|--|--|--|--|\n|Super Admin| Yes | Yes | Yes |\n```\n\n----------------------------------------\n\nTITLE: Git Version Tagging and Pushing\nDESCRIPTION: Commands for signing a new version tag and pushing it to the repository. Used by OWNERS during the release process to create and publish a new version.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/k8s.io/klog/v2/RELEASE.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit tag -s $VERSION\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit push $VERSION\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron with Seconds Field\nDESCRIPTION: Example showing how to initialize cron with support for seconds field in the cron expression. This maintains compatibility with v1 behavior.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/robfig/cron/v3/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncron.New(cron.WithSeconds())\n```\n\n----------------------------------------\n\nTITLE: EBNF Definition for HCL Templates\nDESCRIPTION: Defines the template sub-language grammar used within template expressions to combine strings and other values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/hcl2/hcl/hclsyntax/spec.md#2025-04-22_snippet_13\n\nLANGUAGE: ebnf\nCODE:\n```\nTemplate = (\n    TemplateLiteral |\n    TemplateInterpolation |\n    TemplateDirective\n)*\nTemplateDirective = TemplateIf | TemplateFor;\n```\n\n----------------------------------------\n\nTITLE: Defining Affinity Rules\nDESCRIPTION: Configuration for node and pod affinity rules to control pod scheduling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nSpec:\n  Affinity:\n    Key:\n    Values:\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin for Docker Contributions\nDESCRIPTION: The full text of the Developer Certificate of Origin (DCO) that contributors must agree to when submitting code to Docker projects. This certificate verifies that contributors have the right to submit their code under the project's open source license.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/opencontainers/go-digest/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Custom Azure Stack Endpoints in Go\nDESCRIPTION: Adds support for custom Azure Stack endpoints in the Azure SDK for Go.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/CHANGELOG.md#2025-04-22_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Policy in Kubernetes\nDESCRIPTION: YAML configuration for setting the image pull policy which determines when the container image should be pulled from the registry. Default is IfNotPresent.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Standard JSON Unmarshal Example\nDESCRIPTION: Example showing the standard Go JSON unmarshaling import and usage that users will be replacing.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"encoding/json\"\njson.Unmarshal(input, &data)\n```\n\n----------------------------------------\n\nTITLE: Cloning Devtron Helm Chart\nDESCRIPTION: Commands to clone the Devtron Helm chart repository and navigate to the correct directory.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-in-airgapped-environment.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/devtron-labs/devtron.git\ncd devtron\n```\n\n----------------------------------------\n\nTITLE: Checking Current Devtron Version with kubectl\nDESCRIPTION: Command to check the current version of Devtron installed in the cluster using kubectl to query the installer-devtron resource in the devtroncd namespace.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.4.x-0.5.x.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get installers installer-devtron -o jsonpath='{.status.sync.data}' | grep \"^LTAG=\" | cut -d\"=\" -f2-\n```\n\n----------------------------------------\n\nTITLE: Pushing Release Tags to Upstream Repository\nDESCRIPTION: Shell commands to push the newly created version tags to the upstream GitHub repository for OpenTelemetry Go, including all submodule tags.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit push upstream <new tag>\ngit push upstream <submodules-path/new tag>\n...\n```\n\n----------------------------------------\n\nTITLE: Downloading Devtron v6 Upgrade Script\nDESCRIPTION: Command to download the Devtron v6 upgrade script from the official GitHub repository.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.5.x-0.6.x.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/devtron-labs/utilities/main/scripts/shell/upgrade-devtron-v6.sh\n```\n\n----------------------------------------\n\nTITLE: First Release Candidate Versions\nDESCRIPTION: First release candidate (RC1) for stable modules, while keeping metric modules at v0.14.0\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.0.0-RC1`\n* `otel/trace`: `v1.0.0-RC1`\n* `otel/baggage`: `v1.0.0-RC1`\n* `otel/sdk/trace`: `v1.0.0-RC1`\n```\n\n----------------------------------------\n\nTITLE: Importing pflag as a Drop-in Replacement for Go's flag Package\nDESCRIPTION: This snippet demonstrates how to import pflag as a direct replacement for Go's native flag package. It allows existing code to continue functioning without changes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport flag \"github.com/spf13/pflag\"\n```\n\n----------------------------------------\n\nTITLE: Setting Podman Environment Variables\nDESCRIPTION: Commands to set environment variables for Podman image cloning, including source and target registry information.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-in-airgapped-environment.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport SOURCE_REGISTRY=\"quay.io/devtron\"\nexport SOURCE_REGISTRY_TOKEN=#Enter token provided by Devtron team\nexport TARGET_REGISTRY=#Enter target registry url \nexport TARGET_REGISTRY_USERNAME=#Enter target registry username \nexport TARGET_REGISTRY_TOKEN=#Enter target registry token/password\n```\n\n----------------------------------------\n\nTITLE: Govaluate Performance Benchmark Results in Go\nDESCRIPTION: Benchmark results showing the performance of various operations in the Govaluate library. Tests include parsing (single, simple, and full) and evaluation benchmarks for different expression types including literals, parameters, modifiers, complex expressions, and regex operations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/govaluate/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nBenchmarkSingleParse-12                          1000000              1382 ns/op\nBenchmarkSimpleParse-12                           200000             10771 ns/op\nBenchmarkFullParse-12                              30000             49383 ns/op\nBenchmarkEvaluationSingle-12                    50000000                30.1 ns/op\nBenchmarkEvaluationNumericLiteral-12            10000000               119 ns/op\nBenchmarkEvaluationLiteralModifiers-12          10000000               236 ns/op\nBenchmarkEvaluationParameters-12                 5000000               260 ns/op\nBenchmarkEvaluationParametersModifiers-12        3000000               547 ns/op\nBenchmarkComplexExpression-12                    2000000               963 ns/op\nBenchmarkRegexExpression-12                       100000             20357 ns/op\nBenchmarkConstantRegexExpression-12              1000000              1392 ns/op\nok\n```\n\n----------------------------------------\n\nTITLE: Displaying Enterprise Tag in Markdown\nDESCRIPTION: This snippet shows how to display an enterprise tag image using Markdown syntax. It uses an external image hosted on Amazon S3.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/sdh/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![](https://devtron-public-asset.s3.us-east-2.amazonaws.com/images/elements/EnterpriseTag.svg)](https://devtron.ai/pricing)\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes\nDESCRIPTION: Structured changelog documenting changes across different categories including bug fixes, enhancements, documentation updates and other changes for Devtron v0.6.25\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/CHANGELOG/release-notes-v0.6.25.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.6.25\n\n## Bugs\n- fix:Not able to change Authentication Type for Prometheus. (#4284)\n- fix:cve search  (#4347)\n- fix: added missing clusterConfig in releaseIdentifier request (#4359)\n[...additional bug fixes...]\n\n## Enhancements\n- feat: Enable Notification for Protect Configuration Approval request (#4358)\n- feat: Role based access control in JOBS (#4198)\n- feat: Bulk Hibernate (#4229)\n[...additional enhancements...]\n\n## Documentation\n- doc: Added Application Groups Doc (#4275)\n- doc: Update gitops.md for Azure DevOps Integration (#4328)\n- docs: img size fix (#4301)\n[...additional documentation updates...]\n\n## Others\n- chore: Integrate Terraform CLI, Ansible, and SonarQube Plugins (#4363)\n- chore: updated schema for resources (#4266)\n- chore: change-ci and app-group fixes (#4332)\n[...additional changes...]\n```\n\n----------------------------------------\n\nTITLE: Upgrading Devtron Kubernetes Client\nDESCRIPTION: Command to upgrade the Devtron Kubernetes Client to the latest version. Stops the current dashboard, downloads the latest executable, and reopens in browser.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-Kubernetes-client.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsh devtron-install.bash upgrade\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Formatting for go-gitlab\nDESCRIPTION: Command to run tests and apply gofumpt formatting to ensure code quality before submitting a pull request.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xanzy/go-gitlab/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmake test && make fmt\n```\n\n----------------------------------------\n\nTITLE: Configuring Arguments in Kubernetes YAML\nDESCRIPTION: Specifies arguments to be passed to the container command. Includes an enable flag and an array for argument values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-10-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: The standard boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for copyright year and owner information, along with the standard license text and link to the full license.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/credentials/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Adding Raw YAML in Kubernetes Deployment\nDESCRIPTION: Allows inclusion of raw Kubernetes YAML configurations in a deployment, such as defining additional services or resources.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Configuring MaxUnavailable\nDESCRIPTION: Setting maximum number of pods that can be unavailable during updates.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Versions in Markdown Table\nDESCRIPTION: This snippet shows a markdown table indicating which versions of Devtron are supported for security updates. Version 0.3.x is supported, while versions below 0.3 are not.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/imdario/mergo/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 0.3.x   | :white_check_mark: |\n| < 0.3   | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Get and Set Version Methods in Go\nDESCRIPTION: Methods to get, check existence of, and set the Version field specifying the rollback version target.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/RollbackReleaseRequest.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *RollbackReleaseRequest) GetVersion() int32\nfunc (o *RollbackReleaseRequest) GetVersionOk() (*int32, bool)\nfunc (o *RollbackReleaseRequest) SetVersion(v int32)\nfunc (o *RollbackReleaseRequest) HasVersion() bool\n```\n\n----------------------------------------\n\nTITLE: Defining RollbackReleaseResponse Struct in Go\nDESCRIPTION: Defines the RollbackReleaseResponse struct with a single property 'Success' of type bool, which indicates the success or failure of the operation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/RollbackReleaseResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype RollbackReleaseResponse struct {\n\tSuccess *bool `json:\"success,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Get and Set InstalledAppVersionId Methods in Go\nDESCRIPTION: Methods to get, check existence of, and set the InstalledAppVersionId field for installed chart store application versions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/RollbackReleaseRequest.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *RollbackReleaseRequest) GetInstalledAppVersionId() int32\nfunc (o *RollbackReleaseRequest) GetInstalledAppVersionIdOk() (*int32, bool)\nfunc (o *RollbackReleaseRequest) SetInstalledAppVersionId(v int32)\nfunc (o *RollbackReleaseRequest) HasInstalledAppVersionId() bool\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override\nDESCRIPTION: Configures custom name for Kubernetes objects instead of default naming pattern.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Set Operations in Go\nDESCRIPTION: This snippet showcases various set operations using the golang-set library, including creating sets, performing unions, checking for containment, finding differences and intersections, and checking supersets.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/deckarep/golang-set/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nrequiredClasses := mapset.NewSet()\nrequiredClasses.Add(\"Cooking\")\nrequiredClasses.Add(\"English\")\nrequiredClasses.Add(\"Math\")\nrequiredClasses.Add(\"Biology\")\n\nscienceSlice := []interface{}{\"Biology\", \"Chemistry\"}\nscienceClasses := mapset.NewSetFromSlice(scienceSlice)\n\nelectiveClasses := mapset.NewSet()\nelectiveClasses.Add(\"Welding\")\nelectiveClasses.Add(\"Music\")\nelectiveClasses.Add(\"Automotive\")\n\nbonusClasses := mapset.NewSet()\nbonusClasses.Add(\"Go Programming\")\nbonusClasses.Add(\"Python Programming\")\n\n//Show me all the available classes I can take\nallClasses := requiredClasses.Union(scienceClasses).Union(electiveClasses).Union(bonusClasses)\nfmt.Println(allClasses) //Set{Cooking, English, Math, Chemistry, Welding, Biology, Music, Automotive, Go Programming, Python Programming}\n\n\n//Is cooking considered a science class?\nfmt.Println(scienceClasses.Contains(\"Cooking\")) //false\n\n//Show me all classes that are not science classes, since I hate science.\nfmt.Println(allClasses.Difference(scienceClasses)) //Set{Music, Automotive, Go Programming, Python Programming, Cooking, English, Math, Welding}\n\n//Which science classes are also required classes?\nfmt.Println(scienceClasses.Intersect(requiredClasses)) //Set{Biology}\n\n//How many bonus classes do you offer?\nfmt.Println(bonusClasses.Cardinality()) //2\n\n//Do you have the following classes? Welding, Automotive and English?\nfmt.Println(allClasses.IsSuperset(mapset.NewSetFromSlice([]interface{}{\"Welding\", \"Automotive\", \"English\"}))) //true\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Chronological changelog entries detailing version updates, bug fixes, and feature additions for the AWS IAM Identity Center SDK module, including significant changes like service renaming and error handling improvements.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/sso/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.12.5 (2023-03-10)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.12.4 (2023-02-22)\n\n* **Bug Fix**: Prevent nil pointer dereference when retrieving error codes.\n\n# v1.12.3 (2023-02-20)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.12.2 (2023-02-15)\n\n* **Announcement**: When receiving an error response in restJson-based services, an incorrect error type may have been returned based on the content of the response. This has been fixed via PR #2012 tracked in issue #1910.\n* **Bug Fix**: Correct error type parsing for restJson services.\n```\n\n----------------------------------------\n\nTITLE: Regenerating Protobuf Go Code for Error Schema\nDESCRIPTION: Commands to regenerate the protobuf Go code from error.proto file. Requires a local copy of googleapis, protoc compiler, Go protobuf plugin, and goimports tool.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/googleapis/gax-go/v2/apierror/internal/proto/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nprotoc -I $GOOGLEAPIS -I. --go_out=. --go_opt=module=github.com/googleapis/gax-go/v2/apierror/internal/proto error.proto\ngoimports -w .\n```\n\n----------------------------------------\n\nTITLE: Seeking to a Specific Path in JSON using Go\nDESCRIPTION: Demonstrates how to use the SeekTo method to navigate to a specific path in a JSON structure and decode a value. In this example, it seeks to the 'G' field of the second object's 'Point' and decodes its value.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/exponent-io/jsonpath/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/exponent-io/jsonpath\"\n\nvar j = []byte(`[\n  {\"Space\": \"YCbCr\", \"Point\": {\"Y\": 255, \"Cb\": 0, \"Cr\": -10}},\n  {\"Space\": \"RGB\",   \"Point\": {\"R\": 98, \"G\": 218, \"B\": 255}}\n]`)\n\nw := json.NewDecoder(bytes.NewReader(j))\nvar v interface{}\n\nw.SeekTo(1, \"Point\", \"G\")\nw.Decode(&v) // v is 218\n```\n\n----------------------------------------\n\nTITLE: Applying Migrator Configuration for Devtron\nDESCRIPTION: Command to download the migrator.yaml file from the Devtron GitHub repository, which is needed to re-create failed jobs during installation troubleshooting.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/Troubleshooting.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/devtron-labs/devtron/main/manifests/yamls/migrator.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing Getter Methods for UpdateApiTokenRequest in Go\nDESCRIPTION: Defines getter methods for the Description and ExpireAtInMs fields, including methods to check if the fields have been set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/UpdateApiTokenRequest.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc (o *UpdateApiTokenRequest) GetDescription() string\n\nfunc (o *UpdateApiTokenRequest) GetDescriptionOk() (*string, bool)\n\nfunc (o *UpdateApiTokenRequest) HasDescription() bool\n\nfunc (o *UpdateApiTokenRequest) GetExpireAtInMs() int64\n\nfunc (o *UpdateApiTokenRequest) GetExpireAtInMsOk() (*int64, bool)\n\nfunc (o *UpdateApiTokenRequest) HasExpireAtInMs() bool\n```\n\n----------------------------------------\n\nTITLE: Markdown Installation Status Table\nDESCRIPTION: Table showing various installation statuses and their descriptions for Devtron integrations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/stack-manager.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Installation status | Description |\n| --- | --- |\n| Install | The integration is not yet installed. |\n| Initializing | The installation is being initialized. |\n| Installing | The installation is in progress. The logs are available to track the progress. |\n| Failed | Installation failed and the logs are available to troubleshoot. You could retry the installation or [contact support](https://discord.devtron.ai/). |\n| Installed | The integration is successfully installed and available on the **Installed page**. |\n| Request timed out | The request to install has hit the maximum number of retries. You may retry the installation or [contact support](https://discord.devtron.ai/) for further assistance. |\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 0.2.3 Release in Markdown\nDESCRIPTION: This snippet documents the release of version 0.2.3, noting a bug fix related to DNS lookup.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/cloud.google.com/go/compute/metadata/CHANGES.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## [0.2.3](https://github.com/googleapis/google-cloud-go/compare/compute/metadata/v0.2.2...compute/metadata/v0.2.3) (2022-12-15)\n\n\n### Bug Fixes\n\n* **compute/metadata:** Switch DNS lookup to an absolute lookup ([119b410](https://github.com/googleapis/google-cloud-go/commit/119b41060c7895e45e48aee5621ad35607c4d021)), refs [#7165](https://github.com/googleapis/google-cloud-go/issues/7165)\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Secrets in Devtron Deployment Chart\nDESCRIPTION: This YAML configuration contains the Docker registry credentials used for accessing private container registries. The secrets must be created separately via the dt-secrets helm chart or kubectl.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - regcred\n```\n\n----------------------------------------\n\nTITLE: Version Support Matrix in Markdown\nDESCRIPTION: Markdown table showing which versions of Devtron are currently supported from a security perspective. Version 0.3.x is supported while versions below 0.3 are not supported.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/dario.cat/mergo/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 0.3.x   | :white_check_mark: |\n| < 0.3   | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Tolerations\nDESCRIPTION: Configuration for pod tolerations to control pod scheduling on tainted nodes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Installing Devtron with S3 Compatible Storage\nDESCRIPTION: Helm command to install Devtron with S3 compatible storage for storing build logs and cache by specifying the endpoint along with access credentials.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd-with-gitops.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add devtron https://helm.devtron.ai\n\nhelm repo update devtron\n\nhelm install devtron devtron/devtron-operator \\\n--create-namespace --namespace devtroncd \\\n--set installer.modules={cicd} \\\n--set configs.BLOB_STORAGE_PROVIDER=S3 \\\n--set configs.DEFAULT_CACHE_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CACHE_BUCKET_REGION=us-east-1 \\\n--set configs.DEFAULT_BUILD_LOGS_BUCKET=demo-s3-bucket \\\n--set configs.DEFAULT_CD_LOGS_BUCKET_REGION=us-east-1 \\\n--set secrets.BLOB_STORAGE_S3_ACCESS_KEY=<access-key> \\\n--set secrets.BLOB_STORAGE_S3_SECRET_KEY=<secret-key> \\\n--set configs.BLOB_STORAGE_S3_ENDPOINT=<endpoint> \\\n--set argo-cd.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Referencing NATS Governance in Markdown\nDESCRIPTION: This Markdown snippet provides a link to the NATS Governance document, explaining that NATS NUID is subject to the same governance structure as the main NATS project.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/nats-io/nuid/GOVERNANCE.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# NATS NUID Governance\n\nNATS NUID is part of the NATS project and is subject to the [NATS Governance](https://github.com/nats-io/nats-general/blob/master/GOVERNANCE.md).\n```\n\n----------------------------------------\n\nTITLE: Documenting Initial Release 0.1.0 in Markdown\nDESCRIPTION: This snippet documents the initial release of the metadata module as its own package.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/cloud.google.com/go/compute/metadata/CHANGES.md#2025-04-22_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## [0.1.0] (2022-10-26)\n\nInitial release of metadata being it's own module.\n```\n\n----------------------------------------\n\nTITLE: Mixed Stable and Development Versions\nDESCRIPTION: Release showing version updates for both stable (v1.0.1) and development (v0.15.0) modules\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.0.1`\n* `otel/trace`: `v1.0.1`\n* `otel/metric`: `v0.15.0`\n* `otel/baggage`: `v1.0.1`\n* `otel/sdk/trace`: `v1.0.1`\n* `otel/sdk/metric`: `v0.15.0`\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe in Kubernetes YAML\nDESCRIPTION: Defines a liveness probe configuration for Kubernetes pods. It specifies how Kubernetes should check if a container is still running and when to restart it if the check fails.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Ingress\nDESCRIPTION: Configuration for Kubernetes Ingress resource with support for multiple hosts and paths.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-19-0/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: false\n  className: nginx\n  annotations: {}\n  hosts:\n      - host: example1.com\n        paths:\n            - /example\n      - host: example2.com\n        paths:\n            - /example2\n            - /example2/healthz\n  tls: []\n```\n\n----------------------------------------\n\nTITLE: Installation Status Table in Markdown\nDESCRIPTION: Markdown table defining various installation statuses and their descriptions for the Notifications integration, including states like Install, Initializing, Installing, Failed, Installed, and Request timed out.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/integrations/notifications.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Installation status | Description |\n| --- | --- |\n| Install | The integration is not yet installed. |\n| Initializing | The installation is being initialized. |\n| Installing | The installation is in progress. The logs are available to track the progress. |\n| Failed | Installation failed and the logs are available to troubleshoot. You can retry the installation or [contact support](https://discord.devtron.ai/). |\n| Installed | The integration is successfully installed and available on the **Installed** page. |\n| Request timed out | The request to install has hit the maximum number of retries. You may retry the installation or [contact support](https://discord.devtron.ai/) for further assistance. |\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Checking Coverage in Go\nDESCRIPTION: This command demonstrates how to run tests and check code coverage for the skeema/knownhosts package using Go's testing framework.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/skeema/knownhosts/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -cover\n```\n\n----------------------------------------\n\nTITLE: Insecure Alternative to OpenInRoot Using SecureJoin\nDESCRIPTION: An example of the less secure alternative to OpenInRoot using SecureJoin. This code is vulnerable to race conditions and is provided to illustrate what OpenInRoot replaces.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/cyphar/filepath-securejoin/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npath, err := securejoin.SecureJoin(root, unsafePath)\nfile, err := os.OpenFile(path, unix.O_PATH|unix.O_CLOEXEC)\n```\n\n----------------------------------------\n\nTITLE: Defining EnvironmentDetail Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the EnvironmentDetail model using a Markdown table. It includes the property names, types, descriptions, and optional notes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/md-output/Models/EnvironmentDetail.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **environmentName** | **String** | name of the environemnt | [optional] [default to null] |\n| **environmentId** | **Integer** | id in which app is deployed | [optional] [default to null] |\n| **namespace** | **String** | namespace corresponding to the environemnt | [optional] [default to null] |\n| **isPrduction** | **Boolean** | if given environemnt is marked as production or not, nullable | [optional] [default to null] |\n```\n\n----------------------------------------\n\nTITLE: Applying Image Promotion Policy with Devtron CLI\nDESCRIPTION: Command to apply an image promotion policy using the Devtron CLI. It references a YAML file containing the policy configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/image-promotion-policy.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevtctl apply policy -p=\"path/to/applyPolicy.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 0.2.2 Release in Markdown\nDESCRIPTION: This snippet documents the release of version 0.2.2, addressing a bug fix related to setting IdleConnTimeout for http.Client.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/cloud.google.com/go/compute/metadata/CHANGES.md#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## [0.2.2](https://github.com/googleapis/google-cloud-go/compare/compute/metadata/v0.2.1...compute/metadata/v0.2.2) (2022-12-01)\n\n\n### Bug Fixes\n\n* **compute/metadata:** Set IdleConnTimeout for http.Client ([#7084](https://github.com/googleapis/google-cloud-go/issues/7084)) ([766516a](https://github.com/googleapis/google-cloud-go/commit/766516aaf3816bfb3159efeea65aa3d1d205a3e2)), refs [#5430](https://github.com/googleapis/google-cloud-go/issues/5430)\n```\n\n----------------------------------------\n\nTITLE: SHA1CD Collision Detection in Go\nDESCRIPTION: Shows how to use the CollisionResistantSum function to detect SHA1 collisions while generating the hash. The function returns both the hash and a boolean indicating if a collision was detected.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/pjbgf/sha1cd/README.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\nimport \"github.com/pjbgf/sha1cd\"\n\nfunc test(){\n\tdata := []byte(\"data to be sha1 hashed\")\n\th, col  := sha1cd.CollisionResistantSum(data)\n\tif col {\n\t\tfmt.Println(\"collision found!\")\n\t}\n\tfmt.Printf(\"hash: %q\", hex.EncodeToString(h))\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated SDK Metric View Package\nDESCRIPTION: The deprecated go.opentelemetry.io/otel/sdk/metric/view package is removed.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/sdk/metric/view\n```\n\n----------------------------------------\n\nTITLE: UserIdentifier Field Accessor Methods in Go\nDESCRIPTION: Methods to get, set, and check the UserIdentifier field of CreateApiTokenResponse.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/CreateApiTokenResponse.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *CreateApiTokenResponse) GetUserIdentifier() string\nfunc (o *CreateApiTokenResponse) GetUserIdentifierOk() (*string, bool)\nfunc (o *CreateApiTokenResponse) SetUserIdentifier(v string)\nfunc (o *CreateApiTokenResponse) HasUserIdentifier() bool\n```\n\n----------------------------------------\n\nTITLE: Accessing Admin Credentials\nDESCRIPTION: Commands to retrieve Devtron admin password for different versions\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-helm-3.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get secret devtron-secret -o jsonpath='{.data.ADMIN_PASSWORD}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Inserting Plugin Metadata in SQL\nDESCRIPTION: SQL statement for inserting the basic metadata for a new plugin into the plugin_metadata table. This establishes the plugin's name, description, type, and icon.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/developers-guide/PluginCreationStep.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO\n\"plugin_metadata\" (\"id\", \"name\", \"description\",\"type\",\"icon\",\"deleted\", \"created_on\", \"created_by\", \"updated_on\", \"updated_by\")\nVALUES \n(nextval('id_seq_plugin_metadata'), 'name_of_plugin','description_of_plugin','SHARED','link_to_icon','f', 'now()', 'user_id', 'now()', 'user_id');\n```\n\n----------------------------------------\n\nTITLE: Making All Fields Required Unless They Have Defaults\nDESCRIPTION: Example showing how to make all fields without default values required by setting the RequiredIfNoDef option to true.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/caarlos0/env/v6/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/caarlos0/env/v6\"\n)\n\ntype Config struct {\n\tUsername string `env:\"USERNAME\" envDefault:\"admin\"`\n\tPassword string `env:\"PASSWORD\"`\n}\n\nfunc main() {\n\tcfg := &Config{}\n\topts := &env.Options{RequiredIfNoDef: true}\n\n\t// Load env vars.\n\tif err := env.Parse(cfg, opts); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Print the loaded data.\n\tfmt.Printf(\"%+v\\n\", cfg.envData)\n}\n```\n\n----------------------------------------\n\nTITLE: Scanning Results into a Map in Core for Go\nDESCRIPTION: Shows how to use ScanMap to scan query results directly into a map structure instead of individual variables.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/core/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nrows, _ := db.Query()\nfor rows.Next() {\n    rows.ScanMap()\n```\n\n----------------------------------------\n\nTITLE: Specifying Codespell Package Version\nDESCRIPTION: This line specifies the exact version of the Codespell package to be used in the project. Codespell is a tool that checks for common misspellings in code and documentation.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncodespell==2.2.6\n```\n\n----------------------------------------\n\nTITLE: Running XORM Tests with PostgreSQL\nDESCRIPTION: Command for running XORM tests against a PostgreSQL database with environment variables for connection parameters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/xorm/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nTEST_PGSQL_HOST= TEST_PGSQL_SCHEMA= TEST_PGSQL_DBNAME= TEST_PGSQL_USERNAME= TEST_PGSQL_PASSWORD= make test-postgres\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ternary Operators in govaluate\nDESCRIPTION: Shows the usage of ternary operators for conditional value selection. The '?' operator returns the right side if the left side is true, while ':' returns the right side if the left side is nil.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/govaluate/MANUAL.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntrue ? value : alternativeValue\n```\n\n----------------------------------------\n\nTITLE: Mapping between Structs and Maps with Mergo in Go\nDESCRIPTION: Example of using Mergo to map between structs and map[string]interface{} types.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/dario.cat/mergo/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif err := mergo.Map(&dst, srcMap); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Error Creation with Formatting in Go\nDESCRIPTION: Shows how to create a new error with custom formatting using Errorf. Acts as a replacement for fmt.Errorf with added location tracking.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nreturn errors.Errorf(\"validation failed: %s\", message)\n```\n\n----------------------------------------\n\nTITLE: Pod Security Context\nDESCRIPTION: Configures pod-level security context including user and group settings.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Getting Devtron Dashboard URL\nDESCRIPTION: Command to retrieve the Loadbalancer URL for accessing the Devtron dashboard by querying the Kubernetes service.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nkubectl get svc -n devtroncd devtron-service -o jsonpath='{.status.loadBalancer.ingress}'\n```\n\n----------------------------------------\n\nTITLE: Setting Application Name Override in Kubernetes\nDESCRIPTION: Configuration to override the default fullname used by Devtron for Kubernetes object names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-20-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Empty array configuration for container environment variables\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-15-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Setting MinReadySeconds\nDESCRIPTION: Configuring minimum time a pod should be ready before being considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Initializing CreateApiTokenResponse Constructor in Go\nDESCRIPTION: Constructor functions that create new instances of CreateApiTokenResponse with default or specified values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/CreateApiTokenResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc NewCreateApiTokenResponse() *CreateApiTokenResponse\nfunc NewCreateApiTokenResponseWithDefaults() *CreateApiTokenResponse\n```\n\n----------------------------------------\n\nTITLE: Setting Array Value\nDESCRIPTION: Example demonstrating how to set a value in a JSON array\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/sjson/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nvalue, _ := sjson.Set(`{\"friends\":[\"Andy\",\"Carol\"]}`, \"friends.2\", \"Sara\")\nprintln(value)\n```\n\n----------------------------------------\n\nTITLE: Server Deployment Configuration\nDESCRIPTION: Specifies server deployment settings including image details.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  deployment:\n    image_tag: 1-95a53\n    image: \"\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Devtron with Azure Blob Storage Configuration\nDESCRIPTION: Command to upgrade Hyperion to Devtron full mode using Azure Blob Storage for storing build logs and cache, specifying account details and container names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/setup/upgrade-to-devtron.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade devtron devtron/devtron-operator --create-namespace --namespace devtroncd \\\n--set installer.mode=full \\\n--set secrets.AZURE_ACCOUNT_KEY=xxxxxxxxxx \\\n--set configs.BLOB_STORAGE_PROVIDER=AZURE \\\n--set configs.AZURE_ACCOUNT_NAME=test-account \\\n--set configs.AZURE_BLOB_CONTAINER_CI_LOG=ci-log-container \\\n--set configs.AZURE_BLOB_CONTAINER_CI_CACHE=ci-cache-container\n```\n\n----------------------------------------\n\nTITLE: Custom Error Type Implementation in Go\nDESCRIPTION: Shows how to implement custom error types that work with errwrap by implementing the Wrapper interface, allowing for type-specific error handling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype AppError {\n  Code ErrorCode\n  Err  error\n}\n\nfunc (e *AppError) WrappedErrors() []error {\n  return []error{e.Err}\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nerr := &AppError{Err: fmt.Errorf(\"an error\")}\nif errwrap.ContainsType(err, fmt.Errorf(\"\")) {\n\t// This will work!\n}\n```\n\n----------------------------------------\n\nTITLE: UserId Field Accessor Methods in Go\nDESCRIPTION: Methods to get, set, and check the UserId field of CreateApiTokenResponse.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/CreateApiTokenResponse.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *CreateApiTokenResponse) GetUserId() int32\nfunc (o *CreateApiTokenResponse) GetUserIdOk() (*int32, bool)\nfunc (o *CreateApiTokenResponse) SetUserId(v int32)\nfunc (o *CreateApiTokenResponse) HasUserId() bool\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Value\nDESCRIPTION: Example showing how to update an existing value in a JSON document\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/sjson/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvalue, _ := sjson.Set(`{\"name\":{\"last\":\"Anderson\"}}`, \"name.last\", \"Smith\")\nprintln(value)\n```\n\n----------------------------------------\n\nTITLE: Installing JWT-GO Package in Go Projects\nDESCRIPTION: Command to add the jwt-go library as a dependency using go get. This installs the v4 version of the package which includes Go module support while maintaining backward compatibility.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/golang-jwt/jwt/v4/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/golang-jwt/jwt/v4\n```\n\n----------------------------------------\n\nTITLE: Defining Service Monitor in Kubernetes YAML\nDESCRIPTION: This snippet demonstrates how to configure a service monitor in a Kubernetes deployment. It includes settings for monitoring path, scheme, interval, and metric relabeling.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-14-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Checking Devtron Installer Logs\nDESCRIPTION: Command to check the logs of the Devtron installer to monitor the installation progress or troubleshoot issues.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd-with-gitops.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -f -l app=inception -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: Parsing Semantic Version in Go\nDESCRIPTION: Example of parsing a semantic version string into a Version object with error handling\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nv, err := semver.NewVersion(\"1.2.3-beta.1+build345\")\n```\n\n----------------------------------------\n\nTITLE: Verifying Examples After OpenTelemetry Go Release\nDESCRIPTION: Shell command to run a verification script that ensures examples build correctly with the published release version rather than local code.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n./verify_examples.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress with Annotations for Devtron Installation\nDESCRIPTION: Command to install Devtron with Ingress configuration that includes custom annotations. This sets the ingress class and application root path annotations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/ingress-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install devtron devtron/devtron-operator -n devtroncd \\\n  --set components.devtron.ingress.enabled=true \\\n  --set components.devtron.ingress.className=nginx \\\n  --set components.devtron.ingress.host=devtron.example.com \\\n  --set components.devtron.ingress.annotations.\"kubernetes\\.io/ingress\\.class\"=nginx \\\n  --set components.devtron.ingress.annotations.\"nginx\\.ingress\\.kubernetes\\.io\\/app-root\"=\"/dashboard\"\n```\n\n----------------------------------------\n\nTITLE: Service Monitor Configuration\nDESCRIPTION: Configures service monitoring parameters\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Executing Application Rollback in Devtron Orchestrator API using Go\nDESCRIPTION: This snippet demonstrates how to use the OrchestratorApplicationRollbackPut endpoint to rollback an application release. It shows the creation of an API client, forming the request, and handling the response.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/DefaultApi.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n    openapiclient \"./openapi\"\n)\n\nfunc main() {\n    rollbackReleaseRequest := *openapiclient.NewRollbackReleaseRequest() // RollbackReleaseRequest \n\n    configuration := openapiclient.NewConfiguration()\n    api_client := openapiclient.NewAPIClient(configuration)\n    resp, r, err := api_client.DefaultApi.OrchestratorApplicationRollbackPut(context.Background()).RollbackReleaseRequest(rollbackReleaseRequest).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `DefaultApi.OrchestratorApplicationRollbackPut``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    // response from `OrchestratorApplicationRollbackPut`: RollbackReleaseResponse\n    fmt.Fprintf(os.Stdout, \"Response from `DefaultApi.OrchestratorApplicationRollbackPut`: %v\\n\", resp)\n}\n```\n\n----------------------------------------\n\nTITLE: Using term Package to Check Terminal Status and Get Window Size in Go\nDESCRIPTION: This example demonstrates how to use the moby/term package to check if stdin is a terminal and retrieve its window size dimensions. It imports the term package, checks terminal status with IsTerminal(), and gets the window dimensions with GetWinsize().\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/moby/term/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/moby/term\"\n)\n\nfunc main() {\n\tfd := os.Stdin.Fd()\n\tif term.IsTerminal(fd) {\n\t\tws, err := term.GetWinsize(fd)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"term.GetWinsize: %s\", err)\n\t\t}\n\t\tlog.Printf(\"%d:%d\\n\", ws.Height, ws.Width)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Environment Variables Configuration in Markdown\nDESCRIPTION: Configuration table defining PostgreSQL-related environment variables including database connection parameters, timeouts, and authentication settings. Includes variable types, default values, descriptions and deprecation status.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/env_gen.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Key   | Type     | Default Value     | Description       | Example       | Deprecated       |\n|-------|----------|-------------------|-------------------|-----------------------|------------------|\n | APP | string |orchestrator | Application name |  | false |\n | CASBIN_DATABASE | string |casbin |  |  | false |\n | PG_ADDR | string |127.0.0.1 | address of postgres service | postgresql-postgresql.devtroncd | false |\n | PG_DATABASE | string |orchestrator | postgres database to be made connection with | orchestrator, casbin, git_sensor, lens | false |\n | PG_PASSWORD | string |{password} | password for postgres, associated with PG_USER | confidential ;) | false |\n | PG_PORT | string |5432 | port of postgresql service | 5432 | false |\n | PG_READ_TIMEOUT | int64 |30 |  |  | false |\n | PG_USER | string |postgres | user for postgres | postgres | false |\n | PG_WRITE_TIMEOUT | int64 |30 |  |  | false |\n```\n\n----------------------------------------\n\nTITLE: Transforming HTTP Request to GET for Long-Running Operations in Go\nDESCRIPTION: Adds azure.ChangeToGet() function which transforms an http.Request into a GET request, used with long-running operations.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Azure/go-autorest/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nazure.ChangeToGet()\n```\n\n----------------------------------------\n\nTITLE: Installing Regexp2 with Go Get\nDESCRIPTION: Commands to install the regexp2 library using Go's package management system. It includes instructions for both the main branch and the code generation beta branch.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/dlclark/regexp2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/dlclark/regexp2\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/dlclark/regexp2@code_gen\n```\n\n----------------------------------------\n\nTITLE: First Stable Release Versions\nDESCRIPTION: First stable v1.0.0 release for core modules\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.0.0`\n* `otel/trace`: `v1.0.0`\n* `otel/baggage`: `v1.0.0`\n* `otel/sdk/trace`: `v1.0.0`\n```\n\n----------------------------------------\n\nTITLE: Defining Container Specifications in YAML\nDESCRIPTION: Configures container specifications including image, ports, commands and arguments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n    containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        command: [\"/usr/local/bin/nginx\"]\n        args: [\"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Opening a Database Connection with Core in Go\nDESCRIPTION: Demonstrates how to open a database connection using Core's Open function, which wraps the standard sql.DB connection.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ndb, _ := core.Open(db, connstr)\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Error Implementation\nDESCRIPTION: Example of implementing custom validation errors and adding them to the validation result.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype AnswerInvalidError struct {\n    gojsonschema.ResultErrorFields\n}\n\nfunc newAnswerInvalidError(context *gojsonschema.JsonContext, value interface{}, details gojsonschema.ErrorDetails) *AnswerInvalidError {\n    err := AnswerInvalidError{}\n    err.SetContext(context)\n    err.SetType(\"custom_invalid_error\")\n    err.SetDescriptionFormat(\"Answer to the Ultimate Question of Life, the Universe, and Everything is {{.answer}}\")\n    err.SetValue(value)\n    err.SetDetails(details)\n    return &err\n}\n\nfunc main() {\n    schema, err := gojsonschema.NewSchema(schemaLoader)\n    result, err := gojsonschema.Validate(schemaLoader, documentLoader)\n\n    if true {\n        jsonContext := gojsonschema.NewJsonContext(\"question\", nil)\n        errDetail := gojsonschema.ErrorDetails{\n            \"answer\": 42,\n        }\n        result.AddError(\n            newAnswerInvalidError(\n                gojsonschema.NewJsonContext(\"answer\", jsonContext),\n                52,\n                errDetail,\n            ),\n            errDetail,\n        )\n    }\n\n    return result, err\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerfile for Spring Boot Application\nDESCRIPTION: Multi-stage Dockerfile for building and running a Spring Boot application. The first stage uses Maven to build the application, and the second stage creates a lightweight runtime image with OpenJDK.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/use-cases/connect-springboot-with-mysql-database.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# syntax=docker/dockerfile:experimental\nFROM maven:3.5-jdk-8-alpine as build\nWORKSPACE /workspace/app\n\nCOPY pom.xml .\n\nRUN mvn -B -e -C -T 1C org.apache.maven.plugins:maven-dependency-plugin:3.0.2:go-offline\n\nCOPY . .\nRUN mvn clean package -Dmaven.test.skip=true\n\n\nFROM openjdk:8-jdk-alpine\nRUN addgroup -S demo && adduser -S demo -G demo\nVOLUME /tmp\nUSER demo\nARG DEPENDENCY=/workspace/app/target/dependency\nCOPY --from=build /workspace/app/target/docker-demo-0.0.1-SNAPSHOT.jar app.jar\nENTRYPOINT [\"java\",\"-jar\", \"app.jar\"]\n```\n\n----------------------------------------\n\nTITLE: Installing go-randomdata Library in Go\nDESCRIPTION: This snippet shows how to install the go-randomdata library using the go get command.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Pallinder/go-randomdata/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo get github.com/Pallinder/go-randomdata\n```\n\n----------------------------------------\n\nTITLE: Initializing StringToIPHookFunc in Go\nDESCRIPTION: Added a new function StringToIPHookFunc to convert string to net.IP and net.IPNet types.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/mitchellh/mapstructure/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nStringToIPHookFunc()\n```\n\n----------------------------------------\n\nTITLE: Installing heredoc Package via Go Get\nDESCRIPTION: Command to install the heredoc package using Go's package manager\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/MakeNowJust/heredoc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ go get github.com/MakeNowJust/heredoc\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Contrib Repository Module Declaration\nDESCRIPTION: This snippet shows how to declare a module in the contrib repository's go.mod file, including version information for modules with version v2 or higher.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule go.opentelemetry.io/contrib/instrumentation/host/v2\nrequire go.opentelemetry.io/contrib/instrumentation/host/v2 v2.0.1\n```\n\n----------------------------------------\n\nTITLE: Service Monitor Configuration\nDESCRIPTION: Defines service monitoring parameters including path, scheme, and intervals.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nservicemonitor:\n      enabled: true\n      path: /abc\n      scheme: 'http'\n      interval: 30s\n      scrapeTimeout: 20s\n      metricRelabelings:\n        - sourceLabels: [namespace]\n          regex: '(.*)'\n          replacement: myapp\n          targetLabel: target_namespace\n```\n\n----------------------------------------\n\nTITLE: Using 'in' Operator in Casbin Golang Edition\nDESCRIPTION: This snippet shows how to use the 'in' operator in Casbin's Golang edition for ABAC (Attribute-Based Access Control) scenarios.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/casbin/README.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n# Matchers\n[matchers]\nm = r.obj == p.obj && r.act == p.act || r.obj in ('data2', 'data3')\n```\n\n----------------------------------------\n\nTITLE: Wrapping Errors in Go\nDESCRIPTION: Wrap changes the Cause of the error. The location of the Wrap call is also stored in the error stack. It takes two error parameters: the original error and a new descriptive error.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/juju/errors/README.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nfunc Wrap(other, newDescriptive error) error\n```\n\n----------------------------------------\n\nTITLE: Array Construction Example\nDESCRIPTION: Demonstrates the syntax for constructing arrays using the comma separator with parentheses in Govaluate expressions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Knetic/govaluate/MANUAL.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n(1, 2, 3, 4)\n```\n\n----------------------------------------\n\nTITLE: Referencing Metadata File for cloud.google.com/go Packages in JSON\nDESCRIPTION: This snippet shows the filename of the JSON metadata file used for cloud.google.com/go packages. The file contains metadata about the packages in the repo and is generated by the internal/gapicgen/generator.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/cloud.google.com/go/internal/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\".repo-metadata-full.json\"\n```\n\n----------------------------------------\n\nTITLE: Setting MaxSurge in Devtron Deployment\nDESCRIPTION: Configures the maximum number of pods that can be created over the desired number of pods. The value can be an absolute number or percentage of replicas count.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Example JSON Format for Decoding\nDESCRIPTION: Sample JSON that demonstrates the use case for mapstructure where the structure may vary based on field values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"person\",\n  \"name\": \"Mitchell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pod Grace Period Configuration\nDESCRIPTION: Specifies the termination grace period for pods\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Setting Topology Spread Constraints in Kubernetes YAML\nDESCRIPTION: Configures how pods are distributed across failure domains such as zones or nodes. This example specifies a maximum skew of 1 with the topology key set to 'zone' and instructs the scheduler not to schedule pods that would violate this constraint.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    autoLabelSelector: true\n    customLabelSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Creating Footnotes in Markdown with Blackfriday\nDESCRIPTION: Example of creating footnotes in Markdown using Blackfriday's extension. A marker in the text becomes a superscript number linked to the footnote definition at the end of the document.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nThis is a footnote.[^1]\n\n[^1]: the footnote text.\n```\n\n----------------------------------------\n\nTITLE: Dot vs Pipe Separator in GJSON Path Syntax\nDESCRIPTION: Examples comparing the behavior of dot (.) and pipe (|) separators in GJSON paths when used with arrays and queries.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/SYNTAX.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfriends.0.first                     \"Dale\"\nfriends|0.first                     \"Dale\"\nfriends.0|first                     \"Dale\"\nfriends|0|first                     \"Dale\"\nfriends|#                           3\nfriends.#                           3\nfriends.#(last=\"Murphy\")#           [{\"first\": \"Dale\", \"last\": \"Murphy\", \"age\": 44},{\"first\": \"Jane\", \"last\": \"Murphy\", \"age\": 47}]\nfriends.#(last=\"Murphy\")#.first     [\"Dale\",\"Jane\"]\nfriends.#(last=\"Murphy\")#|first     <non-existent>\nfriends.#(last=\"Murphy\")#.0         []\nfriends.#(last=\"Murphy\")#|0         {\"first\": \"Dale\", \"last\": \"Murphy\", \"age\": 44}\nfriends.#(last=\"Murphy\")#.#         []\nfriends.#(last=\"Murphy\")#|#         2\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override in YAML\nDESCRIPTION: Overrides the release fullname used to construct Kubernetes object names. By default, Devtron uses {app-name}-{environment-name}.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-13-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Schema from Local File\nDESCRIPTION: Demonstrates loading a JSON schema from a local file using file URI reference\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nloader := gojsonschema.NewReferenceLoader(\"file:///home/me/schema.json\")\n```\n\n----------------------------------------\n\nTITLE: Pod Grace Period Configuration\nDESCRIPTION: Defines the termination grace period for pods.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/workflow-chart_1-0-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nGracePeriod: 30\n```\n\n----------------------------------------\n\nTITLE: Winter Soldier Resource Management Configuration\nDESCRIPTION: Template configuration for Winter Soldier resource management with scheduling and scaling options. Demonstrates time-based resource management across different time zones.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nwinterSoilder:\n  apiVersion: pincher.devtron.ai/v1alpha1 \n  enable: true\n  annotations: {}\n  labels: {}\n  timeRangesWithZone:\n    timeZone: \"Asia/Kolkata\"\n    timeRanges: \n      - timeFrom: 00:00\n        timeTo: 23:59:59\n        weekdayFrom: Sat\n        weekdayTo: Sun\n      - timeFrom: 00:00\n        timeTo: 08:00\n        weekdayFrom: Mon\n        weekdayTo: Fri\n      - timeFrom: 20:00\n        timeTo: 23:59:59\n        weekdayFrom: Mon\n        weekdayTo: Fri\n  action: scale\n  targetReplicas: [1,1,1]\n  fieldSelector: \n    - AfterTime(AddTime( ParseTime({{metadata.creationTimestamp}}, '2006-01-02T15:04:05Z'), '10h'), Now())\n```\n\n----------------------------------------\n\nTITLE: Git Commit References\nDESCRIPTION: Git commit hashes referenced in changelog entries\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/cloud.google.com/go/storage/CHANGES.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n9c10b6f8a54cb8447260148b5e4a9b5160281020\n```\n\nLANGUAGE: markdown\nCODE:\n```\n6b50f9b368f5b271ade1706c342865cef46712e6\n```\n\nLANGUAGE: markdown\nCODE:\n```\n2fef56f75a63dc4ff6e0eea56c7b26d4831c8e27\n```\n\n----------------------------------------\n\nTITLE: Template Interpolation Syntax in HCL\nDESCRIPTION: EBNF grammar for template interpolation sequences that evaluate expressions and replace themselves with the resulting string values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/hcl2/hcl/hclsyntax/spec.md#2025-04-22_snippet_14\n\nLANGUAGE: ebnf\nCODE:\n```\nTemplateInterpolation = (\"${\" | \"${~\") Expression (\"}\" | \"~}\");\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard copyright and license notice template to be included in project files. The template includes placeholders for year and copyright owner information, along with the standard Apache 2.0 license text and reference to terms.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/s3/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Generating Cluster Credentials for Microk8s Cluster (Bash)\nDESCRIPTION: This script generates the server URL and bearer token specifically for Microk8s clusters. It modifies the standard Kubernetes script to use the 'microk8s kubectl' command instead of just 'kubectl'.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/global-configurations/cluster-and-environments.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/devtron-labs/utilities/main/kubeconfig-exporter/kubernetes_export_sa.sh && sed -i 's/kubectl/microk8s kubectl/g' \\\nkubernetes_export_sa.sh && bash kubernetes_export_sa.sh cd-user \\\ndevtroncd\n```\n\n----------------------------------------\n\nTITLE: Referencing CNCF Code of Conduct in Markdown\nDESCRIPTION: This snippet provides a link to the CNCF Code of Conduct that the project follows. It uses Markdown syntax to create a hyperlink to the GitHub repository containing the code of conduct document.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/distribution/reference/CODE-OF-CONDUCT.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[CNCF Code of Conduct](https://github.com/cncf/foundation/blob/main/code-of-conduct.md)\n```\n\n----------------------------------------\n\nTITLE: Installing Match Library with Go Get\nDESCRIPTION: Command to install the Match library using Go's package manager.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/match/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/tidwall/match\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Interface Manipulation with Reflect2\nDESCRIPTION: Shows how to use reflect2's type-safe interface manipulation to get and set values using interface{}. Demonstrates working with pointer types for modification.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/modern-go/reflect2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvalType := reflect2.TypeOf(1)\ni := 1\nj := 10\nvalType.Set(&i, &j)\n// i will be 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Migration\nDESCRIPTION: Configuration for enabling or disabling database migration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Listing Devtron v0.7.1 Release Notes in Markdown\nDESCRIPTION: This code snippet presents the changelog for Devtron v0.7.1 in Markdown format. It includes sections for bug fixes, enhancements, documentation updates, and other changes, with each item presented as a bullet point with a brief description and associated pull request number.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/CHANGELOG/release-notes-v0.7.1.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.7.1\n\n## Bugs\n- fix: EA mode wire fix (#5462)\n- fix: compare manifest fixes (#5430)\n- fix: override clusterRbac with direct allow behaviour for super admin (#5449)\n- fix: external helm app when linked to devtron and page breaks while adding project to it, without switching back to applist  (#5443)\n- fix: empty the code and image scan script (#5434)\n- fix: K8s Resource list RBAC ignore for Superadmin (#5415)\n- fix: repo url and name handling with argocd (#5445)\n- fix: fix for terminal disconnect issue when custom transport is being used (#5436)\n- fix: gitops async failed for git cli mode in concurrent cases  (#5412)\n- fix: Updating pr-issue-validator-script (#5384)\n- fix: optimised FetchLatestDeploymentWithChartRefs query (#5393)\n- fix: nats consumer deleted on shutdown (#5377)\n- fix: panic issue in get/ download pod logs api (#5342)\n- fix: encountering panic in application groups in build and deploy page (#5330)\n- fix: chart group rbac issue (#5183)\n- fix: Multiple choice option for namespace in Kubernetes resource permission (#5293)\n- fix: restart workloads fix in app group (#5313)\n- fix: deployment chart fix (#5215)\n- fix: docker file version fix (#5299)\n- fix: hibernating status is not being updated in app listing page (#5294)\n## Enhancements\n- feat: Checking multiarchitecture of images (#5232)\n- feat: updated kubelink grpc client cfg (#5426)\n- feat: Integration of Cranecopy plugin (#5131)\n- feat: casbin upgraded to v2 (#5329)\n- feat: new scripts added for rescan sbom support , helm manifest scan flag and git container links  (#5406)\n- feat: Reload materials api added (#5182)\n- feat: mirgator plugin (#5347)\n- feat: insecure support for chart-sync (#5328)\n- feat: GitOps async install for devtron applications (#5169)\n- feat: chart ref schema db migration (#5319)\n- feat: Up and Down Script for BitBucket Plugin v1.0.0 (#4949)\n- feat: Added statefulset chart 5.1.0 (#5199)\n- feat: air gap registry v2 (#5220)\n- feat: tenants and installations migration (#5187)\n## Documentation\n- doc: Blob Storage Redirection + Other Fixes (#5432)\n- doc: Added migration steps for 0.6 to 0.7 upgrade (#5411)\n- doc: Created Deployment Window Draft (#4800)\n- doc: Redirection Fix for User Permissions Doc + Other Fixes (#5382)\n- doc: Redirection Fixes for 0.7 (#5381)\n- doc: Redirection Issue Trial Fix (#5378)\n- doc: Plugin Creation Doc (#5372)\n- docs: Added specs for the global plugin Apis (#5362)\n- docs: Fixes +  Corrections in Docs (#5335)\n- docs: fixed broken link in readme (#5337)\n- docs: removed users (#5324)\n- docs: Created a file for listing Devtron Users (#5310)\n## Others\n- chore: common-lib upgrade for nats replicas (#5446)\n- chore: migration for gitops config (#5383)\n- chore: update common-lib tag version (#5333)\n- chore: updated go version in EA dockerfile (#5327)\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Values in HCL using EBNF\nDESCRIPTION: EBNF grammar for collection values in HCL, including tuple and object syntax. Tuples are defined with square brackets, and objects with curly braces with name-value pairs.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/hcl2/hcl/hclsyntax/spec.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nCollectionValue = tuple | object;\ntuple = \"[\" (\n    (Expression (\",\" Expression)* \",\"?)?\n) \"]\";\nobject = \"{\" (\n    (objectelem (\",\" objectelem)* \",\"?)?\n) \"}\";\nobjectelem = (Identifier | Expression) \"=\" Expression;\n```\n\n----------------------------------------\n\nTITLE: Installing GJSON Package with Go Get\nDESCRIPTION: Command to install the GJSON package using Go's package manager\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ go get -u github.com/tidwall/gjson\n```\n\n----------------------------------------\n\nTITLE: Pre-compiling JMESPath Queries in Go\nDESCRIPTION: This snippet illustrates how to pre-compile a JMESPath query for repeated use. It's useful when the same query will be executed multiple times, improving performance by avoiding repeated parsing of the query string.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar jsondata = []byte(`{\"foo\": \"bar\"}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nprecompiled, err := Compile(\"foo\")\nif err != nil{\n  // ... handle the error\n}\nresult, err := precompiled.Search(data)\nresult = \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Migration in Kubernetes YAML\nDESCRIPTION: Enables or disables database migration configuration. This setting determines whether database migration processes are executed during deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\ndbMigrationConfig:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Git Command Usage in Contribution Process\nDESCRIPTION: Key Git commands that should not be used during the contribution process, specifically avoiding force push to prevent loss of review comments.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/google/wire/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit push --force\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pod Name for ClusterIP Service in Helm Chart\nDESCRIPTION: Command to extract the pod name when using ClusterIP service type. Uses label selectors to identify the appropriate pod in the release namespace.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/contrib-chart/reference-chart_3-11-0/templates/NOTES.txt#2025-04-22_snippet_3\n\nLANGUAGE: helm\nCODE:\n```\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: API Endpoint for Fetching All Plugins\nDESCRIPTION: GET request endpoint for retrieving detailed information about all available plugins in the system.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/plugins/create-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /orchestrator/plugin/global/detail/all\n```\n\n----------------------------------------\n\nTITLE: Template If Directive Syntax in HCL\nDESCRIPTION: EBNF grammar for the template 'if' directive that allows conditional selection of sub-templates based on a predicate expression.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/hcl2/hcl/hclsyntax/spec.md#2025-04-22_snippet_15\n\nLANGUAGE: ebnf\nCODE:\n```\nTemplateIf = (\n    (\"%{\" | \"%{~\") \"if\" Expression (\"}\" | \"~}\")\n    Template\n    (\n        (\"%{\" | \"%{~\") \"else\" (\"}\" | \"~}\")\n        Template\n    )?\n    (\"%{\" | \"%{~\") \"endif\" (\"}\" | \"~}\")\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Fullname Override\nDESCRIPTION: Configures custom release fullname for Kubernetes object names instead of default devtron naming.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Environment Variables from ConfigMap Keys\nDESCRIPTION: Configuration for mapping environment variables to Kubernetes ConfigMap keys.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/statefulset.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariablesFromConfigMapKeys: \n  - name: ENV_NAME\n    configMapName: CONFIG_MAP_NAME\n    keyName: CONFIG_MAP_KEY\n```\n\n----------------------------------------\n\nTITLE: Calculating Percentage of Slow Unary Queries\nDESCRIPTION: Determines the percentage of requests taking longer than 250ms by service. Useful for SLA monitoring and identifying performance issues.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_13\n\nLANGUAGE: jsoniq\nCODE:\n```\n100.0 - (\nsum(rate(grpc_server_handling_seconds_bucket{job=\"foo\",grpc_type=\"unary\",le=\"0.25\"}[5m])) by (grpc_service)\n / \nsum(rate(grpc_server_handling_seconds_count{job=\"foo\",grpc_type=\"unary\"}[5m])) by (grpc_service)\n) * 100.0\n```\n\n----------------------------------------\n\nTITLE: Defining String Literals in HCL using EBNF\nDESCRIPTION: EBNF grammar for string literals in HCL, which are a restricted form of quoted templates that contain only a single literal string with no interpolation or directive sequences.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/hcl2/hcl/hclsyntax/spec.md#2025-04-22_snippet_2\n\nLANGUAGE: ebnf\nCODE:\n```\nStringLit = '\"' (quoted literals as defined in prose above) '\"';\n```\n\n----------------------------------------\n\nTITLE: Defining Starlark Unary and Binary Expressions\nDESCRIPTION: Specifies the structure of unary and binary expressions in Starlark, including various operators and their precedence.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.starlark.net/syntax/grammar.txt#2025-04-22_snippet_4\n\nLANGUAGE: Starlark\nCODE:\n```\nUnaryExpr = 'not' Test .\n\nBinaryExpr = Test {Binop Test} .\n\nBinop = 'or'\n      | 'and'\n      | '==' | '!=' | '<' | '>' | '<=' | '>=' | 'in' | 'not' 'in'\n      | '|'\n      | '^'\n      | '&'\n      | '-' | '+'\n      | '*' | '%' | '/' | '//'\n      .\n\nExpression = Test {',' Test} .\n# NOTE: trailing comma permitted only when within [...] or (...).\n\nLoopVariables = PrimaryExpr {',' PrimaryExpr} .\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts in Kubernetes YAML\nDESCRIPTION: This YAML snippet defines volume mount configurations for a Kubernetes deployment. It specifies mount paths and names for different volumes, including an example with a subPath.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee  \n```\n\n----------------------------------------\n\nTITLE: Release Candidate for All Modules\nDESCRIPTION: Release candidate including all modules at v1.1.0-RC1, preparing for metric modules stabilization\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.1.0-RC1`\n* `otel/trace`: `v1.1.0-RC1`\n* `otel/metric`: `v1.1.0-RC1`\n* `otel/baggage`: `v1.1.0-RC1`\n* `otel/sdk/trace`: `v1.1.0-RC1`\n* `otel/sdk/metric`: `v1.1.0-RC1`\n```\n\n----------------------------------------\n\nTITLE: Defining Template Expressions in HCL using EBNF\nDESCRIPTION: EBNF grammar for template expressions in HCL, including both quoted templates and heredoc templates. Template expressions allow embedding the template sub-language in HCL expressions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/hcl2/hcl/hclsyntax/spec.md#2025-04-22_snippet_1\n\nLANGUAGE: ebnf\nCODE:\n```\nTemplateExpr = quotedTemplate | heredocTemplate;\nquotedTemplate = (as defined in prose above);\nheredocTemplate = (\n    (\"<<\" | \"<<-\") Identifier Newline\n    (content as defined in prose above)\n    Identifier Newline\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes ConfigMap using kubectl Command\nDESCRIPTION: This command demonstrates how to create an external ConfigMap using kubectl. The command follows the pattern 'kubectl create configmap <configmap-name> <data source>' and is referenced when using the Kubernetes External ConfigMap data type in Devtron.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/config-maps.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create configmap <configmap-name> <data source>\n```\n\n----------------------------------------\n\nTITLE: Installing TreePrint Package in Go\nDESCRIPTION: Command to install the treeprint package using go get.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xlab/treeprint/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/xlab/treeprint\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Semver Versions in Markdown Table\nDESCRIPTION: This markdown table shows the supported versions of semver. It indicates that version 3.x is supported, while versions 2.x and 1.x are not supported.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Masterminds/semver/v3/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 3.x     | :white_check_mark: |\n| 2.x     | :x:                |\n| 1.x     | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Configuring Tolerations in Kubernetes Deployment\nDESCRIPTION: YAML configuration for tolerations that allow pods to be scheduled on nodes with matching taints. Tolerations enable pods to access nodes that would otherwise repel them due to taints.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-18-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Liveness Probe\nDESCRIPTION: Defines liveness probe settings for container health checks. Controls how Kubernetes determines if a pod needs to be restarted.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Basic Pattern Matching with Regexp2 in Go\nDESCRIPTION: Demonstrates how to compile a regular expression pattern and use it to match a string. This snippet shows the basic usage of the regexp2 library for pattern matching.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/dlclark/regexp2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nre := regexp2.MustCompile(`Your pattern`, 0)\nif isMatch, _ := re.MatchString(`Something to match`); isMatch {\n    //do something\n}\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Devtron ClusterIP Service\nDESCRIPTION: This command sets up port forwarding for the Devtron service when it's configured as ClusterIP. It forwards local port 8000 to the service's port 80, allowing access to the dashboard via localhost.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/charts/devtron/templates/NOTES.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd port-forward svc/devtron-service 8000:80\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe for Kubernetes Containers\nDESCRIPTION: Defines health check configuration for container liveness including paths, timeouts and failure thresholds.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring ID Generator for TracerProvider in Go\nDESCRIPTION: Adds WithIDGenerator option to configure an IDGenerator for the TracerProvider.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_37\n\nLANGUAGE: Go\nCODE:\n```\nWithIDGenerator\n```\n\n----------------------------------------\n\nTITLE: Setting Helm Release Name Environment Variable\nDESCRIPTION: Command to set the RELEASE_NAME environment variable for use in subsequent Helm operations. This variable is used to properly annotate Kubernetes resources.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.6.x-0.7.x.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport RELEASE_NAME=devtron\n```\n\n----------------------------------------\n\nTITLE: Go Test Command for Changes\nDESCRIPTION: Command to run tests on all packages to verify changes before submitting a pull request.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/google/wire/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint: orchestratorAppListGet in Markdown\nDESCRIPTION: Documents the orchestratorAppListGet endpoint, which retrieves a list of Devtron applications. It includes parameters for filtering and pagination, and returns an AppList object.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/md-output/Apis/DefaultApi.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# **orchestratorAppListGet**\nAppList orchestratorAppListGet(projectIds, clusterIds, environmentIds, offset, size, sortOrder, sortBy)\n\n    this api gives all devtron applications.\n\n### Parameters\n\nName | Type | Description  | Notes\n------------- | ------------- | ------------- | -------------\n **projectIds** | [**List**](../Models/Integer.md)| project ids | [default to null]\n **clusterIds** | [**List**](../Models/Integer.md)| cluster ids | [default to null]\n **environmentIds** | [**List**](../Models/Integer.md)| environment ids | [default to null]\n **offset** | **Integer**| offser | [default to null]\n **size** | **Integer**| size | [default to null]\n **sortOrder** | **String**| sortOrder | [default to null] [enum: ASC, DESC]\n **sortBy** | **String**| sortBy | [default to null] [enum: appNameSort]\n\n### Return type\n\n[**AppList**](../Models/AppList.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json\n```\n\n----------------------------------------\n\nTITLE: Implementing SetSuccess Method for ActionResponse in Go\nDESCRIPTION: Defines a method to set the Success field value in the ActionResponse struct.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/ActionResponse.md#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nfunc (o *ActionResponse) SetSuccess(v bool) {\n    o.Success = &v\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MaxUnavailable in Devtron Deployment Chart\nDESCRIPTION: This YAML configuration defines the maximum number of pods that can be unavailable during the update process. The value can be an absolute number or percentage of the replicas count.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  MaxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: JSON Result from Multipath with Literals\nDESCRIPTION: Shows the resulting JSON document after applying the multipath query with literals. The output combines the selected fields with the newly defined literal values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/tidwall/gjson/SYNTAX.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\"first\":\"Tom\",\"age\":37,\"company\":\"Happysoft\",\"employed\":true}\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: A template for the copyright notice that should be included in project files when applying the Apache License 2.0. This notice should be customized with the year and copyright owner's name, and included in the appropriate comment syntax for the file format.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/feature/s3/manager/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice text template for applying the Apache License 2.0 to software projects. Includes placeholders for copyright year and owner name, along with standard license terms and reference to the full license text.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/config/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Setting Container Security Context in Kubernetes YAML\nDESCRIPTION: Defines security context for the main container, specifying privilege and access control settings. This example disables privilege escalation for the container.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL tests with Docker configuration\nDESCRIPTION: Command for running Go tests against a PostgreSQL instance in Docker. This sets all necessary environment variables to connect to the containerized database.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/lib/pq/TESTS.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPGHOST=localhost PGPORT=5432 PGUSER=postgres PGSSLMODE=disable PGDATABASE=postgres go test\n```\n\n----------------------------------------\n\nTITLE: Configuring MaxSurge for Rolling Updates\nDESCRIPTION: Defines the maximum number of pods that can exceed the desired replica count during a rolling update. Controls how aggressive the deployment is.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/deployment-chart_4-18-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Providing Contact Information for Code of Conduct Violations in Markdown\nDESCRIPTION: This snippet includes a mailto link for reporting Code of Conduct violations to the CNCF Code of Conduct Committee. It uses Markdown syntax to create an email hyperlink.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/distribution/reference/CODE-OF-CONDUCT.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[CNCF Code of Conduct Committee](mailto:conduct@cncf.io)\n```\n\n----------------------------------------\n\nTITLE: Setting MaxSurge for Rolling Updates\nDESCRIPTION: Configures the maximum number of pods that can be created over the desired number of pods during updates. Can be absolute or percentage of replicas.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nMaxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Pod Tolerations\nDESCRIPTION: Defines pod tolerations to control pod scheduling based on node taints. Allows pods to be scheduled on nodes with matching taints.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Creating XORM Engine and Database Schema\nDESCRIPTION: Shows how to initialize an XORM engine connection and define/sync database schema using structs\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/go-xorm/xorm/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nengine, err := xorm.NewEngine(driverName, dataSourceName)\n\ntype User struct {\n    Id int64\n    Name string\n    Salt string\n    Age int\n    Passwd string `xorm:\"varchar(200)\"`\n    Created time.Time `xorm:\"created\"`\n    Updated time.Time `xorm:\"updated\"`\n}\n\nerr := engine.Sync2(new(User))\n```\n\n----------------------------------------\n\nTITLE: Setting MinReadySeconds in Devtron Deployment Chart\nDESCRIPTION: This YAML configuration specifies the minimum number of seconds for which a newly created Pod should be ready without any of its containers crashing for it to be considered available.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nMinReadySeconds: 60\n```\n\n----------------------------------------\n\nTITLE: Running Environment Variable Example\nDESCRIPTION: Shows how to execute the Go program with environment variables set from the command line. Demonstrates setting multiple values including a boolean flag, a colon-separated list, and a duration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/caarlos0/env/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ PRODUCTION=true HOSTS=\"host1:host2:host3\" DURATION=1s go run examples/first.go\n{Home:/your/home Port:3000 IsProduction:true Hosts:[host1 host2 host3] Duration:1s}\n```\n\n----------------------------------------\n\nTITLE: PathMatch Function Implementation\nDESCRIPTION: Function signature for matching file patterns using system's path separator\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc PathMatch(pattern, name string) (bool, error)\n```\n\n----------------------------------------\n\nTITLE: Building UPDATE Queries in Go with builder\nDESCRIPTION: Example of constructing an UPDATE SQL statement with conditions using the builder package.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/builder/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nsql, args, err := Update(Eq{\"a\": 2}).From(\"table1\").Where(Eq{\"a\": 1}).ToSQL()\n```\n\n----------------------------------------\n\nTITLE: Configuring Container-Level Security Context in Kubernetes\nDESCRIPTION: YAML configuration for setting security context at the container level. This example prevents privilege escalation for the main container, enhancing security by restricting container permissions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/creating-application/deployment-template/deployment.md#2025-04-22_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Displaying Information Hint for Bulk Build Parameters\nDESCRIPTION: This markdown snippet shows an information hint suggesting the use of Application Groups for passing build parameters in bulk.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/deploying-application/triggering-ci.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"info\" %}\nIn case you trigger builds in bulk, you can consider passing build parameters in [Application Groups](../application-groups.md).\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Version History Changelog Entry\nDESCRIPTION: A markdown formatted changelog entry showing version number, date and changes. Entries follow a consistent pattern of documenting dependency updates, features, and breaking changes.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/internal/configsources/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.3.32 (2025-02-05)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Setting Container Command in Kubernetes\nDESCRIPTION: Defines the command to be executed when the container starts. This configuration allows enabling or disabling custom commands and specifying the command values.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Volumes\nDESCRIPTION: Defines volume configurations for external storage, including empty directories and persistent volume claims.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: log-volume\n    emptyDir: {}\n  - name: logpv\n    persistentVolumeClaim:\n      claimName: logpvc\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts\nDESCRIPTION: Specifies how volumes are mounted within containers, including mount paths and subpaths.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /var/log/nginx/\n    name: log-volume \n  - mountPath: /mnt/logs\n    name: logpvc\n    subPath: employee\n```\n\n----------------------------------------\n\nTITLE: Upgrading Devtron with Default Minio Storage Configuration\nDESCRIPTION: Command to upgrade Hyperion to Devtron full mode using default configurations with Minio for storing build logs and cache.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/hyperion/setup/upgrade-to-devtron.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd --set installer.mode=full\n```\n\n----------------------------------------\n\nTITLE: Enabling External FluxCD Feature Flag in YAML\nDESCRIPTION: This YAML snippet demonstrates the feature flag configuration to enable external FluxCD app listing in Devtron. It should be added to the dashboard ConfigMap.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/applications.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nFEATURE_EXTERNAL_FLUX_CD_ENABLE: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Objx Map from JSON\nDESCRIPTION: Shows how to create an objx.Map object from a JSON string. The function returns both the map and an error that should be handled.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/stretchr/objx/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nm, err := objx.FromJSON(json)\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repository\nDESCRIPTION: Command to update the Helm repository to ensure the latest chart versions are available before performing the upgrade.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.6.x-0.7.x.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Running golangci-lint from Command Line\nDESCRIPTION: Shell command to run golangci-lint on all packages in the repository. It includes an option to show all lint errors by adjusting the maximum issues displayed.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/Microsoft/go-winio/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> golangci-lint run ./...\n```\n\n----------------------------------------\n\nTITLE: Basic TOML Configuration Example\nDESCRIPTION: Example of a simple TOML configuration file containing various data types including integers, arrays, floats, and timestamps.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/BurntSushi/toml/README.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nAge = 25\nCats = [ \"Cauchy\", \"Plato\" ]\nPi = 3.14\nPerfection = [ 6, 28, 496, 8128 ]\nDOB = 1987-07-05T05:45:00Z\n```\n\n----------------------------------------\n\nTITLE: Creating a New Config Function in Go\nDESCRIPTION: Implements a newConfig function that establishes defaults and applies provided options to create a configured config instance. This function is typically unexported.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// newConfig returns an appropriately configured config.\nfunc newConfig(options ...Option) config {\n\t// Set default values for config.\n\tconfig := config{/* […] */}\n\tfor _, option := range options {\n\t\tconfig = option.apply(config)\n\t}\n\t// Perform any validation here.\n\treturn config\n}\n```\n\n----------------------------------------\n\nTITLE: Building DELETE Queries in Go with builder\nDESCRIPTION: Example of constructing a DELETE SQL statement with conditions using the builder package.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/xorm.io/builder/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nsql, args, err := Delete(Eq{\"a\": 1}).From(\"table1\").ToSQL()\n```\n\n----------------------------------------\n\nTITLE: Raw Kubernetes YAML Configuration\nDESCRIPTION: Defines raw Kubernetes service configuration including selectors and ports.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-9-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nrawYaml: \n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: my-service\n    spec:\n      selector:\n        app: MyApp\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 9376\n      type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Security Context\nDESCRIPTION: Configuration for pod-level security context settings including user, group and filesystem permissions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-17-0/README.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  runAsUser: 1000\n  runAsGroup: 3000\n  fsGroup: 2000\n```\n\n----------------------------------------\n\nTITLE: Getting Token Description with Status - Go\nDESCRIPTION: Method that returns both the Description field value and a boolean indicating if the value has been set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/CreateApiTokenRequest.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *CreateApiTokenRequest) GetDescriptionOk() (*string, bool)\n```\n\n----------------------------------------\n\nTITLE: Creating New RollbackReleaseResponse Instance in Go\nDESCRIPTION: Defines two constructor functions for creating new instances of RollbackReleaseResponse. NewRollbackReleaseResponse creates an instance with default values, while NewRollbackReleaseResponseWithDefaults only assigns default values to defined properties.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/RollbackReleaseResponse.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc NewRollbackReleaseResponse() *RollbackReleaseResponse\n\nfunc NewRollbackReleaseResponseWithDefaults() *RollbackReleaseResponse\n```\n\n----------------------------------------\n\nTITLE: Go Bug Report Command\nDESCRIPTION: Command to generate a bug report template with system information for filing issues.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/google/wire/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo bug\n```\n\n----------------------------------------\n\nTITLE: Setting Up Redis Testing Environment\nDESCRIPTION: Shell commands for setting up a local testing environment by creating symbolic links to Redis server files and copying the configuration.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/redis/go-redis/v9/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nln -s /usr/bin/redis-server ./go-redis/testdata/redis/src\ncp ./go-redis/testdata/redis.conf ./go-redis/testdata/redis/\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo test\n```\n\nLANGUAGE: shell\nCODE:\n```\nREDIS_PORT=9999 go test <your options>\n```\n\n----------------------------------------\n\nTITLE: Setting Command in Kubernetes YAML\nDESCRIPTION: Specifies the command to be run in the container. This overrides the default command defined in the container image.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-16-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Overriding Fullname in Kubernetes YAML\nDESCRIPTION: Replaces the default release fullname used by Devtron for constructing Kubernetes object names.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-1-0/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: app-name\n```\n\n----------------------------------------\n\nTITLE: Configuring Command in Kubernetes YAML\nDESCRIPTION: Demonstrates how to specify a custom command for a container in a Kubernetes deployment.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-12-0/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  enabled: false\n  value: []\n```\n\n----------------------------------------\n\nTITLE: Installing Casbin in Go Projects\nDESCRIPTION: Command to install Casbin library in Go projects using go get. This fetches version 2 of the Casbin package.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/casbin/casbin/v2/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/casbin/casbin/v2\n```\n\n----------------------------------------\n\nTITLE: AppList Properties Definition in Markdown\nDESCRIPTION: Markdown table defining the properties of the AppList model. Includes type definitions and descriptions for helmApps and devtronApps collections.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/md-output/Models/AppList.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **helmApps** | [**List**](HelmApp.md) | all helm app list, EA+ devtronapp | [optional] [default to null] |\n| **devtronApps** | [**List**](DevtronApp.md) | all helm app list, EA+ devtronapp | [optional] [default to null] |\n```\n\n----------------------------------------\n\nTITLE: Setting Platform Environment Variable for Linux/amd64\nDESCRIPTION: Command to set the PLATFORM environment variable for Linux/amd64 architecture.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-in-airgapped-environment.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport PLATFORM=\"linux/amd64\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for go-gitlab Development\nDESCRIPTION: Command to install all necessary dependencies for developing go-gitlab using the project's Makefile.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/xanzy/go-gitlab/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake setup\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service\nDESCRIPTION: Defines service type and annotations for the Kubernetes service.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-12-0/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n    type: ClusterIP\n    annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Downloading Google App Engine Package\nDESCRIPTION: Command to download the Google App Engine package using Go's package management system.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/google.golang.org/appengine/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -d google.golang.org/appengine\n```\n\n----------------------------------------\n\nTITLE: Setting Container Switch Delay\nDESCRIPTION: Configures delay before switching active containers.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-13-0/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\npauseForSecondsBeforeSwitchActive: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Monitoring in YAML\nDESCRIPTION: Defines Prometheus monitoring configuration with release name.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-11-0/README.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    release: monitoring\n```\n\n----------------------------------------\n\nTITLE: Checking Devtron Installer Logs\nDESCRIPTION: Command to view the logs of the Devtron installer for monitoring the installation process or troubleshooting issues.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/install-devtron-with-cicd.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -f -l app=inception -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: Upgrading Devtron to Latest Version with Helm\nDESCRIPTION: Command to upgrade Devtron to the latest version using the Helm chart from the devtron repository with cicd modules enabled.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/upgrade/devtron-upgrade-0.4.x-0.5.x.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade devtron devtron/devtron-operator --namespace devtroncd \\\n-f https://raw.githubusercontent.com/devtron-labs/devtron/main/charts/devtron/devtron-bom.yaml \\\n--set installer.modules={cicd} --reuse-values\n```\n\n----------------------------------------\n\nTITLE: Template For Directive Syntax in HCL\nDESCRIPTION: EBNF grammar for the template 'for' directive that produces multiple copies of a sub-template based on elements in a collection.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/hcl2/hcl/hclsyntax/spec.md#2025-04-22_snippet_16\n\nLANGUAGE: ebnf\nCODE:\n```\nTemplateFor = (\n    (\"%{\" | \"%{~\") \"for\" Identifier (\",\" Identifier) \"in\" Expression (\"}\" | \"~}\")\n    Template\n    (\"%{\" | \"%{~\") \"endfor\" (\"}\" | \"~}\")\n);\n```\n\n----------------------------------------\n\nTITLE: Example Task Name Configuration\nDESCRIPTION: Example value for configuring the task name in Jenkins plugin setup\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/user-guide/plugins/jenkins.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ne.g. Jenkins_Job\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Configuration for setting container environment variables within Pods.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEnvVariables: []\n```\n\n----------------------------------------\n\nTITLE: Creating API Token Request with Defaults - Go\nDESCRIPTION: Constructor function that creates a new CreateApiTokenRequest object with only default values, without guaranteeing required API properties are set.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/specs/openapiClient/docs/apiToken_api/CreateApiTokenRequest.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc NewCreateApiTokenRequestWithDefaults() *CreateApiTokenRequest\n```\n\n----------------------------------------\n\nTITLE: Restarting Git Sensor Pod\nDESCRIPTION: Command to restart the git-sensor pod to resolve issues with commit fetching and auto-build triggers\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/FAQs/devtron-troubleshoot.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod -n devtroncd git-sensor-0\n```\n\n----------------------------------------\n\nTITLE: Creating Legacy Ingress for Devtron with K8s < 1.19\nDESCRIPTION: YAML configuration for creating an Ingress resource for Devtron on Kubernetes versions older than 1.19. This uses the deprecated extensions/v1beta1 API.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/docs/setup/install/ingress-setup.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  annotations: \n    nginx.ingress.kubernetes.io/app-root: /dashboard\n  labels:\n    app: devtron\n    release: devtron\n  name: devtron-ingress\n  namespace: devtroncd\nspec:\n  rules:\n  - http:\n      paths:\n      - backend:\n          serviceName: devtron-service\n          servicePort: 80\n        path: /orchestrator\n      - backend:\n          serviceName: devtron-service\n          servicePort: 80\n        path: /dashboard\n        pathType: ImplementationSpecific\n```\n\n----------------------------------------\n\nTITLE: Storage Version References\nDESCRIPTION: Version tag references for comparing storage library versions in changelog entries\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/cloud.google.com/go/storage/CHANGES.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[1.30.1](https://github.com/googleapis/google-cloud-go/compare/storage/v1.30.0...storage/v1.30.1)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[1.30.0](https://github.com/googleapis/google-cloud-go/compare/storage/v1.29.0...storage/v1.30.0)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[1.29.0](https://github.com/googleapis/google-cloud-go/compare/storage/v1.28.1...storage/v1.29.0)\n```\n\n----------------------------------------\n\nTITLE: Scheduler Configuration\nDESCRIPTION: Specification for custom scheduler selection.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-20-0/README.md#2025-04-22_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\nschedulerName: \"\"\n```\n\n----------------------------------------\n\nTITLE: Importing goautoneg Package in Go\nDESCRIPTION: This snippet shows the package declaration and import statement for the goautoneg package. It imports the package from a Bitbucket repository.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/prometheus/common/internal/bitbucket.org/ww/goautoneg/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage goautoneg\nimport \"bitbucket.org/ww/goautoneg\"\n```\n\n----------------------------------------\n\nTITLE: Installing NATS Server for Devtron Dashboard\nDESCRIPTION: Command to apply the NATS server configuration from the Devtron GitHub repository to resolve dashboard accessibility issues. This creates the required NATS cluster if it's missing.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/Troubleshooting.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/devtron-labs/devtron/main/manifests/yamls/nats-server.yaml -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: Applying the Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the copyright notice that should be included when applying the Apache License 2.0 to a project. This boilerplate text should be added to source files with the bracketed fields replaced with specific project information.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/sso/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Changelog entries documenting version releases, new features, bug fixes and dependency updates for Google Cloud IAM module from version 0.1.0 to 1.1.1. Includes commit references and issue links.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/cloud.google.com/go/iam/CHANGES.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changes\n\n## [1.1.1](https://github.com/googleapis/google-cloud-go/compare/iam/v1.1.0...iam/v1.1.1) (2023-06-20)\n\n### Bug Fixes\n\n* **iam:** REST query UpdateMask bug ([df52820](https://github.com/googleapis/google-cloud-go/commit/df52820b0e7721954809a8aa8700b93c5662dc9b))\n```\n\n----------------------------------------\n\nTITLE: Defining Function Calls in HCL using EBNF\nDESCRIPTION: EBNF grammar for function calls in HCL, consisting of an identifier naming the function followed by parenthesized arguments. Includes support for variadic functions using the ellipsis syntax.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/hashicorp/hcl2/hcl/hclsyntax/spec.md#2025-04-22_snippet_4\n\nLANGUAGE: ebnf\nCODE:\n```\nFunctionCall = Identifier \"(\" arguments \")\";\nArguments = (\n    () ||\n    (Expression (\",\" Expression)* (\",\" | \"...\")?)\n);\n```\n\n----------------------------------------\n\nTITLE: Checking NATS Cluster Status in Devtron\nDESCRIPTION: Command to verify if the NATS cluster required for Devtron dashboard functionality is properly created in the devtroncd namespace. This helps troubleshoot dashboard accessibility issues.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/Troubleshooting.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get natscluster -n devtroncd\n```\n\n----------------------------------------\n\nTITLE: Getting Admin Password for Devtron pre-v0.6.0\nDESCRIPTION: Command to retrieve the admin password for Devtron versions below 0.6.0.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/charts/devtron/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n devtroncd get secret devtron-secret -o jsonpath='{.data.ACD_PASSWORD}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: JSON Type Conversion Table in Markdown\nDESCRIPTION: A comprehensive markdown table showing how different JSON types are converted to bool, int, uint, float, and string types. It includes detailed examples and special cases for each conversion.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/github.com/json-iterator/go/fuzzy_mode_convert_table.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| json type \\ dest type | bool | int | uint | float |string|\n| --- | --- | --- | --- |--|--|\n| number | positive => true <br/> negative => true <br/> zero => false| 23.2 => 23 <br/> -32.1 => -32| 12.1 => 12 <br/> -12.1 => 0|as normal|same as origin|\n| string | empty string => false <br/> string \"0\" => false <br/> other strings => true | \"123.32\" => 123 <br/> \"-123.4\" => -123 <br/> \"123.23xxxw\" => 123 <br/>  \"abcde12\" => 0 <br/> \"-32.1\" => -32| 13.2 => 13 <br/> -1.1 => 0 |12.1 => 12.1 <br/> -12.3 => -12.3<br/> 12.4xxa => 12.4 <br/> +1.1e2 =>110 |same as origin|\n| bool | true => true <br/> false => false| true => 1 <br/> false => 0 | true => 1 <br/> false => 0 |true => 1 <br/>false => 0|true => \"true\" <br/> false => \"false\"|\n| object | true | 0 | 0 |0|originnal json|\n| array | empty array => false <br/> nonempty array => true| [] => 0 <br/> [1,2] => 1 | [] => 0 <br/> [1,2] => 1 |[] => 0<br/>[1,2] => 1|original json|\n```\n\n----------------------------------------\n\nTITLE: Executing Pre-release Steps for OpenTelemetry Go Modules\nDESCRIPTION: Shell commands for running the pre-release process for OpenTelemetry Go modules. This command creates a branch with version changes that need to be reviewed and verified before merging.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake prerelease MODSET=<module set>\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio in Kubernetes YAML\nDESCRIPTION: Defines Istio service mesh configurations including gateway and virtual service settings. It allows for traffic management, security, and observability enhancements.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nistio:\n  enable: true\n  gateway:\n    annotations: {}\n    enabled: false\n    host: example.com\n    labels: {}\n    tls:\n      enabled: false\n      secretName: example-tls-secret\n  virtualService:\n    annotations: {}\n    enabled: false\n    gateways: []\n    hosts: []\n    http:\n      - corsPolicy:\n          allowCredentials: false\n          allowHeaders:\n            - x-some-header\n          allowMethods:\n            - GET\n          allowOrigin:\n            - example.com\n          maxAge: 24h\n        headers:\n          request:\n            add:\n              x-some-header: value\n        match:\n          - uri:\n              prefix: /v1\n          - uri:\n              prefix: /v2\n        retries:\n          attempts: 2\n          perTryTimeout: 3s\n        rewriteUri: /\n        route:\n          - destination:\n              host: service1\n              port: 80\n        timeout: 12s\n      - route:\n          - destination:\n              host: service2\n    labels: {}\n```\n\n----------------------------------------\n\nTITLE: Installing Uber Atomic Package with Go Get\nDESCRIPTION: Command to install the Uber Atomic package using go get. The @v1 suffix specifies that version 1 of the package should be installed.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.uber.org/atomic/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get -u go.uber.org/atomic@v1\n```\n\n----------------------------------------\n\nTITLE: Setting Pod Tolerations\nDESCRIPTION: Defines pod tolerations for node taints in Kubernetes clusters.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_3-10-0/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Various Kubernetes Service Types\nDESCRIPTION: This snippet uses Go templating to generate commands for retrieving the application URL based on the service type defined in the Helm chart values. It covers Ingress, NodePort, LoadBalancer, and ClusterIP service types, providing appropriate commands for each scenario.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/reference-chart_4-19-0/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go Template\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range $.Values.ingress.paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \".Chart.Name .fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ include \".Chart.Name .fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \".Chart.Name .fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \".Chart.Name .name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Removed Jaeger Environment Variables\nDESCRIPTION: List of deprecated Jaeger environment variables that are no longer supported\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_30\n\nLANGUAGE: properties\nCODE:\n```\nJAEGER_SERVICE_NAME\nJAEGER_DISABLED\nJAEGER_TAGS\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Tolerations in Kubernetes\nDESCRIPTION: Defines tolerations that allow pods to be scheduled on nodes with matching taints. This works together with node taints to control pod placement based on node characteristics or conditions.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_5-0-0/README.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key\"\n   operator: \"Equal\"\n   value: \"value\"\n   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n```\n\n----------------------------------------\n\nTITLE: Liveness Probe Configuration\nDESCRIPTION: Health check configuration for kubernetes pod lifecycle management with HTTP, TCP, and gRPC probe options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-19-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nLivenessProbe:\n  Path: \"\"\n  port: 8080\n  initialDelaySeconds: 20\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\n  failureThreshold: 3\n  httpHeaders:\n    - name: Custom-Header\n      value: abc\n  scheme: \"\"\n  tcp: true\n  grpc:\n    port: 8080\n    service: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ambassador Mappings in Kubernetes YAML\nDESCRIPTION: Specifies ambassador mapping configurations for accessing applications outside the cluster. It includes settings for CORS, hostname, TLS, and other mapping-specific options.\nSOURCE: https://github.com/devtron-labs/devtron/blob/main/scripts/devtron-reference-helm-charts/statefulset-chart_4-18-0/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nambassadorMapping:\n  ambassadorId: \"prod-emissary\"\n  cors: {}\n  enabled: true\n  hostname: devtron.example.com\n  labels: {}\n  prefix: /\n  retryPolicy: {}\n  rewrite: \"\"\n  tls:\n    context: \"devtron-tls-context\"\n    create: false\n    hosts: []\n    secretName: \"\"\n```"
  }
]