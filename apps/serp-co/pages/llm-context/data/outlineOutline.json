[
  {
    "owner": "outline",
    "repo": "outline",
    "content": "TITLE: Creating a Document via Outline API using CURL\nDESCRIPTION: This code snippet demonstrates how to create a new document in Outline using the API with a CURL request. It requires setting the `title`, `text`, `collectionId`, and `token` in the JSON payload. The `publish` parameter determines if the document is published immediately. The `collectionId` and `token` need to be obtained from the Outline settings.\nSOURCE: https://github.com/outline/outline/blob/main/server/onboarding/Integrations & API.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST -H \"Content-type: application/json\" -d '{\n  \"title\": \"My first document\",\n  \"text\": \"Hello from the API ðŸ‘‹\",\n  \"collectionId\": \"COLLECTION_ID\", // find the collection id in the URL bar\n  \"token\": \"API_TOKEN\", // get an API token from https://www.getoutline.com/settings/tokens\n  \"publish\": true\n}' 'https://www.getoutline.com/api/documents.create'\n```\n\n----------------------------------------\n\nTITLE: Backend Directory Structure\nDESCRIPTION: This code snippet outlines the directory structure of the backend application. It shows the different directories and their purposes, such as routes, commands, config, emails, middlewares, migrations, models, onboarding, policies, presenters, queues, services, static, test and utilities. The backend is driven by Koa and uses Sequelize as the ORM.\nSOURCE: https://github.com/outline/outline/blob/main/docs/ARCHITECTURE.md#_snippet_1\n\nLANGUAGE: None\nCODE:\n```\nserver\nâ”œâ”€â”€ routes            - All API routes are contained within here\nâ”‚   â”œâ”€â”€ api           - API routes\nâ”‚   â””â”€â”€ auth          - Authentication routes\nâ”œâ”€â”€ commands          - Complex commands that perform actions across multiple models\nâ”œâ”€â”€ config            - Database configuration\nâ”œâ”€â”€ emails            - Transactional email templates\nâ”‚   â””â”€â”€ templates     - Classes that define each possible email template\nâ”œâ”€â”€ middlewares       - Shared Koa middlewares\nâ”œâ”€â”€ migrations        - Database migrations\nâ”œâ”€â”€ models            - Sequelize models\nâ”œâ”€â”€ onboarding        - Markdown templates for onboarding documents\nâ”œâ”€â”€ policies          - Authorization logic based on cancan\nâ”œâ”€â”€ presenters        - JSON presenters for database models, the interface between backend -> frontend\nâ”œâ”€â”€ queues            - Async queue definitions\nâ”‚   â””â”€â”€ processors    - Processors perform jobs on events from the event bus\nâ”‚   â””â”€â”€ tasks         - Tasks are arbitrary async jobs not from the event bus\nâ”œâ”€â”€ services          - Services start distinct portions of the application eg api, worker\nâ”œâ”€â”€ static            - Static assets\nâ”œâ”€â”€ test              - Test helpers and fixtures, tests themselves are colocated\nâ””â”€â”€ utils             - Utility methods specific to the backend\n```\n\n----------------------------------------\n\nTITLE: Frontend Directory Structure\nDESCRIPTION: This code snippet outlines the directory structure of the frontend application. It shows the different directories and their purposes, such as actions, components, editor, hooks, menus, models, routes, scenes, stores, types and utilities. The frontend is a React application.\nSOURCE: https://github.com/outline/outline/blob/main/docs/ARCHITECTURE.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\napp\nâ”œâ”€â”€ actions     - Reusable actions such as navigating, opening, creating entities\nâ”œâ”€â”€ components  - React components reusable across scenes\nâ”œâ”€â”€ editor      - React components specific to the editor\nâ”œâ”€â”€ hooks       - Reusable React hooks\nâ”œâ”€â”€ menus       - Context menus, often appear in multiple places in the UI\nâ”œâ”€â”€ models      - State models using MobX observables\nâ”œâ”€â”€ routes      - Route definitions, note that chunks are async loaded with suspense\nâ”œâ”€â”€ scenes      - A scene represents a full-page view that contains several components\nâ”œâ”€â”€ stores       - Collections of models and associated fetch logic\nâ”œâ”€â”€ types       - TypeScript types\nâ””â”€â”€ utils       - Utility methods specific to the frontend\n```\n\n----------------------------------------\n\nTITLE: Applying Sequelize Migrations\nDESCRIPTION: This command applies pending database migrations using the Sequelize CLI.  It executes the migration scripts in the order they were created, updating the database schema to the latest version. This assumes that Sequelize is configured correctly with database connection details.\nSOURCE: https://github.com/outline/outline/blob/main/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nyarn sequelize db:migrate\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Sequelize Migration\nDESCRIPTION: This command uses the Sequelize CLI to generate a new database migration file. The `--name my-migration` argument specifies the name of the migration, which is used to create a timestamped file in the migrations directory. This file will contain the code to apply database schema changes.\nSOURCE: https://github.com/outline/outline/blob/main/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nyarn sequelize migration:generate --name my-migration\n```\n```\n\n----------------------------------------\n\nTITLE: Shared Directory Structure\nDESCRIPTION: This code snippet outlines the directory structure of the shared code, containing logic shared between the frontend and backend. It shows the different directories and their purposes, such as components, editor, i18n, styles and utilities. The shared directory includes React components and utilities.\nSOURCE: https://github.com/outline/outline/blob/main/docs/ARCHITECTURE.md#_snippet_2\n\nLANGUAGE: None\nCODE:\n```\nshared\nâ”œâ”€â”€ components        - Shared React components that are used in both the frontend and backend\nâ”œâ”€â”€ editor            - The text editor, based on Prosemirror\nâ”œâ”€â”€ i18n              - Internationalization configuration\nâ”‚   â””â”€â”€ locales       - Language specific translation files\nâ”œâ”€â”€ styles            - Styles, colors and other global aesthetics\nâ””â”€â”€ utils             - Shared utility methods\n```\n\n----------------------------------------\n\nTITLE: Running All Tests using Make\nDESCRIPTION: This command executes all tests for the Outline project. It uses the `make` utility with the `test` target, which is likely defined in a Makefile within the project to orchestrate the test execution process. This is a high-level command to ensure the entire codebase is functioning correctly.\nSOURCE: https://github.com/outline/outline/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n# To run all tests\nmake test\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Sequelize Migrations to Test Database\nDESCRIPTION: This command applies pending database migrations to the test database using the Sequelize CLI. The `--env test` flag specifies that the migrations should be run against the database configured for the `test` environment. This ensures that the test database schema is up-to-date before running tests.\nSOURCE: https://github.com/outline/outline/blob/main/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nyarn sequelize db:migrate --env test\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Web and Worker services with yarn\nDESCRIPTION: This command starts the Outline web and worker services using `yarn`. The `--services` flag specifies which services to run.  This example demonstrates starting the 'web' and 'worker' services.\nSOURCE: https://github.com/outline/outline/blob/main/docs/SERVICES.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn start --services=web,worker\n```\n\n----------------------------------------\n\nTITLE: Running Backend Tests in Watch Mode using Make\nDESCRIPTION: This command initiates backend tests in watch mode. The `make watch` command utilizes the `make` utility to trigger backend tests with a watcher, which automatically reruns tests whenever related files are modified. This is helpful for iterative development and continuous testing.\nSOURCE: https://github.com/outline/outline/blob/main/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n# To run backend tests in watch mode\nmake watch\n```\n```\n\n----------------------------------------\n\nTITLE: Running Backend Tests using Yarn\nDESCRIPTION: This command runs the backend tests using Yarn package manager. It executes the script defined as `test:server` in the `package.json` file. This script likely invokes a testing framework, such as Jest, to perform the tests on the server-side code.\nSOURCE: https://github.com/outline/outline/blob/main/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n# To run backend tests\nyarn test:server\n```\n```\n\n----------------------------------------\n\nTITLE: Running Frontend Tests using Yarn\nDESCRIPTION: This command runs the frontend tests using Yarn package manager.  It executes the script defined as `test:app` in the `package.json` file, which usually invokes a testing framework configured for the frontend, like Jest or Mocha, to test React components and related code.\nSOURCE: https://github.com/outline/outline/blob/main/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n# To run frontend tests\nyarn test:app\n```\n```\n\n----------------------------------------\n\nTITLE: Running Specific Backend Test using Yarn\nDESCRIPTION: This command executes a specific backend test file using Yarn. It runs the `test:server` script defined in `package.json`, passing `myTestFile` as an argument. This allows developers to focus on testing individual components or modules of the backend.\nSOURCE: https://github.com/outline/outline/blob/main/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n# To run a specific backend test\nyarn test:server myTestFile\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Collaboration service with yarn\nDESCRIPTION: This command starts the Outline collaboration service using `yarn`. The `--services` flag specifies which services to run. This service facilitates real-time document editing and updates.\nSOURCE: https://github.com/outline/outline/blob/main/docs/SERVICES.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn start --services=collaboration\n```"
  }
]