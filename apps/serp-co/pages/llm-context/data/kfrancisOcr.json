[
  {
    "owner": "kfrancis",
    "repo": "ocr",
    "content": "TITLE: Defining OCR Service Interface and Result Class in C#\nDESCRIPTION: Defines the IOcrService interface with methods for text recognition and the OcrResult class to hold recognition results. The interface includes event handling, language support, and various recognition methods.\nSOURCE: https://github.com/kfrancis/ocr/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IOcrService\n{\n    event EventHandler<OcrCompletedEventArgs> RecognitionCompleted;\n    IReadOnlyCollection<string> SupportedLanguages { get; }\n    Task InitAsync(CancellationToken ct = default);\n    Task<OcrResult> RecognizeTextAsync(byte[] imageData, bool tryHard = false, CancellationToken ct = default);\n    Task<OcrResult> RecognizeTextAsync(byte[] imageData, OcrOptions options, CancellationToken ct = default);\n    Task StartRecognizeTextAsync(byte[] imageData, OcrOptions options, CancellationToken ct = default);\n}\n\npublic class OcrResult\n{\n    public bool Success { get; set; }\n\n    public string AllText { get; set; }\n\n    public IList<OcrElement> Elements { get; set; } = new List<OcrElement>();\n    public IList<string> Lines { get; set; } = new List<string>();\n\n    public class OcrElement\n    {\n        public string Text { get; set; }\n        public float Confidence { get; set; }\n\n        // Useful for bounding boxes\n        public int X { get; set; }\n        public int Y { get; set; }\n        public int Height { get; set; }\n        public int Width { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing a Photo with OCR in MAUI\nDESCRIPTION: This method demonstrates how to process a photo using the OCR service in a MAUI application. It opens a stream from a FileResult, reads the image data into a byte array, and uses the OCR service to recognize text.\nSOURCE: https://github.com/kfrancis/ocr/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Takes a photo and processes it using the OCR service.\n/// </summary>\n/// <param name=\"photo\">The photo to process.</param>\n/// <returns>The OCR result.</returns>\nprivate async Task<OcrResult> ProcessPhoto(FileResult photo)\n{\n    // Open a stream to the photo\n    using var sourceStream = await photo.OpenReadAsync();\n\n    // Create a byte array to hold the image data\n    var imageData = new byte[sourceStream.Length];\n\n    // Read the stream into the byte array\n    await sourceStream.ReadAsync(imageData);\n\n    // Process the image data using the OCR service\n    return await _ocr.RecognizeTextAsync(imageData);\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching for Ontario Health Card Number using OCR in C#\nDESCRIPTION: This snippet demonstrates how to create an OcrPatternConfig object to recognize an Ontario Health Card Number (HCN) in OCR text. It includes a Luhn algorithm implementation for validation and shows how to use the pattern with OcrOptions.\nSOURCE: https://github.com/kfrancis/ocr/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbool IsValidLuhn(string number)\n{\n    // Convert the string to an array of digits\n    int[] digits = number.Select(d => int.Parse(d.ToString())).ToArray();\n    int checkDigit = 0;\n\n    // Luhn algorithm implementation\n    for (int i = digits.Length - 2; i >= 0; i--)\n    {\n        int currentDigit = digits[i];\n        if ((digits.Length - 2 - i) % 2 == 0) // check if it's an even index from the right\n        {\n            currentDigit *= 2;\n            if (currentDigit > 9)\n            {\n                currentDigit -= 9;\n            }\n        }\n        checkDigit += currentDigit;\n    }\n\n    return (10 - (checkDigit % 10)) % 10 == digits.Last();\n}\n\nvar ohipPattern = new OcrPatternConfig(@\"\\d{10}\", IsLuhnValid);\n\nvar options = new OcrOptions.Builder().SetTryHard(true).SetPatternConfig(ohipPattern).Build();\n\nvar result = await OcrPlugin.Default.RecognizeTextAsync(imageData, options);\n\nvar patientHcn = result.MatchedValues.FirstOrDefault(); // This will be the HCN (and only the HCN) if it's found\n```\n\n----------------------------------------\n\nTITLE: Using IOcrService with Dependency Injection in C#\nDESCRIPTION: Demonstrates how to use dependency injection to incorporate IOcrService into a view model class for OCR operations.\nSOURCE: https://github.com/kfrancis/ocr/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OcrViewModel\n{\n    readonly IOcrService _ocr;\n\n    public OcrViewModel(IOcrService? ocr)\n    {\n        _ocr = ocr ?? OcrPlugin.Default;\n    }\n\n    public void DoSomeOcr()\n    {\n        byte[] imageData = GetImageData();\n\n        var result = await _ocr.RecognizeTextAsync(imageData);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OcrOptions and Builder Class in C#\nDESCRIPTION: Defines the OcrOptions class with a nested Builder class for flexible configuration of OCR settings. Includes properties for language, try-hard mode, pattern configs, and custom callbacks.\nSOURCE: https://github.com/kfrancis/ocr/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OcrOptions\n{\n    public string? Language { get; }\n    public bool TryHard { get; }\n    public List<OcrPatternConfig> PatternConfigs { get; }\n    public CustomOcrValidationCallback? CustomCallback { get; }\n\n    private OcrOptions(string? language, bool tryHard, List<OcrPatternConfig> patternConfigs, CustomOcrValidationCallback? customCallback)\n    {\n        Language = language;\n        TryHard = tryHard;\n        PatternConfigs = patternConfigs;\n        CustomCallback = customCallback;\n    }\n\n    public class Builder\n    {\n        private string? _language;\n        private bool _tryHard;\n        private List<OcrPatternConfig> _patternConfigs = new List<OcrPatternConfig>();\n        private CustomOcrValidationCallback? _customCallback;\n\n        public Builder SetLanguage(string language)\n        {\n            _language = language;\n            return this;\n        }\n\n        public Builder SetTryHard(bool tryHard)\n        {\n            _tryHard = tryHard;\n            return this;\n        }\n\n        public Builder AddPatternConfig(OcrPatternConfig patternConfig)\n        {\n            _patternConfigs.Add(patternConfig);\n            return this;\n        }\n\n        public Builder SetPatternConfigs(List<OcrPatternConfig> patternConfigs)\n        {\n            _patternConfigs = patternConfigs ?? new List<OcrPatternConfig>();\n            return this;\n        }\n\n        public Builder SetCustomCallback(CustomOcrValidationCallback customCallback)\n        {\n            _customCallback = customCallback;\n            return this;\n        }\n\n        public OcrOptions Build()\n        {\n            return new OcrOptions(_language, _tryHard, _patternConfigs, _customCallback);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OCR in MAUI Application\nDESCRIPTION: This code snippet shows how to initialize the OCR plugin in a MAUI application using the MauiAppBuilder extension method UseOcr().\nSOURCE: https://github.com/kfrancis/ocr/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t\tfonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n\t\t\t}).\n\t\t\tUseOcr();  // <-- add this line\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering OcrPlugin with MauiAppBuilder in C#\nDESCRIPTION: Shows how to register the OcrPlugin with the MauiAppBuilder for dependency injection in a .NET MAUI application.\nSOURCE: https://github.com/kfrancis/ocr/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddSingleton(OcrPlugin.Default);\n```\n\n----------------------------------------\n\nTITLE: Using OcrOptions Builder in C#\nDESCRIPTION: Demonstrates how to use the OcrOptions.Builder to create an instance of OcrOptions with specific settings for OCR operations.\nSOURCE: https://github.com/kfrancis/ocr/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new OcrOptions.Builder()\n    .SetLanguage(\"en-US\")\n    .SetTryHard(true)\n    .AddPatternConfig(new OcrPatternConfig(@\"\\d{10}\"))\n    .SetCustomCallback(myCustomCallback)\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Direct Usage of OcrPlugin in C#\nDESCRIPTION: Shows how to use the OcrPlugin directly without dependency injection for quick OCR operations in a view model.\nSOURCE: https://github.com/kfrancis/ocr/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OcrViewModel\n{\n    public void DoSomeOcr()\n    {\n        byte[] imageData = GetImageData();\n\n        var result = await OcrPlugin.Default.RecognizeTextAsync(imageData);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering OCR Plugin in Xamarin Application\nDESCRIPTION: This code snippet shows how to register the OcrPlugin with the DependencyService in a Xamarin application.\nSOURCE: https://github.com/kfrancis/ocr/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic App()\n{\n    InitializeComponent();\n\n    DependencyService.RegisterSingleton(OcrPlugin.Default);\n\n    MainPage = new MainPage();\n}\n```\n\n----------------------------------------\n\nTITLE: Using OCR Plugin in Xamarin without DI Framework\nDESCRIPTION: This code snippet demonstrates how to use the OcrPlugin.Default property to access the IOcrService instance in a Xamarin application without a dependency injection framework.\nSOURCE: https://github.com/kfrancis/ocr/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly IOcrService _ocr;\n\npublic MainPage(IOcrService? ocr)\n{\n    InitializeComponent();\n\n    _ocr = ocr ?? OcrPlugin.Default;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime with FileSystem\nDESCRIPTION: Asynchronous method that demonstrates how to access deployed assets using the FileSystem API. The example opens a file named AboutAssets.txt from the app package and reads its contents using StreamReader.\nSOURCE: https://github.com/kfrancis/ocr/blob/main/samples/Plugin.Maui.Feature.Sample/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OCR Dependencies to Android Manifest\nDESCRIPTION: Specifies the necessary meta-data entry in the AndroidManifest.xml file to include OCR dependencies for Android applications.\nSOURCE: https://github.com/kfrancis/ocr/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<application ..>\n  <meta-data android:name=\"com.google.mlkit.vision.DEPENDENCIES\" android:value=\"ocr\" />\n</application>\n```\n\n----------------------------------------\n\nTITLE: Accessing Assets with AssetManager in C#\nDESCRIPTION: Demonstrates how to open and read files from the assets directory using the Android AssetManager in a Xamarin.Android Activity class.\nSOURCE: https://github.com/kfrancis/ocr/blob/main/samples/Plugin.Xamarin.OCR.Sample/Plugin.Xamarin.OCR.Sample.Android/Assets/AboutAssets.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ReadAsset : Activity\n{\n    protected override void OnCreate (Bundle bundle)\n    {\n        base.OnCreate (bundle);\n\n        InputStream input = Assets.Open (\"my_asset.txt\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in MAUI Project\nDESCRIPTION: Configuration in the .csproj file to include raw assets for deployment with the MAUI application. The MauiAsset Build Action targets all files in the Resources/Raw directory and preserves their paths.\nSOURCE: https://github.com/kfrancis/ocr/blob/main/samples/Plugin.Maui.Feature.Sample/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Font Assets in Android\nDESCRIPTION: Shows how to load a custom font file from the assets directory using the Typeface class in Android.\nSOURCE: https://github.com/kfrancis/ocr/blob/main/samples/Plugin.Xamarin.OCR.Sample/Plugin.Xamarin.OCR.Sample.Android/Assets/AboutAssets.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTypeface tf = Typeface.CreateFromAsset (Context.Assets, \"fonts/samplefont.ttf\");\n```\n\n----------------------------------------\n\nTITLE: Generating Resource IDs in C# for Android\nDESCRIPTION: Shows the structure of the automatically generated Resource class in C# that provides access to resource IDs for drawables, layouts, and strings. These IDs are used to reference resources in the Android application code.\nSOURCE: https://github.com/kfrancis/ocr/blob/main/samples/Plugin.Xamarin.OCR.Sample/Plugin.Xamarin.OCR.Sample.Android/Resources/AboutResources.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Resource {\n    public class drawable {\n        public const int icon = 0x123;\n    }\n\n    public class layout {\n        public const int main = 0x456;\n    }\n\n    public class strings {\n        public const int first_string = 0xabc;\n        public const int second_string = 0xbcd;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Android Resource Directories\nDESCRIPTION: Demonstrates the typical directory structure for organizing various types of resources in an Android application, including drawables, layouts, and string values.\nSOURCE: https://github.com/kfrancis/ocr/blob/main/samples/Plugin.Xamarin.OCR.Sample/Plugin.Xamarin.OCR.Sample.Android/Resources/AboutResources.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nResources/\n    drawable-hdpi/\n        icon.png\n\n    drawable-ldpi/\n        icon.png\n\n    drawable-mdpi/\n        icon.png\n\n    layout/\n        main.xml\n\n    values/\n        strings.xml\n```"
  }
]