[
  {
    "owner": "tidyverse",
    "repo": "multidplyr",
    "content": "TITLE: Summarizing Partitioned Data\nDESCRIPTION: Example of performing computations on partitioned data and collecting results back to the host session.\nSOURCE: https://github.com/tidyverse/multidplyr/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nflight_dest %>% \n  summarise(delay = mean(dep_delay, na.rm = TRUE), n = n()) %>% \n  collect()\n```\n\n----------------------------------------\n\nTITLE: Data Partitioning with NYC Flights Dataset\nDESCRIPTION: Shows how to partition an existing dataset across cluster workers using group_by and partition functions.\nSOURCE: https://github.com/tidyverse/multidplyr/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nlibrary(nycflights13)\n\nflight_dest <- flights %>% group_by(dest) %>% partition(cluster)\nflight_dest\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Multidplyr Cluster\nDESCRIPTION: Example showing how to create a cluster with 4 workers and load the dplyr library across all cluster nodes.\nSOURCE: https://github.com/tidyverse/multidplyr/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nlibrary(multidplyr)\n\ncluster <- new_cluster(4)\ncluster_library(cluster, \"dplyr\")\n```\n\n----------------------------------------\n\nTITLE: Distributed File Reading with Multidplyr\nDESCRIPTION: Demonstrates how to read different files on each worker node and create a partitioned data frame.\nSOURCE: https://github.com/tidyverse/multidplyr/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\n# Create a filename vector containing different values on each worker\ncluster_assign_each(cluster, filename = c(\"a.csv\", \"b.csv\", \"c.csv\", \"d.csv\"))\n\n# Use vroom to quickly load the csvs\ncluster_send(cluster, my_data <- vroom::vroom(filename))\n\n# Create a party_df using the my_data variable on each worker\nmy_data <- party_df(cluster, \"my_data\")\n```\n\n----------------------------------------\n\nTITLE: Installing Multidplyr Package\nDESCRIPTION: Commands for installing both the CRAN and development versions of the multidplyr package.\nSOURCE: https://github.com/tidyverse/multidplyr/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\ninstall.packages(\"multidplyr\")\n```\n\nLANGUAGE: r\nCODE:\n```\n# install.packages(\"pak\")\npak::pak(\"tidyverse/multidplyr\")\n```\n\n----------------------------------------\n\nTITLE: Grouping party_df by Column in R\nDESCRIPTION: This code shows how to group a party_df object by a column. The output displays the grouped structure, including the grouping variable and shard information.\nSOURCE: https://github.com/tidyverse/multidplyr/blob/main/tests/testthat/_snaps/partydf.md#2025-04-21_snippet_1\n\nLANGUAGE: R\nCODE:\n```\ngroup_by(df, y)\n```\n\n----------------------------------------\n\nTITLE: Constructing and Printing party_df in R\nDESCRIPTION: This snippet demonstrates the creation and printing of a party_df object. It shows the output format, including the source, number of shards, and a preview of the data.\nSOURCE: https://github.com/tidyverse/multidplyr/blob/main/tests/testthat/_snaps/partydf.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ndf\n```\n\n----------------------------------------\n\nTITLE: Joining Data Frames with multidplyr in R\nDESCRIPTION: This code attempts to perform a left join between a multidplyr_party_df object (pf) and a regular data.frame (df). The operation fails because the two data frames have different sources, and explicit copying is required.\nSOURCE: https://github.com/tidyverse/multidplyr/blob/main/tests/testthat/_snaps/dplyr-dual.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nleft_join(pf, df)\n```\n\n----------------------------------------\n\nTITLE: Testing error propagation from workers in cluster_call in R\nDESCRIPTION: Verifies that errors occurring in worker processes are properly propagated back to the main process with an informative error message.\nSOURCE: https://github.com/tidyverse/multidplyr/blob/main/tests/testthat/_snaps/cluster-call.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\ncluster_call(cl, stop(\"!!\"))\n```\n\n----------------------------------------\n\nTITLE: Testing worker identification in error messages in R\nDESCRIPTION: Tests that error messages from cluster workers include the ID of the failing worker, providing better debugging information for cluster computations.\nSOURCE: https://github.com/tidyverse/multidplyr/blob/main/tests/testthat/_snaps/cluster-call.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\ncluster_call(cl, f(x))\n```\n\n----------------------------------------\n\nTITLE: Testing Default Cluster Print Method in R\nDESCRIPTION: This code snippet demonstrates the print method for a cluster object created with default_cluster(). When printed, it shows a summary line indicating the number of sessions (2) in the cluster.\nSOURCE: https://github.com/tidyverse/multidplyr/blob/main/tests/testthat/_snaps/cluster.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\ncl <- default_cluster()\ncl\n```\n\n----------------------------------------\n\nTITLE: Testing input validation in cluster_call function in R\nDESCRIPTION: Tests that the cluster_call function properly validates the simplify parameter and throws an appropriate error if an invalid value is provided.\nSOURCE: https://github.com/tidyverse/multidplyr/blob/main/tests/testthat/_snaps/cluster-call.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\ncluster_call(cl, 1, simplify = \"x\")\n```\n\n----------------------------------------\n\nTITLE: Testing backward compatibility with ptype parameter in R\nDESCRIPTION: Tests backward compatibility with the old ptype interface, verifying that it still works but produces a warning message advising the user to use simplify=TRUE instead.\nSOURCE: https://github.com/tidyverse/multidplyr/blob/main/tests/testthat/_snaps/cluster-call.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nout <- cluster_call(cl, 1, ptype = double())\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Non-existent Data in party_df in R\nDESCRIPTION: This snippet illustrates an error case when trying to create a party_df with non-existent data. It shows the error message when the specified object doesn't exist on all workers.\nSOURCE: https://github.com/tidyverse/multidplyr/blob/main/tests/testthat/_snaps/partydf.md#2025-04-21_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nparty_df(cl, \"x\")\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Inconsistent Data Frame Names in party_df in R\nDESCRIPTION: This snippet shows the error message when trying to create a party_df with data frames that have inconsistent names across workers.\nSOURCE: https://github.com/tidyverse/multidplyr/blob/main/tests/testthat/_snaps/partydf.md#2025-04-21_snippet_4\n\nLANGUAGE: R\nCODE:\n```\nparty_df(cl, \"x\")\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Non-Data Frame Input in party_df in R\nDESCRIPTION: This code demonstrates the error handling when attempting to create a party_df with an input that is not a data frame on all workers.\nSOURCE: https://github.com/tidyverse/multidplyr/blob/main/tests/testthat/_snaps/partydf.md#2025-04-21_snippet_3\n\nLANGUAGE: R\nCODE:\n```\nparty_df(cl, \"x\")\n```\n\n----------------------------------------\n\nTITLE: Testing Default Cluster Creation Constraint in R\nDESCRIPTION: This snippet shows an error message indicating that when the default cluster has already been initiated, you cannot supply the 'n' parameter to create it again.\nSOURCE: https://github.com/tidyverse/multidplyr/blob/main/tests/testthat/_snaps/cluster.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nCan not supply `n` when cluster has already been initiated\n```"
  }
]