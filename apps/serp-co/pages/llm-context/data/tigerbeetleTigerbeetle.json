[
  {
    "owner": "tigerbeetle",
    "repo": "tigerbeetle",
    "content": "TITLE: Starting TigerBeetle Server\nDESCRIPTION: Starts a TigerBeetle server instance listening on port 3000 in development mode.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/start.md#2025-04-14_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n./tigerbeetle start --addresses=3000 --development ./0_0.tigerbeetle\n```\n\n----------------------------------------\n\nTITLE: Querying Transfers with Filtering and Pagination in TigerBeetle using C#\nDESCRIPTION: Queries transfers with filtering by UserData, Code, and other parameters. The example demonstrates filtering by specific UserData values, Code value, and sorting results in reverse-chronological order with a limit of 10 transfers.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nvar filter = new QueryFilter\n{\n    UserData128 = 1000, // Filter by UserData\n    UserData64 = 100,\n    UserData32 = 10,\n    Code = 1, // Filter by Code\n    Ledger = 0, // No filter by Ledger\n    TimestampMin = 0, // No filter by Timestamp.\n    TimestampMax = 0, // No filter by Timestamp.\n    Limit = 10, // Limit to ten balances at most.\n    Flags = QueryFilterFlags.Reversed, // Sort by timestamp in reverse-chronological order.\n};\n\nTransfer[] transfers = client.QueryTransfers(filter);\n```\n\n----------------------------------------\n\nTITLE: Implementing Linked Events for Atomic Operations in JavaScript\nDESCRIPTION: Demonstrates how to create chains of linked transfers that succeed or fail together atomically. The example shows various scenarios: individual transfers, chains of transfers (both successful and failing), and how events within a chain are executed in order or rolled back on error.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst batch = []; // Array of transfer to create.\nlet linkedFlag = 0;\nlinkedFlag |= TransferFlags.linked;\n\n// An individual transfer (successful):\nbatch.push({ id: 1n /* , ... */ });\n\n// A chain of 4 transfers (the last transfer in the chain closes the chain with linked=false):\nbatch.push({ id: 2n, /* ..., */ flags: linkedFlag }); // Commit/rollback.\nbatch.push({ id: 3n, /* ..., */ flags: linkedFlag }); // Commit/rollback.\nbatch.push({ id: 2n, /* ..., */ flags: linkedFlag }); // Fail with exists\nbatch.push({ id: 4n, /* ..., */ flags: 0 }); // Fail without committing.\n\n// An individual transfer (successful):\n// This should not see any effect from the failed chain above.\nbatch.push({ id: 2n, /* ..., */ flags: 0 });\n\n// A chain of 2 transfers (the first transfer fails the chain):\nbatch.push({ id: 2n, /* ..., */ flags: linkedFlag });\nbatch.push({ id: 3n, /* ..., */ flags: 0 });\n\n// A chain of 2 transfers (successful):\nbatch.push({ id: 3n, /* ..., */ flags: linkedFlag });\nbatch.push({ id: 4n, /* ..., */ flags: 0 });\n\nconst transfer_errors = await client.createTransfers(batch);\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting TigerBeetle Cluster on Linux\nDESCRIPTION: This snippet shows how to download TigerBeetle, format a data file, and start a single-replica cluster in development mode on Linux.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/README.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ curl -Lo tigerbeetle.zip https://linux.tigerbeetle.com && unzip tigerbeetle.zip && ./tigerbeetle version\n$ ./tigerbeetle format --cluster=0 --replica=0 --replica-count=1 --development 0_0.tigerbeetle\n$ ./tigerbeetle start --addresses=3000 --development 0_0.tigerbeetle\n```\n\n----------------------------------------\n\nTITLE: Starting TigerBeetle Server with Docker\nDESCRIPTION: Command to run a TigerBeetle server using Docker with port mapping and volume mounting. This starts a single-node TigerBeetle instance listening on port 3000.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/operating/deploying/docker.md#2025-04-14_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndocker run -it --security-opt seccomp=unconfined \\\n    -p 3000:3000 -v $(pwd)/data:/data ghcr.io/tigerbeetle/tigerbeetle \\\n    start --addresses=0.0.0.0:3000 /data/0_0.tigerbeetle\n```\n\n----------------------------------------\n\nTITLE: Querying Transfers with Filtering in TigerBeetle\nDESCRIPTION: Shows how to query transfers by multiple criteria including user data fields, code, ledger, and timestamp range. Results are sorted by timestamp and can be paginated. This is a preview API subject to future changes.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nquery_filter = tb.QueryFilter(\n    user_data_128=1000, # Filter by UserData.\n    user_data_64=100,\n    user_data_32=10,\n    code=1, # Filter by Code.\n    ledger=0, # No filter by Ledger.\n    timestamp_min=0, # No filter by Timestamp.\n    timestamp_max=0, # No filter by Timestamp.\n    limit=10, # Limit to ten balances at most.\n    flags=tb.QueryFilterFlags.REVERSED, # Sort by timestamp in reverse-chronological order.\n)\n\nquery_transfers = client.query_transfers(query_filter)\n```\n\n----------------------------------------\n\nTITLE: Creating and Voiding Pending Transfers in Java with TigerBeetle\nDESCRIPTION: This snippet shows how to create a pending transfer and then void it using the TigerBeetle Java client. It demonstrates the two-phase transfer process for creating and canceling a pending transfer.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nTransferBatch transfers = new TransferBatch(1);\n\ntransfers.add();\ntransfers.setId(8);\ntransfers.setDebitAccountId(102);\ntransfers.setCreditAccountId(103);\ntransfers.setAmount(10);\ntransfers.setLedger(1);\ntransfers.setCode(1);\ntransfers.setFlags(TransferFlags.PENDING);\n\nCreateTransferResultBatch transferErrors = client.createTransfers(transfers);\n// Error handling omitted.\n\ntransfers = new TransferBatch(1);\n\ntransfers.add();\ntransfers.setId(9);\ntransfers.setAmount(0);\ntransfers.setPendingId(8);\ntransfers.setFlags(TransferFlags.VOID_PENDING_TRANSFER);\n\ntransferErrors = client.createTransfers(transfers);\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Implementing Linked Event Chains in C#\nDESCRIPTION: Demonstrates creating batches of transfers with linked events that execute atomically. Shows how to chain multiple transfers together where they either all succeed or all fail, and how individual transfers can coexist with chains in the same batch.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_21\n\nLANGUAGE: cs\nCODE:\n```\nvar batch = new System.Collections.Generic.List<Transfer>();\n\n// An individual transfer (successful):\nbatch.Add(new Transfer { Id = 1, /* ... rest of transfer ... */ });\n\n// A chain of 4 transfers (the last transfer in the chain closes the chain with linked=false):\nbatch.Add(new Transfer { Id = 2, /* ... rest of transfer ... */ Flags = TransferFlags.Linked }); // Commit/rollback.\nbatch.Add(new Transfer { Id = 3, /* ... rest of transfer ... */ Flags = TransferFlags.Linked }); // Commit/rollback.\nbatch.Add(new Transfer { Id = 2, /* ... rest of transfer ... */ Flags = TransferFlags.Linked }); // Fail with exists\nbatch.Add(new Transfer { Id = 4, /* ... rest of transfer ... */ }); // Fail without committing\n\n// An individual transfer (successful):\n// This should not see any effect from the failed chain above.\nbatch.Add(new Transfer { Id = 2, /* ... rest of transfer ... */ });\n\n// A chain of 2 transfers (the first transfer fails the chain):\nbatch.Add(new Transfer { Id = 2, /* ... rest of transfer ... */ Flags = TransferFlags.Linked });\nbatch.Add(new Transfer { Id = 3, /* ... rest of transfer ... */ });\n\n// A chain of 2 transfers (successful):\nbatch.Add(new Transfer { Id = 3, /* ... rest of transfer ... */ Flags = TransferFlags.Linked });\nbatch.Add(new Transfer { Id = 4, /* ... rest of transfer ... */ });\n\nvar transferErrors = client.CreateTransfers(batch.ToArray());\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle on Linux\nDESCRIPTION: Downloads and extracts the TigerBeetle binary for Linux systems, then verifies the installation by checking the version.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/start.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncurl -Lo tigerbeetle.zip https://linux.tigerbeetle.com && unzip tigerbeetle.zip && ./tigerbeetle version\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Balances with Filtering in TigerBeetle\nDESCRIPTION: Shows how to fetch historical balances for an account with filtering options. Only works with accounts created with the 'history' flag. The example demonstrates pagination and filtering options. This is a preview API subject to future changes.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfilter = tb.AccountFilter(\n    account_id=2,\n    user_data_128=0, # No filter by UserData.\n    user_data_64=0,\n    user_data_32=0,\n    code=0, # No filter by Code.\n    timestamp_min=0, # No filter by Timestamp.\n    timestamp_max=0, # No filter by Timestamp.\n    limit=10, # Limit to ten balances at most.\n    flags=tb.AccountFilterFlags.DEBITS | # Include transfer from the debit side.\n    tb.AccountFilterFlags.CREDITS | # Include transfer from the credit side.\n    tb.AccountFilterFlags.REVERSED, # Sort by timestamp in reverse-chronological order.\n)\n\naccount_balances = client.get_account_balances(filter)\n```\n\n----------------------------------------\n\nTITLE: Creating a TigerBeetle Client in Go\nDESCRIPTION: Code to initialize a TigerBeetle client with a cluster ID and replica addresses. The client is thread-safe and should be shared between concurrent tasks for optimal performance.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntbAddress := os.Getenv(\"TB_ADDRESS\")\nif len(tbAddress) == 0 {\n\ttbAddress = \"3000\"\n}\nclient, err := NewClient(ToUint128(0), []string{tbAddress})\nif err != nil {\n\tlog.Printf(\"Error creating client: %s\", err)\n\treturn\n}\ndefer client.Close()\n```\n\n----------------------------------------\n\nTITLE: Managing Linked Events in TigerBeetle using Java\nDESCRIPTION: Shows how to create chains of linked events that succeed or fail together. Events within a chain are executed in order and rolled back on error.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nTransferBatch transfers = new TransferBatch(10);\n\n// An individual transfer (successful):\ntransfers.add();\ntransfers.setId(1);\n// ... rest of transfer ...\ntransfers.setFlags(TransferFlags.NONE);\n\n// A chain of 4 transfers (the last transfer in the chain closes the chain with\n// linked=false):\ntransfers.add();\ntransfers.setId(2); // Commit/rollback.\n// ... rest of transfer ...\ntransfers.setFlags(TransferFlags.LINKED);\ntransfers.add();\ntransfers.setId(3); // Commit/rollback.\n// ... rest of transfer ...\ntransfers.setFlags(TransferFlags.LINKED);\ntransfers.add();\ntransfers.setId(2); // Fail with exists\n// ... rest of transfer ...\ntransfers.setFlags(TransferFlags.LINKED);\ntransfers.add();\ntransfers.setId(4); // Fail without committing\n// ... rest of transfer ...\ntransfers.setFlags(TransferFlags.NONE);\n\n// An individual transfer (successful):\n// This should not see any effect from the failed chain above.\ntransfers.add();\ntransfers.setId(2);\n// ... rest of transfer ...\ntransfers.setFlags(TransferFlags.NONE);\n\n// A chain of 2 transfers (the first transfer fails the chain):\ntransfers.add();\ntransfers.setId(2);\n// ... rest of transfer ...\ntransfers.setFlags(TransferFlags.LINKED);\ntransfers.add();\ntransfers.setId(3);\n// ... rest of transfer ...\ntransfers.setFlags(TransferFlags.NONE);\n// A chain of 2 transfers (successful):\ntransfers.add();\ntransfers.setId(3);\n// ... rest of transfer ...\ntransfers.setFlags(TransferFlags.LINKED);\ntransfers.add();\ntransfers.setId(4);\n// ... rest of transfer ...\ntransfers.setFlags(TransferFlags.NONE);\n\nCreateTransferResultBatch transferErrors = client.createTransfers(transfers);\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Deploying a Three-Replica TigerBeetle Cluster on a Single Machine\nDESCRIPTION: This bash script demonstrates how to download TigerBeetle, format data files for a three-replica cluster (identified as cluster 0), and start all three replicas on a single machine using different ports. This is suitable for testing but not for production use.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/operating/deploying/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Lo tigerbeetle.zip https://linux.tigerbeetle.com && unzip tigerbeetle.zip && ./tigerbeetle version\n./tigerbeetle format --cluster=0 --replica-count=3 --replica=0 ./0_0.tigerbeetle\n./tigerbeetle format --cluster=0 --replica-count=3 --replica=1 ./0_1.tigerbeetle\n./tigerbeetle format --cluster=0 --replica-count=3 --replica=2 ./0_2.tigerbeetle\n\n./tigerbeetle start --addresses=127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002 ./0_0.tigerbeetle &\n./tigerbeetle start --addresses=127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002 ./0_1.tigerbeetle &\n./tigerbeetle start --addresses=127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002 ./0_2.tigerbeetle &\n```\n\n----------------------------------------\n\nTITLE: Importing Historical Events with Custom Timestamps in C#\nDESCRIPTION: Shows how to import historical events (accounts and transfers) with user-defined timestamps. The implementation ensures atomic operations by linking events together and handles both account and transfer imports with proper timestamp sequencing.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_22\n\nLANGUAGE: cs\nCODE:\n```\n// External source of time\nulong historicalTimestamp = 0UL;\nvar historicalAccounts = new Account[] { /* Loaded from an external source */ };\nvar historicalTransfers = new Transfer[] { /* Loaded from an external source */ };\n\n// First, load and import all accounts with their timestamps from the historical source.\nvar accountsBatch = new System.Collections.Generic.List<Account>();\nfor (var index = 0; index < historicalAccounts.Length; index++)\n{\n    var account = historicalAccounts[index];\n\n    // Set a unique and strictly increasing timestamp.\n    historicalTimestamp += 1;\n    account.Timestamp = historicalTimestamp;\n    // Set the account as `imported`.\n    account.Flags = AccountFlags.Imported;\n    // To ensure atomicity, the entire batch (except the last event in the chain)\n    // must be `linked`.\n    if (index < historicalAccounts.Length - 1)\n    {\n        account.Flags |= AccountFlags.Linked;\n    }\n\n    accountsBatch.Add(account);\n}\n\nvar accountErrors = client.CreateAccounts(accountsBatch.ToArray());\n// Error handling omitted.\n\n// Then, load and import all transfers with their timestamps from the historical source.\nvar transfersBatch = new System.Collections.Generic.List<Transfer>();\nfor (var index = 0; index < historicalTransfers.Length; index++)\n{\n    var transfer = historicalTransfers[index];\n\n    // Set a unique and strictly increasing timestamp.\n    historicalTimestamp += 1;\n    transfer.Timestamp = historicalTimestamp;\n    // Set the account as `imported`.\n    transfer.Flags = TransferFlags.Imported;\n    // To ensure atomicity, the entire batch (except the last event in the chain)\n    // must be `linked`.\n    if (index < historicalTransfers.Length - 1)\n    {\n        transfer.Flags |= TransferFlags.Linked;\n    }\n\n    transfersBatch.Add(transfer);\n}\n\nvar transferErrors = client.CreateTransfers(transfersBatch.ToArray());\n// Error handling omitted.\n// Since it is a linked chain, in case of any error the entire batch is rolled back and can be retried\n// with the same historical timestamps without regressing the cluster timestamp.\n```\n\n----------------------------------------\n\nTITLE: Performing TigerBeetle Operations via REPL\nDESCRIPTION: This snippet demonstrates how to connect to a TigerBeetle cluster using the REPL, create accounts, make a transfer, and lookup account information.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/README.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ./tigerbeetle repl --cluster=0 --addresses=3000\n> create_accounts id=1 code=10 ledger=700,\n                  id=2 code=10 ledger=700;\n> create_transfers id=1 debit_account_id=1 credit_account_id=2 amount=10 ledger=700 code=10;\n> lookup_accounts id=1, id=2;\n{\n  \"id\": \"1\",\n  \"user_data\": \"0\",\n  \"ledger\": \"700\",\n  \"code\": \"10\",\n  \"flags\": \"\",\n  \"debits_pending\": \"0\",\n  \"debits_posted\": \"10\",\n  \"credits_pending\": \"0\",\n  \"credits_posted\": \"0\"\n}\n{\n  \"id\": \"2\",\n  \"user_data\": \"0\",\n  \"ledger\": \"700\",\n  \"code\": \"10\",\n  \"flags\": \"\",\n  \"debits_pending\": \"0\",\n  \"debits_posted\": \"0\",\n  \"credits_pending\": \"0\",\n  \"credits_posted\": \"10\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Linked Events in TigerBeetle with Go\nDESCRIPTION: This example demonstrates how to create chains of linked events (transfers) in TigerBeetle. Linked events succeed or fail as a unit, with each event in a chain being visible to subsequent events in the chain. Multiple chains can coexist in a batch to succeed or fail independently.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nbatch := []Transfer{}\nlinkedFlag := TransferFlags{Linked: true}.ToUint16()\n\n// An individual transfer (successful):\nbatch = append(batch, Transfer{ID: ToUint128(1) /* ... rest of transfer ... */})\n\n// A chain of 4 transfers (the last transfer in the chain closes the chain with linked=false):\nbatch = append(batch, Transfer{ID: ToUint128(2) /* ... , */, Flags: linkedFlag}) // Commit/rollback.\nbatch = append(batch, Transfer{ID: ToUint128(3) /* ... , */, Flags: linkedFlag}) // Commit/rollback.\nbatch = append(batch, Transfer{ID: ToUint128(2) /* ... , */, Flags: linkedFlag}) // Fail with exists\nbatch = append(batch, Transfer{ID: ToUint128(4) /* ... , */})                    // Fail without committing\n\n// An individual transfer (successful):\n// This should not see any effect from the failed chain above.\nbatch = append(batch, Transfer{ID: ToUint128(2) /* ... rest of transfer ... */})\n\n// A chain of 2 transfers (the first transfer fails the chain):\nbatch = append(batch, Transfer{ID: ToUint128(2) /* ... rest of transfer ... */, Flags: linkedFlag})\nbatch = append(batch, Transfer{ID: ToUint128(3) /* ... rest of transfer ... */})\n\n// A chain of 2 transfers (successful):\nbatch = append(batch, Transfer{ID: ToUint128(3) /* ... rest of transfer ... */, Flags: linkedFlag})\nbatch = append(batch, Transfer{ID: ToUint128(4) /* ... rest of transfer ... */})\n\ntransferErrors, err := client.CreateTransfers(batch)\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Creating Transfers and Handling Errors in Java with TigerBeetle\nDESCRIPTION: This snippet demonstrates how to create a batch of transfers using the TigerBeetle Java client and handle potential errors in the response. It shows the creation of three transfers and error handling for different scenarios.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nTransferBatch transfers = new TransferBatch(3);\n\ntransfers.add();\ntransfers.setId(1);\ntransfers.setDebitAccountId(102);\ntransfers.setCreditAccountId(103);\ntransfers.setAmount(10);\ntransfers.setLedger(1);\ntransfers.setCode(1);\n\ntransfers.add();\ntransfers.setId(2);\ntransfers.setDebitAccountId(102);\ntransfers.setCreditAccountId(103);\ntransfers.setAmount(10);\ntransfers.setLedger(1);\ntransfers.setCode(1);\n\ntransfers.add();\ntransfers.setId(3);\ntransfers.setDebitAccountId(102);\ntransfers.setCreditAccountId(103);\ntransfers.setAmount(10);\ntransfers.setLedger(1);\ntransfers.setCode(1);\n\nCreateTransferResultBatch transferErrors = client.createTransfers(transfers);\nwhile (transferErrors.next()) {\n    switch (transferErrors.getResult()) {\n        case ExceedsCredits:\n            System.err.printf(\"Batch transfer at %d already exists.\\n\",\n                    transferErrors.getIndex());\n            break;\n\n        default:\n            System.err.printf(\"Batch transfer at %d failed to create: %s\\n\",\n                    transferErrors.getIndex(), transferErrors.getResult());\n            break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Historical Events in TigerBeetle\nDESCRIPTION: Shows how to import historical accounts and transfers with custom timestamps. Demonstrates proper usage of IMPORTED and LINKED flags to ensure atomic batch processing and maintain timestamp consistency.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# External source of time.\nhistorical_timestamp = 0\n# Events loaded from an external source.\nhistorical_accounts = [] # Loaded from an external source.\nhistorical_transfers = [] # Loaded from an external source.\n\n# First, load and import all accounts with their timestamps from the historical source.\naccounts = []\nfor index, account in enumerate(historical_accounts):\n    # Set a unique and strictly increasing timestamp.\n    historical_timestamp += 1\n    account.timestamp = historical_timestamp\n    # Set the account as `imported`.\n    account.flags = tb.AccountFlags.IMPORTED\n    # To ensure atomicity, the entire batch (except the last event in the chain)\n    # must be `linked`.\n    if index < len(historical_accounts) - 1:\n        account.flags |= tb.AccountFlags.LINKED\n\n    accounts.append(account)\n\naccount_errors = client.create_accounts(accounts)\n# Error handling omitted.\n\n# The, load and import all transfers with their timestamps from the historical source.\ntransfers = []\nfor index, transfer in enumerate(historical_transfers):\n    # Set a unique and strictly increasing timestamp.\n    historical_timestamp += 1\n    transfer.timestamp = historical_timestamp\n    # Set the account as `imported`.\n    transfer.flags = tb.TransferFlags.IMPORTED\n    # To ensure atomicity, the entire batch (except the last event in the chain)\n    # must be `linked`.\n    if index < len(historical_transfers) - 1:\n        transfer.flags |= tb.AccountFlags.LINKED\n\n    transfers.append(transfer)\n\ntransfer_errors = client.create_transfers(transfers)\n# Error handling omitted.\n\n# Since it is a linked chain, in case of any error the entire batch is rolled back and can be retried\n# with the same historical timestamps without regressing the cluster timestamp.\n```\n\n----------------------------------------\n\nTITLE: Creating a TigerBeetle Client in Node.js\nDESCRIPTION: Example of creating a TigerBeetle client with a cluster ID and replica address.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = createClient({\n  cluster_id: 0n,\n  replica_addresses: [process.env.TB_ADDRESS || \"3000\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Single Debit, Multiple Credits Transfer in TigerBeetle\nDESCRIPTION: This snippet demonstrates how to structure a transfer with one debit account and multiple credit accounts using linked transfers in TigerBeetle. It uses a source account 'A' and three destination accounts 'X', 'Y', and 'Z' on the USD ledger.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/coding/recipes/multi-debit-credit-transfers.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Ledger | Debit Account | Credit Account | Amount | `flags.linked` |\n| -----: | ------------: | -------------: | -----: | -------------: |\n|    USD |           `A` |            `X` |  10000 |           true |\n|    USD |           `A` |            `Y` |     50 |           true |\n|    USD |           `A` |            `Z` |     10 |          false |\n```\n\n----------------------------------------\n\nTITLE: Efficient Batched Transfer Creation in Go\nDESCRIPTION: The recommended approach for creating transfers by batching multiple transfers in a single API call, up to the server's maximum batch size limit (default 8189), which significantly improves performance.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nbatch := []Transfer{}\nBATCH_SIZE := 8189\nfor i := 0; i < len(batch); i += BATCH_SIZE {\n\tsize := BATCH_SIZE\n\tif i+BATCH_SIZE > len(batch) {\n\t\tsize = len(batch) - i\n\t}\n\ttransferErrors, err := client.CreateTransfers(batch[i : i+size])\n\t_, _ = transferErrors, err // Error handling omitted.\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Accounts with Filtering and Pagination in TigerBeetle using C#\nDESCRIPTION: Queries accounts with filtering by UserData, Code, and other parameters. The example demonstrates filtering by specific UserData values, Code value, and sorting results in reverse-chronological order with a limit of 10 accounts.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nvar filter = new QueryFilter\n{\n    UserData128 = 1000, // Filter by UserData.\n    UserData64 = 100,\n    UserData32 = 10,\n    Code = 1, // Filter by Code.\n    Ledger = 0, // No filter by Ledger.\n    TimestampMin = 0, // No filter by Timestamp.\n    TimestampMax = 0, // No filter by Timestamp.\n    Limit = 10, // Limit to ten balances at most.\n    Flags = QueryFilterFlags.Reversed, // Sort by timestamp in reverse-chronological order.\n};\n\nAccount[] accounts = client.QueryAccounts(filter);\n```\n\n----------------------------------------\n\nTITLE: Creating Accounts in TigerBeetle using Java\nDESCRIPTION: Creates an account batch and adds a single account with specified properties. The account is given a unique time-based ID, ledger and code values, and flags that control account behavior. The batch is then submitted to TigerBeetle.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nAccountBatch accounts = new AccountBatch(1);\naccounts.add();\naccounts.setId(UInt128.id()); // TigerBeetle time-based ID.\naccounts.setUserData128(0, 0);\naccounts.setUserData64(0);\naccounts.setUserData32(0);\naccounts.setLedger(1);\naccounts.setCode(718);\naccounts.setFlags(AccountFlags.NONE);\naccounts.setTimestamp(0);\n\nCreateAccountResultBatch accountErrors = client.createAccounts(accounts);\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Debits, Single Credit Transfer in TigerBeetle\nDESCRIPTION: This snippet shows how to structure a transfer with multiple debit accounts and one credit account using linked transfers in TigerBeetle. It uses three source accounts 'A', 'B', and 'C' and a destination account 'X' on the USD ledger.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/coding/recipes/multi-debit-credit-transfers.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Ledger | Debit Account | Credit Account | Amount | `flags.linked` |\n| -----: | ------------: | -------------: | -----: | -------------: |\n|    USD |           `A` |            `X` |  10000 |           true |\n|    USD |           `B` |            `X` |     50 |           true |\n|    USD |           `C` |            `X` |     10 |          false |\n```\n\n----------------------------------------\n\nTITLE: Building TigerBeetle from Source\nDESCRIPTION: Instructions for cloning the TigerBeetle repository, downloading Zig, building the project, and verifying the installation.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/HACKING.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/tigerbeetle/tigerbeetle.git\ncd tigerbeetle\n./zig/download.sh # .bat if you're on Windows.\n./zig/zig build -Drelease\n./tigerbeetle version\n```\n\n----------------------------------------\n\nTITLE: Creating and Posting a Pending Transfer in TigerBeetle using C#\nDESCRIPTION: Demonstrates a two-phase transfer process where a pending transfer is first created with TransferFlags.Pending, and then posted with TransferFlags.PostPendingTransfer. This moves the pending amounts to posted balances.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nvar transfer0 = new Transfer\n{\n    Id = 6,\n    DebitAccountId = 102,\n    CreditAccountId = 103,\n    Amount = 10,\n    Ledger = 1,\n    Code = 1,\n    Flags = TransferFlags.Pending,\n};\n\nvar transferErrors = client.CreateTransfers(new[] { transfer0 });\n// Error handling omitted.\n\nvar transfer1 = new Transfer\n{\n    Id = 7,\n    // Post the entire pending amount.\n    Amount = Transfer.AmountMax,\n    PendingId = 6,\n    Flags = TransferFlags.PostPendingTransfer,\n};\n\ntransferErrors = client.CreateTransfers(new[] { transfer1 });\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Get Account Balances Implementation\nDESCRIPTION: Preview API implementation for fetching historical account balances with filtering and pagination capabilities.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst filter = {\n  account_id: 2n,\n  user_data_128: 0n, // No filter by UserData.\n  user_data_64: 0n,\n  user_data_32: 0,\n  code: 0, // No filter by Code.\n  timestamp_min: 0n, // No filter by Timestamp.\n  timestamp_max: 0n, // No filter by Timestamp.\n  limit: 10, // Limit to ten balances at most.\n  flags: AccountFilterFlags.debits | // Include transfer from the debit side.\n    AccountFilterFlags.credits | // Include transfer from the credit side.\n    AccountFilterFlags.reversed, // Sort by timestamp in reverse-chronological order.\n};\n\nconst account_balances = await client.getAccountBalances(filter);\n```\n\n----------------------------------------\n\nTITLE: Getting Account Transfers with Filtering in Go\nDESCRIPTION: Example showing how to retrieve transfers involving a specific account with filtering options. This preview API supports pagination and sorting by timestamp in either chronological or reverse-chronological order.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nfilter := AccountFilter{\n\tAccountID:    ToUint128(2),\n\tUserData128:  ToUint128(0), // No filter by UserData.\n\tUserData64:   0,\n\tUserData32:   0,\n\tCode:         0,  // No filter by Code.\n\tTimestampMin: 0,  // No filter by Timestamp.\n\tTimestampMax: 0,  // No filter by Timestamp.\n\tLimit:        10, // Limit to ten transfers at most.\n\tFlags: AccountFilterFlags{\n\t\tDebits:   true, // Include transfer from the debit side.\n\t\tCredits:  true, // Include transfer from the credit side.\n\t\tReversed: true, // Sort by timestamp in reverse-chronological order.\n\t}.ToUint32(),\n}\n\ntransfers, err := client.GetAccountTransfers(filter)\n```\n\n----------------------------------------\n\nTITLE: Importing Historical Events with User-Defined Timestamps in JavaScript\nDESCRIPTION: Shows how to import historical accounts and transfers with user-defined timestamps. This example demonstrates setting the 'imported' flag and using linked events to ensure atomicity when importing batches, allowing for retries without timestamp regression if any event fails.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// External source of time.\nlet historical_timestamp = 0n\n// Events loaded from an external source.\nconst historical_accounts = []; // Loaded from an external source.\nconst historical_transfers = []; // Loaded from an external source.\n\n// First, load and import all accounts with their timestamps from the historical source.\nconst accounts = [];\nfor (let index = 0; i < historical_accounts.length; i++) {\n  let account = historical_accounts[i];\n  // Set a unique and strictly increasing timestamp.\n  historical_timestamp += 1;\n  account.timestamp = historical_timestamp;\n  // Set the account as `imported`.\n  account.flags = AccountFlags.imported;\n  // To ensure atomicity, the entire batch (except the last event in the chain)\n  // must be `linked`.\n  if (index < historical_accounts.length - 1) {\n    account.flags |= AccountFlags.linked;\n  }\n\n  accounts.push(account);\n}\n\nconst account_errors = await client.createAccounts(accounts);\n// Error handling omitted.\n\n// Then, load and import all transfers with their timestamps from the historical source.\nconst transfers = [];\nfor (let index = 0; i < historical_transfers.length; i++) {\n  let transfer = historical_transfers[i];\n  // Set a unique and strictly increasing timestamp.\n  historical_timestamp += 1;\n  transfer.timestamp = historical_timestamp;\n  // Set the account as `imported`.\n  transfer.flags = TransferFlags.imported;\n  // To ensure atomicity, the entire batch (except the last event in the chain)\n  // must be `linked`.\n  if (index < historical_transfers.length - 1) {\n    transfer.flags |= TransferFlags.linked;\n  }\n\n  transfers.push(transfer);\n}\n\nconst transfer_errors = await client.createTransfers(transfers);\n// Error handling omitted.\n\n// Since it is a linked chain, in case of any error the entire batch is rolled back and can be retried\n// with the same historical timestamps without regressing the cluster timestamp.\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Transfer Using Control Account in TigerBeetle\nDESCRIPTION: This snippet illustrates how to implement a many-to-many transfer scenario in TigerBeetle using a control account. It involves two source accounts, three destination accounts, and a control account, all on the USD ledger.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/coding/recipes/multi-debit-credit-transfers.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Ledger | Debit Account | Credit Account | Amount | `flags.linked` |\n| -----: | ------------: | -------------: | -----: | -------------: |\n|    USD |           `A` |      `Control` |  10000 |           true |\n|    USD |           `B` |      `Control` |     50 |           true |\n|    USD |     `Control` |            `X` |   9000 |           true |\n|    USD |     `Control` |            `Y` |   1000 |           true |\n|    USD |     `Control` |            `Z` |     50 |          false |\n```\n\n----------------------------------------\n\nTITLE: Get Account Transfers Implementation\nDESCRIPTION: Preview API implementation for fetching transfers associated with a specific account, including filtering and pagination capabilities.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst filter = {\n  account_id: 2n,\n  user_data_128: 0n, // No filter by UserData.\n  user_data_64: 0n,\n  user_data_32: 0,\n  code: 0, // No filter by Code.\n  timestamp_min: 0n, // No filter by Timestamp.\n  timestamp_max: 0n, // No filter by Timestamp.\n  limit: 10, // Limit to ten balances at most.\n  flags: AccountFilterFlags.debits | // Include transfer from the debit side.\n    AccountFilterFlags.credits | // Include transfer from the credit side.\n    AccountFilterFlags.reversed, // Sort by timestamp in reverse-chronological order.\n};\n\nconst account_transfers = await client.getAccountTransfers(filter);\n```\n\n----------------------------------------\n\nTITLE: Handling Transfer Creation Errors in TigerBeetle\nDESCRIPTION: Demonstrating error handling when creating transfers in TigerBeetle. This example shows how to check for specific error conditions such as transfers that already exist and other creation failures.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntransfers := []Transfer{{\n\tID:              ToUint128(1),\n\tDebitAccountID:  ToUint128(101),\n\tCreditAccountID: ToUint128(102),\n\tAmount:          ToUint128(10),\n\tLedger:          1,\n\tCode:            1,\n\tFlags:           0,\n}, {\n\tID:              ToUint128(2),\n\tDebitAccountID:  ToUint128(101),\n\tCreditAccountID: ToUint128(102),\n\tAmount:          ToUint128(10),\n\tLedger:          1,\n\tCode:            1,\n\tFlags:           0,\n}, {\n\tID:              ToUint128(3),\n\tDebitAccountID:  ToUint128(101),\n\tCreditAccountID: ToUint128(102),\n\tAmount:          ToUint128(10),\n\tLedger:          1,\n\tCode:            1,\n\tFlags:           0,\n}}\n\ntransferErrors, err := client.CreateTransfers(transfers)\nif err != nil {\n\tlog.Printf(\"Error creating transfers: %s\", err)\n\treturn\n}\n\nfor _, err := range transferErrors {\n\tswitch err.Index {\n\tcase uint32(TransferExists):\n\t\tlog.Printf(\"Batch transfer at %d already exists.\", err.Index)\n\tdefault:\n\t\tlog.Printf(\"Batch transfer at %d failed to create: %s\", err.Index, err.Result)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Historical Events with User-defined Timestamps in TigerBeetle\nDESCRIPTION: This example shows how to import historical accounts and transfers with user-defined timestamps using the 'imported' flag. The recommended approach is to submit batches as linked chains to ensure atomicity, so if any event fails, the entire batch can be rolled back and retried.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n// External source of time.\nvar historicalTimestamp uint64 = 0\nhistoricalAccounts := []Account{ /* Loaded from an external source. */ }\nhistoricalTransfers := []Transfer{ /* Loaded from an external source. */ }\n\n// First, load and import all accounts with their timestamps from the historical source.\naccountsBatch := []Account{}\nfor index, account := range historicalAccounts {\n\t// Set a unique and strictly increasing timestamp.\n\thistoricalTimestamp += 1\n\taccount.Timestamp = historicalTimestamp\n\n\taccount.Flags = AccountFlags{\n\t\t// Set the account as `imported`.\n\t\tImported: true,\n\t\t// To ensure atomicity, the entire batch (except the last event in the chain)\n\t\t// must be `linked`.\n\t\tLinked: index < len(historicalAccounts)-1,\n\t}.ToUint16()\n\n\taccountsBatch = append(accountsBatch, account)\n}\n\naccountErrors, err := client.CreateAccounts(accountsBatch)\n// Error handling omitted.\n\n// Then, load and import all transfers with their timestamps from the historical source.\ntransfersBatch := []Transfer{}\nfor index, transfer := range historicalTransfers {\n\t// Set a unique and strictly increasing timestamp.\n\thistoricalTimestamp += 1\n\ttransfer.Timestamp = historicalTimestamp\n\n\ttransfer.Flags = TransferFlags{\n\t\t// Set the transfer as `imported`.\n\t\tImported: true,\n\t\t// To ensure atomicity, the entire batch (except the last event in the chain)\n\t\t// must be `linked`.\n\t\tLinked: index < len(historicalAccounts)-1,\n\t}.ToUint16()\n\n\ttransfersBatch = append(transfersBatch, transfer)\n}\n\ntransferErrors, err := client.CreateTransfers(transfersBatch)\n// Error handling omitted..\n// Since it is a linked chain, in case of any error the entire batch is rolled back and can be retried\n// with the same historical timestamps without regressing the cluster timestamp.\n```\n\n----------------------------------------\n\nTITLE: Creating Linked Transfer Chains in TigerBeetle\nDESCRIPTION: Demonstrates how to create chains of transfers where transactions are linked together. Shows both a failing chain and a successful chain example using the linkedFlag property.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# A chain of 2 transfers (the first transfer fails the chain):\nbatch.append(tb.Transfer(id=2, flags=linkedFlag))\nbatch.append(tb.Transfer(id=3, flags=0))\n\n# A chain of 2 transfers (successful):\nbatch.append(tb.Transfer(id=3, flags=linkedFlag))\nbatch.append(tb.Transfer(id=4, flags=0))\n\ntransfer_errors = client.create_transfers(batch)\n# Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Querying Accounts in TigerBeetle using Java\nDESCRIPTION: Shows how to query accounts using field intersections and timestamp ranges. Results are sorted by timestamp in chronological or reverse-chronological order.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nQueryFilter filter = new QueryFilter();\nfilter.setUserData128(1000); // Filter by UserData.\nfilter.setUserData64(100);\nfilter.setUserData32(10);\nfilter.setCode(1); // Filter by Code.\nfilter.setLedger(0); // No filter by Ledger.\nfilter.setTimestampMin(0); // No filter by Timestamp.\nfilter.setTimestampMax(0); // No filter by Timestamp.\nfilter.setLimit(10); // Limit to ten balances at most.\nfilter.setReversed(true); // Sort by timestamp in reverse-chronological order.\n\nAccountBatch accounts = client.queryAccounts(filter);\n```\n\n----------------------------------------\n\nTITLE: Initializing a TigerBeetle Client in Java\nDESCRIPTION: Creates a TigerBeetle client with a specified cluster ID and replica addresses. The client connects to TigerBeetle replicas and is thread-safe, allowing it to be shared across multiple concurrent tasks.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nString replicaAddress = System.getenv(\"TB_ADDRESS\");\nbyte[] clusterID = UInt128.asBytes(0);\nString[] replicaAddresses = new String[] {replicaAddress == null ? \"3000\" : replicaAddress};\ntry (var client = new Client(clusterID, replicaAddresses)) {\n    // Use client\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Accounts with Filtering in TigerBeetle\nDESCRIPTION: Demonstrates querying accounts by multiple criteria including user data fields, code, and timestamp range. Results are sorted by timestamp and can be paginated. This is a preview API subject to future changes.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nquery_filter = tb.QueryFilter(\n    user_data_128=1000, # Filter by UserData.\n    user_data_64=100,\n    user_data_32=10,\n    code=1, # Filter by Code.\n    ledger=0, # No filter by Ledger.\n    timestamp_min=0, # No filter by Timestamp.\n    timestamp_max=0, # No filter by Timestamp.\n    limit=10, # Limit to ten balances at most.\n    flags=tb.QueryFilterFlags.REVERSED, # Sort by timestamp in reverse-chronological order.\n)\n\nquery_accounts = client.query_accounts(query_filter)\n```\n\n----------------------------------------\n\nTITLE: Creating Transfers Between Accounts in TigerBeetle Java\nDESCRIPTION: Creates a transfer between two accounts in TigerBeetle. Configures the transfer with a unique ID, specifies the debit and credit accounts, sets the transfer amount and other parameters, then submits it to TigerBeetle for processing.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nTransferBatch transfers = new TransferBatch(1);\n\ntransfers.add();\ntransfers.setId(UInt128.id());\ntransfers.setDebitAccountId(102);\ntransfers.setCreditAccountId(103);\ntransfers.setAmount(10);\ntransfers.setUserData128(0, 0);\ntransfers.setUserData64(0);\ntransfers.setUserData32(0);\ntransfers.setTimeout(0);\ntransfers.setLedger(1);\ntransfers.setCode(1);\ntransfers.setFlags(TransferFlags.NONE);\ntransfers.setTimeout(0);\n\nCreateTransferResultBatch transferErrors = client.createTransfers(transfers);\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Linked Transfer Creation Example\nDESCRIPTION: Demonstrates how to create linked transfers using TransferFlags.linked flag. The example shows creation of two transfers with proper field configuration.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst transfer0 = {\n  id: 4n,\n  debit_account_id: 102n,\n  credit_account_id: 103n,\n  amount: 10n,\n  pending_id: 0n,\n  user_data_128: 0n,\n  user_data_64: 0n,\n  user_data_32: 0,\n  timeout: 0,\n  ledger: 1,\n  code: 720,\n  flags: TransferFlags.linked,\n  timestamp: 0n,\n};\nconst transfer1 = {\n  id: 5n,\n  debit_account_id: 102n,\n  credit_account_id: 103n,\n  amount: 10n,\n  pending_id: 0n,\n  user_data_128: 0n,\n  user_data_64: 0n,\n  user_data_32: 0,\n  timeout: 0,\n  ledger: 1,\n  code: 720,\n  flags: 0,\n  timestamp: 0n,\n};\n\n// Create the transfer\nconst transfer_errors = await client.createTransfers([transfer0, transfer1]);\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Posting a Pending Transfer in Go\nDESCRIPTION: Example showing how to implement a two-phase transfer by first creating a pending transfer and then posting it with the 'PostPendingTransfer' flag, which moves balances from pending to posted status.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntransfer0 := Transfer{\n\tID:              ToUint128(6),\n\tDebitAccountID:  ToUint128(101),\n\tCreditAccountID: ToUint128(102),\n\tAmount:          ToUint128(10),\n\tLedger:          1,\n\tCode:            1,\n\tFlags:           0,\n}\n\ntransferErrors, err := client.CreateTransfers([]Transfer{transfer0})\n// Error handling omitted.\n\ntransfer1 := Transfer{\n\tID: ToUint128(7),\n\t// Post the entire pending amount.\n\tAmount:    AmountMax,\n\tPendingID: ToUint128(6),\n\tFlags:     TransferFlags{PostPendingTransfer: true}.ToUint16(),\n}\n\ntransferErrors, err = client.CreateTransfers([]Transfer{transfer1})\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Account\nDESCRIPTION: Example of creating a basic account with default values and error handling.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\naccount = tb.Account(\n    id=tb.id(), # TigerBeetle time-based ID.\n    debits_pending=0,\n    debits_posted=0,\n    credits_pending=0,\n    credits_posted=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    ledger=1,\n    code=718,\n    flags=0,\n    timestamp=0,\n)\n\naccount_errors = client.create_accounts([account])\n# Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Querying Accounts with Filtering in Go\nDESCRIPTION: Example showing how to query accounts by filtering on various fields and timestamp ranges. This preview API supports pagination and sorting by timestamp in either chronological or reverse-chronological order.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nfilter := QueryFilter{\n\tUserData128:  ToUint128(1000), // Filter by UserData\n\tUserData64:   100,\n\tUserData32:   10,\n\tCode:         1,  // Filter by Code\n\tLedger:       0,  // No filter by Ledger\n\tTimestampMin: 0,  // No filter by Timestamp.\n\tTimestampMax: 0,  // No filter by Timestamp.\n\tLimit:        10, // Limit to ten balances at most.\n\tFlags: QueryFilterFlags{\n\t\tReversed: true, // Sort by timestamp in reverse-chronological order.\n\t}.ToUint32(),\n}\n\naccounts, err := client.QueryAccounts(filter)\n```\n\n----------------------------------------\n\nTITLE: Creating Transfers Between Accounts in TigerBeetle\nDESCRIPTION: Example of creating a transfer (journal entry) between two accounts in TigerBeetle. This shows how to specify the source and destination accounts, amount, and other transfer properties.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntransfers := []Transfer{{\n\tID:              ID(), // TigerBeetle time-based ID.\n\tDebitAccountID:  ToUint128(101),\n\tCreditAccountID: ToUint128(102),\n\tAmount:          ToUint128(10),\n\tLedger:          1,\n\tCode:            1,\n\tFlags:           0,\n\tTimestamp:       0,\n}}\n\ntransferErrors, err := client.CreateTransfers(transfers)\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Linked Transfers Schema for Credit Balance Accounts in TigerBeetle\nDESCRIPTION: A table showing the 5 linked transfers needed to implement upper balance bounds for credit balance accounts. Each transfer contains account details, amounts, and flags that together enforce the balance limit without affecting actual fund movement.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/coding/recipes/balance-bounds.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Transfer | Debit Account | Credit Account | Amount       | Pending ID | Flags (Note: `\\|` sets multiple flags)                                                                                                                                                                  |\n| -------- | ------------- | -------------- | ------------ | ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 1        | Source        | Destination    | Transfer     | `0`        | [`flags.linked`](../../reference/transfer.md#flagslinked)                                                                                                                                               |\n| 2        | Control       | Operator       | Limit        | `0`        | [`flags.linked`](../../reference/transfer.md#flagslinked)                                                                                                                                               |\n| 3        | Destination   | Control        | `AMOUNT_MAX` | `0`        | [`flags.linked`](../../reference/transfer.md#flagslinked) \\| [`flags.balancing_debit`](../../reference/transfer.md#flagsbalancing_debit) \\| [`flags.pending`](../../reference/transfer.md#flagspending) |\n| 4        | `0`           | `0`            | `0`          | `3`\\*      | [`flags.linked`](../../reference/transfer.md#flagslinked) \\| [`flags.void_pending_transfer`](../../reference/transfer.md#flagsvoid_pending_transfer)                                                    |\n| 5        | Operator      | Control        | Limit        | `0`        | `0`                                                                                                                                                                                                     |\n```\n\n----------------------------------------\n\nTITLE: Creating Linked Transfers in Go\nDESCRIPTION: Example showing how to create linked transfers by setting the 'Linked' flag in the TransferFlags struct for the first transfer. Linked transfers are processed atomically as a unit.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntransfer0 := Transfer{\n\tID:              ToUint128(4),\n\tDebitAccountID:  ToUint128(101),\n\tCreditAccountID: ToUint128(102),\n\tAmount:          ToUint128(10),\n\tLedger:          1,\n\tCode:            1,\n\tFlags:           TransferFlags{Linked: true}.ToUint16(),\n}\ntransfer1 := Transfer{\n\tID:              ToUint128(5),\n\tDebitAccountID:  ToUint128(101),\n\tCreditAccountID: ToUint128(102),\n\tAmount:          ToUint128(10),\n\tLedger:          1,\n\tCode:            1,\n\tFlags:           0,\n}\n\ntransferErrors, err := client.CreateTransfers([]Transfer{transfer0, transfer1})\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Querying Transfers with Filtering in Go\nDESCRIPTION: Example showing how to query transfers by filtering on various fields and timestamp ranges. This preview API supports pagination and sorting by timestamp in either chronological or reverse-chronological order.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nfilter := QueryFilter{\n\tUserData128:  ToUint128(1000), // Filter by UserData.\n\tUserData64:   100,\n\tUserData32:   10,\n\tCode:         1,  // Filter by Code.\n\tLedger:       0,  // No filter by Ledger.\n\tTimestampMin: 0,  // No filter by Timestamp.\n\tTimestampMax: 0,  // No filter by Timestamp.\n\tLimit:        10, // Limit to ten balances at most.\n\tFlags: QueryFilterFlags{\n\t\tReversed: true, // Sort by timestamp in reverse-chronological order.\n\t}.ToUint32(),\n}\n\ntransfers, err := client.QueryTransfers(filter)\n```\n\n----------------------------------------\n\nTITLE: Querying Transfers in TigerBeetle using Java\nDESCRIPTION: Demonstrates how to query transfers using field intersections and timestamp ranges. Results are sorted by timestamp order.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nQueryFilter filter = new QueryFilter();\nfilter.setUserData128(1000); // Filter by UserData.\nfilter.setUserData64(100);\nfilter.setUserData32(10);\nfilter.setCode(1); // Filter by Code.\nfilter.setLedger(0); // No filter by Ledger.\nfilter.setTimestampMin(0); // No filter by Timestamp.\nfilter.setTimestampMax(0); // No filter by Timestamp.\nfilter.setLimit(10); // Limit to ten balances at most.\nfilter.setReversed(true); // Sort by timestamp in reverse-chronological order.\n\nTransferBatch transfers = client.queryTransfers(filter);\n```\n\n----------------------------------------\n\nTITLE: Creating an Account in TigerBeetle using Node.js\nDESCRIPTION: Example of creating an account object and submitting it to TigerBeetle.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst account = {\n  id: id(), // TigerBeetle time-based ID.\n  debits_pending: 0n,\n  debits_posted: 0n,\n  credits_pending: 0n,\n  credits_posted: 0n,\n  user_data_128: 0n,\n  user_data_64: 0n,\n  user_data_32: 0,\n  reserved: 0,\n  ledger: 1,\n  code: 718,\n  flags: 0,\n  timestamp: 0n,\n};\n\nconst account_errors = await client.createAccounts([account]);\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Efficient Batched Transfer Creation\nDESCRIPTION: Best practice example for creating transfers in batches up to the server's maximum batch size (default 8189), greatly improving performance by reducing network roundtrips.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nvar batch = new Transfer[] { }; // Array of transfer to create.\nvar BATCH_SIZE = 8189;\nfor (int firstIndex = 0; firstIndex < batch.Length; firstIndex += BATCH_SIZE)\n{\n    var lastIndex = firstIndex + BATCH_SIZE;\n    if (lastIndex > batch.Length)\n    {\n        lastIndex = batch.Length;\n    }\n    var transferErrors = client.CreateTransfers(batch[firstIndex..lastIndex]);\n    // Error handling omitted.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Voiding a Pending Transfer in TigerBeetle\nDESCRIPTION: Demonstrates how to create a pending transfer and then void it. The void operation rolls back the pending balances without applying them to the posted balances, effectively canceling the transfer.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ntransfer0 = tb.Transfer(\n    id=8,\n    debit_account_id=102,\n    credit_account_id=103,\n    amount=10,\n    pending_id=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=tb.TransferFlags.PENDING,\n    timestamp=0,\n)\n\ntransfer_errors = client.create_transfers([transfer0])\n# Error handling omitted.\n\ntransfer1 = tb.Transfer(\n    id=9,\n    debit_account_id=102,\n    credit_account_id=103,\n    amount=10,\n    pending_id=8,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=tb.TransferFlags.VOID_PENDING_TRANSFER,\n    timestamp=0,\n)\n\ntransfer_errors = client.create_transfers([transfer1])\n# Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Getting Account Transfers with Filtering and Pagination in TigerBeetle using C#\nDESCRIPTION: Retrieves transfers for a specific account with filtering options. The example demonstrates filtering transfers by account ID, limiting results, including both debits and credits, and sorting in reverse-chronological order.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nvar filter = new AccountFilter\n{\n    AccountId = 101,\n    UserData128 = 0, // No filter by UserData.\n    UserData64 = 0,\n    UserData32 = 0,\n    Code = 0, // No filter by Code.\n    TimestampMin = 0, // No filter by Timestamp.\n    TimestampMax = 0, // No filter by Timestamp.\n    Limit = 10, // Limit to ten transfers at most.\n    Flags = AccountFilterFlags.Debits | // Include transfer from the debit side.\n        AccountFilterFlags.Credits | // Include transfer from the credit side.\n        AccountFilterFlags.Reversed, // Sort by timestamp in reverse-chronological order.\n};\n\nTransfer[] transfers = client.GetAccountTransfers(filter);\n```\n\n----------------------------------------\n\nTITLE: Query Transfers Implementation\nDESCRIPTION: Preview API implementation for querying transfers with field intersection filtering and timestamp range capabilities.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst query_filter = {\n  user_data_128: 1000n, // Filter by UserData.\n  user_data_64: 100n,\n  user_data_32: 10,\n  code: 1, // Filter by Code.\n  ledger: 0, // No filter by Ledger.\n  timestamp_min: 0n, // No filter by Timestamp.\n  timestamp_max: 0n, // No filter by Timestamp.\n  limit: 10, // Limit to ten balances at most.\n  flags: QueryFilterFlags.reversed, // Sort by timestamp in reverse-chronological order.\n};\n\nconst query_transfers = await client.queryTransfers(query_filter);\n```\n\n----------------------------------------\n\nTITLE: Creating a TigerBeetle Client\nDESCRIPTION: C# code demonstrating how to create a thread-safe TigerBeetle client with a cluster ID and replica addresses, reading an optional address from an environment variable.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar tbAddress = Environment.GetEnvironmentVariable(\"TB_ADDRESS\");\nvar clusterID = UInt128.Zero;\nvar addresses = new[] { tbAddress != null ? tbAddress : \"3000\" };\nusing (var client = new Client(clusterID, addresses))\n{\n    // Use client\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle Node.js Client\nDESCRIPTION: Command to install the TigerBeetle Node.js client package with an exact version specification.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/samples/basic/README.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install --save-exact tigerbeetle-node\n```\n\n----------------------------------------\n\nTITLE: Creating Linked Transfers in Python with TigerBeetle\nDESCRIPTION: Demonstrates how to create two linked transfers in TigerBeetle. The transfers are linked together using the LINKED flag, ensuring they either succeed or fail together as an atomic unit.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ntransfer0 = tb.Transfer(\n    id=4,\n    debit_account_id=102,\n    credit_account_id=103,\n    amount=10,\n    pending_id=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=tb.TransferFlags.LINKED,\n    timestamp=0,\n)\ntransfer1 = tb.Transfer(\n    id=5,\n    debit_account_id=102,\n    credit_account_id=103,\n    amount=10,\n    pending_id=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=0,\n    timestamp=0,\n)\n\n# Create the transfer\ntransfer_errors = client.create_transfers([transfer0, transfer1])\n# Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Looking Up Transfers by ID in Go\nDESCRIPTION: Example showing how to retrieve transfers by their IDs. This operation is batched, but note that the order of transfers in the response may not match the order of IDs in the request.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntransfers, err := client.LookupTransfers([]Uint128{ToUint128(1), ToUint128(2)})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Transfers with Filtering in TigerBeetle\nDESCRIPTION: Demonstrates how to fetch transfers for a specific account with filtering options. The example shows pagination, sorting by timestamp, and filtering by transfer direction (debits/credits). This is a preview API subject to future changes.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfilter = tb.AccountFilter(\n    account_id=2,\n    user_data_128=0, # No filter by UserData.\n    user_data_64=0,\n    user_data_32=0,\n    code=0, # No filter by Code.\n    timestamp_min=0, # No filter by Timestamp.\n    timestamp_max=0, # No filter by Timestamp.\n    limit=10, # Limit to ten balances at most.\n    flags=tb.AccountFilterFlags.DEBITS | # Include transfer from the debit side.\n    tb.AccountFilterFlags.CREDITS | # Include transfer from the credit side.\n    tb.AccountFilterFlags.REVERSED, # Sort by timestamp in reverse-chronological order.\n)\n\naccount_transfers = client.get_account_transfers(filter)\n```\n\n----------------------------------------\n\nTITLE: Account Lookup\nDESCRIPTION: Example of looking up multiple accounts by their IDs.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\naccounts = client.lookup_accounts([100, 101])\n```\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle Python Client\nDESCRIPTION: Command to install the TigerBeetle client library for Python using pip package manager.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/samples/basic/README.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install tigerbeetle\n```\n\n----------------------------------------\n\nTITLE: Creating and Posting Pending Transfers in Java with TigerBeetle\nDESCRIPTION: This snippet demonstrates how to create a pending transfer and then post it using the TigerBeetle Java client. It shows the two-phase transfer process for creating and finalizing a pending transfer.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nTransferBatch transfers = new TransferBatch(1);\n\ntransfers.add();\ntransfers.setId(6);\ntransfers.setDebitAccountId(102);\ntransfers.setCreditAccountId(103);\ntransfers.setAmount(10);\ntransfers.setLedger(1);\ntransfers.setCode(1);\ntransfers.setFlags(TransferFlags.PENDING);\n\nCreateTransferResultBatch transferErrors = client.createTransfers(transfers);\n// Error handling omitted.\n\ntransfers = new TransferBatch(1);\n\ntransfers.add();\ntransfers.setId(7);\ntransfers.setAmount(TransferBatch.AMOUNT_MAX);\ntransfers.setPendingId(6);\ntransfers.setFlags(TransferFlags.POST_PENDING_TRANSFER);\n\ntransferErrors = client.createTransfers(transfers);\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Creating Linked Chain of Transfers in TigerBeetle\nDESCRIPTION: Demonstrates creating a chain of linked transfers that succeed or fail together as a unit. The example shows how to set the LINKED flag to connect transfers in a chain, and how individual and chained transfers behave when errors occur.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nbatch = [] # List of tb.Transfers to create.\nlinkedFlag = 0\nlinkedFlag |= tb.TransferFlags.LINKED\n\n# An individual transfer (successful):\nbatch.append(tb.Transfer(id=1))\n\n# A chain of 4 transfers (the last transfer in the chain closes the chain with linked=false):\nbatch.append(tb.Transfer(id=2, flags=linkedFlag)) # Commit/rollback.\nbatch.append(tb.Transfer(id=3, flags=linkedFlag)) # Commit/rollback.\nbatch.append(tb.Transfer(id=2, flags=linkedFlag)) # Fail with exists\nbatch.append(tb.Transfer(id=4, flags=0)) # Fail without committing.\n\n# An individual transfer (successful):\n# This should not see any effect from the failed chain above.\nbatch.append(tb.Transfer(id=2, flags=0 ))\n```\n\n----------------------------------------\n\nTITLE: Linked Transfers Schema for Debit Balance Accounts in TigerBeetle\nDESCRIPTION: A table showing the 5 linked transfers needed to implement upper balance bounds for debit balance accounts. The transfers use different account flows and flags compared to the credit balance approach but achieve the same balance control effect.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/coding/recipes/balance-bounds.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Transfer | Debit Account | Credit Account | Amount       | Pending ID | Flags (Note `\\|` sets multiple flags)                                                                                                                                                                     |\n| -------- | ------------- | -------------- | ------------ | ---------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 1        | Destination   | Source         | Transfer     | `0`        | [`flags.linked`](../../reference/transfer.md#flagslinked)                                                                                                                                                 |\n| 2        | Operator      | Control        | Limit        | `0`        | [`flags.linked`](../../reference/transfer.md#flagslinked)                                                                                                                                                 |\n| 3        | Control       | Destination    | `AMOUNT_MAX` | `0`        | [`flags.balancing_credit`](../../reference/transfer.md#flagsbalancing_credit) \\| [`flags.pending`](../../reference/transfer.md#flagspending) \\| [`flags.linked`](../../reference/transfer.md#flagslinked) |\n| 4        | `0`           | `0`            | `0`          | `3`\\*      | [`flags.void_pending_transfer`](../../reference/transfer.md#flagsvoid_pending_transfer) \\| [`flags.linked`](../../reference/transfer.md#flagslinked)                                                      |\n| 5        | Control       | Operator       | Limit        | `0`        | `0`                                                                                                                                                                                                       |\n```\n\n----------------------------------------\n\nTITLE: Looking Up Accounts in TigerBeetle with Go\nDESCRIPTION: Example of looking up accounts by their IDs in TigerBeetle. The lookup operation is batched, allowing multiple accounts to be retrieved in a single request.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_7\n\nLANGUAGE: go\nCODE:\n```\naccounts, err := client.LookupAccounts([]Uint128{ToUint128(100), ToUint128(101)})\n```\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle Java Client\nDESCRIPTION: Command to install the TigerBeetle client using Maven package manager.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/samples/basic/README.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmvn install\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Linked Transfers in TigerBeetle\nDESCRIPTION: This table illustrates a set of transfers in a request, showing how the 'linked' flag is used to create chains of linked events. It demonstrates which transfers are linked and which are independent.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/coding/linked-events.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Transfer | Index in Request | flags.linked |\n| -------- | ---------------- | ------------ |\n| `A`      | `0`              | `false`      |\n| `B`      | `1`              | `true`       |\n| `C`      | `2`              | `true`       |\n| `D`      | `3`              | `false`      |\n| `E`      | `4`              | `false`      |\n```\n\n----------------------------------------\n\nTITLE: Looking Up Transfers by ID in TigerBeetle using C#\nDESCRIPTION: Demonstrates how to look up transfers by their IDs. The method fetches multiple transfers in a single batch request, returning only the transfers that match the provided IDs.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nTransfer[] transfers = client.LookupTransfers(new UInt128[] { 1, 2 });\n```\n\n----------------------------------------\n\nTITLE: Transfer Chain Table Structure for Balance Invariants\nDESCRIPTION: A markdown table showing the structure of a three-transfer chain that enforces credits_must_not_exceed_debits on a per-transfer basis. The chain involves source, destination, and control accounts with specific transfer flags to maintain balance invariants.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/coding/recipes/balance-invariant-transfers.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Id | Debit Account | Credit Account | Amount | Pending Id |                                               Flags |\n| -: | ------------: | -------------: | -----: | ---------: | --------------------------------------------------: |\n|  1 |        Source |    Destination |    123 |          - | [`linked`](../../reference/transfer.md#flagslinked) |\n|  2 |   Destination |        Control |      1 |          - | [`linked`](../../reference/transfer.md#flagslinked), [`pending`](../../reference/transfer.md#flagspending), [`balancing_debit`](../../reference/transfer.md#flagsbalancing_debit) |\n|  3 |             - |              - |      0 |          2 | [`void_pending_transfer`](../../reference/transfer.md#flagsvoid_pending_transfer) |\n```\n\n----------------------------------------\n\nTITLE: Looking Up Accounts in TigerBeetle using Node.js\nDESCRIPTION: Example of looking up multiple accounts by their IDs using the TigerBeetle Node.js client.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst accounts = await client.lookupAccounts([100n, 101n]);\n```\n\n----------------------------------------\n\nTITLE: Optimized Transfer Batching with Size Limit\nDESCRIPTION: Optimized implementation of transfer batching that processes multiple transfers at once up to the maximum batch size of 8189 items. This approach provides better performance by reducing network calls.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst batch = []; // Array of transfer to create.\nconst BATCH_SIZE = 8189;\nfor (let i = 0; i < batch.length; i += BATCH_SIZE) {\n  const transfer_errors = await client.createTransfers(\n    batch.slice(i, Math.min(batch.length, BATCH_SIZE)),\n  );\n  // Error handling omitted.\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Account Creation Errors in TigerBeetle Node.js Client\nDESCRIPTION: Example of creating multiple accounts and handling potential errors returned by the TigerBeetle client.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst account0 = {\n  id: 102n,\n  debits_pending: 0n,\n  debits_posted: 0n,\n  credits_pending: 0n,\n  credits_posted: 0n,\n  user_data_128: 0n,\n  user_data_64: 0n,\n  user_data_32: 0,\n  reserved: 0,\n  ledger: 1,\n  code: 1,\n  timestamp: 0n,\n  flags: 0,\n};\nconst account1 = {\n  id: 103n,\n  debits_pending: 0n,\n  debits_posted: 0n,\n  credits_pending: 0n,\n  credits_posted: 0n,\n  user_data_128: 0n,\n  user_data_64: 0n,\n  user_data_32: 0,\n  reserved: 0,\n  ledger: 1,\n  code: 1,\n  timestamp: 0n,\n  flags: 0,\n};\nconst account2 = {\n  id: 104n,\n  debits_pending: 0n,\n  debits_posted: 0n,\n  credits_pending: 0n,\n  credits_posted: 0n,\n  user_data_128: 0n,\n  user_data_64: 0n,\n  user_data_32: 0,\n  reserved: 0,\n  ledger: 1,\n  code: 1,\n  timestamp: 0n,\n  flags: 0,\n};\n\nconst account_errors = await client.createAccounts([account0, account1, account2]);\nfor (const error of account_errors) {\n  switch (error.result) {\n    case CreateAccountError.exists:\n      console.error(`Batch account at ${error.index} already exists.`);\n      break;\n    default:\n      console.error(\n        `Batch account at ${error.index} failed to create: ${\n          CreateAccountError[error.result]\n        }.`,\n      );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Two-Phase Transfer Implementation - Void Pending\nDESCRIPTION: Implementation of two-phase transfer with voiding functionality. Shows how to create a pending transfer and then void it using TransferFlags.void_pending_transfer.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst transfer0 = {\n  id: 8n,\n  debit_account_id: 102n,\n  credit_account_id: 103n,\n  amount: 10n,\n  pending_id: 0n,\n  user_data_128: 0n,\n  user_data_64: 0n,\n  user_data_32: 0,\n  timeout: 0,\n  ledger: 1,\n  code: 720,\n  flags: TransferFlags.pending,\n  timestamp: 0n,\n};\n\nlet transfer_errors = await client.createTransfers([transfer0]);\n// Error handling omitted.\n\nconst transfer1 = {\n  id: 9n,\n  debit_account_id: 102n,\n  credit_account_id: 103n,\n  amount: 10n,\n  pending_id: 8n,\n  user_data_128: 0n,\n  user_data_64: 0n,\n  user_data_32: 0,\n  timeout: 0,\n  ledger: 1,\n  code: 720,\n  flags: TransferFlags.void_pending_transfer,\n  timestamp: 0n,\n};\n\ntransfer_errors = await client.createTransfers([transfer1]);\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Transfer Creation Error Handling\nDESCRIPTION: Example showing how to handle various error conditions when creating multiple transfers.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nbatch = [tb.Transfer(\n    id=1,\n    debit_account_id=102,\n    credit_account_id=103,\n    amount=10,\n    pending_id=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=0,\n    timestamp=0,\n),\n    tb.Transfer(\n    id=2,\n    debit_account_id=102,\n    credit_account_id=103,\n    amount=10,\n    pending_id=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=0,\n    timestamp=0,\n),\n    tb.Transfer(\n    id=3,\n    debit_account_id=102,\n    credit_account_id=103,\n    amount=10,\n    pending_id=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=0,\n    timestamp=0,\n)]\n\ntransfer_errors = client.create_transfers(batch)\nfor error in transfer_errors:\n    if error.result == tb.CreateTransferResult.EXISTS:\n        print(f\"Batch transfer at {error.index} already exists.\")\n    else:\n        print(f\"Batch transfer at {error.index} failed to create: {error.result}.\")\n```\n\n----------------------------------------\n\nTITLE: Looking Up Transfers by ID in Java with TigerBeetle\nDESCRIPTION: This snippet demonstrates how to look up transfers by their IDs using the TigerBeetle Java client. It shows the process of creating an ID batch and retrieving the corresponding transfers.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nIdBatch ids = new IdBatch(2);\nids.add(1);\nids.add(2);\n\nTransferBatch transfers = client.lookupTransfers(ids);\n```\n\n----------------------------------------\n\nTITLE: Creating Transfers in TigerBeetle\nDESCRIPTION: Example of creating a transfer (journal entry) between two accounts, specifying the transfer ID, debit and credit account IDs, amount, and other properties.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nvar transfers = new[] {\n    new Transfer\n    {\n        Id = ID.Create(), // TigerBeetle time-based ID.\n        DebitAccountId = 102,\n        CreditAccountId = 103,\n        Amount = 10,\n        UserData128 = 0,\n        UserData64 = 0,\n        UserData32 = 0,\n        Timeout = 0,\n        Ledger = 1,\n        Code = 1,\n        Flags = TransferFlags.None,\n        Timestamp = 0,\n    }\n};\n\nvar transferErrors = client.CreateTransfers(transfers);\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Debits, Single Credit with Balancing Debits in TigerBeetle\nDESCRIPTION: This snippet demonstrates a complex transfer scenario with multiple debit accounts, a single credit account, and balancing debits. It uses control accounts and various flags to ensure the correct transfer of a known total amount while handling unknown individual account balances.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/coding/recipes/multi-debit-credit-transfers.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Id | Ledger | Debit Account | Credit Account | Amount | Flags |\n| -: | -----: | ------------: | -------------: | -----: | :------------- |\n|  1 |    USD |       `SETUP` |        `LIMIT` |    100 | [`linked`](../../reference/transfer.md#flagslinked) |\n|  2 |    USD |           `A` |        `SETUP` |    100 | [`linked`](../../reference/transfer.md#flagslinked), [`balancing_debit`](../../reference/transfer.md#flagsbalancing_debit), [`balancing_credit`](../../reference/transfer.md#flagsbalancing_credit) |\n|  3 |    USD |           `B` |        `SETUP` |    100 | [`linked`](../../reference/transfer.md#flagslinked), [`balancing_debit`](../../reference/transfer.md#flagsbalancing_debit), [`balancing_credit`](../../reference/transfer.md#flagsbalancing_credit) |\n|  4 |    USD |           `C` |        `SETUP` |    100 | [`linked`](../../reference/transfer.md#flagslinked), [`balancing_debit`](../../reference/transfer.md#flagsbalancing_debit), [`balancing_credit`](../../reference/transfer.md#flagsbalancing_credit) |\n|  5 |    USD |       `SETUP` |            `X` |    100 | [`linked`](../../reference/transfer.md#flagslinked) |\n|  6 |    USD |       `LIMIT` |        `SETUP` |     -0 | [`balancing_credit`](../../reference/transfer.md#flagsbalancing_credit) |\n```\n\n----------------------------------------\n\nTITLE: Creating and Posting a Pending Transfer in TigerBeetle\nDESCRIPTION: Example of a two-phase transfer implementation. First creates a pending transfer with the PENDING flag, then posts it using a second transfer with the POST_PENDING_TRANSFER flag, which moves the amount from pending to posted balances.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ntransfer0 = tb.Transfer(\n    id=6,\n    debit_account_id=102,\n    credit_account_id=103,\n    amount=10,\n    pending_id=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=tb.TransferFlags.PENDING,\n    timestamp=0,\n)\n\ntransfer_errors = client.create_transfers([transfer0])\n# Error handling omitted.\n\ntransfer1 = tb.Transfer(\n    id=7,\n    debit_account_id=102,\n    credit_account_id=103,\n    # Post the entire pending amount.\n    amount=tb.amount_max,\n    pending_id=6,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=tb.TransferFlags.POST_PENDING_TRANSFER,\n    timestamp=0,\n)\n\ntransfer_errors = client.create_transfers([transfer1])\n# Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Handling Transfer Creation Errors\nDESCRIPTION: Example demonstrating how to handle errors when creating transfers, checking for specific error conditions such as already existing transfers.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nvar transfers = new[] {\n    new Transfer\n    {\n        Id = 1,\n        DebitAccountId = 102,\n        CreditAccountId = 103,\n        Amount = 10,\n        Ledger = 1,\n        Code = 1,\n        Flags = TransferFlags.None,\n    },\n    new Transfer\n    {\n        Id = 2,\n        DebitAccountId = 102,\n        CreditAccountId = 103,\n        Amount = 10,\n        Ledger = 1,\n        Code = 1,\n        Flags = TransferFlags.None,\n    },\n    new Transfer\n    {\n        Id = 3,\n        DebitAccountId = 102,\n        CreditAccountId = 103,\n        Amount = 10,\n        Ledger = 1,\n        Code = 1,\n        Flags = TransferFlags.None,\n    },\n};\n\nvar transferErrors = client.CreateTransfers(transfers);\nforeach (var error in transferErrors)\n{\n    switch (error.Result)\n    {\n        case CreateTransferResult.Exists:\n            Console.WriteLine($\"Batch transfer at ${error.Index} already exists.\");\n            break;\n        default:\n            Console.WriteLine($\"Batch transfer at ${error.Index} failed to create: ${error.Result}\");\n            break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Binary Installation Commands - Bash\nDESCRIPTION: Shell commands for upgrading TigerBeetle binary installation to version 0.15.4. Includes downloading the new version, atomic file replacement, and service restart instructions.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/operating/upgrading.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /tmp\nwget https://github.com/tigerbeetle/tigerbeetle/releases/download/0.15.4/tigerbeetle-x86_64-linux.zip\nunzip tigerbeetle-x86_64-linux.zip\n\n# Put the binary on the same file system as the target, so mv is atomic.\nmv tigerbeetle /usr/bin/tigerbeetle-new\n\nmv /usr/bin/tigerbeetle /usr/bin/tigerbeetle-old\nmv /usr/bin/tigerbeetle-new /usr/bin/tigerbeetle\n\n# Restart TigerBeetle. Only required when upgrading from 0.15.3.\n# Otherwise, it will detect new versions are available and coordinate the upgrade itself.\nsystemctl restart tigerbeetle # or, however you are managing TigerBeetle.\n```\n\n----------------------------------------\n\nTITLE: Basic Transfer Batching Implementation\nDESCRIPTION: Example of basic (non-optimized) transfer batching implementation that processes transfers one at a time. This approach is not recommended for production use due to performance limitations.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst batch = []; // Array of transfer to create.\nfor (let i = 0; i < batch.len; i++) {\n  const transfer_errors = await client.createTransfers(batch[i]);\n  // Error handling omitted.\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Account Balances with Filtering in Go\nDESCRIPTION: Example showing how to retrieve historical balances for an account with filtering options. Only accounts created with the 'history' flag retain historical balances, and results can be paginated and sorted by timestamp.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nfilter := AccountFilter{\n\tAccountID:    ToUint128(2),\n\tUserData128:  ToUint128(0), // No filter by UserData.\n\tUserData64:   0,\n\tUserData32:   0,\n\tCode:         0,  // No filter by Code.\n\tTimestampMin: 0,  // No filter by Timestamp.\n\tTimestampMax: 0,  // No filter by Timestamp.\n\tLimit:        10, // Limit to ten balances at most.\n\tFlags: AccountFilterFlags{\n\t\tDebits:   true, // Include transfer from the debit side.\n\t\tCredits:  true, // Include transfer from the credit side.\n\t\tReversed: true, // Sort by timestamp in reverse-chronological order.\n\t}.ToUint32(),\n}\n\naccount_balances, err := client.GetAccountBalances(filter)\n```\n\n----------------------------------------\n\nTITLE: Efficient Batched Transfer Creation in Java with TigerBeetle\nDESCRIPTION: This snippet demonstrates the recommended approach for creating transfers in batches, which maximizes TigerBeetle's performance. It uses the maximum batch size and processes transfers in large groups.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nResultSet dataSource = null; /* Loaded from an external source. */;\n\nvar BATCH_SIZE = 8189;\nTransferBatch batch = new TransferBatch(BATCH_SIZE);\nwhile(dataSource.next()) {\n    batch.add();\n    batch.setId(dataSource.getBytes(\"id\"));\n    batch.setDebitAccountId(dataSource.getBytes(\"debit_account_id\"));\n    batch.setCreditAccountId(dataSource.getBytes(\"credit_account_id\"));\n    batch.setAmount(dataSource.getBigDecimal(\"amount\").toBigInteger());\n    batch.setLedger(dataSource.getInt(\"ledger\"));\n    batch.setCode(dataSource.getInt(\"code\"));\n\n    if (batch.getLength() == BATCH_SIZE) {\n        CreateTransferResultBatch transferErrors = client.createTransfers(batch);\n        // Error handling omitted.\n\n        // Reset the batch for the next iteration.\n        batch.beforeFirst();\n    }\n}\n\nif (batch.getLength() > 0) {\n    // Send the remaining items.\n    CreateTransferResultBatch transferErrors = client.createTransfers(batch);\n    // Error handling omitted.\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Transfer Creation Errors in TigerBeetle Node.js Client\nDESCRIPTION: Example of creating multiple transfers and handling potential errors returned by the TigerBeetle client.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst transfers = [{\n  id: 1n,\n  debit_account_id: 102n,\n  credit_account_id: 103n,\n  amount: 10n,\n  pending_id: 0n,\n  user_data_128: 0n,\n  user_data_64: 0n,\n  user_data_32: 0,\n  timeout: 0,\n  ledger: 1,\n  code: 720,\n  flags: 0,\n  timestamp: 0n,\n},\n{\n  id: 2n,\n  debit_account_id: 102n,\n  credit_account_id: 103n,\n  amount: 10n,\n  pending_id: 0n,\n  user_data_128: 0n,\n  user_data_64: 0n,\n  user_data_32: 0,\n  timeout: 0,\n  ledger: 1,\n  code: 720,\n  flags: 0,\n  timestamp: 0n,\n},\n{\n  id: 3n,\n  debit_account_id: 102n,\n  credit_account_id: 103n,\n  amount: 10n,\n  pending_id: 0n,\n  user_data_128: 0n,\n  user_data_64: 0n,\n  user_data_32: 0,\n  timeout: 0,\n  ledger: 1,\n  code: 720,\n  flags: 0,\n  timestamp: 0n,\n}];\n\nconst transfer_errors = await client.createTransfers(batch);\nfor (const error of transfer_errors) {\n  switch (error.result) {\n    case CreateTransferError.exists:\n      console.error(`Batch transfer at ${error.index} already exists.`);\n      break;\n    default:\n      console.error(\n        `Batch transfer at ${error.index} failed to create: ${\n          CreateTransferError[error.result]\n        }.`,\n      );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TigerBeetle Binary Upgrade Commands\nDESCRIPTION: Shell commands for upgrading TigerBeetle binary on each replica. The process involves downloading the new version, unzipping it, and performing an atomic move operation to replace the existing binary while maintaining a backup.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/upgrades.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# SSH to each replica, in no particular order:\ncd /tmp\nwget https://github.com/tigerbeetle/tigerbeetle/releases/download/0.15.4/tigerbeetle-x86_64-linux.zip\nunzip tigerbeetle-x86_64-linux.zip\n\n# Put the binary on the same file system as the target, so mv is atomic.\nmv tigerbeetle /usr/bin/tigerbeetle-new\n\nmv /usr/bin/tigerbeetle /usr/bin/tigerbeetle-old\nmv /usr/bin/tigerbeetle-new /usr/bin/tigerbeetle\n```\n\n----------------------------------------\n\nTITLE: Account Creation Error Handling\nDESCRIPTION: Example showing how to handle various error conditions when creating multiple accounts.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\naccount0 = tb.Account(\n    id=102,\n    debits_pending=0,\n    debits_posted=0,\n    credits_pending=0,\n    credits_posted=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    ledger=1,\n    code=1,\n    timestamp=0,\n    flags=0,\n)\naccount1 = tb.Account(\n    id=103,\n    debits_pending=0,\n    debits_posted=0,\n    credits_pending=0,\n    credits_posted=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    ledger=1,\n    code=1,\n    timestamp=0,\n    flags=0,\n)\naccount2 = tb.Account(\n    id=104,\n    debits_pending=0,\n    debits_posted=0,\n    credits_pending=0,\n    credits_posted=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    ledger=1,\n    code=1,\n    timestamp=0,\n    flags=0,\n)\n\naccount_errors = client.create_accounts([account0, account1, account2])\nfor error in account_errors:\n    if error.result == tb.CreateAccountResult.EXISTS:\n        print(f\"Batch account at {error.index} already exists.\")\n    else:\n        print(f\"Batch account at ${error.index} failed to create: {error.result}.\")\n```\n\n----------------------------------------\n\nTITLE: Looking Up Accounts in TigerBeetle with Java\nDESCRIPTION: Demonstrates how to look up accounts by their IDs. Creates an ID batch containing two account IDs and submits it to TigerBeetle to retrieve the matching accounts. The response contains accounts that match the requested IDs in an unspecified order.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nIdBatch ids = new IdBatch(2);\nids.add(100);\nids.add(101);\n\nAccountBatch accounts = client.lookupAccounts(ids);\n```\n\n----------------------------------------\n\nTITLE: Efficient Batched Transfer Creation\nDESCRIPTION: Example showing efficient way of creating transfers in batches.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nbatch = [] # Array of transfer to create.\nBATCH_SIZE = 8189 #FIXME\nfor i in range(0, len(batch), BATCH_SIZE):\n    transfer_errors = client.create_transfers(\n        batch[i:min(len(batch), i + BATCH_SIZE)],\n    )\n    # Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Handling Account Creation Errors\nDESCRIPTION: Example of how to handle errors when creating accounts in TigerBeetle, checking for specific error conditions like already existing accounts.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar account0 = new Account\n{\n    Id = 102,\n    Ledger = 1,\n    Code = 1,\n    Flags = AccountFlags.None,\n};\nvar account1 = new Account\n{\n    Id = 103,\n    Ledger = 1,\n    Code = 1,\n    Flags = AccountFlags.None,\n};\nvar account2 = new Account\n{\n    Id = 104,\n    Ledger = 1,\n    Code = 1,\n    Flags = AccountFlags.None,\n};\n\nvar accountErrors = client.CreateAccounts(new[] { account0, account1, account2 });\nforeach (var error in accountErrors)\n{\n    switch (error.Result)\n    {\n        case CreateAccountResult.Exists:\n            Console.WriteLine($\"Batch account at ${error.Index} already exists.\");\n            break;\n        default:\n            Console.WriteLine($\"Batch account at ${error.Index} failed to create ${error.Result}\");\n            break;\n    }\n    return;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Maven Project Configuration for TigerBeetle Java Client\nDESCRIPTION: Maven POM configuration for setting up a TigerBeetle Java client project. Defines project metadata, compiler settings, execution plugins, and dependencies with the TigerBeetle Java client library.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>com.tigerbeetle</groupId>\n  <artifactId>samples</artifactId>\n  <version>1.0-SNAPSHOT</version>\n\n  <properties>\n    <maven.compiler.source>11</maven.compiler.source>\n    <maven.compiler.target>11</maven.compiler.target>\n  </properties>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.8.1</version>\n        <configuration>\n          <compilerArgs>\n            <arg>-Xlint:all,-options,-path</arg>\n          </compilerArgs>\n        </configuration>\n      </plugin>\n\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>exec-maven-plugin</artifactId>\n        <version>1.6.0</version>\n        <configuration>\n          <mainClass>com.tigerbeetle.samples.Main</mainClass>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n\n  <dependencies>\n    <dependency>\n      <groupId>com.tigerbeetle</groupId>\n      <artifactId>tigerbeetle-java</artifactId>\n      <!-- Grab the latest commit from: https://repo1.maven.org/maven2/com/tigerbeetle/tigerbeetle-java/maven-metadata.xml -->\n      <version>0.0.1-3431</version>\n    </dependency>\n  </dependencies>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Creating Linked Accounts\nDESCRIPTION: Example of creating two linked accounts with specific flag configurations.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\naccount0 = tb.Account(\n    id=100,\n    debits_pending=0,\n    debits_posted=0,\n    credits_pending=0,\n    credits_posted=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    ledger=1,\n    code=1,\n    timestamp=0,\n    flags=tb.AccountFlags.LINKED | tb.AccountFlags.DEBITS_MUST_NOT_EXCEED_CREDITS,\n)\naccount1 = tb.Account(\n    id=101,\n    debits_pending=0,\n    debits_posted=0,\n    credits_pending=0,\n    credits_posted=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    ledger=1,\n    code=1,\n    timestamp=0,\n    flags=tb.AccountFlags.HISTORY,\n)\n\naccount_errors = client.create_accounts([account0, account1])\n# Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Getting Account Balances with Filtering and Pagination in TigerBeetle using C#\nDESCRIPTION: Retrieves historical balances for a specific account with filtering options. Only works for accounts created with the 'history' flag. The example demonstrates filtering by account ID and sorting in reverse-chronological order.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nvar filter = new AccountFilter\n{\n    AccountId = 101,\n    UserData128 = 0, // No filter by UserData.\n    UserData64 = 0,\n    UserData32 = 0,\n    Code = 0, // No filter by Code.\n    TimestampMin = 0, // No filter by Timestamp.\n    TimestampMax = 0, // No filter by Timestamp.\n    Limit = 10, // Limit to ten balances at most.\n    Flags = AccountFilterFlags.Debits | // Include transfer from the debit side.\n        AccountFilterFlags.Credits | // Include transfer from the credit side.\n        AccountFilterFlags.Reversed, // Sort by timestamp in reverse-chronological order.\n};\n\nAccountBalance[] accountBalances = client.GetAccountBalances(filter);\n```\n\n----------------------------------------\n\nTITLE: Setting Account Flags in TigerBeetle Java Client\nDESCRIPTION: Creates two accounts with different flag configurations. The first account is set with both LINKED and DEBITS_MUST_NOT_EXCEED_CREDITS flags, while the second has the HISTORY flag. This demonstrates how to use bitwise operations with account flags.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nAccountBatch accounts = new AccountBatch(2);\n\naccounts.add();\naccounts.setId(100);\naccounts.setLedger(1);\naccounts.setCode(718);\naccounts.setFlags(AccountFlags.LINKED | AccountFlags.DEBITS_MUST_NOT_EXCEED_CREDITS);\n\naccounts.add();\naccounts.setId(101);\naccounts.setLedger(1);\naccounts.setCode(718);\naccounts.setFlags(AccountFlags.HISTORY);\n\nCreateAccountResultBatch accountErrors = client.createAccounts(accounts);\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Querying Account Transfers in Java with TigerBeetle\nDESCRIPTION: This snippet shows how to query transfers for a specific account using the TigerBeetle Java client. It demonstrates setting up an AccountFilter with various parameters to retrieve transfers associated with an account.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nAccountFilter filter = new AccountFilter();\nfilter.setAccountId(2);\nfilter.setUserData128(0); // No filter by UserData.\nfilter.setUserData64(0);\nfilter.setUserData32(0);\nfilter.setCode(0); // No filter by Code.\nfilter.setTimestampMin(0); // No filter by Timestamp.\nfilter.setTimestampMax(0); // No filter by Timestamp.\nfilter.setLimit(10); // Limit to ten transfers at most.\nfilter.setDebits(true); // Include transfer from the debit side.\nfilter.setCredits(true); // Include transfer from the credit side.\nfilter.setReversed(true); // Sort by timestamp in reverse-chronological order.\n\nTransferBatch transfers = client.getAccountTransfers(filter);\n```\n\n----------------------------------------\n\nTITLE: TigerBeetle Server Startup Output\nDESCRIPTION: Console output showing a successfully started TigerBeetle server listening on the specified address.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/operating/deploying/docker.md#2025-04-14_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ninfo(io): opening \"0_0.tigerbeetle\"...\ninfo(main): 0: cluster=0: listening on 0.0.0.0:3000\n```\n\n----------------------------------------\n\nTITLE: Setting Account Flags in TigerBeetle Go Client\nDESCRIPTION: Examples of setting different account flag combinations in TigerBeetle. This demonstrates how to use the AccountFlags struct to set constraints on accounts such as linked accounts and debit/credit limits.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_5\n\nLANGUAGE: go\nCODE:\n```\naccount0 := Account{\n\tID:     ToUint128(100),\n\tLedger: 1,\n\tCode:   718,\n\tFlags: AccountFlags{\n\t\tDebitsMustNotExceedCredits: true,\n\t\tLinked:                     true,\n\t}.ToUint16(),\n}\naccount1 := Account{\n\tID:     ToUint128(101),\n\tLedger: 1,\n\tCode:   718,\n\tFlags: AccountFlags{\n\t\tHistory: true,\n\t}.ToUint16(),\n}\n\naccountErrors, err := client.CreateAccounts([]Account{account0, account1})\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Creating Linked Accounts with Flags in TigerBeetle\nDESCRIPTION: Example of creating two linked accounts with different flags using the TigerBeetle Node.js client.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst account0 = {\n  id: 100n,\n  debits_pending: 0n,\n  debits_posted: 0n,\n  credits_pending: 0n,\n  credits_posted: 0n,\n  user_data_128: 0n,\n  user_data_64: 0n,\n  user_data_32: 0,\n  reserved: 0,\n  ledger: 1,\n  code: 1,\n  timestamp: 0n,\n  flags: AccountFlags.linked | AccountFlags.debits_must_not_exceed_credits,\n};\nconst account1 = {\n  id: 101n,\n  debits_pending: 0n,\n  debits_posted: 0n,\n  credits_pending: 0n,\n  credits_posted: 0n,\n  user_data_128: 0n,\n  user_data_64: 0n,\n  user_data_32: 0,\n  reserved: 0,\n  ledger: 1,\n  code: 1,\n  timestamp: 0n,\n  flags: AccountFlags.history,\n};\n\nconst account_errors = await client.createAccounts([account0, account1]);\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Creating Accounts in TigerBeetle\nDESCRIPTION: Example of creating accounts in TigerBeetle with specified fields including ID, ledger, code, and flags. The code uses TigerBeetle's time-based ID system.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar accounts = new[] {\n    new Account\n    {\n        Id = ID.Create(), // TigerBeetle time-based ID.\n        UserData128 = 0,\n        UserData64 = 0,\n        UserData32 = 0,\n        Ledger = 1,\n        Code = 718,\n        Flags = AccountFlags.None,\n        Timestamp = 0,\n    },\n};\n\nvar accountErrors = client.CreateAccounts(accounts);\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Getting Account Balances in TigerBeetle using Java\nDESCRIPTION: Demonstrates how to fetch point-in-time balances for an account with filtering and pagination capabilities. Only accounts with the 'history' flag retain historical balances.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nAccountFilter filter = new AccountFilter();\nfilter.setAccountId(2);\nfilter.setUserData128(0); // No filter by UserData.\nfilter.setUserData64(0);\nfilter.setUserData32(0);\nfilter.setCode(0); // No filter by Code.\nfilter.setTimestampMin(0); // No filter by Timestamp.\nfilter.setTimestampMax(0); // No filter by Timestamp.\nfilter.setLimit(10); // Limit to ten balances at most.\nfilter.setDebits(true); // Include transfer from the debit side.\nfilter.setCredits(true); // Include transfer from the credit side.\nfilter.setReversed(true); // Sort by timestamp in reverse-chronological order.\n\nAccountBalanceBatch account_balances = client.getAccountBalances(filter);\n```\n\n----------------------------------------\n\nTITLE: Normal Protocol Sequence Diagram in Mermaid\nDESCRIPTION: Illustrates the sequence of interactions between a client and replicas during the Normal protocol execution, showing the flow of Request, Prepare, Prepare-Ok, and Reply messages.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/vsr.md#2025-04-14_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant C0 as Client\n    participant R0 as Replica 0 (primary)\n    participant R1 as Replica 1 (backup)\n    participant R2 as Replica 2 (backup)\n\n    C0->>R0: Request A\n\n    R0->>+R0: Prepare A\n    R0->>+R1: Prepare A\n    R1->>+R2: Prepare A\n\n    R0->>-R0: Prepare-Ok A\n    R1->>-R0: Prepare-Ok A\n    R0->>C0: Reply A\n    R2->>-R0: Prepare-Ok A\n```\n\n----------------------------------------\n\nTITLE: Account Creation and Lookup Example\nDESCRIPTION: Sample JSON output showing account creation and lookup operations in TigerBeetle.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/start.md#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"1\",\n  \"user_data\": \"0\",\n  \"ledger\": \"700\",\n  \"code\": \"10\",\n  \"flags\": [],\n  \"debits_pending\": \"0\",\n  \"debits_posted\": \"0\",\n  \"credits_pending\": \"0\",\n  \"credits_posted\": \"0\"\n}\n{\n  \"id\": \"2\",\n  \"user_data\": \"0\",\n  \"ledger\": \"700\",\n  \"code\": \"10\",\n  \"flags\": \"\",\n  \"debits_pending\": \"0\",\n  \"debits_posted\": \"0\",\n  \"credits_pending\": \"0\",\n  \"credits_posted\": \"0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Imported Events in TigerBeetle using Java\nDESCRIPTION: Demonstrates how to import historical events with user-defined timestamps. Shows batch processing of accounts and transfers with atomic operations.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_20\n\nLANGUAGE: java\nCODE:\n```\n// External source of time\nlong historicalTimestamp = 0L;\nResultSet historicalAccounts = null; // Loaded from an external source;\nResultSet historicalTransfers = null ; // Loaded from an external source.\n\nvar BATCH_SIZE = 8189;\n\n// First, load and import all accounts with their timestamps from the historical source.\nAccountBatch accounts = new AccountBatch(BATCH_SIZE);\nwhile (historicalAccounts.next()) {\n    // Set a unique and strictly increasing timestamp.\n    historicalTimestamp += 1;\n\n    accounts.add();\n    accounts.setId(historicalAccounts.getBytes(\"id\"));\n    accounts.setLedger(historicalAccounts.getInt(\"ledger\"));\n    accounts.setCode(historicalAccounts.getInt(\"code\"));\n    accounts.setTimestamp(historicalTimestamp);\n\n    // Set the account as `imported`.\n    // To ensure atomicity, the entire batch (except the last event in the chain)\n    // must be `linked`.\n    if (accounts.getLength() < BATCH_SIZE) {\n        accounts.setFlags(AccountFlags.IMPORTED | AccountFlags.LINKED);\n    } else {\n        accounts.setFlags(AccountFlags.IMPORTED);\n\n        CreateAccountResultBatch accountsErrors = client.createAccounts(accounts);\n        // Error handling omitted.\n\n        // Reset the batch for the next iteration.\n        accounts.beforeFirst();\n    }\n}\n\nif (accounts.getLength() > 0) {\n    // Send the remaining items.\n    CreateAccountResultBatch accountsErrors = client.createAccounts(accounts);\n    // Error handling omitted.\n}\n\n// Then, load and import all transfers with their timestamps from the historical source.\nTransferBatch transfers = new TransferBatch(BATCH_SIZE);\nwhile (historicalTransfers.next()) {\n    // Set a unique and strictly increasing timestamp.\n    historicalTimestamp += 1;\n\n    transfers.add();\n    transfers.setId(historicalTransfers.getBytes(\"id\"));\n    transfers.setDebitAccountId(historicalTransfers.getBytes(\"debit_account_id\"));\n    transfers.setCreditAccountId(historicalTransfers.getBytes(\"credit_account_id\"));\n    transfers.setAmount(historicalTransfers.getBigDecimal(\"amount\").toBigInteger());\n    transfers.setLedger(historicalTransfers.getInt(\"ledger\"));\n    transfers.setCode(historicalTransfers.getInt(\"code\"));\n    transfers.setTimestamp(historicalTimestamp);\n\n    // Set the transfer as `imported`.\n    // To ensure atomicity, the entire batch (except the last event in the chain)\n    // must be `linked`.\n    if (transfers.getLength() < BATCH_SIZE) {\n        transfers.setFlags(TransferFlags.IMPORTED | TransferFlags.LINKED);\n    } else {\n        transfers.setFlags(TransferFlags.IMPORTED);\n\n        CreateTransferResultBatch transferErrors = client.createTransfers(transfers);\n        // Error handling omitted.\n\n        // Reset the batch for the next iteration.\n        transfers.beforeFirst();\n    }\n}\n\nif (transfers.getLength() > 0) {\n    // Send the remaining items.\n    CreateTransferResultBatch transferErrors = client.createTransfers(transfers);\n    // Error handling omitted.\n}\n\n// Since it is a linked chain, in case of any error the entire batch is rolled back and can be retried\n// with the same historical timestamps without regressing the cluster timestamp.\n```\n\n----------------------------------------\n\nTITLE: Creating Account in TigerBeetle with Go\nDESCRIPTION: Example of creating an account in TigerBeetle using the Go client. This demonstrates setting account properties including ID, ledger, code, and flags.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_4\n\nLANGUAGE: go\nCODE:\n```\naccountErrors, err := client.CreateAccounts([]Account{\n\t{\n\t\tID:          ID(), // TigerBeetle time-based ID.\n\t\tUserData128: ToUint128(0),\n\t\tUserData64:  0,\n\t\tUserData32:  0,\n\t\tLedger:      1,\n\t\tCode:        718,\n\t\tFlags:       0,\n\t\tTimestamp:   0,\n\t},\n})\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Creating Linked Transfers in TigerBeetle using C#\nDESCRIPTION: Creates two linked transfers using the TransferFlags.Linked flag. The first transfer has the Linked flag set to establish the relationship between the transfers. Both transfers move funds between the same accounts with identical amounts.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nvar transfer0 = new Transfer\n{\n    Id = 4,\n    DebitAccountId = 102,\n    CreditAccountId = 103,\n    Amount = 10,\n    Ledger = 1,\n    Code = 1,\n    Flags = TransferFlags.Linked,\n};\nvar transfer1 = new Transfer\n{\n    Id = 5,\n    DebitAccountId = 102,\n    CreditAccountId = 103,\n    Amount = 10,\n    Ledger = 1,\n    Code = 1,\n    Flags = TransferFlags.None,\n};\n\nvar transferErrors = client.CreateTransfers(new[] { transfer0, transfer1 });\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Defining SuperBlock Structure for State Management\nDESCRIPTION: Implements the SuperBlock struct which serves as the logical root pointer of the database. It contains references to the oldest and newest manifest blocks, as well as the free set block that tracks available grid blocks.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/data_file.md#2025-04-14_snippet_2\n\nLANGUAGE: zig\nCODE:\n```\npub const SuperBlock = struct {\n    manifest_oldest: BlockReference,\n    manifest_newest: BlockReference,\n    free_set: BlockReference,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Account Flags with TigerBeetle\nDESCRIPTION: Example demonstrating how to use account flags to configure behavior such as linking accounts and adding constraints like debits not exceeding credits.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvar account0 = new Account\n{\n    Id = 100,\n    Ledger = 1,\n    Code = 1,\n    Flags = AccountFlags.Linked | AccountFlags.DebitsMustNotExceedCredits,\n};\nvar account1 = new Account\n{\n    Id = 101,\n    Ledger = 1,\n    Code = 1,\n    Flags = AccountFlags.History,\n};\n\nvar accountErrors = client.CreateAccounts(new[] { account0, account1 });\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Creating a Transfer in TigerBeetle using Node.js\nDESCRIPTION: Example of creating a transfer between two accounts using the TigerBeetle Node.js client.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst transfers = [{\n  id: id(), // TigerBeetle time-based ID.\n  debit_account_id: 102n,\n  credit_account_id: 103n,\n  amount: 10n,\n  pending_id: 0n,\n  user_data_128: 0n,\n  user_data_64: 0n,\n  user_data_32: 0,\n  timeout: 0,\n  ledger: 1,\n  code: 720,\n  flags: 0,\n  timestamp: 0n,\n}];\n\nconst transfer_errors = await client.createTransfers(transfers);\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Voiding a Pending Transfer in Go\nDESCRIPTION: Example showing how to void a two-phase transfer by first creating a pending transfer and then voiding it with the 'VoidPendingTransfer' flag, which removes the pending balances without posting them.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ntransfer0 := Transfer{\n\tID:              ToUint128(8),\n\tDebitAccountID:  ToUint128(101),\n\tCreditAccountID: ToUint128(102),\n\tAmount:          ToUint128(10),\n\tTimeout:         0,\n\tLedger:          1,\n\tCode:            1,\n\tFlags:           0,\n}\n\ntransferErrors, err := client.CreateTransfers([]Transfer{transfer0})\n// Error handling omitted.\n\ntransfer1 := Transfer{\n\tID: ToUint128(9),\n\t// Post the entire pending amount.\n\tAmount:    ToUint128(0),\n\tPendingID: ToUint128(8),\n\tFlags:     TransferFlags{VoidPendingTransfer: true}.ToUint16(),\n}\n\ntransferErrors, err = client.CreateTransfers([]Transfer{transfer1})\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle Java Client with Maven\nDESCRIPTION: Command to install the TigerBeetle client using Maven package manager.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/samples/two-phase/README.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmvn install\n```\n\n----------------------------------------\n\nTITLE: Initializing Large Structs In-Place in Zig\nDESCRIPTION: Demonstrates the recommended pattern for initializing large structures in-place by using an out pointer rather than returning the struct directly. This approach avoids unnecessary memory copies and ensures pointer stability for immovable types.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/TIGER_STYLE.md#2025-04-14_snippet_4\n\nLANGUAGE: zig\nCODE:\n```\nfn init(target: *LargeStruct) !void {\n  target.* = .{\n    // in-place initialization.\n  };\n}\n\nfn main() !void {\n  var target: LargeStruct = undefined;\n  try target.init();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Go Project with TigerBeetle\nDESCRIPTION: A minimal Go program that imports and validates the TigerBeetle client library. This example confirms that the prerequisites and dependencies are correctly set up.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t. \"github.com/tigerbeetle/tigerbeetle-go\"\n\t. \"github.com/tigerbeetle/tigerbeetle-go/pkg/types\"\n)\n\nfunc main() {\n\tfmt.Println(\"Import ok!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Transfer\nDESCRIPTION: Example of creating a basic transfer between two accounts.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntransfers = [tb.Transfer(\n    id=tb.id(), # TigerBeetle time-based ID.\n    debit_account_id=102,\n    credit_account_id=103,\n    amount=10,\n    pending_id=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=0,\n    timestamp=0,\n)]\n\ntransfer_errors = client.create_transfers(transfers)\n# Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Creating and Voiding a Pending Transfer in TigerBeetle using C#\nDESCRIPTION: Demonstrates a two-phase transfer process where a pending transfer is first created with TransferFlags.Pending, and then voided with TransferFlags.VoidPendingTransfer. This rolls back the pending amounts without posting them.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nvar transfer0 = new Transfer\n{\n    Id = 8,\n    DebitAccountId = 102,\n    CreditAccountId = 103,\n    Amount = 10,\n    Ledger = 1,\n    Code = 1,\n    Flags = TransferFlags.Pending,\n};\n\nvar transferErrors = client.CreateTransfers(new[] { transfer0 });\n// Error handling omitted.\n\nvar transfer1 = new Transfer\n{\n    Id = 9,\n    // Post the entire pending amount.\n    Amount = 0,\n    PendingId = 8,\n    Flags = TransferFlags.VoidPendingTransfer,\n};\n\ntransferErrors = client.CreateTransfers(new[] { transfer1 });\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Setting Up TigerBeetle .NET Project\nDESCRIPTION: Commands to create a new console application and add the TigerBeetle package dependency.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/samples/two-phase/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new console\ndotnet add package tigerbeetle\n```\n\n----------------------------------------\n\nTITLE: Basic TigerBeetle Node.js Client Setup\nDESCRIPTION: Initial setup for a Node.js project using the TigerBeetle client, including importing necessary modules.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { id } = require(\"tigerbeetle-node\");\nconst { createClient } = require(\"tigerbeetle-node\");\nconst process = require(\"process\");\n\nconsole.log(\"Import ok!\");\n```\n\n----------------------------------------\n\nTITLE: Query Accounts Implementation\nDESCRIPTION: Preview API implementation for querying accounts with field intersection filtering and timestamp range capabilities.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst query_filter = {\n  user_data_128: 1000n, // Filter by UserData.\n  user_data_64: 100n,\n  user_data_32: 10,\n  code: 1, // Filter by Code.\n  ledger: 0, // No filter by Ledger.\n  timestamp_min: 0n, // No filter by Timestamp.\n  timestamp_max: 0n, // No filter by Timestamp.\n  limit: 10, // Limit to ten balances at most.\n  flags: QueryFilterFlags.reversed, // Sort by timestamp in reverse-chronological order.\n};\n\nconst query_accounts = await client.queryAccounts(query_filter);\n```\n\n----------------------------------------\n\nTITLE: Handling Account Creation Errors in TigerBeetle Go Client\nDESCRIPTION: Demonstrating error handling when creating accounts in TigerBeetle. This example shows how to check for specific error conditions such as accounts that already exist and other creation failures.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_6\n\nLANGUAGE: go\nCODE:\n```\naccount0 := Account{\n\tID:     ToUint128(102),\n\tLedger: 1,\n\tCode:   718,\n\tFlags:  0,\n}\naccount1 := Account{\n\tID:     ToUint128(103),\n\tLedger: 1,\n\tCode:   718,\n\tFlags:  0,\n}\naccount2 := Account{\n\tID:     ToUint128(104),\n\tLedger: 1,\n\tCode:   718,\n\tFlags:  0,\n}\n\naccountErrors, err := client.CreateAccounts([]Account{account0, account1, account2})\nif err != nil {\n\tlog.Printf(\"Error creating accounts: %s\", err)\n\treturn\n}\n\nfor _, err := range accountErrors {\n\tswitch err.Index {\n\tcase uint32(AccountExists):\n\t\tlog.Printf(\"Batch account at %d already exists.\", err.Index)\n\tdefault:\n\t\tlog.Printf(\"Batch account at %d failed to create: %s\", err.Index, err.Result)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Linked Transfers in Java with TigerBeetle\nDESCRIPTION: This snippet shows how to create linked transfers using the TigerBeetle Java client. It demonstrates setting transfer flags to link two transfers together.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nTransferBatch transfers = new TransferBatch(2);\n\n// First transfer\ntransfers.add();\ntransfers.setId(4);\ntransfers.setDebitAccountId(102);\ntransfers.setCreditAccountId(103);\ntransfers.setAmount(10);\ntransfers.setLedger(1);\ntransfers.setCode(1);\ntransfers.setFlags(TransferFlags.LINKED);\n\ntransfers.add();\ntransfers.setId(5);\ntransfers.setDebitAccountId(102);\ntransfers.setCreditAccountId(103);\ntransfers.setAmount(10);\ntransfers.setLedger(1);\ntransfers.setCode(1);\ntransfers.setFlags(TransferFlags.NONE);\n\nCreateTransferResultBatch transferErrors = client.createTransfers(transfers);\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Package Source in .NET\nDESCRIPTION: This command adds NuGet.org as a package source for .NET projects. It's a prerequisite step to ensure the TigerBeetle client can be installed.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/samples/two-phase-many/README.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet nuget add source https://api.nuget.org/v3/index.json -n nuget.org\n```\n\n----------------------------------------\n\nTITLE: Basic Python Client Setup\nDESCRIPTION: Initial setup code showing how to import and verify TigerBeetle client installation with optional debug logging configuration.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nimport tigerbeetle as tb\n\nprint(\"Import OK!\")\n\n# To enable debug logging, via Python's built in logging module:\n# logging.basicConfig(level=logging.DEBUG)\n# tb.configure_logging(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Defining Account Structure in Zig for TigerBeetle\nDESCRIPTION: This code snippet defines the structure of an Account in TigerBeetle. It is implemented as an external struct in Zig, which likely maps to a C-compatible structure for interoperability.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/reference/account.md#2025-04-14_snippet_0\n\nLANGUAGE: Zig\nCODE:\n```\nconst Account = extern struct {\n```\n\n----------------------------------------\n\nTITLE: Handling TigerBeetle Account Creation Errors in Java\nDESCRIPTION: Creates a batch of three accounts and demonstrates how to handle potential errors returned by TigerBeetle. The error handling code processes the error batch, identifying specific error conditions like account already existing, and logs appropriate error messages.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nAccountBatch accounts = new AccountBatch(3);\n\naccounts.add();\naccounts.setId(102);\naccounts.setLedger(1);\naccounts.setCode(718);\naccounts.setFlags(AccountFlags.NONE);\n\naccounts.add();\naccounts.setId(103);\naccounts.setLedger(1);\naccounts.setCode(718);\naccounts.setFlags(AccountFlags.NONE);\n\naccounts.add();\naccounts.setId(104);\naccounts.setLedger(1);\naccounts.setCode(718);\naccounts.setFlags(AccountFlags.NONE);\n\nCreateAccountResultBatch accountErrors = client.createAccounts(accounts);\nwhile (accountErrors.next()) {\n    switch (accountErrors.getResult()) {\n        case Exists:\n            System.err.printf(\"Batch account at %d already exists.\\n\",\n                    accountErrors.getIndex());\n            break;\n\n        default:\n            System.err.printf(\"Batch account at %d failed to create %s.\\n\",\n                    accountErrors.getIndex(), accountErrors.getResult());\n            break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Transfer Lookup Implementation\nDESCRIPTION: Simple implementation of transfer lookup functionality that allows fetching multiple transfers by their IDs.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst transfers = await client.lookupTransfers([1n, 2n]);\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet.org Package Source for .NET\nDESCRIPTION: This command adds NuGet.org as a package source for your .NET project, which is required to install the TigerBeetle client package.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/samples/basic/README.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet nuget add source https://api.nuget.org/v3/index.json -n nuget.org\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Creation Function in Zig for TigerBeetle\nDESCRIPTION: This code snippet represents the function signature for creating an account in TigerBeetle. The full implementation can be found in the state_machine.zig file.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/reference/account.md#2025-04-14_snippet_1\n\nLANGUAGE: Zig\nCODE:\n```\nfn create_account(\n```\n\n----------------------------------------\n\nTITLE: Looking Up Transfers by ID in TigerBeetle\nDESCRIPTION: Shows how to look up transfers by their IDs. The method returns all matched transfers, with no object returned for IDs that don't match any transfer. The order of transfers in the response may differ from the request order.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ntransfers = client.lookup_transfers([1, 2])\n```\n\n----------------------------------------\n\nTITLE: Account Lookup Function Reference\nDESCRIPTION: Main function reference for looking up accounts by their IDs in TigerBeetle. This function allows fetching single or multiple accounts atomically within batch limits. Returns account details if found, nothing if not found.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/reference/requests/lookup_accounts.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `lookup_accounts`\n\nFetch one or more accounts by their `id`s.\n```\n\n----------------------------------------\n\nTITLE: Running TigerBeetle Tests\nDESCRIPTION: Commands for running all database tests or a specific test in the TigerBeetle project.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/HACKING.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n./zig/zig build test\n```\n\nLANGUAGE: console\nCODE:\n```\n./zig/zig build test -- parse_addresses\n```\n\n----------------------------------------\n\nTITLE: Configuring TigerBeetle systemd service unit\nDESCRIPTION: A systemd unit file for running TigerBeetle as a service. It includes environment variables, security hardening settings, and execution parameters for a single-node cluster configuration.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/operating/deploying/systemd.md#2025-04-14_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[Unit]\nDescription=TigerBeetle Replica\nDocumentation=https://docs.tigerbeetle.com/\nAfter=network-online.target\nWants=network-online.target systemd-networkd-wait-online.service\n\n[Service]\nAmbientCapabilities=CAP_IPC_LOCK\n\nEnvironment=TIGERBEETLE_CACHE_GRID_SIZE=1GiB\nEnvironment=TIGERBEETLE_ADDRESSES=3001\nEnvironment=TIGERBEETLE_REPLICA_COUNT=1\nEnvironment=TIGERBEETLE_REPLICA_INDEX=0\nEnvironment=TIGERBEETLE_CLUSTER_ID=0\nEnvironment=TIGERBEETLE_DATA_FILE=%S/tigerbeetle/0_0.tigerbeetle\n\nDevicePolicy=closed\nDynamicUser=true\nLockPersonality=true\nProtectClock=true\nProtectControlGroups=true\nProtectHome=true\nProtectHostname=true\nProtectKernelLogs=true\nProtectKernelModules=true\nProtectKernelTunables=true\nProtectProc=noaccess\nProtectSystem=strict\nRestrictAddressFamilies=AF_INET AF_INET6\nRestrictNamespaces=true\nRestrictRealtime=true\nRestrictSUIDSGID=true\n\nStateDirectory=tigerbeetle\nStateDirectoryMode=700\n\nType=exec\nExecStart=/usr/local/bin/tigerbeetle start --cache-grid=${TIGERBEETLE_CACHE_GRID_SIZE} --addresses=${TIGERBEETLE_ADDRESSES} ${TIGERBEETLE_DATA_FILE}\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Inefficient Sequential Transfer Creation in Go\nDESCRIPTION: An inefficient example showing how to create transfers sequentially without batching, which significantly reduces performance by waiting for a reply between each transfer.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nbatch := []Transfer{}\nfor i := 0; i < len(batch); i++ {\n\ttransferErrors, err := client.CreateTransfers([]Transfer{batch[i]})\n\t_, _ = transferErrors, err // Error handling omitted.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TigerBeetle Client Connection\nDESCRIPTION: Example of creating a client connection with cluster ID and replica address configuration.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith tb.ClientSync(cluster_id=0, replica_addresses=os.getenv(\"TB_ADDRESS\", \"3000\")) as client:\n    # Use the client.\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running TigerBeetle Cluster with Docker Compose\nDESCRIPTION: Command to start a TigerBeetle cluster using the Docker Compose configuration.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/operating/deploying/docker.md#2025-04-14_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Additional TigerBeetle Development Commands\nDESCRIPTION: Useful commands for building and running TigerBeetle, checking compilation, formatting code, running lint checks, and benchmarking.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/HACKING.md#2025-04-14_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n./zig/zig build run -- format ...\n```\n\nLANGUAGE: console\nCODE:\n```\n./zig/zig build check\n```\n\nLANGUAGE: console\nCODE:\n```\n./zig/zig fmt .\n```\n\nLANGUAGE: console\nCODE:\n```\n./zig/zig build test -- tidy\n```\n\nLANGUAGE: console\nCODE:\n```\n./zig/zig build -Drelease run -- benchmark\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for TigerBeetle Cluster\nDESCRIPTION: YAML configuration for running a three-node TigerBeetle cluster using Docker Compose. Each service represents a replica with host networking mode and shared data volume.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/operating/deploying/docker.md#2025-04-14_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.7\"\n\n##\n# Note: this example might only work with linux + using `network_mode:host` because of 2 reasons:\n#\n# 1. When specifying an internal docker network, other containers are only available using dns based routing:\n#    e.g. from tigerbeetle_0, the other replicas are available at `tigerbeetle_1:3002` and\n#    `tigerbeetle_2:3003` respectively.\n#\n# 2. Tigerbeetle performs some validation of the ip address provided in the `--addresses` parameter\n#    and won't let us specify a custom domain name.\n#\n# The workaround for now is to use `network_mode:host` in the containers instead of specifying our\n# own internal docker network\n##\n\nservices:\n  tigerbeetle_0:\n    image: ghcr.io/tigerbeetle/tigerbeetle\n    command: \"start --addresses=0.0.0.0:3001,0.0.0.0:3002,0.0.0.0:3003 /data/0_0.tigerbeetle\"\n    network_mode: host\n    volumes:\n      - ./data:/data\n    security_opt:\n      - \"seccomp=unconfined\"\n\n  tigerbeetle_1:\n    image: ghcr.io/tigerbeetle/tigerbeetle\n    command: \"start --addresses=0.0.0.0:3001,0.0.0.0:3002,0.0.0.0:3003 /data/0_1.tigerbeetle\"\n    network_mode: host\n    volumes:\n      - ./data:/data\n    security_opt:\n      - \"seccomp=unconfined\"\n\n  tigerbeetle_2:\n    image: ghcr.io/tigerbeetle/tigerbeetle\n    command: \"start --addresses=0.0.0.0:3001,0.0.0.0:3002,0.0.0.0:3003 /data/0_2.tigerbeetle\"\n    network_mode: host\n    volumes:\n      - ./data:/data\n    security_opt:\n      - \"seccomp=unconfined\"\n```\n\n----------------------------------------\n\nTITLE: Formatting TigerBeetle Data File with Docker\nDESCRIPTION: Command to format a TigerBeetle data file using Docker with volume mounting. This prepares the database file for use with the specified cluster and replica configuration.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/operating/deploying/docker.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --security-opt seccomp=unconfined \\\n     -v $(pwd)/data:/data ghcr.io/tigerbeetle/tigerbeetle \\\n    format --cluster=0 --replica=0 --replica-count=1 /data/0_0.tigerbeetle\n```\n\n----------------------------------------\n\nTITLE: Formatting TigerBeetle Data File\nDESCRIPTION: Creates and formats a data file for a single-replica TigerBeetle cluster in development mode.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/start.md#2025-04-14_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n./tigerbeetle format --cluster=0 --replica=0 --replica-count=1 --development ./0_0.tigerbeetle\n```\n\n----------------------------------------\n\nTITLE: Looking Up Accounts in TigerBeetle\nDESCRIPTION: Simple example showing how to look up accounts by their IDs. The response contains matched accounts, but may be in a different order than the request.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nAccount[] accounts = client.LookupAccounts(new UInt128[] { 100, 101 });\n```\n\n----------------------------------------\n\nTITLE: Pushing to Release Branch in TigerBeetle\nDESCRIPTION: Command to push the updated main branch to the release branch after the changelog PR is merged. This triggers the release process in GitHub Actions workflow.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/releases.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git fetch origin && git push origin origin/main:release\n```\n\n----------------------------------------\n\nTITLE: Creating TigerBeetle pre-start script\nDESCRIPTION: A shell script to ensure the TigerBeetle replica data file exists before starting the service. If the file doesn't exist, it formats a new data file using the provided cluster configuration.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/operating/deploying/systemd.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nset -eu\n\nif ! test -e \"${TIGERBEETLE_DATA_FILE}\"; then\n  /usr/local/bin/tigerbeetle format --cluster=\"${TIGERBEETLE_CLUSTER_ID}\" --replica=\"${TIGERBEETLE_REPLICA_INDEX}\" --replica-count=\"${TIGERBEETLE_REPLICA_COUNT}\" \"${TIGERBEETLE_DATA_FILE}\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Starting TigerBeetle REPL Client\nDESCRIPTION: Connects to a TigerBeetle cluster using the built-in REPL client.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/start.md#2025-04-14_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n./tigerbeetle repl --cluster=0 --addresses=3000\n```\n\n----------------------------------------\n\nTITLE: Account Status After Transfer\nDESCRIPTION: JSON output showing the updated account states after performing a transfer between accounts.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/start.md#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"1\",\n  \"user_data\": \"0\",\n  \"ledger\": \"700\",\n  \"code\": \"10\",\n  \"flags\": [],\n  \"debits_pending\": \"0\",\n  \"debits_posted\": \"10\",\n  \"credits_pending\": \"0\",\n  \"credits_posted\": \"0\"\n}\n{\n  \"id\": \"2\",\n  \"user_data\": \"0\",\n  \"ledger\": \"700\",\n  \"code\": \"10\",\n  \"flags\": \"\",\n  \"debits_pending\": \"0\",\n  \"debits_posted\": \"0\",\n  \"credits_pending\": \"0\",\n  \"credits_posted\": \"10\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Client Docs Generator\nDESCRIPTION: Command to build and execute the documentation generator script for all client libraries\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/README.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n./zig/zig build scripts -- ci\n```\n\n----------------------------------------\n\nTITLE: Formatting Multiple TigerBeetle Replicas for a Cluster\nDESCRIPTION: Commands to format data files for a three-node TigerBeetle cluster. Each command creates a separate replica file with appropriate cluster configuration.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/operating/deploying/docker.md#2025-04-14_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndocker run --security-opt seccomp=unconfined -v $(pwd)/data:/data ghcr.io/tigerbeetle/tigerbeetle format --cluster=0 --replica=0 --replica-count=3 /data/0_0.tigerbeetle\ndocker run --security-opt seccomp=unconfined -v $(pwd)/data:/data ghcr.io/tigerbeetle/tigerbeetle format --cluster=0 --replica=1 --replica-count=3 /data/0_1.tigerbeetle\ndocker run --security-opt seccomp=unconfined -v $(pwd)/data:/data ghcr.io/tigerbeetle/tigerbeetle format --cluster=0 --replica=2 --replica-count=3 /data/0_2.tigerbeetle\n```\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle on macOS\nDESCRIPTION: Command to download, unzip and verify TigerBeetle installation on macOS systems using curl.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/operating/installing.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncurl -Lo tigerbeetle.zip https://mac.tigerbeetle.com && unzip tigerbeetle.zip && ./tigerbeetle version\n```\n\n----------------------------------------\n\nTITLE: Running Zig Formatter\nDESCRIPTION: Command to run the Zig formatter to ensure consistent code style across the project.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/TIGER_STYLE.md#2025-04-14_snippet_7\n\nLANGUAGE: zig\nCODE:\n```\nzig fmt\n```\n\n----------------------------------------\n\nTITLE: Implementing BlockReference Structure for Grid Access\nDESCRIPTION: Defines the BlockReference struct which combines a block index and checksum to uniquely identify a grid block. The checksum is stored separately from the block to protect against misdirected writes.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/data_file.md#2025-04-14_snippet_1\n\nLANGUAGE: zig\nCODE:\n```\npub const BlockReference = struct {\n    index: u64,\n    checksum: u128,\n};\n```\n\n----------------------------------------\n\nTITLE: Validating TigerBeetle Installation\nDESCRIPTION: Basic C# program to verify that the TigerBeetle client package is correctly installed and imported.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\n\nusing TigerBeetle;\n\n// Validate import works.\nConsole.WriteLine(\"SUCCESS\");\n```\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle on Windows\nDESCRIPTION: PowerShell command to download and extract TigerBeetle binary for Windows systems, then verify the installation.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/start.md#2025-04-14_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npowershell -command \"curl.exe -Lo tigerbeetle.zip https://windows.tigerbeetle.com; Expand-Archive tigerbeetle.zip .; .\\tigerbeetle version\"\n```\n\n----------------------------------------\n\nTITLE: Defining Compaction Event Structures for LSM Management\nDESCRIPTION: Implements the CompactionEvent and Label structs that represent table modifications during LSM tree compaction. These structures track the insertion, update, and removal of tables across different levels of the LSM tree.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/data_file.md#2025-04-14_snippet_4\n\nLANGUAGE: zig\nCODE:\n```\nconst CompactionEvent = struct {\n    label: Label\n    table: TableInfo, // points to table's index block\n};\n\nconst Label = struct {\n    level: u6,\n    event: enum(u2) { insert, update, remove },\n};\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Go Project\nDESCRIPTION: Command to build and execute the Go program. This verifies that the TigerBeetle dependencies are correctly installed and the imports work.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ngo run main.go\n```\n\n----------------------------------------\n\nTITLE: Running TigerBeetle Debug Image\nDESCRIPTION: Command to run TigerBeetle with a debug-enabled Docker image for better stack traces when troubleshooting panics.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/operating/deploying/docker.md#2025-04-14_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ndocker run -p 3000:3000 -v $(pwd)/data:/data ghcr.io/tigerbeetle/tigerbeetle:debug \\\n    start --addresses=0.0.0.0:3000 /data/0_0.tigerbeetle\n```\n\n----------------------------------------\n\nTITLE: Visualizing Snapshot Operations in LSM Storage\nDESCRIPTION: A text-based diagram illustrating how compaction works with snapshots and operations in TigerBeetle's LSM storage. It shows the relationship between on-disk tables, the immutable table, and the mutable table during the compaction process.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/lsm.md#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n0   4   8  12  16  20  24  28  (op, snapshot)\n┼───┬───┼───┬───┼───┬───┼───┬\n        ,,,,,,,,........\n        ↑A      ↑B      ↑C\n```\n\n----------------------------------------\n\nTITLE: Visualizing Snapshot and Compaction Relationship\nDESCRIPTION: A text-based timeline visualization that illustrates how snapshots relate to compaction operations. It shows how table visibility changes before and after compaction, with input tables becoming invisible and output tables becoming visible at specific operation counts.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/lsm.md#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n0   4   8  12  16  20  24  (op, snapshot)\n┼───┬───┼───┬───┼───┬───┼\n            ####\n····────────X────────····  (input  tables, before compaction)\n····────────────           (input  tables,  after compaction)\n                Y────····  (output tables,  after compaction)\n```\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle Python Client\nDESCRIPTION: Console command to install the TigerBeetle client via pip package manager.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install tigerbeetle\n```\n\n----------------------------------------\n\nTITLE: Running the Two-Phase Transfers Java Sample\nDESCRIPTION: Command to execute the Java sample application using Maven's exec plugin.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/samples/two-phase-many/README.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nmvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Structuring Assertions in Zig: Splitting Compound Assertions for Better Debugging\nDESCRIPTION: Demonstrates the preferred way to structure assertions by splitting compound assertions into individual ones for better readability and more precise error information when assertions fail.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/TIGER_STYLE.md#2025-04-14_snippet_0\n\nLANGUAGE: zig\nCODE:\n```\nassert(a); assert(b);\n```\n\n----------------------------------------\n\nTITLE: Setting Up TigerBeetle Client Project\nDESCRIPTION: Commands to create a new console project and install the TigerBeetle client package via NuGet.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndotnet new console\ndotnet add package tigerbeetle\n```\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle Node.js Client\nDESCRIPTION: Command to install the TigerBeetle client for Node.js using npm.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install --save-exact tigerbeetle-node\n```\n\n----------------------------------------\n\nTITLE: Running the Sample Application\nDESCRIPTION: Command to execute the main Node.js sample application that demonstrates two-phase transfers.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/samples/two-phase-many/README.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnode main.js\n```\n\n----------------------------------------\n\nTITLE: Building and Testing TigerBeetle Client Libraries\nDESCRIPTION: General pattern for building client libraries with Zig and testing them with language-specific package managers.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/HACKING.md#2025-04-14_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n./zig/zig build client_lang\ncd src/clients/lang\nlang_package_manager test\n```\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle Go Client\nDESCRIPTION: Commands to initialize a Go module and install the TigerBeetle Go client library.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/samples/basic/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init tbtest\ngo get github.com/tigerbeetle/tigerbeetle-go\n```\n\n----------------------------------------\n\nTITLE: Installing the TigerBeetle Go Client\nDESCRIPTION: Commands to initialize a Go module and install the TigerBeetle Go client. This sets up the required dependencies for your project.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/README.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo mod init tbtest\ngo get github.com/tigerbeetle/tigerbeetle-go\n```\n\n----------------------------------------\n\nTITLE: Running the Java Sample Application\nDESCRIPTION: Command to execute the Java sample application using Maven.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/samples/two-phase/README.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nmvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Testing and Simulation Framework\nDESCRIPTION: Describes TigerBeetle's simulation testing approach using VOPR (The Viewstamped Operation Replicator) to run cluster simulations on a single thread with fault injection capabilities.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/ARCHITECTURE.md#2025-04-14_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Creating a New .NET Console Project and Adding TigerBeetle Package\nDESCRIPTION: These commands create a new .NET console application and add the TigerBeetle client package as a dependency.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/samples/basic/README.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndotnet new console\ndotnet add package tigerbeetle\n```\n\n----------------------------------------\n\nTITLE: Running the Python Sample\nDESCRIPTION: Command to execute the main Python script of the sample. This assumes the user has followed the setup instructions and is in the correct directory.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/samples/two-phase-many/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: Running TigerBeetle Deterministic Simulator\nDESCRIPTION: Commands for running the VOPR deterministic simulator with optional seed parameter for reproducible outcomes.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/HACKING.md#2025-04-14_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n./zig/zig build vopr\n```\n\nLANGUAGE: console\nCODE:\n```\n./zig/zig build vopr -- 123\n```\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle Go Client\nDESCRIPTION: Commands to initialize a Go module and install the TigerBeetle Go client.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/samples/two-phase-many/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo mod init tbtest\ngo get github.com/tigerbeetle/tigerbeetle-go\n```\n\n----------------------------------------\n\nTITLE: Running the Sample Application\nDESCRIPTION: Command to execute the main Node.js sample application.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/samples/basic/README.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnode main.js\n```\n\n----------------------------------------\n\nTITLE: Implementing ManifestBlock for LSM Tree State Tracking\nDESCRIPTION: Defines the ManifestBlock struct which forms a linked list of table operations for LSM trees. Each block contains a reference to the previous manifest block, creating a persistent log of all table changes.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/data_file.md#2025-04-14_snippet_5\n\nLANGUAGE: zig\nCODE:\n```\nconst ManifestBlock = struct {\n  previous_manifest_block: BlockReference,\n  labels: [entry_count_max]Label,\n  tables: [entry_count_max]TableInfo,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle Java Client with Maven\nDESCRIPTION: Command to install the TigerBeetle Java client using Maven build system.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/samples/two-phase-many/README.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmvn install\n```\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle on Windows\nDESCRIPTION: PowerShell command to download, extract and verify TigerBeetle installation on Windows systems.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/operating/installing.md#2025-04-14_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npowershell -command \"curl.exe -Lo tigerbeetle.zip https://windows.tigerbeetle.com; Expand-Archive tigerbeetle.zip .; .\\tigerbeetle version\"\n```\n\n----------------------------------------\n\nTITLE: Defining Block Structure in TigerBeetle's Grid Storage\nDESCRIPTION: Defines the Block type as a byte array of fixed size (64KiB) and BlockPtr as a pointer to a block with sector-size alignment. These are the fundamental storage units in TigerBeetle's grid system.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/data_file.md#2025-04-14_snippet_0\n\nLANGUAGE: zig\nCODE:\n```\npub const Block = [constants.block_size]u8;\npub const BlockPtr = *align(constants.sector_size) Block;\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Package Source for .NET\nDESCRIPTION: Command to add NuGet.org as a package source for .NET projects if it's not already configured.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/samples/two-phase/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet nuget add source https://api.nuget.org/v3/index.json -n nuget.org\n```\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle on Linux\nDESCRIPTION: Command to download, unzip and verify TigerBeetle installation on Linux systems using curl.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/operating/installing.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncurl -Lo tigerbeetle.zip https://linux.tigerbeetle.com && unzip tigerbeetle.zip && ./tigerbeetle version\n```\n\n----------------------------------------\n\nTITLE: Docker Configuration for MEMLOCK Limits\nDESCRIPTION: JSON configuration for Docker daemon to set unlimited memory lock limits, which helps prevent TigerBeetle's \"SystemResources\" error on macOS.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/operating/deploying/docker.md#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  ... other settings ...\n  \"default-ulimits\": {\n    \"memlock\": {\n      \"Hard\": -1,\n      \"Name\": \"memlock\",\n      \"Soft\": -1\n    }\n  },\n  ... other settings ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Python Sample\nDESCRIPTION: Command to execute the Python sample application that demonstrates TigerBeetle functionality.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/samples/basic/README.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle on MacOS\nDESCRIPTION: Downloads and extracts the TigerBeetle binary for MacOS systems, then verifies the installation by checking the version.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/start.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncurl -Lo tigerbeetle.zip https://mac.tigerbeetle.com && unzip tigerbeetle.zip && ./tigerbeetle version\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Package Source\nDESCRIPTION: Command to add NuGet.org as a package source if not already present, which is required for installing the TigerBeetle client package.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet nuget add source https://api.nuget.org/v3/index.json -n nuget.org\n```\n\n----------------------------------------\n\nTITLE: Running the Go Sample\nDESCRIPTION: Command to run the main.go file containing the TigerBeetle Go sample code.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/samples/basic/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo run main.go\n```\n\n----------------------------------------\n\nTITLE: Running TigerBeetle Fuzzing Tests\nDESCRIPTION: Commands for running fuzzing tests defined in /src/fuzz_tests.zig, including smoke tests and lsm_tree tests.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/HACKING.md#2025-04-14_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n./zig/zig build fuzz -- smoke\n./zig/zig build fuzz -- lsm_tree\n```\n\n----------------------------------------\n\nTITLE: TigerBeetle Cluster Startup Output\nDESCRIPTION: Console output showing the startup sequence of a three-node TigerBeetle cluster, including replica initialization and connections between nodes.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/operating/deploying/docker.md#2025-04-14_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ndocker-compose up\nStarting tigerbeetle_0   ... done\nStarting tigerbeetle_2   ... done\nRecreating tigerbeetle_1 ... done\nAttaching to tigerbeetle_0, tigerbeetle_2, tigerbeetle_1\ntigerbeetle_1    | info(io): opening \"0_1.tigerbeetle\"...\ntigerbeetle_2    | info(io): opening \"0_2.tigerbeetle\"...\ntigerbeetle_0    | info(io): opening \"0_0.tigerbeetle\"...\ntigerbeetle_0    | info(main): 0: cluster=0: listening on 0.0.0.0:3001\ntigerbeetle_2    | info(main): 2: cluster=0: listening on 0.0.0.0:3003\ntigerbeetle_1    | info(main): 1: cluster=0: listening on 0.0.0.0:3002\ntigerbeetle_0    | info(message_bus): connected to replica 1\ntigerbeetle_0    | info(message_bus): connected to replica 2\ntigerbeetle_1    | info(message_bus): connected to replica 2\ntigerbeetle_1    | info(message_bus): connection from replica 0\ntigerbeetle_2    | info(message_bus): connection from replica 0\ntigerbeetle_2    | info(message_bus): connection from replica 1\ntigerbeetle_0    | info(clock): 0: system time is 83ns ahead\ntigerbeetle_2    | info(clock): 2: system time is 83ns ahead\ntigerbeetle_1    | info(clock): 1: system time is 78ns ahead\n\n... and so on ...\n```\n\n----------------------------------------\n\nTITLE: Running TigerBeetle Client Integration Tests\nDESCRIPTION: Command for running the CI script to test a specific language client, which orchestrates both unit tests and integration tests.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/HACKING.md#2025-04-14_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n./zig/zig build scripts -- ci --language=go\n```\n\n----------------------------------------\n\nTITLE: Running the Python Sample\nDESCRIPTION: Command to execute the main Python script for the two-phase transfer sample. This assumes you're in the correct directory and have completed all setup steps.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/samples/two-phase/README.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: TigerBeetle Recipe Links in Markdown\nDESCRIPTION: A markdown list of links to different TigerBeetle transaction recipes and use-case documentation.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/coding/recipes/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Currency Exchange](./currency-exchange.md)\n- [Multi-Debit, Multi-Credit Transfers](./multi-debit-credit-transfers.md)\n- [Closing Accounts](./close-account.md)\n- [Balance-Conditional Transfers](./balance-conditional-transfers.md)\n- [Balance-Invariant Transfers](./balance-invariant-transfers.md)\n- [Balance Bounds](./balance-bounds.md)\n- [Correcting Transfers](./correcting-transfers.md)\n- [Rate Limiting](./rate-limiting.md)\n```\n\n----------------------------------------\n\nTITLE: Interpreting VOPR Output Format Example\nDESCRIPTION: Example output showing the VOPR format with multiple columns representing replica states, including crash/recovery events, roles, statuses, view numbers, checkpoints, commits, and various system metrics.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/testing.md#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n 1 2 3 4-------- 5---  6----------  7-------  8-----  9------- 10-----   11-- 12-----  13-   14-   15---  16---\n\n 3 [ /    .        3V  71/_99/_99C  68:_99Jo  0/_0J!  68:_99Wo <__0:__0> v1:2   183Ga  0G!   0G?   0/4Pp  0/3Rq\n 4 ^ \\     .       2V  23/_23/_46C  19:_50Jo  0/_0J!  19:_50Wo <__0:__0> v1:2  nullGa  0G!   0G?\n 2   \\   .         3V  71/_99/_99C  68:_99Jo  0/_0J!  68:_99Wo <__0:__0> v1:2   183Ga  0G!   0G?\n 2 [ \\   .         3V  71/_99/_99C  68:_99Jo  0/_0J!  68:_99Wo <__0:__0> v1:2   183Ga  0G!   0G?\n 6   |       .     3V  71/_99/_99C  68:_99Jo  0/_0J!  68:_99Wo <__0:__0> v1:2   183Ga  0G!   0G?\n 6 [ |       .     3V  71/_99/_99C  68:_99Jo  0/_0J!  68:_99Wo <__0:__0> v1:2   183Ga  0G!   0G?\n 3 ] /    .        3V  95/_99/_99C  68:_99Jo  0/_0J!  68:_99Wo <__0:__0> v1:2   167Ga  0G!   0G?   0/4Pp  0/3Rq\n 2 ] \\   .         3V  95/_99/_99C  68:_99Jo  0/_0J!  68:_99Wo <__0:__0> v1:2   167Ga  0G!   0G?\n 1   \\  .          3V  71/_99/_99C  68:_99Jo  0/_1J!  67:_98Wo <__0:__0> v1:2   183Ga  0G!   0G?\n 1 [ \\  .          3V  71/_99/_99C  68:_99Jo  0/_1J!  67:_98Wo <__0:__0> v1:2   183Ga  0G!   0G?\n 5   |      .      3V  71/_99/_99C  68:_99Jo  0/_0J!  68:_99Wo <__0:__0> v1:2   183Ga  0G!   0G?\n 5 [ |      .      3V  71/_99/_99C  68:_99Jo  0/_0J!  68:_99Wo <__0:__0> v1:2   183Ga  0G!   0G?\n```\n\n----------------------------------------\n\nTITLE: Running the Two-Phase Transfer Sample\nDESCRIPTION: Command to execute the main JavaScript file of the sample. This runs the two-phase transfer demonstration.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/samples/two-phase/README.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnode main.js\n```\n\n----------------------------------------\n\nTITLE: Account Lookup Event Specification\nDESCRIPTION: Specifies the event structure for account lookups, which consists of an account ID that corresponds to an Account entity.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/reference/requests/lookup_accounts.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Event\n\nAn [`id`](../account.md#id) belonging to a [`Account`](../account.md).\n```\n\n----------------------------------------\n\nTITLE: Discouraged Pattern for Index Bounds Checking in Zig\nDESCRIPTION: Illustrates a harder-to-understand pattern for checking array index bounds using negations, which should be avoided in favor of the clearer positive condition approach.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/TIGER_STYLE.md#2025-04-14_snippet_2\n\nLANGUAGE: zig\nCODE:\n```\nif (index >= length) {\n  // It's not true that the invariant holds.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up TigerBeetle Client in .NET Project\nDESCRIPTION: These commands create a new console project and add the TigerBeetle package to it. This is part of the setup process for the sample project.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/samples/two-phase-many/README.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndotnet new console\ndotnet add package tigerbeetle\n```\n\n----------------------------------------\n\nTITLE: Handling Index Bounds Checking in Zig with Positive Conditions\nDESCRIPTION: Shows the recommended pattern for checking array index bounds using positive conditions rather than negations, which improves readability and reduces errors in boundary condition handling.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/TIGER_STYLE.md#2025-04-14_snippet_1\n\nLANGUAGE: zig\nCODE:\n```\nif (index < length) {\n  // The invariant holds.\n} else {\n  // The invariant doesn't hold.\n}\n```\n\n----------------------------------------\n\nTITLE: Account Lookup Result Specification\nDESCRIPTION: Defines the possible results from an account lookup operation, including success and not-found cases.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/reference/requests/lookup_accounts.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Result\n\n- If the account exists, return the [`Account`](../account.md).\n- If the account does not exist, return nothing.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Division Intent in Zig\nDESCRIPTION: Shows how to use specific division functions in Zig to clearly indicate the intended behavior, especially in cases where rounding may be involved.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/TIGER_STYLE.md#2025-04-14_snippet_6\n\nLANGUAGE: zig\nCODE:\n```\n@divExact()\n```\n\nLANGUAGE: zig\nCODE:\n```\n@divFloor()\n```\n\nLANGUAGE: zig\nCODE:\n```\ndiv_ceil()\n```\n\n----------------------------------------\n\nTITLE: Running the Java Sample Application\nDESCRIPTION: Command to execute the Java sample application using Maven's exec plugin.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/samples/basic/README.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nmvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Building Antithesis Test Script\nDESCRIPTION: Command to build and run the Antithesis test script with a specific tag parameter.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/testing/systest/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzig build scripts -- antithesis --tag=<tag>\n```\n\n----------------------------------------\n\nTITLE: Running the Validation Program\nDESCRIPTION: Command to build and run the validation program that verifies TigerBeetle client installation.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Sample Changelog Format for TigerBeetle Release\nDESCRIPTION: Example of the automatically generated changelog scaffold showing the format with version, release date, and categorized pull requests. This template includes sections for Safety And Performance, Features, Internals, and TigerTracks.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/releases.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## TigerBeetle 0.16.3   <- Double check this version.\n\nReleased 2024-08-29\n\n- [#2256](https://github.com/tigerbeetle/tigerbeetle/pull/2256)\n      Build: Check zig version\n- [#2248](https://github.com/tigerbeetle/tigerbeetle/pull/2248)\n      vopr: heal *both* wal header sectors before replica startup\n\n### Safety And Performance\n\n-\n\n### Features\n\n-\n\n### Internals\n\n-\n\n### TigerTracks 🎧\n\n- []()\n```\n\n----------------------------------------\n\nTITLE: Push Containers to Antithesis\nDESCRIPTION: Command to build and push containers to Antithesis with a specified tag.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/testing/systest/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nzig build scripts -- antithesis --tag=<tag> --push\n```\n\n----------------------------------------\n\nTITLE: Two-Phase Transfer Implementation - Post Pending\nDESCRIPTION: Implementation of two-phase transfer with posting functionality. Shows how to create a pending transfer and then post it using TransferFlags.post_pending_transfer.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/README.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst transfer0 = {\n  id: 6n,\n  debit_account_id: 102n,\n  credit_account_id: 103n,\n  amount: 10n,\n  pending_id: 0n,\n  user_data_128: 0n,\n  user_data_64: 0n,\n  user_data_32: 0,\n  timeout: 0,\n  ledger: 1,\n  code: 720,\n  flags: TransferFlags.pending,\n  timestamp: 0n,\n};\n\nlet transfer_errors = await client.createTransfers([transfer0]);\n// Error handling omitted.\n\nconst transfer1 = {\n  id: 7n,\n  debit_account_id: 102n,\n  credit_account_id: 103n,\n  // Post the entire pending amount.\n  amount: amount_max,\n  pending_id: 6n,\n  user_data_128: 0n,\n  user_data_64: 0n,\n  user_data_32: 0,\n  timeout: 0,\n  ledger: 1,\n  code: 720,\n  flags: TransferFlags.post_pending_transfer,\n  timestamp: 0n,\n};\n\ntransfer_errors = await client.createTransfers([transfer1]);\n// Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Dependency Strategy Overview\nDESCRIPTION: Details TigerBeetle's minimal dependency approach, relying only on Linux kernel API (io_uring), Zig compiler, and parts of Zig standard library.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/ARCHITECTURE.md#2025-04-14_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Representing Maximum Integer Value in REPL\nDESCRIPTION: Updated the REPL to support representing the maximum integer value as '-0', serving as the AMOUNT_MAX sentinel. Also added support for hexadecimal numbers for GUID/UUID literals.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: zig\nCODE:\n```\n-0 // Represents AMOUNT_MAX\n0xa1a2a3a4_b1b2_c1c2_d1d2_e1e2e3e4e5e6 // Hexadecimal GUID/UUID\n```\n\n----------------------------------------\n\nTITLE: Debugging Macro in Zig\nDESCRIPTION: Ported Rust's dbg! macro to Zig for debugging purposes. Includes CI validation to prevent code using it from being merged into the main branch.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: zig\nCODE:\n```\ndbg!(variable)\n```\n\n----------------------------------------\n\nTITLE: Java Maven Dependency Configuration - XML\nDESCRIPTION: Maven dependency configuration for upgrading TigerBeetle Java client to version 0.15.4.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/operating/upgrading.md#2025-04-14_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n    <dependency>\n        <groupId>com.tigerbeetle</groupId>\n        <artifactId>tigerbeetle-java</artifactId>\n        <version>0.15.4</version>\n    </dependency>\n```\n\n----------------------------------------\n\nTITLE: Running the Go Sample\nDESCRIPTION: Command to execute the main Go file of the sample project.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/go/samples/two-phase-many/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run main.go\n```\n\n----------------------------------------\n\nTITLE: Reserving Grid Space in Zig\nDESCRIPTION: Modified Grid.reserve() to abort with an error message instead of returning null when the data file size limit would be exceeded. This provides a more informative error when the reservation fails.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: zig\nCODE:\n```\nGrid.reserve().abort()\n```\n\n----------------------------------------\n\nTITLE: Running Docs Generator for Single Language\nDESCRIPTION: Command to generate documentation for a specific language client library, using the markdown_name parameter\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/README.md#2025-04-14_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n./zig/zig build scripts -- ci --language=go\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Data Structures for LSM Trees\nDESCRIPTION: Defines the structures for table organization in LSM trees, including TableDataBlock for storing sorted values, TableIndexBlock for managing pointers to data blocks, and TableInfo for identifying tables within the system.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/data_file.md#2025-04-14_snippet_3\n\nLANGUAGE: zig\nCODE:\n```\nconst TableDataBlock = struct {\n    values_sorted: [value_count_max]Value,\n};\n\nconst TableIndexBlock = struct {\n    data_block_checksums: [data_block_count_max]u128,\n    data_block_indexes:   [data_block_count_max]u64,\n    data_block_key_max:   [data_block_count_max]Key,\n};\n\nconst TableInfo = struct {\n    tree_id: u16,\n    index_block_index: u64,\n    index_block_checksum: u128,\n    key_min: Key,\n    key_max: Key,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle Node.js Client\nDESCRIPTION: Command to install the TigerBeetle Node.js client package with an exact version specification.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/samples/two-phase-many/README.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install --save-exact tigerbeetle-node\n```\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle Python Client\nDESCRIPTION: Command to install the TigerBeetle client using pip. This is a prerequisite for running the sample.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/samples/two-phase/README.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install tigerbeetle\n```\n\n----------------------------------------\n\nTITLE: Displaying TigerBeetle Architecture Diagram in Markdown\nDESCRIPTION: This snippet shows how to embed an image in Markdown to illustrate TigerBeetle's position in the system architecture.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/coding/system-architecture.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![TigerBeetle in Your System Architecture](https://github.com/user-attachments/assets/679ec8be-640d-4c7e-b082-076557baeac7)\n```\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle Python Client\nDESCRIPTION: Command to install the TigerBeetle client using pip. This is a prerequisite for running the sample.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/samples/two-phase-many/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install tigerbeetle\n```\n\n----------------------------------------\n\nTITLE: Memory Management Description in TigerBeetle\nDESCRIPTION: Explains how TigerBeetle manages memory through static allocation rather than using malloc/free. The system calculates upper bounds for object counts at startup and pre-allocates all needed memory, avoiding runtime allocation.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/ARCHITECTURE.md#2025-04-14_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle Node.js Client\nDESCRIPTION: Command to install the TigerBeetle client for Node.js using npm. This step is required before running the sample.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/node/samples/two-phase/README.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install --save-exact tigerbeetle-node\n```\n\n----------------------------------------\n\nTITLE: Running the .NET Sample Application\nDESCRIPTION: This command executes the .NET sample application that demonstrates TigerBeetle functionality.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/samples/basic/README.md#2025-04-14_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: TigerBeetle Format Command Output\nDESCRIPTION: Console output showing the successful creation and allocation of a TigerBeetle data file.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/operating/deploying/docker.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ninfo(io): creating \"0_0.tigerbeetle\"...\ninfo(io): allocating 660.140625MiB...\n```\n\n----------------------------------------\n\nTITLE: Running the Two-Phase Transfer Sample\nDESCRIPTION: Command to execute the .NET application demonstrating two-phase transfers with TigerBeetle.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/samples/two-phase/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Running the .NET Sample Project\nDESCRIPTION: This command executes the .NET sample project demonstrating two-phase transfers with TigerBeetle.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/samples/two-phase-many/README.md#2025-04-14_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Installing TigerBeetle Zig Version\nDESCRIPTION: Command to download the TigerBeetle-specific version of Zig compiler, using either .sh script for macOS/Linux or .bat script for Windows\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/README.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n./zig/download.[sh|bat]\n```\n\n----------------------------------------\n\nTITLE: Formatting Zig Source Files\nDESCRIPTION: Command to format all Zig source files in the repository using the Zig formatter\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/README.md#2025-04-14_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n./zig/zig fmt .\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Java Main Class to Test TigerBeetle Import\nDESCRIPTION: A simple Java main class that verifies the TigerBeetle client can be successfully imported. This serves as a basic test to ensure the dependency is correctly set up.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.tigerbeetle.*;\n\npublic final class Main {\n    public static void main(String[] args) throws Exception {\n        System.out.println(\"Import ok!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Changelog Generation Script in TigerBeetle\nDESCRIPTION: Command to generate a changelog scaffold for a new TigerBeetle release. This script updates the local repository to match remote, creates a branch for the changelog PR, and adds a scaffold of the new changelog to CHANGELOG.md with an incremented patch version number.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/releases.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./zig/zig build scripts -- changelog\n```\n\n----------------------------------------\n\nTITLE: Inefficient Sequential Transfer Creation\nDESCRIPTION: Example showing inefficient way of creating transfers one at a time.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/README.md#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nbatch = [] # Array of transfer to create.\nfor transfer in batch:\n    transfer_errors = client.create_transfers([transfer])\n    # Error handling omitted.\n```\n\n----------------------------------------\n\nTITLE: Inefficient Single Transfer Creation in Java with TigerBeetle\nDESCRIPTION: This snippet illustrates an inefficient way of creating transfers one at a time, which can significantly impact performance. It's shown as an example of what to avoid when working with TigerBeetle.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/java/README.md#2025-04-14_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nResultSet dataSource = null; /* Loaded from an external source. */;\nwhile(dataSource.next()) {\n    TransferBatch batch = new TransferBatch(1);\n\n    batch.add();\n    batch.setId(dataSource.getBytes(\"id\"));\n    batch.setDebitAccountId(dataSource.getBytes(\"debit_account_id\"));\n    batch.setCreditAccountId(dataSource.getBytes(\"credit_account_id\"));\n    batch.setAmount(dataSource.getBigDecimal(\"amount\").toBigInteger());\n    batch.setLedger(dataSource.getInt(\"ledger\"));\n    batch.setCode(dataSource.getInt(\"code\"));\n\n    CreateTransferResultBatch transferErrors = client.createTransfers(batch);\n    // Error handling omitted.\n}\n```\n\n----------------------------------------\n\nTITLE: Inefficient Sequential Transfer Creation\nDESCRIPTION: Example of an inefficient approach to creating transfers one at a time, which significantly reduces performance due to waiting for replies between requests.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/dotnet/README.md#2025-04-14_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nvar batch = new Transfer[] { }; // Array of transfer to create.\nforeach (var t in batch)\n{\n    var transferErrors = client.CreateTransfer(t);\n    // Error handling omitted.\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Vortex Java Driver Test Environment\nDESCRIPTION: A bash script that builds TigerBeetle, Vortex, and the Java client, then sets up the class path and runs Vortex supervisor in an isolated network namespace to test the Java driver implementation.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/testing/vortex/java_driver/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./zig/zig build -Drelease install\n./zig/zig build -Drelease vortex\n./zig/zig build clients:java -Drelease\n(cd src/clients/java && mvn package)\n(cd src/testing/vortex/java_driver && mvn package)\nCLASS_PATH=\"src/clients/java/target/tigerbeetle-java-0.0.1-SNAPSHOT.jar\"\nCLASS_PATH=\"${CLASS_PATH}:src/testing/vortex/java_driver/target/driver-0.0.1-SNAPSHOT.jar\"\nunshare --net --fork --map-root-user --pid bash -c \"\n    ip link set up dev lo ; \n    zig-out/bin/vortex supervisor \\\n        --tigerbeetle-executable=./zig-out/bin/tigerbeetle \\\n        --test-duration-minutes=10 \\\n        --driver-command=java\\ -cp\\ $CLASS_PATH\\ Main\n    \"\n```\n\n----------------------------------------\n\nTITLE: Docker Authentication Setup\nDESCRIPTION: Command to configure Docker authentication using a JSON key file for accessing the container registry.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/testing/systest/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncat /some/path/to/tigerbeetle.key.json | docker login -u _json_key https://us-central1-docker.pkg.dev/ --password-stdin\n```\n\n----------------------------------------\n\nTITLE: Docker Cleanup Command\nDESCRIPTION: Command to remove Docker containers after local testing.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/src/testing/systest/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose rm\n```\n\n----------------------------------------\n\nTITLE: Explicit Parameter Passing in Zig Function Calls\nDESCRIPTION: Demonstrates explicitly specifying all options when calling library functions rather than relying on defaults, which improves code clarity and prevents bugs if library defaults change.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/TIGER_STYLE.md#2025-04-14_snippet_3\n\nLANGUAGE: zig\nCODE:\n```\n@prefetch(a, .{ .cache = .data, .rw = .read, .locality = 3 });\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern for Large Struct Initialization in Zig\nDESCRIPTION: Shows the discouraged approach for initializing large structs by returning them directly, which can lead to unnecessary copying and stack growth. This pattern should be avoided in favor of in-place initialization.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/TIGER_STYLE.md#2025-04-14_snippet_5\n\nLANGUAGE: zig\nCODE:\n```\nfn init() !LargeStruct {\n  return LargeStruct {\n    // moving the initialized object.\n  }\n}\n\nfn main() !void {\n  var target = try LargeStruct.init();\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Superblock Implementation with Manifest Pointers\nDESCRIPTION: Provides a more detailed implementation of the Superblock structure, showing how it tracks manifest blocks and free space. This structure serves as the entry point for accessing all database state.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/data_file.md#2025-04-14_snippet_6\n\nLANGUAGE: zig\nCODE:\n```\nconst Superblock = {\n  manifest_block_oldest_address: u64,\n  manifest_block_oldest_checksum: u128,\n  manifest_block_newest_address: u64,\n  manifest_block_newest_checksum: u128,\n  free_set_last_address: u64,\n  free_set_last_checksum: u128,\n};\n```\n\n----------------------------------------\n\nTITLE: Visualizing LSM Tree Level Structure\nDESCRIPTION: A text-based visualization showing how tables at different levels of the LSM tree store key ranges. This example illustrates the compaction selection policy, where uppercase tables would be chosen for compaction next based on minimal overlap with the parent level.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/lsm.md#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLevel 0   A─────────────H       l───────────────────────────z\nLevel 1   a───────e             L─M   o───────s   u───────y\nLevel 2     b───d e─────h i───k l───n o─p q───s   u─v w─────z\n(Keys)    a b c d e f g h i j k l m n o p q r s t u v w x y z\n```\n\n----------------------------------------\n\nTITLE: Visualizing ManifestLevel Tables in 2D Space\nDESCRIPTION: A text diagram showing how manifest level tables are organized in a two-dimensional space. The horizontal axis represents the key range while the vertical axis shows the snapshot range, with each rectangle representing a table with its key and snapshot boundaries.\nSOURCE: https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/lsm.md#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n      0         1         2\n      0   4   8   2   6   0   4   8\n    9┌───┬───────┬───┬───┬───┬───┐\n     │   │   K   │   │ L │###│ M │\n    7│   ├───┬───┤   ├───┤###└┬──┤\n     │   │ I │   │ G │   │####│ J│\n    5│ A ├───┤ F │   │   │####└┬─┤\n     │   │ E │   │   │ D │#####│H│\n    3│   ├───┴───┼───┤   │#####└─┤\n     │   │   B   │ C │   │#######│\n    1└───┴───────┴───┴───┴───────┘\n```"
  }
]