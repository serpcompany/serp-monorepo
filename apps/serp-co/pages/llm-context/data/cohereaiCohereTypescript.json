[
  {
    "owner": "cohere-ai",
    "repo": "cohere-typescript",
    "content": "TITLE: Basic Usage of Cohere Chat API in TypeScript\nDESCRIPTION: Example of initializing the Cohere client and making a basic chat API call. This snippet demonstrates how to create a client instance with your API key and send a simple chat message request.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CohereClient } from \"cohere-ai\";\n\nconst cohere = new CohereClient({\n    token: \"YOUR_API_KEY\",\n});\n\n(async () => {\n    const chat = await cohere.chat({\n        model: \"command\",\n        message: \"Tell me a story in 5 parts!\",\n    });\n    \n    console.log(chat);\n})();\n```\n\n----------------------------------------\n\nTITLE: Streaming Chat Responses with Cohere API in TypeScript\nDESCRIPTION: Example of using the streaming functionality with Cohere's chat API. This demonstrates how to process streaming responses piece by piece as they arrive, writing text generations to the console output.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CohereClient } from \"cohere-ai\";\n\nconst cohere = new CohereClient({\n    token: \"YOUR_API_KEY\",\n});\n\n(async () => {\n    const stream = await cohere.chatStream({\n        model: \"command\",\n        message: \"Tell me a story in 5 parts!\",\n    });\n\n    for await (const chat of stream) {\n        if (chat.eventType === \"text-generation\") {\n            process.stdout.write(chat.text);\n        }\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Non-Streaming Chat with Cohere V2 API\nDESCRIPTION: Generates a complete text response to a user message using Cohere's V2 Chat API. Unlike the streaming version, this returns the full response at once when generation is complete.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.v2.chat({\n    model: \"model\",\n    messages: [\n        {\n            role: \"tool\",\n            toolCallId: \"messages\",\n            content: \"messages\",\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Streaming Chat Responses with Cohere V2 API\nDESCRIPTION: Generates a streaming text response to a user message using Cohere's V2 Chat API. This method returns a stream that can be processed token by token as the response is generated.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.v2.chatStream({\n    model: \"model\",\n    messages: [\n        {\n            role: \"tool\",\n            toolCallId: \"messages\",\n            content: \"messages\",\n        },\n    ],\n});\nfor await (const item of response) {\n    console.log(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Text Embeddings with Cohere V2 API\nDESCRIPTION: Creates text embeddings which are vector representations that capture semantic meaning of text. These embeddings can be used for semantic search, text classification, and other NLP tasks.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.v2.embed({\n    model: \"model\",\n    inputType: \"search_document\",\n    embeddingTypes: [\"float\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Reranking Documents with Cohere V2 API\nDESCRIPTION: Takes a query and a list of documents and reranks them by relevance to the query. Each document is assigned a relevance score in the ordered response array.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.v2.rerank({\n    model: \"model\",\n    query: \"query\",\n    documents: [\"documents\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Cohere API in TypeScript\nDESCRIPTION: Example of implementing error handling for Cohere API calls. This snippet shows how to catch and process different types of errors, including timeout errors and general API errors, extracting status codes and error messages.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CohereClient, CohereError, CohereTimeoutError } from \"cohere-ai\";\n\nconst cohere = new CohereClient({\n    token: \"YOUR_API_KEY\",\n});\n\n(async () => {\n    try {\n        await cohere.generate(/* ... */);\n    } catch (err) {\n        if (err instanceof CohereTimeoutError) {\n            console.log(\"Request timed out\", err);\n        } else if (err instanceof CohereError) {\n            // catch all errors\n            console.log(err.statusCode);\n            console.log(err.message);\n            console.log(err.body);\n        }\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Checking API Key Validity in Cohere TypeScript Client\nDESCRIPTION: Validates that the API key provided in the Authorization header is valid and active. This method can be used to verify authentication credentials before making other API calls.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.checkApiKey();\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Model by Name in Cohere TypeScript\nDESCRIPTION: Returns the details of a model by providing its name. Requires a model name parameter and can accept optional request options.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.models.get(\"command-a-03-2025\");\n```\n\n----------------------------------------\n\nTITLE: Listing Available Models in Cohere TypeScript\nDESCRIPTION: Returns a list of models available for use, including both Cohere models and your fine-tuned models. Can accept optional request parameters.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.models.list();\n```\n\n----------------------------------------\n\nTITLE: Creating a Fine-tuned Model in Cohere TypeScript\nDESCRIPTION: Creates a new fine-tuned model with specified name, base model type, and dataset ID. Requires a request object with model configuration details.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.finetuning.createFinetunedModel({\n    name: \"api-test\",\n    settings: {\n        baseModel: {\n            baseType: \"BASE_TYPE_CHAT\",\n        },\n        datasetId: \"my-dataset-id\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Fine-tuned Model in Cohere TypeScript\nDESCRIPTION: Retrieves a fine-tuned model by its ID. Requires a fine-tuned model ID parameter and can accept optional request options.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.finetuning.getFinetunedModel(\"id\");\n```\n\n----------------------------------------\n\nTITLE: Listing Fine-tuned Models in Cohere TypeScript\nDESCRIPTION: Retrieves a list of fine-tuned models. Can accept optional request parameters for filtering or pagination.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.finetuning.listFinetunedModels();\n```\n\n----------------------------------------\n\nTITLE: Listing Training Step Metrics for a Fine-tuned Model in TypeScript\nDESCRIPTION: Shows how to retrieve training step metrics for a fine-tuned model using the Cohere TypeScript SDK. This method requires the fine-tuned model ID and returns a ListTrainingStepMetricsResponse object with detailed training metrics.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.finetuning.listTrainingStepMetrics(\"finetuned_model_id\");\n```\n\n----------------------------------------\n\nTITLE: Listing Events for a Fine-tuned Model in TypeScript\nDESCRIPTION: Demonstrates how to list events for a fine-tuned model using the Cohere TypeScript SDK. This method requires the fine-tuned model ID as a parameter and returns a ListEventsResponse object.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.finetuning.listEvents(\"finetuned_model_id\");\n```\n\n----------------------------------------\n\nTITLE: Updating a Fine-tuned Model in Cohere TypeScript\nDESCRIPTION: Updates a fine-tuned model with new name or settings. Requires a fine-tuned model ID and update parameters for the model's name, base model, and dataset ID.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.finetuning.updateFinetunedModel(\"id\", {\n    name: \"name\",\n    settings: {\n        baseModel: {\n            baseType: \"BASE_TYPE_UNSPECIFIED\",\n        },\n        datasetId: \"dataset_id\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Fine-tuned Model in Cohere TypeScript\nDESCRIPTION: Deletes a fine-tuned model by its ID. Requires a fine-tuned model ID parameter and can accept optional request options.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.finetuning.deleteFinetunedModel(\"id\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Connector in Cohere TypeScript\nDESCRIPTION: Creates a new connector with required name and URL parameters. The connector is tested during registration and will cancel registration if the test is unsuccessful.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.connectors.create({\n    name: \"name\",\n    url: \"url\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Connector by ID in Cohere TypeScript\nDESCRIPTION: Retrieves a connector by its ID. Requires a connector ID parameter and can accept optional request options.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.connectors.get(\"id\");\n```\n\n----------------------------------------\n\nTITLE: Listing Connectors in Cohere TypeScript\nDESCRIPTION: Retrieves a list of connectors ordered by descending creation date (newer first). The method returns a Cohere.ListConnectorsResponse object and can accept optional parameters.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.connectors.list();\n```\n\n----------------------------------------\n\nTITLE: Updating a Connector in Cohere TypeScript\nDESCRIPTION: Updates a connector by ID. Omitted fields will not be updated. Requires a connector ID parameter and can accept optional request parameters.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.connectors.update(\"id\");\n```\n\n----------------------------------------\n\nTITLE: Deleting a Connector in Cohere TypeScript\nDESCRIPTION: Deletes a connector by its ID. Requires a connector ID parameter and can accept optional request options.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.connectors.delete(\"id\");\n```\n\n----------------------------------------\n\nTITLE: Authorizing a Connector with OAuth in Cohere TypeScript\nDESCRIPTION: Authorizes a connector with the given ID for the connector OAuth app. Requires a connector ID parameter and can accept optional request parameters.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.connectors.oAuthAuthorize(\"id\");\n```\n\n----------------------------------------\n\nTITLE: Creating an Embed Job with Cohere API\nDESCRIPTION: Launches an asynchronous embedding job for a dataset. When complete, this creates a new dataset containing the original text entries along with their corresponding vector embeddings.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.embedJobs.create({\n    model: \"model\",\n    datasetId: \"dataset_id\",\n    inputType: \"search_document\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Embed Job Details with Cohere API\nDESCRIPTION: Gets detailed information about a specific embedding job that was started by the current user. This provides status tracking for asynchronous embedding generation.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.embedJobs.get(\"id\");\n```\n\n----------------------------------------\n\nTITLE: Listing Embed Jobs with Cohere API\nDESCRIPTION: Retrieves all embedding job history for the current user. This allows tracking of past embedding generation tasks and their status.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.embedJobs.list();\n```\n\n----------------------------------------\n\nTITLE: Cancelling an Embed Job with Cohere API\nDESCRIPTION: Terminates an active embedding job. After cancellation, the user is charged only for embeddings processed up to that point, and partial results are not available.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.embedJobs.cancel(\"id\");\n```\n\n----------------------------------------\n\nTITLE: Listing Datasets with Cohere API\nDESCRIPTION: Retrieves a list of all datasets that have been created under the user's account. This provides an overview of available datasets for embedding or other operations.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.datasets.list();\n```\n\n----------------------------------------\n\nTITLE: Creating a Dataset with Cohere API\nDESCRIPTION: Creates a new dataset by uploading a file. This dataset can later be used for embedding generation or other operations. Both training data and optional evaluation data can be provided.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.datasets.create(fs.createReadStream(\"/path/to/your/file\"), fs.createReadStream(\"/path/to/your/file\"), {\n    name: \"name\",\n    type: \"embed-input\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Dataset by ID in Cohere TypeScript\nDESCRIPTION: Demonstrates how to retrieve a dataset by ID using the Cohere TypeScript client. Requires a valid dataset ID parameter and can accept optional request options.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.datasets.get(\"id\");\n```\n\n----------------------------------------\n\nTITLE: Deleting a Dataset in Cohere TypeScript\nDESCRIPTION: Shows how to delete a dataset by its ID. Datasets are automatically deleted after 30 days, but can be manually deleted using this method. Requires a dataset ID parameter.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.datasets.delete(\"id\");\n```\n\n----------------------------------------\n\nTITLE: Checking Dataset Storage Usage with Cohere API\nDESCRIPTION: Retrieves the current dataset storage usage for the organization. This helps track usage against the 10GB storage limit that applies across all users in an organization.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/reference.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.datasets.getUsage();\n```\n\n----------------------------------------\n\nTITLE: Installing Cohere TypeScript SDK with npm\nDESCRIPTION: Command to install the Cohere TypeScript SDK using npm package manager.\nSOURCE: https://github.com/cohere-ai/cohere-typescript/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -s cohere-ai\n```"
  }
]