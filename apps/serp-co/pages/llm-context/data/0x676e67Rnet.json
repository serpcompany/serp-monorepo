[
  {
    "owner": "0x676e67",
    "repo": "rnet",
    "content": "TITLE: Asynchronous GET request using rnet with TLS fingerprinting\nDESCRIPTION: This Python snippet demonstrates making an asynchronous GET request using the `rnet` library, specifically mimicking the TLS fingerprint of Firefox 136. It imports `asyncio`, `Impersonate`, and `Client` from `rnet`, defines an asynchronous `main` function that creates a client with the specified impersonation, makes a GET request to `https://tls.browserleaks.com`, and prints various response details like status code, version, URL, headers, cookies, encoding, content length, remote address, and the response text.\nSOURCE: https://github.com/0x676e67/rnet/blob/main/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom rnet import Impersonate, Client\n\n\nasync def main():\n    client = Client(impersonate=Impersonate.Firefox136)\n    resp = await client.get(\"https://tls.browserleaks.com\")\n    print(\"Status Code: \", resp.status_code)\n    print(\"Version: \", resp.version)\n    print(\"Response URL: \", resp.url)\n    print(\"Headers: \", resp.headers)\n    print(\"Cookies: \", resp.cookies)\n    print(\"Encoding: \", resp.encoding)\n    print(\"Content-Length: \", resp.content_length)\n    print(\"Remote Address: \", resp.remote_addr)\n    print(await resp.text())\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n```\n\n----------------------------------------\n\nTITLE: Installing rnet and asyncio using pip\nDESCRIPTION: This command installs the `asyncio` and `rnet` packages using pip. `asyncio` is required for running the asynchronous example provided, and `rnet` is the library being showcased.\nSOURCE: https://github.com/0x676e67/rnet/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install asyncio rnet\n```\n\n----------------------------------------\n\nTITLE: Developing with maturin and running example client\nDESCRIPTION: This command builds the `rnet` library in development mode using `maturin` and then runs an example client script using Python. The `--uv` flag is likely used to build the extension using the `uv` resolver.\nSOURCE: https://github.com/0x676e67/rnet/blob/main/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmaturin develop --uv\npython3 examples/client.py\n```\n\n----------------------------------------\n\nTITLE: Creating and activating a virtual environment using uv\nDESCRIPTION: This command creates a virtual environment using `uv` and then activates it. A virtual environment isolates project dependencies, preventing conflicts with other Python projects.\nSOURCE: https://github.com/0x676e67/rnet/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuv venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing maturin and uv using pip\nDESCRIPTION: This command installs the `maturin` and `uv` packages using pip. `maturin` is used for building and packaging Rust-based Python extensions, and `uv` is a package installer and resolver for Python.\nSOURCE: https://github.com/0x676e67/rnet/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install maturin\npip install uv\n```\n\n----------------------------------------\n\nTITLE: Building with maturin in release mode\nDESCRIPTION: This command builds the `rnet` library in release mode using `maturin`. Release mode typically includes optimizations for performance.\nSOURCE: https://github.com/0x676e67/rnet/blob/main/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmaturin build --release\n```\n\n----------------------------------------\n\nTITLE: Building with musllinux using bash script\nDESCRIPTION: These commands execute a bash script to build the `rnet` library for various musllinux targets. The script likely uses Docker and the rust-cross-musl toolchain to perform the cross-compilation.\nSOURCE: https://github.com/0x676e67/rnet/blob/main/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbash .github/musl_build.sh x86_64-unknown-linux-musl\nbash .github/musl_build.sh aarch64-unknown-linux-musl\nbash .github/musl_build.sh armv7-unknown-linux-musleabihf\nbash .github/musl_build.sh i686-unknown-linux-musl\n```\n\n----------------------------------------\n\nTITLE: Installing rustup using curl\nDESCRIPTION: This command installs Rust using `rustup`, which is required for building the `rnet` library. It uses curl to download the rustup installation script and then executes it with `sh`.\nSOURCE: https://github.com/0x676e67/rnet/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```"
  }
]
