[
  {
    "owner": "linkml",
    "repo": "linkml",
    "content": "TITLE: Installing LinkML Environment Setup\nDESCRIPTION: Commands to create a virtual environment and install LinkML package\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial01.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir linkml-tutorial\ncd linkml-tutorial\npython3 -m venv venv\nsource venv/bin/activate\npip install linkml\n```\n\n----------------------------------------\n\nTITLE: Defining Container and Person Classes in LinkML YAML\nDESCRIPTION: This schema defines a Container class to hold multiple Person instances. It demonstrates the use of multivalued slots, inlined lists, and the tree_root designation.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial02.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: https://w3id.org/linkml/examples/personinfo\nname: personinfo\nimports:\n  - linkml:types\nprefixes:\n  linkml: https://w3id.org/linkml/\n  example: https://example.org/\ndefault_prefix: example\n\nclasses:\n  Container:\n    tree_root: true\n    attributes:\n      persons:\n        multivalued: true\n        inlined_as_list: true\n        range: Person\n  Person:\n    attributes:\n      id:\n        identifier: true\n      full_name:\n        range: string\n      aliases:\n        range: string\n      phone:\n        range: string\n      age:\n        range: integer\n```\n\n----------------------------------------\n\nTITLE: Defining LinkML Schema for Person Information\nDESCRIPTION: A YAML schema defining classes for Person and Container, including attributes, data types, and constraints.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial05.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: https://w3id.org/linkml/examples/personinfo\nname: personinfo\nprefixes:                                  ## Note are adding 3 new ones here\n  linkml: https://w3id.org/linkml/\n  schema: http://schema.org/\n  personinfo: https://w3id.org/linkml/examples/personinfo/\n  ORCID: https://orcid.org/\nimports:\n  - linkml:types\ndefault_range: string\n  \nclasses:\n  Person:\n    class_uri: schema:Person              ## reuse schema.org vocabulary\n    attributes:\n      id:\n        identifier: true\n      full_name:\n        required: true\n        description:\n          name of the person\n        slot_uri: schema:name             ## reuse schema.org vocabulary\n      aliases:\n        multivalued: true\n        description:\n          other names for the person\n      phone:\n        pattern: \"^[\\\\d\\\\(\\\\)\\\\-]+$\"\n        slot_uri: schema:telephone       ## reuse schema.org vocabulary\n      age:\n        range: integer\n        minimum_value: 0\n        maximum_value: 200\n    id_prefixes:\n      - ORCID\n  Container:\n    attributes:\n      persons:\n        multivalued: true\n        inlined_as_list: true\n        range: Person\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Classes in LinkML\nDESCRIPTION: Shows how to declare abstract classes using the abstract property set to true. Abstract classes cannot be directly instantiated but serve as base classes for inheritance.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/inheritance.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  NamedThing:\n    abstract: true\n    slots:\n      - id\n      - name\n      - description\n      - image\n\n```\n\n----------------------------------------\n\nTITLE: Defining Inherited Types in LinkML YAML\nDESCRIPTION: This YAML snippet defines three inherited types in LinkML, including inheritance from built-in and custom types.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ntypes:\n  InheritedType:\n    typeof: integer\n\n  InheritedType2:\n    typeof: uriorcurie\n\n  InheritedType3:\n    typeof: InheritedType2\n```\n\n----------------------------------------\n\nTITLE: Defining a Person Class in LinkML YAML Schema\nDESCRIPTION: This snippet demonstrates how to define a 'Person' class in LinkML YAML schema. It shows the use of inheritance, mixins, and slot definitions to model a person's attributes.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/overview.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Person:\n    is_a: NamedThing  ## parent class, defines id, name, ...\n    description: >\n      A person (alive, dead, undead, or fictional).\n    class_uri: schema:Person\n    mixins:\n      - HasAliases\n    slots:\n      - primary_email\n      - birth_date\n      - age_in_years\n      - gender\n      - current_address\n      - has_employment_history\n      - has_familial_relationships\n      - has_medical_history\n```\n\n----------------------------------------\n\nTITLE: Implementing Class Inheritance with is_a in LinkML\nDESCRIPTION: Demonstrates how to use the is_a relationship to create class hierarchies where child classes inherit slots from parent classes. Shows a Person class inheriting from NamedThing while adding its own specific slots.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/inheritance.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  NamedThing:\n    slots:\n      - id\n      - name\n      - description\n      - image\n\n  Person:\n    is_a: NamedThing\n    mixins:\n      - HasAliases\n    slots:\n      - primary_email\n      - birth_date\n      - age_in_years\n      - gender\n      - current_address\n      - has_employment_history\n      - has_familial_relationships\n      - has_medical_history\n```\n\n----------------------------------------\n\nTITLE: Defining Node and Edge Classes for Property Graphs in YAML\nDESCRIPTION: This YAML snippet defines abstract Node and Edge classes, along with a Graphs class to contain them. It establishes the basic structure for modeling property graphs, including identifiers, attributes, and relationships between nodes and edges.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-property-graphs.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Node:\n    abstract: true\n    attributes:\n      id:\n        identifier: true\n        range: uriorcurie\n      name:\n        slot_uri: rdfs:label\n      category:\n        slot_uri: rdf:type\n        range: string\n        designates_type: true\n      types:\n        name:\n        range: string\n        multivalued: true\n  Edge:\n    abstract: true\n    attributes:\n      class_uri: rdf:Statement\n      subject:\n        slot_uri: rdf:subject\n        range: Node\n      predicate:\n        range: uriorcurie\n        slot_uri: rdf:predicate\n        designates_type: true\n      object:\n        slot_uri: rdf:object\n        range: Node\n  Graphs:\n    attributes:\n      nodes:\n        range: Node\n        multivalued: true\n        inlined_as_list: true\n      edges:\n        range: Edge\n        multivalued: true\n        inlined_as_list: true\n```\n\n----------------------------------------\n\nTITLE: Checking LinkML Installation\nDESCRIPTION: Command to verify LinkML installation by checking help documentation\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial01.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlinkml-convert --help\n```\n\n----------------------------------------\n\nTITLE: Using LinkML Runtime for JSON Conversion\nDESCRIPTION: A Python script demonstrating how to use the LinkML runtime to convert a Person instance to JSON format.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial05.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml_runtime.dumpers import json_dumper\nfrom personinfo import Person\n\np1 = Person(id='ORCID:9876', full_name='Lex Luthor', aliases=[\"Bad Guy\"])\nprint(json_dumper.dumps(p1))\n```\n\n----------------------------------------\n\nTITLE: Defining LinkML Schema for Person Information\nDESCRIPTION: A LinkML schema definition for a person information model that includes classes for Person and Container, along with slot definitions for properties like name, phone, and age. The schema includes URI mappings and data constraints.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial08.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: https://w3id.org/linkml/examples/personinfo\nname: personinfo\nprefixes:                                 \n  linkml: https://w3id.org/linkml/\n  schema: http://schema.org/\n  personinfo: https://w3id.org/linkml/examples/personinfo/\n  ORCID: https://orcid.org/\nimports:\n  - linkml:types\ndefault_range: string\n  \nclasses:\n  Person:\n    class_uri: schema:Person             \n    slots:   ## specified as a list\n     - id\n     - full_name\n     - aliases\n     - phone\n     - age\n    id_prefixes:\n      - ORCID\n  Container:\n    attributes:\n      persons:\n        multivalued: true\n        inlined_as_list: true\n        range: Person\n\n# slots are first-class entities in the metamodel\n# declaring them here allows them to be reused elsewhere\nslots:\n  id:\n    identifier: true\n  full_name:\n    required: true\n    description:\n      name of the person\n    slot_uri: schema:name\n  aliases:\n    multivalued: true\n    description:\n      other names for the person\n  phone:\n    pattern: \"^[\\\\d\\\\(\\\\)\\\\-]+$\"\n    slot_uri: schema:telephone \n  age:\n    range: integer\n    minimum_value: 0\n    maximum_value: 200\n```\n\n----------------------------------------\n\nTITLE: Validating Data Against LinkML Schema (Bash)\nDESCRIPTION: This Bash command demonstrates how to use the linkml-validate tool to validate a data instance against a LinkML schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial03.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlinkml-validate -s personinfo.yaml bad-data.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining LinkML Schema with Constraints (YAML)\nDESCRIPTION: This YAML snippet defines a LinkML schema for Person and Container classes with various constraints such as identifiers, required fields, patterns, and value ranges.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial03.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: https://w3id.org/linkml/examples/personinfo\nname: personinfo\nprefixes:\n  linkml: https://w3id.org/linkml/\nimports:\n  - linkml:types\ndefault_range: string\n\nclasses:\n  Person:\n    attributes:\n      id:\n        identifier: true     ## unique key for a person\n      full_name:\n        required: true       ## must be supplied\n        description:\n          name of the person\n      aliases:\n        multivalued: true    ## range is a list\n        description:\n          other names for the person\n      phone:\n        pattern: \"^[\\\\d\\\\(\\\\)\\\\-]+$\"   ## regular expression\n      age:\n        range: integer       ## an int between 0 and 200\n        minimum_value: 0\n        maximum_value: 200\n  Container:\n    attributes:\n      persons:\n        multivalued: true\n        inlined_as_list: true\n        range: Person\n```\n\n----------------------------------------\n\nTITLE: Converting Schema to JSON-Schema\nDESCRIPTION: Command to generate JSON Schema from LinkML schema file\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial01.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngen-json-schema personinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining an NDArray with Shape Constraints in LinkML\nDESCRIPTION: This snippet shows how to define a class with an NDArray slot in LinkML, specifying constraints on the array's shape and data type.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/arrays.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nMyClass:\n  attributes:\n    data:\n      range: integer\n      array:\n        minimum_number_dimensions: 2\n        maximum_number_dimensions: 5\n```\n\n----------------------------------------\n\nTITLE: Creating and Using LinkML Python Objects in Programs\nDESCRIPTION: This example demonstrates how to instantiate and use a generated LinkML Python class in a program. It shows object creation with parameters.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/python.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from personinfo import Person\n>>> p1 = Person('P1', name='joe schmoe')\n```\n\n----------------------------------------\n\nTITLE: Generating JSON-LD Context from LinkML Schema\nDESCRIPTION: This bash command shows how to generate a JSON-LD context file from a LinkML schema using the LinkML generator framework.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/using-jsonld.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngen-json-ld-context personinfo.yaml -o personinfo.context.jsonld\n```\n\n----------------------------------------\n\nTITLE: Validating Data Files with LinkML Validator\nDESCRIPTION: Example of using the linkml.validator.validate_file function to validate a CSV file containing multiple data instances against a LinkML schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/validating-data.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml.validator import validate_file\n\nreport = validate_file(\"people.csv\", \"personinfo.yaml\", \"Person\")\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Keyed Classes in LinkML YAML\nDESCRIPTION: This YAML snippet defines classes without keys or identifiers in LinkML, demonstrating various attribute configurations.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  OptionalOneElementRange:\n    description: Range is a optional class that contains one non-key/non-identifier element\n    attributes:\n      v1:\n        range: OneElementClass\n\n  RequiredOneElementRange:\n```\n\n----------------------------------------\n\nTITLE: Enhancing Person Class with Constraints in LinkML YAML\nDESCRIPTION: This snippet expands the Person class definition by adding constraints to the attributes. It includes data types, patterns, value ranges, and enumerations to enforce data quality and structure.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/why-linkml.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Person:\n    attributes:\n      id:\n        identifier: true ## this ensures the id field is unique\n      name:\n      email:\n        pattern: \"\\\\S+@[\\\\S\\\\.]+\\\\S+\"   ## regular expression\n      age:\n        range: integer\n        minimum_value: 0\n        maximum_value: 999\n      occupation_class:\n        range: job_code   ## enumeration\n    unique_keys:\n      primary:\n        description: email is unique\n        unique_key_slots:\n          - email\nenums:\n  job_code:\n    scientific:\n    technical:\n    service:\n```\n\n----------------------------------------\n\nTITLE: Core Schema Structure in LinkML\nDESCRIPTION: Basic schema skeleton defining the foundation for research subject measurements. Includes essential prefixes, metadata, and base Subject class definition.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-measurements.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: https://w3id.org/linkml/howtos/measurements\nname: research_subject_measurements\ntitle: A demonstrator schema for measuring properties of research subjects\nlicense: https://creativecommons.org/publicdomain/zero/1.0/\n\nprefixes:\n  linkml: https://w3id.org/linkml/\n  ex: https://w3id.org/linkml/howtos/measurements\n  sh: https://w3id.org/shacl/\n  UO: http://purl.obolibrary.org/obo/UO_\n  PATO: http://purl.obolibrary.org/obo/PATO_\n  qudt: http://qudt.org/schema/qudt/\n\ndefault_prefix: ex\ndefault_range: string\n\nclasses:\n  Subject:\n    description: A research subject\n    attributes:\n      id:\n        identifier: true\n        description: A unique identifier for the research subject\n```\n\n----------------------------------------\n\nTITLE: Using Any Type for Metadata in YAML\nDESCRIPTION: Shows three examples of using the Any type for metadata, demonstrating its flexibility with string, object, and integer values.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/advanced.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: person with string metadata \nmetadata: a string\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: person with an object as metadata\nmetadata:\n  name: a string\n  age: an integer\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: person with an integer\nmetadata: 42\n```\n\n----------------------------------------\n\nTITLE: Validating Data with the LinkML Validator Function\nDESCRIPTION: Example of using the linkml.validator.validate function to validate a Python dictionary against a LinkML schema. The function returns a report object with validation results.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/validating-data.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml.validator import validate\n\ninstance = {\n    \"id\": \"ORCID:1234\",\n    \"full_name\": \"Clark Kent\",\n    \"age\": 32,\n    \"phone\": \"555-555-5555\",\n}\n\nreport = validate(instance, \"personinfo.yaml\", \"Person\")\n\nif not report.results:\n    print('The instance is valid!')\nelse:\n    for result in report.results:\n        print(result.message)\n```\n\n----------------------------------------\n\nTITLE: Pattern-Based Type Constraints\nDESCRIPTION: Demonstrates using regular expressions to constrain identifiers to a specific format for cell type IDs.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/modeling.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntypes:\n  CellTypeId:\n    typeof: uriorcurie\n    pattern: '^CL:\\d+$'\n\nslots:\n  cell_type:\n    range: CellTypeId\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Person Class Attributes in LinkML YAML\nDESCRIPTION: This snippet adds human-readable descriptions to the Person class attributes. It demonstrates how to provide additional context and metadata for each field in the schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/why-linkml.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Person:\n    attributes:\n      id:\n        description: unique identifier\n      name:\n        description: the full name of the person\n      email:\n        description: the persons email address\n      age:\n        description: the age of the person in years\n      occupation_class:\n        description: the kind of job the person has\n      ...\n```\n\n----------------------------------------\n\nTITLE: Generating Python Classes from LinkML Schema\nDESCRIPTION: Example of generating Python dataclasses from a LinkML schema for validation through object instantiation.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/validating-data.rst#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ gen-python personinfo.yaml > personinfo.py\n$ echo '{\"id\":\"ORCID:1234\",\"full_name\":\"Clark Kent\",\"age\":32,\"phone\":\"555-555-5555\"}' > person.json\n```\n\n----------------------------------------\n\nTITLE: Defining Slots and Classes in LinkML YAML\nDESCRIPTION: This snippet demonstrates how to declare slots as first-class entities in LinkML and use them in class definitions. It includes a Person class with various attributes and a Container class to hold multiple Person instances.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial07.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: https://w3id.org/linkml/examples/personinfo\nname: personinfo\nprefixes:                                 \n  linkml: https://w3id.org/linkml/\n  schema: http://schema.org/\n  personinfo: https://w3id.org/linkml/examples/personinfo/\n  ORCID: https://orcid.org/\nimports:\n  - linkml:types\ndefault_range: string\n  \nclasses:\n\n  Person:\n    class_uri: schema:Person             \n    slots:            \n     - id\n     - full_name\n     - aliases\n     - phone\n     - age\n    id_prefixes:\n      - ORCID\n      \n  Container:\n    tree_root: true\n    attributes:\n      persons:\n        multivalued: true\n        inlined_as_list: true\n        range: Person\n\nslots:\n  id:\n    identifier: true\n  full_name:\n    required: true\n    description:\n      name of the person\n    slot_uri: schema:name\n  aliases:\n    multivalued: true\n    description:\n      other names for the person\n  phone:\n    pattern: \"^[\\\\d\\\\(\\\\)\\\\-]+$\"\n    slot_uri: schema:telephone \n  age:\n    range: integer\n    minimum_value: 0\n    maximum_value: 200\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Schema from LinkML YAML\nDESCRIPTION: This bash command generates a JSON Schema from the LinkML YAML file. It demonstrates how to use the LinkML tooling to create interoperable schemas.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial07.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngen-json-schema personinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: Running gen-project Command\nDESCRIPTION: Command to generate project artifacts from a LinkML schema file into a specified directory.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial08.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngen-project -d personinfo/ personinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining a Book class schema in YAML\nDESCRIPTION: This YAML snippet defines a schema for a Book class with attributes corresponding to columns in a tabular dataset. It includes data types, descriptions, and an enum for book genres.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/recognize-structural-forms.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Book:\n    description: \"A record representing a book\"\n    attributes:\n      title:\n        description: \"Title of the book, creatively alluding to classic titles or historic events\"\n        range: string\n      author:\n        description: \"Author of the book, with names inspired by famous authors\"\n        range: string\n      genre:\n        description: \"Genre of the book\"\n        range: GenreEnum\n      year:\n        description: \"Year of publication\"\n        range: integer\n      price_paperback:\n        description: \"Price of the book in paperback format\"\n        range: float\n      price_hardback:\n        description: \"Price of the book in hardback format\"\n        range: float\n      rating:\n        description: \"Rating of the book\"\n        range: integer\n        minimum_value: 1\n        maximum_value: 5\n\nenums:\n  GenreEnum:\n    permissible_values:\n      Sci-Fi: {}\n      Classic: {}\n      Science: {}\n      History: {}\n      Adventure: {}\n```\n\n----------------------------------------\n\nTITLE: LinkML Schema with Inheritance and Mixins\nDESCRIPTION: This YAML snippet shows how to use inheritance and mixins in LinkML. It defines a NamedThing superclass, Person and Organization subclasses, and a HasAliases mixin. It demonstrates how to reuse and extend class definitions.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial07.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nid: https://w3id.org/linkml/examples/personinfo\nname: personinfo\nprefixes:                                 \n  linkml: https://w3id.org/linkml/\n  schema: http://schema.org/\n  personinfo: https://w3id.org/linkml/examples/personinfo/\n  ORCID: https://orcid.org/\nimports:\n  - linkml:types\ndefault_range: string\n  \nclasses:\n\n  NamedThing:\n    abstract: true     ## should not be instantiated directly\n    slots: \n     - id\n     - full_name\n    close_mappings:\n     - schema:Thing\n  \n  Person:\n    is_a: NamedThing  ## inheritance\n    mixins:\n      - HasAliases\n    class_uri: schema:Person             \n    slots:            ## note we only have slots specific to people\n     - phone\n     - age\n    id_prefixes:\n      - ORCID\n\n  Organization:\n    description: >\n      An organization such as a company or university\n    is_a: NamedThing\n    class_uri: schema:Organization\n    mixins:\n      - HasAliases\n    slots:\n      - mission_statement\n      \n  Container:\n    tree_root: true\n    attributes:\n      persons:\n        multivalued: true\n        inlined_as_list: true\n        range: Person\n      organizations:\n        multivalued: true\n        inlined_as_list: true\n        range: Organization\n\n  HasAliases:\n    description: >\n      A mixin applied to any class that can have aliases/alternateNames\n    mixin: true\n    attributes:\n      aliases:\n        multivalued: true\n        exact_mappings:\n          - schema:alternateName\n\nslots:\n  id:\n    identifier: true\n  full_name:\n    required: true\n    description:\n      name of the person\n    slot_uri: schema:name\n  aliases:\n    multivalued: true\n    description:\n      other names for the person\n  phone:\n    pattern: \"^[\\\\d\\\\(\\\\)\\\\-]+$\"\n    slot_uri: schema:telephone \n  age:\n    range: integer\n    minimum_value: 0\n    maximum_value: 200\n  mission_statement:\n```\n\n----------------------------------------\n\nTITLE: Pydantic-Based Validation in LinkML\nDESCRIPTION: Example of using the PydanticValidationPlugin to validate data by generating Pydantic models from a LinkML schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/validating-data.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml.validator import Validator\nfrom linkml.validator.plugins import PydanticValidationPlugin\n\nvalidator = Validator(\n    schema=\"personinfo.yaml\",\n    validation_plugins=[PydanticValidationPlugin()]\n)\nvalidator.validate({\"id\": \"ORCID:1234\", \"full_name\": \"Clark Kent\", \"age\": 32, \"phone\": \"555-555-5555\"}, \"Person\")\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Enumerations in LinkML YAML\nDESCRIPTION: This snippet demonstrates how to define dynamic enumerations in LinkML YAML. It includes examples of using 'reachable_from' to populate an enum from an ontology, and combining boolean expressions with the 'minus' operator.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/enums.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nenums:\n  NeuronTypeEnum:\n    reachable_from:\n      source_ontology: obo:cl\n      source_nodes:\n        - CL:0000540 ## neuron\n      include_self: false\n      relationship_types:\n        - rdfs:subClassOf\n```\n\nLANGUAGE: yaml\nCODE:\n```\nenums:\n  LoincExample:\n    enum_uri: http://hl7.org/fhir/ValueSet/example-intensional\n    see_also:\n      - https://build.fhir.org/valueset-example-intensional.json.html\n    include:\n      - reachable_from:\n          source_ontology: bioregistry:loinc\n          source_nodes:\n            - LOINC:LP43571-6\n          is_direct: true\n    minus:\n      concepts:\n        - LOINC:5932-9\n```\n\nLANGUAGE: yaml\nCODE:\n```\nenums:\n  Disease:\n    reachable_from:\n      source_ontology: bioregistry:mondo\n      source_nodes:\n        - MONDO:0000001 ## disease or disorder\n      is_direct: false\n      relationship_types:\n        - rdfs:subClassOf\n    minus:\n      permissible_values:\n        root_node:\n          meaning: MONDO:0000001 ## disease or disorder\n\n  HumanDisease:\n    description: Extends the Disease value set, including NCIT neoplasms, excluding non-human diseases\n    inherits:\n      - Disease\n    include:\n      - reachable_from:\n          source_ontology: bioregistry:ncit\n          source_nodes:\n            - NCIT:C3262\n    minus:\n      - reachable_from:\n          source_ontology: bioregistry:mondo\n          source_nodes:\n            - MONDO:0005583 ## non-human animal disease\n          relationship_types:\n            - rdfs:subClassOf\n      - permissible_values:\n          NOT_THIS_ONE:\n            meaning: MONDO:9999\n            description: Example of excluding a single node\n```\n\n----------------------------------------\n\nTITLE: Installing LinkML with pip in Bash\nDESCRIPTION: This command installs the latest version of LinkML using pip, the Python package installer. It's a straightforward way to install LinkML in a Python environment.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/install.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install linkml\n```\n\n----------------------------------------\n\nTITLE: Implementing Mixin Classes in LinkML\nDESCRIPTION: Demonstrates how to create and use mixin classes to share attributes across different parts of the class hierarchy without traditional inheritance constraints.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/inheritance.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  NamedThing:\n    slots:\n      - id\n      - name\n      - description\n      - image\n\n  Person:\n    is_a: NamedThing\n    mixins:\n      - HasAliases\n    slots:\n      - primary_email\n      - birth_date\n      - age_in_years\n      - gender\n      - current_address\n      - has_employment_history\n      - has_familial_relationships\n      - has_medical_history\n\n  HasAliases:\n    mixin: true\n    slots:\n      - aliases\n```\n\n----------------------------------------\n\nTITLE: Inlining as a Dictionary Configuration in LinkML YAML\nDESCRIPTION: This snippet shows how to configure the has_subtypes attribute to inline objects as a dictionary. It sets inlined to true and inlined_as_list to false.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/inlining.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n      has_subtypes:\n        range: Organism\n        multivalued: true\n        inlined: true\n        inlined_as_list: false\n```\n\n----------------------------------------\n\nTITLE: Handling Mandatory Multi-Integer in Python\nDESCRIPTION: This snippet shows how to handle a mandatory list of integers in a Python class, including type checking and coercion.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nif not isinstance(self.mand_multi_integer, list):\n    self.mand_multi_integer = [self.mand_multi_integer]\nelif len(self.mand_multi_integer) == 0:\n    raise ValueError(f\"mand_multi_integer must be a non-empty list\")\nself.mand_multi_integer = [v if isinstance(v, int) else int(v) for v in self.mand_multi_integer]\n```\n\n----------------------------------------\n\nTITLE: Implementing Inlined List Multivalued Slots in Python\nDESCRIPTION: Python implementation of the inlined list multivalued slot, demonstrating complex type handling and normalization.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OptionalMultivaluedInlinedListIdentifiedThreeElementRange(YAMLRoot):\n    \"\"\"\n    2.3(o) Range is an optional identified three element class that is represented as an inlined list\n    \"\"\"\n    ...\n    v1: Optional[Union[Dict[Union[str, IdentifiedThreeElementClassName], Union[dict, IdentifiedThreeElementClass]], List[Union[dict, IdentifiedThreeElementClass]]]] = empty_list()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            self.v1 = []\n        if not isinstance(self.v1, (list, dict)):\n            self.v1 = [self.v1]\n        self._normalize_inlined_slot(slot_name=\"v1\", slot_type=IdentifiedThreeElementClass, key_name=\"name\", inlined_as_list=True, keyed=True)\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Defining Person and Event Classes in YAML for LinkML\nDESCRIPTION: This YAML snippet defines two classes, Person and Event, with their respective slots and relationships. It demonstrates how to structure class definitions in LinkML, including inheritance, mixins, and slot definitions.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/sqlalchemy.rst#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nPerson:\n  is_a: NamedThing\n  description: >\n    A person (alive, dead, undead, or fictional).\n  class_uri: schema:Person\n  mixins:\n    - HasAliases\n  slots:\n    - primary_email\n    - birth_date\n    - age_in_years\n    - gender\n    - current_address\n    - has_employment_history\n    - has_familial_relationships\n    - has_medical_history\nEvent:\n  slots:\n    - started_at_time\n    - ended_at_time\n    - duration\n    - is_current\nMedicalEvent:\n  is_a: Event\n  slots:\n    - in_location\n    - diagnosis\n    - procedure\n```\n\n----------------------------------------\n\nTITLE: Structured Patterns in LinkML Schema\nDESCRIPTION: Demonstrates how to define and use reusable structured patterns with settings and interpolation.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/constraints.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  float: \"\\\\d+[\\\\.\\\\d+]\"\n  unit: \"\\\\S+\"\n  email: \"\\\\S+@\\\\S+{\\\\.\\\\w}+\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n  height:\n    range: string\n    structured_pattern:\n      syntax: \"{float} {unit.length}\"\n      interpolated: true\n      partial_match: false\n```\n\n----------------------------------------\n\nTITLE: Running SHACL Generator in Bash\nDESCRIPTION: Command to generate SHACL from a LinkML YAML schema file. This command takes a YAML file as input and outputs SHACL in Turtle format.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/shacl.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngen-shacl personinfo.yaml > personinfo.shacl.ttl\n```\n\n----------------------------------------\n\nTITLE: Generated SQLAlchemy Python Class for Person\nDESCRIPTION: This Python code snippet shows the generated SQLAlchemy class for the Person entity. It includes table definition, column mappings, relationships, and association proxies. This demonstrates how LinkML translates YAML definitions into SQLAlchemy ORM classes.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/sqlalchemy.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Person(NamedThing):\n    \"\"\"\n    A person (alive, dead, undead, or fictional).\n    \"\"\"\n    __tablename__ = 'Person'\n    \n    primary_email = Column(Text())\n    birth_date = Column(Text())\n    age_in_years = Column(Integer())\n    gender = Column(Enum('nonbinary man', 'nonbinary woman', 'transgender woman', 'transgender man', 'cisgender man', 'cisgender woman', name='GenderType'))\n    id = Column(Text(), primary_key=True)\n    name = Column(Text())\n    description = Column(Text())\n    image = Column(Text())\n    Container_id = Column(Text(), ForeignKey('Container.id'))\n    current_address_id = Column(Text(), ForeignKey('Address.id'))\n    current_address = relationship(\"Address\", uselist=False)\n    has_employment_history = relationship( \"EmploymentEvent\", foreign_keys=\"[EmploymentEvent.Person_id]\")\n    has_familial_relationships = relationship( \"FamilialRelationship\", foreign_keys=\"[FamilialRelationship.Person_id]\")\n    has_medical_history = relationship( \"MedicalEvent\", foreign_keys=\"[MedicalEvent.Person_id]\")\n    aliases_rel = relationship( \"Person_alias\" )\n    aliases = association_proxy(\"aliases_rel\", \"alias\",\n                                  creator=lambda x_: Person_alias(alias=x_))\n    has_news_events = relationship( \"NewsEvent\", secondary=\"Person_has_news_event\")\n```\n\n----------------------------------------\n\nTITLE: Dumping LinkML Objects to JSON Format\nDESCRIPTION: This example shows how to serialize a LinkML Python object to JSON using the linkml-runtime framework's json_dumper. It demonstrates importing the dumper, creating an object, and converting it to JSON.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/python.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from linkml_runtime.dumpers import json_dumper\n>>> from personinfo import Person\n>>> p1 = Person('P1', name='joe schmoe')\n>>> print(json_dumper.dumps(p1))\n{\n  \"id\": \"P1\",\n  \"name\": \"joe schmoe\",\n  \"@type\": \"Person\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LinkML Schema with Enumerations\nDESCRIPTION: Example schema showing how to define a Person class with enumerated status values. Includes class definitions, attributes, and enum declarations for PersonStatus.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial06.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: https://w3id.org/linkml/examples/personinfo\nname: personinfo\nprefixes:\n  linkml: https://w3id.org/linkml/\n  schema: http://schema.org/\n  personinfo: https://w3id.org/linkml/examples/personinfo/\n  ORCID: https://orcid.org/\nimports:\n  - linkml:types\ndefault_range: string\n\nclasses:\n  Person:\n    class_uri: schema:Person\n    attributes:\n      id:\n        identifier: true\n      full_name:\n        required: true\n        description:\n          name of the person\n        slot_uri: schema:name\n      aliases:\n        multivalued: true\n        description:\n          other names for the person\n      phone:\n        pattern: \"^[\\\\d\\\\(\\\\)\\\\-]+$\"\n        slot_uri: schema:telephone\n      age:\n        range: integer\n        minimum_value: 0\n        maximum_value: 200\n      status:\n        description: >\n          vital status of the person\n        range: PersonStatus       ## see \"enums\" section below\n    id_prefixes:\n      - ORCID\n  Container:\n    attributes:\n      persons:\n        multivalued: true\n        inlined_as_list: true\n        range: Person\n\nenums:\n  PersonStatus:\n    permissible_values:\n      ALIVE:\n      DEAD:\n      UNKNOWN:\n```\n\n----------------------------------------\n\nTITLE: Custom Validation with LinkML Validator Class and Plugins\nDESCRIPTION: Example of using the Validator class with custom validation plugins to perform both JSON Schema validation and recommended slots validation.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/validating-data.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml.validator import Validator\nfrom linkml.validator.plugins import JsonschemaValidationPlugin, RecommendedSlotsPlugin\n\nvalidator = Validator(\n    schema=\"personinfo.yaml\",\n    validation_plugins=[\n        JsonschemaValidationPlugin(closed=True),\n        RecommendedSlotsPlugin()\n    ]\n)\nvalidator.validate({\"id\": \"ORCID:1234\", \"full_name\": \"Clark Kent\", \"age\": 32, \"phone\": \"555-555-5555\"}, \"Person\")\n```\n\n----------------------------------------\n\nTITLE: Python Code for Graph Traversal\nDESCRIPTION: Python code that demonstrates how to traverse the graph from persons to movies using the LinkML-generated models. This shows how to handle references and navigate the graph programmatically.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-property-graphs.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# assume we have two lists, movies and persons\nmovies_ix = {movie.title: movie for movie in movies}\nfor person in persons:\n    print(f\"Person: {person.name}\")\n    for movie_id in person.acted_in:\n        movie = movies_ix[movie_id]\n        print(f\"{person.name} acted in {movie.title}, released in {movie.released}\")\n    for movie_id in person.directed:\n        movie = movies_ix[movie_id]\n        print(f\"{person.name} directed {movie.title}, released in {movie.released}\")\n```\n\n----------------------------------------\n\nTITLE: Defining KeyedThreeElementClass and IdentifiedThreeElementClass in YAML\nDESCRIPTION: YAML schema definitions for two basic classes: KeyedThreeElementClass with a key attribute and IdentifiedThreeElementClass with an identifier attribute. Both classes include string, integer, and date attributes.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n  KeyedThreeElementClass:\n    description: A keyed class with an additional integer and date\n    attributes:\n      name:\n        range: string\n        key: true\n      value:\n        range: integer\n      modifier:\n        range: date\n\n  IdentifiedThreeElementClass:\n    description: A identified class with an additional integer and date\n    attributes:\n      name:\n        range: string\n        identifier: true\n      value:\n        range: integer\n      modifier:\n        range: date\n```\n\n----------------------------------------\n\nTITLE: LinkML Schema with Slot Usage Customization\nDESCRIPTION: This YAML snippet demonstrates how to use slot_usage to customize inherited slots within specific classes. It defines a Relationship class with subclasses for familial and organizational relationships, each with customized slot constraints.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial07.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nid: https://w3id.org/linkml/examples/personinfo\nname: personinfo\nprefixes:                                 \n  linkml: https://w3id.org/linkml/\nimports:\n  - linkml:types\ndefault_range: string\n  \nclasses:\n  NamedThing:\n    slots: \n     - id\n     - full_name\n  Person:\n    is_a: NamedThing\n    attributes:\n      has_familial_relationships:\n        multivalued: true\n        range: FamilialRelationship\n        inlined_as_list: true\n      has_organizational_relationships:\n        multivalued: true\n        range: OrganizationalRelationship\n        inlined_as_list: true\n    \n  Organization:\n    is_a: NamedThing\n\n  Relationship:\n    abstract: true\n    attributes:\n      duration:\n        range: integer\n      related_to:\n        range: NamedThing\n      relationship_type:\n\n  FamilialRelationship:\n    is_a: Relationship\n    slot_usage:\n      related_to:\n        range: Person\n        required: true\n      relationship_type:\n        range: FamilialRelationshipType\n      \n\n  OrganizationalRelationship:\n    is_a: Relationship\n    slot_usage:\n      related_to:\n        range: Organization\n        required: true\n      relationship_type:\n        range: OrganizationalRelationshipType\n\n  Container:\n    attributes:\n      persons:\n        multivalued: true\n        inlined_as_list: true\n        range: Person\n      organizations:\n        multivalued: true\n        inlined_as_list: true\n        range: Organization\n\nslots:\n  id:\n    identifier: true\n  full_name:\n  related_to:\n  relationship_type:\n\nenums:\n  FamilialRelationshipType:\n    permissible_values:\n      SIBLING_OF:\n      PARENT_OF:\n      CHILD_OF:\n  OrganizationalRelationshipType:\n    permissible_values:\n      EMPLOYED_BY:\n      FOUNDED_BY:\n      LEADER_OF:\n      MEMBER_OF:\n```\n\n----------------------------------------\n\nTITLE: Defining Properties in LinkML Definition Class\nDESCRIPTION: Core properties of the Definition class including inheritance mechanism (is_a), mixin support, value constraints, and string serialization patterns. This class serves as the base for all major schema definition elements.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/Definition.md#2025-04-17_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nis_a: 0..1\n  description: A primary parent class or slot for inheritance\n  range: Definition\n  in_subsets: [SpecificationSubset,BasicSubset,ObjectOrientedProfile,OwlProfile]\n\nabstract: boolean ?\n  description: Indicates the class or slot cannot be directly instantiated\n  range: Boolean\n  in_subsets: [SpecificationSubset,BasicSubset,ObjectOrientedProfile]\n\nmixin: boolean ?\n  description: Indicates class/slot is intended for inheritance without being an is_a parent\n  range: Boolean\n  in_subsets: [SpecificationSubset,BasicSubset,ObjectOrientedProfile]\n\nvalues_from: uriorcurie *\n  description: Identifier of a value set for possible slot values\n  range: Uriorcurie\n\nstring_serialization: string ?\n  description: Pattern for string serialization using Python format strings\n  range: String\n  in_subsets: [SpecificationSubset]\n```\n\n----------------------------------------\n\nTITLE: Defining Edge Types with Predicates in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define more granular edge types while maintaining a general predicate. It modifies the Edge class to include a separate 'type' attribute and provides examples of specialized HasPart edges for different domains.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-property-graphs.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Edge:\n    abstract: true\n    attributes:\n      class_uri: rdf:Statement\n      subject:\n        slot_uri: rdf:subject\n        range: Node\n      predicate:\n        range: uriorcurie\n        slot_uri: rdf:predicate\n        designates_type: true\n      object:\n        slot_uri: rdf:object\n        range: Node\n      type:\n        slot_uri: rdf:type\n        range: uriorcurie\n        designates_type: true\n  HasPart:\n    is_a: Edge\n    slot_usage:\n      predicate:\n        equals_string: \"BFO:0000051\"\n    attributes:\n      quantity:\n      range: integer\n  AnatomicalHasPart:\n    is_a: HasPart\n    slot_usages:\n      subject: AnatomicalEntity\n      object: AnatomicalEntity\n  VehicleHasPart:\n    is_a: HasPart\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Metamodel Extension for Multiple Elements in LinkML YAML\nDESCRIPTION: Demonstrates how to apply a metamodel extension (Reviewable) to both a class and its attribute. This allows for consistent annotation across different schema elements.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/annotations.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Person:\n    instantiates: \n      - mymetamodel:Reviewable\n    annotations:\n      review: A very useful class that is well defined\n      ...\n    attributes:\n      name:\n        description: the name of a person\n        instantiates: mymetamodel:Reviewable\n        annotations:\n          review: A very useful attribute that is well defined\n          ...\n```\n\n----------------------------------------\n\nTITLE: Python Code Using Generated Classes\nDESCRIPTION: Example Python code demonstrating usage of generated LinkML classes with enums.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial06.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom personinfo import Person, PersonStatus\n\nperson = Person(id='P1', full_name='Julius Caesar', status=\"DEAD\")\nprint(f'STATUS={person.status}')\nprint(f'MEANING={person.status.meaning}')\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Quantity Type Pattern in YAML\nDESCRIPTION: This YAML snippet defines a more flexible and extensible pattern for representing measurements using a separate Measurement class. It allows for multiple measurements per subject and includes quantity kind, value, and unit.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-measurements.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Subject:\n    attributes:\n      id:\n        identifier: true\n      measurements:\n        range: Measurement\n        multivalued: true\n  Measurement:\n    attributes:\n      quantity_kind:\n        range: uriorcurie\n      quantity_value:\n        range: decimal\n      quantity_unit:\n```\n\n----------------------------------------\n\nTITLE: Generating SQLAlchemy Classes\nDESCRIPTION: Command to generate SQLAlchemy ORM classes from a LinkML schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial10.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngen-sqla personinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: Output of Python Dataclass Instance\nDESCRIPTION: The console output showing the string representation of the Person instance.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial05.md#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nPerson(id='ORCID:9876', full_name='Lex Luthor', aliases=[], phone=None, age=None)\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Person Class in LinkML YAML\nDESCRIPTION: This snippet shows a basic LinkML schema for a Person class with attributes like id, name, email, age, and occupation. It demonstrates how to define a simple class structure for tabular data.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/why-linkml.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Person:\n    attributes:\n      id:\n      name:\n      email:\n      age:\n      occupation:\n      ...\n```\n\n----------------------------------------\n\nTITLE: Running SPARQL Generator via Command Line\nDESCRIPTION: Command to generate SPARQL queries from a LinkML schema file, specifying an output directory for the generated queries.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/sparql.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngen-sparql -d /path/to/sparql-queries/ personinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Annotation in LinkML YAML\nDESCRIPTION: Demonstrates how to add a custom 'review' annotation to a Person class using the annotations slot. This approach allows for arbitrary tags and values to be assigned to schema elements.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/annotations.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Person:\n    annotations:\n      review: A very useful class that is well defined\n      ...\n```\n\n----------------------------------------\n\nTITLE: Generating Python Code from LinkML Schema\nDESCRIPTION: Command to generate a Python object model from a LinkML schema YAML file.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngen-python personinfo.yaml > personinfo.py\n```\n\n----------------------------------------\n\nTITLE: Defining a Navigable Association in LinkML\nDESCRIPTION: YAML definition of a navigable association between two classes in LinkML. This creates a slot 'assoc1' that connects 'Class 1' to 'Class 2' with multi-valued, optional properties. The association is navigable from Class 1 to Class 2.\nSOURCE: https://github.com/linkml/linkml/blob/main/UML.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n    assoc1:\n      domain: Class 1\n      range: Class 2\n      multivalued: true\n      required: false\n\nclasses:\n    Class 1:\n      slots:\n        - assoc1\n```\n\n----------------------------------------\n\nTITLE: Defining Geographic Coordinates using Standard Vocabularies\nDESCRIPTION: Example of how to define latitude and longitude fields using WGS84 and Schema.org vocabularies in LinkML.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/tool-developer-guide.rst#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprefixes:\n  wgs: http://www.w3.org/2003/01/geo/wgs84_pos#\n  schema: http://schema.org/\n\nslots:\n  latitude:\n    domain: geolocation value\n    range: decimal degree\n    description: >\n      latitude\n    slot_uri: wgs:lat\n    exact_mappings:\n      - schema:latitude\n\n  longitude:\n    domain: geolocation value\n    range: decimal degree\n    description: >\n      longitude\n    slot_uri: wgs:long\n    exact_mappings:\n      - schema:longitude\n```\n\n----------------------------------------\n\nTITLE: Defining Metamodel Extension Class in LinkML YAML\nDESCRIPTION: Defines a 'Reviewable' metamodel extension class with a 'review' attribute. This class can be used to specify valid annotation tags for schema elements that instantiate it.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/annotations.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nid: https://example.org/mymetamodel/\nname: mymetamodel\n...\nclasses:\n  Reviewable:\n    class_uri: mymetamodel:Reviewable\n    attributes:\n      review:\n        description: an expert review of a schema element\n        range: string\n```\n\n----------------------------------------\n\nTITLE: Using Strict Metamodel Element in LinkML YAML\nDESCRIPTION: Demonstrates how to use the StrictElement metamodel extension to enforce the presence of a description for the Person class. This ensures that certain metadata is always provided for schema elements.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/annotations.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Person:\n    instantiates: \n      - mymetamodel:StrictElement\n    description: A person, living or dead   ## must be provided\n```\n\n----------------------------------------\n\nTITLE: Basic PersonInfo Schema Definition in YAML\nDESCRIPTION: Initial LinkML schema defining Person and Container classes with basic attributes and validations. Includes prefix declarations and semantic web context imports.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial04.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: https://w3id.org/linkml/examples/personinfo\nname: personinfo\nprefixes:\n  linkml: https://w3id.org/linkml/\n  personinfo: https://w3id.org/linkml/examples/personinfo/\n  ORCID: https://orcid.org/\ndefault_curi_maps:\n  - semweb_context\nimports:\n  - linkml:types\ndefault_prefix: personinfo\ndefault_range: string\n  \nclasses:\n  Person:\n    attributes:\n      id:\n        identifier: true\n      full_name:\n        required: true\n        description:\n          name of the person\n      aliases:\n        multivalued: true\n        description:\n          other names for the person\n      phone:\n        pattern: \"^[\\\\d\\\\(\\\\)\\\\-]+$\"\n      age:\n        range: integer\n        minimum_value: 0\n        maximum_value: 200\n  Container:\n    attributes:\n      persons:\n        multivalued: true\n        inlined_as_list: true\n        range: Person\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation with LinkML gen-doc\nDESCRIPTION: This command uses the gen-doc utility to generate Markdown documentation from a LinkML schema file. It takes the path to the schema YAML file as an argument.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/markdown.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngen-doc ~/path/to/schema.yaml\n```\n\n----------------------------------------\n\nTITLE: Importing JSONLoader Class for JSON Deserialization in Python\nDESCRIPTION: This code imports the JSONLoader class from the linkml_runtime.loaders module. The JSONLoader is used for deserializing JSON data into in-memory Python objects.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/loaders-and-dumpers.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml_runtime.loaders import JSONLoader\n```\n\n----------------------------------------\n\nTITLE: Defining Vehicle and VehiclePart Classes in YAML\nDESCRIPTION: Example of defining Vehicle and VehiclePart classes with slots for make, parts, and part_number.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/slots.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Vehicle:\n    slots:\n      - make\n      - parts\n  VehiclePart:\n    slots:\n      - part_number\n  \nslots:\n  make:\n    range: string\n  part_number:\n    range: string\n  parts:\n    range: VehiclePart\n    multivalued: true\n```\n\n----------------------------------------\n\nTITLE: Dumping Python Objects to YAML using LinkML\nDESCRIPTION: This snippet demonstrates how to use the yaml_dumper from linkml_runtime to serialize a Person object to a YAML file. It shows the creation of a Person instance and how to dump it to a file.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/python.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml_runtime.dumpers import json_dumper\nfrom personinfo import Person\n\np1 = Person(id='ORCID:9876', full_name='Lex Luthor', aliases=[\"Bad Guy\"])\nyaml_dumper.dump(p1, to_file='my-data.yaml')\n```\n\n----------------------------------------\n\nTITLE: Creating LinkML Schema using Python YAML\nDESCRIPTION: Example showing how to programmatically create a LinkML schema using Python's YAML library. This approach writes a schema dictionary structure and dumps it to YAML format.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/tools.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport yaml\n\nschema = {\n  \"id\": my_schema_url,\n  classes: [\n   {\n    \"Person\": {\n      \"description\": \"any person, living or dead\",\n      \"attributes\": {\n          ...\n       }\n    }\n   }\n  ]\n}\nprint(yaml.dump(schema))\n```\n\n----------------------------------------\n\nTITLE: Converting Python Instance to RDF using JSON-LD Context\nDESCRIPTION: Converts the Python instance to RDF format using the generated JSON-LD context and rdflib library.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/examples.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Add the context and turn it into RDF\njsonld = json_dumper.dumps(joe_smith, cntxt)\nprint(jsonld)\ng = Graph()\ng.parse(data=jsonld, format=\"json-ld\")\nprint(g.serialize(format=\"turtle\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing Multivalued Slot Ranges in Python\nDESCRIPTION: Python implementations of the YAML definitions, showcasing the handling of optional and required multivalued slots with different range types.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OptionalMultivaluedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 2.1(o) -- multivalued optional slot - range has no key or identifier\n    \"\"\"\n    ...\n    v1: Optional[Union[Union[dict, ThreeElementClass], List[Union[dict, ThreeElementClass]]]] = empty_list()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            self.v1 = []\n        if not isinstance(self.v1, list):\n            self.v1 = [self.v1]\n        self.v1 = [v if isinstance(v, ThreeElementClass) else ThreeElementClass(**v) for v in self.v1]\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass RequiredMultivaluedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 2.1(r) -- multivalued optional slot - range has no key or identifier\n    \"\"\"\n    ...\n    v1: Union[Union[dict, ThreeElementClass], List[Union[dict, ThreeElementClass]]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        elif not isinstance(self.v1, list):\n            self.v1 = [self.v1]\n        elif len(self.v1) == 0:\n            raise ValueError(f\"v1 must be a non-empty list\")\n        self.v1 = [v if isinstance(v, ThreeElementClass) else ThreeElementClass(**v) for v in self.v1]\n\n        super().__post_init__(**kwargs)\n\n@dataclass\nclass OptionalMultivaluedKeyedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 2.2(o) -- multivalued optional slot - range has a key\n    \"\"\"\n    ...\n    v1: Optional[Union[Union[str, KeyedThreeElementClassName], List[Union[str, KeyedThreeElementClassName]]]] = empty_list()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            self.v1 = []\n        if not isinstance(self.v1, list):\n            self.v1 = [self.v1]\n        self.v1 = [v if isinstance(v, KeyedThreeElementClassName) else KeyedThreeElementClassName(v) for v in self.v1]\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass RequiredMultivaluedIdentifiedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 2.2(r) -- multivalued required slot - range has an identifier\n    \"\"\"\n    ...\n    v1: Union[Union[str, IdentifiedThreeElementClassName], List[Union[str, IdentifiedThreeElementClassName]]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        elif not isinstance(self.v1, list):\n            self.v1 = [self.v1]\n        elif len(self.v1) == 0:\n            raise ValueError(f\"v1 must be a non-empty list\")\n        self.v1 = [v if isinstance(v, IdentifiedThreeElementClassName) else IdentifiedThreeElementClassName(v) for v in self.v1]\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Example LinkML Schema in YAML\nDESCRIPTION: Sample LinkML schema defining NamedThing, HasAliases mixin, and Person classes with various attributes and relationships. This schema demonstrates basic LinkML constructs including class inheritance, mixins, and slot definitions.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/shacl.rst#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nNamedThing:\n  slots:\n    - id\n    - name\n\nHasAliases:\n  mixin: true\n  attributes:\n    aliases:\n      multivalued: true\n      \nPerson:\n  is_a: NamedThing\n  mixins:\n    - HasAliases\n  slots:\n    - birth_date\n    - age_in_years\n    - gender\n```\n\n----------------------------------------\n\nTITLE: Generating SQL CREATE TABLE statements from LinkML schema using gen-sqltables\nDESCRIPTION: This snippet demonstrates how to use the gen-sqltables command to generate SQL CREATE TABLE statements from a LinkML schema file (personinfo.yaml).\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial09.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngen-sqltables personinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: LinkML to OWL Serialization Example\nDESCRIPTION: Example showing how LinkML serializes to OWL when using the same name for class and property.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/modeling.md#2025-04-17_snippet_17\n\nLANGUAGE: turtle\nCODE:\n```\ntest:author a owl:ObjectProperty ;\n    rdfs:label \"author\" ;\n    rdfs:range test:author ;\n    skos:inScheme <https://w3id.org/test/test-model> .\n\ntest:author a owl:Class ;\n    rdfs:label \"author\" ;\n```\n\n----------------------------------------\n\nTITLE: Defining Person Class with Slots in YAML\nDESCRIPTION: Example of defining a Person class with id, name, and email slots in a LinkML schema using YAML.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/slots.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Person:\n    slots:\n      - id\n      - name\n      - email\n```\n\n----------------------------------------\n\nTITLE: Defining Default Values for Slots in YAML\nDESCRIPTION: Examples of defining default values for various slot types including string, integer, float, boolean, date, datetime, and enum in LinkML schema using YAML.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/slots.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n  my_string_slot:\n    range: string\n    ifabsent: string(default value)\n  my_int_slot:\n    range: integer\n    ifabsent: int(42)\n  my_float_slot:\n    range: float\n    ifabsent: float(0.5)\n  my_bool_slot:\n    range: boolean\n    ifabsent: True\n  my_date_slot:\n    range: date\n    ifabsent: date(\"2020-01-31\")\n  my_datetime_slot:\n    range: datetime\n    ifabsent: datetime(\"2020-01-31T12:00:00Z\")\n  my_enum_slot:\n    range: FamilialRelationshipType\n    ifabsent: FamilialRelationshipType(PARENT_OF)\n```\n\n----------------------------------------\n\nTITLE: Generated Pydantic Person Class\nDESCRIPTION: The resulting Pydantic Python class generated from the LinkML Person schema definition\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/pydantic.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Person(NamedThing):\n    \"\"\"\n    A person (alive, dead, undead, or fictional).\n    \"\"\"\n    primary_email: Optional[str] = Field(None)\n    birth_date: Optional[str] = Field(None)\n    age_in_years: Optional[int] = Field(None, ge=0, le=999)\n    gender: Optional[GenderType] = Field(None)\n    current_address: Optional[Address] = Field(None, description=\"\"\"The address at which a person currently lives\"\"\")\n    has_employment_history: Optional[List[EmploymentEvent]] = Field(None)\n    has_familial_relationships: Optional[List[FamilialRelationship]] = Field(None)\n    has_medical_history: Optional[List[MedicalEvent]] = Field(None)\n    aliases: Optional[List[str]] = Field(None)\n    id: Optional[str] = Field(None)\n    name: Optional[str] = Field(None)\n    description: Optional[str] = Field(None)\n    image: Optional[str] = Field(None)\n```\n\n----------------------------------------\n\nTITLE: Loading YAML Data into Python Objects using LinkML\nDESCRIPTION: This snippet shows how to use the yaml_loader to deserialize YAML data into a Python object. It demonstrates loading data from a file into a Person instance.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/python.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np1 = yaml_loader('my-data.yaml', target_class=Person)\n```\n\n----------------------------------------\n\nTITLE: Defining a Sample Class in LinkML YAML\nDESCRIPTION: This YAML snippet shows how to define a 'Sample' class in LinkML, demonstrating the rich metadata capabilities including descriptions, patterns, and data types. It's used to contrast with the SQL DDL approach.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/why-linkml.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Sample:\n    attributes:\n      id:\n        title: identifier\n        identifier: true\n        pattern: \"SAMPLEDB:SAM\\\\d{8}\"\n        description: A unique identifier for the sample\n      name:\n        title: sample name\n        description: A human-readable name for the sample\n        range: NarrativeText\n      disease:\n        title: disease\n        description: the disease with which the patient was diagnosed\n        range: DiseaseEnum\n      src:\n        title: tissue source\n        description: the anatomical location from which the tissue was sampled\n        range: DiseaseEnum\n        todos:\n          - model this using an ontology term instead\n      collec_location:\n        title: collection location\n        description: the geocoordinates of the site where the sampling was obtained\n        notes:\n          - this should NOT be the site of processing\n        range: GeoLoc\n```\n\n----------------------------------------\n\nTITLE: Generating Excel Templates from LinkML Schema using Command Line\nDESCRIPTION: This command generates an Excel spreadsheet template from a LinkML schema file. It takes the path to the schema YAML file as input and produces an Excel file as output.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/excel.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngen-excel ~/path/to/personinfo.yaml --output ~/path/to/personinfo.xlsx\n```\n\n----------------------------------------\n\nTITLE: Running LinkML Docker Image in Bash\nDESCRIPTION: This command starts a shell from the official LinkML Docker image. It mounts the current directory to /work in the container and sets it as the working directory. The --rm flag ensures the container is removed after exit.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/install.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v ./:/work -w /work/ --rm -ti docker.io/linkml/linkml\n```\n\n----------------------------------------\n\nTITLE: Using Generated Python Dataclasses\nDESCRIPTION: A Python script demonstrating how to use the generated Person dataclass to create and print an instance.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial05.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom personinfo import Person\n\np1 = Person(id='ORCID:9876', full_name='Lex Luthor')\nprint(p1)\n```\n\n----------------------------------------\n\nTITLE: Defining Organism Class with Subtypes in LinkML YAML\nDESCRIPTION: This snippet defines an Organism class with id, name, and has_subtypes attributes in LinkML YAML. The has_subtypes attribute is a multivalued reference to other Organism objects.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/inlining.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Organism:\n    attributes:\n      id:\n        identifier: true\n      name:\n        range: string\n      has_subtypes:\n        range: Organism\n        multivalued: true\n```\n\n----------------------------------------\n\nTITLE: Defining LinkML Schema for Person and Container\nDESCRIPTION: This YAML snippet defines a LinkML schema for Person and Container classes, including attributes and their mappings to schema.org URIs.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/using-jsonld.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nprefixes:\n  schema: http://schema.org/\n  ...\nPerson:\n  description: A person (alive, dead, undead, or fictional).\n  class_uri: schema:Person\n  attributes:\n    id:\n      identifier: true\n    name:\n      slot_uri: schema:name\n    age:\n      range: integer\n    telephone:\n      slot_uri: schema:telephone\n```\n\n----------------------------------------\n\nTITLE: Flexible Unit Nested Measurement Pattern in LinkML\nDESCRIPTION: Advanced pattern using nested measurement objects to handle flexible units and maintain data normalization.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-measurements.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Subject:\n    attributes:\n      id:\n        identifier: true\n      mass:\n        range: Measurement\n      height:\n        range: Measurement\n      bmi:\n        range: Measurement\n  Measurement:\n    attributes:\n      quantity_value:\n        range: decimal\n      quantity_unit:\n```\n\n----------------------------------------\n\nTITLE: Generated Pydantic Model for NDArray (List of Lists)\nDESCRIPTION: This snippet shows the generated Pydantic model for the LinkML NDArray specification, using a list of lists representation.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/arrays.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import List, Union\n\nfrom pydantic import BaseModel, Field\n\n\nclass MyClass(BaseModel):\n    data: Union[List[int], List[List[int]], List[List[List[int]]], List[List[List[List[int]]]], List[List[List[List[List[int]]]]]] = Field(...)\n```\n\n----------------------------------------\n\nTITLE: Defining a Schema with Class Hierarchies in YAML\nDESCRIPTION: Example of a LinkML schema in YAML that defines a Person class with an employed_at attribute pointing to an Organization, which has two subclasses: NonProfit and Corporation.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/conversion.rst#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Person:\n    attributes:\n      employed_at:\n        range: Organization\n  Organization:\n    ...\n  NonProfit:\n    is_a: Organization\n    ...\n  Corportation:\n    is_a: Organization\n    ...\n```\n\n----------------------------------------\n\nTITLE: URI-Bound Enumeration Model\nDESCRIPTION: YAML definition of enumerations bound to external URIs using SNOMED CT codes as an example.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/enumerations.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nid: http://example.org/test/simple\nname: simple\ndescription: Very simple enumeration\n\nprefixes:\n  linkml: https://w3id.org/linkml/\n  play: http://example.org/test/play/\n  SCT: http://snomed.info/id/\n\ndefault_range: string\ndefault_prefix: play\n\nimports:\n  - linkml:types\n\nenums:\n  Colors:\n    description: Color values, mapped to SNOMED CT\n    permissible_values:\n      1:\n        description: Red\n        meaning: SCT:371240000\n      2:\n        description: Yellow\n        meaning: SCT:371244009\n      3:\n        meaning: SCT:405738005\n      4:\n        description: Muted\n        meaning: SCT:abcde\n        notes:\n            - Note that CURIEs are not validated if a code_set is not specified\n      9:\n        description: Muddy\n        notes:\n            - \"There isn't a SCT map for this term\"\n\nclasses:\n    FavoriteColor:\n        attributes:\n            id:\n                range: string\n                identifier: true\n            position:\n                range: Colors\n                required: true\n```\n\n----------------------------------------\n\nTITLE: Defining Inverse Slot Relationship in YAML\nDESCRIPTION: Example of defining an inverse slot relationship for parent_of and child_of in LinkML schema using YAML.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/slots.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n  parent_of:\n    is_a: famlially_related_to\n    inverse: child_of\n```\n\n----------------------------------------\n\nTITLE: Initializing ListOfIntegers with a Single Value in Python\nDESCRIPTION: Demonstrates how to initialize a ListOfIntegers object with a single integer value, which gets converted to a list internally.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nmy_entries = ListOfIntegers(17)\n```\n\n----------------------------------------\n\nTITLE: Generated Python Dataclass for Person\nDESCRIPTION: An example of the generated Python dataclass for the Person class, showing the class structure and attributes.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial05.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Person(NamedThing):\n    \"\"\"\n    A person (alive, dead, undead, or fictional).\n    \"\"\"\n    id: Union[str, PersonId] = None\n    full_name: Optional[str] = None\n    ...\n```\n\n----------------------------------------\n\nTITLE: Deprecating Elements in LinkML Schema\nDESCRIPTION: Shows how to mark schema elements as deprecated and specify replacement elements.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/metadata.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Agent:\n    deprecated: the concept of Agent was too abstract, use Person instead\n    deprecated_element_has_exact_replacement: Person\n```\n\n----------------------------------------\n\nTITLE: Defining Class and Slot URIs in LinkML\nDESCRIPTION: Demonstrates how to define class and slot URIs using schema.org mappings for Person class and related properties.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/uris-and-mappings.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n\n  Person:\n    is_a: NamedThing\n    description: >\n      A person (alive, dead, undead, or fictional).\n    class_uri: schema:Person\n  ...\n\nslots:\n  id:\n    identifier: true\n    slot_uri: schema:identifier\n  name:\n    slot_uri: schema:name\n  ...\n```\n\n----------------------------------------\n\nTITLE: Extending Node and Edge Classes for Movie Domain in YAML\nDESCRIPTION: This YAML snippet extends the basic Node and Edge classes to create a schema for a movie domain. It defines Person and Movie as Node subclasses, and ActedIn and Directed as Edge subclasses, each with specific attributes relevant to the domain.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-property-graphs.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Person:\n    is_a: Node\n    attributes:\n      born:\n      profession:\n  Movie:\n    is_a: Node\n    attributes:\n      title:\n        identifier: true\n      released:\n  ActedIn:\n    is_a: Edge\n    attributes:\n      role:\n  Directed:\n    is_a: Edge\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional Keyed Range List Class in Python\nDESCRIPTION: Defines a dataclass for handling optional lists of keyed three-element classes. Includes validation and type coercion in post-initialization.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OptionalKeyedThreeElementRangeList(YAMLRoot):\n    \"\"\"\n    Range is a optional list of a class that contains one key and two regular elements\n    \"\"\"\n    ...\n\n    v1: Optional[Union[Union[str, KeyedThreeElementClassName], List[Union[str, KeyedThreeElementClassName]]]] = empty_list()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            self.v1 = []\n        if not isinstance(self.v1, (list, dict)):\n            self.v1 = [self.v1]\n        self.v1 = [v if isinstance(v, KeyedThreeElementClassName) else KeyedThreeElementClassName(v) for v in self.v1]\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Using PlantUML with gen-doc for Documentation Generation\nDESCRIPTION: Command for generating documentation with PlantUML diagrams instead of the default Mermaid diagrams. This specifies PlantUML as the diagram type when generating LinkML documentation.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/plantumlgen.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngen-doc ~/path/to/linkml_schema.yaml --diagram-type plantuml_class_diagram --directory ~/path/to/output-directory\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Regular Expression Patterns in YAML\nDESCRIPTION: This snippet demonstrates how to declare reusable regular expression patterns in the settings section of a LinkML schema and then use them in structured patterns for slot definitions.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/modeling.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  float: \"\\\\d+[\\\\.\\\\d+]\"\n  unit: \"\\\\S+\"\n  email: \"\\\\S+@\\\\S+{\\\\.\\\\w}+\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n  height:\n    range: string\n    structured_pattern:\n      syntax: \"{float} {unit.length}\"\n      interpolated: true\n      partial_match: false\n```\n\n----------------------------------------\n\nTITLE: Post-initialization Normalization for List Objects\nDESCRIPTION: The __post_init__ method in LinkML-generated classes that handles normalization of input data, ensuring lists are properly initialized and formatted for the class specification.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            self.v1 = []\n        if not isinstance(self.v1, (list, dict)):\n            self.v1 = [self.v1]\n```\n\n----------------------------------------\n\nTITLE: LinkML Schema for a Three-Dimensional Temperature Array\nDESCRIPTION: A complete LinkML schema definition for a three-dimensional temperature array with axis implementations, demonstrating how to use the 'implements' feature to provide semantic context.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/multidimensional-arrays.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nid: https://example.org/arrays\nname: arrays-example\nprefixes:\n  linkml: https://w3id.org/linkml/\n  wgs84: http://www.w3.org/2003/01/geo/wgs84_pos#\n  example: https://example.org/\ndefault_prefix: example\nimports:\n  - linkml:types\n\nclasses:\n  TemperatureMatrix:\n    implements:\n      - linkml:ThreeDimensionalArray\n      - linkml:ColumnOrderedArray\n    attributes:\n      x:\n        implements:\n          - linkml:axis0\n        range: LatitudeSeries\n      y:\n        implements:\n          - linkml:axis1\n        range: LongitudeSeries\n      time:\n        implements:\n          - linkml:axis2\n        range: DaySeries\n      temperatures:\n        implements:\n          - linkml:elements\n        multivalued: true\n        range: float\n        required: true\n        unit:\n          ucum_code: K\n\n  LatitudeSeries:\n    description: A series whose values represent latitude\n    implements:\n      - linkml:OneDimensionalSeries\n    attributes:\n      values:\n        range: float\n        multivalued: true\n        implements:\n          - linkml:elements\n        unit:\n          ucum_code: deg\n          \n  LongitudeSeries:\n    description: A series whose values represent longitude\n    implements:\n      - linkml:OneDimensionalSeries\n    attributes:\n      values:\n        range: float\n        multivalued: true\n        implements:\n          - linkml:elements\n        unit:\n          ucum_code: deg\n          \n  DaySeries:\n    description: A series whose values represent the days since the start of the measurement period\n    implements:\n      - linkml:OneDimensionalSeries\n    attributes:\n      values:\n        range: float\n        multivalued: true\n        implements:\n          - linkml:elements\n        unit:\n          ucum_code: a\n```\n\n----------------------------------------\n\nTITLE: Defining CURIE Prefixes in YAML\nDESCRIPTION: This snippet demonstrates how to define CURIE prefixes in a LinkML schema, which can be used throughout the schema to expand abbreviated URIs.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/modeling.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nprefixes:\n  linkml: https://w3id.org/linkml/\n  biolink: https://w3id.org/biolink/\n  schema: http://schema.org/\n```\n\n----------------------------------------\n\nTITLE: OBI-style Measurement Representation in YAML\nDESCRIPTION: This YAML snippet demonstrates how measurements are represented using the OBI (Ontology for Biomedical Investigations) style. It includes ontology terms for types and qualities, with separate fields for measurement unit and value.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-measurements.md#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- id: P001\n  type: NCBITaxon:9606\n  has_quality:\n    - type: PATO:0000125\n      has_measurement:\n        has measurement unit label: UO:0000009\n        has decimal value: 70.0\n    - type: PATO:0000122\n      has_measurement:\n        has measurement unit label: UO:0000008\n        has decimal value: 1.53\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Schema from LinkML (Bash)\nDESCRIPTION: This Bash command demonstrates how to generate a JSON Schema from a LinkML schema using the gen-json-schema tool.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial03.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngen-json-schema personinfo.yaml --top-class Container > personinfo.schema.json\n```\n\n----------------------------------------\n\nTITLE: Rendering LinkML Validate CLI Documentation with Sphinx\nDESCRIPTION: Sphinx directive to generate documentation for the main LinkML validate CLI command, rendering the full nested command structure.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/cli/validate.md#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. click:: linkml.validator.cli:cli\n    :prog: linkml validate\n    :nested: full\n```\n\n----------------------------------------\n\nTITLE: Using String Templates in Python\nDESCRIPTION: Demonstrates various ways to use the string template feature, including constructing instances, parsing strings, and loading from YAML files. Shows how __str__ and repr methods behave differently.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/string_template.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Construct a class instance\ninst = FirstClass(\"Sam Sneed\", 42, \"Male\")\nprint(str(inst))\n> \"Sam Sneed - a 42 year old Male\"\n\n# Parse a string into a class image\ninst2 = FirstClass.parse(\"Jillian Johnson - a 93 year old female\")\nprint(str(inst2))\n> 'Jillian Johnson - a 93 year old female'\n\n# repr gives you the non-templated \nprint(repr(inst2))\n> \"FirstClass(name='Jillian Johnson', age=93, gender='female')\"\n\n# Load an instance from a yaml file\nwith open('jones.yaml') as yf:\n    inst3 = from_yaml(yf, FirstClass)\nprint(str(inst3))\n> 'Freddy Buster Jones - a 11 year old Undetermined'\n```\n\n----------------------------------------\n\nTITLE: Generating Pydantic Models from LinkML Schema in Shell\nDESCRIPTION: This command generates Pydantic models from a LinkML schema file using the gen-pydantic tool.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/generate-ai-prompts.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngen-pydantic examples/PersonSchema/personinfo.yaml > personinfo.py\n```\n\n----------------------------------------\n\nTITLE: Validating with JSON Schema (Bash)\nDESCRIPTION: This Bash command shows how to use the jsonschema command-line tool to validate data against the generated JSON Schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial03.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\njsonschema -i bad-data.json personinfo.schema.json\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Alchemy classes from LinkML schema\nDESCRIPTION: This snippet demonstrates how to generate SQL Alchemy ORM classes from a LinkML schema using the gen-sqla command.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial09.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngen-sqla personinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining PermissibleValue Class in YAML\nDESCRIPTION: YAML representation of the PermissibleValue class, including its attributes, relationships, and mixins. This class is used to define permissible values with associated metadata in LinkML schemas.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/PermissibleValue.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: permissible_value\nuri: https://w3id.org/linkml/PermissibleValue\ndescription: a permissible value, accompanied by intended text and an optional mapping to a concept URI\nattributes:\n  text:\n    description: The actual permissible value itself\n    range: string\n  description:\n    description: a textual description of the element's purpose and use\n    range: string\n  meaning:\n    description: the value meaning of a permissible value\n    range: uriorcurie\n  unit:\n    description: an encoding of a unit\n    range: UnitOfMeasure\n  instantiates:\n    description: An element in another schema which this element instantiates.\n    range: uriorcurie\n    multivalued: true\n  implements:\n    description: An element in another schema which this element conforms to.\n    range: uriorcurie\n    multivalued: true\n  is_a:\n    description: A primary parent class or slot from which inheritable metaslots are propagated from.\n    range: PermissibleValue\n  mixins:\n    description: A collection of secondary parent classes or slots from which inheritable metaslots are propagated from.\n    range: PermissibleValue\n    multivalued: true\nuses:\n  - mixin: Extensible\n  - mixin: Annotatable\n  - mixin: CommonMetadata\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Enumerations in LinkML YAML\nDESCRIPTION: This snippet demonstrates how to define a basic enumeration in LinkML YAML, using the FamilialRelationshipType as an example. It shows both a simple list of permissible values and a more detailed version with descriptions.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/enums.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenums:\n  FamilialRelationshipType:\n    permissible_values:\n      SIBLING_OF:\n      PARENT_OF:\n      CHILD_OF:\n```\n\nLANGUAGE: yaml\nCODE:\n```\nenums:\n  FamilialRelationshipType:\n    permissible_values:\n      SIBLING OF:\n        description: A family relationship where the two members have a parent on common\n      PARENT OF:\n        description: A family relationship between offspring and their parent\n      CHILD OF:\n        description: inverse of the PARENT_OF relationship\n```\n\n----------------------------------------\n\nTITLE: Accessing Class Attributes in Python using Direct YAML Access\nDESCRIPTION: This snippet demonstrates how to access attributes of a class directly from a LinkML YAML schema in Python. It finds the identifier slot name for a given class.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/port-linkml.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef get_identifier_slot_name(class_name: str) -> str:\n    for a_name, a in schema[\"classes\"][class_name][\"attributes\"].items():\n        if a[\"identifier\"]:\n          return a_name\n```\n\n----------------------------------------\n\nTITLE: String Serialization in LinkML Schema (YAML)\nDESCRIPTION: Shows how to use string_serialization to create formatted string output from multiple fields in an Address class.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/inference.rst#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nAddress:\n  attributes:\n    street:\n    city:\n    full_address:\n      string_serialization: |-\n        {street}\n        {city}\n```\n\n----------------------------------------\n\nTITLE: Class Definition for Inlined Dictionary Representation\nDESCRIPTION: YAML definition for classes that use inlined dictionaries instead of lists for representing multivalued attributes, showing both optional and required variants.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nOptionalMultivaluedInlinedIdentifiedThreeElementRangeList:\n    description: 2.4(o) Range is an optional identified three element class that is represented as an inlined dictionary\n    attributes:\n      v1:\n        range: IdentifiedThreeElementClass\n        multivalued: true\n        inlined: true\n\n\n  RequiredMultivaluedInlinedKeyedThreeElementRange:\n    description: 2.4(r) Range is a required keyed three element class that is represented as an inlined dictionary\n    attributes:\n      v1:\n        range: KeyedThreeElementClass\n        multivalued: true\n        inlined: true\n        required: true\n```\n\n----------------------------------------\n\nTITLE: Element Class Attribute Definitions\nDESCRIPTION: Core attributes that all Element instances must or may have, including name, identifiers, metadata, and documentation fields\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/Element.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* [name](name.md)  <sub>1..1</sub>\n    * Description: the unique name of the element within the context of the schema.\n    * Range: [String](types/String.md)\n* [id_prefixes](id_prefixes.md)  <sub>0..*</sub>\n    * Description: An allowed list of prefixes for which identifiers must conform.\n    * Range: [Ncname](types/Ncname.md)\n* [definition_uri](definition_uri.md)  <sub>0..1</sub>\n    * Description: The native URI of the element.\n    * Range: [Uriorcurie](types/Uriorcurie.md)\n```\n\n----------------------------------------\n\nTITLE: Fetching Schema Identifier with yq\nDESCRIPTION: This snippet demonstrates how to retrieve the schema identifier from a LinkML schema file using yq.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/yq-for-schemas.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yq e '.id' personinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Slots with Ranges in YAML\nDESCRIPTION: Example of defining slots with different range types including enum, class, and integer with constraints.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/slots.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n  gender:\n    slot_uri: schema:gender\n    range: GenderType  ## range is an enum\n  has_medical_history:\n    range: MedicalEvent ## range is a class\n    multivalued: true\n    inlined_as_list: true\n  age_in_years:\n    range: integer  ## range is a type\n    minimum_value: 0\n    maximum_value: 999\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional One Element Range List in Python\nDESCRIPTION: Python dataclass for handling optional lists of class instances, supporting single items and lists with type coercion.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OptionalOneElementRangeList(YAMLRoot):\n    \"\"\"\n    Range is a optional list of a class that contain one non-key/non-identifier element\n    \"\"\"\n    ...\n\n    v1: Optional[Union[Union[dict, OneElementClass], List[Union[dict, OneElementClass]]]] = empty_list()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            self.v1 = []\n        if not isinstance(self.v1, list):\n            self.v1 = [self.v1]\n        self.v1 = [v if isinstance(v, OneElementClass) else OneElementClass(**v) for v in self.v1]\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Creating LinkML Schema using Python Object Model\nDESCRIPTION: Demonstrates how to create a LinkML schema using the Python object model generated from the metamodel, which provides better IDE support and validation.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/tools.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml_runtime.linkml_model.meta import SchemaDefinition, ClassDefinition\n\ns = SchemaDefinition(id= my_schema_id,\n                     classes= [ ... ])\n```\n\n----------------------------------------\n\nTITLE: Generating ER Diagram for a Specific Class\nDESCRIPTION: Command to generate an ER diagram for a specific class and all nodes reachable from it using the -c option.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/erdiagram.rst#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngen-erdiagram personinfo.yaml -c MedicalEvent\n```\n\n----------------------------------------\n\nTITLE: Creating Instance of Generated Python Class\nDESCRIPTION: Demonstrates the creation of a Person instance using the generated Python classes from the Biolink model.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/examples.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Generate a person\njoe_smith = module.Person(id=\"42\", last_name=\"smith\", first_name=['Joe', 'Bob'], age=43)\nprint(joe_smith)\n```\n\n----------------------------------------\n\nTITLE: Generating JSON-LD Context from LinkML Model using gen-jsonld-context\nDESCRIPTION: Command to generate a JSON-LD context file from a LinkML YAML model. This creates a context file that maps JSON to RDF based on the model specifications.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/jsonld-context.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngen-jsonld-context personinfo.yaml > personinfo.context.jsonld\n```\n\n----------------------------------------\n\nTITLE: Generating Focused ER Diagram with Upstream Entities\nDESCRIPTION: Command to generate a focused ER diagram for a specific class, including upstream entities but limiting traversal with max-hops and excluding attributes.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/erdiagram.rst#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nerdiagramgen  kitchen-sink.yaml -c MedicalEvent --max-hops 0 --include-upstream --exclude-attributes\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to LinkML Schema Elements\nDESCRIPTION: Demonstrates how to add human-readable descriptions to schema elements using the description slot. The example shows both simple and markdown-formatted descriptions.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/metadata.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  Person:\n    is_a: NamedThing\n    description: >\n      A person (alive, dead, undead, or fictional).\n```\n\nLANGUAGE: yaml\nCODE:\n```\n  Person:\n    is_a: NamedThing\n    description: |-\n      A human being including those that are:\n         * alive\n         * dead\n         * undead\n         * fictional\n```\n\n----------------------------------------\n\nTITLE: Defining LinkML Type with Custom Base\nDESCRIPTION: Example of defining a LinkML type using a custom type from the LinkML runtime utilities.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntypes:\n   <type>:\n      base: <type defined in linkml/linkml_runtime/utils/metamodelcore.py> (e.g. URIorCURIE, Date, NCName, etc)\n      ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Designators in LinkML Organization Schema\nDESCRIPTION: Example schema showing how to define a type designator slot for an Organization class. The type slot is marked with designates_type: true and demonstrates class hierarchy with Business and EducationalOrganization subclasses.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/type-designators.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Organization:\n    attributes:\n      name:\n      type:\n        designates_type: true\n        range: string\n  Business:\n    is_a: Organization\n  EducationalOrganization:\n    is_a: Organization\n   ...\n```\n\n----------------------------------------\n\nTITLE: SQL CREATE TABLE statements generated from LinkML schema\nDESCRIPTION: This snippet shows the SQL CREATE TABLE statements generated from the LinkML schema, including tables for Container, Person, and Person_aliases with their respective columns and foreign key relationships.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial09.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"Container\" (\n        id INTEGER NOT NULL,\n        PRIMARY KEY (id)\n);\nCREATE TABLE \"Person\" (\n        id TEXT NOT NULL,\n        full_name TEXT NOT NULL,\n        phone TEXT,\n        age INTEGER,\n        \"Container_id\" INTEGER,\n        PRIMARY KEY (id),\n        FOREIGN KEY(\"Container_id\") REFERENCES \"Container\" (id)\n);\nCREATE TABLE \"Person_aliases\" (\n        \"Person_id\" TEXT,\n        aliases TEXT,\n        PRIMARY KEY (\"Person_id\", aliases),\n        FOREIGN KEY(\"Person_id\") REFERENCES \"Person\" (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Inlining as a List Configuration in LinkML YAML\nDESCRIPTION: This snippet shows how to configure the has_subtypes attribute to inline objects as a list. It sets both inlined and inlined_as_list to true.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/inlining.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n      has_subtypes:\n        range: Organism\n        multivalued: true\n        inlined: true\n        inlined_as_list: true\n```\n\n----------------------------------------\n\nTITLE: Using Alias in LinkML Schema\nDESCRIPTION: Example showing how to use the alias construct in a LinkML schema to provide alternative names for slots when referenced in instance data.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/modeling.md#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Sample:\n    slots:\n      - id\n      - altitude\nslots:\n  altitude_in_meters:\n    alias: alt_in_m\n    unit:\n      ucum_code: m\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- id: EX-123\n  alt_in_m: 5\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Keyed and Non-Identified Classes in LinkML YAML\nDESCRIPTION: YAML definitions for various types of LinkML classes without keys or identifiers, including optional and required attributes, and list representations.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  OptionalOneElementRange:\n    description: Range is a optional class that contains one non-key/non-identifier element\n    attributes:\n      v1:\n        range: OneElementClass\n\n  RequiredOneElementRange:\n    description: Range is a required class that contains one non-key/non-identifier element\n    is_a: OptionalOneElementRange\n    attributes:\n      v1:\n        range: OneElementClass\n        required: true\n\n  OptionalOneElementRangeList:\n    description: Range is a optional list of a class that contain one non-key/non-identifier element\n    attributes:\n      v1:\n        range: OneElementClass\n        multivalued: true\n\n  RequiredThreeElementRangeList:\n    description: Range is a required list of a class that contain one non-key/non-identifier element\n    attributes:\n      v1:\n        range: ThreeElementClass\n        multivalued: true\n        required: true\n```\n\n----------------------------------------\n\nTITLE: SlotDefinition Core Properties\nDESCRIPTION: Core properties of the SlotDefinition class including type mappings, is_a relationships, mixins, and application targets.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/SlotDefinition.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* type_mappings  <sub>0..\\*</sub>\n    * Description: A collection of type mappings for slot range serialization\n    * Range: TypeMapping\n* slot_definition➞is_a  <sub>0..1</sub>\n    * Description: Primary parent slot for inheritable metaslots\n    * Range: SlotDefinition\n* slot_definition➞mixins  <sub>0..\\*</sub>\n    * Description: Secondary parent mixin slots\n    * Range: SlotDefinition\n* slot_definition➞apply_to  <sub>0..\\*</sub>\n    * Description: Extensions for class/slot definitions\n    * Range: SlotDefinition\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Make\nDESCRIPTION: Builds the LinkML documentation using make, which creates HTML files in the _build/html/ directory that can be viewed in a browser.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake docs\n```\n\n----------------------------------------\n\nTITLE: Generating ShEx and Python from LinkML Model\nDESCRIPTION: Defines a LinkML model for person and enrollment data structures with relationships and constraints, then generates corresponding Python and ShEx representations using LinkML generators.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/ShExPrimerModel.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml.generators.shexgen import ShExGenerator\nfrom linkml.generators.pythongen import PythonGenerator\n\nmodel = \"\"\"\nid: http://shex.io/shex-primer/issueshape\ntitle: Issue Shape from ShEx primer\nname: issue\nversion: 0.1.0\n\nprefixes:\n   issue: http://shex.io/shex-primer/issue/\n   ex: http://ex.example/#\n   xsd: http://www.w3.org/2001/XMLSchema#\n   foaf: http://xmlns.com/foaf/0.1/\n\ndefault_prefix: issue\n\ndefault_range: str\n\ntypes:\n   str:\n       base: str\n       uri: xsd:string\n\n   int:\n      base: int\n      uri: xsd:integer\n\nclasses:\n    person:\n    enrolee:\n        is_a: person\n\nslots:\n    name:\n        domain: person\n        range: str\n        key: true\n\n    age:\n        domain: enrolee\n        range: int\n        slot_uri: foaf:age\n\n    hasGuardian:\n        domain: enrolee\n        range: person\n        multivalued: true\n        required: true\n\"\"\"\nprint(PythonGenerator(model).serialize())\nprint(ShExGenerator(model).serialize(collections=False))\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Three Element Range List in Python\nDESCRIPTION: Python dataclass for handling required lists of class instances with validation for non-empty lists and type coercion.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass RequiredThreeElementRangeList(YAMLRoot):\n    \"\"\"\n    Range is a required list of a class that contain two non-key/non-identifier elements\n    \"\"\"\n    ...\n\n    v1: Union[Union[dict, ThreeElementClass], List[Union[dict, ThreeElementClass]]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        elif not isinstance(self.v1, list):\n            self.v1 = [self.v1]\n        elif len(self.v1) == 0:\n            raise ValueError(f\"v1 must be a non-empty list\")\n        self.v1 = [v if isinstance(v, ThreeElementClass) else ThreeElementClass(**v) for v in self.v1]\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Tables from LinkML Schema\nDESCRIPTION: Example showing SQL DDL statements generated from a LinkML schema, creating tables for Container and Person entities with appropriate relationships and constraints.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial10.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"Container\" (\n        id INTEGER NOT NULL,\n        PRIMARY KEY (id)\n);\nCREATE TABLE \"Person\" (\n        id TEXT NOT NULL,\n        full_name TEXT NOT NULL,\n        phone TEXT,\n        age INTEGER,\n        \"Container_id\" INTEGER,\n        PRIMARY KEY (id),\n        FOREIGN KEY(\"Container_id\") REFERENCES \"Container\" (id)\n);\nCREATE TABLE \"Person_aliases\" (\n        \"Person_id\" TEXT,\n        aliases TEXT,\n        PRIMARY KEY (\"Person_id\", aliases),\n        FOREIGN KEY(\"Person_id\") REFERENCES \"Person\" (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAI Prompt from Pydantic Model in Python\nDESCRIPTION: This Python code demonstrates how to generate an OpenAI prompt using the Pydantic model schema and process the response to extract structured data.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/generate-ai-prompts.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom personinfo import Person\nimport json\nimport openai\n\nfunctions = [\n    {\n        \"name\": \"extract_data\",\n        \"description\":  \"A person\",\n        \"parameters\": Person.schema(),\n    },\n]\ntext = \"\"\"\nPERSONRECORD: 1234\n\nIzumi is a professor at the University of Tokyo, where she has been employed since 2017.\nShe is 56 years old.\nShe has a brother called Toshiro.\n\"\"\"\nmessages = [\n    {\"role\": \"system\",\n     \"content\": \"You are a helpful assistant that extracts summaries from text as JSON for a database.\"},\n    {\"role\": \"user\",\n     \"content\": 'Extract a summary from the following text: ' + text},\n]\nresponse = openai.ChatCompletion.create(\n    model=\"gpt-3.5-turbo-0613\", functions=functions, messages=messages)\nr = response.choices[0]['message']['function_call']['arguments']\nprint(json.dumps(json.loads(r), indent=2))\n```\n\n----------------------------------------\n\nTITLE: Defining Book Class in LinkML\nDESCRIPTION: This snippet defines a Book class in LinkML, representing a book record with various attributes including a reference to the Author class.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/recognize-structural-forms.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n    Book:\n    description: \"A record representing a book\"\n    attributes:\n      book_id:\n        description: \"Unique identifier for the book\"\n        identifier: true\n        range: string\n      title:\n        description: \"Title of the book\"\n        range: string\n      author_id:\n        description: \"Identifier of the author of the book\"\n        range: Author\n      genre:\n        description: \"Genre of the book\"\n        range: string\n      year:\n        description: \"Year of publication\"\n        range: integer\n      rating:\n        description: \"Rating of the book\"\n        range: integer\n        minimum_value: 1\n        maximum_value: 5\n```\n\n----------------------------------------\n\nTITLE: Querying data from SQLite database using sqlite3 command\nDESCRIPTION: This snippet shows how to query data from the SQLite database created by linkml-sqldb using the sqlite3 command-line tool.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial09.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsqlite3 persons.db \"SELECT * FROM Person\"\n```\n\n----------------------------------------\n\nTITLE: Validating with Generated Python Classes\nDESCRIPTION: Example of validating data by instantiating Python dataclasses generated from a LinkML schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/validating-data.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom personinfo import Person\nimport json\n\nwith open(\"person.json\") as f:\n    person_data = json.load(f)\n\nkent = Person(**person_data)\n```\n\n----------------------------------------\n\nTITLE: Validation Error Output (Text)\nDESCRIPTION: This text snippet shows the error output from the linkml-validate command, indicating validation failures due to an invalid phone number and a missing required field.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial03.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[ERROR] [bad-data.yaml/0] '1-800-kryptonite' does not match '^[\\\\d\\\\(\\\\)\\\\-]+$' in /persons/0/phone\n[ERROR] [bad-data.yaml/0] 'full_name' is a required property in /persons/1\n```\n\n----------------------------------------\n\nTITLE: Defining Strict Metamodel Element in LinkML YAML\nDESCRIPTION: Shows how to define a strict metamodel element (StrictElement) that requires a description. This can be used to enforce more stringent requirements on schema elements.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/annotations.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nid: https://example.org/mymetamodel/\nname: mymetamodel\n...\nclasses:\n  StrictElement:\n    class_uri: mymetamodel:StrictClassDefinition\n    slot_usage:\n      description:\n        required: true\n```\n\n----------------------------------------\n\nTITLE: Defining Expressions in LinkML Schema (YAML)\nDESCRIPTION: Demonstrates how to define expressions for calculating derived values in a Person class using equals_expression. Includes age calculations and boolean derivation.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/inference.rst#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass:\n  Person:\n    attributes:\n      age_in_years:\n        range: decimal\n        minimum_value: 0\n        maximum_value: 999\n        equals_expression: \"{age_in_months} / 12\"\n      age_in_months:\n        range: decimal\n        equals_expression: \"{age_in_years} * 12\"\n      is_juvenile:\n        range: boolean\n        equals_expression: \"{age_in_years} < 18\"\n```\n\n----------------------------------------\n\nTITLE: Example Data Using Flexible Unit String Encoding in YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the flexible unit string encoding pattern to represent a subject's measurements. It includes id, mass, height, and BMI with their respective units.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-measurements.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- id: P001\n  mass: 70 kg\n  height: 1.53 m\n  bmi: 29.9 kg/m2\n```\n\n----------------------------------------\n\nTITLE: Example LinkML Validation Configuration File\nDESCRIPTION: YAML configuration file for the linkml-validate CLI that specifies schema, target class, data sources, and validation plugins.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/validating-data.rst#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# person-validation.config.yaml\nschema: personinfo.yaml\ntarget_class: Container\n\n# Data from two files will be validated. A loader for the JSON file will be created\n# automatically based on the file extension. A loader for the CSV file is specified\n# manually in order to provide custom options.\ndata_sources:\n  - people.json\n  - CsvLoader:\n      source: people.csv\n      index_slot_name: persons\n\n# Data will be validated according to the JsonschemaValidationPlugin with additional\n# properties allowed (closed: false) and also the RecommendedSlotsPlugin\nplugins:\n  JsonschemaValidationPlugin:\n    closed: false\n  RecommendedSlotsPlugin:\n```\n\n----------------------------------------\n\nTITLE: LinkML Linter Configuration Disabling a Recommended Rule (YAML)\nDESCRIPTION: Example configuration file for the LinkML linter that extends the recommended ruleset but disables one specific rule.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/linter.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Use the recommended rule set except for the standard_naming rule\nextends: recommended\nrules:\n  standard_naming:\n    level: disabled\n```\n\n----------------------------------------\n\nTITLE: Simple Position Enumeration Model\nDESCRIPTION: YAML definition of a simple enumeration model with position values and a positional record class.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/enumerations.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nid: http://example.org/test/simple\nname: simple\ndescription: Very simple enumeration\n\nprefixes:\n  linkml: https://w3id.org/linkml/\n  play: http://example.org/test/play/\n  CS: http://ontologies-r.us/codesystem/\n\ndefault_range: string\ndefault_prefix: play\n\n\nimports:\n  - linkml:types\n\n\nenums:\n  Position:\n    description: Baseline enumeration -- simple code/value pairs, where the value (description) is optional\n    permissible_values:\n      a: top\n      b: middle\n      c: bottom\n      d:\n\nclasses:\n    PositionalRecord:\n        description: The combination of a unique identifier and with an associated position\n        attributes:\n            id:\n                range: string\n                identifier: true\n            position:\n                range: Position\n                required: true\n```\n\n----------------------------------------\n\nTITLE: LinkML schema for dictionary-based inlining\nDESCRIPTION: YAML schema demonstrating how to define a multivalued slot that gets inlined as a dictionary with object identifiers as keys.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/json-schema.rst#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Container:\n    tree_root: true\n    attributes:\n      persons:\n        range: Person\n        inlined: true\n        multivalued: true\n  Person:\n    attributes:\n      name:\n        identifier: true\n      age:\n        range: integer\n        required: true\n      gender:\n        range: string\n        required: true                    \n```\n\n----------------------------------------\n\nTITLE: Defining Slots in YAML\nDESCRIPTION: Demonstrates the use of defining_slots to infer class membership based on slot ranges, using an Interaction and ProteinProteinInteraction example.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/advanced.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n\n  Interaction:\n    slots:\n      - subject\n      - object\n\n  ProteinProteinInteraction:\n    is_a: Interaction\n    slot_usage:\n      subject:\n        range: Protein\n      object:\n        range: Protein\n    defining_slots:\n      - subject\n      - object\n```\n\n----------------------------------------\n\nTITLE: Defining Multivalued Slot in YAML\nDESCRIPTION: Example of defining a multivalued slot for medical history in LinkML schema using YAML.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/slots.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n  has_medical_history:\n    range: MedicalEvent\n    multivalued: true\n    inlined_as_list: true\n```\n\n----------------------------------------\n\nTITLE: Storing LinkML schema data in SQLite database using linkml-sqldb\nDESCRIPTION: This snippet demonstrates how to use the linkml-sqldb command to store data from a YAML file into a SQLite database, based on a LinkML schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial09.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlinkml-sqldb dump -s personinfo.yaml --db persons.db data.yaml\n```\n\n----------------------------------------\n\nTITLE: ShExC Schema for Person and FriendlyPerson\nDESCRIPTION: This ShExC (Shape Expressions Compact Syntax) schema defines the structure and constraints for Person and FriendlyPerson entities in RDF.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_notebooks/output/examples.txt#2025-04-17_snippet_4\n\nLANGUAGE: ShExC\nCODE:\n```\n# metamodel_version: 1.7.0\nBASE <http://example.org/model/>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\n\n<String> xsd:string\n\n<Int> xsd:integer\n\n<Boolean> xsd:boolean\n\n<FriendlyPerson> CLOSED {\n    (  $<FriendlyPerson_tes> (  &<Person_tes> ;\n          rdf:type [ <Person> ] ? ;\n          foaf:knows @<Person> +\n       ) ;\n       rdf:type [ <FriendlyPerson> ]\n    )\n}\n\n<Person>  (\n    CLOSED {\n       (  $<Person_tes> (  foaf:firstName @<String> * ;\n             foaf:lastName @<String> ;\n             foaf:age @<Int> ? ;\n             <living> @<Boolean> ? ;\n             foaf:knows @<Person> *\n          ) ;\n          rdf:type [ <Person> ]\n       )\n    } OR @<FriendlyPerson>\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Sample Biolink Model in YAML\nDESCRIPTION: Creates a sample Biolink model using YAML syntax. The model defines classes, slots, and types for representing persons and their relationships.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/examples.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n%%yaml  model\nid: http://example.org/sample/example1\nname: synopsis2\nprefixes:\n    foaf: http://xmlns.com/foaf/0.1/\n    samp: http://example.org/model/\n    xsd: http://www.w3.org/2001/XMLSchema#\n\ndefault_prefix: samp\n\ndefault_curi_maps:\n    - semweb_context\n\ndefault_range: string\n\ntypes:\n    string:\n        base: str\n        uri: xsd:string\n    int:\n        base: int\n        uri: xsd:integer\n    boolean:\n        base: Bool\n        uri: xsd:boolean\n\n\nclasses:\n    person:\n        description: A person, living or dead\n        slots:\n            - id\n            - first name\n            - last name\n            - age\n            - living\n            - knows\n\n    friendly_person:\n        description: Any person that knows someone\n        is_a: person\n        slot_usage:\n            knows:\n                required: True\n\nslots:\n    id:\n        description: Unique identifier of a person\n        identifier: true\n\n    first name:\n        description: The first name of a person\n        slot_uri: foaf:firstName\n        multivalued: true\n\n    last name:\n        description: The last name of a person\n        slot_uri: foaf:lastName\n        required: true\n\n    living:\n        description: Whether the person is alive\n        range: boolean\n        comments:\n            - unspecified means unknown\n\n    age:\n        description: The age of a person if living or age of death if not\n        range: int\n        slot_uri: foaf:age\n\n    knows:\n        description: A person known by this person (indicating some level of reciprocated interaction between the parties).\n        range: person\n        slot_uri: foaf:knows\n        multivalued: true\n```\n\n----------------------------------------\n\nTITLE: Generating TSV Prefix Mapping in LinkML\nDESCRIPTION: This command generates a simple TSV-style mapping between prefixes and URIs/IRIs using the gen-prefix-map tool. It takes a YAML schema file as input and outputs a TSV file.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/prefixmap.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngen-prefix-map examples/personinfo.yaml --output examples/personinfo.tsv\n```\n\n----------------------------------------\n\nTITLE: Generating ShEx Schema from Biolink Model\nDESCRIPTION: Creates a Shape Expressions (ShEx) schema from the Biolink model using the ShExGenerator from LinkML.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/examples.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nshex = ShExGenerator(model_str).serialize(collections=False)\nprint(shex)\n```\n\n----------------------------------------\n\nTITLE: Defining Unique Keys in LinkML Schema\nDESCRIPTION: Demonstrates how to declare unique keys for chemical entities where atomic number and neutron number form a compound key for isotopes.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/constraints.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  ChemicalEntity:\n    slots:\n      - id\n      - symbol\n      - inchi\n      - atomic_number\n      - neutron_number\n  ChemicalElement:\n    is_a: ChemicalEntity\n    \n  Isotope:\n    is_a: ChemicalEntity\n    unique_keys:\n      main:\n        description: An isotope is uniquely identifier by atomic and neutron number\n        unique_key_slots:\n          - atomic_number\n          - neutron_number\n      symbol:\n        description: An isotope is uniquely identifier by its symbol\n        notes:\n          - we could have opted to use a simple key slot here as this is not a compound key but this allows us to annotate the key\n        unique_key_slots:\n          - symbol\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output from OpenAI Extraction\nDESCRIPTION: This JSON snippet shows a sample output from the OpenAI extraction process, demonstrating the structured data extracted from the input text.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/generate-ai-prompts.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"1234\",\n  \"name\": \"Izumi\",\n  \"description\": \"Izumi is a professor at the University of Tokyo.\",\n  \"age_in_years\": 56,\n  \"has_familial_relationships\": [\n    {\n      \"related_to\": \"Toshiro\",\n      \"type\": \"SIBLING_OF\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining range_expression Slot in LinkML\nDESCRIPTION: This markdown snippet defines the 'range_expression' slot in LinkML. It specifies the slot's URI, domain and range, parent and child relationships, usage contexts, and additional properties. The slot is used to describe a range as a boolean expression combining existing ranges.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/range_expression.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: range_expression\n\nA range that is described as a boolean expression combining existing ranges\n\nURI: [linkml:range_expression](https://w3id.org/linkml/range_expression)\n\n\n## Domain and Range\n\n[SlotExpression](SlotExpression.md) &#8594;  <sub>0..1</sub> [AnonymousClassExpression](AnonymousClassExpression.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [AnonymousSlotExpression](AnonymousSlotExpression.md)\n * [PathExpression](PathExpression.md)\n * [SlotDefinition](SlotDefinition.md)\n * [SlotExpression](SlotExpression.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | one use for this is being able to describe a range using any_of expressions, for example to combine two enums |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: Defining Rules in YAML\nDESCRIPTION: Shows how to define rules with preconditions and postconditions for an Address class, specifying constraints for USA addresses.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/advanced.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Address:\n    slots:\n      - street_address\n      - country\n    rules:\n      - preconditions:\n          slot_conditions:\n            country:\n              any_of:\n                - equals_string: USA\n                - equals_string: USA_territory\n        postconditions:\n          slot_conditions:\n            postal_code:\n              pattern: \"[0-9]{5}(-[0-9]{4})?\"\n            telephone:\n              pattern: \"^\\\\+1 \"\n        description: USA and territories must have a specific regex pattern for postal codes and phone numbers\n```\n\n----------------------------------------\n\nTITLE: Defining Slot Domain in LinkML\nDESCRIPTION: This snippet demonstrates how to define a slot with a domain in LinkML. It shows that declaring a slot with a domain implicitly asserts the type of the subject using that slot.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/domain.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nS1:\n  domain: C1\n  range:  C2\n\nX:\n  S1: Y\n```\n\n----------------------------------------\n\nTITLE: Constraining Slot Values with Rules in LinkML\nDESCRIPTION: Demonstrates using rules blocks to create conditional constraints between slots, specifically for a toy store inventory example where color options depend on the toy species.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/modeling.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Toys:\n    attributes:\n      species:\n        range: SpeciesRng\n      colour:\n    rules:\n      - preconditions:\n          slot_conditions:\n            species:\n              equals_string: horse\n        postconditions:\n          slot_conditions:\n            colour:\n              any_of:\n                - range: RedGreen\n      - preconditions:\n          slot_conditions:\n            species:\n              equals_string: frog\n        postconditions:\n          slot_conditions:\n            colour:\n              any_of:\n                - range: BluePink\n\nenums:\n  SpeciesRng:\n    permissible_values: \n      horse:\n      frog:\n  BluePink:\n    permissible_values:\n      blue:\n      pink:\n  RedGreen:\n    permissible_values:\n      red:\n      green:\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pre-commit Hooks\nDESCRIPTION: Configures pre-commit hooks in the repository to automatically run linting and formatting checks before each commit, helping maintain code quality standards.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/contributing/contributing.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Basic ER Diagram Generation in Bash\nDESCRIPTION: The basic command to generate an ER diagram from a LinkML schema file. This produces a markdown-ready file with mermaid syntax.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/erdiagram.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngen-erdiagram personinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: Refining Vehicle Hierarchy with Slot Usage in YAML\nDESCRIPTION: Example of refining the Vehicle hierarchy with Car and Bicycle subclasses, using slot_usage to specify part types.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/slots.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  ...\n  Car:\n    is_a: Vehicle\n    slot_usage:\n      parts:\n        range: CarPart\n  Bicycle:\n    is_a: Vehicle\n    slot_usage:\n      parts:\n        range: BicyclePart\n  CarPart:\n    is_a: VehiclePart\n  BicyclePart:\n    is_a: VehiclePart\n```\n\n----------------------------------------\n\nTITLE: Creating Person Object in Python\nDESCRIPTION: Example of creating a Person object using the generated Python class.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom personinfo import Person\np1 = Person('P1', name='John Smith')\n```\n\n----------------------------------------\n\nTITLE: Direct Ontology Term Modeling\nDESCRIPTION: Example showing how to model ontology terms directly as classes with relevant slots for metadata.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/modeling.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_prefix: my_schema\n\nclasses:\n  variant:\n    slots:\n       - variant type\n  ontology term:\n     slots:\n        - name\n        - id\n        - ontology namespace\n        - synonyms\n        - secondary ids\n\n\nslots:\n  variant type:\n    range: ontology term\n  name:\n  id:\n     type: uriorcurie\n  ontology namespace:\n  synonyms:\n  secondary ids:\n```\n\n----------------------------------------\n\nTITLE: Using Inference Utils in Python\nDESCRIPTION: Shows how to use the inference_utils module to populate missing values based on defined expressions. Demonstrates age calculation inference.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/inference.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml_runtime.utils.inference_utils import infer_all_slot_values\nfrom .personinfo infer Person\n\np = Person(age_in_years=30)\ninfer_all_slot_values(p, schemaview=sv)\nassert p.age_in_months == 360\nassert not p.juvenile\n```\n\n----------------------------------------\n\nTITLE: Generating PlantUML Diagrams from LinkML Schema\nDESCRIPTION: Command for generating PlantUML diagrams from a LinkML schema file. The command accepts a path to the schema, optional class specifications, and an output directory.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/plantumlgen.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngen-plantuml ~/path/to/linkml_schema.yaml --classes <class-one> --classes <class-two> --directory ~/path/to/output-directory\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Schema from LinkML schema using CLI\nDESCRIPTION: Command to generate a JSON Schema from a LinkML YAML schema file using the gen-json-schema command line tool.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/json-schema.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngen-json-schema personinfo.yaml > personinfo.schema.json\n```\n\n----------------------------------------\n\nTITLE: Defining a Person Dataclass in Python with LinkML\nDESCRIPTION: This example shows how a Person dataclass is generated from a LinkML model. It includes class variables, inheritance, and property definitions with typing information.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/python.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Person(NamedThing):\n    \"\"\"\n    A person (alive, dead, undead, or fictional).\n    \"\"\"\n    _inherited_slots: ClassVar[List[str]] = []\n\n    class_class_uri: ClassVar[URIRef] = SCHEMA.Person\n    class_class_curie: ClassVar[str] = \"schema:Person\"\n    class_name: ClassVar[str] = \"Person\"\n    class_model_uri: ClassVar[URIRef] = PERSONINFO.Person\n\n    id: Union[str, PersonId] = None\n    primary_email: Optional[str] = None\n    birth_date: Optional[str] = None\n    age_in_years: Optional[int] = None\n    gender: Optional[str] = None\n    current_address: Optional[Union[dict, \"Address\"]] = None\n    has_employment_history: Optional[Union[Union[dict, \"EmploymentEvent\"], List[Union[dict, \"EmploymentEvent\"]]]] = empty_list()\n    has_familial_relationships: Optional[Union[Union[dict, \"FamilialRelationship\"], List[Union[dict, \"FamilialRelationship\"]]]] = empty_list()\n    has_medical_history: Optional[Union[Union[dict, \"MedicalEvent\"], List[Union[dict, \"MedicalEvent\"]]]] = empty_list()\n    aliases: Optional[Union[str, List[str]]] = empty_list()\n```\n\n----------------------------------------\n\nTITLE: Defining Enumerations with Ontology Mappings\nDESCRIPTION: Example showing how to create an enumeration with permissible values mapped to ontology terms using the meaning slot.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/uris-and-mappings.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nenums:\n  PersonStatus:\n    permissible_values:\n      ALIVE:\n        description: the person is living\n        meaning: PATO:0001421 \n      DEAD:\n        description: the person is deceased\n        meaning: PATO:0001422\n      UNKNOWN:\n        description: the vital status is not known\n        todos:\n          - map this to an ontology\n```\n\n----------------------------------------\n\nTITLE: Defining Flexible Unit String Encoding Pattern in YAML\nDESCRIPTION: This YAML snippet defines a Subject class with attributes for mass, height, and BMI using a structured pattern for flexible unit string encoding. It allows for representing measurements with both value and unit in a single string.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-measurements.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Subject:\n    attributes:\n      id:\n        identifier: true\n      mass:\n        range: string\n        structured_pattern:\n          syntax: \"{float} {unit}\"\n      height:\n        range: string\n        structured_pattern:\n          syntax: \"{float} {unit}\"\n      bmi:\n        range: string\n        structured_pattern:\n          syntax: \"{float} {unit}\"\n```\n\n----------------------------------------\n\nTITLE: Running LinkML Linter on a Single Schema File (Bash)\nDESCRIPTION: Command to lint a single schema file using the LinkML linter.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/linter.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlinkml-lint schema.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Inlined List Multivalued Slots in YAML\nDESCRIPTION: YAML definitions for multivalued slots represented as inlined lists, including optional identified and required keyed scenarios.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nOptionalMultivaluedInlinedListIdentifiedThreeElementRange:\n  description: 2.3(o) Range is an optional identified three element class that is represented as an inlined list\n  attributes:\n    v1:\n      range: IdentifiedThreeElementClass\n      multivalued: true\n      inlined_as_list: true\n\n\nRequiredMultivaluedInlinedListKeyedThreeElementRangeList:\n  description: 2.3(r) Range is a required keyed three element class that is represented as an inlined list\n  attributes:\n    v1:\n      range: KeyedThreeElementClass\n      multivalued: true\n      inlined_as_list: true\n      required: true\n```\n\n----------------------------------------\n\nTITLE: Example Data for Inlining a Single-Valued Object in YAML\nDESCRIPTION: This snippet demonstrates how data is represented when inlining a single-valued object. The has_parent attribute contains a nested Organism object.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/inlining.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- id: NCBITaxon:9606\n  name: human\n  has_parent:\n    id: NCBITaxon:9443:\n    name: primates\n    has_parent:\n      id: NCBITaxon:40674\n      name: mammals\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to RDF using LinkML CLI\nDESCRIPTION: This bash command demonstrates how to use the LinkML command-line interface to convert JSON data to RDF format using a LinkML schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/using-jsonld.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nlinkml-convert -s personinfo.yaml data.json -o data.ttl\n```\n\n----------------------------------------\n\nTITLE: Example Data Using Generic Quantity Type Pattern in YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the generic quantity type pattern to represent a subject's measurements. It includes multiple measurements for body mass, height, and BMI with separate fields for quantity kind, value, and unit.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-measurements.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- id: P001\n  measurements:\n    - quantity_kind: body mass\n      quantity_value: 70\n      quantity_unit: kg\n    - quantity_kind:  height\n      quantity_value: 1.53\n      quantity_unit: m\n    - quantity_kind: bmi\n      quantity_value: 29.9\n      quantity_unit: kg/m2\n```\n\n----------------------------------------\n\nTITLE: Defining Any Type Arrays in LinkML and Pydantic\nDESCRIPTION: Demonstrates how to define arrays of any shape in LinkML and their corresponding implementations in pydantic and numpydantic. Shows both untyped and typed array definitions.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/arrays.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nAnyType:\n  attributes:\n    array:\n      range: AnyType\n      array: {}\n\nTyped:\n  attributes:\n    array:\n      range: integer\n      array: {}\n```\n\nLANGUAGE: python\nCODE:\n```\nclass AnyType(ConfiguredBaseModel):\n    array: Optional[AnyShapeArray] = Field(None)\n\nclass Typed(ConfiguredBaseModel):\n    array: Optional[AnyShapeArray[int]] = Field(None)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass AnyType(ConfiguredBaseModel):\n    array: Optional[NDArray] = Field(None)\n\nclass Typed(ConfiguredBaseModel):\n    array: Optional[NDArray[Any, int]] = Field(None)\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Schema from LinkML with Inheritance\nDESCRIPTION: This bash command generates a JSON Schema from the LinkML YAML file that includes inheritance and mixins. It shows how LinkML concepts are translated into JSON Schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial07.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngen-json-schema personinfo-with-inheritance.yaml > personinfo-with-inheritance.schema.json\n```\n\n----------------------------------------\n\nTITLE: Formatting Code Automatically in LinkML Project\nDESCRIPTION: Automatically fixes formatting and some code quality issues using tox. This is useful for resolving issues identified by the linting process.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/contributing/contributing.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npoetry run tox -e format\n```\n\n----------------------------------------\n\nTITLE: Converting YAML to TSV using LinkML\nDESCRIPTION: Example command showing how to convert YAML data to TSV format using linkml-convert with container and organization specifications.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/csvs.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlinkml-convert -t tsv -s examples/PersonSchema/personinfo.yaml -C Container -S organizations examples/PersonSchema/data/example_personinfo_data.yaml\n```\n\n----------------------------------------\n\nTITLE: Generated SHACL Output in Turtle Format\nDESCRIPTION: Example SHACL output generated from a LinkML schema. This SHACL definition includes node shapes, property constraints, and class targeting for the Person class. It demonstrates various SHACL features like closed shapes, property paths, and cardinality constraints.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/shacl.rst#2025-04-17_snippet_2\n\nLANGUAGE: turtle\nCODE:\n```\n<https://w3id.org/linkml/tests/kitchen_sink/Person> a shacl:NodeShape ;\n    shacl:closed true ;\n    shacl:ignoredProperties ( rdf:type ) ;\n    shacl:property [ shacl:class <https://w3id.org/linkml/tests/kitchen_sink/BirthEvent> ;\n            shacl:maxCount 1 ;\n            shacl:nodeKind shacl:BlankNode ;\n            shacl:path <https://w3id.org/linkml/tests/kitchen_sink/has_birth_event> ],\n        [ shacl:maxCount 1 ;\n            shacl:maxInclusive 999 ;\n            shacl:minInclusive 0 ;\n            shacl:path <https://w3id.org/linkml/tests/kitchen_sink/age_in_years> ],\n        [ shacl:class <https://w3id.org/linkml/tests/kitchen_sink/FamilialRelationship> ;\n            shacl:nodeKind shacl:BlankNode ;\n            shacl:path <https://w3id.org/linkml/tests/kitchen_sink/has_familial_relationships> ],\n        [ shacl:maxCount 1 ;\n            shacl:path <https://w3id.org/linkml/tests/core/name> ;\n            shacl:pattern \"^\\\\S+ \\\\S+\" ],\n        [ shacl:class <https://w3id.org/linkml/tests/kitchen_sink/MedicalEvent> ;\n            shacl:nodeKind shacl:BlankNode ;\n            shacl:path <https://w3id.org/linkml/tests/kitchen_sink/has_medical_history> ],\n        [ shacl:class <https://w3id.org/linkml/tests/kitchen_sink/Address> ;\n            shacl:nodeKind shacl:BlankNode ;\n            shacl:path <https://w3id.org/linkml/tests/kitchen_sink/addresses> ],\n        [ shacl:maxCount 1 ;\n            shacl:path <https://w3id.org/linkml/tests/core/id> ],\n        [ shacl:path <https://w3id.org/linkml/tests/kitchen_sink/aliases> ],\n        [ shacl:class <https://w3id.org/linkml/tests/kitchen_sink/EmploymentEvent> ;\n            shacl:nodeKind shacl:BlankNode ;\n            shacl:path <https://w3id.org/linkml/tests/kitchen_sink/has_employment_history> ] ;\n    shacl:targetClass <https://w3id.org/linkml/tests/kitchen_sink/Person> .\n```\n\n----------------------------------------\n\nTITLE: Object Creation with Inlined Objects in Python\nDESCRIPTION: Different methods of creating objects with inlined references in Python.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nevent = EmploymentEvent(...)\n# method 1: creation with objects\np1 = Person('P1', name='John Smith', employment_history=[event])\n\n# method 2: creation with dicts\np1 = Person('P1', name='John Smith', employment_history=[{...}])\n\n# method 3: implicit lists\np1 = Person('P1', name='John Smith', employment_history={...})\n```\n\n----------------------------------------\n\nTITLE: Specifying Units in LinkML Schema\nDESCRIPTION: Examples of how to specify units for measurements using various unit systems and quantity kinds.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/metadata.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n  height_in_cm:\n    range: float\n    unit:\n      ucum_code: cm\n```\n\nLANGUAGE: yaml\nCODE:\n```\nprefixes:\n  linkml: https://w3id.org/linkml/\n  UO: http://purl.obolibrary.org/obo/UO_\n  PATO: http://purl.obolibrary.org/obo/UO_\n  qudt: http://qudt.org/schema/qudt/\n  uom: https://w3id.org/uom/\n    \nslots:\n  height_in_cm:\n    range: float\n    unit:\n      ucum_code: cm\n      iec61360code: UAA375\n      exact_mappings:\n        - UO:0000015 ## centimeter\n        - uom:cm\n      has_quantity_kind: PATO:0000119 ## height     \n```\n\nLANGUAGE: yaml\nCODE:\n```\ntypes:\n  KilogramValue:\n    typeof: float\n    unit:\n      ucum_code: kg\n```\n\n----------------------------------------\n\nTITLE: ID Prefix Constraints for Classes\nDESCRIPTION: Shows how to constrain identifiers for a class to specific prefixes, demonstrated with Sequence Ontology terms.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/modeling.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_prefix: my_schema\n\nclasses:\n  variant:\n    slots:\n       - variant type\n  sequence ontology term:\n     slots:\n        - name\n        - id\n        - ontology namespace\n        - synonyms\n        - secondary ids\n     id_prefixes:\n        - SO\n\n\nslots:\n  variant type:\n    range: sequence ontology term\n  name:\n  id:\n    identifier: true\n    type: uriorcurie\n  ontology namespace:\n  synonyms:\n  secondary ids:\n```\n\n----------------------------------------\n\nTITLE: Pydantic Template Example - Attributes\nDESCRIPTION: Example demonstrating how to define a Pydantic attribute with annotations and validations\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/pydantic.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nattr = PydanticAttribute(\n    name=\"my_field\",\n    annotations={\"python_range\": {\"value\": \"str\"}},\n    title=\"My Field!\",\n    description=\"A Field that is mine!\",\n    pattern=\"my_.*\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Class Relationships Using Slots in YAML\nDESCRIPTION: This example shows how to define relationships between classes using slots with domain and range constraints in a LinkML schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/modeling.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_prefix: my_schema\n\nclasses:\n  allele:\n    slots:\n       - allele of\n  gene:\n     \nslots:\n  allele of: \n     type: uriorcurie\n     domain: allele\n     range: gene\n```\n\n----------------------------------------\n\nTITLE: Using equals_expression in YAML\nDESCRIPTION: Shows how to use equals_expression to define relationships between slots, such as age in years and months, and to derive boolean values.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/advanced.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n  ...\n  age_in_years:\n    range: decimal\n    minimum_value: 0\n    maximum_value: 999\n    equals_expression: \"{age_in_months} / 12\"\n  age_in_months:\n    range: decimal\n    equals_expression: \"{age_in_years} * 12\"\n  is_juvenile:\n    range: boolean\n    equals_expression: \"{age_in_years} < 18\"\n```\n\n----------------------------------------\n\nTITLE: Defining Person Class in LinkML YAML\nDESCRIPTION: Example YAML schema defining a Person class with various properties and relationships\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/pydantic.rst#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nPerson:\n  is_a: NamedThing\n  description: >\n    A person (alive, dead, undead, or fictional).\n  class_uri: schema:Person\n  mixins:\n    - HasAliases\n  slots:\n    - primary_email\n    - birth_date\n    - age_in_years\n    - gender\n    - current_address\n    - has_employment_history\n    - has_familial_relationships\n    - has_medical_history\n```\n\n----------------------------------------\n\nTITLE: Defining Inherited LinkML Type\nDESCRIPTION: Example of defining a LinkML type that inherits from another type.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntypes:\n   <type>:\n      typeof: <parent type>\n```\n\n----------------------------------------\n\nTITLE: Using LinkML Validate CLI for Basic Validation\nDESCRIPTION: Example of using the linkml-validate command line interface to validate a CSV file against a LinkML schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/validating-data.rst#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ linkml-validate --schema personinfo.yaml --target-class Person people.csv\nNo issues found!\n```\n\n----------------------------------------\n\nTITLE: Generating TerminusDB Schema from LinkML YAML\nDESCRIPTION: This command-line instruction demonstrates how to use the gen-terminusdb tool to convert a LinkML YAML schema (personinfo.yaml) into a TerminusDB WOQL schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/terminusdb.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngen-terminusdb personinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Uriorcurie Type in LinkML YAML\nDESCRIPTION: This code snippet defines the Uriorcurie type in LinkML. It specifies that Uriorcurie is a type that can be either a URI or a CURIE, with a root type of URIorCURIE and a string representation.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/types/Uriorcurie.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Type: uriorcurie\n\n\na URI or a CURIE\n\nURI: [linkml:Uriorcurie](https://w3id.org/linkml/Uriorcurie)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **URIorCURIE** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Pydantic Template Example - Imports\nDESCRIPTION: Example showing how to define imports using the Pydantic templating system\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/pydantic.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimports = (Imports() +\n    Import(module=\"sys\") +\n    Import(module=\"pydantic\", objects=[{\"name\": \"BaseModel\"}, {\"name\": \"Field\"}])\n```\n\n----------------------------------------\n\nTITLE: Data Validation Command\nDESCRIPTION: Command to validate data against LinkML schema\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial01.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nlinkml-validate -s personinfo.yaml data.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining CreativeWork Subclasses in LinkML\nDESCRIPTION: This snippet defines subclasses of CreativeWork in LinkML, including Book, Album, Art, Film, and Software, each with specific attributes.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/recognize-structural-forms.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n  Book:\n    is_a: CreativeWork\n    description: \"Written works, primarily textual in nature\"\n    attributes:\n      isbn:\n        description: \"International Standard Book Number\"\n        range: string\n      publisher:\n        description: \"Publisher of the book\"\n        range: string\n      number_of_pages:\n        description: \"Total number of pages\"\n        range: integer\n      genre:\n        description: \"Genre of the book\"\n        range: BookGenre\n      format:\n        description: \"Format of the book (e.g., Hardcover, Paperback, Ebook)\"\n        range: BookFormat\n\n  Album:\n    is_a: CreativeWork\n    description: \"Musical works released in a collection (album)\"\n    attributes:\n      release_date:\n        description: \"Release date of the album\"\n        range: date\n      record_label:\n        description: \"Record label that released the album\"\n        range: string\n      genre:\n        description: \"Musical genre of the album\"\n        range: MusicGenre\n      tracklist:\n        description: \"List of tracks in the album\"\n        range: string\n\n  Art:\n    is_a: CreativeWork\n    description: \"Works of visual art, including paintings, sculptures, and digital art\"\n    attributes:\n      medium:\n        description: \"Medium used in the artwork (e.g., oil, watercolor, digital)\"\n        range: ArtMedium\n      dimensions:\n        description: \"Dimensions of the artwork\"\n        range: string\n      style:\n        description: \"Artistic style of the artwork (e.g., abstract, realism)\"\n        range: ArtStyle\n      gallery:\n        description: \"Gallery where the artwork is displayed or housed\"\n        range: string\n\n  Film:\n    is_a: CreativeWork\n    description: \"Motion picture works, including movies and short films\"\n    attributes:\n      director:\n        description: \"Director of the film\"\n        range: string\n      release_date:\n        description: \"Release date of the film\"\n        range: date\n      cast:\n        description: \"Cast members of the film\"\n        range: string\n      genre:\n        description: \"Genre of the film\"\n        range: FilmGenre\n      running_time:\n        description: \"Total running time of the film\"\n        range: string\n\n  Software:\n    is_a: CreativeWork\n    description: \"Computer software and applications\"\n    attributes:\n      developer:\n        description: \"Developer of the software\"\n        range: string\n      release_date:\n        description: \"Release date of the software\"\n        range: date\n      version:\n        description: \"Version of the software\"\n        range: string\n      platform:\n        description: \"Platform for which the software is developed\"\n        range: SoftwarePlatform\n```\n\n----------------------------------------\n\nTITLE: Defining SlotDefinition Class in LinkML YAML\nDESCRIPTION: YAML definition of the SlotDefinition class in LinkML, including its URI, parent class, mixin, and various properties. This class is central to defining relationships between instances in a LinkML schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/SlotDefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Class: slot_definition\n\nan element that describes how instances are related to other instances\n\nURI: [linkml:SlotDefinition](https://w3id.org/linkml/SlotDefinition)\n\n## Parents\n\n *  is_a: [Definition](Definition.md) - abstract base class for core metaclasses\n\n## Uses Mixin\n\n *  mixin: [SlotExpression](SlotExpression.md) - an expression that constrains the range of values a slot can take\n```\n\n----------------------------------------\n\nTITLE: Integer Type Definition and Class Usage\nDESCRIPTION: Complete example showing integer type definition and its usage in a class with various permutations of optionality and multiplicity.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntypes:\n  integer:\n    uri: xsd:integer\n    base: int\n    description: An integer\n\nclasses:\n    Integers:\n      description: various permutations of the integer type\n      attributes:\n        opt_integer:\n          range: integer\n        mand_integer:\n          range: integer\n          required: true\n        opt_multi_integer:\n          range: integer\n          multivalued: true\n        mand_multi_integer:\n          range: integer\n          multivalued: true\n          required: true\n```\n\n----------------------------------------\n\nTITLE: LinkML Validate CLI with Configuration File\nDESCRIPTION: Example of using a configuration file with the linkml-validate CLI for more advanced validation options.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/validating-data.rst#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ linkml-validate --config person-validation.config.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Constraints in YAML\nDESCRIPTION: Demonstrates the use of any_of constraint to create a union of enums for a vital_status slot. It combines MissingValueEnum and VitalStatusEnum.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/advanced.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n  vital_status:\n    required: true\n    range: Any\n    any_of:\n      - range: MissingValueEnum\n      - range: VitalStatusEnum\nenums:\n  MissingValueEnum:\n    permissible_values:\n      INAPPLICABLE:\n      NOT_COLLECTED:\n      RESTRICTED:\n      OTHER:\n  VitalStatusEnum:\n    permissible_values:\n      LIVING:\n      DEAD:\n      UNDEAD:\n```\n\n----------------------------------------\n\nTITLE: Running ShEx Generation with LinkML CLI\nDESCRIPTION: Command line instruction for generating a ShEx file from a LinkML YAML schema file. The command reads a personinfo.yaml file and outputs ShEx validation shapes to standard output.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/shex.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngen-shex personinfo.yaml > personinfo.shex\n```\n\n----------------------------------------\n\nTITLE: Modeling Class Relationships with Relationship Objects in YAML\nDESCRIPTION: This snippet demonstrates how to model relationships between classes using a separate relationship object that captures the subject, object, and predicate of the relationship.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/modeling.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_prefix: my_schema\n\nclasses:\n  allele:\n  gene:\n  allele gene relation:\n     slots:\n        - subject\n        - object\n        - predicate\n      \nslots:\n  predicate: \n     range: predicate_enum\n  subject:\n     range: allele\n  object:\n     range: gene\n\nenums:\n  predicate_enum:\n    permissible_values:\n      allele_of:\n```\n\n----------------------------------------\n\nTITLE: Validating RDF against ShEx Schema for FriendlyPerson Class\nDESCRIPTION: Validates the generated RDF against the ShEx schema for the FriendlyPerson class using PyShEx.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/examples.ipynb#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nr = evaluate(g, shex,\n             start=\"http://example.org/model/FriendlyPerson\",\n             focus=\"http://example.org/people/42\")\nprint(\"Conforms\" if r[0] else r[1])\n```\n\n----------------------------------------\n\nTITLE: LinkML schema defining inheritance hierarchy\nDESCRIPTION: Example YAML schema showing inheritance in LinkML with NamedThing as parent, HasAliases as a mixin, and Person inheriting from both.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/json-schema.rst#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nNamedThing:\n  slots:\n    - id\n    - name\n\nHasAliases:\n  mixin: true\n  attributes:\n    aliases:\n      multivalued: true\n      \nPerson:\n  is_a: NamedThing\n  mixins:\n    - HasAliases\n  slots:\n    - birth_date\n    - age_in_years\n    - gender\n```\n\n----------------------------------------\n\nTITLE: Validating data against JSON Schema\nDESCRIPTION: Command to validate a YAML data file against a generated JSON Schema using the jsonschema validator that comes bundled with LinkML.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/json-schema.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njsonschema -i data/example_personinfo_data.yaml personinfo.schema.json\n```\n\n----------------------------------------\n\nTITLE: Defining RDF Data Graph in Turtle Format\nDESCRIPTION: This snippet defines a simple RDF data graph containing two person objects grouped into a container object using Turtle syntax.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/using-jsonld.md#2025-04-17_snippet_0\n\nLANGUAGE: turtle\nCODE:\n```\n@prefix schema: <http://schema.org/> .\n@prefix personinfo: <https://w3id.org/linkml/examples/personinfo/> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n<https://orcid.org/1234> a schema:Person ;\n    schema:name \"Clark Kent\" ;\n    schema:telephone \"555-555-5555\" ;\n    personinfo:age 33 .\n\n<https://orcid.org/4567> a schema:Person ;\n    schema:name \"Lois Lane\" ;\n    personinfo:age 34 .\n\n[] a personinfo:Container ;\n    personinfo:persons <https://orcid.org/1234>,\n        <https://orcid.org/4567> .\n```\n\n----------------------------------------\n\nTITLE: Mapping Permissible Values to Ontologies in LinkML YAML\nDESCRIPTION: This snippet shows how to map permissible values to ontology terms using the 'meaning' slot. It includes a prefix declaration for the KIN ontology and annotations for each permissible value.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/enums.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprefixes:\n  kin: http://purl.org/ga4gh/kin.owl#\n  ...\n```\n\nLANGUAGE: yaml\nCODE:\n```\nenums:\n  FamilialRelationshipType:\n    permissible_values:\n      SIBLING OF:\n        description: A family relationship where the two members have a parent on common\n        meaning: kin:KIN_007\n      PARENT OF:\n        description: A family relationship between offspring and their parent\n        meaning: kin:KIN_003\n      CHILD OF:\n        description: inverse of the PARENT_OF relationship\n        meaning: kin:KIN_002\n```\n\n----------------------------------------\n\nTITLE: Defining Maximum Cardinality Slot in LinkML\nDESCRIPTION: This code snippet defines the 'maximum_cardinality' slot in LinkML. It specifies the slot's URI, domain and range, parent relationship, and where it's used. The slot is of type Integer and is used in various LinkML classes.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/maximum_cardinality.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: maximum_cardinality\n\nthe maximum number of entries for a multivalued slot\n\nURI: [linkml:maximum_cardinality](https://w3id.org/linkml/maximum_cardinality)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [Integer](types/Integer.md)\n\n## Parents\n\n *  is_a: [list_value_specification_constant](list_value_specification_constant.md)\n\n## Children\n\n\n## Used by\n\n * [AnonymousSlotExpression](AnonymousSlotExpression.md)\n * [DimensionExpression](DimensionExpression.md)\n * [SlotDefinition](SlotDefinition.md)\n * [SlotExpression](SlotExpression.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | maximum_cardinality cannot be less than minimum_cardinality |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: JSON Schema generated from inheritance example\nDESCRIPTION: JSON Schema output showing how LinkML inheritance is flattened with slots from parent classes and mixins rolled down to child classes.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/json-schema.rst#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"Person\": {\n   \"additionalProperties\": false,\n   \"description\": \"A person (alive, dead, undead, or fictional).\",\n   \"properties\": {\n      \"age_in_years\": {\n         \"type\": \"integer\"\n      },\n      \"aliases\": {\n         \"items\": {\n            \"type\": \"string\"\n         },\n         \"type\": \"array\"\n      },\n      \"birth_date\": {\n         \"type\": \"string\"\n      },\n      \"gender\": {\n         \"$ref\": \"#/definitions/GenderType\"\n      },\n      \"id\": {\n         \"type\": \"string\"\n      },\n      \"name\": {\n         \"type\": \"string\"\n      },\n   },\n   \"required\": [\n      \"id\"\n   ],\n   \"title\": \"Person\",\n   \"type\": \"object\"\n},\n```\n\n----------------------------------------\n\nTITLE: Pattern Constraints in LinkML Schema\nDESCRIPTION: Example of using regular expression patterns to constrain slot values.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/constraints.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  slots:\n     phone:\n       pattern: \"^[\\\\d\\\\(\\\\)\\\\-]+$\"   ## regular expression\n```\n\n----------------------------------------\n\nTITLE: Defining DateOrDatetime Type in LinkML Markdown\nDESCRIPTION: This snippet defines the DateOrDatetime type in LinkML. It specifies that the type can represent either a date or a datetime, provides its URI, and indicates that it's based on the built-in string type with a string representation.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/types/DateOrDatetime.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: date_or_datetime\n\nEither a date or a datetime\n\nURI: [linkml:DateOrDatetime](https://w3id.org/linkml/DateOrDatetime)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Defining JSON-LD Context for Improved Readability\nDESCRIPTION: This snippet provides a JSON-LD context that improves the readability and usability of the JSON-LD document by mapping properties to more idiomatic JSON field names.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/using-jsonld.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"@context\": {\n      \"ORCID\": \"https://orcid.org/\",\n      \"linkml\": \"https://w3id.org/linkml/\",\n      \"personinfo\": \"https://w3id.org/linkml/examples/personinfo/\",\n      \"schema\": \"http://schema.org/\",\n      \"@vocab\": \"https://w3id.org/linkml/examples/personinfo/\",\n      \"persons\": {\n         \"@type\": \"@id\"\n      },\n      \"age\": {\n         \"@type\": \"xsd:integer\"\n      },\n      \"full_name\": {\n         \"@id\": \"schema:name\"\n      },\n      \"type\": \"@type\",\n      \"id\": \"@id\",\n      \"phone\": {\n         \"@id\": \"schema:telephone\"\n      },\n      \"Person\": {\n         \"@id\": \"schema:Person\"\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Data Validation\nDESCRIPTION: Command showing validation of incorrect data structure\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial01.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nlinkml-validate -s personinfo.yaml bad-data.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating Python Classes from Biolink Model\nDESCRIPTION: Converts the YAML-defined Biolink model into Python classes using the PythonGenerator from LinkML.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/examples.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport yaml\nmodel_str = yaml.dump(model)\nprint(PythonGenerator(model_str, gen_slots=False).serialize())\n```\n\n----------------------------------------\n\nTITLE: Generated Python for Inlined List Multivalued Slots - Case 2.3\nDESCRIPTION: Python dataclass generated for case 2.3, showing complex type handling for slots configured with inlined_as_list property, including post-initialization processing.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OptionalMultivaluedInlinedListIdentifiedThreeElementRange(YAMLRoot):\n    \"\"\"\n    2.3(o) Range is an optional identified three element class that is represented as an inlined list\n    \"\"\"\n    ...\n    v1: Optional[Union[Dict[Union[str, IdentifiedThreeElementClassName], Union[dict, IdentifiedThreeElementClass]], List[Union[dict, IdentifiedThreeElementClass]]]] = empty_list()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            self.v1 = []\n        if not isinstance(self.v1, (list, dict)):\n            self.v1 = [self.v1]\n        self._normalize_inlined_slot(slot_name=\"v1\", slot_type=IdentifiedThreeElementClass, key_name=\"name\", inlined_as_list=True, keyed=True)\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Validating Data Against Schema with Slot Usage\nDESCRIPTION: This bash command validates the sample data against the LinkML schema with slot usage customization. It ensures that the data conforms to the defined constraints and relationships.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial07.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nlinkml-validate data.yaml -s slot-usage-example.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Basic LinkML Schema\nDESCRIPTION: Defines a LinkML schema with Thing, Vehicle, Building, and Container classes with their respective attributes and relationships\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/Type-Designators.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n%%yaml model\nid: https://example.org/\nname: example\nprefixes:\n  example: https://example.org/\n  linkml: https://w3id.org/linkml/\ndefault_prefix: example\ndefault_range: string\nimports:\n  - linkml:types\n\nclasses:\n  Thing:\n    attributes:\n      type:\n        designates_type: true\n  Vehicle:\n    is_a: Thing\n    attributes:\n      num_wheels:\n        range: integer\n  Building:\n    is_a: Thing\n    attributes:\n      num_floors:\n        range: integer\n        \n  Container:\n    attributes:\n      things:\n        range: Thing\n        multivalued: true\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Property of a Class\nDESCRIPTION: This snippet shows how to lookup a particular property (in this case, 'is_a') of a specific class in a LinkML schema file using yq.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/yq-for-schemas.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n✗ yq e '.classes.Person.is_a' personinfo.yaml | less\n```\n\n----------------------------------------\n\nTITLE: LinkML Linter Configuration with Custom Rules (YAML)\nDESCRIPTION: Example configuration file for the LinkML linter that enables only specific rules without extending the recommended set.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/linter.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Only the no_empty_title and standard_naming rules will be checked\nrules:\n  no_empty_title:\n    level: error\n  standard_naming:\n    level: error\n```\n\n----------------------------------------\n\nTITLE: Configuring URI Prefixes in LinkML Schema\nDESCRIPTION: Example of a LinkML schema header showing prefix declarations, CURI maps, and imports configuration. Demonstrates how to set up namespace prefixes and default mappings.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/uris-and-mappings.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: https://w3id.org/linkml/examples/personinfo\nname: personinfo\ndefault_curi_maps:\n  - semweb_context\nprefixes:\n  personinfo: https://w3id.org/linkml/examples/personinfo/\n  linkml: https://w3id.org/linkml/\n  schema: http://schema.org/\n  rdfs: http://www.w3.org/2000/01/rdf-schema#\n  prov: http://www.w3.org/ns/prov#\ndefault_prefix: personinfo\n\nemit_prefixes:\n  - rdf\n  - rdfs\n  - xsd\n  - skos\nimports:\n  - linkml:types\n```\n\n----------------------------------------\n\nTITLE: Defining TypeDefinition Class in YAML\nDESCRIPTION: YAML representation of the TypeDefinition class in LinkML, showing its attributes, relationships, and inheritance structure.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/TypeDefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: TypeDefinition\nis_a: Element\nuses_mixin: TypeExpression\ndescription: an element that whose instances are atomic scalar values that can be mapped to primitive types\nuri: https://w3id.org/linkml/TypeDefinition\nattributes:\n  typeof:\n    description: A parent type from which type properties are inherited\n    range: TypeDefinition\n    in_subset:\n      - SpecificationSubset\n      - BasicSubset\n  base:\n    description: python base type in the LinkML runtime that implements this type definition\n    range: string\n    in_subset:\n      - SpecificationSubset\n      - BasicSubset\n  uri:\n    description: The uri that defines the possible values for the type definition\n    range: uriorcurie\n    in_subset:\n      - SpecificationSubset\n      - BasicSubset\n  repr:\n    description: the name of the python object that implements this type definition\n    range: string\n    in_subset:\n      - SpecificationSubset\n      - BasicSubset\n  union_of:\n    description: indicates that the domain element consists exactly of the members of the element in the range\n    range: TypeDefinition\n    multivalued: true\n    in_subset:\n      - SpecificationSubset\n      - OwlProfile\n```\n\n----------------------------------------\n\nTITLE: Defining Class Range Examples in YAML\nDESCRIPTION: YAML definitions for optional and required three-element classes with various configurations of identifiers and keys.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nOptionalThreeElementRange:\n  description: Case 1.1(o) -- single values optional slot - range has no keys or identifiers\n  attributes:\n    v1:\n      range: ThreeElementClass\n\nRequiredThreeElementRange:\n  description: Case 1.1(r) -- single values optional slot - range has no keys or identifiers\n  attributes:\n    v1:\n      range: ThreeElementClass\n      required: true\n\nOptionalIdentifiedThreeElementRange:\n  description: Case 1.2(o) -- single values optional slot - range has an identifier\n  attributes:\n    v1:\n      range: IdentifiedThreeElementClass\n\nRequiredKeyedThreeElementRange:\n  description: Case 1.2(r) -- single values optional slot - range has a key\n```\n\n----------------------------------------\n\nTITLE: Generating Python Class for Inherited Types Usage\nDESCRIPTION: This Python code snippet demonstrates a class using the inherited types, including type checking and coercion for various field configurations.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass InheritedTypes(YAMLRoot):\n    \"\"\"\n    various permutations of a typeof referencing a builtin\n    \"\"\"\n    ...\n\n    mand_InheritedType: Union[int, InheritedType] = None\n    mand_multi_InheritedType: Union[Union[int, InheritedType], List[Union[int, InheritedType]]] = None\n    opt_InheritedType: Optional[Union[int, InheritedType]] = None\n    opt_multi_InheritedType: Optional[Union[Union[int, InheritedType], List[Union[int, InheritedType]]]] = empty_list()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.mand_InheritedType is None:\n            raise ValueError(\"mand_InheritedType must be supplied\")\n        if not isinstance(self.mand_InheritedType, InheritedType):\n            self.mand_InheritedType = InheritedType(self.mand_InheritedType)\n\n        if self.mand_multi_InheritedType is None:\n            raise ValueError(\"mand_multi_InheritedType must be supplied\")\n        elif not isinstance(self.mand_multi_InheritedType, list):\n            self.mand_multi_InheritedType = [self.mand_multi_InheritedType]\n        elif len(self.mand_multi_InheritedType) == 0:\n            raise ValueError(f\"mand_multi_InheritedType must be a non-empty list\")\n        self.mand_multi_InheritedType = [v if isinstance(v, InheritedType) else InheritedType(v) for v in self.mand_multi_InheritedType]\n\n        if self.opt_InheritedType is not None and not isinstance(self.opt_InheritedType, InheritedType):\n            self.opt_InheritedType = InheritedType(self.opt_InheritedType)\n\n        if self.opt_multi_InheritedType is None:\n            self.opt_multi_InheritedType = []\n        if not isinstance(self.opt_multi_InheritedType, list):\n            self.opt_multi_InheritedType = [self.opt_multi_InheritedType]\n        self.opt_multi_InheritedType = [v if isinstance(v, InheritedType) else InheritedType(v) for v in self.opt_multi_InheritedType]\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types in LinkML YAML\nDESCRIPTION: Example showing how to define custom types in LinkML with validation constraints. Demonstrates creating CountType and SymbolType with specific value restrictions and patterns.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/modeling.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntypes:\n  CountType:\n    uri: xsd:integer\n    base: int\n    minimum_value: 0\n    description: An integer that specifies cardinality\n  SymbolType:\n    uri: xsd:string\n    base: str\n    pattern: \"^\\\\w+$\"\n    description: A symbol is a string used as a shorthand identifier that is restricted to a subset of characters\n```\n\n----------------------------------------\n\nTITLE: Extended Schema with Any Of\nDESCRIPTION: Defines an extended LinkML schema that includes any_of relationships and additional vehicle types\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/Type-Designators.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n%%yaml model\nid: https://example.org/\nname: example\nprefixes:\n  example: https://example.org/\n  linkml: https://w3id.org/linkml/\ndefault_prefix: example\nimports:\n  - linkml:types\n\nclasses:\n  Thing:\n    attributes:\n      type:\n        designates_type: true\n        range: string\n  Vehicle:\n    is_a: Thing\n    attributes:\n      num_wheels:\n        range: integer\n  Car:\n    is_a: Vehicle\n    slot_usage:\n      num_wheels:\n        equals_expression: \"2\"\n  Bicycle:\n    is_a: Vehicle\n    slot_usage:\n      num_wheels:\n        equals_expression: \"4\"\n  Building:\n    is_a: Thing\n    attributes:\n      num_floors:\n        range: integer\n        \n  Container:\n    attributes:\n      things:\n        any_of:\n          - range: Vehicle\n          - range: Building\n        multivalued: true\n```\n\n----------------------------------------\n\nTITLE: Generating GraphQL from LinkML Schema using Command Line\nDESCRIPTION: Command to generate GraphQL definitions from a LinkML schema YAML file and output to a GraphQL file.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/graphql.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngen-graphql personinfo.yaml > personinfo.graphql\n```\n\n----------------------------------------\n\nTITLE: Generating ER Diagram Without Attributes\nDESCRIPTION: Command to generate an ER diagram without attributes, showing only the relationships between classes for a big-picture overview.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/erdiagram.rst#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngen-erdiagram personinfo.yaml -c Person --exclude-attributes\n```\n\n----------------------------------------\n\nTITLE: Defining HasAliases Mixin Class in LinkML\nDESCRIPTION: This code snippet defines the HasAliases mixin class using LinkML syntax. It specifies the URI, shows class relationships using a YUML diagram, lists the classes that use this mixin, and defines the 'aliases' attribute.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/HasAliases.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Class: HasAliases\n\nA mixin applied to any class that can have aliases/alternateNames\n\nURI: [personinfo:HasAliases](https://w3id.org/linkml/examples/personinfo/HasAliases)\n\n[![img](https://yuml.me/diagram/nofunky;dir:TB/class/[Place]uses%20-.->[HasAliases&#124;aliases:string%20*],[Person]uses%20-.->[HasAliases],[Organization]uses%20-.->[HasAliases],[Place],[Person],[Organization])](https://yuml.me/diagram/nofunky;dir:TB/class/[Place]uses%20-.->[HasAliases&#124;aliases:string%20*],[Person]uses%20-.->[HasAliases],[Organization]uses%20-.->[HasAliases],[Place],[Person],[Organization])\n\n## Mixin for\n\n * [Organization](Organization.md) (mixin)  - An organization such as a company or university\n * [Person](Person.md) (mixin)  - A person (alive, dead, undead, or fictional).\n * [Place](Place.md) (mixin) \n\n## Referenced by Class\n\n\n## Attributes\n\n\n### Own\n\n * [➞aliases](hasAliases__aliases.md)  <sub>0..*</sub>\n     * Range: [String](types/String.md)\n```\n\n----------------------------------------\n\nTITLE: Common Metadata Properties Markdown Documentation\nDESCRIPTION: Markdown documentation listing common metadata properties that can be mixed into LinkML models, including their descriptions, ranges, and other attributes.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/EnumBinding.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: Importing JSONDumper Class for JSON Serialization in Python\nDESCRIPTION: This snippet shows how to import the JSONDumper class from the linkml_runtime.dumpers module. The JSONDumper is used for serializing in-memory Python objects to JSON format.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/loaders-and-dumpers.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml_runtime.dumpers import JSONDumper\n```\n\n----------------------------------------\n\nTITLE: LinkML Punning Approach with URIorCURIE\nDESCRIPTION: Example showing how to simulate punning in LinkML using URIorCURIE for class references.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/modeling.md#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Author:\n    slots:\n      - id\n      - name\n  Book:\n    slots:\n      - author  # Reference to the \"Author\" class\nslots:\n  author:\n    range: uriorcurie  # This points to the URI of the \"Author\" class\n  id:\n    identifier: true\n  name:\n```\n\n----------------------------------------\n\nTITLE: Python Post-Init Method with Dictionary Conversion\nDESCRIPTION: Example of post-initialization processing in LinkML-generated classes using jsonasobj2 for dictionary conversion.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/port-linkml.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass MedicalEvent(Event):\n    ...\n    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):\n        ...\n        if self.diagnosis is not None and not isinstance(self.diagnosis, DiagnosisConcept):\n            self.diagnosis = DiagnosisConcept(**as_dict(self.diagnosis))\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyedThreeElementClass and IdentifiedThreeElementClass in Python\nDESCRIPTION: Python implementation of the keyed and identified classes defined in YAML. Each class includes validation and type conversion in the __post_init__ method to ensure proper data typing and required fields.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass KeyedThreeElementClassName(extended_str):\n    pass\n\nclass IdentifiedThreeElementClassName(extended_str):\n    pass\n\n@dataclass\nclass KeyedThreeElementClass(YAMLRoot):\n    \"\"\"\n    A keyed class with an additional integer and date\n    \"\"\"\n    ...\n\n    name: Union[str, KeyedThreeElementClassName] = None\n    value: Optional[int] = None\n    modifier: Optional[Union[str, XSDDate]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.name is None:\n            raise ValueError(\"name must be supplied\")\n        if not isinstance(self.name, KeyedThreeElementClassName):\n            self.name = KeyedThreeElementClassName(self.name)\n\n        if self.value is not None and not isinstance(self.value, int):\n            self.value = int(self.value)\n\n        if self.modifier is not None and not isinstance(self.modifier, XSDDate):\n            self.modifier = XSDDate(self.modifier)\n\n        super().__post_init__(**kwargs)\n\n@dataclass\nclass IdentifiedThreeElementClass(YAMLRoot):\n    \"\"\"\n    A identified class with an additional integer and date\n    \"\"\"\n    ...\n\n    name: Union[str, IdentifiedThreeElementClassName] = None\n    value: Optional[int] = None\n    modifier: Optional[Union[str, XSDDate]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.name is None:\n            raise ValueError(\"name must be supplied\")\n        if not isinstance(self.name, IdentifiedThreeElementClassName):\n            self.name = IdentifiedThreeElementClassName(self.name)\n\n        if self.value is not None and not isinstance(self.value, int):\n            self.value = int(self.value)\n\n        if self.modifier is not None and not isinstance(self.modifier, XSDDate):\n            self.modifier = XSDDate(self.modifier)\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Python Class URI Implementation Example\nDESCRIPTION: Example showing how LinkML-generated classes include URI information using rdflib for runtime introspection.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/port-linkml.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Person(NamedThing):\n    \"\"\"\n    A person (alive, dead, undead, or fictional).\n    \"\"\"\n    _inherited_slots: ClassVar[List[str]] = []\n\n    class_class_uri: ClassVar[URIRef] = SCHEMA.Person\n    class_class_curie: ClassVar[str] = \"schema:Person\"\n    class_name: ClassVar[str] = \"Person\"\n    class_model_uri: ClassVar[URIRef] = PERSONINFO.Person\n```\n\n----------------------------------------\n\nTITLE: Generating JSON-LD Context with Flat Prefixes Option\nDESCRIPTION: Command to generate a JSON-LD context with the --flatprefixes flag, which allows for simpler representation of prefixes including those with trailing underscores, though this approach is not recommended.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/jsonld-context.rst#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngen-jsonld-context --flatprefixes personinfo.yaml > personinfo.context.jsonld\n```\n\n----------------------------------------\n\nTITLE: Database Schema Creation and Initialization\nDESCRIPTION: Initializes a fresh SQLite database and creates table schemas\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/SQL-examples.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!test -f tmp/tmp.db && rm tmp/tmp.db\n```\n\nLANGUAGE: python\nCODE:\n```\n!cat tmp/personinfo.ddl.sql | sqlite3 tmp/tmp.db\n```\n\n----------------------------------------\n\nTITLE: Schema Property Definitions in Markdown\nDESCRIPTION: Markdown formatted documentation of schema definition properties including ranges, cardinality and subset membership\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/SchemaDefinition.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Own\n\n * [id](id.md)  <sub>1..1</sub>\n     * Description: The official schema URI\n     * Range: [Uri](types/Uri.md)\n     * in subsets: (SpecificationSubset,MinimalSubset,BasicSubset,OwlProfile)\n```\n\n----------------------------------------\n\nTITLE: Defining Subset Membership in LinkML YAML Schema\nDESCRIPTION: Example showing how to define a slot 'genetically interacts with' and tag it as belonging to the 'translator_minimal' subset. The slot extends from 'interacts with' and specifies gene-to-gene relationships.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/subsets.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  genetically interacts with:\n    is_a: interacts with\n    domain: gene\n    range: gene\n    in_subset:\n      - translator_minimal\n```\n\n----------------------------------------\n\nTITLE: Example Movie Data in YAML\nDESCRIPTION: Sample YAML instance data for a Movie object referenced by the Person instances. This data uses a simple reference approach rather than inlining.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-property-graphs.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- title: Forrest Gump\n  released: 1994\n```\n\n----------------------------------------\n\nTITLE: Generating UML Diagram from LinkML YAML\nDESCRIPTION: This bash command generates a UML diagram representation of the LinkML schema. It helps visualize the structure and relationships defined in the schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial07.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngen-yuml personinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: LinkML Schema Definition with Inheritance\nDESCRIPTION: Example LinkML schema showing inheritance and mixin patterns with NamedThing as parent class and HasAliases as a mixin for Person class\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/protobuf.rst#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nNamedThing:\n  slots:\n    - id\n    - name\n\nHasAliases:\n  mixin: true\n  attributes:\n    aliases:\n      multivalued: true\n      \nPerson:\n  is_a: NamedThing\n  mixins:\n    - HasAliases\n  slots:\n    - birth_date\n    - age_in_years\n    - gender\n```\n\n----------------------------------------\n\nTITLE: Generating Derived LinkML Schema in YAML\nDESCRIPTION: This command uses the gen-linkml tool to create a derived schema and save it as YAML. This is useful for tools that don't implement inheritance logic.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/derived-models.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngen-linkml\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Slot Range Usage in LinkML\nDESCRIPTION: This example shows how the 'range' slot is used in a slot definition to specify the type of the object. It also demonstrates how this implicitly asserts type information for slot values.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/range.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nS1:\n  domain: C1\n  range:  C2\n\nX:\n  S1: Y\n```\n\n----------------------------------------\n\nTITLE: Running LinkML Linter on a Directory of Schema Files (Bash)\nDESCRIPTION: Command to recursively lint a directory of schema files using the LinkML linter.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/linter.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlinkml-lint schemas\n```\n\n----------------------------------------\n\nTITLE: Implementing __post_init__ for List Normalization in Python\nDESCRIPTION: Shows the __post_init__ method implementation for normalizing list inputs, ensuring that single values are converted to lists and handling None values.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndef __post_init__(self, **kwargs: Dict[str, Any]):\n    if self.v1 is None:\n        self.v1 = []\n    if not isinstance(self.v1, (list, dict)):\n        self.v1 = [self.v1]\n```\n\n----------------------------------------\n\nTITLE: Using SKOS Mappings in LinkML\nDESCRIPTION: Shows how to use SKOS predicates for mapping classes to external concepts while maintaining independence.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/uris-and-mappings.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  NamedThing:\n    description: >\n      A generic grouping for any identifiable entity\n    slots:\n      - id\n      - name\n      - description\n      - image\n    close_mappings:\n     - schema:Thing\n```\n\n----------------------------------------\n\nTITLE: Defining String Types with LinkML Schema Constraints\nDESCRIPTION: Demonstrates how to define custom string types with different constraints for name fields and formatted text using LinkML schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/tool-developer-guide.rst#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntypes:\n\n  NameString:\n    typeof: string\n    pattern: \"^[^\\\\n]$\"\n    description: A description that holds a human readable name\n    comments:\n     - This is designed to support different styles of names from\n       multiple languages, but certain characters such as newlines are\n       never in names\n\n  FormattedString:\n    typeof: string\n    description: >\n      A string in which characters such as newlines are\n      permitted and used for formatting\n\nslots:\n  full_name:\n    range: NameString\n  address:\n    range: FormattedString\n```\n\n----------------------------------------\n\nTITLE: Linking Person Class to External Vocabularies in LinkML YAML\nDESCRIPTION: This snippet shows how to link the Person class and its attributes to external vocabularies and ontologies using LinkML. It demonstrates the use of prefixes, slot_uri, and exact_mappings to enhance interoperability.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/why-linkml.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprefixes:\n  schema: http://schema.org/\n  foaf: http://xmlns.com/foaf/0.1/\nclasses:\n  Person:\n    attributes:\n      id:\n        slot_uri: schema:identifier\n      name:\n        slot_uri: schema:name\n      email:\n        slot_uri: schema:email\n        exact_mappings:\n          - foaf:email\n```\n\n----------------------------------------\n\nTITLE: Testing URI-Bound Enumerations\nDESCRIPTION: Python code demonstrating the usage of URI-bound enumerations including accessing meaning values.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/enumerations.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmodule = compile_model(yaml.dump(model3))\ncolorrec = module.FavoriteColor(\"Harold\", module.Colors['2'])\nprint(colorrec)\nprint(str(colorrec.position))\nprint(colorrec.position.meaning)\ncr2 = module.FavoriteColor(\"Donald\", module.Colors['4'])\nprint(cr2.position.meaning)\n```\n\n----------------------------------------\n\nTITLE: Instantiating Person Object in JSON\nDESCRIPTION: Example of a JSON object instantiating a Person class with id, name, and email properties.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/slots.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"PERSON001\",\n  \"name\": \"....\",\n  \"email\": \"....\"\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Example Data for Inlining as a Dictionary in YAML\nDESCRIPTION: This snippet shows an alternative representation when inlining objects as a dictionary, where the id field is included in the nested objects even though it's used as the key.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/inlining.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- id: NCBITaxon:40674\n  name: mammals\n  has_subtypes:\n    NCBITaxon:9443:\n      id: NCBITaxon:9443\n      name: primates\n      has_subtypes:\n        NCBITaxon:9606:\n          id: NCBITaxon:9606\n          name: humans\n        NCBITaxon:9682:\n          ...\n```\n\n----------------------------------------\n\nTITLE: Implementing OptionalKeyedThreeElementRange in Python\nDESCRIPTION: Python implementation of a class with an optional reference to a keyed class. The class handles different input types including None, strings, and class instances, with appropriate type conversion.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OptionalKeyedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Range is a optional class that contains one key and two regular elements\n    \"\"\"\n    ...\n\n    v1: Optional[Union[str, KeyedThreeElementClassName]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is not None and not isinstance(self.v1, KeyedThreeElementClassName):\n            self.v1 = KeyedThreeElementClassName(self.v1)\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Generated Protocol Buffer Definition\nDESCRIPTION: The resulting Protocol Buffer definition showing how inheritance is flattened and all properties are included in the child message definition\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/protobuf.rst#2025-04-17_snippet_2\n\nLANGUAGE: proto\nCODE:\n```\n// A generic grouping for any identifiable entity\nmessage NamedThing\n {\n  id String = 1\n  optional name String = 2\n  optional description String = 3\n  optional image String = 4\n }\n \n// A person (alive, dead, undead, or fictional).\nmessage Person\n {\n  id String = 1\n  optional name String = 2\n  optional description String = 3\n  optional image String = 4\n  optional primaryEmail String = 5\n  optional birthDate String = 6\n  optional ageInYears Integer = 7\n  optional gender GenderType = 8\n  optional currentAddress Address = 9\n  repeated hasEmploymentHistory EmploymentEvent = 10\n  repeated hasFamilialRelationships FamilialRelationship = 11\n  repeated hasMedicalHistory MedicalEvent = 12\n  repeated aliases String = 13\n }\n```\n\n----------------------------------------\n\nTITLE: Comparison Operations in Expression Language\nDESCRIPTION: Examples of comparison operators for evaluating relationships between values\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/expression-language.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx == y\nx < y\nx <= y\nx > y\nx >= y\n```\n\n----------------------------------------\n\nTITLE: Sample Data for Schema with Slot Usage\nDESCRIPTION: This YAML snippet provides sample data that conforms to the schema with slot usage customization. It includes examples of persons with familial and organizational relationships.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial07.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\npersons:\n  - id: ORCID:1234\n    full_name: Superman\n    has_organizational_relationships:\n      - related_to: ROR:1\n        relationship_type: MEMBER_OF\n  - id: ORCID:3000\n    full_name: Jor El\n    has_familial_relationships:\n      - related_to: ORCID:1234\n        relationship_type: PARENT_OF\norganizations:\n  - id: ROR:1\n    full_name: Justice League\n```\n\n----------------------------------------\n\nTITLE: Type Definition: sparqlpath - SPARQL Property Path String Type\nDESCRIPTION: Defines a custom string type for representing SPARQL Property Paths. The type extends the built-in string type and requires values to conform to SPARQL syntax and resolve to valid RDF objects.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/types/Sparqlpath.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: sparqlpath\n\nA string encoding a SPARQL Property Path. The value of the string MUST conform to SPARQL syntax and SHOULD dereference to zero or more valid objects within the current instance document when encoded as RDF.\n\nURI: [linkml:Sparqlpath](https://w3id.org/linkml/Sparqlpath)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Example Person Data in YAML\nDESCRIPTION: Sample YAML instance data for Person objects using the property graph schema. The data shows two persons (an actor and a director) with references to the same movie.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-property-graphs.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Tom Hanks\n  profession: Actor\n  born: 1956\n  acted_in: Forrest Gump\n- name: Robert Zemeckis\n  profession: Director\n  born: 1951\n  directed: Forrest Gump\n```\n\n----------------------------------------\n\nTITLE: Defining exact_cardinality Slot in LinkML\nDESCRIPTION: This markdown snippet defines the 'exact_cardinality' slot in LinkML. It specifies the slot's URI, domain and range, parent slot, and usage in various classes. The slot is used to set the exact number of entries for a multivalued slot.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/exact_cardinality.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: exact_cardinality\n\nthe exact number of entries for a multivalued slot\n\nURI: [linkml:exact_cardinality](https://w3id.org/linkml/exact_cardinality)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [Integer](types/Integer.md)\n\n## Parents\n\n *  is_a: [list_value_specification_constant](list_value_specification_constant.md)\n\n## Children\n\n\n## Used by\n\n * [AnonymousSlotExpression](AnonymousSlotExpression.md)\n * [DimensionExpression](DimensionExpression.md)\n * [SlotDefinition](SlotDefinition.md)\n * [SlotExpression](SlotExpression.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | if exact_cardinality is set, then minimum_cardinalty and maximum_cardinality must be unset or have the same value |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: Defining FamilialRelationshipType Enum in LinkML\nDESCRIPTION: Enumeration specification for familial relationships with semantic mappings. Each value represents a fundamental family relationship type and maps to a famrel URI identifier.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/FamilialRelationshipType.md#2025-04-17_snippet_0\n\nLANGUAGE: linkml\nCODE:\n```\nenum FamilialRelationshipType {\n  SIBLING_OF => famrel:01\n  PARENT_OF => famrel:02\n  CHILD_OF => famrel:01\n}\n```\n\n----------------------------------------\n\nTITLE: Biolink Model Generation Commands\nDESCRIPTION: Bash commands for downloading the Biolink Model and generating Pydantic classes\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/pydantic.rst#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -OJ https://raw.githubusercontent.com/biolink/biolink-model/master/biolink-model.yaml\npython3 -m venv venv\nsource venv/bin/activate\npip install linkml\ngen-pydantic biolink-model.yaml > biolink-model.py\n```\n\n----------------------------------------\n\nTITLE: Listing Generated Project Files\nDESCRIPTION: Command to list the generated project artifacts in the output directory.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial08.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nls personinfo/\n```\n\n----------------------------------------\n\nTITLE: Defining WithLocation Class with in_location Attribute in LinkML\nDESCRIPTION: This code snippet defines the WithLocation class in LinkML schema. It specifies a single attribute 'in_location' of type Place, which is optional (cardinality 0..1).\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/WithLocation.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Attributes\n\n\n### Own\n\n * [in_location](in_location.md)  <sub>0..1</sub>\n     * Range: [Place](Place.md)\n```\n\n----------------------------------------\n\nTITLE: Converting to RDF Format\nDESCRIPTION: Commands to convert data from YAML to RDF/turtle format\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial01.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nlinkml-convert -s personinfo.yaml data.yaml -t ttl\n```\n\nLANGUAGE: bash\nCODE:\n```\nlinkml-convert -s personinfo.yaml data.yaml -o data.ttl\n```\n\n----------------------------------------\n\nTITLE: Hibernate JPA Custom Template for Java Generator\nDESCRIPTION: A Jinja2 template example for generating Java classes with Hibernate JPA annotations instead of the default template. This template includes JPA, Lombok, and Hibernate Search annotations.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/java.rst#2025-04-17_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage {{ doc.package }};\n\nimport java.util.List;\nimport lombok.*;\nimport javax.persistence.*;\nimport org.hibernate.search.engine.backend.types.*;\nimport org.hibernate.envers.Audited;\nimport org.hibernate.search.mapper.pojo.mapping.definition.annotation.*;\n\n\n@Audited\n@Indexed\n@Entity\n@Data @EqualsAndHashCode(onlyExplicitlyIncluded = true, callSuper = true)\npublic class {{ cls.name }} {% if cls.is_a -%} extends {{ cls.is_a }} {%- endif %} {\n{% for f in cls.fields %}\n  private {{f.range}} {{ f.name }};\n{%- endfor %}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining value_presence Slot in LinkML Markdown\nDESCRIPTION: This snippet defines the 'value_presence' slot in LinkML, specifying its URI, domain and range, parent slot, and usage. It also includes a comment explaining the effect of the slot's value.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/value_presence.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: value_presence\n\nif PRESENT then a value must be present (for lists there must be at least one value). If ABSENT then a value must be absent (for lists, must be empty)\n\nURI: [linkml:value_presence](https://w3id.org/linkml/value_presence)\n\n\n## Domain and Range\n\n[SlotDefinition](SlotDefinition.md) &#8594;  <sub>0..1</sub> [presence_enum](presence_enum.md)\n\n## Parents\n\n *  is_a: [list_value_specification_constant](list_value_specification_constant.md)\n\n## Children\n\n\n## Used by\n\n * [AnonymousSlotExpression](AnonymousSlotExpression.md)\n * [SlotDefinition](SlotDefinition.md)\n * [SlotExpression](SlotExpression.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | if set to true this has the same effect as required=true. In contrast, required=false allows a value to be present |\n```\n\n----------------------------------------\n\nTITLE: Defining Person and FriendlyPerson Classes in Python\nDESCRIPTION: This snippet defines two classes, Person and FriendlyPerson, using Python dataclasses. It includes attribute definitions, type hints, and post-initialization logic for data validation.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_notebooks/output/examples.txt#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n@dataclass(repr=False)\nclass Person(YAMLRoot):\n    \"\"\"\n    A person, living or dead\n    \"\"\"\n    _inherited_slots: ClassVar[list[str]] = []\n\n    class_class_uri: ClassVar[URIRef] = SAMP[\"Person\"]\n    class_class_curie: ClassVar[str] = \"samp:Person\"\n    class_name: ClassVar[str] = \"person\"\n    class_model_uri: ClassVar[URIRef] = SAMP.Person\n\n    id: Union[str, PersonId] = None\n    last_name: str = None\n    first_name: Optional[Union[str, list[str]]] = empty_list()\n    age: Optional[int] = None\n    living: Optional[Bool] = None\n    knows: Optional[Union[Union[str, PersonId], list[Union[str, PersonId]]]] = empty_list()\n\n    def __post_init__(self, *_: str, **kwargs: Any):\n        if self._is_empty(self.id):\n            self.MissingRequiredField(\"id\")\n        if not isinstance(self.id, PersonId):\n            self.id = PersonId(self.id)\n\n        if self._is_empty(self.last_name):\n            self.MissingRequiredField(\"last_name\")\n        if not isinstance(self.last_name, str):\n            self.last_name = str(self.last_name)\n\n        if not isinstance(self.first_name, list):\n            self.first_name = [self.first_name] if self.first_name is not None else []\n        self.first_name = [v if isinstance(v, str) else str(v) for v in self.first_name]\n\n        if self.age is not None and not isinstance(self.age, int):\n            self.age = int(self.age)\n\n        if self.living is not None and not isinstance(self.living, Bool):\n            self.living = Bool(self.living)\n\n        if not isinstance(self.knows, list):\n            self.knows = [self.knows] if self.knows is not None else []\n        self.knows = [v if isinstance(v, PersonId) else PersonId(v) for v in self.knows]\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass(repr=False)\nclass FriendlyPerson(Person):\n    \"\"\"\n    Any person that knows someone\n    \"\"\"\n    _inherited_slots: ClassVar[list[str]] = []\n\n    class_class_uri: ClassVar[URIRef] = SAMP[\"FriendlyPerson\"]\n    class_class_curie: ClassVar[str] = \"samp:FriendlyPerson\"\n    class_name: ClassVar[str] = \"friendly_person\"\n    class_model_uri: ClassVar[URIRef] = SAMP.FriendlyPerson\n\n    id: Union[str, FriendlyPersonId] = None\n    last_name: str = None\n    knows: Union[Union[str, PersonId], list[Union[str, PersonId]]] = None\n\n    def __post_init__(self, *_: str, **kwargs: Any):\n        if self._is_empty(self.id):\n            self.MissingRequiredField(\"id\")\n        if not isinstance(self.id, FriendlyPersonId):\n            self.id = FriendlyPersonId(self.id)\n\n        if self._is_empty(self.knows):\n            self.MissingRequiredField(\"knows\")\n        if not isinstance(self.knows, list):\n            self.knows = [self.knows] if self.knows is not None else []\n        self.knows = [v if isinstance(v, PersonId) else PersonId(v) for v in self.knows]\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Generating Pydantic Models\nDESCRIPTION: Creates Pydantic models from the LinkML schema definition using PydanticGenerator\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/Type-Designators.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml.generators.pydanticgen import PydanticGenerator\nimport yaml\n```\n\nLANGUAGE: python\nCODE:\n```\nimport logging\ngen = PydanticGenerator(schema, log_level=logging.ERROR)\n```\n\n----------------------------------------\n\nTITLE: Example Data for Inlining as a Dictionary in YAML\nDESCRIPTION: This snippet demonstrates how data is represented when inlining objects as a dictionary. The has_subtypes attribute contains nested Organism objects keyed by their identifiers.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/inlining.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- id: NCBITaxon:40674\n  name: mammals\n  has_subtypes:\n    NCBITaxon:9443:\n      name: primates\n      has_subtypes:\n        NCBITaxon:9606:\n          name: humans\n        NCBITaxon:9682:\n          ...\n```\n\n----------------------------------------\n\nTITLE: Defining Reference Classes in YAML\nDESCRIPTION: YAML schema for classes that reference the previously defined keyed and identified classes. Defines optional/required and single/multivalued reference relationships.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n  OptionalKeyedThreeElementRange:\n    description: Range is a optional class that contains one key and two regular elements\n    attributes:\n      v1:\n        range: KeyedThreeElementClass\n\n  OptionalKeyedThreeElementRangeList:\n    description: Range is a optional list of a class that contains one key and two regular elements\n    attributes:\n      v1:\n        range: KeyedThreeElementClass\n        multivalued: true\n\n  RequiredIdentifiedThreeElementRange:\n    description: Range is a required class that contains one identifier and two regular elements\n    attributes:\n      v1:\n        range: IdentifiedThreeElementClass\n        required: true\n\n  RequiredIdentifiedThreeElementRangeList:\n    description: Range is a optional list of a class that contains one identifier and two regular elements\n    attributes:\n      v1:\n        range: IdentifiedThreeElementClass\n        multivalued: true\n        required: true\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Multi-Integer in Python\nDESCRIPTION: This snippet shows how to handle an optional list of integers in a Python class, including type checking and coercion.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nif self.opt_multi_integer is None:\n    self.opt_multi_integer = []\nif not isinstance(self.opt_multi_integer, list):\n    self.opt_multi_integer = [self.opt_multi_integer]\nself.opt_multi_integer = [v if isinstance(v, int) else int(v) for v in self.opt_multi_integer]\n```\n\n----------------------------------------\n\nTITLE: Logical Operations in Expression Language\nDESCRIPTION: Examples of logical operators for boolean operations\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/expression-language.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nx and y\nx or y\nnot x\n```\n\n----------------------------------------\n\nTITLE: Complex Expression Examples in Expression Language\nDESCRIPTION: Examples demonstrating combined usage of various language features\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/expression-language.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n1 + 2 * 3\n\"Hello, \" + \"world!\"\nx > 10 and y < 5\nmax(x, y, z)\nperson.name\n\"Positive\" if x > 0 else \"Non-positive\"\n```\n\n----------------------------------------\n\nTITLE: Defining Jsonpointer Type in LinkML YAML\nDESCRIPTION: This snippet defines the 'jsonpointer' type in LinkML. It specifies that the type is a string representation of a JSON Pointer, which must conform to JSON Pointer syntax and should dereference to a valid object within the current instance document when encoded in tree form.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue62/types/Jsonpointer.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Type: jsonpointer\n\nA string encoding a JSON Pointer. The value of the string MUST conform to JSON Point syntax and SHOULD dereference to a valid object within the current instance document when encoded in tree form.\n\nURI: [meta:Jsonpointer](https://w3id.org/linkml/Jsonpointer)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Querying SQLite Database\nDESCRIPTION: Example of querying the SQLite database to retrieve Person records.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial10.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsqlite3 persons.db \"SELECT * FROM Person\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nORCID:1234|Clark Kent|555-555-5555|33|1\nORCID:4567|Lois Lane||34|1\n```\n\n----------------------------------------\n\nTITLE: Defining Annotatable Mixin Class in LinkML YAML\nDESCRIPTION: This snippet defines the Annotatable mixin class in LinkML YAML. It specifies the class URI, its mixins, and the 'annotations' attribute. The class is designed to be used by various other classes that need annotation support.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/Annotatable.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Class: annotatable\n\nmixin for classes that support annotations\n\nURI: [linkml:Annotatable](https://w3id.org/linkml/Annotatable)\n\n## Mixin for\n\n * [Annotation](Annotation.md) (mixin)  - a tag/value pair with the semantics of OWL Annotation\n * [AnonymousExpression](AnonymousExpression.md) (mixin)  - An abstract parent class for any nested expression\n * [ArrayExpression](ArrayExpression.md) (mixin)  - defines the dimensions of an array\n * [ClassRule](ClassRule.md) (mixin)  - A rule that applies to instances of a class\n * [DimensionExpression](DimensionExpression.md) (mixin)  - defines one of the dimensions of an array\n * [Element](Element.md) (mixin)  - A named element in the model\n * [EnumBinding](EnumBinding.md) (mixin)  - A binding of a slot or a class to a permissible value from an enumeration.\n * [ImportExpression](ImportExpression.md) (mixin)  - an expression describing an import\n * [PathExpression](PathExpression.md) (mixin)  - An expression that describes an abstract path from an object to another through a sequence of slot lookups\n * [PatternExpression](PatternExpression.md) (mixin)  - a regular expression pattern used to evaluate conformance of a string\n * [PermissibleValue](PermissibleValue.md) (mixin)  - a permissible value, accompanied by intended text and an optional mapping to a concept URI\n * [StructuredAlias](StructuredAlias.md) (mixin)  - object that contains meta data about a synonym or alias including where it came from (source) and its scope (narrow, broad, etc.)\n * [TypeMapping](TypeMapping.md) (mixin)  - Represents how a slot or type can be serialized to a format.\n * [UniqueKey](UniqueKey.md) (mixin)  - a collection of slots whose values uniquely identify an instance of a class\n\n## Referenced by Class\n\n\n## Attributes\n\n\n### Own\n\n * [annotations](annotations.md)  <sub>0..*</sub>\n     * Description: a collection of tag/text tuples with the semantics of OWL Annotation\n     * Range: [Annotation](Annotation.md)\n```\n\n----------------------------------------\n\nTITLE: Simple Coupled Scalar Pattern in LinkML\nDESCRIPTION: Pattern for recording measurement ranges with min/max values, maintaining fixed units.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-measurements.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Subject:\n    attributes:\n      id:\n        identifier: true\n      min_mass_in_kg:\n        group: mass\n        range: decimal\n        unit:\n          ucum_code: kg\n          has_quantity_kind: PATO:0000125 ## mass\n      max_mass_in_kg:\n        group: mass\n        range: decimal\n        unit:\n          ucum_code: kg\n          has_quantity_kind: PATO:0000125 ## mass\n      height_in_m:\n        range: decimal\n        unit:\n          ucum_code: m\n          has_quantity_kind: PATO:0000119 ## height\n      min_bmi:\n        group: bmi\n        range: decimal\n        unit:\n          ucum_code: kg/m2\n          has_quantity_kind: NCIT:C16358\n      max_bmi:\n        group: bmi\n        range: decimal\n        unit:\n          ucum_code: kg/m2\n          has_quantity_kind: NCIT:C16358\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Output for Person Class with Inheritance\nDESCRIPTION: This JSON snippet shows the generated JSON Schema for the Person class, demonstrating how inherited and mixed-in properties are included in the final schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial07.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Person\": {\n    \"additionalProperties\": false,\n    \"description\": \"\",\n    \"properties\": {\n      \"age\": {\n        \"type\": \"integer\"\n      },\n      \"aliases\": {\n        \"items\": {\n          \"type\": \"string\"\n        },\n        \"type\": \"array\"\n      },\n      \"full_name\": {\n        \"description\": \"name of the person\",\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"phone\": {\n        \"pattern\": \"^[\\\\d\\\\(\\\\)\\\\-]+$\",\n        \"type\": \"string\"\n      }\n    },\n    \"required\": [\n      \"id\",\n      \"full_name\"\n    ],\n    \"title\": \"Person\",\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Identifier Slot in YAML\nDESCRIPTION: Example of defining an identifier slot in LinkML schema using YAML.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/slots.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n  id:\n    identifier: true\n```\n\n----------------------------------------\n\nTITLE: Defining Inherited Types in YAML\nDESCRIPTION: This YAML snippet defines three inherited types: InheritedType from integer, InheritedType2 from uriorcurie, and InheritedType3 from InheritedType2.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntypes:\n  InheritedType:\n    typeof: integer\n\n  InheritedType2:\n    typeof: uriorcurie\n\n  InheritedType3:\n    typeof: InheritedType2\n```\n\n----------------------------------------\n\nTITLE: Defining Date Type in LinkML YAML\nDESCRIPTION: This YAML snippet defines a date type and a class with various date field configurations in LinkML.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ntypes:\n  date:\n    uri: xsd:date\n    base: XSDDate\n    repr: str\n    description: a date (year, month and day) in an idealized calendar\n\nclasses:\n  Dates:\n    description: various permutations of the date type\n    attributes:\n      opt_date:\n        range: date\n      mand_date:\n        range: date\n        required: true\n      opt_multi_date:\n        range: date\n        multivalued: true\n      mand_multi_date:\n        range: date\n        multivalued: true\n        required: true\n```\n\n----------------------------------------\n\nTITLE: Local File Imports in LinkML\nDESCRIPTION: Shows how to import schema files using relative file paths. The .yaml suffix is automatically added to the specified paths.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/imports.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n  - core\n  - ../enums/my-enums\n```\n\n----------------------------------------\n\nTITLE: YAML Representation of Array Data with Metadata\nDESCRIPTION: Demonstrates how to represent array data in YAML with metadata about dimensions, variables, and axes, similar to NetCDF format.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/multidimensional-arrays.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndimensions:\n  x: 4\n  y: 4\n  time:  ## unlimited\nvariables:\n  x: float\n  y: float\n  time: float\n  value: float\naxes:\n  x: [10, 20, 30, 40]\n  y: [110, 120, 130, 140]\n  time: [31, 59, 90]\nvalues:\n  [[[111,211,311,411],...],....,[...,[143,243,343,443]]]\n```\n\n----------------------------------------\n\nTITLE: Converting RDF to JSON-LD Format\nDESCRIPTION: This snippet shows the JSON-LD representation of the RDF data graph, which includes the @graph and @context sections.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/using-jsonld.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@graph\" : [ {\n    \"@id\" : \"_:b0\",\n    \"@type\" : \"personinfo:Container\",\n    \"persons\" : [ \"https://orcid.org/4567\", \"https://orcid.org/1234\" ]\n  }, {\n    \"@id\" : \"https://orcid.org/1234\",\n    \"@type\" : \"schema:Person\",\n    \"name\" : \"Clark Kent\",\n    \"telephone\" : \"555-555-5555\",\n    \"personinfo:age\" : 33\n  }, {\n    \"@id\" : \"https://orcid.org/4567\",\n    \"@type\" : \"schema:Person\",\n    \"name\" : \"Lois Lane\",\n    \"personinfo:age\" : 34\n  } ],\n  \"@context\" : {\n    \"age\" : {\n      \"@id\" : \"https://w3id.org/linkml/examples/personinfo/age\",\n      \"@type\" : \"http://www.w3.org/2001/XMLSchema#integer\"\n    },\n    \"telephone\" : {\n      \"@id\" : \"http://schema.org/telephone\"\n    },\n    \"name\" : {\n      \"@id\" : \"http://schema.org/name\"\n    },\n    \"persons\" : {\n      \"@id\" : \"https://w3id.org/linkml/examples/personinfo/persons\",\n      \"@type\" : \"@id\"\n    },\n    \"schema\" : \"http://schema.org/\",\n    \"xsd\" : \"http://www.w3.org/2001/XMLSchema#\",\n    \"personinfo\" : \"https://w3id.org/linkml/examples/personinfo/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: LinkML Enum URI Slot Properties\nDESCRIPTION: Defines the domain, range, parents, children, and usage properties of the enum_uri slot. The slot allows specifying URIs from any namespace that provide semantic interpretation for enum elements.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/enum_uri.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: enum_uri\n\nURI of the enum that provides a semantic interpretation of the element in a linked data context. The URI may come from any namespace and may be shared between schemas\n\nURI: [linkml:enum_uri](https://w3id.org/linkml/enum_uri)\n\n\n## Domain and Range\n\n[EnumDefinition](EnumDefinition.md) &#8594;  <sub>0..1</sub> [Uriorcurie](types/Uriorcurie.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [EnumDefinition](EnumDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Aliases:** | | public ID |\n| **In Subsets:** | | SpecificationSubset |\n|  | | BasicSubset |\n```\n\n----------------------------------------\n\nTITLE: Defining PersonInfo Schema Metadata in YAML\nDESCRIPTION: Defines the metadata for the personinfo schema, including the metamodel version and a brief description of its purpose.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/personinfo.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# personinfo\n\n**metamodel version:** 1.7.0\n\n**version:** None\n\nInformation about people, based on [schema.org](http://schema.org)\n```\n\n----------------------------------------\n\nTITLE: Person ER Diagram Without Attributes in Mermaid Syntax\nDESCRIPTION: Example mermaid syntax for an ER diagram showing Person and related classes without attributes, focusing only on the relationships.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/erdiagram.rst#2025-04-17_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\nPerson {\n\n}\nMedicalEvent {\n\n}\nProcedureConcept {\n\n}\nDiagnosisConcept {\n\n}\nFamilialRelationship {\n\n}\nEmploymentEvent {\n\n}\nAddress {\n\n}\n\nPerson ||--|o Address : \"current_address\"\nPerson ||--}o EmploymentEvent : \"has_employment_history\"\nPerson ||--}o FamilialRelationship : \"has_familial_relationships\"\nPerson ||--}o MedicalEvent : \"has_medical_history\"\nMedicalEvent ||--|o Place : \"in_location\"\nMedicalEvent ||--|o DiagnosisConcept : \"diagnosis\"\nMedicalEvent ||--|o ProcedureConcept : \"procedure\"\nFamilialRelationship ||--|| Person : \"related_to\"\nEmploymentEvent ||--|o Organization : \"employed_at\"\n```\n\n----------------------------------------\n\nTITLE: Running LinkML SQL Database Import with Extended CSV Field Size\nDESCRIPTION: Command to import CSV data into SQL database with increased field size limit to handle large column values like DNA sequences or base64 image data.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/tools.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nlinkml-sqldb --csv-field-size-limit 250000 dump  -s my-schema.yaml my-data.tsv -D my.db\n```\n\n----------------------------------------\n\nTITLE: Defining 'all_members' Slot in LinkML\nDESCRIPTION: This markdown snippet defines the 'all_members' slot in LinkML. It specifies the URI, domain and range, parent slot, and usage information. The slot is used to indicate that a value is multivalued with all members satisfying a condition.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/all_members.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: all_members\n\nthe value of the slot is multivalued with all members satisfying the condition\n\nURI: [linkml:all_members](https://w3id.org/linkml/all_members)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [AnonymousSlotExpression](AnonymousSlotExpression.md)\n\n## Parents\n\n *  is_a: [list_value_specification_constant](list_value_specification_constant.md)\n\n## Children\n\n\n## Used by\n\n * [AnonymousSlotExpression](AnonymousSlotExpression.md)\n * [SlotDefinition](SlotDefinition.md)\n * [SlotExpression](SlotExpression.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: Example Python for OptionalMultivaluedInlinedListIdentifiedThreeElementRange\nDESCRIPTION: Python example showing how to instantiate the OptionalMultivaluedInlinedListIdentifiedThreeElementRange class with a dictionary of elements.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nktec_examples = OptionalMultivaluedInlinedListIdentifiedThreeElementRange(\n    { \n        element1: {value: 17, modifier: \"2012-03-11\"},\n        KeyedThreeElementClassKey('element2'): {},\n        element3: {name: 'element3', value: 42}\n    }   \n)  \n```\n\n----------------------------------------\n\nTITLE: Pydantic Model Generation\nDESCRIPTION: Creates Pydantic-compatible random person generator function\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/SQL-examples.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef random_person_pydantic() -> personinfo.Person:\n    global last_id\n    last_id += 1\n    pid = f\"P{last_id}\"\n    person = personinfo.Person(id=pid, name=names.get_full_name(), age_in_years=random.randint(30,40))\n    for n in range(0, random.randint(0, 3)):\n        rel = personinfo.FamilialRelationship(related_to=f\"P{last_id+n}\", type=\"SIBLING_OF\")\n        relationships = person.has_familial_relationships\n        if relationships:\n            relationships.append(rel)\n        else:\n            person.has_familial_relationships = [rel]\n    return person\n```\n\n----------------------------------------\n\nTITLE: Annotating String Types with DASH Vocabulary\nDESCRIPTION: Shows how to use DASH annotations to specify UI behavior for different string types in LinkML schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/tool-developer-guide.rst#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntypes:\n\n  NameString:\n    typeof: string\n    pattern: \"^[^\\\\n]$\"\n    description: ...\n    annotations:\n      dash.singleLine: true\n\n  FormattedString:\n    typeof: string\n    description: ...\n    annotations:\n      dash.singleLine: false\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Definition in LinkML\nDESCRIPTION: Defines a boolean data type that represents binary true/false values. Maps to the built-in Bool type and has an exact mapping to schema:Boolean.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue62/types/Boolean.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: boolean\n\nA binary (true or false) value\n\nURI: [meta:Boolean](https://w3id.org/linkml/Boolean)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **Bool** |\n| Representation | | bool |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Boolean |\n```\n\n----------------------------------------\n\nTITLE: Non-inlined References in Generated Python Code\nDESCRIPTION: Example of generated Python code for non-inlined references to objects with identifiers.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass OrganizationId(NamedThingId):\n\n...\n\n@dataclass\nclass EmploymentEvent(Event):\n\n    employed_at: Optional[Union[str, OrganizationId]] = None\n```\n\n----------------------------------------\n\nTITLE: Generating UML Diagram for Biolink Model\nDESCRIPTION: Creates a UML diagram representation of the Biolink model using the YumlGenerator from LinkML.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/examples.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndisplay(HTML(f'<img src=\"{YumlGenerator(model_str).serialize()}\"/>'))\n```\n\n----------------------------------------\n\nTITLE: RDF-star Example for Edge Properties\nDESCRIPTION: Example of using RDF-star annotation syntax to represent properties on edges in a graph. This shows how to model the character/role that an actor plays in a movie as a property of the acted_in relationship.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-property-graphs.md#2025-04-17_snippet_5\n\nLANGUAGE: turtle\nCODE:\n```\n:Tom_Hanks :acted_in :Forrest_Gump   {| :role \"Forrest Gump\" |} .\n:Robert_Zemeckis :directed :Forrest_Gump .\n```\n\n----------------------------------------\n\nTITLE: Defining 'source' Slot in LinkML Markdown\nDESCRIPTION: This markdown snippet defines the 'source' slot in LinkML. It specifies the slot's URI, domain and range, usage context, and additional properties like aliases and mappings.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/source.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: source\n\nA related resource from which the element is derived.\n\nURI: [linkml:source](https://w3id.org/linkml/source)\n\n\n## Domain and Range\n\n[Element](Element.md) &#8594;  <sub>0..1</sub> [Uriorcurie](types/Uriorcurie.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [AnonymousClassExpression](AnonymousClassExpression.md)\n * [AnonymousExpression](AnonymousExpression.md)\n * [AnonymousSlotExpression](AnonymousSlotExpression.md)\n * [ArrayExpression](ArrayExpression.md)\n * [ClassDefinition](ClassDefinition.md)\n * [ClassRule](ClassRule.md)\n * [CommonMetadata](CommonMetadata.md)\n * [Definition](Definition.md)\n * [DimensionExpression](DimensionExpression.md)\n * [Element](Element.md)\n * [EnumBinding](EnumBinding.md)\n * [EnumDefinition](EnumDefinition.md)\n * [ImportExpression](ImportExpression.md)\n * [PathExpression](PathExpression.md)\n * [PatternExpression](PatternExpression.md)\n * [PermissibleValue](PermissibleValue.md)\n * [SchemaDefinition](SchemaDefinition.md)\n * [SlotDefinition](SlotDefinition.md)\n * [StructuredAlias](StructuredAlias.md)\n * [SubsetDefinition](SubsetDefinition.md)\n * [TypeDefinition](TypeDefinition.md)\n * [TypeMapping](TypeMapping.md)\n * [UniqueKey](UniqueKey.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Aliases:** | | origin |\n|  | | derived from |\n| **Mappings:** | | dcterms:source |\n| **Comments:** | | The described resource may be derived from the related resource in whole or in part |\n| **In Subsets:** | | BasicSubset |\n| **Close Mappings:** | | prov:wasDerivedFrom |\n|  | | schema:isBasedOn |\n```\n\n----------------------------------------\n\nTITLE: Invalid Data Instance (YAML)\nDESCRIPTION: This YAML snippet shows an example of invalid data that doesn't conform to the schema constraints, including an invalid phone number and a missing required field.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial03.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npersons:\n  - id: ORCID:1234\n    full_name: Clark Kent\n    age: 90\n    phone: 1-800-kryptonite\n  - id: ORCID:5678\n    age: 33\n```\n\n----------------------------------------\n\nTITLE: Defining birth_date Slot Properties in LinkML Markdown\nDESCRIPTION: Defines the birth_date slot with a range of String type (0..1 cardinality) that is used by the Person class. Includes schema.org mapping to birthDate property.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/birth_date.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: birth_date\n\nURI: [personinfo:birth_date](https://w3id.org/linkml/examples/personinfo/birth_date)\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n## Children\n\n## Used by\n\n * [Person](Person.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | schema:birthDate |\n```\n\n----------------------------------------\n\nTITLE: Generated ShEx Schema\nDESCRIPTION: Shape Expressions (ShEx) schema generated from the semantic schema for RDF validation.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial04.md#2025-04-17_snippet_5\n\nLANGUAGE: shex\nCODE:\n```\nBASE <https://w3id.org/linkml/examples/personinfo/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX linkml: <https://w3id.org/linkml/>\nPREFIX schema: <http://schema.org/>\n\n\nlinkml:String xsd:string\n\nlinkml:Integer xsd:integer\n\nlinkml:Boolean xsd:boolean\n\nlinkml:Float xsd:float\n\nlinkml:Double xsd:double\n\nlinkml:Decimal xsd:decimal\n\nlinkml:Time xsd:dateTime\n\nlinkml:Date xsd:date\n\nlinkml:Datetime xsd:dateTime\n\nlinkml:Uriorcurie IRI\n\nlinkml:Uri IRI\n\nlinkml:Ncname xsd:string\n\nlinkml:Objectidentifier IRI\n\nlinkml:Nodeidentifier NONLITERAL\n\n<Container> CLOSED {\n    (  $<Container_tes> <persons> @<Person> * ;\n       rdf:type [ <Container> ] ?\n    )\n}\n\n<Person> CLOSED {\n    (  $<Person_tes> (  schema:name @linkml:String ;\n          <aliases> @linkml:String * ;\n          schema:telephone @linkml:String ? ;\n          <age> @linkml:Integer ?\n       ) ;\n       rdf:type [ schema:Person ]\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Prefix Map using gen-prefix-map\nDESCRIPTION: The recommended alternative to using flatprefixes with JSON-LD context. This command generates a dedicated prefix map file from a LinkML model.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/jsonld-context.rst#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngen-prefix-map --flatprefixes personinfo.yaml > personinfo.prefixmap.json\n```\n\n----------------------------------------\n\nTITLE: Rendering LinkML CLI Documentation with Sphinx\nDESCRIPTION: A reStructuredText directive for Sphinx that renders documentation for the LinkML CLI. It uses the 'click' directive to generate documentation from the main LinkML CLI entry point.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/cli/linkml.md#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. click:: linkml.cli.main:linkml\n    :prog: linkml\n    :nested: short\n```\n\n----------------------------------------\n\nTITLE: Defining NodeIdentifier Type in LinkML YAML\nDESCRIPTION: YAML-like definition of the NodeIdentifier type in LinkML. It specifies the type's URI, root type (builtin NodeIdentifier), and string representation.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue62/types/Nodeidentifier.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Type: nodeidentifier\n\nURI: [meta:Nodeidentifier](https://w3id.org/linkml/Nodeidentifier)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **NodeIdentifier** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Validating NDArray with Incorrect Shape\nDESCRIPTION: This snippet shows the validation error when trying to create an NDArray with an incorrect shape.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/arrays.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    MyClass(data=np.ones((1,)))\nexcept Exception as e:\n    console.print(e)\n```\n\n----------------------------------------\n\nTITLE: Executing LinkML SPARQL Validator CLI\nDESCRIPTION: Command to run the LinkML SPARQL validator CLI tool for validating RDF data using generated SPARQL queries. This tool allows for validation of RDF data in files or triplestores using constraints derived from LinkML schemas.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/validating-data.rst#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n.. click:: linkml.validators.sparqlvalidator:cli\n    :prog: linkml-sparql-validate\n    :nested: full\n```\n\n----------------------------------------\n\nTITLE: Unusual Enumeration Patterns Model\nDESCRIPTION: YAML definition showing non-standard enumeration values including numbers, reserved words, and special characters.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/enumerations.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nid: http://example.org/test/simple\nname: simple\ndescription: Enumeration with some non-std values\n\nprefixes:\n  linkml: https://w3id.org/linkml/\n  play: http://example.org/test/play/\n\ndefault_range: string\ndefault_prefix: play\n\nimports:\n  - linkml:types\n\nclasses:\n    Sample:\n        attributes:\n            key:\n                range: string\n                identifier: true\n            enumentry:\n                range: Unusual enum patterns\n                multivalued: true\n\nenums:\n  Unusual enum patterns:\n    description: Very odd enumeration\n    permissible_values:\n      M: Normal selection\n      1: Numeric selection\n      def: Python reserved word\n      \"embedded space\": Embedded space\n      \"% ! -- whoo\": Really weird stuff\n```\n\n----------------------------------------\n\nTITLE: Defining Datetime Type in LinkML Markdown\nDESCRIPTION: This snippet defines the datetime type in LinkML, specifying its URI as 'https://w3id.org/linkml/Datetime'. It uses XSDDateTime as the root type and represents it as a string. The type is mapped exactly to schema:DateTime.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/types/Datetime.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: datetime\n\nThe combination of a date and time\n\nURI: [linkml:Datetime](https://w3id.org/linkml/Datetime)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **XSDDateTime** |\n| Representation | | str |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:DateTime |\n```\n\n----------------------------------------\n\nTITLE: Defining 'recommended' Slot in LinkML\nDESCRIPTION: This snippet defines the 'recommended' slot in LinkML. It specifies the domain as SlotDefinition, the range as Boolean, and lists the classes that use this slot. It also includes additional properties and comments explaining the slot's purpose and usage.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/recommended.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: recommended\n\ntrue means that the slot should be present in instances of the class definition, but this is not required\n\nURI: [linkml:recommended](https://w3id.org/linkml/recommended)\n\n\n## Domain and Range\n\n[SlotDefinition](SlotDefinition.md) &#8594;  <sub>0..1</sub> [Boolean](types/Boolean.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [AnonymousSlotExpression](AnonymousSlotExpression.md)\n * [SlotDefinition](SlotDefinition.md)\n * [SlotExpression](SlotExpression.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | This is to be used where not all data is expected to conform to having a required field |\n|  | | If a slot is recommended, and it is not populated, applications must not treat this as an error. Applications may use this to inform the user of missing data |\n| **In Subsets:** | | SpecificationSubset |\n|  | | BasicSubset |\n| **See also:** | | [https://github.com/linkml/linkml/issues/177](https://github.com/linkml/linkml/issues/177) |\n```\n\n----------------------------------------\n\nTITLE: Generated Python Class for LinkML Types\nDESCRIPTION: Example of a generated Python class for a LinkML integer type definition.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Integer(int):\n    \"\"\" An integer \"\"\"\n    type_class_uri = XSD.integer\n    type_class_curie = \"xsd:integer\"\n    type_name = \"integer\"\n    type_model_uri = METATYPE.Integer\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of Array Data in Narrow Format\nDESCRIPTION: Shows how array data can be represented in JSON using a narrow format where each element is an object containing coordinates and a value.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/multidimensional-arrays.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"x\":1,\n    \"y\":1,\n    \"time\":1,\n    \"value\":111,\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Python Classes for Single-Valued Slots in LinkML\nDESCRIPTION: This code snippet demonstrates the generation of Python classes for various configurations of single-valued slots in LinkML models. It covers optional and required slots, with different range types and inlining options.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OptionalThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 1.1(o) -- single values optional slot - range has no keys or identifiers\n    \"\"\"\n    ...\n    v1: Optional[Union[dict, ThreeElementClass]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is not None and not isinstance(self.v1, ThreeElementClass):\n            self.v1 = ThreeElementClass(**self.v1)\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass RequiredThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 1.1(r) -- single values optional slot - range has no keys or identifiers\n    \"\"\"\n    ...\n    v1: Union[dict, ThreeElementClass] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        if not isinstance(self.v1, ThreeElementClass):\n            self.v1 = ThreeElementClass(**self.v1)\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass OptionalIdentifiedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 1.2(o) -- single values optional slot - range has an identifier\n    \"\"\"\n    ...\n    v1: Optional[Union[str, IdentifiedThreeElementClassName]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is not None and not isinstance(self.v1, IdentifiedThreeElementClassName):\n            self.v1 = IdentifiedThreeElementClassName(self.v1)\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass RequiredKeyedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 1.2(r) -- single values optional slot - range has a key\n    \"\"\"\n    ...\n    v1: Union[str, KeyedThreeElementClassName] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        if not isinstance(self.v1, KeyedThreeElementClassName):\n            self.v1 = KeyedThreeElementClassName(self.v1)\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass OptionalInlinedKeyedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 1.3(o) -- single values optional slot - range has an identifier\n    \"\"\"\n    ...\n    v1: Optional[Union[dict, KeyedThreeElementClass]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is not None and not isinstance(self.v1, KeyedThreeElementClass):\n            self.v1 = KeyedThreeElementClass(self.v1)\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass RequiredInlinedIdentifiedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 1.3(r) -- single values optional slot - range has a key\n    \"\"\"\n    ...\n    v1: Union[dict, IdentifiedThreeElementClass] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        if not isinstance(self.v1, IdentifiedThreeElementClass):\n            self.v1 = IdentifiedThreeElementClass(self.v1)\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass OptionalInlinedAsListKeyedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 1.4(o) -- single values optional slot - range has an identifier\n    \"\"\"\n    ...\n    v1: Optional[Union[dict, KeyedThreeElementClass]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is not None and not isinstance(self.v1, KeyedThreeElementClass):\n            self.v1 = KeyedThreeElementClass(self.v1)\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass RequiredInlinedAsListIdentifiedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 1.4(r) -- single values optional slot - range has a key\n    \"\"\"\n    ...\n    v1: Union[dict, IdentifiedThreeElementClass] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        if not isinstance(self.v1, IdentifiedThreeElementClass):\n            self.v1 = IdentifiedThreeElementClass(self.v1)\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Introspecting Generated Pydantic Models in Python\nDESCRIPTION: This Python code demonstrates how to dynamically introspect the generated Pydantic models and print their JSON schema representation.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/generate-ai-prompts.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom personinfo import Person\nimport json\nprint(Person.schema_json(indent=2))\n```\n\n----------------------------------------\n\nTITLE: Defining UniqueKey Class Structure in YAML\nDESCRIPTION: YAML representation of the UniqueKey class structure, showing its attributes, relationships, and inherited properties from mixins.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/UniqueKey.md#2025-04-17_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nunique_key_name:\n  description: name of the unique key\n  range: string\n  in_subset:\n    - SpecificationSubset\n    - BasicSubset\n    - RelationalModelProfile\n\nunique_key_slots:\n  description: list of slot names that form a key. The tuple formed from the values of all these slots should be unique.\n  range: SlotDefinition\n  multivalued: true\n  in_subset:\n    - SpecificationSubset\n    - BasicSubset\n    - RelationalModelProfile\n\nconsider_nulls_inequal:\n  description: By default, None values are considered equal for the purposes of comparisons in determining uniqueness. Set this to true to treat missing values as per ANSI-SQL NULLs, i.e NULL=NULL is always False.\n  range: boolean\n```\n\n----------------------------------------\n\nTITLE: Data Population and Object Creation\nDESCRIPTION: Creates and persists Person objects with relationships in the database\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/SQL-examples.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\np = Person(id=\"P1\", name=\"Rosario\", age_in_years=33)\nsession.add(p)\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Generated Pydantic Model for NDArray (Numpydantic)\nDESCRIPTION: This snippet shows the generated Pydantic model for the LinkML NDArray specification, using Numpydantic for array representation.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/arrays.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom pydantic import BaseModel, Field\nfrom numpydantic import NDArray, Shape\n\n\nclass MyClass(BaseModel):\n    data: NDArray[Shape[\"* x, * y, * z, * w, * v\"], int] = Field(...)\n```\n\n----------------------------------------\n\nTITLE: Defining Aliases in LinkML Schema\nDESCRIPTION: Shows how to define alternative names for classes or slots using the aliases slot to enhance search and findability.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/metadata.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nPerson:\n  aliases:\n    - human being\n    - individual\n```\n\n----------------------------------------\n\nTITLE: Importing External LinkML Types Schema\nDESCRIPTION: Demonstrates how to import the core LinkML types schema using CURIE notation with prefix declarations.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/imports.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprefixes:\n  linkml: https://w3id.org/linkml/\n  ...: ...\n\nimports:\n  - linkml:types\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Class in LinkML\nDESCRIPTION: This snippet defines the Organization class using LinkML syntax. It specifies the class's URI, parent class, mixin, referenced classes, and attributes including both its own and inherited ones.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/Organization.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Class: Organization\n\nAn organization such as a company or university\n\nURI: [personinfo:Organization](https://w3id.org/linkml/examples/personinfo/Organization)\n\n## Parents\n\n *  is_a: [NamedThing](NamedThing.md) - A generic grouping for any identifiable entity\n\n## Uses Mixin\n\n *  mixin: [HasAliases](HasAliases.md) - A mixin applied to any class that can have aliases/alternateNames\n\n## Referenced by Class\n\n *  **None** *[employed_at](employed_at.md)*  <sub>0..1</sub>  **[Organization](Organization.md)**\n *  **None** *[organizations](organizations.md)*  <sub>0..*</sub>  **[Organization](Organization.md)**\n\n## Attributes\n\n### Own\n\n * [mission_statement](mission_statement.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n * [founding_date](founding_date.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n * [founding_location](founding_location.md)  <sub>0..1</sub>\n     * Range: [Place](Place.md)\n\n### Inherited from NamedThing:\n\n * [id](id.md)  <sub>1..1</sub>\n     * Range: [String](types/String.md)\n * [name](name.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n * [description](description.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n * [image](image.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n\n### Mixed in from HasAliases:\n\n * [➞aliases](hasAliases__aliases.md)  <sub>0..*</sub>\n     * Range: [String](types/String.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | schema:Organization\n```\n\n----------------------------------------\n\nTITLE: JSON Schema representation of email pattern\nDESCRIPTION: JSON Schema snippet showing how a LinkML pattern constraint for email validation is translated to a JSON Schema pattern.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/json-schema.rst#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"primary_email\": {\n   \"pattern\": \"^\\\\S+@[\\\\S+\\\\.]+\\\\S+\",\n   \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Accessing Array Elements in Narrow Table Representation\nDESCRIPTION: Demonstrates how to access specific array elements using SQL when data is stored in a narrow table format with individual coordinates as columns.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/multidimensional-arrays.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT value FROM measurement WHERE x=2 and y=3 and time=1\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkML Lint CLI Documentation with Sphinx\nDESCRIPTION: RST directive for configuring the documentation of the linkml lint CLI command using Sphinx and Click. The directive specifies the command path and nesting style.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/cli/lint.md#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. click:: linkml.cli.main:linkml_lint\n    :prog: linkml lint\n    :nested: short\n```\n\n----------------------------------------\n\nTITLE: Defining Required Slot in LinkML Markdown\nDESCRIPTION: This snippet defines the 'required' slot in LinkML using markdown syntax. It specifies the URI, domain and range, parent and child relationships, usage contexts, and additional properties of the slot.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/required.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: required\n\ntrue means that the slot must be present in instances of the class definition\n\nURI: [linkml:required](https://w3id.org/linkml/required)\n\n\n## Domain and Range\n\n[SlotDefinition](SlotDefinition.md) &#8594;  <sub>0..1</sub> [Boolean](types/Boolean.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [AnonymousSlotExpression](AnonymousSlotExpression.md)\n * [SlotDefinition](SlotDefinition.md)\n * [SlotExpression](SlotExpression.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n|  | | MinimalSubset |\n|  | | BasicSubset |\n|  | | RelationalModelProfile |\n|  | | ObjectOrientedProfile |\n```\n\n----------------------------------------\n\nTITLE: Defining ReachabilityQuery Class Attributes in YAML\nDESCRIPTION: This snippet defines the attributes of the ReachabilityQuery class, including source_ontology, source_nodes, relationship_types, and various boolean flags for controlling query behavior.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/ReachabilityQuery.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsource_ontology:\n  description: An ontology or vocabulary or terminology that is used in a query to obtain a set of permissible values\n  range: Uriorcurie\n  in_subset: SpecificationSubset\nsource_nodes:\n  description: A list of nodes that are used in the reachability query\n  range: Uriorcurie\n  multivalued: true\n  in_subset: SpecificationSubset\nrelationship_types:\n  description: A list of relationship types (properties) that are used in a reachability query\n  range: Uriorcurie\n  multivalued: true\n  in_subset: SpecificationSubset\nis_direct:\n  description: True if the reachability query should only include directly related nodes, if False then include also transitively connected\n  range: Boolean\n  in_subset: SpecificationSubset\ninclude_self:\n  description: True if the query is reflexive\n  range: Boolean\n  in_subset: SpecificationSubset\ntraverse_up:\n  description: True if the direction of the reachability query is reversed and ancestors are retrieved\n  range: Boolean\n  in_subset: SpecificationSubset\n```\n\n----------------------------------------\n\nTITLE: Example of Inlining as Simple Dictionaries in YAML\nDESCRIPTION: This snippet shows how prefixes can be inlined as simple key-value pairs in a more compact form when the objects have a primary value.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/inlining.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nprefixes:\n  dcterms: http://purl.org/dc/terms/\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Operations in Expression Language\nDESCRIPTION: Examples of basic arithmetic operations supported by the DSL\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/expression-language.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n1 + 2\n5 - 3\n2 * 4\n10 / 2\n2^3\n2**3\n5 ^ 3\n```\n\n----------------------------------------\n\nTITLE: Defining Decimal Type in LinkML Markdown\nDESCRIPTION: This snippet defines the decimal type in LinkML using markdown format. It specifies the type name, description, URI, root type, and broad mappings to schema.org.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue65/types/Decimal.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: decimal\n\nA real number with arbitrary precision that conforms to the xsd:decimal specification\n\nURI: [meta:Decimal](https://w3id.org/linkml/Decimal)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **Decimal** |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Broad Mappings:** | | schema:Number |\n```\n\n----------------------------------------\n\nTITLE: Generating UML Diagram for SchemaDefinition Class\nDESCRIPTION: This YUML code snippet generates a UML class diagram for the SchemaDefinition class, showing its attributes and relationships to other classes in the LinkML schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/SchemaDefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\n[![img](https://yuml.me/diagram/nofunky;dir:TB/class/[TypeDefinition],[SubsetDefinition],[StructuredAlias],[SlotDefinition],[Setting],[EnumBinding]<bindings%200..*-++[SchemaDefinition&#124;id:uri;version:string%20%3F;imports:uriorcurie%20*;license:string%20%3F;emit_prefixes:ncname%20*;default_curi_maps:string%20*;default_prefix:string%20%3F;metamodel_version:string%20%3F;source_file:string%20%3F;source_file_date:datetime%20%3F;source_file_size:integer%20%3F;generation_date:datetime%20%3F;slot_names_unique:boolean%20%3F;name:ncname;id_prefixes(i):ncname%20*;id_prefixes_are_closed(i):boolean%20%3F;definition_uri(i):uriorcurie%20%3F;conforms_to(i):string%20%3F;implements(i):uriorcurie%20*;instantiates(i):uriorcurie%20*;description(i):string%20%3F;title(i):string%20%3F;deprecated(i):string%20%3F;todos(i):string%20*;notes(i):string%20*;comments(i):string%20*;from_schema(i):uri%20%3F;imported_from(i):string%20%3F;source(i):uriorcurie%20%3F;in_language(i):string%20%3F;see_also(i):uriorcurie%20*;deprecated_element_has_exact_replacement(i):uriorcurie%20%3F;deprecated_element_has_possible_replacement(i):uriorcurie%20%3F;aliases(i):string%20*;mappings(i):uriorcurie%20*;exact_mappings(i):uriorcurie%20*;close_mappings(i):uriorcurie%20*;related_mappings(i):uriorcurie%20*;narrow_mappings(i):uriorcurie%20*;broad_mappings(i):uriorcurie%20*;created_by(i):uriorcurie%20%3F;contributors(i):uriorcurie%20*;created_on(i):datetime%20%3F;last_updated_on(i):datetime%20%3F;modified_by(i):uriorcurie%20%3F;status(i):uriorcurie%20%3F;rank(i):integer%20%3F;categories(i):uriorcurie%20*;keywords(i):string%20*],[Setting]<settings%200..*-++[SchemaDefinition],[ClassDefinition]<classes%200..*-++[SchemaDefinition],[SlotDefinition]<slots%200..*-++[SchemaDefinition],[EnumDefinition]<enums%200..*-++[SchemaDefinition],[TypeDefinition]<types%200..*-++[SchemaDefinition],[SubsetDefinition]<subsets%200..*-++[SchemaDefinition],[TypeDefinition]<default_range%200..1-%20[SchemaDefinition],[Prefix]<prefixes%200..*-++[SchemaDefinition],[Element]^-[SchemaDefinition],[Prefix],[LocalName],[Extension],[Example],[EnumDefinition],[EnumBinding],[Element],[ClassDefinition],[Annotation],[AltDescription])]\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Integer in Python\nDESCRIPTION: This snippet demonstrates how to handle an optional integer field in a Python class, including type checking and coercion.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nif self.opt_integer is not None and not isinstance(self.opt_integer, int):\n    self.opt_integer = int(self.opt_integer)\n```\n\n----------------------------------------\n\nTITLE: RDF Output in Turtle Format\nDESCRIPTION: RDF representation of the sample data after conversion from YAML using linkml-convert tool.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial04.md#2025-04-17_snippet_2\n\nLANGUAGE: turtle\nCODE:\n```\n@prefix ns1: <https://w3id.org/linkml/examples/personinfo/> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n<https://orcid.org/1234> a ns1:Person ;\n    ns1:age 33 ;\n    ns1:full_name \"Clark Kent\" ;\n    ns1:phone \"555-555-5555\" .\n\n<https://orcid.org/4567> a ns1:Person ;\n    ns1:age 34 ;\n    ns1:full_name \"Lois Lane\" .\n\n[] a ns1:Container ;\n    ns1:persons <https://orcid.org/1234>,\n        <https://orcid.org/4567> .\n```\n\n----------------------------------------\n\nTITLE: Variable and Attribute Access in Expression Language\nDESCRIPTION: Examples of variable references and object attribute access including nested properties\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/expression-language.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nx + y\nperson.name\nperson.address.street\npersons.name\n```\n\n----------------------------------------\n\nTITLE: Dynamic Enums for Ontology Constraints\nDESCRIPTION: Shows how to use dynamic enums to constrain values to terms from an ontology branch, specifically for cell types from the Cell Ontology.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/modeling.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n  cell_type:\n    range: CellTypeEnum\n\nenums:\n  CellTypeEnum:\n    reachable_from:\n      source_ontology: obo:cl\n      source_nodes:\n        - CL:0000000\n      include_self: false\n      relationship_types:\n        - rdfs:subClassOf\n```\n\n----------------------------------------\n\nTITLE: Defining Date Type and Dates Class in YAML\nDESCRIPTION: This YAML snippet defines a 'date' type based on XSDDate and a 'Dates' class with various date attributes.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntypes:\n  date:\n    uri: xsd:date\n    base: XSDDate\n    repr: str\n    description: a date (year, month and day) in an idealized calendar\n\nclasses:\n  Dates:\n    description: various permutations of the date type\n    attributes:\n      opt_date:\n        range: date\n      mand_date:\n        range: date\n        required: true\n      opt_multi_date:\n        range: date\n        multivalued: true\n      mand_multi_date:\n        range: date\n        multivalued: true\n        required: true\n```\n\n----------------------------------------\n\nTITLE: Constraining Slots to Fixed Ontology Terms\nDESCRIPTION: Example showing how to constrain a slot to specific ontology terms using enums with explicit ontology mappings via the meaning field.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/modeling.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nprefixes:\n  SO: http://purl.obolibrary.org/obo/SO_\n\nclasses:\n  variant:\n    slots:\n       - ...\n       - variant type\n        \nslots:\n  variant type:\n    range: variant_type_enum\n  ...:\n\nenums:\n  variant_type_enum:\n    permissible_values: \n      point_mutation:\n          meaning: SO:1000008\n      deletion:\n          meaning: SO:0000159\n      insertion: \n          meaning: SO:0000667\n```\n\n----------------------------------------\n\nTITLE: Listing Classes with Their Parent Classes\nDESCRIPTION: This snippet demonstrates how to retrieve classes along with their 'is_a' parent classes from a LinkML schema file using yq.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/yq-for-schemas.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yq e '.classes | to_entries | .[] | {\"child\": .key, \"parent\": .value.is_a}' personinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: Using Custom Template with Java Generator\nDESCRIPTION: Command showing how to use the gen-java tool with a custom template file using the --template_file option.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/java.rst#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngen-java --package org.biolink.model --output-directory org/biolink/model \\\n         --template_file example_template.java.jinja2 biolink-model.yaml\n```\n\n----------------------------------------\n\nTITLE: Graph Data as RDF Triples\nDESCRIPTION: RDF turtle representation of the Person-Movie graph data, showing both node-to-node edges (relationships between entities) and node-to-literal edges (properties of entities).\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-property-graphs.md#2025-04-17_snippet_3\n\nLANGUAGE: turtle\nCODE:\n```\n# node-to-node edges\n:Tom_Hanks :acted_in :Forrest_Gump .\n:Robert_Zemeckis :directed :Forrest_Gump .\n\n# node-to-literal edges\n:Tom_Hanks :born \"1956\" .\n:Robert_Zemeckis :born \"1951\" .\n:Tom_Hanks :profession \"Actor\" .\n:Forest_Gump :title \"Forrest Gump\" .\n:Forest_Gump :released \"1994\" .\n```\n\n----------------------------------------\n\nTITLE: LinkML Element Properties Table\nDESCRIPTION: Markdown table showing additional properties and their subsets for LinkML elements\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/CommonMetadata.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | BasicSubset |\n```\n\n----------------------------------------\n\nTITLE: Looking Up a Specific Class in LinkML Schema\nDESCRIPTION: This snippet demonstrates how to retrieve information about a specific class (in this case, 'Person') from a LinkML schema file using yq.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/yq-for-schemas.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n✗ yq e '.classes.Person' personinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Float Type in LinkML Markdown\nDESCRIPTION: This snippet defines the float type in LinkML using markdown format. It specifies the URI and indicates that the root builtin type is float.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/types/Float.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: float\n\n\nA real number that conforms to the xsd:float specification\n\nURI: [linkml:Float](https://w3id.org/linkml/Float)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **float** |\n```\n\n----------------------------------------\n\nTITLE: Defining AnonymousEnumExpression Class in YAML\nDESCRIPTION: YAML representation of the AnonymousEnumExpression class, showing its URI, relationships, and inherited attributes from EnumExpression.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/AnonymousEnumExpression.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Class: anonymous_enum_expression\n\nAn enum_expression that is not named\n\nURI: [linkml:AnonymousEnumExpression](https://w3id.org/linkml/AnonymousEnumExpression)\n\n## Uses Mixin\n\n *  mixin: [EnumExpression](EnumExpression.md) - An expression that constrains the range of a slot\n\n## Referenced by Class\n\n *  **[EnumExpression](EnumExpression.md)** *[include](include.md)*  <sub>0..\\*</sub>  **[AnonymousEnumExpression](AnonymousEnumExpression.md)**\n *  **[EnumExpression](EnumExpression.md)** *[minus](minus.md)*  <sub>0..\\*</sub>  **[AnonymousEnumExpression](AnonymousEnumExpression.md)**\n\n## Attributes\n\n\n### Mixed in from enum_expression:\n\n * [code_set](code_set.md)  <sub>0..1</sub>\n     * Description: the identifier of an enumeration code set.\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n     * in subsets: (SpecificationSubset,BasicSubset)\n\n### Mixed in from enum_expression:\n\n * [code_set_tag](code_set_tag.md)  <sub>0..1</sub>\n     * Description: the version tag of the enumeration code set\n     * Range: [String](types/String.md)\n     * in subsets: (BasicSubset)\n\n### Mixed in from enum_expression:\n\n * [code_set_version](code_set_version.md)  <sub>0..1</sub>\n     * Description: the version identifier of the enumeration code set\n     * Range: [String](types/String.md)\n     * in subsets: (BasicSubset)\n\n### Mixed in from enum_expression:\n\n * [pv_formula](pv_formula.md)  <sub>0..1</sub>\n     * Description: Defines the specific formula to be used to generate the permissible values.\n     * Range: [pv_formula_options](pv_formula_options.md)\n     * in subsets: (SpecificationSubset,BasicSubset)\n\n### Mixed in from enum_expression:\n\n * [permissible_values](permissible_values.md)  <sub>0..\\*</sub>\n     * Description: A list of possible values for a slot range\n     * Range: [PermissibleValue](PermissibleValue.md)\n     * in subsets: (SpecificationSubset,BasicSubset)\n\n### Mixed in from enum_expression:\n\n * [include](include.md)  <sub>0..\\*</sub>\n     * Description: An enum expression that yields a list of permissible values that are to be included, after subtracting the minus set\n     * Range: [AnonymousEnumExpression](AnonymousEnumExpression.md)\n     * in subsets: (SpecificationSubset)\n\n### Mixed in from enum_expression:\n\n * [minus](minus.md)  <sub>0..\\*</sub>\n     * Description: An enum expression that yields a list of permissible values that are to be subtracted from the enum\n     * Range: [AnonymousEnumExpression](AnonymousEnumExpression.md)\n     * in subsets: (SpecificationSubset)\n\n### Mixed in from enum_expression:\n\n * [inherits](inherits.md)  <sub>0..\\*</sub>\n     * Description: An enum definition that is used as the basis to create a new enum\n     * Range: [EnumDefinition](EnumDefinition.md)\n     * in subsets: (SpecificationSubset)\n\n### Mixed in from enum_expression:\n\n * [reachable_from](reachable_from.md)  <sub>0..1</sub>\n     * Description: Specifies a query for obtaining a list of permissible values based on graph reachability\n     * Range: [ReachabilityQuery](ReachabilityQuery.md)\n     * in subsets: (SpecificationSubset)\n\n### Mixed in from enum_expression:\n\n * [matches](matches.md)  <sub>0..1</sub>\n     * Description: Specifies a match query that is used to calculate the list of permissible values\n     * Range: [MatchQuery](MatchQuery.md)\n     * in subsets: (SpecificationSubset)\n\n### Mixed in from enum_expression:\n\n * [concepts](concepts.md)  <sub>0..\\*</sub>\n     * Description: A list of identifiers that are used to construct a set of permissible values\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n     * in subsets: (SpecificationSubset)\n```\n\n----------------------------------------\n\nTITLE: Schema Validation Examples\nDESCRIPTION: Demonstrates validation of Container objects with various input data and error cases\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/Type-Designators.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmod.Container.model_validate({\"things\": [{\"type\": \"Vehicle\", \"num_wheels\": 2}]})\n```\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\nwith pytest.raises(ValueError):\n  mod.Container.model_validate({\"things\": [{\"type\": \"Vehicle\", \"num_floors\": 4}]})\n```\n\n----------------------------------------\n\nTITLE: Defining Type Designator Slot in YAML\nDESCRIPTION: Example of defining a type designator slot in LinkML schema using YAML.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/slots.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n  category:\n    designates_type: true\n```\n\n----------------------------------------\n\nTITLE: Defining Time Type in LinkML\nDESCRIPTION: This snippet defines the Time type in LinkML. It specifies the URI, root type as XSDTime, string representation, and provides an exact mapping to schema:Time.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue62/types/Time.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: time\n\nA time object represents a (local) time of day, independent of any particular day\n\nURI: [meta:Time](https://w3id.org/linkml/Time)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **XSDTime** |\n| Representation | | str |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Time |\n```\n\n----------------------------------------\n\nTITLE: Class Definition Relationships - LinkML YUML Diagram\nDESCRIPTION: A YUML diagram URL showing the relationships between ClassDefinition and other classes in the LinkML metamodel. The diagram shows inheritance, associations, and cardinalities.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/ClassDefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\nhttps://yuml.me/diagram/nofunky;dir:TB/class/[UniqueKey],[SubsetDefinition],[StructuredAlias],[SlotDefinition],[SchemaDefinition],[LocalName],[Extension],[Example],[Definition],[ClassRule],[ClassExpression],[ClassDefinition]<apply_to%200..*-%20[ClassDefinition&#124;class_uri:uriorcurie%20%3F;subclass_of:uriorcurie%20%3F;tree_root:boolean%20%3F;slot_names_unique:boolean%20%3F;represents_relationship:boolean%20%3F;children_are_mutually_disjoint:boolean%20%3F;abstract(i):boolean%20%3F;mixin(i):boolean%20%3F;values_from(i):uriorcurie%20*;string_serialization(i):string%20%3F;name(i):string;id_prefixes(i):ncname%20*;id_prefixes_are_closed(i):boolean%20%3F;definition_uri(i):uriorcurie%20%3F;conforms_to(i):string%20%3F;implements(i):uriorcurie%20*;instantiates(i):uriorcurie%20*;description(i):string%20%3F;title(i):string%20%3F;deprecated(i):string%20%3F;todos(i):string%20*;notes(i):string%20*;comments(i):string%20*;from_schema(i):uri%20%3F;imported_from(i):string%20%3F;source(i):uriorcurie%20%3F;in_language(i):string%20%3F;see_also(i):uriorcurie%20*;deprecated_element_has_exact_replacement(i):uriorcurie%20%3F;deprecated_element_has_possible_replacement(i):uriorcurie%20%3F;aliases(i):string%20*;mappings(i):uriorcurie%20*;exact_mappings(i):uriorcurie%20*;close_mappings(i):uriorcurie%20*;related_mappings(i):uriorcurie%20*;narrow_mappings(i):uriorcurie%20*;broad_mappings(i):uriorcurie%20*;created_by(i):uriorcurie%20%3F;contributors(i):uriorcurie%20*;created_on(i):datetime%20%3F;last_updated_on(i):datetime%20%3F;modified_by(i):uriorcurie%20%3F;status(i):uriorcurie%20%3F;rank(i):integer%20%3F;categories(i):uriorcurie%20*;keywords(i):string%20*]\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional One Element Range Class in Python\nDESCRIPTION: Python dataclass implementation of an optional class containing one non-key/non-identifier element. Handles None values and type coercion for the v1 attribute.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OptionalOneElementRange(YAMLRoot):\n    \"\"\"\n    Range is a optional class that contains one non-key/non-identifier element\n    \"\"\"\n    ...\n\n    v1: Optional[Union[dict, OneElementClass]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is not None and not isinstance(self.v1, OneElementClass):\n            self.v1 = OneElementClass(**self.v1)\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Validating NDArray with Incorrect Data Type\nDESCRIPTION: This snippet demonstrates the validation error when trying to create an NDArray with an incorrect data type.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/arrays.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    MyClass(data=np.random.rand(5,4,3))\nexcept Exception as e:\n    console.print(e)\n```\n\n----------------------------------------\n\nTITLE: LinkML Schema with Mapped Enumerations\nDESCRIPTION: Enhanced schema showing enum mappings to ontological terms from PATO.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial06.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nid: https://w3id.org/linkml/examples/personinfo\nname: personinfo\nprefixes:\n  linkml: https://w3id.org/linkml/\n  schema: http://schema.org/\n  personinfo: https://w3id.org/linkml/examples/personinfo/\n  ORCID: https://orcid.org/\n  PATO: http://purl.obolibrary.org/obo/PATO_\nimports:\n  - linkml:types\ndefault_range: string\n\nclasses:\n  Person:\n    class_uri: schema:Person\n    attributes:\n      id:\n        identifier: true\n      full_name:\n        required: true\n        description:\n          name of the person\n        slot_uri: schema:name\n      aliases:\n        multivalued: true\n        description:\n          other names for the person\n      phone:\n        pattern: \"^[\\\\d\\\\(\\\\)\\\\-]+$\"\n        slot_uri: schema:telephone\n      age:\n        range: integer\n        minimum_value: 0\n        maximum_value: 200\n      status:\n        description: >\n          vital status of the person\n        range: PersonStatus\n    id_prefixes:\n      - ORCID\n  Container:\n    attributes:\n      persons:\n        multivalued: true\n        inlined_as_list: true\n        range: Person\n\nenums:\n  PersonStatus:\n    permissible_values:\n      ALIVE:\n        description: the person is living\n        meaning: PATO:0001421\n      DEAD:\n        description: the person is deceased\n        meaning: PATO:0001422\n      UNKNOWN:\n        description: the vital status is not known\n        todos:\n          - map this to an ontology\n```\n\n----------------------------------------\n\nTITLE: Inlining a Single-Valued Object Configuration in LinkML YAML\nDESCRIPTION: This snippet shows how to configure a non-multivalued slot (has_parent) to inline a single object. It sets inlined to true and multivalued to false.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/inlining.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n      has_parent:\n        range: Organism\n        multivalued: false\n        inlined: true\n```\n\n----------------------------------------\n\nTITLE: Inherited Definition Properties\nDESCRIPTION: Properties inherited from the base definition class including naming, identifiers, and conformance specifications.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/SlotDefinition.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* name  <sub>1..1</sub>\n    * Description: Unique element name within schema context\n    * Range: String\n* id_prefixes  <sub>0..\\*</sub>\n    * Description: Allowed identifier prefix list\n    * Range: Ncname\n* definition_uri  <sub>0..1</sub>\n    * Description: Native URI of the element\n    * Range: Uriorcurie\n```\n\n----------------------------------------\n\nTITLE: Simple Explicit Scalar Pattern in LinkML\nDESCRIPTION: Schema showing explicit scalar values with fixed units for measurements. Each measurement is modeled as a single scalar value with units embedded in field names.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-measurements.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Subject:\n    attributes:\n      id:\n        identifier: true\n      mass_in_kg:\n        description: the whole-body mass, measured at one point during the study\n        slot_uri: OBA:VT0001259\n        range: decimal\n        unit:\n          ucum_code: kg\n          has_quantity_kind: PATO:0000125 ## mass\n      height_in_m:\n        description: the height of the subject\n        slot_uri: OBA:VT0001253\n        range: decimal\n        unit:\n          ucum_code: m\n          has_quantity_kind: PATO:0000119 ## height\n      bmi:\n        range: decimal\n        unit:\n          ucum_code: kg/m2\n          has_quantity_kind: NCIT:C16358\n```\n\n----------------------------------------\n\nTITLE: Example Data for Inlining as a List in YAML\nDESCRIPTION: This snippet demonstrates how data is represented when inlining objects as a list. The has_subtypes attribute contains nested Organism objects.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/inlining.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- id: NCBITaxon:40674\n  name: mammals\n  has_subtypes:\n    - id: NCBITaxon:9443\n      name: primates\n      has_subtypes:\n        - id: NCBITaxon:9606\n          name: humans\n        - id: NCBITaxon:9682\n          ...\n```\n\n----------------------------------------\n\nTITLE: Defining CreativeWork Base Class in LinkML\nDESCRIPTION: This snippet defines a CreativeWork base class in LinkML, representing any form of creative work with common attributes.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/recognize-structural-forms.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  CreativeWork:\n    description: \"A base class representing any form of creative work\"\n    attributes:\n      title:\n        description: \"Title of the creative work\"\n        range: string\n      creator:\n        description: \"Creator of the work (individual or organization)\"\n        range: string\n      creation_date:\n        description: \"Date when the work was created or published\"\n        range: date\n      description:\n        description: \"A brief description of the work\"\n        range: string\n      language:\n        description: \"Language of the work\"\n        range: Language\n      license:\n        description: \"License under which the work is distributed\"\n        range: LicenseType\n```\n\n----------------------------------------\n\nTITLE: Integer Type Definition in LinkML\nDESCRIPTION: Defines the integer type specification in LinkML with its URI mapping and base type definition. Maps to the built-in int type and includes an exact mapping to schema:Integer.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/types/types/Integer.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: integer\n\nAn integer\n\nURI: [linkml:Integer](https://w3id.org/linkml/Integer)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **int** |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Integer |\n```\n\n----------------------------------------\n\nTITLE: LinkML schema with non-inlined reference slot\nDESCRIPTION: YAML schema snippet showing a slot that references another class by identifier rather than being inlined.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/json-schema.rst#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nFamilialRelationship:\n  is_a: Relationship\n  slot_usage:\n    related to:\n      range: Person\n      required: true\n```\n\n----------------------------------------\n\nTITLE: Built-in Types Definition in LinkML\nDESCRIPTION: Lists the core built-in types supported by LinkML including primitive types for strings, numbers, identifiers and dates.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/index.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* **Bool**\n* **Curie**\n* **Decimal**\n* **ElementIdentifier**\n* **NCName**\n* **NodeIdentifier**\n* **URI**\n* **URIorCURIE**\n* **XSDDate**\n* **XSDDateTime**\n* **XSDTime**\n* **float**\n* **int**\n* **str**\n```\n\n----------------------------------------\n\nTITLE: Defining obligation_level_enum Values in LinkML\nDESCRIPTION: Enumeration defining the different levels of obligation for metadata elements. The enum includes five values with their descriptions and associated metadata, including aliases and subset information.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/obligation_level_enum.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nobligation_level_enum:\n  REQUIRED: The metadata element is required to be present in the model\n  RECOMMENDED: The metadata element is recommended to be present in the model\n  OPTIONAL: The metadata element is optional to be present in the model\n  EXAMPLE: The metadata element is an example of how to use the model\n  DISCOURAGED: The metadata element is allowed but discouraged to be present in the model\n```\n\n----------------------------------------\n\nTITLE: Defining unique_key_name Slot in LinkML Markdown\nDESCRIPTION: This snippet defines the 'unique_key_name' slot in LinkML. It specifies that the slot is used to represent the name of a unique key, has a domain of UniqueKey, a range of String, and is used by the UniqueKey class. It also includes additional properties such as being part of specific subsets.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/unique_key_name.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: unique_key_name\n\nname of the unique key\n\nURI: [linkml:unique_key_name](https://w3id.org/linkml/unique_key_name)\n\n\n## Domain and Range\n\n[UniqueKey](UniqueKey.md) &#8594;  <sub>1..1</sub> [String](types/String.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [UniqueKey](UniqueKey.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n|  | | BasicSubset |\n|  | | RelationalModelProfile |\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Type Properties in LinkML\nDESCRIPTION: This snippet defines the properties of the boolean type in LinkML, including its URI, root type, and representation. It also specifies exact mappings to other schemas.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/types/Boolean.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: boolean\n\nA binary (true or false) value\n\nURI: [linkml:Boolean](https://w3id.org/linkml/Boolean)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **Bool** |\n| Representation | | bool |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Boolean |\n```\n\n----------------------------------------\n\nTITLE: Defining enum_range Slot in LinkML\nDESCRIPTION: This markdown snippet defines the 'enum_range' slot in LinkML. It specifies that the slot has a range of EnumExpression, is used by various classes, and is part of the SpecificationSubset.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/enum_range.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: enum_range\n\nAn inlined enumeration\n\nURI: [linkml:enum_range](https://w3id.org/linkml/enum_range)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [EnumExpression](EnumExpression.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [AnonymousSlotExpression](AnonymousSlotExpression.md)\n * [SlotDefinition](SlotDefinition.md)\n * [SlotExpression](SlotExpression.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: Sample Data for Movie Graph in YAML\nDESCRIPTION: This YAML snippet provides sample data for a movie graph using the extended schema. It includes node instances for persons and movies, as well as edge instances representing relationships between them, such as acting and directing.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-property-graphs.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nnodes:\n- id: PERSON:TH\n  name: Tom Hanks\n  profession: Actor\n  born: 1956\n  category: my:Person\n- id: PERSON:RZ\n  name: Robert Zemeckis\n  profession: Director\n  born: 1951\n  category: my:Person\n- id: MOVIE:FG\n  title: Forrest Gump\n  released: 1994\n  category: my:Movie\nedges:\n- subject: PERSON:TH\n  predicate: my:ActedIn\n  object: MOVIE:FG\n  role: Forrest Gump\n- subject: PERSON:RZ\n  predicate: my:Directed\n  object: MOVIE:FG\n```\n\n----------------------------------------\n\nTITLE: Generating a Markdown Report with LinkML Linter (Bash)\nDESCRIPTION: Command to run the LinkML linter and generate a markdown report in a specified output file.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/linter.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nlinkml-lint --format markdown --output linter-results.md myschema.yaml\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Import Example\nDESCRIPTION: Shows the basic structure for importing model files in LinkML using prefixes and imports sections.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/input/ImportMaps.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprefixes:\n  linkml: https://w3id.org/linkml/\n\nimports:\n  - linkml:types\n  - includes/mappings\n  -   ...\n```\n\n----------------------------------------\n\nTITLE: Event Class Definition in LinkML\nDESCRIPTION: Class definition for Event with temporal attributes including start time, end time, duration and current status flags. Serves as parent class for EmploymentEvent and MedicalEvent types. Maps to schema:Event.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/Event.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nstarted_at_time:date ?\nended_at_time:date ?\nduration:float ?\nis_current:boolean ?\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Definition - Gender\nDESCRIPTION: Defines a gender slot with a domain range of GenderType (0..1 cardinality), used by Person class and mapped to schema:gender. The slot has no parent or child relationships.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/gender.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: gender\n\nURI: [personinfo:gender](https://w3id.org/linkml/examples/personinfo/gender)\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [GenderType](GenderType.md)\n\n## Parents\n\n## Children\n\n## Used by\n\n * [Person](Person.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | schema:gender |\n```\n\n----------------------------------------\n\nTITLE: Setting the 'is_a' Value of a Class\nDESCRIPTION: This snippet demonstrates how to set the 'is_a' value of a specific class in a LinkML schema file using yq.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/yq-for-schemas.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyq e '.classes.Person.is_a=\"Agent\"' personinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Structured Aliases in LinkML\nDESCRIPTION: Demonstrates how to create structured aliases with additional metadata like source and language information.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/metadata.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nPerson:\n  structured_aliases:\n    - literal_form: Homo sapiens\n      alias_predicate: skos:exactMapping\n      source: Linnaeus\n  - literal_form: Persona\n      alias_predicate: skos:exactMapping\n      source: Google Translate\n      in_language: es\n```\n\n----------------------------------------\n\nTITLE: Instantiating Metamodel Extension in LinkML YAML\nDESCRIPTION: Shows how to use the 'instantiates' slot to reference a metamodel extension class (Reviewable) for the Person class. This allows for validation of specific annotation tags.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/annotations.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Person:\n    instantiates: \n      - mymetamodel:Reviewable\n    annotations:\n      review: A very useful class that is well defined\n      ...\n```\n\n----------------------------------------\n\nTITLE: Initializing Schema Processing\nDESCRIPTION: Sets up the LinkML schema processing environment by importing required modules and creating schema view\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/Type-Designators.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport yaml\nmodel_str = yaml.dump(model)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml_runtime.utils.schemaview import SchemaView\n```\n\nLANGUAGE: python\nCODE:\n```\nsv = SchemaView(model_str)\nschema = sv.schema\n```\n\n----------------------------------------\n\nTITLE: LinkML Linter Configuration with Recommended Rules (YAML)\nDESCRIPTION: Example configuration file for the LinkML linter that extends the recommended ruleset and enables an additional rule.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/linter.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Use all the recommended rules and also enable the no_empty_title rule\nextends: recommended\nrules:\n  no_empty_title:\n    level: error\n```\n\n----------------------------------------\n\nTITLE: Sample Person Data in YAML\nDESCRIPTION: Example data records conforming to the PersonInfo schema, containing information about two individuals with ORCID identifiers.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial04.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npersons:\n  - id: ORCID:1234\n    full_name: Clark Kent\n    age: 33\n    phone: 555-555-5555\n  - id: ORCID:4567\n    full_name: Lois Lane\n    age: 34\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for LinkML YUML Generator\nDESCRIPTION: A reStructuredText directive that configures Sphinx to automatically document the LinkML YUML generator module. It includes all members and undocumented members in the generated documentation.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/yuml.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: linkml.generators.yumlgen\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Datetime Type in LinkML\nDESCRIPTION: This snippet defines the Datetime type in LinkML. It specifies the type's URI, root type (XSDDateTime), string representation, and exact mapping to schema:DateTime.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/types/types/Datetime.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: datetime\n\nThe combination of a date and time\n\nURI: [linkml:Datetime](https://w3id.org/linkml/Datetime)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **XSDDateTime** |\n| Representation | | str |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:DateTime |\n```\n\n----------------------------------------\n\nTITLE: Validating RDF against ShEx Schema for Person Class\nDESCRIPTION: Validates the generated RDF against the ShEx schema for the Person class using PyShEx.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/examples.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom pyshex.evaluate import evaluate\nr = evaluate(g, shex,\n             start=\"http://example.org/model/Person\",\n             focus=\"http://example.org/people/42\")\nprint(\"Conforms\" if r[0] else r[1])\n```\n\n----------------------------------------\n\nTITLE: Custom Type Definitions in LinkML\nDESCRIPTION: Defines custom types that extend or alias the built-in types, providing more specific semantic meaning and validation rules.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/index.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* [Boolean](types/Boolean.md)  (**Bool**)  - A binary (true or false) value\n* [Curie](types/Curie.md)  (**Curie**)  - a compact URI\n* [Date](types/Date.md)  (**XSDDate**)  - a date (year, month and day) in an idealized calendar\n* [DateOrDatetime](types/DateOrDatetime.md)  (**str**)  - Either a date or a datetime\n* [Datetime](types/Datetime.md)  (**XSDDateTime**)  - The combination of a date and time\n```\n\n----------------------------------------\n\nTITLE: Defining SlotExpression Class in YAML\nDESCRIPTION: YAML representation of the SlotExpression class, including its URI, inheritance, mixins, and attributes. This class is used to define constraints on slot values in the LinkML framework.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/SlotExpression.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Class: slot_expression\n\nan expression that constrains the range of values a slot can take\n\nURI: [linkml:SlotExpression](https://w3id.org/linkml/SlotExpression)\n\n## Parents\n\n *  is_a: [Expression](Expression.md) - general mixin for any class that can represent some form of expression\n\n## Mixin for\n\n * [AnonymousSlotExpression](AnonymousSlotExpression.md) (mixin) \n * [SlotDefinition](SlotDefinition.md) (mixin)  - an element that describes how instances are related to other instances\n\n## Referenced by Class\n\n\n## Attributes\n```\n\n----------------------------------------\n\nTITLE: JSON Person Object Example with Organization Reference\nDESCRIPTION: A JSON example showing a Person object with an employed_at property referencing an Organization. This example illustrates insufficient type information to determine the specific Organization subclass.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/conversion.rst#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"employed_at\": {\n    \"...\": \"...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining 'id' Slot URI in LinkML Schema\nDESCRIPTION: Specifies the URI for the 'id' slot in the personinfo schema. This defines the unique identifier for the slot within the LinkML model.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/id.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nURI: [personinfo:id](https://w3id.org/linkml/examples/personinfo/id)\n```\n\n----------------------------------------\n\nTITLE: Complete JSON Schema for dictionary-inlined objects\nDESCRIPTION: Complete JSON Schema showing how dictionary-inlined objects are handled with separate definitions for normal and identifier-optional versions of the class.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/json-schema.rst#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"$defs\": {\n  \"Person\": {\n     \"additionalProperties\": false,\n     \"description\": \"\",\n     \"properties\": {\n        \"age\": {\n           \"type\": \"integer\"\n        },\n        \"gender\": {\n           \"type\": \"string\"\n        },\n        \"name\": {\n           \"type\": \"string\"\n        }\n     },\n     \"required\": [\n        \"name\",\n        \"age\",\n        \"gender\"\n     ],\n     \"title\": \"Person\",\n     \"type\": \"object\"\n  },\n  \"Person__identifier_optional\": {\n     \"additionalProperties\": false,\n     \"description\": \"\",\n     \"properties\": {\n        \"age\": {\n           \"type\": \"integer\"\n        },\n        \"gender\": {\n           \"type\": \"string\"\n        },\n        \"name\": {\n           \"type\": \"string\"\n        }\n     },\n     \"required\": [\n        \"age\",\n        \"gender\"\n     ],\n     \"title\": \"Person\",\n     \"type\": \"object\"\n  }\n},\n\"$id\": \"http://example.org\",\n\"$schema\": \"http://json-schema.org/draft-07/schema#\",\n\"additionalProperties\": false,\n\"properties\": {\n  \"persons\": {\n     \"additionalProperties\": {\n        \"$ref\": \"#/$defs/Person__identifier_optional\"\n     }\n  }\n},\n\"title\": \"example.org\",\n\"type\": \"object\"\n```\n\n----------------------------------------\n\nTITLE: FHIR Observation Resource Example in JSON\nDESCRIPTION: This JSON snippet illustrates how FHIR represents an observation (body weight measurement) using the Observation resource. It includes detailed metadata, coding systems, and the valueQuantity field for the actual measurement.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-measurements.md#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n\"resourceType\": \"Observation\",\n\"id\": \"example\",\n\"text\": {\n  \"status\": \"generated\"\n},\n\"status\": \"final\",\n\"category\": [\n{\n  \"coding\": [\n    {\n      \"system\": \"http://terminology.hl7.org/CodeSystem/observation-category\",\n      \"code\": \"vital-signs\",\n      \"display\": \"Vital Signs\"\n    }\n  ]\n}\n],\n\"code\": {\n\"coding\": [\n  {\n    \"system\": \"http://loinc.org\",\n    \"code\": \"29463-7\",\n    \"display\": \"Body Weight\"\n  },\n  {\n    \"system\": \"http://loinc.org\",\n    \"code\": \"3141-9\",\n    \"display\": \"Body weight Measured\"\n  },\n  {\n    \"system\": \"http://snomed.info/sct\",\n    \"code\": \"27113001\",\n    \"display\": \"Body weight\"\n  },\n  {\n    \"system\": \"http://acme.org/devices/clinical-codes\",\n    \"code\": \"body-weight\",\n    \"display\": \"Body Weight\"\n  }\n]\n},\n\"subject\": {\n\"reference\": \"Patient/example\"\n},\n\"encounter\": {\n\"reference\": \"Encounter/example\"\n},\n\"effectiveDateTime\": \"2016-03-28\",\n\"valueQuantity\": {\n\"value\": 185,\n\"unit\": \"lbs\",\n\"system\": \"http://unitsofmeasure.org\",\n\"code\": \"[lb_av]\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Import Map Example\nDESCRIPTION: Example showing how to map multiple import variations to the same local file.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/input/ImportMaps.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"includes/types\": \"local/types\",\n  \"types\": \"local/types\"\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating Relationship Classes with Metadata in YAML\nDESCRIPTION: This example shows how to annotate classes and slots with additional metadata to indicate which represents a relationship and the roles of each slot in the relationship.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/modeling.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_prefix: my_schema\n\nclasses:\n  allele:\n  gene:\n  allele gene relation:\n     represents_relationship: true\n     slots:\n        - subject\n        - object\n        - predicate\n      \nslots:\n  predicate: \n     range: predicate_enum\n     relational_role: PREDICATE\n  subject:\n     range: allele\n     relational_role: SUBJECT\n  object:\n     range: gene\n     relational_role: OBJECT\n\nenums:\n  predicate_enum:\n    permissible_values:\n      allele_of:\n```\n\n----------------------------------------\n\nTITLE: UML Class Diagram for Container Relationships\nDESCRIPTION: Visual representation of the Container class showing its relationships with Person and Organization classes. The diagram shows composition relationships where Container can have multiple persons and organizations.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/Container.md#2025-04-17_snippet_0\n\nLANGUAGE: uml\nCODE:\n```\n[Person],[Organization],[Organization]<organizations%200..*-++[Container],[Person]<persons%200..*-++[Container]\n```\n\n----------------------------------------\n\nTITLE: Rendering LinkML JSON Schema Validator Plugin Documentation\nDESCRIPTION: Sphinx directive to generate documentation for the JSON Schema validator plugin, which extends the main validate command with JSON Schema validation capabilities.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/cli/validate.md#2025-04-17_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. click:: linkml.validators.jsonschemavalidator:cli\n    :prog: linkml validate jsonschema\n    :nested: full\n```\n\n----------------------------------------\n\nTITLE: Configuring ID Prefixes for Gene Entities\nDESCRIPTION: Example showing how to define prioritized ID prefixes for gene objects, including database and resource identifiers.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/uris-and-mappings.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  gene:\n    slots:\n      - id\n      - name\n      - symbol\n      - description\n      - synonym\n      - xref\n    exact_mappings:\n      - SO:0000704\n      - SIO:010035\n      - WIKIDATA:Q7187\n    id_prefixes:\n      - NCBIGene\n      - ENSEMBL\n      - HGNC\n      - UniProtKB\n      - MGI\n      - ZFIN\n      - dictyBase\n      - WB\n      - WormBase\n      - FlyBase\n      - FB\n      - RGD\n      - SGD\n      - PomBase\n```\n\n----------------------------------------\n\nTITLE: String Type Definition in LinkML Schema\nDESCRIPTION: Defines the basic String type that maps to Python's built-in str type and schema.org's Text type. The type is identified by the URI https://w3id.org/linkml/String.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/types/String.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: string\n\nA character string\n\nURI: [linkml:String](https://w3id.org/linkml/String)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Text |\n```\n\n----------------------------------------\n\nTITLE: Generating JSON-LD Context for Biolink Model\nDESCRIPTION: Creates a JSON-LD context for the Biolink model using the ContextGenerator from LinkML.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/examples.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncntxt = ContextGenerator(model_str).serialize(base=\"http://example.org/people/\")\nprint(cntxt)\n```\n\n----------------------------------------\n\nTITLE: Conditional Expression in Expression Language\nDESCRIPTION: Example of ternary-style conditional expression\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/expression-language.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"Positive\" if x > 0 else \"Non-positive\"\n```\n\n----------------------------------------\n\nTITLE: Generated JSON Schema for Familial Relationships\nDESCRIPTION: JSON Schema output defining the structure for familial relationships including required properties, data types, and enumerated values. Includes date formatting for temporal properties and references for relationship types.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/json-schema.rst#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"FamilialRelationship\": {\n   \"additionalProperties\": false,\n   \"description\": \"\",\n   \"properties\": {\n      \"ended_at_time\": {\n         \"format\": \"date\",\n         \"type\": \"string\"\n      },\n      \"related_to\": {\n         \"type\": \"string\"\n      },\n      \"started_at_time\": {\n         \"format\": \"date\",\n         \"type\": \"string\"\n      },\n      \"type\": {\n         \"$ref\": \"#/definitions/FamilialRelationshipType\"\n      }\n   },\n   \"required\": [\n      \"type\",\n      \"related_to\"\n   ],\n   \"title\": \"FamilialRelationship\",\n   \"type\": \"object\"\n},\n\"FamilialRelationshipType\": {\n   \"description\": \"\",\n   \"enum\": [\n      \"SIBLING_OF\",\n      \"PARENT_OF\",\n      \"CHILD_OF\"\n   ],\n   \"title\": \"FamilialRelationshipType\",\n   \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying LinkML Schema for Nested Price Structure\nDESCRIPTION: This YAML snippet shows how to modify a LinkML schema to accommodate a nested price structure within the Book class, introducing a new Price class.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/recognize-structural-forms.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Book:\n    description: \"...\"\n    attributes:\n      ...\n      prices:\n        description: \"List of different format prices for the book\"\n        multivalued: true\n        range: Price\n\n  Price:\n    description: \"Price details of a book format\"\n    attributes:\n      amount:\n        description: \"Amount of the book price\"\n        range: float\n      currency:\n        description: \"Currency of the book price\"\n        range: CurrencyEnum\n      format:\n        description: \"Format of the book (Paperback or Hardback)\"\n        range: FormatEnum\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Schema from LinkML Schema\nDESCRIPTION: Example of generating a JSON Schema document from a LinkML schema for validation with external tools.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/validating-data.rst#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ gen-json-schema personinfo.yaml > personinfo.schema.json\n```\n\n----------------------------------------\n\nTITLE: Partially Fixed Data Instance (YAML)\nDESCRIPTION: This YAML snippet shows a partially fixed data instance where one of the previous errors (missing full_name) has been corrected.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial03.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npersons:\n  - id: ORCID:1234\n    full_name: Clark Kent\n    age: 90\n    phone: 1-800-kryptonite\n  - id: ORCID:5678\n    full_name: Lois Lane\n    age: 33\n```\n\n----------------------------------------\n\nTITLE: LinkML Attributes Slot Specification\nDESCRIPTION: Markdown specification of the 'attributes' slot that enables inline slot definitions within class definitions. The slot creates globally-scoped identifiers in the form <class_name>__<slot_name> and supports specialization through slot_usage.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/attributes.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: attributes\n\nInline definition of slots\n\nURI: [linkml:attributes](https://w3id.org/linkml/attributes)\n\n\n## Domain and Range\n\n[ClassDefinition](ClassDefinition.md) &#8594;  <sub>0..\\*</sub> [SlotDefinition](SlotDefinition.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [ClassDefinition](ClassDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | attributes are an alternative way of defining new slots.  An attribute adds a slot to the global space in the form <class_name>__<slot_name> (lower case, double underscores).  Attributes can be specialized via slot_usage. |\n| **In Subsets:** | | SpecificationSubset |\n|  | | MinimalSubset |\n|  | | BasicSubset |\n|  | | RelationalModelProfile |\n|  | | ObjectOrientedProfile |\n|  | | OwlProfile |\n```\n\n----------------------------------------\n\nTITLE: Defining TypeExpression Class in LinkML YAML\nDESCRIPTION: YAML definition of the TypeExpression class, including its URI, parent class, mixins, and attributes. This class is used for representing type expressions in LinkML, with various constraints and relationships.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/TypeExpression.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Class: type_expression\n\nAn abstract class grouping named types and anonymous type expressions\n\nURI: [linkml:TypeExpression](https://w3id.org/linkml/TypeExpression)\n\n## Parents\n\n *  is_a: [Expression](Expression.md) - general mixin for any class that can represent some form of expression\n\n## Mixin for\n\n * [AnonymousTypeExpression](AnonymousTypeExpression.md) (mixin)  - A type expression that is not a top-level named type definition. Used for nesting.\n * [TypeDefinition](TypeDefinition.md) (mixin)  - an element that whose instances are atomic scalar values that can be mapped to primitive types\n\n## Referenced by Class\n\n\n## Attributes\n\n\n### Own\n\n * [pattern](pattern.md)  <sub>0..1</sub>\n     * Description: the string value of the slot must conform to this regular expression expressed in the string\n     * Range: [String](types/String.md)\n     * in subsets: (SpecificationSubset,BasicSubset)\n * [structured_pattern](structured_pattern.md)  <sub>0..1</sub>\n     * Description: the string value of the slot must conform to the regular expression in the pattern expression\n     * Range: [PatternExpression](PatternExpression.md)\n     * in subsets: (SpecificationSubset)\n * [unit](unit.md)  <sub>0..1</sub>\n     * Description: an encoding of a unit\n     * Range: [UnitOfMeasure](UnitOfMeasure.md)\n * [implicit_prefix](implicit_prefix.md)  <sub>0..1</sub>\n     * Description: Causes the slot value to be interpreted as a uriorcurie after prefixing with this string\n     * Range: [String](types/String.md)\n     * in subsets: (SpecificationSubset)\n * [equals_string](equals_string.md)  <sub>0..1</sub>\n     * Description: the slot must have range string and the value of the slot must equal the specified value\n     * Range: [String](types/String.md)\n     * in subsets: (SpecificationSubset)\n * [equals_string_in](equals_string_in.md)  <sub>0..*</sub>\n     * Description: the slot must have range string and the value of the slot must equal one of the specified values\n     * Range: [String](types/String.md)\n     * in subsets: (SpecificationSubset)\n * [equals_number](equals_number.md)  <sub>0..1</sub>\n     * Description: the slot must have range of a number and the value of the slot must equal the specified value\n     * Range: [Integer](types/Integer.md)\n * [minimum_value](minimum_value.md)  <sub>0..1</sub>\n     * Description: For ordinal ranges, the value must be equal to or higher than this\n     * Range: [Anything](Anything.md)\n     * in subsets: (SpecificationSubset,BasicSubset)\n * [maximum_value](maximum_value.md)  <sub>0..1</sub>\n     * Description: For ordinal ranges, the value must be equal to or lower than this\n     * Range: [Anything](Anything.md)\n     * in subsets: (SpecificationSubset,BasicSubset)\n * [type_expression➞none_of](type_expression_none_of.md)  <sub>0..*</sub>\n     * Description: holds if none of the expressions hold\n     * Range: [AnonymousTypeExpression](AnonymousTypeExpression.md)\n     * in subsets: (SpecificationSubset)\n * [type_expression➞exactly_one_of](type_expression_exactly_one_of.md)  <sub>0..*</sub>\n     * Description: holds if only one of the expressions hold\n     * Range: [AnonymousTypeExpression](AnonymousTypeExpression.md)\n     * in subsets: (SpecificationSubset)\n * [type_expression➞any_of](type_expression_any_of.md)  <sub>0..*</sub>\n     * Description: holds if at least one of the expressions hold\n     * Range: [AnonymousTypeExpression](AnonymousTypeExpression.md)\n     * in subsets: (SpecificationSubset)\n * [type_expression➞all_of](type_expression_all_of.md)  <sub>0..*</sub>\n     * Description: holds if all of the expressions hold\n     * Range: [AnonymousTypeExpression](AnonymousTypeExpression.md)\n     * in subsets: (SpecificationSubset)\n```\n\n----------------------------------------\n\nTITLE: Defining SparqlPath Type in YAML for LinkML\nDESCRIPTION: This snippet defines the SparqlPath type in YAML format for LinkML. It specifies the type's URI, its root type as a built-in string, and its representation as a string. The type is intended to encode SPARQL Property Paths that should dereference to valid objects when used in RDF.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue62/types/Sparqlpath.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Type: sparqlpath\n\nURI: [meta:Sparqlpath](https://w3id.org/linkml/Sparqlpath)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Defining 'name' Slot in LinkML\nDESCRIPTION: This snippet defines the 'name' slot in LinkML. It specifies the URI, domain and range (String type), and lists the classes that use this slot. It also includes a mapping to schema.org's 'name' property.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/name.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: name\n\nURI: [personinfo:name](https://w3id.org/linkml/examples/personinfo/name)\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n## Children\n\n## Used by\n\n * [Concept](Concept.md)\n * [DiagnosisConcept](DiagnosisConcept.md)\n * [NamedThing](NamedThing.md)\n * [Organization](Organization.md)\n * [Person](Person.md)\n * [Place](Place.md)\n * [ProcedureConcept](ProcedureConcept.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | schema:name |\n```\n\n----------------------------------------\n\nTITLE: Focused MedicalEvent ER Diagram with Upstream Entities\nDESCRIPTION: Example mermaid syntax for a focused ER diagram showing MedicalEvent with its upstream entities, without attributes and with limited traversal.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/erdiagram.rst#2025-04-17_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\nMedicalEvent {\n}\nPerson {\n}\nDiagnosisConcept {\n}\nProcedureConcept {\n}\n\nMedicalEvent ||--|o Place : \"in location\"\nMedicalEvent ||--|o DiagnosisConcept : \"diagnosis\"\nMedicalEvent ||--|o ProcedureConcept : \"procedure\"\nMedicalEvent ||--|o AnyObject : \"metadata\"\nPerson ||--}o MedicalEvent : \"has medical history\"\n```\n\n----------------------------------------\n\nTITLE: Sample YAML Input for Loading Instance\nDESCRIPTION: Provides an example of a YAML file that can be loaded into a class instance using the from_yaml function, demonstrating how data is structured for input.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/string_template.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Freddy Buster Jones\nage: 11\ngender: Undetermined\n```\n\n----------------------------------------\n\nTITLE: Import Map for Multiple Files\nDESCRIPTION: Example JSON import map showing how to handle multiple import references.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/input/ImportMaps.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"linkml:types\": \"local/types\"\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Schema Definition - Postconditions Slot\nDESCRIPTION: Markdown documentation defining the postconditions slot in LinkML, including its URI, domain/range, relationships, and metadata properties.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/postconditions.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: postconditions\n\nan expression that must hold for an instance of the class, if the preconditions hold\n\nURI: [linkml:postconditions](https://w3id.org/linkml/postconditions)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [AnonymousClassExpression](AnonymousClassExpression.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [ClassRule](ClassRule.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Aliases:** | | then |\n|  | | head |\n|  | | consequents |\n| **In Subsets:** | | SpecificationSubset |\n| **See also:** | | [https://w3id.org/linkml/docs/specification/05validation/#rules](https://w3id.org/linkml/docs/specification/05validation/#rules) |\n| **Close Mappings:** | | swrl:body |\n```\n\n----------------------------------------\n\nTITLE: RDF Turtle Serialization of a Person Instance\nDESCRIPTION: This snippet shows the RDF Turtle serialization of a Person instance, demonstrating how the data model is represented in RDF triples.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_notebooks/output/examples.txt#2025-04-17_snippet_3\n\nLANGUAGE: Turtle\nCODE:\n```\n@prefix foaf: <http://xmlns.com/foaf/0.1/> .\n@prefix samp: <http://example.org/model/> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n<http://example.org/people/42> a samp:Person ;\n    foaf:age 43 ;\n    foaf:firstName \"Bob\",\n        \"Joe\" ;\n    foaf:lastName \"smith\" .\n```\n\n----------------------------------------\n\nTITLE: Simple Implicit Scalar Pattern in LinkML\nDESCRIPTION: A variant of the explicit scalar pattern where units are defined in the schema but not in field names.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-measurements.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Subject:\n    attributes:\n      id:\n        identifier: true\n      mass:\n        range: decimal\n        unit:\n          ucum_code: kg\n      height:\n        range: decimal\n        unit:\n          ucum_code: m\n      bmi:\n        range: decimal\n        unit:\n          ucum_code: kg/m2\n```\n\n----------------------------------------\n\nTITLE: Rendering LinkML SPARQL Validator Plugin Documentation\nDESCRIPTION: Sphinx directive to generate documentation for the SPARQL validator plugin, which extends the main validate command with SPARQL-based validation capabilities.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/cli/validate.md#2025-04-17_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. click:: linkml.validators.sparqlvalidator:cli\n    :prog: linkml validate sparql\n    :nested: full\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation with Deprecated Elements in LinkML\nDESCRIPTION: Command for generating documentation that includes deprecated elements using the gen-doc tool with the --include flag to import deprecated.yaml, ensuring URIs for deprecated elements remain accessible.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/deprecating-elements.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$(RUN) gen-doc -d $(DOCDIR) --template-directory $(SRC)/$(TEMPLATEDIR) --include src/schema/deprecated.yaml $(SOURCE_SCHEMA_PATH)\n```\n\n----------------------------------------\n\nTITLE: DownloadProblem Class Structure\nDESCRIPTION: Defines the class structure including inheritance from Problem class and its attributes (has_source and description).\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue179/DownloadProblem.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Problem]^-[DownloadProblem&#124;has_source:string%20%3F;description(i):string%20%3F]\n```\n\n----------------------------------------\n\nTITLE: Python Function for Array Element Lookup in Linearized Format\nDESCRIPTION: A Python function that demonstrates how to look up elements in a linearized array representation by computing the index from dimensional coordinates.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/multidimensional-arrays.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef lookup(data, x, y, time) -> float:\n  return data[(x-1) + (y-1)*4 + (z-1)*4*4]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Prefixes from LinkML Schema\nDESCRIPTION: This snippet shows how to extract all prefixes from a LinkML schema file using yq.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/yq-for-schemas.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n✗ yq e '.prefixes' personinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating LinkML Lifecycle Module Documentation using Sphinx RST\nDESCRIPTION: An RST documentation block that uses the eval-rst directive to automatically generate API documentation from the linkml.generators.common.lifecycle module. The automodule directive includes all members of the module.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/common/lifecycle.md#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n{eval-rst}\n.. automodule:: linkml.generators.common.lifecycle\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining Price Class in LinkML\nDESCRIPTION: This snippet defines a Price class in LinkML, representing pricing details for book formats with references to the Book class.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/recognize-structural-forms.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n  Price:\n    description: \"Price details of a book format\"\n    attributes:\n      book_id:\n        description: \"Identifier of the book\"\n        range: Book\n      format:\n        description: \"Format of the book (Paperback or Hardback)\"\n        range: FormatEnum\n      amount:\n        description: \"Amount of the book price\"\n        range: float\n      currency:\n        description: \"Currency of the book price\"\n        range: CurrencyEnum\n```\n\n----------------------------------------\n\nTITLE: Defining Multivalued Slot Ranges in YAML\nDESCRIPTION: YAML definitions for various multivalued slot scenarios, including optional and required slots with different range types.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nOptionalMultivaluedThreeElementRange:\n    description: Case 2.1(o) -- multivalued optional slot - range has no key or identifier\n    attributes:\n      v1:\n        range: ThreeElementClass\n        multivalued: true\n\n  RequiredMultivaluedThreeElementRange:\n    description: Case 2.1(r) -- multivalued optional slot - range has no key or identifier\n    attributes:\n      v1:\n        range: ThreeElementClass\n        multivalued: true\n        required: true\n\n  OptionalMultivaluedKeyedThreeElementRange:\n    description: Case 2.2(o) -- multivalued optional slot - range has a key\n    attributes:\n      v1:\n        range: KeyedThreeElementClass\n        multivalued: true\n\n  RequiredMultivaluedIdentifiedThreeElementRange:\n    description: Case 2.2(r) -- multivalued optional slot - range has an identifier\n    attributes:\n      v1:\n        range: IdentifiedThreeElementClass\n        multivalued: true\n        required: true\n```\n\n----------------------------------------\n\nTITLE: LinkML Default Prefix Slot Definition\nDESCRIPTION: Markdown documentation defining the default_prefix slot that specifies the prefix used for all elements within a schema. The slot has a domain of SchemaDefinition, a range of String type, and is included in the Specification, Minimal and Basic subsets.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/default_prefix.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: default_prefix\n\nThe prefix that is used for all elements within a schema\n\nURI: [linkml:default_prefix](https://w3id.org/linkml/default_prefix)\n\n\n## Domain and Range\n\n[SchemaDefinition](SchemaDefinition.md) &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [SchemaDefinition](SchemaDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n|  | | MinimalSubset |\n|  | | BasicSubset |\n```\n\n----------------------------------------\n\nTITLE: Array Expression Class Definition\nDESCRIPTION: YUML class diagram showing the ArrayExpression class with its attributes, relationships and inherited properties from mixins. Defines array dimensionality constraints and metadata.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/ArrayExpression.md#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\n[SubsetDefinition],[StructuredAlias],[SlotDefinition],[Extension],[Extensible],[Example],[DimensionExpression],[CommonMetadata],[DimensionExpression]<dimensions%200..*-++[ArrayExpression&#124;exact_number_dimensions:integer%20%3F;minimum_number_dimensions:integer%20%3F;description:string%20%3F;title:string%20%3F;deprecated:string%20%3F;todos:string%20*;notes:string%20*;comments:string%20*;from_schema:uri%20%3F;imported_from:string%20%3F;source:uriorcurie%20%3F;in_language:string%20%3F;see_also:uriorcurie%20*;deprecated_element_has_exact_replacement:uriorcurie%20%3F;deprecated_element_has_possible_replacement:uriorcurie%20%3F;aliases:string%20*;mappings:uriorcurie%20*;exact_mappings:uriorcurie%20*;close_mappings:uriorcurie%20*;related_mappings:uriorcurie%20*;narrow_mappings:uriorcurie%20*;broad_mappings:uriorcurie%20*;created_by:uriorcurie%20%3F;contributors:uriorcurie%20*;created_on:datetime%20%3F;last_updated_on:datetime%20%3F;modified_by:uriorcurie%20%3F;status:uriorcurie%20%3F;rank:integer%20%3F;categories:uriorcurie%20*;keywords:string%20*],[Anything]<maximum_number_dimensions%200..1-++[ArrayExpression],[SlotDefinition]++-%20array%200..1>[ArrayExpression],[ArrayExpression]uses%20-.->[Extensible],[ArrayExpression]uses%20-.->[Annotatable],[ArrayExpression]uses%20-.->[CommonMetadata],[Annotation],[Annotatable],[AltDescription],[Anything]\n```\n\n----------------------------------------\n\nTITLE: Consider Nulls Inequal Property Definition\nDESCRIPTION: Property definition showing the consider_nulls_inequal slot with its domain (UniqueKey) and range (Boolean). This property determines whether null values should be considered equal or unequal when comparing values for uniqueness constraints.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/consider_nulls_inequal.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Domain and Range\n\n[UniqueKey](UniqueKey.md) &#8594;  <sub>0..1</sub> [Boolean](types/Boolean.md)\n```\n\n----------------------------------------\n\nTITLE: Defining 'description' Slot in LinkML using Markdown\nDESCRIPTION: This code snippet defines the 'description' slot in LinkML. It specifies the slot's URI, domain and range, parent and child relationships, usage, and additional properties. The slot is used to describe what a value is doing and is part of the BasicSubset.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/value_description.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: description\n\ndescription of what the value is doing\n\nURI: [linkml:value_description](https://w3id.org/linkml/value_description)\n\n\n## Domain and Range\n\n[Example](Example.md) &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [Example](Example.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | BasicSubset |\n```\n\n----------------------------------------\n\nTITLE: Initializing ListOfClasses with a Dictionary in Python\nDESCRIPTION: Shows an example of initializing a ListOfClasses object with a dictionary, which would fail as it tries to convert it into multiple entries.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nmy_entries = ListOfClasses(dict(name='element1', value=17))\n```\n\n----------------------------------------\n\nTITLE: Random Data Generation Function\nDESCRIPTION: Utility function to generate random person data with relationships\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/SQL-examples.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport names\nimport random\n\ndef random_person() -> Person:\n    global last_id\n    last_id += 1\n    pid = f\"P{last_id}\"\n    person = Person(id=pid, name=names.get_full_name(), age_in_years=random.randint(30,40))\n    for n in range(0, random.randint(0, 3)):\n        rel = FamilialRelationship(related_to=f\"P{last_id+n}\", type=\"SIBLING_OF\")\n        person.has_familial_relationships.append(rel)\n    return person\n```\n\n----------------------------------------\n\nTITLE: Base YAML Import Example\nDESCRIPTION: Example of a base YAML file with multiple imports.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/input/ImportMaps.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n  - linkml:types\n  - includes/localtypes\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Definition - Value\nDESCRIPTION: Markdown definition of the 'value' slot in LinkML schema that represents actual annotations. The slot has a cardinality of 1..1 and accepts AnyValue as its range. It is used by Extension and Annotation classes.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/extension_value.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: value\n\nthe actual annotation\n\nURI: [linkml:extension_value](https://w3id.org/linkml/extension_value)\n\n\n## Domain and Range\n\n[Extension](Extension.md) &#8594;  <sub>1..1</sub> [AnyValue](AnyValue.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [Annotation](Annotation.md)\n * [Extension](Extension.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Date Type in LinkML Using Markdown\nDESCRIPTION: This snippet defines the 'date' type in LinkML using a markdown table format. It specifies the root type as XSDDate, representation as a string, and provides an exact mapping to schema:Date.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/types/Date.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **XSDDate** |\n| Representation | | str |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Date |\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Class Names from LinkML Schema\nDESCRIPTION: This snippet shows how to extract all class names from a LinkML schema file using yq.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/yq-for-schemas.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n✗ yq e '.classes | keys' personinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: RDF Turtle Representation of Array Data\nDESCRIPTION: Example of representing array data in RDF Turtle format with properties for each axis coordinate and the value.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/multidimensional-arrays.md#2025-04-17_snippet_2\n\nLANGUAGE: turtle\nCODE:\n```\n[:x 1, :y 1, :time 1, :value 111],\n...\n```\n\n----------------------------------------\n\nTITLE: Modeling Quantities with QUDT Integration\nDESCRIPTION: Demonstrates how to model quantity values using QUDT vocabulary integration in LinkML schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/tool-developer-guide.rst#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nquantity value:\n  description: >\n    A simple quantity, e.g. 2cm\n  attributes:\n    verbatim:\n      description: >\n        Unnormalized atomic string representation, should in syntax {number} {unit}\n    has unit:\n      description: >\n        The unit of the quantity\n      slot_uri: qudt:unit\n    has numeric value:\n      description: >\n        The number part of the quantity\n      range:\n        double\n  class_uri: qudt:QuantityValue\n  mappings:\n    - schema:QuantityValue\n```\n\n----------------------------------------\n\nTITLE: Python Array Element Access with Nested Lists\nDESCRIPTION: Shows how to access elements from a nested list representation of an array in Python after loading from YAML.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/multidimensional-arrays.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> measurements = yaml.safe_load(open(\"lolol.yaml\"))\n>>> measurements[0][0][0]\n111\n```\n\n----------------------------------------\n\nTITLE: Generating Raw Mermaid Syntax Without Markdown Fencing\nDESCRIPTION: Command to generate mermaid syntax without the markdown fence blocks, using the --format mermaid option.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/erdiagram.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngen-erdiagram --format mermaid personinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating UML Diagram for Schema with Slot Usage\nDESCRIPTION: This bash command generates a UML diagram for the LinkML schema that includes slot usage customization. It visualizes the complex relationships and constraints defined in the schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial07.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngen-yuml slot-usage-example.yaml\n```\n\n----------------------------------------\n\nTITLE: Converting Data with LinkML\nDESCRIPTION: Example of converting data using the mapped schema to JSON format.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial06.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"persons\": [\n    {\n      \"id\": \"ORCID:1234\",\n      \"full_name\": \"Clark Kent\",\n      \"phone\": \"555-555-5555\",\n      \"age\": 33,\n      \"status\": \"ALIVE\"\n    },\n    {\n      \"id\": \"ORCID:2222\",\n      \"full_name\": \"Count Dracula\",\n      \"status\": \"UNKNOWN\"\n    }\n  ],\n  \"@type\": \"Container\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Range Definition in LinkML Schema\nDESCRIPTION: Example showing how range properties are defined in LinkML, demonstrating slot S1 with domain C1 and range C2\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/SlotExpression.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nS1:\n  domain: C1\n  range: C2\n\nX:\n  S1: Y\n```\n\n----------------------------------------\n\nTITLE: Sample Data for Person Instances in YAML\nDESCRIPTION: This YAML file contains sample data for multiple Person instances within a Container object. It demonstrates the structure defined by the schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial02.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npersons:\n  - id: P1\n    full_name: Clark Kent\n    aliases: Superman\n    phone: 555-1000\n    age: 32\n  - id: P2\n    full_name: Lois Lane\n    phone: 555-1001\n    age: 29\n```\n\n----------------------------------------\n\nTITLE: Fixed Data with Valid Enum Values\nDESCRIPTION: Corrected data file using valid enum values that will pass validation.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial06.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npersons:\n  - id: ORCID:1234\n    full_name: Clark Kent\n    age: 33\n    phone: 555-555-5555\n    status: ALIVE\n  - id: ORCID:2222\n    full_name: Count Dracula\n    status: UNKNOWN\n```\n\n----------------------------------------\n\nTITLE: Defining 'object' Slot in LinkML Markdown\nDESCRIPTION: This snippet defines the 'object' slot in LinkML, specifying its URI, domain and range, usage, and additional properties. The slot represents the direct object of an example and is part of the BasicSubset.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/value_object.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: object\n\ndirect object representation of the example\n\nURI: [linkml:value_object](https://w3id.org/linkml/value_object)\n\n\n## Domain and Range\n\n[Example](Example.md) &#8594;  <sub>0..1</sub> [Anything](Anything.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [Example](Example.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | BasicSubset |\n```\n\n----------------------------------------\n\nTITLE: Defining ImportExpression Class in YAML\nDESCRIPTION: YAML representation of the ImportExpression class, including its attributes, mixins, and relationships to other classes in the LinkML schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/ImportExpression.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Class: import_expression\n\nan expression describing an import\n\nURI: [linkml:ImportExpression](https://w3id.org/linkml/ImportExpression)\n\n## Uses Mixin\n\n *  mixin: [Extensible](Extensible.md) - mixin for classes that support extension\n *  mixin: [Annotatable](Annotatable.md) - mixin for classes that support annotations\n *  mixin: [CommonMetadata](CommonMetadata.md) - Generic metadata shared across definitions\n\n## Referenced by Class\n\n *  **[SchemaDefinition](SchemaDefinition.md)** *[structured_imports](structured_imports.md)*  <sub>0..*</sub>  **[ImportExpression](ImportExpression.md)**\n\n## Attributes\n\n\n### Own\n\n * [import_from](import_from.md)  <sub>1..1</sub>\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n * [import_as](import_as.md)  <sub>0..1</sub>\n     * Range: [Ncname](types/Ncname.md)\n * [import_map](import_map.md)  <sub>0..*</sub>\n     * Range: [Setting](Setting.md)\n\n### Mixed in from extensible:\n\n * [extensions](extensions.md)  <sub>0..*</sub>\n     * Description: a tag/text tuple attached to an arbitrary element\n     * Range: [Extension](Extension.md)\n\n### Mixed in from annotatable:\n\n * [annotations](annotations.md)  <sub>0..*</sub>\n     * Description: a collection of tag/text tuples with the semantics of OWL Annotation\n     * Range: [Annotation](Annotation.md)\n\n### Mixed in from common_metadata:\n\n * [description](description.md)  <sub>0..1</sub>\n     * Description: a textual description of the element's purpose and use\n     * Range: [String](types/String.md)\n     * in subsets: (BasicSubset)\n```\n\n----------------------------------------\n\nTITLE: SlotDefinition Type Designator Schema Definition\nDESCRIPTION: Markdown schema documentation defining the designates_type slot property. Indicates if key slot(s) determine type instantiation relationships between objects and class definitions. Has a domain of SlotDefinition and range of Boolean.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/designates_type.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: designates_type\n\nTrue means that the key slot(s) is used to determine the instantiation (types) relation between objects and a ClassDefinition\n\nURI: [linkml:designates_type](https://w3id.org/linkml/designates_type)\n\n\n## Domain and Range\n\n[SlotDefinition](SlotDefinition.md) &#8594;  <sub>0..1</sub> [Boolean](types/Boolean.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [SlotDefinition](SlotDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Aliases:** | | type designator |\n| **In Subsets:** | | SpecificationSubset |\n| **See also:** | | [https://linkml.io/linkml/schemas/type-designators.html](https://linkml.io/linkml/schemas/type-designators.html) |\n```\n\n----------------------------------------\n\nTITLE: Defining 'ended_at_time' Slot in LinkML Markdown\nDESCRIPTION: This snippet defines the 'ended_at_time' slot in LinkML markdown format. It specifies the slot's URI, domain and range, parent and child relationships, classes that use it, and additional properties such as mappings.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/ended_at_time.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: ended_at_time\n\n\n\n\nURI: [personinfo:ended_at_time](https://w3id.org/linkml/examples/personinfo/ended_at_time)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [Date](types/Date.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [EmploymentEvent](EmploymentEvent.md)\n * [Event](Event.md)\n * [FamilialRelationship](FamilialRelationship.md)\n * [MedicalEvent](MedicalEvent.md)\n * [Relationship](Relationship.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | prov:endedAtTime |\n```\n\n----------------------------------------\n\nTITLE: Marking Deprecation in LinkML Class\nDESCRIPTION: Example of how to mark a deprecated class in LinkML. This adds a deprecation warning to the constructor of a hypothetical class.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/deprecation.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyClass:\n    def __init__(self):\n        deprecation_warning('semaphore')\n```\n\n----------------------------------------\n\nTITLE: Using Prefixcommons Utility for Prefix Handling\nDESCRIPTION: This Python code uses the prefixcommons utility to handle prefixes, demonstrating that both BIOGRID and CHEBI prefixes are represented.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/context_issue.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncurie_map = {k: v for k, v in curie_util.read_biocontext('monarch_context').items()}\nprint(prefix_for(curie_map, 'BIOGRID'))\nprint(prefix_for(curie_map, 'CHEBI'))\n```\n\n----------------------------------------\n\nTITLE: Correct Representation of OBO Prefixes in JSON-LD\nDESCRIPTION: The proper way to represent OBO ontology prefixes with trailing underscores in JSON-LD, using an object with @id and @prefix properties.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/jsonld-context.rst#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"@context\": {\n    \"PATO\": {\n         \"@id\": \"http://purl.obolibrary.org/obo/PATO_\",\n          \"@prefix\": true\n     }\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Functions for Context Handling\nDESCRIPTION: This Python code defines utility functions to fetch and process prefixcommons context data. It includes functions to retrieve JSON-LD context and format prefix entries.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/context_issue.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom contextlib import closing\nfrom typing import Optional, Dict\nimport requests\nfrom jsonasobj import loads\nfrom prefixcommons import curie_util\nfrom rdflib import Graph\n\ndef fetch_pc_context(name: str) -> Optional[str]:\n    \"\"\"\n    Retrieve the prefixcommons JSON-LD entry for name\n    :param name: context name\n    :return: String representation of JSON-LD context\n    \"\"\"\n    url = f\"https://raw.githubusercontent.com/prefixcommons/biocontext/master/registry/{name}.jsonld\"\n    with closing(requests.get(url, stream=False)) as resp:\n        if resp.status_code == 200:\n            return resp.text\n        else:\n            print(f\"Cannot fetch: {url}\")\n\ndef prefix_for(prefixes: Dict[str, str], prefix: str) -> str:\n    \"\"\"\n    Format the prefix entry in prefixes\n    :param prefixes: map from prefix to URI\n    :param prefix: prefix to map\n    :return: result\n    \"\"\"\n    if prefix in prefixes:\n        return f'@prefix {prefix}: <{prefixes[prefix]}> .'\n    else:\n        return f'*prefix: {prefix} not mapped'\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Pointer Type in LinkML Markdown\nDESCRIPTION: This snippet defines the 'jsonpointer' type in LinkML. It specifies that the type is a string that must conform to JSON Pointer syntax and should dereference to a valid object within the current instance document when encoded in tree form.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/types/Jsonpointer.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: jsonpointer\n\nA string encoding a JSON Pointer. The value of the string MUST conform to JSON Point syntax and SHOULD dereference to a valid object within the current instance document when encoded in tree form.\n\nURI: [linkml:Jsonpointer](https://w3id.org/linkml/Jsonpointer)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Data Format for Validation\nDESCRIPTION: Example of CSV data structure used for validation with LinkML. Shows the required header format and sample data rows.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/validating-data.rst#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nid,full_name,age,phone\nORCID:1234,Clark Kent,32,555-555-5555\nORCID:5678,Lois Lane,33,555-555-1234\n```\n\n----------------------------------------\n\nTITLE: YAML Example of Linearized Array Data\nDESCRIPTION: Shows a compact YAML representation of array data using a linearized format with axis definitions.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/multidimensional-arrays.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nx:\n  values: [10, 20, 30, 40]\ny:\n  values: [110, 120, 130, 140]\ntime:\n  values: [31, 59, 90]\ntemperatures: [111, 211, ..., 343, 443]\n```\n\n----------------------------------------\n\nTITLE: Generating Python Class for Date Types\nDESCRIPTION: This Python code snippet shows the generated class for handling various date field configurations, including type checking and coercion.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Dates(YAMLRoot):\n    \"\"\"\n    various permutations of the date type\n    \"\"\"\n    ...\n\n    mand_date: Union[str, XSDDate] = None\n    mand_multi_date: Union[Union[str, XSDDate], List[Union[str, XSDDate]]] = None\n    opt_date: Optional[Union[str, XSDDate]] = None\n    opt_multi_date: Optional[Union[Union[str, XSDDate], List[Union[str, XSDDate]]]] = empty_list()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.mand_date is None:\n            raise ValueError(\"mand_date must be supplied\")\n        if not isinstance(self.mand_date, XSDDate):\n            self.mand_date = XSDDate(self.mand_date)\n\n        if self.mand_multi_date is None:\n            raise ValueError(\"mand_multi_date must be supplied\")\n        elif not isinstance(self.mand_multi_date, list):\n            self.mand_multi_date = [self.mand_multi_date]\n        elif len(self.mand_multi_date) == 0:\n            raise ValueError(f\"mand_multi_date must be a non-empty list\")\n        self.mand_multi_date = [v if isinstance(v, XSDDate) else XSDDate(v) for v in self.mand_multi_date]\n\n        if self.opt_date is not None and not isinstance(self.opt_date, XSDDate):\n            self.opt_date = XSDDate(self.opt_date)\n\n        if self.opt_multi_date is None:\n            self.opt_multi_date = []\n        if not isinstance(self.opt_multi_date, list):\n            self.opt_multi_date = [self.opt_multi_date]\n        self.opt_multi_date = [v if isinstance(v, XSDDate) else XSDDate(v) for v in self.opt_multi_date]\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Property Table Format in Markdown\nDESCRIPTION: Markdown table showing additional schema properties like aliases and mappings\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/SchemaDefinition.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Aliases:** | | data dictionary |\n|  | | data model |\n|  | | information model |\n|  | | logical model |\n|  | | schema |\n|  | | model |\n```\n\n----------------------------------------\n\nTITLE: Command Line Usage Example\nDESCRIPTION: Shows how to use import maps with the gen-owl command line tool.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/input/ImportMaps.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> pwd\n  ~/some/local/directory\n> gen-owl https://myserver.org/biolink/linkml.yaml --importmap model_map.json\n```\n\n----------------------------------------\n\nTITLE: Importing SchemaDefinition Class from LinkML Model\nDESCRIPTION: Autodocumentation directive for the SchemaDefinition class from the LinkML metamodel, including all members and undocumented members.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/code/metamodel.rst#2025-04-17_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: SchemaDefinition\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents for Submodules\nDESCRIPTION: Defines a table of contents (toctree) directive that links to three submodules: build, lifecycle, and type_designators. This provides navigation to related documentation pages within the common module.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/common/index.md#2025-04-17_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\nbuild\nlifecycle\ntype_designators\n```\n\n----------------------------------------\n\nTITLE: SPARQL Property Validation Query for Person Class\nDESCRIPTION: SPARQL query that validates that only permitted properties are used with entities of type Person. It checks against a predefined list of allowed properties and flags any usage of properties outside this list.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/sparql.rst#2025-04-17_snippet_1\n\nLANGUAGE: sparql\nCODE:\n```\nSELECT ?g ?s ?p WHERE {\n GRAPH ?g {\n  ?s rdf:type schema:Person ;\n     ?p ?o .\n  FILTER ( ?p NOT IN (\n   schema:email,\n   schema:birthDate,\n   personinfo:age_in_years,\n   schema:gender,\n   personinfo:current_address,\n   personinfo:has_employment_history,\n   personinfo:has_familial_relationships,\n   personinfo:has_medical_history,\n   personinfo:aliases,\n   schema:identifier,\n   schema:name,\n   schema:description,\n   schema:image,\n   rdf:type ))\n }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Applying JSON-LD Context for Idiomatic JSON Representation\nDESCRIPTION: This snippet demonstrates the application of the JSON-LD context to create a more idiomatic JSON representation of the original RDF data.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/using-jsonld.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@context\": {\n    \"ORCID\": \"https://orcid.org/\",\n    \"linkml\": \"https://w3id.org/linkml/\",\n    \"personinfo\": \"https://w3id.org/linkml/examples/personinfo/\",\n    \"schema\": \"http://schema.org/\",\n    \"@vocab\": \"https://w3id.org/linkml/examples/personinfo/\",\n    \"persons\": {\n      \"@type\": \"@id\"\n    },\n    \"age\": {\n      \"@type\": \"xsd:integer\"\n    },\n    \"full_name\": {\n      \"@id\": \"schema:name\"\n    },\n    \"type\": \"@type\",\n    \"id\": \"@id\",\n    \"phone\": {\n      \"@id\": \"schema:telephone\"\n    },\n    \"Person\": {\n      \"@id\": \"schema:Person\"\n    }\n  },\n  \"@graph\": [\n    {\n      \"id\": \"_:b0\",\n      \"type\": \"Container\",\n      \"persons\": [\n        \"ORCID:4567\",\n        \"ORCID:1234\"\n      ]\n    },\n    {\n      \"id\": \"ORCID:1234\",\n      \"type\": \"Person\",\n      \"full_name\": \"Clark Kent\",\n      \"phone\": \"555-555-5555\",\n      \"personinfo:age\": 33\n    },\n    {\n      \"id\": \"ORCID:4567\",\n      \"type\": \"Person\",\n      \"full_name\": \"Lois Lane\",\n      \"personinfo:age\": 34\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Extension Class Attributes in LinkML\nDESCRIPTION: Defines the attributes of the Extension class, including tag, value, and nested extensions. Each attribute is described with its cardinality, description, and range.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/Extension.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Own\n\n * [extension➞tag](extension_tag.md)  <sub>1..1</sub>\n     * Description: a tag associated with an extension\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n * [extension➞value](extension_value.md)  <sub>1..1</sub>\n     * Description: the actual annotation\n     * Range: [AnyValue](AnyValue.md)\n * [extensions](extensions.md)  <sub>0..*</sub>\n     * Description: a tag/text tuple attached to an arbitrary element\n     * Range: [Extension](Extension.md)\n```\n\n----------------------------------------\n\nTITLE: StructuredAlias Class Definition\nDESCRIPTION: Class definition for StructuredAlias which contains attributes for managing aliases including literal form, predicate type, categories and contexts. Incorporates mixins from Expression, Extensible, Annotatable and CommonMetadata.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/StructuredAlias.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [literal_form](literal_form.md)  <sub>1..1</sub>\n    * Description: The literal lexical form of a structured alias; i.e the actual alias value.\n    * Range: [String](types/String.md)\n* [structured_alias➞predicate](alias_predicate.md)  <sub>0..1</sub>\n    * Description: The relationship between an element and its alias.\n    * Range: [alias_predicate_enum](alias_predicate_enum.md)\n* [structured_alias➞categories](structured_alias_categories.md)  <sub>0..*</sub>\n    * Description: The category or categories of an alias.\n    * Range: [Uriorcurie](types/Uriorcurie.md)\n* [structured_alias➞contexts](alias_contexts.md)  <sub>0..*</sub>\n    * Description: The context in which an alias should be applied\n    * Range: [Uri](types/Uri.md)\n```\n\n----------------------------------------\n\nTITLE: Storing Data in SQLite Database using LinkML\nDESCRIPTION: Command to store LinkML schema data in a SQLite database using the linkml-sqldb tool.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial10.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlinkml-sqldb dump -s personinfo.yaml --db persons.db data.yaml\n```\n\n----------------------------------------\n\nTITLE: Property Definition Table in Markdown\nDESCRIPTION: Markdown table defining the properties and metadata for the default_curi_maps slot.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/default_curi_maps.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | BasicSubset |\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Definition - Identifier Property\nDESCRIPTION: Markdown documentation showing the structure and properties of the identifier slot. This includes domain/range information, parent/child relationships, usage contexts, and additional metadata like aliases and constraints.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/identifier.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: identifier\n\nTrue means that the key slot(s) uniquely identifies the elements. There can be at most one identifier or key per container\n\nURI: [linkml:identifier](https://w3id.org/linkml/identifier)\n\n\n## Domain and Range\n\n[SlotDefinition](SlotDefinition.md) &#8594;  <sub>0..1</sub> [Boolean](types/Boolean.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [SlotDefinition](SlotDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Aliases:** | | primary key |\n|  | | ID |\n|  | | UID |\n|  | | code |\n| **Comments:** | | identifier is inherited |\n|  | | a key slot is automatically required.  Identifiers cannot be optional |\n|  | | a given domain can have at most one identifier |\n|  | | identifiers and keys are mutually exclusive.  A given domain cannot have both |\n| **In Subsets:** | | SpecificationSubset |\n|  | | MinimalSubset |\n|  | | BasicSubset |\n|  | | RelationalModelProfile |\n| **See also:** | | [https://en.wikipedia.org/wiki/Identifier](https://en.wikipedia.org/wiki/Identifier) |\n|  | | [linkml:unique_keys](linkml:unique_keys) |\n```\n\n----------------------------------------\n\nTITLE: GraphQL Type Definition with Inheritance in LinkML\nDESCRIPTION: Example of GraphQL type definition for a Person that implements the HasAliases interface, showing how LinkML inheritance is represented in GraphQL.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/graphql.rst#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Person implements HasAliases\n  {\n    id: String!\n    name: String\n    description: String\n    image: String\n    primaryEmail: String\n    birthDate: String\n    ageInYears: Integer\n    gender: GenderType\n    currentAddress: Address\n    hasEmploymentHistory: [EmploymentEvent]\n    hasFamilialRelationships: [FamilialRelationship]\n    hasMedicalHistory: [MedicalEvent]\n    aliases: [String]\n  }\n```\n\n----------------------------------------\n\nTITLE: Loading Context as Plain JSON-LD Object\nDESCRIPTION: This Python code demonstrates loading the monarch context as a plain JSON-LD object and printing entries for BIOGRID and CHEBI prefixes.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/context_issue.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nctxt_str = fetch_pc_context('monarch_context')\nctxt = loads(ctxt_str)\nprint(f\"Entry for BIOGRID is {ctxt['@context'].BIOGRID}\")\nprint(f\"Entry for CHEBI is {ctxt['@context'].CHEBI}\")\n```\n\n----------------------------------------\n\nTITLE: Generated Python Class for Integer Attributes\nDESCRIPTION: Example of a generated Python class with various integer attribute permutations.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Integers(YAMLRoot):\n    \"\"\"\n    various permutations of the integer type\n    \"\"\"\n\n    mand_integer: int = None\n    mand_multi_integer: Union[int, List[int]] = None\n    opt_integer: Optional[int] = None\n    opt_multi_integer: Optional[Union[int, List[int]]] = empty_list()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.mand_integer is None:\n            raise ValueError(\"mand_integer must be supplied\")\n        if not isinstance(self.mand_integer, int):\n            self.mand_integer = int(self.mand_integer)\n\n        if self.mand_multi_integer is None:\n            raise ValueError(\"mand_multi_integer must be supplied\")\n        elif not isinstance(self.mand_multi_integer, list):\n            self.mand_multi_integer = [self.mand_multi_integer]\n        elif len(self.mand_multi_integer) == 0:\n            raise ValueError(f\"mand_multi_integer must be a non-empty list\")\n        self.mand_multi_integer = [v if isinstance(v, int) else int(v) for v in self.mand_multi_integer]\n\n        if self.opt_integer is not None and not isinstance(self.opt_integer, int):\n            self.opt_integer = int(self.opt_integer)\n\n        if self.opt_multi_integer is None:\n            self.opt_multi_integer = []\n        if not isinstance(self.opt_multi_integer, list):\n            self.opt_multi_integer = [self.opt_multi_integer]\n        self.opt_multi_integer = [v if isinstance(v, int) else int(v) for v in self.opt_multi_integer]\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Setting Top-Level Schema Name\nDESCRIPTION: This snippet shows how to set the top-level schema name in a LinkML schema file using yq.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/yq-for-schemas.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ yq e '.name = \"NEW NAME\"' personinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining EnumBinding Class in LinkML YAML\nDESCRIPTION: YAML representation of the EnumBinding class, including its attributes, relationships, and metadata. This class is used to bind slots or classes to enumeration values and includes various properties for specifying the binding details and common metadata.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/EnumBinding.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: enum_binding\nuri: https://w3id.org/linkml/EnumBinding\ndescription: A binding of a slot or a class to a permissible value from an enumeration.\nattributes:\n  range:\n    range: EnumDefinition\n    description: defines the type of the object of the slot\n  obligation_level:\n    range: obligation_level_enum\n    description: The level of obligation or recommendation strength for a metadata element\n  binds_value_of:\n    range: string\n    description: A path to a slot that is being bound to a permissible value from an enumeration\n  pv_formula:\n    range: pv_formula_options\n    description: Defines the specific formula to be used to generate the permissible values\nmixins:\n  - Extensible\n  - Annotatable\n  - CommonMetadata\n```\n\n----------------------------------------\n\nTITLE: Defining has_status Slot URI in LinkML\nDESCRIPTION: URI definition for the has_status slot that maps to a String type with 0..1 cardinality. The slot is used by MetricResult and MetricResultChild classes.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue179/has_status.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: has status\n\nURI: [http://example.org/sample/example1/has_status](http://example.org/sample/example1/has_status)\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n## Children\n\n## Used by\n\n * [MetricResult](MetricResult.md)\n * [MetricResultChild](MetricResultChild.md)\n```\n\n----------------------------------------\n\nTITLE: LinkML Model Compilation Helper Function\nDESCRIPTION: Utility function to compile LinkML models to Python code with options for model generation and code printing.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/enumerations.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml.generators.pythongen import PythonGenerator\nfrom linkml_runtime.utils.compile_python import compile_python\nfrom linkml_runtime.linkml_model import SchemaDefinition\n\ndef compile_model(model: str, print_python: bool=False) -> SchemaDefinition:\n    gen = PythonGenerator(model, mergeimports=False, gen_classvars=False, gen_slots=False)\n    code = gen.serialize()\n    if print_python:\n        print(code)\n    return compile_python(code)\n```\n\n----------------------------------------\n\nTITLE: Defining Common Metadata Properties in Markdown\nDESCRIPTION: Documentation of various metadata properties including mapping relationships (close, related, narrow, broad), creation and modification tracking (created_by, contributors, created_on, last_updated_on, modified_by), and organizational metadata (status, rank, keywords).\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/StructuredAlias.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | skosxl:Label |\n```\n\n----------------------------------------\n\nTITLE: Importing RDFLibDumper Class for RDF Serialization in Python\nDESCRIPTION: This snippet shows the import of RDFLibDumper from linkml_runtime.dumpers. RDFLibDumper is used for serializing Python objects into RDF format.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/loaders-and-dumpers.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml_runtime.dumpers import RDFLibDumper\n```\n\n----------------------------------------\n\nTITLE: Importing ClassDefinition Class from LinkML Model\nDESCRIPTION: Autodocumentation directive for the ClassDefinition class from the LinkML metamodel, including all members and undocumented members.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/code/metamodel.rst#2025-04-17_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ClassDefinition\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: JSON Schema representation of inlined slot\nDESCRIPTION: JSON Schema representation of an inlined multivalued slot using $ref to reference the target class definition.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/json-schema.rst#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"has_employment_history\": {\n   \"items\": {\n      \"$ref\": \"#/definitions/EmploymentEvent\"\n   },\n   \"type\": \"array\"\n},\n```\n\n----------------------------------------\n\nTITLE: Defining Curie Type in LinkML Markdown\nDESCRIPTION: This snippet defines the Curie type in LinkML, specifying its URI, root type, representation, and additional properties. It's represented as a string and must be expanded to a URI in RDF serializations.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/types/Curie.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: curie\n\na compact URI\n\nURI: [linkml:Curie](https://w3id.org/linkml/Curie)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **Curie** |\n| Representation | | str |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | in RDF serializations this MUST be expanded to a URI |\n|  | | in non-RDF serializations MAY be serialized as the compact representation |\n```\n\n----------------------------------------\n\nTITLE: String Serialization in LinkML Schema\nDESCRIPTION: Shows how to specify string serialization rules for generating composite values from multiple slots.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/constraints.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Person:\n    attributes:\n      first:\n      last:\n      full:\n        string_serialization: \"{first} {last}\"\n```\n\n----------------------------------------\n\nTITLE: Defining OptionalMultivaluedInlinedIdentifiedThreeElementRangeList in YAML\nDESCRIPTION: YAML definition for an optional multivalued inlined identified three-element class represented as an inlined dictionary.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nOptionalMultivaluedInlinedIdentifiedThreeElementRangeList:\n    description: 2.4(o) Range is an optional identified three element class that is represented as an inlined dictionary\n    attributes:\n      v1:\n        range: IdentifiedThreeElementClass\n        multivalued: true\n        inlined: true\n```\n\n----------------------------------------\n\nTITLE: Defining LinkML Slot for Deprecated Element Replacement\nDESCRIPTION: Markdown definition of a LinkML slot that allows specifying a URI or CURIE to exactly replace a deprecated element. The slot has a domain of None, a range of 0..1 Uriorcurie, and maps to the IAO:0100001 ontology term.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/deprecated_element_has_exact_replacement.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: deprecated element has exact replacement\n\nWhen an element is deprecated, it can be automatically replaced by this uri or curie\n\nURI: [linkml:deprecated_element_has_exact_replacement](https://w3id.org/linkml/deprecated_element_has_exact_replacement)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [Uriorcurie](types/Uriorcurie.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | IAO:0100001 |\n```\n\n----------------------------------------\n\nTITLE: Defining 'syntax' Slot in LinkML\nDESCRIPTION: This markdown snippet defines the 'syntax' slot in LinkML. It specifies that the slot is used for regular expressions that string values must conform to. The slot has a domain of PatternExpression and a range of String, with a cardinality of 0..1.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/syntax.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: syntax\n\nthe string value of the slot must conform to this regular expression expressed in the string. May be interpolated.\n\nURI: [linkml:syntax](https://w3id.org/linkml/syntax)\n\n\n## Domain and Range\n\n[PatternExpression](PatternExpression.md) &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [PatternExpression](PatternExpression.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: Generating LinkML CLI Documentation using Sphinx\nDESCRIPTION: This code snippet uses Sphinx's click directive to automatically generate documentation for the 'linkml generate' CLI command. It includes both a summary and a full nested documentation of all options and subcommands.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/cli/generate.md#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. click:: linkml.cli.main:generate\n    :prog: linkml generate\n\n```\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. click:: linkml.cli.main:generate\n    :prog: linkml generate (full)\n    :nested: full\n\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Type Properties in LinkML Schema\nDESCRIPTION: This snippet defines the properties of the Integer type in LinkML. It specifies the URI, root builtin type, and exact mappings to other schemas.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/types/Integer.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: integer\n\nAn integer\n\nURI: [linkml:Integer](https://w3id.org/linkml/Integer)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **int** |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Integer |\n```\n\n----------------------------------------\n\nTITLE: Example YAML with Imports\nDESCRIPTION: Example YAML file showing how imports would be resolved with and without import mapping.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/input/ImportMaps.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nprefixes:\n  linkml: https://w3id.org/linkml/\n\nimports:\n  - linkml:types\n  - includes/mappings\n  -   ...\n```\n\n----------------------------------------\n\nTITLE: SchemaView Module Import Path\nDESCRIPTION: Module path specification for importing the SchemaView class from linkml-runtime utilities.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/schemaview.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml_runtime.utils.schemaview import SchemaView\n```\n\n----------------------------------------\n\nTITLE: Generating Python Classes for Inherited Types\nDESCRIPTION: This Python code snippet shows the generated classes for inherited types, including type class URIs and model URIs.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass InheritedType(Integer):\n    type_class_uri = XSD.integer\n    type_class_curie = \"xsd:integer\"\n    type_name = \"InheritedType\"\n    type_model_uri = PTYPES.InheritedType\n\n\nclass InheritedType2(Uriorcurie):\n    type_class_uri = XSD.anyURI\n    type_class_curie = \"xsd:anyURI\"\n    type_name = \"InheritedType2\"\n    type_model_uri = PTYPES.InheritedType2\n\n\nclass InheritedType3(InheritedType2):\n    type_class_uri = XSD.anyURI\n    type_class_curie = \"xsd:anyURI\"\n    type_name = \"InheritedType3\"\n    type_model_uri = PTYPES.InheritedType3\n```\n\n----------------------------------------\n\nTITLE: MedicalEvent ER Diagram in Mermaid Syntax\nDESCRIPTION: Example mermaid syntax for an ER diagram showing MedicalEvent and related classes with their attributes and relationships.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/erdiagram.rst#2025-04-17_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\nMedicalEvent {\n    date started_at_time\n    date ended_at_time\n    float duration\n    boolean is_current\n}\nProcedureConcept {\n    string id\n    string name\n    string description\n    string image\n}\nDiagnosisConcept {\n    string id\n    string name\n    string description\n    string image\n}\n\nMedicalEvent ||--|o Place : \"in_location\"\nMedicalEvent ||--|o DiagnosisConcept : \"diagnosis\"\nMedicalEvent ||--|o ProcedureConcept : \"procedure\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Prefix Keys from LinkML Schema\nDESCRIPTION: This snippet demonstrates how to retrieve only the keys of the prefixes from a LinkML schema file using yq.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/yq-for-schemas.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n✗ yq e '.prefixes | keys' personinfo.yaml | less\n```\n\n----------------------------------------\n\nTITLE: Validation Error Output\nDESCRIPTION: Error message showing invalid enum value validation failure.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial06.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[ERROR] [data.yaml/0] 'UNDEAD' is not one of ['ALIVE', 'DEAD', 'UNKNOWN'] in /persons/1/status\n```\n\n----------------------------------------\n\nTITLE: Defining 'has_source' Slot in LinkML\nDESCRIPTION: This snippet defines the 'has_source' slot in LinkML. It specifies the URI, domain and range (String type with 0..1 cardinality), and lists the classes that use this slot.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue179/has_source.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: has source\n\nURI: [http://example.org/sample/example1/has_source](http://example.org/sample/example1/has_source)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [DownloadProblem](DownloadProblem.md)\n * [MetricResult](MetricResult.md)\n * [MetricResultChild](MetricResultChild.md)\n```\n\n----------------------------------------\n\nTITLE: Implementing Required One Element Range Class in Python\nDESCRIPTION: Python dataclass implementation of a required class containing one non-key/non-identifier element. Enforces value presence and handles type coercion.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass RequiredOneElementRange(YAMLRoot):\n    \"\"\"\n    Range is a required class that contains one non-key/non-identifier element\n    \"\"\"\n    ...\n\n    v1: Union[dict, OneElementClass] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        if not isinstance(self.v1, OneElementClass):\n            self.v1 = OneElementClass(**self.v1)\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: YUML Class Diagram for MatchQuery\nDESCRIPTION: UML class diagram showing the relationship between MatchQuery and EnumExpression classes, including attributes like identifier_pattern and source_ontology.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/MatchQuery.md#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\n[EnumExpression]++-%20matches%200..1>[MatchQuery&#124;identifier_pattern:string%20%3F;source_ontology:uriorcurie%20%3F],[EnumExpression]\n```\n\n----------------------------------------\n\nTITLE: String Serialization Inference in Python\nDESCRIPTION: Demonstrates how to use inference_utils to populate string serialized values in an Address object.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/inference.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml_runtime.utils.inference_utils import infer_all_slot_values\nfrom .personinfo infer Address\n\na = Address(street=\"1 Oak street\", city=\"Oaktown\")\ninfer_all_slot_values(p, schemaview=sv)\nprint(a.full_address)\n```\n\n----------------------------------------\n\nTITLE: Initializing OptionalMultivaluedInlinedListIdentifiedThreeElementRange in Python\nDESCRIPTION: Demonstrates the initialization of an OptionalMultivaluedInlinedListIdentifiedThreeElementRange object with a list of dictionaries representing identified three-element classes.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nktec_examples = OptionalMultivaluedInlinedListIdentifiedThreeElementRange(\n    [ {name: 'element1', value: 17, modifier: \"2012-03-11\"},\n      {name: KeyedThreeElementClassKey('element2')},\n      {name: 'element3', value: 42}\n    ]  \n)\n```\n\n----------------------------------------\n\nTITLE: Defining Date Type in LinkML (Markdown)\nDESCRIPTION: This snippet defines the Date type in LinkML, specifying its URI, root type (XSDDate), and string representation. It represents a date with year, month, and day in an idealized calendar.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/types/Date.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: date\n\n\na date (year, month and day) in an idealized calendar\n\nURI: [linkml:Date](https://w3id.org/linkml/Date)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **XSDDate** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Class Definition - PatternExpression\nDESCRIPTION: UML diagram showing relationships and attributes of the PatternExpression class including its mixins (Extensible, Annotatable, CommonMetadata) and attributes like syntax, interpolated, and partial_match.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/PatternExpression.md#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\n[SubsetDefinition],[StructuredAlias],[TypeExpression]++-%20structured_pattern%200..1>[PatternExpression&#124;syntax:string%20%3F;interpolated:boolean%20%3F;partial_match:boolean%20%3F;description:string%20%3F;title:string%20%3F;deprecated:string%20%3F;todos:string%20*;notes:string%20*;comments:string%20*;from_schema:uri%20%3F;imported_from:string%20%3F;source:uriorcurie%20%3F;in_language:string%20%3F;see_also:uriorcurie%20*;deprecated_element_has_exact_replacement:uriorcurie%20%3F;deprecated_element_has_possible_replacement:uriorcurie%20%3F;aliases:string%20*;mappings:uriorcurie%20*;exact_mappings:uriorcurie%20*;close_mappings:uriorcurie%20*;related_mappings:uriorcurie%20*;narrow_mappings:uriorcurie%20*;broad_mappings:uriorcurie%20*;created_by:uriorcurie%20%3F;contributors:uriorcurie%20*;created_on:datetime%20%3F;last_updated_on:datetime%20%3F;modified_by:uriorcurie%20%3F;status:uriorcurie%20%3F;rank:integer%20%3F;categories:uriorcurie%20*;keywords:string%20*],[SlotExpression]++-%20structured_pattern%200..1>[PatternExpression],[PatternExpression]uses%20-.->[Extensible],[PatternExpression]uses%20-.->[Annotatable],[PatternExpression]uses%20-.->[CommonMetadata],[TypeExpression],[SlotExpression],[Extension],[Extensible],[Example],[Definition],[CommonMetadata],[Annotation],[Annotatable],[AltDescription]\n```\n\n----------------------------------------\n\nTITLE: Defining DateOrDatetime Type in LinkML YAML\nDESCRIPTION: This snippet defines the DateOrDatetime type in LinkML. It specifies the type's URI, root builtin type as str, and representation as str. This type can be used to represent either a date or a datetime value in LinkML schemas.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/types/DateOrDatetime.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Type: date_or_datetime\n\nEither a date or a datetime\n\nURI: [linkml:DateOrDatetime](https://w3id.org/linkml/DateOrDatetime)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Defining 'shared' Slot in LinkML (Markdown)\nDESCRIPTION: This snippet defines the 'shared' slot for SlotDefinition in LinkML. It specifies that the slot is of Boolean type, has a range of 0 to 1, and is used by SlotDefinition. It also includes aliases and subset information.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/shared.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: shared\n\nIf True, then the relationship between the slot domain and range is many to one or many to many\n\nURI: [linkml:shared](https://w3id.org/linkml/shared)\n\n\n## Domain and Range\n\n[SlotDefinition](SlotDefinition.md) &#8594;  <sub>0..1</sub> [Boolean](types/Boolean.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [SlotDefinition](SlotDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Aliases:** | | inverse functional |\n|  | | many to one or many |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: Defining Keywords Property in LinkML\nDESCRIPTION: Specifies the 'keywords' property for LinkML elements. It allows listing keywords or tags used to describe the element.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/AnonymousExpression.md#2025-04-17_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n * [keywords](keywords.md)  <sub>0..\\*</sub>\n     * Description: Keywords or tags used to describe the element\n     * Range: [String](types/String.md)\n     * in subsets: (BasicSubset)\n```\n\n----------------------------------------\n\nTITLE: Defining String Type in LinkML Markdown\nDESCRIPTION: This snippet defines the String type in LinkML. It specifies the type as a character string, provides its URI, and indicates that its root builtin type is 'str'.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/types/String.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: string\n\n\nA character string\n\nURI: [linkml:String](https://w3id.org/linkml/String)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Definition - disjoint_with Property\nDESCRIPTION: Markdown documentation outlining the disjoint_with property which specifies that two slots cannot share instances. The slot has a domain of SlotDefinition, a range of multiple SlotDefinitions, and inherits from a base disjoint_with property.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/slot_definition_disjoint_with.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: disjoint_with\n\nTwo classes are disjoint if they have no instances in common, two slots are disjoint if they can never hold between the same two instances\n\nURI: [linkml:slot_definition_disjoint_with](https://w3id.org/linkml/slot_definition_disjoint_with)\n\n\n## Domain and Range\n\n[SlotDefinition](SlotDefinition.md) &#8594;  <sub>0..\\*</sub> [SlotDefinition](SlotDefinition.md)\n\n## Parents\n\n *  is_a: [disjoint_with](disjoint_with.md)\n\n## Children\n\n\n## Used by\n\n * [SlotDefinition](SlotDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: Building LinkML Project\nDESCRIPTION: Commands to navigate to the project directory and run the setup process using make.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/linkml-project-cookiecutter.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd linkml-projects/my-awesome-schema  # using the folder example above\nmake setup\n```\n\n----------------------------------------\n\nTITLE: Generating Python Dataclass for Optional List of Elements\nDESCRIPTION: Python code generated for an optional list of OneElementClass instances. It handles None values, single instances, and lists, with type coercion for each element.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OptionalOneElementRangeList(YAMLRoot):\n    \"\"\"\n    Range is a optional list of a class that contain one non-key/non-identifier element\n    \"\"\"\n    ...\n\n    v1: Optional[Union[Union[dict, OneElementClass], List[Union[dict, OneElementClass]]]] = empty_list()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            self.v1 = []\n        if not isinstance(self.v1, list):\n            self.v1 = [self.v1]\n        self.v1 = [v if isinstance(v, OneElementClass) else OneElementClass(**v) for v in self.v1]\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: YUML Class Diagram Declaration\nDESCRIPTION: UML class diagram showing Extension class relationships with Extensible and AnyValue classes, including cardinality and attribute definitions.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/Extension.md#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\n[Extension]<extensions%200..*-++[Extension&#124;tag(pk):uriorcurie],[AnyValue]<value%201..1-++[Extension],[Extensible],[AnyValue]\n```\n\n----------------------------------------\n\nTITLE: Defining Multivalued Slots in YAML for Different Cases\nDESCRIPTION: YAML schema definitions for cases 2.1 and 2.2, showing multivalued slots with and without keys/identifiers, in both optional and required variations.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nOptionalMultivaluedThreeElementRange:\n    description: Case 2.1(o) -- multivalued optional slot - range has no key or identifier\n    attributes:\n      v1:\n        range: ThreeElementClass\n        multivalued: true\n\n  RequiredMultivaluedThreeElementRange:\n    description: Case 2.1(r) -- multivalued optional slot - range has no key or identifier\n    attributes:\n      v1:\n        range: ThreeElementClass\n        multivalued: true\n        required: true\n\n  OptionalMultivaluedKeyedThreeElementRange:\n    description: Case 2.2(o) -- multivalued optional slot - range has a key\n    attributes:\n      v1:\n        range: KeyedThreeElementClass\n        multivalued: true\n\n  RequiredMultivaluedIdentifiedThreeElementRange:\n    description: Case 2.2(r) -- multivalued optional slot - range has an identifier\n    attributes:\n      v1:\n        range: IdentifiedThreeElementClass\n        multivalued: true\n        required: true\n```\n\n----------------------------------------\n\nTITLE: Defining LinkML Slot Properties - Founding Date\nDESCRIPTION: Markdown documentation defining the founding_date slot, its URI, domain/range constraints, and usage context within Organization entities. The slot accepts a String value with 0..1 cardinality.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/founding_date.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: founding_date\n\nURI: [personinfo:founding_date](https://w3id.org/linkml/examples/personinfo/founding_date)\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n## Children\n\n## Used by\n\n * [Organization](Organization.md)\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot URI Definition in Markdown\nDESCRIPTION: Defines the URI for the result_child_slot in the example1 namespace, specifying its domain as Problem class with a String range, having 0..1 cardinality.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue179/result_child_slot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nURI: [http://example.org/sample/example1/result_child_slot](http://example.org/sample/example1/result_child_slot)\n```\n\n----------------------------------------\n\nTITLE: Building Java Classes and Creating JAR File\nDESCRIPTION: Commands to download the Lombok library, compile the generated Java classes with Lombok as a dependency, and package them into a JAR file.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/java.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -OJ https://repo1.maven.org/maven2/org/projectlombok/lombok/1.18.20/lombok-1.18.20.jar\njavac org/biolink/model/*.java -cp lombok-1.18.20.jar\njar -cf biolink-model.jar org\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Definition Markdown\nDESCRIPTION: Markdown documentation for the transitive_form_of slot definition, specifying its properties, relationships, and usage constraints.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/transitive_form_of.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: transitive_form_of\n\nIf s transitive_form_of d, then (1) s holds whenever d holds (2) s is transitive (3) d holds whenever s holds and there are no intermediates, and s is not reflexive\n\nURI: [linkml:transitive_form_of](https://w3id.org/linkml/transitive_form_of)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [SlotDefinition](SlotDefinition.md)\n\n## Parents\n\n\n## Children\n\n *  [reflexive_transitive_form_of](reflexive_transitive_form_of.md)\n\n## Used by\n\n * [SlotDefinition](SlotDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | Example: ancestor_of is the transitive_form_of parent_of |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: Example ShEx Shapes for LinkML Schema Translation\nDESCRIPTION: Sample ShEx output showing how LinkML schema elements are translated to ShEx shapes. This example includes shape definitions for NamedThing and Person classes with their properties and constraints.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/shex.rst#2025-04-17_snippet_1\n\nLANGUAGE: shex\nCODE:\n```\n<NamedThing>  (\n    CLOSED {\n       (  $<NamedThing_tes> (  schema:name @linkml:String ? ;\n             schema:description @linkml:String ? ;\n             schema:image @linkml:String ?\n          ) ;\n          rdf:type [ <NamedThing> ]\n       )\n    } OR @<Concept> OR @<Organization> OR @<Person>\n)    \n<Person> CLOSED {\n    (  $<Person_tes> (  &<NamedThing_tes> ;\n          rdf:type [ <NamedThing> ] ? ;\n          &<HasAliases_tes> ;\n          rdf:type [ <HasAliases> ] ? ;\n          <primary_email> @linkml:String ? ;\n          schema:birthDate @linkml:String ? ;\n          <age_in_years> @linkml:Integer ? ;\n          schema:gender @<GenderType> ? ;\n          <current_address> @<Address> ? ;\n          <has_employment_history> @<EmploymentEvent> * ;\n          <has_familial_relationships> @<FamilialRelationship> * ;\n          <has_medical_history> @<MedicalEvent> * ;\n          <aliases> @linkml:String *\n       ) ;\n       rdf:type [ schema:Person ]\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Address Class Structure in YUML\nDESCRIPTION: UML class diagram showing the Address class structure with its attributes (street, city, postal_code) and its relationship to the Person class via current_address.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/Address.md#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\n[Person]++-%20current_address%200..1>[Address&#124;street:string%20%3F;city:string%20%3F;postal_code:string%20%3F],[Person]\n```\n\n----------------------------------------\n\nTITLE: Downloading Biolink Model and Setting Up LinkML Environment\nDESCRIPTION: Commands to download the Biolink Model YAML file, create and activate a Python virtual environment, and install LinkML.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/java.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -OJ https://raw.githubusercontent.com/biolink/biolink-model/master/biolink-model.yaml\npython3 -m venv venv\nsource venv/bin/activate\npip install linkml\n```\n\n----------------------------------------\n\nTITLE: Defining 'employed_at' Slot in LinkML Schema using Markdown\nDESCRIPTION: This snippet defines the 'employed_at' slot in a LinkML schema. It specifies the URI, domain and range (None to Organization), and indicates that it is used by the EmploymentEvent class.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/employed_at.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: employed_at\n\n\n\n\nURI: [personinfo:employed_at](https://w3id.org/linkml/examples/personinfo/employed_at)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [Organization](Organization.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [EmploymentEvent](EmploymentEvent.md)\n```\n\n----------------------------------------\n\nTITLE: Defining URI Type Structure in LinkML\nDESCRIPTION: Specification of the URI type that represents complete URIs. The type is mapped to string representation and includes special handling for RDF serialization when used as identifiers or references.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/types/Uri.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: uri\n\na complete URI\n\nURI: [linkml:Uri](https://w3id.org/linkml/Uri)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **URI** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Pointer Type in LinkML Markdown\nDESCRIPTION: This snippet defines the jsonpointer type in LinkML. It specifies that the type is a string representation of a JSON Pointer, which must conform to JSON Pointer syntax and should dereference to a valid object within the current instance document when encoded in tree form.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/types/types/Jsonpointer.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: jsonpointer\n\nA string encoding a JSON Pointer. The value of the string MUST conform to JSON Point syntax and SHOULD dereference to a valid object within the current instance document when encoded in tree form.\n\nURI: [linkml:Jsonpointer](https://w3id.org/linkml/Jsonpointer)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: SPARQL Property Path Type Specification in Markdown\nDESCRIPTION: Defines the sparqlpath type which extends the built-in string type to represent SPARQL Property Paths. Includes URI reference and type constraints.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/types/Sparqlpath.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: sparqlpath\n\nA string encoding a SPARQL Property Path. The value of the string MUST conform to SPARQL syntax and SHOULD dereference to zero or more valid objects within the current instance document when encoded as RDF.\n\nURI: [linkml:Sparqlpath](https://w3id.org/linkml/Sparqlpath)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated Slot 'subclass_of' in Markdown\nDESCRIPTION: This markdown snippet defines the deprecated 'subclass_of' slot, specifying its URI, domain and range, usage, and mapping to rdfs:subClassOf.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/subclass_of.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: ~~subclass_of~~ _(deprecated)_\n\nDEPRECATED -- rdfs:subClassOf to be emitted in OWL generation\n\nURI: [linkml:subclass_of](https://w3id.org/linkml/subclass_of)\n\n\n## Domain and Range\n\n[ClassDefinition](ClassDefinition.md) &#8594;  <sub>0..1</sub> [Uriorcurie](types/Uriorcurie.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [ClassDefinition](ClassDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Close Mappings:** | | rdfs:subClassOf |\n```\n\n----------------------------------------\n\nTITLE: Defining Categories Property in LinkML\nDESCRIPTION: Specifies the 'categories' property for LinkML elements. It allows listing controlled terms used to categorize an element.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/AnonymousExpression.md#2025-04-17_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n * [categories](categories.md)  <sub>0..\\*</sub>\n     * Description: Controlled terms used to categorize an element.\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n     * in subsets: (BasicSubset)\n```\n\n----------------------------------------\n\nTITLE: LinkML Datetime Type Specification Table\nDESCRIPTION: Markdown table defining the datetime type properties including its root type (XSDDateTime) and string representation format.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/types/Datetime.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **XSDDateTime** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Defining DateOrDatetime Type in LinkML\nDESCRIPTION: Type definition for a value that can be either a date or datetime format. The type is built on the root string type and maintains string representation for flexibility in date/time handling.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/types/types/DateOrDatetime.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: date_or_datetime\n\nEither a date or a datetime\n\nURI: [linkml:DateOrDatetime](https://w3id.org/linkml/DateOrDatetime)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Defining TypeMapping Class in LinkML YAML\nDESCRIPTION: YAML definition of the TypeMapping class, specifying its URI, attributes, and relationships. It includes mixins for extensibility, annotation, and common metadata.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/TypeMapping.md#2025-04-17_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# Class: type_mapping\n\nRepresents how a slot or type can be serialized to a format.\n\nURI: [linkml:TypeMapping](https://w3id.org/linkml/TypeMapping)\n\n## Uses Mixin\n\n *  mixin: [Extensible](Extensible.md) - mixin for classes that support extension\n *  mixin: [Annotatable](Annotatable.md) - mixin for classes that support annotations\n *  mixin: [CommonMetadata](CommonMetadata.md) - Generic metadata shared across definitions\n\n## Referenced by Class\n\n *  **None** *[type_mappings](type_mappings.md)*  <sub>0..*</sub>  **[TypeMapping](TypeMapping.md)**\n\n## Attributes\n\n\n### Own\n\n * [➞framework](framework_key.md)  <sub>1..1</sub>\n     * Description: The name of a format that can be used to serialize LinkML data. The string value should be a code from the LinkML frameworks vocabulary, but this is not strictly enforced\n     * Range: [String](types/String.md)\n * [➞type](mapped_type.md)  <sub>0..1</sub>\n     * Description: type to coerce to\n     * Range: [TypeDefinition](TypeDefinition.md)\n * [string_serialization](string_serialization.md)  <sub>0..1</sub>\n     * Description: Used on a slot that stores the string serialization of the containing object. The syntax follows python formatted strings, with slot names enclosed in {}s. These are expanded using the values of those slots.\n     * Range: [String](types/String.md)\n     * in subsets: (SpecificationSubset)\n```\n\n----------------------------------------\n\nTITLE: Invalid Key Usage Example\nDESCRIPTION: Python example demonstrating a scenario where type checking would fail due to a mismatch between key types, showing how LinkML enforces type safety.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nitc = IdentifiedThreeElementClass('entry1', 17)\nktec_examples: OptionalMultivaluedInlinedListIdentifiedThreeElementRange = {\n    itc.name: {value: 42}\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-LD Serialization of a Person Instance\nDESCRIPTION: This snippet demonstrates the JSON-LD serialization of a Person instance, including the '@context' for semantic interpretation.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_notebooks/output/examples.txt#2025-04-17_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"42\",\n  \"last_name\": \"smith\",\n  \"first_name\": [\n    \"Joe\",\n    \"Bob\"\n  ],\n  \"age\": 43,\n  \"@type\": \"Person\",\n  \"@context\": {\n    \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n    \"foaf\": \"http://xmlns.com/foaf/0.1/\",\n    \"samp\": \"http://example.org/model/\",\n    \"@vocab\": \"http://example.org/model/\",\n    \"age\": {\n      \"@type\": \"xsd:integer\",\n      \"@id\": \"foaf:age\"\n    },\n    \"first_name\": {\n      \"@id\": \"foaf:firstName\"\n    },\n    \"id\": \"@id\",\n    \"knows\": {\n      \"@type\": \"@id\",\n      \"@id\": \"foaf:knows\"\n    },\n    \"last_name\": {\n      \"@id\": \"foaf:lastName\"\n    },\n    \"living\": {\n      \"@type\": \"xsd:boolean\",\n      \"@id\": \"living\"\n    },\n    \"@base\": \"http://example.org/people/\",\n    \"FriendlyPerson\": {\n      \"@id\": \"FriendlyPerson\"\n    },\n    \"Person\": {\n      \"@id\": \"Person\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Python for Multivalued Slots - Cases 2.1 and 2.2\nDESCRIPTION: Python dataclasses generated for cases 2.1 and 2.2, showing type handling, validation, and post-initialization processing for multivalued slots with different configurations.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OptionalMultivaluedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 2.1(o) -- multivalued optional slot - range has no key or identifier\n    \"\"\"\n    ...\n    v1: Optional[Union[Union[dict, ThreeElementClass], List[Union[dict, ThreeElementClass]]]] = empty_list()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            self.v1 = []\n        if not isinstance(self.v1, list):\n            self.v1 = [self.v1]\n        self.v1 = [v if isinstance(v, ThreeElementClass) else ThreeElementClass(**v) for v in self.v1]\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass RequiredMultivaluedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 2.1(r) -- multivalued optional slot - range has no key or identifier\n    \"\"\"\n    ...\n    v1: Union[Union[dict, ThreeElementClass], List[Union[dict, ThreeElementClass]]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        elif not isinstance(self.v1, list):\n            self.v1 = [self.v1]\n        elif len(self.v1) == 0:\n            raise ValueError(f\"v1 must be a non-empty list\")\n        self.v1 = [v if isinstance(v, ThreeElementClass) else ThreeElementClass(**v) for v in self.v1]\n\n        super().__post_init__(**kwargs)\n\n@dataclass\nclass OptionalMultivaluedKeyedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 2.2(o) -- multivalued optional slot - range has a key\n    \"\"\"\n    ...\n    v1: Optional[Union[Union[str, KeyedThreeElementClassName], List[Union[str, KeyedThreeElementClassName]]]] = empty_list()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            self.v1 = []\n        if not isinstance(self.v1, list):\n            self.v1 = [self.v1]\n        self.v1 = [v if isinstance(v, KeyedThreeElementClassName) else KeyedThreeElementClassName(v) for v in self.v1]\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass RequiredMultivaluedIdentifiedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 2.2(r) -- multivalued required slot - range has an identifier\n    \"\"\"\n    ...\n    v1: Union[Union[str, IdentifiedThreeElementClassName], List[Union[str, IdentifiedThreeElementClassName]]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        elif not isinstance(self.v1, list):\n            self.v1 = [self.v1]\n        elif len(self.v1) == 0:\n            raise ValueError(f\"v1 must be a non-empty list\")\n        self.v1 = [v if isinstance(v, IdentifiedThreeElementClassName) else IdentifiedThreeElementClassName(v) for v in self.v1]\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Defining primary_email Slot in LinkML\nDESCRIPTION: This snippet defines the 'primary_email' slot in LinkML. It specifies the URI, domain and range, parent-child relationships, and a schema.org mapping for the email property.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/primary_email.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: primary_email\n\n\n\n\nURI: [personinfo:primary_email](https://w3id.org/linkml/examples/personinfo/primary_email)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n\n## Children\n\n *  [Person➞primary_email](Person_primary_email.md)\n\n## Used by\n\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | schema:email |\n```\n\n----------------------------------------\n\nTITLE: Defining Inlined List Multivalued Slots in YAML - Case 2.3\nDESCRIPTION: YAML schema definitions for case 2.3, demonstrating multivalued slots configured with inlined_as_list set to true, for both optional and required variations.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n  OptionalMultivaluedInlinedListIdentifiedThreeElementRange:\n    description: 2.3(o) Range is an optional identified three element class that is represented as an inlined list\n    attributes:\n      v1:\n        range: IdentifiedThreeElementClass\n        multivalued: true\n        inlined_as_list: true\n\n\n  RequiredMultivaluedInlinedListKeyedThreeElementRangeList:\n    description: 2.3(r) Range is a required keyed three element class that is represented as an inlined list\n    attributes:\n      v1:\n        range: KeyedThreeElementClass\n        multivalued: true\n        inlined_as_list: true\n        required: true\n```\n\n----------------------------------------\n\nTITLE: Example Data for No Inlining in YAML\nDESCRIPTION: This snippet demonstrates how data is represented when using reference by key (no inlining). The has_subtypes attribute contains a list of reference strings.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/inlining.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- id: NCBITaxon:40674\n  name: mammals\n  has_subtypes:\n    - NCBITaxon:9443\n    - NCBITaxon:9682\n    - ...\n- id: NCBITaxon:9443\n  name: primates\n  has_subtypes:\n    - NCBITaxon:9606\n    - ...\n```\n\n----------------------------------------\n\nTITLE: Defining LinkML Slot Usage and Enums for Familial Relationships\nDESCRIPTION: LinkML definition specifying slot usage for relationship types and enumerated values for different types of familial relationships. Includes required fields and descriptions for each relationship type.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/json-schema.rst#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nslot_usage:\n  type:\n    range: FamilialRelationshipType\n    required: true\n  related to:\n    range: Person\n    required: true\n\nenums:\n  FamilialRelationshipType:\n    permissible_values:\n      SIBLING_OF:\n        description: a relationship between two individuals who share a parent\n      PARENT_OF:\n        description: a relationship between a parent (biological or non-biological) and their child\n      CHILD_OF:\n        description: inverse of the PARENT_OF type\n```\n\n----------------------------------------\n\nTITLE: Creating Python Object from Extracted JSON in Python\nDESCRIPTION: This Python code snippet demonstrates how to create a Python object from the extracted JSON data using the generated Pydantic model.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/generate-ai-prompts.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nperson = Person(**json.loads(r))\n```\n\n----------------------------------------\n\nTITLE: Enhanced Semantic Schema Definition\nDESCRIPTION: Extended schema with schema.org mappings using class_uri and slot_uri declarations to integrate with standard vocabularies.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial04.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nid: https://w3id.org/linkml/examples/personinfo\nname: personinfo\nprefixes:\n  linkml: https://w3id.org/linkml/\n  schema: http://schema.org/\n  personinfo: https://w3id.org/linkml/examples/personinfo/\n  ORCID: https://orcid.org/\nimports:\n  - linkml:types\ndefault_curi_maps:\n  - semweb_context\ndefault_prefix: personinfo\ndefault_range: string\n  \nclasses:\n  Person:\n    class_uri: schema:Person\n    attributes:\n      id:\n        identifier: true\n      full_name:\n        required: true\n        description:\n          name of the person\n        slot_uri: schema:name\n      aliases:\n        multivalued: true\n        description:\n          other names for the person\n      phone:\n        pattern: \"^[\\\\d\\\\(\\\\)\\\\-]+$\"\n        slot_uri: schema:telephone\n      age:\n        range: integer\n        minimum_value: 0\n        maximum_value: 200\n    id_prefixes:\n      - ORCID\n  Container:\n    attributes:\n      persons:\n        multivalued: true\n        inlined_as_list: true\n        range: Person\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Type in LinkML (Markdown)\nDESCRIPTION: This snippet defines the Integer type in LinkML. It specifies the URI for the type and indicates that it corresponds to the builtin int type. This definition is crucial for data modeling in LinkML schemas.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/types/Integer.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: integer\n\nAn integer\n\nURI: [linkml:Integer](https://w3id.org/linkml/Integer)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **int** |\n```\n\n----------------------------------------\n\nTITLE: Type Definition Table for IRI Type in Markdown\nDESCRIPTION: Table showing the inheritance hierarchy and specifications of the IRI type, including its parent type (Uriorcurie), root builtin type (URIorCURIE), and string representation format.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue62/types/IriType.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Parent type | | [Uriorcurie](types/Uriorcurie.md) |\n| Root (builtin) type | | **URIorCURIE** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Markdown Slot Properties Table\nDESCRIPTION: A markdown table defining the mappings property for the exact_mappings slot.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/exact_mappings.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | skos:exactMatch |\n```\n\n----------------------------------------\n\nTITLE: Python Dataclass Example with Inheritance\nDESCRIPTION: Example of a LinkML-generated Python class using the dataclass decorator and inheritance from NamedThing.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/port-linkml.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Person(NamedThing):\n   ...\n```\n\n----------------------------------------\n\nTITLE: LinkML Decimal Type Reference Table\nDESCRIPTION: Reference table showing the root builtin type definition for Decimal in LinkML\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/types/Decimal.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **Decimal** |\n```\n\n----------------------------------------\n\nTITLE: Defining 'in_location' Slot in LinkML\nDESCRIPTION: This snippet defines the 'in_location' slot in LinkML. It specifies the URI, domain and range, parent and child relationships, and usage in different classes.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/in_location.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: in_location\n\n\n\n\nURI: [personinfo:in_location](https://w3id.org/linkml/examples/personinfo/in_location)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [Place](Place.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [MedicalEvent](MedicalEvent.md)\n * [WithLocation](WithLocation.md)\n```\n\n----------------------------------------\n\nTITLE: LinkML Extension Class Structure in Markdown\nDESCRIPTION: Markdown documentation defining the Extension class structure including its attributes, relationships, and URI definition. The Extension class is used to attach arbitrary tag/value pairs to model elements.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/Extension.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Class: extension\n\na tag/value pair used to add non-model information to an entry\n\nURI: [linkml:Extension](https://w3id.org/linkml/Extension)\n\n## Children\n\n * [Annotation](Annotation.md) - a tag/value pair with the semantics of OWL Annotation\n\n## Referenced by Class\n\n *  **[Extensible](Extensible.md)** *[extensions](extensions.md)*  <sub>0..\\*</sub>  **[Extension](Extension.md)**\n\n## Attributes\n\n### Own\n\n * [extension➞tag](extension_tag.md)  <sub>1..1</sub>\n     * Description: a tag associated with an extension\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n * [extension➞value](extension_value.md)  <sub>1..1</sub>\n     * Description: the actual annotation\n     * Range: [AnyValue](AnyValue.md)\n * [extensions](extensions.md)  <sub>0..\\*</sub>\n     * Description: a tag/text tuple attached to an arbitrary element\n     * Range: [Extension](Extension.md)\n```\n\n----------------------------------------\n\nTITLE: Python Extended String Classes Implementation\nDESCRIPTION: Example of generating extended string classes for type-safe references in LinkML-generated code.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/port-linkml.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml_runtime.utils.yamlutils import YAMLRoot, extended_str, extended_float, extended_int\n\nclass NamedThingId(extended_str):\n    pass\n\nclass PersonId(NamedThingId):\n    pass\n\n...\n@dataclass\nclass FamilialRelationship(Relationship):\n    ...\n    type: Union[str, \"FamilialRelationshipType\"] = None\n    related_to: Union[str, PersonId] = None\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Representation of Person Model\nDESCRIPTION: This JSON snippet shows the schema representation of the generated Person model, including its properties and structure.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/generate-ai-prompts.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Person\",\n  \"description\": \"A person (alive, dead, undead, or fictional).\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"has_familial_relationships\": {\n      \"title\": \"Has Familial Relationships\",\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/FamilialRelationship\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AnonymousSlotExpression Class in LinkML\nDESCRIPTION: YAML representation of the AnonymousSlotExpression class, showing its inheritance, mixins, and attributes. It includes various properties like required, recommended, multivalued, and others that constrain the behavior of the slot.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/AnonymousSlotExpression.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass_name: AnonymousSlotExpression\nis_a: AnonymousExpression\nmixins:\n  - SlotExpression\nattributes:\n  range:\n    range: Element\n    description: Defines the type of the object of the slot\n  range_expression:\n    range: AnonymousClassExpression\n    description: A range described as a boolean expression combining existing ranges\n  enum_range:\n    range: EnumExpression\n    description: An inlined enumeration\n  bindings:\n    range: EnumBinding\n    multivalued: true\n    description: A collection of enum bindings for permissible values\n  required:\n    range: Boolean\n    description: True if the slot must be present in instances\n  recommended:\n    range: Boolean\n    description: True if the slot should be present but is not required\n  multivalued:\n    range: Boolean\n    description: True if the slot can have more than one value\n  inlined:\n    range: Boolean\n    description: True if the slot appears by value in an outer structure\n  inlined_as_list:\n    range: Boolean\n    description: True if an inlined slot is represented as a list of range instances\n  minimum_value:\n    range: Anything\n    description: For ordinal ranges, the minimum allowed value\n  maximum_value:\n    range: Anything\n    description: For ordinal ranges, the maximum allowed value\n```\n\n----------------------------------------\n\nTITLE: LinkML Punning with Direct Class Reference\nDESCRIPTION: Alternative approach to simulate punning in LinkML using direct class references.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/modeling.md#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Author:\n    slots:\n      - id\n      - name\n  Book:\n    slots:\n      - author  # Use \"author\" slot in the Book class\nslots:\n  author:\n    range: Author  # Direct reference to the Author class\n  id:\n    identifier: true\n  name:\n```\n\n----------------------------------------\n\nTITLE: Initializing a List of Identified Elements in YAML\nDESCRIPTION: YAML representation of a list of elements conforming to the IdentifiedThreeElementClass model, demonstrating how to provide values in a multivalued list format with optional and required properties.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n    - name: element1\n      value: 17\n      modifier: 2012-03-11\n    - name: element2\n    - name: element3\n      value: 42\n```\n\n----------------------------------------\n\nTITLE: Python Type Import and Event Class Example\nDESCRIPTION: Example of importing and using LinkML runtime types in a generated Event class.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/port-linkml.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml_runtime.linkml_model.types import Boolean, Date, Float, Integer, String\nfrom linkml_runtime.utils.metamodelcore import Bool, XSDDate\n...\n\n@dataclass\nclass Event(YAMLRoot):\n    ...\n    started_at_time: Optional[Union[str, XSDDate]] = None\n```\n\n----------------------------------------\n\nTITLE: Defining DateOrDatetime Type in LinkML\nDESCRIPTION: This code snippet defines the DateOrDatetime type in LinkML. It specifies that the type can represent either a date or a datetime, with a URI of 'https://w3id.org/linkml/DateOrDatetime'. The root type is a built-in string, and its representation is also a string.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/types/DateOrDatetime.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: date_or_datetime\n\nEither a date or a datetime\n\nURI: [linkml:DateOrDatetime](https://w3id.org/linkml/DateOrDatetime)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: JSON Schema representation of reference by identifier\nDESCRIPTION: JSON Schema showing how reference-by-identifier is represented as a simple string type in JSON Schema, losing some validation capability.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/json-schema.rst#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"FamilialRelationship\": {\n   \"additionalProperties\": false,\n   \"description\": \"\",\n   \"properties\": {\n      \"ended_at_time\": {\n         \"format\": \"date\",\n         \"type\": \"string\"\n      },\n      \"related_to\": {\n         \"type\": \"string\"\n      },\n      \"started_at_time\": {\n         \"format\": \"date\",\n         \"type\": \"string\"\n      }\n   },\n   \"required\": [\n      \"type\",\n      \"related_to\"\n   ],\n   \"title\": \"FamilialRelationship\",\n   \"type\": \"object\"\n},\n```\n\n----------------------------------------\n\nTITLE: Running Code Linting in LinkML Project\nDESCRIPTION: Runs code linting checks using tox to verify formatting and code quality standards. This command should be run before committing changes to ensure code quality.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/contributing/contributing.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npoetry run tox -e lint\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit with pipx\nDESCRIPTION: Installs the pre-commit package globally using pipx. This is required before setting up pre-commit hooks in the repository.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/contributing/contributing.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npipx install pre-commit\n```\n\n----------------------------------------\n\nTITLE: Generated JSON-LD Context\nDESCRIPTION: JSON-LD context file generated from the semantic schema, providing mappings between JSON properties and RDF terms.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial04.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"@context\": {\n      \"ORCID\": \"https://orcid.org/\",\n      \"linkml\": \"https://w3id.org/linkml/\",\n      \"personinfo\": \"https://w3id.org/linkml/examples/personinfo/\",\n      \"schema\": \"http://schema.org/\",\n      \"@vocab\": \"https://w3id.org/linkml/examples/personinfo/\",\n      \"persons\": {\n         \"@type\": \"@id\"\n      },\n      \"age\": {\n         \"@type\": \"xsd:integer\"\n      },\n      \"full_name\": {\n         \"@id\": \"schema:name\"\n      },\n      \"id\": \"@id\",\n      \"phone\": {\n         \"@id\": \"schema:telephone\"\n      },\n      \"Person\": {\n         \"@id\": \"schema:Person\"\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining 'is_a' Slot in LinkML Markdown\nDESCRIPTION: This snippet defines the 'is_a' slot in LinkML, including its URI, domain and range, parents, children, and usage. It also specifies subsets and other properties.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/is_a.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: is_a\n\nA primary parent class or slot from which inheritable metaslots are propagated from. While multiple inheritance is not allowed, mixins can be provided effectively providing the same thing. The semantics are the same when translated to formalisms that allow MI (e.g. RDFS/OWL). When translating to a SI framework (e.g. java classes, python classes) then is a is used. When translating a framework without polymorphism (e.g. json-schema, solr document schema) then is a and mixins are recursively unfolded\n\nURI: [linkml:is_a](https://w3id.org/linkml/is_a)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [Definition](Definition.md)\n\n## Parents\n\n\n## Children\n\n *  [class_definition➞is_a](class_definition_is_a.md)\n *  [permissible_value➞is_a](permissible_value_is_a.md)\n *  [slot_definition➞is_a](slot_definition_is_a.md)\n\n## Used by\n\n * [AnonymousClassExpression](AnonymousClassExpression.md)\n * [Definition](Definition.md)\n * [EnumDefinition](EnumDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n|  | | BasicSubset |\n|  | | ObjectOrientedProfile |\n|  | | OwlProfile |\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Type in LinkML YAML\nDESCRIPTION: Specifies the properties of the boolean type in LinkML, including its URI, root type, representation, and exact mappings. The boolean type is defined as a binary value (true or false) with a root type of Bool and represented as a bool in the schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue65/types/Boolean.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Type: boolean\n\nA binary (true or false) value\n\nURI: [meta:Boolean](https://w3id.org/linkml/Boolean)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **Bool** |\n| Representation | | bool |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Boolean |\n```\n\n----------------------------------------\n\nTITLE: JSONPath Type Definition\nDESCRIPTION: Type definition table showing the base type and representation for JSONPath strings in LinkML. The type inherits from the built-in string type and is represented as a string value.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue62/types/Jsonpath.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Defining Relational Role Enumeration Values\nDESCRIPTION: Specifies the permissible values for the relational_role_enum with their descriptions, meanings, and mappings. Each role defines how a slot connects different parts of a relationship, including subject/source, object/target, predicate/property, and other variations.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/relational_role_enum.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Text | Description | Meaning | Other Information |\n| :--- | :---: | :---: | ---: |\n| SUBJECT | a slot with this role connects a relationship to its subject/source node | rdf:subject | {'exact_mappings': ['owl:annotatedSource']} |\n| OBJECT | a slot with this role connects a relationship to its object/target node | rdf:object | {'exact_mappings': ['owl:annotatedTarget']} |\n| PREDICATE | a slot with this role connects a relationship to its predicate/property | rdf:predicate | {'exact_mappings': ['owl:annotatedProperty']} |\n| NODE | a slot with this role connects a symmetric relationship to a node that represents either subject or object node |  |  |\n| OTHER_ROLE | a slot with this role connects a relationship to a node that is not subject/object/predicate |  |  |\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Definition - Rules Properties\nDESCRIPTION: Markdown table defining the mappings and subset properties for the rules slot. This slot is mapped to sh:rule in SHACL and belongs to the SpecificationSubset.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/rules.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | sh:rule |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: Decimal Type URI Definition\nDESCRIPTION: URI specification for the decimal type that maps to xsd:decimal format and schema.org Number type\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/types/Decimal.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nURI: [linkml:Decimal](https://w3id.org/linkml/Decimal)\n```\n\n----------------------------------------\n\nTITLE: Double Type Table Specification in Markdown\nDESCRIPTION: Markdown table defining the root builtin type as float for the Double data type.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/types/Double.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **float** |\n```\n\n----------------------------------------\n\nTITLE: EnumDefinition Properties Markdown Documentation\nDESCRIPTION: Markdown documentation showing the inherited and mixed-in properties of the EnumDefinition class, including cardinality, descriptions, ranges and subsets.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/EnumDefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Inherited from definition:\n\n * [name](name.md)  <sub>1..1</sub>\n     * Description: the unique name of the element within the context of the schema.  Name is combined with the default prefix to form the globally unique subject of the target class.\n     * Range: [String](types/String.md)\n     * in subsets: (SpecificationSubset,OwlProfile,MinimalSubset,BasicSubset,RelationalModelProfile,ObjectOrientedProfile)\n```\n\n----------------------------------------\n\nTITLE: Markdown Definition of identifier_pattern Slot in LinkML\nDESCRIPTION: Markdown documentation defining the identifier_pattern slot, which specifies a regular expression pattern for extracting identifiers from source ontologies. The slot has a domain of MatchQuery and range of String data type.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/identifier_pattern.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: identifier_pattern\n\nA regular expression that is used to obtain a set of identifiers from a source_ontology to construct a set of permissible values\n\nURI: [linkml:identifier_pattern](https://w3id.org/linkml/identifier_pattern)\n\n\n## Domain and Range\n\n[MatchQuery](MatchQuery.md) &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [MatchQuery](MatchQuery.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: KeyedThreeElementClass YAML Definition\nDESCRIPTION: YAML schema definition for the KeyedThreeElementClass, which is used in the examples to demonstrate a class with a key field and additional properties.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n  KeyedThreeElementClass:\n    description: A keyed class with an additional integer and date\n    attributes:\n      name:\n        range: string\n        key: true\n      value:\n        range: integer\n      modifier:\n        range: date\n```\n\n----------------------------------------\n\nTITLE: Python Core Dependencies Import for LinkML Generated Classes\nDESCRIPTION: Core import statements required for LinkML-generated Python classes, including standard libraries, typing, dataclasses, and runtime dependencies.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/port-linkml.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dataclasses\nimport sys\nimport re\nfrom jsonasobj2 import JsonObj, as_dict\nfrom typing import Optional, List, Union, Dict, ClassVar, Any\nfrom dataclasses import dataclass\nfrom datetime import date, datetime, time\nfrom linkml_runtime.linkml_model.meta import EnumDefinition, PermissibleValue, PvFormulaOptions\n\nfrom linkml_runtime.utils.slot import Slot\nfrom linkml_runtime.utils.metamodelcore import empty_list, empty_dict, bnode\nfrom linkml_runtime.utils.yamlutils import YAMLRoot, extended_str, extended_float, extended_int\nfrom linkml_runtime.utils.dataclass_extensions_376 import dataclasses_init_fn_with_kwargs\nfrom linkml_runtime.utils.formatutils import camelcase, underscore, sfx\nfrom linkml_runtime.utils.enumerations import EnumDefinitionImpl\nfrom rdflib import Namespace, URIRef\nfrom linkml_runtime.utils.curienamespace import CurieNamespace\nfrom linkml_runtime.linkml_model.types import Boolean, Float, Integer, String, Uriorcurie\nfrom linkml_runtime.utils.metamodelcore import Bool, URIorCURIE\n```\n\n----------------------------------------\n\nTITLE: Generating YUML Class Diagram for SubsetDefinition\nDESCRIPTION: This YUML code snippet generates a class diagram showing the relationships and attributes of the SubsetDefinition class in LinkML.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/SubsetDefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: YUML\nCODE:\n```\n[![img](https://yuml.me/diagram/nofunky;dir:TB/class/[CommonMetadata]-%20in_subset%200..*>[SubsetDefinition&#124;name(i):string;id_prefixes(i):ncname%20*;id_prefixes_are_closed(i):boolean%20%3F;definition_uri(i):uriorcurie%20%3F;conforms_to(i):string%20%3F;implements(i):uriorcurie%20*;instantiates(i):uriorcurie%20*;description(i):string%20%3F;title(i):string%20%3F;deprecated(i):string%20%3F;todos(i):string%20*;notes(i):string%20*;comments(i):string%20*;from_schema(i):uri%20%3F;imported_from(i):string%20%3F;source(i):uriorcurie%20%3F;in_language(i):string%20%3F;see_also(i):uriorcurie%20*;deprecated_element_has_exact_replacement(i):uriorcurie%20%3F;deprecated_element_has_possible_replacement(i):uriorcurie%20%3F;aliases(i):string%20*;mappings(i):uriorcurie%20*;exact_mappings(i):uriorcurie%20*;close_mappings(i):uriorcurie%20*;related_mappings(i):uriorcurie%20*;narrow_mappings(i):uriorcurie%20*;broad_mappings(i):uriorcurie%20*;created_by(i):uriorcurie%20%3F;contributors(i):uriorcurie%20*;created_on(i):datetime%20%3F;last_updated_on(i):datetime%20%3F;modified_by(i):uriorcurie%20%3F;status(i):uriorcurie%20%3F;rank(i):integer%20%3F;categories(i):uriorcurie%20*;keywords(i):string%20*],[SchemaDefinition]++-%20subsets%200..*>[SubsetDefinition],[Element]^-[SubsetDefinition],[StructuredAlias],[SchemaDefinition],[LocalName],[Extension],[Example],[Element],[CommonMetadata],[Annotation],[AltDescription])]\n```\n\n----------------------------------------\n\nTITLE: Generated Python Classes for Single-Value Slot Configurations\nDESCRIPTION: Python code showing the generated dataclasses for different single-value slot configurations. Each class includes type hints, docstrings, and post-initialization logic to handle proper instantiation of referenced objects.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OptionalThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 1.1(o) -- single values optional slot - range has no keys or identifiers\n    \"\"\"\n    ...\n    v1: Optional[Union[dict, ThreeElementClass]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is not None and not isinstance(self.v1, ThreeElementClass):\n            self.v1 = ThreeElementClass(**self.v1)\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass RequiredThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 1.1(r) -- single values optional slot - range has no keys or identifiers\n    \"\"\"\n    ...\n    v1: Union[dict, ThreeElementClass] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        if not isinstance(self.v1, ThreeElementClass):\n            self.v1 = ThreeElementClass(**self.v1)\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass OptionalIdentifiedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 1.2(o) -- single values optional slot - range has an identifier\n    \"\"\"\n    ...\n    v1: Optional[Union[str, IdentifiedThreeElementClassName]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is not None and not isinstance(self.v1, IdentifiedThreeElementClassName):\n            self.v1 = IdentifiedThreeElementClassName(self.v1)\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass RequiredKeyedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 1.2(r) -- single values optional slot - range has a key\n    \"\"\"\n    ...\n    v1: Union[str, KeyedThreeElementClassName] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        if not isinstance(self.v1, KeyedThreeElementClassName):\n            self.v1 = KeyedThreeElementClassName(self.v1)\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass OptionalInlinedKeyedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 1.3(o) -- single values optional slot - range has an identifier\n    \"\"\"\n    ...\n    v1: Optional[Union[dict, KeyedThreeElementClass]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is not None and not isinstance(self.v1, KeyedThreeElementClass):\n            self.v1 = KeyedThreeElementClass(self.v1)\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass RequiredInlinedIdentifiedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 1.3(r) -- single values optional slot - range has a key\n    \"\"\"\n    ...\n    v1: Union[dict, IdentifiedThreeElementClass] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        if not isinstance(self.v1, IdentifiedThreeElementClass):\n            self.v1 = IdentifiedThreeElementClass(self.v1)\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass OptionalInlinedAsListKeyedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 1.4(o) -- single values optional slot - range has an identifier\n    \"\"\"\n    ...\n    v1: Optional[Union[dict, KeyedThreeElementClass]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is not None and not isinstance(self.v1, KeyedThreeElementClass):\n            self.v1 = KeyedThreeElementClass(self.v1)\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass RequiredInlinedAsListIdentifiedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Case 1.4(r) -- single values optional slot - range has a key\n    \"\"\"\n    ...\n    v1: Union[dict, IdentifiedThreeElementClass] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        if not isinstance(self.v1, IdentifiedThreeElementClass):\n            self.v1 = IdentifiedThreeElementClass(self.v1)\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Subset Structure in LinkML\nDESCRIPTION: Defines a basic subset schema structure that includes a Person class. The schema provides a foundational model for representing person-related information with a URI namespace.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/BasicSubset.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Subset: basic_subset\n\nA subset of the schema that handles basic information\n\nURI: [personinfo:basic_subset](https://w3id.org/linkml/examples/personinfo/basic_subset)\n\n### Classes\n\n * [Person](Person.md) - A person (alive, dead, undead, or fictional).\n\n### Mixins\n\n### Slots\n\n### Types\n\n### Enums\n```\n\n----------------------------------------\n\nTITLE: Marking Deprecation for Python Version in LinkML\nDESCRIPTION: Example of how to mark a deprecated Python version in LinkML. This checks if the Python version is 3.8 or lower and issues a warning.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/deprecation.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\nif sys.version_info.minor <= 8:\n  deprecation_warning('semaphore')\n```\n\n----------------------------------------\n\nTITLE: Installing and Loading YAML Magic Extension for Jupyter\nDESCRIPTION: Installs the yamlmagic package and reloads the YAML magic extension for use in the Jupyter notebook.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/examples.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip -q --disable-pip-version-check install yamlmagic\n%reload_ext yamlmagic\n```\n\n----------------------------------------\n\nTITLE: Using vskit to Expand Value Sets in Bash\nDESCRIPTION: This snippet shows how to use the vskit tool from the Ontology Access Kit (OAK) to expand value sets defined in a LinkML schema. It demonstrates the command to install OAK and run vskit to expand a schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/enums.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install oaklib\nvskit expand -s my_schema.yaml -o my_schema_expanded.yaml\n```\n\n----------------------------------------\n\nTITLE: Importing YAMLLoader Class for YAML Deserialization in Python\nDESCRIPTION: This code imports the YAMLLoader class from linkml_runtime.loaders. YAMLLoader is used to deserialize YAML data into Python objects.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/loaders-and-dumpers.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml_runtime.loaders import YAMLLoader\n```\n\n----------------------------------------\n\nTITLE: Date Type Specification in LinkML\nDESCRIPTION: Formal type definition for dates in LinkML, specifying it as a built-in type that maps to XSDDate with string representation. Includes schema.org Date mapping.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/types/Date.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: date\n\na date (year, month and day) in an idealized calendar\n\nURI: [linkml:Date](https://w3id.org/linkml/Date)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **XSDDate** |\n| Representation | | str |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Date |\n```\n\n----------------------------------------\n\nTITLE: LinkML Double Type Definition Table\nDESCRIPTION: Table showing the root builtin type specification for double.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/types/Double.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **float** |\n```\n\n----------------------------------------\n\nTITLE: Defining RelationalModelProfile URI in Markdown\nDESCRIPTION: Specifies the URI for the RelationalModelProfile subset in LinkML. This URI serves as a unique identifier for the profile.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/RelationalModelProfile.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nURI: [linkml:RelationalModelProfile](https://w3id.org/linkml/RelationalModelProfile)\n```\n\n----------------------------------------\n\nTITLE: Defining LinkML Type with Python Base Type\nDESCRIPTION: Example of defining a LinkML type that uses a built-in Python type as its base.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntypes:\n   <type>:\n      base: <builtin python type> (e.g. 'str', 'int', 'float', etc)\n      ...\n```\n\n----------------------------------------\n\nTITLE: Time Type Mappings Table in Markdown\nDESCRIPTION: Markdown table showing external mappings for the Time type, specifically mapping to schema:Time\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/types/Time.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Time |\n```\n\n----------------------------------------\n\nTITLE: Validation Error Output for Partially Fixed Data (Text)\nDESCRIPTION: This text snippet shows the error output from validating the partially fixed data, indicating that one error remains (invalid phone number).\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial03.md#2025-04-17_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n[ERROR] [better-data.yaml/0] '1-800-kryptonite' does not match '^[\\\\d\\\\(\\\\)\\\\-]+$' in /persons/0/phone\n```\n\n----------------------------------------\n\nTITLE: NamedThing Class Properties Definition\nDESCRIPTION: Defines the core attributes of the NamedThing class including id, name, description, and image fields. The class serves as a base for Person, Organization, and Concept entities with schema:Thing mapping.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/NamedThing.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Own\n\n * [id](id.md)  <sub>1..1</sub>\n     * Range: [String](types/String.md)\n * [name](name.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n * [description](description.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n * [image](image.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n```\n\n----------------------------------------\n\nTITLE: Defining setting_value Slot in LinkML\nDESCRIPTION: This snippet defines the 'setting_value' slot in LinkML. It specifies that the slot is used to assign a value for a setting, has a domain of 'Setting' and a range of 'String', and is included in the SpecificationSubset.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/setting_value.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: setting_value\n\nThe value assigned for a setting\n\nURI: [linkml:setting_value](https://w3id.org/linkml/setting_value)\n\n\n## Domain and Range\n\n[Setting](Setting.md) &#8594;  <sub>1..1</sub> [String](types/String.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [Setting](Setting.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: Enum Definition - PV Formula Options\nDESCRIPTION: Enumeration defining how permissible values should be generated from code sets. Options include using raw codes, CURIEs, URIs, FHIR coding elements, or human-readable labels.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/pv_formula_options.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nCODE: The permissible values are the set of possible codes in the code set\nCURIE: The permissible values are the set of CURIES in the code set\nURI: The permissible values are the set of code URIs in the code set\nFHIR_CODING: The permissible values are the set of FHIR coding elements derived from the code set\nLABEL: The permissible values are the set of human readable labels in the code set\n```\n\n----------------------------------------\n\nTITLE: Defining 'persons' Slot in LinkML YAML\nDESCRIPTION: This snippet defines the 'persons' slot in LinkML YAML format. It specifies the slot's URI, domain and range (None to 0 or more Person objects), and indicates that it is used by the Container class.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/persons.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Slot: persons\n\nURI: [personinfo:persons](https://w3id.org/linkml/examples/personinfo/persons)\n\n## Domain and Range\n\nNone &#8594;  <sub>0..\\*</sub> [Person](Person.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [Container](Container.md)\n```\n\n----------------------------------------\n\nTITLE: YUML Class Diagram Definition\nDESCRIPTION: Complex YUML diagram showing the PathExpression class relationships, attributes and inheritances including mixins like Expression, Extensible, Annotatable and CommonMetadata\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/PathExpression.md#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\n[SubsetDefinition],[StructuredAlias],[SlotDefinition],[AnonymousClassExpression]<range_expression%200..1-++[PathExpression&#124;reversed:boolean%20%3F;description:string%20%3F;title:string%20%3F;deprecated:string%20%3F;todos:string%20*;notes:string%20*;comments:string%20*;from_schema:uri%20%3F;imported_from:string%20%3F;source:uriorcurie%20%3F;in_language:string%20%3F;see_also:uriorcurie%20*;deprecated_element_has_exact_replacement:uriorcurie%20%3F;deprecated_element_has_possible_replacement:uriorcurie%20%3F;aliases:string%20*;mappings:uriorcurie%20*;exact_mappings:uriorcurie%20*;close_mappings:uriorcurie%20*;related_mappings:uriorcurie%20*;narrow_mappings:uriorcurie%20*;broad_mappings:uriorcurie%20*;created_by:uriorcurie%20%3F;contributors:uriorcurie%20*;created_on:datetime%20%3F;last_updated_on:datetime%20%3F;modified_by:uriorcurie%20%3F;status:uriorcurie%20%3F;rank:integer%20%3F;categories:uriorcurie%20*;keywords:string%20*]\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Biolink Model Processing\nDESCRIPTION: Imports necessary Python libraries and modules for working with Biolink models, including LinkML generators, RDF processing, and JSON utilities.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/examples.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\nfrom types import ModuleType\n\nfrom jsonasobj import as_json, loads\nfrom rdflib import Graph\n\nfrom linkml.generators.jsonldcontextgen import ContextGenerator\nfrom linkml.generators.pythongen import PythonGenerator\nfrom linkml.generators.shexgen import ShExGenerator\nfrom linkml.generators.yumlgen import YumlGenerator\nfrom linkml_runtime.utils.yamlutils import DupCheckYamlLoader\nfrom linkml_runtime.dumpers import json_dumper\n```\n\n----------------------------------------\n\nTITLE: Building Documentation on Windows without Make\nDESCRIPTION: Alternative approach for Windows users to build the documentation using Poetry to run the Sphinx make command from within the docs directory.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd docs\npoetry run make html\n```\n\n----------------------------------------\n\nTITLE: ProcedureConcept Class URI Definition\nDESCRIPTION: Defines the URI identifier for the ProcedureConcept class in the personinfo namespace.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/ProcedureConcept.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[personinfo:ProcedureConcept](https://w3id.org/linkml/examples/personinfo/ProcedureConcept)\n```\n\n----------------------------------------\n\nTITLE: Using YAMLGenerator.serialize Method for YAML Generation in LinkML\nDESCRIPTION: Documentation entry for the YAMLGenerator.serialize method in the LinkML framework. This method is responsible for converting LinkML model elements into YAML format with options for controlling serialization parameters.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/yaml.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: YAMLGenerator\n    :members: serialize\n```\n\n----------------------------------------\n\nTITLE: LinkML Generator Warning Example\nDESCRIPTION: Example of warning message generated when using overlapping class and slot names in LinkML.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/modeling.md#2025-04-17_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nWARNING:linkml.utils.generator:Overlapping slot and class names: author\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation with Sphinx for LinkML Build Module\nDESCRIPTION: This code snippet uses Sphinx's eval-rst directive to automatically generate documentation for the members of the linkml.generators.common.build module. The automodule directive instructs Sphinx to extract docstrings and create API documentation.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/common/build.md#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: linkml.generators.common.build\n    :members:\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Definition for Array Dimensions\nDESCRIPTION: Markdown documentation defining the exact_number_dimensions slot for ArrayExpression class. This slot specifies the exact dimensionality of an array and has a cardinality of 0..1, accepting Integer values. Important constraint: when exact_number_dimensions is set, minimum_number_dimensions and maximum_number_dimensions must be either unset or equal to the exact value.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/exact_number_dimensions.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: exact_number_dimensions\n\nexact number of dimensions in the array\n\nURI: [linkml:exact_number_dimensions](https://w3id.org/linkml/exact_number_dimensions)\n\n\n## Domain and Range\n\n[ArrayExpression](ArrayExpression.md) &#8594;  <sub>0..1</sub> [Integer](types/Integer.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [ArrayExpression](ArrayExpression.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | if exact_number_dimensions is set, then minimum_number_dimensions and maximum_number_dimensions must be unset or have the same value |\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Identified Range Classes in Python\nDESCRIPTION: Defines two dataclasses for handling required identified three-element classes, both for single values and lists. Includes validation and type coercion.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass RequiredIdentifiedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Range is a required class that contains one identifier and two regular elements\n    \"\"\"\n    ...\n\n    v1: Union[str, IdentifiedThreeElementClassName] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        if not isinstance(self.v1, IdentifiedThreeElementClassName):\n            self.v1 = IdentifiedThreeElementClassName(self.v1)\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass RequiredIdentifiedThreeElementRangeList(YAMLRoot):\n    \"\"\"\n    Range is a optional list of a class that contains one identifier and two regular elements\n    \"\"\"\n    ...\n\n    v1: Union[Union[str, IdentifiedThreeElementClassName], List[Union[str, IdentifiedThreeElementClassName]]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        elif not isinstance(self.v1, (list, dict)):\n            self.v1 = [self.v1]\n        if len(self.v1) == 0:\n            raise ValueError(f\"v1 must be a non-empty list dictionary or class\")\n        self.v1 = [v if isinstance(v, IdentifiedThreeElementClassName) else IdentifiedThreeElementClassName(v) for v in self.v1]\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Defining Domain and Range in Markdown\nDESCRIPTION: Shows the domain and range specification for the apply_to slot, indicating it connects Definition objects with a many-to-many relationship.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/apply_to.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Definition](Definition.md) &#8594;  <sub>0..\\*</sub> [Definition](Definition.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Uri Type Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the Uri type in LinkML using a markdown table. It specifies the root type as URI and the representation as a string.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/types/Uri.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **URI** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Defining NodeIdentifier Type in LinkML YAML\nDESCRIPTION: This YAML snippet defines the 'nodeidentifier' type in LinkML. It specifies that the type represents a node identifier in a model, can be a URI, CURIE, or BNODE, and is represented as a string. The type is a root (builtin) type in LinkML.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/types/Nodeidentifier.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Type: nodeidentifier\n\nA URI, CURIE or BNODE that represents a node in a model.\n\nURI: [linkml:Nodeidentifier](https://w3id.org/linkml/Nodeidentifier)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **NodeIdentifier** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Defining MetricResultChild Class in Markdown\nDESCRIPTION: This code snippet defines the MetricResultChild class, specifying its URI, parent class, mixin, and attributes. It includes both its own attributes and those inherited from MetricResult and HasMessagesChild.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue179/MetricResultChild.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Class: metric result child\n\nURI: [http://example.org/sample/example1/MetricResultChild](http://example.org/sample/example1/MetricResultChild)\n\n## Parents\n\n *  is_a: [MetricResult](MetricResult.md) - Result of executing a metric on a KS\n\n## Uses Mixin\n\n *  mixin: [HasMessagesChild](HasMessagesChild.md)\n\n## Attributes\n\n### Own\n\n * [result child slot](result_child_slot.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n\n### Inherited from metric result:\n\n * [evaluated using](evaluated_using.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n * [has source](has_source.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n * [has status](has_status.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n * [description](description.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n\n### Mixed in from has messages class:\n\n * [has messages](has_messages.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n\n### Mixed in from has messages child:\n\n * [has child messages](has_child_messages.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Time Type in LinkML (Markdown)\nDESCRIPTION: This snippet defines the Time type in LinkML. It specifies the URI, root type (XSDTime), representation (string), and provides an exact mapping to schema:Time.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/types/Time.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: time\n\nA time object represents a (local) time of day, independent of any particular day\n\nURI: [linkml:Time](https://w3id.org/linkml/Time)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **XSDTime** |\n| Representation | | str |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Time |\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for LinkML docgen module\nDESCRIPTION: A Sphinx directive that automatically generates documentation for the linkml.generators.docgen module. The directive includes all members of the module and also documents undocumented members.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/docgen.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: linkml.generators.docgen\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Markdown Class Reference Documentation\nDESCRIPTION: Documentation showing all references to the SlotDefinition class from other classes and properties in the LinkML metamodel, including cardinality constraints.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/SlotDefinition.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Referenced by Class\n\n *  **[ClassDefinition](ClassDefinition.md)** *[attributes](attributes.md)*  <sub>0..\\*</sub>  **[SlotDefinition](SlotDefinition.md)**\n *  **[ClassDefinition](ClassDefinition.md)** *[defining_slots](defining_slots.md)*  <sub>0..\\*</sub>  **[SlotDefinition](SlotDefinition.md)**\n *  **[SlotDefinition](SlotDefinition.md)** *[inverse](inverse.md)*  <sub>0..1</sub>  **[SlotDefinition](SlotDefinition.md)**\n *  **None** *[reflexive_transitive_form_of](reflexive_transitive_form_of.md)*  <sub>0..1</sub>  **[SlotDefinition](SlotDefinition.md)**\n *  **[ClassExpression](ClassExpression.md)** *[slot_conditions](slot_conditions.md)*  <sub>0..\\*</sub>  **[SlotDefinition](SlotDefinition.md)**\n *  **[SlotDefinition](SlotDefinition.md)** *[slot_definition➞apply_to](slot_definition_apply_to.md)*  <sub>0..\\*</sub>  **[SlotDefinition](SlotDefinition.md)**\n *  **[SlotDefinition](SlotDefinition.md)** *[slot_definition➞disjoint_with](slot_definition_disjoint_with.md)*  <sub>0..\\*</sub>  **[SlotDefinition](SlotDefinition.md)**\n *  **[SlotDefinition](SlotDefinition.md)** *[slot_definition➞is_a](slot_definition_is_a.md)*  <sub>0..1</sub>  **[SlotDefinition](SlotDefinition.md)**\n *  **[SlotDefinition](SlotDefinition.md)** *[slot_definition➞mixins](slot_definition_mixins.md)*  <sub>0..\\*</sub>  **[SlotDefinition](SlotDefinition.md)**\n *  **[SlotDefinition](SlotDefinition.md)** *[slot_definition➞union_of](slot_definition_union_of.md)*  <sub>0..\\*</sub>  **[SlotDefinition](SlotDefinition.md)**\n *  **[SchemaDefinition](SchemaDefinition.md)** *[schema_definition➞slots](slot_definitions.md)*  <sub>0..\\*</sub>  **[SlotDefinition](SlotDefinition.md)**\n *  **[SlotDefinition](SlotDefinition.md)** *[slot_group](slot_group.md)*  <sub>0..1</sub>  **[SlotDefinition](SlotDefinition.md)**\n *  **[ClassDefinition](ClassDefinition.md)** *[slot_usage](slot_usage.md)*  <sub>0..\\*</sub>  **[SlotDefinition](SlotDefinition.md)**\n *  **[ClassDefinition](ClassDefinition.md)** *[slots](slots.md)*  <sub>0..\\*</sub>  **[SlotDefinition](SlotDefinition.md)**\n *  **[SlotDefinition](SlotDefinition.md)** *[subproperty_of](subproperty_of.md)*  <sub>0..1</sub>  **[SlotDefinition](SlotDefinition.md)**\n *  **None** *[transitive_form_of](transitive_form_of.md)*  <sub>0..1</sub>  **[SlotDefinition](SlotDefinition.md)**\n *  **None** *[traverse](traverse.md)*  <sub>0..1</sub>  **[SlotDefinition](SlotDefinition.md)**\n *  **[UniqueKey](UniqueKey.md)** *[unique_key_slots](unique_key_slots.md)*  <sub>1..\\*</sub>  **[SlotDefinition](SlotDefinition.md)**\n\n## Attributes\n```\n\n----------------------------------------\n\nTITLE: Defining mission_statement Slot in LinkML\nDESCRIPTION: This snippet defines the mission_statement slot in LinkML. It specifies the URI, domain and range, and usage of the slot. The slot has a range of String and is used by the Organization class.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/mission_statement.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: mission_statement\n\n\n\n\nURI: [personinfo:mission_statement](https://w3id.org/linkml/examples/personinfo/mission_statement)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [Organization](Organization.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Jsonpath Type Properties in LinkML\nDESCRIPTION: This snippet defines the properties of the Jsonpath type in LinkML. It specifies the URI, root type, and representation of the Jsonpath type.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/types/Jsonpath.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Root (builtin) type | | **str** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Definition for age_in_years\nDESCRIPTION: Specification of the age_in_years slot with its URI, domain, range and usage details. The slot accepts integers and is optional (cardinality 0..1).\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/age_in_years.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: age_in_years\n\nURI: [personinfo:age_in_years](https://w3id.org/linkml/examples/personinfo/age_in_years)\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [Integer](types/Integer.md)\n\n## Parents\n\n## Children\n\n## Used by\n\n * [Person](Person.md)\n```\n\n----------------------------------------\n\nTITLE: Markdown Definition of LinkML Disjoint_with Slot\nDESCRIPTION: Markdown documentation defining the disjoint_with slot, including its domain, range, parent/child relationships, and metadata properties. The slot is used to specify mutual exclusivity between definitions.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/disjoint_with.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: disjoint_with\n\nTwo classes are disjoint if they have no instances in common, two slots are disjoint if they can never hold between the same two instances\n\nURI: [linkml:disjoint_with](https://w3id.org/linkml/disjoint_with)\n\n\n## Domain and Range\n\n[Definition](Definition.md) &#8594;  <sub>0..\\*</sub> [Definition](Definition.md)\n\n## Parents\n\n\n## Children\n\n *  [class_definition➞disjoint_with](class_definition_disjoint_with.md)\n *  [slot_definition➞disjoint_with](slot_definition_disjoint_with.md)\n\n## Used by\n\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: Defining Pattern Slot in LinkML\nDESCRIPTION: This markdown snippet defines the 'pattern' slot in LinkML. It specifies the URI, domain and range, usage contexts, and other properties of the slot.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/pattern.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: pattern\n\nthe string value of the slot must conform to this regular expression expressed in the string\n\nURI: [linkml:pattern](https://w3id.org/linkml/pattern)\n\n\n## Domain and Range\n\n[Definition](Definition.md) &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [AnonymousSlotExpression](AnonymousSlotExpression.md)\n * [AnonymousTypeExpression](AnonymousTypeExpression.md)\n * [SlotDefinition](SlotDefinition.md)\n * [SlotExpression](SlotExpression.md)\n * [TypeDefinition](TypeDefinition.md)\n * [TypeExpression](TypeExpression.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n|  | | BasicSubset |\n```\n\n----------------------------------------\n\nTITLE: Class Expression Attributes Declaration\nDESCRIPTION: Defines the core attributes and properties of the ClassExpression class including logical operators and slot conditions.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/ClassExpression.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n * [class_expression➞any_of](class_expression_any_of.md)  <sub>0..\\*</sub>\n * [class_expression➞exactly_one_of](class_expression_exactly_one_of.md)  <sub>0..\\*</sub>\n * [class_expression➞none_of](class_expression_none_of.md)  <sub>0..\\*</sub>\n * [class_expression➞all_of](class_expression_all_of.md)  <sub>0..\\*</sub>\n * [slot_conditions](slot_conditions.md)  <sub>0..\\*</sub>\n```\n\n----------------------------------------\n\nTITLE: Defining BasicSubset Schema in LinkML Markdown\nDESCRIPTION: This snippet defines the BasicSubset schema in LinkML, including its URI and a list of classes and mixins. It describes the purpose and scope of the BasicSubset, which is designed for broad tool compatibility.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/BasicSubset.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Subset: BasicSubset\n\nAn extension of MinimalSubset that avoids advanced constructs and can be implemented by a broad variety of tools.\n\nThis subset roughly corresponds to the union of most standard constructs used in relational datamodel modeling,\nobject oriented modeling, and simple JSON-style modeling, while avoiding more advanced constructs from these languages.\n\nIt is often possible to translate from a more expressive schema to a BasicSubset schema, through a schema derivation\nprocess\n\nURI: [linkml:BasicSubset](https://w3id.org/linkml/BasicSubset)\n\n\n### Classes\n\n * [AltDescription](AltDescription.md) - an attributed description\n * [ClassDefinition](ClassDefinition.md) - an element whose instances are complex objects that may have slot-value assignments\n * [Definition](Definition.md) - abstract base class for core metaclasses\n * [Element](Element.md) - A named element in the model\n * [EnumDefinition](EnumDefinition.md) - an element whose instances must be drawn from a specified set of permissible values\n * [Example](Example.md) - usage example and description\n * [PermissibleValue](PermissibleValue.md) - a permissible value, accompanied by intended text and an optional mapping to a concept URI\n * [Prefix](Prefix.md) - prefix URI tuple\n * [SchemaDefinition](SchemaDefinition.md) - A collection of definitions that make up a schema or a data model.\n * [SlotDefinition](SlotDefinition.md) - an element that describes how instances are related to other instances\n * [SubsetDefinition](SubsetDefinition.md) - an element that can be used to group other metamodel elements\n * [TypeDefinition](TypeDefinition.md) - an element that whose instances are atomic scalar values that can be mapped to primitive types\n * [UniqueKey](UniqueKey.md) - a collection of slots whose values uniquely identify an instance of a class\n\n### Mixins\n\n * [CommonMetadata](CommonMetadata.md) - Generic metadata shared across definitions\n```\n\n----------------------------------------\n\nTITLE: Defining Slots for LinkML Classes in Python\nDESCRIPTION: Demonstrates the generation of slot definitions for LinkML classes, including URI, name, domain, and range information.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n# Slots\nclass slots:\n    pass\n    \n    ...\n\nslots.RequiredInlinedKeyedTwoElementRange_v1 = Slot(uri=LISTS_AND_KEYS.v1, name=\"RequiredInlinedKeyedTwoElementRange_v1\", curie=LISTS_AND_KEYS.curie('v1'),\n                   model_uri=LISTS_AND_KEYS.RequiredInlinedKeyedTwoElementRange_v1, domain=RequiredInlinedKeyedTwoElementRange, range=Union[dict, KeyedTwoElementClass])\n\nslots.RequiredInlinedKeyedTwoElementRangeList_v1 = Slot(uri=LISTS_AND_KEYS.v1, name=\"RequiredInlinedKeyedTwoElementRangeList_v1\", curie=LISTS_AND_KEYS.curie('v1'),\n                   model_uri=LISTS_AND_KEYS.RequiredInlinedKeyedTwoElementRangeList_v1, domain=RequiredInlinedKeyedTwoElementRangeList, range=Union[Dict[Union[str, KeyedTwoElementClassName], Union[dict, KeyedTwoElementClass]], List[Union[dict, KeyedTwoElementClass]]])\n\nslots.RequiredInlinedKeyedThreeElementRange_v1 = Slot(uri=LISTS_AND_KEYS.v1, name=\"RequiredInlinedKeyedThreeElementRange_v1\", curie=LISTS_AND_KEYS.curie('v1'),\n                   model_uri=LISTS_AND_KEYS.RequiredInlinedKeyedThreeElementRange_v1, domain=RequiredInlinedKeyedThreeElementRange, range=Union[dict, KeyedThreeElementClass])\n\nslots.RequiredInlinedKeyedThreeElementRangeList_v1 = Slot(uri=LISTS_AND_KEYS.v1, name=\"RequiredInlinedKeyedThreeElementRangeList_v1\", curie=LISTS_AND_KEYS.curie('v1'),\n                   model_uri=LISTS_AND_KEYS.RequiredInlinedKeyedThreeElementRangeList_v1, domain=RequiredInlinedKeyedThreeElementRangeList, range=Union[Dict[Union[str, KeyedThreeElementClassName], Union[dict, KeyedThreeElementClass]], List[Union[dict, KeyedThreeElementClass]]])\n```\n\n----------------------------------------\n\nTITLE: Defining a Non-Navigable Association in LinkML\nDESCRIPTION: YAML definition of a non-navigable association in LinkML. This creates a slot 'assoc2' between Class 1 and Class 2, but without including it in Class 1's slots list, making it non-navigable from either class perspective.\nSOURCE: https://github.com/linkml/linkml/blob/main/UML.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n    assoc2:\n      domain: Class 1\n      range: Class 2\n      multivalued: true\n      required: false\n\nclasses:\n    Class 1:\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Definition for code_set\nDESCRIPTION: Markdown definition of the code_set slot showing its URI, domain/range relationships, inheritance, usage contexts and other properties. This slot is used to identify enumeration code sets.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/code_set.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: code_set\n\nthe identifier of an enumeration code set.\n\nURI: [linkml:code_set](https://w3id.org/linkml/code_set)\n\n\n## Domain and Range\n\n[EnumExpression](EnumExpression.md) &#8594;  <sub>0..1</sub> [Uriorcurie](types/Uriorcurie.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [AnonymousEnumExpression](AnonymousEnumExpression.md)\n * [EnumDefinition](EnumDefinition.md)\n * [EnumExpression](EnumExpression.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n|  | | BasicSubset |\n```\n\n----------------------------------------\n\nTITLE: Extracting Prefix Values from LinkML Schema\nDESCRIPTION: This snippet shows how to extract only the values of the prefixes from a LinkML schema file using yq.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/yq-for-schemas.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyq e '.prefixes | to_entries | .[].value' personinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: Class Expression URI Definition\nDESCRIPTION: Defines the URI identifier for the ClassExpression class in LinkML.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/ClassExpression.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[linkml:ClassExpression](https://w3id.org/linkml/ClassExpression)\n```\n\n----------------------------------------\n\nTITLE: LinkML Float Type Definition\nDESCRIPTION: Definition of the LinkML Float type that maps to xsd:float for representing real numbers. Includes URI and schema mappings.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/types/Float.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: float\\n\\nA real number that conforms to the xsd:float specification\\n\\nURI: [linkml:Float](https://w3id.org/linkml/Float)\\n\\n|  |  |  |\\n| --- | --- | --- |\\n| Root (builtin) type | | **float** |\\n\\n## Other properties\\n\\n|  |  |  |\\n| --- | --- | --- |\\n| **Exact Mappings:** | | schema:Float |\n```\n\n----------------------------------------\n\nTITLE: Defining Symmetric Property Slot in LinkML\nDESCRIPTION: Documents the symmetric property slot which extends the relational_logical_characteristic base class. The slot has a boolean range and is used by SlotDefinition class. Maps to OWL's SymmetricProperty.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/symmetric.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: symmetric\n\nIf s is symmetric, and i.s=v, then v.s=i\n\nURI: [linkml:symmetric](https://w3id.org/linkml/symmetric)\n\n## Domain and Range\n\n[SlotDefinition](SlotDefinition.md) &#8594;  <sub>0..1</sub> [Boolean](types/Boolean.md)\n\n## Parents\n\n *  is_a: [relational_logical_characteristic](relational_logical_characteristic.md)\n\n## Children\n\n## Used by\n\n * [SlotDefinition](SlotDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n| **Close Mappings:** | | owl:SymmetricProperty |\n```\n\n----------------------------------------\n\nTITLE: Specifying Additional Uri Type Properties in Markdown\nDESCRIPTION: This snippet provides additional properties for the Uri type, including comments on RDF serialization behavior and schema mappings, using a markdown table format.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/types/Uri.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | in RDF serializations a slot with range of uri is treated as a literal or type xsd:anyURI unless it is an identifier or a reference to an identifier, in which case it is translated directly to a node |\n| **Close Mappings:** | | schema:URL |\n```\n\n----------------------------------------\n\nTITLE: Defining Version Slot in LinkML Schema\nDESCRIPTION: This snippet defines the 'version' slot for LinkML schema definitions. It specifies that the version is a string property of SchemaDefinition, with mappings to PAV and Schema.org vocabularies.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/version.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: version\n\nparticular version of schema\n\nURI: [linkml:version](https://w3id.org/linkml/version)\n\n\n## Domain and Range\n\n[SchemaDefinition](SchemaDefinition.md) &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [SchemaDefinition](SchemaDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | pav:version |\n| **In Subsets:** | | BasicSubset |\n| **Exact Mappings:** | | schema:schemaVersion |\n```\n\n----------------------------------------\n\nTITLE: Markdown Definition for any_of Slot\nDESCRIPTION: Markdown documentation defining the any_of slot in LinkML, including its URI, domain/range specifications, inheritance relationships, usage contexts, and related properties. The slot implements logical OR functionality for path expressions.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/path_expression_any_of.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: any_of\n\nholds if at least one of the expressions hold\n\nURI: [linkml:path_expression_any_of](https://w3id.org/linkml/path_expression_any_of)\n\n\n## Domain and Range\n\n[PathExpression](PathExpression.md) &#8594;  <sub>0..\\*</sub> [PathExpression](PathExpression.md)\n\n## Parents\n\n *  is_a: [any_of](any_of.md)\n\n## Children\n\n\n## Used by\n\n * [PathExpression](PathExpression.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n| **See also:** | | [https://w3id.org/linkml/docs/specification/05validation/#rules](https://w3id.org/linkml/docs/specification/05validation/#rules) |\n| **Exact Mappings:** | | sh:or |\n```\n\n----------------------------------------\n\nTITLE: Defining URI for value_specification_constant Slot in Markdown\nDESCRIPTION: Specifies the URI for the 'value_specification_constant' slot in the LinkML metamodel.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/value_specification_constant.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nURI: [linkml:value_specification_constant](https://w3id.org/linkml/value_specification_constant)\n```\n\n----------------------------------------\n\nTITLE: Integer Type Mappings Table in LinkML\nDESCRIPTION: Markdown table showing exact mappings of the Integer type to schema.org's Integer definition\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/types/Integer.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Integer |\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectIdentifier Type in LinkML Markdown\nDESCRIPTION: This snippet defines the ObjectIdentifier type in LinkML, specifying its URI, root type, representation, and additional properties. It's used for inheritance and type checking in the LinkML model.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/types/Objectidentifier.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: objectidentifier\n\nA URI or CURIE that represents an object in the model.\n\nURI: [linkml:Objectidentifier](https://w3id.org/linkml/Objectidentifier)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **ElementIdentifier** |\n| Representation | | str |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | Used for inheritance and type checking |\n```\n\n----------------------------------------\n\nTITLE: Proposed JSON-LD Context with Global @prefix\nDESCRIPTION: This JSON snippet shows a proposed solution to allow @prefix as a default on the entire context, which would simplify prefix handling for multiple entries.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/context_issue.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"@context\" : {\n       \"@prefix\": true,\n       \"CHEBI\" : \"http://purl.obolibrary.org/obo/CHEBI_\"\n        ...\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining 'key' Slot in LinkML (Markdown)\nDESCRIPTION: This snippet defines the 'key' slot in LinkML. It specifies that the slot is of Boolean type, applicable to SlotDefinition, and has various properties and constraints associated with it.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/key.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: key\n\nTrue means that the key slot(s) uniquely identify the elements within a single container\n\nURI: [linkml:key](https://w3id.org/linkml/key)\n\n\n## Domain and Range\n\n[SlotDefinition](SlotDefinition.md) &#8594;  <sub>0..1</sub> [Boolean](types/Boolean.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [SlotDefinition](SlotDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | key is inherited |\n|  | | a given domain can have at most one key slot (restriction to be removed in the future) |\n|  | | identifiers and keys are mutually exclusive.  A given domain cannot have both |\n|  | | a key slot is automatically required.  Keys cannot be optional |\n| **In Subsets:** | | SpecificationSubset |\n|  | | BasicSubset |\n|  | | RelationalModelProfile |\n| **See also:** | | [linkml:unique_keys](linkml:unique_keys) |\n```\n\n----------------------------------------\n\nTITLE: Sample JSON with Empty String Values\nDESCRIPTION: This JSON snippet shows an example of LLM-generated output with empty strings for date fields, which can cause issues when parsing with Pydantic.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/generate-ai-prompts.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n  \"has_familial_relationships\": [\n    {\n      \"started_at_time\": \"\",\n      \"ended_at_time\": \"\",\n      \"related_to\": \"Toshiro\",\n      \"type\": \"SIBLING_OF\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Time Type Properties Table\nDESCRIPTION: Markdown table showing additional properties of the Time type, including exact mappings to schema:Time.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue65/types/Time.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Time |\n```\n\n----------------------------------------\n\nTITLE: JSON-LD Context Definition for Person and FriendlyPerson\nDESCRIPTION: This JSON-LD context defines the vocabulary and data types for the Person and FriendlyPerson classes, including mappings to FOAF ontology terms.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_notebooks/output/examples.txt#2025-04-17_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"comments\": {\n      \"description\": \"Auto generated by LinkML jsonld context generator\",\n      \"generation_date\": \"2025-01-31T17:33:16\",\n      \"source\": null\n   },\n   \"@context\": {\n      \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n      \"foaf\": \"http://xmlns.com/foaf/0.1/\",\n      \"samp\": \"http://example.org/model/\",\n      \"@vocab\": \"http://example.org/model/\",\n      \"age\": {\n         \"@type\": \"xsd:integer\",\n         \"@id\": \"foaf:age\"\n      },\n      \"first_name\": {\n         \"@id\": \"foaf:firstName\"\n      },\n      \"id\": \"@id\",\n      \"knows\": {\n         \"@type\": \"@id\",\n         \"@id\": \"foaf:knows\"\n      },\n      \"last_name\": {\n         \"@id\": \"foaf:lastName\"\n      },\n      \"living\": {\n         \"@type\": \"xsd:boolean\",\n         \"@id\": \"living\"\n      },\n      \"@base\": \"http://example.org/people/\",\n      \"FriendlyPerson\": {\n         \"@id\": \"FriendlyPerson\"\n      },\n      \"Person\": {\n         \"@id\": \"Person\"\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Type Hints Import for LinkML Classes\nDESCRIPTION: Import statement for Python type hints used in LinkML-generated classes for type checking and IDE support.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/port-linkml.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional, List, Union, Dict, ClassVar, Any\n```\n\n----------------------------------------\n\nTITLE: JSON Output of Person Instance\nDESCRIPTION: The JSON representation of the Person instance, generated using the LinkML runtime.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial05.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"ORCID:9876\",\n  \"full_name\": \"Lex Luthor\",\n  \"aliases\": [\n    \"Bad Guy\"\n  ],\n  \"@type\": \"Person\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining 'publisher' Slot in LinkML (Markdown)\nDESCRIPTION: This snippet defines the 'publisher' slot in LinkML, specifying its URI, domain and range, and additional properties such as mappings and subset inclusion.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/publisher.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: publisher\n\nAn entity responsible for making the resource available\n\nURI: [linkml:publisher](https://w3id.org/linkml/publisher)\n\n\n## Domain and Range\n\n[Element](Element.md) &#8594;  <sub>0..1</sub> [Uriorcurie](types/Uriorcurie.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | dcterms:publisher |\n| **In Subsets:** | | BasicSubset |\n```\n\n----------------------------------------\n\nTITLE: Defining Books Collection in JSON for Relational Model\nDESCRIPTION: This JSON snippet shows the Books collection in a relational model, with each book referencing an author through an author_id.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/recognize-structural-forms.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\"book_id\": 101, \"title\": \"20,000 Leagues Under the Sea with Walruses\", \"author_id\": 1, \"genre\": \"Sci-Fi\", \"year\": 2018, \"rating\": 5},\n    {\"book_id\": 102, \"title\": \"The Great Walrus Gatsby\", \"author_id\": 2, \"genre\": \"Classic\", \"year\": 2020, \"rating\": 4},\n    {\"book_id\": 103, \"title\": \"The Tusk of Physics\", \"author_id\": 3, \"genre\": \"Science\", \"year\": 2019, \"rating\": 5},\n    {\"book_id\": 104, \"title\": \"Walruses of Waterloo\", \"author_id\": 4, \"genre\": \"History\", \"year\": 2017, \"rating\": 3},\n    {\"book_id\": 105, \"title\": \"A Tale of Two Walruses\", \"author_id\": 5, \"genre\": \"Adventure\", \"year\": 2021, \"rating\": 4}\n]\n```\n\n----------------------------------------\n\nTITLE: Defining URI for City Slot in LinkML\nDESCRIPTION: Defines the unique URI identifier for the city slot using w3id.org namespace within the personinfo schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/city.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nURI: [personinfo:city](https://w3id.org/linkml/examples/personinfo/city)\n```\n\n----------------------------------------\n\nTITLE: Importing ArrayExpression Class from LinkML Model\nDESCRIPTION: Autodocumentation directive for the ArrayExpression class from the LinkML metamodel, including all members and undocumented members.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/code/metamodel.rst#2025-04-17_snippet_6\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ArrayExpression\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Describing Additional Uri Properties in Markdown\nDESCRIPTION: This markdown table provides additional properties of the Uri type, including comments on its treatment in RDF serializations and close mappings to schema.org concepts.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/types/Uri.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | in RDF serializations a slot with range of uri is treated as a literal or type xsd:anyURI unless it is an identifier or a reference to an identifier, in which case it is translated directly to a node |\n| **Close Mappings:** | | schema:URL |\n```\n\n----------------------------------------\n\nTITLE: Integer Type Definition Table\nDESCRIPTION: Markdown table defining the root built-in type as integer\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue62/types/Integer.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **int** |\n```\n\n----------------------------------------\n\nTITLE: LinkML Boolean Type Definition\nDESCRIPTION: Markdown table defining the core properties of the Boolean type in LinkML, specifying it as a built-in Bool type with boolean representation.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/types/Boolean.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **Bool** |\n| Representation | | bool |\n```\n\n----------------------------------------\n\nTITLE: Defining Diagnosis Slot in LinkML Schema\nDESCRIPTION: Schema definition for a slot named 'diagnosis' with URI linking to personinfo schema. The slot has a cardinality of 0..1 and references DiagnosisConcept as its range. It is used as a property in the MedicalEvent class.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/diagnosis.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: diagnosis\n\nURI: [personinfo:diagnosis](https://w3id.org/linkml/examples/personinfo/diagnosis)\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [DiagnosisConcept](DiagnosisConcept.md)\n\n## Parents\n\n## Children\n\n## Used by\n\n * [MedicalEvent](MedicalEvent.md)\n```\n\n----------------------------------------\n\nTITLE: LinkML Class Definition with YUML Diagram\nDESCRIPTION: Class definition diagram showing the DimensionExpression class structure, its attributes, and relationships with other classes using YUML notation.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/DimensionExpression.md#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\n[SubsetDefinition],[StructuredAlias],[Extension],[Extensible],[Example],[ArrayExpression]++-%20dimensions%200..*>[DimensionExpression&#124;alias:string%20%3F;maximum_cardinality:integer%20%3F;minimum_cardinality:integer%20%3F;exact_cardinality:integer%20%3F;description:string%20%3F;title:string%20%3F;deprecated:string%20%3F;todos:string%20*;notes:string%20*;comments:string%20*;from_schema:uri%20%3F;imported_from:string%20%3F;source:uriorcurie%20%3F;in_language:string%20%3F;see_also:uriorcurie%20*;deprecated_element_has_exact_replacement:uriorcurie%20%3F;deprecated_element_has_possible_replacement:uriorcurie%20%3F;aliases:string%20*;mappings:uriorcurie%20*;exact_mappings:uriorcurie%20*;close_mappings:uriorcurie%20*;related_mappings:uriorcurie%20*;narrow_mappings:uriorcurie%20*;broad_mappings:uriorcurie%20*;created_by:uriorcurie%20%3F;contributors:uriorcurie%20*;created_on:datetime%20%3F;last_updated_on:datetime%20%3F;modified_by:uriorcurie%20%3F;status:uriorcurie%20%3F;rank:integer%20%3F;categories:uriorcurie%20*;keywords:string%20*],[DimensionExpression]uses%20-.->[Extensible],[DimensionExpression]uses%20-.->[Annotatable],[DimensionExpression]uses%20-.->[CommonMetadata]\n```\n\n----------------------------------------\n\nTITLE: Slot Definition Properties in LinkML\nDESCRIPTION: Documents the domain, range, and properties of the 'inherited' slot in LinkML. This slot indicates whether values are inherited by subclass instances, with a boolean range and specific usage in metamodel definitions.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/inherited.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: inherited\n\ntrue means that the *value* of a slot is inherited by subclasses\n\nURI: [linkml:inherited](https://w3id.org/linkml/inherited)\n\n## Domain and Range\n[SlotDefinition](SlotDefinition.md) &#8594;  <sub>0..1</sub> [Boolean](types/Boolean.md)\n\n## Parents\n\n## Children\n\n## Used by\n * [SlotDefinition](SlotDefinition.md)\n\n## Other properties\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | the slot is to be used for defining *metamodels* only |\n|  | | Inherited applies to slot values.  Parent *slots* are always inherited by subclasses |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: LinkML Boolean Type Markdown Table Definition\nDESCRIPTION: Markdown table representation defining the core properties of the LinkML Boolean type, including its root type and representation format.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/types/Boolean.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **Bool** |\n| Representation | | bool |\n```\n\n----------------------------------------\n\nTITLE: Documenting JSON-LD CLI Command with Sphinx\nDESCRIPTION: Sphinx Click documentation directive to generate documentation for the gen-jsonld CLI command implemented in the jsonldgen module.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/jsonld.rst#2025-04-17_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. click:: linkml.generators.jsonldgen:cli\n    :prog: gen-jsonld\n```\n\n----------------------------------------\n\nTITLE: Generating Python Dataclass for Required List of Elements\nDESCRIPTION: Python code generated for a required list of ThreeElementClass instances. It includes validation for non-empty lists and type coercion for each element.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass RequiredThreeElementRangeList(YAMLRoot):\n    \"\"\"\n    Range is a required list of a class that contain two non-key/non-identifier elements\n    \"\"\"\n    ...\n\n    v1: Union[Union[dict, ThreeElementClass], List[Union[dict, ThreeElementClass]]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        elif not isinstance(self.v1, list):\n            self.v1 = [self.v1]\n        elif len(self.v1) == 0:\n            raise ValueError(f\"v1 must be a non-empty list\")\n        self.v1 = [v if isinstance(v, ThreeElementClass) else ThreeElementClass(**v) for v in self.v1]\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Defining prefix_reference Slot in LinkML (Markdown)\nDESCRIPTION: This snippet defines the 'prefix_reference' slot in LinkML. It specifies the domain as 'Prefix', range as 'Uri', and includes usage and mapping information. The slot is used to represent the namespace expansion of a prefix.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/prefix_reference.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: prefix_reference\n\nThe namespace to which a prefix expands to.\n\nURI: [linkml:prefix_reference](https://w3id.org/linkml/prefix_reference)\n\n\n## Domain and Range\n\n[Prefix](Prefix.md) &#8594;  <sub>1..1</sub> [Uri](types/Uri.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [Prefix](Prefix.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | sh:namespace |\n| **In Subsets:** | | SpecificationSubset |\n|  | | BasicSubset |\n```\n\n----------------------------------------\n\nTITLE: Person Class UML Diagram Representation\nDESCRIPTION: YUML-formatted UML class diagram showing the Person class's inheritance, attributes, and relationships with other classes like MedicalEvent, FamilialRelationship, EmploymentEvent, and Address.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/Person.md#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\n[MedicalEvent]<has_medical_history%200..*-++[Person&#124;primary_email:string%20%3F;birth_date:string%20%3F;age_in_years:integer%20%3F;gender:GenderType%20%3F;aliases:string%20*;id(i):string;name(i):string%20%3F;description(i):string%20%3F;image(i):string%20%3F],[FamilialRelationship]<has_familial_relationships%200..*-++[Person],[EmploymentEvent]<has_employment_history%200..*-++[Person],[Address]<current_address%200..1-++[Person],[FamilialRelationship]-%20related%20to%201..1>[Person],[Container]++-%20persons%200..*>[Person],[Person]uses%20-.->[HasAliases],[NamedThing]^-[Person],[NamedThing],[MedicalEvent],[HasAliases],[FamilialRelationship],[EmploymentEvent],[Container],[Address]\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Properties Definition\nDESCRIPTION: Markdown table defining the subsets and properties for the ID slot including SpecificationSubset, MinimalSubset, BasicSubset, and OwlProfile.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/id.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n|  | | MinimalSubset |\n|  | | BasicSubset |\n|  | | OwlProfile |\n```\n\n----------------------------------------\n\nTITLE: Defining Authors Collection in JSON for Relational Model\nDESCRIPTION: This JSON snippet demonstrates the Authors collection in a relational model, with each author having a unique identifier.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/recognize-structural-forms.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\"author_id\": 1, \"name\": \"Jules Verne-Inspired\"},\n    {\"author_id\": 2, \"name\": \"F. Scott Fitztusk\"},\n    {\"author_id\": 3, \"name\": \"Stephen Hawtusk\"},\n    {\"author_id\": 4, \"name\": \"Natasha Rostova\"},\n    {\"author_id\": 5, \"name\": \"Charles Tuskens\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for LinkML Developer Guide\nDESCRIPTION: This code snippet defines the structure of the developer guide using reStructuredText directives. It sets up a table of contents with a maximum depth of 2 and includes various topics related to LinkML development.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   organization\n   notebooks\n   manipulating-schemas\n   manage-releases\n   schemaview\n   schemabuilder\n   loaders-and-dumpers\n   inference\n   using-sql-dbs\n   sqlstore\n   tool-developer-guide\n   contributing-code\n   deprecation\n```\n\n----------------------------------------\n\nTITLE: LinkML Street Slot Schema Definition\nDESCRIPTION: Defines the 'street' slot with a URI of 'https://w3id.org/linkml/examples/personinfo/street', having a cardinality of 0..1 and type of String. The slot is used by the Address class.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/street.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: street\n\nURI: [personinfo:street](https://w3id.org/linkml/examples/personinfo/street)\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n## Children\n\n## Used by\n\n * [Address](Address.md)\n```\n\n----------------------------------------\n\nTITLE: Domain and Range Definition\nDESCRIPTION: Specifies the domain (NamedThing) and range (String) constraints for the subject property with cardinality of 0..1.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue65/subject.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[NamedThing](NamedThing.md) &#8594;  <sub>0..1</sub> [String](types/String.md)\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for LinkML Code Documentation in reStructuredText\nDESCRIPTION: A reStructuredText directive creating a table of contents for the LinkML code documentation, linking to the metamodel, utils, validator, and deprecation modules.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/code/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\n    metamodel\n    utils\n    validator\n    deprecation\n```\n\n----------------------------------------\n\nTITLE: Defining Uri Type Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the Uri type in LinkML using a markdown table. It specifies the root type, representation, and provides additional comments and mappings.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/types/Uri.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **URI** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Defining 'tag' Slot in LinkML Schema\nDESCRIPTION: This snippet defines the 'tag' slot in LinkML. It specifies that the slot has a domain of Extension, a range of Uriorcurie, and is used by both Annotation and Extension classes.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/extension_tag.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: tag\n\na tag associated with an extension\n\nURI: [linkml:extension_tag](https://w3id.org/linkml/extension_tag)\n\n\n## Domain and Range\n\n[Extension](Extension.md) &#8594;  <sub>1..1</sub> [Uriorcurie](types/Uriorcurie.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [Annotation](Annotation.md)\n * [Extension](Extension.md)\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Definition for Extension Value\nDESCRIPTION: Formal definition of the 'value' slot that is used by the Extension class in LinkML. The slot has a cardinality of 1..1 and accepts any value type (AnyValue).\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/extension_value.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: value\n\nthe actual annotation\n\nURI: [linkml:extension_value](https://w3id.org/linkml/extension_value)\n\n\n## Domain and Range\n\n[Extension](Extension.md) &#8594;  <sub>1..1</sub> [AnyValue](AnyValue.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [Extension](Extension.md)\n```\n\n----------------------------------------\n\nTITLE: Generated Python Code for Date Type and Dates Class\nDESCRIPTION: This Python code snippet shows the generated classes for the 'Date' type and 'Dates' class, including type definitions and data validation in the __post_init__ method.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Date(XSDDate):\n    \"\"\" a date (year, month and day) in an idealized calendar \"\"\"\n    type_class_uri = XSD.date\n    type_class_curie = \"xsd:date\"\n    type_name = \"date\"\n    type_model_uri = METATYPE.Date\n\n@dataclass\nclass Dates(YAMLRoot):\n    \"\"\"\n    various permutations of the date type\n    \"\"\"\n    ...\n\n    mand_date: Union[str, XSDDate] = None\n    mand_multi_date: Union[Union[str, XSDDate], List[Union[str, XSDDate]]] = None\n    opt_date: Optional[Union[str, XSDDate]] = None\n    opt_multi_date: Optional[Union[Union[str, XSDDate], List[Union[str, XSDDate]]]] = empty_list()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.mand_date is None:\n            raise ValueError(\"mand_date must be supplied\")\n        if not isinstance(self.mand_date, XSDDate):\n            self.mand_date = XSDDate(self.mand_date)\n\n        if self.mand_multi_date is None:\n            raise ValueError(\"mand_multi_date must be supplied\")\n        elif not isinstance(self.mand_multi_date, list):\n            self.mand_multi_date = [self.mand_multi_date]\n        elif len(self.mand_multi_date) == 0:\n            raise ValueError(f\"mand_multi_date must be a non-empty list\")\n        self.mand_multi_date = [v if isinstance(v, XSDDate) else XSDDate(v) for v in self.mand_multi_date]\n\n        if self.opt_date is not None and not isinstance(self.opt_date, XSDDate):\n            self.opt_date = XSDDate(self.opt_date)\n\n        if self.opt_multi_date is None:\n            self.opt_multi_date = []\n        if not isinstance(self.opt_multi_date, list):\n            self.opt_multi_date = [self.opt_multi_date]\n        self.opt_multi_date = [v if isinstance(v, XSDDate) else XSDDate(v) for v in self.opt_multi_date]\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Anonymous Class Expression Class Properties\nDESCRIPTION: Property definitions for the AnonymousClassExpression class including inheritance, mixins, and attributes.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/AnonymousClassExpression.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* is_a: [AnonymousExpression] - An abstract parent class for nested expressions\n* mixin: [ClassExpression] - A boolean expression for determining class membership\n* Attributes:\n  - is_a: Definition (0..1)\n  - any_of: AnonymousClassExpression (0..*) \n  - exactly_one_of: AnonymousClassExpression (0..*)\n  - none_of: AnonymousClassExpression (0..*)\n  - all_of: AnonymousClassExpression (0..*)\n  - slot_conditions: SlotDefinition (0..*)\n```\n\n----------------------------------------\n\nTITLE: Defining Inverse Slot in LinkML Markdown\nDESCRIPTION: This snippet defines the 'inverse' slot in LinkML, specifying its URI, domain and range, usage, and mappings. It indicates that this slot represents a reciprocal relationship between slot definitions.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/inverse.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: inverse\n\nindicates that any instance of d s r implies that there is also an instance of r s' d\n\nURI: [linkml:inverse](https://w3id.org/linkml/inverse)\n\n\n## Domain and Range\n\n[SlotDefinition](SlotDefinition.md) &#8594;  <sub>0..1</sub> [SlotDefinition](SlotDefinition.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [SlotDefinition](SlotDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | owl:inverseOf |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: URIorCURIE Type Definition in LinkML\nDESCRIPTION: Defines the URIorCURIE built-in type that can store either a URI or CURIE value. The type is represented as a string and is a root (builtin) type in the LinkML schema language.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/types/Uriorcurie.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **URIorCURIE** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Example YAML for OptionalMultivaluedInlinedListIdentifiedThreeElementRange\nDESCRIPTION: YAML representation of instances of the OptionalMultivaluedInlinedListIdentifiedThreeElementRange class, showing how keys and values are structured.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\n  element1:\n    value: 17\n    modifier: 2012-03-11\n  element2:\n  element3:\n    name: element3\n    value: 42\n```\n\n----------------------------------------\n\nTITLE: Listing Classes Using 'id' Slot in LinkML Schema\nDESCRIPTION: Enumerates the classes that use the 'id' slot in their definitions. This includes various entity types like Concept, DiagnosisConcept, NamedThing, Organization, Person, Place, and ProcedureConcept.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/id.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Used by\n\n * [Concept](Concept.md)\n * [DiagnosisConcept](DiagnosisConcept.md)\n * [NamedThing](NamedThing.md)\n * [Organization](Organization.md)\n * [Person](Person.md)\n * [Place](Place.md)\n * [ProcedureConcept](ProcedureConcept.md)\n```\n\n----------------------------------------\n\nTITLE: Defining 'import_from' Slot in LinkML\nDESCRIPTION: Specifies the 'import_from' slot with its URI, domain, range, and usage. The slot is of type Uriorcurie and is used by ImportExpression.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/import_from.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: import_from\n\nURI: [linkml:import_from](https://w3id.org/linkml/import_from)\n\n## Domain and Range\n\n[ImportExpression](ImportExpression.md) &#8594;  <sub>1..1</sub> [Uriorcurie](types/Uriorcurie.md)\n\n## Parents\n\n## Children\n\n## Used by\n\n * [ImportExpression](ImportExpression.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Class Inheritance with ShEx Schema\nDESCRIPTION: A ShEx schema that defines the class hierarchy and constraints. The schema includes data type definitions, class definitions with inheritance relationships, and property constraints for each class in the model.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_notebooks/output/inheritance.txt#2025-04-17_snippet_1\n\nLANGUAGE: shex\nCODE:\n```\n# metamodel_version: 1.7.0\nBASE <http://example.org/model/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\n\n<String> xsd:string\n\n<Int> xsd:integer\n\n<Boolean> xsd:boolean\n\n<Child1> CLOSED {\n    (  $<Child1_tes> (  &<Children_tes> ;\n          rdf:type [ <Children> ] ?\n       ) ;\n       rdf:type [ <Child1> ]\n    )\n}\n\n<Child2>  (\n    CLOSED {\n       (  $<Child2_tes> (  &<Children_tes> ;\n             rdf:type [ <Children> ] ? ;\n             <description> @<String>\n          ) ;\n          rdf:type [ <Child2> ]\n       )\n    } OR @<Child21> OR @<Child22>\n)\n\n<Child21> CLOSED {\n    (  $<Child21_tes> (  &<Child2_tes> ;\n          rdf:type [ <Child2> ] ?\n       ) ;\n       rdf:type [ <Child21> ]\n    )\n}\n\n<Child22> CLOSED {\n    (  $<Child22_tes> (  &<Child2_tes> ;\n          rdf:type [ <Child2> ] ? ;\n          <angry> @<Boolean>\n       ) ;\n       rdf:type [ <Child22> ]\n    )\n}\n\n<Children>  (\n    CLOSED {\n       (  $<Children_tes> (  &<Root_tes> ;\n             rdf:type [ <Root> ] ?\n          ) ;\n          rdf:type [ <Children> ]\n       )\n    } OR @<Child1> OR @<Child2>\n)\n\n<Root>  (\n    CLOSED {\n       (  $<Root_tes> rdf:type . * ;\n          rdf:type [ <Root> ] ?\n       )\n    } OR @<Children>\n)\n```\n\n----------------------------------------\n\nTITLE: LinkML Float Type Markdown Definition\nDESCRIPTION: Markdown table defining the float type properties in LinkML, including its root type and schema.org mapping.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue62/types/Float.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| --- | --- | --- |\n| Root (builtin) type | | **float** |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Float |\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for LinkML Generator\nDESCRIPTION: RST directives for configuring Sphinx documentation of the LinkML generator CLI tool and class documentation.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/linkml.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. click:: linkml.generators.linkmlgen:cli\n    :prog: gen-linkml\n    :nested: full\n\n.. currentmodule:: linkml.generators.linkmlgen\n\n.. autoclass:: LinkmlGenerator\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Declaring Deprecation in LinkML's deprecation.py\nDESCRIPTION: Example of creating a Deprecation object and adding it to the DEPRECATIONS tuple in the deprecation module. This declares a deprecation for a hypothetical semaphore feature.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/deprecation.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDEPRECATIONS = (\n  Deprecation(\n    name = \"semaphore\",\n    message = (\n      \"Flag-based semaphore schemas were considered to not have a high \"\n      \"enough information capacity to usefully represent a linkml schema\"),\n    recommendation = \"Update to a digital schema representation or morse code\",\n    deprecated_in = SemVer.from_str(\"1.7.5\"),\n    removed_in = SemVer.from_str(\"1.8.0\"),\n    issue = -1\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Philosophy Quote for LinkML Development\nDESCRIPTION: A quoted statement describing the testing philosophy used in the LinkML project, emphasizing that features without tests are considered non-existent and subject to removal.\nSOURCE: https://github.com/linkml/linkml/blob/main/ModelChanges.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"If there isn't a test for it, it doesn't exist\"\n```\n\n----------------------------------------\n\nTITLE: Defining 'source_ontology' Slot in LinkML Markdown\nDESCRIPTION: This markdown snippet defines the 'source_ontology' slot, specifying its URI, domain and range, usage, and additional properties. It's used to represent the source ontology for query operations in LinkML schemas.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/source_ontology.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: source_ontology\n\nAn ontology or vocabulary or terminology that is used in a query to obtain a set of permissible values\n\nURI: [linkml:source_ontology](https://w3id.org/linkml/source_ontology)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [Uriorcurie](types/Uriorcurie.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [MatchQuery](MatchQuery.md)\n * [ReachabilityQuery](ReachabilityQuery.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Aliases:** | | terminology |\n|  | | vocabulary |\n| **Comments:** | | examples include schema.org, wikidata, or an OBO ontology |\n|  | | for obo ontologies we recommend CURIEs of the form obo:cl, obo:envo, etc |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: Generating Protobuf from LinkML Schema using CLI\nDESCRIPTION: Command line example showing how to generate a Protocol Buffer definition file from a LinkML schema YAML file\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/protobuf.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngen-proto personinfo.yaml > personinfo.proto\n```\n\n----------------------------------------\n\nTITLE: Defining Postal Code Slot in LinkML Schema\nDESCRIPTION: Schema definition for a postal_code slot that accepts string values with 0..1 cardinality. The slot is used by the Address class and has a URI identifier.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/postal_code.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: postal_code\n\nURI: [personinfo:postal_code](https://w3id.org/linkml/examples/personinfo/postal_code)\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n## Children\n\n## Used by\n\n * [Address](Address.md)\n```\n\n----------------------------------------\n\nTITLE: ProcedureConcept Class Inheritance\nDESCRIPTION: Shows the inheritance relationship where ProcedureConcept extends from the Concept base class.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/ProcedureConcept.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n *  is_a: [Concept](Concept.md)\n```\n\n----------------------------------------\n\nTITLE: Markdown Table: Anything Class Mappings\nDESCRIPTION: A markdown table showing the mapping relationships for the Anything class, which maps to linkml:Any.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/Anything.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | linkml:Any |\n```\n\n----------------------------------------\n\nTITLE: Defining Current Address Slot in LinkML\nDESCRIPTION: Schema definition for the current_address property that links a Person to their current Address. The slot has optional cardinality (0..1) and uses the personinfo namespace.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/current_address.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: current_address\n\nThe address at which a person currently lives\n\nURI: [personinfo:current_address](https://w3id.org/linkml/examples/personinfo/current_address)\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [Address](Address.md)\n\n## Parents\n\n## Children\n\n## Used by\n\n * [Person](Person.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Last Updated On Property in LinkML\nDESCRIPTION: Specifies the 'last_updated_on' property for LinkML elements. It indicates the time at which the element was last updated.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/AnonymousExpression.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n * [last_updated_on](last_updated_on.md)  <sub>0..1</sub>\n     * Description: time at which the element was last updated\n     * Range: [Datetime](types/Datetime.md)\n     * in subsets: (BasicSubset)\n```\n\n----------------------------------------\n\nTITLE: Defining ClassLevelRule Class in LinkML\nDESCRIPTION: Defines the ClassLevelRule class with its URI and description. It shows that ClassRule is a child of ClassLevelRule.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/ClassLevelRule.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Class: class_level_rule\n\nA rule that is applied to classes\n\nURI: [linkml:ClassLevelRule](https://w3id.org/linkml/ClassLevelRule)\n```\n\n----------------------------------------\n\nTITLE: Defining Framework Slot in LinkML Markdown\nDESCRIPTION: This snippet defines the 'framework' slot in LinkML. It specifies that the slot takes a string value representing a serialization format code from the LinkML frameworks vocabulary. The slot has a cardinality of 1..1 and is used by the TypeMapping class.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/framework_key.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Slot: framework\n\nThe name of a format that can be used to serialize LinkML data. The string value should be a code from the LinkML frameworks vocabulary, but this is not strictly enforced\n\nURI: [linkml:framework_key](https://w3id.org/linkml/framework_key)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>1..1</sub> [String](types/String.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [TypeMapping](TypeMapping.md)\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Properties Table\nDESCRIPTION: Markdown table showing the properties and metadata for the class_uri slot including aliases, comments, subsets and related references.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/class_uri.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Aliases:** | | public ID |\n| **Comments:** | | Assigning class_uris can provide additional hooks for interoperation, indicating a common conceptual model |\n| **In Subsets:** | | SpecificationSubset |\n|  | | BasicSubset |\n| **See also:** | | [linkml:definition_uri](linkml:definition_uri) |\n|  | | [https://linkml.io/linkml/schemas/uris-and-mappings.html](https://linkml.io/linkml/schemas/uris-and-mappings.html) |\n```\n\n----------------------------------------\n\nTITLE: Defining Curie Type in LinkML Markdown\nDESCRIPTION: This snippet defines the Curie type in LinkML, specifying its URI, root type, representation, and additional properties. It uses a markdown table format to structure the information.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/types/Curie.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: curie\n\na compact URI\n\nURI: [linkml:Curie](https://w3id.org/linkml/Curie)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **Curie** |\n| Representation | | str |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | in RDF serializations this MUST be expanded to a URI |\n|  | | in non-RDF serializations MAY be serialized as the compact representation |\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Definition Properties\nDESCRIPTION: Markdown table showing the mappings and subset properties of the modified_by slot\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/modified_by.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | oslc:modifiedBy |\n| **In Subsets:** | | BasicSubset |\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Properties Definition\nDESCRIPTION: Markdown specification of the minimum_cardinality slot property, defining its domain, range, inheritance, usage contexts and constraints.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/minimum_cardinality.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: minimum_cardinality\n\nthe minimum number of entries for a multivalued slot\n\nURI: [linkml:minimum_cardinality](https://w3id.org/linkml/minimum_cardinality)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [Integer](types/Integer.md)\n\n## Parents\n\n *  is_a: [list_value_specification_constant](list_value_specification_constant.md)\n\n## Children\n\n\n## Used by\n\n * [AnonymousSlotExpression](AnonymousSlotExpression.md)\n * [DimensionExpression](DimensionExpression.md)\n * [SlotDefinition](SlotDefinition.md)\n * [SlotExpression](SlotExpression.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | minimum_cardinality cannot be greater than maximum_cardinality |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: Defining Extensible Mixin Class in LinkML Markdown\nDESCRIPTION: This code snippet defines the Extensible mixin class in LinkML markdown format. It specifies the class URI, lists the classes that use this mixin, and defines the 'extensions' attribute.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/Extensible.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Class: extensible\n\nmixin for classes that support extension\n\nURI: [linkml:Extensible](https://w3id.org/linkml/Extensible)\n\n## Mixin for\n\n * [AnonymousExpression](AnonymousExpression.md) (mixin)  - An abstract parent class for any nested expression\n * [ArrayExpression](ArrayExpression.md) (mixin)  - defines the dimensions of an array\n * [ClassRule](ClassRule.md) (mixin)  - A rule that applies to instances of a class\n * [DimensionExpression](DimensionExpression.md) (mixin)  - defines one of the dimensions of an array\n * [Element](Element.md) (mixin)  - A named element in the model\n * [EnumBinding](EnumBinding.md) (mixin)  - A binding of a slot or a class to a permissible value from an enumeration.\n * [ImportExpression](ImportExpression.md) (mixin)  - an expression describing an import\n * [PathExpression](PathExpression.md) (mixin)  - An expression that describes an abstract path from an object to another through a sequence of slot lookups\n * [PatternExpression](PatternExpression.md) (mixin)  - a regular expression pattern used to evaluate conformance of a string\n * [PermissibleValue](PermissibleValue.md) (mixin)  - a permissible value, accompanied by intended text and an optional mapping to a concept URI\n * [StructuredAlias](StructuredAlias.md) (mixin)  - object that contains meta data about a synonym or alias including where it came from (source) and its scope (narrow, broad, etc.)\n * [TypeMapping](TypeMapping.md) (mixin)  - Represents how a slot or type can be serialized to a format.\n * [UniqueKey](UniqueKey.md) (mixin)  - a collection of slots whose values uniquely identify an instance of a class\n\n## Referenced by Class\n\n\n## Attributes\n\n\n### Own\n\n * [extensions](extensions.md)  <sub>0..*</sub>\n     * Description: a tag/text tuple attached to an arbitrary element\n     * Range: [Extension](Extension.md)\n```\n\n----------------------------------------\n\nTITLE: LinkML Boolean Slot URI Declaration\nDESCRIPTION: Defines the canonical URI identifier for the boolean_slot concept in LinkML\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/boolean_slot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[linkml:boolean_slot](https://w3id.org/linkml/boolean_slot)\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Definition Table in Markdown\nDESCRIPTION: Markdown table defining the core properties of the Boolean type in LinkML, including its root type and representation format.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/types/types/Boolean.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **Bool** |\n| Representation | | bool |\n```\n\n----------------------------------------\n\nTITLE: Integer Type Properties Table\nDESCRIPTION: Markdown table showing additional properties including exact mappings to schema.org\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue62/types/Integer.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Integer |\n```\n\n----------------------------------------\n\nTITLE: Defining String Template in LinkML YAML\nDESCRIPTION: Demonstrates how to define a string_template attribute for a LinkML class in YAML. The template uses Python format string syntax to reference class attributes.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/string_template.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n   person:\n     attributes:\n        name:\n          range: string\n          required: true\n        age:\n          range: integer\n        gender:\n          range string\n     ...\n     string_template: \"{name} - a {age} year old {gender}\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Type Definition for LinkML Datetime\nDESCRIPTION: Markdown table structure defining the datetime type properties including its URI, root type (XSDDateTime), representation (string), and schema.org mapping.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/types/Datetime.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| --- | --- | --- |\n| Root (builtin) type | | **XSDDateTime** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Definition Table\nDESCRIPTION: Markdown table showing additional properties of the exactly_one_of slot including subsets, external references and mappings.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/class_expression_exactly_one_of.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n| **See also:** | | [https://w3id.org/linkml/docs/specification/05validation/#rules](https://w3id.org/linkml/docs/specification/05validation/#rules) |\n| **Exact Mappings:** | | sh:xone |\n```\n\n----------------------------------------\n\nTITLE: Example Data for Simple Implicit Scalar Pattern\nDESCRIPTION: Example data showing how measurements are recorded using the implicit scalar pattern.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-measurements.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- id: P001\n  mass: 70.0\n  height: 1.53\n  bmi: 29.9\n```\n\n----------------------------------------\n\nTITLE: Defining 'path_rule' Slot in LinkML Schema\nDESCRIPTION: This snippet defines the 'path_rule' slot in LinkML. It specifies the slot's URI, domain, range, and usage. The path_rule is used to infer slot assignments based on evaluating paths through slot assignments.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/path_rule.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: path_rule\n\na rule for inferring a slot assignment based on evaluating a path through a sequence of slot assignments\n\nURI: [linkml:path_rule](https://w3id.org/linkml/path_rule)\n\n\n## Domain and Range\n\n[SlotDefinition](SlotDefinition.md) &#8594;  <sub>0..1</sub> [PathExpression](PathExpression.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [SlotDefinition](SlotDefinition.md)\n```\n\n----------------------------------------\n\nTITLE: Invalid Representation of OBO Prefixes with Trailing Underscores in JSON-LD\nDESCRIPTION: An example of incorrect representation of OBO ontology prefixes in JSON-LD. The JSON-LD 1.1 spec doesn't support trailing underscores in simple prefix maps.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/jsonld-context.rst#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"@context\": {\n    \"PATO\": \"http://purl.obolibrary.org/obo/PATO_\",\n     }\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Definition - open_world Property\nDESCRIPTION: Schema definition for the open_world slot that specifies whether postconditions are required. The slot has a boolean range, is optional (0..1 cardinality), and is used by ClassRule objects. It belongs to the SpecificationSubset.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/open_world.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: open_world\n\nif true, the the postconditions may be omitted in instance data, but it is valid for an inference engine to add these\n\nURI: [linkml:open_world](https://w3id.org/linkml/open_world)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [Boolean](types/Boolean.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [ClassRule](ClassRule.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: Class Diagram in YUML\nDESCRIPTION: A diagram showing the relationships between ClassRule and related classes, including inheritance from ClassLevelRule and mixing in of Extensible, Annotatable, and CommonMetadata.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/ClassRule.md#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\n[SubsetDefinition],[StructuredAlias],[Extension],[Extensible],[Example],[CommonMetadata],[AnonymousClassExpression]<elseconditions%200..1-++[ClassRule&#124;bidirectional:boolean%20%3F;open_world:boolean%20%3F;rank:integer%20%3F;deactivated:boolean%20%3F;description:string%20%3F;title:string%20%3F;deprecated:string%20%3F;todos:string%20*;notes:string%20*;comments:string%20*;from_schema:uri%20%3F;imported_from:string%20%3F;source:uriorcurie%20%3F;in_language:string%20%3F;see_also:uriorcurie%20*;deprecated_element_has_exact_replacement:uriorcurie%20%3F;deprecated_element_has_possible_replacement:uriorcurie%20%3F;aliases:string%20*;mappings:uriorcurie%20*;exact_mappings:uriorcurie%20*;close_mappings:uriorcurie%20*;related_mappings:uriorcurie%20*;narrow_mappings:uriorcurie%20*;broad_mappings:uriorcurie%20*;created_by:uriorcurie%20%3F;contributors:uriorcurie%20*;created_on:datetime%20%3F;last_updated_on:datetime%20%3F;modified_by:uriorcurie%20%3F;status:uriorcurie%20%3F;categories:uriorcurie%20*;keywords:string%20*]\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Definition - Narrow Mappings\nDESCRIPTION: Markdown definition of the narrow_mappings slot that inherits from mappings and allows multiple URI/CURIE values. Maps to skos:narrowMatch in SKOS vocabulary.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/narrow_mappings.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: narrow mappings\n\nA list of terms from different schemas or terminology systems that have narrower meaning.\n\nURI: [linkml:narrow_mappings](https://w3id.org/linkml/narrow_mappings)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..\\*</sub> [Uriorcurie](types/Uriorcurie.md)\n\n## Parents\n\n *  is_a: [mappings](mappings.md)\n\n## Children\n\n\n## Used by\n\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | skos:narrowMatch |\n```\n\n----------------------------------------\n\nTITLE: Domain and Range Definition\nDESCRIPTION: Specifies the domain (FamilialRelationship) and range (FamilialRelationshipType) of the type slot with cardinality 1..1.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/FamilialRelationship_type.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[FamilialRelationship](FamilialRelationship.md) &#8594;  <sub>1..1</sub> [FamilialRelationshipType](FamilialRelationshipType.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Created By Property in LinkML\nDESCRIPTION: Specifies the 'created_by' property for LinkML elements. It indicates the agent that created the element.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/AnonymousExpression.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n * [created_by](created_by.md)  <sub>0..1</sub>\n     * Description: agent that created the element\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n     * in subsets: (BasicSubset)\n```\n\n----------------------------------------\n\nTITLE: YUML Class Diagram for CommonMetadata\nDESCRIPTION: Visual class diagram showing the CommonMetadata class structure and its relationships with other classes in the LinkML model. The diagram illustrates inheritance, attributes, and associations.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/CommonMetadata.md#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\n[SubsetDefinition],[StructuredAlias],[Example],[StructuredAlias]<structured_aliases%200..*-++[CommonMetadata&#124;description:string%20%3F;title:string%20%3F;deprecated:string%20%3F;todos:string%20*;notes:string%20*;comments:string%20*;from_schema:uri%20%3F;imported_from:string%20%3F;source:uriorcurie%20%3F;in_language:string%20%3F;see_also:uriorcurie%20*;deprecated_element_has_exact_replacement:uriorcurie%20%3F;deprecated_element_has_possible_replacement:uriorcurie%20%3F;aliases:string%20*;mappings:uriorcurie%20*;exact_mappings:uriorcurie%20*;close_mappings:uriorcurie%20*;related_mappings:uriorcurie%20*;narrow_mappings:uriorcurie%20*;broad_mappings:uriorcurie%20*;created_by:uriorcurie%20%3F;contributors:uriorcurie%20*;created_on:datetime%20%3F;last_updated_on:datetime%20%3F;modified_by:uriorcurie%20%3F;status:uriorcurie%20%3F;rank:integer%20%3F;categories:uriorcurie%20*;keywords:string%20*]\n```\n\n----------------------------------------\n\nTITLE: Defining Modified By Property in LinkML\nDESCRIPTION: Specifies the 'modified_by' property for LinkML elements. It indicates the agent that modified the element.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/AnonymousExpression.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n * [modified_by](modified_by.md)  <sub>0..1</sub>\n     * Description: agent that modified the element\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n     * in subsets: (BasicSubset)\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Definition - founding_location\nDESCRIPTION: Markdown documentation specifying the founding_location slot that relates an Organization to a Place. The slot has a cardinality of 0..1 and no parent or child relationships.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/founding_location.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: founding_location\n\nURI: [personinfo:founding_location](https://w3id.org/linkml/examples/personinfo/founding_location)\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [Place](Place.md)\n\n## Parents\n\n## Children\n\n## Used by\n\n * [Organization](Organization.md)\n```\n\n----------------------------------------\n\nTITLE: Testing Position Enumeration\nDESCRIPTION: Python code demonstrating the usage of the position enumeration model including valid and invalid value tests.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/enumerations.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport yaml\nmodel_str = yaml.dump(model)\nmodule = compile_model(model_str, print_python=True)\n# Create a record selecting position \"a\" (top)\nprint('-' * 40)\nc1 = module.PositionalRecord('my location', 'a')\nprint(str(c1))\nprint(str(c1.position))\nprint(repr(c1.position))\ntry:\n    c2 = module.PositionalRecord('your location', 'z')\nexcept ValueError as e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Defining NCName Type in LinkML YAML\nDESCRIPTION: This YAML snippet defines the NCName type in LinkML. It specifies the type's name, description, URI, root type (NCName), and string representation.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/types/types/Ncname.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Type: ncname\n\nPrefix part of CURIE\n\nURI: [linkml:Ncname](https://w3id.org/linkml/Ncname)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **NCName** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Reference Classes in Python\nDESCRIPTION: Python implementation of classes with required references (single and list) to identified classes. Includes validation to ensure required values are provided and proper type conversion.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass RequiredIdentifiedThreeElementRange(YAMLRoot):\n    \"\"\"\n    Range is a required class that contains one identifier and two regular elements\n    \"\"\"\n    ...\n\n    v1: Union[str, IdentifiedThreeElementClassName] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        if not isinstance(self.v1, IdentifiedThreeElementClassName):\n            self.v1 = IdentifiedThreeElementClassName(self.v1)\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass RequiredIdentifiedThreeElementRangeList(YAMLRoot):\n    \"\"\"\n    Range is a optional list of a class that contains one identifier and two regular elements\n    \"\"\"\n    ...\n\n    v1: Union[Union[str, IdentifiedThreeElementClassName], List[Union[str, IdentifiedThreeElementClassName]]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        elif not isinstance(self.v1, (list, dict)):\n            self.v1 = [self.v1]\n        if len(self.v1) == 0:\n            raise ValueError(f\"v1 must be a non-empty list dictionary or class\")\n        self.v1 = [v if isinstance(v, IdentifiedThreeElementClassName) else IdentifiedThreeElementClassName(v) for v in self.v1]\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: LinkML Date Type Definition\nDESCRIPTION: Definition of the Date type in LinkML, specifying its URI, root type (XSDDate), string representation, and schema.org mapping.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/types/Date.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: date\n\na date (year, month and day) in an idealized calendar\n\nURI: [linkml:Date](https://w3id.org/linkml/Date)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **XSDDate** |\n| Representation | | str |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Date |\n```\n\n----------------------------------------\n\nTITLE: Importing YAMLDumper Class for YAML Serialization in Python\nDESCRIPTION: This snippet demonstrates the import of the YAMLDumper class from linkml_runtime.dumpers. YAMLDumper is used to serialize Python objects into YAML format.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/loaders-and-dumpers.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml_runtime.dumpers import YAMLDumper\n```\n\n----------------------------------------\n\nTITLE: DiagnosisType URI Definition\nDESCRIPTION: URI definition for the DiagnosisType enumeration class using LinkML schema syntax.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/DiagnosisType.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[personinfo:DiagnosisType](https://w3id.org/linkml/examples/personinfo/DiagnosisType)\n```\n\n----------------------------------------\n\nTITLE: Defining JsonPointer Type in LinkML\nDESCRIPTION: This snippet defines the JsonPointer type in LinkML. It specifies that JsonPointer is a string that must conform to JSON Pointer syntax and should dereference to a valid object within the current instance document when encoded in tree form.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/types/Jsonpointer.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: jsonpointer\n\nA string encoding a JSON Pointer. The value of the string MUST conform to JSON Point syntax and SHOULD dereference to a valid object within the current instance document when encoded in tree form.\n\nURI: [linkml:Jsonpointer](https://w3id.org/linkml/Jsonpointer)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Example RO Term Usage in LinkML Subproperty Definition\nDESCRIPTION: Example showing how RO:HOM0000001 (in homology relationship with) is used as a subproperty value, indicating that ontological children of this term are valid values for slots declaring this subproperty.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/subproperty_of.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  'value': 'RO:HOM0000001',\n  'description': ('this is the RO term for \"in homology relationship with\", and used as a value '\n     'of subproperty of this means that any ontological child (related to '\n     'RO:HOM0000001 via an is_a relationship), is a valid value for the slot that '\n     'declares this with the subproperty_of tag.  This differs from the '\n     \"'values_from' meta model component in that 'values_from' requires the id of \"\n     'a value set (said another way, if an entire ontology had a curie/identifier '\n     'that was the identifier for the entire ontology, then that identifier would '\n     \"be used in 'values_from.')\"\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Type Slot Properties in LinkML\nDESCRIPTION: Schema definition showing the properties of the 'type' slot, including its URI, domain/range constraints, inheritance relationships, and usage contexts.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/type.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: type\n\nURI: [personinfo:type](https://w3id.org/linkml/examples/personinfo/type)\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n## Children\n\n *  [FamilialRelationship➞type](FamilialRelationship_type.md)\n\n## Used by\n\n * [Relationship](Relationship.md)\n```\n\n----------------------------------------\n\nTITLE: YUML Class Diagram - EnumExpression Class Structure\nDESCRIPTION: UML class diagram showing the structure and relationships of the EnumExpression class including its attributes, inheritance from Expression, and relationships with other classes like PermissibleValue and EnumDefinition.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/EnumExpression.md#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\n[ReachabilityQuery],[PermissibleValue],[MatchQuery],[Expression],[MatchQuery]<matches%200..1-++[EnumExpression&#124;code_set:uriorcurie%20%3F;code_set_tag:string%20%3F;code_set_version:string%20%3F;pv_formula:pv_formula_options%20%3F;concepts:uriorcurie%20*],[ReachabilityQuery]<reachable_from%200..1-++[EnumExpression],[EnumDefinition]<inherits%200..*-%20[EnumExpression],[AnonymousEnumExpression]<minus%200..*-++[EnumExpression],[AnonymousEnumExpression]<include%200..*-++[EnumExpression],[PermissibleValue]<permissible_values%200..*-++[EnumExpression],[SlotExpression]++-%20enum_range%200..1>[EnumExpression],[EnumDefinition]uses%20-.->[EnumExpression],[AnonymousEnumExpression]uses%20-.->[EnumExpression],[Expression]^-[EnumExpression],[SlotExpression],[EnumDefinition],[AnonymousEnumExpression]\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Domain and Range\nDESCRIPTION: Defines the domain (None) and range (String) for the related_to slot with cardinality 0..1\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/related_to.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nNone &#8594;  <sub>0..1</sub> [String](types/String.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Prices Collection in JSON for Relational Model\nDESCRIPTION: This JSON snippet illustrates the Prices collection in a relational model, with each price entry linked to a book through a book_id.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/recognize-structural-forms.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\"book_id\": 101, \"format\": \"Paperback\", \"amount\": 13.50, \"currency\": \"$\"},\n    {\"book_id\": 101, \"format\": \"Hardback\", \"amount\": 22.00, \"currency\": \"$\"},\n    \"...\",\n    {\"book_id\": 105, \"format\": \"Paperback\", \"amount\": 16.25, \"currency\": \"$\"},\n    {\"book_id\": 105, \"format\": \"Hardback\", \"amount\": 26.25, \"currency\": \"$\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Defining 'description' Slot in LinkML Schema\nDESCRIPTION: This snippet defines the 'description' slot in a LinkML schema. It specifies the URI, domain and range, parent and child relationships, classes that use this slot, and additional properties like schema mappings.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/description.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: description\n\nURI: [personinfo:description](https://w3id.org/linkml/examples/personinfo/description)\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n## Children\n\n## Used by\n\n * [Concept](Concept.md)\n * [DiagnosisConcept](DiagnosisConcept.md)\n * [NamedThing](NamedThing.md)\n * [Organization](Organization.md)\n * [Person](Person.md)\n * [ProcedureConcept](ProcedureConcept.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | schema:description |\n```\n\n----------------------------------------\n\nTITLE: UML Class Diagram - MetricResult Class\nDESCRIPTION: YUML-formatted class diagram showing the MetricResult class structure with its attributes, relationships to HasMessagesClass mixin, and inheritance by MetricResultChild.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue179/MetricResult.md#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\n[MetricResultChild],[MetricResult|evaluated_using:string ?;has_source:string ?;has_status:string ?;description:string ?;has_messages:string ?]uses .->[HasMessagesClass],[MetricResult]^-[MetricResultChild],[HasMessagesClass]\n```\n\n----------------------------------------\n\nTITLE: Python Example Showing Type Error With Linearized Array Access\nDESCRIPTION: Demonstrates how attempting to use nested list access notation with a linearized array representation results in a type error in Python.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/multidimensional-arrays.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> from my_model import TemperatureMatrix\n>>> mm = TemperatureMatrix(**yaml.safe_load(open(\"data.yaml\")))\n>>> print(mm.temperatures[0][0][0])\nTypeError: 'float' object is not subscriptable\n```\n\n----------------------------------------\n\nTITLE: Double Type Definition Table in Markdown\nDESCRIPTION: Markdown table showing the root builtin type definition for Double, which maps to float.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/types/Double.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **float** |\n```\n\n----------------------------------------\n\nTITLE: Time Type Definition Table\nDESCRIPTION: Markdown table defining the root type and representation for the Time data type in LinkML.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue65/types/Time.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **XSDTime** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Failed Class Initialization Example\nDESCRIPTION: Example showing a case that would fail when attempting to initialize a list of classes with a single dictionary.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n    my_entries = ListOfClasses(dict(name='element1', value=17))\n```\n\n----------------------------------------\n\nTITLE: Defining Annotation Class Relationships in YUML\nDESCRIPTION: UML diagram showing the relationships between Annotation class and other classes. Shows inheritance from Extension, usage of Annotatable mixin, and self-referential annotations property.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/Annotation.md#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\n[Extension],[Annotation]<annotations%200..*-++[Annotation&#124;tag(pk)(i):uriorcurie],[Annotation]uses%20-.->[Annotatable],[Extension]^-[Annotation],[Annotatable],[AnyValue]\n```\n\n----------------------------------------\n\nTITLE: Validating NDArray with Correct Shape\nDESCRIPTION: This snippet demonstrates validating an NDArray with the correct shape using the generated Pydantic model.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/arrays.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmodel = MyClass(data=np.ones((5,4,3), dtype=int))\nconsole.print(model)\n```\n\n----------------------------------------\n\nTITLE: Defining LinkML Annotations Module Metadata\nDESCRIPTION: Specifies the metamodel version and module version for the LinkML annotations module.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n**metamodel version:** 1.7.0\n\n**version:** 2.0.0\n```\n\n----------------------------------------\n\nTITLE: Integer Type Definition Table in LinkML\nDESCRIPTION: Markdown table defining the integer type as a root builtin type with value 'int'\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/types/Integer.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **int** |\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Definition - is_direct\nDESCRIPTION: Formal LinkML slot definition for is_direct property that determines if reachability queries should only include direct relationships. The slot has domain ReachabilityQuery, range Boolean, and is included in the SpecificationSubset.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/is_direct.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: is_direct\n\nTrue if the reachability query should only include directly related nodes, if False then include also transitively connected\n\nURI: [linkml:is_direct](https://w3id.org/linkml/is_direct)\n\n\n## Domain and Range\n\n[ReachabilityQuery](ReachabilityQuery.md) &#8594;  <sub>0..1</sub> [Boolean](types/Boolean.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [ReachabilityQuery](ReachabilityQuery.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Aliases:** | | non-transitive |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: Defining LinkML Slot: has_child_messages\nDESCRIPTION: This snippet defines the 'has_child_messages' slot in LinkML. It specifies the URI, domain and range, and which classes use this slot.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue179/has_child_messages.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: has child messages\n\nURI: [http://example.org/sample/example1/has_child_messages](http://example.org/sample/example1/has_child_messages)\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n## Children\n\n## Used by\n\n * [HasMessagesChild](HasMessagesChild.md)\n * [MetricResultChild](MetricResultChild.md)\n```\n\n----------------------------------------\n\nTITLE: AnyValue Class Definition - LinkML Class Reference\nDESCRIPTION: Markdown representation of the AnyValue class definition showing its relationships and mappings. The class is referenced by Extension class through the value property and maps to linkml:Any.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/AnyValue.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Class: AnyValue\n\nURI: [linkml:AnyValue](https://w3id.org/linkml/AnyValue)\n\n## Referenced by Class\n\n *  **[Extension](Extension.md)** *[extension➞value](extension_value.md)*  <sub>1..1</sub>  **[AnyValue](AnyValue.md)**\n\n## Attributes\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | linkml:Any |\n```\n\n----------------------------------------\n\nTITLE: Defining Contributors Property in LinkML\nDESCRIPTION: Specifies the 'contributors' property for LinkML elements. It lists agents that contributed to the element.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/AnonymousExpression.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n * [contributors](contributors.md)  <sub>0..\\*</sub>\n     * Description: agent that contributed to the element\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n     * in subsets: (BasicSubset)\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Definition\nDESCRIPTION: Defines a base slot that groups metamodel slots used for constraining members of multivalued slots to match specified constant values. The slot has an optional String range and includes various child slots for different constraint types.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/list_value_specification_constant.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: list_value_specification_constant\n\nGrouping for metamodel slots that constrain members of a multivalued slot value to equal a specified constant\n\nURI: [linkml:list_value_specification_constant](https://w3id.org/linkml/list_value_specification_constant)\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [String](types/String.md)\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Domain and Range Definition\nDESCRIPTION: Specifies that the slot has no specific domain restriction and accepts an optional Boolean value\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/is_current.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nNone &#8594;  <sub>0..1</sub> [Boolean](types/Boolean.md)\n```\n\n----------------------------------------\n\nTITLE: GenderType Enumeration Values in Markdown Table\nDESCRIPTION: Markdown table defining permissible values for the GenderType enumeration, including text labels and GSSO (Gender, Sex, and Sexual Orientation) ontology references.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/GenderType.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Text | Description | Meaning | Other Information |\n| :--- | :---: | :---: | ---: |\n| nonbinary man |  | GSSO:009254 |  |\n| nonbinary woman |  | GSSO:009253 |  |\n| transgender woman |  | GSSO:000384 |  |\n| transgender man |  | GSSO:000372 |  |\n| cisgender man |  | GSSO:000371 |  |\n| cisgender woman |  | GSSO:000385 |  |\n```\n\n----------------------------------------\n\nTITLE: Defining LinkML Slot: tag\nDESCRIPTION: Defines the 'tag' slot with its URI, domain, range, and usage in LinkML. The slot represents a tag associated with an extension, has a domain of Extension, and a range of Uriorcurie.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/extension_tag.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: tag\n\na tag associated with an extension\n\nURI: [linkml:extension_tag](https://w3id.org/linkml/extension_tag)\n\n\n## Domain and Range\n\n[Extension](Extension.md) &#8594;  <sub>1..1</sub> [Uriorcurie](types/Uriorcurie.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [Extension](Extension.md)\n```\n\n----------------------------------------\n\nTITLE: Documenting LinkML Validator Loaders\nDESCRIPTION: RST configuration for generating documentation for the validator loader utilities, excluding iter_instances member.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/code/validator.rst#2025-04-17_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: linkml.validator.loaders\n    :members:\n    :exclude-members: iter_instances\n```\n\n----------------------------------------\n\nTITLE: Sample Data with Enum Values\nDESCRIPTION: Example data file using the defined schema with invalid enum value that will fail validation.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial06.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npersons:\n  - id: ORCID:1234\n    full_name: Clark Kent\n    age: 33\n    phone: 555-555-5555\n    status: ALIVE\n  - id: ORCID:2222\n    full_name: Count Dracula\n    status: UNDEAD\n```\n\n----------------------------------------\n\nTITLE: Defining 'interpolated' Slot in LinkML Markdown\nDESCRIPTION: This snippet defines the 'interpolated' slot for PatternExpression in LinkML. It specifies that if true, the pattern is first string interpolated. The slot has a domain of PatternExpression and a range of Boolean.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/interpolated.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: interpolated\n\nif true then the pattern is first string interpolated\n\nURI: [linkml:interpolated](https://w3id.org/linkml/interpolated)\n\n\n## Domain and Range\n\n[PatternExpression](PatternExpression.md) &#8594;  <sub>0..1</sub> [Boolean](types/Boolean.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [PatternExpression](PatternExpression.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: NCName Type Specification Table in Markdown\nDESCRIPTION: Markdown table showing the core properties of the NCName type including its root type and representation format.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/types/Ncname.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **NCName** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Generated Python Classes for Inlined Dictionary Representation\nDESCRIPTION: Python code generated by LinkML for classes that use inlined dictionaries, showing type annotations and __post_init__ methods for both optional and required variants.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OptionalMultivaluedInlinedIdentifiedThreeElementRangeList(YAMLRoot):\n    \"\"\"\n    2.4(o) Range is an optional identified three element class that is represented as an inlined dictionary\n    \"\"\"\n    ...\n    v1: Optional[Union[Dict[Union[str, IdentifiedThreeElementClassName], Union[dict, IdentifiedThreeElementClass]], List[Union[dict, IdentifiedThreeElementClass]]]] = empty_dict()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            self.v1 = []\n        if not isinstance(self.v1, (list, dict)):\n            self.v1 = [self.v1]\n        self._normalize_inlined_slot(slot_name=\"v1\", slot_type=IdentifiedThreeElementClass, key_name=\"name\", inlined_as_list=None, keyed=True)\n\n        super().__post_init__(**kwargs)\n\n\n@dataclass\nclass RequiredMultivaluedInlinedKeyedThreeElementRange(YAMLRoot):\n    \"\"\"\n    2.4(r) Range is a required keyed three element class that is represented as an inlined dictionary\n    \"\"\"\n    ...\n    v1: Union[Dict[Union[str, KeyedThreeElementClassName], Union[dict, KeyedThreeElementClass]], List[Union[dict, KeyedThreeElementClass]]] = empty_dict()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        elif not isinstance(self.v1, (list, dict)):\n            self.v1 = [self.v1]\n        if len(self.v1) == 0:\n            raise ValueError(f\"v1 must be a non-empty list, dictionary, or class\")\n        self._normalize_inlined_slot(slot_name=\"v1\", slot_type=KeyedThreeElementClass, key_name=\"name\", inlined_as_list=None, keyed=True)\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Installing YAML Magic Extension\nDESCRIPTION: Sets up Jupyter notebook environment by installing and loading the YAML magic extension\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/Type-Designators.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -q --disable-pip-version-check yamlmagic\n%load_ext yamlmagic\n```\n\n----------------------------------------\n\nTITLE: Generating Java Classes from Biolink Model\nDESCRIPTION: Command to generate Java classes from the Biolink model using the gen-java command, specifying package name and output directory.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/java.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngen-java --package org.biolink.model --output-directory org/biolink/model biolink-model.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Full Test Suite with Poetry\nDESCRIPTION: Commands to run the complete test suite using either pytest directly or through the Makefile.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/contributing/contributing.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry run pytest\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Defining URI Slot for LinkML Type Definitions in Markdown\nDESCRIPTION: This markdown snippet defines the 'uri' slot for LinkML type definitions. It specifies the domain as TypeDefinition, range as Uriorcurie, and includes usage information and additional properties.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/type_uri.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: uri\n\nThe uri that defines the possible values for the type definition\n\nURI: [linkml:type_uri](https://w3id.org/linkml/type_uri)\n\n\n## Domain and Range\n\n[TypeDefinition](TypeDefinition.md) &#8594;  <sub>0..1</sub> [Uriorcurie](types/Uriorcurie.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [TypeDefinition](TypeDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | uri is typically drawn from the set of URI's defined in OWL (https://www.w3.org/TR/2012/REC-owl2-syntax-20121211/#Datatype_Maps) |\n|  | | every root type must have a type uri |\n| **In Subsets:** | | SpecificationSubset |\n|  | | BasicSubset |\n```\n\n----------------------------------------\n\nTITLE: Marking Deprecation for Default Value Usage in LinkML Function\nDESCRIPTION: Example of how to mark a deprecated default value usage in a LinkML function. This checks if the argument was explicitly provided and issues a warning if it wasn't.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/deprecation.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport inspect\ndef my_function(arg = 'default'):\n    frame = inspect.currentframe()\n    outer = inspect.getouterframes(frame, 1)[1]\n    if arg not in outer.code_context[0]:\n        deprecation_warning('semaphore')\n    \n```\n\n----------------------------------------\n\nTITLE: DownloadProblem Class URI Definition\nDESCRIPTION: Defines the unique URI identifier for the DownloadProblem class in the ontology.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue179/DownloadProblem.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nURI: [http://example.org/sample/example1/DownloadProblem](http://example.org/sample/example1/DownloadProblem)\n```\n\n----------------------------------------\n\nTITLE: Generated Python Code for Integer Types\nDESCRIPTION: The generated Python code showing class definitions and type handling logic for various integer configurations.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Integer(int):\n    \"\"\" An integer \"\"\"\n    type_class_uri = XSD.integer\n    type_class_curie = \"xsd:integer\"\n    type_name = \"integer\"\n    type_model_uri = METATYPE.Integer\n\n@dataclass\nclass Integers(YAMLRoot):\n    \"\"\"\n    various permutations of the integer type\n    \"\"\"\n    ...\n\n    mand_integer: int = None\n    mand_multi_integer: Union[int, List[int]] = None\n    opt_integer: Optional[int] = None\n    opt_multi_integer: Optional[Union[int, List[int]]] = empty_list()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.mand_integer is None:\n            raise ValueError(\"mand_integer must be supplied\")\n        if not isinstance(self.mand_integer, int):\n            self.mand_integer = int(self.mand_integer)\n\n        if self.mand_multi_integer is None:\n            raise ValueError(\"mand_multi_integer must be supplied\")\n        elif not isinstance(self.mand_multi_integer, list):\n            self.mand_multi_integer = [self.mand_multi_integer]\n        elif len(self.mand_multi_integer) == 0:\n            raise ValueError(f\"mand_multi_integer must be a non-empty list\")\n        self.mand_multi_integer = [v if isinstance(v, int) else int(v) for v in self.mand_multi_integer]\n\n        if self.opt_integer is not None and not isinstance(self.opt_integer, int):\n            self.opt_integer = int(self.opt_integer)\n\n        if self.opt_multi_integer is None:\n            self.opt_multi_integer = []\n        if not isinstance(self.opt_multi_integer, list):\n            self.opt_multi_integer = [self.opt_multi_integer]\n        self.opt_multi_integer = [v if isinstance(v, int) else int(v) for v in self.opt_multi_integer]\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Table in SQL\nDESCRIPTION: This SQL snippet demonstrates creating a 'sample' table with various fields including foreign key relationships. It's used to compare the readability and expressiveness of SQL DDL with LinkML.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/why-linkml.md#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE sample (\n  id TEXT PRIMARY KEY,  -- unique sample id\n  individual_id TEXT FOREIGN KEY(person.id),\n  name TEXT,\n  disease TEXT,\n  src TEXT,\n  collec_location TEXT FOREIGN KEY(geoloc.id),\n  ...\n);\n```\n\n----------------------------------------\n\nTITLE: Importing RDFLibLoader Class for RDF Deserialization in Python\nDESCRIPTION: This code imports the RDFLibLoader class from linkml_runtime.loaders. RDFLibLoader is used to deserialize RDF data (e.g., Turtle format) into Python objects.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/loaders-and-dumpers.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml_runtime.loaders import RDFLibLoader\n```\n\n----------------------------------------\n\nTITLE: LinkML Time Type Definition Table\nDESCRIPTION: Markdown table defining the Time type properties including its root type (XSDTime) and string representation format.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/types/Time.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **XSDTime** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Type in LinkML Markdown\nDESCRIPTION: This snippet defines the boolean type in LinkML. It specifies the URI, root type as Bool, and representation as bool. This type is used for binary true/false values in LinkML schemas.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/types/Boolean.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: boolean\n\n\nA binary (true or false) value\n\nURI: [linkml:Boolean](https://w3id.org/linkml/Boolean)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **Bool** |\n| Representation | | bool |\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure\nDESCRIPTION: Creates a temporary directory for storing generated artifacts\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/SQL-examples.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!mkdir -p tmp\n```\n\n----------------------------------------\n\nTITLE: Defining MedicalEvent Class Structure in YAML\nDESCRIPTION: This YAML snippet defines the structure of the MedicalEvent class, including its URI, parent class, referenced classes, and attributes. It specifies relationships with Place, DiagnosisConcept, and ProcedureConcept classes.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/MedicalEvent.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Class: MedicalEvent\n\nURI: [personinfo:MedicalEvent](https://w3id.org/linkml/examples/personinfo/MedicalEvent)\n\n## Parents\n\n *  is_a: [Event](Event.md)\n\n## Referenced by Class\n\n *  **None** *[has_medical_history](has_medical_history.md)*  <sub>0..*</sub>  **[MedicalEvent](MedicalEvent.md)**\n\n## Attributes\n\n### Own\n\n * [in_location](in_location.md)  <sub>0..1</sub>\n     * Range: [Place](Place.md)\n * [diagnosis](diagnosis.md)  <sub>0..1</sub>\n     * Range: [DiagnosisConcept](DiagnosisConcept.md)\n * [procedure](procedure.md)  <sub>0..1</sub>\n     * Range: [ProcedureConcept](ProcedureConcept.md)\n\n### Inherited from Event:\n\n * [started_at_time](started_at_time.md)  <sub>0..1</sub>\n     * Range: [Date](types/Date.md)\n * [ended_at_time](ended_at_time.md)  <sub>0..1</sub>\n     * Range: [Date](types/Date.md)\n * [duration](duration.md)  <sub>0..1</sub>\n     * Range: [Float](types/Float.md)\n * [is_current](is_current.md)  <sub>0..1</sub>\n     * Range: [Boolean](types/Boolean.md)\n```\n\n----------------------------------------\n\nTITLE: Python Output\nDESCRIPTION: Output showing the status value and its mapped ontological meaning.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial06.md#2025-04-17_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nSTATUS=DEAD\nMEANING=http://purl.obolibrary.org/obo/PATO_0001422\n```\n\n----------------------------------------\n\nTITLE: Running LinkML Linter with a Custom Configuration File (Bash)\nDESCRIPTION: Command to run the LinkML linter with a custom configuration file specified using the --config option.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/linter.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlinkml-lint --config myconfig.yaml myschema.yaml\n```\n\n----------------------------------------\n\nTITLE: Example JSON data conforming to dictionary-inlined schema\nDESCRIPTION: JSON data showing how dictionary-inlined multivalued slots look when populated with data instances whose identifiers are used as keys.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/json-schema.rst#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n \"persons\":\n   {\n     \"Bob\": {\n         \"age\": 42,\n         \"gender\": \"male\"\n     },\n     \"Alice\": {\n         \"age\": 37,\n         \"gender\": \"female\"\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON-LD 1.1 Context with @prefix for CHEBI\nDESCRIPTION: This JSON snippet demonstrates how to force a string to be treated as a prefix in JSON-LD 1.1 using the @prefix tag. It specifically shows the configuration for the CHEBI prefix.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/context_issue.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"@context\" : {\n       \"CHEBI\" : {\n          \"@id\": \"http://purl.obolibrary.org/obo/CHEBI_\",\n          \"@prefix\": true\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining String Type in LinkML Markdown\nDESCRIPTION: This snippet defines the String type in LinkML using markdown format. It specifies the type's URI, root builtin type as 'str', and provides an exact mapping to schema:Text.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/types/String.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: string\n\nA character string\n\nURI: [linkml:String](https://w3id.org/linkml/String)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Text |\n```\n\n----------------------------------------\n\nTITLE: Marking Deprecation for Default Value in LinkML Function\nDESCRIPTION: Example of how to mark a deprecated default value in a LinkML function. This issues a warning when the default value is used.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/deprecation.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef my_function(arg:Optional[str] = None):\n    if arg is None:\n        deprecation_warning('semaphore')\n        arg = 'old_default'\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for LinkML Predicate Slot\nDESCRIPTION: Markdown documentation defining the predicate slot that represents the relationship between an element and its alias in LinkML. The slot has a domain of StructuredAlias, a range of alias_predicate_enum, and maps to rdf:predicate.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/alias_predicate.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: predicate\n\nThe relationship between an element and its alias.\n\nURI: [linkml:alias_predicate](https://w3id.org/linkml/alias_predicate)\n\n\n## Domain and Range\n\n[StructuredAlias](StructuredAlias.md) &#8594;  <sub>0..1</sub> [alias_predicate_enum](alias_predicate_enum.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [StructuredAlias](StructuredAlias.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | rdf:predicate |\n```\n\n----------------------------------------\n\nTITLE: Marking Deprecation in LinkML Function\nDESCRIPTION: Example of how to mark a deprecated function in LinkML. This adds a deprecation warning to a hypothetical render_semaphore function.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/deprecation.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef render_semaphore(schema):\n    deprecation_warning('semaphore')\n```\n\n----------------------------------------\n\nTITLE: Visualizing ClassLevelRule Inheritance in YUML\nDESCRIPTION: A YUML diagram showing the inheritance relationship between ClassLevelRule and ClassRule.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/ClassLevelRule.md#2025-04-17_snippet_1\n\nLANGUAGE: yuml\nCODE:\n```\n[![img](https://yuml.me/diagram/nofunky;dir:TB/class/[ClassRule],[ClassLevelRule]^-[ClassRule])](https://yuml.me/diagram/nofunky;dir:TB/class/[ClassRule],[ClassLevelRule]^-[ClassRule])\n```\n\n----------------------------------------\n\nTITLE: Defining lone_slot_joe Slot in LinkML\nDESCRIPTION: This snippet defines a slot named 'lone_slot_joe' with a URI, domain, and range. It's part of a LinkML schema, with the domain being MetricResult and the range being String.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue179/lone_slot_joe.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: lone slot joe\n\nURI: [http://example.org/sample/example1/lone_slot_joe](http://example.org/sample/example1/lone_slot_joe)\n\n\n## Domain and Range\n\n[MetricResult](MetricResult.md) &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot URI Definition\nDESCRIPTION: Defines the URI identifier for the is_current slot in the personinfo namespace\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/is_current.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[personinfo:is_current](https://w3id.org/linkml/examples/personinfo/is_current)\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for LinkML How-to Guides in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents for LinkML how-to guides using reStructuredText directives. It sets up a toctree with maxdepth of 2 and includes various guide topics.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   linkml-project-cookiecutter\n   collaborative-development\n   recognize-structural-forms\n   yq-for-schemas\n   using-jsonld\n   model-measurements\n   port-linkml\n   multidimensional-arrays\n   model-property-graphs\n   generate-ai-prompts\n   deprecating-elements\n```\n\n----------------------------------------\n\nTITLE: Defining Developers Guide Structure in reStructuredText\nDESCRIPTION: This code snippet defines the structure of the developers guide section in the LinkML documentation using reStructuredText. It includes links to CLI documentation, developer-specific information, and code references.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/index.rst#2025-04-17_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Developers guide:\n\n   cli/index\n   developers/index\n   code/index\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Definition Example\nDESCRIPTION: Example of how domain relationships are expressed in LinkML using slot definitions, showing how a slot S1 with domain C1 and range C2 implies type information about its subject.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/SlotDefinition.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nS1:\n  domain: C1\n  range: C2\n\nX:\n  S1: Y\n```\n\n----------------------------------------\n\nTITLE: Defining RequiredMultivaluedInlinedKeyedThreeElementRange in YAML\nDESCRIPTION: YAML definition for a required multivalued inlined keyed three-element class represented as an inlined dictionary.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nRequiredMultivaluedInlinedKeyedThreeElementRange:\n  description: 2.4(r) Range is a required keyed three element class that is represented as an inlined dictionary\n  attributes:\n    v1:\n      range: KeyedThreeElementClass\n      multivalued: true\n      inlined: true\n      required: true\n```\n\n----------------------------------------\n\nTITLE: Defining Enums as OWL Named Individuals in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define an enum in LinkML that will be represented as OWL Named Individuals. It uses the 'implements' slot to specify the OWL class.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/owl.rst#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenums:\n  HomePlanetType:\n    implements:\n     - owl:NamedIndividual\n    description: The type of home planet\n    permissible_values:\n      Earth:\n      Venus:\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot URI Definition\nDESCRIPTION: URI definition for the related_to slot that maps to the personinfo namespace\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/related_to.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nURI: [personinfo:related_to](https://w3id.org/linkml/examples/personinfo/related_to)\n```\n\n----------------------------------------\n\nTITLE: Configuring Rewrite Rule Tests in Python\nDESCRIPTION: This snippet shows the configuration lines in a Python test file that need to be uncommented and potentially modified to test the w3id.org rewrite rules locally.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_rewrite_rules/httpd/README.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# DEFAULT_SERVER = \"http://localhost:8091/\"\n# SKIP_REWRITE_RULES = False\n```\n\n----------------------------------------\n\nTITLE: Defining Image Slot in LinkML Schema\nDESCRIPTION: This snippet defines the 'image' slot in a LinkML schema. It specifies the URI, domain and range, usage in various classes, and maps it to schema:image.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/image.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: image\n\nURI: [personinfo:image](https://w3id.org/linkml/examples/personinfo/image)\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n## Children\n\n## Used by\n\n * [Concept](Concept.md)\n * [DiagnosisConcept](DiagnosisConcept.md)\n * [NamedThing](NamedThing.md)\n * [Organization](Organization.md)\n * [Person](Person.md)\n * [ProcedureConcept](ProcedureConcept.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | schema:image |\n```\n\n----------------------------------------\n\nTITLE: Defining UnitOfMeasure Class Attributes in Markdown\nDESCRIPTION: This code block lists the attributes of the UnitOfMeasure class, including their descriptions, ranges, and cardinalities. It covers properties like symbol, abbreviation, descriptive_name, and various mappings to other unit systems.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/UnitOfMeasure.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Own\n\n * [symbol](symbol.md)  <sub>0..1</sub>\n     * Description: name of the unit encoded as a symbol\n     * Range: [String](types/String.md)\n * [abbreviation](abbreviation.md)  <sub>0..1</sub>\n     * Description: An abbreviation for a unit is a short ASCII string that is used in place of the full name for the unit in  contexts where non-ASCII characters would be problematic, or where using the abbreviation will enhance  readability. When a power of a base unit needs to be expressed, such as squares this can be done using  abbreviations rather than symbols (source: qudt)\n     * Range: [String](types/String.md)\n * [descriptive_name](descriptive_name.md)  <sub>0..1</sub>\n     * Description: the spelled out name of the unit, for example, meter\n     * Range: [String](types/String.md)\n * [UnitOfMeasure➞exact mappings](UnitOfMeasure_exact_mappings.md)  <sub>0..\\*</sub>\n     * Description: Used to link a unit to equivalent concepts in ontologies such as UO, SNOMED, OEM, OBOE, NCIT\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n * [ucum_code](ucum_code.md)  <sub>0..1</sub>\n     * Description: associates a QUDT unit with its UCUM code (case-sensitive).\n     * Range: [String](types/String.md)\n * [derivation](derivation.md)  <sub>0..1</sub>\n     * Description: Expression for deriving this unit from other units\n     * Range: [String](types/String.md)\n * [has_quantity_kind](has_quantity_kind.md)  <sub>0..1</sub>\n     * Description: Concept in a vocabulary or ontology that denotes the kind of quantity being measured, e.g. length\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n * [iec61360code](iec61360code.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n```\n\n----------------------------------------\n\nTITLE: Documenting LinkML Validator CLI\nDESCRIPTION: RST configuration for documenting the command-line interface using click directive.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/code/validator.rst#2025-04-17_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. click:: linkml.validator.cli:cli\n    :prog: linkml-validate\n```\n\n----------------------------------------\n\nTITLE: Defining 'role' Slot in LinkML (Markdown)\nDESCRIPTION: This snippet defines the 'role' slot in LinkML. It specifies the slot's URI, domain and range, parent and child relationships, usage, and additional properties. The slot is used to provide a textual descriptor for the role of a generic slot name in a more specific class context.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/role.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: role\n\na textual descriptor that indicates the role played by the slot range\n\nURI: [linkml:role](https://w3id.org/linkml/role)\n\n\n## Domain and Range\n\n[SlotDefinition](SlotDefinition.md) &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [SlotDefinition](SlotDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | the primary use case for this slot is to provide a textual descriptor of a generic slot name when used in the context of a more specific class |\n```\n\n----------------------------------------\n\nTITLE: Normalizing Inlined Slot in __post_init__ Method in Python\nDESCRIPTION: Illustrates the use of _normalize_inlined_slot method to handle post-initialization normalization for inlined slots with specific configurations.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nself._normalize_inlined_slot(slot_name=\"v1\", slot_type=IdentifiedThreeElementClass, key_name=\"name\", inlined_as_list=True, keyed=True)\n```\n\n----------------------------------------\n\nTITLE: NamedThing Class Mappings\nDESCRIPTION: Defines the schema mapping for the NamedThing class, showing its relationship to schema:Thing.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/NamedThing.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Close Mappings:** | | schema:Thing |\n```\n\n----------------------------------------\n\nTITLE: LinkML Source File Size Slot Metadata\nDESCRIPTION: Markdown definition of a LinkML slot that specifies the size of schema source files in bytes. The slot has a cardinality of 0..1, accepts Integer values, and is used by SchemaDefinition class.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/source_file_size.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: source_file_size\\n\\nsize in bytes of the source of the schema\\n\\nURI: [linkml:source_file_size](https://w3id.org/linkml/source_file_size)\\n\\n\\n## Domain and Range\\n\\n[SchemaDefinition](SchemaDefinition.md) &#8594;  <sub>0..1</sub> [Integer](types/Integer.md)\\n\\n## Parents\\n\\n\\n## Children\\n\\n\\n## Used by\\n\\n * [SchemaDefinition](SchemaDefinition.md)\\n\\n## Other properties\\n\\n|  |  |  |\\n| --- | --- | --- |\\n| **In Subsets:** | | BasicSubset |\n```\n\n----------------------------------------\n\nTITLE: OWL Punning Example\nDESCRIPTION: Demonstration of punning in OWL where Author is used as both a class and property.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/modeling.md#2025-04-17_snippet_13\n\nLANGUAGE: turtle\nCODE:\n```\n:Author rdf:type owl:Class .\n:author rdf:type owl:ObjectProperty ;\n    rdfs:label \"author\" ;\n    rdfs:range :Author ;\n    skos:inScheme <https://example.org/schema> .\n```\n\n----------------------------------------\n\nTITLE: Defining Local Name Source Slot in LinkML\nDESCRIPTION: Schema definition for the local_name_source slot that specifies the NCName source. The slot has a domain of LocalName and range of Ncname with cardinality 1..1, indicating it is required.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/local_name_source.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: local_name_source\n\nthe ncname of the source of the name\n\nURI: [linkml:local_name_source](https://w3id.org/linkml/local_name_source)\n\n\n## Domain and Range\n\n[LocalName](LocalName.md) &#8594;  <sub>1..1</sub> [Ncname](types/Ncname.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [LocalName](LocalName.md)\n```\n\n----------------------------------------\n\nTITLE: Importing SlotDefinition Class from LinkML Model\nDESCRIPTION: Autodocumentation directive for the SlotDefinition class from the LinkML metamodel, including all members and undocumented members.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/code/metamodel.rst#2025-04-17_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: SlotDefinition\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Uriorcurie Type in LinkML\nDESCRIPTION: This code snippet defines the Uriorcurie type in LinkML. It specifies that the type represents either a URI or a CURIE, has a root type of URIorCURIE, and is represented as a string.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/types/Uriorcurie.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: uriorcurie\n\na URI or a CURIE\n\nURI: [linkml:Uriorcurie](https://w3id.org/linkml/Uriorcurie)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **URIorCURIE** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Defining 'tag' Slot for Extensions in LinkML (Markdown)\nDESCRIPTION: This snippet defines the 'tag' slot for extensions in LinkML. It specifies the URI, domain and range, and usage of the slot. The tag is a URI or CURIE associated with an Extension, with a cardinality of 1..1.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/extension_tag.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: tag\n\na tag associated with an extension\n\nURI: [linkml:extension_tag](https://w3id.org/linkml/extension_tag)\n\n\n## Domain and Range\n\n[Extension](Extension.md) &#8594;  <sub>1..1</sub> [Uriorcurie](types/Uriorcurie.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [Annotation](Annotation.md)\n * [Extension](Extension.md)\n```\n\n----------------------------------------\n\nTITLE: Implementing OptionalMultivaluedInlinedIdentifiedThreeElementRangeList in Python\nDESCRIPTION: Python implementation of the OptionalMultivaluedInlinedIdentifiedThreeElementRangeList class with __post_init__ method for normalization.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OptionalMultivaluedInlinedIdentifiedThreeElementRangeList(YAMLRoot):\n    \"\"\"\n    2.4(o) Range is an optional identified three element class that is represented as an inlined dictionary\n    \"\"\"\n    ...\n    v1: Optional[Union[Dict[Union[str, IdentifiedThreeElementClassName], Union[dict, IdentifiedThreeElementClass]], List[Union[dict, IdentifiedThreeElementClass]]]] = empty_dict()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            self.v1 = []\n        if not isinstance(self.v1, (list, dict)):\n            self.v1 = [self.v1]\n        self._normalize_inlined_slot(slot_name=\"v1\", slot_type=IdentifiedThreeElementClass, key_name=\"name\", inlined_as_list=None, keyed=True)\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Defining is_grouping_slot Property in LinkML\nDESCRIPTION: Defines the 'is_grouping_slot' property for SlotDefinition. It is a boolean value indicating if the slot is used for grouping. The property has a domain of SlotDefinition and a range of Boolean.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/is_grouping_slot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: is_grouping_slot\n\ntrue if this slot is a grouping slot\n\nURI: [linkml:is_grouping_slot](https://w3id.org/linkml/is_grouping_slot)\n\n\n## Domain and Range\n\n[SlotDefinition](SlotDefinition.md) &#8594;  <sub>0..1</sub> [Boolean](types/Boolean.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [SlotDefinition](SlotDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n|  | | BasicSubset |\n| **Close Mappings:** | | sh:PropertyGroup |\n```\n\n----------------------------------------\n\nTITLE: Testing W3ID Rewrite Rules with Docker and Python\nDESCRIPTION: This bash script demonstrates the process of building a Docker image, running a container for w3id.org rewrite rules, setting up a Python environment, and running the rewrite rule tests. It also includes commands for cleaning up the Docker container afterward.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_rewrite_rules/httpd/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> cd httpd\n> docker image build . -t w3id\n> docker run --rm -d -p 8091:80 --name w3id -v `pwd`/linkml:/w3id/linkml w3id  \n> cd ../../..\n> pipenv install\n> pipenv shell\n(linkml) > cd tests/test_rewrite_rules\n(linkml) > export SERVER=\"http://localhost:8091\"\n(linkml) > python test_rewrite_rules.py\nssss\n----------------------------------------------------------------------\nRan 4 tests in 0.000s\n\nOK (skipped=6)\n(linkml) > exit\n> docker stop w3id\n```\n\n----------------------------------------\n\nTITLE: Defining FamilialRelationship Class in LinkML\nDESCRIPTION: This markdown snippet defines the FamilialRelationship class, specifying its URI, parent class, referenced classes, and attributes. It includes both its own attributes and those inherited from the Relationship class.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/FamilialRelationship.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Class: FamilialRelationship\n\nURI: [personinfo:FamilialRelationship](https://w3id.org/linkml/examples/personinfo/FamilialRelationship)\n\n## Parents\n\n *  is_a: [Relationship](Relationship.md)\n\n## Referenced by Class\n\n *  **None** *[has_familial_relationships](has_familial_relationships.md)*  <sub>0..*</sub>  **[FamilialRelationship](FamilialRelationship.md)**\n\n## Attributes\n\n### Own\n\n * [FamilialRelationship➞type](FamilialRelationship_type.md)  <sub>1..1</sub>\n     * Range: [FamilialRelationshipType](FamilialRelationshipType.md)\n * [FamilialRelationship➞related to](FamilialRelationship_related_to.md)  <sub>1..1</sub>\n     * Range: [Person](Person.md)\n\n### Inherited from Relationship:\n\n * [started_at_time](started_at_time.md)  <sub>0..1</sub>\n     * Range: [Date](types/Date.md)\n * [ended_at_time](ended_at_time.md)  <sub>0..1</sub>\n     * Range: [Date](types/Date.md)\n * [related_to](related_to.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n```\n\n----------------------------------------\n\nTITLE: Local Types Import Example\nDESCRIPTION: Example of a local types YAML file with imports.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/input/ImportMaps.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n  - linkml:types\n```\n\n----------------------------------------\n\nTITLE: Creating New LinkML Project with Cruft\nDESCRIPTION: Commands to activate Poetry shell and create a new LinkML project using the cookiecutter template.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/linkml-project-cookiecutter.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry shell\ncruft create https://github.com/linkml/linkml-project-cookiecutter\n```\n\n----------------------------------------\n\nTITLE: Defining String Type in LinkML Schema\nDESCRIPTION: This snippet defines the String type in LinkML. It specifies the URI, root builtin type as 'str', and provides an exact mapping to schema:Text.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/types/String.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: string\n\nA character string\n\nURI: [linkml:String](https://w3id.org/linkml/String)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Text |\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Group Property Definition\nDESCRIPTION: Markdown definition of the slot_group property which allows grouping related slots together. The property has a domain of SlotDefinition and range of SlotDefinition with 0..1 cardinality. Maps to sh:group in SHACL and is included in the Specification and Basic subsets.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/slot_group.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: slot_group\n\nallows for grouping of related slots into a grouping slot that serves the role of a group\n\nURI: [linkml:slot_group](https://w3id.org/linkml/slot_group)\n\n## Domain and Range\n\n[SlotDefinition](SlotDefinition.md) &#8594;  <sub>0..1</sub> [SlotDefinition](SlotDefinition.md)\n\n## Parents\n\n## Children\n\n## Used by\n\n * [SlotDefinition](SlotDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | sh:group |\n| **Comments:** | | slot groups do not change the semantics of a model but are a useful way of visually grouping related slots |\n| **In Subsets:** | | SpecificationSubset |\n|  | | BasicSubset |\n```\n\n----------------------------------------\n\nTITLE: Slot Metadata Definition\nDESCRIPTION: Markdown definition specifying domain, range, properties and mappings for the deprecated_element_has_possible_replacement slot in LinkML schema\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/deprecated_element_has_possible_replacement.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: deprecated element has possible replacement\n\nWhen an element is deprecated, it can be potentially replaced by this uri or curie\n\nURI: [linkml:deprecated_element_has_possible_replacement](https://w3id.org/linkml/deprecated_element_has_possible_replacement)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [Uriorcurie](types/Uriorcurie.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | OIO:consider |\n```\n\n----------------------------------------\n\nTITLE: Simple List of Integers Initialization Example\nDESCRIPTION: Example showing how a single value can be passed to initialize a list when dealing with simple types like integers.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n    my_entries = ListOfIntegers(17)\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for LinkML Type Designators in reStructuredText\nDESCRIPTION: A reStructuredText directive that automatically generates documentation from the linkml.generators.common.type_designators module, including all its members.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/common/type_designators.md#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: linkml.generators.common.type_designators\n    :members:\n```\n\n----------------------------------------\n\nTITLE: URI Definition for Subject Slot\nDESCRIPTION: The URI identifier for the subject slot property.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue65/subject.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://example.com/test65/subject\n```\n\n----------------------------------------\n\nTITLE: Import Map JSON Configuration\nDESCRIPTION: Example of an import map file showing how to redirect various import references to local files.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/input/ImportMaps.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"linkml:types\": \"includes/types\",\n  \"includes/types\": \"includes/types\",\n  \"types\": \"includes/types\",\n  \"includes/mappings\": \"mappings\"\n}\n```\n\n----------------------------------------\n\nTITLE: Double Type Mappings Table in Markdown\nDESCRIPTION: Markdown table showing close mappings between Double type and schema:Float.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/types/Double.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Close Mappings:** | | schema:Float |\n```\n\n----------------------------------------\n\nTITLE: Defining Different Single-Value Slot Configurations in YAML\nDESCRIPTION: YAML code that defines various test cases for single-valued slots with different combinations of options including optional/required status, inlined values, and classes with/without identifiers or keys.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n  OptionalThreeElementRange:\n    description: Case 1.1(o) -- single values optional slot - range has no keys or identifiers\n    attributes:\n      v1:\n        range: ThreeElementClass\n\n  RequiredThreeElementRange:\n    description: Case 1.1(r) -- single values optional slot - range has no keys or identifiers\n    attributes:\n      v1:\n        range: ThreeElementClass\n        required: true\n\n  OptionalIdentifiedThreeElementRange:\n    description: Case 1.2(o) -- single values optional slot - range has an identifier\n    attributes:\n      v1:\n        range: IdentifiedThreeElementClass\n\n  RequiredKeyedThreeElementRange:\n    description: Case 1.2(r) -- single values optional slot - range has a key\n    attributes:\n      v1:\n        range: KeyedThreeElementClass\n        required: true\n\n  OptionalInlinedKeyedThreeElementRange:\n    description: Case 1.3(o) -- single values optional slot - range has an identifier\n    attributes:\n      v1:\n        range: KeyedThreeElementClass\n        inlined: true\n\n  RequiredInlinedIdentifiedThreeElementRange:\n    description: Case 1.3(r) -- single values optional slot - range has a key\n    attributes:\n      v1:\n        range: IdentifiedThreeElementClass\n        required: true\n        inlined: true\n\n  OptionalInlinedAsListKeyedThreeElementRange:\n    description: Case 1.4(o) -- single values optional slot - range has an identifier\n    attributes:\n      v1:\n        range: KeyedThreeElementClass\n        inlined_as_list: true\n\n  RequiredInlinedAsListIdentifiedThreeElementRange:\n    description: Case 1.4(r) -- single values optional slot - range has a key\n    attributes:\n      v1:\n        range: IdentifiedThreeElementClass\n        required: true\n        inlined_as_list: true\n```\n\n----------------------------------------\n\nTITLE: Generating Python Dataclass for Optional Single Element Class\nDESCRIPTION: Python code generated for an optional, single element class. It demonstrates handling of None values and type coercion for the v1 attribute.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OptionalOneElementRange(YAMLRoot):\n    \"\"\"\n    Range is a optional class that contains one non-key/non-identifier element\n    \"\"\"\n    ...\n\n    v1: Optional[Union[dict, OneElementClass]] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is not None and not isinstance(self.v1, OneElementClass):\n            self.v1 = OneElementClass(**self.v1)\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Importing CSVDumper Class for CSV Serialization in Python\nDESCRIPTION: This snippet demonstrates the import of the CSVDumper class from linkml_runtime.dumpers. CSVDumper is used to serialize Python objects into CSV format.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/loaders-and-dumpers.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml_runtime.dumpers import CSVDumper\n```\n\n----------------------------------------\n\nTITLE: Defining Duration Slot in LinkML Schema\nDESCRIPTION: This snippet defines the 'duration' slot in the LinkML schema. It specifies the URI, domain and range, and the classes that use this slot.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/duration.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: duration\n\nURI: [personinfo:duration](https://w3id.org/linkml/examples/personinfo/duration)\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [Float](types/Float.md)\n\n## Parents\n\n## Children\n\n## Used by\n\n * [EmploymentEvent](EmploymentEvent.md)\n * [Event](Event.md)\n * [MedicalEvent](MedicalEvent.md)\n```\n\n----------------------------------------\n\nTITLE: Python YAMLRoot Base Class Implementation\nDESCRIPTION: Example showing how LinkML-generated classes inherit from YAMLRoot for YAML and JSON serialization support.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/port-linkml.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass NamedThing(YAMLRoot):\n   ...\n```\n\n----------------------------------------\n\nTITLE: Defining Curie Type in LinkML Markdown\nDESCRIPTION: This snippet defines the Curie type in LinkML, specifying its URI, root type, representation, and additional properties. It also includes comments on how Curie should be handled in RDF and non-RDF serializations.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/types/Curie.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: curie\n\na compact URI\n\nURI: [linkml:Curie](https://w3id.org/linkml/Curie)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **Curie** |\n| Representation | | str |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | in RDF serializations this MUST be expanded to a URI |\n|  | | in non-RDF serializations MAY be serialized as the compact representation |\n```\n\n----------------------------------------\n\nTITLE: Running gen-project Command in LinkML Docker Container\nDESCRIPTION: This snippet shows how to run the 'gen-project --help' command within the LinkML Docker container. It demonstrates the usage of LinkML's command-line tools, specifically the project generation utility.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/install.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{command-output} gen-project --help\n---\nellipsis: 5\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Admonition Block for Array Implementation TODO\nDESCRIPTION: A markdown admonition block indicating that array implementation details need to be documented before completing labeled arrays feature.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/tricky_choices.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{admonition} TODO\nTo be filled in before we finish labeled arrays.\n```\n```\n\n----------------------------------------\n\nTITLE: Domain and Range Definition for union_of Slot\nDESCRIPTION: Specifies that the union_of slot links an Element to 0 or more Elements, defining the domain and range relationship.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/union_of.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Element](Element.md) &#8594;  <sub>0..\\*</sub> [Element](Element.md)\n```\n\n----------------------------------------\n\nTITLE: LinkML Boolean Type Mappings Table\nDESCRIPTION: Markdown table showing the exact mappings of the LinkML Boolean type to other schemas, specifically mapping to schema:Boolean.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/types/Boolean.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Boolean |\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx for LinkML Documentation\nDESCRIPTION: Configuration example for including LinkML-generated documentation in a Sphinx site, showing required extensions for markdown parsing and Mermaid diagram support.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/tools.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nextensions = [\n    ...\n    'myst_parser',\n    'sphinxcontrib.mermaid',\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Module Documentation with Sphinx Automodule\nDESCRIPTION: Uses Sphinx's eval-rst directive to automatically generate API documentation for the linkml.generators.common module. This directive pulls in documentation from docstrings and other metadata in the module.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/common/index.md#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: linkml.generators.common\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Running Single Test File with Pytest\nDESCRIPTION: Command to run a specific test file using pytest within the Poetry environment.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/contributing/contributing.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npoetry run pytest tests/test_issues/test_linkml_issue_NNN.py\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Path Type in LinkML\nDESCRIPTION: This snippet defines the 'jsonpath' type in LinkML. It specifies that the type is a string representation of a JSON Path, which must conform to JSON Point syntax and should dereference to valid objects within the current instance document when encoded in tree form.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/types/types/Jsonpath.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: jsonpath\n\nA string encoding a JSON Path. The value of the string MUST conform to JSON Point syntax and SHOULD dereference to zero or more valid objects within the current instance document when encoded in tree form.\n\nURI: [linkml:Jsonpath](https://w3id.org/linkml/Jsonpath)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Time Type Definition in Markdown\nDESCRIPTION: Structured documentation defining the Time type in LinkML, including its URI, root type (XSDTime), representation as string, and schema.org mapping.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/types/Time.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: time\n\nA time object represents a (local) time of day, independent of any particular day\n\nURI: [linkml:Time](https://w3id.org/linkml/Time)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **XSDTime** |\n| Representation | | str |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Time |\n```\n\n----------------------------------------\n\nTITLE: Implementing OptionalKeyedThreeElementRangeList in Python\nDESCRIPTION: Python implementation of a class with an optional list of references to keyed classes. Handles None, single values, and lists, with type conversion for each element.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OptionalKeyedThreeElementRangeList(YAMLRoot):\n    \"\"\"\n    Range is a optional list of a class that contains one key and two regular elements\n    \"\"\"\n    ...\n\n    v1: Optional[Union[Union[str, KeyedThreeElementClassName], List[Union[str, KeyedThreeElementClassName]]]] = empty_list()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            self.v1 = []\n        if not isinstance(self.v1, (list, dict)):\n            self.v1 = [self.v1]\n        self.v1 = [v if isinstance(v, KeyedThreeElementClassName) else KeyedThreeElementClassName(v) for v in self.v1]\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Generating Python Dataclasses from LinkML Schema\nDESCRIPTION: A bash command to generate Python dataclasses from the LinkML schema file.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial05.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngen-python personinfo.yaml > personinfo.py\n```\n\n----------------------------------------\n\nTITLE: Installing Cruft with Poetry\nDESCRIPTION: Adds the cruft package to the Poetry virtual environment for project templating.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/linkml-project-cookiecutter.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry add cruft\n```\n\n----------------------------------------\n\nTITLE: Generated Python Class with String Template\nDESCRIPTION: Shows the Python code generated for a class with a string_template. Includes the template definition, __str__ method for formatting, and a parse classmethod for creating instances from strings.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/string_template.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass FirstClass(YAMLRoot):\n    ...\n    string_template: ClassVar[str] = \"{name} - a {age} year old {gender}\"\n\n    name: str = None\n    age: Optional[int] = None\n    gender: Optional[str] = None\n    \n    ...\n\n    def __str__(self):\n        return FirstClass.string_template.format(**{k: '' if v is None else v for k, v in self.__dict__.items()})\n\n    @classmethod\n    def parse(cls, text: str) -> \"FirstClass\":\n        v = parse.parse(FirstClass.string_template, text)\n        return FirstClass(*v.fixed, **v.named)\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Session Setup\nDESCRIPTION: Configures SQLAlchemy engine and session for database operations\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/SQL-examples.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\nengine = create_engine(\"sqlite:///tmp/tmp.db\")\nsession_class = sessionmaker(bind=engine)\nsession = session_class()\n```\n\n----------------------------------------\n\nTITLE: Annotation Class UML Diagram in YUML\nDESCRIPTION: UML class diagram showing the Annotation class relationships, inheritance from Extension, use of Annotatable mixin, and its attributes including tag and annotations properties.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/Annotation.md#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\n[Extension],[Annotation]<annotations%200..*-++[Annotation&#124;tag(pk)(i):uriorcurie],[Annotation]uses%20-.->[Annotatable],[Extension]^-[Annotation],[Annotatable],[AnyValue]\n```\n\n----------------------------------------\n\nTITLE: Defining Date Type in LinkML (Markdown)\nDESCRIPTION: This snippet defines the Date type in LinkML. It specifies that Date is based on the XSDDate builtin type, represented as a string, and has an exact mapping to schema:Date.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/types/types/Date.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: date\n\na date (year, month and day) in an idealized calendar\n\nURI: [linkml:Date](https://w3id.org/linkml/Date)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **XSDDate** |\n| Representation | | str |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Date |\n```\n\n----------------------------------------\n\nTITLE: Markdown Properties Table for LinkML Datetime\nDESCRIPTION: Additional properties table showing exact mappings to schema.org DateTime type.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/types/Datetime.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:DateTime |\n```\n\n----------------------------------------\n\nTITLE: Future Array Specification Example\nDESCRIPTION: Shows a potential future syntax for specifying arrays with an implicit None value.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/arrays.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nMyClass:\n  attributes:\n    data:\n      range: integer\n      array:\n```\n\n----------------------------------------\n\nTITLE: Example Class YUML Diagram Representation\nDESCRIPTION: A YUML diagram showing the Example class structure and its relationships with other classes including Anything and CommonMetadata.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/Example.md#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\n[Anything]<object%200..1-++[Example&#124;value:string%20%3F;description:string%20%3F],[CommonMetadata]++-%20examples%200..*>[Example],[Element],[CommonMetadata],[Anything]\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for LinkML Validator Module\nDESCRIPTION: RST directives for documenting the main validator module and its subcomponents using Sphinx automodule.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/code/validator.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: linkml.validator\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining LinkML Related Mappings Slot Structure\nDESCRIPTION: Schema definition for the related_mappings slot showing domain, range, parents and SKOS mapping. The slot allows multiple URI or CURIE values and inherits from the base mappings slot.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/related_mappings.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: related mappings\n\nA list of terms from different schemas or terminology systems that have related meaning.\n\nURI: [linkml:related_mappings](https://w3id.org/linkml/related_mappings)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..\\*</sub> [Uriorcurie](types/Uriorcurie.md)\n\n## Parents\n\n *  is_a: [mappings](mappings.md)\n\n## Children\n\n\n## Used by\n\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | skos:relatedMatch |\n```\n\n----------------------------------------\n\nTITLE: Time Type Definition in Markdown\nDESCRIPTION: Markdown documentation defining the Time type in LinkML, specifying it as an XSDTime-based type that represents local time independent of date. Includes URI, root type, representation format and schema.org mapping.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/types/types/Time.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: time\n\nA time object represents a (local) time of day, independent of any particular day\n\nURI: [linkml:Time](https://w3id.org/linkml/Time)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **XSDTime** |\n| Representation | | str |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Time |\n```\n\n----------------------------------------\n\nTITLE: Visualizing Class Hierarchy with yUML Diagram\nDESCRIPTION: A yUML diagram showing class inheritance relationships from Root to Children, with further inheritance to Child1, Child2, Child21, and Child22 classes. Each class shows its properties including root_id, description, and angry attributes.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_notebooks/output/inheritance.txt#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\n[Root]^-[Children|root_id:string],[Children]^-[Child2|description:string;root_id(i):string],[Children]^-[Child1|root_id(i):string],[Child2]^-[Child22|angry:boolean;description(i):string;root_id(i):string],[Child2]^-[Child21|description(i):string;root_id(i):string],[Child22],[Child21],[Child1]\n```\n\n----------------------------------------\n\nTITLE: Generated Slots Class in LinkML Python Code\nDESCRIPTION: Example of the slots class generated by LinkML, which provides access to slot information including URI, name, domain, and range for each slot in the model.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n# Slots\nclass slots:\n    pass\n    \n    ...\n\nslots.RequiredInlinedKeyedTwoElementRange_v1 = Slot(uri=LISTS_AND_KEYS.v1, name=\"RequiredInlinedKeyedTwoElementRange_v1\", curie=LISTS_AND_KEYS.curie('v1'),\n                   model_uri=LISTS_AND_KEYS.RequiredInlinedKeyedTwoElementRange_v1, domain=RequiredInlinedKeyedTwoElementRange, range=Union[dict, KeyedTwoElementClass])\n\nslots.RequiredInlinedKeyedTwoElementRangeList_v1 = Slot(uri=LISTS_AND_KEYS.v1, name=\"RequiredInlinedKeyedTwoElementRangeList_v1\", curie=LISTS_AND_KEYS.curie('v1'),\n                   model_uri=LISTS_AND_KEYS.RequiredInlinedKeyedTwoElementRangeList_v1, domain=RequiredInlinedKeyedTwoElementRangeList, range=Union[Dict[Union[str, KeyedTwoElementClassName], Union[dict, KeyedTwoElementClass]], List[Union[dict, KeyedTwoElementClass]]])\n\nslots.RequiredInlinedKeyedThreeElementRange_v1 = Slot(uri=LISTS_AND_KEYS.v1, name=\"RequiredInlinedKeyedThreeElementRange_v1\", curie=LISTS_AND_KEYS.curie('v1'),\n                   model_uri=LISTS_AND_KEYS.RequiredInlinedKeyedThreeElementRange_v1, domain=RequiredInlinedKeyedThreeElementRange, range=Union[dict, KeyedThreeElementClass])\n\nslots.RequiredInlinedKeyedThreeElementRangeList_v1 = Slot(uri=LISTS_AND_KEYS.v1, name=\"RequiredInlinedKeyedThreeElementRangeList_v1\", curie=LISTS_AND_KEYS.curie('v1'),\n                   model_uri=LISTS_AND_KEYS.RequiredInlinedKeyedThreeElementRangeList_v1, domain=RequiredInlinedKeyedThreeElementRangeList, range=Union[Dict[Union[str, KeyedThreeElementClassName], Union[dict, KeyedThreeElementClass]], List[Union[dict, KeyedThreeElementClass]]])\n```\n\n----------------------------------------\n\nTITLE: Defining NodeIdentifier Type in LinkML YAML\nDESCRIPTION: This YAML snippet defines the 'nodeidentifier' type in LinkML. It specifies that a nodeidentifier is represented as a string and is based on the built-in NodeIdentifier type. This type is used to represent nodes in a model using URIs, CURIEs, or BNODEs.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/types/Nodeidentifier.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Type: nodeidentifier\n\nA URI, CURIE or BNODE that represents a node in a model.\n\nURI: [linkml:Nodeidentifier](https://w3id.org/linkml/Nodeidentifier)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **NodeIdentifier** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Installing LinkML Package\nDESCRIPTION: Installs or upgrades the LinkML package using pip with version check disabled and quiet output.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/ShExPrimerModel.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install linkml --upgrade --disable-pip-version-check -q\n```\n\n----------------------------------------\n\nTITLE: Implementing RequiredMultivaluedInlinedKeyedThreeElementRange in Python\nDESCRIPTION: Python implementation of the RequiredMultivaluedInlinedKeyedThreeElementRange class with __post_init__ method for normalization and validation.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/python.rst#2025-04-17_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass RequiredMultivaluedInlinedKeyedThreeElementRange(YAMLRoot):\n    \"\"\"\n    2.4(r) Range is a required keyed three element class that is represented as an inlined dictionary\n    \"\"\"\n    ...\n    v1: Union[Dict[Union[str, KeyedThreeElementClassName], Union[dict, KeyedThreeElementClass]], List[Union[dict, KeyedThreeElementClass]]] = empty_dict()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        elif not isinstance(self.v1, (list, dict)):\n            self.v1 = [self.v1]\n        if len(self.v1) == 0:\n            raise ValueError(f\"v1 must be a non-empty list, dictionary, or class\")\n        self._normalize_inlined_slot(slot_name=\"v1\", slot_type=KeyedThreeElementClass, key_name=\"name\", inlined_as_list=None, keyed=True)\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Markdown Syntax for Mermaid ER Diagrams\nDESCRIPTION: Example of the markdown syntax that surrounds the generated mermaid ER diagram content, showing the fence blocks.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/erdiagram.rst#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid\nerDiagram\n   ...\n```\n```\n\n----------------------------------------\n\nTITLE: Defining String Serialization Slot in LinkML\nDESCRIPTION: This snippet defines the 'string_serialization' slot in LinkML. It specifies the domain, range, parent classes, child classes, and usage of the slot. The slot is used for storing string representations of objects using a Python-like formatting syntax.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/string_serialization.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: string_serialization\n\nUsed on a slot that stores the string serialization of the containing object. The syntax follows python formatted strings, with slot names enclosed in {}s. These are expanded using the values of those slots.\nWe call the slot with the serialization the s-slot, the slots used in the {}s are v-slots. If both s-slots and v-slots are populated on an object then the value of the s-slot should correspond to the expansion.\nImplementations of frameworks may choose to use this property to either (a) PARSE: implement automated normalizations by parsing denormalized strings into complex objects (b) GENERARE: implement automated to_string labeling of complex objects\nFor example, a Measurement class may have 3 fields: unit, value, and string_value. The string_value slot may have a string_serialization of {value}{unit} such that if unit=cm and value=2, the value of string_value shouldd be 2cm\n\nURI: [linkml:string_serialization](https://w3id.org/linkml/string_serialization)\n\n\n## Domain and Range\n\n[Definition](Definition.md) &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [ClassDefinition](ClassDefinition.md)\n * [Definition](Definition.md)\n * [EnumDefinition](EnumDefinition.md)\n * [SlotDefinition](SlotDefinition.md)\n * [TypeMapping](TypeMapping.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n| **See also:** | | [https://github.com/linkml/issues/128](https://github.com/linkml/issues/128) |\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Mappings Table in Markdown\nDESCRIPTION: Markdown table showing external mappings for the Boolean type, specifically its exact mapping to schema:Boolean.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/types/Boolean.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Boolean |\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Class URI in LinkML\nDESCRIPTION: Specifies the URI for the Extension class in LinkML. This URI is used as a unique identifier for the class within the LinkML ecosystem.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/Extension.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nURI: [linkml:Extension](https://w3id.org/linkml/Extension)\n```\n\n----------------------------------------\n\nTITLE: Documenting JSON-LD Generator Module with Sphinx\nDESCRIPTION: Sphinx documentation directive to auto-generate documentation for the linkml.generators.jsonldgen module, including all members and undocumented members.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/jsonld.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: linkml.generators.jsonldgen\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SQLStore CLI\nDESCRIPTION: ReStructuredText directive for documenting the command line interface of the SQLStore utility, specifically the linkml-sqldb command.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/sqlstore.rst#2025-04-17_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: linkml.utils.sqlutils\n\n.. click:: linkml.utils.sqlutils:main\n    :prog: linkml-sqldb\n    :nested: short\n```\n\n----------------------------------------\n\nTITLE: Concept Class URI Definition\nDESCRIPTION: Defines the URI identifier for the Concept class in the personinfo schema\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/Concept.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[personinfo:Concept](https://w3id.org/linkml/examples/personinfo/Concept)\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Structure for Decimal Type Definition\nDESCRIPTION: Markdown tables defining the decimal type properties including its root type and broad mappings to schema.org Number type.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/types/Decimal.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **Decimal** |\n\n|  |  |  |\n| --- | --- | --- |\n| **Broad Mappings:** | | schema:Number |\n```\n\n----------------------------------------\n\nTITLE: Defining Created On Property in LinkML\nDESCRIPTION: Specifies the 'created_on' property for LinkML elements. It indicates the time at which the element was created.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/AnonymousExpression.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n * [created_on](created_on.md)  <sub>0..1</sub>\n     * Description: time at which the element was created\n     * Range: [Datetime](types/Datetime.md)\n     * in subsets: (BasicSubset)\n```\n\n----------------------------------------\n\nTITLE: Defining Relationship Class Attributes in Markdown\nDESCRIPTION: This snippet lists the attributes of the Relationship class, including their cardinality and data types. It covers temporal information (started_at_time, ended_at_time), the related entity (related_to), and the relationship type.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/Relationship.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Own\n\n * [started_at_time](started_at_time.md)  <sub>0..1</sub>\n     * Range: [Date](types/Date.md)\n * [ended_at_time](ended_at_time.md)  <sub>0..1</sub>\n     * Range: [Date](types/Date.md)\n * [related_to](related_to.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n * [type](type.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Domain and Range for value_specification_constant Slot in Markdown\nDESCRIPTION: Specifies the domain and range for the 'value_specification_constant' slot, indicating it can have 0 or 1 String value.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/value_specification_constant.md#2025-04-17_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nNone &#8594;  <sub>0..1</sub> [String](types/String.md)\n```\n\n----------------------------------------\n\nTITLE: Documenting LinkML Validator Plugins\nDESCRIPTION: RST directive for documenting the validator plugins system, excluding process, pre_process and post_process members.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/code/validator.rst#2025-04-17_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: linkml.validator.plugins\n    :members:\n    :exclude-members: process, pre_process, post_process\n```\n\n----------------------------------------\n\nTITLE: Marking Deprecation for Argument Type in LinkML Function\nDESCRIPTION: Example of how to mark a deprecated argument type in a LinkML function. This issues a warning when a string is passed instead of a Path object.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/deprecation.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef my_function(arg: Union[Path, str]):\n    if isinstance(arg, str):\n        deprecation_warning('semaphore')\n        arg = Path(str)\n```\n\n----------------------------------------\n\nTITLE: Class Diagram Reference in Markdown\nDESCRIPTION: References a UML diagram for the NamedThing class showing its category attribute\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue62/NamedThing.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[![img](https://yuml.me/diagram/nofunky;dir:TB/class/[NamedThing&#124;category:iri_type%20%2B])](https://yuml.me/diagram/nofunky;dir:TB/class/[NamedThing&#124;category:iri_type%20%2B])\n```\n\n----------------------------------------\n\nTITLE: Usage Context for City Slot\nDESCRIPTION: Identifies where the city slot is used within the schema, showing it is a component of the Address class.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/city.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n * [Address](Address.md)\n```\n\n----------------------------------------\n\nTITLE: Toctree Documentation Structure in Markdown\nDESCRIPTION: A Markdown code block using the toctree directive to organize documentation structure with maxdepth of 1, listing the available CLI documentation pages: linkml, generate, lint, validate, and entrypoints.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/cli/index.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n---\nmaxdepth: 1\n---\nlinkml\ngenerate\nlint\nvalidate\nentrypoints\n```\n```\n\n----------------------------------------\n\nTITLE: Referencing react-jsonschema-form in Markdown\nDESCRIPTION: A markdown link reference to react-jsonschema-form, a JavaScript library for building form UIs from JSON Schema specifications.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/tool-developer-guide.rst#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[react-jsonschema-form](https://rjsf-team.github.io/react-jsonschema-form/)\n```\n\n----------------------------------------\n\nTITLE: Documenting Python SQLStore Module\nDESCRIPTION: ReStructuredText directive specifying the documentation path for the SQLStore module and its class members.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/sqlstore.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: linkml.utils.sqlutils\n                   \n.. autoclass:: SQLStore\n    :members:                \n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Specification Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the Boolean type in LinkML, showing it maps to a built-in Bool type with bool representation.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/types/Boolean.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **Bool** |\n| Representation | | bool |\n```\n\n----------------------------------------\n\nTITLE: Defining Rank Property in LinkML\nDESCRIPTION: Specifies the 'rank' property for LinkML elements. It indicates the relative order of the element, with lower values given precedence.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/AnonymousExpression.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n * [rank](rank.md)  <sub>0..1</sub>\n     * Description: the relative order in which the element occurs, lower values are given precedence\n     * Range: [Integer](types/Integer.md)\n     * in subsets: (SpecificationSubset,BasicSubset)\n```\n\n----------------------------------------\n\nTITLE: Defining primary_email Slot in LinkML Schema\nDESCRIPTION: This snippet defines the 'primary_email' slot for a Person entity. It specifies the URI, domain and range, parent slot, and usage details. The slot is mapped to schema:email.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/Person_primary_email.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: primary_email\n\nURI: [personinfo:Person_primary_email](https://w3id.org/linkml/examples/personinfo/Person_primary_email)\n\n## Domain and Range\n\n[Person](Person.md) &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n *  is_a: [primary_email](primary_email.md)\n\n## Children\n\n\n## Used by\n\n * [Person](Person.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | schema:email |\n```\n\n----------------------------------------\n\nTITLE: Markdown URI Definition for values_from Slot\nDESCRIPTION: Defines the URI identifier for the values_from slot in LinkML, including domain, range, relationships and usage information.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/values_from.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nURI: [linkml:values_from](https://w3id.org/linkml/values_from)\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Prefix Mapping in LinkML\nDESCRIPTION: This command generates a JSON-style mapping between prefixes and URIs/IRIs using the gen-prefix-map tool. It takes a YAML schema file as input and outputs a JSON file.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/prefixmap.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngen-prefix-map examples/personinfo.yaml --output examples/personinfo.json\n```\n\n----------------------------------------\n\nTITLE: LinkML Class Declaration - HasMessagesChild\nDESCRIPTION: Class definition showing inheritance from HasMessagesClass, mixin relationship with MetricResultChild, and attributes including has_child_messages and inherited has_messages.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue179/HasMessagesChild.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Class: has messages child\n\nURI: [http://example.org/sample/example1/HasMessagesChild](http://example.org/sample/example1/HasMessagesChild)\n\n## Parents\n\n *  is_a: [HasMessagesClass](HasMessagesClass.md)\n\n## Mixin for\n\n * [MetricResultChild](MetricResultChild.md) (mixin) \n\n## Referenced by Class\n\n## Attributes\n\n### Own\n\n * [has child messages](has_child_messages.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n\n### Inherited from has messages class:\n\n * [has messages](has_messages.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n```\n\n----------------------------------------\n\nTITLE: Importing EnumDefinition Class from LinkML Model\nDESCRIPTION: Autodocumentation directive for the EnumDefinition class from the LinkML metamodel, including all members and undocumented members.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/code/metamodel.rst#2025-04-17_snippet_5\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: EnumDefinition\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Concept Class UML Diagram Reference\nDESCRIPTION: YUML markup representing the class diagram showing Concept's inheritance and relationships\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/Concept.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[![img](https://yuml.me/diagram/nofunky;dir:TB/class/[ProcedureConcept],[NamedThing],[DiagnosisConcept],[Concept&#124;id(i):string;name(i):string%20%3F;description(i):string%20%3F;image(i):string%20%3F]^-[ProcedureConcept],[Concept]^-[DiagnosisConcept],[NamedThing]^-[Concept])](https://yuml.me/diagram/nofunky;dir:TB/class/[ProcedureConcept],[NamedThing],[DiagnosisConcept],[Concept&#124;id(i):string;name(i):string%20%3F;description(i):string%20%3F;image(i):string%20%3F]^-[ProcedureConcept],[Concept]^-[DiagnosisConcept],[NamedThing]^-[Concept])\n```\n\n----------------------------------------\n\nTITLE: Importing Test Modules in LinkML Compliance Testing\nDESCRIPTION: Example command for checking test imports to ensure proper test organization and prevent accidental imports from elsewhere in the codebase.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_compliance/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngrep \"from tests.test_compliance.test_compliance_ import\" tests/test_compliance/*py\n```\n\n----------------------------------------\n\nTITLE: Installing LinkML Development Dependencies with Poetry\nDESCRIPTION: Installs the development dependencies needed for building documentation using Poetry. This should be run in the root folder of the LinkML code if you have pip-installed LinkML.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Float Type Mappings Table\nDESCRIPTION: Markdown table showing the exact mappings for the Float type to schema.org\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/types/Float.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Float |\n```\n\n----------------------------------------\n\nTITLE: Defining Jsonpath Type in LinkML Markdown\nDESCRIPTION: This snippet defines the Jsonpath type in LinkML. It specifies that Jsonpath is a string type that must conform to JSON Path syntax and should dereference to valid objects within the current instance document when encoded in tree form. The type is identified by the URI 'https://w3id.org/linkml/Jsonpath' and has a root builtin type of 'str' with a string representation.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/types/Jsonpath.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: jsonpath\n\nA string encoding a JSON Path. The value of the string MUST conform to JSON Point syntax and SHOULD dereference to zero or more valid objects within the current instance document when encoded in tree form.\n\nURI: [linkml:Jsonpath](https://w3id.org/linkml/Jsonpath)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Defining Default Range Slot in LinkML Schema\nDESCRIPTION: This snippet defines the 'default_range' slot for LinkML schemas. It specifies the domain as SchemaDefinition, range as TypeDefinition, and includes usage information and subsets.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/default_range.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: default_range\n\ndefault slot range to be used if range element is omitted from a slot definition\n\nURI: [linkml:default_range](https://w3id.org/linkml/default_range)\n\n\n## Domain and Range\n\n[SchemaDefinition](SchemaDefinition.md) &#8594;  <sub>0..1</sub> [TypeDefinition](TypeDefinition.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [SchemaDefinition](SchemaDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n|  | | MinimalSubset |\n|  | | BasicSubset |\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Table of Contents Depth\nDESCRIPTION: Sets the table of contents depth to 3 levels for the reStructuredText document.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/code/metamodel.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:tocdepth: 3\n```\n\n----------------------------------------\n\nTITLE: LinkML CLI Options for CSV Processing\nDESCRIPTION: Command line interface options for specifying target class and index slot when working with CSV data in LinkML.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/csvs.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  -C, --target-class TEXT         name of class in datamodel that the root\n                                  node instantiates\n\n  -S, --index-slot TEXT           top level slot. Required for CSV\n                                  dumping/loading\n```\n\n----------------------------------------\n\nTITLE: Constructing a Python Object with a List of Elements\nDESCRIPTION: Python equivalent of the YAML example, showing how to initialize an OptionalMultivaluedInlinedListIdentifiedThreeElementRange object with a list of dictionaries representing IdentifiedThreeElementClass objects.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nktec_examples = OptionalMultivaluedInlinedListIdentifiedThreeElementRange(\n    [ {name: 'element1', value: 17, modifier: \"2012-03-11\"},\n      {name: KeyedThreeElementClassKey('element2')},\n      {name: 'element3', value: 42}\n    ]  \n)  \n```\n\n----------------------------------------\n\nTITLE: NodeIdentifier Type Definition Table in Markdown\nDESCRIPTION: Markdown table defining the NodeIdentifier type specifications including its root type and string representation format.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/types/Nodeidentifier.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **NodeIdentifier** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Element Class URI Definition\nDESCRIPTION: The canonical URI identifier for the Element class in LinkML\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/Element.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nURI: [linkml:Element](https://w3id.org/linkml/Element)\n```\n\n----------------------------------------\n\nTITLE: Defining NCName Type in LinkML YAML\nDESCRIPTION: This YAML snippet defines the NCName type in LinkML. It specifies that NCName is a built-in type with a URI, and is represented as a string. The type is used for the prefix part of CURIEs.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/types/Ncname.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Type: ncname\n\nPrefix part of CURIE\n\nURI: [linkml:Ncname](https://w3id.org/linkml/Ncname)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **NCName** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Properties Table Definition\nDESCRIPTION: Defines additional properties of the union_of slot, including its inclusion in SpecificationSubset and OwlProfile subsets.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/union_of.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n|  | | OwlProfile |\n```\n\n----------------------------------------\n\nTITLE: Defining Status Property in LinkML\nDESCRIPTION: Specifies the 'status' property for LinkML elements. It indicates the status of the element, with an example provided.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/AnonymousExpression.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n * [status](status.md)  <sub>0..1</sub>\n     * Description: status of the element\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n     * Example: bibo:draft None\n     * in subsets: (BasicSubset)\n```\n\n----------------------------------------\n\nTITLE: Importing TypeDefinition Class from LinkML Model\nDESCRIPTION: Autodocumentation directive for the TypeDefinition class from the LinkML metamodel, including all members and undocumented members.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/code/metamodel.rst#2025-04-17_snippet_4\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: TypeDefinition\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Installing LinkML Development Environment with Poetry\nDESCRIPTION: Commands to clone the LinkML repository and install development dependencies using Poetry package manager.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/contributing/contributing.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/linkml/linkml\ncd linkml\npoetry install --all-extras\n```\n\n----------------------------------------\n\nTITLE: Defining 'related to' Slot for FamilialRelationship in LinkML\nDESCRIPTION: This markdown snippet defines the 'related to' slot for the FamilialRelationship class. It specifies the URI, domain and range, parent slot, and where it's used in the schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/FamilialRelationship_related_to.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: related to\n\nURI: [personinfo:FamilialRelationship_related_to](https://w3id.org/linkml/examples/personinfo/FamilialRelationship_related_to)\n\n## Domain and Range\n\n[FamilialRelationship](FamilialRelationship.md) &#8594;  <sub>1..1</sub> [Person](Person.md)\n\n## Parents\n\n *  is_a: [related to](related_to.md)\n\n## Children\n\n\n## Used by\n\n * [FamilialRelationship](FamilialRelationship.md)\n```\n\n----------------------------------------\n\nTITLE: LinkML Title Slot Properties\nDESCRIPTION: Property table defining aliases, mappings, and subset information for the title slot\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/title.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Aliases:** | | long name |\n| **Mappings:** | | dcterms:title |\n| **In Subsets:** | | BasicSubset |\n```\n\n----------------------------------------\n\nTITLE: Defining AnonymousExpression Class in LinkML\nDESCRIPTION: This snippet defines the AnonymousExpression class in LinkML. It specifies the class URI, mixins used, child classes, and inherited attributes from various mixins like Extensible, Annotatable, and CommonMetadata.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/AnonymousExpression.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Class: anonymous_expression\n\nAn abstract parent class for any nested expression\n\nURI: [linkml:AnonymousExpression](https://w3id.org/linkml/AnonymousExpression)\n\n## Uses Mixin\n\n *  mixin: [Expression](Expression.md) - general mixin for any class that can represent some form of expression\n *  mixin: [Extensible](Extensible.md) - mixin for classes that support extension\n *  mixin: [Annotatable](Annotatable.md) - mixin for classes that support annotations\n *  mixin: [CommonMetadata](CommonMetadata.md) - Generic metadata shared across definitions\n\n## Children\n\n * [AnonymousClassExpression](AnonymousClassExpression.md)\n * [AnonymousSlotExpression](AnonymousSlotExpression.md)\n\n## Referenced by Class\n\n\n## Attributes\n\n\n### Mixed in from extensible:\n\n * [extensions](extensions.md)  <sub>0..\\*</sub>\n     * Description: a tag/text tuple attached to an arbitrary element\n     * Range: [Extension](Extension.md)\n\n### Mixed in from annotatable:\n\n * [annotations](annotations.md)  <sub>0..\\*</sub>\n     * Description: a collection of tag/text tuples with the semantics of OWL Annotation\n     * Range: [Annotation](Annotation.md)\n\n### Mixed in from common_metadata:\n\n * [description](description.md)  <sub>0..1</sub>\n     * Description: a textual description of the element's purpose and use\n     * Range: [String](types/String.md)\n     * in subsets: (BasicSubset)\n\n### Mixed in from common_metadata:\n\n * [alt_descriptions](alt_descriptions.md)  <sub>0..\\*</sub>\n     * Description: A sourced alternative description for an element\n     * Range: [AltDescription](AltDescription.md)\n     * in subsets: (BasicSubset)\n\n### Mixed in from common_metadata:\n\n * [title](title.md)  <sub>0..1</sub>\n     * Description: A concise human-readable display label for the element. The title should mirror the name, and should use ordinary textual punctuation.\n     * Range: [String](types/String.md)\n     * in subsets: (BasicSubset)\n\n### Mixed in from common_metadata:\n\n * [deprecated](deprecated.md)  <sub>0..1</sub>\n     * Description: Description of why and when this element will no longer be used\n     * Range: [String](types/String.md)\n     * in subsets: (BasicSubset)\n\n### Mixed in from common_metadata:\n\n * [todos](todos.md)  <sub>0..\\*</sub>\n     * Description: Outstanding issues that needs resolution\n     * Range: [String](types/String.md)\n     * in subsets: (BasicSubset)\n\n### Mixed in from common_metadata:\n\n * [notes](notes.md)  <sub>0..\\*</sub>\n     * Description: editorial notes about an element intended primarily for internal consumption\n     * Range: [String](types/String.md)\n     * in subsets: (BasicSubset)\n\n### Mixed in from common_metadata:\n\n * [comments](comments.md)  <sub>0..\\*</sub>\n     * Description: notes and comments about an element intended primarily for external consumption\n     * Range: [String](types/String.md)\n     * in subsets: (BasicSubset)\n\n### Mixed in from common_metadata:\n\n * [examples](examples.md)  <sub>0..\\*</sub>\n     * Description: example usages of an element\n     * Range: [Example](Example.md)\n     * in subsets: (BasicSubset)\n\n### Mixed in from common_metadata:\n\n * [in_subset](in_subset.md)  <sub>0..\\*</sub>\n     * Description: used to indicate membership of a term in a defined subset of terms used for a particular domain or application.\n     * Range: [SubsetDefinition](SubsetDefinition.md)\n     * in subsets: (BasicSubset)\n\n### Mixed in from common_metadata:\n\n * [from_schema](from_schema.md)  <sub>0..1</sub>\n     * Description: id of the schema that defined the element\n     * Range: [Uri](types/Uri.md)\n     * in subsets: (SpecificationSubset)\n\n### Mixed in from common_metadata:\n\n * [imported_from](imported_from.md)  <sub>0..1</sub>\n     * Description: the imports entry that this element was derived from.  Empty means primary source\n     * Range: [String](types/String.md)\n\n### Mixed in from common_metadata:\n\n * [source](source.md)  <sub>0..1</sub>\n     * Description: A related resource from which the element is derived.\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n     * in subsets: (BasicSubset)\n\n### Mixed in from common_metadata:\n\n * [in_language](in_language.md)  <sub>0..1</sub>\n     * Description: the primary language used in the sources\n     * Range: [String](types/String.md)\n\n### Mixed in from common_metadata:\n\n * [see_also](see_also.md)  <sub>0..\\*</sub>\n     * Description: A list of related entities or URLs that may be of relevance\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n     * in subsets: (BasicSubset)\n\n### Mixed in from common_metadata:\n\n * [deprecated element has exact replacement](deprecated_element_has_exact_replacement.md)  <sub>0..1</sub>\n     * Description: When an element is deprecated, it can be automatically replaced by this uri or curie\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n\n### Mixed in from common_metadata:\n\n * [deprecated element has possible replacement](deprecated_element_has_possible_replacement.md)  <sub>0..1</sub>\n     * Description: When an element is deprecated, it can be potentially replaced by this uri or curie\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n\n### Mixed in from common_metadata:\n\n * [aliases](aliases.md)  <sub>0..\\*</sub>\n     * Description: Alternate names/labels for the element. These do not alter the semantics of the schema, but may be useful to support search and alignment.\n     * Range: [String](types/String.md)\n     * in subsets: (BasicSubset)\n\n### Mixed in from common_metadata:\n\n * [structured_aliases](structured_aliases.md)  <sub>0..\\*</sub>\n     * Description: A list of structured_alias objects, used to provide aliases in conjunction with additional metadata.\n     * Range: [StructuredAlias](StructuredAlias.md)\n\n### Mixed in from common_metadata:\n\n * [mappings](mappings.md)  <sub>0..\\*</sub>\n     * Description: A list of terms from different schemas or terminology systems that have comparable meaning. These may include terms that are precisely equivalent, broader or narrower in meaning, or otherwise semantically related but not equivalent from a strict ontological perspective.\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n\n### Mixed in from common_metadata:\n\n * [exact mappings](exact_mappings.md)  <sub>0..\\*</sub>\n     * Description: A list of terms from different schemas or terminology systems that have identical meaning.\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n\n### Mixed in from common_metadata:\n\n * [close mappings](close_mappings.md)  <sub>0..\\*</sub>\n     * Description: A list of terms from different schemas or terminology systems that have close meaning.\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n\n### Mixed in from common_metadata:\n\n * [related mappings](related_mappings.md)  <sub>0..\\*</sub>\n     * Description: A list of terms from different schemas or terminology systems that have related meaning.\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n\n### Mixed in from common_metadata:\n\n * [narrow mappings](narrow_mappings.md)  <sub>0..\\*</sub>\n     * Description: A list of terms from different schemas or terminology systems that have narrower meaning.\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Author Class in LinkML\nDESCRIPTION: This snippet defines an Author class in LinkML, representing an author of books with a unique identifier and name.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/recognize-structural-forms.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Author:\n    description: \"An author of books\"\n    attributes:\n      author_id:\n        description: \"Unique identifier for the author\"\n        identifier: true\n        range: string\n      name:\n        description: \"Name of the author\"\n        range: string\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Properties for 'id' Slot in LinkML\nDESCRIPTION: Specifies additional properties for the 'id' slot, including mappings to external schemas. In this case, it maps to the 'identifier' property in the schema.org vocabulary.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/id.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | schema:identifier |\n```\n\n----------------------------------------\n\nTITLE: Defining UCUM Code Slot in LinkML Markdown\nDESCRIPTION: This snippet defines the 'ucum_code' slot in LinkML. It specifies that the slot is used to associate a QUDT unit with its case-sensitive UCUM code. The slot has a domain of UnitOfMeasure and a range of String, with a cardinality of 0..1.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/ucum_code.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: ucum_code\n\nassociates a QUDT unit with its UCUM code (case-sensitive).\n\nURI: [linkml:ucum_code](https://w3id.org/linkml/ucum_code)\n\n\n## Domain and Range\n\n[UnitOfMeasure](UnitOfMeasure.md) &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [UnitOfMeasure](UnitOfMeasure.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | qudt:ucumCode |\n```\n\n----------------------------------------\n\nTITLE: Validating Partially Fixed Data (Bash)\nDESCRIPTION: This Bash command demonstrates validating the partially fixed data instance against the LinkML schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial03.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nlinkml-validate -s personinfo.yaml better-data.yaml\n```\n\n----------------------------------------\n\nTITLE: Marking Deprecation in LinkML Module\nDESCRIPTION: Example of how to mark a deprecated module in LinkML. This adds a deprecation warning to a hypothetical semaphore.py file.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/deprecation.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml.utils import deprecation_warning\ndeprecation_warning('semaphore')\n```\n\n----------------------------------------\n\nTITLE: Alternative Base YAML Example\nDESCRIPTION: Another example of base YAML file with different import structure.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/input/ImportMaps.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n  - includes/types\n  - includes/localtypes\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Type Properties in LinkML Markdown\nDESCRIPTION: This snippet defines the properties of the integer type in LinkML. It specifies the URI, root builtin type, and exact mappings to other schemas.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/types/Integer.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: integer\n\nAn integer\n\nURI: [linkml:Integer](https://w3id.org/linkml/Integer)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **int** |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Integer |\n```\n\n----------------------------------------\n\nTITLE: Defining NCName Type in LinkML YAML\nDESCRIPTION: This snippet defines the NCName type in LinkML, which is used for the prefix part of CURIEs. It specifies the type's URI, root type (NCName), and string representation.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/types/Ncname.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Type: ncname\n\nPrefix part of CURIE\n\nURI: [linkml:Ncname](https://w3id.org/linkml/Ncname)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **NCName** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Generated Project Structure\nDESCRIPTION: Directory structure showing the various artifacts generated by gen-project, including documentation, schemas, and code.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial08.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ndocs\nexcel\ngraphql\njava\njsonld\njsonschema\nowl\npersoninfo.py\nprefixmap\nprotobuf\nshacl\nshex\nsqlschema\n```\n\n----------------------------------------\n\nTITLE: Defining Procedure Slot in LinkML YAML\nDESCRIPTION: This snippet defines the 'procedure' slot for the PersonInfo data model. It specifies the URI, domain and range, and usage information for the slot.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/procedure.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Slot: procedure\n\nURI: [personinfo:procedure](https://w3id.org/linkml/examples/personinfo/procedure)\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [ProcedureConcept](ProcedureConcept.md)\n\n## Parents\n\n## Children\n\n## Used by\n\n * [MedicalEvent](MedicalEvent.md)\n```\n\n----------------------------------------\n\nTITLE: Generated Python Code for Inherited Types\nDESCRIPTION: This Python code snippet shows the generated classes for the inherited types and an InheritedTypes class with various attributes using these types.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Types\nclass InheritedType(Integer):\n    type_class_uri = XSD.integer\n    type_class_curie = \"xsd:integer\"\n    type_name = \"InheritedType\"\n    type_model_uri = PTYPES.InheritedType\n\n\nclass InheritedType2(Uriorcurie):\n    type_class_uri = XSD.anyURI\n    type_class_curie = \"xsd:anyURI\"\n    type_name = \"InheritedType2\"\n    type_model_uri = PTYPES.InheritedType2\n\n\nclass InheritedType3(InheritedType2):\n    type_class_uri = XSD.anyURI\n    type_class_curie = \"xsd:anyURI\"\n    type_name = \"InheritedType3\"\n    type_model_uri = PTYPES.InheritedType3\n\n     ...\n\n@dataclass\nclass InheritedTypes(YAMLRoot):\n    \"\"\"\n    various permutations of a typeof referencing a builtin\n    \"\"\"\n    ...\n\n    mand_InheritedType: Union[int, InheritedType] = None\n    mand_multi_InheritedType: Union[Union[int, InheritedType], List[Union[int, InheritedType]]] = None\n    opt_InheritedType: Optional[Union[int, InheritedType]] = None\n    opt_multi_InheritedType: Optional[Union[Union[int, InheritedType], List[Union[int, InheritedType]]]] = empty_list()\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.mand_InheritedType is None:\n            raise ValueError(\"mand_InheritedType must be supplied\")\n        if not isinstance(self.mand_InheritedType, InheritedType):\n            self.mand_InheritedType = InheritedType(self.mand_InheritedType)\n\n        if self.mand_multi_InheritedType is None:\n            raise ValueError(\"mand_multi_InheritedType must be supplied\")\n        elif not isinstance(self.mand_multi_InheritedType, list):\n            self.mand_multi_InheritedType = [self.mand_multi_InheritedType]\n        elif len(self.mand_multi_InheritedType) == 0:\n            raise ValueError(f\"mand_multi_InheritedType must be a non-empty list\")\n        self.mand_multi_InheritedType = [v if isinstance(v, InheritedType) else InheritedType(v) for v in self.mand_multi_InheritedType]\n\n        if self.opt_InheritedType is not None and not isinstance(self.opt_InheritedType, InheritedType):\n            self.opt_InheritedType = InheritedType(self.opt_InheritedType)\n\n        if self.opt_multi_InheritedType is None:\n            self.opt_multi_InheritedType = []\n        if not isinstance(self.opt_multi_InheritedType, list):\n            self.opt_multi_InheritedType = [self.opt_multi_InheritedType]\n        self.opt_multi_InheritedType = [v if isinstance(v, InheritedType) else InheritedType(v) for v in self.opt_multi_InheritedType]\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Float Type Definition Table\nDESCRIPTION: Markdown table showing the root builtin type definition for Float\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/types/Float.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **float** |\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for LinkML obligation_level Slot\nDESCRIPTION: Defines the obligation_level slot which captures the level of recommendation strength for metadata elements. The slot belongs to the SpecificationSubset and is used by EnumBinding.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/obligation_level.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: obligation_level\n\nThe level of obligation or recommendation strength for a metadata element\n\nURI: [linkml:obligation_level](https://w3id.org/linkml/obligation_level)\n\n\n## Domain and Range\n\nNone &#8594;  <sub>0..1</sub> [obligation_level_enum](obligation_level_enum.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [EnumBinding](EnumBinding.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | SpecificationSubset |\n```\n\n----------------------------------------\n\nTITLE: EmploymentEvent Class UML Diagram URL\nDESCRIPTION: YUML syntax representing the UML class diagram for EmploymentEvent, showing relationships with Organization, Event, and Person classes.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/EmploymentEvent.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![img](https://yuml.me/diagram/nofunky;dir:TB/class/[Organization],[Event],[Organization]<employed_at%200..1-%20[EmploymentEvent&#124;started_at_time(i):date%20%3F;ended_at_time(i):date%20%3F;duration(i):float%20%3F;is_current(i):boolean%20%3F],[Person]++-%20has_employment_history%200..*>[EmploymentEvent],[Event]^-[EmploymentEvent],[Person])](https://yuml.me/diagram/nofunky;dir:TB/class/[Organization],[Event],[Organization]<employed_at%200..1-%20[EmploymentEvent&#124;started_at_time(i):date%20%3F;ended_at_time(i):date%20%3F;duration(i):float%20%3F;is_current(i):boolean%20%3F],[Person]++-%20has_employment_history%200..*>[EmploymentEvent],[Event]^-[EmploymentEvent],[Person])\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectOrientedProfile Subset URI in Markdown\nDESCRIPTION: Specifies the URI for the ObjectOrientedProfile subset using Markdown syntax. This URI uniquely identifies the subset within the LinkML ecosystem.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/ObjectOrientedProfile.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nURI: [linkml:ObjectOrientedProfile](https://w3id.org/linkml/ObjectOrientedProfile)\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Mappings Table in Markdown\nDESCRIPTION: Markdown table showing the exact mappings of the Boolean type to other schemas, specifically mapping to schema:Boolean.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/types/types/Boolean.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Boolean |\n```\n\n----------------------------------------\n\nTITLE: LinkML Setting Class UML Diagram\nDESCRIPTION: UML class diagram showing the Setting class relationships with ImportExpression and SchemaDefinition classes. The Setting class contains setting_key and setting_value attributes.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/Setting.md#2025-04-17_snippet_0\n\nLANGUAGE: uml\nCODE:\n```\n[ImportExpression]++-%20import_map%200..*>[Setting&#124;setting_key(pk):ncname;setting_value:string],[SchemaDefinition]++-%20settings%200..*>[Setting],[SchemaDefinition],[ImportExpression]\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Installing yamlmagic package and reloading the extension for YAML support.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/enumerations.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -q --disable-pip-version-check yamlmagic\n%reload_ext yamlmagic\n```\n\n----------------------------------------\n\nTITLE: LinkML Slot Specification - meaning\nDESCRIPTION: Markdown specification defining the 'meaning' slot with its domain (PermissibleValue), range (Uriorcurie), usage contexts, and additional metadata properties including aliases and subset membership.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/meaning.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: meaning\n\nthe value meaning of a permissible value\n\nURI: [linkml:meaning](https://w3id.org/linkml/meaning)\n\n\n## Domain and Range\n\n[PermissibleValue](PermissibleValue.md) &#8594;  <sub>0..1</sub> [Uriorcurie](types/Uriorcurie.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [PermissibleValue](PermissibleValue.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Aliases:** | | PV meaning |\n| **In Subsets:** | | SpecificationSubset |\n|  | | BasicSubset |\n| **See also:** | | [https://en.wikipedia.org/wiki/ISO/IEC_11179](https://en.wikipedia.org/wiki/ISO/IEC_11179) |\n```\n\n----------------------------------------\n\nTITLE: Defining Curie Type in LinkML Markdown\nDESCRIPTION: This snippet defines the Curie type in LinkML using markdown format. It specifies the type's URI, root type (builtin Curie), and string representation. Additional properties include comments about RDF and non-RDF serializations.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/types/Curie.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: curie\n\na compact URI\n\nURI: [linkml:Curie](https://w3id.org/linkml/Curie)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **Curie** |\n| Representation | | str |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Comments:** | | in RDF serializations this MUST be expanded to a URI |\n|  | | in non-RDF serializations MAY be serialized as the compact representation |\n```\n\n----------------------------------------\n\nTITLE: Defining metamodel_version Slot in LinkML\nDESCRIPTION: This snippet defines the 'metamodel_version' slot in LinkML. It specifies that the slot is used by SchemaDefinition, has a range of String, and is part of the BasicSubset.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/metamodel_version.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: metamodel_version\n\nVersion of the metamodel used to load the schema\n\nURI: [linkml:metamodel_version](https://w3id.org/linkml/metamodel_version)\n\n\n## Domain and Range\n\n[SchemaDefinition](SchemaDefinition.md) &#8594;  <sub>0..1</sub> [String](types/String.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [SchemaDefinition](SchemaDefinition.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | BasicSubset |\n```\n\n----------------------------------------\n\nTITLE: Testing Unusual Enumeration Patterns\nDESCRIPTION: Python code showing how to use non-standard enumeration values in practice.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/enumerations.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmodel2_str = yaml.dump(model2)\nmodule = compile_model(model2_str, print_python=True)\nt = module.Sample(\"Something\", [module.UnusualEnumPatterns.M, module.UnusualEnumPatterns['% ! -- whoo']])\nprint(str(t))\n```\n\n----------------------------------------\n\nTITLE: Domain and Range Definition for City Slot\nDESCRIPTION: Specifies the domain and range constraints for the city slot, indicating it accepts a single optional String value.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/city.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nNone &#8594;  <sub>0..1</sub> [String](types/String.md)\n```\n\n----------------------------------------\n\nTITLE: Generating UML Diagram for AnonymousTypeExpression Class in YUML\nDESCRIPTION: This YUML code snippet generates a UML class diagram representing the AnonymousTypeExpression class and its relationships with other classes in the LinkML model.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/AnonymousTypeExpression.md#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\n[![img](https://yuml.me/diagram/nofunky;dir:TB/class/[TypeExpression],[PatternExpression],[TypeExpression]++-%20all_of%200..*>[AnonymousTypeExpression&#124;pattern:string%20%3F;implicit_prefix:string%20%3F;equals_string:string%20%3F;equals_string_in:string%20*;equals_number:integer%20%3F],[TypeExpression]++-%20any_of%200..*>[AnonymousTypeExpression],[TypeExpression]++-%20exactly_one_of%200..*>[AnonymousTypeExpression],[TypeExpression]++-%20none_of%200..*>[AnonymousTypeExpression],[AnonymousTypeExpression]uses%20-.->[TypeExpression],[UnitOfMeasure],[Anything])]\n```\n\n----------------------------------------\n\nTITLE: Example Data for Simple Explicit Scalar Pattern\nDESCRIPTION: Example data showing how measurements are recorded using the explicit scalar pattern.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-measurements.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- id: P001\n  mass_in_kg: 70.0\n  height_in_m: 1.53\n  bmi: 29.9\n```\n\n----------------------------------------\n\nTITLE: Specifying Domain and Range for 'id' Slot in LinkML\nDESCRIPTION: Defines the domain and range for the 'id' slot. It indicates that the slot has no specific domain restriction and must have exactly one String value.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/id.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Domain and Range\n\nNone &#8594;  <sub>1..1</sub> [String](types/String.md)\n```\n\n----------------------------------------\n\nTITLE: ProcedureConcept Class References\nDESCRIPTION: Documents the reference to ProcedureConcept class through the procedure property with 0..1 cardinality.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/ProcedureConcept.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n *  **None** *[procedure](procedure.md)*  <sub>0..1</sub>  **[ProcedureConcept](ProcedureConcept.md)**\n```\n\n----------------------------------------\n\nTITLE: Defining LocalName Class Attributes in Markdown\nDESCRIPTION: This snippet defines the attributes of the LocalName class, including local_name_source and local_name_value. It specifies the cardinality, description, and range for each attribute.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/LocalName.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Own\n\n * [local_name_source](local_name_source.md)  <sub>1..1</sub>\n     * Description: the ncname of the source of the name\n     * Range: [Ncname](types/Ncname.md)\n * [local_name_value](local_name_value.md)  <sub>1..1</sub>\n     * Description: a name assigned to an element in a given ontology\n     * Range: [String](types/String.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Book Data Structure in JSON\nDESCRIPTION: This JSON snippet demonstrates a nested structure for book data, including prices as a nested array within each book object.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/recognize-structural-forms.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"books\": [\n    {\n        \"title\": \"20,000 Leagues Under the Sea with Walruses\",\n        \"author\": \"Jules Verne-Inspired\",\n        \"genre\": \"Sci-Fi\",\n        \"year\": 2018,\n        \"rating\": 5,\n        \"prices\": [\n            {\"amount\": 13.50, \"currency\": \"$\", \"format\": \"Paperback\"},\n            {\"amount\": 22.00, \"currency\": \"$\", \"format\": \"Hardback\"}\n        ]\n    },\n    {\n        \"title\": \"The Great Walrus Gatsby\",\n        \"author\": \"F. Scott Fitztusk\",\n        \"genre\": \"Classic\",\n        \"year\": 2020,\n        \"rating\": 4,\n        \"prices\": [\n            {\"amount\": 14.99, \"currency\": \"$\", \"format\": \"Paperback\"},\n            {\"amount\": 23.50, \"currency\": \"$\", \"format\": \"Hardback\"}\n        ]\n    },\n    {\n        \"title\": \"The Tusk of Physics\",\n        \"author\": \"Stephen Hawtusk\",\n        \"genre\": \"Science\",\n        \"year\": 2019,\n        \"rating\": 5,\n        \"prices\": [\n            {\"amount\": 12.00, \"currency\": \"$\", \"format\": \"Paperback\"},\n            {\"amount\": 20.00, \"currency\": \"$\", \"format\": \"Hardback\"}\n        ]\n    },\n    {\n        \"title\": \"Walruses of Waterloo\",\n        \"author\": \"Natasha Rostova\",\n        \"genre\": \"History\",\n        \"year\": 2017,\n        \"rating\": 3,\n        \"prices\": [\n            {\"amount\": 15.00, \"currency\": \"$\", \"format\": \"Paperback\"},\n            {\"amount\": 24.00, \"currency\": \"$\", \"format\": \"Hardback\"}\n        ]\n    },\n    {\n        \"title\": \"A Tale of Two Walruses\",\n        \"author\": \"Charles Tuskens\",\n        \"genre\": \"Adventure\",\n        \"year\": 2021,\n        \"rating\": 4,\n        \"prices\": [\n            {\"amount\": 16.25, \"currency\": \"$\", \"format\": \"Paperback\"},\n            {\"amount\": 26.25, \"currency\": \"$\", \"format\": \"Hardback\"}\n        ]\n    }\n]}\n```\n\n----------------------------------------\n\nTITLE: DiagnosisConcept Class URI Definition\nDESCRIPTION: Defines the URI for the DiagnosisConcept class in the PersonInfo ontology\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/DiagnosisConcept.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[personinfo:DiagnosisConcept](https://w3id.org/linkml/examples/personinfo/DiagnosisConcept)\n```\n\n----------------------------------------\n\nTITLE: Defining ChildOfNamedThing Class in LinkML Markdown\nDESCRIPTION: This snippet defines the ChildOfNamedThing class, specifying its URI, parent class, and attributes. It includes a UML diagram representation of the class hierarchy.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue65/ChildOfNamedThing.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Class: child of named thing\n\nURI: [https://example.com/test65/ChildOfNamedThing](https://example.com/test65/ChildOfNamedThing)\n\n[![img](https://yuml.me/diagram/nofunky;dir:TB/class/[NamedThing],[NamedThing]^-[ChildOfNamedThing&#124;subject:string%20%3F])](https://yuml.me/diagram/nofunky;dir:TB/class/[NamedThing],[NamedThing]^-[ChildOfNamedThing&#124;subject:string%20%3F])\n\n## Parents\n\n *  is_a: [NamedThing](NamedThing.md)\n\n## Referenced by Class\n\n\n## Attributes\n\n\n### Own\n\n * [child of named thing➞subject](child_of_named_thing_subject.md)  <sub>0..1</sub>\n     * Range: [String](types/String.md)\n```\n\n----------------------------------------\n\nTITLE: Prefix Example YAML\nDESCRIPTION: Example showing how literal mapping keys work with prefixes.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/input/ImportMaps.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nprefixes:\n  p1: https://my.org/includes/\n  p2: https://my.org/includes/\n\nimports:\n  - p1:types\n```\n\n----------------------------------------\n\nTITLE: LinkML Class Definition - AnyValue\nDESCRIPTION: Markdown definition of the AnyValue class showing its relationships and mappings. The class is used as a value type in Extensions with a 1..1 cardinality.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/AnyValue.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Class: AnyValue\n\nURI: [linkml:AnyValue](https://w3id.org/linkml/AnyValue)\n\n## Referenced by Class\n\n *  **[Extension](Extension.md)** *[extension➞value](extension_value.md)*  <sub>1..1</sub>  **[AnyValue](AnyValue.md)**\n\n## Attributes\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Mappings:** | | linkml:Any |\n```\n\n----------------------------------------\n\nTITLE: Generating Deprecation Documentation with Jinja2\nDESCRIPTION: Template that iterates through deprecation entries to create formatted documentation sections. Each entry includes the deprecation status, version information, linked GitHub issues, deprecation messages, and recommendations.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/code/deprecation.rst#2025-04-17_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{% for dep in deprecations %}\n{{ dep.name }}\n==============\n\n{% if dep.removed %}\n.. admonition:: Removed\n{% else %}\n.. admonition:: Deprecated\n    :class: warning\n{% endif %}\n\n    .. deprecated:: {{ dep.deprecated_in }}\n\n    {% if dep.removed_in is not none %}\n    *Removed in {{ dep.removed_in }}*\n    {% endif %}\n\n    {% if dep.issue is not none %}\n    See also: `#{{ dep.issue }} <https://github.com/linkml/linkml/issues/{{ dep.issue }}>`_\n    {% endif %}\n\n{{ dep.message }}\n\n{% if dep.recommendation %}\n**Recommendation:** {{ dep.recommendation }}\n{% endif %}\n\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: LinkML Boolean Type Mappings\nDESCRIPTION: Markdown table showing external mappings for the Boolean type, specifically mapping to schema:Boolean.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/annotations/types/Boolean.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Boolean |\n```\n\n----------------------------------------\n\nTITLE: Defining URI Type Properties in Markdown\nDESCRIPTION: Table showing the core properties of the built-in URI type in LinkML, including its root type and string representation format.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/types/Uri.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **URI** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Compiling Generated Python Classes into a Module\nDESCRIPTION: Compiles the generated Python classes into a module for further use in the notebook.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/examples.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nspec = compile(PythonGenerator(model_str).serialize(), 'test', 'exec')\nmodule = ModuleType('test')\nexec(spec, module.__dict__)\n```\n\n----------------------------------------\n\nTITLE: Defining Sparqlpath Type in LinkML Markdown\nDESCRIPTION: This snippet defines the Sparqlpath type in LinkML. It specifies that Sparqlpath is a string type that must conform to SPARQL syntax and should dereference to valid objects when encoded as RDF. The type's URI, root type (string), and representation are also provided.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/types/Sparqlpath.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: sparqlpath\n\nA string encoding a SPARQL Property Path. The value of the string MUST conform to SPARQL syntax and SHOULD dereference to zero or more valid objects within the current instance document when encoded as RDF.\n\nURI: [linkml:Sparqlpath](https://w3id.org/linkml/Sparqlpath)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Simple Property Graph Schema in YAML\nDESCRIPTION: A basic LinkML schema for a Person-Movie property graph that models persons and movies as classes, with acted_in and directed as attributes connecting them. This approach works for simple graphs but doesn't support edge properties.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-property-graphs.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: https://example.org/person-movie\nname: Person-Movie\ndescription: Illustration of simple RDF graph model\nprefixes:\n  neo4j: https://neo4j.com/\n  schema: https://schema.org/\n  example: https://example.org/\n\nimports:\n  - linkml:types\n  \ndefault_prefix: example\ndefault_range: string\n  \nclasses:\n\n  Person:\n    attributes:\n      name:\n      born:\n      profession:\n      acted_in:\n        range: Movie\n        multivalued: true\n      directed:\n        range: Movie\n        multivalued: true\n   Movie:\n     attributes:\n      title:\n        identifier: true\n      released:\n```\n\n----------------------------------------\n\nTITLE: URI Type Definition in LinkML\nDESCRIPTION: Defines the built-in URI type in LinkML. The type represents complete URIs and is serialized as strings in implementations. In RDF serializations, it is treated as xsd:anyURI for literals and translated to nodes for identifiers.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/types/Uri.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: uri\n\na complete URI\n\nURI: [linkml:Uri](https://w3id.org/linkml/Uri)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **URI** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: ObjectIdentifier Type Specification in LinkML\nDESCRIPTION: Type definition for ObjectIdentifier, a builtin type that represents object identifiers using URIs or CURIEs. Inherits from ElementIdentifier and is represented as a string type. Used for inheritance and type checking purposes.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/types/Objectidentifier.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: objectidentifier\n\nA URI or CURIE that represents an object in the model.\n\nURI: [linkml:Objectidentifier](https://w3id.org/linkml/Objectidentifier)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **ElementIdentifier** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: LinkML Schema Validation Command\nDESCRIPTION: Command to validate data against the LinkML schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial06.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlinkml-validate -s personinfo.yaml data.yaml\n```\n\n----------------------------------------\n\nTITLE: YUML Class Diagram - Problem Class Definition\nDESCRIPTION: Visual class diagram showing the Problem class with an optional description field of type string, and its inheritance relationship with DownloadProblem subclass.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue179/Problem.md#2025-04-17_snippet_0\n\nLANGUAGE: yuml\nCODE:\n```\n[Problem|description:string ?]^-[DownloadProblem],[DownloadProblem]\n```\n\n----------------------------------------\n\nTITLE: Importing DimensionExpression Class from LinkML Model\nDESCRIPTION: Autodocumentation directive for the DimensionExpression class from the LinkML metamodel, including all members and undocumented members.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/code/metamodel.rst#2025-04-17_snippet_7\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: DimensionExpression\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: SparqlPath Type Specification in Markdown\nDESCRIPTION: Markdown specification defining the SparqlPath type, indicating it is a string type that must conform to SPARQL Property Path syntax and should dereference to valid objects when used in RDF.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/types/Sparqlpath.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: sparqlpath\n\nA string encoding a SPARQL Property Path. The value of the string MUST conform to SPARQL syntax and SHOULD dereference to zero or more valid objects within the current instance document when encoded as RDF.\n\nURI: [linkml:Sparqlpath](https://w3id.org/linkml/Sparqlpath)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: LinkML Double Type Mappings Table\nDESCRIPTION: Table showing the close mappings for the double type to schema.org types.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/types/Double.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| **Close Mappings:** | | schema:Float |\n```\n\n----------------------------------------\n\nTITLE: Class URI Definition in Markdown\nDESCRIPTION: Defines the URI for the NamedThing class\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_issues/__snapshots__/issue62/NamedThing.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nURI: [https://example.com/test62/NamedThing](https://example.com/test62/NamedThing)\n```\n\n----------------------------------------\n\nTITLE: Verifying Python Installation in Bash\nDESCRIPTION: This snippet demonstrates how to check the installed Python version by running the 'python' command in the terminal. It shows the expected output, including the Python version and environment details.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/install.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPython 3.9.5 (v3.9.5:0a7dcbdb13, May  3 2021, 13:17:02) \n[Clang 6.0 (clang-600.0.57)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```\n\n----------------------------------------\n\nTITLE: Defining SpecificationSubset in LinkML Markdown\nDESCRIPTION: This snippet defines the SpecificationSubset in LinkML, including its URI and a brief description. It also lists all the classes that are part of this subset, which form the core of the LinkML specification.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/SpecificationSubset.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Subset: SpecificationSubset\n\nA subset that includes all the metamodel elements that form part of the normative LinkML specification.\n\nThe complete LinkML specification can be found at [linkml:specification](https://w3id.org/linkml/specification)\n\nURI: [linkml:SpecificationSubset](https://w3id.org/linkml/SpecificationSubset)\n\n\n### Classes\n\n * [ClassDefinition](ClassDefinition.md) - an element whose instances are complex objects that may have slot-value assignments\n * [ClassRule](ClassRule.md) - A rule that applies to instances of a class\n * [EnumBinding](EnumBinding.md) - A binding of a slot or a class to a permissible value from an enumeration.\n * [EnumDefinition](EnumDefinition.md) - an element whose instances must be drawn from a specified set of permissible values\n * [MatchQuery](MatchQuery.md) - A query that is used on an enum expression to dynamically obtain a set of permissivle values via a query that  matches on properties of the external concepts.\n * [PermissibleValue](PermissibleValue.md) - a permissible value, accompanied by intended text and an optional mapping to a concept URI\n * [Prefix](Prefix.md) - prefix URI tuple\n * [ReachabilityQuery](ReachabilityQuery.md) - A query that is used on an enum expression to dynamically obtain a set of permissible values via walking from a  set of source nodes to a set of descendants or ancestors over a set of relationship types.\n * [SchemaDefinition](SchemaDefinition.md) - A collection of definitions that make up a schema or a data model.\n * [Setting](Setting.md) - assignment of a key to a value\n * [SlotDefinition](SlotDefinition.md) - an element that describes how instances are related to other instances\n * [SubsetDefinition](SubsetDefinition.md) - an element that can be used to group other metamodel elements\n * [TypeDefinition](TypeDefinition.md) - an element that whose instances are atomic scalar values that can be mapped to primitive types\n * [TypeMapping](TypeMapping.md) - Represents how a slot or type can be serialized to a format.\n * [UniqueKey](UniqueKey.md) - a collection of slots whose values uniquely identify an instance of a class\n\n### Mixins\n```\n\n----------------------------------------\n\nTITLE: Defining LinkML Documentation Structure in reStructuredText\nDESCRIPTION: This code snippet defines the structure of the LinkML documentation using reStructuredText. It includes a table of contents with links to various sections of the documentation, such as installation, tutorials, schemas, and FAQs.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   intro/overview\n   intro/install\n   intro/tutorial\n   schemas/index\n   data/index\n   generators/index\n   howtos/index\n   examples\n   ecosystem\n   specifications/linkml-spec.md\n   contributing/contributing.md\n   faq/index\n```\n\n----------------------------------------\n\nTITLE: Generating Python Dataclass for Required Single Element Class\nDESCRIPTION: Python code generated for a required, single element class. It includes validation to ensure v1 is supplied and type coercion.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass RequiredOneElementRange(YAMLRoot):\n    \"\"\"\n    Range is a required class that contains one non-key/non-identifier element\n    \"\"\"\n    ...\n\n    v1: Union[dict, OneElementClass] = None\n\n    def __post_init__(self, **kwargs: Dict[str, Any]):\n        if self.v1 is None:\n            raise ValueError(\"v1 must be supplied\")\n        if not isinstance(self.v1, OneElementClass):\n            self.v1 = OneElementClass(**self.v1)\n\n        super().__post_init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Defining NodeIdentifier Type in LinkML YAML\nDESCRIPTION: This YAML snippet defines the NodeIdentifier type in LinkML. It specifies that NodeIdentifier is a built-in type represented as a string, used to identify nodes in a model using URIs, CURIEs, or BNODEs.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/types/Nodeidentifier.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Type: nodeidentifier\n\nA URI, CURIE or BNODE that represents a node in a model.\n\nURI: [linkml:Nodeidentifier](https://w3id.org/linkml/Nodeidentifier)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **NodeIdentifier** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Markdown Slot Definition for LinkML Description\nDESCRIPTION: Markdown specification for the description slot that defines its URI, domain/range relationships, inheritance structure, usage contexts and subset membership.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/alt_description_text.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slot: description\n\ntext of an attributed description\n\nURI: [linkml:alt_description_text](https://w3id.org/linkml/alt_description_text)\n\n\n## Domain and Range\n\n[AltDescription](AltDescription.md) &#8594;  <sub>1..1</sub> [String](types/String.md)\n\n## Parents\n\n\n## Children\n\n\n## Used by\n\n * [AltDescription](AltDescription.md)\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **In Subsets:** | | BasicSubset |\n```\n\n----------------------------------------\n\nTITLE: Using JSON-LD Library for Prefix Handling\nDESCRIPTION: This Python code demonstrates how the JSON-LD library handles prefixes, showing that URIs not ending in '#' or '/' are not treated as prefixes.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/context_issue.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ng = Graph()\ng.parse(data=ctxt_str, format=\"json-ld\")\nprefixes = {k:v for k, v in g.namespaces()}\nprint(prefix_for(prefixes, 'BIOGRID'))\nprint(prefix_for(prefixes, 'CHEBI'))\n```\n\n----------------------------------------\n\nTITLE: Integer Type Definition Markdown\nDESCRIPTION: Markdown definition specifying the integer type in LinkML, including its URI and schema.org mapping. The type is defined as a builtin type that maps to the native int type.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/types/Integer.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: integer\n\nAn integer\n\nURI: [linkml:Integer](https://w3id.org/linkml/Integer)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **int** |\n\n## Other properties\n\n|  |  |  |\n| --- | --- | --- |\n| **Exact Mappings:** | | schema:Integer |\n```\n\n----------------------------------------\n\nTITLE: Time Type Definition Table in Markdown\nDESCRIPTION: Markdown table showing the root type and representation format for the Time type in LinkML\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/extensions/types/Time.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **XSDTime** |\n| Representation | | str |\n```\n\n----------------------------------------\n\nTITLE: Marking Deprecation for Dependency Version in LinkML\nDESCRIPTION: Example of how to mark a deprecated dependency version in LinkML. This checks the version of a hypothetical pysemaphore package and issues a warning if it's below 2.0.0.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/deprecation.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pysemaphore\nfrom linkml.utils.deprecation import SemVer\n\nif SemVer.from_package('pysemaphore').major < 2:\n  deprecation_warning('semaphore')\n```\n\n----------------------------------------\n\nTITLE: Loading LinkML Objects from JSON Data\nDESCRIPTION: This example demonstrates how to deserialize JSON data into a LinkML Python object using the linkml-runtime framework's json_loader. It shows the basic pattern for loading from a file.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/data/python.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from linkml_runtime.loaders import json_loader\n>>> from personinfo import Person\n>>> p1 = json_loader.load('person_data.json')\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of Array Data as Nested Lists\nDESCRIPTION: Illustrates how to represent multidimensional array data as nested lists (List of Lists of Lists) in JSON format, which is more natural for scientific computing.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/multidimensional-arrays.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n   [\n       [111, 211, 311, 411],\n       [121, 221, 321, 421],\n       \"...\"\n   ],\n   \"...\",\n   [\n       \"...\",\n       [143, 243, 343, 443]\n   ]\n]\n```\n\n----------------------------------------\n\nTITLE: LinkML schema with inlined slot definition\nDESCRIPTION: YAML schema snippet showing how to define an inlined multivalued slot that will be represented using JSON Schema references.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/generators/json-schema.rst#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhas_employment_history:\n  range: EmploymentEvent\n  multivalued: true\n  inlined: true\n  inlined_as_list: true\n```\n\n----------------------------------------\n\nTITLE: Defining LinkML Any Type in YAML\nDESCRIPTION: Demonstrates how to define and use the LinkML Any type for flexible slot ranges. It shows the class definition and an example usage in a Person class.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/advanced.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n\n  Any:\n    class_uri: linkml:Any\n\n  ...\n\n  Person:\n   attributes:\n     id:\n     metadata:\n       range: Any\n```\n\n----------------------------------------\n\nTITLE: Converting between LinkML and Valve formats\nDESCRIPTION: A reference to a Python module that provides interoperability between LinkML and Valve frameworks. This module (valve2linkml) specifically handles conversion from LinkML to Valve format.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/ecosystem.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[valve2linkml](https://github.com/tmprd/valve-linkml/blob/master/valve_linkml/linkml2valve.py)\n```\n\n----------------------------------------\n\nTITLE: No Inlining, Reference by Key in LinkML YAML\nDESCRIPTION: This snippet shows how to configure the has_subtypes attribute to use reference by key instead of inlining. It sets inlined to false in the schema definition.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/schemas/inlining.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n      has_subtypes:\n        range: Organism\n        multivalued: true\n        inlined: false\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries\nDESCRIPTION: This Python code installs the necessary libraries for the demonstration, including prefixcommons, rdflib, rdflib-jsonld, and jsonasobj.\nSOURCE: https://github.com/linkml/linkml/blob/main/notebooks/context_issue.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n!pip install -q --disable-pip-version-check prefixcommons\n!pip install -q --disable-pip-version-check rdflib\n!pip install -q --disable-pip-version-check rdflib-jsonld\n!pip install -q --disable-pip-version-check jsonasobj\n```\n\n----------------------------------------\n\nTITLE: Importing CSVLoader Class for CSV Deserialization in Python\nDESCRIPTION: This code imports the CSVLoader class from linkml_runtime.loaders. CSVLoader is used to deserialize CSV data into Python objects.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/developers/loaders-and-dumpers.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom linkml_runtime.loaders import CSVLoader\n```\n\n----------------------------------------\n\nTITLE: Simple Flexible Unit Scalar Pattern in LinkML\nDESCRIPTION: Pattern allowing flexible unit specification for measurements through separate unit fields.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/howtos/model-measurements.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nclasses:\n  Subject:\n    attributes:\n      id:\n        identifier: true\n      mass:\n        range: decimal\n      mass_unit:\n        range: MassUnitEnum\n      height:\n        range: decimal\n      height_unit:\n        range: HeightUnitEnum\n      bmi:\n        range: decimal\n        unit:\n          ucum_code: kg/m2\n```\n\n----------------------------------------\n\nTITLE: DiagnosisConcept Class Structure Definition\nDESCRIPTION: YUML diagram code showing the class inheritance and relationship structure for DiagnosisConcept\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/DiagnosisConcept.md#2025-04-17_snippet_1\n\nLANGUAGE: yuml\nCODE:\n```\n[MedicalEvent]++-%20diagnosis%200..1>[DiagnosisConcept&#124;id(i):string;name(i):string%20%3F;description(i):string%20%3F;image(i):string%20%3F],[Concept]^-[DiagnosisConcept],[MedicalEvent],[Concept]\n```\n\n----------------------------------------\n\nTITLE: Defining MinimalSubset URI in Markdown\nDESCRIPTION: Specifies the URI for the MinimalSubset in LinkML, which is a crucial identifier for the subset definition.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/MinimalSubset.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nURI: [linkml:MinimalSubset](https://w3id.org/linkml/MinimalSubset)\n```\n\n----------------------------------------\n\nTITLE: URI Definition for FamilialRelationship Type Slot\nDESCRIPTION: Defines the canonical URI for the FamilialRelationship_type slot in the personinfo schema.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/FamilialRelationship_type.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[personinfo:FamilialRelationship_type](https://w3id.org/linkml/examples/personinfo/FamilialRelationship_type)\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for LinkML FAQ in reStructuredText\nDESCRIPTION: This code snippet defines a reStructuredText table of contents (toctree) for the LinkML FAQ section, organizing various FAQ topics into separate pages with a maximum depth of 2 levels.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   general\n   why-linkml\n   modeling\n   tools\n   python\n   getting-help\n   contributing\n   tricky_choices\n```\n\n----------------------------------------\n\nTITLE: Alternative Local Types Example\nDESCRIPTION: Another example of local types YAML with simple import.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/input/ImportMaps.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n  - types\n```\n\n----------------------------------------\n\nTITLE: Describing CSV Columns using CSV-on-the-web JSON\nDESCRIPTION: This JSON snippet demonstrates how CSV-on-the-web (CSVW) is used to describe columns in a CSV file about country data. It's used to compare CSVW's approach with LinkML's capabilities for describing tabular data.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/faq/why-linkml.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@context\": \"http://www.w3.org/ns/csvw\",\n  \"url\": \"countries.csv\"\n  \"tableSchema\": {\n    \"columns\": [{\n      \"titles\": \"country\",\n      \"dc:description\": \"The ISO two-letter code for a country, in lowercase.\"\n    },{\n      \"titles\": \"country group\",\n      \"dc:description\": \"A lowercase two-letter code for a group of countries.\"\n    },{\n      \"titles\": \"name (en)\",\n      \"dc:description\": \"The official name of the country in English.\"\n    },{\n      \"titles\": \"name (fr)\",\n      \"dc:description\": \"The official name of the country in French.\"\n    },{\n      \"titles\": \"name (de)\",\n      \"dc:description\": \"The official name of the country in German.\"\n    },{\n      \"titles\": \"latitude\",\n      \"dc:description\": \"The latitude of an indicative point in the country.\"\n    },{\n      \"titles\": \"longitude\",\n      \"dc:description\": \"The longitude of an indicative point in the country.\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RST Table of Contents\nDESCRIPTION: ReStructuredText directive for creating a table of contents that includes 10 tutorial sections with maxdepth of 2 and a caption.\nSOURCE: https://github.com/linkml/linkml/blob/main/docs/intro/tutorial.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   tutorial01\n   tutorial02\n   tutorial03             \n   tutorial04\n   tutorial05\n   tutorial06\n   tutorial07\n   tutorial08\n   tutorial09\n   tutorial10\n```\n\n----------------------------------------\n\nTITLE: Normalizing Inlined Slots in LinkML\nDESCRIPTION: The final line of the __post_init__ method that handles normalization of inlined slots, showing how KeyedThreeElementClass objects are processed when represented as a list.\nSOURCE: https://github.com/linkml/linkml/blob/main/linkml/generators/PythonGenNotes.md#2025-04-17_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n    self._normalize_inlined_slot(slot_name=\"v1\", slot_type=IdentifiedThreeElementClass, key_name=\"name\", inlined_as_list=True, keyed=True)\n```\n\n----------------------------------------\n\nTITLE: Defining Broad Mappings Property in LinkML\nDESCRIPTION: Specifies the 'broad_mappings' property for LinkML elements. It allows listing terms from different schemas that have broader meaning.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/meta/AnonymousExpression.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n * [broad mappings](broad_mappings.md)  <sub>0..\\*</sub>\n     * Description: A list of terms from different schemas or terminology systems that have broader meaning.\n     * Range: [Uriorcurie](types/Uriorcurie.md)\n```\n\n----------------------------------------\n\nTITLE: URIorCURIE Type Definition\nDESCRIPTION: Defines the built-in URIorCURIE type that represents either a URI or CURIE value. The type is represented internally as a string and serves as a root type in the LinkML type system.\nSOURCE: https://github.com/linkml/linkml/blob/main/tests/test_base/__snapshots__/markdown/mappings/types/Uriorcurie.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nRoot (builtin) type: URIorCURIE\nRepresentation: str\n```\n\n----------------------------------------\n\nTITLE: Defining DateOrDatetime Type in LinkML Schema\nDESCRIPTION: Defines a type that can represent either a date or datetime value. The type is built on the string primitive type and is identified by the URI https://w3id.org/linkml/DateOrDatetime.\nSOURCE: https://github.com/linkml/linkml/blob/main/examples/PersonSchema/personinfo/docs/types/DateOrDatetime.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Type: date_or_datetime\n\nEither a date or a datetime\n\nURI: [linkml:DateOrDatetime](https://w3id.org/linkml/DateOrDatetime)\n\n|  |  |  |\n| --- | --- | --- |\n| Root (builtin) type | | **str** |\n| Representation | | str |\n```"
  }
]