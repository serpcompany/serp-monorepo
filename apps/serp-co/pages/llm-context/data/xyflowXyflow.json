[
  {
    "owner": "xyflow",
    "repo": "xyflow",
    "content": "TITLE: Basic React Flow Implementation Example\nDESCRIPTION: A quickstart example demonstrating how to set up a basic React Flow diagram with nodes, edges, and optional components like MiniMap, Controls, and Background. This example shows how to manage nodes and edges state and connect them.\nSOURCE: https://github.com/xyflow/xyflow/blob/main/packages/react/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback } from 'react';\nimport {\n  ReactFlow,\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n} from '@xyflow/react';\n\nimport '@xyflow/react/dist/style.css';\n\nconst initialNodes = [\n  { id: '1', position: { x: 0, y: 0 }, data: { label: '1' } },\n  { id: '2', position: { x: 0, y: 100 }, data: { label: '2' } },\n];\n\nconst initialEdges = [{ id: 'e1-2', source: '1', target: '2' }];\n\nfunction Flow() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), [setEdges]);\n\n  return (\n    <ReactFlow\n      nodes={nodes}\n      edges={edges}\n      onNodesChange={onNodesChange}\n      onEdgesChange={onEdgesChange}\n      onConnect={onConnect}\n    >\n      <MiniMap />\n      <Controls />\n      <Background />\n    </ReactFlow>\n  );\n}\n\nexport default Flow;\n```\n\n----------------------------------------\n\nTITLE: Basic React Flow Usage Example\nDESCRIPTION: A React component demonstrating the basic setup and usage of React Flow, including nodes, edges, and built-in components like MiniMap, Controls, and Background.\nSOURCE: https://github.com/xyflow/xyflow/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useCallback } from 'react';\nimport {\n  ReactFlow,\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n} from '@xyflow/react';\n\nimport '@xyflow/react/dist/style.css';\n\nconst initialNodes = [\n  { id: '1', position: { x: 0, y: 0 }, data: { label: '1' } },\n  { id: '2', position: { x: 0, y: 100 }, data: { label: '2' } },\n];\n\nconst initialEdges = [{ id: 'e1-2', source: '1', target: '2' }];\n\nfunction Flow() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), [setEdges]);\n\n  return (\n    <ReactFlow\n      nodes={nodes}\n      edges={edges}\n      onNodesChange={onNodesChange}\n      onEdgesChange={onEdgesChange}\n      onConnect={onConnect}\n    >\n      <MiniMap />\n      <Controls />\n      <Background />\n    </ReactFlow>\n  );\n}\n\nexport default Flow;\n```\n\n----------------------------------------\n\nTITLE: Basic Svelte Flow Implementation Example\nDESCRIPTION: A complete example showing how to set up a basic Svelte Flow graph with nodes, edges, and additional components like Controls, Background, and MiniMap. Demonstrates the core functionality including node creation and connection.\nSOURCE: https://github.com/xyflow/xyflow/blob/main/packages/svelte/README.md#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { writable } from 'svelte/store';\n  import { SvelteFlow, Controls, Background, BackgroundVariant, MiniMap } from '@xyflow/svelte';\n\n  // you need to import the styles for Svelte Flow to work\n  // if you just want to load the basic styleds, you can import '@xyflow/svelte/dist/base.css'\n  import '@xyflow/svelte/dist/style.css';\n\n  // We are using writables for the nodes and edges to sync them easily. When a user drags a node for example, Svelte Flow updates its position. This also makes it easier to update nodes in user land.\n  const nodes = writable([\n    {\n      id: '1',\n      type: 'input',\n      data: { label: 'Input Node' },\n      position: { x: 0, y: 0 }\n    },\n    {\n      id: '2',\n      type: 'custom',\n      data: { label: 'Node' },\n      position: { x: 0, y: 150 }\n    }\n  ]);\n\n  // same for edges\n  const edges = writable([\n    {\n      id: '1-2',\n      type: 'default',\n      source: '1',\n      target: '2',\n      label: 'Edge Text'\n    }\n  ]);\n</script>\n\n<SvelteFlow {nodes} {edges} fitView on:nodeclick={(event) => console.log('on node click', event)}>\n  <Controls />\n  <Background variant={BackgroundVariant.Dots} />\n  <MiniMap />\n</SvelteFlow>\n```\n\n----------------------------------------\n\nTITLE: Basic Svelte Flow Usage Example\nDESCRIPTION: A Svelte component demonstrating the basic setup and usage of Svelte Flow, including nodes, edges, and built-in components like Controls, Background, and MiniMap.\nSOURCE: https://github.com/xyflow/xyflow/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { writable } from 'svelte/store';\n  import {\n    SvelteFlow,\n    Controls,\n    Background,\n    BackgroundVariant,\n    MiniMap,\n  } from '@xyflow/svelte';\n\n  import '@xyflow/svelte/dist/style.css'\n  \n  const nodes = writable([\n    {\n      id: '1',\n      type: 'input',\n      data: { label: 'Input Node' },\n      position: { x: 0, y: 0 }\n    },\n    {\n      id: '2',\n      type: 'custom',\n      data: { label: 'Node' },\n      position: { x: 0, y: 150 }\n    }\n  ]);\n\n  const edges = writable([\n    {\n      id: '1-2',\n      type: 'default',\n      source: '1',\n      target: '2',\n      label: 'Edge Text'\n    }\n  ]);\n</script>\n\n<SvelteFlow\n  {nodes}\n  {edges}\n  fitView\n  on:nodeclick={(event) => console.log('on node click', event)}\n>\n  <Controls />\n  <Background variant={BackgroundVariant.Dots} />\n  <MiniMap />\n</SvelteFlow>\n```\n\n----------------------------------------\n\nTITLE: XYFlow Configuration Examples\nDESCRIPTION: Demonstration of new features and properties introduced in the update, including useConnection hook, onDelete handler, isValidConnection prop, viewport control, and various component attributes.\nSOURCE: https://github.com/xyflow/xyflow/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Example usage of new features\n\n// Hook for handling ongoing connections\nconst connection = useConnection();\n\n// Combined deletion handler\nonDelete={(nodes, edges) => {\n  console.log('Deleted:', { nodes, edges });\n}}\n\n// Connection validation\nisValidConnection={(connection) => {\n  return true; // your validation logic\n}}\n\n// Controlled viewport\n<ReactFlow\n  viewport={viewport}\n  onViewportChange={onViewportChange}\n/>\n\n// ViewportPortal usage\n<ViewportPortal>\n  <div>Viewport content</div>\n</ViewportPortal>\n\n// Background pattern styling\n<Background patternClassName=\"bg-pattern\" />\n\n// Node with origin attribute\n<Node origin={[0.5, 0.5]} />\n\n// Edge with selectable attribute\n<Edge selectable={true} />\n```\n\n----------------------------------------\n\nTITLE: Node Updates in React Flow v11 vs v12\nDESCRIPTION: Demonstrates the difference in updating node attributes between React Flow v11 and v12. V12 requires immutable updates rather than direct mutations.\nSOURCE: https://github.com/xyflow/xyflow/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsetNodes((nds) =>\n  nds.map((node) => {\n    node.hidden = true;\n    return node;\n  })\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsetNodes((nds) =>\n  nds.map((node) => ({\n    ...node,\n    hidden: true,\n  }))\n);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions in React Flow v12\nDESCRIPTION: Shows how to define custom node types in React Flow v12, allowing for multiple node types with different data structures that can be distinguished by the node.type attribute.\nSOURCE: https://github.com/xyflow/xyflow/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyNodeType = Node<{ value: number }, 'number'> | Node<{ value: string }, 'text'>;\napplyNodeChange<MyNodeType>\n```\n\n----------------------------------------\n\nTITLE: Creating Flow Configuration for xyflow E2E Tests\nDESCRIPTION: Example JavaScript code for configuring a flow test case in xyflow, including node and edge definitions, and various component properties that will be applied during testing.\nSOURCE: https://github.com/xyflow/xyflow/blob/main/tests/playwright/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// NewFolder/NewTest.ts\nexport default {\n  flowProps: {\n    minZoom: 0.25,\n    maxZoom: 4,\n    fitView: true,\n    nodes: [\n      {\n        id: '1',\n        data: { label: '1' },\n        position: { x: 0, y: 0 },\n        type: 'input',\n      },\n      {\n        id: '2',\n        data: { label: '2' },\n        position: { x: -100, y: 100 },\n      },\n      {\n        id: '3',\n        data: { label: '3' },\n        position: { x: 100, y: 100 },\n      },\n    ],\n    edges: [\n      {\n        id: 'first-edge',\n        source: '1',\n        target: '2',\n      },\n      {\n        id: 'second-edge',\n        source: '1',\n        target: '3',\n      },\n    ],\n  },\n  backgroundProps: { /*... */},\n  panelProps: { /*... */},\n  minimapProps:  { /*... */},\n  controlsProps:  { /*... */},\n} satisfies FlowConfig;\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Development Server for xyflow Projects\nDESCRIPTION: Commands for setting up the development environment for working on React Flow or Svelte Flow. This includes installing dependencies with pnpm, starting the development server, testing changes, and running tests.\nSOURCE: https://github.com/xyflow/xyflow/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing React Flow with Package Manager\nDESCRIPTION: Basic installation command for adding React Flow to your project using npm. Similar commands can be used with yarn or pnpm.\nSOURCE: https://github.com/xyflow/xyflow/blob/main/packages/react/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xyflow/react\n```\n\n----------------------------------------\n\nTITLE: Installing React Flow with npm\nDESCRIPTION: Command to install the React Flow package using npm.\nSOURCE: https://github.com/xyflow/xyflow/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @xyflow/react\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte Flow via npm\nDESCRIPTION: Command for installing the Svelte Flow package using npm. This is the recommended way to add Svelte Flow to your project.\nSOURCE: https://github.com/xyflow/xyflow/blob/main/packages/svelte/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xyflow/svelte\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte Flow with npm\nDESCRIPTION: Command to install the Svelte Flow package using npm.\nSOURCE: https://github.com/xyflow/xyflow/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @xyflow/svelte\n```\n\n----------------------------------------\n\nTITLE: Installing @xyflow/system Package\nDESCRIPTION: Command to install the @xyflow/system package via npm, which provides core utilities for React Flow and Svelte Flow implementations.\nSOURCE: https://github.com/xyflow/xyflow/blob/main/packages/system/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @xyflow/system\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for React and Svelte in xyflow\nDESCRIPTION: Commands for running Playwright tests in headless mode or UI mode for both React and Svelte implementations of xyflow.\nSOURCE: https://github.com/xyflow/xyflow/blob/main/tests/playwright/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test:react # runs all the tests headless for react\npnpm run test:react:ui # runs tests for react in UI mode, good for debugging\n\npnpm run test:svelte # runs all the tests headless for svelte\npnpm run test:svelte:ui # runs tests for svelte in UI mode, good for debugging\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Dependencies for xyflow E2E Tests\nDESCRIPTION: Commands for installing the necessary dependencies for running Playwright tests in the xyflow project, including Node dependencies and browser installations.\nSOURCE: https://github.com/xyflow/xyflow/blob/main/tests/playwright/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/playwright # check if you are in the correct directory \n\npnpm install # install node dependencies\nnpx playwright install # follow the instructions to install browsers\n```\n\n----------------------------------------\n\nTITLE: Starting React Flow Dev Server with PNPM\nDESCRIPTION: Command to start the local development server for React Flow using PNPM package manager\nSOURCE: https://github.com/xyflow/xyflow/blob/main/examples/react/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server with pnpm for Svelte Flow\nDESCRIPTION: Command to start the local development server for the Svelte Flow testing application using pnpm.\nSOURCE: https://github.com/xyflow/xyflow/blob/main/examples/svelte/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Astro Project\nDESCRIPTION: This command starts the local development server for an Astro project using pnpm. It allows developers to run and test the React Flow and Svelte Flow integration locally.\nSOURCE: https://github.com/xyflow/xyflow/blob/main/examples/astro-xyflow/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Dependency Updates in Markdown\nDESCRIPTION: Updates to package dependencies with version references\nSOURCE: https://github.com/xyflow/xyflow/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`a7d10ffc`](https://github.com/xyflow/xyflow/commit/a7d10ffce5a0195471681980f97b1b5f6c448f35), [`4e681f9c`](https://github.com/xyflow/xyflow/commit/4e681f9c529c3f4f8b2ac5d25b4db7878c197e14)]:\n  - @xyflow/system@0.0.57\n```\n\n----------------------------------------\n\nTITLE: Version Info and Link References in Markdown\nDESCRIPTION: Package version headers and references to pull requests and commits\nSOURCE: https://github.com/xyflow/xyflow/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @xyflow/react\n\n## 12.6.0\n\n### Minor Changes\n\n- [#5219](https://github.com/xyflow/xyflow/pull/5219) [`4236adbc`](https://github.com/xyflow/xyflow/commit/4236adbc462b3f65ee41869ef426491ed3fa8ba0)\n- [#5227](https://github.com/xyflow/xyflow/pull/5227) [`a7d10ffc`](https://github.com/xyflow/xyflow/commit/a7d10ffce5a0195471681980f97b1b5f6c448f35)\n```"
  }
]