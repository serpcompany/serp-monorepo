[
  {
    "owner": "fluxcd",
    "repo": "flux2",
    "content": "TITLE: Configuring CDEvents Receiver in Flux\nDESCRIPTION: Example configuration for a Flux Receiver custom resource that handles CDEvents. This defines event filtering, secret references, and target resources for reconciliation when valid CDEvents are received.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0006-cdevents/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: notification.toolkit.fluxcd.io/v1\nkind: Receiver\nmetadata:\n  name: cdevents-receiver\n  namespace: flux-system\nspec:\n  type: cdevents\n  events:\n    - \"dev.cdevents.change.merged\"\n  secretRef:\n    name: receiver-token\n  resources:\n    - apiVersion: source.toolkit.fluxcd.io/v1\n      kind: GitRepository\n      name: webapp\n      namespace: flux-system\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Tenant Azure DevOps Access in Flux\nDESCRIPTION: This YAML configuration shows how to set up multi-tenant access to Azure DevOps Git repositories using Flux GitRepository resources, ImageUpdateAutomation, and associated ServiceAccounts with Azure workload identity annotations.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0010-multi-tenant-workload-identity/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: source.toolkit.fluxcd.io/v1\nkind: GitRepository\nmetadata:\n  name: tenant-a-repo\n  namespace: tenant-a\nspec:\n  ...\n  provider: azure\n  serviceAccountName: tenant-a-azure-devops-sa\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: tenant-a-azure-devops-sa\n  namespace: tenant-a\n  annotations:\n    azure.workload.identity/client-id: d6e4fc00-c5b2-4a72-9f84-6a92e3f06b08 # client ID for my tenant A\n    azure.workload.identity/tenant-id: 72f988bf-86f1-41af-91ab-2d7cd011db47 # azure tenant for the cluster (optional, defaults to the env var AZURE_TENANT_ID set in the controller)\n---\napiVersion: image.toolkit.fluxcd.io/v1beta2\nkind: ImageUpdateAutomation\nmetadata:\n  name: tenant-a-image-update\n  namespace: tenant-a\nspec:\n  ...\n  sourceRef:\n    kind: GitRepository\n    name: tenant-a-repo\n---\napiVersion: source.toolkit.fluxcd.io/v1\nkind: GitRepository\nmetadata:\n  name: tenant-b-repo\n  namespace: tenant-b\nspec:\n  ...\n  provider: azure\n  serviceAccountName: tenant-b-azure-devops-sa\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: tenant-b-azure-devops-sa\n  namespace: tenant-b\n  annotations:\n    azure.workload.identity/client-id: 4a7272f9-f186-41af-9f84-6a92e32d7cd0 # client ID for my tenant B\n    azure.workload.identity/tenant-id: 72f988bf-86f1-41af-91ab-2d7cd011db47 # azure tenant for the cluster (optional, defaults to the env var AZURE_TENANT_ID set in the controller)\n---\napiVersion: image.toolkit.fluxcd.io/v1beta2\nkind: ImageUpdateAutomation\nmetadata:\n  name: tenant-b-image-update\n  namespace: tenant-b\nspec:\n  ...\n  sourceRef:\n    kind: GitRepository\n    name: tenant-b-repo\n```\n\n----------------------------------------\n\nTITLE: Defining HelmRelease with OCI Chart Reference in YAML\nDESCRIPTION: YAML configuration for a HelmRelease referencing a chart from an OCI-based HelmRepository.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0002-helm-oci/README.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: helm.toolkit.fluxcd.io/v2beta1\nkind: HelmRelease\nmetadata:\n  name: my-app\n  namespace: default\nspec:\n  interval: 60m\n  chart:\n    spec:\n      chart: my-app\n      version: '1.0.x'\n      sourceRef:\n        kind: HelmRepository\n        name: ghcr-charts\n      interval: 1m # check for new OCI artifacts every minute\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Tenant AWS KMS Integration with Flux\nDESCRIPTION: Example configuration that demonstrates how to set up tenant-specific AWS KMS access using dedicated ServiceAccounts for each tenant. This allows tenants to decrypt secrets using only their own KMS keys.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0010-multi-tenant-workload-identity/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kustomize.toolkit.fluxcd.io/v1\nkind: Kustomization\nmetadata:\n  name: tenant-a-aws-kms\n  namespace: tenant-a\nspec:\n  ...\n  decryption:\n    provider: sops\n    serviceAccountName: tenant-a-aws-kms-sa\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: tenant-a-aws-kms-sa\n  namespace: tenant-a\n  annotations:\n    eks.amazonaws.com/role-arn: arn:aws:iam::123456789123:role/tenant-a-kms\n---\napiVersion: kustomize.toolkit.fluxcd.io/v1\nkind: Kustomization\nmetadata:\n  name: tenant-b-aws-kms\n  namespace: tenant-b\nspec:\n  ...\n  decryption:\n    provider: sops\n    serviceAccountName: tenant-b-aws-kms-sa\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: tenant-b-aws-kms-sa\n  namespace: tenant-b\n  annotations:\n    eks.amazonaws.com/role-arn: arn:aws:iam::123456789123:role/tenant-b-kms\n```\n\n----------------------------------------\n\nTITLE: Configuring Flux Controller to Disable HTTP Connections Using YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a Flux controller (source-controller in this example) to disable all outgoing HTTP connections by setting the '--insecure-allow-http' flag to false in the deployment specification.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0004-insecure-http/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      containers:\n      - name: manager\n        image: fluxcd/source-controller\n        args:\n          - --watch-all-namespaces\n          - --log-level=info\n          - --log-encoding=json\n          - --enable-leader-election\n          - --storage-path=/data\n          - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.\n          - --insecure-allow-http=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Tenant GCS Bucket Access in Flux\nDESCRIPTION: This YAML configuration illustrates how to set up multi-tenant access to Google Cloud Storage (GCS) buckets using Flux Bucket resources and associated ServiceAccounts with GCP service account annotations.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0010-multi-tenant-workload-identity/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: source.toolkit.fluxcd.io/v1\nkind: Bucket\nmetadata:\n  name: tenant-a-bucket\n  namespace: tenant-a\nspec:\n  ...\n  provider: gcp\n  serviceAccountName: tenant-a-gcs-sa\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: tenant-a-gcs-sa\n  namespace: tenant-a\n  annotations:\n    iam.gke.io/gcp-service-account: tenant-a-bucket@my-org-project.iam.gserviceaccount.com\n---\napiVersion: source.toolkit.fluxcd.io/v1\nkind: Bucket\nmetadata:\n  name: tenant-b-bucket\n  namespace: tenant-b\nspec:\n  ...\n  provider: gcp\n  serviceAccountName: tenant-b-gcs-sa\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: tenant-b-gcs-sa\n  namespace: tenant-b\n  annotations:\n    iam.gke.io/gcp-service-account: tenant-b-bucket@my-org-project.iam.gserviceaccount.com\n```\n\n----------------------------------------\n\nTITLE: Tagging OCI Artifacts with Flux\nDESCRIPTION: Tags a specific version of an OCI artifact as 'latest' for easier reference in deployment configurations.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0003-kubernetes-oci/README.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nflux tag artifact oci://ghcr.io/org/my-app-config:v1.0.0 --tag latest\n```\n\n----------------------------------------\n\nTITLE: Pushing Kubernetes Manifests as OCI Artifacts with Flux\nDESCRIPTION: Uses Flux CLI to push Kubernetes manifests to GHCR as an OCI artifact, including source repository and revision metadata.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0003-kubernetes-oci/README.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nflux push artifact oci://ghcr.io/org/my-app-config:v1.0.0 \\\n\t--source=\"$(git config --get remote.origin.url)\" \\\n\t--revision=\"sha1:$(git rev-parse HEAD)\"\\\n\t--path=\"./deploy\"\n```\n\n----------------------------------------\n\nTITLE: Defining New Artifact Revision Format in Flux v2\nDESCRIPTION: Specifies the new format for the Revision field of the Artifact type, using '@' separator and including algorithm prefix for the checksum.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0005-artifact-revision-and-digest/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[ <named pointer> ] [ [ \"@\" ] <algo> \":\" <checksum> ]\n```\n\n----------------------------------------\n\nTITLE: Flux CLI Artifact Management Commands\nDESCRIPTION: Commands for tagging, listing, building, and pulling OCI artifacts using the Flux CLI.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0003-kubernetes-oci/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nflux tag artifact oci://docker.io/org/app-config:v1.0.0 --tag=latest --tag=production\nflux list artifacts oci://docker.io/org/app-config\nflux build artifact --path ./deploy --output tmp/artifact.tgz\nflux pull artifact oci://docker.io/org/app-config:v1.0.0 --output ./manifests\n```\n\n----------------------------------------\n\nTITLE: Defining Cosign Public Keys Secret in YAML\nDESCRIPTION: YAML configuration for a Kubernetes secret containing Cosign public keys for chart verification.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0002-helm-oci/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: cosign-public-keys\ntype: Opaque\nstringData:\n  key1.pub: <pub-key-1>\n  key2.pub: <pub-key-2>\n```\n\n----------------------------------------\n\nTITLE: Pushing Kubernetes Configs as OCI Artifacts with Flux CLI\nDESCRIPTION: Command to package and push Kubernetes configs to a container registry as an OCI artifact, including source and revision metadata.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0003-kubernetes-oci/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflux push artifact oci://docker.io/org/app-config:v1.0.0 \\\n  --source=\"$(git config --get remote.origin.url)\" \\\n  --revision=\"sha1:$(git rev-parse HEAD)\" \\\n  --path=\"./deploy\"\n```\n\n----------------------------------------\n\nTITLE: Defining HelmRelease with Image Policy Marker in YAML\nDESCRIPTION: YAML configuration for a HelmRelease with an image policy marker for automated chart version updates.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0002-helm-oci/README.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: helm.toolkit.fluxcd.io/v2beta1\nkind: HelmRelease\nmetadata:\n  name: my-app\n  namespace: default\nspec:\n  interval: 60m\n  chart:\n    spec:\n      chart: my-app\n      version: 1.0.0 # {\"$imagepolicy\": \"default:my-app:tag\"}\n      sourceRef:\n        kind: HelmRepository\n        name: ghcr-charts\n      interval: 1m\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Authentication Setup for Private Repositories\nDESCRIPTION: Shell commands and YAML configurations for setting up authentication with private OCI repositories.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0003-kubernetes-oci/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret docker-registry regcred \\\n  --docker-server=<your-registry-server> \\\n  --docker-username=<your-name> \\\n  --docker-password=<your-pword>\n\nkubectl create secret generic regcert \\\n  --from-file=certFile=client.crt \\\n  --from-file=keyFile=client.key \\\n  --from-file=caFile=ca.crt\n```\n\n----------------------------------------\n\nTITLE: Defining Artifact Digest Format Pattern\nDESCRIPTION: Specifies the format pattern for Artifact Digest values, showing the algorithm and checksum components with their separator.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0005-artifact-revision-and-digest/README.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n<algo> \":\" <checksum>\n```\n\n----------------------------------------\n\nTITLE: Configuring HelmRepository for GitHub Container Registry in YAML\nDESCRIPTION: YAML configuration for a HelmRepository using OCI type to access GitHub Container Registry.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0002-helm-oci/README.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: HelmRepository\nmetadata:\n  name: ghcr-charts\n  namespace: default\nspec:\n  type: oci\n  url: oci://ghcr.io/my-org/charts/\n  secretRef:\n    name: ghcr-charts\n```\n\n----------------------------------------\n\nTITLE: Retrieving Artifact Revision in Flux v2 Using kubectl\nDESCRIPTION: Shows how to retrieve the Artifact Revision using kubectl and jsonpath for a GitRepository resource.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0005-artifact-revision-and-digest/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get gitrepository -o jsonpath='{.status.artifact.revision}' <name>\n```\n\n----------------------------------------\n\nTITLE: Configuring ImageRepository for Chart Updates in YAML\nDESCRIPTION: YAML configuration for an ImageRepository to automate Helm chart updates based on semver ranges.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0002-helm-oci/README.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: image.toolkit.fluxcd.io/v1beta1\nkind: ImageRepository\nmetadata:\n  name: my-app\n  namespace: default\nspec:\n  image: ghcr.io/my-org/charts/my-app\n  interval: 1m0s\n---\napiVersion: image.toolkit.fluxcd.io/v1beta1\nkind: ImagePolicy\nmetadata:\n  name: my-app\n  namespace: default\nspec:\n  imageRepositoryRef:\n    name: my-app\n  policy:\n    semver:\n      range: 1.0.x\n```\n\n----------------------------------------\n\nTITLE: FluxCD Controller Reconciliation Logs\nDESCRIPTION: Log entries showing FluxCD controller performing periodic reconciliation of GitRepository and Kustomization resources named 'podinfo' in the 'default' namespace. Logs indicate no changes were detected since the last reconciliation.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/cmd/flux/testdata/logs/namespace.txt#2025-04-23_snippet_0\n\nLANGUAGE: log\nCODE:\n```\n2022-08-02T12:55:34.419Z info GitRepository/podinfo.default - no changes since last reconcilation: observed revision \n2022-08-02T12:56:34.961Z info Kustomization/podinfo.default - no changes since last reconcilation: observed revision \n2022-08-02T12:56:34.961Z info GitRepository/podinfo.default - no changes since last reconcilation: observed revision \n```\n\n----------------------------------------\n\nTITLE: Patching Flux Service Account for AWS IAM Role in YAML\nDESCRIPTION: This YAML snippet demonstrates how to patch the Flux service account to add an IAM role ARN annotation for AWS CodeCommit authentication.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0007-git-repo-passwordless-auth/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - gotk-components.yaml\n  - gotk-sync.yaml\npatches:\n  - patch: |\n      apiVersion: v1\n      kind: ServiceAccount\n      metadata:\n        name: source-controller\n        annotations:\n          eks.amazonaws.com/role-arn: <role arn>\n    target:\n      kind: ServiceAccount\n      name: source-controller\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure for Auth Package\nDESCRIPTION: Shows the proposed directory structure for the auth package which includes cloud provider-specific directories and common authentication files.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0010-multi-tenant-workload-identity/README.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n.\n└── auth\n    ├── aws\n    │   └── aws.go\n    ├── azure\n    │   └── azure.go\n    ├── gcp\n    │   └── gcp.go\n    ├── get_token.go\n    ├── options.go\n    ├── provider.go\n    └── token.go\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CodeCommit GitRepository in Flux\nDESCRIPTION: This YAML snippet shows how to configure a GitRepository resource in Flux to use AWS CodeCommit with the 'aws' provider.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0007-git-repo-passwordless-auth/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: source.toolkit.fluxcd.io/v1\nkind: GitRepository\nmetadata:\n  name: aws-repo\nspec:\n  interval: 1m\n  url: codecommit::<region>://<repository>\n  ref:\n    branch: master\n  provider: aws\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Source Repository in Flux\nDESCRIPTION: This YAML snippet shows how to configure a GitRepository resource in Flux to use Google Cloud Source Repository with the 'gcp' provider.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0007-git-repo-passwordless-auth/README.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: source.toolkit.fluxcd.io/v1\nkind: GitRepository\nmetadata:\n  name: gcp-repo\nspec:\n  interval: 1m\n  url: https://source.developers.google.com/p/<project>/r/<repository>\n  ref:\n    branch: master\n  provider: gcp\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps GitRepository in Flux\nDESCRIPTION: This YAML snippet shows how to configure a GitRepository resource in Flux to use Azure DevOps with the 'azure' provider.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0007-git-repo-passwordless-auth/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: source.toolkit.fluxcd.io/v1\nkind: GitRepository\nmetadata:\n  name: azure-devops\nspec:\n  interval: 1m\n  url: https://dev.azure.com/<org>/<project>/_git/<repository>\n  ref:\n    branch: master\n  # notice the lack of secretRef\n  provider: azure\n```\n\n----------------------------------------\n\nTITLE: Patching Flux Service Account for GCP Workload Identity in YAML\nDESCRIPTION: This YAML snippet demonstrates how to patch the Flux service account to add a GCP service account annotation for Google Cloud Source Repositories authentication.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0007-git-repo-passwordless-auth/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - gotk-components.yaml\n  - gotk-sync.yaml\npatches:\n  - patch: |\n      apiVersion: v1\n      kind: ServiceAccount\n      metadata:\n        name: source-controller\n        annotations:\n          iam.gke.io/gcp-service-account: <identity-name>      \n    target:\n      kind: ServiceAccount\n      name: source-controller\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Repository with GitHub App in Flux\nDESCRIPTION: This YAML snippet demonstrates how to configure a GitRepository resource in Flux to use a GitHub repository with the 'github' provider, including the necessary Secret for GitHub App authentication.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0007-git-repo-passwordless-auth/README.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: source.toolkit.fluxcd.io/v1\nkind: GitRepository\nmetadata:\n  name: github-repo\nspec:\n  interval: 1m\n  url: https://github.com/<org>/<repository>\n  ref:\n    branch: master\n  provider: github\n  secretRef:\n    name: github-app\n---\nkind: Secret\nmetadata:\n  name: github-app\nstringData:\n  githubAppID: <app-id>\n  githubInstallationID: <installation-id>\n  githubPrivateKey: |\n    <PEM-private-key>\n  githubApiURl: <github-enterprise-api-url> #optional, required only for GitHub Enterprise users\n```\n\n----------------------------------------\n\nTITLE: Implementing Azure Provider in azure.go\nDESCRIPTION: Provides Azure-specific implementation of the Provider interface, including Token type and token credential for Azure SDK integration.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0010-multi-tenant-workload-identity/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npackage azure\n\nimport (\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy\"\n)\n\nconst ProviderName = \"azure\"\n\ntype Provider struct{}\n\ntype Token struct{ azcore.AccessToken }\n\n// GetDuration implements auth.Token.\nfunc (t *Token) GetDuration() time.Duration {\n\treturn time.Until(t.ExpiresOn)\n}\n\ntype tokenCredential struct {\n\topts []auth.Option\n}\n\n// NewTokenCredential creates an azcore.TokenCredential for the azure provider.\nfunc NewTokenCredential(opts ...auth.Option) azcore.TokenCredential {\n\treturn &tokenCredential{opts}\n}\n\n// GetToken implements azcore.TokenCredential.\n// The options argument is ignored, any options should be\n// specified in the constructor.\nfunc (t *tokenCredential) GetToken(ctx context.Context, _ policy.TokenRequestOptions) (azcore.AccessToken, error) {\n\t// Use auth.GetToken() to get the token.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gitlab OAuth2 Authentication for Flux2 GitRepository\nDESCRIPTION: Example YAML configuration showing how to set up a GitRepository resource that authenticates to Gitlab using OAuth2. The configuration includes the required GitRepository specification and the associated Secret containing Gitlab application credentials.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0007-git-repo-passwordless-auth/README.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: source.toolkit.fluxcd.io/v1\nkind: GitRepository\nmetadata:\n  name: gitlab-repo\nspec:\n  interval: 1m\n  url: https://gitlab.com/<org>/<repository>\n  ref:\n    branch: main\n  provider: gitlab\n  secretRef:\n    name: gitlab-app\n---\nkind: Secret\nmetadata:\n  name: gitlab-app\nstringData:\n  gitlabAppID: <app-id>\n  gitlabAppSecret: <app-secret>\n  gitlabAppRedirectUrl: <app-redirect-url>\n```\n\n----------------------------------------\n\nTITLE: Custom Health Check for ClusterAPI Resources\nDESCRIPTION: An example of custom health check expressions for ClusterAPI Cluster resources. This forces Flux to wait for the Ready condition, which may not be immediately present after resource creation.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0009-custom-health-checks/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  - apiVersion: cluster.x-k8s.io/v1beta1\n    kind: Cluster\n    failed: \"status.conditions.filter(e, e.type == 'Ready').all(e, e.status == 'False')\"\n    current: \"status.conditions.filter(e, e.type == 'Ready').all(e, e.status == 'True')\"\n```\n\n----------------------------------------\n\nTITLE: Example of GitRepository Artifact Digest in Flux v2\nDESCRIPTION: Demonstrates the new Digest field format for a GitRepository Artifact with SHA-256 checksum.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0005-artifact-revision-and-digest/README.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nsha256:1111f92aba67995f108b3ee3ffdc00edcfe206b11fbbb459c8ef4c4a8209fca8\n```\n\n----------------------------------------\n\nTITLE: Kustomize Patch to Enforce HTTPS Across Flux Controllers\nDESCRIPTION: This Kustomize patch enforces HTTPS-only connections by adding the '--insecure-allow-http=false' flag to multiple Flux controllers and adds '--no-remote-bases=true' to kustomize-controller. Implements a cluster-wide security policy for multi-tenant clusters.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0004-insecure-http/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - gotk-components.yaml\n  - gotk-sync.yaml\npatches:\n  - patch: |\n      - op: add\n        path: /spec/template/spec/containers/0/args/-\n        value: --insecure-allow-http=false\n    target:\n      kind: Deployment\n      name: \"(source-controller|notification-controller|image-reflector-controller|image-automation-controller)\"\n  # Since the above flag is not available in kustomize-controller for reasons explained in a previous section,\n  # we disable Kustomize remote builds by disallowing use of remote bases. This ensures that kustomize-controller\n  # won't initiate any plain HTTP connections.\n  - patch: |\n      - op: add\n        path: /spec/template/spec/containers/0/args/-\n        value: --no-remote-bases=true\n    target:\n      kind: Deployment\n      name: kustomize-controller\n```\n\n----------------------------------------\n\nTITLE: Stalled Status Condition for Disallowed HTTP Connection\nDESCRIPTION: This YAML snippet shows the status condition that would be added to a Flux object when HTTP connections are disallowed at the controller level. The object will be marked as 'Stalled' with a specific reason and message.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0004-insecure-http/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  conditions:\n  - lastTransitionTime: \"2022-09-06T09:14:21Z\"\n    message: \"Use of insecure HTTP connections isn't allowed for this controller\"\n    observedGeneration: 1\n    reason: InsecureConnectionsDisallowed\n    status: \"True\"\n    type: Stalled\n```\n\n----------------------------------------\n\nTITLE: Creating OCI Repository with Flux CLI\nDESCRIPTION: This shell command demonstrates using the Flux CLI to create an OCIRepository resource, specifying an OCI URL with a tag and reconciliation interval. The example shows how the CLI interface would expose options for configuring repository sources.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0004-insecure-http/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nflux create source oci podinfo \\\n    --url=oci://ghcr.io/stefanprodan/manifests/podinfo \\\n    --tag=6.1.6 \\\n    --interval=10m\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Tenant Google Cloud Pub/Sub Integration with Flux\nDESCRIPTION: Example configuration showing how to configure tenant-specific Google Cloud Pub/Sub access using dedicated ServiceAccounts for each tenant. This allows tenants to publish notifications only to their designated topics.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0010-multi-tenant-workload-identity/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: notification.toolkit.fluxcd.io/v1beta3\nkind: Provider\nmetadata:\n  name: tenant-a-google-pubsub\n  namespace: tenant-a\nspec:\n  ...\n  type: googlepubsub\n  serviceAccountName: tenant-a-google-pubsub-sa\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: tenant-a-google-pubsub-sa\n  namespace: tenant-a\n---\napiVersion: notification.toolkit.fluxcd.io/v1beta3\nkind: Provider\nmetadata:\n  name: tenant-b-google-pubsub\n  namespace: tenant-b\nspec:\n  ...\n  type: googlepubsub\n  serviceAccountName: tenant-b-google-pubsub-sa\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: tenant-b-google-pubsub-sa\n  namespace: tenant-b\n```\n\n----------------------------------------\n\nTITLE: Implementing CELStatusReader for Custom Resource Status in Go\nDESCRIPTION: This snippet defines a CELStatusReader struct and its methods to support custom status reading for specific GroupVersionKinds. It utilizes a generic status reader and implements the StatusReader interface.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0009-custom-health-checks/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"k8s.io/apimachinery/pkg/runtime/schema\"\n\t\"github.com/fluxcd/cli-utils/pkg/kstatus/polling/engine\"\n\t\"github.com/fluxcd/cli-utils/pkg/kstatus/polling/event\"\n\tkstatusreaders \"github.com/fluxcd/cli-utils/pkg/kstatus/polling/statusreaders\"\n\n\tkustomizev1 \"github.com/fluxcd/kustomize-controller/api/v1\"\n)\n\ntype CELStatusReader struct {\n\tgenericStatusReader engine.StatusReader\n\tgvk                 schema.GroupVersionKind\n}\n\nfunc NewCELStatusReader(mapper meta.RESTMapper, gvk schema.GroupVersionKind,\n\texprs *kustomizev1.HealthCheckExpressions) engine.StatusReader {\n\n\tgenericStatusReader := kstatusreaders.NewGenericStatusReader(mapper, genericConditions(gvk.Kind, exprs))\n\treturn &CELStatusReader{\n\t\tgenericStatusReader: genericStatusReader,\n\t\tgvk:                 gvk,\n\t}\n}\n\nfunc (g *CELStatusReader) Supports(gk schema.GroupKind) bool {\n\treturn gk == g.gvk.GroupKind()\n}\n\nfunc (g *CELStatusReader) ReadStatus(ctx context.Context, reader engine.ClusterReader, resource object.ObjMetadata) (*event.ResourceStatus, error) {\n\treturn g.genericStatusReader.ReadStatus(ctx, reader, resource)\n}\n\nfunc (g *CELStatusReader) ReadStatusForObject(ctx context.Context, reader engine.ClusterReader, resource *unstructured.Unstructured) (*event.ResourceStatus, error) {\n\treturn g.genericStatusReader.ReadStatusForObject(ctx, reader, resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Health Check Types in Kustomization API\nDESCRIPTION: The proposed Go struct definitions for adding the healthCheckExprs field to the Kustomization CRD. It includes types for CustomHealthCheck and HealthCheckExpressions with fields for different status conditions.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0009-custom-health-checks/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype KustomizationSpec struct {\n\t// +optional\n\tHealthCheckExprs []CustomHealthCheck `json:\"healthCheckExprs,omitempty\"`\n}\n\ntype CustomHealthCheck struct {\n\t// APIVersion of the custom resource under evaluation.\n\t// +required\n\tAPIVersion string `json:\"apiVersion\"`\n\t// Kind of the custom resource under evaluation.\n\t// +required\n\tKind string `json:\"kind\"`\n\n\tHealthCheckExpressions `json:\",inline\"`\n}\n\ntype HealthCheckExpressions struct {\n\t// Current is the CEL expression that determines if the status\n\t// of the custom resource has reached the desired state.\n\t// +required\n\tCurrent string `json:\"current\"`\n\t// InProgress is the CEL expression that determines if the status\n\t// of the custom resource has not yet reached the desired state.\n\t// +optional\n\tInProgress string `json:\"inProgress,omitempty\"`\n\t// Failed is the CEL expression that determines if the status\n\t// of the custom resource has failed to reach the desired state.\n\t// +optional\n\tFailed string `json:\"failed,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Example Certificate Resource for cert-manager\nDESCRIPTION: A sample YAML definition of a cert-manager Certificate resource that will transition through Issuing and Ready conditions. This example demonstrates a custom resource that would benefit from custom health checks.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0009-custom-health-checks/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: app-certificate\nspec:\n  commonName: cert-manager-tls\n  dnsNames:\n  - app.ns.svc.cluster.local\n  ipAddresses:\n  - x.x.x.x\n  isCA: true\n  issuerRef:\n    group: cert-manager.io\n    kind: ClusterIssuer\n    name: app-issuer\n  secretName: app-tls-certs\n  subject:\n    organizations:\n    - example.com\n```\n\n----------------------------------------\n\nTITLE: Defining Flux OCIRepository Resource\nDESCRIPTION: Creates a Flux OCIRepository resource that fetches and verifies OCI artifacts from GHCR using semver versioning and Cosign verification.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0003-kubernetes-oci/README.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: OCIRepository\nmetadata:\n  name: app-config\n  namespace: default\nspec:\n  interval: 10m\n  url: oci://ghcr.io/org/my-app-config\n  ref:\n    semver: \"1.x\"\n  secretRef:\n    name: my-app-regcred\n  verify:\n    provider: cosign\n    secretRef:\n      name: my-app-cosgin-key\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Provider in aws.go\nDESCRIPTION: Provides AWS-specific implementation of the Provider interface, including Token type and credentials provider for AWS SDK integration.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0010-multi-tenant-workload-identity/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage aws\n\nimport (\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/credentials\"\n\t\"github.com/aws/aws-sdk-go-v2/service/sts/types\"\n)\n\nconst ProviderName = \"aws\"\n\ntype Provider struct{}\n\ntype Token struct{ types.Credentials }\n\n// GetDuration implements auth.Token.\nfunc (t *Token) GetDuration() time.Duration {\n\treturn time.Until(*t.Expiration)\n}\n\ntype credentialsProvider struct {\n\topts []auth.Option\n}\n\n// NewCredentialsProvider creates an aws.CredentialsProvider for the aws provider.\nfunc NewCredentialsProvider(opts ...auth.Option) aws.CredentialsProvider {\n\treturn &credentialsProvider{opts}\n}\n\n// Retrieve implements aws.CredentialsProvider.\nfunc (c *credentialsProvider) Retrieve(ctx context.Context) (aws.Credentials, error) {\n\t// Use auth.GetToken() to get the token.\n}\n```\n\n----------------------------------------\n\nTITLE: Updating test golden files for Flux CLI\nDESCRIPTION: Commands for updating golden files used in tests when the output of the Flux CLI changes. This allows automated test updates without manual intervention.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake e2e TEST_ARGS=\"-update\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Unit test\nmake test TEST_PKG_PATH=\"./cmd/flux\" TEST_ARGS=\"-update\"\n# e2e test\nmake e2e E2E_TEST_PKG_PATH=\"./cmd/flux\" TEST_ARGS=\"-update\"\n```\n\n----------------------------------------\n\nTITLE: Creating Provider Interface in Provider.go\nDESCRIPTION: Defines the Provider interface that cloud provider implementations must implement, including methods for token creation, audience retrieval, and identity management.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0010-multi-tenant-workload-identity/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage auth\n\n// Provider contains the logic to retrieve an access token for a cloud\n// provider from a ServiceAccount (OIDC/JWT) token.\ntype Provider interface {\n\t// GetName returns the name of the provider.\n\tGetName() string\n\n\t// NewDefaultToken returns a token that can be used to authenticate with the\n\t// cloud provider retrieved from the default source, i.e. from the pod's\n\t// environment, e.g. files mounted in the pod, environment variables,\n\t// local metadata services, etc. In this case the method would implicitly\n\t// use the ServiceAccount associated with the controller pod, and not one\n\t// specified in the options.\n\tNewDefaultToken(ctx context.Context, opts ...Option) (Token, error)\n\n\t// GetAudience returns the audience the OIDC tokens issued representing\n\t// ServiceAccounts should have. This is usually a string that represents\n\t// the cloud provider's STS service, or some entity in the provider for\n\t// which the OIDC tokens are targeted to.\n\tGetAudience(ctx context.Context, sa corev1.ServiceAccount) (string, error)\n\n\t// GetIdentity takes a ServiceAccount and returns the identity which the\n\t// ServiceAccount wants to impersonate, by looking at annotations.\n\tGetIdentity(sa corev1.ServiceAccount) (string, error)\n\n\t// NewToken takes a ServiceAccount and its OIDC token and returns a token\n\t// that can be used to authenticate with the cloud provider. The OIDC token is\n\t// the JWT token that was issued for the ServiceAccount by the Kubernetes API.\n\t// The implementation should exchange this token for a cloud provider access\n\t// token through the provider's STS service.\n\tNewTokenForServiceAccount(ctx context.Context, oidcToken string,\n\t\tsa corev1.ServiceAccount, opts ...Option) (Token, error)\n\n\t// GetImageCacheKey extracts the part of the image repository that must be\n\t// included in cache keys when caching registry credentials for the provider.\n\tGetImageCacheKey(imageRepository string) string\n\n\t// NewRegistryToken takes an image repository and a Token and returns a token\n\t// that can be used to authenticate with the container registry of the image.\n\tNewRegistryToken(ctx context.Context, imageRepository string,\n\t\ttoken Token, opts ...Option) (Token, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Health Check for SealedSecret Resources\nDESCRIPTION: An example of custom health check expressions for Bitnami SealedSecret resources, which use a Synced condition instead of the standard Ready condition. This demonstrates the flexibility of CEL expressions for different status patterns.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0009-custom-health-checks/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  - apiVersion: bitnami.com/v1alpha1\n    kind: SealedSecret\n    failed: \"status.conditions.filter(e, e.type == 'Synced').all(e, e.status == 'False')\"\n    current: \"status.conditions.filter(e, e.type == 'Synced').all(e, e.status == 'True')\"\n```\n\n----------------------------------------\n\nTITLE: Defining Token Abstractions in Token.go\nDESCRIPTION: Contains token interfaces and implementations, including the common Token interface and RegistryCredentials for container registry authentication compatible with all cloud providers.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0010-multi-tenant-workload-identity/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage auth\n\n// Token is an interface that represents an access token that can be used to\n// authenticate with a cloud provider. The only common method is for getting the\n// duration of the token, because different providers have different ways of\n// representing the token. For example, Azure and GCP use a single string,\n// while AWS uses three strings: access key ID, secret access key and token.\n// Consumers of this interface should know what type to cast it to.\ntype Token interface {\n\t// GetDuration returns the duration for which the token is valid relative to\n\t// approximately time.Now(). This is used to determine when the token should\n\t// be refreshed.\n\tGetDuration() time.Duration\n}\n\n// RegistryCredentials is a particular type implementing the Token interface\n// for credentials that can be used to authenticate with a container registry\n// from a cloud provider. This type is compatible with all the cloud providers\n// and should be returned when the image repository is configured in the options.\ntype RegistryCredentials struct {\n\tUsername  string\n\tPassword  string\n\tExpiresAt time.Time\n}\n\nfunc (r *RegistryCredentials) GetDuration() time.Duration {\n\treturn time.Until(r.ExpiresAt)\n}\n```\n\n----------------------------------------\n\nTITLE: Flux Kustomization with OCI Repository Source\nDESCRIPTION: YAML configuration showing how to use an OCI repository as a source for Flux Kustomization.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0003-kubernetes-oci/README.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kustomize.toolkit.fluxcd.io/v1beta2\nkind: Kustomization\nmetadata:\n  name: app\n  namespace: flux-system\nspec:\n  interval: 10m\n  sourceRef:\n    kind: OCIRepository\n    name: app-config\n  path: ./\n```\n\n----------------------------------------\n\nTITLE: Implementing GCP Token Source in Go\nDESCRIPTION: Defines a tokenSource struct and NewTokenSource function for creating an oauth2.TokenSource for the GCP provider. The Token method is left to be implemented.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0010-multi-tenant-workload-identity/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype tokenSource struct {\n\tctx context.Context\n\topts []auth.Option\n}\n\n// NewTokenSource creates an oauth2.TokenSource for the gcp provider.\nfunc NewTokenSource(ctx context.Context, opts ...auth.Option) oauth2.TokenSource {\n\treturn &tokenSource{ctx, opts}\n}\n\n// Token implements oauth2.TokenSource.\nfunc (t *tokenSource) Token() (*oauth2.Token, error) {\n\t// Use auth.GetToken() to get the token.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GCP Provider in gcp.go\nDESCRIPTION: Provides GCP-specific implementation of the Provider interface, including Token type that wraps oauth2.Token for Google Cloud Platform.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0010-multi-tenant-workload-identity/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\npackage gcp\n\nimport (\n\t\"golang.org/x/oauth2\"\n)\n\nconst ProviderName = \"gcp\"\n\ntype Provider struct {}\n\ntype Token struct{ oauth2.Token }\n\n// GetDuration implements auth.Token.\nfunc (t *Token) GetDuration() time.Duration {\n\treturn time.Until(t.Expiry)\n```\n\n----------------------------------------\n\nTITLE: HelmRelease with Image Update Annotation (YAML)\nDESCRIPTION: Example YAML for a HelmRelease with an annotation that contains image information to be updated by image-automation-controller and propagated in events.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0008-custom-event-metadata-from-annotations/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: helm.toolkit.fluxcd.io/v2\nkind: HelmRelease\nmetadata:\n  name: podinfo\n  namespace: flux-system\n  annotations:\n    event.toolkit.fluxcd.io/image: ghcr.io/stefanprodan/podinfo:latest # {\"$imagepolicy\": \"flux-system:podinfo\"}\nspec:\n  chart:\n    spec:\n      chart: podinfo\n      sourceRef:\n        kind: HelmRepository\n        name: podinfo\n  values:\n    image:\n      tag: latest  # {\"$imagepolicy\": \"flux-system:podinfo:tag\"}\n```\n\n----------------------------------------\n\nTITLE: Defining GKE Metadata Structure in Go\nDESCRIPTION: Declares a package-level variable for storing GKE cluster metadata, including project ID, location, name, and synchronization primitives.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0010-multi-tenant-workload-identity/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nvar gkeMetadata struct {\n\tprojectID      string\n\tlocation       string\n\tname           string\n\tmu             sync.Mutex\n\tloaded         bool\n}\n```\n\n----------------------------------------\n\nTITLE: Kustomization with Custom Health Checks for Certificate Resources\nDESCRIPTION: An example Flux Kustomization resource that implements custom health checks for cert-manager Certificate resources using CEL expressions. The expressions evaluate both Issuing and Ready conditions to determine the health status.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0009-custom-health-checks/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kustomize.toolkit.fluxcd.io/v1\nkind: Kustomization\nmetadata:\n  name: certs\nspec:\n  interval: 5m\n  prune: true\n  sourceRef:\n    kind: GitRepository\n    name: flux-system\n  path: ./certs\n  wait: true\n  healthCheckExprs:\n  - apiVersion: cert-manager.io/v1\n    kind: Certificate\n    inProgress: \"status.conditions.filter(e, e.type == 'Issuing').all(e, e.observedGeneration == metadata.generation && e.status == 'True')\"\n    failed: \"status.conditions.filter(e, e.type == 'Ready').all(e, e.observedGeneration == metadata.generation && e.status == 'False')\"\n    current: \"status.conditions.filter(e, e.type == 'Ready').all(e, e.observedGeneration == metadata.generation && e.status == 'True')\"\n```\n\n----------------------------------------\n\nTITLE: Defining New Digest Field Format in Flux v2\nDESCRIPTION: Specifies the format for the new Digest field in the Artifact type, including algorithm alias and checksum.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0005-artifact-revision-and-digest/README.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n<algo> \":\" <checksum>\n```\n\n----------------------------------------\n\nTITLE: Configuring an ImageRepository to Use Insecure HTTP Connections\nDESCRIPTION: This YAML snippet shows how to configure an ImageRepository resource to explicitly enable HTTP connections by setting '.spec.insecure' to true, allowing connections to a local insecure registry for debugging purposes.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0004-insecure-http/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: image.toolkit.fluxcd.io/v1beta1\nkind: ImageRepository\nmetadata:\n  name: podinfo\n  namespace: flux-system\nspec:\n  image: kind-registry:5000/stefanprodan/podinfo\n  interval: 1m0s\n  insecure: true\n```\n\n----------------------------------------\n\nTITLE: Example of Bucket Artifact Revision in Flux v2\nDESCRIPTION: Shows the new Revision format for a Bucket Artifact with a revision based on SHA-256 calculation of object keys and etags.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0005-artifact-revision-and-digest/README.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nsha256:8fb62a09c9e48ace5463bf940dc15e85f525be4f230e223bbceef6e13024110c\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Retrieval in Get_token.go\nDESCRIPTION: Defines the main GetToken function that handles both single-tenant and multi-tenant workload identity scenarios to retrieve access tokens for cloud providers.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0010-multi-tenant-workload-identity/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage auth\n\n// GetToken returns an access token for accessing resources in the given cloud provider.\nfunc GetToken(ctx context.Context, provider Provider, opts ...Option) (Token, error) {\n\t//  1. Check if a ServiceAccount is configured and return the controller access token if not (single-tenant WI).\n\t//  2. Get the provider audience for creating the OIDC token for the ServiceAccount in the Kubernetes API.\n\t//  3. Get the ServiceAccount using the configured controller-runtime client.\n\t//  4. Get the provider identity from the ServiceAccount annotations and add it to the options.\n\t//  5. Build the cache key using the configured options.\n\t//  6. Get the token from the cache. If present, return it, otherwise continue.\n\t//  7. Create an OIDC token for the ServiceAccount in the Kubernetes API using the provider audience.\n\t//  8. Exchange the OIDC token for an access token through the Security Token Service of the provider.\n\t//  9. If an image repository is configured, exchange the access token for a registry token.\n\t// 10. Add the final token to the cache and return it.\n}\n```\n\n----------------------------------------\n\nTITLE: Example of GitRepository Artifact Revision in Flux v2\nDESCRIPTION: Demonstrates the new Revision format for a GitRepository Artifact pointing to a specific Git commit on the main branch.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0005-artifact-revision-and-digest/README.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmain@sha1:1eabc9a41ca088515cab83f1cce49eb43e84b67f\n```\n\n----------------------------------------\n\nTITLE: GitHub Release Template in Markdown\nDESCRIPTION: Template for creating GitHub release notes in Markdown format. Includes sections for highlights, fixes, documentation, and component changelog with placeholder text that should be filled in for each release.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/docs/release/release-notes-template.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Highlights\n\n<!-- Text describing the most important changes in this release -->\n\n### Fixes and improvements\n\n<!-- List of fixes and improvements to the controllers and CLI -->\n\n## New documentation\n\n<!-- List of new documentation pages, if applicable -->\n\n## Components changelog\n\n- <name>-controller [v<version>](https://github.com/fluxcd/<name>-controller/blob/<version>/CHANGELOG.md\n\n## CLI changelog\n\n<!-- auto-generated list of pull requests to the CLI starts here -->\n```\n\n----------------------------------------\n\nTITLE: Defining Artifact Revision Format Pattern\nDESCRIPTION: Specifies the format pattern for Artifact Revision values, showing optional named pointer and digest components with their separators.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0005-artifact-revision-and-digest/README.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n[ <named pointer> ] [ [ \"@\" ] <algo> \":\" <checksum> ]\n```\n\n----------------------------------------\n\nTITLE: Event Payload with Updated Image Metadata (JSON)\nDESCRIPTION: Example JSON showing how the updated image information from annotations is propagated in the event payload after the image-automation-controller has updated the image.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0008-custom-event-metadata-from-annotations/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"involvedObject\": {\n    \"apiVersion\": \"helm.toolkit.fluxcd.io/v2\",\n    \"kind\": \"HelmRelease\",\n    \"name\": \"podinfo\",\n    \"namespace\": \"flux-system\",\n    \"uid\": \"7d0cdc51-ddcf-4743-b223-83ca5c699632\"\n  },\n  \"metadata\": {\n    \"image\": \"ghcr.io/stefanprodan/podinfo:6.5.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Sources with Revisions Using Flux CLI\nDESCRIPTION: Shows the output of 'flux get source' command, displaying truncated revisions for different source types.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0005-artifact-revision-and-digest/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ flux get source gitrepository\nNAME            REVISION              SUSPENDED       READY   MESSAGE                                                                      \nflux-monitoring main@sha1:1eabc9a4    False           True    stored artifact for revision 'main@sha1:1eabc9a41ca088515cab83f1cce49eb43e84b67f'\n\n$ flux get source oci\nNAME            REVISION               SUSPENDED       READY   MESSAGE                                                                                              \napps-source     local@sha256:e5fa481b  False           True    stored artifact for digest 'local@sha256:e5fa481bb17327bd269927d0a223862d243d76c89fe697ea8c9adefc47c47e17'\n\n$ flux get source bucket\nNAME            REVISION         SUSPENDED       READY   MESSAGE                                                                                              \napps-source     sha256:e3b0c442  False           True    stored artifact for revision 'sha256:8fb62a09c9e48ace5463bf940dc15e85f525be4f230e223bbceef6e13024110c'\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Event Metadata in HelmRelease with Annotations (YAML)\nDESCRIPTION: Example YAML for a HelmRelease object with a custom annotation using the 'event.toolkit.fluxcd.io/' prefix to define a deploymentID that will be propagated in events.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0008-custom-event-metadata-from-annotations/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: helm.toolkit.fluxcd.io/v2\nkind: HelmRelease\nmetadata:\n  name: podinfo\n  namespace: flux-system\n  annotations:\n    event.toolkit.fluxcd.io/deploymentID: e076e315-5a48-41c3-81c8-8d8bdee7d74d\nspec:\n  chart:\n    spec:\n      chart: podinfo\n      version: 6.5.*\n      sourceRef:\n        kind: HelmRepository\n        name: podinfo\n```\n\n----------------------------------------\n\nTITLE: Event Payload with Custom Metadata (JSON)\nDESCRIPTION: Example JSON showing how the custom metadata from annotations is propagated in the event payload. The annotation with 'event.toolkit.fluxcd.io/' prefix becomes a field in the metadata object.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0008-custom-event-metadata-from-annotations/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"involvedObject\": {\n    \"apiVersion\": \"helm.toolkit.fluxcd.io/v2\",\n    \"kind\": \"HelmRelease\",\n    \"name\": \"podinfo\",\n    \"namespace\": \"flux-system\",\n    \"uid\": \"7d0cdc51-ddcf-4743-b223-83ca5c699632\"\n  },\n  \"metadata\": {\n    \"deploymentID\": \"e076e315-5a48-41c3-81c8-8d8bdee7d74d\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing OCI Artifacts with Cosign\nDESCRIPTION: Signs the OCI artifact containing Kubernetes manifests using Cosign for security verification.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0003-kubernetes-oci/README.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncosign sign --key cosign.key ghcr.io/org/my-app-config:v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Enabling User-Defined Metadata in Flux Using Annotations\nDESCRIPTION: Examples showing how to enable user-defined metadata in Flux objects by adding annotations with the 'event.toolkit.fluxcd.io/' prefix. This allows attaching custom metadata that will be included in notifications.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0008-custom-event-metadata-from-annotations/README.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* `event.toolkit.fluxcd.io/image: ghcr.io/stefanprodan/podinfo`\n* `event.toolkit.fluxcd.io/deploymentID: e076e315-5a48-41c3-81c8-8d8bdee7d74d`\n```\n\n----------------------------------------\n\nTITLE: Flux Kustomization Reconciliation Error Log\nDESCRIPTION: A timestamped error log from Flux CD indicating that a Kustomization resource named 'podinfo' in the 'flux-system' namespace had no changes detected since the last reconciliation cycle, maintaining the same observed revision.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/cmd/flux/testdata/logs/multiple-filters.txt#2025-04-23_snippet_0\n\nLANGUAGE: log\nCODE:\n```\n2022-08-02T12:56:34.961Z error Kustomization/podinfo.flux-system - no changes since last reconcilation: observed revision\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for GHCR Authentication\nDESCRIPTION: Creates a Kubernetes docker-registry secret with GitHub credentials for accessing private OCI artifacts in GHCR.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0003-kubernetes-oci/README.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nkubectl create secret docker-registry my-app-regcred \\\n    --docker-server=ghcr.io \\\n    --docker-username=$GITHUB_USER \\\n    --docker-password=$GITHUB_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Defining HelmRepository with OCI Support in YAML\nDESCRIPTION: Example YAML configuration for a HelmRepository using OCI type and basic authentication with a secret reference.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0002-helm-oci/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: HelmRepository\nmetadata:\n  name: <repo-name>\nspec:\n  type: oci\n  secretRef:\n    name: regcred\n```\n\n----------------------------------------\n\nTITLE: Authenticating with GitHub Container Registry using Docker\nDESCRIPTION: Logs into the GitHub Container Registry (GHCR) using Docker credentials to enable pushing and pulling container images and artifacts.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0003-kubernetes-oci/README.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker login ghcr.io -u ${GITHUB_USER} -p ${GITHUB_TOKEN}\n```\n\n----------------------------------------\n\nTITLE: Enabling Signature Verification for HelmChart in YAML\nDESCRIPTION: YAML configuration for a HelmChart resource with Cosign signature verification enabled.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0002-helm-oci/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: HelmChart\nmetadata:\n  name: <chart-name>\nspec:\n  verify:\n    provider: cosign\n    secretRef:\n      name: cosign-public-keys\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing App Container Image to GHCR\nDESCRIPTION: Builds a container image for an application and pushes it to GitHub Container Registry with a specific tag.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0003-kubernetes-oci/README.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t ghcr.io/org/my-app:v1.0.0 .\ndocker push ghcr.io/org/my-app:v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Running Flux help command\nDESCRIPTION: Executes the built Flux binary with help flag to verify installation and view available commands.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/install/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./bin/flux -h\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Cosign Verification\nDESCRIPTION: Creates a Kubernetes secret containing the Cosign public key for verifying signed OCI artifacts.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0003-kubernetes-oci/README.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nkubectl create secret generic my-app-cosgin-key \\\n    --from-file=cosign.pub=cosign/my-key.pub\n```\n\n----------------------------------------\n\nTITLE: Viewing Flux2 Controller Reconciliation Logs\nDESCRIPTION: Log output from Flux2 showing the status of GitRepository and Kustomization resources in the cluster. The logs indicate that no changes were detected since the last reconciliation for resources in both the default and flux-system namespaces.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/cmd/flux/testdata/logs/all-logs.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2022-08-02T12:55:34.419Z info GitRepository/podinfo.default - no changes since last reconcilation: observed revision \n2022-08-02T12:56:04.679Z error GitRepository/flux-system.flux-system - no changes since last reconcilation: observed revision \n2022-08-02T12:56:34.961Z error Kustomization/flux-system.flux-system - no changes since last reconcilation: observed revision \n2022-08-02T12:56:34.961Z info Kustomization/podinfo.default - no changes since last reconcilation: observed revision \n2022-08-02T12:56:34.961Z info GitRepository/podinfo.default - no changes since last reconcilation: observed revision \n2022-08-02T12:56:34.961Z error Kustomization/podinfo.flux-system - no changes since last reconcilation: observed revision \n```\n\n----------------------------------------\n\nTITLE: OCI Artifact Manifest Format for Flux\nDESCRIPTION: JSON schema for the OCI artifact manifest format used by Flux, defining the structure with config, layers, and annotations.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0003-kubernetes-oci/README.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n  \"config\": {\n    \"mediaType\": \"application/vnd.cncf.flux.config.v1+json\",\n    \"size\": 233,\n    \"digest\": \"sha256:1b80ecb1c04d4a9718a6094a00ed17b76ea8ff2bb846695fa38e7492d34f505c\"\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"application/vnd.cncf.flux.content.v1.tar+gzip\",\n      \"size\": 19081,\n      \"digest\": \"sha256:46c2b334705cd08db1a6fa46f860cd3364fc1a3636eea37a9b35537549086a1c\"\n    }\n  ],\n  \"annotations\": {\n    \"org.opencontainers.image.created\": \"2023-02-10T09:06:09Z\",\n    \"org.opencontainers.image.revision\": \"sha1:6ea3e5b4da159fcb4a1288f072d34c3315644bcc\",\n    \"org.opencontainers.image.source\": \"https://github.com/fluxcd/flux2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GenericConditions Function for CEL-based Status Evaluation in Go\nDESCRIPTION: This snippet defines a genericConditions function that takes CEL expressions and returns a function to evaluate the status of an Unstructured object. It uses the Flux CEL library to evaluate boolean expressions for different status conditions.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0009-custom-health-checks/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/fluxcd/cli-utils/pkg/kstatus/status\"\n\t\"github.com/fluxcd/pkg/runtime/cel\"\n\t\"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"\n)\n\nfunc genericConditions(exprs *kustomizev1.HealthCheckExpressions) func(u *unstructured.Unstructured) (*status.Result, error) {\n\treturn func(u *unstructured.Unstructured) (*status.Result, error) {\n\t\tobj := u.UnstructuredContent()\n\n\t\t// if status.observedGeneration exists and differs from metadata.generation return status.InProgress\n\n\t\tfor _, e := range []struct{\n\t\t\texpr   string\n\t\t\tstatus status.Status\n\t\t}{\n\t\t\t{expr: exprs.InProgress, status: status.InProgress},\n\t\t\t{expr: exprs.Failed, status: status.Failed},\n\t\t\t{expr: exprs.Current, status: status.Current},\n\t\t} {\n\t\t\tif e.expr != \"\" {\n\t\t\t\tresult, err := cel.EvaluateBooleanExpr(e.expr, obj)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tif result {\n\t\t\t\t\treturn &status.Result{Status: e.status}, nil\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn &status.Result{Status: status.InProgress}, nil\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: OCI Artifact Manifest Structure\nDESCRIPTION: JSON schema showing the structure of OCI artifacts with Flux-specific annotations and metadata.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0003-kubernetes-oci/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n  \"annotations\": {\n    \"org.opencontainers.image.created\": \"2023-02-10T09:06:09Z\",\n    \"org.opencontainers.image.revision\": \"sha1:6ea3e5b4da159fcb4a1288f072d34c3315644bcc\",\n    \"org.opencontainers.image.source\": \"https://github.com/fluxcd/flux2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Secret in Shell\nDESCRIPTION: Shell command to create a Kubernetes secret for Docker registry authentication, used for accessing private OCI repositories.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0002-helm-oci/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret docker-registry regcred \\\n  --docker-server=<your-registry-server> \\\n  --docker-username=<your-name> \\\n  --docker-password=<your-pword>\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM and CI Setup for Flux2 E2E Tests using Terraform (HCL)\nDESCRIPTION: This Terraform configuration sets up the necessary IAM role, service account, and GitHub secrets for running Flux2 e2e tests on GCP. It uses the gcp-gh-actions module and creates custom GitHub secrets for various test parameters.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/tests/integration/README.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"google\" {}\n\nprovider \"github\" {\n  owner = \"fluxcd\"\n}\n\nresource \"tls_private_key\" \"privatekey\" {\n  algorithm = \"RSA\"\n  rsa_bits  = 4096\n}\n\nmodule \"gcp_gh_actions\" {\n  source = \"git::https://github.com/fluxcd/test-infra.git//tf-modules/gcp/github-actions\"\n\n  gcp_service_account_id          = \"flux2-e2e-test\"\n  gcp_service_account_name        = \"flux2-e2e-test\"\n  gcp_service_account_description = \"For running fluxcd/flux2 e2e tests.\"\n  gcp_roles = [\n    \"roles/compute.instanceAdmin.v1\",\n    \"roles/container.admin\",\n    \"roles/iam.serviceAccountUser\",\n    \"roles/iam.serviceAccountTokenCreator\",\n    \"roles/artifactregistry.admin\",\n    \"roles/artifactregistry.repoAdmin\",\n    \"roles/cloudkms.admin\",\n    \"roles/cloudkms.cryptoKeyEncrypter\",\n    \"roles/source.admin\",\n    \"roles/pubsub.admin\"\n  ]\n\n  github_project = \"flux2\"\n\n  github_secret_credentials_name = \"FLUX2_E2E_GOOGLE_CREDENTIALS\"\n\n  github_secret_custom = {\n    \"TF_VAR_gcp_keyring\"           = \"<keyring-name>\",\n    \"TF_VAR_gcp_crypto_key\"        = \"<key-name>\",\n    \"TF_VAR_gcp_email\"             = \"<email>\",\n    \"GCP_GITREPO_SSH_CONTENTS\"     = base64encode(tls_private_key.privatekey.private_key_openssh),\n    \"GCP_GITREPO_SSH_PUB_CONTENTS\" = base64encode(tls_private_key.privatekey.public_key_openssh)\n  }\n}\n\noutput \"publickey\" {\n  value = tls_private_key.privatekey.public_key_openssh\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OCI Repository Source in Kubernetes\nDESCRIPTION: YAML configuration for defining an OCI repository source in Kubernetes with versioning options.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0003-kubernetes-oci/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: OCIRepository\nmetadata:\n  name: app-config\n  namespace: flux-system\nspec:\n  interval: 10m\n  url: oci://docker.io/org/app-config\n  ref:\n    tag: v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Running Flux2 E2E Tests Locally (Console)\nDESCRIPTION: This console command demonstrates how to run Flux2 e2e tests locally for the Azure provider. It includes steps for building the Flux CLI binary, setting up environment variables, and executing the test suite with specific flags for debugging and infrastructure retention.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/tests/integration/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ make test-azure\nmake test PROVIDER_ARG=\"-provider azure\"\n# These two versions of podinfo are pushed to the cloud registry and used in tests for ImageUpdateAutomation\nmkdir -p build\ncp ../../bin/flux build/flux\ndocker pull ghcr.io/stefanprodan/podinfo:6.0.0\n6.0.0: Pulling from stefanprodan/podinfo\nDigest: sha256:e7eeab287181791d36c82c904206a845e30557c3a4a66a8143fa1a15655dae97\nStatus: Image is up to date for ghcr.io/stefanprodan/podinfo:6.0.0\nghcr.io/stefanprodan/podinfo:6.0.0\ndocker pull ghcr.io/stefanprodan/podinfo:6.0.1\n6.0.1: Pulling from stefanprodan/podinfo\nDigest: sha256:1169f220a670cf640e45e1a7ac42dc381a441e9d4b7396432cadb75beb5b5d68\nStatus: Image is up to date for ghcr.io/stefanprodan/podinfo:6.0.1\nghcr.io/stefanprodan/podinfo:6.0.1\ngo test -timeout 60m -v ./ -existing -provider azure --tags=integration\n2023/03/24 02:32:25 Setting up azure e2e test infrastructure\n2023/03/24 02:32:25 Terraform binary:  /usr/local/bin/terraform\n2023/03/24 02:32:25 Init Terraform\n....[some output has been cut out]\n2023/03/24 02:39:33 helm repository condition not ready\n--- PASS: TestACRHelmRelease (15.31s)\n=== RUN   TestKeyVaultSops\n--- PASS: TestKeyVaultSops (15.98s)\nPASS\n2023/03/24 02:40:12 Destroying environment...\nok      github.com/fluxcd/flux2/tests/integration       947.341s\n```\n\n----------------------------------------\n\nTITLE: Configuring HelmRepository with Cloud Provider in YAML\nDESCRIPTION: YAML configuration for a HelmRepository using OCI type with cloud provider-specific authentication.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0002-helm-oci/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: HelmRepository\nmetadata:\n  name: <repo-name>\nspec:\n  type: oci\n  provider: azure\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure GitHub Actions for Flux2 E2E Tests\nDESCRIPTION: This Terraform configuration sets up the necessary IAM roles, permissions, and GitHub secrets for running Flux2 E2E tests on Azure. It creates a service principal with required permissions and sets up GitHub secrets for authentication.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/tests/integration/README.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"github\" {\n  owner = \"fluxcd\"\n}\n\nresource \"tls_private_key\" \"privatekey\" {\n  algorithm = \"RSA\"\n  rsa_bits  = 4096\n}\n\nmodule \"azure_gh_actions\" {\n  source = \"git::https://github.com/fluxcd/test-infra.git//tf-modules/azure/github-actions\"\n\n  azure_owners          = [\"owner-id-1\", \"owner-id-2\"]\n  azure_app_name        = \"flux2-e2e\"\n  azure_app_description = \"flux2 e2e\"\n  azure_app_secret_name = \"flux2-e2e\"\n  azure_permissions = [\n    \"Microsoft.Kubernetes/*\",\n    \"Microsoft.Resources/*\",\n    \"Microsoft.Authorization/roleAssignments/Read\",\n    \"Microsoft.Authorization/roleAssignments/Write\",\n    \"Microsoft.Authorization/roleAssignments/Delete\",\n    \"Microsoft.ContainerRegistry/*\",\n    \"Microsoft.ContainerService/*\",\n    \"Microsoft.KeyVault/*\",\n    \"Microsoft.EventHub/*\"\n  ]\n  azure_location = \"eastus\"\n\n  github_project = \"flux2\"\n\n  github_secret_client_id_name       = \"AZ_ARM_CLIENT_ID\"\n  github_secret_client_secret_name   = \"AZ_ARM_CLIENT_SECRET\"\n  github_secret_subscription_id_name = \"AZ_ARM_SUBSCRIPTION_ID\"\n  github_secret_tenant_id_name       = \"AZ_ARM_TENANT_ID\"\n\n  github_secret_custom = {\n    \"TF_VAR_azuredevops_org\"         = \"<azuredevops-org-name>\",\n    \"TF_VAR_azuredevops_pat\"         = \"<azuredevops-pat>\",\n    \"AZURE_GITREPO_SSH_CONTENTS\"     = base64encode(tls_private_key.privatekey.private_key_openssh),\n    \"AZURE_GITREPO_SSH_PUB_CONTENTS\" = base64encode(tls_private_key.privatekey.public_key_openssh)\n  }\n}\n\noutput \"publickey\" {\n  value = tls_private_key.privatekey.public_key_openssh\n}\n```\n\n----------------------------------------\n\nTITLE: Flux OCIRepository Resource Status Example\nDESCRIPTION: Example of an OCIRepository resource with status showing the artifact's metadata, checksum, and conditions after successful reconciliation.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0003-kubernetes-oci/README.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: OCIRepository\nmetadata:\n  creationTimestamp: \"2022-06-22T09:14:19Z\"\n  finalizers:\n  - finalizers.fluxcd.io\n  generation: 1\n  name: podinfo\n  namespace: oci\n  resourceVersion: \"6603\"\n  uid: 42e0b9f0-021c-476d-86c7-2cd20747bfff\nspec:\n  interval: 10m\n  ref:\n    tag: 6.1.6\n  timeout: 60s\n  url: oci://ghcr.io/stefanprodan/manifests/podinfo\nstatus:\n  artifact:\n    checksum: d7e924b4882e55b97627355c7b3d2e711e9b54303afa2f50c25377f4df66a83b\n    lastUpdateTime: \"2022-06-22T09:14:21Z\"\n    metadata:\n      org.opencontainers.image.created: \"2023-02-10T09:06:09Z\"\n      org.opencontainers.image.revision: sha1:b3b00fe35424a45d373bf4c7214178bc36fd7872\n      org.opencontainers.image.source: https://github.com/stefanprodan/podinfo.git\n    path: ocirepository/oci/podinfo/3b6cdcc7adcc9a84d3214ee1c029543789d90b5ae69debe9efa3f66e982875de.tar.gz\n    revision: sha256:3b6cdcc7adcc9a84d3214ee1c029543789d90b5ae69debe9efa3f66e982875de\n    size: 1105\n    url: http://source-controller.flux-system.svc.cluster.local./ocirepository/oci/podinfo/3b6cdcc7adcc9a84d3214ee1c029543789d90b5ae69debe9efa3f66e982875de.tar.gz\n  conditions:\n  - lastTransitionTime: \"2022-06-22T09:14:21Z\"\n    message: stored artifact for revision 'sha256:3b6cdcc7adcc9a84d3214ee1c029543789d90b5ae69debe9efa3f66e982875de'\n    observedGeneration: 1\n    reason: Succeeded\n    status: \"True\"\n    type: Ready\n  - lastTransitionTime: \"2022-06-22T09:14:21Z\"\n    message: stored artifact for revision 'sha256:3b6cdcc7adcc9a84d3214ee1c029543789d90b5ae69debe9efa3f66e982875de'\n    observedGeneration: 1\n    reason: Succeeded\n    status: \"True\"\n    type: ArtifactInStorage\n  observedGeneration: 1\n  url: http://source-controller.flux-system.svc.cluster.local./ocirepository/oci/podinfo/latest.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Tearing down Kubernetes kind environment\nDESCRIPTION: Command for cleaning up the Kubernetes kind environment after end-to-end testing is complete.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake cleanup-kind\n```\n\n----------------------------------------\n\nTITLE: Cloning Flux2 repository\nDESCRIPTION: Clones the Flux2 repository from GitHub and changes into the project directory.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/install/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/fluxcd/flux2\ncd flux2\n```\n\n----------------------------------------\n\nTITLE: Setting up Kubernetes kind for end-to-end testing\nDESCRIPTION: Commands for setting up a Kubernetes kind cluster for running end-to-end tests, followed by execution of the tests and teardown procedures.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake setup-kind\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake e2e\n```\n\n----------------------------------------\n\nTITLE: Listing OCI Artifacts with Flux\nDESCRIPTION: Displays a list of available OCI artifacts with their digests, source repositories and git revisions.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0003-kubernetes-oci/README.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nflux list artifacts oci://ghcr.io/org/my-app-config\n```\n\n----------------------------------------\n\nTITLE: Setting up test environment using make commands\nDESCRIPTION: Commands for installing controller-runtime/envtest binaries and running unit tests. This is required before running the test suite for Flux2.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake install-envtest\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Building Flux from source\nDESCRIPTION: Builds the Flux binary from source code. Requires Go version 1.15 or higher.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/install/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: Installing Flux CLI using automated script\nDESCRIPTION: Downloads and installs the latest Flux CLI release using a shell script. The script detects OS, downloads release files, and installs the binary to /usr/local/bin.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/install/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s https://raw.githubusercontent.com/fluxcd/flux2/main/install/flux.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Creating Flux Kustomization Resource\nDESCRIPTION: Defines a Flux Kustomization resource that applies the Kubernetes manifests from the OCIRepository source to the cluster.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0003-kubernetes-oci/README.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kustomize.toolkit.fluxcd.io/v1beta2\nkind: Kustomization\nmetadata:\n  name: app\n  namespace: default\nspec:\n  interval: 10m\n  sourceRef:\n    kind: OCIRepository\n    name: app-config\n  path: ./deploy\n  prune: true\n  wait: true\n  timeout: 2m\n```\n\n----------------------------------------\n\nTITLE: Renaming Flux binary for kubectl plugin usage\nDESCRIPTION: Renames the Flux binary to kubectl-flux to enable its use as a kubectl plugin.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/install/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmv /usr/local/bin/flux /usr/local/bin/kubectl-flux\n```\n\n----------------------------------------\n\nTITLE: Implementing Options for Authentication in Options.go\nDESCRIPTION: Defines configuration options for the auth package, including ServiceAccount, caching, scopes, and proxy settings for token retrieval.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0010-multi-tenant-workload-identity/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage auth\n\n// Options contains options for configuring the behavior of the provider methods.\n// Not all providers/methods support all options.\ntype Options struct {\n\tServiceAccount  *client.ObjectKey\n\tClient          client.Client\n\tCache           *cache.TokenCache\n\tInvolvedObject  *cache.InvolvedObject\n\tScopes          []string\n\tImageRepository string\n\tSTSEndpoint     string\n\tProxyURL        *url.URL\n}\n\n// WithServiceAccount sets the ServiceAccount reference for the token\n// and a controller-runtime client to fetch the ServiceAccount and\n// create an OIDC token for it in the Kubernetes API.\nfunc WithServiceAccount(saRef client.ObjectKey, client client.Client) Option {\n\t// ...\n}\n\n// WithCache sets the token cache and the involved object for recording events.\nfunc WithCache(cache cache.TokenCache, involvedObject cache.InvolvedObject) Option {\n\t// ...\n}\n\n// WithScopes sets the scopes for the token.\nfunc WithScopes(scopes ...string) Option {\n\t// ...\n}\n\n// WithImageRepository sets the image repository the token will be used for.\n// In most cases container registry credentials require an additional\n// token exchange at the end. This option allows the library to implement\n// this exchange and cache the final token.\nfunc WithImageRepository(imageRepository string) Option {\n\t// ...\n}\n\n// WithSTSEndpoint sets the endpoint for the STS service.\nfunc WithSTSEndpoint(stsEndpoint string) Option {\n\t// ...\n}\n\n// WithProxyURL sets a *url.URL for an HTTP/S proxy for acquiring the token.\nfunc WithProxyURL(proxyURL url.URL) Option {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flux CLI in GitHub Actions Workflow\nDESCRIPTION: This YAML snippet demonstrates how to set up the Flux CLI in a GitHub Actions workflow. It uses the fluxcd/flux2/action to install the latest version of Flux CLI and then runs a command to verify the installation.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/action/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Setup Flux CLI\n    uses: fluxcd/flux2/action@main\n    with:\n      version: 'latest'\n  - name: Run Flux CLI\n    run: flux version --client\n```\n\n----------------------------------------\n\nTITLE: Logging FluxCD Reconciliation Errors for GitRepository and Kustomization\nDESCRIPTION: These log entries show FluxCD reporting no changes detected during reconciliation for GitRepository and Kustomization resources. The logs include timestamps, resource types, and namespaces.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/cmd/flux/testdata/logs/log-level.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2022-08-02T12:56:04.679Z error GitRepository/flux-system.flux-system - no changes since last reconcilation: observed revision \n2022-08-02T12:56:34.961Z error Kustomization/flux-system.flux-system - no changes since last reconcilation: observed revision \n2022-08-02T12:56:34.961Z error Kustomization/podinfo.flux-system - no changes since last reconcilation: observed revision \n```\n\n----------------------------------------\n\nTITLE: JWKS Response from Kubernetes API Server\nDESCRIPTION: Example of the JSON Web Key Set (JWKS) response containing the public keys used to verify Kubernetes ServiceAccount token signatures, which cloud providers use to establish trust.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0010-multi-tenant-workload-identity/README.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keys\": [\n    {\n      \"use\": \"sig\",\n      \"kty\": \"RSA\",\n      \"kid\": \"NWm3YKmazJPVP7tttzkmSxUn0w8LGGp7yS2CanEF-A8\",\n      \"alg\": \"RS256\",\n      \"n\": \"lV2tbw9hnz1mseah2kMQNe5sRju4mPLlK0F7np97lLNC49G8yc5TMjyciLF3qsDNFCfWyYmsuGlcRg2BIBBX_jkpIUUjlsktdHhuqO2RnOqyRtNuljlT_b0QJgpgxCqq0DHI31EBc0JALOVd6EjjlhsVvVzZOw_b9KBXVS3D3RENuT0_FWauDq5NYbyYnjlvk-vUXCRMNDQSDNwx6X6bktwsmeDRXtM_bP3DokmnMYc4n0asTEg14L6VKky0ByF88Wi1-y0Pm0BHdobDGt1cIeUDeThk4E79JCHxkT5urAyYHcNwcfU4q-tnD6bTpNkFVsk3cqqK2nF7R_7ac5arSQ\",\n      \"e\": \"AQAB\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Flux2 Kustomization Error Logs\nDESCRIPTION: Log entries showing two different Kustomization resources (flux-system and podinfo) reporting no changes since their last reconciliation. The logs are timestamped and include the resource namespace.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/cmd/flux/testdata/logs/kind.txt#2025-04-23_snippet_0\n\nLANGUAGE: log\nCODE:\n```\n2022-08-02T12:56:34.961Z error Kustomization/flux-system.flux-system - no changes since last reconcilation: observed revision\n2022-08-02T12:56:34.961Z error Kustomization/podinfo.flux-system - no changes since last reconcilation: observed revision\n```\n\n----------------------------------------\n\nTITLE: OIDC Configuration Response in Kubernetes\nDESCRIPTION: Example of the JSON response from the Kubernetes API server at the OIDC discovery endpoint, showing the issuer URL and JWKS URI that cloud providers use to validate ServiceAccount tokens.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0010-multi-tenant-workload-identity/README.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"issuer\": \"https://kubernetes.default.svc.cluster.local\",\n  \"jwks_uri\": \"https://172.18.0.2:6443/openid/v1/jwks\",\n  \"response_types_supported\": [\n    \"id_token\"\n  ],\n  \"subject_types_supported\": [\n    \"public\"\n  ],\n  \"id_token_signing_alg_values_supported\": [\n    \"RS256\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Stalled Status Condition for Unsupported HTTP Connection Type\nDESCRIPTION: This YAML snippet shows the status condition that would be added to a Flux object when HTTP connections are requested but not supported by the provider (Azure Storage in this example). The object will be marked as 'Stalled'.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0004-insecure-http/README.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  conditions:\n  - lastTransitionTime: \"2022-09-06T09:14:21Z\"\n    message: \"Use of insecure HTTP connections isn't allowed for Azure Storage\"\n    observedGeneration: 1\n    reason: UnsupportedConnectionType\n    status: \"True\"\n    type: Stalled\n```\n\n----------------------------------------\n\nTITLE: Slack Message Template in Markdown\nDESCRIPTION: Template for creating Slack announcements for new Flux releases. Includes sections for the announcement, brief description of changes, fixes, documentation, and appreciation for contributors.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/docs/release/release-notes-template.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:sparkles: *We are pleased to announce the release of Flux [<version>](https://github.com/fluxcd/flux2/releases/tag/<version>/)!*\n\n<!-- Brief description of most important changes to this release -->\n\n:hammer_and_pick: *Fixes and improvements*\n\n<!-- List of fixes and improvements as in the GitHub release template -->\n\n:books: Documentation\n\n<!-- List of new documentation pages, if applicable -->\n\n:heart: Big thanks to all the Flux contributors that helped us with this release! \n```\n\n----------------------------------------\n\nTITLE: Retrieving Artifact Digest in Flux v2 Using kubectl\nDESCRIPTION: Demonstrates how to retrieve the Artifact Digest using kubectl and jsonpath for a GitRepository resource.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0005-artifact-revision-and-digest/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get gitrepository -o jsonpath='{.status.artifact.digest}' <name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Tenant ECR Access for AWS in Flux\nDESCRIPTION: This YAML configuration demonstrates how to set up multi-tenant access to Amazon ECR repositories using Flux OCIRepository resources and associated ServiceAccounts with AWS IAM role annotations.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0010-multi-tenant-workload-identity/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: OCIRepository\nmetadata:\n  name: tenant-a-repo\n  namespace: tenant-a\nspec:\n  ...\n  provider: aws\n  serviceAccountName: tenant-a-ecr-sa\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: tenant-a-ecr-sa\n  namespace: tenant-a\n  annotations:\n    eks.amazonaws.com/role-arn: arn:aws:iam::123456789123:role/tenant-a-ecr\n---\napiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: OCIRepository\nmetadata:\n  name: tenant-b-repo\n  namespace: tenant-b\nspec:\n  ...\n  provider: aws\n  serviceAccountName: tenant-b-ecr-sa\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: tenant-b-ecr-sa\n  namespace: tenant-b\n  annotations:\n    eks.amazonaws.com/role-arn: arn:aws:iam::123456789123:role/tenant-b-ecr\n```\n\n----------------------------------------\n\nTITLE: Patching Flux for Azure Workload Identity in YAML\nDESCRIPTION: This YAML snippet demonstrates how to patch Flux service account and deployment for Azure Workload Identity configuration.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0007-git-repo-passwordless-auth/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - gotk-components.yaml\n  - gotk-sync.yaml\npatches:\n  - patch: |-\n      apiVersion: v1\n      kind: ServiceAccount\n      metadata:\n        name: source-controller\n        namespace: flux-system\n        annotations:\n          azure.workload.identity/client-id: <AZURE_CLIENT_ID>\n        labels:\n          azure.workload.identity/use: \"true\"      \n  - patch: |-\n      apiVersion: apps/v1\n      kind: Deployment\n      metadata:\n        name: source-controller\n        namespace: flux-system\n        labels:\n          azure.workload.identity/use: \"true\"\n      spec:\n        template:\n          metadata:\n            labels:\n              azure.workload.identity/use: \"true\" \n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Container Registry Secret in Shell\nDESCRIPTION: Shell command to create a Kubernetes secret for accessing GitHub Container Registry.\nSOURCE: https://github.com/fluxcd/flux2/blob/main/rfcs/0002-helm-oci/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret docker-registry ghcr-charts \\\n    --docker-server=ghcr.io \\\n    --docker-username=$GITHUB_USER \\\n    --docker-password=$GITHUB_TOKEN\n```"
  }
]