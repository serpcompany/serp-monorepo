[
  {
    "owner": "googlecontainertools",
    "repo": "distroless",
    "content": "TITLE: Multi-stage Dockerfile for Go Application with Distroless\nDESCRIPTION: Example of a multi-stage Dockerfile that builds a Go application and packages it in a distroless container. Uses golang:1.18 for building and distroless/static-debian12 for runtime.\nSOURCE: https://github.com/googlecontainertools/distroless/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Start by building the application.\nFROM golang:1.18 as build\n\nWORKDIR /go/src/app\nCOPY . .\n\nRUN go mod download\nRUN CGO_ENABLED=0 go build -o /go/bin/app\n\n# Now copy it into our base image.\nFROM gcr.io/distroless/static-debian12\nCOPY --from=build /go/bin/app /\nCMD [\"/app\"]\n```\n\n----------------------------------------\n\nTITLE: Docker Commands for Node.js Express App\nDESCRIPTION: Commands to build and run a Node.js Express application in a distroless container, including port exposure.\nSOURCE: https://github.com/googlecontainertools/distroless/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm install # Install express and its transitive dependencies\ndocker build -t myexpressapp . # Normal build command\ndocker run -p 3000:3000 -t myexpressapp\n```\n\n----------------------------------------\n\nTITLE: Docker Build and Run Commands\nDESCRIPTION: Basic commands to build and run a Docker container using a distroless base image.\nSOURCE: https://github.com/googlecontainertools/distroless/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t myapp .\ndocker run -t myapp\n```\n\n----------------------------------------\n\nTITLE: Debug Container Commands\nDESCRIPTION: Commands to build and run a debug version of a distroless container that includes a shell for debugging purposes.\nSOURCE: https://github.com/googlecontainertools/distroless/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t my_debug_image .\ndocker run --entrypoint=sh -ti my_debug_image\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Python 3 Application\nDESCRIPTION: Command to build the Docker image for the Python 3 application with psutil. It tags the image as 'psutil-example'.\nSOURCE: https://github.com/googlecontainertools/distroless/blob/main/examples/python3-requirements/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndocker build . --tag=psutil-example\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for Python 3 Application\nDESCRIPTION: Command to run the Docker container built from the 'psutil-example' image. The '--rm' flag ensures the container is removed after execution.\nSOURCE: https://github.com/googlecontainertools/distroless/blob/main/examples/python3-requirements/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run --rm psutil-example\n```\n\n----------------------------------------\n\nTITLE: Verifying Distroless Image Signatures using Cosign\nDESCRIPTION: Command to verify the keyless signature of distroless images using cosign with specified OIDC issuer and certificate identity.\nSOURCE: https://github.com/googlecontainertools/distroless/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncosign verify $IMAGE_NAME --certificate-oidc-issuer https://accounts.google.com  --certificate-identity keyless@distroless.iam.gserviceaccount.com\n```\n\n----------------------------------------\n\nTITLE: Using Distroless Java Docker Image with JAR Files\nDESCRIPTION: The distroless Java image has its entrypoint set to 'java -jar', expecting users to provide a path to a JAR file in the CMD instruction when using the image.\nSOURCE: https://github.com/googlecontainertools/distroless/blob/main/java/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe entrypoint of this image is set to the equivalent of \"java -jar\", so this image expects users to supply a path to a JAR file in the CMD.\n```\n\n----------------------------------------\n\nTITLE: Configuring OCI Image Build in Bazel\nDESCRIPTION: Bazel build configuration for creating and loading Docker images using OCI rules. Demonstrates how to set up image building for local development.\nSOURCE: https://github.com/googlecontainertools/distroless/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: starlark\nCODE:\n```\nload(\"@rules_oci//oci:defs.bzl\", \"oci_tarball\")\n\noci_tarball(\n  name = \"local_build\",\n  image = \"//base:static_root_amd64_debian17\",\n  repo_tags = [],\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying psutil Dependency in requirements.txt\nDESCRIPTION: A requirements.txt entry that pins psutil to version 5.6.6. The comment indicates that this version must be compiled from source since it doesn't ship with pre-built binary wheels.\nSOURCE: https://github.com/googlecontainertools/distroless/blob/main/examples/python3-requirements/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n# this version of psutil does not ship binary wheels: must be compiled\npsutil==5.6.6\n```\n\n----------------------------------------\n\nTITLE: Example Output of Python 3 Application with psutil\nDESCRIPTION: Sample output from the Python 3 application showing memory usage statistics provided by the psutil module. It displays RSS (Resident Set Size), Shared Memory, and Virtual Memory usage.\nSOURCE: https://github.com/googlecontainertools/distroless/blob/main/examples/python3-requirements/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Plaintext\nCODE:\n```\nRSS: 13.0 MiB;  SHARED: 5.7 MiB; VIRTUAL: 19.9 MiB\n```\n\n----------------------------------------\n\nTITLE: Loading Built Image to Docker Daemon\nDESCRIPTION: Command to load a built container image into the local Docker daemon for testing\nSOURCE: https://github.com/googlecontainertools/distroless/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbazel run //:local_build\n```\n\n----------------------------------------\n\nTITLE: Docker Image Reference Example\nDESCRIPTION: The container image reference for the distroless C/C++ base image\nSOURCE: https://github.com/googlecontainertools/distroless/blob/main/cc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ngcr.io/distroless/cc\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Buildifier\nDESCRIPTION: Commands for installing and running buildifier to format Bazel build files automatically. Includes the command to fix formatting across all relevant files.\nSOURCE: https://github.com/googlecontainertools/distroless/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Install buildifier version 3.2.0\ngo install github.com/bazelbuild/buildtools/buildifier@latest\n\n# This will automatically fix files.\nbuildifier -mode=fix $(find . -name 'BUILD*' -o -name 'WORKSPACE*' -o -name '*.bzl' -type f)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Pylint\nDESCRIPTION: Instructions for installing and running pylint for Python code style checking, including multiple installation methods and the command to check Python files.\nSOURCE: https://github.com/googlecontainertools/distroless/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Install pylint\nsudo pip install pylint\n# Or\nsudo apt-get install pylint\n# Or on macos\nbrew install pylint\n\n# Identify python style issues.\nfind . -name \"*.py\" | xargs pylint --disable=R,C\n```\n\n----------------------------------------\n\nTITLE: Retrieving Debian Package Versions Command\nDESCRIPTION: Shell command to parse and print Debian package versions into JSON format using the knife tool\nSOURCE: https://github.com/googlecontainertools/distroless/blob/main/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./knife deb-versions\n```\n\n----------------------------------------\n\nTITLE: Distroless Image Pattern Format\nDESCRIPTION: The standard naming pattern for distroless container images on Google Container Registry\nSOURCE: https://github.com/googlecontainertools/distroless/blob/main/SUPPORT_POLICY.md#2025-04-22_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\ngcr.io/distroless/<image>-debian<version>:(latest|nonroot|debug|debug-nonroot)\n```\n\n----------------------------------------\n\nTITLE: Referencing cloudbuild.yaml for Distroless Image Build Configuration\nDESCRIPTION: This reference points to the cloudbuild.yaml file in the .cloudbuild directory that defines the policy for automatically building and pushing images on every commit.\nSOURCE: https://github.com/googlecontainertools/distroless/blob/main/RELEASES.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n.cloudbuild/cloudbuild.yaml\n```\n\n----------------------------------------\n\nTITLE: Example CVE URL Format\nDESCRIPTION: URL pattern for looking up Debian security tracker notices for specific CVEs\nSOURCE: https://github.com/googlecontainertools/distroless/blob/main/SECURITY.md#2025-04-22_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nhttps://security-tracker.debian.org/tracker/CVE-XXXX-YYYYY\n```"
  }
]