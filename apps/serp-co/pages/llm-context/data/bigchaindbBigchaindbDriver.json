[
  {
    "owner": "bigchaindb",
    "repo": "bigchaindb-driver",
    "content": "TITLE: Complete Asset Creation and Transfer Example\nDESCRIPTION: A comprehensive example showing the complete flow of creating and transferring a digital asset between two parties.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/usage.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom bigchaindb_driver import BigchainDB\nfrom bigchaindb_driver.crypto import generate_keypair\nfrom time import sleep\nfrom sys import exit\n\nalice, bob = generate_keypair(), generate_keypair()\n\nbdb_root_url = 'https://example.com:9984'\nbdb = BigchainDB(bdb_root_url)\n\nbicycle_asset = {\n    'data': {\n        'bicycle': {\n            'serial_number': 'abcd1234',\n            'manufacturer': 'bkfab'\n        },\n    },\n}\n\nbicycle_asset_metadata = {\n    'planet': 'earth'\n}\n\nprepared_creation_tx = bdb.transactions.prepare(\n    operation='CREATE',\n    signers=alice.public_key,\n    asset=bicycle_asset,\n    metadata=bicycle_asset_metadata\n)\n\nfulfilled_creation_tx = bdb.transactions.fulfill(\n    prepared_creation_tx,\n    private_keys=alice.private_key\n)\n\nsent_creation_tx = bdb.transactions.send_commit(fulfilled_creation_tx)\n\ntxid = fulfilled_creation_tx['id']\nasset_id = txid\n\ntransfer_asset = {\n    'id': asset_id\n}\n\noutput_index = 0\noutput = fulfilled_creation_tx['outputs'][output_index]\n\ntransfer_input = {\n    'fulfillment': output['condition']['details'],\n    'fulfills': {\n        'output_index': output_index,\n        'transaction_id': fulfilled_creation_tx['id']\n    },\n    'owners_before': output['public_keys']\n}\n\nprepared_transfer_tx = bdb.transactions.prepare(\n    operation='TRANSFER',\n    asset=transfer_asset,\n    inputs=transfer_input,\n    recipients=bob.public_key,\n)\n\nfulfilled_transfer_tx = bdb.transactions.fulfill(\n    prepared_transfer_tx,\n    private_keys=alice.private_key,\n)\n\nsent_transfer_tx = bdb.transactions.send_commit(fulfilled_transfer_tx)\n\nprint(\"Is Bob the owner?\",\n    sent_transfer_tx['outputs'][0]['public_keys'][0] == bob.public_key)\n\nprint(\"Was Alice the previous owner?\",\n```\n\n----------------------------------------\n\nTITLE: Complete CREATE Transaction Implementation\nDESCRIPTION: Full implementation showing how to handcraft a CREATE transaction including key generation, asset definition, signing and generating transaction ID.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nimport base58\nimport sha3\nfrom cryptoconditions import Ed25519Sha256\n\nfrom bigchaindb_driver.crypto import generate_keypair\n\n\nalice = generate_keypair()\n\noperation = 'CREATE'\n\nversion = '2.0'\n\nasset = {\n    'data': {\n        'bicycle': {\n            'manufacturer': 'bkfab',\n            'serial_number': 'abcd1234',\n        },\n    },\n}\n\nmetadata = {'planet': 'earth'}\n\ned25519 = Ed25519Sha256(public_key=base58.b58decode(alice.public_key))\n\noutput = {\n    'amount': '1',\n    'condition': {\n        'details': {\n            'type': ed25519.TYPE_NAME,\n            'public_key': base58.b58encode(ed25519.public_key).decode(),\n        },\n        'uri': ed25519.condition_uri,\n    },\n    'public_keys': (alice.public_key,),\n}\noutputs = (output,)\n\ninput_ = {\n    'fulfillment': None,\n    'fulfills': None,\n    'owners_before': (alice.public_key,)\n}\ninputs = (input_,)\n\nhandcrafted_creation_tx = {\n    'asset': asset,\n    'metadata': metadata,\n    'operation': operation,\n    'outputs': outputs,\n    'inputs': inputs,\n    'version': version,\n    'id': None,\n}\n\nmessage = json.dumps(\n    handcrafted_creation_tx,\n    sort_keys=True,\n    separators=(',', ':'),\n    ensure_ascii=False,\n)\n\nmessage = sha3.sha3_256(message.encode())\n\ned25519.sign(message.digest(), base58.b58decode(alice.private_key))\n\nfulfillment_uri = ed25519.serialize_uri()\n\nhandcrafted_creation_tx['inputs'][0]['fulfillment'] = fulfillment_uri\n\njson_str_tx = json.dumps(\nhandcrafted_creation_tx,\nsort_keys=True,\nseparators=(',', ':'),\nensure_ascii=False,\n)\n\ncreation_txid = sha3.sha3_256(json_str_tx.encode()).hexdigest()\n\nhandcrafted_creation_tx['id'] = creation_txid\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Escrow Condition with Threshold Cryptoconditions in BigchainDB\nDESCRIPTION: This code demonstrates how to create a complex escrow condition using threshold cryptoconditions in BigchainDB. It implements an escrow mechanism with execute and abort branches, where the execute branch requires both Alice's signature and a valid timeout, while the abort branch requires Bob's signature and an expired timeout.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-usage.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Retrieve the last transaction of bob.public_key (or create a new asset)\ntx_retrieved_id = b.get_owned_ids(bob.public_key).pop()\n\n# Create a base template with the execute and abort address\ntx_escrow = b.create_transaction(bob.public_key, [bob.public_key, alice.public_key], tx_retrieved_id, 'TRANSFER')\n\n# Set expiry time - the execute address needs to fulfill before expiration\ntime_sleep = 12\ntime_expire = str(float(util.timestamp()) + time_sleep)  # 12 secs from now\n\n# Create the escrow and timeout condition\ncondition_escrow = cc.ThresholdSha256Fulfillment(threshold=1)  # OR Gate\ncondition_timeout = cc.TimeoutFulfillment(expire_time=time_expire)  # only valid if now() <= time_expire\ncondition_timeout_inverted = cc.InvertedThresholdSha256Fulfillment(threshold=1)\ncondition_timeout_inverted.add_subfulfillment(condition_timeout)  # invert the timeout condition\n\n# Create the execute branch\ncondition_execute = cc.ThresholdSha256Fulfillment(threshold=2)  # AND gate\ncondition_execute.add_subfulfillment(cc.Ed25519Fulfillment(public_key=alice.public_key))  # execute address\ncondition_execute.add_subfulfillment(condition_timeout)  # federation checks on expiry\ncondition_escrow.add_subfulfillment(condition_execute)\n\n# Create the abort branch\ncondition_abort = cc.ThresholdSha256Fulfillment(threshold=2)  # AND gate\ncondition_abort.add_subfulfillment(cc.Ed25519Fulfillment(public_key=bob.public_key))  # abort address\ncondition_abort.add_subfulfillment(condition_timeout_inverted)\ncondition_escrow.add_subfulfillment(condition_abort)\n\n# Update the condition in the newly created transaction\ntx_escrow['outputs'][0]['condition'] = {\n    'details': condition_escrow.to_dict(),\n    'uri': condition_escrow.condition.serialize_uri()\n}\n\n# Conditions have been updated, so the hash needs updating\ntx_escrow['id'] = util.get_hash_data(tx_escrow)\n\n# The asset needs to be signed by the owner_before\ntx_escrow_signed = b.sign_transaction(tx_escrow, bob.private_key)\n\n# Some validations\nassert b.validate_transaction(tx_escrow_signed) == tx_escrow_signed\n\nb.write_transaction(tx_escrow_signed)\ntx_escrow_signed\n```\n\n----------------------------------------\n\nTITLE: Initializing BigchainDB Connection\nDESCRIPTION: Shows how to create a BigchainDB client instance with optional authentication tokens.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/usage.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom bigchaindb_driver import BigchainDB\n\nbdb_root_url = 'https://example.com:9984'  # Use YOUR BigchainDB Root URL here\n\n# Without authentication\nbdb = BigchainDB(bdb_root_url)\n\n# With authentication\ntokens = {'app_id': 'your_app_id', 'app_key': 'your_app_key'}\nbdb = BigchainDB(bdb_root_url, headers=tokens)\n```\n\n----------------------------------------\n\nTITLE: Implementing Threshold Cryptoconditions using Python\nDESCRIPTION: This snippet demonstrates the creation and management of a threshold cryptocondition transaction using the cryptocondition library. It involves generating keypairs, creating threshold conditions with 2 out of 3 signatures required, signing the transaction, and writing it back to the blockchain. Dependencies include BigchainDB driver and cryptoconditions library. This requires existing knowledge of BigchainDB transaction structure and cryptographic fulfillment methods.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-usage.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport cryptoconditions as cc\n\n# Create some new testusers\nthresholduser1 = generate_keypair()\nthresholduser2 = generate_keypair()\nthresholduser3 = generate_keypair()\n\n# Retrieve the last transaction of bob\ntx_retrieved_id = b.get_owned_ids(bob).pop()\n\n# Create a base template for a 1-input/2-output transaction\n# todo: Needs https://github.com/bigchaindb/bigchaindb-driver/issues/109\n\n# Create a Threshold Cryptocondition\nthreshold_condition = cc.ThresholdSha256Fulfillment(threshold=2)\nthreshold_condition.add_subfulfillment(\n    cc.Ed25519Fulfillment(public_key=thresholduser1.public_key))\nthreshold_condition.add_subfulfillment(\n    cc.Ed25519Fulfillment(public_key=thresholduser2.public_key))\nthreshold_condition.add_subfulfillment(\n    cc.Ed25519Fulfillment(public_key=thresholduser3.public_key))\n\n# Update the condition in the newly created transaction\nthreshold_tx['outputs'][0]['condition'] = {\n    'details': threshold_condition.to_dict(),\n    'uri': threshold_condition.condition.serialize_uri()\n}\n\n# Conditions have been updated, so the transaction hash (ID) needs updating\n# todo: Replace with ? (common, driver util)\nthreshold_tx['id'] = util.get_hash_data(threshold_tx)\n\n# Sign the transaction\n# todo: Needs https://github.com/bigchaindb/bigchaindb-driver/issues/109\nthreshold_tx_signed = bdb.transactions.sign(threshold_tx, bob)\n\n# Write the transaction\n# todo: Needs https://github.com/bigchaindb/bigchaindb-driver/issues/109\nb.write_transaction(threshold_tx_signed)\n\n# Check if the transaction is already in the bigchain\ntx_threshold_retrieved = bdb.transactions.retrieve(threshold_tx_signed['id'])\ntx_threshold_retrieved\n```\n\n----------------------------------------\n\nTITLE: Creating a Digital Asset in BigchainDB using Python\nDESCRIPTION: Shows how to create a digital asset by preparing a CREATE transaction, signing it, and sending it to the BigchainDB network. It includes generating a keypair for the user and defining the asset payload.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-usage.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom bigchaindb_driver import BigchainDB\nfrom bigchaindb_driver.crypto import generate_keypair\n\nbdb_root_url = 'https://example.com:9984'  # Use YOUR BigchainDB Root URL here\nbdb = BigchainDB(bdb_root_url)\n\nalice = generate_keypair()\n\ndigital_asset_payload = {'data': {'msg': 'Hello BigchainDB!'}}\ntx = bdb.transactions.prepare(operation='CREATE',\n                          signers=alice.public_key,\n                          asset=digital_asset_payload)\n\nsigned_tx = bdb.transactions.fulfill(tx, private_keys=alice.private_key)\nsent_tx = bdb.transactions.send_commit(signed_tx)\nsent_tx == signed_tx\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Divisible Assets with BigchainDB Python Driver\nDESCRIPTION: Example of creating a divisible asset (Game Boy token) for Alice, issuing 10 tokens to Bob, and then Bob spending 3 of these tokens. Demonstrates key operations like creating transactions, fulfilling them, and sending them to a BigchainDB node.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# import BigchainDB and create an object\nfrom bigchaindb_driver import BigchainDB\nbdb_root_url = 'https://example.com:9984'\nbdb = BigchainDB(bdb_root_url)\n\n# generate a keypair\nfrom bigchaindb_driver.crypto import generate_keypair\nalice, bob = generate_keypair(), generate_keypair()\n\n# create a digital asset for Alice\ngame_boy_token = {\n    'data': {\n        'token_for': {\n            'game_boy': {\n                'serial_number': 'LR35902'\n            }\n        },\n        'description': 'Time share token. Each token equals one hour of usage.',\n    },\n}\n\n# prepare the transaction with the digital asset and issue 10 tokens for Bob\nprepared_token_tx = bdb.transactions.prepare(\n    operation='CREATE',\n    signers=alice.public_key,\n    recipients=[([bob.public_key], 10)],\n    asset=game_boy_token)\n\n# fulfill and send the transaction\nfulfilled_token_tx = bdb.transactions.fulfill(\n    prepared_token_tx,\n    private_keys=alice.private_key)\nbdb.transactions.send_commit(fulfilled_token_tx)\n\n# Use the tokens\n# create the output and inout for the transaction\ntransfer_asset = {'id': fulfilled_token_tx['id']}\noutput_index = 0\noutput = fulfilled_token_tx['outputs'][output_index]\ntransfer_input = {'fulfillment': output['condition']['details'],\n                  'fulfills': {'output_index': output_index,\n                               'transaction_id': transfer_asset['id']},\n                  'owners_before': output['public_keys']}\n\n# prepare the transaction and use 3 tokens\nprepared_transfer_tx = bdb.transactions.prepare(\n    operation='TRANSFER',\n    asset=transfer_asset,\n    inputs=transfer_input,\n    recipients=[([alice.public_key], 3), ([bob.public_key], 7)])\n\n# fulfill and send the transaction\nfulfilled_transfer_tx = bdb.transactions.fulfill(\n    prepared_transfer_tx,\n    private_keys=bob.private_key)\nsent_transfer_tx = bdb.transactions.send_commit(fulfilled_transfer_tx)\n```\n\n----------------------------------------\n\nTITLE: Handcrafting a CREATE Transaction in BigchainDB with Python\nDESCRIPTION: This code demonstrates how to manually create a CREATE transaction in BigchainDB. It includes setting up crypto-conditions with a threshold signature scheme, generating the transaction structure, signing it, and adding the transaction ID. The example creates a car asset co-owned by two parties requiring both signatures for transfers.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nimport base58\nfrom sha3 import sha3_256\nfrom cryptoconditions import Ed25519Sha256, ThresholdSha256\n\nfrom bigchaindb_driver.crypto import generate_keypair\n\nversion = '2.0'\n\ncar_asset = {\n    'data': {\n        'car': {\n            'vin': '5YJRE11B781000196',\n        },\n    },\n}\n\nalice, bob = generate_keypair(), generate_keypair()\n\n# CRYPTO-CONDITIONS: instantiate an Ed25519 crypto-condition for alice\nalice_ed25519 = Ed25519Sha256(public_key=base58.b58decode(alice.public_key))\n\n# CRYPTO-CONDITIONS: instantiate an Ed25519 crypto-condition for bob\nbob_ed25519 = Ed25519Sha256(public_key=base58.b58decode(bob.public_key))\n\n# CRYPTO-CONDITIONS: instantiate a threshold SHA 256 crypto-condition\nthreshold_sha256 = ThresholdSha256(threshold=2)\n\n# CRYPTO-CONDITIONS: add alice ed25519 to the threshold SHA 256 condition\nthreshold_sha256.add_subfulfillment(alice_ed25519)\n\n# CRYPTO-CONDITIONS: add bob ed25519 to the threshold SHA 256 condition\nthreshold_sha256.add_subfulfillment(bob_ed25519)\n\n# CRYPTO-CONDITIONS: generate the condition uri\ncondition_uri = threshold_sha256.condition.serialize_uri()\n\n# CRYPTO-CONDITIONS: get the unsigned fulfillment dictionary (details)\ncondition_details = {\n    'subconditions': [\n        {'type': s['body'].TYPE_NAME,\n         'public_key': base58.b58encode(s['body'].public_key).decode()}\n        for s in threshold_sha256.subconditions\n        if (s['type'] == 'fulfillment' and\n            s['body'].TYPE_NAME == 'ed25519-sha-256')\n    ],\n    'threshold': threshold_sha256.threshold,\n    'type': threshold_sha256.TYPE_NAME,\n}\n\noutput = {\n    'amount': '1',\n    'condition': {\n        'details': condition_details,\n        'uri': condition_uri,\n    },\n    'public_keys': (alice.public_key, bob.public_key),\n}\n\n# The yet to be fulfilled input:\ninput_ = {\n    'fulfillment': None,\n    'fulfills': None,\n    'owners_before': (alice.public_key,),\n}\n\n# Craft the payload:\nhandcrafted_car_creation_tx = {\n    'operation': 'CREATE',\n    'asset': car_asset,\n    'metadata': None,\n    'outputs': (output,),\n    'inputs': (input_,),\n    'version': version,\n    'id': None,\n}\n\n# JSON: serialize the transaction-without-id to a json formatted string\nmessage = json.dumps(\n    handcrafted_car_creation_tx,\n    sort_keys=True,\n    separators=(',', ':'),\n    ensure_ascii=False,\n)\nmessage = sha3_256(message.encode())\n\n# CRYPTO-CONDITIONS: sign the serialized transaction-without-id\nalice_ed25519.sign(message.digest(), base58.b58decode(alice.private_key))\n\n# CRYPTO-CONDITIONS: generate the fulfillment uri\nfulfillment_uri = alice_ed25519.serialize_uri()\n\n# add the fulfillment uri (signature)\nhandcrafted_car_creation_tx['inputs'][0]['fulfillment'] = fulfillment_uri\n\n# JSON: serialize the id-less transaction to a json formatted string\n# Generate the id, by hashing the encoded json formatted string representation of\n# the transaction:\njson_str_tx = json.dumps(\n    handcrafted_car_creation_tx,\n    sort_keys=True,\n    separators=(',', ':'),\n    ensure_ascii=False,\n)\n\n# SHA3: hash the serialized id-less transaction to generate the id\ncar_creation_txid = sha3_256(json_str_tx.encode()).hexdigest()\n\n# add the id\nhandcrafted_car_creation_tx['id'] = car_creation_txid\n```\n\n----------------------------------------\n\nTITLE: Creating a Divisible Asset Token in BigchainDB\nDESCRIPTION: Comprehensive example of handcrafting a CREATE transaction for a divisible asset (bicycle token). This demonstrates how to generate keypairs, create crypto-conditions, sign transactions, and compute transaction IDs.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nimport base58\nimport sha3\nfrom cryptoconditions import Ed25519Sha256\n\nfrom bigchaindb_driver.crypto import generate_keypair\n\n\nbob, carly = generate_keypair(), generate_keypair()\nversion = '2.0'\n\nbicycle_token = {\n    'data': {\n        'token_for': {\n            'bicycle': {\n                'serial_number': 'abcd1234',\n                'manufacturer': 'bkfab'\n            }\n        },\n        'description': 'Time share token. Each token equals one hour of riding.',\n    },\n}\n\n# CRYPTO-CONDITIONS: instantiate an Ed25519 crypto-condition for carly\ned25519 = Ed25519Sha256(public_key=base58.b58decode(carly.public_key))\n\n# CRYPTO-CONDITIONS: generate the condition uri\ncondition_uri = ed25519.condition.serialize_uri()\n\n# CRYPTO-CONDITIONS: construct an unsigned fulfillment dictionary\nunsigned_fulfillment_dict = {\n    'type': ed25519.TYPE_NAME,\n    'public_key': base58.b58encode(ed25519.public_key).decode(),\n}\n\noutput = {\n    'amount': '10',\n    'condition': {\n        'details': unsigned_fulfillment_dict,\n        'uri': condition_uri,\n    },\n    'public_keys': (carly.public_key,),\n}\n\ninput_ = {\n    'fulfillment': None,\n    'fulfills': None,\n    'owners_before': (bob.public_key,)\n}\n\ntoken_creation_tx = {\n    'operation': 'CREATE',\n    'asset': bicycle_token,\n    'metadata': None,\n    'outputs': (output,),\n    'inputs': (input_,),\n    'version': version,\n    'id': None,\n}\n\n# JSON: serialize the transaction-without-id to a json formatted string\nmessage = json.dumps(\n    token_creation_tx,\n    sort_keys=True,\n    separators=(',', ':'),\n    ensure_ascii=False,\n)\n\nmessage = sha3.sha3_256(message.encode())\n\n# CRYPTO-CONDITIONS: sign the serialized transaction-without-id\ned25519.sign(message.digest(), base58.b58decode(bob.private_key))\n\n# CRYPTO-CONDITIONS: generate the fulfillment uri\nfulfillment_uri = ed25519.serialize_uri()\n\n# add the fulfillment uri (signature)\ntoken_creation_tx['inputs'][0]['fulfillment'] = fulfillment_uri\n\n# JSON: serialize the id-less transaction to a json formatted string\njson_str_tx = json.dumps(\n    token_creation_tx,\n    sort_keys=True,\n    separators=(',', ':'),\n    ensure_ascii=False,\n)\n\n# SHA3: hash the serialized id-less transaction to generate the id\nshared_creation_txid = sha3.sha3_256(json_str_tx.encode()).hexdigest()\n\n# add the id\ntoken_creation_tx['id'] = shared_creation_txid\n```\n\n----------------------------------------\n\nTITLE: Handcrafting a TRANSFER Transaction in BigchainDB with Python\nDESCRIPTION: This code demonstrates how to manually create a TRANSFER transaction that transfers ownership of an asset from two owners (requiring both signatures) to a single new owner. It includes creating crypto-conditions, generating the transaction structure, signing it with both original owners, and adding the transaction ID.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\ncarol = generate_keypair()\n\nalice_ed25519 = Ed25519Sha256(public_key=base58.b58decode(alice.public_key))\n\nbob_ed25519 = Ed25519Sha256(public_key=base58.b58decode(bob.public_key))\n\ncarol_ed25519 = Ed25519Sha256(public_key=base58.b58decode(carol.public_key))\n\nunsigned_fulfillments_dict = {\n    'type': carol_ed25519.TYPE_NAME,\n    'public_key': base58.b58encode(carol_ed25519.public_key).decode(),\n}\n\ncondition_uri = carol_ed25519.condition.serialize_uri()\n\noutput = {\n    'amount': '1',\n    'condition': {\n        'details': unsigned_fulfillments_dict,\n        'uri': condition_uri,\n    },\n    'public_keys': (carol.public_key,),\n}\n\n# The yet to be fulfilled input:\ninput_ = {\n    'fulfillment': None,\n    'fulfills': {\n        'transaction_id': handcrafted_car_creation_tx['id'],\n        'output_index': 0,\n    },\n    'owners_before': (alice.public_key, bob.public_key),\n}\n\n# Craft the payload:\nhandcrafted_car_transfer_tx = {\n    'operation': 'TRANSFER',\n    'asset': {'id': handcrafted_car_creation_tx['id']},\n    'metadata': None,\n    'outputs': (output,),\n    'inputs': (input_,),\n    'version': version,\n    'id': None,\n}\n\n# Sign the transaction:\nmessage = json.dumps(\n    handcrafted_car_transfer_tx,\n    sort_keys=True,\n    separators=(',', ':'),\n    ensure_ascii=False,\n)\n\nmessage = sha3_256(message.encode())\n\nmessage.update('{}{}'\\\n    .format(\n        handcrafted_car_transfer_tx['inputs'][0]['fulfills']['transaction_id'],\n        handcrafted_car_transfer_tx['inputs'][0]['fulfills']['output_index']).encode()\n)\n\nthreshold_sha256 = ThresholdSha256(threshold=2)\n\nalice_ed25519.sign(message=message.digest(),\n                   private_key=base58.b58decode(alice.private_key))\nbob_ed25519.sign(message=message.digest(),\n                 private_key=base58.b58decode(bob.private_key))\n\nthreshold_sha256.add_subfulfillment(alice_ed25519)\n\nthreshold_sha256.add_subfulfillment(bob_ed25519)\n\nfulfillment_uri = threshold_sha256.serialize_uri()\n\nhandcrafted_car_transfer_tx['inputs'][0]['fulfillment'] = fulfillment_uri\n\n# Generate the id, by hashing the encoded json formatted string\n# representation of the transaction:\njson_str_tx = json.dumps(\n    handcrafted_car_transfer_tx,\n    sort_keys=True,\n    separators=(',', ':'),\n    ensure_ascii=False,\n)\n\ncar_transfer_txid = sha3_256(json_str_tx.encode()).hexdigest()\n\nhandcrafted_car_transfer_tx['id'] = car_transfer_txid\n```\n\n----------------------------------------\n\nTITLE: Generating Cryptographic Identities\nDESCRIPTION: Shows how to create public/private key pairs for transaction participants.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/usage.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom bigchaindb_driver.crypto import generate_keypair\n\nalice, bob = generate_keypair(), generate_keypair()\n```\n\n----------------------------------------\n\nTITLE: Creating Hash-Locked Transactions with Python\nDESCRIPTION: This example shows how to initialize a hash-locked asset in BigchainDB. It includes creating the transaction, setting a hash-lock condition, and validating the transaction with the required secret. Dependencies include the BigchainDB driver and cryptoconditions for managing conditions and validations.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-usage.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Create a hash-locked asset without any owners_after\nhashlock_tx = b.create_transaction(b.me, None, None, 'CREATE')\n\n# Define a secret that will be hashed - fulfillments need to guess the secret\nsecret = b'much secret! wow!'\nfirst_tx_condition = cc.PreimageSha256Fulfillment(preimage=secret)\n\n# The conditions list is empty, so we need to append a new condition\nhashlock_tx['outputs'].append({\n    'condition': {\n        'uri': first_tx_condition.condition.serialize_uri()\n    },\n    'public_keys': None\n})\n\n# Conditions have been updated, so the hash needs updating\nhashlock_tx['id'] = util.get_hash_data(hashlock_tx)\n\n# The asset needs to be signed by the owner_before\nhashlock_tx_signed = b.sign_transaction(hashlock_tx, b.me_private)\n\n# Some validations\nassert b.validate_transaction(hashlock_tx_signed) == hashlock_tx_signed\n\nb.write_transaction(hashlock_tx_signed)\nhashlock_tx_signed\n```\n\n----------------------------------------\n\nTITLE: Asset Transfer Transaction in BigchainDB\nDESCRIPTION: Demonstrates how to transfer divisible assets between parties. Shows transfer of 2 tokens while returning remaining 8 tokens to original owner.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/usage.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntransfer_input = {\n    'fulfillment': output['condition']['details'],\n    'fulfills': {\n        'output_index': output_index,\n        'transaction_id': fulfilled_token_tx['id'],\n    },\n    'owners_before': output['public_keys'],\n}\n\ntransfer_asset = {\n    'id': fulfilled_token_tx['id'],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Transaction with Timeout Condition in Python with BigchainDB\nDESCRIPTION: This code demonstrates how to create a transaction with a timeout condition in BigchainDB. The transaction becomes invalid after a specified expiration time (12 seconds from creation). The code sets up the condition, appends it to the transaction outputs, updates the hash, signs, validates, and writes the transaction.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-usage.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Set expiry time - the asset needs to be transfered before expiration\ntime_sleep = 12\ntime_expire = str(float(util.timestamp()) + time_sleep)  # 12 secs from now\ncondition_timeout = cc.TimeoutFulfillment(expire_time=time_expire)\n\n# The conditions list is empty, so we need to append a new condition\ntx_timeout['outputs'].append({\n    'condition': {\n        'details': condition_timeout.to_dict(),\n        'uri': condition_timeout.condition.serialize_uri()\n    },\n    'public_keys': None\n})\n\n# Conditions have been updated, so the hash needs updating\ntx_timeout['id'] = util.get_hash_data(tx_timeout)\n\n# The asset needs to be signed by the owner_before\ntx_timeout_signed = b.sign_transaction(tx_timeout, b.me_private)\n\n# Some validations\nassert b.validate_transaction(tx_timeout_signed) == tx_timeout_signed\n\nb.write_transaction(tx_timeout_signed)\ntx_timeout_signed\n```\n\n----------------------------------------\n\nTITLE: Implementing Escrow Mechanism with Cryptoconditions in Python\nDESCRIPTION: This code shows the conceptual implementation of an escrow condition using threshold cryptoconditions. It demonstrates how to switch between execute and abort conditions based on a timeout, allowing conditional release of assets without a trusted third party.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-usage.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nif timeout_condition.validate(utcnow()):\n    execute_fulfillment.validate(msg) == True\n    abort_fulfillment.validate(msg) == False\nelse:\n    execute_fulfillment.validate(msg) == False\n    abort_fulfillment.validate(msg) == True\n```\n\n----------------------------------------\n\nTITLE: Transferring a Digital Asset in BigchainDB using Python\nDESCRIPTION: Demonstrates how to transfer a digital asset from one user to another by preparing a TRANSFER transaction, signing it, and sending it to the BigchainDB network. It includes constructing the input from a previous transaction.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-usage.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\noutput_index = 0\noutput = signed_tx['outputs'][output_index]\n\ninput_ = {\n    'fulfillment': output['condition']['details'],\n    'fulfills': {\n        'output_index': output_index,\n        'transaction_id': signed_tx['id'],\n    },\n    'owners_before': output['public_keys'],\n}\n\ntransfer_asset_id = signed_tx['id']\ntransfer_asset = {\n    'id': transfer_asset_id,\n}\n\nbob = generate_keypair()\n\ntx_transfer = bdb.transactions.prepare(\n    operation='TRANSFER',\n    inputs=input_,\n    asset=transfer_asset,\n    recipients=bob.public_key,\n)\n\nsigned_tx_transfer = bdb.transactions.fulfill(\n    tx_transfer,\n    private_keys=alice.private_key,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Threshold Signature Condition with Multiple Parties in BigchainDB\nDESCRIPTION: This code snippet shows how to create a CREATE transaction with a threshold condition requiring signatures from multiple parties (Alice and Bob). It demonstrates the use of crypto-conditions to set up a threshold signature scheme and properly serialize the transaction.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\n# CRYPTO-CONDITIONS: add alice ed25519 to the threshold SHA 256 condition\nthreshold_sha256.add_subfulfillment(alice_ed25519)\n\n# CRYPTO-CONDITIONS: add bob ed25519 to the threshold SHA 256 condition\nthreshold_sha256.add_subfulfillment(bob_ed25519)\n\n# CRYPTO-CONDITIONS: generate the condition uri\ncondition_uri = threshold_sha256.condition.serialize_uri()\n\n# CRYPTO-CONDITIONS: get the unsigned fulfillment dictionary (details)\ncondition_details = {\n    'subconditions': [\n        {'type': s['body'].TYPE_NAME,\n         'public_key': base58.b58encode(s['body'].public_key).decode()}\n        for s in threshold_sha256.subconditions\n        if (s['type'] == 'fulfillment' and\n            s['body'].TYPE_NAME == 'ed25519-sha-256')\n    ],\n    'threshold': threshold_sha256.threshold,\n    'type': threshold_sha256.TYPE_NAME,\n}\n\noutput = {\n    'amount': '1',\n    'condition': {\n        'details': condition_details,\n        'uri': condition_uri,\n    },\n    'public_keys': (alice.public_key, bob.public_key),\n}\n\n# The yet to be fulfilled input:\ninput_ = {\n    'fulfillment': None,\n    'fulfills': None,\n    'owners_before': (alice.public_key,),\n}\n\n# Craft the payload:\nhandcrafted_car_creation_tx = {\n    'operation': 'CREATE',\n    'asset': car_asset,\n    'metadata': None,\n    'outputs': (output,),\n    'inputs': (input_,),\n    'version': version,\n    'id': None,\n}\n\n# JSON: serialize the transaction-without-id to a json formatted string\nmessage = json.dumps(\n    handcrafted_car_creation_tx,\n    sort_keys=True,\n    separators=(',', ':'),\n    ensure_ascii=False,\n)\n\nmessage = sha3.sha3_256(message.encode())\n\n# CRYPTO-CONDITIONS: sign the serialized transaction-without-id\nalice_ed25519.sign(message.digest(), base58.b58decode(alice.private_key))\n\n# CRYPTO-CONDITIONS: generate the fulfillment uri\nfulfillment_uri = alice_ed25519.serialize_uri()\n\n# add the fulfillment uri (signature)\nhandcrafted_car_creation_tx['inputs'][0]['fulfillment'] = fulfillment_uri\n\n# JSON: serialize the id-less transaction to a json formatted string\n# Generate the id, by hashing the encoded json formatted string representation of\n# the transaction:\njson_str_tx = json.dumps(\n    handcrafted_car_creation_tx,\n    sort_keys=True,\n    separators=(',', ':'),\n    ensure_ascii=False,\n)\n\n# SHA3: hash the serialized id-less transaction to generate the id\ncar_creation_txid = sha3.sha3_256(json_str_tx.encode()).hexdigest()\n\n# add the id\nhandcrafted_car_creation_tx['id'] = car_creation_txid\n```\n\n----------------------------------------\n\nTITLE: Creating a TRANSFER Transaction in BigchainDB\nDESCRIPTION: This code demonstrates how to create a TRANSFER transaction that transfers an asset from jointly owned by Alice and Bob to Carol. It shows the creation of transaction inputs that reference the previous transaction and outputs with new ownership conditions.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nversion = '2.0'\n\ncarol = generate_keypair()\n\nalice_ed25519 = Ed25519Sha256(public_key=base58.b58decode(alice.public_key))\n\nbob_ed25519 = Ed25519Sha256(public_key=base58.b58decode(bob.public_key))\n\ncarol_ed25519 = Ed25519Sha256(public_key=base58.b58decode(carol.public_key))\n\ncondition_uri = carol_ed25519.condition.serialize_uri()\n\noutput = {\n    'amount': '1',\n    'condition': {\n        'details': {\n            'type': carol_ed25519.TYPE_NAME,\n            'public_key': base58.b58encode(carol_ed25519.public_key).decode(),\n        },\n        'uri': condition_uri,\n    },\n    'public_keys': (carol.public_key,),\n}\n\n# The yet to be fulfilled input:\ninput_ = {\n    'fulfillment': None,\n    'fulfills': {\n        'transaction_id': handcrafted_car_creation_tx['id'],\n        'output_index': 0,\n    },\n    'owners_before': (alice.public_key, bob.public_key),\n}\n\n# Craft the payload:\nhandcrafted_car_transfer_tx = {\n    'operation': 'TRANSFER',\n    'asset': {'id': handcrafted_car_creation_tx['id']},\n    'metadata': None,\n    'outputs': (output,),\n    'inputs': (input_,),\n    'version': version,\n    'id': None,\n}\n\n# Sign the transaction:\nmessage = json.dumps(\n    handcrafted_car_transfer_tx,\n    sort_keys=True,\n    separators=(',', ':'),\n    ensure_ascii=False,\n)\n\nmessage = sha3.sha3_256(message.encode())\n\nmessage.update('{}{}'.format(\n    handcrafted_car_transfer_tx['inputs'][0]['fulfills']['transaction_id'],\n    handcrafted_car_transfer_tx['inputs'][0]['fulfills']['output_index']).encode())\n\nthreshold_sha256 = ThresholdSha256(threshold=1)\n\nalice_ed25519.sign(message.digest(),\n                   private_key=base58.b58decode(alice.private_key))\n\nthreshold_sha256.add_subfulfillment(alice_ed25519)\n\nthreshold_sha256.add_subcondition(bob_ed25519.condition)\n\nfulfillment_uri = threshold_sha256.serialize_uri()\n\nhandcrafted_car_transfer_tx['inputs'][0]['fulfillment'] = fulfillment_uri\n\n# Generate the id, by hashing the encoded json formatted string\n# representation of the transaction:\njson_str_tx = json.dumps(\n    handcrafted_car_transfer_tx,\n    sort_keys=True,\n    separators=(',', ':'),\n    ensure_ascii=False,\n)\n\ncar_transfer_txid = sha3.sha3_256(json_str_tx.encode()).hexdigest()\n\nhandcrafted_car_transfer_tx['id'] = car_transfer_txid\n```\n\n----------------------------------------\n\nTITLE: Creating a Token Transfer Transaction in BigchainDB\nDESCRIPTION: Example of handcrafting a TRANSFER transaction to split a divisible asset, sending 2 tokens to Bob while Carly keeps 8 tokens. Demonstrates creating multiple outputs with different amounts.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# CRYPTO-CONDITIONS: instantiate an Ed25519 crypto-condition for carly\nbob_ed25519 = Ed25519Sha256(public_key=base58.b58decode(bob.public_key))\n\n# CRYPTO-CONDITIONS: instantiate an Ed25519 crypto-condition for carly\ncarly_ed25519 = Ed25519Sha256(public_key=base58.b58decode(carly.public_key))\n\n# CRYPTO-CONDITIONS: generate the condition uris\nbob_condition_uri = bob_ed25519.condition.serialize_uri()\ncarly_condition_uri = carly_ed25519.condition.serialize_uri()\n\n# CRYPTO-CONDITIONS: get the unsigned fulfillment dictionary (details)\nbob_unsigned_fulfillment_dict = {\n    'type': bob_ed25519.TYPE_NAME,\n    'public_key': base58.b58encode(bob_ed25519.public_key).decode(),\n}\n\ncarly_unsigned_fulfillment_dict = {\n    'type': carly_ed25519.TYPE_NAME,\n    'public_key': base58.b58encode(carly_ed25519.public_key).decode(),\n}\n\nbob_output = {\n    'amount': '2',\n    'condition': {\n        'details': bob_unsigned_fulfillment_dict,\n        'uri': bob_condition_uri,\n    },\n    'public_keys': (bob.public_key,),\n}\n\ncarly_output = {\n    'amount': '8',\n    'condition': {\n        'details': carly_unsigned_fulfillment_dict,\n        'uri': carly_condition_uri,\n    },\n    'public_keys': (carly.public_key,),\n}\n\ninput_ = {\n    'fulfillment': None,\n    'fulfills': {\n        'transaction_id': token_creation_tx['id'],\n        'output_index': 0,\n    },\n    'owners_before': (carly.public_key,)\n}\n\ntoken_transfer_tx = {\n    'operation': 'TRANSFER',\n    'asset': {'id': token_creation_tx['id']},\n    'metadata': None,\n    'outputs': (bob_output, carly_output),\n    'inputs': (input_,),\n    'version': version,\n    'id': None,\n}\n\n# JSON: serialize the transaction-without-id to a json formatted string\nmessage = json.dumps(\n    token_transfer_tx,\n    sort_keys=True,\n    separators=(',', ':'),\n    ensure_ascii=False,\n)\n\nmessage = sha3.sha3_256(message.encode())\n\nmessage.update('{}{}'.format(\n    token_transfer_tx['inputs'][0]['fulfills']['transaction_id'],\n    token_transfer_tx['inputs'][0]['fulfills']['output_index']).encode()\n)\n\n# CRYPTO-CONDITIONS: sign the serialized transaction-without-id for bob\ncarly_ed25519.sign(message.digest(), base58.b58decode(carly.private_key))\n\n# CRYPTO-CONDITIONS: generate bob's fulfillment uri\nfulfillment_uri = carly_ed25519.serialize_uri()\n\n# add bob's fulfillment uri (signature)\ntoken_transfer_tx['inputs'][0]['fulfillment'] = fulfillment_uri\n\n# JSON: serialize the id-less transaction to a json formatted string\njson_str_tx = json.dumps(\n    token_transfer_tx,\n    sort_keys=True,\n    separators=(',', ':'),\n    ensure_ascii=False,\n)\n\n# SHA3: hash the serialized id-less transaction to generate the id\nshared_transfer_txid = sha3.sha3_256(json_str_tx.encode()).hexdigest()\n\n# add the id\ntoken_transfer_tx['id'] = shared_transfer_txid\n```\n\n----------------------------------------\n\nTITLE: Creating and Fulfilling an Escrow Abort Transaction with BigchainDB\nDESCRIPTION: This snippet demonstrates how to create an abort transaction for an escrow arrangement with timeout conditions. It shows how to parse threshold cryptoconditions, sign the appropriate fulfillments, and structure the transaction to become valid after a timeout expires.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-usage.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Create a base template for execute fulfillment\ntx_escrow_abort = b.create_transaction(\n    [bob.public_key, alice.public_key],\n    bob.public_key,\n    {'transaction_id': tx_escrow_signed['id'], 'output_index': 0},\n    'TRANSFER'\n)\n\n# Parse the threshold cryptocondition\nescrow_fulfillment = cc.Fulfillment.from_dict(\n    tx_escrow['outputs'][0]['condition']['details'])\n\nsubfulfillment_alice = escrow_fulfillment.get_subcondition_from_vk(alice.public_key)[0]\nsubfulfillment_bob = escrow_fulfillment.get_subcondition_from_vk(bob.public_key)[0]\nsubfulfillment_timeout = escrow_fulfillment.subconditions[0]['body'].subconditions[1]['body']\nsubfulfillment_timeout_inverted = escrow_fulfillment.subconditions[1]['body'].subconditions[1]['body']\n\n# Get the fulfillment message to sign\ntx_escrow_abort_fulfillment_message = \\\n    util.get_fulfillment_message(tx_escrow_abort,\n                                 tx_escrow_abort['inputs'][0],\n                                 serialized=True)\n\n# Clear the subconditions of the escrow fulfillment\nescrow_fulfillment.subconditions = []\n\n# Do not fulfill the execute branch\ncondition_execute = cc.ThresholdSha256Fulfillment(threshold=2)\ncondition_execute.add_subfulfillment(subfulfillment_alice)\ncondition_execute.add_subfulfillment(subfulfillment_timeout)\nescrow_fulfillment.add_subcondition(condition_execute.condition) # Adding only the condition here\n\n# Fulfill the abort branch\nfulfillment_abort = cc.ThresholdSha256Fulfillment(threshold=2)\nsubfulfillment_bob.sign(tx_escrow_abort_fulfillment_message, crypto.SigningKey(bob.private_key))\nfulfillment_abort.add_subfulfillment(subfulfillment_bob)\nfulfillment_abort.add_subfulfillment(subfulfillment_timeout_inverted)\nescrow_fulfillment.add_subfulfillment(fulfillment_abort)\n\n# Update the abort transaction with the fulfillment\ntx_escrow_abort['inputs'][0]['fulfillment'] = escrow_fulfillment.serialize_uri()\n```\n\n----------------------------------------\n\nTITLE: Crafting Complete CREATE Transaction Payload\nDESCRIPTION: This snippet demonstrates how to manually assemble all components of a CREATE transaction, including version, operation type, asset, inputs, and outputs.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nversion = '2.0'\n\nhandcrafted_car_creation_tx = {\n    'operation': 'CREATE',\n    'asset': car_asset,\n    'metadata': None,\n    'outputs': (output,),\n    'inputs': (input_,),\n    'version': version,\n    'id': None,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Preparing Asset Transactions with BigchainDB Python Driver\nDESCRIPTION: This snippet shows how to create an asset representing a car, prepare a CREATE transaction with the offchain module, and fulfill (sign) the transaction using the private key.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ncar_asset = {'data': {'car': {'vin': '5YJRE11B781000196'}}}\n\ncar_creation_tx = offchain.prepare_transaction(\n    operation='CREATE',\n    signers=alice.public_key,\n    recipients=(alice.public_key, bob.public_key),\n    asset=car_asset,\n)\n\nsigned_car_creation_tx = offchain.fulfill_transaction(\n    car_creation_tx,\n    private_keys=alice.private_key,\n)\n\nsigned_car_creation_tx\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Owner Asset\nDESCRIPTION: Example of creating an asset with multiple owners by specifying multiple recipients and signers during transaction creation.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-usage.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom bigchaindb_driver import BigchainDB\nfrom bigchaindb_driver.crypto import generate_keypair\n\nbdb_root_url = 'https://example.com:9984'\nbdb = BigchainDB(bdb_root_url)\n\nalice, bob = generate_keypair(), generate_keypair()\n\ncar_asset = {\n    'data': {\n        'car': {\n            'vin': '5YJRE11B781000196'\n        }\n    }\n}\ncar_creation_tx = bdb.transactions.prepare(\n    operation='CREATE',\n    signers=(alice.public_key, bob.public_key),\n    recipients=(alice.public_key, bob.public_key),\n    asset=car_asset,\n)\nsigned_car_creation_tx = bdb.transactions.fulfill(\n    car_creation_tx,\n    private_keys=[alice.private_key, bob.private_key],\n)\nsent_car_tx = bdb.transactions.send_commit(signed_car_creation_tx)\n```\n\n----------------------------------------\n\nTITLE: Transferring Assets with Threshold Fulfillment in Python\nDESCRIPTION: This snippet illustrates transferring assets under a threshold condition by creating a new transaction and fulfilling subconditions. It demonstrates how to handle fulfillments using keypairs and the BigchainDB API. Preconditions include successful execution of cryptographic conditions as outlined in the code and the BigchainDB driver for executing transactions.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-usage.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Create a new testuser to receive\nthresholduser4 = generate_keypair()\n\n# Retrieve the last transaction of thresholduser1_pub\ntx_retrieved_id = b.get_owned_ids(thresholduser1.public_key).pop()\n\n# Create a base template for a 2-input/1-output transaction\nthreshold_tx_transfer = b.create_transaction(\n    [thresholduser1.public_key,\n     thresholduser2.public_key,\n     thresholduser3.public_key],\n    thresholduser4.public_key,\n    tx_retrieved_id,\n    'TRANSFER'\n)\n\n# Parse the threshold cryptocondition\nthreshold_fulfillment = cc.Fulfillment.from_dict(\n    threshold_tx['outputs'][0]['condition']['details'])\n\nsubfulfillment1 = threshold_fulfillment.get_subcondition_from_vk(thresholduser1.public_key)[0]\nsubfulfillment2 = threshold_fulfillment.get_subcondition_from_vk(thresholduser2.public_key)[0]\nsubfulfillment3 = threshold_fulfillment.get_subcondition_from_vk(thresholduser3.public_key)[0]\n\n\n# Get the fulfillment message to sign\nthreshold_tx_fulfillment_message = util.get_fulfillment_message(\n    threshold_tx_transfer,\n    threshold_tx_transfer['inputs'][0],\n    serialized=True\n)\n\n# Clear the subconditions of the threshold fulfillment, they will be added again after signing\nthreshold_fulfillment.subconditions = []\n\n# Sign and add the subconditions until threshold of 2 is reached\nsubfulfillment1.sign(threshold_tx_fulfillment_message, crypto.SigningKey(thresholduser1_priv))\nthreshold_fulfillment.add_subfulfillment(subfulfillment1)\nsubfulfillment2.sign(threshold_tx_fulfillment_message, crypto.SigningKey(thresholduser2_priv))\nthreshold_fulfillment.add_subfulfillment(subfulfillment2)\n\n# Add remaining (unfulfilled) fulfillment as a condition\nthreshold_fulfillment.add_subcondition(subfulfillment3.condition)\n\n# Update the fulfillment\nthreshold_tx_transfer['inputs'][0]['fulfillment'] = threshold_fulfillment.serialize_uri()\n\n# Optional validation checks\nassert threshold_fulfillment.validate(threshold_tx_fulfillment_message) == True\nassert b.validate_fulfillments(threshold_tx_transfer) == True\nassert b.validate_transaction(threshold_tx_transfer)\n\nb.write_transaction(threshold_tx_transfer)\nthreshold_tx_transfer\n```\n\n----------------------------------------\n\nTITLE: Creating Handcrafted Transfer Transaction\nDESCRIPTION: This snippet illustrates how to create a handcrafted transfer transaction dictionary structure. It includes mandatory fields such as asset ID, metadata, and conditions related to the output and input properties. The dependencies include json and cryptoconditions.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nhandcrafted_transfer_tx = {\n    'asset': asset,\n    'metadata': metadata,\n    'operation': operation,\n    'outputs': outputs,\n    'inputs': inputs,\n    'version': version,\n    'id': None,\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Creating a TRANSFER Transaction\nDESCRIPTION: This series of snippets shows the complete process of manually creating a TRANSFER transaction to transfer car ownership to Carol, including setting up cryptographic conditions for the new owner.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nalice_ed25519 = Ed25519Sha256(public_key=base58.b58decode(alice.public_key))\n\nbob_ed25519 = Ed25519Sha256(public_key=base58.b58decode(bob.public_key))\n\ncarol_ed25519 = Ed25519Sha256(public_key=base58.b58decode(carol.public_key))\n\nunsigned_fulfillments_dict = {\n    'type': carol_ed25519.TYPE_NAME,\n    'public_key': base58.b58encode(carol_ed25519.public_key).decode(),\n}\n\ncondition_uri = carol_ed25519.condition.serialize_uri()\n\noutput = {\n    'amount': '1',\n    'condition': {\n        'details': unsigned_fulfillments_dict,\n        'uri': condition_uri,\n    },\n    'public_keys': (carol.public_key,),\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Transfer Transaction with BigchainDB Driver\nDESCRIPTION: This snippet prepares a transfer transaction by defining its properties, including the operation type, asset details, and the transaction recipients. Dependencies include the BigchainDB Driver's prepare_transaction and fulfill_transaction functions.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntransfer_asset = { 'id': creation_tx['id'], }\nprepared_transfer_tx = prepare_transaction(\n    operation='TRANSFER',\n    asset=transfer_asset,\n    inputs=transfer_input,\n    recipients=bob.public_key,\n)\n```\n\n----------------------------------------\n\nTITLE: Transferring Asset Ownership in BigchainDB\nDESCRIPTION: This code demonstrates how to transfer ownership of a previously created asset to a new owner (Carol). It involves preparing the input from the previous transaction and creating a TRANSFER transaction.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ncarol = generate_keypair()\n\noutput_index = 0\n\noutput = signed_car_creation_tx['outputs'][output_index]\n\ninput_ = {\n    'fulfillment': output['condition']['details'],\n    'fulfills': {\n        'output_index': output_index,\n        'transaction_id': signed_car_creation_tx['id'],\n    },\n    'owners_before': output['public_keys'],\n}\n\nasset = signed_car_creation_tx['id']\n\ncar_transfer_tx = offchain.prepare_transaction(\n    operation='TRANSFER',\n    recipients=carol.public_key,\n    asset={'id': asset},\n    inputs=input_,\n)\n\nsigned_car_transfer_tx = offchain.fulfill_transaction(\n    car_transfer_tx, private_keys=[alice.private_key, bob.private_key]\n)\n\nsigned_car_transfer_tx\n```\n\n----------------------------------------\n\nTITLE: Generating Crypto-Conditions for Transaction Outputs\nDESCRIPTION: Example showing how to create crypto-conditions using Ed25519Sha256 for transaction outputs, including condition details and URI generation.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cryptoconditions import Ed25519Sha256\n\ned25519 = Ed25519Sha256(public_key=base58.b58decode(alice.public_key))\n\noutput = {\n    'amount': '1',\n    'condition': {\n        'details': {\n            'type': ed25519.TYPE_NAME,\n            'public_key': base58.b58encode(ed25519.public_key).decode(),\n        },\n        'uri': ed25519.condition_uri,\n    },\n    'public_keys': (alice.public_key,),\n}\n\noutputs = (output,)\n```\n\n----------------------------------------\n\nTITLE: Multi-Signing a TRANSFER Transaction\nDESCRIPTION: This code demonstrates how to apply multiple signatures to a TRANSFER transaction using a threshold condition, which requires signatures from both Alice and Bob to be valid.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nmessage = json.dumps(\n    handcrafted_car_transfer_tx,\n    sort_keys=True,\n    separators=(',', ':'),\n    ensure_ascii=False,\n)\n\nthreshold_sha256 = ThresholdSha256(threshold=2)\n\nalice_ed25519.sign(message=message.encode(),\n    private_key=base58.b58decode(alice.private_key))\n\nbob_ed25519.sign(message=message.encode(),\n    private_key=base58.b58decode(bob.private_key))\n\nthreshold_sha256.add_subfulfillment(alice_ed25519)\n\nthreshold_sha256.add_subfulfillment(bob_ed25519)\n\nfulfillment_uri = threshold_sha256.serialize_uri()\n\nhandcrafted_car_transfer_tx['inputs'][0]['fulfillment'] = fulfillment_uri\n```\n\n----------------------------------------\n\nTITLE: Creating Unfulfilled Input for CREATE Transaction\nDESCRIPTION: This code defines an unfulfilled input structure for a CREATE transaction, which will be populated with the fulfillment (signature) later in the process.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ninput_ = {\n    'fulfillment': None,\n    'fulfills': None,\n    'owners_before': (alice.public_key,),\n}\n```\n\n----------------------------------------\n\nTITLE: Fulfilling Transfer Transaction\nDESCRIPTION: This snippet fulfills a prepared transfer transaction by using the fulfill_transaction function. It requires the prepared transaction and private keys for signing. This is a critical step to authorize the transaction on the blockchain.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfulfilled_transfer_tx = fulfill_transaction(\n    prepared_transfer_tx,\n    private_keys=alice.private_key,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Divisible Tokens in BigchainDB\nDESCRIPTION: Creates a time-sharing token for a bicycle where each token represents one hour of riding time. Demonstrates how to create divisible assets by issuing multiple tokens to a recipient.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/usage.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbicycle_token = {\n    'data': {\n        'token_for': {\n            'bicycle': {\n                'serial_number': 'abcd1234',\n                'manufacturer': 'bkfab'\n            }\n        },\n        'description': 'Time share token. Each token equals one hour of riding.',\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Multi-Signature Condition for Transaction Output\nDESCRIPTION: This code demonstrates how to manually create a threshold condition (requiring multiple signatures) for a transaction output using the cryptoconditions library.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nalice_ed25519 = Ed25519Sha256(public_key=base58.b58decode(alice.public_key))\n\nbob_ed25519 = Ed25519Sha256(public_key=base58.b58decode(bob.public_key))\n\nthreshold_sha256 = ThresholdSha256(threshold=2)\n\nthreshold_sha256.add_subfulfillment(alice_ed25519)\n\nthreshold_sha256.add_subfulfillment(bob_ed25519)\n\ncondition_uri = threshold_sha256.condition.serialize_uri()\n\ncondition_details = {\n    'subconditions': [\n        {'type': s['body'].TYPE_NAME,\n         'public_key': base58.b58encode(s['body'].public_key).decode()}\n        for s in threshold_sha256.subconditions\n        if (s['type'] == 'fulfillment' and\n            s['body'].TYPE_NAME == 'ed25519-sha-256')\n     ],\n    'threshold': threshold_sha256.threshold,\n    'type': threshold_sha256.TYPE_NAME,\n}\n\noutput = {\n    'amount': '1',\n    'condition': {\n        'details': condition_details,\n        'uri': condition_uri,\n    },\n    'public_keys': (alice.public_key, bob.public_key),\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Transaction Object in Python\nDESCRIPTION: Shows how to create a basic transaction structure with asset, metadata, operations and other required fields.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nhandcrafted_creation_tx = {\n    'asset': asset,\n    'metadata': metadata,\n    'operation': operation,\n    'outputs': outputs,\n    'inputs': inputs,\n    'version': version,\n    'id': None,\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Transaction Timeout Validation in Python with BigchainDB\nDESCRIPTION: This code snippet demonstrates how to test the validity of a transaction with a timeout condition over time. It creates a transfer transaction that will become invalid after the timeout period, and checks its validity status at regular intervals to show how it transitions from valid to invalid.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-usage.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom time import sleep\n\n# Create a timeout fulfillment tx\ntx_timeout_transfer = b.create_transaction(None, alice.public_key, {'transaction_id': tx_timeout['id'], 'output_index': 0}, 'TRANSFER')\n\n# Parse the timeout condition and create the corresponding fulfillment\ntimeout_fulfillment = cc.Fulfillment.from_dict(\n    tx_timeout['outputs'][0]['condition']['details'])\ntx_timeout_transfer['inputs'][0]['fulfillment'] = timeout_fulfillment.serialize_uri()\n\n# No need to sign transaction, like with hashlocks\n\n# Small test to see the state change\nfor i in range(time_sleep - 4):\n    tx_timeout_valid = b.is_valid_transaction(tx_timeout_transfer) == tx_timeout_transfer\n    seconds_to_timeout = int(float(time_expire) - float(util.timestamp()))\n    print('tx_timeout valid: {} ({}s to timeout)'.format(tx_timeout_valid, seconds_to_timeout))\n    sleep(1)\n```\n\n----------------------------------------\n\nTITLE: Creating an Execute Fulfillment for Escrow Condition in BigchainDB\nDESCRIPTION: This code shows how to create an execute fulfillment for an escrow condition in BigchainDB. Alice attempts to fulfill the execute branch of the escrow by providing her signature along with the timeout condition, allowing her to claim the escrowed asset before the timeout expires.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-usage.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Create a base template for execute fulfillment\ntx_escrow_execute = b.create_transaction([bob.public_key, alice.public_key], alice.public_key, {'transaction_id': tx_escrow_signed['id'], 'output_index': 0}, 'TRANSFER')\n\n# Parse the Escrow cryptocondition\nescrow_fulfillment = cc.Fulfillment.from_dict(\n    tx_escrow['outputs'][0]['condition']['details'])\n\nsubfulfillment_alice = escrow_fulfillment.get_subcondition_from_vk(alice.public_key)[0]\nsubfulfillment_bob = escrow_fulfillment.get_subcondition_from_vk(bob.public_key)[0]\nsubfulfillment_timeout = escrow_fulfillment.subconditions[0]['body'].subconditions[1]['body']\nsubfulfillment_timeout_inverted = escrow_fulfillment.subconditions[1]['body'].subconditions[1]['body']\n\n# Get the fulfillment message to sign\ntx_escrow_execute_fulfillment_message = \\\n    util.get_fulfillment_message(tx_escrow_execute,\n                                 tx_escrow_execute['inputs'][0],\n                                 serialized=True)\n\n# Clear the subconditions of the escrow fulfillment\nescrow_fulfillment.subconditions = []\n\n# Fulfill the execute branch\nfulfillment_execute = cc.ThresholdSha256Fulfillment(threshold=2)\nsubfulfillment_alice.sign(tx_escrow_execute_fulfillment_message, crypto.SigningKey(alice.private_key))\nfulfillment_execute.add_subfulfillment(subfulfillment_alice)\nfulfillment_execute.add_subfulfillment(subfulfillment_timeout)\nescrow_fulfillment.add_subfulfillment(fulfillment_execute)\n\n# Do not fulfill the abort branch\ncondition_abort = cc.ThresholdSha256Fulfillment(threshold=2)\ncondition_abort.add_subfulfillment(subfulfillment_bob)\ncondition_abort.add_subfulfillment(subfulfillment_timeout_inverted)\nescrow_fulfillment.add_subcondition(condition_abort.condition)  # Adding only the condition here\n\n# Update the execute transaction with the fulfillment\ntx_escrow_execute['inputs'][0]['fulfillment'] = escrow_fulfillment.serialize_uri()\n```\n\n----------------------------------------\n\nTITLE: Signing and Fulfilling a Transaction Manually\nDESCRIPTION: This code shows how to manually sign a transaction using the private key and add the fulfillment URI to the transaction input, completing the signature process.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nmessage = json.dumps(\n    handcrafted_car_creation_tx,\n    sort_keys=True,\n    separators=(',', ':'),\n    ensure_ascii=False,\n)\n\nalice_ed25519.sign(message.encode(), base58.b58decode(alice.private_key))\n\nfulfillment_uri = alice_ed25519.serialize_uri()\n\nhandcrafted_car_creation_tx['inputs'][0]['fulfillment'] = fulfillment_uri\n```\n\n----------------------------------------\n\nTITLE: Verifying Token Creation Transaction Results\nDESCRIPTION: A series of checks to verify that the token creation transaction was successful, confirming transaction equality and validating the correct ownership and token amount.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> json.dumps(returned_creation_tx, sort_keys=True) == json.dumps(token_creation_tx, sort_keys=True)\nTrue\n\n>>> token_creation_tx['inputs'][0]['owners_before'][0] == bob.public_key\nTrue\n\n>>> token_creation_tx['outputs'][0]['public_keys'][0] == carly.public_key\nTrue\n\n>>> token_creation_tx['outputs'][0]['amount'] == '10'\nTrue\n```\n\n----------------------------------------\n\nTITLE: Crafting Complete TRANSFER Transaction Payload\nDESCRIPTION: This snippet assembles the full TRANSFER transaction structure with references to the original asset ID, inputs, outputs, and other required transaction fields.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nhandcrafted_car_transfer_tx = {\n    'operation': 'TRANSFER',\n    'asset': {'id': handcrafted_car_creation_tx['id']},\n    'metadata': None,\n    'outputs': (output,),\n    'inputs': (input_,),\n    'version': version,\n    'id': None,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Asset Transfer in BigchainDB\nDESCRIPTION: Code demonstrates transferring an asset by preparing a TRANSFER transaction, signing it with private keys, and committing it to the network.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-usage.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\noutput_index = 0\noutput = signed_tx['outputs'][output_index]\ninput_ = {\n    'fulfillment': output['condition']['details'],\n    'fulfills': {\n        'output_index': output_index,\n        'transaction_id': signed_tx['id'],\n    },\n    'owners_before': output['public_keys'],\n}\ntransfer_asset_id = signed_tx['id']\ntransfer_asset = {\n    'id': transfer_asset_id,\n}\nbob = generate_keypair()\ntx_transfer = bdb.transactions.prepare(\n    operation='TRANSFER',\n    inputs=input_,\n    asset=transfer_asset,\n    recipients=bob.public_key,\n)\nsigned_tx_transfer = bdb.transactions.fulfill(\n    tx_transfer,\n    private_keys=alice.private_key,\n)\nsent_tx_transfer = bdb.transactions.send_commit(signed_tx_transfer)\n```\n\n----------------------------------------\n\nTITLE: Querying Transactions by Asset ID and Operation in BigchainDB with Python\nDESCRIPTION: This snippet queries the BigchainDB for transactions that match a specific asset ID and operation type ('CREATE'). It utilizes the `bdb.transactions.get()` method to retrieve transactions associated with a shared bicycle token, limiting the results to only 'CREATE' operations.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/usage.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> bdb.transactions.get(asset_id=sent_token_tx['id'], operation='CREATE')\n    [{'asset': {'data': {'description': 'Time share token. Each token equals one '\n                                    'hour of riding.',\n                     'token_for': {'bicycle': {'manufacturer': 'bkfab',\n                                               'serial_number': 'abcd1234'}}}},\n    'id': 'b2403bb6bb7f9c0af2bc2b5b03b291a378fd8499f44cade4aa14dd5419e5b7c7',\n    'inputs': [{'fulfillment': 'pGSAIFetX0Fz6ZUN20tJp_dWJKs0_nDDz7oOmTaToGrzzw5zgUBPJsUGHcm8R-ntQSHvK3tgoyHIvCrrNrI6lJkud81cZKWFb9XehNAvWswPWSx1_6EwFKVYV-fjlxPvExm8XZIH',\n              'fulfills': None,\n              'owners_before': ['6uFoT6vd38qGqo2dRMBQsSojytUadyijBH4wgZGrPhZt']}],\n    'metadata': None,\n    'operation': 'CREATE',\n    'outputs': [{'amount': '10',\n               'condition': {'details': {'public_key': '8sKzvruHPhH3LKoGZDJE9MRzpgfFQJGZhzHTghebbFne',\n                                         'type': 'ed25519-sha-256'},\n                             'uri': 'ni:///sha-256;PN3UO9GztlEBitIZf5m4iYNgyexvOk6Sdjq3PANsxko?fpt=ed25519-sha-256&cost=131072'},\n               'public_keys': ['8sKzvruHPhH3LKoGZDJE9MRzpgfFQJGZhzHTghebbFne']}],\n    'version': '2.0'}]\n```\n\n----------------------------------------\n\nTITLE: Querying Assets in BigchainDB\nDESCRIPTION: Shows how to search for assets using text search functionality. Creates multiple assets and demonstrates querying with search terms and result limits.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/usage.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom bigchaindb_driver import BigchainDB\nfrom bigchaindb_driver.crypto import generate_keypair\n\nbdb_root_url = 'https://example.com:9984'\n\nbdb = BigchainDB(bdb_root_url)\n\nalice = generate_keypair()\n\nhello_1 = {'data': {'msg': 'Hello BigchainDB 1!'},}\nhello_2 = {'data': {'msg': 'Hello BigchainDB 2!'},}\nhello_3 = {'data': {'msg': 'Hello BigchainDB 3!'},}\n\nmetadata={'planet': 'earth'}\n```\n\n----------------------------------------\n\nTITLE: Generating Transaction ID Using SHA3-256 Hash\nDESCRIPTION: This snippet demonstrates how to generate a transaction ID by serializing the transaction to a canonical JSON format and calculating its SHA3-256 hash.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\njson_str_tx = json.dumps(\n    handcrafted_car_creation_tx,\n    sort_keys=True,\n    separators=(',', ':'),\n    ensure_ascii=False,\n)\n\ncar_creation_txid = sha3_256(json_str_tx.encode()).hexdigest()\n\nhandcrafted_car_creation_tx['id'] = car_creation_txid\n```\n\n----------------------------------------\n\nTITLE: Querying Metadata by Text Search in BigchainDB with Python\nDESCRIPTION: This snippet demonstrates how to query BigchainDB for metadata entries that contain a specific text string ('earth'). It utilizes the `bdb.metadata.get()` method to perform a text search across all metadata fields. The results include the transaction ID where the metadata was defined and are sorted by text score.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/usage.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>> bdb.metadata.get(search='earth')\n    [\n        {\n            'id': '3677de9c637e8e7848dd415058525306693d44cc3578d0ae4812e3570e9e6f9b',\n            'metadata': {'planet': 'earth'}\n        },\n        {\n            'id': 'd818741e0b9550dfe4b9ff0745c036664ab2b2e6e7d82a7508f2e79d587595ff',\n            'metadata': {'planet': 'earth'}\n        },\n        {\n            'id': '85a82b6fbceb08f79796cb0c286156aac25e92729d377220d65b14be90334c25',\n            'metadata': {'planet': 'earth'}\n        }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Creating Input Reference for TRANSFER Transaction\nDESCRIPTION: This code creates the input structure for a TRANSFER transaction, which references the specific output from the previous CREATE transaction that is being transferred.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ninput_ = {\n    'fulfillment': None,\n    'fulfills': {\n        'transaction_id': handcrafted_car_creation_tx['id'],\n        'output_index': 0,\n    },\n    'owners_before': (alice.public_key, bob.public_key),\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a BigchainDB Transaction with Different Broadcasting Modes\nDESCRIPTION: This code shows how to submit a handcrafted CREATE transaction to a BigchainDB network using the async broadcast API. The driver supports three modes: commit (waits for block commit), sync (returns after validation), and async (returns immediately).\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nfrom bigchaindb_driver import BigchainDB\n\nbdb = BigchainDB('http://bdb-server:9984')\nreturned_car_creation_tx = bdb.transactions.send_async(handcrafted_car_creation_tx)\n```\n\n----------------------------------------\n\nTITLE: Serializing and Signing Handcrafted Transaction\nDESCRIPTION: This snippet covers the serialization of the handcrafted transaction to JSON format and creating the transaction ID using sha3 hashing. It also includes signing the transaction using Ed25519 and updating the fulfillment URI.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\njson_str_handcrafted_tx = json.dumps(handcrafted_transfer_tx, sort_keys=True)\nmessage = sha3_256(json_str_handcrafted_tx.encode())\nmessage.update('{}{}'.format(\n    handcrafted_transfer_tx['inputs'][0]['fulfills']['transaction_id'],\n    handcrafted_transfer_tx['inputs'][0]['fulfills']['output_index']).encode())\ned25519.sign(message.digest(), base58.b58decode(alice.private_key))\nfulfillment_uri = ed25519.serialize_uri()\nhandcrafted_transfer_tx['inputs'][0]['fulfillment'] = fulfillment_uri\n```\n\n----------------------------------------\n\nTITLE: Sending a Transaction to BigchainDB Server\nDESCRIPTION: This snippet demonstrates how to initialize a BigchainDB client and send the previously created transaction to a BigchainDB server using the async method. The driver provides different sending methods based on Tendermint's broadcast API.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nfrom bigchaindb_driver import BigchainDB\n\nbdb = BigchainDB('http://bdb-server:9984')\nreturned_car_creation_tx = bdb.transactions.send_async(handcrafted_car_creation_tx)\n```\n\n----------------------------------------\n\nTITLE: Preparing Asset Creation Transaction Components\nDESCRIPTION: Code showing how to prepare individual components of a CREATE transaction including asset definition and metadata.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbicycle = {\n    'data': {\n        'bicycle': {\n            'serial_number': 'abcd1234',\n            'manufacturer': 'bkfab',\n        },\n    },\n}\n\nmetadata = {'planet': 'earth'}\n\nprepared_creation_tx = prepare_transaction(\n    operation='CREATE',\n    signers=alice.public_key,\n    asset=bicycle,\n    metadata=metadata,\n)\n```\n\n----------------------------------------\n\nTITLE: Fulfilling Hash-Lock Transactions in Python\nDESCRIPTION: This snippet demonstrates how to fulfill a hash-lock condition by creating a proper transaction with the right secret preimage. It includes the validation and writing of the transaction to the blockchain. The BigchainDB driver and cryptoconditions library are necessary to construct and fulfill these conditions.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-usage.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nhashlockuser = crypto.generate_keypair()\n\n# Create hashlock fulfillment tx\nhashlock_fulfill_tx = b.create_transaction(\n    None,\n    hashlockuser.public_key,\n    {'transaction_id': hashlock_tx['id'], 'output_index': 0},\n    'TRANSFER'\n)\n\n# Provide a wrong secret\nhashlock_fulfill_tx_fulfillment = cc.PreimageSha256Fulfillment(preimage=b'')\nhashlock_fulfill_tx['inputs'][0]['fulfillment'] = \\\n    hashlock_fulfill_tx_fulfillment.serialize_uri()\n\nassert b.is_valid_transaction(hashlock_fulfill_tx) == False\n\n# Provide the right secret\nhashlock_fulfill_tx_fulfillment = cc.PreimageSha256Fulfillment(preimage=secret)\nhashlock_fulfill_tx['inputs'][0]['fulfillment'] = \\\n    hashlock_fulfill_tx_fulfillment.serialize_uri()\n\nassert b.validate_transaction(hashlock_fulfill_tx) == hashlock_fulfill_tx\n\nb.write_transaction(hashlock_fulfill_tx)\nhashlock_fulfill_tx\n```\n\n----------------------------------------\n\nTITLE: Sending a Transaction with BigchainDB Python Driver\nDESCRIPTION: Example of how to send a previously handcrafted transaction to a BigchainDB server using the asynchronous mode. The async mode returns immediately without waiting for transaction validation or commitment.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom bigchaindb_driver import BigchainDB\n\nbdb = BigchainDB('http://bdb-server:9984')\nreturned_transfer_tx = bdb.transactions.send_async(handcrafted_transfer_tx)\n```\n\n----------------------------------------\n\nTITLE: Sending Transaction to BigchainDB\nDESCRIPTION: Example showing how to send a transaction to a BigchainDB node using different broadcast modes (async, sync, commit).\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom bigchaindb_driver import BigchainDB\n\nbdb = BigchainDB('http://bdb-server:9984')\nreturned_creation_tx = bdb.transactions.send_async(handcrafted_creation_tx)\n```\n\n----------------------------------------\n\nTITLE: Sending a TRANSFER Transaction to BigchainDB\nDESCRIPTION: This code shows how to submit a handcrafted TRANSFER transaction to a BigchainDB network using the async broadcast API. The same options for broadcasting (commit, sync, async) are available as with CREATE transactions.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nbdb = BigchainDB('http://bdb-server:9984')\nreturned_car_transfer_tx = bdb.transactions.send_async(handcrafted_car_transfer_tx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Local BigchainDB Connection URL in Python\nDESCRIPTION: Setting up the root URL for a locally running BigchainDB node using the default port 9984.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/connect.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbdb_root_url = 'http://localhost:9984'\n```\n\n----------------------------------------\n\nTITLE: Connecting to Multiple BigchainDB Nodes in Python\nDESCRIPTION: Demonstrates how to configure the BigchainDB driver to connect to multiple nodes with optional node-specific headers. The driver switches nodes on connection failures in a round-robin fashion.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-usage.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom bigchaindb_driver import BigchainDB\n\nfirst_node = 'https://first.example.com:9984'\nsecond_node = 'https://second.example.com:9984'\ncommon_headers = {'app_id': 'your_app_id', 'app_key': 'your_app_key'}\nsecond_node_headers = {'node_header': 'node_header_value'}\n\nbdb = BigchainDB(first_node,\n                 {'endpoint': second_node, 'headers': second_node_headers},\n                 headers=common_headers,\n                 timeout=None)\n```\n\n----------------------------------------\n\nTITLE: Remote BigchainDB Cluster URL Examples in Python\nDESCRIPTION: Various examples of root URLs for connecting to remote BigchainDB clusters, including different protocols, ports, and addressing methods.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/connect.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbdb_root_url = 'http://example.com:9984'\nbdb_root_url = 'http://api.example.com:9984'\nbdb_root_url = 'http://example.com:1234'\nbdb_root_url = 'http://example.com'  # http is port 80 by default\nbdb_root_url = 'https://example.com'  # https is port 443 by default\nbdb_root_url = 'http://12.34.56.123:9984'\nbdb_root_url = 'http://12.34.56.123:5000'\n```\n\n----------------------------------------\n\nTITLE: Bicycle Asset Transfer Setup\nDESCRIPTION: Setting up a bicycle asset transfer transaction by preparing and fulfilling the initial creation transaction.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom bigchaindb_driver import BigchainDB\nfrom bigchaindb_driver.offchain import fulfill_transaction, prepare_transaction\nfrom bigchaindb_driver.crypto import generate_keypair\n\nalice, bob = generate_keypair(), generate_keypair()\n\nbdb = BigchainDB('https://example.com:9984') # Use YOUR BigchainDB Root URL here\n\nbicycle_asset = {\n    'data': {\n         'bicycle': {\n              'serial_number': 'abcd1234',\n              'manufacturer': 'bkfab'\n         },\n    },\n}\n\nbicycle_asset_metadata = {\n    'planet': 'earth'\n}\n\nprepared_creation_tx = bdb.transactions.prepare(\n    operation='CREATE',\n    signers=alice.public_key,\n    asset=bicycle_asset,\n    metadata=bicycle_asset_metadata\n)\n\nfulfilled_creation_tx = bdb.transactions.fulfill(\n    prepared_creation_tx,\n    private_keys=alice.private_key\n)\n\ncreation_tx = fulfilled_creation_tx\n\noutput_index = 0\n\noutput = creation_tx['outputs'][output_index]\n\ntransfer_input = {\n    'fulfillment': output['condition']['details'],\n    'fulfills': {\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple Owners Example in BigchainDB\nDESCRIPTION: Code snippet demonstrating the setup for a multiple owners scenario, where Alice and Bob will jointly own an asset. This shows how to create keypairs and initialize a BigchainDB client.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom bigchaindb_driver.crypto import generate_keypair\n\nalice, bob = generate_keypair(), generate_keypair()\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom bigchaindb_driver import offchain\n\nfrom bigchaindb_driver import BigchainDB\n\nbdb_root_url = 'https://example.com:9984' # Use YOUR BigchainDB Root URL here\n\nbdb = BigchainDB(bdb_root_url)\n```\n\n----------------------------------------\n\nTITLE: Creating Digital Asset Definition\nDESCRIPTION: Demonstrates how to define a digital asset (bicycle) with specific properties.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/usage.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbicycle = {\n    'data': {\n        'bicycle': {\n            'serial_number': 'abcd1234',\n            'manufacturer': 'bkfab',\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a TRANSFER Transaction to BigchainDB\nDESCRIPTION: This snippet shows how to send the transfer transaction to a BigchainDB server using the async sending method. It initializes a BigchainDB client and sends the previously crafted transfer transaction.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nbdb = BigchainDB('http://bdb-server:9984')\nreturned_car_transfer_tx = bdb.transactions.send_async(handcrafted_car_transfer_tx)\n```\n\n----------------------------------------\n\nTITLE: Sending Asset Transfer Transaction to BigchainDB\nDESCRIPTION: This code sends the signed transfer transaction to the BigchainDB network using the async method, which returns immediately without waiting for validation.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nsent_car_transfer_tx = bdb.transactions.send_async(signed_car_transfer_tx)\n```\n\n----------------------------------------\n\nTITLE: Sending a Creation Transaction to BigchainDB\nDESCRIPTION: Example of sending the handcrafted token creation transaction to a BigchainDB server using the asynchronous mode. The response is stored for verification.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom bigchaindb_driver import BigchainDB\n\nbdb = BigchainDB('http://bdb-server:9984')\nreturned_creation_tx = bdb.transactions.send_async(token_creation_tx)\n```\n\n----------------------------------------\n\nTITLE: Verifying Token Transfer Transaction Results\nDESCRIPTION: Checks to verify the token transfer transaction was successful by confirming transaction equality and validating the correct ownership in the transaction inputs.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> json.dumps(returned_transfer_tx, sort_keys=True) == json.dumps(token_transfer_tx, sort_keys=True)\nTrue\n\n>>> token_transfer_tx['inputs'][0]['owners_before'][0] == carly.public_key\nTrue\n```\n\n----------------------------------------\n\nTITLE: Verifying Transaction Equality in Python\nDESCRIPTION: A simple check to verify that the returned transaction from the server matches the locally created transaction by comparing their JSON string representations.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> json.dumps(returned_transfer_tx, sort_keys=True) == json.dumps(handcrafted_transfer_tx, sort_keys=True)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Sending a Token Transfer Transaction to BigchainDB\nDESCRIPTION: Example of sending the handcrafted token transfer transaction to a BigchainDB server using the asynchronous mode. Shows how to submit a transaction that transfers tokens between users.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom bigchaindb_driver import BigchainDB\n\nbdb = BigchainDB('http://bdb-server:9984')\nreturned_transfer_tx = bdb.transactions.send_async(token_transfer_tx)\n```\n\n----------------------------------------\n\nTITLE: Validating Manual Transaction Against Driver-Generated Transaction\nDESCRIPTION: This code compares the manually crafted transaction ID with the one generated by the driver to verify they are identical, confirming the correct implementation.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nhandcrafted_car_creation_tx['id'] == signed_car_creation_tx['id']\n\n(json.dumps(handcrafted_car_creation_tx, sort_keys=True) ==\n json.dumps(signed_car_creation_tx, sort_keys=True))\n```\n\n----------------------------------------\n\nTITLE: Creating Transaction Input Structure\nDESCRIPTION: Example showing how to create the input structure for a CREATE transaction with null fulfillment and fulfills fields.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ninput_ = {\n    'fulfillment': None,\n    'fulfills': None,\n    'owners_before': (alice.public_key,)\n}\n\ninputs = (input_,)\n```\n\n----------------------------------------\n\nTITLE: Installing BigchainDB Python Driver via pip\nDESCRIPTION: Command to install the latest stable version of the BigchainDB Python Driver using pip. This is the recommended method for most users.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/quickstart.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip3 install bigchaindb_driver\n```\n\n----------------------------------------\n\nTITLE: Finalizing Transaction ID for Handcrafted Transfer\nDESCRIPTION: This snippet generates the transaction ID for the handcrafted transfer transaction by hashing the serialized JSON object. It sets the computed transaction ID into the transaction dictionary, preparing it for submission to the blockchain.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ntransfer_txid = sha3_256(json_str_tx.encode()).hexdigest()\nhandcrafted_transfer_tx['id'] = transfer_txid\n```\n\n----------------------------------------\n\nTITLE: Creating Asset Data Structure Manually\nDESCRIPTION: This code manually defines the asset data structure for a car with a VIN number, which will be used in a manual transaction creation process.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ncar_asset = {\n    'data': {\n        'car': {\n            'vin': '5YJRE11B781000196',\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning BigchainDB Python Driver Repository\nDESCRIPTION: This command clones the public GitHub repository of the BigchainDB Python Driver using Git.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-installation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git://github.com/bigchaindb/bigchaindb-driver\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Generating Transaction Conditions\nDESCRIPTION: This snippet shows an alternative way to create threshold conditions by adding subconditions instead of subfulfillments, which may be more intuitive for some users.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nalt_threshold_sha256 = ThresholdSha256(threshold=2)\n\nalt_threshold_sha256.add_subcondition(alice_ed25519.condition)\n\nalt_threshold_sha256.add_subcondition(bob_ed25519.condition)\n\nalt_threshold_sha256.condition.serialize_uri() == condition_uri\n```\n\n----------------------------------------\n\nTITLE: Upgrading BigchainDB Python Driver using pip\nDESCRIPTION: This command upgrades the BigchainDB Python Driver to the latest version available on PyPI. It uses pip, the Python package installer, to perform the upgrade.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/upgrading.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade bigchaindb_driver\n```\n\n----------------------------------------\n\nTITLE: Querying Metadata with Limit in BigchainDB with Python\nDESCRIPTION: This snippet shows how to limit the number of results returned when querying BigchainDB for metadata. It utilizes the `limit` argument in the `bdb.metadata.get()` method to restrict the output to a specified number of entries. In this example, the search is for metadata containing 'earth', and the results are limited to 2 entries.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/usage.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>> bdb.metadata.get(search='earth', limit=2)\n    [\n        {\n            'id': '3677de9c637e8e7848dd415058525306693d44cc3578d0ae4812e3570e9e6f9b',\n            'metadata': {'planet': 'earth'}\n        },\n        {\n            'id': 'd818741e0b9550dfe4b9ff0745c036664ab2b2e6e7d82a7508f2e79d587595ff',\n            'metadata': {'planet': 'earth'}\n        }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Development\nDESCRIPTION: Command to start MongoDB, Tendermint, and BigchainDB servers using Docker Compose for development and testing.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/quickstart.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d bigchaindb\n```\n\n----------------------------------------\n\nTITLE: Monitoring Transaction Validity Based on Timeout Conditions\nDESCRIPTION: This snippet demonstrates how to monitor the validity of execute and abort transactions as the timeout approaches and expires. It shows how transaction validity switches after the timeout occurs, with the execute transaction becoming invalid and the abort transaction becoming valid.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-usage.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(time_sleep - 4):\n    valid_execute = b.is_valid_transaction(tx_escrow_execute) == tx_escrow_execute\n    valid_abort = b.is_valid_transaction(tx_escrow_abort) == tx_escrow_abort\n\n    seconds_to_timeout = int(float(time_expire) - float(util.timestamp()))\n    print('tx_execute valid: {} - tx_abort valid {} ({}s to timeout)'.format(valid_execute, valid_abort, seconds_to_timeout))\n    sleep(1)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Development Environment\nDESCRIPTION: Steps to set up the BigchainDB Python Driver for local development, including forking, cloning, and creating a branch.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/quickstart.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:your_name_here/bigchaindb-driver.git\n$ cd bigchaindb-driver/\n$ git checkout -b name-of-your-bugfix-or-feature\n```\n\n----------------------------------------\n\nTITLE: Output of Transaction Validity Checks Throughout Timeout Period\nDESCRIPTION: This snippet shows the expected output when monitoring transaction validity as the timeout approaches and expires. It demonstrates that the execute transaction is valid before the timeout, while the abort transaction becomes valid after the timeout expires.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-usage.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ntx_execute valid: True - tx_abort valid False (3s to timeout)\ntx_execute valid: True - tx_abort valid False (2s to timeout)\ntx_execute valid: True - tx_abort valid False (1s to timeout)\ntx_execute valid: True - tx_abort valid False (0s to timeout)\ntx_execute valid: False - tx_abort valid True (0s to timeout)\ntx_execute valid: False - tx_abort valid True (-1s to timeout)\ntx_execute valid: False - tx_abort valid True (-2s to timeout)\ntx_execute valid: False - tx_abort valid True (-3s to timeout)\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Docker Compose\nDESCRIPTION: Shell commands demonstrating how to run tests using Docker Compose, specifically for running a subset of tests while ensuring the required servers are running.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/CONTRIBUTING.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker-compose run --rm bigchaindb-driver pytest -v tests/test_driver.py\n```\n\n----------------------------------------\n\nTITLE: Generating and Validating TRANSFER Transaction ID\nDESCRIPTION: This code generates the transaction ID for the TRANSFER transaction using SHA3-256 hashing and validates it against the driver-generated transaction ID to ensure correctness.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\njson_str_tx = json.dumps(\n    handcrafted_car_transfer_tx,\n    sort_keys=True,\n    separators=(',', ':'),\n    ensure_ascii=False,\n)\n\ncar_transfer_txid = sha3_256(json_str_tx.encode()).hexdigest()\n\nhandcrafted_car_transfer_tx['id'] = car_transfer_txid\n\nhandcrafted_car_transfer_tx['id'] == signed_car_transfer_tx['id']\n```\n\n----------------------------------------\n\nTITLE: Running Flake8 for Code Style Checking\nDESCRIPTION: Command to run flake8 for code style checking in the development environment using Docker Compose.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/quickstart.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose run --rm bigchaindb-driver flake8 bigchaindb_driver tests\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Owner Transaction with 1-of-n Signatures in BigchainDB\nDESCRIPTION: This code demonstrates the beginning of a CREATE transaction with multiple owners where only one signature is required for transfers (threshold=1). This is different from the previous example which required both owners to sign (threshold=2).\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nimport base58\nimport sha3\nfrom cryptoconditions import Ed25519Sha256, ThresholdSha256\n\nfrom bigchaindb_driver.crypto import generate_keypair\n\n\nversion = '2.0'\n\ncar_asset = {\n    'data': {\n        'car': {\n            'vin': '5YJRE11B781000196',\n        },\n    },\n}\n\nalice, bob = generate_keypair(), generate_keypair()\n\n# CRYPTO-CONDITIONS: instantiate an Ed25519 crypto-condition for alice\nalice_ed25519 = Ed25519Sha256(public_key=base58.b58decode(alice.public_key))\n\n# CRYPTO-CONDITIONS: instantiate an Ed25519 crypto-condition for bob\nbob_ed25519 = Ed25519Sha256(public_key=base58.b58decode(bob.public_key))\n\n# CRYPTO-CONDITIONS: instantiate a threshold SHA 256 crypto-condition\n# NOTICE that the threshold is set to 1, not 2\nthreshold_sha256 = ThresholdSha256(threshold=1)\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Development Environment\nDESCRIPTION: Command to run tests for the BigchainDB Python Driver in the development environment using Docker Compose and pytest.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/quickstart.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose run --rm bigchaindb-driver pytest -v\n```\n\n----------------------------------------\n\nTITLE: Docker Container BigchainDB URL Configuration in Python\nDESCRIPTION: Setting the root URL for connecting to a BigchainDB node running in a Docker container using the internal service name.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/connect.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbdb_root_url = 'http://bdb-server:9984'\n```\n\n----------------------------------------\n\nTITLE: Docker Development Commands\nDESCRIPTION: Shell commands for setting up and managing a BigchainDB development environment using Docker Compose, including starting nodes and monitoring logs.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/CONTRIBUTING.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Implicitly creates a MongoDB and Tendermint instance\n$ docker-compose up -d bigchaindb\n\n$ docker-compose logs -f\n```\n\n----------------------------------------\n\nTITLE: Sending Transaction to BigchainDB Network Using Async Method\nDESCRIPTION: This snippet demonstrates how to send a signed transaction to the BigchainDB network using the async broadcast method, which returns immediately without waiting for validation or commitment.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nsent_car_tx = bdb.transactions.send_async(signed_car_creation_tx)\n```\n\n----------------------------------------\n\nTITLE: Makefile Development Commands\nDESCRIPTION: Python code showing available make commands for common development tasks like installation, testing, documentation generation, and deployment.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/CONTRIBUTING.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> make\ninstall          Install the package to the active Python's site-packages\nstart            Run BigchainDB driver from source and daemonize it (stop with make stop)\nstop             Stop BigchainDB driver\nreset            Stop and REMOVE all containers. WARNING: you will LOSE all data stored in BigchainDB server.\ntest             Run all tests once or specify a file/test with TEST=tests/file.py::Class::test\ntest-watch       Run all, or only one with TEST=tests/file.py::Class::test, tests and wait. Every time you change code, test/s will be run again.\ndocs             Generate Sphinx HTML documentation, including API docs\nlint             Check style with flake8\ncov              Check code coverage and open the result in the browser\nclean            Remove all build, test, coverage and Python artifacts\nrelease          package and upload a release\ndist             builds source (and not for now, wheel package)\nclean-build      Remove build artifacts\nclean-pyc        Remove Python file artifacts\nclean-test       Remove test and coverage artifacts\n```\n\n----------------------------------------\n\nTITLE: Handling Double Spend Prevention\nDESCRIPTION: Shows how BigchainDB prevents double spending of assets by detecting and rejecting duplicate transfer attempts.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-usage.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom bigchaindb_driver.exceptions import BigchaindbException\ntry:\n    bdb.transactions.send_commit(fulfilled_tx_transfer_2)\nexcept BigchaindbException as e:\n    print(e.info)\n```\n\n----------------------------------------\n\nTITLE: Checking Python Version\nDESCRIPTION: Commands to check the installed Python version. The BigchainDB Python Driver requires Python 3.5+.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/quickstart.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ python --version\n\nOR\n\n$ python3 --version\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Manual Transaction Creation\nDESCRIPTION: This snippet imports the necessary libraries for manually creating and signing BigchainDB transactions, including JSON handling, base58 encoding, SHA3 hashing, and cryptoconditions.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport base58\nfrom sha3 import sha3_256\nfrom cryptoconditions import Ed25519Sha256, ThresholdSha256\n```\n\n----------------------------------------\n\nTITLE: Upgrading setuptools\nDESCRIPTION: Commands to upgrade setuptools using pip. This is a prerequisite for installing the BigchainDB Python Driver.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/quickstart.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install --upgrade setuptools\n\nOR\n\n$ pip3 install --upgrade setuptools\n```\n\n----------------------------------------\n\nTITLE: Installing BigchainDB Python Driver with pip\nDESCRIPTION: Command to install the latest stable version of the BigchainDB Python Driver using pip. Also shows how to install a specific alpha/beta version.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npip install -U bigchaindb-driver\n```\n\nLANGUAGE: text\nCODE:\n```\npip install -U bigchaindb_driver==0.5.0a4\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes in Development\nDESCRIPTION: Git commands to commit changes and push a new feature branch to GitHub during development.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/quickstart.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Version of BigchainDB Python Driver\nDESCRIPTION: Command to install a specific version (Alpha, Beta, or RC) of the BigchainDB Python Driver. This example installs version 0.5.0a4.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/quickstart.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip3 install bigchaindb_driver==0.5.0a4\n```\n\n----------------------------------------\n\nTITLE: Docker Port Binding Check Commands\nDESCRIPTION: Commands to check the port binding for a dockerized BigchainDB instance using docker-compose and make.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/connect.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose port bigchaindb 9984\n0.0.0.0:32780\n```\n\n----------------------------------------\n\nTITLE: Installing BigchainDB Driver Dependencies\nDESCRIPTION: Specifies the exact versions of pip, bumpversion, and wheel packages required for development. Also includes a direct installation from BigchainDB GitHub repository and development dependencies installation.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/requirements_dev.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npip==21.1\nbumpversion==0.5.3\nwheel==0.29.0\ngit+https://github.com/bigchaindb/bigchaindb.git\n\n-e .[dev]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu\nDESCRIPTION: Commands to install necessary dependencies on Ubuntu 14.04 and 16.04 for cryptography and cryptoconditions libraries.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/quickstart.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get update\n\n$ sudo apt-get install python3-dev libssl-dev libffi-dev\n```\n\n----------------------------------------\n\nTITLE: Docker External Connection URL in Python\nDESCRIPTION: Setting the root URL for connecting to a dockerized BigchainDB node from outside the container network.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/connect.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbdb_root_url = 'http://0.0.0.0:32780'\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx Documentation Dependencies for BigchainDB Driver\nDESCRIPTION: Requirements file specifying Python packages and their versions needed for building documentation with Sphinx and Read the Docs. Includes packages for theme customization, API documentation, and interactive code examples.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n# we need this for readthedocs\n\nSphinx~=1.0\nsphinx-autobuild\nsphinxcontrib-autorun\nsphinxcontrib-napoleon>=0.4.4\nsphinx_rtd_theme\nsphinxcontrib-httpdomain\nipython\nmatplotlib\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure in RST\nDESCRIPTION: Sphinx documentation root file that defines the table of contents tree and documentation structure for the BigchainDB Python Driver. It includes navigation links to various sections like quickstart, usage, installation and API reference.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   ← Back to All BigchainDB Docs <https://bigchaindb.readthedocs.io/en/latest/index.html>\n   quickstart\n   connect\n   usage\n   advanced-usage\n   handcraft\n   advanced-installation\n   upgrading\n   libref\n   aboutthedocs\n   contributing\n   authors\n   changelog\n```\n\n----------------------------------------\n\nTITLE: Checking pip Version\nDESCRIPTION: Commands to check the installed pip version. A recent Python 3 version of pip is required.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/quickstart.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip --version\n\nOR\n\n$ pip3 --version\n```\n\n----------------------------------------\n\nTITLE: Including Authors RST File in BigchainDB Documentation\nDESCRIPTION: RST directive that includes the AUTHORS.rst file from the parent directory. The file also contains copyright and dual-licensing information for BigchainDB GmbH.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/authors.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. Copyright BigchainDB GmbH and BigchainDB contributors\n   SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\n   Code is Apache-2.0 and docs are CC-BY-4.0\n\n.. include:: ../AUTHORS.rst\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation Manually\nDESCRIPTION: Command to manually build HTML documentation from within the container's bash session.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/aboutthedocs.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nroot@a651959a1f2d:/usr/src/app# make -C docs html\n```\n\n----------------------------------------\n\nTITLE: Including Contributing Guidelines in RST Documentation\nDESCRIPTION: RST directive to include external CONTRIBUTING.rst file along with copyright and license information specified in comments.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/contributing.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. Copyright BigchainDB GmbH and BigchainDB contributors\n   SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\n   Code is Apache-2.0 and docs are CC-BY-4.0\n\n.. include:: ../CONTRIBUTING.rst\n```\n\n----------------------------------------\n\nTITLE: Python Version String Example\nDESCRIPTION: Example of Python semantic version string format used in __init__.py file\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/RELEASE_PROCESS.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n__version__ = \"0.9.0\"\n```\n\n----------------------------------------\n\nTITLE: Downloading BigchainDB Python Driver Tarball\nDESCRIPTION: This command downloads the tarball of the BigchainDB Python Driver's master branch using curl.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-installation.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl  -OL https://github.com/bigchaindb/bigchaindb-driver/tarball/master\n```\n\n----------------------------------------\n\nTITLE: Cleaning Python Cache Files Command\nDESCRIPTION: Bash command to change ownership of project files when encountering Makefile errors during release\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/RELEASE_PROCESS.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown -R $(whoami):$(whoami) .\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Transaction Dictionary in Python\nDESCRIPTION: Example of a complete BigchainDB transaction dictionary structure showing all required fields including operation, asset, version, outputs, inputs, and metadata.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/handcraft.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n    'operation': 'CREATE',\n    'asset': {\n        'data': {\n            'bicycle': {\n                'manufacturer': 'bkfab',\n                'serial_number': 'abcd1234'\n            }\n        }\n    },\n    'version': '2.0',\n    'outputs': [\n        {\n            'condition': {\n                'details': {\n                    'public_key': '2GoYB8cMZQrUBZzx9BH9Bq92eGWXBy3oanDXbRK3YRpW',\n                    'type': 'ed25519-sha-256'\n                },\n                'uri': 'ni:///sha-256;1hBHivh6Nxhgi2b1ndUbP55ZlyUFdLC9BipPUBWth7U?fpt=ed25519-sha-256&cost=131072'\n            },\n            'public_keys': [\n                '2GoYB8cMZQrUBZzx9BH9Bq92eGWXBy3oanDXbRK3YRpW'\n            ],\n            'amount': '1'\n        }\n    ],\n    'inputs': [\n        {\n            'fulfills': None,\n            'owners_before': [\n                '2GoYB8cMZQrUBZzx9BH9Bq92eGWXBy3oanDXbRK3YRpW'\n            ],\n            'fulfillment': {\n                'public_key': '2GoYB8cMZQrUBZzx9BH9Bq92eGWXBy3oanDXbRK3YRpW',\n                'type': 'ed25519-sha-256'\n            }\n        }\n    ],\n    'id': None,\n    'metadata': {\n        'planet': 'earth'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Changelog in RST Documentation\nDESCRIPTION: RST include directive to incorporate the project's CHANGELOG.rst file into the documentation. The file includes copyright and license information for both code (Apache-2.0) and documentation (CC-BY-4.0).\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/changelog.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. Copyright BigchainDB GmbH and BigchainDB contributors\n   SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\n   Code is Apache-2.0 and docs are CC-BY-4.0\n\n.. include:: ../CHANGELOG.rst\n```\n\n----------------------------------------\n\nTITLE: Starting Bash Session in Documentation Container\nDESCRIPTION: Command to start an interactive bash session in the documentation container.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/aboutthedocs.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose run --rm bdocs bash\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Docker Compose\nDESCRIPTION: Command to build the documentation using Docker Compose in detached mode.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/aboutthedocs.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d bdocs\n```\n\n----------------------------------------\n\nTITLE: Installing BigchainDB Python Driver from Source\nDESCRIPTION: This command installs the BigchainDB Python Driver from the source code. It should be run in the directory containing setup.py.\nSOURCE: https://github.com/bigchaindb/bigchaindb-driver/blob/master/docs/advanced-installation.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py install\n```"
  }
]